
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	c0 2e 00 20 d9 49 00 08 8b cb 00 08 91 49 00 08     ... .I.......I..
 8000010:	91 49 00 08 91 49 00 08 91 49 00 08 00 00 00 00     .I...I...I......
	...
 800002c:	fd 40 00 08 91 49 00 08 00 00 00 00 a9 40 00 08     .@...I.......@..
 800003c:	11 81 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000050:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000060:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000070:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000080:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000090:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000a0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000b0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000c0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000d0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000e0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 80000f0:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000100:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000110:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000120:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000130:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000140:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000150:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000160:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000170:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000180:	d5 41 00 08 d5 41 00 08 d5 41 00 08 d5 41 00 08     .A...A...A...A..
 8000190:	d5 41 00 08                                         .A..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	4605      	mov	r5, r0
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000e6e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000e70:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000e72:	6820      	ldr	r0, [r4, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8000e74:	f00c fea5 	bl	800dbc2 <z_device_ready>
 8000e78:	b160      	cbz	r0, 8000e94 <ws2812_pwm_init+0x2c>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	b96b      	cbnz	r3, 8000e9a <ws2812_pwm_init+0x32>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	7e22      	ldrb	r2, [r4, #24]
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d232      	bcs.n	8000eec <ws2812_pwm_init+0x84>
        switch (cfg->color_mapping[i]) {
 8000e86:	69e2      	ldr	r2, [r4, #28]
 8000e88:	5cd2      	ldrb	r2, [r2, r3]
 8000e8a:	2a03      	cmp	r2, #3
 8000e8c:	d81a      	bhi.n	8000ec4 <ws2812_pwm_init+0x5c>
    for (i = 0; i < cfg->num_colors; i++) {
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	e7f5      	b.n	8000e80 <ws2812_pwm_init+0x18>
 8000e94:	f06f 0312 	mvn.w	r3, #18
 8000e98:	e7f0      	b.n	8000e7c <ws2812_pwm_init+0x14>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <ws2812_pwm_init+0xf0>)
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <ws2812_pwm_init+0xf4>)
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	08db      	lsrs	r3, r3, #3
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f361 0202 	bfi	r2, r1, #0, #3
 8000eac:	f36f 02c5 	bfc	r2, #3, #3
 8000eb0:	f363 128f 	bfi	r2, r3, #6, #10
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	6819      	ldr	r1, [r3, #0]
 8000eb8:	4829      	ldr	r0, [pc, #164]	; (8000f60 <ws2812_pwm_init+0xf8>)
 8000eba:	f002 fc7f 	bl	80037bc <log_1>
        return -ENODEV;
 8000ebe:	f06f 0012 	mvn.w	r0, #18
 8000ec2:	e043      	b.n	8000f4c <ws2812_pwm_init+0xe4>
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ws2812_pwm_init+0xf0>)
 8000ec6:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <ws2812_pwm_init+0xf4>)
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	08db      	lsrs	r3, r3, #3
            case LED_COLOR_ID_RED:
            case LED_COLOR_ID_GREEN:
            case LED_COLOR_ID_BLUE:
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	f361 0202 	bfi	r2, r1, #0, #3
 8000ed6:	f36f 02c5 	bfc	r2, #3, #3
 8000eda:	f363 128f 	bfi	r2, r3, #6, #10
 8000ede:	6829      	ldr	r1, [r5, #0]
 8000ee0:	4820      	ldr	r0, [pc, #128]	; (8000f64 <ws2812_pwm_init+0xfc>)
 8000ee2:	f002 fc6b 	bl	80037bc <log_1>
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ee6:	f06f 0015 	mvn.w	r0, #21
 8000eea:	e02f      	b.n	8000f4c <ws2812_pwm_init+0xe4>
        }
    }

    uint64_t cycles_per_sec;
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000eec:	6820      	ldr	r0, [r4, #0]
 8000eee:	6861      	ldr	r1, [r4, #4]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
 8000ef0:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	466a      	mov	r2, sp
 8000ef6:	4798      	blx	r3

    ctx->pwm_period_cycles = (uint32_t)
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ef8:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8000efa:	9800      	ldr	r0, [sp, #0]
 8000efc:	fba0 0105 	umull	r0, r1, r0, r5
 8000f00:	a313      	add	r3, pc, #76	; (adr r3, 8000f50 <ws2812_pwm_init+0xe8>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000f0a:	fb05 110c 	mla	r1, r5, ip, r1
 8000f0e:	f7ff fd65 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_period_cycles = (uint32_t)
 8000f12:	6030      	str	r0, [r6, #0]
    ctx->pwm_t0h_cycles = (uint32_t)
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f14:	8c25      	ldrh	r5, [r4, #32]
 8000f16:	9800      	ldr	r0, [sp, #0]
 8000f18:	fba0 0105 	umull	r0, r1, r0, r5
 8000f1c:	a30c      	add	r3, pc, #48	; (adr r3, 8000f50 <ws2812_pwm_init+0xe8>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f8dd c004 	ldr.w	ip, [sp, #4]
 8000f26:	fb05 110c 	mla	r1, r5, ip, r1
 8000f2a:	f7ff fd57 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f2e:	6070      	str	r0, [r6, #4]
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f30:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8000f32:	9800      	ldr	r0, [sp, #0]
 8000f34:	fba0 0104 	umull	r0, r1, r0, r4
 8000f38:	a305      	add	r3, pc, #20	; (adr r3, 8000f50 <ws2812_pwm_init+0xe8>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	9d01      	ldr	r5, [sp, #4]
 8000f40:	fb04 1105 	mla	r1, r4, r5, r1
 8000f44:	f7ff fd4a 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f48:	60b0      	str	r0, [r6, #8]

    return 0;
 8000f4a:	2000      	movs	r0, #0
}
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	3b9aca00 	.word	0x3b9aca00
 8000f54:	00000000 	.word	0x00000000
 8000f58:	0800efcc 	.word	0x0800efcc
 8000f5c:	0800ef6c 	.word	0x0800ef6c
 8000f60:	08010260 	.word	0x08010260
 8000f64:	0801027c 	.word	0x0801027c

08000f68 <_dtoa_r>:
 8000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f6e:	b099      	sub	sp, #100	; 0x64
 8000f70:	4616      	mov	r6, r2
 8000f72:	461f      	mov	r7, r3
 8000f74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000f78:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000f7c:	4605      	mov	r5, r0
 8000f7e:	b974      	cbnz	r4, 8000f9e <_dtoa_r+0x36>
 8000f80:	2010      	movs	r0, #16
 8000f82:	f009 fd51 	bl	800aa28 <malloc>
 8000f86:	4602      	mov	r2, r0
 8000f88:	6268      	str	r0, [r5, #36]	; 0x24
 8000f8a:	b920      	cbnz	r0, 8000f96 <_dtoa_r+0x2e>
 8000f8c:	4ba8      	ldr	r3, [pc, #672]	; (8001230 <_dtoa_r+0x2c8>)
 8000f8e:	21ea      	movs	r1, #234	; 0xea
 8000f90:	48a8      	ldr	r0, [pc, #672]	; (8001234 <_dtoa_r+0x2cc>)
 8000f92:	f00a fc79 	bl	800b888 <__assert_func>
 8000f96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000f9a:	6004      	str	r4, [r0, #0]
 8000f9c:	60c4      	str	r4, [r0, #12]
 8000f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	b151      	cbz	r1, 8000fba <_dtoa_r+0x52>
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	604a      	str	r2, [r1, #4]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4093      	lsls	r3, r2
 8000fac:	608b      	str	r3, [r1, #8]
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f00a f996 	bl	800b2e0 <_Bfree>
 8000fb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	1e3b      	subs	r3, r7, #0
 8000fbc:	bfb9      	ittee	lt
 8000fbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000fc2:	9305      	strlt	r3, [sp, #20]
 8000fc4:	2300      	movge	r3, #0
 8000fc6:	f8c8 3000 	strge.w	r3, [r8]
 8000fca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000fce:	4b9a      	ldr	r3, [pc, #616]	; (8001238 <_dtoa_r+0x2d0>)
 8000fd0:	bfbc      	itt	lt
 8000fd2:	2201      	movlt	r2, #1
 8000fd4:	f8c8 2000 	strlt.w	r2, [r8]
 8000fd8:	ea33 0309 	bics.w	r3, r3, r9
 8000fdc:	d119      	bne.n	8001012 <_dtoa_r+0xaa>
 8000fde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fe0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000fea:	4333      	orrs	r3, r6
 8000fec:	f000 8580 	beq.w	8001af0 <_dtoa_r+0xb88>
 8000ff0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ff2:	b953      	cbnz	r3, 800100a <_dtoa_r+0xa2>
 8000ff4:	4b91      	ldr	r3, [pc, #580]	; (800123c <_dtoa_r+0x2d4>)
 8000ff6:	e022      	b.n	800103e <_dtoa_r+0xd6>
 8000ff8:	4b91      	ldr	r3, [pc, #580]	; (8001240 <_dtoa_r+0x2d8>)
 8000ffa:	9303      	str	r3, [sp, #12]
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	9803      	ldr	r0, [sp, #12]
 8001004:	b019      	add	sp, #100	; 0x64
 8001006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800100a:	4b8c      	ldr	r3, [pc, #560]	; (800123c <_dtoa_r+0x2d4>)
 800100c:	9303      	str	r3, [sp, #12]
 800100e:	3303      	adds	r3, #3
 8001010:	e7f5      	b.n	8000ffe <_dtoa_r+0x96>
 8001012:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001016:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800101a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800101e:	2200      	movs	r2, #0
 8001020:	2300      	movs	r3, #0
 8001022:	f7ff fd4b 	bl	8000abc <__aeabi_dcmpeq>
 8001026:	4680      	mov	r8, r0
 8001028:	b158      	cbz	r0, 8001042 <_dtoa_r+0xda>
 800102a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800102c:	2301      	movs	r3, #1
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8559 	beq.w	8001aea <_dtoa_r+0xb82>
 8001038:	4882      	ldr	r0, [pc, #520]	; (8001244 <_dtoa_r+0x2dc>)
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	1e43      	subs	r3, r0, #1
 800103e:	9303      	str	r3, [sp, #12]
 8001040:	e7df      	b.n	8001002 <_dtoa_r+0x9a>
 8001042:	ab16      	add	r3, sp, #88	; 0x58
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	ab17      	add	r3, sp, #92	; 0x5c
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4628      	mov	r0, r5
 800104c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001050:	f00a fbbe 	bl	800b7d0 <__d2b>
 8001054:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001058:	4683      	mov	fp, r0
 800105a:	2c00      	cmp	r4, #0
 800105c:	d07e      	beq.n	800115c <_dtoa_r+0x1f4>
 800105e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001060:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800106c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001070:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001074:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001078:	4b73      	ldr	r3, [pc, #460]	; (8001248 <_dtoa_r+0x2e0>)
 800107a:	2200      	movs	r2, #0
 800107c:	f7ff f8e4 	bl	8000248 <__aeabi_dsub>
 8001080:	a365      	add	r3, pc, #404	; (adr r3, 8001218 <_dtoa_r+0x2b0>)
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fa97 	bl	80005b8 <__aeabi_dmul>
 800108a:	a365      	add	r3, pc, #404	; (adr r3, 8001220 <_dtoa_r+0x2b8>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff f8dc 	bl	800024c <__adddf3>
 8001094:	4606      	mov	r6, r0
 8001096:	4620      	mov	r0, r4
 8001098:	460f      	mov	r7, r1
 800109a:	f7ff fa23 	bl	80004e4 <__aeabi_i2d>
 800109e:	a362      	add	r3, pc, #392	; (adr r3, 8001228 <_dtoa_r+0x2c0>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fa88 	bl	80005b8 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4630      	mov	r0, r6
 80010ae:	4639      	mov	r1, r7
 80010b0:	f7ff f8cc 	bl	800024c <__adddf3>
 80010b4:	4606      	mov	r6, r0
 80010b6:	460f      	mov	r7, r1
 80010b8:	f7ff fd48 	bl	8000b4c <__aeabi_d2iz>
 80010bc:	2200      	movs	r2, #0
 80010be:	4682      	mov	sl, r0
 80010c0:	2300      	movs	r3, #0
 80010c2:	4630      	mov	r0, r6
 80010c4:	4639      	mov	r1, r7
 80010c6:	f7ff fd03 	bl	8000ad0 <__aeabi_dcmplt>
 80010ca:	b148      	cbz	r0, 80010e0 <_dtoa_r+0x178>
 80010cc:	4650      	mov	r0, sl
 80010ce:	f7ff fa09 	bl	80004e4 <__aeabi_i2d>
 80010d2:	4632      	mov	r2, r6
 80010d4:	463b      	mov	r3, r7
 80010d6:	f7ff fcf1 	bl	8000abc <__aeabi_dcmpeq>
 80010da:	b908      	cbnz	r0, 80010e0 <_dtoa_r+0x178>
 80010dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010e0:	f1ba 0f16 	cmp.w	sl, #22
 80010e4:	d857      	bhi.n	8001196 <_dtoa_r+0x22e>
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <_dtoa_r+0x2e4>)
 80010e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010f4:	f7ff fcec 	bl	8000ad0 <__aeabi_dcmplt>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d04e      	beq.n	800119a <_dtoa_r+0x232>
 80010fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001100:	2300      	movs	r3, #0
 8001102:	930f      	str	r3, [sp, #60]	; 0x3c
 8001104:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001106:	1b1c      	subs	r4, r3, r4
 8001108:	1e63      	subs	r3, r4, #1
 800110a:	9309      	str	r3, [sp, #36]	; 0x24
 800110c:	bf45      	ittet	mi
 800110e:	f1c4 0301 	rsbmi	r3, r4, #1
 8001112:	9306      	strmi	r3, [sp, #24]
 8001114:	2300      	movpl	r3, #0
 8001116:	2300      	movmi	r3, #0
 8001118:	bf4c      	ite	mi
 800111a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800111c:	9306      	strpl	r3, [sp, #24]
 800111e:	f1ba 0f00 	cmp.w	sl, #0
 8001122:	db3c      	blt.n	800119e <_dtoa_r+0x236>
 8001124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001126:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800112a:	4453      	add	r3, sl
 800112c:	9309      	str	r3, [sp, #36]	; 0x24
 800112e:	2300      	movs	r3, #0
 8001130:	930a      	str	r3, [sp, #40]	; 0x28
 8001132:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001134:	2b09      	cmp	r3, #9
 8001136:	f200 808d 	bhi.w	8001254 <_dtoa_r+0x2ec>
 800113a:	2b05      	cmp	r3, #5
 800113c:	bfc4      	itt	gt
 800113e:	3b04      	subgt	r3, #4
 8001140:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001144:	f1a3 0302 	sub.w	r3, r3, #2
 8001148:	bfcc      	ite	gt
 800114a:	2400      	movgt	r4, #0
 800114c:	2401      	movle	r4, #1
 800114e:	2b03      	cmp	r3, #3
 8001150:	f200 808c 	bhi.w	800126c <_dtoa_r+0x304>
 8001154:	e8df f003 	tbb	[pc, r3]
 8001158:	5b4d4f2d 	.word	0x5b4d4f2d
 800115c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001160:	441c      	add	r4, r3
 8001162:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001166:	2b20      	cmp	r3, #32
 8001168:	bfc3      	ittte	gt
 800116a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800116e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001172:	fa09 f303 	lslgt.w	r3, r9, r3
 8001176:	f1c3 0320 	rsble	r3, r3, #32
 800117a:	bfc6      	itte	gt
 800117c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001180:	4318      	orrgt	r0, r3
 8001182:	fa06 f003 	lslle.w	r0, r6, r3
 8001186:	f7ff f99d 	bl	80004c4 <__aeabi_ui2d>
 800118a:	2301      	movs	r3, #1
 800118c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001190:	3c01      	subs	r4, #1
 8001192:	9313      	str	r3, [sp, #76]	; 0x4c
 8001194:	e770      	b.n	8001078 <_dtoa_r+0x110>
 8001196:	2301      	movs	r3, #1
 8001198:	e7b3      	b.n	8001102 <_dtoa_r+0x19a>
 800119a:	900f      	str	r0, [sp, #60]	; 0x3c
 800119c:	e7b2      	b.n	8001104 <_dtoa_r+0x19c>
 800119e:	9b06      	ldr	r3, [sp, #24]
 80011a0:	eba3 030a 	sub.w	r3, r3, sl
 80011a4:	9306      	str	r3, [sp, #24]
 80011a6:	f1ca 0300 	rsb	r3, sl, #0
 80011aa:	930a      	str	r3, [sp, #40]	; 0x28
 80011ac:	2300      	movs	r3, #0
 80011ae:	930e      	str	r3, [sp, #56]	; 0x38
 80011b0:	e7bf      	b.n	8001132 <_dtoa_r+0x1ca>
 80011b2:	2300      	movs	r3, #0
 80011b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80011b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dc5a      	bgt.n	8001272 <_dtoa_r+0x30a>
 80011bc:	f04f 0901 	mov.w	r9, #1
 80011c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80011c4:	464b      	mov	r3, r9
 80011c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80011ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011cc:	2200      	movs	r2, #0
 80011ce:	6042      	str	r2, [r0, #4]
 80011d0:	2204      	movs	r2, #4
 80011d2:	f102 0614 	add.w	r6, r2, #20
 80011d6:	429e      	cmp	r6, r3
 80011d8:	6841      	ldr	r1, [r0, #4]
 80011da:	d950      	bls.n	800127e <_dtoa_r+0x316>
 80011dc:	4628      	mov	r0, r5
 80011de:	f00a f83f 	bl	800b260 <_Balloc>
 80011e2:	9003      	str	r0, [sp, #12]
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d14e      	bne.n	8001286 <_dtoa_r+0x31e>
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <_dtoa_r+0x2e8>)
 80011ea:	4602      	mov	r2, r0
 80011ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011f0:	e6ce      	b.n	8000f90 <_dtoa_r+0x28>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e7de      	b.n	80011b4 <_dtoa_r+0x24c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80011fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011fc:	eb0a 0903 	add.w	r9, sl, r3
 8001200:	f109 0301 	add.w	r3, r9, #1
 8001204:	2b01      	cmp	r3, #1
 8001206:	9308      	str	r3, [sp, #32]
 8001208:	bfb8      	it	lt
 800120a:	2301      	movlt	r3, #1
 800120c:	e7dd      	b.n	80011ca <_dtoa_r+0x262>
 800120e:	2301      	movs	r3, #1
 8001210:	e7f2      	b.n	80011f8 <_dtoa_r+0x290>
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	636f4361 	.word	0x636f4361
 800121c:	3fd287a7 	.word	0x3fd287a7
 8001220:	8b60c8b3 	.word	0x8b60c8b3
 8001224:	3fc68a28 	.word	0x3fc68a28
 8001228:	509f79fb 	.word	0x509f79fb
 800122c:	3fd34413 	.word	0x3fd34413
 8001230:	08010696 	.word	0x08010696
 8001234:	080106ad 	.word	0x080106ad
 8001238:	7ff00000 	.word	0x7ff00000
 800123c:	08010692 	.word	0x08010692
 8001240:	08010689 	.word	0x08010689
 8001244:	08010666 	.word	0x08010666
 8001248:	3ff80000 	.word	0x3ff80000
 800124c:	0800f0b0 	.word	0x0800f0b0
 8001250:	08010707 	.word	0x08010707
 8001254:	2401      	movs	r4, #1
 8001256:	2300      	movs	r3, #0
 8001258:	9322      	str	r3, [sp, #136]	; 0x88
 800125a:	940b      	str	r4, [sp, #44]	; 0x2c
 800125c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001260:	2200      	movs	r2, #0
 8001262:	f8cd 9020 	str.w	r9, [sp, #32]
 8001266:	2312      	movs	r3, #18
 8001268:	9223      	str	r2, [sp, #140]	; 0x8c
 800126a:	e7ae      	b.n	80011ca <_dtoa_r+0x262>
 800126c:	2301      	movs	r3, #1
 800126e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001270:	e7f4      	b.n	800125c <_dtoa_r+0x2f4>
 8001272:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001276:	f8cd 9020 	str.w	r9, [sp, #32]
 800127a:	464b      	mov	r3, r9
 800127c:	e7a5      	b.n	80011ca <_dtoa_r+0x262>
 800127e:	3101      	adds	r1, #1
 8001280:	6041      	str	r1, [r0, #4]
 8001282:	0052      	lsls	r2, r2, #1
 8001284:	e7a5      	b.n	80011d2 <_dtoa_r+0x26a>
 8001286:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001288:	9a03      	ldr	r2, [sp, #12]
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	9b08      	ldr	r3, [sp, #32]
 800128e:	2b0e      	cmp	r3, #14
 8001290:	f200 80a8 	bhi.w	80013e4 <_dtoa_r+0x47c>
 8001294:	2c00      	cmp	r4, #0
 8001296:	f000 80a5 	beq.w	80013e4 <_dtoa_r+0x47c>
 800129a:	f1ba 0f00 	cmp.w	sl, #0
 800129e:	dd34      	ble.n	800130a <_dtoa_r+0x3a2>
 80012a0:	4a9a      	ldr	r2, [pc, #616]	; (800150c <_dtoa_r+0x5a4>)
 80012a2:	f00a 030f 	and.w	r3, sl, #15
 80012a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80012aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80012b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80012b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80012ba:	d016      	beq.n	80012ea <_dtoa_r+0x382>
 80012bc:	4b94      	ldr	r3, [pc, #592]	; (8001510 <_dtoa_r+0x5a8>)
 80012be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012c6:	f7ff faa1 	bl	800080c <__aeabi_ddiv>
 80012ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012ce:	f004 040f 	and.w	r4, r4, #15
 80012d2:	2703      	movs	r7, #3
 80012d4:	4e8e      	ldr	r6, [pc, #568]	; (8001510 <_dtoa_r+0x5a8>)
 80012d6:	b954      	cbnz	r4, 80012ee <_dtoa_r+0x386>
 80012d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012e0:	f7ff fa94 	bl	800080c <__aeabi_ddiv>
 80012e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012e8:	e029      	b.n	800133e <_dtoa_r+0x3d6>
 80012ea:	2702      	movs	r7, #2
 80012ec:	e7f2      	b.n	80012d4 <_dtoa_r+0x36c>
 80012ee:	07e1      	lsls	r1, r4, #31
 80012f0:	d508      	bpl.n	8001304 <_dtoa_r+0x39c>
 80012f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012fa:	f7ff f95d 	bl	80005b8 <__aeabi_dmul>
 80012fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001302:	3701      	adds	r7, #1
 8001304:	1064      	asrs	r4, r4, #1
 8001306:	3608      	adds	r6, #8
 8001308:	e7e5      	b.n	80012d6 <_dtoa_r+0x36e>
 800130a:	f000 80a5 	beq.w	8001458 <_dtoa_r+0x4f0>
 800130e:	f1ca 0400 	rsb	r4, sl, #0
 8001312:	4b7e      	ldr	r3, [pc, #504]	; (800150c <_dtoa_r+0x5a4>)
 8001314:	4e7e      	ldr	r6, [pc, #504]	; (8001510 <_dtoa_r+0x5a8>)
 8001316:	f004 020f 	and.w	r2, r4, #15
 800131a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001326:	f7ff f947 	bl	80005b8 <__aeabi_dmul>
 800132a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800132e:	1124      	asrs	r4, r4, #4
 8001330:	2300      	movs	r3, #0
 8001332:	2702      	movs	r7, #2
 8001334:	2c00      	cmp	r4, #0
 8001336:	f040 8084 	bne.w	8001442 <_dtoa_r+0x4da>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1d2      	bne.n	80012e4 <_dtoa_r+0x37c>
 800133e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 808b 	beq.w	800145c <_dtoa_r+0x4f4>
 8001346:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800134a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800134e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <_dtoa_r+0x5ac>)
 8001354:	2200      	movs	r2, #0
 8001356:	f7ff fbbb 	bl	8000ad0 <__aeabi_dcmplt>
 800135a:	2800      	cmp	r0, #0
 800135c:	d07e      	beq.n	800145c <_dtoa_r+0x4f4>
 800135e:	9b08      	ldr	r3, [sp, #32]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d07b      	beq.n	800145c <_dtoa_r+0x4f4>
 8001364:	f1b9 0f00 	cmp.w	r9, #0
 8001368:	dd38      	ble.n	80013dc <_dtoa_r+0x474>
 800136a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800136e:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <_dtoa_r+0x5b0>)
 8001370:	2200      	movs	r2, #0
 8001372:	f7ff f921 	bl	80005b8 <__aeabi_dmul>
 8001376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800137a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800137e:	3701      	adds	r7, #1
 8001380:	464c      	mov	r4, r9
 8001382:	4638      	mov	r0, r7
 8001384:	f7ff f8ae 	bl	80004e4 <__aeabi_i2d>
 8001388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800138c:	f7ff f914 	bl	80005b8 <__aeabi_dmul>
 8001390:	4b62      	ldr	r3, [pc, #392]	; (800151c <_dtoa_r+0x5b4>)
 8001392:	2200      	movs	r2, #0
 8001394:	f7fe ff5a 	bl	800024c <__adddf3>
 8001398:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800139c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013a0:	9611      	str	r6, [sp, #68]	; 0x44
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	d15d      	bne.n	8001462 <_dtoa_r+0x4fa>
 80013a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <_dtoa_r+0x5b8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f7fe ff4b 	bl	8000248 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013bc:	4633      	mov	r3, r6
 80013be:	f7ff fba5 	bl	8000b0c <__aeabi_dcmpgt>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	f040 829c 	bne.w	8001900 <_dtoa_r+0x998>
 80013c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80013d2:	f7ff fb7d 	bl	8000ad0 <__aeabi_dcmplt>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	f040 8290 	bne.w	80018fc <_dtoa_r+0x994>
 80013dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80013e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f2c0 8152 	blt.w	8001690 <_dtoa_r+0x728>
 80013ec:	f1ba 0f0e 	cmp.w	sl, #14
 80013f0:	f300 814e 	bgt.w	8001690 <_dtoa_r+0x728>
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <_dtoa_r+0x5a4>)
 80013f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80013fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001404:	2b00      	cmp	r3, #0
 8001406:	f280 80db 	bge.w	80015c0 <_dtoa_r+0x658>
 800140a:	9b08      	ldr	r3, [sp, #32]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f300 80d7 	bgt.w	80015c0 <_dtoa_r+0x658>
 8001412:	f040 8272 	bne.w	80018fa <_dtoa_r+0x992>
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <_dtoa_r+0x5b8>)
 8001418:	2200      	movs	r2, #0
 800141a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800141e:	f7ff f8cb 	bl	80005b8 <__aeabi_dmul>
 8001422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001426:	f7ff fb67 	bl	8000af8 <__aeabi_dcmpge>
 800142a:	9c08      	ldr	r4, [sp, #32]
 800142c:	4626      	mov	r6, r4
 800142e:	2800      	cmp	r0, #0
 8001430:	f040 8248 	bne.w	80018c4 <_dtoa_r+0x95c>
 8001434:	9f03      	ldr	r7, [sp, #12]
 8001436:	2331      	movs	r3, #49	; 0x31
 8001438:	f807 3b01 	strb.w	r3, [r7], #1
 800143c:	f10a 0a01 	add.w	sl, sl, #1
 8001440:	e244      	b.n	80018cc <_dtoa_r+0x964>
 8001442:	07e2      	lsls	r2, r4, #31
 8001444:	d505      	bpl.n	8001452 <_dtoa_r+0x4ea>
 8001446:	e9d6 2300 	ldrd	r2, r3, [r6]
 800144a:	f7ff f8b5 	bl	80005b8 <__aeabi_dmul>
 800144e:	3701      	adds	r7, #1
 8001450:	2301      	movs	r3, #1
 8001452:	1064      	asrs	r4, r4, #1
 8001454:	3608      	adds	r6, #8
 8001456:	e76d      	b.n	8001334 <_dtoa_r+0x3cc>
 8001458:	2702      	movs	r7, #2
 800145a:	e770      	b.n	800133e <_dtoa_r+0x3d6>
 800145c:	9c08      	ldr	r4, [sp, #32]
 800145e:	46d0      	mov	r8, sl
 8001460:	e78f      	b.n	8001382 <_dtoa_r+0x41a>
 8001462:	9903      	ldr	r1, [sp, #12]
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <_dtoa_r+0x5a4>)
 8001466:	4421      	add	r1, r4
 8001468:	9112      	str	r1, [sp, #72]	; 0x48
 800146a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800146c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001470:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001474:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001478:	2900      	cmp	r1, #0
 800147a:	d055      	beq.n	8001528 <_dtoa_r+0x5c0>
 800147c:	4929      	ldr	r1, [pc, #164]	; (8001524 <_dtoa_r+0x5bc>)
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff f9c4 	bl	800080c <__aeabi_ddiv>
 8001484:	463b      	mov	r3, r7
 8001486:	4632      	mov	r2, r6
 8001488:	f7fe fede 	bl	8000248 <__aeabi_dsub>
 800148c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001490:	9f03      	ldr	r7, [sp, #12]
 8001492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001496:	f7ff fb59 	bl	8000b4c <__aeabi_d2iz>
 800149a:	4604      	mov	r4, r0
 800149c:	f7ff f822 	bl	80004e4 <__aeabi_i2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014a8:	f7fe fece 	bl	8000248 <__aeabi_dsub>
 80014ac:	3430      	adds	r4, #48	; 0x30
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014b6:	f807 4b01 	strb.w	r4, [r7], #1
 80014ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014be:	f7ff fb07 	bl	8000ad0 <__aeabi_dcmplt>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d174      	bne.n	80015b0 <_dtoa_r+0x648>
 80014c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014ca:	4912      	ldr	r1, [pc, #72]	; (8001514 <_dtoa_r+0x5ac>)
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7fe febb 	bl	8000248 <__aeabi_dsub>
 80014d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014d6:	f7ff fafb 	bl	8000ad0 <__aeabi_dcmplt>
 80014da:	2800      	cmp	r0, #0
 80014dc:	f040 80b7 	bne.w	800164e <_dtoa_r+0x6e6>
 80014e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014e2:	429f      	cmp	r7, r3
 80014e4:	f43f af7a 	beq.w	80013dc <_dtoa_r+0x474>
 80014e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <_dtoa_r+0x5b0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	f7ff f862 	bl	80005b8 <__aeabi_dmul>
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_dtoa_r+0x5b0>)
 80014f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014fa:	2200      	movs	r2, #0
 80014fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001500:	f7ff f85a 	bl	80005b8 <__aeabi_dmul>
 8001504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001508:	e7c3      	b.n	8001492 <_dtoa_r+0x52a>
 800150a:	bf00      	nop
 800150c:	0800f0b0 	.word	0x0800f0b0
 8001510:	0800f088 	.word	0x0800f088
 8001514:	3ff00000 	.word	0x3ff00000
 8001518:	40240000 	.word	0x40240000
 800151c:	401c0000 	.word	0x401c0000
 8001520:	40140000 	.word	0x40140000
 8001524:	3fe00000 	.word	0x3fe00000
 8001528:	4630      	mov	r0, r6
 800152a:	4639      	mov	r1, r7
 800152c:	f7ff f844 	bl	80005b8 <__aeabi_dmul>
 8001530:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001536:	9c03      	ldr	r4, [sp, #12]
 8001538:	9314      	str	r3, [sp, #80]	; 0x50
 800153a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800153e:	f7ff fb05 	bl	8000b4c <__aeabi_d2iz>
 8001542:	9015      	str	r0, [sp, #84]	; 0x54
 8001544:	f7fe ffce 	bl	80004e4 <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001550:	f7fe fe7a 	bl	8000248 <__aeabi_dsub>
 8001554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001556:	3330      	adds	r3, #48	; 0x30
 8001558:	f804 3b01 	strb.w	r3, [r4], #1
 800155c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800155e:	429c      	cmp	r4, r3
 8001560:	4606      	mov	r6, r0
 8001562:	460f      	mov	r7, r1
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	d124      	bne.n	80015b4 <_dtoa_r+0x64c>
 800156a:	4ba4      	ldr	r3, [pc, #656]	; (80017fc <_dtoa_r+0x894>)
 800156c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001570:	f7fe fe6c 	bl	800024c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4630      	mov	r0, r6
 800157a:	4639      	mov	r1, r7
 800157c:	f7ff fac6 	bl	8000b0c <__aeabi_dcmpgt>
 8001580:	2800      	cmp	r0, #0
 8001582:	d163      	bne.n	800164c <_dtoa_r+0x6e4>
 8001584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001588:	499c      	ldr	r1, [pc, #624]	; (80017fc <_dtoa_r+0x894>)
 800158a:	2000      	movs	r0, #0
 800158c:	f7fe fe5c 	bl	8000248 <__aeabi_dsub>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4630      	mov	r0, r6
 8001596:	4639      	mov	r1, r7
 8001598:	f7ff fa9a 	bl	8000ad0 <__aeabi_dcmplt>
 800159c:	2800      	cmp	r0, #0
 800159e:	f43f af1d 	beq.w	80013dc <_dtoa_r+0x474>
 80015a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80015a4:	1e7b      	subs	r3, r7, #1
 80015a6:	9314      	str	r3, [sp, #80]	; 0x50
 80015a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80015ac:	2b30      	cmp	r3, #48	; 0x30
 80015ae:	d0f8      	beq.n	80015a2 <_dtoa_r+0x63a>
 80015b0:	46c2      	mov	sl, r8
 80015b2:	e03b      	b.n	800162c <_dtoa_r+0x6c4>
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <_dtoa_r+0x898>)
 80015b6:	f7fe ffff 	bl	80005b8 <__aeabi_dmul>
 80015ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80015be:	e7bc      	b.n	800153a <_dtoa_r+0x5d2>
 80015c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80015c4:	9f03      	ldr	r7, [sp, #12]
 80015c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015ca:	4640      	mov	r0, r8
 80015cc:	4649      	mov	r1, r9
 80015ce:	f7ff f91d 	bl	800080c <__aeabi_ddiv>
 80015d2:	f7ff fabb 	bl	8000b4c <__aeabi_d2iz>
 80015d6:	4604      	mov	r4, r0
 80015d8:	f7fe ff84 	bl	80004e4 <__aeabi_i2d>
 80015dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015e0:	f7fe ffea 	bl	80005b8 <__aeabi_dmul>
 80015e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4640      	mov	r0, r8
 80015ee:	4649      	mov	r1, r9
 80015f0:	f7fe fe2a 	bl	8000248 <__aeabi_dsub>
 80015f4:	f807 6b01 	strb.w	r6, [r7], #1
 80015f8:	9e03      	ldr	r6, [sp, #12]
 80015fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80015fe:	1bbe      	subs	r6, r7, r6
 8001600:	45b4      	cmp	ip, r6
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	d136      	bne.n	8001676 <_dtoa_r+0x70e>
 8001608:	f7fe fe20 	bl	800024c <__adddf3>
 800160c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001610:	4680      	mov	r8, r0
 8001612:	4689      	mov	r9, r1
 8001614:	f7ff fa7a 	bl	8000b0c <__aeabi_dcmpgt>
 8001618:	bb58      	cbnz	r0, 8001672 <_dtoa_r+0x70a>
 800161a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800161e:	4640      	mov	r0, r8
 8001620:	4649      	mov	r1, r9
 8001622:	f7ff fa4b 	bl	8000abc <__aeabi_dcmpeq>
 8001626:	b108      	cbz	r0, 800162c <_dtoa_r+0x6c4>
 8001628:	07e1      	lsls	r1, r4, #31
 800162a:	d422      	bmi.n	8001672 <_dtoa_r+0x70a>
 800162c:	4628      	mov	r0, r5
 800162e:	4659      	mov	r1, fp
 8001630:	f009 fe56 	bl	800b2e0 <_Bfree>
 8001634:	2300      	movs	r3, #0
 8001636:	703b      	strb	r3, [r7, #0]
 8001638:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800163a:	f10a 0001 	add.w	r0, sl, #1
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001642:	2b00      	cmp	r3, #0
 8001644:	f43f acdd 	beq.w	8001002 <_dtoa_r+0x9a>
 8001648:	601f      	str	r7, [r3, #0]
 800164a:	e4da      	b.n	8001002 <_dtoa_r+0x9a>
 800164c:	4627      	mov	r7, r4
 800164e:	463b      	mov	r3, r7
 8001650:	461f      	mov	r7, r3
 8001652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001656:	2a39      	cmp	r2, #57	; 0x39
 8001658:	d107      	bne.n	800166a <_dtoa_r+0x702>
 800165a:	9a03      	ldr	r2, [sp, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d1f7      	bne.n	8001650 <_dtoa_r+0x6e8>
 8001660:	9903      	ldr	r1, [sp, #12]
 8001662:	2230      	movs	r2, #48	; 0x30
 8001664:	f108 0801 	add.w	r8, r8, #1
 8001668:	700a      	strb	r2, [r1, #0]
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	3201      	adds	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e79e      	b.n	80015b0 <_dtoa_r+0x648>
 8001672:	46d0      	mov	r8, sl
 8001674:	e7eb      	b.n	800164e <_dtoa_r+0x6e6>
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <_dtoa_r+0x898>)
 8001678:	2200      	movs	r2, #0
 800167a:	f7fe ff9d 	bl	80005b8 <__aeabi_dmul>
 800167e:	2200      	movs	r2, #0
 8001680:	2300      	movs	r3, #0
 8001682:	4680      	mov	r8, r0
 8001684:	4689      	mov	r9, r1
 8001686:	f7ff fa19 	bl	8000abc <__aeabi_dcmpeq>
 800168a:	2800      	cmp	r0, #0
 800168c:	d09b      	beq.n	80015c6 <_dtoa_r+0x65e>
 800168e:	e7cd      	b.n	800162c <_dtoa_r+0x6c4>
 8001690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001692:	2a00      	cmp	r2, #0
 8001694:	f000 80d0 	beq.w	8001838 <_dtoa_r+0x8d0>
 8001698:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800169a:	2a01      	cmp	r2, #1
 800169c:	f300 80b2 	bgt.w	8001804 <_dtoa_r+0x89c>
 80016a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80016a2:	2a00      	cmp	r2, #0
 80016a4:	f000 80a6 	beq.w	80017f4 <_dtoa_r+0x88c>
 80016a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80016ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80016ae:	9f06      	ldr	r7, [sp, #24]
 80016b0:	9a06      	ldr	r2, [sp, #24]
 80016b2:	441a      	add	r2, r3
 80016b4:	9206      	str	r2, [sp, #24]
 80016b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016b8:	2101      	movs	r1, #1
 80016ba:	441a      	add	r2, r3
 80016bc:	4628      	mov	r0, r5
 80016be:	9209      	str	r2, [sp, #36]	; 0x24
 80016c0:	f009 fe76 	bl	800b3b0 <__i2b>
 80016c4:	4606      	mov	r6, r0
 80016c6:	2f00      	cmp	r7, #0
 80016c8:	dd0c      	ble.n	80016e4 <_dtoa_r+0x77c>
 80016ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dd09      	ble.n	80016e4 <_dtoa_r+0x77c>
 80016d0:	42bb      	cmp	r3, r7
 80016d2:	9a06      	ldr	r2, [sp, #24]
 80016d4:	bfa8      	it	ge
 80016d6:	463b      	movge	r3, r7
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	9206      	str	r2, [sp, #24]
 80016dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016de:	1aff      	subs	r7, r7, r3
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	9309      	str	r3, [sp, #36]	; 0x24
 80016e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016e6:	b1f3      	cbz	r3, 8001726 <_dtoa_r+0x7be>
 80016e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a8 	beq.w	8001840 <_dtoa_r+0x8d8>
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	dd10      	ble.n	8001716 <_dtoa_r+0x7ae>
 80016f4:	4631      	mov	r1, r6
 80016f6:	4622      	mov	r2, r4
 80016f8:	4628      	mov	r0, r5
 80016fa:	f009 ff17 	bl	800b52c <__pow5mult>
 80016fe:	465a      	mov	r2, fp
 8001700:	4601      	mov	r1, r0
 8001702:	4606      	mov	r6, r0
 8001704:	4628      	mov	r0, r5
 8001706:	f009 fe69 	bl	800b3dc <__multiply>
 800170a:	4659      	mov	r1, fp
 800170c:	4680      	mov	r8, r0
 800170e:	4628      	mov	r0, r5
 8001710:	f009 fde6 	bl	800b2e0 <_Bfree>
 8001714:	46c3      	mov	fp, r8
 8001716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001718:	1b1a      	subs	r2, r3, r4
 800171a:	d004      	beq.n	8001726 <_dtoa_r+0x7be>
 800171c:	4659      	mov	r1, fp
 800171e:	4628      	mov	r0, r5
 8001720:	f009 ff04 	bl	800b52c <__pow5mult>
 8001724:	4683      	mov	fp, r0
 8001726:	2101      	movs	r1, #1
 8001728:	4628      	mov	r0, r5
 800172a:	f009 fe41 	bl	800b3b0 <__i2b>
 800172e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001730:	2b00      	cmp	r3, #0
 8001732:	4604      	mov	r4, r0
 8001734:	f340 8086 	ble.w	8001844 <_dtoa_r+0x8dc>
 8001738:	461a      	mov	r2, r3
 800173a:	4601      	mov	r1, r0
 800173c:	4628      	mov	r0, r5
 800173e:	f009 fef5 	bl	800b52c <__pow5mult>
 8001742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001744:	2b01      	cmp	r3, #1
 8001746:	4604      	mov	r4, r0
 8001748:	dd7f      	ble.n	800184a <_dtoa_r+0x8e2>
 800174a:	f04f 0800 	mov.w	r8, #0
 800174e:	6923      	ldr	r3, [r4, #16]
 8001750:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001754:	6918      	ldr	r0, [r3, #16]
 8001756:	f00d f823 	bl	800e7a0 <__hi0bits>
 800175a:	f1c0 0020 	rsb	r0, r0, #32
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4418      	add	r0, r3
 8001762:	f010 001f 	ands.w	r0, r0, #31
 8001766:	f000 8092 	beq.w	800188e <_dtoa_r+0x926>
 800176a:	f1c0 0320 	rsb	r3, r0, #32
 800176e:	2b04      	cmp	r3, #4
 8001770:	f340 808a 	ble.w	8001888 <_dtoa_r+0x920>
 8001774:	f1c0 001c 	rsb	r0, r0, #28
 8001778:	9b06      	ldr	r3, [sp, #24]
 800177a:	4403      	add	r3, r0
 800177c:	9306      	str	r3, [sp, #24]
 800177e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001780:	4403      	add	r3, r0
 8001782:	4407      	add	r7, r0
 8001784:	9309      	str	r3, [sp, #36]	; 0x24
 8001786:	9b06      	ldr	r3, [sp, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	dd05      	ble.n	8001798 <_dtoa_r+0x830>
 800178c:	4659      	mov	r1, fp
 800178e:	461a      	mov	r2, r3
 8001790:	4628      	mov	r0, r5
 8001792:	f009 ff25 	bl	800b5e0 <__lshift>
 8001796:	4683      	mov	fp, r0
 8001798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	dd05      	ble.n	80017aa <_dtoa_r+0x842>
 800179e:	4621      	mov	r1, r4
 80017a0:	461a      	mov	r2, r3
 80017a2:	4628      	mov	r0, r5
 80017a4:	f009 ff1c 	bl	800b5e0 <__lshift>
 80017a8:	4604      	mov	r4, r0
 80017aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d070      	beq.n	8001892 <_dtoa_r+0x92a>
 80017b0:	4621      	mov	r1, r4
 80017b2:	4658      	mov	r0, fp
 80017b4:	f00d f841 	bl	800e83a <__mcmp>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	da6a      	bge.n	8001892 <_dtoa_r+0x92a>
 80017bc:	2300      	movs	r3, #0
 80017be:	4659      	mov	r1, fp
 80017c0:	220a      	movs	r2, #10
 80017c2:	4628      	mov	r0, r5
 80017c4:	f009 fdae 	bl	800b324 <__multadd>
 80017c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80017ce:	4683      	mov	fp, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8194 	beq.w	8001afe <_dtoa_r+0xb96>
 80017d6:	4631      	mov	r1, r6
 80017d8:	2300      	movs	r3, #0
 80017da:	220a      	movs	r2, #10
 80017dc:	4628      	mov	r0, r5
 80017de:	f009 fda1 	bl	800b324 <__multadd>
 80017e2:	f1b9 0f00 	cmp.w	r9, #0
 80017e6:	4606      	mov	r6, r0
 80017e8:	f300 8093 	bgt.w	8001912 <_dtoa_r+0x9aa>
 80017ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	dc57      	bgt.n	80018a2 <_dtoa_r+0x93a>
 80017f2:	e08e      	b.n	8001912 <_dtoa_r+0x9aa>
 80017f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80017fa:	e757      	b.n	80016ac <_dtoa_r+0x744>
 80017fc:	3fe00000 	.word	0x3fe00000
 8001800:	40240000 	.word	0x40240000
 8001804:	9b08      	ldr	r3, [sp, #32]
 8001806:	1e5c      	subs	r4, r3, #1
 8001808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800180a:	42a3      	cmp	r3, r4
 800180c:	bfbf      	itttt	lt
 800180e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001810:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001812:	1ae2      	sublt	r2, r4, r3
 8001814:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001816:	bfb6      	itet	lt
 8001818:	189b      	addlt	r3, r3, r2
 800181a:	1b1c      	subge	r4, r3, r4
 800181c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800181e:	9b08      	ldr	r3, [sp, #32]
 8001820:	bfb8      	it	lt
 8001822:	2400      	movlt	r4, #0
 8001824:	2b00      	cmp	r3, #0
 8001826:	bfb9      	ittee	lt
 8001828:	9b06      	ldrlt	r3, [sp, #24]
 800182a:	9a08      	ldrlt	r2, [sp, #32]
 800182c:	9f06      	ldrge	r7, [sp, #24]
 800182e:	9b08      	ldrge	r3, [sp, #32]
 8001830:	bfbc      	itt	lt
 8001832:	1a9f      	sublt	r7, r3, r2
 8001834:	2300      	movlt	r3, #0
 8001836:	e73b      	b.n	80016b0 <_dtoa_r+0x748>
 8001838:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800183a:	9f06      	ldr	r7, [sp, #24]
 800183c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800183e:	e742      	b.n	80016c6 <_dtoa_r+0x75e>
 8001840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001842:	e76b      	b.n	800171c <_dtoa_r+0x7b4>
 8001844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001846:	2b01      	cmp	r3, #1
 8001848:	dc19      	bgt.n	800187e <_dtoa_r+0x916>
 800184a:	9b04      	ldr	r3, [sp, #16]
 800184c:	b9bb      	cbnz	r3, 800187e <_dtoa_r+0x916>
 800184e:	9b05      	ldr	r3, [sp, #20]
 8001850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001854:	b99b      	cbnz	r3, 800187e <_dtoa_r+0x916>
 8001856:	9b05      	ldr	r3, [sp, #20]
 8001858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800185c:	0d1b      	lsrs	r3, r3, #20
 800185e:	051b      	lsls	r3, r3, #20
 8001860:	b183      	cbz	r3, 8001884 <_dtoa_r+0x91c>
 8001862:	9b06      	ldr	r3, [sp, #24]
 8001864:	3301      	adds	r3, #1
 8001866:	9306      	str	r3, [sp, #24]
 8001868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800186a:	3301      	adds	r3, #1
 800186c:	9309      	str	r3, [sp, #36]	; 0x24
 800186e:	f04f 0801 	mov.w	r8, #1
 8001872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f af6a 	bne.w	800174e <_dtoa_r+0x7e6>
 800187a:	2001      	movs	r0, #1
 800187c:	e76f      	b.n	800175e <_dtoa_r+0x7f6>
 800187e:	f04f 0800 	mov.w	r8, #0
 8001882:	e7f6      	b.n	8001872 <_dtoa_r+0x90a>
 8001884:	4698      	mov	r8, r3
 8001886:	e7f4      	b.n	8001872 <_dtoa_r+0x90a>
 8001888:	f43f af7d 	beq.w	8001786 <_dtoa_r+0x81e>
 800188c:	4618      	mov	r0, r3
 800188e:	301c      	adds	r0, #28
 8001890:	e772      	b.n	8001778 <_dtoa_r+0x810>
 8001892:	9b08      	ldr	r3, [sp, #32]
 8001894:	2b00      	cmp	r3, #0
 8001896:	dc36      	bgt.n	8001906 <_dtoa_r+0x99e>
 8001898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800189a:	2b02      	cmp	r3, #2
 800189c:	dd33      	ble.n	8001906 <_dtoa_r+0x99e>
 800189e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018a2:	f1b9 0f00 	cmp.w	r9, #0
 80018a6:	d10d      	bne.n	80018c4 <_dtoa_r+0x95c>
 80018a8:	4621      	mov	r1, r4
 80018aa:	464b      	mov	r3, r9
 80018ac:	2205      	movs	r2, #5
 80018ae:	4628      	mov	r0, r5
 80018b0:	f009 fd38 	bl	800b324 <__multadd>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4658      	mov	r0, fp
 80018ba:	f00c ffbe 	bl	800e83a <__mcmp>
 80018be:	2800      	cmp	r0, #0
 80018c0:	f73f adb8 	bgt.w	8001434 <_dtoa_r+0x4cc>
 80018c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80018c6:	9f03      	ldr	r7, [sp, #12]
 80018c8:	ea6f 0a03 	mvn.w	sl, r3
 80018cc:	f04f 0800 	mov.w	r8, #0
 80018d0:	4621      	mov	r1, r4
 80018d2:	4628      	mov	r0, r5
 80018d4:	f009 fd04 	bl	800b2e0 <_Bfree>
 80018d8:	2e00      	cmp	r6, #0
 80018da:	f43f aea7 	beq.w	800162c <_dtoa_r+0x6c4>
 80018de:	f1b8 0f00 	cmp.w	r8, #0
 80018e2:	d005      	beq.n	80018f0 <_dtoa_r+0x988>
 80018e4:	45b0      	cmp	r8, r6
 80018e6:	d003      	beq.n	80018f0 <_dtoa_r+0x988>
 80018e8:	4641      	mov	r1, r8
 80018ea:	4628      	mov	r0, r5
 80018ec:	f009 fcf8 	bl	800b2e0 <_Bfree>
 80018f0:	4631      	mov	r1, r6
 80018f2:	4628      	mov	r0, r5
 80018f4:	f009 fcf4 	bl	800b2e0 <_Bfree>
 80018f8:	e698      	b.n	800162c <_dtoa_r+0x6c4>
 80018fa:	2400      	movs	r4, #0
 80018fc:	4626      	mov	r6, r4
 80018fe:	e7e1      	b.n	80018c4 <_dtoa_r+0x95c>
 8001900:	46c2      	mov	sl, r8
 8001902:	4626      	mov	r6, r4
 8001904:	e596      	b.n	8001434 <_dtoa_r+0x4cc>
 8001906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80fd 	beq.w	8001b0c <_dtoa_r+0xba4>
 8001912:	2f00      	cmp	r7, #0
 8001914:	dd05      	ble.n	8001922 <_dtoa_r+0x9ba>
 8001916:	4631      	mov	r1, r6
 8001918:	463a      	mov	r2, r7
 800191a:	4628      	mov	r0, r5
 800191c:	f009 fe60 	bl	800b5e0 <__lshift>
 8001920:	4606      	mov	r6, r0
 8001922:	f1b8 0f00 	cmp.w	r8, #0
 8001926:	d05c      	beq.n	80019e2 <_dtoa_r+0xa7a>
 8001928:	6871      	ldr	r1, [r6, #4]
 800192a:	4628      	mov	r0, r5
 800192c:	f009 fc98 	bl	800b260 <_Balloc>
 8001930:	4607      	mov	r7, r0
 8001932:	b928      	cbnz	r0, 8001940 <_dtoa_r+0x9d8>
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <_dtoa_r+0xbd0>)
 8001936:	4602      	mov	r2, r0
 8001938:	f240 21ea 	movw	r1, #746	; 0x2ea
 800193c:	f7ff bb28 	b.w	8000f90 <_dtoa_r+0x28>
 8001940:	6932      	ldr	r2, [r6, #16]
 8001942:	3202      	adds	r2, #2
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	f106 010c 	add.w	r1, r6, #12
 800194a:	300c      	adds	r0, #12
 800194c:	f00c fd61 	bl	800e412 <memcpy>
 8001950:	2201      	movs	r2, #1
 8001952:	4639      	mov	r1, r7
 8001954:	4628      	mov	r0, r5
 8001956:	f009 fe43 	bl	800b5e0 <__lshift>
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	9308      	str	r3, [sp, #32]
 8001960:	9b03      	ldr	r3, [sp, #12]
 8001962:	444b      	add	r3, r9
 8001964:	930a      	str	r3, [sp, #40]	; 0x28
 8001966:	9b04      	ldr	r3, [sp, #16]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	46b0      	mov	r8, r6
 800196e:	9309      	str	r3, [sp, #36]	; 0x24
 8001970:	4606      	mov	r6, r0
 8001972:	9b08      	ldr	r3, [sp, #32]
 8001974:	4621      	mov	r1, r4
 8001976:	3b01      	subs	r3, #1
 8001978:	4658      	mov	r0, fp
 800197a:	9304      	str	r3, [sp, #16]
 800197c:	f00c fe89 	bl	800e692 <quorem>
 8001980:	4603      	mov	r3, r0
 8001982:	3330      	adds	r3, #48	; 0x30
 8001984:	9006      	str	r0, [sp, #24]
 8001986:	4641      	mov	r1, r8
 8001988:	4658      	mov	r0, fp
 800198a:	930b      	str	r3, [sp, #44]	; 0x2c
 800198c:	f00c ff55 	bl	800e83a <__mcmp>
 8001990:	4632      	mov	r2, r6
 8001992:	4681      	mov	r9, r0
 8001994:	4621      	mov	r1, r4
 8001996:	4628      	mov	r0, r5
 8001998:	f009 fe92 	bl	800b6c0 <__mdiff>
 800199c:	68c2      	ldr	r2, [r0, #12]
 800199e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019a0:	4607      	mov	r7, r0
 80019a2:	bb02      	cbnz	r2, 80019e6 <_dtoa_r+0xa7e>
 80019a4:	4601      	mov	r1, r0
 80019a6:	4658      	mov	r0, fp
 80019a8:	f00c ff47 	bl	800e83a <__mcmp>
 80019ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019ae:	4602      	mov	r2, r0
 80019b0:	4639      	mov	r1, r7
 80019b2:	4628      	mov	r0, r5
 80019b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80019b8:	f009 fc92 	bl	800b2e0 <_Bfree>
 80019bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80019be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019c0:	9f08      	ldr	r7, [sp, #32]
 80019c2:	ea43 0102 	orr.w	r1, r3, r2
 80019c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019c8:	430b      	orrs	r3, r1
 80019ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019cc:	d10d      	bne.n	80019ea <_dtoa_r+0xa82>
 80019ce:	2b39      	cmp	r3, #57	; 0x39
 80019d0:	d029      	beq.n	8001a26 <_dtoa_r+0xabe>
 80019d2:	f1b9 0f00 	cmp.w	r9, #0
 80019d6:	dd01      	ble.n	80019dc <_dtoa_r+0xa74>
 80019d8:	9b06      	ldr	r3, [sp, #24]
 80019da:	3331      	adds	r3, #49	; 0x31
 80019dc:	9a04      	ldr	r2, [sp, #16]
 80019de:	7013      	strb	r3, [r2, #0]
 80019e0:	e776      	b.n	80018d0 <_dtoa_r+0x968>
 80019e2:	4630      	mov	r0, r6
 80019e4:	e7b9      	b.n	800195a <_dtoa_r+0x9f2>
 80019e6:	2201      	movs	r2, #1
 80019e8:	e7e2      	b.n	80019b0 <_dtoa_r+0xa48>
 80019ea:	f1b9 0f00 	cmp.w	r9, #0
 80019ee:	db06      	blt.n	80019fe <_dtoa_r+0xa96>
 80019f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80019f2:	ea41 0909 	orr.w	r9, r1, r9
 80019f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019f8:	ea59 0101 	orrs.w	r1, r9, r1
 80019fc:	d120      	bne.n	8001a40 <_dtoa_r+0xad8>
 80019fe:	2a00      	cmp	r2, #0
 8001a00:	ddec      	ble.n	80019dc <_dtoa_r+0xa74>
 8001a02:	4659      	mov	r1, fp
 8001a04:	2201      	movs	r2, #1
 8001a06:	4628      	mov	r0, r5
 8001a08:	9308      	str	r3, [sp, #32]
 8001a0a:	f009 fde9 	bl	800b5e0 <__lshift>
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4683      	mov	fp, r0
 8001a12:	f00c ff12 	bl	800e83a <__mcmp>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	9b08      	ldr	r3, [sp, #32]
 8001a1a:	dc02      	bgt.n	8001a22 <_dtoa_r+0xaba>
 8001a1c:	d1de      	bne.n	80019dc <_dtoa_r+0xa74>
 8001a1e:	07da      	lsls	r2, r3, #31
 8001a20:	d5dc      	bpl.n	80019dc <_dtoa_r+0xa74>
 8001a22:	2b39      	cmp	r3, #57	; 0x39
 8001a24:	d1d8      	bne.n	80019d8 <_dtoa_r+0xa70>
 8001a26:	9a04      	ldr	r2, [sp, #16]
 8001a28:	2339      	movs	r3, #57	; 0x39
 8001a2a:	7013      	strb	r3, [r2, #0]
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	461f      	mov	r7, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001a36:	2a39      	cmp	r2, #57	; 0x39
 8001a38:	d050      	beq.n	8001adc <_dtoa_r+0xb74>
 8001a3a:	3201      	adds	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e747      	b.n	80018d0 <_dtoa_r+0x968>
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	dd03      	ble.n	8001a4c <_dtoa_r+0xae4>
 8001a44:	2b39      	cmp	r3, #57	; 0x39
 8001a46:	d0ee      	beq.n	8001a26 <_dtoa_r+0xabe>
 8001a48:	3301      	adds	r3, #1
 8001a4a:	e7c7      	b.n	80019dc <_dtoa_r+0xa74>
 8001a4c:	9a08      	ldr	r2, [sp, #32]
 8001a4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a50:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d02a      	beq.n	8001aae <_dtoa_r+0xb46>
 8001a58:	4659      	mov	r1, fp
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f009 fc60 	bl	800b324 <__multadd>
 8001a64:	45b0      	cmp	r8, r6
 8001a66:	4683      	mov	fp, r0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f04f 020a 	mov.w	r2, #10
 8001a70:	4641      	mov	r1, r8
 8001a72:	4628      	mov	r0, r5
 8001a74:	d107      	bne.n	8001a86 <_dtoa_r+0xb1e>
 8001a76:	f009 fc55 	bl	800b324 <__multadd>
 8001a7a:	4680      	mov	r8, r0
 8001a7c:	4606      	mov	r6, r0
 8001a7e:	9b08      	ldr	r3, [sp, #32]
 8001a80:	3301      	adds	r3, #1
 8001a82:	9308      	str	r3, [sp, #32]
 8001a84:	e775      	b.n	8001972 <_dtoa_r+0xa0a>
 8001a86:	f009 fc4d 	bl	800b324 <__multadd>
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	4680      	mov	r8, r0
 8001a8e:	2300      	movs	r3, #0
 8001a90:	220a      	movs	r2, #10
 8001a92:	4628      	mov	r0, r5
 8001a94:	f009 fc46 	bl	800b324 <__multadd>
 8001a98:	4606      	mov	r6, r0
 8001a9a:	e7f0      	b.n	8001a7e <_dtoa_r+0xb16>
 8001a9c:	f1b9 0f00 	cmp.w	r9, #0
 8001aa0:	9a03      	ldr	r2, [sp, #12]
 8001aa2:	bfcc      	ite	gt
 8001aa4:	464f      	movgt	r7, r9
 8001aa6:	2701      	movle	r7, #1
 8001aa8:	4417      	add	r7, r2
 8001aaa:	f04f 0800 	mov.w	r8, #0
 8001aae:	4659      	mov	r1, fp
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	9308      	str	r3, [sp, #32]
 8001ab6:	f009 fd93 	bl	800b5e0 <__lshift>
 8001aba:	4621      	mov	r1, r4
 8001abc:	4683      	mov	fp, r0
 8001abe:	f00c febc 	bl	800e83a <__mcmp>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	dcb2      	bgt.n	8001a2c <_dtoa_r+0xac4>
 8001ac6:	d102      	bne.n	8001ace <_dtoa_r+0xb66>
 8001ac8:	9b08      	ldr	r3, [sp, #32]
 8001aca:	07db      	lsls	r3, r3, #31
 8001acc:	d4ae      	bmi.n	8001a2c <_dtoa_r+0xac4>
 8001ace:	463b      	mov	r3, r7
 8001ad0:	461f      	mov	r7, r3
 8001ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001ad6:	2a30      	cmp	r2, #48	; 0x30
 8001ad8:	d0fa      	beq.n	8001ad0 <_dtoa_r+0xb68>
 8001ada:	e6f9      	b.n	80018d0 <_dtoa_r+0x968>
 8001adc:	9a03      	ldr	r2, [sp, #12]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d1a5      	bne.n	8001a2e <_dtoa_r+0xac6>
 8001ae2:	f10a 0a01 	add.w	sl, sl, #1
 8001ae6:	2331      	movs	r3, #49	; 0x31
 8001ae8:	e779      	b.n	80019de <_dtoa_r+0xa76>
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <_dtoa_r+0xbd4>)
 8001aec:	f7ff baa7 	b.w	800103e <_dtoa_r+0xd6>
 8001af0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f aa80 	bne.w	8000ff8 <_dtoa_r+0x90>
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_dtoa_r+0xbd8>)
 8001afa:	f7ff baa0 	b.w	800103e <_dtoa_r+0xd6>
 8001afe:	f1b9 0f00 	cmp.w	r9, #0
 8001b02:	dc03      	bgt.n	8001b0c <_dtoa_r+0xba4>
 8001b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f73f aecb 	bgt.w	80018a2 <_dtoa_r+0x93a>
 8001b0c:	9f03      	ldr	r7, [sp, #12]
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4658      	mov	r0, fp
 8001b12:	f00c fdbe 	bl	800e692 <quorem>
 8001b16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001b1a:	f807 3b01 	strb.w	r3, [r7], #1
 8001b1e:	9a03      	ldr	r2, [sp, #12]
 8001b20:	1aba      	subs	r2, r7, r2
 8001b22:	4591      	cmp	r9, r2
 8001b24:	ddba      	ble.n	8001a9c <_dtoa_r+0xb34>
 8001b26:	4659      	mov	r1, fp
 8001b28:	2300      	movs	r3, #0
 8001b2a:	220a      	movs	r2, #10
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f009 fbf9 	bl	800b324 <__multadd>
 8001b32:	4683      	mov	fp, r0
 8001b34:	e7eb      	b.n	8001b0e <_dtoa_r+0xba6>
 8001b36:	bf00      	nop
 8001b38:	08010707 	.word	0x08010707
 8001b3c:	08010665 	.word	0x08010665
 8001b40:	08010689 	.word	0x08010689

08001b44 <connection_quality_pixels>:
        .v = 0,
};
//// Struct with using colors end ////

//// Function definition begin ////
void connection_quality_pixels(uint8_t con_status) {
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4605      	mov	r5, r0
    for (int i = 0; i < con_status; ++i) {
 8001b48:	2400      	movs	r4, #0
 8001b4a:	e006      	b.n	8001b5a <connection_quality_pixels+0x16>
        if (i < NUM_OF_RED_LEDS) {
            led_hsv2rgb(&red_hsv, &pixels_rgb[i]);
            continue;
        }
        led_hsv2rgb(&green_hsv, &pixels_rgb[i]);
 8001b4c:	4909      	ldr	r1, [pc, #36]	; (8001b74 <connection_quality_pixels+0x30>)
 8001b4e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <connection_quality_pixels+0x34>)
 8001b54:	f006 ffc0 	bl	8008ad8 <led_hsv2rgb>
    for (int i = 0; i < con_status; ++i) {
 8001b58:	3401      	adds	r4, #1
 8001b5a:	42a5      	cmp	r5, r4
 8001b5c:	dd08      	ble.n	8001b70 <connection_quality_pixels+0x2c>
        if (i < NUM_OF_RED_LEDS) {
 8001b5e:	2c02      	cmp	r4, #2
 8001b60:	dcf4      	bgt.n	8001b4c <connection_quality_pixels+0x8>
            led_hsv2rgb(&red_hsv, &pixels_rgb[i]);
 8001b62:	4904      	ldr	r1, [pc, #16]	; (8001b74 <connection_quality_pixels+0x30>)
 8001b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <connection_quality_pixels+0x38>)
 8001b6a:	f006 ffb5 	bl	8008ad8 <led_hsv2rgb>
            continue;
 8001b6e:	e7f3      	b.n	8001b58 <connection_quality_pixels+0x14>
    }
}
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
 8001b72:	bf00      	nop
 8001b74:	200008ec 	.word	0x200008ec
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000008 	.word	0x20000008

08001b80 <number_of_people_in_zone_pixels>:

void number_of_people_in_zone_pixels(uint8_t people_num) {
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4605      	mov	r5, r0
    for (int i = STRIP_NUM_PIXELS/2; i < STRIP_NUM_PIXELS; ++i) {
 8001b84:	2408      	movs	r4, #8
 8001b86:	e006      	b.n	8001b96 <number_of_people_in_zone_pixels+0x16>
        if ( (people_num & BIT(i-STRIP_NUM_PIXELS/2)) ) {
            led_hsv2rgb(&blud_hsv, &pixels_rgb[i]);
            continue;
        }
        led_hsv2rgb(&empty_hsv, &pixels_rgb[i]);
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <number_of_people_in_zone_pixels+0x38>)
 8001b8a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001b8e:	480b      	ldr	r0, [pc, #44]	; (8001bbc <number_of_people_in_zone_pixels+0x3c>)
 8001b90:	f006 ffa2 	bl	8008ad8 <led_hsv2rgb>
    for (int i = STRIP_NUM_PIXELS/2; i < STRIP_NUM_PIXELS; ++i) {
 8001b94:	3401      	adds	r4, #1
 8001b96:	2c0f      	cmp	r4, #15
 8001b98:	dc0d      	bgt.n	8001bb6 <number_of_people_in_zone_pixels+0x36>
        if ( (people_num & BIT(i-STRIP_NUM_PIXELS/2)) ) {
 8001b9a:	f1a4 0308 	sub.w	r3, r4, #8
 8001b9e:	fa25 f303 	lsr.w	r3, r5, r3
 8001ba2:	f013 0f01 	tst.w	r3, #1
 8001ba6:	d0ef      	beq.n	8001b88 <number_of_people_in_zone_pixels+0x8>
            led_hsv2rgb(&blud_hsv, &pixels_rgb[i]);
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <number_of_people_in_zone_pixels+0x38>)
 8001baa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <number_of_people_in_zone_pixels+0x40>)
 8001bb0:	f006 ff92 	bl	8008ad8 <led_hsv2rgb>
            continue;
 8001bb4:	e7ee      	b.n	8001b94 <number_of_people_in_zone_pixels+0x14>
    }
}
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
 8001bb8:	200008ec 	.word	0x200008ec
 8001bbc:	200008e8 	.word	0x200008e8
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <update_indication>:

void update_indication(uint8_t people_num, bool set_people_num, uint8_t con_status, bool set_con_status) {
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4604      	mov	r4, r0
    unsigned int key;
    if ( (!set_people_num) && (!set_con_status) )
 8001bc8:	460d      	mov	r5, r1
 8001bca:	b901      	cbnz	r1, 8001bce <update_indication+0xa>
 8001bcc:	b1a3      	cbz	r3, 8001bf8 <update_indication+0x34>
        return;

    if (set_con_status)
 8001bce:	b9a3      	cbnz	r3, 8001bfa <update_indication+0x36>
        connection_quality_pixels(con_status);

    if (set_people_num)
 8001bd0:	b9bd      	cbnz	r5, 8001c02 <update_indication+0x3e>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001bd2:	f04f 0310 	mov.w	r3, #16
 8001bd6:	f3ef 8411 	mrs	r4, BASEPRI
 8001bda:	f383 8812 	msr	BASEPRI_MAX, r3
 8001bde:	f3bf 8f6f 	isb	sy
        number_of_people_in_zone_pixels(people_num);
    key = irq_lock();
    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <update_indication+0x48>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
 8001be6:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2210      	movs	r2, #16
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <update_indication+0x4c>)
 8001bee:	4798      	blx	r3
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8001bf0:	f384 8811 	msr	BASEPRI, r4
 8001bf4:	f3bf 8f6f 	isb	sy
    irq_unlock(key);
}
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
        connection_quality_pixels(con_status);
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7ff ffa2 	bl	8001b44 <connection_quality_pixels>
 8001c00:	e7e6      	b.n	8001bd0 <update_indication+0xc>
        number_of_people_in_zone_pixels(people_num);
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7ff ffbc 	bl	8001b80 <number_of_people_in_zone_pixels>
 8001c08:	e7e3      	b.n	8001bd2 <update_indication+0xe>
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	200008ec 	.word	0x200008ec

08001c14 <work_buzzer_handler>:
        return LIGHT_UP_ZERO;
    }
}

void work_buzzer_handler(struct k_work *item)
{
 8001c14:	b508      	push	{r3, lr}
    gpio_pin_set(buzzer_dev_ptr, BUZZER_GPIO_PIN, 1);
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <work_buzzer_handler+0x5c>)
 8001c18:	6818      	ldr	r0, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 8001c1a:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f013 0f02 	tst.w	r3, #2
 8001c22:	d117      	bne.n	8001c54 <work_buzzer_handler+0x40>
 8001c24:	2301      	movs	r3, #1
	if (value != 0)	{
 8001c26:	b1bb      	cbz	r3, 8001c58 <work_buzzer_handler+0x44>
	const struct gpio_driver_api *api =
 8001c28:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8001c30:	20c8      	movs	r0, #200	; 0xc8
 8001c32:	2100      	movs	r1, #0
 8001c34:	f008 f966 	bl	8009f04 <z_impl_k_sleep>
    k_msleep(20);
    gpio_pin_set(buzzer_dev_ptr, BUZZER_GPIO_PIN, 0);
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <work_buzzer_handler+0x5c>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8001c3c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f013 0f02 	tst.w	r3, #2
 8001c44:	d10d      	bne.n	8001c62 <work_buzzer_handler+0x4e>
 8001c46:	2300      	movs	r3, #0
	if (value != 0)	{
 8001c48:	b16b      	cbz	r3, 8001c66 <work_buzzer_handler+0x52>
	const struct gpio_driver_api *api =
 8001c4a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2102      	movs	r1, #2
 8001c50:	4798      	blx	r3
 8001c52:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e7e6      	b.n	8001c26 <work_buzzer_handler+0x12>
	const struct gpio_driver_api *api =
 8001c58:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4798      	blx	r3
 8001c60:	e7e6      	b.n	8001c30 <work_buzzer_handler+0x1c>
		value = (value != 0) ? 0 : 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e7f0      	b.n	8001c48 <work_buzzer_handler+0x34>
	const struct gpio_driver_api *api =
 8001c66:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	4798      	blx	r3
 8001c6e:	e7f0      	b.n	8001c52 <work_buzzer_handler+0x3e>
 8001c70:	2000092c 	.word	0x2000092c

08001c74 <system_init>:
{
 8001c74:	b508      	push	{r3, lr}
    k_work_init(&work_buzzer, work_buzzer_handler);
 8001c76:	4921      	ldr	r1, [pc, #132]	; (8001cfc <system_init+0x88>)
 8001c78:	4821      	ldr	r0, [pc, #132]	; (8001d00 <system_init+0x8c>)
 8001c7a:	f00c f87d 	bl	800dd78 <k_work_init>
    lora_cfg.frequency = 433000000;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <system_init+0x90>)
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <system_init+0x94>)
 8001c82:	601a      	str	r2, [r3, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 8001c84:	2200      	movs	r2, #0
 8001c86:	711a      	strb	r2, [r3, #4]
    lora_cfg.datarate = SF_12;
 8001c88:	210c      	movs	r1, #12
 8001c8a:	7159      	strb	r1, [r3, #5]
    lora_cfg.preamble_len = 8;
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	8119      	strh	r1, [r3, #8]
    lora_cfg.coding_rate = CR_4_5;
 8001c90:	2101      	movs	r1, #1
 8001c92:	7199      	strb	r1, [r3, #6]
    lora_cfg.tx_power = 0;
 8001c94:	729a      	strb	r2, [r3, #10]
    lora_cfg.tx = false;
 8001c96:	72da      	strb	r2, [r3, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001c98:	481c      	ldr	r0, [pc, #112]	; (8001d0c <system_init+0x98>)
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <system_init+0x9c>)
 8001c9c:	6018      	str	r0, [r3, #0]
 8001c9e:	f00b ff90 	bl	800dbc2 <z_device_ready>
 8001ca2:	b1d0      	cbz	r0, 8001cda <system_init+0x66>
 8001ca4:	2300      	movs	r3, #0
    if (!device_is_ready(lora_dev_ptr)) {
 8001ca6:	b9db      	cbnz	r3, 8001ce0 <system_init+0x6c>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <system_init+0x9c>)
 8001caa:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001cac:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4914      	ldr	r1, [pc, #80]	; (8001d04 <system_init+0x90>)
 8001cb2:	4798      	blx	r3
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	db1a      	blt.n	8001cee <system_init+0x7a>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001cb8:	4816      	ldr	r0, [pc, #88]	; (8001d14 <system_init+0xa0>)
 8001cba:	f006 ffbb 	bl	8008c34 <z_impl_device_get_binding>
    buzzer_dev_ptr = device_get_binding(BUZZER_GPIO_PORT);
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <system_init+0xa4>)
 8001cc0:	6010      	str	r0, [r2, #0]
	const struct gpio_driver_api *api =
 8001cc2:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
 8001cc4:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f023 0302 	bic.w	r3, r3, #2
 8001ccc:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8001cce:	680b      	ldr	r3, [r1, #0]
 8001cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4798      	blx	r3
}
 8001cd8:	bd08      	pop	{r3, pc}
 8001cda:	f06f 0312 	mvn.w	r3, #18
 8001cde:	e7e2      	b.n	8001ca6 <system_init+0x32>
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ce8:	f008 f90c 	bl	8009f04 <z_impl_k_sleep>
 8001cec:	e7dc      	b.n	8001ca8 <system_init+0x34>
 8001cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf6:	f008 f905 	bl	8009f04 <z_impl_k_sleep>
 8001cfa:	e7dd      	b.n	8001cb8 <system_init+0x44>
 8001cfc:	08001c15 	.word	0x08001c15
 8001d00:	20000950 	.word	0x20000950
 8001d04:	20000930 	.word	0x20000930
 8001d08:	19cf0e40 	.word	0x19cf0e40
 8001d0c:	0800ec8c 	.word	0x0800ec8c
 8001d10:	2000093c 	.word	0x2000093c
 8001d14:	0800f198 	.word	0x0800f198
 8001d18:	2000092c 	.word	0x2000092c

08001d1c <read_write_message>:
{
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	4607      	mov	r7, r0
 8001d22:	460e      	mov	r6, r1
 8001d24:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001d26:	2400      	movs	r4, #0
 8001d28:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001d2c:	e008      	b.n	8001d40 <read_write_message+0x24>
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 8001d2e:	b1dd      	cbz	r5, 8001d68 <read_write_message+0x4c>
 8001d30:	f10d 0307 	add.w	r3, sp, #7
 8001d34:	2202      	movs	r2, #2
 8001d36:	7831      	ldrb	r1, [r6, #0]
 8001d38:	4638      	mov	r0, r7
 8001d3a:	f00a fa06 	bl	800c14a <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001d3e:	3401      	adds	r4, #1
 8001d40:	2c05      	cmp	r4, #5
 8001d42:	dc6e      	bgt.n	8001e22 <read_write_message+0x106>
        switch (cur_field) {
 8001d44:	2c05      	cmp	r4, #5
 8001d46:	d8fa      	bhi.n	8001d3e <read_write_message+0x22>
 8001d48:	a301      	add	r3, pc, #4	; (adr r3, 8001d50 <read_write_message+0x34>)
 8001d4a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d2f 	.word	0x08001d2f
 8001d54:	08001d79 	.word	0x08001d79
 8001d58:	08001d9b 	.word	0x08001d9b
 8001d5c:	08001dbd 	.word	0x08001dbd
 8001d60:	08001ddf 	.word	0x08001ddf
 8001d64:	08001e01 	.word	0x08001e01
                extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001d68:	f10d 0307 	add.w	r3, sp, #7
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4631      	mov	r1, r6
 8001d70:	4638      	mov	r0, r7
 8001d72:	f00a fa0b 	bl	800c18c <extract_msg_bit_field>
 8001d76:	e7e2      	b.n	8001d3e <read_write_message+0x22>
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001d78:	b13d      	cbz	r5, 8001d8a <read_write_message+0x6e>
 8001d7a:	f10d 0307 	add.w	r3, sp, #7
 8001d7e:	2203      	movs	r2, #3
 8001d80:	7871      	ldrb	r1, [r6, #1]
 8001d82:	4638      	mov	r0, r7
 8001d84:	f00a f9e1 	bl	800c14a <fill_msg_bit_field>
 8001d88:	e7d9      	b.n	8001d3e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8001d8a:	f10d 0307 	add.w	r3, sp, #7
 8001d8e:	2203      	movs	r2, #3
 8001d90:	1c71      	adds	r1, r6, #1
 8001d92:	4638      	mov	r0, r7
 8001d94:	f00a f9fa 	bl	800c18c <extract_msg_bit_field>
 8001d98:	e7d1      	b.n	8001d3e <read_write_message+0x22>
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 8001d9a:	b13d      	cbz	r5, 8001dac <read_write_message+0x90>
 8001d9c:	f10d 0307 	add.w	r3, sp, #7
 8001da0:	2204      	movs	r2, #4
 8001da2:	78b1      	ldrb	r1, [r6, #2]
 8001da4:	4638      	mov	r0, r7
 8001da6:	f00a f9d0 	bl	800c14a <fill_msg_bit_field>
 8001daa:	e7c8      	b.n	8001d3e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8001dac:	f10d 0307 	add.w	r3, sp, #7
 8001db0:	2204      	movs	r2, #4
 8001db2:	1cb1      	adds	r1, r6, #2
 8001db4:	4638      	mov	r0, r7
 8001db6:	f00a f9e9 	bl	800c18c <extract_msg_bit_field>
 8001dba:	e7c0      	b.n	8001d3e <read_write_message+0x22>
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 8001dbc:	b13d      	cbz	r5, 8001dce <read_write_message+0xb2>
 8001dbe:	f10d 0307 	add.w	r3, sp, #7
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	78f1      	ldrb	r1, [r6, #3]
 8001dc6:	4638      	mov	r0, r7
 8001dc8:	f00a f9bf 	bl	800c14a <fill_msg_bit_field>
 8001dcc:	e7b7      	b.n	8001d3e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8001dce:	f10d 0307 	add.w	r3, sp, #7
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	1cf1      	adds	r1, r6, #3
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	f00a f9d8 	bl	800c18c <extract_msg_bit_field>
 8001ddc:	e7af      	b.n	8001d3e <read_write_message+0x22>
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 8001dde:	b13d      	cbz	r5, 8001df0 <read_write_message+0xd4>
 8001de0:	f10d 0307 	add.w	r3, sp, #7
 8001de4:	2201      	movs	r2, #1
 8001de6:	7931      	ldrb	r1, [r6, #4]
 8001de8:	4638      	mov	r0, r7
 8001dea:	f00a f9ae 	bl	800c14a <fill_msg_bit_field>
 8001dee:	e7a6      	b.n	8001d3e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001df0:	f10d 0307 	add.w	r3, sp, #7
 8001df4:	2201      	movs	r2, #1
 8001df6:	1d31      	adds	r1, r6, #4
 8001df8:	4638      	mov	r0, r7
 8001dfa:	f00a f9c7 	bl	800c18c <extract_msg_bit_field>
 8001dfe:	e79e      	b.n	8001d3e <read_write_message+0x22>
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001e00:	b13d      	cbz	r5, 8001e12 <read_write_message+0xf6>
 8001e02:	f10d 0307 	add.w	r3, sp, #7
 8001e06:	2208      	movs	r2, #8
 8001e08:	7971      	ldrb	r1, [r6, #5]
 8001e0a:	4638      	mov	r0, r7
 8001e0c:	f00a f99d 	bl	800c14a <fill_msg_bit_field>
 8001e10:	e795      	b.n	8001d3e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001e12:	f10d 0307 	add.w	r3, sp, #7
 8001e16:	2208      	movs	r2, #8
 8001e18:	1d71      	adds	r1, r6, #5
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	f00a f9b6 	bl	800c18c <extract_msg_bit_field>
 8001e20:	e78d      	b.n	8001d3e <read_write_message+0x22>
}
 8001e22:	b003      	add	sp, #12
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	bf00      	nop

08001e28 <send_msg>:
    k_sleep(K_MSEC(DELAY_TIME_MSEC));
    k_timer_start(&periodic_timer, K_MSEC(DURATION_TIME_MSEC),K_MSEC(PERIOD_TIME_MSEC));
}

static void send_msg(void)
{
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	b082      	sub	sp, #8
    volatile int rc = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9301      	str	r3, [sp, #4]
    uint32_t new_msg = 0;
 8001e30:	9300      	str	r3, [sp, #0]
    struct k_msgq* cur_queue = NULL;
//    LOG_DBG("Check queues");

    if (msgq_tx_msg_prio.used_msgs) {
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <send_msg+0xd0>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	b923      	cbnz	r3, 8001e42 <send_msg+0x1a>
//        LOG_DBG("Get message from priority queue");
        k_msgq_get(&msgq_tx_msg_prio, &tx_msg, K_NO_WAIT);
        cur_queue = &msgq_tx_msg_prio;
    } else if (msgq_tx_msg.used_msgs) {
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <send_msg+0xd4>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	b97b      	cbnz	r3, 8001e5e <send_msg+0x36>
    }
    else {
        return;
    }
//    LOG_DBG("Message sending");
}
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001e42:	4e2d      	ldr	r6, [pc, #180]	; (8001ef8 <send_msg+0xd0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	2300      	movs	r3, #0
 8001e48:	492d      	ldr	r1, [pc, #180]	; (8001f00 <send_msg+0xd8>)
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	f007 f9ec 	bl	8009228 <z_impl_k_msgq_get>
    read_write_message(&new_msg, &tx_msg, true);
 8001e50:	2201      	movs	r2, #1
 8001e52:	492b      	ldr	r1, [pc, #172]	; (8001f00 <send_msg+0xd8>)
 8001e54:	4668      	mov	r0, sp
 8001e56:	f7ff ff61 	bl	8001d1c <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	e015      	b.n	8001e8a <send_msg+0x62>
 8001e5e:	4e27      	ldr	r6, [pc, #156]	; (8001efc <send_msg+0xd4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	2300      	movs	r3, #0
 8001e64:	4926      	ldr	r1, [pc, #152]	; (8001f00 <send_msg+0xd8>)
 8001e66:	4630      	mov	r0, r6
 8001e68:	f007 f9de 	bl	8009228 <z_impl_k_msgq_get>
        cur_queue = &msgq_tx_msg;
 8001e6c:	e7f0      	b.n	8001e50 <send_msg+0x28>
        tx_buf[i] = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 8001e6e:	00e3      	lsls	r3, r4, #3
 8001e70:	20ff      	movs	r0, #255	; 0xff
 8001e72:	4098      	lsls	r0, r3
 8001e74:	9a00      	ldr	r2, [sp, #0]
 8001e76:	4010      	ands	r0, r2
 8001e78:	40d8      	lsrs	r0, r3
 8001e7a:	b2c0      	uxtb	r0, r0
 8001e7c:	4d21      	ldr	r5, [pc, #132]	; (8001f04 <send_msg+0xdc>)
 8001e7e:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001e80:	f00a f9a8 	bl	800c1d4 <reverse>
 8001e84:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001e86:	3401      	adds	r4, #1
 8001e88:	b2e4      	uxtb	r4, r4
 8001e8a:	2c02      	cmp	r4, #2
 8001e8c:	d9ef      	bls.n	8001e6e <send_msg+0x46>
    if (!lora_cfg.tx) {
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <send_msg+0xe0>)
 8001e90:	7adb      	ldrb	r3, [r3, #11]
 8001e92:	b95b      	cbnz	r3, 8001eac <send_msg+0x84>
        lora_cfg.tx = true;
 8001e94:	491c      	ldr	r1, [pc, #112]	; (8001f08 <send_msg+0xe0>)
 8001e96:	2301      	movs	r3, #1
 8001e98:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <send_msg+0xe4>)
 8001e9c:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001e9e:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4798      	blx	r3
 8001ea4:	9001      	str	r0, [sp, #4]
        if (rc < 0) {
 8001ea6:	9b01      	ldr	r3, [sp, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0c      	blt.n	8001ec6 <send_msg+0x9e>
    if ( signalman_current_state.state == TRANSMIT ) {
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <send_msg+0xe8>)
 8001eae:	791b      	ldrb	r3, [r3, #4]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d1c4      	bne.n	8001e3e <send_msg+0x16>
        rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <send_msg+0xe4>)
 8001eb6:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001eb8:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4911      	ldr	r1, [pc, #68]	; (8001f04 <send_msg+0xdc>)
 8001ec0:	4798      	blx	r3
 8001ec2:	9001      	str	r0, [sp, #4]
 8001ec4:	e7bb      	b.n	8001e3e <send_msg+0x16>
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <send_msg+0xec>)
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <send_msg+0xf0>)
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	08db      	lsrs	r3, r3, #3
            LOG_DBG("Modem not configure!!!");
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	f361 0202 	bfi	r2, r1, #0, #3
 8001ed8:	f36f 02c5 	bfc	r2, #3, #3
 8001edc:	f363 128f 	bfi	r2, r3, #6, #10
 8001ee0:	490e      	ldr	r1, [pc, #56]	; (8001f1c <send_msg+0xf4>)
 8001ee2:	480f      	ldr	r0, [pc, #60]	; (8001f20 <send_msg+0xf8>)
 8001ee4:	f001 fc6a 	bl	80037bc <log_1>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2300      	movs	r3, #0
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <send_msg+0xd8>)
 8001eee:	4630      	mov	r0, r6
 8001ef0:	f007 f93e 	bl	8009170 <z_impl_k_msgq_put>
            return;
 8001ef4:	e7a3      	b.n	8001e3e <send_msg+0x16>
 8001ef6:	bf00      	nop
 8001ef8:	20000480 	.word	0x20000480
 8001efc:	2000044c 	.word	0x2000044c
 8001f00:	20000948 	.word	0x20000948
 8001f04:	20000944 	.word	0x20000944
 8001f08:	20000930 	.word	0x20000930
 8001f0c:	2000093c 	.word	0x2000093c
 8001f10:	20000978 	.word	0x20000978
 8001f14:	0800ef94 	.word	0x0800ef94
 8001f18:	0800ef6c 	.word	0x0800ef6c
 8001f1c:	0800f3ec 	.word	0x0800f3ec
 8001f20:	0800f1a0 	.word	0x0800f1a0

08001f24 <recv_msg>:


static void recv_msg(void)
{
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	b088      	sub	sp, #32
    volatile int rc = -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2c:	9307      	str	r3, [sp, #28]
    volatile uint32_t ticks = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9306      	str	r3, [sp, #24]
    int16_t rssi = 0;
 8001f32:	f8ad 3016 	strh.w	r3, [sp, #22]
    int8_t snr = 0;
 8001f36:	f88d 3015 	strb.w	r3, [sp, #21]

    if (lora_cfg.tx) {
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <recv_msg+0x148>)
 8001f3c:	7adb      	ldrb	r3, [r3, #11]
 8001f3e:	b15b      	cbz	r3, 8001f58 <recv_msg+0x34>
        lora_cfg.tx = false;
 8001f40:	494a      	ldr	r1, [pc, #296]	; (800206c <recv_msg+0x148>)
 8001f42:	2300      	movs	r3, #0
 8001f44:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <recv_msg+0x14c>)
 8001f48:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001f4a:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4798      	blx	r3
 8001f50:	9007      	str	r0, [sp, #28]
        if (rc < 0) {
 8001f52:	9b07      	ldr	r3, [sp, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db46      	blt.n	8001fe6 <recv_msg+0xc2>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
 8001f58:	4846      	ldr	r0, [pc, #280]	; (8002074 <recv_msg+0x150>)
 8001f5a:	f00c f95f 	bl	800e21c <z_timeout_remaining>
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <recv_msg+0x154>)
 8001f60:	fba3 3000 	umull	r3, r0, r3, r0
 8001f64:	08c0      	lsrs	r0, r0, #3
            return;
        }
    }

    ticks = k_ticks_to_ms_floor32(k_timer_remaining_ticks(&periodic_timer));
 8001f66:	9006      	str	r0, [sp, #24]
    if ( signalman_current_state.state == RECEIVE ) {
 8001f68:	4b44      	ldr	r3, [pc, #272]	; (800207c <recv_msg+0x158>)
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d13a      	bne.n	8001fe6 <recv_msg+0xc2>
        rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES, K_MSEC(ticks), &rssi, &snr);
 8001f70:	4b3f      	ldr	r3, [pc, #252]	; (8002070 <recv_msg+0x14c>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	9b06      	ldr	r3, [sp, #24]
 8001f76:	b113      	cbz	r3, 8001f7e <recv_msg+0x5a>
 8001f78:	9906      	ldr	r1, [sp, #24]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	e001      	b.n	8001f82 <recv_msg+0x5e>
 8001f7e:	2100      	movs	r1, #0
 8001f80:	460a      	mov	r2, r1
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001f82:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001f86:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8001f8a:	008b      	lsls	r3, r1, #2
 8001f8c:	185b      	adds	r3, r3, r1
 8001f8e:	eb42 020c 	adc.w	r2, r2, ip
 8001f92:	18db      	adds	r3, r3, r3
 8001f94:	4152      	adcs	r2, r2
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001f96:	6881      	ldr	r1, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001f98:	68cc      	ldr	r4, [r1, #12]
 8001f9a:	f10d 0115 	add.w	r1, sp, #21
 8001f9e:	9103      	str	r1, [sp, #12]
 8001fa0:	f10d 0116 	add.w	r1, sp, #22
 8001fa4:	9102      	str	r1, [sp, #8]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	9201      	str	r2, [sp, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	4934      	ldr	r1, [pc, #208]	; (8002080 <recv_msg+0x15c>)
 8001fae:	47a0      	blx	r4
 8001fb0:	9007      	str	r0, [sp, #28]
    }
    else {
        return;
    }
    if (rc > 0) {
 8001fb2:	9b07      	ldr	r3, [sp, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dd16      	ble.n	8001fe6 <recv_msg+0xc2>
        if (IS_SYNC_MSG) {
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <recv_msg+0x15c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2bc1      	cmp	r3, #193	; 0xc1
 8001fbe:	d014      	beq.n	8001fea <recv_msg+0xc6>
            // little delay to account execution time
            k_sleep(K_MSEC(DELAY_TIME_MSEC));
            k_timer_start(&periodic_timer, K_MSEC(DURATION_TIME_MSEC),
                          K_MSEC(PERIOD_TIME_MSEC));
        }
        k_msgq_put(&msgq_rx_msg, &rx_buf, K_NO_WAIT);
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2500      	movs	r5, #0
 8001fc4:	4622      	mov	r2, r4
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	492d      	ldr	r1, [pc, #180]	; (8002080 <recv_msg+0x15c>)
 8001fca:	482e      	ldr	r0, [pc, #184]	; (8002084 <recv_msg+0x160>)
 8001fcc:	f007 f8d0 	bl	8009170 <z_impl_k_msgq_put>
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	f10d 0116 	add.w	r1, sp, #22
 8001fd8:	482b      	ldr	r0, [pc, #172]	; (8002088 <recv_msg+0x164>)
 8001fda:	f007 f8c9 	bl	8009170 <z_impl_k_msgq_put>
        k_msgq_put(&msgq_rssi, &rssi, K_NO_WAIT);
        k_wakeup(proc_task_id);
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <recv_msg+0x168>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001fe2:	f00c f86c 	bl	800e0be <z_impl_k_wakeup>
    }
}
 8001fe6:	b008      	add	sp, #32
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
        if (IS_SYNC_MSG) {
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <recv_msg+0x15c>)
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d1e6      	bne.n	8001fc0 <recv_msg+0x9c>
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <recv_msg+0x15c>)
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e2      	bne.n	8001fc0 <recv_msg+0x9c>
 8001ffa:	4c25      	ldr	r4, [pc, #148]	; (8002090 <recv_msg+0x16c>)
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <recv_msg+0x170>)
 8001ffe:	1ae4      	subs	r4, r4, r3
 8002000:	08e4      	lsrs	r4, r4, #3
            LOG_DBG(" REQUEST");
 8002002:	2604      	movs	r6, #4
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f366 0202 	bfi	r2, r6, #0, #3
 800200c:	f36f 02c5 	bfc	r2, #3, #3
 8002010:	f364 128f 	bfi	r2, r4, #6, #10
 8002014:	4d20      	ldr	r5, [pc, #128]	; (8002098 <recv_msg+0x174>)
 8002016:	4629      	mov	r1, r5
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <recv_msg+0x178>)
 800201a:	f001 fbcf 	bl	80037bc <log_1>
            LOG_DBG(" MESSAGE_TYPE_SYNC");
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f366 0202 	bfi	r2, r6, #0, #3
 8002026:	f36f 02c5 	bfc	r2, #3, #3
 800202a:	f364 128f 	bfi	r2, r4, #6, #10
 800202e:	4629      	mov	r1, r5
 8002030:	481b      	ldr	r0, [pc, #108]	; (80020a0 <recv_msg+0x17c>)
 8002032:	f001 fbc3 	bl	80037bc <log_1>
	z_impl_k_timer_stop(timer);
 8002036:	4c0f      	ldr	r4, [pc, #60]	; (8002074 <recv_msg+0x150>)
 8002038:	4620      	mov	r0, r4
 800203a:	f00c f947 	bl	800e2cc <z_impl_k_timer_stop>
            signalman_current_state = signalman_recv_state;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <recv_msg+0x158>)
 8002040:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <recv_msg+0x180>)
 8002042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002046:	e883 0003 	stmia.w	r3, {r0, r1}
	return z_impl_k_sleep(timeout);
 800204a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800204e:	2100      	movs	r1, #0
 8002050:	f007 ff58 	bl	8009f04 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 8002054:	f649 1220 	movw	r2, #39200	; 0x9920
 8002058:	2300      	movs	r3, #0
 800205a:	e9cd 2300 	strd	r2, r3, [sp]
 800205e:	2200      	movs	r2, #0
 8002060:	2300      	movs	r3, #0
 8002062:	4620      	mov	r0, r4
 8002064:	f008 f980 	bl	800a368 <z_impl_k_timer_start>
 8002068:	e7aa      	b.n	8001fc0 <recv_msg+0x9c>
 800206a:	bf00      	nop
 800206c:	20000930 	.word	0x20000930
 8002070:	2000093c 	.word	0x2000093c
 8002074:	200004d0 	.word	0x200004d0
 8002078:	cccccccd 	.word	0xcccccccd
 800207c:	20000978 	.word	0x20000978
 8002080:	20000940 	.word	0x20000940
 8002084:	20000418 	.word	0x20000418
 8002088:	200003e4 	.word	0x200003e4
 800208c:	0800f440 	.word	0x0800f440
 8002090:	0800ef94 	.word	0x0800ef94
 8002094:	0800ef6c 	.word	0x0800ef6c
 8002098:	0800f3e0 	.word	0x0800f3e0
 800209c:	0800f1bc 	.word	0x0800f1bc
 80020a0:	0800f1cc 	.word	0x0800f1cc
 80020a4:	20000980 	.word	0x20000980

080020a8 <signalman_periodic_timer_handler>:
    LOG_DBG("Button anti-dream pressed");
}


void signalman_periodic_timer_handler(struct k_timer *tim)
{
 80020a8:	b508      	push	{r3, lr}
//    k_msgq_put(&msgq_tx_msg_prio, &alarm_msg, K_NO_WAIT);
    signalman_current_state = *signalman_current_state.next;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <signalman_periodic_timer_handler+0x18>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020b2:	e883 0003 	stmia.w	r3, {r0, r1}
    k_wakeup(modem_task_id);
 80020b6:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <signalman_periodic_timer_handler+0x1c>)
 80020b8:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 80020ba:	f00c f800 	bl	800e0be <z_impl_k_wakeup>
}
 80020be:	bd08      	pop	{r3, pc}
 80020c0:	20000978 	.word	0x20000978
 80020c4:	0800f43c 	.word	0x0800f43c

080020c8 <signalman_button_alarm_pressed_cb>:
{
 80020c8:	b508      	push	{r3, lr}
    k_work_submit(&work_buzzer);
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <signalman_button_alarm_pressed_cb+0x38>)
 80020cc:	f007 fb4a 	bl	8009764 <k_work_submit>
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <signalman_button_alarm_pressed_cb+0x3c>)
 80020d2:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <signalman_button_alarm_pressed_cb+0x40>)
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	08db      	lsrs	r3, r3, #3
    LOG_DBG("Button alarm pressed");
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	2104      	movs	r1, #4
 80020de:	f361 0202 	bfi	r2, r1, #0, #3
 80020e2:	f36f 02c5 	bfc	r2, #3, #3
 80020e6:	f363 128f 	bfi	r2, r3, #6, #10
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <signalman_button_alarm_pressed_cb+0x44>)
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <signalman_button_alarm_pressed_cb+0x48>)
 80020ee:	f001 fb65 	bl	80037bc <log_1>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	4907      	ldr	r1, [pc, #28]	; (8002114 <signalman_button_alarm_pressed_cb+0x4c>)
 80020f8:	4807      	ldr	r0, [pc, #28]	; (8002118 <signalman_button_alarm_pressed_cb+0x50>)
 80020fa:	f007 f839 	bl	8009170 <z_impl_k_msgq_put>
}
 80020fe:	bd08      	pop	{r3, pc}
 8002100:	20000950 	.word	0x20000950
 8002104:	0800ef94 	.word	0x0800ef94
 8002108:	0800ef6c 	.word	0x0800ef6c
 800210c:	0800f3bc 	.word	0x0800f3bc
 8002110:	0800f1e4 	.word	0x0800f1e4
 8002114:	20000960 	.word	0x20000960
 8002118:	2000044c 	.word	0x2000044c

0800211c <signalman_system_init>:
{
 800211c:	b510      	push	{r4, lr}
    system_init();
 800211e:	f7ff fda9 	bl	8001c74 <system_init>
 8002122:	481e      	ldr	r0, [pc, #120]	; (800219c <signalman_system_init+0x80>)
 8002124:	f006 fd86 	bl	8008c34 <z_impl_device_get_binding>
    signalman_button_alarm_gpio_dev_ptr = device_get_binding(BUTTON_ALARM_GPIO_PORT);
 8002128:	4c1d      	ldr	r4, [pc, #116]	; (80021a0 <signalman_system_init+0x84>)
 800212a:	6020      	str	r0, [r4, #0]
	const struct gpio_driver_api *api =
 800212c:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
 800212e:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002130:	6813      	ldr	r3, [r2, #0]
 8002132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002136:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
 8002138:	680b      	ldr	r3, [r1, #0]
 800213a:	f240 1201 	movw	r2, #257	; 0x101
 800213e:	210d      	movs	r1, #13
 8002140:	4798      	blx	r3
    gpio_pin_interrupt_configure(signalman_button_alarm_gpio_dev_ptr, BUTTON_ALARM_GPIO_PIN,
 8002142:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 8002144:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8002146:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002148:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800214a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800214e:	d122      	bne.n	8002196 <signalman_system_init+0x7a>
 8002150:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8002154:	699c      	ldr	r4, [r3, #24]
 8002156:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 800215a:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 800215e:	210d      	movs	r1, #13
 8002160:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <signalman_system_init+0x88>)
 8002164:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <signalman_system_init+0x8c>)
 8002166:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 8002168:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800216c:	609a      	str	r2, [r3, #8]
    gpio_add_callback(signalman_button_alarm_gpio_dev_ptr, &signalman_button_alarm_cb);
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <signalman_system_init+0x84>)
 8002170:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8002172:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	b113      	cbz	r3, 800217e <signalman_system_init+0x62>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8002178:	2201      	movs	r2, #1
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <signalman_system_init+0x88>)
 800217c:	4798      	blx	r3
    k_timer_init(&periodic_timer, signalman_periodic_timer_handler, NULL);
 800217e:	2200      	movs	r2, #0
 8002180:	490a      	ldr	r1, [pc, #40]	; (80021ac <signalman_system_init+0x90>)
 8002182:	480b      	ldr	r0, [pc, #44]	; (80021b0 <signalman_system_init+0x94>)
 8002184:	f00c f896 	bl	800e2b4 <k_timer_init>
    update_indication(0, true, 0, true);
 8002188:	2301      	movs	r3, #1
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7ff fd18 	bl	8001bc4 <update_indication>
}
 8002194:	bd10      	pop	{r4, pc}
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8002196:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 800219a:	e7db      	b.n	8002154 <signalman_system_init+0x38>
 800219c:	0800f200 	.word	0x0800f200
 80021a0:	20000974 	.word	0x20000974
 80021a4:	20000968 	.word	0x20000968
 80021a8:	080020c9 	.word	0x080020c9
 80021ac:	080020a9 	.word	0x080020a9
 80021b0:	200004d0 	.word	0x200004d0

080021b4 <signalman_start_system>:
{
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b087      	sub	sp, #28
    volatile int rc = -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021bc:	9305      	str	r3, [sp, #20]
    int16_t rssi = 0;
 80021be:	2400      	movs	r4, #0
 80021c0:	f8ad 4012 	strh.w	r4, [sp, #18]
    int8_t snr = 0;
 80021c4:	f88d 4011 	strb.w	r4, [sp, #17]
    signalman_system_init();
 80021c8:	f7ff ffa8 	bl	800211c <signalman_system_init>
    signalman_recv_state.next = &signalman_transmit_state;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <signalman_start_system+0x90>)
 80021ce:	4a1e      	ldr	r2, [pc, #120]	; (8002248 <signalman_start_system+0x94>)
 80021d0:	601a      	str	r2, [r3, #0]
    signalman_recv_state.state = RECEIVE;
 80021d2:	711c      	strb	r4, [r3, #4]
    signalman_transmit_state.next = &signalman_recv_state;
 80021d4:	6013      	str	r3, [r2, #0]
    signalman_transmit_state.state = TRANSMIT;
 80021d6:	f04f 0c01 	mov.w	ip, #1
 80021da:	f882 c004 	strb.w	ip, [r2, #4]
    signalman_current_state = signalman_recv_state;
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <signalman_start_system+0x98>)
 80021e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021e4:	e882 0003 	stmia.w	r2, {r0, r1}
    alarm_msg.receiver_addr = RECV_BASE_STATION;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <signalman_start_system+0x9c>)
 80021ea:	2203      	movs	r2, #3
 80021ec:	705a      	strb	r2, [r3, #1]
    alarm_msg.sender_addr = signalman_cur_dev_addr;
 80021ee:	4919      	ldr	r1, [pc, #100]	; (8002254 <signalman_start_system+0xa0>)
 80021f0:	7809      	ldrb	r1, [r1, #0]
 80021f2:	7019      	strb	r1, [r3, #0]
    alarm_msg.message_type = MESSAGE_TYPE_ALARM;
 80021f4:	709c      	strb	r4, [r3, #2]
    alarm_msg.direction = REQUEST;
 80021f6:	f883 c003 	strb.w	ip, [r3, #3]
    alarm_msg.workers_in_safe_zone = 0;
 80021fa:	715c      	strb	r4, [r3, #5]
    rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <signalman_start_system+0xa4>)
 80021fe:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8002200:	6883      	ldr	r3, [r0, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f10d 0111 	add.w	r1, sp, #17
 8002208:	9103      	str	r1, [sp, #12]
 800220a:	f10d 0112 	add.w	r1, sp, #18
 800220e:	9102      	str	r1, [sp, #8]
 8002210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002214:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002218:	e9cd 4500 	strd	r4, r5, [sp]
 800221c:	490f      	ldr	r1, [pc, #60]	; (800225c <signalman_start_system+0xa8>)
 800221e:	4798      	blx	r3
 8002220:	9005      	str	r0, [sp, #20]
	return z_impl_k_sleep(timeout);
 8002222:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002226:	2100      	movs	r1, #0
 8002228:	f007 fe6c 	bl	8009f04 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 800222c:	f649 1220 	movw	r2, #39200	; 0x9920
 8002230:	2300      	movs	r3, #0
 8002232:	e9cd 2300 	strd	r2, r3, [sp]
 8002236:	2200      	movs	r2, #0
 8002238:	2300      	movs	r3, #0
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <signalman_start_system+0xac>)
 800223c:	f008 f894 	bl	800a368 <z_impl_k_timer_start>
}
 8002240:	b007      	add	sp, #28
 8002242:	bd30      	pop	{r4, r5, pc}
 8002244:	20000980 	.word	0x20000980
 8002248:	20000988 	.word	0x20000988
 800224c:	20000978 	.word	0x20000978
 8002250:	20000960 	.word	0x20000960
 8002254:	200002a4 	.word	0x200002a4
 8002258:	2000093c 	.word	0x2000093c
 800225c:	20000940 	.word	0x20000940
 8002260:	200004d0 	.word	0x200004d0

08002264 <signalman_proc_task>:
{
 8002264:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002268:	b099      	sub	sp, #100	; 0x64
    int16_t rssi = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint32_t cur_msg = 0;
 8002270:	9316      	str	r3, [sp, #88]	; 0x58
    struct message_s tx_msg_proc = {0};
 8002272:	9314      	str	r3, [sp, #80]	; 0x50
 8002274:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    struct message_s rx_msg_proc = {0};
 8002278:	9312      	str	r3, [sp, #72]	; 0x48
 800227a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	return z_impl_k_sleep(timeout);
 800227e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002286:	f007 fe3d 	bl	8009f04 <z_impl_k_sleep>
 800228a:	e1f8      	b.n	800267e <signalman_proc_task+0x41a>
            cur_msg = 0;
 800228c:	2400      	movs	r4, #0
 800228e:	9416      	str	r4, [sp, #88]	; 0x58
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8002290:	e00e      	b.n	80022b0 <signalman_proc_task+0x4c>
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 8002292:	ab18      	add	r3, sp, #96	; 0x60
 8002294:	191d      	adds	r5, r3, r4
 8002296:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
 800229a:	f009 ff9b 	bl	800c1d4 <reverse>
 800229e:	f805 0c1c 	strb.w	r0, [r5, #-28]
                cur_msg |= (rx_buf_proc[i]) << i*8;
 80022a2:	00e3      	lsls	r3, r4, #3
 80022a4:	4098      	lsls	r0, r3
 80022a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80022a8:	4318      	orrs	r0, r3
 80022aa:	9016      	str	r0, [sp, #88]	; 0x58
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 80022ac:	3401      	adds	r4, #1
 80022ae:	b2e4      	uxtb	r4, r4
 80022b0:	2c02      	cmp	r4, #2
 80022b2:	d9ee      	bls.n	8002292 <signalman_proc_task+0x2e>
            read_write_message(&cur_msg, &rx_msg_proc, false); // rx_msg struct is fill
 80022b4:	2200      	movs	r2, #0
 80022b6:	a912      	add	r1, sp, #72	; 0x48
 80022b8:	a816      	add	r0, sp, #88	; 0x58
 80022ba:	f7ff fd2f 	bl	8001d1c <read_write_message>
            if ( (rx_msg_proc.receiver_addr != RECV_BROADCAST) &&
 80022be:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 80022c2:	b11a      	cbz	r2, 80022cc <signalman_proc_task+0x68>
            (rx_msg_proc.receiver_addr != signalman_cur_dev_addr) ) {
 80022c4:	4bc1      	ldr	r3, [pc, #772]	; (80025cc <signalman_proc_task+0x368>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
            if ( (rx_msg_proc.receiver_addr != RECV_BROADCAST) &&
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d131      	bne.n	8002330 <signalman_proc_task+0xcc>
            switch (rx_msg_proc.direction) {
 80022cc:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8106 	beq.w	80024e2 <signalman_proc_task+0x27e>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 81b2 	bne.w	8002640 <signalman_proc_task+0x3dc>
 80022dc:	4bbc      	ldr	r3, [pc, #752]	; (80025d0 <signalman_proc_task+0x36c>)
 80022de:	4abd      	ldr	r2, [pc, #756]	; (80025d4 <signalman_proc_task+0x370>)
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	08db      	lsrs	r3, r3, #3
                    LOG_DBG(" REQUEST");
 80022e4:	2204      	movs	r2, #4
 80022e6:	f362 0702 	bfi	r7, r2, #0, #3
 80022ea:	f36f 07c5 	bfc	r7, #3, #3
 80022ee:	f363 178f 	bfi	r7, r3, #6, #10
 80022f2:	4cb9      	ldr	r4, [pc, #740]	; (80025d8 <signalman_proc_task+0x374>)
 80022f4:	463a      	mov	r2, r7
 80022f6:	4621      	mov	r1, r4
 80022f8:	48b8      	ldr	r0, [pc, #736]	; (80025dc <signalman_proc_task+0x378>)
 80022fa:	f001 fa5f 	bl	80037bc <log_1>
                    tx_msg_proc.sender_addr = signalman_cur_dev_addr;
 80022fe:	4bb3      	ldr	r3, [pc, #716]	; (80025cc <signalman_proc_task+0x368>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tx_msg_proc.message_type = rx_msg_proc.message_type;
 8002306:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800230a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                    tx_msg_proc.workers_in_safe_zone = 0;
 800230e:	2200      	movs	r2, #0
 8002310:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
                    tx_msg_proc.direction = RESPONSE;
 8002314:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
                    tx_msg_proc.battery_level = BATTERY_LEVEL_GOOD; // change it after
 8002318:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
                    tx_msg_proc.receiver_addr = RECV_BASE_STATION;
 800231c:	2203      	movs	r2, #3
 800231e:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
                    switch (rx_msg_proc.message_type) {
 8002322:	2b03      	cmp	r3, #3
 8002324:	f200 80c9 	bhi.w	80024ba <signalman_proc_task+0x256>
 8002328:	e8df f003 	tbb	[pc, r3]
 800232c:	b37a2297 	.word	0xb37a2297
 8002330:	4ca7      	ldr	r4, [pc, #668]	; (80025d0 <signalman_proc_task+0x36c>)
 8002332:	49a8      	ldr	r1, [pc, #672]	; (80025d4 <signalman_proc_task+0x370>)
 8002334:	1a64      	subs	r4, r4, r1
 8002336:	08e4      	lsrs	r4, r4, #3
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, signalman_cur_dev_addr);
 8002338:	2504      	movs	r5, #4
 800233a:	f365 0b02 	bfi	fp, r5, #0, #3
 800233e:	f36f 0bc5 	bfc	fp, #3, #3
 8002342:	f364 1b8f 	bfi	fp, r4, #6, #10
 8002346:	f8ad b000 	strh.w	fp, [sp]
 800234a:	49a3      	ldr	r1, [pc, #652]	; (80025d8 <signalman_proc_task+0x374>)
 800234c:	48a4      	ldr	r0, [pc, #656]	; (80025e0 <signalman_proc_task+0x37c>)
 800234e:	f001 f9d1 	bl	80036f4 <log_3>
                LOG_DBG("Packet is filtered");
 8002352:	9b02      	ldr	r3, [sp, #8]
 8002354:	f365 0302 	bfi	r3, r5, #0, #3
 8002358:	f36f 03c5 	bfc	r3, #3, #3
 800235c:	f364 138f 	bfi	r3, r4, #6, #10
 8002360:	461a      	mov	r2, r3
 8002362:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002366:	499c      	ldr	r1, [pc, #624]	; (80025d8 <signalman_proc_task+0x374>)
 8002368:	489e      	ldr	r0, [pc, #632]	; (80025e4 <signalman_proc_task+0x380>)
 800236a:	f001 fa27 	bl	80037bc <log_1>
                continue;
 800236e:	e186      	b.n	800267e <signalman_proc_task+0x41a>
 8002370:	4b97      	ldr	r3, [pc, #604]	; (80025d0 <signalman_proc_task+0x36c>)
 8002372:	4a98      	ldr	r2, [pc, #608]	; (80025d4 <signalman_proc_task+0x370>)
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8002378:	2204      	movs	r2, #4
 800237a:	9903      	ldr	r1, [sp, #12]
 800237c:	f362 0102 	bfi	r1, r2, #0, #3
 8002380:	460a      	mov	r2, r1
 8002382:	f36f 02c5 	bfc	r2, #3, #3
 8002386:	f363 128f 	bfi	r2, r3, #6, #10
 800238a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800238e:	4621      	mov	r1, r4
 8002390:	4895      	ldr	r0, [pc, #596]	; (80025e8 <signalman_proc_task+0x384>)
 8002392:	f001 fa13 	bl	80037bc <log_1>
                            switch (rx_msg_proc.sender_addr) {
 8002396:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800239a:	2b03      	cmp	r3, #3
 800239c:	d016      	beq.n	80023cc <signalman_proc_task+0x168>
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d029      	beq.n	80023f6 <signalman_proc_task+0x192>
 80023a2:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <signalman_proc_task+0x36c>)
 80023a4:	4a8b      	ldr	r2, [pc, #556]	; (80025d4 <signalman_proc_task+0x370>)
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Undefined sender address for this message type");
 80023aa:	2204      	movs	r2, #4
 80023ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80023ae:	f362 0102 	bfi	r1, r2, #0, #3
 80023b2:	460a      	mov	r2, r1
 80023b4:	f36f 02c5 	bfc	r2, #3, #3
 80023b8:	f363 128f 	bfi	r2, r3, #6, #10
 80023bc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80023c0:	4621      	mov	r1, r4
 80023c2:	488a      	ldr	r0, [pc, #552]	; (80025ec <signalman_proc_task+0x388>)
 80023c4:	f001 f9fa 	bl	80037bc <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_rx_msg;
 80023c8:	4889      	ldr	r0, [pc, #548]	; (80025f0 <signalman_proc_task+0x38c>)
 80023ca:	e03d      	b.n	8002448 <signalman_proc_task+0x1e4>
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <signalman_proc_task+0x36c>)
 80023ce:	4a81      	ldr	r2, [pc, #516]	; (80025d4 <signalman_proc_task+0x370>)
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Base station disabled alarm");
 80023d4:	2204      	movs	r2, #4
 80023d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023d8:	f362 0102 	bfi	r1, r2, #0, #3
 80023dc:	460a      	mov	r2, r1
 80023de:	f36f 02c5 	bfc	r2, #3, #3
 80023e2:	f363 128f 	bfi	r2, r3, #6, #10
 80023e6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80023ea:	4621      	mov	r1, r4
 80023ec:	4881      	ldr	r0, [pc, #516]	; (80025f4 <signalman_proc_task+0x390>)
 80023ee:	f001 f9e5 	bl	80037bc <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_rx_msg;
 80023f2:	487f      	ldr	r0, [pc, #508]	; (80025f0 <signalman_proc_task+0x38c>)
 80023f4:	e028      	b.n	8002448 <signalman_proc_task+0x1e4>
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <signalman_proc_task+0x36c>)
 80023f8:	4a76      	ldr	r2, [pc, #472]	; (80025d4 <signalman_proc_task+0x370>)
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Brigade chief disabled alarm");
 80023fe:	2204      	movs	r2, #4
 8002400:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002402:	f362 0102 	bfi	r1, r2, #0, #3
 8002406:	460a      	mov	r2, r1
 8002408:	f36f 02c5 	bfc	r2, #3, #3
 800240c:	f363 128f 	bfi	r2, r3, #6, #10
 8002410:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8002414:	4621      	mov	r1, r4
 8002416:	4878      	ldr	r0, [pc, #480]	; (80025f8 <signalman_proc_task+0x394>)
 8002418:	f001 f9d0 	bl	80037bc <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_rx_msg;
 800241c:	4874      	ldr	r0, [pc, #464]	; (80025f0 <signalman_proc_task+0x38c>)
 800241e:	e013      	b.n	8002448 <signalman_proc_task+0x1e4>
 8002420:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <signalman_proc_task+0x36c>)
 8002422:	4a6c      	ldr	r2, [pc, #432]	; (80025d4 <signalman_proc_task+0x370>)
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 8002428:	2204      	movs	r2, #4
 800242a:	9904      	ldr	r1, [sp, #16]
 800242c:	f362 0102 	bfi	r1, r2, #0, #3
 8002430:	460a      	mov	r2, r1
 8002432:	f36f 02c5 	bfc	r2, #3, #3
 8002436:	f363 128f 	bfi	r2, r3, #6, #10
 800243a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800243e:	4621      	mov	r1, r4
 8002440:	486e      	ldr	r0, [pc, #440]	; (80025fc <signalman_proc_task+0x398>)
 8002442:	f001 f9bb 	bl	80037bc <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_rx_msg;
 8002446:	486a      	ldr	r0, [pc, #424]	; (80025f0 <signalman_proc_task+0x38c>)
            if (msgq_cur_msg_tx_ptr) {
 8002448:	2800      	cmp	r0, #0
 800244a:	f000 8109 	beq.w	8002660 <signalman_proc_task+0x3fc>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800244e:	2200      	movs	r2, #0
 8002450:	2300      	movs	r3, #0
 8002452:	a914      	add	r1, sp, #80	; 0x50
 8002454:	f006 fe8c 	bl	8009170 <z_impl_k_msgq_put>
 8002458:	e102      	b.n	8002660 <signalman_proc_task+0x3fc>
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <signalman_proc_task+0x36c>)
 800245c:	4a5d      	ldr	r2, [pc, #372]	; (80025d4 <signalman_proc_task+0x370>)
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002462:	2204      	movs	r2, #4
 8002464:	9905      	ldr	r1, [sp, #20]
 8002466:	f362 0102 	bfi	r1, r2, #0, #3
 800246a:	460a      	mov	r2, r1
 800246c:	f36f 02c5 	bfc	r2, #3, #3
 8002470:	f363 128f 	bfi	r2, r3, #6, #10
 8002474:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002478:	4621      	mov	r1, r4
 800247a:	4861      	ldr	r0, [pc, #388]	; (8002600 <signalman_proc_task+0x39c>)
 800247c:	f001 f99e 	bl	80037bc <log_1>
                            if (rx_msg_proc.sender_addr == signalman_cur_dev_addr)
 8002480:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002484:	4b51      	ldr	r3, [pc, #324]	; (80025cc <signalman_proc_task+0x368>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 80e9 	bne.w	8002660 <signalman_proc_task+0x3fc>
                                msgq_cur_msg_tx_ptr = &msgq_tx_msg_prio; // For response message
 800248e:	485d      	ldr	r0, [pc, #372]	; (8002604 <signalman_proc_task+0x3a0>)
 8002490:	e7da      	b.n	8002448 <signalman_proc_task+0x1e4>
 8002492:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <signalman_proc_task+0x36c>)
 8002494:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <signalman_proc_task+0x370>)
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 800249a:	2204      	movs	r2, #4
 800249c:	9906      	ldr	r1, [sp, #24]
 800249e:	f362 0102 	bfi	r1, r2, #0, #3
 80024a2:	460a      	mov	r2, r1
 80024a4:	f36f 02c5 	bfc	r2, #3, #3
 80024a8:	f363 128f 	bfi	r2, r3, #6, #10
 80024ac:	f8ad 2018 	strh.w	r2, [sp, #24]
 80024b0:	4621      	mov	r1, r4
 80024b2:	4855      	ldr	r0, [pc, #340]	; (8002608 <signalman_proc_task+0x3a4>)
 80024b4:	f001 f982 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80024b8:	e0d2      	b.n	8002660 <signalman_proc_task+0x3fc>
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <signalman_proc_task+0x36c>)
 80024bc:	4a45      	ldr	r2, [pc, #276]	; (80025d4 <signalman_proc_task+0x370>)
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 80024c2:	2204      	movs	r2, #4
 80024c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80024c6:	f362 0102 	bfi	r1, r2, #0, #3
 80024ca:	460a      	mov	r2, r1
 80024cc:	f36f 02c5 	bfc	r2, #3, #3
 80024d0:	f363 128f 	bfi	r2, r3, #6, #10
 80024d4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80024d8:	4621      	mov	r1, r4
 80024da:	484c      	ldr	r0, [pc, #304]	; (800260c <signalman_proc_task+0x3a8>)
 80024dc:	f001 f96e 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80024e0:	e0be      	b.n	8002660 <signalman_proc_task+0x3fc>
 80024e2:	4c3b      	ldr	r4, [pc, #236]	; (80025d0 <signalman_proc_task+0x36c>)
 80024e4:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <signalman_proc_task+0x370>)
 80024e6:	1ae4      	subs	r4, r4, r3
 80024e8:	08e4      	lsrs	r4, r4, #3
                    LOG_DBG(" RESPONSE");
 80024ea:	2304      	movs	r3, #4
 80024ec:	f363 0802 	bfi	r8, r3, #0, #3
 80024f0:	f36f 08c5 	bfc	r8, #3, #3
 80024f4:	f364 188f 	bfi	r8, r4, #6, #10
 80024f8:	4d37      	ldr	r5, [pc, #220]	; (80025d8 <signalman_proc_task+0x374>)
 80024fa:	4642      	mov	r2, r8
 80024fc:	4629      	mov	r1, r5
 80024fe:	4844      	ldr	r0, [pc, #272]	; (8002610 <signalman_proc_task+0x3ac>)
 8002500:	f001 f95c 	bl	80037bc <log_1>
                    LOG_DBG("Message type:");
 8002504:	2304      	movs	r3, #4
 8002506:	f363 0902 	bfi	r9, r3, #0, #3
 800250a:	f36f 09c5 	bfc	r9, #3, #3
 800250e:	f364 198f 	bfi	r9, r4, #6, #10
 8002512:	464a      	mov	r2, r9
 8002514:	4629      	mov	r1, r5
 8002516:	483f      	ldr	r0, [pc, #252]	; (8002614 <signalman_proc_task+0x3b0>)
 8002518:	f001 f950 	bl	80037bc <log_1>
                    switch (rx_msg_proc.message_type) {
 800251c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8002520:	2b03      	cmp	r3, #3
 8002522:	d879      	bhi.n	8002618 <signalman_proc_task+0x3b4>
 8002524:	e8df f003 	tbb	[pc, r3]
 8002528:	3e16022a 	.word	0x3e16022a
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <signalman_proc_task+0x36c>)
 800252e:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <signalman_proc_task+0x370>)
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8002534:	2204      	movs	r2, #4
 8002536:	9907      	ldr	r1, [sp, #28]
 8002538:	f362 0102 	bfi	r1, r2, #0, #3
 800253c:	460a      	mov	r2, r1
 800253e:	f36f 02c5 	bfc	r2, #3, #3
 8002542:	f363 128f 	bfi	r2, r3, #6, #10
 8002546:	f8ad 201c 	strh.w	r2, [sp, #28]
 800254a:	4629      	mov	r1, r5
 800254c:	4826      	ldr	r0, [pc, #152]	; (80025e8 <signalman_proc_task+0x384>)
 800254e:	f001 f935 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002552:	e085      	b.n	8002660 <signalman_proc_task+0x3fc>
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <signalman_proc_task+0x36c>)
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <signalman_proc_task+0x370>)
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 800255c:	2204      	movs	r2, #4
 800255e:	9908      	ldr	r1, [sp, #32]
 8002560:	f362 0102 	bfi	r1, r2, #0, #3
 8002564:	460a      	mov	r2, r1
 8002566:	f36f 02c5 	bfc	r2, #3, #3
 800256a:	f363 128f 	bfi	r2, r3, #6, #10
 800256e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002572:	4629      	mov	r1, r5
 8002574:	4821      	ldr	r0, [pc, #132]	; (80025fc <signalman_proc_task+0x398>)
 8002576:	f001 f921 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 800257a:	e071      	b.n	8002660 <signalman_proc_task+0x3fc>
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <signalman_proc_task+0x36c>)
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <signalman_proc_task+0x370>)
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002584:	2204      	movs	r2, #4
 8002586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002588:	f362 0102 	bfi	r1, r2, #0, #3
 800258c:	460a      	mov	r2, r1
 800258e:	f36f 02c5 	bfc	r2, #3, #3
 8002592:	f363 128f 	bfi	r2, r3, #6, #10
 8002596:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800259a:	4629      	mov	r1, r5
 800259c:	4818      	ldr	r0, [pc, #96]	; (8002600 <signalman_proc_task+0x39c>)
 800259e:	f001 f90d 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80025a2:	e05d      	b.n	8002660 <signalman_proc_task+0x3fc>
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <signalman_proc_task+0x36c>)
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <signalman_proc_task+0x370>)
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 80025ac:	2204      	movs	r2, #4
 80025ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80025b0:	f362 0102 	bfi	r1, r2, #0, #3
 80025b4:	460a      	mov	r2, r1
 80025b6:	f36f 02c5 	bfc	r2, #3, #3
 80025ba:	f363 128f 	bfi	r2, r3, #6, #10
 80025be:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80025c2:	4629      	mov	r1, r5
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <signalman_proc_task+0x3a4>)
 80025c6:	f001 f8f9 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80025ca:	e049      	b.n	8002660 <signalman_proc_task+0x3fc>
 80025cc:	200002a4 	.word	0x200002a4
 80025d0:	0800ef94 	.word	0x0800ef94
 80025d4:	0800ef6c 	.word	0x0800ef6c
 80025d8:	0800f3f8 	.word	0x0800f3f8
 80025dc:	0800f1bc 	.word	0x0800f1bc
 80025e0:	0800f21c 	.word	0x0800f21c
 80025e4:	0800f244 	.word	0x0800f244
 80025e8:	0800f25c 	.word	0x0800f25c
 80025ec:	0800f2c0 	.word	0x0800f2c0
 80025f0:	20000418 	.word	0x20000418
 80025f4:	0800f27c 	.word	0x0800f27c
 80025f8:	0800f29c 	.word	0x0800f29c
 80025fc:	0800f2f4 	.word	0x0800f2f4
 8002600:	0800f310 	.word	0x0800f310
 8002604:	20000480 	.word	0x20000480
 8002608:	0800f328 	.word	0x0800f328
 800260c:	0800f348 	.word	0x0800f348
 8002610:	0800f368 	.word	0x0800f368
 8002614:	0800f378 	.word	0x0800f378
 8002618:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <signalman_proc_task+0x47c>)
 800261a:	4a32      	ldr	r2, [pc, #200]	; (80026e4 <signalman_proc_task+0x480>)
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 8002620:	2204      	movs	r2, #4
 8002622:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002624:	f362 0102 	bfi	r1, r2, #0, #3
 8002628:	460a      	mov	r2, r1
 800262a:	f36f 02c5 	bfc	r2, #3, #3
 800262e:	f363 128f 	bfi	r2, r3, #6, #10
 8002632:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8002636:	4629      	mov	r1, r5
 8002638:	482b      	ldr	r0, [pc, #172]	; (80026e8 <signalman_proc_task+0x484>)
 800263a:	f001 f8bf 	bl	80037bc <log_1>
            if (msgq_cur_msg_tx_ptr) {
 800263e:	e00f      	b.n	8002660 <signalman_proc_task+0x3fc>
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <signalman_proc_task+0x47c>)
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <signalman_proc_task+0x480>)
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	08db      	lsrs	r3, r3, #3
                    LOG_DBG("Not correct message direction");
 8002648:	2204      	movs	r2, #4
 800264a:	f362 0a02 	bfi	sl, r2, #0, #3
 800264e:	f36f 0ac5 	bfc	sl, #3, #3
 8002652:	f363 1a8f 	bfi	sl, r3, #6, #10
 8002656:	4652      	mov	r2, sl
 8002658:	4924      	ldr	r1, [pc, #144]	; (80026ec <signalman_proc_task+0x488>)
 800265a:	4825      	ldr	r0, [pc, #148]	; (80026f0 <signalman_proc_task+0x48c>)
 800265c:	f001 f8ae 	bl	80037bc <log_1>
            leds_num = check_rssi(rssi);
 8002660:	f9bd 005e 	ldrsh.w	r0, [sp, #94]	; 0x5e
 8002664:	f009 fdc7 	bl	800c1f6 <check_rssi>
 8002668:	4602      	mov	r2, r0
            update_indication(rx_msg_proc.workers_in_safe_zone, true,
 800266a:	2301      	movs	r3, #1
 800266c:	4619      	mov	r1, r3
 800266e:	f89d 004d 	ldrb.w	r0, [sp, #77]	; 0x4d
 8002672:	f7ff faa7 	bl	8001bc4 <update_indication>
	return z_impl_k_sleep(timeout);
 8002676:	2001      	movs	r0, #1
 8002678:	2100      	movs	r1, #0
 800267a:	f007 fc43 	bl	8009f04 <z_impl_k_sleep>
        if (msgq_rx_msg.used_msgs) {
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <signalman_proc_task+0x490>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f7      	beq.n	8002676 <signalman_proc_task+0x412>
            k_msgq_get(&msgq_rx_msg, &rx_buf_proc, K_NO_WAIT);
 8002686:	2400      	movs	r4, #0
 8002688:	2500      	movs	r5, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 800268a:	4622      	mov	r2, r4
 800268c:	462b      	mov	r3, r5
 800268e:	a911      	add	r1, sp, #68	; 0x44
 8002690:	4818      	ldr	r0, [pc, #96]	; (80026f4 <signalman_proc_task+0x490>)
 8002692:	f006 fdc9 	bl	8009228 <z_impl_k_msgq_get>
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 800269e:	4816      	ldr	r0, [pc, #88]	; (80026f8 <signalman_proc_task+0x494>)
 80026a0:	f006 fdc2 	bl	8009228 <z_impl_k_msgq_get>
            if (rx_buf_proc[0] == rx_buf_proc[1] == rx_buf_proc[2] == 0) {
 80026a4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80026a8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf14      	ite	ne
 80026b0:	2300      	movne	r3, #0
 80026b2:	2301      	moveq	r3, #1
 80026b4:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f43f ade7 	beq.w	800228c <signalman_proc_task+0x28>
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <signalman_proc_task+0x47c>)
 80026c0:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <signalman_proc_task+0x480>)
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	08db      	lsrs	r3, r3, #3
                LOG_DBG("Empty message");
 80026c6:	2204      	movs	r2, #4
 80026c8:	f362 0602 	bfi	r6, r2, #0, #3
 80026cc:	f36f 06c5 	bfc	r6, #3, #3
 80026d0:	f363 168f 	bfi	r6, r3, #6, #10
 80026d4:	4632      	mov	r2, r6
 80026d6:	4905      	ldr	r1, [pc, #20]	; (80026ec <signalman_proc_task+0x488>)
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <signalman_proc_task+0x498>)
 80026da:	f001 f86f 	bl	80037bc <log_1>
                continue;
 80026de:	e7ce      	b.n	800267e <signalman_proc_task+0x41a>
 80026e0:	0800ef94 	.word	0x0800ef94
 80026e4:	0800ef6c 	.word	0x0800ef6c
 80026e8:	0800f348 	.word	0x0800f348
 80026ec:	0800f3f8 	.word	0x0800f3f8
 80026f0:	0800f38c 	.word	0x0800f38c
 80026f4:	20000418 	.word	0x20000418
 80026f8:	200003e4 	.word	0x200003e4
 80026fc:	0800f208 	.word	0x0800f208

08002700 <signalman_modem_task>:
{
 8002700:	b500      	push	{lr}
 8002702:	b083      	sub	sp, #12
    volatile uint32_t ticks = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	9301      	str	r3, [sp, #4]
	return z_impl_k_sleep(timeout);
 8002708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800270c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002710:	f007 fbf8 	bl	8009f04 <z_impl_k_sleep>
 8002714:	e00b      	b.n	800272e <signalman_modem_task+0x2e>
            send_msg();
 8002716:	f7ff fb87 	bl	8001e28 <send_msg>
            signalman_current_state = *(signalman_current_state.next);
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <signalman_modem_task+0x3c>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002722:	e883 0003 	stmia.w	r3, {r0, r1}
 8002726:	2001      	movs	r0, #1
 8002728:	2100      	movs	r1, #0
 800272a:	f007 fbeb 	bl	8009f04 <z_impl_k_sleep>
        if (signalman_current_state.state == TRANSMIT) {
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <signalman_modem_task+0x3c>)
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d0ef      	beq.n	8002716 <signalman_modem_task+0x16>
            recv_msg();
 8002736:	f7ff fbf5 	bl	8001f24 <recv_msg>
 800273a:	e7f4      	b.n	8002726 <signalman_modem_task+0x26>
 800273c:	20000978 	.word	0x20000978

08002740 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8002740:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002742:	680b      	ldr	r3, [r1, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002748:	4b01      	ldr	r3, [pc, #4]	; (8002750 <char_out+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4798      	blx	r3
}
 800274e:	bd08      	pop	{r3, pc}
 8002750:	20000010 	.word	0x20000010

08002754 <__printk_hook_install>:
	_char_out = fn;
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <__printk_hook_install+0x8>)
 8002756:	6018      	str	r0, [r3, #0]
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000010 	.word	0x20000010

08002760 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8002760:	b500      	push	{lr}
 8002762:	b083      	sub	sp, #12
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 8002768:	2100      	movs	r1, #0
 800276a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 800276c:	a901      	add	r1, sp, #4
 800276e:	4803      	ldr	r0, [pc, #12]	; (800277c <vprintk+0x1c>)
 8002770:	f000 fa2c 	bl	8002bcc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8002774:	b003      	add	sp, #12
 8002776:	f85d fb04 	ldr.w	pc, [sp], #4
 800277a:	bf00      	nop
 800277c:	08002741 	.word	0x08002741

08002780 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8002780:	b510      	push	{r4, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 8002786:	9001      	str	r0, [sp, #4]
 8002788:	9102      	str	r1, [sp, #8]
 800278a:	2100      	movs	r1, #0
 800278c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 800278e:	a901      	add	r1, sp, #4
 8002790:	4805      	ldr	r0, [pc, #20]	; (80027a8 <vsnprintk+0x28>)
 8002792:	f000 fa1b 	bl	8002bcc <cbvprintf>

	if (ctx.count < ctx.max) {
 8002796:	9b03      	ldr	r3, [sp, #12]
 8002798:	9a02      	ldr	r2, [sp, #8]
 800279a:	4293      	cmp	r3, r2
 800279c:	da01      	bge.n	80027a2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 800279e:	2200      	movs	r2, #0
 80027a0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 80027a2:	9803      	ldr	r0, [sp, #12]
 80027a4:	b004      	add	sp, #16
 80027a6:	bd10      	pop	{r4, pc}
 80027a8:	0800c273 	.word	0x0800c273

080027ac <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 80027ac:	4684      	mov	ip, r0
	const char *sp = *str;
 80027ae:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 80027b0:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 80027b2:	e005      	b.n	80027c0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 80027b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027b8:	3201      	adds	r2, #1
 80027ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80027be:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80027c0:	7813      	ldrb	r3, [r2, #0]
 80027c2:	4904      	ldr	r1, [pc, #16]	; (80027d4 <extract_decimal+0x28>)
 80027c4:	5c59      	ldrb	r1, [r3, r1]
 80027c6:	f011 0f04 	tst.w	r1, #4
 80027ca:	d1f3      	bne.n	80027b4 <extract_decimal+0x8>
	}
	*str = sp;
 80027cc:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	08010555 	.word	0x08010555

080027d8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 80027de:	2300      	movs	r3, #0
 80027e0:	6003      	str	r3, [r0, #0]
 80027e2:	6043      	str	r3, [r0, #4]
 80027e4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 80027e6:	784b      	ldrb	r3, [r1, #1]
 80027e8:	2b25      	cmp	r3, #37	; 0x25
 80027ea:	d002      	beq.n	80027f2 <extract_conversion+0x1a>
 80027ec:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 80027ee:	2501      	movs	r5, #1
 80027f0:	e01f      	b.n	8002832 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 80027f2:	1c88      	adds	r0, r1, #2
 80027f4:	70e3      	strb	r3, [r4, #3]
		return sp;
 80027f6:	e145      	b.n	8002a84 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 80027f8:	7823      	ldrb	r3, [r4, #0]
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8002800:	b1b5      	cbz	r5, 8002830 <extract_conversion+0x58>
			++sp;
 8002802:	3601      	adds	r6, #1
 8002804:	e014      	b.n	8002830 <extract_conversion+0x58>
			conv->flag_plus = true;
 8002806:	7823      	ldrb	r3, [r4, #0]
 8002808:	f043 0308 	orr.w	r3, r3, #8
 800280c:	7023      	strb	r3, [r4, #0]
			break;
 800280e:	e7f7      	b.n	8002800 <extract_conversion+0x28>
			conv->flag_space = true;
 8002810:	7823      	ldrb	r3, [r4, #0]
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	7023      	strb	r3, [r4, #0]
			break;
 8002818:	e7f2      	b.n	8002800 <extract_conversion+0x28>
			conv->flag_hash = true;
 800281a:	7823      	ldrb	r3, [r4, #0]
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	7023      	strb	r3, [r4, #0]
			break;
 8002822:	e7ed      	b.n	8002800 <extract_conversion+0x28>
			conv->flag_zero = true;
 8002824:	7823      	ldrb	r3, [r4, #0]
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	7023      	strb	r3, [r4, #0]
			break;
 800282c:	e7e8      	b.n	8002800 <extract_conversion+0x28>
		switch (*sp) {
 800282e:	2500      	movs	r5, #0
	} while (loop);
 8002830:	b345      	cbz	r5, 8002884 <extract_conversion+0xac>
		switch (*sp) {
 8002832:	7833      	ldrb	r3, [r6, #0]
 8002834:	3b20      	subs	r3, #32
 8002836:	2b10      	cmp	r3, #16
 8002838:	d8f9      	bhi.n	800282e <extract_conversion+0x56>
 800283a:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <extract_conversion+0x68>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002811 	.word	0x08002811
 8002844:	0800282f 	.word	0x0800282f
 8002848:	0800282f 	.word	0x0800282f
 800284c:	0800281b 	.word	0x0800281b
 8002850:	0800282f 	.word	0x0800282f
 8002854:	0800282f 	.word	0x0800282f
 8002858:	0800282f 	.word	0x0800282f
 800285c:	0800282f 	.word	0x0800282f
 8002860:	0800282f 	.word	0x0800282f
 8002864:	0800282f 	.word	0x0800282f
 8002868:	0800282f 	.word	0x0800282f
 800286c:	08002807 	.word	0x08002807
 8002870:	0800282f 	.word	0x0800282f
 8002874:	080027f9 	.word	0x080027f9
 8002878:	0800282f 	.word	0x0800282f
 800287c:	0800282f 	.word	0x0800282f
 8002880:	08002825 	.word	0x08002825
	if (conv->flag_zero && conv->flag_dash) {
 8002884:	7823      	ldrb	r3, [r4, #0]
 8002886:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800288a:	2b44      	cmp	r3, #68	; 0x44
 800288c:	d05f      	beq.n	800294e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 800288e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8002890:	7823      	ldrb	r3, [r4, #0]
 8002892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002896:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8002898:	7833      	ldrb	r3, [r6, #0]
 800289a:	2b2a      	cmp	r3, #42	; 0x2a
 800289c:	d05c      	beq.n	8002958 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 800289e:	a801      	add	r0, sp, #4
 80028a0:	f7ff ff84 	bl	80027ac <extract_decimal>
	if (sp != wp) {
 80028a4:	9b01      	ldr	r3, [sp, #4]
 80028a6:	429e      	cmp	r6, r3
 80028a8:	d00f      	beq.n	80028ca <extract_conversion+0xf2>
		conv->width_present = true;
 80028aa:	7823      	ldrb	r3, [r4, #0]
 80028ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 80028b2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 80028ba:	2800      	cmp	r0, #0
 80028bc:	db54      	blt.n	8002968 <extract_conversion+0x190>
 80028be:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	7822      	ldrb	r2, [r4, #0]
 80028c4:	f363 0241 	bfi	r2, r3, #1, #1
 80028c8:	7022      	strb	r2, [r4, #0]
	return sp;
 80028ca:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 80028cc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b2e      	cmp	r3, #46	; 0x2e
 80028d2:	bf14      	ite	ne
 80028d4:	2300      	movne	r3, #0
 80028d6:	2301      	moveq	r3, #1
 80028d8:	7862      	ldrb	r2, [r4, #1]
 80028da:	f363 0241 	bfi	r2, r3, #1, #1
 80028de:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d043      	beq.n	800296c <extract_conversion+0x194>
	++sp;
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	2b2a      	cmp	r3, #42	; 0x2a
 80028ee:	d03f      	beq.n	8002970 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 80028f0:	a801      	add	r0, sp, #4
 80028f2:	f7ff ff5b 	bl	80027ac <extract_decimal>
	conv->prec_value = prec;
 80028f6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 80028f8:	7823      	ldrb	r3, [r4, #0]
 80028fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 80028fe:	2800      	cmp	r0, #0
 8002900:	db3e      	blt.n	8002980 <extract_conversion+0x1a8>
 8002902:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8002904:	4313      	orrs	r3, r2
 8002906:	7822      	ldrb	r2, [r4, #0]
 8002908:	f363 0241 	bfi	r2, r3, #1, #1
 800290c:	7022      	strb	r2, [r4, #0]
	return sp;
 800290e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8002910:	7803      	ldrb	r3, [r0, #0]
 8002912:	3b4c      	subs	r3, #76	; 0x4c
 8002914:	2b2e      	cmp	r3, #46	; 0x2e
 8002916:	f200 809d 	bhi.w	8002a54 <extract_conversion+0x27c>
 800291a:	e8df f003 	tbb	[pc, r3]
 800291e:	9b90      	.short	0x9b90
 8002920:	9b9b9b9b 	.word	0x9b9b9b9b
 8002924:	9b9b9b9b 	.word	0x9b9b9b9b
 8002928:	9b9b9b9b 	.word	0x9b9b9b9b
 800292c:	9b9b9b9b 	.word	0x9b9b9b9b
 8002930:	9b9b9b9b 	.word	0x9b9b9b9b
 8002934:	9b9b9b9b 	.word	0x9b9b9b9b
 8002938:	9b339b9b 	.word	0x9b339b9b
 800293c:	9b459b57 	.word	0x9b459b57
 8002940:	9b9b9b9b 	.word	0x9b9b9b9b
 8002944:	9b899b9b 	.word	0x9b899b9b
 8002948:	9b9b9b9b 	.word	0x9b9b9b9b
 800294c:	82          	.byte	0x82
 800294d:	00          	.byte	0x00
		conv->flag_zero = false;
 800294e:	7823      	ldrb	r3, [r4, #0]
 8002950:	f36f 1386 	bfc	r3, #6, #1
 8002954:	7023      	strb	r3, [r4, #0]
 8002956:	e79a      	b.n	800288e <extract_conversion+0xb6>
		conv->width_star = true;
 8002958:	7863      	ldrb	r3, [r4, #1]
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002960:	4633      	mov	r3, r6
 8002962:	3301      	adds	r3, #1
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	e7b1      	b.n	80028cc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8002968:	2201      	movs	r2, #1
 800296a:	e7a9      	b.n	80028c0 <extract_conversion+0xe8>
		return sp;
 800296c:	9801      	ldr	r0, [sp, #4]
 800296e:	e7cf      	b.n	8002910 <extract_conversion+0x138>
		conv->prec_star = true;
 8002970:	7863      	ldrb	r3, [r4, #1]
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002978:	4610      	mov	r0, r2
 800297a:	3001      	adds	r0, #1
 800297c:	9001      	str	r0, [sp, #4]
 800297e:	e7c7      	b.n	8002910 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8002980:	2201      	movs	r2, #1
 8002982:	e7bf      	b.n	8002904 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8002984:	1c42      	adds	r2, r0, #1
 8002986:	7843      	ldrb	r3, [r0, #1]
 8002988:	2b68      	cmp	r3, #104	; 0x68
 800298a:	d006      	beq.n	800299a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 800298c:	7863      	ldrb	r3, [r4, #1]
 800298e:	2102      	movs	r1, #2
 8002990:	f361 03c6 	bfi	r3, r1, #3, #4
 8002994:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8002996:	4610      	mov	r0, r2
 8002998:	e01e      	b.n	80029d8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 800299a:	7863      	ldrb	r3, [r4, #1]
 800299c:	2201      	movs	r2, #1
 800299e:	f362 03c6 	bfi	r3, r2, #3, #4
 80029a2:	7063      	strb	r3, [r4, #1]
			++sp;
 80029a4:	3002      	adds	r0, #2
 80029a6:	e017      	b.n	80029d8 <extract_conversion+0x200>
		if (*++sp == 'l') {
 80029a8:	1c42      	adds	r2, r0, #1
 80029aa:	7843      	ldrb	r3, [r0, #1]
 80029ac:	2b6c      	cmp	r3, #108	; 0x6c
 80029ae:	d006      	beq.n	80029be <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 80029b0:	7863      	ldrb	r3, [r4, #1]
 80029b2:	2103      	movs	r1, #3
 80029b4:	f361 03c6 	bfi	r3, r1, #3, #4
 80029b8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 80029ba:	4610      	mov	r0, r2
 80029bc:	e00c      	b.n	80029d8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 80029be:	7863      	ldrb	r3, [r4, #1]
 80029c0:	2204      	movs	r2, #4
 80029c2:	f362 03c6 	bfi	r3, r2, #3, #4
 80029c6:	7063      	strb	r3, [r4, #1]
			++sp;
 80029c8:	3002      	adds	r0, #2
 80029ca:	e005      	b.n	80029d8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 80029cc:	7863      	ldrb	r3, [r4, #1]
 80029ce:	2205      	movs	r2, #5
 80029d0:	f362 03c6 	bfi	r3, r2, #3, #4
 80029d4:	7063      	strb	r3, [r4, #1]
		++sp;
 80029d6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 80029d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80029dc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 80029de:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80029e2:	2a37      	cmp	r2, #55	; 0x37
 80029e4:	d87d      	bhi.n	8002ae2 <extract_conversion+0x30a>
 80029e6:	e8df f002 	tbb	[pc, r2]
 80029ea:	7c5e      	.short	0x7c5e
 80029ec:	5e5e7c7c 	.word	0x5e5e7c7c
 80029f0:	7c7c7c5e 	.word	0x7c7c7c5e
 80029f4:	7c7c7c7c 	.word	0x7c7c7c7c
 80029f8:	7c7c7c7c 	.word	0x7c7c7c7c
 80029fc:	7c7c7c7c 	.word	0x7c7c7c7c
 8002a00:	7c7c4f7c 	.word	0x7c7c4f7c
 8002a04:	7c7c7c7c 	.word	0x7c7c7c7c
 8002a08:	7c5e7c7c 	.word	0x7c5e7c7c
 8002a0c:	5e5e3a4f 	.word	0x5e5e3a4f
 8002a10:	7c3a7c5e 	.word	0x7c3a7c5e
 8002a14:	657c7c7c 	.word	0x657c7c7c
 8002a18:	7c7c714f 	.word	0x7c7c714f
 8002a1c:	7c4f7c71 	.word	0x7c4f7c71
 8002a20:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8002a22:	7863      	ldrb	r3, [r4, #1]
 8002a24:	2206      	movs	r2, #6
 8002a26:	f362 03c6 	bfi	r3, r2, #3, #4
 8002a2a:	7063      	strb	r3, [r4, #1]
		++sp;
 8002a2c:	3001      	adds	r0, #1
		break;
 8002a2e:	e7d3      	b.n	80029d8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8002a30:	7863      	ldrb	r3, [r4, #1]
 8002a32:	2207      	movs	r2, #7
 8002a34:	f362 03c6 	bfi	r3, r2, #3, #4
 8002a38:	7063      	strb	r3, [r4, #1]
		++sp;
 8002a3a:	3001      	adds	r0, #1
		break;
 8002a3c:	e7cc      	b.n	80029d8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8002a3e:	7863      	ldrb	r3, [r4, #1]
 8002a40:	2208      	movs	r2, #8
 8002a42:	f362 03c6 	bfi	r3, r2, #3, #4
 8002a46:	7063      	strb	r3, [r4, #1]
		++sp;
 8002a48:	3001      	adds	r0, #1
		conv->unsupported = true;
 8002a4a:	7823      	ldrb	r3, [r4, #0]
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	7023      	strb	r3, [r4, #0]
		break;
 8002a52:	e7c1      	b.n	80029d8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8002a54:	7863      	ldrb	r3, [r4, #1]
 8002a56:	f36f 03c6 	bfc	r3, #3, #4
 8002a5a:	7063      	strb	r3, [r4, #1]
		break;
 8002a5c:	e7bc      	b.n	80029d8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8002a5e:	78a2      	ldrb	r2, [r4, #2]
 8002a60:	2101      	movs	r1, #1
 8002a62:	f361 0202 	bfi	r2, r1, #0, #3
 8002a66:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002a68:	7862      	ldrb	r2, [r4, #1]
 8002a6a:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8002a6e:	2a40      	cmp	r2, #64	; 0x40
 8002a70:	d010      	beq.n	8002a94 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8002a72:	2b63      	cmp	r3, #99	; 0x63
 8002a74:	d013      	beq.n	8002a9e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8002a76:	7823      	ldrb	r3, [r4, #0]
 8002a78:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002a7c:	4315      	orrs	r5, r2
 8002a7e:	f365 0341 	bfi	r3, r5, #1, #1
 8002a82:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002a84:	b002      	add	sp, #8
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8002a88:	78a2      	ldrb	r2, [r4, #2]
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	f361 0202 	bfi	r2, r1, #0, #3
 8002a90:	70a2      	strb	r2, [r4, #2]
 8002a92:	e7e9      	b.n	8002a68 <extract_conversion+0x290>
			conv->invalid = true;
 8002a94:	7821      	ldrb	r1, [r4, #0]
 8002a96:	f041 0101 	orr.w	r1, r1, #1
 8002a9a:	7021      	strb	r1, [r4, #0]
 8002a9c:	e7e9      	b.n	8002a72 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002a9e:	1e15      	subs	r5, r2, #0
 8002aa0:	bf18      	it	ne
 8002aa2:	2501      	movne	r5, #1
 8002aa4:	e7e7      	b.n	8002a76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8002aa6:	78a3      	ldrb	r3, [r4, #2]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	f362 0302 	bfi	r3, r2, #0, #3
 8002aae:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8002ab0:	2501      	movs	r5, #1
			break;
 8002ab2:	e7e0      	b.n	8002a76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002ab4:	78a3      	ldrb	r3, [r4, #2]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f362 0302 	bfi	r3, r2, #0, #3
 8002abc:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002abe:	7863      	ldrb	r3, [r4, #1]
 8002ac0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d1d6      	bne.n	8002a76 <extract_conversion+0x29e>
			unsupported = true;
 8002ac8:	2501      	movs	r5, #1
 8002aca:	e7d4      	b.n	8002a76 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002acc:	78a3      	ldrb	r3, [r4, #2]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f362 0302 	bfi	r3, r2, #0, #3
 8002ad4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8002ad6:	7863      	ldrb	r3, [r4, #1]
 8002ad8:	f013 0f78 	tst.w	r3, #120	; 0x78
 8002adc:	d0cb      	beq.n	8002a76 <extract_conversion+0x29e>
			unsupported = true;
 8002ade:	2501      	movs	r5, #1
 8002ae0:	e7c9      	b.n	8002a76 <extract_conversion+0x29e>
		conv->invalid = true;
 8002ae2:	7823      	ldrb	r3, [r4, #0]
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	7023      	strb	r3, [r4, #0]
		break;
 8002aea:	e7c4      	b.n	8002a76 <extract_conversion+0x29e>

08002aec <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af0:	b083      	sub	sp, #12
 8002af2:	4604      	mov	r4, r0
 8002af4:	460d      	mov	r5, r1
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	469a      	mov	sl, r3
 8002afa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8002afc:	78d3      	ldrb	r3, [r2, #3]
 8002afe:	4a32      	ldr	r2, [pc, #200]	; (8002bc8 <encode_uint+0xdc>)
 8002b00:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002b04:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002b08:	2b6f      	cmp	r3, #111	; 0x6f
 8002b0a:	d00f      	beq.n	8002b2c <encode_uint+0x40>
 8002b0c:	d906      	bls.n	8002b1c <encode_uint+0x30>
 8002b0e:	2b70      	cmp	r3, #112	; 0x70
 8002b10:	d00f      	beq.n	8002b32 <encode_uint+0x46>
 8002b12:	2b78      	cmp	r3, #120	; 0x78
 8002b14:	d110      	bne.n	8002b38 <encode_uint+0x4c>
		return 16;
 8002b16:	f04f 0910 	mov.w	r9, #16
 8002b1a:	e023      	b.n	8002b64 <encode_uint+0x78>
	switch (specifier) {
 8002b1c:	2b58      	cmp	r3, #88	; 0x58
 8002b1e:	d002      	beq.n	8002b26 <encode_uint+0x3a>
 8002b20:	f04f 090a 	mov.w	r9, #10
 8002b24:	e01e      	b.n	8002b64 <encode_uint+0x78>
		return 16;
 8002b26:	f04f 0910 	mov.w	r9, #16
 8002b2a:	e01b      	b.n	8002b64 <encode_uint+0x78>
		return 8;
 8002b2c:	f04f 0908 	mov.w	r9, #8
 8002b30:	e018      	b.n	8002b64 <encode_uint+0x78>
		return 16;
 8002b32:	f04f 0910 	mov.w	r9, #16
 8002b36:	e015      	b.n	8002b64 <encode_uint+0x78>
	switch (specifier) {
 8002b38:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002b3c:	e012      	b.n	8002b64 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	3230      	adds	r2, #48	; 0x30
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8002b48:	463a      	mov	r2, r7
 8002b4a:	4643      	mov	r3, r8
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd ff44 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002b54:	42bc      	cmp	r4, r7
 8002b56:	f175 0300 	sbcs.w	r3, r5, #0
 8002b5a:	d319      	bcc.n	8002b90 <encode_uint+0xa4>
 8002b5c:	4556      	cmp	r6, sl
 8002b5e:	d917      	bls.n	8002b90 <encode_uint+0xa4>
		value /= radix;
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002b64:	f04f 0800 	mov.w	r8, #0
 8002b68:	464f      	mov	r7, r9
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd ff33 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b76:	2a09      	cmp	r2, #9
 8002b78:	d9e1      	bls.n	8002b3e <encode_uint+0x52>
 8002b7a:	f1bb 0f01 	cmp.w	fp, #1
 8002b7e:	d003      	beq.n	8002b88 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002b80:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b82:	3257      	adds	r2, #87	; 0x57
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	e7dd      	b.n	8002b44 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002b88:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002b8a:	3237      	adds	r2, #55	; 0x37
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	e7d9      	b.n	8002b44 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002b90:	9b01      	ldr	r3, [sp, #4]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	f013 0f20 	tst.w	r3, #32
 8002b98:	d005      	beq.n	8002ba6 <encode_uint+0xba>
		if (radix == 8) {
 8002b9a:	f1b9 0f08 	cmp.w	r9, #8
 8002b9e:	d006      	beq.n	8002bae <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8002ba0:	f1b9 0f10 	cmp.w	r9, #16
 8002ba4:	d009      	beq.n	8002bba <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	b003      	add	sp, #12
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8002bae:	9a01      	ldr	r2, [sp, #4]
 8002bb0:	7893      	ldrb	r3, [r2, #2]
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	7093      	strb	r3, [r2, #2]
 8002bb8:	e7f5      	b.n	8002ba6 <encode_uint+0xba>
			conv->altform_0c = true;
 8002bba:	9a01      	ldr	r2, [sp, #4]
 8002bbc:	7893      	ldrb	r3, [r2, #2]
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	7093      	strb	r3, [r2, #2]
 8002bc4:	e7ef      	b.n	8002ba6 <encode_uint+0xba>
 8002bc6:	bf00      	nop
 8002bc8:	08010555 	.word	0x08010555

08002bcc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd0:	b091      	sub	sp, #68	; 0x44
 8002bd2:	4606      	mov	r6, r0
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	4691      	mov	r9, r2
 8002bd8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002bda:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002bdc:	f899 0000 	ldrb.w	r0, [r9]
 8002be0:	2800      	cmp	r0, #0
 8002be2:	f000 82d5 	beq.w	8003190 <cbvprintf+0x5c4>
		if (*fp != '%') {
 8002be6:	2825      	cmp	r0, #37	; 0x25
 8002be8:	d008      	beq.n	8002bfc <cbvprintf+0x30>
			OUTC(*fp++);
 8002bea:	f109 0901 	add.w	r9, r9, #1
 8002bee:	4629      	mov	r1, r5
 8002bf0:	47b0      	blx	r6
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	f2c0 82cd 	blt.w	8003192 <cbvprintf+0x5c6>
 8002bf8:	3401      	adds	r4, #1
			continue;
 8002bfa:	e7ef      	b.n	8002bdc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	9305      	str	r3, [sp, #20]
 8002c02:	9306      	str	r3, [sp, #24]
 8002c04:	9307      	str	r3, [sp, #28]
 8002c06:	9308      	str	r3, [sp, #32]
 8002c08:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	a806      	add	r0, sp, #24
 8002c0e:	f7ff fde3 	bl	80027d8 <extract_conversion>
 8002c12:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8002c14:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002c18:	f013 0f01 	tst.w	r3, #1
 8002c1c:	f000 8097 	beq.w	8002d4e <cbvprintf+0x182>
			width = va_arg(ap, int);
 8002c20:	9b03      	ldr	r3, [sp, #12]
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	9203      	str	r2, [sp, #12]
 8002c26:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8002c28:	2f00      	cmp	r7, #0
 8002c2a:	f2c0 8088 	blt.w	8002d3e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8002c2e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002c32:	f013 0f04 	tst.w	r3, #4
 8002c36:	f000 809c 	beq.w	8002d72 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8002c3a:	9b03      	ldr	r3, [sp, #12]
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	9203      	str	r2, [sp, #12]
 8002c40:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002c44:	f1ba 0f00 	cmp.w	sl, #0
 8002c48:	f2c0 808a 	blt.w	8002d60 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8002c50:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8002c52:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002c56:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8002c5a:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8002c5e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f000 808e 	beq.w	8002d84 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f000 80d3 	beq.w	8002e14 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	f000 8124 	beq.w	8002ebc <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	f000 813b 	beq.w	8002ef0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8002c7a:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8002c7e:	f018 0b03 	ands.w	fp, r8, #3
 8002c82:	f040 813b 	bne.w	8002efc <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8002c86:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002c8a:	3b25      	subs	r3, #37	; 0x25
 8002c8c:	2b53      	cmp	r3, #83	; 0x53
 8002c8e:	f200 81e6 	bhi.w	800305e <cbvprintf+0x492>
 8002c92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c96:	0140      	.short	0x0140
 8002c98:	01e401e4 	.word	0x01e401e4
 8002c9c:	01e401e4 	.word	0x01e401e4
 8002ca0:	01e401e4 	.word	0x01e401e4
 8002ca4:	01e401e4 	.word	0x01e401e4
 8002ca8:	01e401e4 	.word	0x01e401e4
 8002cac:	01e401e4 	.word	0x01e401e4
 8002cb0:	01e401e4 	.word	0x01e401e4
 8002cb4:	01e401e4 	.word	0x01e401e4
 8002cb8:	01e401e4 	.word	0x01e401e4
 8002cbc:	01e401e4 	.word	0x01e401e4
 8002cc0:	01e401e4 	.word	0x01e401e4
 8002cc4:	01e401e4 	.word	0x01e401e4
 8002cc8:	01e401e4 	.word	0x01e401e4
 8002ccc:	01e401e4 	.word	0x01e401e4
 8002cd0:	01e401e4 	.word	0x01e401e4
 8002cd4:	01e401e4 	.word	0x01e401e4
 8002cd8:	01e401e4 	.word	0x01e401e4
 8002cdc:	01e401e4 	.word	0x01e401e4
 8002ce0:	01e401e4 	.word	0x01e401e4
 8002ce4:	01e401e4 	.word	0x01e401e4
 8002ce8:	01e401e4 	.word	0x01e401e4
 8002cec:	01e401e4 	.word	0x01e401e4
 8002cf0:	01e401e4 	.word	0x01e401e4
 8002cf4:	01e401e4 	.word	0x01e401e4
 8002cf8:	01e401e4 	.word	0x01e401e4
 8002cfc:	01e40181 	.word	0x01e40181
 8002d00:	01e401e4 	.word	0x01e401e4
 8002d04:	01e401e4 	.word	0x01e401e4
 8002d08:	01e401e4 	.word	0x01e401e4
 8002d0c:	01e401e4 	.word	0x01e401e4
 8002d10:	015e01e4 	.word	0x015e01e4
 8002d14:	01e40167 	.word	0x01e40167
 8002d18:	01e401e4 	.word	0x01e401e4
 8002d1c:	016701e4 	.word	0x016701e4
 8002d20:	01e401e4 	.word	0x01e401e4
 8002d24:	01e401e4 	.word	0x01e401e4
 8002d28:	018101be 	.word	0x018101be
 8002d2c:	01e401a2 	.word	0x01e401a2
 8002d30:	014d01e4 	.word	0x014d01e4
 8002d34:	018101e4 	.word	0x018101e4
 8002d38:	01e401e4 	.word	0x01e401e4
 8002d3c:	0181      	.short	0x0181
				conv->flag_dash = true;
 8002d3e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8002d4a:	427f      	negs	r7, r7
 8002d4c:	e76f      	b.n	8002c2e <cbvprintf+0x62>
		} else if (conv->width_present) {
 8002d4e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db02      	blt.n	8002d5c <cbvprintf+0x190>
		int width = -1;
 8002d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d5a:	e768      	b.n	8002c2e <cbvprintf+0x62>
			width = conv->width_value;
 8002d5c:	9f07      	ldr	r7, [sp, #28]
 8002d5e:	e766      	b.n	8002c2e <cbvprintf+0x62>
				conv->prec_present = false;
 8002d60:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002d64:	f36f 0341 	bfc	r3, #1, #1
 8002d68:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002d6c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002d70:	e76c      	b.n	8002c4c <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8002d72:	f013 0f02 	tst.w	r3, #2
 8002d76:	d002      	beq.n	8002d7e <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002d78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002d7c:	e766      	b.n	8002c4c <cbvprintf+0x80>
		int precision = -1;
 8002d7e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002d82:	e763      	b.n	8002c4c <cbvprintf+0x80>
			switch (length_mod) {
 8002d84:	1ecb      	subs	r3, r1, #3
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d804      	bhi.n	8002d94 <cbvprintf+0x1c8>
 8002d8a:	e8df f003 	tbb	[pc, r3]
 8002d8e:	1d0b      	.short	0x1d0b
 8002d90:	3529      	.short	0x3529
 8002d92:	35          	.byte	0x35
 8002d93:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002d94:	9b03      	ldr	r3, [sp, #12]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	9203      	str	r2, [sp, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	17da      	asrs	r2, r3, #31
 8002d9e:	9304      	str	r3, [sp, #16]
 8002da0:	9205      	str	r2, [sp, #20]
				break;
 8002da2:	e006      	b.n	8002db2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002da4:	9b03      	ldr	r3, [sp, #12]
 8002da6:	1d1a      	adds	r2, r3, #4
 8002da8:	9203      	str	r2, [sp, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	17da      	asrs	r2, r3, #31
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8002db2:	2901      	cmp	r1, #1
 8002db4:	d028      	beq.n	8002e08 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002db6:	2902      	cmp	r1, #2
 8002db8:	f47f af5f 	bne.w	8002c7a <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002dbc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002dc0:	17da      	asrs	r2, r3, #31
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	9205      	str	r2, [sp, #20]
 8002dc6:	e758      	b.n	8002c7a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	f103 0208 	add.w	r2, r3, #8
 8002dd4:	9203      	str	r2, [sp, #12]
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002dde:	e7e8      	b.n	8002db2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3307      	adds	r3, #7
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	f103 0208 	add.w	r2, r3, #8
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002df6:	e7dc      	b.n	8002db2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002df8:	9b03      	ldr	r3, [sp, #12]
 8002dfa:	1d1a      	adds	r2, r3, #4
 8002dfc:	9203      	str	r2, [sp, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	17da      	asrs	r2, r3, #31
				value->sint =
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	9205      	str	r2, [sp, #20]
				break;
 8002e06:	e7d4      	b.n	8002db2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8002e08:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9305      	str	r3, [sp, #20]
 8002e12:	e732      	b.n	8002c7a <cbvprintf+0xae>
			switch (length_mod) {
 8002e14:	1ecb      	subs	r3, r1, #3
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d804      	bhi.n	8002e24 <cbvprintf+0x258>
 8002e1a:	e8df f003 	tbb	[pc, r3]
 8002e1e:	1f0b      	.short	0x1f0b
 8002e20:	4135      	.short	0x4135
 8002e22:	41          	.byte	0x41
 8002e23:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8002e24:	9b03      	ldr	r3, [sp, #12]
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	9203      	str	r2, [sp, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	9304      	str	r3, [sp, #16]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	9305      	str	r3, [sp, #20]
				break;
 8002e32:	e01e      	b.n	8002e72 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8002e34:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8002e38:	2b63      	cmp	r3, #99	; 0x63
 8002e3a:	d007      	beq.n	8002e4c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	9203      	str	r2, [sp, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	9304      	str	r3, [sp, #16]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9305      	str	r3, [sp, #20]
 8002e4a:	e012      	b.n	8002e72 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	9304      	str	r3, [sp, #16]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9305      	str	r3, [sp, #20]
 8002e5a:	e00a      	b.n	8002e72 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	3307      	adds	r3, #7
 8002e60:	f023 0307 	bic.w	r3, r3, #7
 8002e64:	f103 0208 	add.w	r2, r3, #8
 8002e68:	9203      	str	r2, [sp, #12]
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8002e72:	2901      	cmp	r1, #1
 8002e74:	d01c      	beq.n	8002eb0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002e76:	2902      	cmp	r1, #2
 8002e78:	f47f aeff 	bne.w	8002c7a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002e7c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002e80:	9304      	str	r3, [sp, #16]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	e6f8      	b.n	8002c7a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002e88:	9b03      	ldr	r3, [sp, #12]
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	f103 0208 	add.w	r2, r3, #8
 8002e94:	9203      	str	r2, [sp, #12]
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002e9e:	e7e8      	b.n	8002e72 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	9203      	str	r2, [sp, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002ea8:	9304      	str	r3, [sp, #16]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9305      	str	r3, [sp, #20]
				break;
 8002eae:	e7e0      	b.n	8002e72 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8002eb0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002eb4:	9304      	str	r3, [sp, #16]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9305      	str	r3, [sp, #20]
 8002eba:	e6de      	b.n	8002c7a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002ebc:	2908      	cmp	r1, #8
 8002ebe:	d00b      	beq.n	8002ed8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8002ec0:	9b03      	ldr	r3, [sp, #12]
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	f023 0307 	bic.w	r3, r3, #7
 8002ec8:	f103 0208 	add.w	r2, r3, #8
 8002ecc:	9203      	str	r2, [sp, #12]
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ed6:	e6d0      	b.n	8002c7a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	3307      	adds	r3, #7
 8002edc:	f023 0307 	bic.w	r3, r3, #7
 8002ee0:	f103 0208 	add.w	r2, r3, #8
 8002ee4:	9203      	str	r2, [sp, #12]
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002eee:	e6c4      	b.n	8002c7a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	1d1a      	adds	r2, r3, #4
 8002ef4:	9203      	str	r2, [sp, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	9304      	str	r3, [sp, #16]
 8002efa:	e6be      	b.n	8002c7a <cbvprintf+0xae>
			OUTS(sp, fp);
 8002efc:	9f02      	ldr	r7, [sp, #8]
 8002efe:	463b      	mov	r3, r7
 8002f00:	464a      	mov	r2, r9
 8002f02:	4629      	mov	r1, r5
 8002f04:	4630      	mov	r0, r6
 8002f06:	f009 faf6 	bl	800c4f6 <outs>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f2c0 8141 	blt.w	8003192 <cbvprintf+0x5c6>
 8002f10:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8002f12:	46b9      	mov	r9, r7
			continue;
 8002f14:	e662      	b.n	8002bdc <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8002f16:	4629      	mov	r1, r5
 8002f18:	2025      	movs	r0, #37	; 0x25
 8002f1a:	47b0      	blx	r6
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f2c0 8138 	blt.w	8003192 <cbvprintf+0x5c6>
 8002f22:	3401      	adds	r4, #1
		char sign = 0;
 8002f24:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002f26:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002f2a:	f04f 0900 	mov.w	r9, #0
			break;
 8002f2e:	e09b      	b.n	8003068 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8002f30:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8002f34:	f1ba 0f00 	cmp.w	sl, #0
 8002f38:	db07      	blt.n	8002f4a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	4648      	mov	r0, r9
 8002f3e:	f00b fb9c 	bl	800e67a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8002f42:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002f46:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002f48:	e08e      	b.n	8003068 <cbvprintf+0x49c>
				len = strlen(bps);
 8002f4a:	4648      	mov	r0, r9
 8002f4c:	f7fd ff83 	bl	8000e56 <strlen>
 8002f50:	e7f7      	b.n	8002f42 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002f52:	9b04      	ldr	r3, [sp, #16]
 8002f54:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002f58:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002f5a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8002f5e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8002f62:	e081      	b.n	8003068 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002f64:	f018 0f08 	tst.w	r8, #8
 8002f68:	d105      	bne.n	8002f76 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002f6a:	f018 0810 	ands.w	r8, r8, #16
 8002f6e:	d004      	beq.n	8002f7a <cbvprintf+0x3ae>
				sign = ' ';
 8002f70:	f04f 0820 	mov.w	r8, #32
 8002f74:	e001      	b.n	8002f7a <cbvprintf+0x3ae>
				sign = '+';
 8002f76:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002f7a:	9a04      	ldr	r2, [sp, #16]
 8002f7c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db02      	blt.n	8002f88 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8002f82:	9204      	str	r2, [sp, #16]
 8002f84:	9305      	str	r3, [sp, #20]
 8002f86:	e008      	b.n	8002f9a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002f88:	4252      	negs	r2, r2
 8002f8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002f8e:	9204      	str	r2, [sp, #16]
 8002f90:	9305      	str	r3, [sp, #20]
				sign = '-';
 8002f92:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002f96:	e000      	b.n	8002f9a <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002f98:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002f9a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	ab0a      	add	r3, sp, #40	; 0x28
 8002fa2:	aa06      	add	r2, sp, #24
 8002fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fa8:	f7ff fda0 	bl	8002aec <encode_uint>
 8002fac:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8002fae:	f1ba 0f00 	cmp.w	sl, #0
 8002fb2:	f2c0 8088 	blt.w	80030c6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002fb6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002fba:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8002fbe:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002fc2:	f36f 1286 	bfc	r2, #6, #1
 8002fc6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002fca:	459a      	cmp	sl, r3
 8002fcc:	d97e      	bls.n	80030cc <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8002fce:	ebaa 0303 	sub.w	r3, sl, r3
 8002fd2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002fd4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002fd8:	e046      	b.n	8003068 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002fda:	9804      	ldr	r0, [sp, #16]
 8002fdc:	b928      	cbnz	r0, 8002fea <cbvprintf+0x41e>
		char sign = 0;
 8002fde:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8002fe0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003198 <cbvprintf+0x5cc>
			bps = "(nil)";
 8002fe4:	f1aa 0905 	sub.w	r9, sl, #5
 8002fe8:	e03e      	b.n	8003068 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002fea:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	ab0a      	add	r3, sp, #40	; 0x28
 8002ff2:	aa06      	add	r2, sp, #24
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	f7ff fd79 	bl	8002aec <encode_uint>
 8002ffa:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8002ffc:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003000:	f043 0310 	orr.w	r3, r3, #16
 8003004:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8003008:	2378      	movs	r3, #120	; 0x78
 800300a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 800300e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8003010:	e7cd      	b.n	8002fae <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8003012:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8003014:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003018:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800301c:	2b07      	cmp	r3, #7
 800301e:	d806      	bhi.n	800302e <cbvprintf+0x462>
 8003020:	e8df f003 	tbb	[pc, r3]
 8003024:	0f0d0b04 	.word	0x0f0d0b04
 8003028:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 800302c:	6014      	str	r4, [r2, #0]
		char sign = 0;
 800302e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8003030:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8003034:	f04f 0900 	mov.w	r9, #0
}
 8003038:	e016      	b.n	8003068 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 800303a:	7014      	strb	r4, [r2, #0]
		break;
 800303c:	e7f7      	b.n	800302e <cbvprintf+0x462>
		*(short *)dp = (short)count;
 800303e:	8014      	strh	r4, [r2, #0]
		break;
 8003040:	e7f5      	b.n	800302e <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8003042:	6014      	str	r4, [r2, #0]
		break;
 8003044:	e7f3      	b.n	800302e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8003046:	17e3      	asrs	r3, r4, #31
 8003048:	6014      	str	r4, [r2, #0]
 800304a:	6053      	str	r3, [r2, #4]
		break;
 800304c:	e7ef      	b.n	800302e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 800304e:	17e3      	asrs	r3, r4, #31
 8003050:	6014      	str	r4, [r2, #0]
 8003052:	6053      	str	r3, [r2, #4]
		break;
 8003054:	e7eb      	b.n	800302e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8003056:	6014      	str	r4, [r2, #0]
		break;
 8003058:	e7e9      	b.n	800302e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800305a:	6014      	str	r4, [r2, #0]
		break;
 800305c:	e7e7      	b.n	800302e <cbvprintf+0x462>
		switch (conv->specifier) {
 800305e:	46d8      	mov	r8, fp
 8003060:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8003064:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8003068:	f1b9 0f00 	cmp.w	r9, #0
 800306c:	f000 808d 	beq.w	800318a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8003070:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8003074:	f1b8 0f00 	cmp.w	r8, #0
 8003078:	d000      	beq.n	800307c <cbvprintf+0x4b0>
			nj_len += 1U;
 800307a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 800307c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8003080:	f011 0f10 	tst.w	r1, #16
 8003084:	d025      	beq.n	80030d2 <cbvprintf+0x506>
			nj_len += 2U;
 8003086:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8003088:	9b07      	ldr	r3, [sp, #28]
 800308a:	4413      	add	r3, r2
		if (conv->pad_fp) {
 800308c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003090:	d001      	beq.n	8003096 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8003092:	9a08      	ldr	r2, [sp, #32]
 8003094:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8003096:	2f00      	cmp	r7, #0
 8003098:	dd31      	ble.n	80030fe <cbvprintf+0x532>
			width -= (int)nj_len;
 800309a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 800309c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80030a0:	f013 0f04 	tst.w	r3, #4
 80030a4:	d12b      	bne.n	80030fe <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 80030a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030aa:	d017      	beq.n	80030dc <cbvprintf+0x510>
					if (sign != 0) {
 80030ac:	f1b8 0f00 	cmp.w	r8, #0
 80030b0:	d017      	beq.n	80030e2 <cbvprintf+0x516>
						OUTC(sign);
 80030b2:	4629      	mov	r1, r5
 80030b4:	4640      	mov	r0, r8
 80030b6:	47b0      	blx	r6
 80030b8:	2800      	cmp	r0, #0
 80030ba:	db6a      	blt.n	8003192 <cbvprintf+0x5c6>
 80030bc:	3401      	adds	r4, #1
						sign = 0;
 80030be:	46d8      	mov	r8, fp
					}
					pad = '0';
 80030c0:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80030c4:	e00f      	b.n	80030e6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 80030c6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80030ca:	e7cd      	b.n	8003068 <cbvprintf+0x49c>
 80030cc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80030d0:	e7ca      	b.n	8003068 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 80030d2:	f011 0f08 	tst.w	r1, #8
 80030d6:	d0d7      	beq.n	8003088 <cbvprintf+0x4bc>
			nj_len += 1U;
 80030d8:	3201      	adds	r2, #1
 80030da:	e7d5      	b.n	8003088 <cbvprintf+0x4bc>
				char pad = ' ';
 80030dc:	f04f 0b20 	mov.w	fp, #32
 80030e0:	e001      	b.n	80030e6 <cbvprintf+0x51a>
					pad = '0';
 80030e2:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80030e6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80030e8:	1e5f      	subs	r7, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	dd07      	ble.n	80030fe <cbvprintf+0x532>
					OUTC(pad);
 80030ee:	4629      	mov	r1, r5
 80030f0:	4658      	mov	r0, fp
 80030f2:	47b0      	blx	r6
 80030f4:	2800      	cmp	r0, #0
 80030f6:	db4c      	blt.n	8003192 <cbvprintf+0x5c6>
 80030f8:	3401      	adds	r4, #1
				while (width-- > 0) {
 80030fa:	463b      	mov	r3, r7
 80030fc:	e7f4      	b.n	80030e8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80030fe:	f1b8 0f00 	cmp.w	r8, #0
 8003102:	d005      	beq.n	8003110 <cbvprintf+0x544>
			OUTC(sign);
 8003104:	4629      	mov	r1, r5
 8003106:	4640      	mov	r0, r8
 8003108:	47b0      	blx	r6
 800310a:	2800      	cmp	r0, #0
 800310c:	db41      	blt.n	8003192 <cbvprintf+0x5c6>
 800310e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8003110:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003114:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8003118:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800311c:	4313      	orrs	r3, r2
 800311e:	d005      	beq.n	800312c <cbvprintf+0x560>
				OUTC('0');
 8003120:	4629      	mov	r1, r5
 8003122:	2030      	movs	r0, #48	; 0x30
 8003124:	47b0      	blx	r6
 8003126:	2800      	cmp	r0, #0
 8003128:	db33      	blt.n	8003192 <cbvprintf+0x5c6>
 800312a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 800312c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003130:	f013 0f10 	tst.w	r3, #16
 8003134:	d006      	beq.n	8003144 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8003136:	4629      	mov	r1, r5
 8003138:	f89d 001b 	ldrb.w	r0, [sp, #27]
 800313c:	47b0      	blx	r6
 800313e:	2800      	cmp	r0, #0
 8003140:	db27      	blt.n	8003192 <cbvprintf+0x5c6>
 8003142:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8003144:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8003146:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800314a:	2b00      	cmp	r3, #0
 800314c:	dd07      	ble.n	800315e <cbvprintf+0x592>
				OUTC('0');
 800314e:	4629      	mov	r1, r5
 8003150:	2030      	movs	r0, #48	; 0x30
 8003152:	47b0      	blx	r6
 8003154:	2800      	cmp	r0, #0
 8003156:	db1c      	blt.n	8003192 <cbvprintf+0x5c6>
 8003158:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 800315a:	4643      	mov	r3, r8
 800315c:	e7f3      	b.n	8003146 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 800315e:	4653      	mov	r3, sl
 8003160:	464a      	mov	r2, r9
 8003162:	4629      	mov	r1, r5
 8003164:	4630      	mov	r0, r6
 8003166:	f009 f9c6 	bl	800c4f6 <outs>
 800316a:	2800      	cmp	r0, #0
 800316c:	db11      	blt.n	8003192 <cbvprintf+0x5c6>
 800316e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8003170:	2f00      	cmp	r7, #0
 8003172:	dd07      	ble.n	8003184 <cbvprintf+0x5b8>
			OUTC(' ');
 8003174:	4629      	mov	r1, r5
 8003176:	2020      	movs	r0, #32
 8003178:	47b0      	blx	r6
 800317a:	2800      	cmp	r0, #0
 800317c:	db09      	blt.n	8003192 <cbvprintf+0x5c6>
 800317e:	3401      	adds	r4, #1
			--width;
 8003180:	3f01      	subs	r7, #1
 8003182:	e7f5      	b.n	8003170 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8003184:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003188:	e528      	b.n	8002bdc <cbvprintf+0x10>
 800318a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800318e:	e525      	b.n	8002bdc <cbvprintf+0x10>
		}
	}

	return count;
 8003190:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8003192:	b011      	add	sp, #68	; 0x44
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	0800f449 	.word	0x0800f449

0800319c <stm32l4_init>:
	__asm__ volatile(
 800319c:	f04f 0210 	mov.w	r2, #16
 80031a0:	f3ef 8311 	mrs	r3, BASEPRI
 80031a4:	f382 8812 	msr	BASEPRI_MAX, r2
 80031a8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 80031b4:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <stm32l4_init+0x24>)
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <stm32l4_init+0x28>)
 80031b8:	601a      	str	r2, [r3, #0]

	return 0;
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	200000c0 	.word	0x200000c0
 80031c4:	003d0900 	.word	0x003d0900

080031c8 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <is_rodata+0x18>)
 80031ca:	4298      	cmp	r0, r3
 80031cc:	d304      	bcc.n	80031d8 <is_rodata+0x10>
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <is_rodata+0x1c>)
 80031d0:	4298      	cmp	r0, r3
 80031d2:	d303      	bcc.n	80031dc <is_rodata+0x14>
 80031d4:	2000      	movs	r0, #0
 80031d6:	4770      	bx	lr
 80031d8:	2000      	movs	r0, #0
 80031da:	4770      	bx	lr
 80031dc:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 80031de:	4770      	bx	lr
 80031e0:	0800eabc 	.word	0x0800eabc
 80031e4:	080107cc 	.word	0x080107cc

080031e8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 80031e8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <thread_set+0x1c>)
 80031ec:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 80031ee:	b118      	cbz	r0, 80031f8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <thread_set+0x20>)
 80031f2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	dc00      	bgt.n	80031fa <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 80031f8:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 80031fa:	4804      	ldr	r0, [pc, #16]	; (800320c <thread_set+0x24>)
 80031fc:	f006 f940 	bl	8009480 <z_impl_k_sem_give>
}
 8003200:	e7fa      	b.n	80031f8 <thread_set+0x10>
 8003202:	bf00      	nop
 8003204:	200009c4 	.word	0x200009c4
 8003208:	20000990 	.word	0x20000990
 800320c:	200004b4 	.word	0x200004b4

08003210 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8003210:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8003212:	4802      	ldr	r0, [pc, #8]	; (800321c <log_process_thread_timer_expiry_fn+0xc>)
 8003214:	f006 f934 	bl	8009480 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	200004b4 	.word	0x200004b4

08003220 <next_pending>:
{
 8003220:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
 8003222:	4803      	ldr	r0, [pc, #12]	; (8003230 <next_pending+0x10>)
 8003224:	f009 f992 	bl	800c54c <log_list_head_peek>
}
 8003228:	3800      	subs	r0, #0
 800322a:	bf18      	it	ne
 800322c:	2001      	movne	r0, #1
 800322e:	bd08      	pop	{r3, pc}
 8003230:	2000099c 	.word	0x2000099c

08003234 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8003234:	b530      	push	{r4, r5, lr}
 8003236:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8003238:	2200      	movs	r2, #0
 800323a:	490f      	ldr	r1, [pc, #60]	; (8003278 <enable_logger+0x44>)
 800323c:	480f      	ldr	r0, [pc, #60]	; (800327c <enable_logger+0x48>)
 800323e:	f00b f839 	bl	800e2b4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8003242:	4d0f      	ldr	r5, [pc, #60]	; (8003280 <enable_logger+0x4c>)
 8003244:	2200      	movs	r2, #0
 8003246:	2300      	movs	r3, #0
 8003248:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800324c:	2400      	movs	r4, #0
 800324e:	9404      	str	r4, [sp, #16]
 8003250:	230e      	movs	r3, #14
 8003252:	9303      	str	r3, [sp, #12]
 8003254:	9402      	str	r4, [sp, #8]
 8003256:	9401      	str	r4, [sp, #4]
 8003258:	9400      	str	r4, [sp, #0]
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <enable_logger+0x50>)
 800325c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003260:	4909      	ldr	r1, [pc, #36]	; (8003288 <enable_logger+0x54>)
 8003262:	4628      	mov	r0, r5
 8003264:	f00a fd3d 	bl	800dce2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8003268:	4908      	ldr	r1, [pc, #32]	; (800328c <enable_logger+0x58>)
 800326a:	4628      	mov	r0, r5
 800326c:	f00a fd25 	bl	800dcba <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8003270:	4620      	mov	r0, r4
 8003272:	b009      	add	sp, #36	; 0x24
 8003274:	bd30      	pop	{r4, r5, pc}
 8003276:	bf00      	nop
 8003278:	08003211 	.word	0x08003211
 800327c:	20000688 	.word	0x20000688
 8003280:	200006c0 	.word	0x200006c0
 8003284:	080038e5 	.word	0x080038e5
 8003288:	20001ba0 	.word	0x20001ba0
 800328c:	0800f450 	.word	0x0800f450

08003290 <z_log_get_s_mask>:
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	4603      	mov	r3, r0
	uint32_t mask = 0U;
 8003294:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8003296:	4684      	mov	ip, r0
	bool arm = false;
 8003298:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 800329a:	e001      	b.n	80032a0 <z_log_get_s_mask+0x10>
			arm = !arm;
 800329c:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 80032a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032a4:	b1b2      	cbz	r2, 80032d4 <z_log_get_s_mask+0x44>
 80032a6:	458c      	cmp	ip, r1
 80032a8:	d214      	bcs.n	80032d4 <z_log_get_s_mask+0x44>
		if (curr == '%') {
 80032aa:	2a25      	cmp	r2, #37	; 0x25
 80032ac:	d0f6      	beq.n	800329c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 80032ae:	2c00      	cmp	r4, #0
 80032b0:	d0f6      	beq.n	80032a0 <z_log_get_s_mask+0x10>
 80032b2:	4d09      	ldr	r5, [pc, #36]	; (80032d8 <z_log_get_s_mask+0x48>)
 80032b4:	f812 e005 	ldrb.w	lr, [r2, r5]
 80032b8:	f01e 0f03 	tst.w	lr, #3
 80032bc:	d0f0      	beq.n	80032a0 <z_log_get_s_mask+0x10>
			if (curr == 's') {
 80032be:	2a73      	cmp	r2, #115	; 0x73
 80032c0:	d003      	beq.n	80032ca <z_log_get_s_mask+0x3a>
			arg++;
 80032c2:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
 80032c6:	2400      	movs	r4, #0
 80032c8:	e7ea      	b.n	80032a0 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 80032ca:	2201      	movs	r2, #1
 80032cc:	fa02 f20c 	lsl.w	r2, r2, ip
 80032d0:	4310      	orrs	r0, r2
 80032d2:	e7f6      	b.n	80032c2 <z_log_get_s_mask+0x32>
}
 80032d4:	bd30      	pop	{r4, r5, pc}
 80032d6:	bf00      	nop
 80032d8:	08010555 	.word	0x08010555

080032dc <log_core_init>:
{
 80032dc:	b508      	push	{r3, lr}
	panic_mode = false;
 80032de:	2300      	movs	r3, #0
 80032e0:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <log_core_init+0x34>)
 80032e2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80032e4:	4a0b      	ldr	r2, [pc, #44]	; (8003314 <log_core_init+0x38>)
 80032e6:	6013      	str	r3, [r2, #0]
		timestamp_func = default_lf_get_timestamp;
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <log_core_init+0x3c>)
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <log_core_init+0x40>)
 80032ec:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 80032ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f2:	f000 fd7d 	bl	8003df0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 80032f6:	f000 fb5b 	bl	80039b0 <log_msg_pool_init>
		log_list_init(&list);
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <log_core_init+0x44>)
 80032fc:	f009 f918 	bl	800c530 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8003300:	2304      	movs	r3, #4
 8003302:	2228      	movs	r2, #40	; 0x28
 8003304:	4907      	ldr	r1, [pc, #28]	; (8003324 <log_core_init+0x48>)
 8003306:	4808      	ldr	r0, [pc, #32]	; (8003328 <log_core_init+0x4c>)
 8003308:	f00a fc88 	bl	800dc1c <k_mem_slab_init>
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	20000f29 	.word	0x20000f29
 8003314:	20000994 	.word	0x20000994
 8003318:	20000014 	.word	0x20000014
 800331c:	0800c565 	.word	0x0800c565
 8003320:	2000099c 	.word	0x2000099c
 8003324:	20003c80 	.word	0x20003c80
 8003328:	200009a4 	.word	0x200009a4

0800332c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <log_init+0x64>)
 800332e:	f3bf 8f5b 	dmb	ish
 8003332:	e853 2f00 	ldrex	r2, [r3]
 8003336:	1c51      	adds	r1, r2, #1
 8003338:	e843 1000 	strex	r0, r1, [r3]
 800333c:	2800      	cmp	r0, #0
 800333e:	d1f8      	bne.n	8003332 <log_init+0x6>
 8003340:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8003344:	bb1a      	cbnz	r2, 800338e <log_init+0x62>
{
 8003346:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8003348:	2400      	movs	r4, #0
 800334a:	e009      	b.n	8003360 <log_init+0x34>
					   backend->cb->ctx,
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <log_init+0x68>)
 800334e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003352:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8003354:	2204      	movs	r2, #4
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	4628      	mov	r0, r5
 800335a:	f000 fb05 	bl	8003968 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800335e:	3401      	adds	r4, #1
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <log_init+0x6c>)
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <log_init+0x68>)
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800336a:	da0f      	bge.n	800338c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 800336c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800336e:	4d09      	ldr	r5, [pc, #36]	; (8003394 <log_init+0x68>)
 8003370:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003374:	7b2b      	ldrb	r3, [r5, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f1      	beq.n	800335e <log_init+0x32>
			if (backend->api->init != NULL) {
 800337a:	0123      	lsls	r3, r4, #4
 800337c:	4a05      	ldr	r2, [pc, #20]	; (8003394 <log_init+0x68>)
 800337e:	58d3      	ldr	r3, [r2, r3]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0e2      	beq.n	800334c <log_init+0x20>
				backend->api->init(backend);
 8003386:	4628      	mov	r0, r5
 8003388:	4798      	blx	r3
 800338a:	e7df      	b.n	800334c <log_init+0x20>
}
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	4770      	bx	lr
 8003390:	20000998 	.word	0x20000998
 8003394:	0800efd4 	.word	0x0800efd4
 8003398:	0800efe4 	.word	0x0800efe4

0800339c <get_msg>:
{
 800339c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800339e:	f04f 0310 	mov.w	r3, #16
 80033a2:	f3ef 8411 	mrs	r4, BASEPRI
 80033a6:	f383 8812 	msr	BASEPRI_MAX, r3
 80033aa:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <get_msg+0x24>)
 80033b0:	f009 f8ce 	bl	800c550 <log_list_head_get>
	__asm__ volatile(
 80033b4:	f384 8811 	msr	BASEPRI, r4
 80033b8:	f3bf 8f6f 	isb	sy
}
 80033bc:	bd10      	pop	{r4, pc}
 80033be:	bf00      	nop
 80033c0:	2000099c 	.word	0x2000099c

080033c4 <z_log_notify_backend_enabled>:
{
 80033c4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <z_log_notify_backend_enabled+0x18>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b11b      	cbz	r3, 80033d4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <z_log_notify_backend_enabled+0x18>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
}
 80033d2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <z_log_notify_backend_enabled+0x1c>)
 80033d6:	f006 f853 	bl	8009480 <z_impl_k_sem_give>
}
 80033da:	e7f7      	b.n	80033cc <z_log_notify_backend_enabled+0x8>
 80033dc:	20000f28 	.word	0x20000f28
 80033e0:	200004b4 	.word	0x200004b4

080033e4 <z_log_dropped>:
 80033e4:	4b06      	ldr	r3, [pc, #24]	; (8003400 <z_log_dropped+0x1c>)
 80033e6:	f3bf 8f5b 	dmb	ish
 80033ea:	e853 2f00 	ldrex	r2, [r3]
 80033ee:	3201      	adds	r2, #1
 80033f0:	e843 2100 	strex	r1, r2, [r3]
 80033f4:	2900      	cmp	r1, #0
 80033f6:	d1f8      	bne.n	80033ea <z_log_dropped+0x6>
 80033f8:	f3bf 8f5b 	dmb	ish
}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000994 	.word	0x20000994

08003404 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <z_log_dropped_read_and_clear+0x1c>)
}
 8003406:	2000      	movs	r0, #0
 8003408:	4602      	mov	r2, r0
 800340a:	f3bf 8f5b 	dmb	ish
 800340e:	e853 0f00 	ldrex	r0, [r3]
 8003412:	e843 2100 	strex	r1, r2, [r3]
 8003416:	2900      	cmp	r1, #0
 8003418:	d1f9      	bne.n	800340e <z_log_dropped_read_and_clear+0xa>
 800341a:	f3bf 8f5b 	dmb	ish
 800341e:	4770      	bx	lr
 8003420:	20000994 	.word	0x20000994

08003424 <dropped_notify>:
{
 8003424:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8003426:	f7ff ffed 	bl	8003404 <z_log_dropped_read_and_clear>
 800342a:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 800342c:	2400      	movs	r4, #0
 800342e:	e000      	b.n	8003432 <dropped_notify+0xe>
 8003430:	3401      	adds	r4, #1
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <dropped_notify+0x3c>)
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <dropped_notify+0x40>)
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800343c:	da0f      	bge.n	800345e <dropped_notify+0x3a>
 800343e:	4809      	ldr	r0, [pc, #36]	; (8003464 <dropped_notify+0x40>)
 8003440:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8003444:	6843      	ldr	r3, [r0, #4]
 8003446:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f1      	beq.n	8003430 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 800344c:	0123      	lsls	r3, r4, #4
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <dropped_notify+0x40>)
 8003450:	58d3      	ldr	r3, [r2, r3]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0eb      	beq.n	8003430 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8003458:	4629      	mov	r1, r5
 800345a:	4798      	blx	r3
 800345c:	e7e8      	b.n	8003430 <dropped_notify+0xc>
}
 800345e:	bd38      	pop	{r3, r4, r5, pc}
 8003460:	0800efe4 	.word	0x0800efe4
 8003464:	0800efd4 	.word	0x0800efd4

08003468 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <z_log_dropped_pending+0x10>)
 800346a:	6818      	ldr	r0, [r3, #0]
}
 800346c:	2800      	cmp	r0, #0
 800346e:	bfd4      	ite	le
 8003470:	2000      	movle	r0, #0
 8003472:	2001      	movgt	r0, #1
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000994 	.word	0x20000994

0800347c <z_log_strdup>:
{
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
 8003482:	f7ff fea1 	bl	80031c8 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8003486:	bb10      	cbnz	r0, 80034ce <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8003488:	2200      	movs	r2, #0
 800348a:	2300      	movs	r3, #0
 800348c:	a901      	add	r1, sp, #4
 800348e:	4811      	ldr	r0, [pc, #68]	; (80034d4 <z_log_strdup+0x58>)
 8003490:	f005 fdba 	bl	8009008 <k_mem_slab_alloc>
	if (err != 0) {
 8003494:	b108      	cbz	r0, 800349a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 8003496:	4c10      	ldr	r4, [pc, #64]	; (80034d8 <z_log_strdup+0x5c>)
 8003498:	e019      	b.n	80034ce <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 800349a:	9b01      	ldr	r3, [sp, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f3bf 8f5b 	dmb	ish
 80034a2:	e853 1f00 	ldrex	r1, [r3]
 80034a6:	e843 2000 	strex	r0, r2, [r3]
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d1f9      	bne.n	80034a2 <z_log_strdup+0x26>
 80034ae:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 80034b2:	9d01      	ldr	r5, [sp, #4]
 80034b4:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80034b6:	221f      	movs	r2, #31
 80034b8:	4621      	mov	r1, r4
 80034ba:	4630      	mov	r0, r6
 80034bc:	f00b f8ca 	bl	800e654 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 80034c0:	237e      	movs	r3, #126	; 0x7e
 80034c2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 80034c6:	2300      	movs	r3, #0
 80034c8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
 80034cc:	4634      	mov	r4, r6
}
 80034ce:	4620      	mov	r0, r4
 80034d0:	b002      	add	sp, #8
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	200009a4 	.word	0x200009a4
 80034d8:	0800f458 	.word	0x0800f458

080034dc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 80034dc:	b138      	cbz	r0, 80034ee <log_is_strdup+0x12>
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <log_is_strdup+0x20>)
 80034e0:	4290      	cmp	r0, r2
 80034e2:	d306      	bcc.n	80034f2 <log_is_strdup+0x16>
 80034e4:	32a0      	adds	r2, #160	; 0xa0
 80034e6:	4290      	cmp	r0, r2
 80034e8:	d305      	bcc.n	80034f6 <log_is_strdup+0x1a>
 80034ea:	2000      	movs	r0, #0
 80034ec:	4770      	bx	lr
 80034ee:	2000      	movs	r0, #0
 80034f0:	4770      	bx	lr
 80034f2:	2000      	movs	r0, #0
 80034f4:	4770      	bx	lr
 80034f6:	2001      	movs	r0, #1
}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20003c80 	.word	0x20003c80

08003500 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003500:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 8003502:	f013 0f01 	tst.w	r3, #1
 8003506:	d000      	beq.n	800350a <detect_missed_strdup+0xa>
 8003508:	4770      	bx	lr
{
 800350a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800350e:	b083      	sub	sp, #12
 8003510:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 8003512:	f009 f8c4 	bl	800c69e <log_msg_str_get>
 8003516:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8003518:	4630      	mov	r0, r6
 800351a:	f009 f8ab 	bl	800c674 <log_msg_nargs_get>
 800351e:	4601      	mov	r1, r0
 8003520:	4638      	mov	r0, r7
 8003522:	f7ff feb5 	bl	8003290 <z_log_get_s_mask>
 8003526:	4605      	mov	r5, r0
	while (mask) {
 8003528:	e004      	b.n	8003534 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 800352a:	2201      	movs	r2, #1
 800352c:	fa02 f404 	lsl.w	r4, r2, r4
 8003530:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 8003534:	b36d      	cbz	r5, 8003592 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 8003536:	fab5 f485 	clz	r4, r5
 800353a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 800353e:	4621      	mov	r1, r4
 8003540:	4630      	mov	r0, r6
 8003542:	f009 f89a 	bl	800c67a <log_msg_arg_get>
 8003546:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8003548:	f7ff fe3e 	bl	80031c8 <is_rodata>
 800354c:	2800      	cmp	r0, #0
 800354e:	d1ec      	bne.n	800352a <detect_missed_strdup+0x2a>
 8003550:	4648      	mov	r0, r9
 8003552:	f7ff ffc3 	bl	80034dc <log_is_strdup>
 8003556:	2800      	cmp	r0, #0
 8003558:	d1e7      	bne.n	800352a <detect_missed_strdup+0x2a>
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <detect_missed_strdup+0x98>)
 800355c:	4599      	cmp	r9, r3
 800355e:	d0e4      	beq.n	800352a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8003560:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8003562:	f3c1 1189 	ubfx	r1, r1, #6, #10
 8003566:	f000 f9ef 	bl	8003948 <log_source_name_get>
 800356a:	4602      	mov	r2, r0
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <detect_missed_strdup+0x9c>)
 800356e:	490c      	ldr	r1, [pc, #48]	; (80035a0 <detect_missed_strdup+0xa0>)
 8003570:	1a5b      	subs	r3, r3, r1
 8003572:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8003574:	2101      	movs	r1, #1
 8003576:	f361 0802 	bfi	r8, r1, #0, #3
 800357a:	f36f 08c5 	bfc	r8, #3, #3
 800357e:	f363 188f 	bfi	r8, r3, #6, #10
 8003582:	f8ad 8000 	strh.w	r8, [sp]
 8003586:	463b      	mov	r3, r7
 8003588:	4621      	mov	r1, r4
 800358a:	4806      	ldr	r0, [pc, #24]	; (80035a4 <detect_missed_strdup+0xa4>)
 800358c:	f000 f8b2 	bl	80036f4 <log_3>
 8003590:	e7cb      	b.n	800352a <detect_missed_strdup+0x2a>
}
 8003592:	b003      	add	sp, #12
 8003594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003598:	0800f458 	.word	0x0800f458
 800359c:	0800ef7c 	.word	0x0800ef7c
 80035a0:	0800ef6c 	.word	0x0800ef6c
 80035a4:	0800f474 	.word	0x0800f474

080035a8 <msg_process>:
{
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	4606      	mov	r6, r0
	if (!bypass) {
 80035ac:	bb19      	cbnz	r1, 80035f6 <msg_process+0x4e>
		    !panic_mode) {
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <msg_process+0x58>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
 80035b2:	b10b      	cbz	r3, 80035b8 <msg_process+0x10>
{
 80035b4:	2400      	movs	r4, #0
 80035b6:	e003      	b.n	80035c0 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
 80035b8:	f7ff ffa2 	bl	8003500 <detect_missed_strdup>
 80035bc:	e7fa      	b.n	80035b4 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 80035be:	3401      	adds	r4, #1
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <msg_process+0x5c>)
 80035c2:	4a11      	ldr	r2, [pc, #68]	; (8003608 <msg_process+0x60>)
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80035ca:	da14      	bge.n	80035f6 <msg_process+0x4e>
	return &__log_backends_start[idx];
 80035cc:	4d0e      	ldr	r5, [pc, #56]	; (8003608 <msg_process+0x60>)
 80035ce:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 80035d2:	686b      	ldr	r3, [r5, #4]
 80035d4:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f1      	beq.n	80035be <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 80035da:	4631      	mov	r1, r6
 80035dc:	4628      	mov	r0, r5
 80035de:	f008 ffbf 	bl	800c560 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d0eb      	beq.n	80035be <msg_process+0x16>
	backend->api->put(backend, msg);
 80035e6:	0127      	lsls	r7, r4, #4
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <msg_process+0x60>)
 80035ea:	59db      	ldr	r3, [r3, r7]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	4798      	blx	r3
}
 80035f4:	e7e3      	b.n	80035be <msg_process+0x16>
			log_msg_put(msg.msg);
 80035f6:	4630      	mov	r0, r6
 80035f8:	f009 f853 	bl	800c6a2 <log_msg_put>
}
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000f29 	.word	0x20000f29
 8003604:	0800efe4 	.word	0x0800efe4
 8003608:	0800efd4 	.word	0x0800efd4

0800360c <z_impl_log_process>:
{
 800360c:	b510      	push	{r4, lr}
 800360e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <z_impl_log_process+0x48>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b903      	cbnz	r3, 8003618 <z_impl_log_process+0xc>
 8003616:	b1c8      	cbz	r0, 800364c <z_impl_log_process+0x40>
	msg = get_msg();
 8003618:	f7ff fec0 	bl	800339c <get_msg>
	if (msg.msg) {
 800361c:	4602      	mov	r2, r0
 800361e:	b178      	cbz	r0, 8003640 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <z_impl_log_process+0x4c>)
 8003622:	f3bf 8f5b 	dmb	ish
 8003626:	e853 1f00 	ldrex	r1, [r3]
 800362a:	3901      	subs	r1, #1
 800362c:	e843 1000 	strex	r0, r1, [r3]
 8003630:	2800      	cmp	r0, #0
 8003632:	d1f8      	bne.n	8003626 <z_impl_log_process+0x1a>
 8003634:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8003638:	4621      	mov	r1, r4
 800363a:	4610      	mov	r0, r2
 800363c:	f7ff ffb4 	bl	80035a8 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8003640:	b914      	cbnz	r4, 8003648 <z_impl_log_process+0x3c>
 8003642:	f7ff ff11 	bl	8003468 <z_log_dropped_pending>
 8003646:	b910      	cbnz	r0, 800364e <z_impl_log_process+0x42>
	return next_pending();
 8003648:	f7ff fdea 	bl	8003220 <next_pending>
}
 800364c:	bd10      	pop	{r4, pc}
		dropped_notify();
 800364e:	f7ff fee9 	bl	8003424 <dropped_notify>
 8003652:	e7f9      	b.n	8003648 <z_impl_log_process+0x3c>
 8003654:	20000f28 	.word	0x20000f28
 8003658:	20000990 	.word	0x20000990

0800365c <z_log_msg_post_finalize>:
{
 800365c:	b510      	push	{r4, lr}
 800365e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003660:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <z_log_msg_post_finalize+0x84>)
 8003662:	f3bf 8f5b 	dmb	ish
 8003666:	e853 2f00 	ldrex	r2, [r3]
 800366a:	3201      	adds	r2, #1
 800366c:	e843 2100 	strex	r1, r2, [r3]
 8003670:	2900      	cmp	r1, #0
 8003672:	d1f8      	bne.n	8003666 <z_log_msg_post_finalize+0xa>
 8003674:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003678:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <z_log_msg_post_finalize+0x88>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b963      	cbnz	r3, 8003698 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <z_log_msg_post_finalize+0x8c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	b11b      	cbz	r3, 800368c <z_log_msg_post_finalize+0x30>
 8003684:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <z_log_msg_post_finalize+0x84>)
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	2a01      	cmp	r2, #1
 800368a:	d015      	beq.n	80036b8 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <z_log_msg_post_finalize+0x84>)
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	2a0a      	cmp	r2, #10
 8003692:	d01c      	beq.n	80036ce <z_log_msg_post_finalize+0x72>
}
 8003694:	b002      	add	sp, #8
 8003696:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8003698:	f04f 0310 	mov.w	r3, #16
 800369c:	f3ef 8411 	mrs	r4, BASEPRI
 80036a0:	f383 8812 	msr	BASEPRI_MAX, r3
 80036a4:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7ff ffaf 	bl	800360c <z_impl_log_process>
	__asm__ volatile(
 80036ae:	f384 8811 	msr	BASEPRI, r4
 80036b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80036b6:	e7ed      	b.n	8003694 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	e9cd 2300 	strd	r2, r3, [sp]
 80036c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80036c4:	2300      	movs	r3, #0
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <z_log_msg_post_finalize+0x90>)
 80036c8:	f006 fe4e 	bl	800a368 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80036cc:	e7e2      	b.n	8003694 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0e0      	beq.n	8003694 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <z_log_msg_post_finalize+0x90>)
 80036d4:	f00a fdfa 	bl	800e2cc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <z_log_msg_post_finalize+0x94>)
 80036da:	f005 fed1 	bl	8009480 <z_impl_k_sem_give>
}
 80036de:	e7d9      	b.n	8003694 <z_log_msg_post_finalize+0x38>
 80036e0:	20000990 	.word	0x20000990
 80036e4:	20000f29 	.word	0x20000f29
 80036e8:	200009c4 	.word	0x200009c4
 80036ec:	20000688 	.word	0x20000688
 80036f0:	200004b4 	.word	0x200004b4

080036f4 <log_3>:
{
 80036f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f8:	4680      	mov	r8, r0
 80036fa:	460f      	mov	r7, r1
 80036fc:	4616      	mov	r6, r2
 80036fe:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8003700:	f000 f97a 	bl	80039f8 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8003704:	4604      	mov	r4, r0
 8003706:	b118      	cbz	r0, 8003710 <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8003708:	2301      	movs	r3, #1
 800370a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 8003710:	b14c      	cbz	r4, 8003726 <log_3+0x32>
		msg->str = str;
 8003712:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 8003716:	7a60      	ldrb	r0, [r4, #9]
 8003718:	2303      	movs	r3, #3
 800371a:	f363 1007 	bfi	r0, r3, #4, #4
 800371e:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8003720:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8003722:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 8003724:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 8003726:	b1c4      	cbz	r4, 800375a <log_3+0x66>
	msg->hdr.ids = src_level;
 8003728:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800372c:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <log_3+0x6c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4798      	blx	r3
 8003734:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8003736:	f04f 0310 	mov.w	r3, #16
 800373a:	f3ef 8511 	mrs	r5, BASEPRI
 800373e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003742:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8003746:	4621      	mov	r1, r4
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <log_3+0x70>)
 800374a:	f008 fef5 	bl	800c538 <log_list_add_tail>
	__asm__ volatile(
 800374e:	f385 8811 	msr	BASEPRI, r5
 8003752:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8003756:	f7ff ff81 	bl	800365c <z_log_msg_post_finalize>
}
 800375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375e:	bf00      	nop
 8003760:	20000014 	.word	0x20000014
 8003764:	2000099c 	.word	0x2000099c

08003768 <log_0>:
{
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4605      	mov	r5, r0
 800376c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800376e:	f000 f943 	bl	80039f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003772:	4604      	mov	r4, r0
 8003774:	b118      	cbz	r0, 800377e <log_0+0x16>
		msg->hdr.ref_cnt = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800377e:	b104      	cbz	r4, 8003782 <log_0+0x1a>
		msg->str = str;
 8003780:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8003782:	b1b4      	cbz	r4, 80037b2 <log_0+0x4a>
	msg->hdr.ids = src_level;
 8003784:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <log_0+0x4c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4798      	blx	r3
 800378c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800378e:	f04f 0310 	mov.w	r3, #16
 8003792:	f3ef 8511 	mrs	r5, BASEPRI
 8003796:	f383 8812 	msr	BASEPRI_MAX, r3
 800379a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800379e:	4621      	mov	r1, r4
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <log_0+0x50>)
 80037a2:	f008 fec9 	bl	800c538 <log_list_add_tail>
	__asm__ volatile(
 80037a6:	f385 8811 	msr	BASEPRI, r5
 80037aa:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 80037ae:	f7ff ff55 	bl	800365c <z_log_msg_post_finalize>
}
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	20000014 	.word	0x20000014
 80037b8:	2000099c 	.word	0x2000099c

080037bc <log_1>:
{
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	4607      	mov	r7, r0
 80037c0:	460e      	mov	r6, r1
 80037c2:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80037c4:	f000 f918 	bl	80039f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 80037c8:	4604      	mov	r4, r0
 80037ca:	b118      	cbz	r0, 80037d4 <log_1+0x18>
		msg->hdr.ref_cnt = 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 80037d4:	b134      	cbz	r4, 80037e4 <log_1+0x28>
		msg->str = str;
 80037d6:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 80037d8:	7a63      	ldrb	r3, [r4, #9]
 80037da:	2201      	movs	r2, #1
 80037dc:	f362 1307 	bfi	r3, r2, #4, #4
 80037e0:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80037e2:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
 80037e4:	b1b4      	cbz	r4, 8003814 <log_1+0x58>
	msg->hdr.ids = src_level;
 80037e6:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <log_1+0x5c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4798      	blx	r3
 80037ee:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80037f0:	f04f 0310 	mov.w	r3, #16
 80037f4:	f3ef 8511 	mrs	r5, BASEPRI
 80037f8:	f383 8812 	msr	BASEPRI_MAX, r3
 80037fc:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8003800:	4621      	mov	r1, r4
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <log_1+0x60>)
 8003804:	f008 fe98 	bl	800c538 <log_list_add_tail>
	__asm__ volatile(
 8003808:	f385 8811 	msr	BASEPRI, r5
 800380c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8003810:	f7ff ff24 	bl	800365c <z_log_msg_post_finalize>
}
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003816:	bf00      	nop
 8003818:	20000014 	.word	0x20000014
 800381c:	2000099c 	.word	0x2000099c

08003820 <log_2>:
{
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	4680      	mov	r8, r0
 8003826:	460f      	mov	r7, r1
 8003828:	4616      	mov	r6, r2
 800382a:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800382c:	f000 f8e4 	bl	80039f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003830:	4604      	mov	r4, r0
 8003832:	b118      	cbz	r0, 800383c <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
 8003834:	2301      	movs	r3, #1
 8003836:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800383c:	b144      	cbz	r4, 8003850 <log_2+0x30>
		msg->str = str;
 800383e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 8003842:	7a60      	ldrb	r0, [r4, #9]
 8003844:	2302      	movs	r3, #2
 8003846:	f363 1007 	bfi	r0, r3, #4, #4
 800384a:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 800384c:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 800384e:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
 8003850:	b1b4      	cbz	r4, 8003880 <log_2+0x60>
	msg->hdr.ids = src_level;
 8003852:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <log_2+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4798      	blx	r3
 800385a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800385c:	f04f 0310 	mov.w	r3, #16
 8003860:	f3ef 8511 	mrs	r5, BASEPRI
 8003864:	f383 8812 	msr	BASEPRI_MAX, r3
 8003868:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800386c:	4621      	mov	r1, r4
 800386e:	4806      	ldr	r0, [pc, #24]	; (8003888 <log_2+0x68>)
 8003870:	f008 fe62 	bl	800c538 <log_list_add_tail>
	__asm__ volatile(
 8003874:	f385 8811 	msr	BASEPRI, r5
 8003878:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800387c:	f7ff feee 	bl	800365c <z_log_msg_post_finalize>
}
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003884:	20000014 	.word	0x20000014
 8003888:	2000099c 	.word	0x2000099c

0800388c <z_impl_log_panic>:
	if (panic_mode) {
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <z_impl_log_panic+0x4c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b103      	cbz	r3, 8003894 <z_impl_log_panic+0x8>
 8003892:	4770      	bx	lr
{
 8003894:	b510      	push	{r4, lr}
	log_init();
 8003896:	f7ff fd49 	bl	800332c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800389a:	2400      	movs	r4, #0
 800389c:	e000      	b.n	80038a0 <z_impl_log_panic+0x14>
 800389e:	3401      	adds	r4, #1
 80038a0:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <z_impl_log_panic+0x50>)
 80038a2:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <z_impl_log_panic+0x54>)
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80038aa:	da0c      	bge.n	80038c6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <z_impl_log_panic+0x54>)
 80038ae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 80038b2:	6843      	ldr	r3, [r0, #4]
 80038b4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f1      	beq.n	800389e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 80038ba:	0123      	lsls	r3, r4, #4
 80038bc:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <z_impl_log_panic+0x54>)
 80038be:	58d3      	ldr	r3, [r2, r3]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4798      	blx	r3
}
 80038c4:	e7eb      	b.n	800389e <z_impl_log_panic+0x12>
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7ff fea0 	bl	800360c <z_impl_log_process>
		while (log_process(false) == true) {
 80038cc:	2800      	cmp	r0, #0
 80038ce:	d1fa      	bne.n	80038c6 <z_impl_log_panic+0x3a>
	panic_mode = true;
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <z_impl_log_panic+0x4c>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
}
 80038d6:	bd10      	pop	{r4, pc}
 80038d8:	20000f29 	.word	0x20000f29
 80038dc:	0800efe4 	.word	0x0800efe4
 80038e0:	0800efd4 	.word	0x0800efd4

080038e4 <log_process_thread_func>:
{
 80038e4:	b508      	push	{r3, lr}
	log_init();
 80038e6:	f7ff fd21 	bl	800332c <log_init>
	return z_impl_z_current_get();
 80038ea:	f006 fb23 	bl	8009f34 <z_impl_z_current_get>
	thread_set(k_current_get());
 80038ee:	f7ff fc7b 	bl	80031e8 <thread_set>
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7ff fe8a 	bl	800360c <z_impl_log_process>
		if (log_process(false) == false) {
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1fa      	bne.n	80038f2 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003904:	4801      	ldr	r0, [pc, #4]	; (800390c <log_process_thread_func+0x28>)
 8003906:	f005 fde3 	bl	80094d0 <z_impl_k_sem_take>
 800390a:	e7f2      	b.n	80038f2 <log_process_thread_func+0xe>
 800390c:	200004b4 	.word	0x200004b4

08003910 <log_free>:
{
 8003910:	b500      	push	{lr}
 8003912:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8003914:	3804      	subs	r0, #4
 8003916:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003918:	f3bf 8f5b 	dmb	ish
 800391c:	e850 3f00 	ldrex	r3, [r0]
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	e840 2100 	strex	r1, r2, [r0]
 8003926:	2900      	cmp	r1, #0
 8003928:	d1f8      	bne.n	800391c <log_free+0xc>
 800392a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 800392e:	2b01      	cmp	r3, #1
 8003930:	d002      	beq.n	8003938 <log_free+0x28>
}
 8003932:	b003      	add	sp, #12
 8003934:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8003938:	a901      	add	r1, sp, #4
 800393a:	4802      	ldr	r0, [pc, #8]	; (8003944 <log_free+0x34>)
 800393c:	f00a f97d 	bl	800dc3a <k_mem_slab_free>
}
 8003940:	e7f7      	b.n	8003932 <log_free+0x22>
 8003942:	bf00      	nop
 8003944:	200009a4 	.word	0x200009a4

08003948 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <log_source_name_get+0x18>)
 800394a:	4a06      	ldr	r2, [pc, #24]	; (8003964 <log_source_name_get+0x1c>)
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8003952:	d202      	bcs.n	800395a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8003954:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8003958:	4770      	bx	lr
 800395a:	2000      	movs	r0, #0
}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	0800efd4 	.word	0x0800efd4
 8003964:	0800ef6c 	.word	0x0800ef6c

08003968 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003968:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <log_backend_enable+0x20>)
 800396c:	1ac3      	subs	r3, r0, r3
 800396e:	111b      	asrs	r3, r3, #4
 8003970:	3301      	adds	r3, #1
	backend->cb->id = id;
 8003972:	6842      	ldr	r2, [r0, #4]
 8003974:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003976:	6843      	ldr	r3, [r0, #4]
 8003978:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 800397a:	6843      	ldr	r3, [r0, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8003980:	f7ff fd20 	bl	80033c4 <z_log_notify_backend_enabled>
}
 8003984:	bd08      	pop	{r3, pc}
 8003986:	bf00      	nop
 8003988:	0800efd4 	.word	0x0800efd4

0800398c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 800398c:	b510      	push	{r4, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 8003992:	e005      	b.n	80039a0 <cont_free+0x14>
		next = cont->next;
 8003994:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8003996:	a901      	add	r1, sp, #4
 8003998:	4804      	ldr	r0, [pc, #16]	; (80039ac <cont_free+0x20>)
 800399a:	f00a f94e 	bl	800dc3a <k_mem_slab_free>
		cont = next;
 800399e:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
 80039a0:	9b01      	ldr	r3, [sp, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f6      	bne.n	8003994 <cont_free+0x8>
	}
}
 80039a6:	b002      	add	sp, #8
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	bf00      	nop
 80039ac:	200009c8 	.word	0x200009c8

080039b0 <log_msg_pool_init>:
{
 80039b0:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80039b2:	2320      	movs	r3, #32
 80039b4:	461a      	mov	r2, r3
 80039b6:	4902      	ldr	r1, [pc, #8]	; (80039c0 <log_msg_pool_init+0x10>)
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <log_msg_pool_init+0x14>)
 80039ba:	f00a f92f 	bl	800dc1c <k_mem_slab_init>
}
 80039be:	bd08      	pop	{r3, pc}
 80039c0:	20003d20 	.word	0x20003d20
 80039c4:	200009c8 	.word	0x200009c8

080039c8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80039c8:	b510      	push	{r4, lr}
 80039ca:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	2001      	movs	r0, #1
 80039d2:	f7ff fe1b 	bl	800360c <z_impl_log_process>
 80039d6:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 80039d8:	f7ff fd04 	bl	80033e4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80039dc:	2200      	movs	r2, #0
 80039de:	2300      	movs	r3, #0
 80039e0:	a901      	add	r1, sp, #4
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <log_msg_no_space_handle+0x2c>)
 80039e4:	f005 fb10 	bl	8009008 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80039e8:	b108      	cbz	r0, 80039ee <log_msg_no_space_handle+0x26>
 80039ea:	2c00      	cmp	r4, #0
 80039ec:	d1f0      	bne.n	80039d0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 80039ee:	9801      	ldr	r0, [sp, #4]
 80039f0:	b002      	add	sp, #8
 80039f2:	bd10      	pop	{r4, pc}
 80039f4:	200009c8 	.word	0x200009c8

080039f8 <log_msg_chunk_alloc>:
{
 80039f8:	b500      	push	{lr}
 80039fa:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 8003a00:	f008 fdb8 	bl	800c574 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8003a04:	b150      	cbz	r0, 8003a1c <log_msg_chunk_alloc+0x24>
 8003a06:	2200      	movs	r2, #0
 8003a08:	2300      	movs	r3, #0
 8003a0a:	a901      	add	r1, sp, #4
 8003a0c:	4807      	ldr	r0, [pc, #28]	; (8003a2c <log_msg_chunk_alloc+0x34>)
 8003a0e:	f005 fafb 	bl	8009008 <k_mem_slab_alloc>
	if (err != 0) {
 8003a12:	b930      	cbnz	r0, 8003a22 <log_msg_chunk_alloc+0x2a>
}
 8003a14:	9801      	ldr	r0, [sp, #4]
 8003a16:	b003      	add	sp, #12
 8003a18:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e7f3      	b.n	8003a0a <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 8003a22:	f7ff ffd1 	bl	80039c8 <log_msg_no_space_handle>
 8003a26:	9001      	str	r0, [sp, #4]
 8003a28:	e7f4      	b.n	8003a14 <log_msg_chunk_alloc+0x1c>
 8003a2a:	bf00      	nop
 8003a2c:	200009c8 	.word	0x200009c8

08003a30 <msg_free>:
{
 8003a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a32:	b083      	sub	sp, #12
 8003a34:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 8003a36:	4604      	mov	r4, r0
 8003a38:	f008 fe1c 	bl	800c674 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003a3c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 8003a3e:	f013 0f01 	tst.w	r3, #1
 8003a42:	d101      	bne.n	8003a48 <msg_free+0x18>
 8003a44:	4606      	mov	r6, r0
 8003a46:	bb50      	cbnz	r0, 8003a9e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 8003a48:	9b01      	ldr	r3, [sp, #4]
 8003a4a:	7a1a      	ldrb	r2, [r3, #8]
 8003a4c:	f012 0f02 	tst.w	r2, #2
 8003a50:	d128      	bne.n	8003aa4 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8003a52:	a901      	add	r1, sp, #4
 8003a54:	4815      	ldr	r0, [pc, #84]	; (8003aac <msg_free+0x7c>)
 8003a56:	f00a f8f0 	bl	800dc3a <k_mem_slab_free>
}
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 8003a5e:	9801      	ldr	r0, [sp, #4]
 8003a60:	f008 fe1d 	bl	800c69e <log_msg_str_get>
 8003a64:	4631      	mov	r1, r6
 8003a66:	f7ff fc13 	bl	8003290 <z_log_get_s_mask>
					if (smask == 0U) {
 8003a6a:	4607      	mov	r7, r0
 8003a6c:	b970      	cbnz	r0, 8003a8c <msg_free+0x5c>
 8003a6e:	e7eb      	b.n	8003a48 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
 8003a70:	3401      	adds	r4, #1
 8003a72:	42b4      	cmp	r4, r6
 8003a74:	d2e8      	bcs.n	8003a48 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8003a76:	4621      	mov	r1, r4
 8003a78:	9801      	ldr	r0, [sp, #4]
 8003a7a:	f008 fdfe 	bl	800c67a <log_msg_arg_get>
 8003a7e:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 8003a80:	f7ff fd2c 	bl	80034dc <log_is_strdup>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d0f3      	beq.n	8003a70 <msg_free+0x40>
				if (smask == 0U) {
 8003a88:	2f00      	cmp	r7, #0
 8003a8a:	d0e8      	beq.n	8003a5e <msg_free+0x2e>
				if (smask & BIT(i)) {
 8003a8c:	fa27 f304 	lsr.w	r3, r7, r4
 8003a90:	f013 0f01 	tst.w	r3, #1
 8003a94:	d0ec      	beq.n	8003a70 <msg_free+0x40>
					log_free(buf);
 8003a96:	4628      	mov	r0, r5
 8003a98:	f7ff ff3a 	bl	8003910 <log_free>
 8003a9c:	e7e8      	b.n	8003a70 <msg_free+0x40>
		uint32_t smask = 0U;
 8003a9e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
 8003aa0:	463c      	mov	r4, r7
 8003aa2:	e7e6      	b.n	8003a72 <msg_free+0x42>
		cont_free(msg->payload.ext.next);
 8003aa4:	6958      	ldr	r0, [r3, #20]
 8003aa6:	f7ff ff71 	bl	800398c <cont_free>
 8003aaa:	e7d2      	b.n	8003a52 <msg_free+0x22>
 8003aac:	200009c8 	.word	0x200009c8

08003ab0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003ab0:	b40e      	push	{r1, r2, r3}
 8003ab2:	b500      	push	{lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8003abe:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003ac0:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <print_formatted+0x20>)
 8003ac2:	f7ff f883 	bl	8002bcc <cbvprintf>
	va_end(args);

	return length;
}
 8003ac6:	b002      	add	sp, #8
 8003ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003acc:	b003      	add	sp, #12
 8003ace:	4770      	bx	lr
 8003ad0:	0800ca41 	.word	0x0800ca41

08003ad4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8003ad4:	b530      	push	{r4, r5, lr}
 8003ad6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8003ad8:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003adc:	d005      	beq.n	8003aea <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <timestamp_print+0x74>)
 8003ae0:	681c      	ldr	r4, [r3, #0]
 8003ae2:	b934      	cbnz	r4, 8003af2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8003ae4:	2000      	movs	r0, #0
	}

	return length;
}
 8003ae6:	b005      	add	sp, #20
 8003ae8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8003aea:	4918      	ldr	r1, [pc, #96]	; (8003b4c <timestamp_print+0x78>)
 8003aec:	f7ff ffe0 	bl	8003ab0 <print_formatted>
 8003af0:	e7f9      	b.n	8003ae6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <timestamp_print+0x7c>)
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8003afa:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <timestamp_print+0x80>)
 8003b00:	fba2 320c 	umull	r3, r2, r2, ip
 8003b04:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8003b06:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8003b0a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <timestamp_print+0x84>)
 8003b10:	fba3 530e 	umull	r5, r3, r3, lr
 8003b14:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8003b16:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 8003b1a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003b1e:	fb0c f101 	mul.w	r1, ip, r1
 8003b22:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003b26:	fb05 1114 	mls	r1, r5, r4, r1
 8003b2a:	fb0c f101 	mul.w	r1, ip, r1
 8003b2e:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8003b32:	9102      	str	r1, [sp, #8]
 8003b34:	9501      	str	r5, [sp, #4]
 8003b36:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8003b3a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 8003b3e:	9100      	str	r1, [sp, #0]
 8003b40:	4906      	ldr	r1, [pc, #24]	; (8003b5c <timestamp_print+0x88>)
 8003b42:	f7ff ffb5 	bl	8003ab0 <print_formatted>
 8003b46:	e7ce      	b.n	8003ae6 <timestamp_print+0x12>
 8003b48:	200009e8 	.word	0x200009e8
 8003b4c:	0800f4b8 	.word	0x0800f4b8
 8003b50:	200009ec 	.word	0x200009ec
 8003b54:	91a2b3c5 	.word	0x91a2b3c5
 8003b58:	88888889 	.word	0x88888889
 8003b5c:	0800f4c4 	.word	0x0800f4c4

08003b60 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8003b60:	b161      	cbz	r1, 8003b7c <color_print+0x1c>
{
 8003b62:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003b64:	b12a      	cbz	r2, 8003b72 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8003b66:	4a06      	ldr	r2, [pc, #24]	; (8003b80 <color_print+0x20>)
 8003b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b6c:	b912      	cbnz	r2, 8003b74 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003b6e:	4a05      	ldr	r2, [pc, #20]	; (8003b84 <color_print+0x24>)
 8003b70:	e000      	b.n	8003b74 <color_print+0x14>
 8003b72:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <color_print+0x28>)
 8003b76:	f7ff ff9b 	bl	8003ab0 <print_formatted>
	}
}
 8003b7a:	bd08      	pop	{r3, pc}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	0800f53c 	.word	0x0800f53c
 8003b84:	0800f4e0 	.word	0x0800f4e0
 8003b88:	0800f4e8 	.word	0x0800f4e8

08003b8c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8003b8c:	f011 0f10 	tst.w	r1, #16
 8003b90:	d10b      	bne.n	8003baa <newline_print+0x1e>
{
 8003b92:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003b94:	f011 0f20 	tst.w	r1, #32
 8003b98:	d003      	beq.n	8003ba2 <newline_print+0x16>
		print_formatted(ctx, "\n");
 8003b9a:	4904      	ldr	r1, [pc, #16]	; (8003bac <newline_print+0x20>)
 8003b9c:	f7ff ff88 	bl	8003ab0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8003ba0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8003ba2:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <newline_print+0x24>)
 8003ba4:	f7ff ff84 	bl	8003ab0 <print_formatted>
 8003ba8:	e7fa      	b.n	8003ba0 <newline_print+0x14>
 8003baa:	4770      	bx	lr
 8003bac:	0800fa64 	.word	0x0800fa64
 8003bb0:	0800f4ec 	.word	0x0800f4ec

08003bb4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8003bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb8:	4605      	mov	r5, r0
 8003bba:	460f      	mov	r7, r1
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4698      	mov	r8, r3
	newline_print(output, flags);
 8003bc0:	9906      	ldr	r1, [sp, #24]
 8003bc2:	f7ff ffe3 	bl	8003b8c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8003bc6:	2400      	movs	r4, #0
 8003bc8:	4544      	cmp	r4, r8
 8003bca:	da05      	bge.n	8003bd8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8003bcc:	4924      	ldr	r1, [pc, #144]	; (8003c60 <hexdump_line_print+0xac>)
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f7ff ff6e 	bl	8003ab0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8003bd4:	3401      	adds	r4, #1
 8003bd6:	e7f7      	b.n	8003bc8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003bd8:	2400      	movs	r4, #0
 8003bda:	e009      	b.n	8003bf0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003bdc:	4920      	ldr	r1, [pc, #128]	; (8003c60 <hexdump_line_print+0xac>)
 8003bde:	4628      	mov	r0, r5
 8003be0:	f7ff ff66 	bl	8003ab0 <print_formatted>
 8003be4:	e00b      	b.n	8003bfe <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8003be6:	491f      	ldr	r1, [pc, #124]	; (8003c64 <hexdump_line_print+0xb0>)
 8003be8:	4628      	mov	r0, r5
 8003bea:	f7ff ff61 	bl	8003ab0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003bee:	3401      	adds	r4, #1
 8003bf0:	2c0f      	cmp	r4, #15
 8003bf2:	dc0c      	bgt.n	8003c0e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8003bf4:	2c00      	cmp	r4, #0
 8003bf6:	dd02      	ble.n	8003bfe <hexdump_line_print+0x4a>
 8003bf8:	f014 0f07 	tst.w	r4, #7
 8003bfc:	d0ee      	beq.n	8003bdc <hexdump_line_print+0x28>
		if (i < length) {
 8003bfe:	42b4      	cmp	r4, r6
 8003c00:	d2f1      	bcs.n	8003be6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8003c02:	5d3a      	ldrb	r2, [r7, r4]
 8003c04:	4918      	ldr	r1, [pc, #96]	; (8003c68 <hexdump_line_print+0xb4>)
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7ff ff52 	bl	8003ab0 <print_formatted>
 8003c0c:	e7ef      	b.n	8003bee <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8003c0e:	4917      	ldr	r1, [pc, #92]	; (8003c6c <hexdump_line_print+0xb8>)
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7ff ff4d 	bl	8003ab0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003c16:	2400      	movs	r4, #0
 8003c18:	e009      	b.n	8003c2e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003c1a:	4911      	ldr	r1, [pc, #68]	; (8003c60 <hexdump_line_print+0xac>)
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f7ff ff47 	bl	8003ab0 <print_formatted>
 8003c22:	e00b      	b.n	8003c3c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8003c24:	4912      	ldr	r1, [pc, #72]	; (8003c70 <hexdump_line_print+0xbc>)
 8003c26:	4628      	mov	r0, r5
 8003c28:	f7ff ff42 	bl	8003ab0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003c2c:	3401      	adds	r4, #1
 8003c2e:	2c0f      	cmp	r4, #15
 8003c30:	dc13      	bgt.n	8003c5a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8003c32:	2c00      	cmp	r4, #0
 8003c34:	dd02      	ble.n	8003c3c <hexdump_line_print+0x88>
 8003c36:	f014 0f07 	tst.w	r4, #7
 8003c3a:	d0ee      	beq.n	8003c1a <hexdump_line_print+0x66>
		if (i < length) {
 8003c3c:	42b4      	cmp	r4, r6
 8003c3e:	d207      	bcs.n	8003c50 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8003c40:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8003c42:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <hexdump_line_print+0xc0>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8003c46:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003c4a:	d1eb      	bne.n	8003c24 <hexdump_line_print+0x70>
 8003c4c:	222e      	movs	r2, #46	; 0x2e
 8003c4e:	e7e9      	b.n	8003c24 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <hexdump_line_print+0xac>)
 8003c52:	4628      	mov	r0, r5
 8003c54:	f7ff ff2c 	bl	8003ab0 <print_formatted>
 8003c58:	e7e8      	b.n	8003c2c <hexdump_line_print+0x78>
		}
	}
}
 8003c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c5e:	bf00      	nop
 8003c60:	0800f514 	.word	0x0800f514
 8003c64:	0800f4f8 	.word	0x0800f4f8
 8003c68:	0800f4f0 	.word	0x0800f4f0
 8003c6c:	0800f4fc 	.word	0x0800f4fc
 8003c70:	0800f500 	.word	0x0800f500
 8003c74:	08010555 	.word	0x08010555

08003c78 <ids_print>:
{
 8003c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	4616      	mov	r6, r2
 8003c80:	461d      	mov	r5, r3
 8003c82:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8003c86:	b959      	cbnz	r1, 8003ca0 <ids_print+0x28>
	int total = 0;
 8003c88:	2400      	movs	r4, #0
	if (source_id >= 0) {
 8003c8a:	2f00      	cmp	r7, #0
 8003c8c:	db1c      	blt.n	8003cc8 <ids_print+0x50>
		total += print_formatted(output,
 8003c8e:	b186      	cbz	r6, 8003cb2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8003c90:	2301      	movs	r3, #1
 8003c92:	9a07      	ldr	r2, [sp, #28]
 8003c94:	4093      	lsls	r3, r2
				(func_on &&
 8003c96:	f013 0f10 	tst.w	r3, #16
 8003c9a:	d118      	bne.n	8003cce <ids_print+0x56>
		total += print_formatted(output,
 8003c9c:	4e0d      	ldr	r6, [pc, #52]	; (8003cd4 <ids_print+0x5c>)
 8003c9e:	e009      	b.n	8003cb4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <ids_print+0x60>)
 8003ca2:	9a07      	ldr	r2, [sp, #28]
 8003ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ca8:	490c      	ldr	r1, [pc, #48]	; (8003cdc <ids_print+0x64>)
 8003caa:	f7ff ff01 	bl	8003ab0 <print_formatted>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	e7eb      	b.n	8003c8a <ids_print+0x12>
		total += print_formatted(output,
 8003cb2:	4e08      	ldr	r6, [pc, #32]	; (8003cd4 <ids_print+0x5c>)
 8003cb4:	4639      	mov	r1, r7
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f7ff fe46 	bl	8003948 <log_source_name_get>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	f7ff fef5 	bl	8003ab0 <print_formatted>
 8003cc6:	4404      	add	r4, r0
}
 8003cc8:	4620      	mov	r0, r4
 8003cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8003cce:	4e04      	ldr	r6, [pc, #16]	; (8003ce0 <ids_print+0x68>)
 8003cd0:	e7f0      	b.n	8003cb4 <ids_print+0x3c>
 8003cd2:	bf00      	nop
 8003cd4:	0800f504 	.word	0x0800f504
 8003cd8:	0800f578 	.word	0x0800f578
 8003cdc:	0800f510 	.word	0x0800f510
 8003ce0:	0800f50c 	.word	0x0800f50c

08003ce4 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
 8003ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	b089      	sub	sp, #36	; 0x24
 8003cea:	4607      	mov	r7, r0
 8003cec:	460e      	mov	r6, r1
 8003cee:	4691      	mov	r9, r2
 8003cf0:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
 8003cf2:	f008 fcd4 	bl	800c69e <log_msg_str_get>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	490f      	ldr	r1, [pc, #60]	; (8003d38 <hexdump_print+0x54>)
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff fed8 	bl	8003ab0 <print_formatted>
	uint32_t offset = 0U;
 8003d00:	2400      	movs	r4, #0
 8003d02:	e009      	b.n	8003d18 <hexdump_print+0x34>
	do {
		length = sizeof(buf);
		log_msg_hexdump_data_get(msg, buf, &length, offset);

		if (length) {
			hexdump_line_print(output, buf, length,
 8003d04:	f8cd 8000 	str.w	r8, [sp]
 8003d08:	464b      	mov	r3, r9
 8003d0a:	eb0d 0105 	add.w	r1, sp, r5
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f7ff ff50 	bl	8003bb4 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 8003d14:	9d03      	ldr	r5, [sp, #12]
 8003d16:	442c      	add	r4, r5
		length = sizeof(buf);
 8003d18:	2510      	movs	r5, #16
 8003d1a:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	aa03      	add	r2, sp, #12
 8003d20:	eb0d 0105 	add.w	r1, sp, r5
 8003d24:	4638      	mov	r0, r7
 8003d26:	f008 fccf 	bl	800c6c8 <log_msg_hexdump_data_get>
		if (length) {
 8003d2a:	9a03      	ldr	r2, [sp, #12]
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d1e9      	bne.n	8003d04 <hexdump_print+0x20>
		} else {
			break;
		}
	} while (true);
}
 8003d30:	b009      	add	sp, #36	; 0x24
 8003d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d36:	bf00      	nop
 8003d38:	0800f4e8 	.word	0x0800f4e8

08003d3c <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
 8003d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	4606      	mov	r6, r0
 8003d42:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8003d44:	2700      	movs	r7, #0
	size_t offset = 0;
 8003d46:	463d      	mov	r5, r7
 8003d48:	e00d      	b.n	8003d66 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
 8003d4a:	68a2      	ldr	r2, [r4, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8003d52:	2f0a      	cmp	r7, #10
 8003d54:	bf14      	ite	ne
 8003d56:	2700      	movne	r7, #0
 8003d58:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f008 fe63 	bl	800ca26 <log_output_flush>
		offset += length;
 8003d60:	9b01      	ldr	r3, [sp, #4]
 8003d62:	441d      	add	r5, r3
	} while (length > 0);
 8003d64:	b173      	cbz	r3, 8003d84 <raw_string_print+0x48>
		length = output->size;
 8003d66:	68e3      	ldr	r3, [r4, #12]
 8003d68:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	aa01      	add	r2, sp, #4
 8003d6e:	68a1      	ldr	r1, [r4, #8]
 8003d70:	4630      	mov	r0, r6
 8003d72:	f008 fca9 	bl	800c6c8 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	9a01      	ldr	r2, [sp, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8003d7c:	9b01      	ldr	r3, [sp, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0eb      	beq.n	8003d5a <raw_string_print+0x1e>
 8003d82:	e7e2      	b.n	8003d4a <raw_string_print+0xe>

	if (eol) {
 8003d84:	b90f      	cbnz	r7, 8003d8a <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
 8003d86:	b003      	add	sp, #12
 8003d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
 8003d8a:	4902      	ldr	r1, [pc, #8]	; (8003d94 <raw_string_print+0x58>)
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff fe8f 	bl	8003ab0 <print_formatted>
}
 8003d92:	e7f8      	b.n	8003d86 <raw_string_print+0x4a>
 8003d94:	0800f518 	.word	0x0800f518

08003d98 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8003d9e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003da4:	428b      	cmp	r3, r1
 8003da6:	bf28      	it	cs
 8003da8:	460b      	movcs	r3, r1
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <log_output_dropped_process+0x4c>)
 8003dac:	2105      	movs	r1, #5
 8003dae:	4668      	mov	r0, sp
 8003db0:	f008 fa85 	bl	800c2be <snprintk>
 8003db4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003db6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	220b      	movs	r2, #11
 8003dbc:	490a      	ldr	r1, [pc, #40]	; (8003de8 <log_output_dropped_process+0x50>)
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f008 fc8a 	bl	800c6d8 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	4669      	mov	r1, sp
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f008 fc83 	bl	800c6d8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8003dd2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	221b      	movs	r2, #27
 8003dd8:	4904      	ldr	r1, [pc, #16]	; (8003dec <log_output_dropped_process+0x54>)
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f008 fc7c 	bl	800c6d8 <buffer_write>
}
 8003de0:	b002      	add	sp, #8
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	0800fd9c 	.word	0x0800fd9c
 8003de8:	0800f56c 	.word	0x0800f56c
 8003dec:	0800f550 	.word	0x0800f550

08003df0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <log_output_timestamp_freq_set+0x20>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8003df6:	e004      	b.n	8003e02 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8003df8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003dfa:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <log_output_timestamp_freq_set+0x20>)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <log_output_timestamp_freq_set+0x24>)
 8003e04:	4298      	cmp	r0, r3
 8003e06:	d8f7      	bhi.n	8003df8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <log_output_timestamp_freq_set+0x28>)
 8003e0a:	6018      	str	r0, [r3, #0]
}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	200009ec 	.word	0x200009ec
 8003e14:	000f4240 	.word	0x000f4240
 8003e18:	200009e8 	.word	0x200009e8

08003e1c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8003e22:	2400      	movs	r4, #0
 8003e24:	e006      	b.n	8003e34 <char_out+0x18>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <char_out+0x20>)
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8003e2c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8003e32:	3401      	adds	r4, #1
 8003e34:	42ac      	cmp	r4, r5
 8003e36:	d3f6      	bcc.n	8003e26 <char_out+0xa>
#endif
	}

	return length;
}
 8003e38:	4628      	mov	r0, r5
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	20000a04 	.word	0x20000a04

08003e40 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003e40:	4b01      	ldr	r3, [pc, #4]	; (8003e48 <log_backend_uart_init+0x8>)
 8003e42:	4a02      	ldr	r2, [pc, #8]	; (8003e4c <log_backend_uart_init+0xc>)
 8003e44:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8003e46:	4770      	bx	lr
 8003e48:	20000a04 	.word	0x20000a04
 8003e4c:	0800ec2c 	.word	0x0800ec2c

08003e50 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003e50:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003e52:	4802      	ldr	r0, [pc, #8]	; (8003e5c <panic+0xc>)
 8003e54:	f008 fde7 	bl	800ca26 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003e58:	bd08      	pop	{r3, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800f5bc 	.word	0x0800f5bc

08003e60 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003e60:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003e62:	4802      	ldr	r0, [pc, #8]	; (8003e6c <dropped+0xc>)
 8003e64:	f7ff ff98 	bl	8003d98 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003e68:	bd08      	pop	{r3, pc}
 8003e6a:	bf00      	nop
 8003e6c:	0800f5bc 	.word	0x0800f5bc

08003e70 <put>:
{
 8003e70:	b510      	push	{r4, lr}
 8003e72:	460c      	mov	r4, r1
	log_msg_get(msg);
 8003e74:	4608      	mov	r0, r1
 8003e76:	f008 fbf0 	bl	800c65a <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4803      	ldr	r0, [pc, #12]	; (8003e8c <put+0x1c>)
 8003e80:	f008 fdfa 	bl	800ca78 <log_output_msg_process>
	log_msg_put(msg);
 8003e84:	4620      	mov	r0, r4
 8003e86:	f008 fc0c 	bl	800c6a2 <log_msg_put>
}
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	0800f5bc 	.word	0x0800f5bc

08003e90 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8003e90:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8003e92:	4c04      	ldr	r4, [pc, #16]	; (8003ea4 <__do_init_array_aux+0x14>)
 8003e94:	e002      	b.n	8003e9c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003e96:	f854 3b04 	ldr.w	r3, [r4], #4
 8003e9a:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003e9c:	4b02      	ldr	r3, [pc, #8]	; (8003ea8 <__do_init_array_aux+0x18>)
 8003e9e:	429c      	cmp	r4, r3
 8003ea0:	d3f9      	bcc.n	8003e96 <__do_init_array_aux+0x6>
	}
}
 8003ea2:	bd10      	pop	{r4, pc}
 8003ea4:	0800ef6c 	.word	0x0800ef6c
 8003ea8:	0800ef6c 	.word	0x0800ef6c

08003eac <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <__do_global_ctors_aux+0x1c>)
 8003eae:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8003eb0:	b14b      	cbz	r3, 8003ec6 <__do_global_ctors_aux+0x1a>
{
 8003eb2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8003eb4:	1e5c      	subs	r4, r3, #1
 8003eb6:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <__do_global_ctors_aux+0x1c>)
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	4798      	blx	r3
 8003ebe:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8003ec0:	2c00      	cmp	r4, #0
 8003ec2:	d1f7      	bne.n	8003eb4 <__do_global_ctors_aux+0x8>
	}
}
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	4770      	bx	lr
 8003ec8:	0800ef64 	.word	0x0800ef64

08003ecc <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8003ecc:	28af      	cmp	r0, #175	; 0xaf
 8003ece:	d81d      	bhi.n	8003f0c <stm32_pin_configure+0x40>
{
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	460f      	mov	r7, r1
 8003ed6:	4615      	mov	r5, r2
 8003ed8:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <stm32_pin_configure+0x48>)
 8003edc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003ee0:	b18e      	cbz	r6, 8003f06 <stm32_pin_configure+0x3a>
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f009 fe6d 	bl	800dbc2 <z_device_ready>
 8003ee8:	b150      	cbz	r0, 8003f00 <stm32_pin_configure+0x34>
 8003eea:	2300      	movs	r3, #0
 8003eec:	b95b      	cbnz	r3, 8003f06 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8003eee:	462b      	mov	r3, r5
 8003ef0:	463a      	mov	r2, r7
 8003ef2:	f004 010f 	and.w	r1, r4, #15
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f009 f803 	bl	800cf02 <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 8003efc:	2000      	movs	r0, #0
}
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f00:	f06f 0312 	mvn.w	r3, #18
 8003f04:	e7f2      	b.n	8003eec <stm32_pin_configure+0x20>
		return -ENODEV;
 8003f06:	f06f 0012 	mvn.w	r0, #18
 8003f0a:	e7f8      	b.n	8003efe <stm32_pin_configure+0x32>
		return -EINVAL;
 8003f0c:	f06f 0015 	mvn.w	r0, #21
}
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	0800f5cc 	.word	0x0800f5cc

08003f18 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003f18:	4901      	ldr	r1, [pc, #4]	; (8003f20 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003f1a:	2210      	movs	r2, #16
	str	r2, [r1]
 8003f1c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003f1e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003f20:	e000ed10 	.word	0xe000ed10

08003f24 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003f24:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003f26:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003f28:	f380 8811 	msr	BASEPRI, r0
	isb
 8003f2c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003f30:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003f34:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003f36:	b662      	cpsie	i
	isb
 8003f38:	f3bf 8f6f 	isb	sy

	bx	lr
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003f46:	4d1f      	ldr	r5, [pc, #124]	; (8003fc4 <esf_dump+0x84>)
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <esf_dump+0x88>)
 8003f4a:	1aed      	subs	r5, r5, r3
 8003f4c:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003f4e:	2601      	movs	r6, #1
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	f366 0302 	bfi	r3, r6, #0, #3
 8003f58:	f36f 03c5 	bfc	r3, #3, #3
 8003f5c:	f365 138f 	bfi	r3, r5, #6, #10
 8003f60:	f8ad 3000 	strh.w	r3, [sp]
 8003f64:	6883      	ldr	r3, [r0, #8]
 8003f66:	6842      	ldr	r2, [r0, #4]
 8003f68:	6801      	ldr	r1, [r0, #0]
 8003f6a:	4818      	ldr	r0, [pc, #96]	; (8003fcc <esf_dump+0x8c>)
 8003f6c:	f7ff fbc2 	bl	80036f4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f366 0302 	bfi	r3, r6, #0, #3
 8003f78:	f36f 03c5 	bfc	r3, #3, #3
 8003f7c:	f365 138f 	bfi	r3, r5, #6, #10
 8003f80:	f8ad 3000 	strh.w	r3, [sp]
 8003f84:	6963      	ldr	r3, [r4, #20]
 8003f86:	6922      	ldr	r2, [r4, #16]
 8003f88:	68e1      	ldr	r1, [r4, #12]
 8003f8a:	4811      	ldr	r0, [pc, #68]	; (8003fd0 <esf_dump+0x90>)
 8003f8c:	f7ff fbb2 	bl	80036f4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f366 0202 	bfi	r2, r6, #0, #3
 8003f98:	f36f 02c5 	bfc	r2, #3, #3
 8003f9c:	f365 128f 	bfi	r2, r5, #6, #10
 8003fa0:	69e1      	ldr	r1, [r4, #28]
 8003fa2:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <esf_dump+0x94>)
 8003fa4:	f7ff fc0a 	bl	80037bc <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f366 0202 	bfi	r2, r6, #0, #3
 8003fb0:	f36f 02c5 	bfc	r2, #3, #3
 8003fb4:	f365 128f 	bfi	r2, r5, #6, #10
 8003fb8:	69a1      	ldr	r1, [r4, #24]
 8003fba:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <esf_dump+0x98>)
 8003fbc:	f7ff fbfe 	bl	80037bc <log_1>
		esf->basic.pc);
}
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	0800ef8c 	.word	0x0800ef8c
 8003fc8:	0800ef6c 	.word	0x0800ef6c
 8003fcc:	0800f5f8 	.word	0x0800f5f8
 8003fd0:	0800f628 	.word	0x0800f628
 8003fd4:	0800f658 	.word	0x0800f658
 8003fd8:	0800f668 	.word	0x0800f668

08003fdc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003fdc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	db07      	blt.n	8003ff2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	f000 021f 	and.w	r2, r0, #31
 8003fe6:	0940      	lsrs	r0, r0, #5
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4093      	lsls	r3, r2
 8003fec:	4a01      	ldr	r2, [pc, #4]	; (8003ff4 <arch_irq_enable+0x18>)
 8003fee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003ff2:	4770      	bx	lr
 8003ff4:	e000e100 	.word	0xe000e100

08003ff8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8003ff8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003ffa:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	db08      	blt.n	8004012 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	0109      	lsls	r1, r1, #4
 8004002:	b2c9      	uxtb	r1, r1
 8004004:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004008:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800400c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004010:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004012:	f000 000f 	and.w	r0, r0, #15
 8004016:	0109      	lsls	r1, r1, #4
 8004018:	b2c9      	uxtb	r1, r1
 800401a:	4b01      	ldr	r3, [pc, #4]	; (8004020 <z_arm_irq_priority_set+0x28>)
 800401c:	5419      	strb	r1, [r3, r0]
}
 800401e:	4770      	bx	lr
 8004020:	e000ed14 	.word	0xe000ed14

08004024 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004024:	bf30      	wfi
    b z_SysNmiOnReset
 8004026:	f7ff bffd 	b.w	8004024 <z_SysNmiOnReset>
 800402a:	bf00      	nop

0800402c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800402c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <z_arm_prep_c+0x40>)
 8004030:	4a0f      	ldr	r2, [pc, #60]	; (8004070 <z_arm_prep_c+0x44>)
 8004032:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004036:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800403c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004044:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800404c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004050:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004054:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004058:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800405c:	f004 ff74 	bl	8008f48 <z_bss_zero>
	z_data_copy();
 8004060:	f005 ffba 	bl	8009fd8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004064:	f000 fc9e 	bl	80049a4 <z_arm_interrupt_init>
	z_cstart();
 8004068:	f004 ff7a 	bl	8008f60 <z_cstart>
 800406c:	e000ed00 	.word	0xe000ed00
 8004070:	08000000 	.word	0x08000000

08004074 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004074:	4a09      	ldr	r2, [pc, #36]	; (800409c <arch_swap+0x28>)
 8004076:	6893      	ldr	r3, [r2, #8]
 8004078:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 800407a:	4909      	ldr	r1, [pc, #36]	; (80040a0 <arch_swap+0x2c>)
 800407c:	6809      	ldr	r1, [r1, #0]
 800407e:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004080:	4908      	ldr	r1, [pc, #32]	; (80040a4 <arch_swap+0x30>)
 8004082:	684b      	ldr	r3, [r1, #4]
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	604b      	str	r3, [r1, #4]
 800408a:	2300      	movs	r3, #0
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004094:	6893      	ldr	r3, [r2, #8]
}
 8004096:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000ecc 	.word	0x20000ecc
 80040a0:	080103b4 	.word	0x080103b4
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80040a8:	4912      	ldr	r1, [pc, #72]	; (80040f4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80040aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80040ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80040b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80040b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80040b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80040ba:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 80040bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80040c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80040c4:	4f0c      	ldr	r7, [pc, #48]	; (80040f8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80040c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80040ca:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80040cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80040ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80040d0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 80040d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80040d4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80040d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80040da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80040dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80040de:	f000 fcb5 	bl	8004a4c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80040e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80040e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80040ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80040ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80040f2:	4770      	bx	lr
    ldr r1, =_kernel
 80040f4:	20000ecc 	.word	0x20000ecc
    ldr v4, =_SCS_ICSR
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80040fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004100:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004102:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004106:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800410a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800410c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004110:	2902      	cmp	r1, #2
    beq _oops
 8004112:	d0ff      	beq.n	8004114 <_oops>

08004114 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004114:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004116:	f008 fd2c 	bl	800cb72 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800411a:	bd01      	pop	{r0, pc}

0800411c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 800411c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 800411e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8004122:	490d      	ldr	r1, [pc, #52]	; (8004158 <arch_new_thread+0x3c>)
 8004124:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8004128:	f021 0101 	bic.w	r1, r1, #1
 800412c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8004130:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004134:	9b01      	ldr	r3, [sp, #4]
 8004136:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 800413a:	9b02      	ldr	r3, [sp, #8]
 800413c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800414e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004154:	bc10      	pop	{r4}
 8004156:	4770      	bx	lr
 8004158:	0800c2db 	.word	0x0800c2db

0800415c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <z_check_thread_stack_fail+0x48>)
 800415e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8004160:	b1ea      	cbz	r2, 800419e <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004162:	f110 0f16 	cmn.w	r0, #22
 8004166:	d010      	beq.n	800418a <z_check_thread_stack_fail+0x2e>
 8004168:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800416a:	f1a3 0c20 	sub.w	ip, r3, #32
 800416e:	4584      	cmp	ip, r0
 8004170:	d805      	bhi.n	800417e <z_check_thread_stack_fail+0x22>
 8004172:	4283      	cmp	r3, r0
 8004174:	d905      	bls.n	8004182 <z_check_thread_stack_fail+0x26>
 8004176:	428b      	cmp	r3, r1
 8004178:	d805      	bhi.n	8004186 <z_check_thread_stack_fail+0x2a>
 800417a:	2100      	movs	r1, #0
 800417c:	e00a      	b.n	8004194 <z_check_thread_stack_fail+0x38>
 800417e:	2100      	movs	r1, #0
 8004180:	e008      	b.n	8004194 <z_check_thread_stack_fail+0x38>
 8004182:	2100      	movs	r1, #0
 8004184:	e006      	b.n	8004194 <z_check_thread_stack_fail+0x38>
 8004186:	2101      	movs	r1, #1
 8004188:	e004      	b.n	8004194 <z_check_thread_stack_fail+0x38>
 800418a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800418c:	428b      	cmp	r3, r1
 800418e:	bf94      	ite	ls
 8004190:	2100      	movls	r1, #0
 8004192:	2101      	movhi	r1, #1
 8004194:	b909      	cbnz	r1, 800419a <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8004196:	2000      	movs	r0, #0
}
 8004198:	4770      	bx	lr
		return thread->stack_info.start;
 800419a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800419c:	4770      	bx	lr
		return 0;
 800419e:	2000      	movs	r0, #0
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000ecc 	.word	0x20000ecc

080041a8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80041a8:	b508      	push	{r3, lr}
 80041aa:	460d      	mov	r5, r1
 80041ac:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <arch_switch_to_main_thread+0x28>)
 80041b0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80041b2:	f000 fc4b 	bl	8004a4c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80041b6:	4620      	mov	r0, r4
 80041b8:	f385 8809 	msr	PSP, r5
 80041bc:	2100      	movs	r1, #0
 80041be:	b663      	cpsie	if
 80041c0:	f381 8811 	msr	BASEPRI, r1
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	2200      	movs	r2, #0
 80041ca:	2300      	movs	r3, #0
 80041cc:	f008 f885 	bl	800c2da <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80041d0:	20000ecc 	.word	0x20000ecc

080041d4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80041d4:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80041d6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80041da:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80041de:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80041e2:	4904      	ldr	r1, [pc, #16]	; (80041f4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80041e4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80041e6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80041e8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80041ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80041ee:	4902      	ldr	r1, [pc, #8]	; (80041f8 <_isr_wrapper+0x24>)
	bx r1
 80041f0:	4708      	bx	r1
 80041f2:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80041f4:	0800ecbc 	.word	0x0800ecbc
	ldr r1, =z_arm_int_exit
 80041f8:	080041fd 	.word	0x080041fd

080041fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80041fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004200:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8004202:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8004204:	d003      	beq.n	800420e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8004206:	4903      	ldr	r1, [pc, #12]	; (8004214 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 800420c:	600a      	str	r2, [r1, #0]

0800420e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 800420e:	4770      	bx	lr
	ldr r3, =_kernel
 8004210:	20000ecc 	.word	0x20000ecc
	ldr r1, =_SCS_ICSR
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8004218:	b508      	push	{r3, lr}
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <usage_fault+0x13c>)
 800421c:	4a4e      	ldr	r2, [pc, #312]	; (8004358 <usage_fault+0x140>)
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	2201      	movs	r2, #1
 8004228:	f362 0102 	bfi	r1, r2, #0, #3
 800422c:	f36f 01c5 	bfc	r1, #3, #3
 8004230:	f363 118f 	bfi	r1, r3, #6, #10
 8004234:	4849      	ldr	r0, [pc, #292]	; (800435c <usage_fault+0x144>)
 8004236:	f7ff fa97 	bl	8003768 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 800423a:	4b49      	ldr	r3, [pc, #292]	; (8004360 <usage_fault+0x148>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004242:	d121      	bne.n	8004288 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004244:	4b46      	ldr	r3, [pc, #280]	; (8004360 <usage_fault+0x148>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800424c:	d12d      	bne.n	80042aa <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800424e:	4b44      	ldr	r3, [pc, #272]	; (8004360 <usage_fault+0x148>)
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004256:	d139      	bne.n	80042cc <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8004258:	4b41      	ldr	r3, [pc, #260]	; (8004360 <usage_fault+0x148>)
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004260:	d145      	bne.n	80042ee <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <usage_fault+0x148>)
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800426a:	d151      	bne.n	8004310 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 800426c:	4b3c      	ldr	r3, [pc, #240]	; (8004360 <usage_fault+0x148>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004274:	d15d      	bne.n	8004332 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <usage_fault+0x148>)
 8004278:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800427a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800427e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8004282:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8004284:	2000      	movs	r0, #0
 8004286:	bd08      	pop	{r3, pc}
 8004288:	4b32      	ldr	r3, [pc, #200]	; (8004354 <usage_fault+0x13c>)
 800428a:	4a33      	ldr	r2, [pc, #204]	; (8004358 <usage_fault+0x140>)
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	2201      	movs	r2, #1
 8004296:	f362 0102 	bfi	r1, r2, #0, #3
 800429a:	f36f 01c5 	bfc	r1, #3, #3
 800429e:	f363 118f 	bfi	r1, r3, #6, #10
 80042a2:	4830      	ldr	r0, [pc, #192]	; (8004364 <usage_fault+0x14c>)
 80042a4:	f7ff fa60 	bl	8003768 <log_0>
 80042a8:	e7cc      	b.n	8004244 <usage_fault+0x2c>
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <usage_fault+0x13c>)
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <usage_fault+0x140>)
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	2201      	movs	r2, #1
 80042b8:	f362 0102 	bfi	r1, r2, #0, #3
 80042bc:	f36f 01c5 	bfc	r1, #3, #3
 80042c0:	f363 118f 	bfi	r1, r3, #6, #10
 80042c4:	4828      	ldr	r0, [pc, #160]	; (8004368 <usage_fault+0x150>)
 80042c6:	f7ff fa4f 	bl	8003768 <log_0>
 80042ca:	e7c0      	b.n	800424e <usage_fault+0x36>
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <usage_fault+0x13c>)
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <usage_fault+0x140>)
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	2201      	movs	r2, #1
 80042da:	f362 0102 	bfi	r1, r2, #0, #3
 80042de:	f36f 01c5 	bfc	r1, #3, #3
 80042e2:	f363 118f 	bfi	r1, r3, #6, #10
 80042e6:	4821      	ldr	r0, [pc, #132]	; (800436c <usage_fault+0x154>)
 80042e8:	f7ff fa3e 	bl	8003768 <log_0>
 80042ec:	e7b4      	b.n	8004258 <usage_fault+0x40>
 80042ee:	4b19      	ldr	r3, [pc, #100]	; (8004354 <usage_fault+0x13c>)
 80042f0:	4a19      	ldr	r2, [pc, #100]	; (8004358 <usage_fault+0x140>)
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	2201      	movs	r2, #1
 80042fc:	f362 0102 	bfi	r1, r2, #0, #3
 8004300:	f36f 01c5 	bfc	r1, #3, #3
 8004304:	f363 118f 	bfi	r1, r3, #6, #10
 8004308:	4819      	ldr	r0, [pc, #100]	; (8004370 <usage_fault+0x158>)
 800430a:	f7ff fa2d 	bl	8003768 <log_0>
 800430e:	e7a8      	b.n	8004262 <usage_fault+0x4a>
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <usage_fault+0x13c>)
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <usage_fault+0x140>)
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	2201      	movs	r2, #1
 800431e:	f362 0102 	bfi	r1, r2, #0, #3
 8004322:	f36f 01c5 	bfc	r1, #3, #3
 8004326:	f363 118f 	bfi	r1, r3, #6, #10
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <usage_fault+0x15c>)
 800432c:	f7ff fa1c 	bl	8003768 <log_0>
 8004330:	e79c      	b.n	800426c <usage_fault+0x54>
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <usage_fault+0x13c>)
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <usage_fault+0x140>)
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	2201      	movs	r2, #1
 8004340:	f362 0102 	bfi	r1, r2, #0, #3
 8004344:	f36f 01c5 	bfc	r1, #3, #3
 8004348:	f363 118f 	bfi	r1, r3, #6, #10
 800434c:	480a      	ldr	r0, [pc, #40]	; (8004378 <usage_fault+0x160>)
 800434e:	f7ff fa0b 	bl	8003768 <log_0>
 8004352:	e790      	b.n	8004276 <usage_fault+0x5e>
 8004354:	0800ef8c 	.word	0x0800ef8c
 8004358:	0800ef6c 	.word	0x0800ef6c
 800435c:	0800f698 	.word	0x0800f698
 8004360:	e000ed00 	.word	0xe000ed00
 8004364:	0800f6b0 	.word	0x0800f6b0
 8004368:	0800f6c4 	.word	0x0800f6c4
 800436c:	0800f6e0 	.word	0x0800f6e0
 8004370:	0800f700 	.word	0x0800f700
 8004374:	0800f728 	.word	0x0800f728
 8004378:	0800f744 	.word	0x0800f744

0800437c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 800437c:	b508      	push	{r3, lr}
	*recoverable = false;
 800437e:	2200      	movs	r2, #0
 8004380:	700a      	strb	r2, [r1, #0]
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <debug_monitor+0x28>)
 8004384:	4908      	ldr	r1, [pc, #32]	; (80043a8 <debug_monitor+0x2c>)
 8004386:	1a5b      	subs	r3, r3, r1
 8004388:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	2001      	movs	r0, #1
 8004390:	f360 0102 	bfi	r1, r0, #0, #3
 8004394:	f362 01c5 	bfi	r1, r2, #3, #3
 8004398:	f363 118f 	bfi	r1, r3, #6, #10
 800439c:	4803      	ldr	r0, [pc, #12]	; (80043ac <debug_monitor+0x30>)
 800439e:	f7ff f9e3 	bl	8003768 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 80043a2:	bd08      	pop	{r3, pc}
 80043a4:	0800ef8c 	.word	0x0800ef8c
 80043a8:	0800ef6c 	.word	0x0800ef6c
 80043ac:	0800f770 	.word	0x0800f770

080043b0 <bus_fault>:
{
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4605      	mov	r5, r0
 80043b4:	460e      	mov	r6, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <bus_fault+0x184>)
 80043ba:	4a5f      	ldr	r2, [pc, #380]	; (8004538 <bus_fault+0x188>)
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	2201      	movs	r2, #1
 80043c6:	f362 0102 	bfi	r1, r2, #0, #3
 80043ca:	f36f 01c5 	bfc	r1, #3, #3
 80043ce:	f363 118f 	bfi	r1, r3, #6, #10
 80043d2:	485a      	ldr	r0, [pc, #360]	; (800453c <bus_fault+0x18c>)
 80043d4:	f7ff f9c8 	bl	8003768 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <bus_fault+0x190>)
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80043e0:	d124      	bne.n	800442c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80043e2:	4b57      	ldr	r3, [pc, #348]	; (8004540 <bus_fault+0x190>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80043ea:	d130      	bne.n	800444e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80043ec:	4b54      	ldr	r3, [pc, #336]	; (8004540 <bus_fault+0x190>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f413 7f00 	tst.w	r3, #512	; 0x200
 80043f4:	d13c      	bne.n	8004470 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80043f6:	4b52      	ldr	r3, [pc, #328]	; (8004540 <bus_fault+0x190>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80043fe:	d165      	bne.n	80044cc <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004400:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <bus_fault+0x190>)
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004408:	d171      	bne.n	80044ee <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800440a:	4b4d      	ldr	r3, [pc, #308]	; (8004540 <bus_fault+0x190>)
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004412:	d17d      	bne.n	8004510 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004414:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <bus_fault+0x190>)
 8004416:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004418:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800441c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800441e:	2101      	movs	r1, #1
 8004420:	4628      	mov	r0, r5
 8004422:	f008 fbb8 	bl	800cb96 <memory_fault_recoverable>
 8004426:	7020      	strb	r0, [r4, #0]
}
 8004428:	2000      	movs	r0, #0
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	4b41      	ldr	r3, [pc, #260]	; (8004534 <bus_fault+0x184>)
 800442e:	4a42      	ldr	r2, [pc, #264]	; (8004538 <bus_fault+0x188>)
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	2201      	movs	r2, #1
 800443a:	f362 0102 	bfi	r1, r2, #0, #3
 800443e:	f36f 01c5 	bfc	r1, #3, #3
 8004442:	f363 118f 	bfi	r1, r3, #6, #10
 8004446:	483f      	ldr	r0, [pc, #252]	; (8004544 <bus_fault+0x194>)
 8004448:	f7ff f98e 	bl	8003768 <log_0>
 800444c:	e7c9      	b.n	80043e2 <bus_fault+0x32>
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <bus_fault+0x184>)
 8004450:	4a39      	ldr	r2, [pc, #228]	; (8004538 <bus_fault+0x188>)
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	2201      	movs	r2, #1
 800445c:	f362 0102 	bfi	r1, r2, #0, #3
 8004460:	f36f 01c5 	bfc	r1, #3, #3
 8004464:	f363 118f 	bfi	r1, r3, #6, #10
 8004468:	4837      	ldr	r0, [pc, #220]	; (8004548 <bus_fault+0x198>)
 800446a:	f7ff f97d 	bl	8003768 <log_0>
 800446e:	e7bd      	b.n	80043ec <bus_fault+0x3c>
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <bus_fault+0x184>)
 8004472:	4a31      	ldr	r2, [pc, #196]	; (8004538 <bus_fault+0x188>)
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	2201      	movs	r2, #1
 800447e:	f362 0102 	bfi	r1, r2, #0, #3
 8004482:	f36f 01c5 	bfc	r1, #3, #3
 8004486:	f363 118f 	bfi	r1, r3, #6, #10
 800448a:	4830      	ldr	r0, [pc, #192]	; (800454c <bus_fault+0x19c>)
 800448c:	f7ff f96c 	bl	8003768 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <bus_fault+0x190>)
 8004492:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800449a:	d0ac      	beq.n	80043f6 <bus_fault+0x46>
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <bus_fault+0x184>)
 800449e:	4a26      	ldr	r2, [pc, #152]	; (8004538 <bus_fault+0x188>)
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	2001      	movs	r0, #1
 80044aa:	f360 0202 	bfi	r2, r0, #0, #3
 80044ae:	f36f 02c5 	bfc	r2, #3, #3
 80044b2:	f363 128f 	bfi	r2, r3, #6, #10
 80044b6:	4826      	ldr	r0, [pc, #152]	; (8004550 <bus_fault+0x1a0>)
 80044b8:	f7ff f980 	bl	80037bc <log_1>
			if (from_hard_fault != 0) {
 80044bc:	2e00      	cmp	r6, #0
 80044be:	d09a      	beq.n	80043f6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80044c0:	4a1f      	ldr	r2, [pc, #124]	; (8004540 <bus_fault+0x190>)
 80044c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80044c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044c8:	6293      	str	r3, [r2, #40]	; 0x28
 80044ca:	e794      	b.n	80043f6 <bus_fault+0x46>
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <bus_fault+0x184>)
 80044ce:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <bus_fault+0x188>)
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	2201      	movs	r2, #1
 80044da:	f362 0102 	bfi	r1, r2, #0, #3
 80044de:	f36f 01c5 	bfc	r1, #3, #3
 80044e2:	f363 118f 	bfi	r1, r3, #6, #10
 80044e6:	481b      	ldr	r0, [pc, #108]	; (8004554 <bus_fault+0x1a4>)
 80044e8:	f7ff f93e 	bl	8003768 <log_0>
 80044ec:	e788      	b.n	8004400 <bus_fault+0x50>
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <bus_fault+0x184>)
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <bus_fault+0x188>)
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	2201      	movs	r2, #1
 80044fc:	f362 0102 	bfi	r1, r2, #0, #3
 8004500:	f36f 01c5 	bfc	r1, #3, #3
 8004504:	f363 118f 	bfi	r1, r3, #6, #10
 8004508:	4813      	ldr	r0, [pc, #76]	; (8004558 <bus_fault+0x1a8>)
 800450a:	f7ff f92d 	bl	8003768 <log_0>
 800450e:	e781      	b.n	8004414 <bus_fault+0x64>
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <bus_fault+0x184>)
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <bus_fault+0x188>)
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	2201      	movs	r2, #1
 800451e:	f362 0102 	bfi	r1, r2, #0, #3
 8004522:	f36f 01c5 	bfc	r1, #3, #3
 8004526:	f363 118f 	bfi	r1, r3, #6, #10
 800452a:	480c      	ldr	r0, [pc, #48]	; (800455c <bus_fault+0x1ac>)
 800452c:	f7ff f91c 	bl	8003768 <log_0>
 8004530:	e770      	b.n	8004414 <bus_fault+0x64>
 8004532:	bf00      	nop
 8004534:	0800ef8c 	.word	0x0800ef8c
 8004538:	0800ef6c 	.word	0x0800ef6c
 800453c:	0800f794 	.word	0x0800f794
 8004540:	e000ed00 	.word	0xe000ed00
 8004544:	0800f7ac 	.word	0x0800f7ac
 8004548:	0800f7c0 	.word	0x0800f7c0
 800454c:	0800f7d4 	.word	0x0800f7d4
 8004550:	0800f7f0 	.word	0x0800f7f0
 8004554:	0800f808 	.word	0x0800f808
 8004558:	0800f824 	.word	0x0800f824
 800455c:	0800f83c 	.word	0x0800f83c

08004560 <mem_manage_fault>:
{
 8004560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004562:	4605      	mov	r5, r0
 8004564:	460c      	mov	r4, r1
 8004566:	4616      	mov	r6, r2
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <mem_manage_fault+0x19c>)
 800456a:	4a65      	ldr	r2, [pc, #404]	; (8004700 <mem_manage_fault+0x1a0>)
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	2201      	movs	r2, #1
 8004576:	f362 0102 	bfi	r1, r2, #0, #3
 800457a:	f36f 01c5 	bfc	r1, #3, #3
 800457e:	f363 118f 	bfi	r1, r3, #6, #10
 8004582:	4860      	ldr	r0, [pc, #384]	; (8004704 <mem_manage_fault+0x1a4>)
 8004584:	f7ff f8f0 	bl	8003768 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8004588:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <mem_manage_fault+0x1a8>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f013 0f10 	tst.w	r3, #16
 8004590:	d132      	bne.n	80045f8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8004592:	4b5d      	ldr	r3, [pc, #372]	; (8004708 <mem_manage_fault+0x1a8>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	f013 0f08 	tst.w	r3, #8
 800459a:	d13e      	bne.n	800461a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <mem_manage_fault+0x1a8>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f013 0f02 	tst.w	r3, #2
 80045a4:	d14a      	bne.n	800463c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
 80045a6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80045aa:	4b57      	ldr	r3, [pc, #348]	; (8004708 <mem_manage_fault+0x1a8>)
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f013 0f01 	tst.w	r3, #1
 80045b2:	d175      	bne.n	80046a0 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80045b4:	4b54      	ldr	r3, [pc, #336]	; (8004708 <mem_manage_fault+0x1a8>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f013 0f20 	tst.w	r3, #32
 80045bc:	f040 8081 	bne.w	80046c2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80045c0:	4b51      	ldr	r3, [pc, #324]	; (8004708 <mem_manage_fault+0x1a8>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f013 0f10 	tst.w	r3, #16
 80045c8:	d104      	bne.n	80045d4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 80045ca:	4b4f      	ldr	r3, [pc, #316]	; (8004708 <mem_manage_fault+0x1a8>)
 80045cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 80045ce:	f014 0402 	ands.w	r4, r4, #2
 80045d2:	d005      	beq.n	80045e0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80045d4:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <mem_manage_fault+0x1a8>)
 80045d6:	685c      	ldr	r4, [r3, #4]
 80045d8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80045dc:	f040 8082 	bne.w	80046e4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80045e0:	4a49      	ldr	r2, [pc, #292]	; (8004708 <mem_manage_fault+0x1a8>)
 80045e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80045e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80045ea:	2101      	movs	r1, #1
 80045ec:	4628      	mov	r0, r5
 80045ee:	f008 fad2 	bl	800cb96 <memory_fault_recoverable>
 80045f2:	7030      	strb	r0, [r6, #0]
}
 80045f4:	4620      	mov	r0, r4
 80045f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045f8:	4b40      	ldr	r3, [pc, #256]	; (80046fc <mem_manage_fault+0x19c>)
 80045fa:	4a41      	ldr	r2, [pc, #260]	; (8004700 <mem_manage_fault+0x1a0>)
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	2201      	movs	r2, #1
 8004606:	f362 0102 	bfi	r1, r2, #0, #3
 800460a:	f36f 01c5 	bfc	r1, #3, #3
 800460e:	f363 118f 	bfi	r1, r3, #6, #10
 8004612:	483e      	ldr	r0, [pc, #248]	; (800470c <mem_manage_fault+0x1ac>)
 8004614:	f7ff f8a8 	bl	8003768 <log_0>
 8004618:	e7bb      	b.n	8004592 <mem_manage_fault+0x32>
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <mem_manage_fault+0x19c>)
 800461c:	4a38      	ldr	r2, [pc, #224]	; (8004700 <mem_manage_fault+0x1a0>)
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	2201      	movs	r2, #1
 8004628:	f362 0102 	bfi	r1, r2, #0, #3
 800462c:	f36f 01c5 	bfc	r1, #3, #3
 8004630:	f363 118f 	bfi	r1, r3, #6, #10
 8004634:	4836      	ldr	r0, [pc, #216]	; (8004710 <mem_manage_fault+0x1b0>)
 8004636:	f7ff f897 	bl	8003768 <log_0>
 800463a:	e7af      	b.n	800459c <mem_manage_fault+0x3c>
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <mem_manage_fault+0x19c>)
 800463e:	4a30      	ldr	r2, [pc, #192]	; (8004700 <mem_manage_fault+0x1a0>)
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	2201      	movs	r2, #1
 800464a:	f362 0102 	bfi	r1, r2, #0, #3
 800464e:	f36f 01c5 	bfc	r1, #3, #3
 8004652:	f363 118f 	bfi	r1, r3, #6, #10
 8004656:	482f      	ldr	r0, [pc, #188]	; (8004714 <mem_manage_fault+0x1b4>)
 8004658:	f7ff f886 	bl	8003768 <log_0>
		uint32_t temp = SCB->MMFAR;
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <mem_manage_fault+0x1a8>)
 800465e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004666:	d102      	bne.n	800466e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
 8004668:	f06f 0715 	mvn.w	r7, #21
 800466c:	e79d      	b.n	80045aa <mem_manage_fault+0x4a>
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <mem_manage_fault+0x19c>)
 8004670:	4a23      	ldr	r2, [pc, #140]	; (8004700 <mem_manage_fault+0x1a0>)
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	2101      	movs	r1, #1
 800467c:	f361 0202 	bfi	r2, r1, #0, #3
 8004680:	f36f 02c5 	bfc	r2, #3, #3
 8004684:	f363 128f 	bfi	r2, r3, #6, #10
 8004688:	4639      	mov	r1, r7
 800468a:	4823      	ldr	r0, [pc, #140]	; (8004718 <mem_manage_fault+0x1b8>)
 800468c:	f7ff f896 	bl	80037bc <log_1>
			if (from_hard_fault != 0) {
 8004690:	2c00      	cmp	r4, #0
 8004692:	d08a      	beq.n	80045aa <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8004694:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <mem_manage_fault+0x1a8>)
 8004696:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469c:	6293      	str	r3, [r2, #40]	; 0x28
 800469e:	e784      	b.n	80045aa <mem_manage_fault+0x4a>
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <mem_manage_fault+0x19c>)
 80046a2:	4a17      	ldr	r2, [pc, #92]	; (8004700 <mem_manage_fault+0x1a0>)
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	2201      	movs	r2, #1
 80046ae:	f362 0102 	bfi	r1, r2, #0, #3
 80046b2:	f36f 01c5 	bfc	r1, #3, #3
 80046b6:	f363 118f 	bfi	r1, r3, #6, #10
 80046ba:	4818      	ldr	r0, [pc, #96]	; (800471c <mem_manage_fault+0x1bc>)
 80046bc:	f7ff f854 	bl	8003768 <log_0>
 80046c0:	e778      	b.n	80045b4 <mem_manage_fault+0x54>
 80046c2:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <mem_manage_fault+0x19c>)
 80046c4:	4a0e      	ldr	r2, [pc, #56]	; (8004700 <mem_manage_fault+0x1a0>)
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	2201      	movs	r2, #1
 80046d0:	f362 0102 	bfi	r1, r2, #0, #3
 80046d4:	f36f 01c5 	bfc	r1, #3, #3
 80046d8:	f363 118f 	bfi	r1, r3, #6, #10
 80046dc:	4810      	ldr	r0, [pc, #64]	; (8004720 <mem_manage_fault+0x1c0>)
 80046de:	f7ff f843 	bl	8003768 <log_0>
 80046e2:	e76d      	b.n	80045c0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80046e4:	4629      	mov	r1, r5
 80046e6:	4638      	mov	r0, r7
 80046e8:	f7ff fd38 	bl	800415c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80046ec:	4604      	mov	r4, r0
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f43f af76 	beq.w	80045e0 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80046f4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80046f8:	2402      	movs	r4, #2
 80046fa:	e771      	b.n	80045e0 <mem_manage_fault+0x80>
 80046fc:	0800ef8c 	.word	0x0800ef8c
 8004700:	0800ef6c 	.word	0x0800ef6c
 8004704:	0800f86c 	.word	0x0800f86c
 8004708:	e000ed00 	.word	0xe000ed00
 800470c:	0800f884 	.word	0x0800f884
 8004710:	0800f7c0 	.word	0x0800f7c0
 8004714:	0800f8b8 	.word	0x0800f8b8
 8004718:	0800f8d0 	.word	0x0800f8d0
 800471c:	0800f8e8 	.word	0x0800f8e8
 8004720:	0800f83c 	.word	0x0800f83c

08004724 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4605      	mov	r5, r0
 8004728:	460c      	mov	r4, r1
 800472a:	4b46      	ldr	r3, [pc, #280]	; (8004844 <hard_fault+0x120>)
 800472c:	4a46      	ldr	r2, [pc, #280]	; (8004848 <hard_fault+0x124>)
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	2201      	movs	r2, #1
 8004738:	f362 0102 	bfi	r1, r2, #0, #3
 800473c:	f36f 01c5 	bfc	r1, #3, #3
 8004740:	f363 118f 	bfi	r1, r3, #6, #10
 8004744:	4841      	ldr	r0, [pc, #260]	; (800484c <hard_fault+0x128>)
 8004746:	f7ff f80f 	bl	8003768 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 800474a:	2300      	movs	r3, #0
 800474c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <hard_fault+0x12c>)
 8004750:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004752:	f016 0602 	ands.w	r6, r6, #2
 8004756:	d109      	bne.n	800476c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8004758:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <hard_fault+0x12c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2b00      	cmp	r3, #0
 800475e:	db17      	blt.n	8004790 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <hard_fault+0x12c>)
 8004762:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004764:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8004768:	d124      	bne.n	80047b4 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	4b35      	ldr	r3, [pc, #212]	; (8004844 <hard_fault+0x120>)
 800476e:	4a36      	ldr	r2, [pc, #216]	; (8004848 <hard_fault+0x124>)
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	2201      	movs	r2, #1
 800477a:	f362 0102 	bfi	r1, r2, #0, #3
 800477e:	f36f 01c5 	bfc	r1, #3, #3
 8004782:	f363 118f 	bfi	r1, r3, #6, #10
 8004786:	4833      	ldr	r0, [pc, #204]	; (8004854 <hard_fault+0x130>)
 8004788:	f7fe ffee 	bl	8003768 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800478c:	2000      	movs	r0, #0
 800478e:	e7ec      	b.n	800476a <hard_fault+0x46>
 8004790:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <hard_fault+0x120>)
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <hard_fault+0x124>)
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	2201      	movs	r2, #1
 800479e:	f362 0102 	bfi	r1, r2, #0, #3
 80047a2:	f36f 01c5 	bfc	r1, #3, #3
 80047a6:	f363 118f 	bfi	r1, r3, #6, #10
 80047aa:	482b      	ldr	r0, [pc, #172]	; (8004858 <hard_fault+0x134>)
 80047ac:	f7fe ffdc 	bl	8003768 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80047b0:	4630      	mov	r0, r6
 80047b2:	e7da      	b.n	800476a <hard_fault+0x46>
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <hard_fault+0x120>)
 80047b6:	4a24      	ldr	r2, [pc, #144]	; (8004848 <hard_fault+0x124>)
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	2201      	movs	r2, #1
 80047c2:	f362 0102 	bfi	r1, r2, #0, #3
 80047c6:	f36f 01c5 	bfc	r1, #3, #3
 80047ca:	f363 118f 	bfi	r1, r3, #6, #10
 80047ce:	4823      	ldr	r0, [pc, #140]	; (800485c <hard_fault+0x138>)
 80047d0:	f7fe ffca 	bl	8003768 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80047d4:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 80047d6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80047da:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80047de:	429a      	cmp	r2, r3
 80047e0:	d00d      	beq.n	80047fe <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <hard_fault+0x12c>)
 80047e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047e8:	b9e3      	cbnz	r3, 8004824 <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
 80047ea:	4b19      	ldr	r3, [pc, #100]	; (8004850 <hard_fault+0x12c>)
 80047ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047f0:	b9f3      	cbnz	r3, 8004830 <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <hard_fault+0x12c>)
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	bb03      	cbnz	r3, 800483c <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80047fa:	4630      	mov	r0, r6
	return reason;
 80047fc:	e7b5      	b.n	800476a <hard_fault+0x46>
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <hard_fault+0x120>)
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <hard_fault+0x124>)
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	2101      	movs	r1, #1
 800480c:	f361 0202 	bfi	r2, r1, #0, #3
 8004810:	f36f 02c5 	bfc	r2, #3, #3
 8004814:	f363 128f 	bfi	r2, r3, #6, #10
 8004818:	6829      	ldr	r1, [r5, #0]
 800481a:	4811      	ldr	r0, [pc, #68]	; (8004860 <hard_fault+0x13c>)
 800481c:	f7fe ffce 	bl	80037bc <log_1>
			reason = esf->basic.r0;
 8004820:	6828      	ldr	r0, [r5, #0]
 8004822:	e7a2      	b.n	800476a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004824:	4622      	mov	r2, r4
 8004826:	2101      	movs	r1, #1
 8004828:	4628      	mov	r0, r5
 800482a:	f7ff fe99 	bl	8004560 <mem_manage_fault>
 800482e:	e79c      	b.n	800476a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
 8004830:	4622      	mov	r2, r4
 8004832:	2101      	movs	r1, #1
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff fdbb 	bl	80043b0 <bus_fault>
 800483a:	e796      	b.n	800476a <hard_fault+0x46>
			reason = usage_fault(esf);
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff fceb 	bl	8004218 <usage_fault>
 8004842:	e792      	b.n	800476a <hard_fault+0x46>
 8004844:	0800ef8c 	.word	0x0800ef8c
 8004848:	0800ef6c 	.word	0x0800ef6c
 800484c:	0800f908 	.word	0x0800f908
 8004850:	e000ed00 	.word	0xe000ed00
 8004854:	0800f920 	.word	0x0800f920
 8004858:	0800f944 	.word	0x0800f944
 800485c:	0800f954 	.word	0x0800f954
 8004860:	0800f974 	.word	0x0800f974

08004864 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8004864:	b508      	push	{r3, lr}
 8004866:	460a      	mov	r2, r1
 8004868:	480b      	ldr	r0, [pc, #44]	; (8004898 <reserved_exception+0x34>)
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <reserved_exception+0x38>)
 800486c:	1ac0      	subs	r0, r0, r3
 800486e:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	2101      	movs	r1, #1
 8004876:	f361 0302 	bfi	r3, r1, #0, #3
 800487a:	f36f 03c5 	bfc	r3, #3, #3
 800487e:	f360 138f 	bfi	r3, r0, #6, #10
 8004882:	2a0f      	cmp	r2, #15
 8004884:	dc05      	bgt.n	8004892 <reserved_exception+0x2e>
 8004886:	4906      	ldr	r1, [pc, #24]	; (80048a0 <reserved_exception+0x3c>)
 8004888:	3a10      	subs	r2, #16
 800488a:	4806      	ldr	r0, [pc, #24]	; (80048a4 <reserved_exception+0x40>)
 800488c:	f7fe ffc8 	bl	8003820 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8004890:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 8004892:	4905      	ldr	r1, [pc, #20]	; (80048a8 <reserved_exception+0x44>)
 8004894:	e7f8      	b.n	8004888 <reserved_exception+0x24>
 8004896:	bf00      	nop
 8004898:	0800ef8c 	.word	0x0800ef8c
 800489c:	0800ef6c 	.word	0x0800ef6c
 80048a0:	0800f990 	.word	0x0800f990
 80048a4:	0800f9c4 	.word	0x0800f9c4
 80048a8:	0800f9a8 	.word	0x0800f9a8

080048ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80048b0:	4b2f      	ldr	r3, [pc, #188]	; (8004970 <z_arm_fault+0xc4>)
 80048b2:	685d      	ldr	r5, [r3, #4]
 80048b4:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80048b8:	2300      	movs	r3, #0
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80048c2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80048c6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80048ca:	d12a      	bne.n	8004922 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80048cc:	f002 030c 	and.w	r3, r2, #12
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d010      	beq.n	80048f6 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80048d4:	f012 0f08 	tst.w	r2, #8
 80048d8:	d020      	beq.n	800491c <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
 80048da:	460c      	mov	r4, r1
	*nested_exc = false;
 80048dc:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 80048de:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80048e2:	4629      	mov	r1, r5
 80048e4:	4620      	mov	r0, r4
 80048e6:	f008 f958 	bl	800cb9a <fault_handle>
 80048ea:	4605      	mov	r5, r0
	if (recoverable) {
 80048ec:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80048f0:	b1d3      	cbz	r3, 8004928 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 80048f2:	b00a      	add	sp, #40	; 0x28
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <z_arm_fault+0xc8>)
 80048f8:	4a1f      	ldr	r2, [pc, #124]	; (8004978 <z_arm_fault+0xcc>)
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80048fe:	f04f 0100 	mov.w	r1, #0
 8004902:	2201      	movs	r2, #1
 8004904:	f362 0102 	bfi	r1, r2, #0, #3
 8004908:	f36f 01c5 	bfc	r1, #3, #3
 800490c:	f363 118f 	bfi	r1, r3, #6, #10
 8004910:	481a      	ldr	r0, [pc, #104]	; (800497c <z_arm_fault+0xd0>)
 8004912:	f7fe ff29 	bl	8003768 <log_0>
	*nested_exc = false;
 8004916:	2600      	movs	r6, #0
		return NULL;
 8004918:	4634      	mov	r4, r6
 800491a:	e7e0      	b.n	80048de <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800491c:	4604      	mov	r4, r0
			*nested_exc = true;
 800491e:	2601      	movs	r6, #1
 8004920:	e7dd      	b.n	80048de <z_arm_fault+0x32>
	*nested_exc = false;
 8004922:	2600      	movs	r6, #0
		return NULL;
 8004924:	4634      	mov	r4, r6
 8004926:	e7da      	b.n	80048de <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004928:	f10d 0c04 	add.w	ip, sp, #4
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	6861      	ldr	r1, [r4, #4]
 8004930:	68a2      	ldr	r2, [r4, #8]
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004938:	6920      	ldr	r0, [r4, #16]
 800493a:	6961      	ldr	r1, [r4, #20]
 800493c:	69a2      	ldr	r2, [r4, #24]
 800493e:	69e3      	ldr	r3, [r4, #28]
 8004940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8004944:	b146      	cbz	r6, 8004958 <z_arm_fault+0xac>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8004946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800494a:	b95a      	cbnz	r2, 8004964 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800494c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004950:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8004954:	9308      	str	r3, [sp, #32]
 8004956:	e005      	b.n	8004964 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004958:	9b08      	ldr	r3, [sp, #32]
 800495a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8004964:	a901      	add	r1, sp, #4
 8004966:	4628      	mov	r0, r5
 8004968:	f008 f8f7 	bl	800cb5a <z_arm_fatal_error>
 800496c:	e7c1      	b.n	80048f2 <z_arm_fault+0x46>
 800496e:	bf00      	nop
 8004970:	e000ed00 	.word	0xe000ed00
 8004974:	0800ef8c 	.word	0x0800ef8c
 8004978:	0800ef6c 	.word	0x0800ef6c
 800497c:	0800f9d8 	.word	0x0800f9d8

08004980 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004980:	4a02      	ldr	r2, [pc, #8]	; (800498c <z_arm_fault_init+0xc>)
 8004982:	6953      	ldr	r3, [r2, #20]
 8004984:	f043 0310 	orr.w	r3, r3, #16
 8004988:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004990:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004994:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8004998:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800499a:	4672      	mov	r2, lr
	bl z_arm_fault
 800499c:	f7ff ff86 	bl	80048ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80049a0:	bd01      	pop	{r0, pc}
 80049a2:	bf00      	nop

080049a4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80049a4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80049a6:	e006      	b.n	80049b6 <z_arm_interrupt_init+0x12>
 80049a8:	f002 010f 	and.w	r1, r2, #15
 80049ac:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <z_arm_interrupt_init+0x30>)
 80049ae:	440b      	add	r3, r1
 80049b0:	2110      	movs	r1, #16
 80049b2:	7619      	strb	r1, [r3, #24]
 80049b4:	3201      	adds	r2, #1
 80049b6:	2a54      	cmp	r2, #84	; 0x54
 80049b8:	dc0a      	bgt.n	80049d0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 80049ba:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dbf3      	blt.n	80049a8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80049c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80049c8:	2110      	movs	r1, #16
 80049ca:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80049ce:	e7f1      	b.n	80049b4 <z_arm_interrupt_init+0x10>
	}
}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ecfc 	.word	0xe000ecfc

080049d8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80049d8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80049da:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80049de:	4808      	ldr	r0, [pc, #32]	; (8004a00 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80049e0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80049e4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80049e6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80049ea:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80049ee:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80049f0:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80049f2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 80049f6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 80049fa:	f7ff fb17 	bl	800402c <z_arm_prep_c>
 80049fe:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004a00:	20003040 	.word	0x20003040

08004a04 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8004a04:	b508      	push	{r3, lr}
	if (_current == thread) {
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <z_impl_k_thread_abort+0x24>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4283      	cmp	r3, r0
 8004a0c:	d002      	beq.n	8004a14 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004a0e:	f005 faa7 	bl	8009f60 <z_thread_abort>
}
 8004a12:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a14:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f8      	beq.n	8004a0e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004a1c:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <z_impl_k_thread_abort+0x28>)
 8004a1e:	6853      	ldr	r3, [r2, #4]
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6053      	str	r3, [r2, #4]
 8004a26:	e7f2      	b.n	8004a0e <z_impl_k_thread_abort+0xa>
 8004a28:	20000ecc 	.word	0x20000ecc
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8004a30:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <z_arm_configure_static_mpu_regions+0x10>)
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <z_arm_configure_static_mpu_regions+0x14>)
 8004a36:	2101      	movs	r1, #1
 8004a38:	4803      	ldr	r0, [pc, #12]	; (8004a48 <z_arm_configure_static_mpu_regions+0x18>)
 8004a3a:	f008 f903 	bl	800cc44 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8004a3e:	bd08      	pop	{r3, pc}
 8004a40:	20028000 	.word	0x20028000
 8004a44:	20000000 	.word	0x20000000
 8004a48:	0800fa08 	.word	0x0800fa08

08004a4c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004a4c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004a4e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004a50:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004a52:	4805      	ldr	r0, [pc, #20]	; (8004a68 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004a54:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8004a56:	2320      	movs	r3, #32
 8004a58:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <z_arm_configure_dynamic_mpu_regions+0x20>)
 8004a5c:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f008 f8f4 	bl	800cc4c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8004a64:	bd08      	pop	{r3, pc}
 8004a66:	bf00      	nop
 8004a68:	20000a08 	.word	0x20000a08
 8004a6c:	150b0000 	.word	0x150b0000

08004a70 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8004a70:	4a08      	ldr	r2, [pc, #32]	; (8004a94 <region_init+0x24>)
 8004a72:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004a76:	680b      	ldr	r3, [r1, #0]
 8004a78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8004a7c:	4303      	orrs	r3, r0
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004a82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004a86:	688b      	ldr	r3, [r1, #8]
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8004a9c:	2807      	cmp	r0, #7
 8004a9e:	d803      	bhi.n	8004aa8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8004aa0:	f7ff ffe6 	bl	8004a70 <region_init>

	return index;
 8004aa4:	4620      	mov	r0, r4
}
 8004aa6:	bd10      	pop	{r4, pc}
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <region_allocate_and_init+0x38>)
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <region_allocate_and_init+0x3c>)
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	f361 0202 	bfi	r2, r1, #0, #3
 8004aba:	f36f 02c5 	bfc	r2, #3, #3
 8004abe:	f363 128f 	bfi	r2, r3, #6, #10
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <region_allocate_and_init+0x40>)
 8004ac6:	f7fe fe79 	bl	80037bc <log_1>
		return -EINVAL;
 8004aca:	f06f 0015 	mvn.w	r0, #21
 8004ace:	e7ea      	b.n	8004aa6 <region_allocate_and_init+0xe>
 8004ad0:	0800ef84 	.word	0x0800ef84
 8004ad4:	0800ef6c 	.word	0x0800ef6c
 8004ad8:	0800fa14 	.word	0x0800fa14

08004adc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	460f      	mov	r7, r1
 8004ae4:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
 8004ae6:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8004ae8:	2400      	movs	r4, #0
 8004aea:	e009      	b.n	8004b00 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004aec:	4629      	mov	r1, r5
 8004aee:	b2f0      	uxtb	r0, r6
 8004af0:	f008 f889 	bl	800cc06 <mpu_configure_region>
 8004af4:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8004af6:	f110 0f16 	cmn.w	r0, #22
 8004afa:	d025      	beq.n	8004b48 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004afc:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004afe:	3401      	adds	r4, #1
 8004b00:	42bc      	cmp	r4, r7
 8004b02:	da21      	bge.n	8004b48 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
 8004b04:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004b08:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004b0c:	686a      	ldr	r2, [r5, #4]
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	d0f5      	beq.n	8004afe <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 8004b12:	f1ba 0f00 	cmp.w	sl, #0
 8004b16:	d0e9      	beq.n	8004aec <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f008 f863 	bl	800cbe4 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1e4      	bne.n	8004aec <mpu_configure_regions+0x10>
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <mpu_configure_regions+0x74>)
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <mpu_configure_regions+0x78>)
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	2101      	movs	r1, #1
 8004b30:	f361 0202 	bfi	r2, r1, #0, #3
 8004b34:	f36f 02c5 	bfc	r2, #3, #3
 8004b38:	f363 128f 	bfi	r2, r3, #6, #10
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4806      	ldr	r0, [pc, #24]	; (8004b58 <mpu_configure_regions+0x7c>)
 8004b40:	f7fe fe3c 	bl	80037bc <log_1>
			return -EINVAL;
 8004b44:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8004b48:	4630      	mov	r0, r6
 8004b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b4e:	bf00      	nop
 8004b50:	0800ef84 	.word	0x0800ef84
 8004b54:	0800ef6c 	.word	0x0800ef6c
 8004b58:	0800fa3c 	.word	0x0800fa3c

08004b5c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8004b5c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8004b5e:	4c03      	ldr	r4, [pc, #12]	; (8004b6c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004b60:	2301      	movs	r3, #1
 8004b62:	7822      	ldrb	r2, [r4, #0]
 8004b64:	f7ff ffba 	bl	8004adc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004b68:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	20000f2b 	.word	0x20000f2b

08004b70 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8004b70:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004b72:	2300      	movs	r3, #0
 8004b74:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <mpu_configure_dynamic_mpu_regions+0x2c>)
 8004b76:	7812      	ldrb	r2, [r2, #0]
 8004b78:	f7ff ffb0 	bl	8004adc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004b7c:	f110 0f16 	cmn.w	r0, #22
 8004b80:	d00a      	beq.n	8004b98 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8004b82:	4603      	mov	r3, r0
 8004b84:	e006      	b.n	8004b94 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004b86:	4a06      	ldr	r2, [pc, #24]	; (8004ba0 <mpu_configure_dynamic_mpu_regions+0x30>)
 8004b88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004b92:	3301      	adds	r3, #1
 8004b94:	2b07      	cmp	r3, #7
 8004b96:	ddf6      	ble.n	8004b86 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8004b98:	bd08      	pop	{r3, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000f2b 	.word	0x20000f2b
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <arm_core_mpu_enable+0x14>)
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004bb0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004bbc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004bc0:	4b02      	ldr	r3, [pc, #8]	; (8004bcc <arm_core_mpu_disable+0x10>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8004bd0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <z_arm_mpu_init+0x3c>)
 8004bd4:	681d      	ldr	r5, [r3, #0]
 8004bd6:	2d08      	cmp	r5, #8
 8004bd8:	d815      	bhi.n	8004c06 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004bda:	f7ff ffef 	bl	8004bbc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004bde:	2400      	movs	r4, #0
 8004be0:	e009      	b.n	8004bf6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <z_arm_mpu_init+0x3c>)
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004bea:	0093      	lsls	r3, r2, #2
 8004bec:	4419      	add	r1, r3
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff ff3e 	bl	8004a70 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004bf4:	3401      	adds	r4, #1
 8004bf6:	42a5      	cmp	r5, r4
 8004bf8:	d8f3      	bhi.n	8004be2 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <z_arm_mpu_init+0x40>)
 8004bfc:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8004bfe:	f7ff ffd1 	bl	8004ba4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004c02:	2000      	movs	r0, #0
}
 8004c04:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8004c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c0a:	e7fb      	b.n	8004c04 <z_arm_mpu_init+0x34>
 8004c0c:	0800fa78 	.word	0x0800fa78
 8004c10:	20000f2b 	.word	0x20000f2b

08004c14 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004c14:	4b01      	ldr	r3, [pc, #4]	; (8004c1c <__stdout_hook_install+0x8>)
 8004c16:	6018      	str	r0, [r3, #0]
}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000001c 	.word	0x2000001c

08004c20 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4606      	mov	r6, r0
 8004c24:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8004c26:	2400      	movs	r4, #0
 8004c28:	e000      	b.n	8004c2c <z_impl_zephyr_read_stdin+0xc>
 8004c2a:	3401      	adds	r4, #1
 8004c2c:	42ac      	cmp	r4, r5
 8004c2e:	da08      	bge.n	8004c42 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <z_impl_zephyr_read_stdin+0x28>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4798      	blx	r3
 8004c36:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8004c38:	280a      	cmp	r0, #10
 8004c3a:	d001      	beq.n	8004c40 <z_impl_zephyr_read_stdin+0x20>
 8004c3c:	280d      	cmp	r0, #13
 8004c3e:	d1f4      	bne.n	8004c2a <z_impl_zephyr_read_stdin+0xa>
			i++;
 8004c40:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8004c42:	4620      	mov	r0, r4
 8004c44:	bd70      	pop	{r4, r5, r6, pc}
 8004c46:	bf00      	nop
 8004c48:	20000018 	.word	0x20000018

08004c4c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	4605      	mov	r5, r0
 8004c50:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8004c52:	2400      	movs	r4, #0
 8004c54:	e004      	b.n	8004c60 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <z_impl_zephyr_write_stdout+0x30>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	7830      	ldrb	r0, [r6, #0]
 8004c5c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8004c5e:	3401      	adds	r4, #1
 8004c60:	42bc      	cmp	r4, r7
 8004c62:	da08      	bge.n	8004c76 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8004c64:	192e      	adds	r6, r5, r4
 8004c66:	5d2b      	ldrb	r3, [r5, r4]
 8004c68:	2b0a      	cmp	r3, #10
 8004c6a:	d1f4      	bne.n	8004c56 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <z_impl_zephyr_write_stdout+0x30>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	200d      	movs	r0, #13
 8004c72:	4798      	blx	r3
 8004c74:	e7ef      	b.n	8004c56 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8004c76:	4638      	mov	r0, r7
 8004c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000001c 	.word	0x2000001c

08004c80 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8004c80:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8004c82:	2205      	movs	r2, #5
 8004c84:	4902      	ldr	r1, [pc, #8]	; (8004c90 <_exit+0x10>)
 8004c86:	2001      	movs	r0, #1
 8004c88:	f007 fff1 	bl	800cc6e <_write>
	while (1) {
 8004c8c:	e7fe      	b.n	8004c8c <_exit+0xc>
 8004c8e:	bf00      	nop
 8004c90:	0800fa60 	.word	0x0800fa60

08004c94 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8004c94:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <_sbrk+0x24>)
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <_sbrk+0x28>)
 8004c9c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8004ca4:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d202      	bcs.n	8004cb2 <_sbrk+0x1e>
		heap_sz += count;
 8004cac:	4b02      	ldr	r3, [pc, #8]	; (8004cb8 <_sbrk+0x24>)
 8004cae:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8004cb0:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8004cb6:	4770      	bx	lr
 8004cb8:	20000a14 	.word	0x20000a14
 8004cbc:	200041ca 	.word	0x200041ca

08004cc0 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8004cc6:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8004cc8:	e002      	b.n	8004cd0 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004cca:	2201      	movs	r2, #1
 8004ccc:	e00c      	b.n	8004ce8 <__stm32_exti_isr+0x28>
 8004cce:	3401      	adds	r4, #1
 8004cd0:	42ac      	cmp	r4, r5
 8004cd2:	da17      	bge.n	8004d04 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8004cd4:	2c1f      	cmp	r4, #31
 8004cd6:	dcfa      	bgt.n	8004cce <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004cd8:	2301      	movs	r3, #1
 8004cda:	40a3      	lsls	r3, r4
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <__stm32_exti_isr+0x48>)
 8004cde:	6952      	ldr	r2, [r2, #20]
 8004ce0:	ea33 0202 	bics.w	r2, r3, r2
 8004ce4:	d0f1      	beq.n	8004cca <__stm32_exti_isr+0xa>
 8004ce6:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	d0f0      	beq.n	8004cce <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004cec:	4a06      	ldr	r2, [pc, #24]	; (8004d08 <__stm32_exti_isr+0x48>)
 8004cee:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8004cf0:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ea      	beq.n	8004cce <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004cf8:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8004cfc:	6851      	ldr	r1, [r2, #4]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4798      	blx	r3
 8004d02:	e7e4      	b.n	8004cce <__stm32_exti_isr+0xe>
		}
	}
}
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	bf00      	nop
 8004d08:	40010400 	.word	0x40010400

08004d0c <stm32_exti_enable>:
{
 8004d0c:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004d12:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <stm32_exti_enable+0x18>)
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004d1a:	4b03      	ldr	r3, [pc, #12]	; (8004d28 <stm32_exti_enable+0x1c>)
 8004d1c:	5618      	ldrsb	r0, [r3, r0]
 8004d1e:	f7ff f95d 	bl	8003fdc <arch_irq_enable>
}
 8004d22:	bd08      	pop	{r3, pc}
 8004d24:	40010400 	.word	0x40010400
 8004d28:	0800fab8 	.word	0x0800fab8

08004d2c <stm32_exti_disable>:
	if (line < 32) {
 8004d2c:	281f      	cmp	r0, #31
 8004d2e:	dc06      	bgt.n	8004d3e <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8004d30:	2301      	movs	r3, #1
 8004d32:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004d34:	4a02      	ldr	r2, [pc, #8]	; (8004d40 <stm32_exti_disable+0x14>)
 8004d36:	6810      	ldr	r0, [r2, #0]
 8004d38:	ea20 0003 	bic.w	r0, r0, r3
 8004d3c:	6010      	str	r0, [r2, #0]
}
 8004d3e:	4770      	bx	lr
 8004d40:	40010400 	.word	0x40010400

08004d44 <stm32_exti_trigger>:
	switch (trigger) {
 8004d44:	2903      	cmp	r1, #3
 8004d46:	d832      	bhi.n	8004dae <stm32_exti_trigger+0x6a>
 8004d48:	e8df f001 	tbb	[pc, r1]
 8004d4c:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8004d50:	2301      	movs	r3, #1
 8004d52:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004d56:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <stm32_exti_trigger+0x6c>)
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	ea22 0200 	bic.w	r2, r2, r0
 8004d5e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	ea22 0000 	bic.w	r0, r2, r0
 8004d66:	60d8      	str	r0, [r3, #12]
}
 8004d68:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <stm32_exti_trigger+0x6c>)
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4302      	orrs	r2, r0
 8004d76:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	ea22 0000 	bic.w	r0, r2, r0
 8004d7e:	60d8      	str	r0, [r3, #12]
}
 8004d80:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8004d82:	2301      	movs	r3, #1
 8004d84:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <stm32_exti_trigger+0x6c>)
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	4302      	orrs	r2, r0
 8004d8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	ea22 0000 	bic.w	r0, r2, r0
 8004d96:	6098      	str	r0, [r3, #8]
}
 8004d98:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <stm32_exti_trigger+0x6c>)
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	4302      	orrs	r2, r0
 8004da6:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4310      	orrs	r0, r2
 8004dac:	60d8      	str	r0, [r3, #12]
}
 8004dae:	4770      	bx	lr
 8004db0:	40010400 	.word	0x40010400

08004db4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <stm32_exti_set_callback+0x20>)
 8004db6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004dba:	b93b      	cbnz	r3, 8004dcc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <stm32_exti_set_callback+0x20>)
 8004dbe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8004dc2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004dc6:	6042      	str	r2, [r0, #4]

	return 0;
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4770      	bx	lr
		return -EBUSY;
 8004dcc:	f06f 000f 	mvn.w	r0, #15
}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000a18 	.word	0x20000a18

08004dd8 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <stm32_exti_unset_callback+0x10>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8004de0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004de4:	605a      	str	r2, [r3, #4]
}
 8004de6:	4770      	bx	lr
 8004de8:	20000a18 	.word	0x20000a18

08004dec <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8004dec:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004dee:	680b      	ldr	r3, [r1, #0]
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d848      	bhi.n	8004e86 <stm32_clock_control_on+0x9a>
 8004df4:	e8df f003 	tbb	[pc, r3]
 8004df8:	3c261004 	.word	0x3c261004
 8004dfc:	4731      	.short	0x4731
 8004dfe:	1b          	.byte	0x1b
 8004dff:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8004e00:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004e02:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e04:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004e06:	4319      	orrs	r1, r3
 8004e08:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004e0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004e10:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004e12:	2000      	movs	r0, #0
}
 8004e14:	b006      	add	sp, #24
 8004e16:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8004e18:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e1c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004e1e:	4319      	orrs	r1, r3
 8004e20:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e24:	4013      	ands	r3, r2
 8004e26:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004e28:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004e2a:	2000      	movs	r0, #0
}
 8004e2c:	e7f2      	b.n	8004e14 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004e2e:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e32:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004e34:	4319      	orrs	r1, r3
 8004e36:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004e38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004e3e:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8004e40:	2000      	movs	r0, #0
}
 8004e42:	e7e7      	b.n	8004e14 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004e44:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e48:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004e4a:	4319      	orrs	r1, r3
 8004e4c:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004e4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e50:	4013      	ands	r3, r2
 8004e52:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004e54:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8004e56:	2000      	movs	r0, #0
}
 8004e58:	e7dc      	b.n	8004e14 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8004e5a:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004e5c:	4a0b      	ldr	r2, [pc, #44]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e5e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004e60:	4319      	orrs	r1, r3
 8004e62:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004e64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e66:	4013      	ands	r3, r2
 8004e68:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004e6a:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8004e6c:	2000      	movs	r0, #0
}
 8004e6e:	e7d1      	b.n	8004e14 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004e70:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004e72:	4a06      	ldr	r2, [pc, #24]	; (8004e8c <stm32_clock_control_on+0xa0>)
 8004e74:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004e76:	4319      	orrs	r1, r3
 8004e78:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004e7a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004e80:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8004e82:	2000      	movs	r0, #0
}
 8004e84:	e7c6      	b.n	8004e14 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8004e86:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004e8a:	e7c3      	b.n	8004e14 <stm32_clock_control_on+0x28>
 8004e8c:	40021000 	.word	0x40021000

08004e90 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d83a      	bhi.n	8004f0c <stm32_clock_control_off+0x7c>
 8004e96:	e8df f003 	tbb	[pc, r3]
 8004e9a:	0c04      	.short	0x0c04
 8004e9c:	39293121 	.word	0x39293121
 8004ea0:	14          	.byte	0x14
 8004ea1:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8004ea2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004ea6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004ea8:	ea23 0301 	bic.w	r3, r3, r1
 8004eac:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004eae:	2000      	movs	r0, #0
}
 8004eb0:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 8004eb2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004eb6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004eb8:	ea23 0301 	bic.w	r3, r3, r1
 8004ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 8004ebe:	2000      	movs	r0, #0
}
 8004ec0:	4770      	bx	lr
{
 8004ec2:	b082      	sub	sp, #8
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004ec4:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004ec6:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004ec8:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004eca:	4319      	orrs	r1, r3
 8004ecc:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004ece:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004ed4:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004ed6:	2000      	movs	r0, #0
}
 8004ed8:	b002      	add	sp, #8
 8004eda:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8004edc:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004ede:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004ee0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ee2:	ea23 0301 	bic.w	r3, r3, r1
 8004ee6:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8004ee8:	2000      	movs	r0, #0
}
 8004eea:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 8004eec:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004ef0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004ef2:	ea23 0301 	bic.w	r3, r3, r1
 8004ef6:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8004ef8:	2000      	movs	r0, #0
}
 8004efa:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8004efc:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <stm32_clock_control_off+0x84>)
 8004f00:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004f02:	ea23 0301 	bic.w	r3, r3, r1
 8004f06:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8004f08:	2000      	movs	r0, #0
}
 8004f0a:	4770      	bx	lr
	switch (pclken->bus) {
 8004f0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000

08004f18 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <stm32_clock_control_get_subsys_rate+0x3c>)
 8004f20:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8004f22:	2101      	movs	r1, #1
 8004f24:	4630      	mov	r0, r6
 8004f26:	f007 ff30 	bl	800cd8a <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	2b06      	cmp	r3, #6
 8004f2e:	d80e      	bhi.n	8004f4e <stm32_clock_control_get_subsys_rate+0x36>
 8004f30:	e8df f003 	tbb	[pc, r3]
 8004f34:	0a070404 	.word	0x0a070404
 8004f38:	0d07      	.short	0x0d07
 8004f3a:	04          	.byte	0x04
 8004f3b:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8004f3c:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004f3e:	2000      	movs	r0, #0
}
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8004f42:	6028      	str	r0, [r5, #0]
	return 0;
 8004f44:	2000      	movs	r0, #0
		break;
 8004f46:	e7fb      	b.n	8004f40 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004f48:	6028      	str	r0, [r5, #0]
	return 0;
 8004f4a:	2000      	movs	r0, #0
		break;
 8004f4c:	e7f8      	b.n	8004f40 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8004f4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004f52:	e7f5      	b.n	8004f40 <stm32_clock_control_get_subsys_rate+0x28>
 8004f54:	200000c0 	.word	0x200000c0

08004f58 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <stm32_clock_switch_to_hsi+0x44>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f60:	d109      	bne.n	8004f76 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <stm32_clock_switch_to_hsi+0x44>)
 8004f64:	6813      	ldr	r3, [r2, #0]
 8004f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <stm32_clock_switch_to_hsi+0x44>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004f74:	d0fa      	beq.n	8004f6c <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <stm32_clock_switch_to_hsi+0x44>)
 8004f78:	6893      	ldr	r3, [r2, #8]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f84:	6893      	ldr	r3, [r2, #8]
 8004f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f8a:	4318      	orrs	r0, r3
 8004f8c:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f8e:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <stm32_clock_switch_to_hsi+0x44>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d1f9      	bne.n	8004f8e <stm32_clock_switch_to_hsi+0x36>
	}
}
 8004f9a:	4770      	bx	lr
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8004fa4:	a803      	add	r0, sp, #12
 8004fa6:	f007 feeb 	bl	800cd80 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8004faa:	f000 f823 	bl	8004ff4 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8004fae:	4668      	mov	r0, sp
 8004fb0:	f007 feee 	bl	800cd90 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7ff ffcf 	bl	8004f58 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004fba:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <stm32_clock_control_init+0x50>)
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8004fc4:	68e3      	ldr	r3, [r4, #12]
 8004fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fce:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8004fd0:	a903      	add	r1, sp, #12
 8004fd2:	4668      	mov	r0, sp
 8004fd4:	f003 fc08 	bl	80087e8 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8004fe8:	2000      	movs	r0, #0
 8004fea:	b006      	add	sp, #24
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8004ff4:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <config_enable_default_clocks+0x1c>)
 8004ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ffa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005006:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8005008:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 800500a:	b002      	add	sp, #8
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8005014:	b510      	push	{r4, lr}
 8005016:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8005018:	280a      	cmp	r0, #10
 800501a:	d007      	beq.n	800502c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <console_out+0x28>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8005022:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4798      	blx	r3

	return c;
}
 8005028:	4620      	mov	r0, r4
 800502a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 800502c:	4b03      	ldr	r3, [pc, #12]	; (800503c <console_out+0x28>)
 800502e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8005030:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	210d      	movs	r1, #13
 8005036:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8005038:	e7f0      	b.n	800501c <console_out+0x8>
 800503a:	bf00      	nop
 800503c:	20000a98 	.word	0x20000a98

08005040 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8005040:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8005042:	4c04      	ldr	r4, [pc, #16]	; (8005054 <uart_console_hook_install+0x14>)
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff fde5 	bl	8004c14 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800504a:	4620      	mov	r0, r4
 800504c:	f7fd fb82 	bl	8002754 <__printk_hook_install>
}
 8005050:	bd10      	pop	{r4, pc}
 8005052:	bf00      	nop
 8005054:	08005015 	.word	0x08005015

08005058 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8005058:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800505a:	4809      	ldr	r0, [pc, #36]	; (8005080 <uart_console_init+0x28>)
 800505c:	4b09      	ldr	r3, [pc, #36]	; (8005084 <uart_console_init+0x2c>)
 800505e:	6018      	str	r0, [r3, #0]
 8005060:	f008 fdaf 	bl	800dbc2 <z_device_ready>
 8005064:	b128      	cbz	r0, 8005072 <uart_console_init+0x1a>
 8005066:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 8005068:	b933      	cbnz	r3, 8005078 <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 800506a:	f7ff ffe9 	bl	8005040 <uart_console_hook_install>

	return 0;
 800506e:	2000      	movs	r0, #0
}
 8005070:	bd08      	pop	{r3, pc}
 8005072:	f06f 0312 	mvn.w	r3, #18
 8005076:	e7f7      	b.n	8005068 <uart_console_init+0x10>
		return -ENODEV;
 8005078:	f06f 0012 	mvn.w	r0, #18
 800507c:	e7f8      	b.n	8005070 <uart_console_init+0x18>
 800507e:	bf00      	nop
 8005080:	0800ec2c 	.word	0x0800ec2c
 8005084:	20000a98 	.word	0x20000a98

08005088 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005088:	424a      	negs	r2, r1
 800508a:	f001 0303 	and.w	r3, r1, #3
 800508e:	f002 0203 	and.w	r2, r2, #3
 8005092:	bf58      	it	pl
 8005094:	4253      	negpl	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	009a      	lsls	r2, r3, #2
 800509a:	230f      	movs	r3, #15
 800509c:	4093      	lsls	r3, r2
 800509e:	460a      	mov	r2, r1
 80050a0:	2900      	cmp	r1, #0
 80050a2:	db19      	blt.n	80050d8 <gpio_stm32_set_exti_source+0x50>
 80050a4:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80050a8:	fa5f fc83 	uxtb.w	ip, r3
 80050ac:	f10c 0102 	add.w	r1, ip, #2
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <gpio_stm32_set_exti_source+0x58>)
 80050b2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80050b6:	0c1a      	lsrs	r2, r3, #16
 80050b8:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80050c0:	b162      	cbz	r2, 80050dc <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 80050c2:	fab2 f282 	clz	r2, r2
 80050c6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ca:	431a      	orrs	r2, r3
 80050cc:	f10c 0c02 	add.w	ip, ip, #2
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <gpio_stm32_set_exti_source+0x58>)
 80050d2:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 80050d6:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80050d8:	1cca      	adds	r2, r1, #3
 80050da:	e7e3      	b.n	80050a4 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 80050dc:	2220      	movs	r2, #32
 80050de:	e7f2      	b.n	80050c6 <gpio_stm32_set_exti_source+0x3e>
 80050e0:	40010000 	.word	0x40010000

080050e4 <gpio_stm32_get_exti_source>:
 80050e4:	4242      	negs	r2, r0
 80050e6:	f000 0303 	and.w	r3, r0, #3
 80050ea:	f002 0203 	and.w	r2, r2, #3
 80050ee:	bf58      	it	pl
 80050f0:	4253      	negpl	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	230f      	movs	r3, #15
 80050f8:	4093      	lsls	r3, r2
 80050fa:	4602      	mov	r2, r0
 80050fc:	2800      	cmp	r0, #0
 80050fe:	db10      	blt.n	8005122 <gpio_stm32_get_exti_source+0x3e>
 8005100:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8005104:	b2c3      	uxtb	r3, r0
 8005106:	3302      	adds	r3, #2
 8005108:	4a08      	ldr	r2, [pc, #32]	; (800512c <gpio_stm32_get_exti_source+0x48>)
 800510a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800510e:	0c03      	lsrs	r3, r0, #16
 8005110:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005118:	b12b      	cbz	r3, 8005126 <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 800511a:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 800511e:	40d8      	lsrs	r0, r3
 8005120:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005122:	1cc2      	adds	r2, r0, #3
 8005124:	e7ec      	b.n	8005100 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8005126:	2320      	movs	r3, #32
 8005128:	e7f9      	b.n	800511e <gpio_stm32_get_exti_source+0x3a>
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000

08005130 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	4606      	mov	r6, r0
 8005136:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <gpio_stm32_enable_int+0x40>)
 800513a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800513e:	ab02      	add	r3, sp, #8
 8005140:	e903 0003 	stmdb	r3, {r0, r1}
 8005144:	480b      	ldr	r0, [pc, #44]	; (8005174 <gpio_stm32_enable_int+0x44>)
 8005146:	f008 fd3c 	bl	800dbc2 <z_device_ready>
 800514a:	b148      	cbz	r0, 8005160 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 800514c:	4809      	ldr	r0, [pc, #36]	; (8005174 <gpio_stm32_enable_int+0x44>)
 800514e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4669      	mov	r1, sp
 8005154:	4798      	blx	r3
 8005156:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8005158:	b12c      	cbz	r4, 8005166 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 800515a:	4620      	mov	r0, r4
 800515c:	b002      	add	sp, #8
 800515e:	bd70      	pop	{r4, r5, r6, pc}
 8005160:	f06f 0412 	mvn.w	r4, #18
 8005164:	e7f8      	b.n	8005158 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8005166:	4629      	mov	r1, r5
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff ff8d 	bl	8005088 <gpio_stm32_set_exti_source>
	return 0;
 800516e:	e7f4      	b.n	800515a <gpio_stm32_enable_int+0x2a>
 8005170:	0800f060 	.word	0x0800f060
 8005174:	0800eb6c 	.word	0x0800eb6c

08005178 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	460c      	mov	r4, r1
 800517c:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 800517e:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8005180:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8005182:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005186:	d01f      	beq.n	80051c8 <gpio_stm32_pin_interrupt_configure+0x50>
 8005188:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 800518a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800518e:	d034      	beq.n	80051fa <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8005190:	491d      	ldr	r1, [pc, #116]	; (8005208 <gpio_stm32_pin_interrupt_configure+0x90>)
 8005192:	4620      	mov	r0, r4
 8005194:	f7ff fe0e 	bl	8004db4 <stm32_exti_set_callback>
 8005198:	4606      	mov	r6, r0
 800519a:	bb88      	cbnz	r0, 8005200 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800519c:	4621      	mov	r1, r4
 800519e:	68b8      	ldr	r0, [r7, #8]
 80051a0:	f7ff ffc6 	bl	8005130 <gpio_stm32_enable_int>

	switch (trig) {
 80051a4:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 80051a8:	d023      	beq.n	80051f2 <gpio_stm32_pin_interrupt_configure+0x7a>
 80051aa:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 80051ae:	d022      	beq.n	80051f6 <gpio_stm32_pin_interrupt_configure+0x7e>
 80051b0:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 80051b4:	d01b      	beq.n	80051ee <gpio_stm32_pin_interrupt_configure+0x76>
 80051b6:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff fdc3 	bl	8004d44 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fda4 	bl	8004d0c <stm32_exti_enable>

exit:
	return err;
}
 80051c4:	4630      	mov	r0, r6
 80051c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80051c8:	4620      	mov	r0, r4
 80051ca:	f7ff ff8b 	bl	80050e4 <gpio_stm32_get_exti_source>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4298      	cmp	r0, r3
 80051d2:	d001      	beq.n	80051d8 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 80051d4:	2600      	movs	r6, #0
		goto exit;
 80051d6:	e7f5      	b.n	80051c4 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fda7 	bl	8004d2c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80051de:	4620      	mov	r0, r4
 80051e0:	f7ff fdfa 	bl	8004dd8 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80051e4:	2100      	movs	r1, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7ff fdac 	bl	8004d44 <stm32_exti_trigger>
 80051ec:	e7f2      	b.n	80051d4 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 80051ee:	2102      	movs	r1, #2
 80051f0:	e7e2      	b.n	80051b8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 80051f2:	2101      	movs	r1, #1
 80051f4:	e7e0      	b.n	80051b8 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 80051f6:	2103      	movs	r1, #3
 80051f8:	e7de      	b.n	80051b8 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 80051fa:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80051fe:	e7e1      	b.n	80051c4 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8005200:	f06f 060f 	mvn.w	r6, #15
	return err;
 8005204:	e7de      	b.n	80051c4 <gpio_stm32_pin_interrupt_configure+0x4c>
 8005206:	bf00      	nop
 8005208:	0800cda1 	.word	0x0800cda1

0800520c <gpio_stm32_clock_request>:
{
 800520c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800520e:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8005210:	b169      	cbz	r1, 800522e <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8005212:	340c      	adds	r4, #12
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <gpio_stm32_clock_request+0x40>)
 8005216:	f008 fcd4 	bl	800dbc2 <z_device_ready>
 800521a:	b128      	cbz	r0, 8005228 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 800521c:	480b      	ldr	r0, [pc, #44]	; (800524c <gpio_stm32_clock_request+0x40>)
 800521e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4621      	mov	r1, r4
 8005224:	4798      	blx	r3
}
 8005226:	bd10      	pop	{r4, pc}
 8005228:	f06f 0012 	mvn.w	r0, #18
 800522c:	e7fb      	b.n	8005226 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 800522e:	340c      	adds	r4, #12
 8005230:	4806      	ldr	r0, [pc, #24]	; (800524c <gpio_stm32_clock_request+0x40>)
 8005232:	f008 fcc6 	bl	800dbc2 <z_device_ready>
 8005236:	b128      	cbz	r0, 8005244 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8005238:	4804      	ldr	r0, [pc, #16]	; (800524c <gpio_stm32_clock_request+0x40>)
 800523a:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4621      	mov	r1, r4
 8005240:	4798      	blx	r3
 8005242:	e7f0      	b.n	8005226 <gpio_stm32_clock_request+0x1a>
 8005244:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8005248:	e7ed      	b.n	8005226 <gpio_stm32_clock_request+0x1a>
 800524a:	bf00      	nop
 800524c:	0800eb6c 	.word	0x0800eb6c

08005250 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8005250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005254:	b088      	sub	sp, #32
 8005256:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
	const struct pwm_stm32_config *cfg = dev->config;
 800525a:	6847      	ldr	r7, [r0, #4]

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 800525c:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8005260:	f1ba 0f05 	cmp.w	sl, #5
 8005264:	d84f      	bhi.n	8005306 <pwm_stm32_pin_set+0xb6>
 8005266:	4614      	mov	r4, r2
 8005268:	461d      	mov	r5, r3
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 800526a:	4293      	cmp	r3, r2
 800526c:	d85e      	bhi.n	800532c <pwm_stm32_pin_set+0xdc>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 800526e:	f8d7 8000 	ldr.w	r8, [r7]
 8005272:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 8005276:	d003      	beq.n	8005280 <pwm_stm32_pin_set+0x30>
 8005278:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800527c:	f200 80e6 	bhi.w	800544c <pwm_stm32_pin_set+0x1fc>
	    (period_cycles > UINT16_MAX + 1)) {
		return -ENOTSUP;
	}

	channel = ch2ll[pwm - 1u];
 8005280:	4b74      	ldr	r3, [pc, #464]	; (8005454 <pwm_stm32_pin_set+0x204>)
 8005282:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]

	if (period_cycles == 0u) {
 8005286:	2c00      	cmp	r4, #0
 8005288:	d063      	beq.n	8005352 <pwm_stm32_pin_set+0x102>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800528a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800528e:	ea36 0303 	bics.w	r3, r6, r3
 8005292:	d066      	beq.n	8005362 <pwm_stm32_pin_set+0x112>
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, channel)) {
		LL_TIM_OC_InitTypeDef oc_init;

		LL_TIM_OC_StructInit(&oc_init);
 8005294:	4668      	mov	r0, sp
 8005296:	f008 fc00 	bl	800da9a <LL_TIM_OC_StructInit>

		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800529a:	2360      	movs	r3, #96	; 0x60
 800529c:	9300      	str	r3, [sp, #0]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800529e:	2301      	movs	r3, #1
 80052a0:	9301      	str	r3, [sp, #4]
		oc_init.CompareValue = pulse_cycles;
 80052a2:	9503      	str	r5, [sp, #12]
		oc_init.OCPolarity = get_polarity(flags);
 80052a4:	4648      	mov	r0, r9
 80052a6:	f007 ff0d 	bl	800d0c4 <get_polarity>
 80052aa:	9004      	str	r0, [sp, #16]

		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80052ac:	466a      	mov	r2, sp
 80052ae:	4631      	mov	r1, r6
 80052b0:	6838      	ldr	r0, [r7, #0]
 80052b2:	f008 fbfc 	bl	800daae <LL_TIM_OC_Init>
 80052b6:	4601      	mov	r1, r0
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f040 8091 	bne.w	80053e0 <pwm_stm32_pin_set+0x190>
			LOG_ERR("Could not initialize timer channel output");
			return -EIO;
		}

		LL_TIM_EnableARRPreload(cfg->timer);
 80052be:	683a      	ldr	r2, [r7, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80052c0:	6813      	ldr	r3, [r2, #0]
 80052c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c6:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 80052c8:	683b      	ldr	r3, [r7, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80052ca:	2e01      	cmp	r6, #1
 80052cc:	f000 809e 	beq.w	800540c <pwm_stm32_pin_set+0x1bc>
 80052d0:	2e04      	cmp	r6, #4
 80052d2:	f000 809a 	beq.w	800540a <pwm_stm32_pin_set+0x1ba>
 80052d6:	2e10      	cmp	r6, #16
 80052d8:	f000 80ae 	beq.w	8005438 <pwm_stm32_pin_set+0x1e8>
 80052dc:	2e40      	cmp	r6, #64	; 0x40
 80052de:	f000 80ad 	beq.w	800543c <pwm_stm32_pin_set+0x1ec>
 80052e2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80052e6:	f000 80ab 	beq.w	8005440 <pwm_stm32_pin_set+0x1f0>
 80052ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80052ee:	f000 80a9 	beq.w	8005444 <pwm_stm32_pin_set+0x1f4>
 80052f2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80052f6:	f000 80a7 	beq.w	8005448 <pwm_stm32_pin_set+0x1f8>
 80052fa:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80052fe:	f000 8082 	beq.w	8005406 <pwm_stm32_pin_set+0x1b6>
 8005302:	2108      	movs	r1, #8
 8005304:	e082      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 8005306:	4b54      	ldr	r3, [pc, #336]	; (8005458 <pwm_stm32_pin_set+0x208>)
 8005308:	4a54      	ldr	r2, [pc, #336]	; (800545c <pwm_stm32_pin_set+0x20c>)
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid channel (%d)", pwm);
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	2001      	movs	r0, #1
 8005314:	f360 0202 	bfi	r2, r0, #0, #3
 8005318:	f36f 02c5 	bfc	r2, #3, #3
 800531c:	f363 128f 	bfi	r2, r3, #6, #10
 8005320:	484f      	ldr	r0, [pc, #316]	; (8005460 <pwm_stm32_pin_set+0x210>)
 8005322:	f7fe fa4b 	bl	80037bc <log_1>
		return -EINVAL;
 8005326:	f06f 0015 	mvn.w	r0, #21
 800532a:	e082      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
 800532c:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <pwm_stm32_pin_set+0x208>)
 800532e:	4a4b      	ldr	r2, [pc, #300]	; (800545c <pwm_stm32_pin_set+0x20c>)
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid combination of pulse and period cycles");
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	2201      	movs	r2, #1
 800533a:	f362 0102 	bfi	r1, r2, #0, #3
 800533e:	f36f 01c5 	bfc	r1, #3, #3
 8005342:	f363 118f 	bfi	r1, r3, #6, #10
 8005346:	4847      	ldr	r0, [pc, #284]	; (8005464 <pwm_stm32_pin_set+0x214>)
 8005348:	f7fe fa0e 	bl	8003768 <log_0>
		return -EINVAL;
 800534c:	f06f 0015 	mvn.w	r0, #21
 8005350:	e06f      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
  CLEAR_BIT(TIMx->CCER, Channels);
 8005352:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005356:	ea23 0606 	bic.w	r6, r3, r6
 800535a:	f8c8 6020 	str.w	r6, [r8, #32]
		return 0;
 800535e:	2000      	movs	r0, #0
 8005360:	e067      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
 8005362:	4648      	mov	r0, r9
 8005364:	f007 feae 	bl	800d0c4 <get_polarity>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005368:	2e01      	cmp	r6, #1
 800536a:	d015      	beq.n	8005398 <pwm_stm32_pin_set+0x148>
 800536c:	2e04      	cmp	r6, #4
 800536e:	d02b      	beq.n	80053c8 <pwm_stm32_pin_set+0x178>
 8005370:	2e10      	cmp	r6, #16
 8005372:	d02b      	beq.n	80053cc <pwm_stm32_pin_set+0x17c>
 8005374:	2e40      	cmp	r6, #64	; 0x40
 8005376:	d02b      	beq.n	80053d0 <pwm_stm32_pin_set+0x180>
 8005378:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800537c:	d02a      	beq.n	80053d4 <pwm_stm32_pin_set+0x184>
 800537e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005382:	d029      	beq.n	80053d8 <pwm_stm32_pin_set+0x188>
 8005384:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8005388:	d028      	beq.n	80053dc <pwm_stm32_pin_set+0x18c>
 800538a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800538e:	d001      	beq.n	8005394 <pwm_stm32_pin_set+0x144>
 8005390:	2108      	movs	r1, #8
 8005392:	e002      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 8005394:	2107      	movs	r1, #7
 8005396:	e000      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 8005398:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800539a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800539e:	4a32      	ldr	r2, [pc, #200]	; (8005468 <pwm_stm32_pin_set+0x218>)
 80053a0:	5c51      	ldrb	r1, [r2, r1]
 80053a2:	2202      	movs	r2, #2
 80053a4:	408a      	lsls	r2, r1
 80053a6:	ea23 0302 	bic.w	r3, r3, r2
 80053aa:	4088      	lsls	r0, r1
 80053ac:	4303      	orrs	r3, r0
 80053ae:	f8c8 3020 	str.w	r3, [r8, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 80053b2:	4b2e      	ldr	r3, [pc, #184]	; (800546c <pwm_stm32_pin_set+0x21c>)
 80053b4:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80053b8:	4629      	mov	r1, r5
 80053ba:	6838      	ldr	r0, [r7, #0]
 80053bc:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80053c2:	62dc      	str	r4, [r3, #44]	; 0x2c
	}

	return 0;
 80053c4:	2000      	movs	r0, #0
}
 80053c6:	e034      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80053c8:	2101      	movs	r1, #1
 80053ca:	e7e6      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053cc:	2102      	movs	r1, #2
 80053ce:	e7e4      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053d0:	2103      	movs	r1, #3
 80053d2:	e7e2      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053d4:	2104      	movs	r1, #4
 80053d6:	e7e0      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053d8:	2105      	movs	r1, #5
 80053da:	e7de      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053dc:	2106      	movs	r1, #6
 80053de:	e7dc      	b.n	800539a <pwm_stm32_pin_set+0x14a>
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <pwm_stm32_pin_set+0x208>)
 80053e2:	4a1e      	ldr	r2, [pc, #120]	; (800545c <pwm_stm32_pin_set+0x20c>)
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not initialize timer channel output");
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	2201      	movs	r2, #1
 80053ee:	f362 0102 	bfi	r1, r2, #0, #3
 80053f2:	f36f 01c5 	bfc	r1, #3, #3
 80053f6:	f363 118f 	bfi	r1, r3, #6, #10
 80053fa:	481d      	ldr	r0, [pc, #116]	; (8005470 <pwm_stm32_pin_set+0x220>)
 80053fc:	f7fe f9b4 	bl	8003768 <log_0>
			return -EIO;
 8005400:	f06f 0004 	mvn.w	r0, #4
 8005404:	e015      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005406:	2107      	movs	r1, #7
 8005408:	e000      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 800540a:	2101      	movs	r1, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800540c:	3318      	adds	r3, #24
 800540e:	4a19      	ldr	r2, [pc, #100]	; (8005474 <pwm_stm32_pin_set+0x224>)
 8005410:	5c50      	ldrb	r0, [r2, r1]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8005412:	581a      	ldr	r2, [r3, r0]
 8005414:	4d18      	ldr	r5, [pc, #96]	; (8005478 <pwm_stm32_pin_set+0x228>)
 8005416:	5c6d      	ldrb	r5, [r5, r1]
 8005418:	2108      	movs	r1, #8
 800541a:	40a9      	lsls	r1, r5
 800541c:	430a      	orrs	r2, r1
 800541e:	501a      	str	r2, [r3, r0]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8005424:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8005426:	683a      	ldr	r2, [r7, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005428:	6953      	ldr	r3, [r2, #20]
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6153      	str	r3, [r2, #20]
	return 0;
 8005430:	2000      	movs	r0, #0
}
 8005432:	b008      	add	sp, #32
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8005438:	2102      	movs	r1, #2
 800543a:	e7e7      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 800543c:	2103      	movs	r1, #3
 800543e:	e7e5      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 8005440:	2104      	movs	r1, #4
 8005442:	e7e3      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 8005444:	2105      	movs	r1, #5
 8005446:	e7e1      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
 8005448:	2106      	movs	r1, #6
 800544a:	e7df      	b.n	800540c <pwm_stm32_pin_set+0x1bc>
		return -ENOTSUP;
 800544c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005450:	e7ef      	b.n	8005432 <pwm_stm32_pin_set+0x1e2>
 8005452:	bf00      	nop
 8005454:	0800fcc0 	.word	0x0800fcc0
 8005458:	0800ef9c 	.word	0x0800ef9c
 800545c:	0800ef6c 	.word	0x0800ef6c
 8005460:	0800fb94 	.word	0x0800fb94
 8005464:	0800fbac 	.word	0x0800fbac
 8005468:	0800fca8 	.word	0x0800fca8
 800546c:	0800fd00 	.word	0x0800fd00
 8005470:	0800fbdc 	.word	0x0800fbdc
 8005474:	0800fc9c 	.word	0x0800fc9c
 8005478:	0800fcb4 	.word	0x0800fcb4

0800547c <get_tim_clk>:
{
 800547c:	b530      	push	{r4, r5, lr}
 800547e:	b083      	sub	sp, #12
 8005480:	4604      	mov	r4, r0
 8005482:	460d      	mov	r5, r1
 8005484:	480c      	ldr	r0, [pc, #48]	; (80054b8 <get_tim_clk+0x3c>)
 8005486:	f008 fb9c 	bl	800dbc2 <z_device_ready>
 800548a:	b170      	cbz	r0, 80054aa <get_tim_clk+0x2e>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <get_tim_clk+0x3c>)
 800548e:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	b16b      	cbz	r3, 80054b0 <get_tim_clk+0x34>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8005494:	aa01      	add	r2, sp, #4
 8005496:	4621      	mov	r1, r4
 8005498:	4807      	ldr	r0, [pc, #28]	; (80054b8 <get_tim_clk+0x3c>)
 800549a:	4798      	blx	r3
	if (r < 0) {
 800549c:	2800      	cmp	r0, #0
 800549e:	db02      	blt.n	80054a6 <get_tim_clk+0x2a>
		*tim_clk = bus_clk;
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	602b      	str	r3, [r5, #0]
	return 0;
 80054a4:	2000      	movs	r0, #0
}
 80054a6:	b003      	add	sp, #12
 80054a8:	bd30      	pop	{r4, r5, pc}
 80054aa:	f06f 0012 	mvn.w	r0, #18
 80054ae:	e7f5      	b.n	800549c <get_tim_clk+0x20>
		return -ENOSYS;
 80054b0:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80054b4:	e7f2      	b.n	800549c <get_tim_clk+0x20>
 80054b6:	bf00      	nop
 80054b8:	0800eb6c 	.word	0x0800eb6c

080054bc <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(const struct device *dev)
{
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	b087      	sub	sp, #28
	struct pwm_stm32_data *data = dev->data;
 80054c0:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 80054c2:	6845      	ldr	r5, [r0, #4]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80054c4:	f105 0608 	add.w	r6, r5, #8
 80054c8:	4847      	ldr	r0, [pc, #284]	; (80055e8 <pwm_stm32_init+0x12c>)
 80054ca:	f008 fb7a 	bl	800dbc2 <z_device_ready>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d03d      	beq.n	800554e <pwm_stm32_init+0x92>
	const struct clock_control_driver_api *api =
 80054d2:	4845      	ldr	r0, [pc, #276]	; (80055e8 <pwm_stm32_init+0x12c>)
 80054d4:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4631      	mov	r1, r6
 80054da:	4798      	blx	r3
 80054dc:	4604      	mov	r4, r0
	if (r < 0) {
 80054de:	2c00      	cmp	r4, #0
 80054e0:	db38      	blt.n	8005554 <pwm_stm32_init+0x98>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
 80054e2:	4639      	mov	r1, r7
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff ffc9 	bl	800547c <get_tim_clk>
	if (r < 0) {
 80054ea:	1e04      	subs	r4, r0, #0
 80054ec:	db44      	blt.n	8005578 <pwm_stm32_init+0xbc>
		LOG_ERR("Could not obtain timer clock (%d)", r);
		return r;
	}

	/* configure pinmux */
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 80054ee:	682a      	ldr	r2, [r5, #0]
 80054f0:	6969      	ldr	r1, [r5, #20]
 80054f2:	6928      	ldr	r0, [r5, #16]
 80054f4:	f007 fb06 	bl	800cb04 <stm32_dt_pinctrl_configure>
				       cfg->pinctrl_len,
				       (uint32_t)cfg->timer);
	if (r < 0) {
 80054f8:	1e04      	subs	r4, r0, #0
 80054fa:	db4f      	blt.n	800559c <pwm_stm32_init+0xe0>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 80054fc:	a801      	add	r0, sp, #4
 80054fe:	f008 fac3 	bl	800da88 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 8005502:	686b      	ldr	r3, [r5, #4]
 8005504:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005508:	2300      	movs	r3, #0
 800550a:	9302      	str	r3, [sp, #8]
	init.Autoreload = 0u;
 800550c:	9303      	str	r3, [sp, #12]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800550e:	9304      	str	r3, [sp, #16]

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8005510:	a901      	add	r1, sp, #4
 8005512:	6828      	ldr	r0, [r5, #0]
 8005514:	f003 f850 	bl	80085b8 <LL_TIM_Init>
 8005518:	2800      	cmp	r0, #0
 800551a:	d151      	bne.n	80055c0 <pwm_stm32_init+0x104>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	4a33      	ldr	r2, [pc, #204]	; (80055ec <pwm_stm32_init+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <pwm_stm32_init+0x78>
 8005524:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <pwm_stm32_init+0x78>
 800552c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <pwm_stm32_init+0x80>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553a:	645a      	str	r2, [r3, #68]	; 0x44
		LL_TIM_EnableAllOutputs(cfg->timer);
	}
#endif

	LL_TIM_EnableCounter(cfg->timer);
 800553c:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6013      	str	r3, [r2, #0]

	return 0;
 8005546:	2400      	movs	r4, #0
}
 8005548:	4620      	mov	r0, r4
 800554a:	b007      	add	sp, #28
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	f06f 0412 	mvn.w	r4, #18
 8005552:	e7c4      	b.n	80054de <pwm_stm32_init+0x22>
 8005554:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <pwm_stm32_init+0x134>)
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <pwm_stm32_init+0x138>)
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not initialize clock (%d)", r);
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	2101      	movs	r1, #1
 8005562:	f361 0202 	bfi	r2, r1, #0, #3
 8005566:	f36f 02c5 	bfc	r2, #3, #3
 800556a:	f363 128f 	bfi	r2, r3, #6, #10
 800556e:	4621      	mov	r1, r4
 8005570:	4821      	ldr	r0, [pc, #132]	; (80055f8 <pwm_stm32_init+0x13c>)
 8005572:	f7fe f923 	bl	80037bc <log_1>
		return r;
 8005576:	e7e7      	b.n	8005548 <pwm_stm32_init+0x8c>
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <pwm_stm32_init+0x134>)
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <pwm_stm32_init+0x138>)
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	f361 0202 	bfi	r2, r1, #0, #3
 800558a:	f36f 02c5 	bfc	r2, #3, #3
 800558e:	f363 128f 	bfi	r2, r3, #6, #10
 8005592:	4621      	mov	r1, r4
 8005594:	4819      	ldr	r0, [pc, #100]	; (80055fc <pwm_stm32_init+0x140>)
 8005596:	f7fe f911 	bl	80037bc <log_1>
		return r;
 800559a:	e7d5      	b.n	8005548 <pwm_stm32_init+0x8c>
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <pwm_stm32_init+0x134>)
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <pwm_stm32_init+0x138>)
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	2101      	movs	r1, #1
 80055aa:	f361 0202 	bfi	r2, r1, #0, #3
 80055ae:	f36f 02c5 	bfc	r2, #3, #3
 80055b2:	f363 128f 	bfi	r2, r3, #6, #10
 80055b6:	4621      	mov	r1, r4
 80055b8:	4811      	ldr	r0, [pc, #68]	; (8005600 <pwm_stm32_init+0x144>)
 80055ba:	f7fe f8ff 	bl	80037bc <log_1>
		return r;
 80055be:	e7c3      	b.n	8005548 <pwm_stm32_init+0x8c>
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <pwm_stm32_init+0x134>)
 80055c2:	4a0c      	ldr	r2, [pc, #48]	; (80055f4 <pwm_stm32_init+0x138>)
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not initialize timer");
 80055c8:	f04f 0100 	mov.w	r1, #0
 80055cc:	2201      	movs	r2, #1
 80055ce:	f362 0102 	bfi	r1, r2, #0, #3
 80055d2:	f36f 01c5 	bfc	r1, #3, #3
 80055d6:	f363 118f 	bfi	r1, r3, #6, #10
 80055da:	480a      	ldr	r0, [pc, #40]	; (8005604 <pwm_stm32_init+0x148>)
 80055dc:	f7fe f8c4 	bl	8003768 <log_0>
		return -EIO;
 80055e0:	f06f 0404 	mvn.w	r4, #4
 80055e4:	e7b0      	b.n	8005548 <pwm_stm32_init+0x8c>
 80055e6:	bf00      	nop
 80055e8:	0800eb6c 	.word	0x0800eb6c
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	0800ef9c 	.word	0x0800ef9c
 80055f4:	0800ef6c 	.word	0x0800ef6c
 80055f8:	0800fc08 	.word	0x0800fc08
 80055fc:	0800fc28 	.word	0x0800fc28
 8005600:	0800fc4c 	.word	0x0800fc4c
 8005604:	0800fc6c 	.word	0x0800fc6c

08005608 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	b08c      	sub	sp, #48	; 0x30
 800560e:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8005610:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8005614:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8005616:	ac04      	add	r4, sp, #16
 8005618:	4f95      	ldr	r7, [pc, #596]	; (8005870 <spi_stm32_configure+0x268>)
 800561a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800561c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800561e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8005626:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 800562a:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 800562c:	42ab      	cmp	r3, r5
 800562e:	f000 8119 	beq.w	8005864 <spi_stm32_configure+0x25c>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8005632:	88ab      	ldrh	r3, [r5, #4]
 8005634:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8005638:	2b08      	cmp	r3, #8
 800563a:	d002      	beq.n	8005642 <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 800563c:	2b10      	cmp	r3, #16
 800563e:	f040 8113 	bne.w	8005868 <spi_stm32_configure+0x260>
 8005642:	488c      	ldr	r0, [pc, #560]	; (8005874 <spi_stm32_configure+0x26c>)
 8005644:	f008 fabd 	bl	800dbc2 <z_device_ready>
 8005648:	b198      	cbz	r0, 8005672 <spi_stm32_configure+0x6a>
	const struct clock_control_driver_api *api =
 800564a:	4b8a      	ldr	r3, [pc, #552]	; (8005874 <spi_stm32_configure+0x26c>)
 800564c:	689b      	ldr	r3, [r3, #8]
	if (api->get_rate == NULL) {
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	b193      	cbz	r3, 8005678 <spi_stm32_configure+0x70>
	return api->get_rate(dev, sys, rate);
 8005652:	aa03      	add	r2, sp, #12
 8005654:	4641      	mov	r1, r8
 8005656:	4887      	ldr	r0, [pc, #540]	; (8005874 <spi_stm32_configure+0x26c>)
 8005658:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 800565a:	2800      	cmp	r0, #0
 800565c:	db0f      	blt.n	800567e <spi_stm32_configure+0x76>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800565e:	2301      	movs	r3, #1
 8005660:	2b08      	cmp	r3, #8
 8005662:	dc1f      	bgt.n	80056a4 <spi_stm32_configure+0x9c>
		uint32_t clk = clock >> br;
 8005664:	9a03      	ldr	r2, [sp, #12]
 8005666:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8005668:	6829      	ldr	r1, [r5, #0]
 800566a:	4291      	cmp	r1, r2
 800566c:	d21a      	bcs.n	80056a4 <spi_stm32_configure+0x9c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800566e:	3301      	adds	r3, #1
 8005670:	e7f6      	b.n	8005660 <spi_stm32_configure+0x58>
 8005672:	f06f 0012 	mvn.w	r0, #18
 8005676:	e7f0      	b.n	800565a <spi_stm32_configure+0x52>
		return -ENOSYS;
 8005678:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800567c:	e7ed      	b.n	800565a <spi_stm32_configure+0x52>
 800567e:	4b7e      	ldr	r3, [pc, #504]	; (8005878 <spi_stm32_configure+0x270>)
 8005680:	4a7e      	ldr	r2, [pc, #504]	; (800587c <spi_stm32_configure+0x274>)
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8005686:	f04f 0100 	mov.w	r1, #0
 800568a:	2201      	movs	r2, #1
 800568c:	f362 0102 	bfi	r1, r2, #0, #3
 8005690:	f36f 01c5 	bfc	r1, #3, #3
 8005694:	f363 118f 	bfi	r1, r3, #6, #10
 8005698:	4879      	ldr	r0, [pc, #484]	; (8005880 <spi_stm32_configure+0x278>)
 800569a:	f7fe f865 	bl	8003768 <log_0>
		return -EIO;
 800569e:	f06f 0004 	mvn.w	r0, #4
 80056a2:	e0dc      	b.n	800585e <spi_stm32_configure+0x256>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	dc75      	bgt.n	8005794 <spi_stm32_configure+0x18c>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ae:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 80056b0:	3b01      	subs	r3, #1
 80056b2:	aa0c      	add	r2, sp, #48	; 0x30
 80056b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056b8:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80056c2:	4313      	orrs	r3, r2
 80056c4:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 80056c6:	88ab      	ldrh	r3, [r5, #4]
 80056c8:	f013 0f02 	tst.w	r3, #2
 80056cc:	d07b      	beq.n	80057c6 <spi_stm32_configure+0x1be>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 80056d6:	88ab      	ldrh	r3, [r5, #4]
 80056d8:	f013 0f04 	tst.w	r3, #4
 80056dc:	d078      	beq.n	80057d0 <spi_stm32_configure+0x1c8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 80056ec:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 80056ee:	88ab      	ldrh	r3, [r5, #4]
 80056f0:	f013 0f10 	tst.w	r3, #16
 80056f4:	d071      	beq.n	80057da <spi_stm32_configure+0x1d2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fc:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005704:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8005706:	68ab      	ldr	r3, [r5, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d06b      	beq.n	80057e4 <spi_stm32_configure+0x1dc>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005712:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	f023 0304 	bic.w	r3, r3, #4
 800571a:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 800571c:	88ab      	ldrh	r3, [r5, #4]
 800571e:	f013 0f01 	tst.w	r3, #1
 8005722:	d077      	beq.n	8005814 <spi_stm32_configure+0x20c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 800572a:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 800572c:	88ab      	ldrh	r3, [r5, #4]
 800572e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8005732:	2b08      	cmp	r3, #8
 8005734:	d073      	beq.n	800581e <spi_stm32_configure+0x216>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800573c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800573e:	6863      	ldr	r3, [r4, #4]
 8005740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005744:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 800574e:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8005750:	68ab      	ldr	r3, [r5, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d072      	beq.n	800583c <spi_stm32_configure+0x234>
 8005756:	6818      	ldr	r0, [r3, #0]
 8005758:	2800      	cmp	r0, #0
 800575a:	d06f      	beq.n	800583c <spi_stm32_configure+0x234>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 800575c:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 800575e:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8005760:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8005764:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
 8005766:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005768:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 800576c:	d004      	beq.n	8005778 <spi_stm32_configure+0x170>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800576e:	f013 0f01 	tst.w	r3, #1
 8005772:	d001      	beq.n	8005778 <spi_stm32_configure+0x170>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005774:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005778:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800577c:	f013 0f01 	tst.w	r3, #1
 8005780:	d054      	beq.n	800582c <spi_stm32_configure+0x224>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005782:	2301      	movs	r3, #1
 8005784:	fa03 f601 	lsl.w	r6, r3, r1
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	4333      	orrs	r3, r6
 800578c:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	4798      	blx	r3
 8005792:	e063      	b.n	800585c <spi_stm32_configure+0x254>
 8005794:	4b38      	ldr	r3, [pc, #224]	; (8005878 <spi_stm32_configure+0x270>)
 8005796:	4a39      	ldr	r2, [pc, #228]	; (800587c <spi_stm32_configure+0x274>)
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	2201      	movs	r2, #1
 80057a2:	f362 0102 	bfi	r1, r2, #0, #3
 80057a6:	f36f 01c5 	bfc	r1, #3, #3
 80057aa:	f363 118f 	bfi	r1, r3, #6, #10
 80057ae:	9a03      	ldr	r2, [sp, #12]
 80057b0:	f8ad 1000 	strh.w	r1, [sp]
 80057b4:	0a13      	lsrs	r3, r2, #8
 80057b6:	0852      	lsrs	r2, r2, #1
 80057b8:	6829      	ldr	r1, [r5, #0]
 80057ba:	4832      	ldr	r0, [pc, #200]	; (8005884 <spi_stm32_configure+0x27c>)
 80057bc:	f7fd ff9a 	bl	80036f4 <log_3>
		return -EINVAL;
 80057c0:	f06f 0015 	mvn.w	r0, #21
 80057c4:	e04b      	b.n	800585e <spi_stm32_configure+0x256>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	f023 0302 	bic.w	r3, r3, #2
 80057cc:	6023      	str	r3, [r4, #0]
}
 80057ce:	e782      	b.n	80056d6 <spi_stm32_configure+0xce>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	6023      	str	r3, [r4, #0]
}
 80057d8:	e785      	b.n	80056e6 <spi_stm32_configure+0xde>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	6023      	str	r3, [r4, #0]
}
 80057e2:	e78c      	b.n	80056fe <spi_stm32_configure+0xf6>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 80057e4:	88ab      	ldrh	r3, [r5, #4]
 80057e6:	f013 0f01 	tst.w	r3, #1
 80057ea:	d008      	beq.n	80057fe <spi_stm32_configure+0x1f6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057f2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	f023 0304 	bic.w	r3, r3, #4
 80057fa:	6063      	str	r3, [r4, #4]
}
 80057fc:	e78e      	b.n	800571c <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005808:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	6063      	str	r3, [r4, #4]
}
 8005812:	e783      	b.n	800571c <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 800581a:	6023      	str	r3, [r4, #0]
}
 800581c:	e786      	b.n	800572c <spi_stm32_configure+0x124>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800581e:	6863      	ldr	r3, [r4, #4]
 8005820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005824:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005828:	6063      	str	r3, [r4, #4]
}
 800582a:	e788      	b.n	800573e <spi_stm32_configure+0x136>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800582c:	2301      	movs	r3, #1
 800582e:	fa03 f601 	lsl.w	r6, r3, r1
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	ea23 0306 	bic.w	r3, r3, r6
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	e7a8      	b.n	800578e <spi_stm32_configure+0x186>
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <spi_stm32_configure+0x270>)
 800583e:	4a0f      	ldr	r2, [pc, #60]	; (800587c <spi_stm32_configure+0x274>)
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	08db      	lsrs	r3, r3, #3
				   GPIO_OUTPUT_INACTIVE);
	} else {
		LOG_INF("CS control inhibited (no GPIO device)");
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	2203      	movs	r2, #3
 800584a:	f362 0102 	bfi	r1, r2, #0, #3
 800584e:	f36f 01c5 	bfc	r1, #3, #3
 8005852:	f363 118f 	bfi	r1, r3, #6, #10
 8005856:	480c      	ldr	r0, [pc, #48]	; (8005888 <spi_stm32_configure+0x280>)
 8005858:	f7fd ff86 	bl	8003768 <log_0>
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 800585c:	2000      	movs	r0, #0
}
 800585e:	b00c      	add	sp, #48	; 0x30
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8005864:	2000      	movs	r0, #0
 8005866:	e7fa      	b.n	800585e <spi_stm32_configure+0x256>
		return -ENOTSUP;
 8005868:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800586c:	e7f7      	b.n	800585e <spi_stm32_configure+0x256>
 800586e:	bf00      	nop
 8005870:	0800f068 	.word	0x0800f068
 8005874:	0800eb6c 	.word	0x0800eb6c
 8005878:	0800efac 	.word	0x0800efac
 800587c:	0800ef6c 	.word	0x0800ef6c
 8005880:	0800fd18 	.word	0x0800fd18
 8005884:	0800fd3c 	.word	0x0800fd3c
 8005888:	0800fd6c 	.word	0x0800fd6c

0800588c <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800588c:	6882      	ldr	r2, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800588e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8005892:	d101      	bne.n	8005898 <spi_stm32_get_err+0xc>
	return 0;
 8005894:	2000      	movs	r0, #0
}
 8005896:	4770      	bx	lr
{
 8005898:	b510      	push	{r4, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	4604      	mov	r4, r0
 800589e:	490f      	ldr	r1, [pc, #60]	; (80058dc <spi_stm32_get_err+0x50>)
 80058a0:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <spi_stm32_get_err+0x54>)
 80058a2:	1ac9      	subs	r1, r1, r3
 80058a4:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("%s: err=%d", __func__,
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	2001      	movs	r0, #1
 80058ac:	f360 0302 	bfi	r3, r0, #0, #3
 80058b0:	f36f 03c5 	bfc	r3, #3, #3
 80058b4:	f361 138f 	bfi	r3, r1, #6, #10
 80058b8:	490a      	ldr	r1, [pc, #40]	; (80058e4 <spi_stm32_get_err+0x58>)
 80058ba:	480b      	ldr	r0, [pc, #44]	; (80058e8 <spi_stm32_get_err+0x5c>)
 80058bc:	f7fd ffb0 	bl	8003820 <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058c6:	d005      	beq.n	80058d4 <spi_stm32_get_err+0x48>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 80058c8:	68e3      	ldr	r3, [r4, #12]
 80058ca:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80058cc:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 80058ce:	68a3      	ldr	r3, [r4, #8]
 80058d0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80058d2:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 80058d4:	f06f 0004 	mvn.w	r0, #4
}
 80058d8:	b002      	add	sp, #8
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	0800efac 	.word	0x0800efac
 80058e0:	0800ef6c 	.word	0x0800ef6c
 80058e4:	0800fe1c 	.word	0x0800fe1c
 80058e8:	0800fd94 	.word	0x0800fd94

080058ec <transceive>:
static int transceive(const struct device *dev,
		      const struct spi_config *config,
		      const struct spi_buf_set *tx_bufs,
		      const struct spi_buf_set *rx_bufs,
		      bool asynchronous, struct k_poll_signal *signal)
{
 80058ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f0:	4605      	mov	r5, r0
 80058f2:	460e      	mov	r6, r1
 80058f4:	4698      	mov	r8, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 80058f6:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 80058f8:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 80058fa:	689f      	ldr	r7, [r3, #8]
	int ret;

	if (!tx_bufs && !rx_bufs) {
 80058fc:	4691      	mov	r9, r2
 80058fe:	b1fa      	cbz	r2, 8005940 <transceive+0x54>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8005900:	88b3      	ldrh	r3, [r6, #4]
 8005902:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005906:	d004      	beq.n	8005912 <transceive+0x26>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b913      	cbnz	r3, 8005912 <transceive+0x26>
		(ctx->owner == spi_cfg)) {
 800590c:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800590e:	429e      	cmp	r6, r3
 8005910:	d008      	beq.n	8005924 <transceive+0x38>
	k_sem_take(&ctx->lock, K_FOREVER);
 8005912:	f104 0008 	add.w	r0, r4, #8
 8005916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800591e:	f003 fdd7 	bl	80094d0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8005922:	6066      	str	r6, [r4, #4]
	}
#endif

	spi_context_lock(&data->ctx, asynchronous, signal, config);

	ret = spi_stm32_configure(dev, config);
 8005924:	4631      	mov	r1, r6
 8005926:	4628      	mov	r0, r5
 8005928:	f7ff fe6e 	bl	8005608 <spi_stm32_configure>
	if (ret) {
 800592c:	4606      	mov	r6, r0
 800592e:	b160      	cbz	r0, 800594a <transceive+0x5e>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	889b      	ldrh	r3, [r3, #4]
 8005934:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005938:	d07b      	beq.n	8005a32 <transceive+0x146>

end:
	spi_context_release(&data->ctx, ret);

	return ret;
}
 800593a:	4630      	mov	r0, r6
 800593c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8005940:	f1b8 0f00 	cmp.w	r8, #0
 8005944:	d1dc      	bne.n	8005900 <transceive+0x14>
		return 0;
 8005946:	2600      	movs	r6, #0
 8005948:	e7f7      	b.n	800593a <transceive+0x4e>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 800594a:	f1b9 0f00 	cmp.w	r9, #0
 800594e:	d01e      	beq.n	800598e <transceive+0xa2>
		ctx->current_tx = tx_bufs->buffers;
 8005950:	f8d9 3000 	ldr.w	r3, [r9]
 8005954:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 8005956:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800595a:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6523      	str	r3, [r4, #80]	; 0x50
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8005964:	f1b8 0f00 	cmp.w	r8, #0
 8005968:	d017      	beq.n	800599a <transceive+0xae>
		ctx->current_rx = rx_bufs->buffers;
 800596a:	f8d8 3000 	ldr.w	r3, [r8]
 800596e:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 8005970:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005974:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	65a3      	str	r3, [r4, #88]	; 0x58
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63a3      	str	r3, [r4, #56]	; 0x38
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f013 0f01 	tst.w	r3, #1
 8005988:	d00d      	beq.n	80059a6 <transceive+0xba>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e7f9      	b.n	8005982 <transceive+0x96>
		ctx->current_tx = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 8005992:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 8005994:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 8005996:	6523      	str	r3, [r4, #80]	; 0x50
 8005998:	e7e4      	b.n	8005964 <transceive+0x78>
		ctx->current_rx = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800599e:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 80059a0:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 80059a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80059a4:	e7eb      	b.n	800597e <transceive+0x92>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ac:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 80059ae:	2101      	movs	r1, #1
 80059b0:	4628      	mov	r0, r5
 80059b2:	f007 fd16 	bl	800d3e2 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	607b      	str	r3, [r7, #4]
	if (rx_bufs) {
 80059be:	f1b8 0f00 	cmp.w	r8, #0
 80059c2:	d003      	beq.n	80059cc <transceive+0xe0>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ca:	607b      	str	r3, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d2:	607b      	str	r3, [r7, #4]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80059d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80059d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80059d8:	429a      	cmp	r2, r3
 80059da:	bf38      	it	cc
 80059dc:	461a      	movcc	r2, r3
 80059de:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80059e2:	fb03 f202 	mul.w	r2, r3, r2
		     ctx->config->frequency;
 80059e6:	4620      	mov	r0, r4
 80059e8:	f850 3b20 	ldr.w	r3, [r0], #32
 80059ec:	681b      	ldr	r3, [r3, #0]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 80059ee:	fbb2 f2f3 	udiv	r2, r2, r3
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 80059f2:	32c8      	adds	r2, #200	; 0xc8
 80059f4:	0f91      	lsrs	r1, r2, #30
 80059f6:	0093      	lsls	r3, r2, #2
 80059f8:	189a      	adds	r2, r3, r2
 80059fa:	f141 0300 	adc.w	r3, r1, #0
 80059fe:	1892      	adds	r2, r2, r2
 8005a00:	415b      	adcs	r3, r3
 8005a02:	f003 fd65 	bl	80094d0 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
 8005a06:	b908      	cbnz	r0, 8005a0c <transceive+0x120>
	status = ctx->sync_status;
 8005a08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	return status;
 8005a0a:	e791      	b.n	8005930 <transceive+0x44>
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <transceive+0x154>)
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <transceive+0x158>)
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f362 0102 	bfi	r1, r2, #0, #3
 8005a1e:	f36f 01c5 	bfc	r1, #3, #3
 8005a22:	f363 118f 	bfi	r1, r3, #6, #10
 8005a26:	4808      	ldr	r0, [pc, #32]	; (8005a48 <transceive+0x15c>)
 8005a28:	f7fd fe9e 	bl	8003768 <log_0>
		return -ETIMEDOUT;
 8005a2c:	f06f 0673 	mvn.w	r6, #115	; 0x73
 8005a30:	e77e      	b.n	8005930 <transceive+0x44>
		ctx->owner = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 8005a36:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 8005a3a:	f003 fd21 	bl	8009480 <z_impl_k_sem_give>
}
 8005a3e:	e77c      	b.n	800593a <transceive+0x4e>
 8005a40:	0800efac 	.word	0x0800efac
 8005a44:	0800ef6c 	.word	0x0800ef6c
 8005a48:	0800fda0 	.word	0x0800fda0

08005a4c <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8005a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8005a52:	6907      	ldr	r7, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8005a54:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005a58:	4839      	ldr	r0, [pc, #228]	; (8005b40 <spi_stm32_init+0xf4>)
 8005a5a:	f008 f8b2 	bl	800dbc2 <z_device_ready>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d035      	beq.n	8005ace <spi_stm32_init+0x82>
	const struct clock_control_driver_api *api =
 8005a62:	4837      	ldr	r0, [pc, #220]	; (8005b40 <spi_stm32_init+0xf4>)
 8005a64:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4798      	blx	r3
 8005a6c:	4605      	mov	r5, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d130      	bne.n	8005ad4 <spi_stm32_init+0x88>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8005a72:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005a76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8005a7a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005a7e:	f007 f841 	bl	800cb04 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 8005a82:	1e06      	subs	r6, r0, #0
 8005a84:	db39      	blt.n	8005afa <spi_stm32_init+0xae>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
		return err;
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8005a86:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4798      	blx	r3
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	b1c3      	cbz	r3, 8005ac4 <spi_stm32_init+0x78>
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	b1b3      	cbz	r3, 8005ac4 <spi_stm32_init+0x78>
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	b1a2      	cbz	r2, 8005ac4 <spi_stm32_init+0x78>
			k_busy_wait(ctx->config->cs->delay);
 8005a9a:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8005a9c:	f004 fc0e 	bl	800a2bc <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8005aa8:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	2301      	movs	r3, #1
 8005aae:	408b      	lsls	r3, r1
 8005ab0:	421a      	tst	r2, r3
 8005ab2:	d135      	bne.n	8005b20 <spi_stm32_init+0xd4>
 8005ab4:	462b      	mov	r3, r5
	if (value != 0)	{
 8005ab6:	b3ab      	cbz	r3, 8005b24 <spi_stm32_init+0xd8>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8005ab8:	2301      	movs	r3, #1
 8005aba:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8005abe:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4798      	blx	r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 8005ac6:	b3a3      	cbz	r3, 8005b32 <spi_stm32_init+0xe6>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8005ac8:	4628      	mov	r0, r5
 8005aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ace:	f06f 0512 	mvn.w	r5, #18
 8005ad2:	e7cc      	b.n	8005a6e <spi_stm32_init+0x22>
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <spi_stm32_init+0xf8>)
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <spi_stm32_init+0xfc>)
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not enable SPI clock");
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f362 0102 	bfi	r1, r2, #0, #3
 8005ae6:	f36f 01c5 	bfc	r1, #3, #3
 8005aea:	f363 118f 	bfi	r1, r3, #6, #10
 8005aee:	4817      	ldr	r0, [pc, #92]	; (8005b4c <spi_stm32_init+0x100>)
 8005af0:	f7fd fe3a 	bl	8003768 <log_0>
		return -EIO;
 8005af4:	f06f 0504 	mvn.w	r5, #4
 8005af8:	e7e6      	b.n	8005ac8 <spi_stm32_init+0x7c>
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <spi_stm32_init+0xf8>)
 8005afc:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <spi_stm32_init+0xfc>)
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	2101      	movs	r1, #1
 8005b08:	f361 0202 	bfi	r2, r1, #0, #3
 8005b0c:	f36f 02c5 	bfc	r2, #3, #3
 8005b10:	f363 128f 	bfi	r2, r3, #6, #10
 8005b14:	4631      	mov	r1, r6
 8005b16:	480e      	ldr	r0, [pc, #56]	; (8005b50 <spi_stm32_init+0x104>)
 8005b18:	f7fd fe50 	bl	80037bc <log_1>
		return err;
 8005b1c:	4635      	mov	r5, r6
 8005b1e:	e7d3      	b.n	8005ac8 <spi_stm32_init+0x7c>
		value = (value != 0) ? 0 : 1;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e7c8      	b.n	8005ab6 <spi_stm32_init+0x6a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8005b24:	2301      	movs	r3, #1
 8005b26:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8005b2a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8005b30:	e7c8      	b.n	8005ac4 <spi_stm32_init+0x78>
		ctx->owner = NULL;
 8005b32:	607b      	str	r3, [r7, #4]
		k_sem_give(&ctx->lock);
 8005b34:	f107 0008 	add.w	r0, r7, #8
	z_impl_k_sem_give(sem);
 8005b38:	f003 fca2 	bl	8009480 <z_impl_k_sem_give>
}
 8005b3c:	e7c4      	b.n	8005ac8 <spi_stm32_init+0x7c>
 8005b3e:	bf00      	nop
 8005b40:	0800eb6c 	.word	0x0800eb6c
 8005b44:	0800efac 	.word	0x0800efac
 8005b48:	0800ef6c 	.word	0x0800ef6c
 8005b4c:	0800fdc8 	.word	0x0800fdc8
 8005b50:	0800fde4 	.word	0x0800fde4

08005b54 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8005b54:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8005b56:	4802      	ldr	r0, [pc, #8]	; (8005b60 <timer_callback+0xc>)
 8005b58:	f003 fe04 	bl	8009764 <k_work_submit>
}
 8005b5c:	bd08      	pop	{r3, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000090 	.word	0x20000090

08005b64 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8005b64:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8005b66:	f008 fba1 	bl	800e2ac <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f7fa ff35 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8005b72:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <RtcGetTimerElapsedTime+0x18>)
 8005b74:	681b      	ldr	r3, [r3, #0]
}
 8005b76:	1ac0      	subs	r0, r0, r3
 8005b78:	bd08      	pop	{r3, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000b00 	.word	0x20000b00

08005b80 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8005b80:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8005b82:	4802      	ldr	r0, [pc, #8]	; (8005b8c <RtcStopAlarm+0xc>)
 8005b84:	f008 fba2 	bl	800e2cc <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8005b88:	bd08      	pop	{r3, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000370 	.word	0x20000370

08005b90 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8005b90:	b500      	push	{lr}
 8005b92:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8005b94:	0f83      	lsrs	r3, r0, #30
 8005b96:	0082      	lsls	r2, r0, #2
 8005b98:	1812      	adds	r2, r2, r0
 8005b9a:	f143 0300 	adc.w	r3, r3, #0
 8005b9e:	1892      	adds	r2, r2, r2
 8005ba0:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8005baa:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <RtcSetAlarm+0x28>)
 8005bac:	f004 fbdc 	bl	800a368 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8005bb0:	b003      	add	sp, #12
 8005bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bb6:	bf00      	nop
 8005bb8:	20000370 	.word	0x20000370

08005bbc <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8005bbc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8005bbe:	f008 fb75 	bl	800e2ac <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8005bc2:	220a      	movs	r2, #10
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f7fa ff09 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8005bca:	4b01      	ldr	r3, [pc, #4]	; (8005bd0 <RtcSetTimerContext+0x14>)
 8005bcc:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8005bce:	bd08      	pop	{r3, pc}
 8005bd0:	20000b00 	.word	0x20000b00

08005bd4 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8005bd4:	4b01      	ldr	r3, [pc, #4]	; (8005bdc <RtcGetTimerContext+0x8>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000b00 	.word	0x20000b00

08005be0 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005be4:	f100 0534 	add.w	r5, r0, #52	; 0x34
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005be8:	2302      	movs	r3, #2
 8005bea:	f3bf 8f5b 	dmb	ish
 8005bee:	e855 2f00 	ldrex	r2, [r5]
 8005bf2:	2a01      	cmp	r2, #1
 8005bf4:	d103      	bne.n	8005bfe <modem_release+0x1e>
 8005bf6:	e845 3100 	strex	r1, r3, [r5]
 8005bfa:	2900      	cmp	r1, #0
 8005bfc:	d1f7      	bne.n	8005bee <modem_release+0xe>
 8005bfe:	f3bf 8f5b 	dmb	ish
 8005c02:	bf0c      	ite	eq
 8005c04:	2601      	moveq	r6, #1
 8005c06:	2600      	movne	r6, #0
 8005c08:	d10e      	bne.n	8005c28 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <modem_release+0x4c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	6023      	str	r3, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005c14:	f3bf 8f5b 	dmb	ish
 8005c18:	e855 2f00 	ldrex	r2, [r5]
 8005c1c:	e845 3100 	strex	r1, r3, [r5]
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d1f9      	bne.n	8005c18 <modem_release+0x38>
 8005c24:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8005c28:	4630      	mov	r0, r6
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	08010018 	.word	0x08010018

08005c30 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	4617      	mov	r7, r2
 8005c34:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 8005c36:	4c1d      	ldr	r4, [pc, #116]	; (8005cac <sx12xx_ev_rx_done+0x7c>)
 8005c38:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f3bf 8f5b 	dmb	ish
 8005c42:	e854 2f00 	ldrex	r2, [r4]
 8005c46:	2a01      	cmp	r2, #1
 8005c48:	d104      	bne.n	8005c54 <sx12xx_ev_rx_done+0x24>
 8005c4a:	e844 3c00 	strex	ip, r3, [r4]
 8005c4e:	f1bc 0f00 	cmp.w	ip, #0
 8005c52:	d1f6      	bne.n	8005c42 <sx12xx_ev_rx_done+0x12>
 8005c54:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005c58:	d127      	bne.n	8005caa <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <sx12xx_ev_rx_done+0x7c>)
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d900      	bls.n	8005c66 <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 8005c64:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 8005c66:	4c11      	ldr	r4, [pc, #68]	; (8005cac <sx12xx_ev_rx_done+0x7c>)
 8005c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c70:	f008 fbcf 	bl	800e412 <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 8005c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c76:	b103      	cbz	r3, 8005c7a <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 8005c78:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 8005c7a:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <sx12xx_ev_rx_done+0x7c>)
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	b103      	cbz	r3, 8005c82 <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 8005c80:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <sx12xx_ev_rx_done+0x80>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4b08      	ldr	r3, [pc, #32]	; (8005cac <sx12xx_ev_rx_done+0x7c>)
 8005c8c:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005c90:	f3bf 8f5b 	dmb	ish
 8005c94:	e853 2f00 	ldrex	r2, [r3]
 8005c98:	e843 1000 	strex	r0, r1, [r3]
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1f9      	bne.n	8005c94 <sx12xx_ev_rx_done+0x64>
 8005ca0:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f004 fe5b 	bl	800a960 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 8005caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cac:	20000b04 	.word	0x20000b04
 8005cb0:	08010018 	.word	0x08010018

08005cb4 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 8005cb4:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8005cb6:	4805      	ldr	r0, [pc, #20]	; (8005ccc <sx12xx_ev_tx_done+0x18>)
 8005cb8:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 8005cba:	f7ff ff91 	bl	8005be0 <modem_release>
 8005cbe:	b120      	cbz	r0, 8005cca <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 8005cc0:	b11c      	cbz	r4, 8005cca <sx12xx_ev_tx_done+0x16>
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f004 fe4b 	bl	800a960 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8005cca:	bd10      	pop	{r4, pc}
 8005ccc:	20000b04 	.word	0x20000b04

08005cd0 <__sx12xx_configure_pin>:
{
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	4616      	mov	r6, r2
 8005cda:	461d      	mov	r5, r3
 8005cdc:	4608      	mov	r0, r1
 8005cde:	f002 ffa9 	bl	8008c34 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8005ce2:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8005ce4:	b1f8      	cbz	r0, 8005d26 <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 8005ce6:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8005ce8:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005cea:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8005cee:	d007      	beq.n	8005d00 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005cf0:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8005cf4:	d004      	beq.n	8005d00 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005cf6:	f015 0f01 	tst.w	r5, #1
 8005cfa:	d001      	beq.n	8005d00 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005cfc:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005d00:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005d04:	f015 0f01 	tst.w	r5, #1
 8005d08:	d021      	beq.n	8005d4e <__sx12xx_configure_pin+0x7e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	fa01 f506 	lsl.w	r5, r1, r6
 8005d10:	6821      	ldr	r1, [r4, #0]
 8005d12:	4329      	orrs	r1, r5
 8005d14:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4798      	blx	r3
	if (err) {
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	b9f0      	cbnz	r0, 8005d5e <__sx12xx_configure_pin+0x8e>
}
 8005d20:	4620      	mov	r0, r4
 8005d22:	b003      	add	sp, #12
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <__sx12xx_configure_pin+0xbc>)
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <__sx12xx_configure_pin+0xc0>)
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device", controller);
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	2101      	movs	r1, #1
 8005d34:	f361 0202 	bfi	r2, r1, #0, #3
 8005d38:	f36f 02c5 	bfc	r2, #3, #3
 8005d3c:	f363 128f 	bfi	r2, r3, #6, #10
 8005d40:	4639      	mov	r1, r7
 8005d42:	4814      	ldr	r0, [pc, #80]	; (8005d94 <__sx12xx_configure_pin+0xc4>)
 8005d44:	f7fd fd3a 	bl	80037bc <log_1>
		return -EIO;
 8005d48:	f06f 0404 	mvn.w	r4, #4
 8005d4c:	e7e8      	b.n	8005d20 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	fa01 f506 	lsl.w	r5, r1, r6
 8005d54:	6821      	ldr	r1, [r4, #0]
 8005d56:	ea21 0105 	bic.w	r1, r1, r5
 8005d5a:	6021      	str	r1, [r4, #0]
 8005d5c:	e7db      	b.n	8005d16 <__sx12xx_configure_pin+0x46>
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <__sx12xx_configure_pin+0xbc>)
 8005d60:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <__sx12xx_configure_pin+0xc0>)
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	f361 0202 	bfi	r2, r1, #0, #3
 8005d70:	f36f 02c5 	bfc	r2, #3, #3
 8005d74:	f363 128f 	bfi	r2, r3, #6, #10
 8005d78:	f8ad 2000 	strh.w	r2, [sp]
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4632      	mov	r2, r6
 8005d80:	4639      	mov	r1, r7
 8005d82:	4805      	ldr	r0, [pc, #20]	; (8005d98 <__sx12xx_configure_pin+0xc8>)
 8005d84:	f7fd fcb6 	bl	80036f4 <log_3>
		return err;
 8005d88:	e7ca      	b.n	8005d20 <__sx12xx_configure_pin+0x50>
 8005d8a:	bf00      	nop
 8005d8c:	0800efbc 	.word	0x0800efbc
 8005d90:	0800ef6c 	.word	0x0800ef6c
 8005d94:	0800fe68 	.word	0x0800fe68
 8005d98:	0800fe88 	.word	0x0800fe88

08005d9c <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005da0:	490f      	ldr	r1, [pc, #60]	; (8005de0 <sx12xx_lora_send_async+0x44>)
 8005da2:	2001      	movs	r0, #1
 8005da4:	f3bf 8f5b 	dmb	ish
 8005da8:	e851 4f00 	ldrex	r4, [r1]
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	d103      	bne.n	8005db8 <sx12xx_lora_send_async+0x1c>
 8005db0:	e841 0600 	strex	r6, r0, [r1]
 8005db4:	2e00      	cmp	r6, #0
 8005db6:	d1f7      	bne.n	8005da8 <sx12xx_lora_send_async+0xc>
 8005db8:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005dbc:	d10c      	bne.n	8005dd8 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8005dbe:	3934      	subs	r1, #52	; 0x34
 8005dc0:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005dc2:	4e08      	ldr	r6, [pc, #32]	; (8005de4 <sx12xx_lora_send_async+0x48>)
 8005dc4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005dc6:	b2d4      	uxtb	r4, r2
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005dcc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	4798      	blx	r3

	return 0;
 8005dd4:	2000      	movs	r0, #0
}
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005dd8:	f06f 000f 	mvn.w	r0, #15
 8005ddc:	e7fb      	b.n	8005dd6 <sx12xx_lora_send_async+0x3a>
 8005dde:	bf00      	nop
 8005de0:	20000b38 	.word	0x20000b38
 8005de4:	08010018 	.word	0x08010018

08005de8 <sx12xx_lora_send>:
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	b08e      	sub	sp, #56	; 0x38
 8005dec:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005dee:	aa0a      	add	r2, sp, #40	; 0x28
 8005df0:	920a      	str	r2, [sp, #40]	; 0x28
 8005df2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005df4:	2300      	movs	r3, #0
 8005df6:	930c      	str	r3, [sp, #48]	; 0x30
 8005df8:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	9306      	str	r3, [sp, #24]
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	9308      	str	r3, [sp, #32]
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
 8005e04:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8005e08:	2501      	movs	r5, #1
 8005e0a:	f365 0304 	bfi	r3, r5, #0, #5
 8005e0e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8005e12:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <sx12xx_lora_send+0xd0>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d049      	beq.n	8005eb0 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	4622      	mov	r2, r4
 8005e20:	f7ff ffbc 	bl	8005d9c <sx12xx_lora_send_async>
	if (ret < 0) {
 8005e24:	2800      	cmp	r0, #0
 8005e26:	db22      	blt.n	8005e6e <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <sx12xx_lora_send+0xd4>)
 8005e2a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 8005e2c:	4922      	ldr	r1, [pc, #136]	; (8005eb8 <sx12xx_lora_send+0xd0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005e2e:	9503      	str	r5, [sp, #12]
 8005e30:	b2e4      	uxtb	r4, r4
 8005e32:	9402      	str	r4, [sp, #8]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 8005e40:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 8005e44:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8005e4c:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8005e50:	f3c0 7341 	ubfx	r3, r0, #29, #2
 8005e54:	00c2      	lsls	r2, r0, #3
 8005e56:	1852      	adds	r2, r2, r1
 8005e58:	f143 0300 	adc.w	r3, r3, #0
 8005e5c:	1892      	adds	r2, r2, r2
 8005e5e:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8005e60:	4629      	mov	r1, r5
 8005e62:	a805      	add	r0, sp, #20
 8005e64:	f004 fcd0 	bl	800a808 <z_impl_k_poll>
	if (ret < 0) {
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	db02      	blt.n	8005e72 <sx12xx_lora_send+0x8a>
	return 0;
 8005e6c:	2000      	movs	r0, #0
}
 8005e6e:	b00e      	add	sp, #56	; 0x38
 8005e70:	bd70      	pop	{r4, r5, r6, pc}
 8005e72:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <sx12xx_lora_send+0xd8>)
 8005e74:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <sx12xx_lora_send+0xdc>)
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Packet transmission failed!");
 8005e7a:	f04f 0100 	mov.w	r1, #0
 8005e7e:	f365 0102 	bfi	r1, r5, #0, #3
 8005e82:	f36f 01c5 	bfc	r1, #3, #3
 8005e86:	f363 118f 	bfi	r1, r3, #6, #10
 8005e8a:	480f      	ldr	r0, [pc, #60]	; (8005ec8 <sx12xx_lora_send+0xe0>)
 8005e8c:	f7fd fc6c 	bl	8003768 <log_0>
		if (!modem_release(&dev_data)) {
 8005e90:	4809      	ldr	r0, [pc, #36]	; (8005eb8 <sx12xx_lora_send+0xd0>)
 8005e92:	f7ff fea5 	bl	8005be0 <modem_release>
 8005e96:	b108      	cbz	r0, 8005e9c <sx12xx_lora_send+0xb4>
	return 0;
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e7e8      	b.n	8005e6e <sx12xx_lora_send+0x86>
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	a805      	add	r0, sp, #20
 8005ea8:	f004 fcae 	bl	800a808 <z_impl_k_poll>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e7de      	b.n	8005e6e <sx12xx_lora_send+0x86>
		return -EINVAL;
 8005eb0:	f06f 0015 	mvn.w	r0, #21
 8005eb4:	e7db      	b.n	8005e6e <sx12xx_lora_send+0x86>
 8005eb6:	bf00      	nop
 8005eb8:	20000b04 	.word	0x20000b04
 8005ebc:	08010018 	.word	0x08010018
 8005ec0:	0800efbc 	.word	0x0800efbc
 8005ec4:	0800ef6c 	.word	0x0800ef6c
 8005ec8:	0800fea8 	.word	0x0800fea8

08005ecc <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	b08c      	sub	sp, #48	; 0x30
 8005ed0:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005ed4:	aa08      	add	r2, sp, #32
 8005ed6:	9208      	str	r2, [sp, #32]
 8005ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eda:	2300      	movs	r3, #0
 8005edc:	930a      	str	r3, [sp, #40]	; 0x28
 8005ede:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	9306      	str	r3, [sp, #24]
 8005ee8:	9307      	str	r3, [sp, #28]
 8005eea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005eee:	2001      	movs	r0, #1
 8005ef0:	f360 0304 	bfi	r3, r0, #0, #5
 8005ef4:	f88d 3019 	strb.w	r3, [sp, #25]
 8005ef8:	9207      	str	r2, [sp, #28]
 8005efa:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <sx12xx_lora_recv+0xd0>)
 8005efc:	f3bf 8f5b 	dmb	ish
 8005f00:	e853 2f00 	ldrex	r2, [r3]
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	d103      	bne.n	8005f10 <sx12xx_lora_recv+0x44>
 8005f08:	e843 0400 	strex	r4, r0, [r3]
 8005f0c:	2c00      	cmp	r4, #0
 8005f0e:	d1f7      	bne.n	8005f00 <sx12xx_lora_recv+0x34>
 8005f10:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8005f14:	d13e      	bne.n	8005f94 <sx12xx_lora_recv+0xc8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 8005f16:	3b34      	subs	r3, #52	; 0x34
 8005f18:	aa08      	add	r2, sp, #32
 8005f1a:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8005f1c:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 8005f1e:	f10d 0207 	add.w	r2, sp, #7
 8005f22:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 8005f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 8005f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005f2c:	4c1c      	ldr	r4, [pc, #112]	; (8005fa0 <sx12xx_lora_recv+0xd4>)
 8005f2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f30:	21ff      	movs	r1, #255	; 0xff
 8005f32:	4798      	blx	r3
	Radio.Rx(0);
 8005f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f36:	2000      	movs	r0, #0
 8005f38:	4798      	blx	r3
 8005f3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005f3e:	2101      	movs	r1, #1
 8005f40:	a803      	add	r0, sp, #12
 8005f42:	f004 fc61 	bl	800a808 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8005f46:	1e04      	subs	r4, r0, #0
 8005f48:	db04      	blt.n	8005f54 <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8005f4a:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 8005f4e:	4620      	mov	r0, r4
 8005f50:	b00c      	add	sp, #48	; 0x30
 8005f52:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 8005f54:	4813      	ldr	r0, [pc, #76]	; (8005fa4 <sx12xx_lora_recv+0xd8>)
 8005f56:	f7ff fe43 	bl	8005be0 <modem_release>
 8005f5a:	b950      	cbnz	r0, 8005f72 <sx12xx_lora_recv+0xa6>
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f64:	2101      	movs	r1, #1
 8005f66:	a803      	add	r0, sp, #12
 8005f68:	f004 fc4e 	bl	800a808 <z_impl_k_poll>
			return size;
 8005f6c:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005f70:	e7ed      	b.n	8005f4e <sx12xx_lora_recv+0x82>
 8005f72:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <sx12xx_lora_recv+0xdc>)
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <sx12xx_lora_recv+0xe0>)
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	08db      	lsrs	r3, r3, #3
		LOG_INF("Receive timeout");
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	2203      	movs	r2, #3
 8005f80:	f362 0102 	bfi	r1, r2, #0, #3
 8005f84:	f36f 01c5 	bfc	r1, #3, #3
 8005f88:	f363 118f 	bfi	r1, r3, #6, #10
 8005f8c:	4808      	ldr	r0, [pc, #32]	; (8005fb0 <sx12xx_lora_recv+0xe4>)
 8005f8e:	f7fd fbeb 	bl	8003768 <log_0>
		return ret;
 8005f92:	e7dc      	b.n	8005f4e <sx12xx_lora_recv+0x82>
		return -EBUSY;
 8005f94:	f06f 040f 	mvn.w	r4, #15
 8005f98:	e7d9      	b.n	8005f4e <sx12xx_lora_recv+0x82>
 8005f9a:	bf00      	nop
 8005f9c:	20000b38 	.word	0x20000b38
 8005fa0:	08010018 	.word	0x08010018
 8005fa4:	20000b04 	.word	0x20000b04
 8005fa8:	0800efbc 	.word	0x0800efbc
 8005fac:	0800ef6c 	.word	0x0800ef6c
 8005fb0:	0800fec4 	.word	0x0800fec4

08005fb4 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	460c      	mov	r4, r1
 8005fba:	4b27      	ldr	r3, [pc, #156]	; (8006058 <sx12xx_lora_config+0xa4>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f3bf 8f5b 	dmb	ish
 8005fc2:	e853 1f00 	ldrex	r1, [r3]
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d103      	bne.n	8005fd2 <sx12xx_lora_config+0x1e>
 8005fca:	e843 2000 	strex	r0, r2, [r3]
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d1f7      	bne.n	8005fc2 <sx12xx_lora_config+0xe>
 8005fd2:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8005fd6:	d13b      	bne.n	8006050 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <sx12xx_lora_config+0xa8>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	4798      	blx	r3

	if (config->tx) {
 8005fe0:	7ae3      	ldrb	r3, [r4, #11]
 8005fe2:	b9cb      	cbnz	r3, 8006018 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <sx12xx_lora_config+0xa8>)
 8005fe6:	699d      	ldr	r5, [r3, #24]
 8005fe8:	2001      	movs	r0, #1
 8005fea:	9009      	str	r0, [sp, #36]	; 0x24
 8005fec:	2300      	movs	r3, #0
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	9307      	str	r3, [sp, #28]
 8005ff2:	9306      	str	r3, [sp, #24]
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	220a      	movs	r2, #10
 8005ffc:	9202      	str	r2, [sp, #8]
 8005ffe:	8922      	ldrh	r2, [r4, #8]
 8006000:	9201      	str	r2, [sp, #4]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	79a3      	ldrb	r3, [r4, #6]
 8006006:	7962      	ldrb	r2, [r4, #5]
 8006008:	7921      	ldrb	r1, [r4, #4]
 800600a:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 800600c:	4814      	ldr	r0, [pc, #80]	; (8006060 <sx12xx_lora_config+0xac>)
 800600e:	f7ff fde7 	bl	8005be0 <modem_release>
	return 0;
 8006012:	2000      	movs	r0, #0
}
 8006014:	b00a      	add	sp, #40	; 0x28
 8006016:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8006018:	4b12      	ldr	r3, [pc, #72]	; (8006064 <sx12xx_lora_config+0xb0>)
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	6861      	ldr	r1, [r4, #4]
 800601e:	68a2      	ldr	r2, [r4, #8]
 8006020:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <sx12xx_lora_config+0xa8>)
 8006024:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8006026:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8006028:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800602a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800602e:	9208      	str	r2, [sp, #32]
 8006030:	2200      	movs	r2, #0
 8006032:	9207      	str	r2, [sp, #28]
 8006034:	9206      	str	r2, [sp, #24]
 8006036:	9205      	str	r2, [sp, #20]
 8006038:	2001      	movs	r0, #1
 800603a:	9004      	str	r0, [sp, #16]
 800603c:	9203      	str	r2, [sp, #12]
 800603e:	8926      	ldrh	r6, [r4, #8]
 8006040:	9602      	str	r6, [sp, #8]
 8006042:	9101      	str	r1, [sp, #4]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	7923      	ldrb	r3, [r4, #4]
 8006048:	f994 100a 	ldrsb.w	r1, [r4, #10]
 800604c:	47a8      	blx	r5
 800604e:	e7dd      	b.n	800600c <sx12xx_lora_config+0x58>
		return -EBUSY;
 8006050:	f06f 000f 	mvn.w	r0, #15
 8006054:	e7de      	b.n	8006014 <sx12xx_lora_config+0x60>
 8006056:	bf00      	nop
 8006058:	20000b38 	.word	0x20000b38
 800605c:	08010018 	.word	0x08010018
 8006060:	20000b04 	.word	0x20000b04
 8006064:	20000b2c 	.word	0x20000b2c

08006068 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8006068:	b510      	push	{r4, lr}
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	461a      	mov	r2, r3
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <sx12xx_lora_test_cw+0x3c>)
 8006072:	f04f 0c01 	mov.w	ip, #1
 8006076:	f3bf 8f5b 	dmb	ish
 800607a:	e853 ef00 	ldrex	lr, [r3]
 800607e:	f1be 0f00 	cmp.w	lr, #0
 8006082:	d103      	bne.n	800608c <sx12xx_lora_test_cw+0x24>
 8006084:	e843 c400 	strex	r4, ip, [r3]
 8006088:	2c00      	cmp	r4, #0
 800608a:	d1f6      	bne.n	800607a <sx12xx_lora_test_cw+0x12>
 800608c:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8006090:	d104      	bne.n	800609c <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <sx12xx_lora_test_cw+0x40>)
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	4798      	blx	r3
	return 0;
 8006098:	2000      	movs	r0, #0
}
 800609a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 800609c:	f06f 000f 	mvn.w	r0, #15
 80060a0:	e7fb      	b.n	800609a <sx12xx_lora_test_cw+0x32>
 80060a2:	bf00      	nop
 80060a4:	20000b38 	.word	0x20000b38
 80060a8:	08010018 	.word	0x08010018

080060ac <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 80060ac:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80060ae:	480d      	ldr	r0, [pc, #52]	; (80060e4 <sx12xx_init+0x38>)
 80060b0:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80060b4:	2400      	movs	r4, #0
 80060b6:	f3bf 8f5b 	dmb	ish
 80060ba:	e853 2f00 	ldrex	r2, [r3]
 80060be:	e843 4100 	strex	r1, r4, [r3]
 80060c2:	2900      	cmp	r1, #0
 80060c4:	d1f9      	bne.n	80060ba <sx12xx_init+0xe>
 80060c6:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 80060ca:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <sx12xx_init+0x3c>)
 80060cc:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <sx12xx_init+0x40>)
 80060d0:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <sx12xx_init+0x44>)
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	3004      	adds	r0, #4
 80060d8:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 80060da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80060dc:	4798      	blx	r3

	return 0;
}
 80060de:	4620      	mov	r0, r4
 80060e0:	bd38      	pop	{r3, r4, r5, pc}
 80060e2:	bf00      	nop
 80060e4:	20000b04 	.word	0x20000b04
 80060e8:	08005cb5 	.word	0x08005cb5
 80060ec:	08005c31 	.word	0x08005c31
 80060f0:	08010018 	.word	0x08010018

080060f4 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 80060f4:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 80060f6:	4b04      	ldr	r3, [pc, #16]	; (8006108 <sx127x_dio_work_handle+0x14>)
 80060f8:	1ac0      	subs	r0, r0, r3
 80060fa:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <sx127x_dio_work_handle+0x18>)
 80060fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006102:	2000      	movs	r0, #0
 8006104:	4798      	blx	r3
}
 8006106:	bd08      	pop	{r3, pc}
 8006108:	20000ba0 	.word	0x20000ba0
 800610c:	200000a0 	.word	0x200000a0

08006110 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8006110:	b510      	push	{r4, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8006118:	f10d 0007 	add.w	r0, sp, #7
 800611c:	9006      	str	r0, [sp, #24]
 800611e:	2001      	movs	r0, #1
 8006120:	9007      	str	r0, [sp, #28]
 8006122:	9208      	str	r2, [sp, #32]
 8006124:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8006126:	ab06      	add	r3, sp, #24
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	2302      	movs	r3, #2
 800612c:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 800612e:	b149      	cbz	r1, 8006144 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8006130:	490b      	ldr	r1, [pc, #44]	; (8006160 <sx127x_transceive+0x50>)
 8006132:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8006134:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8006136:	681c      	ldr	r4, [r3, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	aa04      	add	r2, sp, #16
 800613c:	3108      	adds	r1, #8
 800613e:	47a0      	blx	r4
}
 8006140:	b00a      	add	sp, #40	; 0x28
 8006142:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8006144:	ab06      	add	r3, sp, #24
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	2302      	movs	r3, #2
 800614a:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 800614c:	4904      	ldr	r1, [pc, #16]	; (8006160 <sx127x_transceive+0x50>)
 800614e:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8006150:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8006152:	681c      	ldr	r4, [r3, #0]
 8006154:	ab02      	add	r3, sp, #8
 8006156:	aa04      	add	r2, sp, #16
 8006158:	3108      	adds	r1, #8
 800615a:	47a0      	blx	r4
 800615c:	e7f0      	b.n	8006140 <sx127x_transceive+0x30>
 800615e:	bf00      	nop
 8006160:	20000b7c 	.word	0x20000b7c

08006164 <sx127x_irq_callback>:
{
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8006168:	fa92 f6a2 	rbit	r6, r2
 800616c:	fab6 f686 	clz	r6, r6
 8006170:	b90a      	cbnz	r2, 8006176 <sx127x_irq_callback+0x12>
 8006172:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8006176:	2400      	movs	r4, #0
 8006178:	e000      	b.n	800617c <sx127x_irq_callback+0x18>
 800617a:	3401      	adds	r4, #1
 800617c:	2c03      	cmp	r4, #3
 800617e:	d813      	bhi.n	80061a8 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8006180:	1d23      	adds	r3, r4, #4
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <sx127x_irq_callback+0x48>)
 8006184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	42ab      	cmp	r3, r5
 800618c:	d1f5      	bne.n	800617a <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 800618e:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <sx127x_irq_callback+0x4c>)
 8006190:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006194:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8006196:	42b3      	cmp	r3, r6
 8006198:	d1ef      	bne.n	800617a <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 800619a:	1ca0      	adds	r0, r4, #2
 800619c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80061a0:	3004      	adds	r0, #4
 80061a2:	f003 fadf 	bl	8009764 <k_work_submit>
 80061a6:	e7e8      	b.n	800617a <sx127x_irq_callback+0x16>
}
 80061a8:	bd70      	pop	{r4, r5, r6, pc}
 80061aa:	bf00      	nop
 80061ac:	20000b7c 	.word	0x20000b7c
 80061b0:	08010084 	.word	0x08010084

080061b4 <SX1276Reset>:
{
 80061b4:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <SX1276Reset+0x64>)
 80061b8:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80061ba:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f013 0f01 	tst.w	r3, #1
 80061c2:	d11b      	bne.n	80061fc <SX1276Reset+0x48>
 80061c4:	2301      	movs	r3, #1
	if (value != 0)	{
 80061c6:	b1db      	cbz	r3, 8006200 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 80061c8:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2101      	movs	r1, #1
 80061ce:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 80061d0:	200a      	movs	r0, #10
 80061d2:	2100      	movs	r1, #0
 80061d4:	f003 fe96 	bl	8009f04 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <SX1276Reset+0x64>)
 80061da:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 80061dc:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f013 0f01 	tst.w	r3, #1
 80061e4:	d111      	bne.n	800620a <SX1276Reset+0x56>
 80061e6:	2300      	movs	r3, #0
	if (value != 0)	{
 80061e8:	b18b      	cbz	r3, 800620e <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 80061ea:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2101      	movs	r1, #1
 80061f0:	4798      	blx	r3
 80061f2:	203c      	movs	r0, #60	; 0x3c
 80061f4:	2100      	movs	r1, #0
 80061f6:	f003 fe85 	bl	8009f04 <z_impl_k_sleep>
}
 80061fa:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e7e2      	b.n	80061c6 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8006200:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2101      	movs	r1, #1
 8006206:	4798      	blx	r3
 8006208:	e7e2      	b.n	80061d0 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 800620a:	2301      	movs	r3, #1
 800620c:	e7ec      	b.n	80061e8 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 800620e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2101      	movs	r1, #1
 8006214:	4798      	blx	r3
 8006216:	e7ec      	b.n	80061f2 <SX1276Reset+0x3e>
 8006218:	20000b7c 	.word	0x20000b7c

0800621c <SX1276IoIrqInit>:
{
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8006220:	2400      	movs	r4, #0
 8006222:	e052      	b.n	80062ca <SX1276IoIrqInit+0xae>
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <SX1276IoIrqInit+0x158>)
 8006226:	4a54      	ldr	r2, [pc, #336]	; (8006378 <SX1276IoIrqInit+0x15c>)
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot get pointer to %s device",
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	2101      	movs	r1, #1
 8006232:	f361 0202 	bfi	r2, r1, #0, #3
 8006236:	f36f 02c5 	bfc	r2, #3, #3
 800623a:	f363 128f 	bfi	r2, r3, #6, #10
 800623e:	4b4f      	ldr	r3, [pc, #316]	; (800637c <SX1276IoIrqInit+0x160>)
 8006240:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 8006244:	484e      	ldr	r0, [pc, #312]	; (8006380 <SX1276IoIrqInit+0x164>)
 8006246:	f7fd fab9 	bl	80037bc <log_1>
}
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800624c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006250:	f013 0f01 	tst.w	r3, #1
 8006254:	d06f      	beq.n	8006336 <SX1276IoIrqInit+0x11a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006256:	2301      	movs	r3, #1
 8006258:	fa03 fc01 	lsl.w	ip, r3, r1
 800625c:	6833      	ldr	r3, [r6, #0]
 800625e:	ea43 030c 	orr.w	r3, r3, ip
 8006262:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8006268:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800626c:	4b45      	ldr	r3, [pc, #276]	; (8006384 <SX1276IoIrqInit+0x168>)
 800626e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8006272:	4b42      	ldr	r3, [pc, #264]	; (800637c <SX1276IoIrqInit+0x160>)
 8006274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006278:	791e      	ldrb	r6, [r3, #4]
 800627a:	2301      	movs	r3, #1
 800627c:	40b3      	lsls	r3, r6
	callback->handler = handler;
 800627e:	4a42      	ldr	r2, [pc, #264]	; (8006388 <SX1276IoIrqInit+0x16c>)
 8006280:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8006282:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8006284:	1d23      	adds	r3, r4, #4
 8006286:	4a41      	ldr	r2, [pc, #260]	; (800638c <SX1276IoIrqInit+0x170>)
 8006288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800628c:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 800628e:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d057      	beq.n	8006346 <SX1276IoIrqInit+0x12a>
	return api->manage_callback(port, callback, true);
 8006296:	2201      	movs	r2, #1
 8006298:	4798      	blx	r3
 800629a:	2800      	cmp	r0, #0
 800629c:	db56      	blt.n	800634c <SX1276IoIrqInit+0x130>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 800629e:	1d23      	adds	r3, r4, #4
 80062a0:	4a3a      	ldr	r2, [pc, #232]	; (800638c <SX1276IoIrqInit+0x170>)
 80062a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062a6:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 80062a8:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 80062aa:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	2301      	movs	r3, #1
 80062b0:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80062b2:	421a      	tst	r2, r3
 80062b4:	d15b      	bne.n	800636e <SX1276IoIrqInit+0x152>
 80062b6:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 80062ba:	698f      	ldr	r7, [r1, #24]
 80062bc:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 80062c0:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 80062c4:	4631      	mov	r1, r6
 80062c6:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80062c8:	3401      	adds	r4, #1
 80062ca:	2c03      	cmp	r4, #3
 80062cc:	d8bd      	bhi.n	800624a <SX1276IoIrqInit+0x2e>
		if (!irqHandlers[i]) {
 80062ce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f8      	beq.n	80062c8 <SX1276IoIrqInit+0xac>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <SX1276IoIrqInit+0x160>)
 80062d8:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80062dc:	f002 fcaa 	bl	8008c34 <z_impl_device_get_binding>
 80062e0:	1d23      	adds	r3, r4, #4
 80062e2:	4a2a      	ldr	r2, [pc, #168]	; (800638c <SX1276IoIrqInit+0x170>)
 80062e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062e8:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d09a      	beq.n	8006224 <SX1276IoIrqInit+0x8>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 80062ee:	4e27      	ldr	r6, [pc, #156]	; (800638c <SX1276IoIrqInit+0x170>)
 80062f0:	1ca0      	adds	r0, r4, #2
 80062f2:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 80062f6:	4926      	ldr	r1, [pc, #152]	; (8006390 <SX1276IoIrqInit+0x174>)
 80062f8:	3004      	adds	r0, #4
 80062fa:	f007 fd3d 	bl	800dd78 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8006304:	6870      	ldr	r0, [r6, #4]
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <SX1276IoIrqInit+0x160>)
 8006308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800630c:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 800630e:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8006310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8006318:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 800631a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800631c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006320:	2a00      	cmp	r2, #0
 8006322:	d093      	beq.n	800624c <SX1276IoIrqInit+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006324:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006328:	d090      	beq.n	800624c <SX1276IoIrqInit+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800632a:	f013 0f01 	tst.w	r3, #1
 800632e:	d08d      	beq.n	800624c <SX1276IoIrqInit+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006330:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006334:	e78a      	b.n	800624c <SX1276IoIrqInit+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006336:	2301      	movs	r3, #1
 8006338:	fa03 fc01 	lsl.w	ip, r3, r1
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	ea23 030c 	bic.w	r3, r3, ip
 8006342:	6033      	str	r3, [r6, #0]
 8006344:	e78e      	b.n	8006264 <SX1276IoIrqInit+0x48>
		return -ENOTSUP;
 8006346:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800634a:	e7a6      	b.n	800629a <SX1276IoIrqInit+0x7e>
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <SX1276IoIrqInit+0x158>)
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <SX1276IoIrqInit+0x15c>)
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set gpio callback.");
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	2201      	movs	r2, #1
 800635a:	f362 0102 	bfi	r1, r2, #0, #3
 800635e:	f36f 01c5 	bfc	r1, #3, #3
 8006362:	f363 118f 	bfi	r1, r3, #6, #10
 8006366:	480b      	ldr	r0, [pc, #44]	; (8006394 <SX1276IoIrqInit+0x178>)
 8006368:	f7fd f9fe 	bl	8003768 <log_0>
			return;
 800636c:	e76d      	b.n	800624a <SX1276IoIrqInit+0x2e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 800636e:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8006372:	e7a2      	b.n	80062ba <SX1276IoIrqInit+0x9e>
 8006374:	0800efb4 	.word	0x0800efb4
 8006378:	0800ef6c 	.word	0x0800ef6c
 800637c:	08010084 	.word	0x08010084
 8006380:	0800fe68 	.word	0x0800fe68
 8006384:	20000b4c 	.word	0x20000b4c
 8006388:	08006165 	.word	0x08006165
 800638c:	20000b7c 	.word	0x20000b7c
 8006390:	080060f5 	.word	0x080060f5
 8006394:	0800fee4 	.word	0x0800fee4

08006398 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8006398:	b510      	push	{r4, lr}
 800639a:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 800639c:	b2c0      	uxtb	r0, r0
 800639e:	f007 f941 	bl	800d624 <sx127x_read>
	if (ret < 0) {
 80063a2:	2800      	cmp	r0, #0
 80063a4:	db00      	blt.n	80063a8 <SX1276ReadBuffer+0x10>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 80063a6:	bd10      	pop	{r4, pc}
 80063a8:	4b08      	ldr	r3, [pc, #32]	; (80063cc <SX1276ReadBuffer+0x34>)
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <SX1276ReadBuffer+0x38>)
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read address: 0x%x", addr);
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	2101      	movs	r1, #1
 80063b6:	f361 0202 	bfi	r2, r1, #0, #3
 80063ba:	f36f 02c5 	bfc	r2, #3, #3
 80063be:	f363 128f 	bfi	r2, r3, #6, #10
 80063c2:	4621      	mov	r1, r4
 80063c4:	4803      	ldr	r0, [pc, #12]	; (80063d4 <SX1276ReadBuffer+0x3c>)
 80063c6:	f7fd f9f9 	bl	80037bc <log_1>
}
 80063ca:	e7ec      	b.n	80063a6 <SX1276ReadBuffer+0xe>
 80063cc:	0800efb4 	.word	0x0800efb4
 80063d0:	0800ef6c 	.word	0x0800ef6c
 80063d4:	0800ff04 	.word	0x0800ff04

080063d8 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 80063d8:	b530      	push	{r4, r5, lr}
 80063da:	b083      	sub	sp, #12
 80063dc:	4604      	mov	r4, r0
 80063de:	4864      	ldr	r0, [pc, #400]	; (8006570 <sx127x_lora_init+0x198>)
 80063e0:	f002 fc28 	bl	8008c34 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 80063e4:	4b63      	ldr	r3, [pc, #396]	; (8006574 <sx127x_lora_init+0x19c>)
 80063e6:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 80063e8:	b300      	cbz	r0, 800642c <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 80063ea:	4b62      	ldr	r3, [pc, #392]	; (8006574 <sx127x_lora_init+0x19c>)
 80063ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063f0:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 80063f2:	4a61      	ldr	r2, [pc, #388]	; (8006578 <sx127x_lora_init+0x1a0>)
 80063f4:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 80063f6:	2200      	movs	r2, #0
 80063f8:	81da      	strh	r2, [r3, #14]
 80063fa:	4860      	ldr	r0, [pc, #384]	; (800657c <sx127x_lora_init+0x1a4>)
 80063fc:	f002 fc1a 	bl	8008c34 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8006400:	4b5f      	ldr	r3, [pc, #380]	; (8006580 <sx127x_lora_init+0x1a8>)
 8006402:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8006404:	b330      	cbz	r0, 8006454 <sx127x_lora_init+0x7c>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8006406:	4b5e      	ldr	r3, [pc, #376]	; (8006580 <sx127x_lora_init+0x1a8>)
 8006408:	2206      	movs	r2, #6
 800640a:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 800640c:	2201      	movs	r2, #1
 800640e:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 8006410:	2200      	movs	r2, #0
 8006412:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 8006414:	4857      	ldr	r0, [pc, #348]	; (8006574 <sx127x_lora_init+0x19c>)
 8006416:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8006418:	f641 2307 	movw	r3, #6663	; 0x1a07
 800641c:	4957      	ldr	r1, [pc, #348]	; (800657c <sx127x_lora_init+0x1a4>)
 800641e:	f7ff fc57 	bl	8005cd0 <__sx12xx_configure_pin>
	if (ret) {
 8006422:	4605      	mov	r5, r0
 8006424:	b350      	cbz	r0, 800647c <sx127x_lora_init+0xa4>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8006426:	4628      	mov	r0, r5
 8006428:	b003      	add	sp, #12
 800642a:	bd30      	pop	{r4, r5, pc}
 800642c:	4b55      	ldr	r3, [pc, #340]	; (8006584 <sx127x_lora_init+0x1ac>)
 800642e:	4a56      	ldr	r2, [pc, #344]	; (8006588 <sx127x_lora_init+0x1b0>)
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	2101      	movs	r1, #1
 800643a:	f361 0202 	bfi	r2, r1, #0, #3
 800643e:	f36f 02c5 	bfc	r2, #3, #3
 8006442:	f363 128f 	bfi	r2, r3, #6, #10
 8006446:	494a      	ldr	r1, [pc, #296]	; (8006570 <sx127x_lora_init+0x198>)
 8006448:	4850      	ldr	r0, [pc, #320]	; (800658c <sx127x_lora_init+0x1b4>)
 800644a:	f7fd f9b7 	bl	80037bc <log_1>
		return -EINVAL;
 800644e:	f06f 0515 	mvn.w	r5, #21
 8006452:	e7e8      	b.n	8006426 <sx127x_lora_init+0x4e>
 8006454:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <sx127x_lora_init+0x1ac>)
 8006456:	4a4c      	ldr	r2, [pc, #304]	; (8006588 <sx127x_lora_init+0x1b0>)
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	2101      	movs	r1, #1
 8006462:	f361 0202 	bfi	r2, r1, #0, #3
 8006466:	f36f 02c5 	bfc	r2, #3, #3
 800646a:	f363 128f 	bfi	r2, r3, #6, #10
 800646e:	4943      	ldr	r1, [pc, #268]	; (800657c <sx127x_lora_init+0x1a4>)
 8006470:	4846      	ldr	r0, [pc, #280]	; (800658c <sx127x_lora_init+0x1b4>)
 8006472:	f7fd f9a3 	bl	80037bc <log_1>
		return -EIO;
 8006476:	f06f 0504 	mvn.w	r5, #4
 800647a:	e7d4      	b.n	8006426 <sx127x_lora_init+0x4e>
 800647c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006480:	2100      	movs	r1, #0
 8006482:	f003 fd3f 	bl	8009f04 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8006486:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <sx127x_lora_init+0x19c>)
 8006488:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 800648a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f013 0f01 	tst.w	r3, #1
 8006492:	d140      	bne.n	8006516 <sx127x_lora_init+0x13e>
 8006494:	462b      	mov	r3, r5
	if (value != 0)	{
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03f      	beq.n	800651a <sx127x_lora_init+0x142>
	const struct gpio_driver_api *api =
 800649a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2101      	movs	r1, #1
 80064a0:	4798      	blx	r3
 80064a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064a6:	2100      	movs	r1, #0
 80064a8:	f003 fd2c 	bl	8009f04 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 80064ac:	2201      	movs	r2, #1
 80064ae:	f10d 0107 	add.w	r1, sp, #7
 80064b2:	2042      	movs	r0, #66	; 0x42
 80064b4:	f007 f8b6 	bl	800d624 <sx127x_read>
	if (ret < 0) {
 80064b8:	2800      	cmp	r0, #0
 80064ba:	db33      	blt.n	8006524 <sx127x_lora_init+0x14c>
 80064bc:	4b31      	ldr	r3, [pc, #196]	; (8006584 <sx127x_lora_init+0x1ac>)
 80064be:	4a32      	ldr	r2, [pc, #200]	; (8006588 <sx127x_lora_init+0x1b0>)
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	08db      	lsrs	r3, r3, #3
	LOG_INF("SX127x version 0x%02x found", regval);
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	2103      	movs	r1, #3
 80064ca:	f361 0202 	bfi	r2, r1, #0, #3
 80064ce:	f36f 02c5 	bfc	r2, #3, #3
 80064d2:	f363 128f 	bfi	r2, r3, #6, #10
 80064d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80064da:	482d      	ldr	r0, [pc, #180]	; (8006590 <sx127x_lora_init+0x1b8>)
 80064dc:	f7fd f96e 	bl	80037bc <log_1>
	ret = sx127x_antenna_configure();
 80064e0:	f007 f899 	bl	800d616 <sx127x_antenna_configure>
	if (ret < 0) {
 80064e4:	2800      	cmp	r0, #0
 80064e6:	db30      	blt.n	800654a <sx127x_lora_init+0x172>
	ret = sx12xx_init(dev);
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff fddf 	bl	80060ac <sx12xx_init>
	if (ret < 0) {
 80064ee:	1e04      	subs	r4, r0, #0
 80064f0:	da99      	bge.n	8006426 <sx127x_lora_init+0x4e>
 80064f2:	4b24      	ldr	r3, [pc, #144]	; (8006584 <sx127x_lora_init+0x1ac>)
 80064f4:	4a24      	ldr	r2, [pc, #144]	; (8006588 <sx127x_lora_init+0x1b0>)
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize SX12xx common");
 80064fa:	f04f 0100 	mov.w	r1, #0
 80064fe:	2201      	movs	r2, #1
 8006500:	f362 0102 	bfi	r1, r2, #0, #3
 8006504:	f36f 01c5 	bfc	r1, #3, #3
 8006508:	f363 118f 	bfi	r1, r3, #6, #10
 800650c:	4821      	ldr	r0, [pc, #132]	; (8006594 <sx127x_lora_init+0x1bc>)
 800650e:	f7fd f92b 	bl	8003768 <log_0>
		return ret;
 8006512:	4625      	mov	r5, r4
 8006514:	e787      	b.n	8006426 <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8006516:	2301      	movs	r3, #1
 8006518:	e7bd      	b.n	8006496 <sx127x_lora_init+0xbe>
	const struct gpio_driver_api *api =
 800651a:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2101      	movs	r1, #1
 8006520:	4798      	blx	r3
 8006522:	e7be      	b.n	80064a2 <sx127x_lora_init+0xca>
 8006524:	4b17      	ldr	r3, [pc, #92]	; (8006584 <sx127x_lora_init+0x1ac>)
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <sx127x_lora_init+0x1b0>)
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read version info");
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	2201      	movs	r2, #1
 8006532:	f362 0102 	bfi	r1, r2, #0, #3
 8006536:	f36f 01c5 	bfc	r1, #3, #3
 800653a:	f363 118f 	bfi	r1, r3, #6, #10
 800653e:	4816      	ldr	r0, [pc, #88]	; (8006598 <sx127x_lora_init+0x1c0>)
 8006540:	f7fd f912 	bl	8003768 <log_0>
		return -EIO;
 8006544:	f06f 0504 	mvn.w	r5, #4
 8006548:	e76d      	b.n	8006426 <sx127x_lora_init+0x4e>
 800654a:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <sx127x_lora_init+0x1ac>)
 800654c:	4a0e      	ldr	r2, [pc, #56]	; (8006588 <sx127x_lora_init+0x1b0>)
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to configure antenna");
 8006552:	f04f 0100 	mov.w	r1, #0
 8006556:	2201      	movs	r2, #1
 8006558:	f362 0102 	bfi	r1, r2, #0, #3
 800655c:	f36f 01c5 	bfc	r1, #3, #3
 8006560:	f363 118f 	bfi	r1, r3, #6, #10
 8006564:	480d      	ldr	r0, [pc, #52]	; (800659c <sx127x_lora_init+0x1c4>)
 8006566:	f7fd f8ff 	bl	8003768 <log_0>
		return -EIO;
 800656a:	f06f 0504 	mvn.w	r5, #4
 800656e:	e75a      	b.n	8006426 <sx127x_lora_init+0x4e>
 8006570:	0800fe04 	.word	0x0800fe04
 8006574:	20000b7c 	.word	0x20000b7c
 8006578:	0007a120 	.word	0x0007a120
 800657c:	0800faf0 	.word	0x0800faf0
 8006580:	20000be0 	.word	0x20000be0
 8006584:	0800efb4 	.word	0x0800efb4
 8006588:	0800ef6c 	.word	0x0800ef6c
 800658c:	0800fe68 	.word	0x0800fe68
 8006590:	0800ff40 	.word	0x0800ff40
 8006594:	0800ff78 	.word	0x0800ff78
 8006598:	0800ff24 	.word	0x0800ff24
 800659c:	0800ff5c 	.word	0x0800ff5c

080065a0 <SX1276WriteBuffer>:
{
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 80065a4:	b2c0      	uxtb	r0, r0
 80065a6:	f007 f844 	bl	800d632 <sx127x_write>
	if (ret < 0) {
 80065aa:	2800      	cmp	r0, #0
 80065ac:	db00      	blt.n	80065b0 <SX1276WriteBuffer+0x10>
}
 80065ae:	bd10      	pop	{r4, pc}
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <SX1276WriteBuffer+0x34>)
 80065b2:	4a09      	ldr	r2, [pc, #36]	; (80065d8 <SX1276WriteBuffer+0x38>)
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write address: 0x%x", addr);
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	2101      	movs	r1, #1
 80065be:	f361 0202 	bfi	r2, r1, #0, #3
 80065c2:	f36f 02c5 	bfc	r2, #3, #3
 80065c6:	f363 128f 	bfi	r2, r3, #6, #10
 80065ca:	4621      	mov	r1, r4
 80065cc:	4803      	ldr	r0, [pc, #12]	; (80065dc <SX1276WriteBuffer+0x3c>)
 80065ce:	f7fd f8f5 	bl	80037bc <log_1>
}
 80065d2:	e7ec      	b.n	80065ae <SX1276WriteBuffer+0xe>
 80065d4:	0800efb4 	.word	0x0800efb4
 80065d8:	0800ef6c 	.word	0x0800ef6c
 80065dc:	0800ff9c 	.word	0x0800ff9c

080065e0 <SX1276SetRfTxPower>:
{
 80065e0:	b530      	push	{r4, r5, lr}
 80065e2:	b083      	sub	sp, #12
 80065e4:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 80065ec:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 80065f0:	2201      	movs	r2, #1
 80065f2:	f10d 0106 	add.w	r1, sp, #6
 80065f6:	204d      	movs	r0, #77	; 0x4d
 80065f8:	f007 f814 	bl	800d624 <sx127x_read>
	if (ret < 0) {
 80065fc:	2800      	cmp	r0, #0
 80065fe:	db2e      	blt.n	800665e <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8006600:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8006604:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8006608:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 800660c:	2214      	movs	r2, #20
 800660e:	2102      	movs	r1, #2
 8006610:	4628      	mov	r0, r5
 8006612:	f006 fff6 	bl	800d602 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8006616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800661a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661e:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 8006622:	2811      	cmp	r0, #17
 8006624:	dd2c      	ble.n	8006680 <SX1276SetRfTxPower+0xa0>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8006626:	f044 0407 	orr.w	r4, r4, #7
 800662a:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 800662e:	3805      	subs	r0, #5
 8006630:	f000 000f 	and.w	r0, r0, #15
 8006634:	4318      	orrs	r0, r3
 8006636:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 800663a:	2201      	movs	r2, #1
 800663c:	f10d 0107 	add.w	r1, sp, #7
 8006640:	2009      	movs	r0, #9
 8006642:	f006 fff6 	bl	800d632 <sx127x_write>
	if (ret < 0) {
 8006646:	2800      	cmp	r0, #0
 8006648:	db25      	blt.n	8006696 <SX1276SetRfTxPower+0xb6>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 800664a:	2201      	movs	r2, #1
 800664c:	f10d 0106 	add.w	r1, sp, #6
 8006650:	204d      	movs	r0, #77	; 0x4d
 8006652:	f006 ffee 	bl	800d632 <sx127x_write>
	if (ret < 0) {
 8006656:	2800      	cmp	r0, #0
 8006658:	db2e      	blt.n	80066b8 <SX1276SetRfTxPower+0xd8>
}
 800665a:	b003      	add	sp, #12
 800665c:	bd30      	pop	{r4, r5, pc}
 800665e:	4b1f      	ldr	r3, [pc, #124]	; (80066dc <SX1276SetRfTxPower+0xfc>)
 8006660:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <SX1276SetRfTxPower+0x100>)
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read PA dac");
 8006666:	f04f 0100 	mov.w	r1, #0
 800666a:	2201      	movs	r2, #1
 800666c:	f362 0102 	bfi	r1, r2, #0, #3
 8006670:	f36f 01c5 	bfc	r1, #3, #3
 8006674:	f363 118f 	bfi	r1, r3, #6, #10
 8006678:	481a      	ldr	r0, [pc, #104]	; (80066e4 <SX1276SetRfTxPower+0x104>)
 800667a:	f7fd f875 	bl	8003768 <log_0>
		return;
 800667e:	e7ec      	b.n	800665a <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8006680:	f044 0404 	orr.w	r4, r4, #4
 8006684:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8006688:	3802      	subs	r0, #2
 800668a:	f000 000f 	and.w	r0, r0, #15
 800668e:	4318      	orrs	r0, r3
 8006690:	f88d 0007 	strb.w	r0, [sp, #7]
 8006694:	e7d1      	b.n	800663a <SX1276SetRfTxPower+0x5a>
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <SX1276SetRfTxPower+0xfc>)
 8006698:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <SX1276SetRfTxPower+0x100>)
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA config");
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	2201      	movs	r2, #1
 80066a4:	f362 0102 	bfi	r1, r2, #0, #3
 80066a8:	f36f 01c5 	bfc	r1, #3, #3
 80066ac:	f363 118f 	bfi	r1, r3, #6, #10
 80066b0:	480d      	ldr	r0, [pc, #52]	; (80066e8 <SX1276SetRfTxPower+0x108>)
 80066b2:	f7fd f859 	bl	8003768 <log_0>
		return;
 80066b6:	e7d0      	b.n	800665a <SX1276SetRfTxPower+0x7a>
 80066b8:	4b08      	ldr	r3, [pc, #32]	; (80066dc <SX1276SetRfTxPower+0xfc>)
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <SX1276SetRfTxPower+0x100>)
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA dac");
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	2201      	movs	r2, #1
 80066c6:	f362 0102 	bfi	r1, r2, #0, #3
 80066ca:	f36f 01c5 	bfc	r1, #3, #3
 80066ce:	f363 118f 	bfi	r1, r3, #6, #10
 80066d2:	4806      	ldr	r0, [pc, #24]	; (80066ec <SX1276SetRfTxPower+0x10c>)
 80066d4:	f7fd f848 	bl	8003768 <log_0>
		return;
 80066d8:	e7bf      	b.n	800665a <SX1276SetRfTxPower+0x7a>
 80066da:	bf00      	nop
 80066dc:	0800efb4 	.word	0x0800efb4
 80066e0:	0800ef6c 	.word	0x0800ef6c
 80066e4:	0800ffbc 	.word	0x0800ffbc
 80066e8:	0800ffd4 	.word	0x0800ffd4
 80066ec:	0800fff0 	.word	0x0800fff0

080066f0 <SX1276GetDio1PinState>:
{
 80066f0:	b510      	push	{r4, lr}
 80066f2:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <SX1276GetDio1PinState+0x34>)
 80066f6:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 80066f8:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 80066fa:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	a901      	add	r1, sp, #4
 8006700:	4798      	blx	r3
	if (ret == 0) {
 8006702:	4603      	mov	r3, r0
 8006704:	b918      	cbnz	r0, 800670e <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	9a01      	ldr	r2, [sp, #4]
 800670a:	404a      	eors	r2, r1
 800670c:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 800670e:	b913      	cbnz	r3, 8006716 <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	dc02      	bgt.n	8006720 <SX1276GetDio1PinState+0x30>
	return 0U;
 800671a:	2000      	movs	r0, #0
}
 800671c:	b002      	add	sp, #8
 800671e:	bd10      	pop	{r4, pc}
		return 1U;
 8006720:	2001      	movs	r0, #1
 8006722:	e7fb      	b.n	800671c <SX1276GetDio1PinState+0x2c>
 8006724:	20000b7c 	.word	0x20000b7c

08006728 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006728:	4b09      	ldr	r3, [pc, #36]	; (8006750 <TimerInsertTimer+0x28>)
 800672a:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 800672c:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 800672e:	e001      	b.n	8006734 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8006730:	461a      	mov	r2, r3
            next = next->Next;
 8006732:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8006734:	6951      	ldr	r1, [r2, #20]
 8006736:	b139      	cbz	r1, 8006748 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	f8d0 c000 	ldr.w	ip, [r0]
 800673e:	458c      	cmp	ip, r1
 8006740:	d8f6      	bhi.n	8006730 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8006742:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8006744:	6143      	str	r3, [r0, #20]
            return;
 8006746:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 8006748:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	6143      	str	r3, [r0, #20]
}
 800674e:	4770      	bx	lr
 8006750:	20000bec 	.word	0x20000bec

08006754 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <TimerExists+0x18>)
 8006756:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8006758:	e000      	b.n	800675c <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 800675a:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 800675c:	b11b      	cbz	r3, 8006766 <TimerExists+0x12>
        if( cur == obj )
 800675e:	4283      	cmp	r3, r0
 8006760:	d1fb      	bne.n	800675a <TimerExists+0x6>
            return true;
 8006762:	2001      	movs	r0, #1
    }
    return false;
}
 8006764:	4770      	bx	lr
    return false;
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000bec 	.word	0x20000bec

08006770 <TimerInsertNewHeadTimer>:
{
 8006770:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <TimerInsertNewHeadTimer+0x18>)
 8006774:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8006776:	b10b      	cbz	r3, 800677c <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8006778:	2200      	movs	r2, #0
 800677a:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 800677c:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 800677e:	4b02      	ldr	r3, [pc, #8]	; (8006788 <TimerInsertNewHeadTimer+0x18>)
 8006780:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8006782:	f006 ff6a 	bl	800d65a <TimerSetTimeout>
}
 8006786:	bd08      	pop	{r3, pc}
 8006788:	20000bec 	.word	0x20000bec

0800678c <TimerStart>:
{
 800678c:	b510      	push	{r4, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8006792:	a801      	add	r0, sp, #4
 8006794:	f006 ff25 	bl	800d5e2 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006798:	b1f4      	cbz	r4, 80067d8 <TimerStart+0x4c>
 800679a:	4620      	mov	r0, r4
 800679c:	f7ff ffda 	bl	8006754 <TimerExists>
 80067a0:	b9d0      	cbnz	r0, 80067d8 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 80067a2:	6863      	ldr	r3, [r4, #4]
 80067a4:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 80067a6:	2301      	movs	r3, #1
 80067a8:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 80067aa:	2300      	movs	r3, #0
 80067ac:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 80067ae:	4b11      	ldr	r3, [pc, #68]	; (80067f4 <TimerStart+0x68>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b1ab      	cbz	r3, 80067e0 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 80067b4:	f7ff f9d6 	bl	8005b64 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	4418      	add	r0, r3
 80067bc:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 80067be:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <TimerStart+0x68>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4298      	cmp	r0, r3
 80067c6:	d211      	bcs.n	80067ec <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff ffd1 	bl	8006770 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 80067ce:	a801      	add	r0, sp, #4
 80067d0:	f006 ff11 	bl	800d5f6 <BoardCriticalSectionEnd>
}
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 80067d8:	a801      	add	r0, sp, #4
 80067da:	f006 ff0c 	bl	800d5f6 <BoardCriticalSectionEnd>
        return;
 80067de:	e7f9      	b.n	80067d4 <TimerStart+0x48>
        RtcSetTimerContext( );
 80067e0:	f7ff f9ec 	bl	8005bbc <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff ffc3 	bl	8006770 <TimerInsertNewHeadTimer>
 80067ea:	e7f0      	b.n	80067ce <TimerStart+0x42>
            TimerInsertTimer( obj );
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7ff ff9b 	bl	8006728 <TimerInsertTimer>
 80067f2:	e7ec      	b.n	80067ce <TimerStart+0x42>
 80067f4:	20000bec 	.word	0x20000bec

080067f8 <TimerIrqHandler>:
{
 80067f8:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 80067fa:	f7ff f9eb 	bl	8005bd4 <RtcGetTimerContext>
 80067fe:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8006800:	f7ff f9dc 	bl	8005bbc <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8006804:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8006808:	4b1c      	ldr	r3, [pc, #112]	; (800687c <TimerIrqHandler+0x84>)
 800680a:	681e      	ldr	r6, [r3, #0]
 800680c:	b16e      	cbz	r6, 800682a <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800680e:	4632      	mov	r2, r6
 8006810:	e002      	b.n	8006818 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8006812:	2100      	movs	r1, #0
 8006814:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006816:	6952      	ldr	r2, [r2, #20]
 8006818:	6953      	ldr	r3, [r2, #20]
 800681a:	b133      	cbz	r3, 800682a <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 800681c:	6819      	ldr	r1, [r3, #0]
 800681e:	4561      	cmp	r1, ip
 8006820:	d9f7      	bls.n	8006812 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8006822:	1a2c      	subs	r4, r5, r0
 8006824:	4421      	add	r1, r4
 8006826:	6019      	str	r1, [r3, #0]
 8006828:	e7f5      	b.n	8006816 <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 800682a:	b146      	cbz	r6, 800683e <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 800682c:	6972      	ldr	r2, [r6, #20]
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <TimerIrqHandler+0x84>)
 8006830:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8006832:	2300      	movs	r3, #0
 8006834:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006836:	68f3      	ldr	r3, [r6, #12]
 8006838:	b1a3      	cbz	r3, 8006864 <TimerIrqHandler+0x6c>
 800683a:	6930      	ldr	r0, [r6, #16]
 800683c:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800683e:	4b0f      	ldr	r3, [pc, #60]	; (800687c <TimerIrqHandler+0x84>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b18b      	cbz	r3, 8006868 <TimerIrqHandler+0x70>
 8006844:	681c      	ldr	r4, [r3, #0]
 8006846:	f7ff f98d 	bl	8005b64 <RtcGetTimerElapsedTime>
 800684a:	4284      	cmp	r4, r0
 800684c:	d20c      	bcs.n	8006868 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 800684e:	4a0b      	ldr	r2, [pc, #44]	; (800687c <TimerIrqHandler+0x84>)
 8006850:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8006852:	6959      	ldr	r1, [r3, #20]
 8006854:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8006856:	2200      	movs	r2, #0
 8006858:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	b11a      	cbz	r2, 8006866 <TimerIrqHandler+0x6e>
 800685e:	6918      	ldr	r0, [r3, #16]
 8006860:	4790      	blx	r2
 8006862:	e7ec      	b.n	800683e <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8006864:	e7fe      	b.n	8006864 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8006866:	e7fe      	b.n	8006866 <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <TimerIrqHandler+0x84>)
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	b108      	cbz	r0, 8006872 <TimerIrqHandler+0x7a>
 800686e:	7a43      	ldrb	r3, [r0, #9]
 8006870:	b103      	cbz	r3, 8006874 <TimerIrqHandler+0x7c>
}
 8006872:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8006874:	f006 fef1 	bl	800d65a <TimerSetTimeout>
}
 8006878:	e7fb      	b.n	8006872 <TimerIrqHandler+0x7a>
 800687a:	bf00      	nop
 800687c:	20000bec 	.word	0x20000bec

08006880 <TimerStop>:
{
 8006880:	b510      	push	{r4, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8006886:	a801      	add	r0, sp, #4
 8006888:	f006 feab 	bl	800d5e2 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800688c:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <TimerStop+0x7c>)
 800688e:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006890:	b15a      	cbz	r2, 80068aa <TimerStop+0x2a>
 8006892:	b154      	cbz	r4, 80068aa <TimerStop+0x2a>
    obj->IsStarted = false;
 8006894:	2300      	movs	r3, #0
 8006896:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8006898:	42a2      	cmp	r2, r4
 800689a:	d00a      	beq.n	80068b2 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 800689c:	4613      	mov	r3, r2
        while( cur != NULL )
 800689e:	b32b      	cbz	r3, 80068ec <TimerStop+0x6c>
            if( cur == obj )
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d020      	beq.n	80068e6 <TimerStop+0x66>
                prev = cur;
 80068a4:	461a      	mov	r2, r3
                cur = cur->Next;
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	e7f9      	b.n	800689e <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 80068aa:	a801      	add	r0, sp, #4
 80068ac:	f006 fea3 	bl	800d5f6 <BoardCriticalSectionEnd>
        return;
 80068b0:	e01f      	b.n	80068f2 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 80068b2:	7a53      	ldrb	r3, [r2, #9]
 80068b4:	b173      	cbz	r3, 80068d4 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 80068b6:	2300      	movs	r3, #0
 80068b8:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 80068ba:	6950      	ldr	r0, [r2, #20]
 80068bc:	b120      	cbz	r0, 80068c8 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <TimerStop+0x7c>)
 80068c0:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 80068c2:	f006 feca 	bl	800d65a <TimerSetTimeout>
 80068c6:	e011      	b.n	80068ec <TimerStop+0x6c>
                RtcStopAlarm( );
 80068c8:	f7ff f95a 	bl	8005b80 <RtcStopAlarm>
                TimerListHead = NULL;
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <TimerStop+0x7c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e00b      	b.n	80068ec <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 80068d4:	6953      	ldr	r3, [r2, #20]
 80068d6:	b113      	cbz	r3, 80068de <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 80068d8:	4a08      	ldr	r2, [pc, #32]	; (80068fc <TimerStop+0x7c>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	e006      	b.n	80068ec <TimerStop+0x6c>
                TimerListHead = NULL;
 80068de:	4b07      	ldr	r3, [pc, #28]	; (80068fc <TimerStop+0x7c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e002      	b.n	80068ec <TimerStop+0x6c>
                if( cur->Next != NULL )
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	b12b      	cbz	r3, 80068f6 <TimerStop+0x76>
                    prev->Next = cur;
 80068ea:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 80068ec:	a801      	add	r0, sp, #4
 80068ee:	f006 fe82 	bl	800d5f6 <BoardCriticalSectionEnd>
}
 80068f2:	b002      	add	sp, #8
 80068f4:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 80068f6:	2300      	movs	r3, #0
 80068f8:	6153      	str	r3, [r2, #20]
 80068fa:	e7f7      	b.n	80068ec <TimerStop+0x6c>
 80068fc:	20000bec 	.word	0x20000bec

08006900 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006900:	4908      	ldr	r1, [pc, #32]	; (8006924 <SX1276ConvertFreqInHzToPllStep+0x24>)
 8006902:	fba1 3200 	umull	r3, r2, r1, r0
 8006906:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006908:	f643 5309 	movw	r3, #15625	; 0x3d09
 800690c:	fb03 0012 	mls	r0, r3, r2, r0
 8006910:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006914:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8006918:	fba1 1303 	umull	r1, r3, r1, r3
 800691c:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 800691e:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8006922:	4770      	bx	lr
 8006924:	431bde83 	.word	0x431bde83

08006928 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006928:	2300      	movs	r3, #0
 800692a:	e008      	b.n	800693e <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800692c:	e7fe      	b.n	800692c <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <GetFskBandwidthRegValue+0x4c>)
 8006930:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006934:	7908      	ldrb	r0, [r1, #4]
}
 8006936:	bc10      	pop	{r4}
 8006938:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800693a:	3301      	adds	r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b14      	cmp	r3, #20
 8006940:	d817      	bhi.n	8006972 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8006942:	4619      	mov	r1, r3
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <GetFskBandwidthRegValue+0x4c>)
 8006946:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800694a:	4282      	cmp	r2, r0
 800694c:	d8f5      	bhi.n	800693a <GetFskBandwidthRegValue+0x12>
{
 800694e:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	4c08      	ldr	r4, [pc, #32]	; (8006974 <GetFskBandwidthRegValue+0x4c>)
 8006954:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8006958:	4282      	cmp	r2, r0
 800695a:	d8e8      	bhi.n	800692e <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800695c:	3301      	adds	r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b14      	cmp	r3, #20
 8006962:	d8e3      	bhi.n	800692c <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8006964:	4619      	mov	r1, r3
 8006966:	4a03      	ldr	r2, [pc, #12]	; (8006974 <GetFskBandwidthRegValue+0x4c>)
 8006968:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800696c:	4282      	cmp	r2, r0
 800696e:	d8f5      	bhi.n	800695c <GetFskBandwidthRegValue+0x34>
 8006970:	e7ee      	b.n	8006950 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8006972:	e7fe      	b.n	8006972 <GetFskBandwidthRegValue+0x4a>
 8006974:	080100b8 	.word	0x080100b8

08006978 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8006978:	2801      	cmp	r0, #1
 800697a:	d006      	beq.n	800698a <SX1276GetLoRaBandwidthInHz+0x12>
 800697c:	2802      	cmp	r0, #2
 800697e:	d006      	beq.n	800698e <SX1276GetLoRaBandwidthInHz+0x16>
 8006980:	b108      	cbz	r0, 8006986 <SX1276GetLoRaBandwidthInHz+0xe>
 8006982:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8006984:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8006986:	4803      	ldr	r0, [pc, #12]	; (8006994 <SX1276GetLoRaBandwidthInHz+0x1c>)
 8006988:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800698a:	4803      	ldr	r0, [pc, #12]	; (8006998 <SX1276GetLoRaBandwidthInHz+0x20>)
 800698c:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 800698e:	4803      	ldr	r0, [pc, #12]	; (800699c <SX1276GetLoRaBandwidthInHz+0x24>)
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	0001e848 	.word	0x0001e848
 8006998:	0003d090 	.word	0x0003d090
 800699c:	0007a120 	.word	0x0007a120

080069a0 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <SX1276OnDio4Irq+0x1c>)
 80069a2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80069a6:	b93b      	cbnz	r3, 80069b8 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <SX1276OnDio4Irq+0x1c>)
 80069aa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80069ae:	b91b      	cbnz	r3, 80069b8 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80069b0:	4b02      	ldr	r3, [pc, #8]	; (80069bc <SX1276OnDio4Irq+0x1c>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000d24 	.word	0x20000d24

080069c0 <SX1276GetStatus>:
}
 80069c0:	4b01      	ldr	r3, [pc, #4]	; (80069c8 <SX1276GetStatus+0x8>)
 80069c2:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 80069c6:	4770      	bx	lr
 80069c8:	20000d24 	.word	0x20000d24

080069cc <SX1276SetChannel>:
{
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 80069d0:	f7ff ff96 	bl	8006900 <SX1276ConvertFreqInHzToPllStep>
 80069d4:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <SX1276SetChannel+0x30>)
 80069d8:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80069dc:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80069e0:	2006      	movs	r0, #6
 80069e2:	f006 ff31 	bl	800d848 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80069e6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80069ea:	2007      	movs	r0, #7
 80069ec:	f006 ff2c 	bl	800d848 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80069f0:	b2e1      	uxtb	r1, r4
 80069f2:	2008      	movs	r0, #8
 80069f4:	f006 ff28 	bl	800d848 <SX1276Write>
}
 80069f8:	bd38      	pop	{r3, r4, r5, pc}
 80069fa:	bf00      	nop
 80069fc:	20000d24 	.word	0x20000d24

08006a00 <SX1276OnDio3Irq>:
{
 8006a00:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8006a02:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <SX1276OnDio3Irq+0x54>)
 8006a04:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d000      	beq.n	8006a0e <SX1276OnDio3Irq+0xe>
}
 8006a0c:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8006a0e:	2012      	movs	r0, #18
 8006a10:	f006 ff26 	bl	800d860 <SX1276Read>
 8006a14:	f010 0f01 	tst.w	r0, #1
 8006a18:	d00d      	beq.n	8006a36 <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8006a1a:	2105      	movs	r1, #5
 8006a1c:	2012      	movs	r0, #18
 8006a1e:	f006 ff13 	bl	800d848 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <SX1276OnDio3Irq+0x58>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <SX1276OnDio3Irq+0xc>
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0ed      	beq.n	8006a0c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8006a30:	2001      	movs	r0, #1
 8006a32:	4798      	blx	r3
 8006a34:	e7ea      	b.n	8006a0c <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8006a36:	2104      	movs	r1, #4
 8006a38:	2012      	movs	r0, #18
 8006a3a:	f006 ff05 	bl	800d848 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <SX1276OnDio3Irq+0x58>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0e2      	beq.n	8006a0c <SX1276OnDio3Irq+0xc>
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0df      	beq.n	8006a0c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	4798      	blx	r3
}
 8006a50:	e7dc      	b.n	8006a0c <SX1276OnDio3Irq+0xc>
 8006a52:	bf00      	nop
 8006a54:	20000d24 	.word	0x20000d24
 8006a58:	20000bf0 	.word	0x20000bf0

08006a5c <SX1276OnDio2Irq>:
{
 8006a5c:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8006a5e:	4b3a      	ldr	r3, [pc, #232]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006a60:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d002      	beq.n	8006a6e <SX1276OnDio2Irq+0x12>
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d051      	beq.n	8006b10 <SX1276OnDio2Irq+0xb4>
}
 8006a6c:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8006a6e:	4b36      	ldr	r3, [pc, #216]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006a70:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006a74:	b1c3      	cbz	r3, 8006aa8 <SX1276OnDio2Irq+0x4c>
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d1f8      	bne.n	8006a6c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006a7a:	4b33      	ldr	r3, [pc, #204]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006a7c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f3      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8006a84:	2102      	movs	r1, #2
 8006a86:	2012      	movs	r0, #18
 8006a88:	f006 fede 	bl	800d848 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <SX1276OnDio2Irq+0xf0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0eb      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
 8006a94:	695c      	ldr	r4, [r3, #20]
 8006a96:	2c00      	cmp	r4, #0
 8006a98:	d0e8      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8006a9a:	201c      	movs	r0, #28
 8006a9c:	f006 fee0 	bl	800d860 <SX1276Read>
 8006aa0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006aa4:	47a0      	blx	r4
 8006aa6:	e7e1      	b.n	8006a6c <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8006aa8:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aac:	b35b      	cbz	r3, 8006b06 <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8006aae:	4b26      	ldr	r3, [pc, #152]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006ab0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0d9      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
 8006ab8:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006aba:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1d4      	bne.n	8006a6c <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8006ac2:	4823      	ldr	r0, [pc, #140]	; (8006b50 <SX1276OnDio2Irq+0xf4>)
 8006ac4:	f7ff fedc 	bl	8006880 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8006ac8:	4c1f      	ldr	r4, [pc, #124]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006aca:	2301      	movs	r3, #1
 8006acc:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006ad0:	2011      	movs	r0, #17
 8006ad2:	f006 fec5 	bl	800d860 <SX1276Read>
 8006ad6:	0843      	lsrs	r3, r0, #1
 8006ad8:	425b      	negs	r3, r3
 8006ada:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8006ade:	201b      	movs	r0, #27
 8006ae0:	f006 febe 	bl	800d860 <SX1276Read>
 8006ae4:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8006ae6:	201c      	movs	r0, #28
 8006ae8:	f006 feba 	bl	800d860 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8006aec:	4328      	orrs	r0, r5
 8006aee:	f006 fdfe 	bl	800d6ee <SX1276ConvertPllStepToFreqInHz>
 8006af2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8006af6:	200c      	movs	r0, #12
 8006af8:	f006 feb2 	bl	800d860 <SX1276Read>
 8006afc:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8006b00:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8006b04:	e7b2      	b.n	8006a6c <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8006b0e:	e7ce      	b.n	8006aae <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006b12:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d1a8      	bne.n	8006a6c <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <SX1276OnDio2Irq+0xec>)
 8006b1c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0a3      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8006b24:	2102      	movs	r1, #2
 8006b26:	2012      	movs	r0, #18
 8006b28:	f006 fe8e 	bl	800d848 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <SX1276OnDio2Irq+0xf0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d09b      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
 8006b34:	695c      	ldr	r4, [r3, #20]
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d098      	beq.n	8006a6c <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8006b3a:	201c      	movs	r0, #28
 8006b3c:	f006 fe90 	bl	800d860 <SX1276Read>
 8006b40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006b44:	47a0      	blx	r4
}
 8006b46:	e791      	b.n	8006a6c <SX1276OnDio2Irq+0x10>
 8006b48:	20000d24 	.word	0x20000d24
 8006b4c:	20000bf0 	.word	0x20000bf0
 8006b50:	20000bf4 	.word	0x20000bf4

08006b54 <SX1276OnDio1Irq>:
{
 8006b54:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 8006b56:	4b4c      	ldr	r3, [pc, #304]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006b58:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d002      	beq.n	8006b66 <SX1276OnDio1Irq+0x12>
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d063      	beq.n	8006c2c <SX1276OnDio1Irq+0xd8>
}
 8006b64:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 8006b66:	4b48      	ldr	r3, [pc, #288]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006b68:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006b6c:	b1cb      	cbz	r3, 8006ba2 <SX1276OnDio1Irq+0x4e>
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d1f8      	bne.n	8006b64 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8006b72:	f7ff fdbd 	bl	80066f0 <SX1276GetDio1PinState>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d0f4      	beq.n	8006b64 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 8006b7a:	4844      	ldr	r0, [pc, #272]	; (8006c8c <SX1276OnDio1Irq+0x138>)
 8006b7c:	f7ff fe80 	bl	8006880 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	2012      	movs	r0, #18
 8006b84:	f006 fe60 	bl	800d848 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006b88:	4b3f      	ldr	r3, [pc, #252]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006b90:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <SX1276OnDio1Irq+0x13c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0e5      	beq.n	8006b64 <SX1276OnDio1Irq+0x10>
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0e2      	beq.n	8006b64 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 8006b9e:	4798      	blx	r3
 8006ba0:	e7e0      	b.n	8006b64 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8006ba2:	f7ff fda5 	bl	80066f0 <SX1276GetDio1PinState>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d0dc      	beq.n	8006b64 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 8006baa:	483a      	ldr	r0, [pc, #232]	; (8006c94 <SX1276OnDio1Irq+0x140>)
 8006bac:	f7ff fe68 	bl	8006880 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006bb0:	4b35      	ldr	r3, [pc, #212]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006bb2:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8006bb6:	b95b      	cbnz	r3, 8006bd0 <SX1276OnDio1Irq+0x7c>
 8006bb8:	4b33      	ldr	r3, [pc, #204]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006bba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006bbe:	b93b      	cbnz	r3, 8006bd0 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006bc0:	4b31      	ldr	r3, [pc, #196]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006bc2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006bc6:	b9f3      	cbnz	r3, 8006c06 <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8006bc8:	2101      	movs	r1, #1
 8006bca:	4833      	ldr	r0, [pc, #204]	; (8006c98 <SX1276OnDio1Irq+0x144>)
 8006bcc:	f006 fdfc 	bl	800d7c8 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006bd0:	4b2d      	ldr	r3, [pc, #180]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006bd2:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8006bd6:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8006bda:	1a88      	subs	r0, r1, r2
 8006bdc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8006be0:	4298      	cmp	r0, r3
 8006be2:	db17      	blt.n	8006c14 <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	1e59      	subs	r1, r3, #1
 8006be8:	b2c9      	uxtb	r1, r1
 8006bea:	482c      	ldr	r0, [pc, #176]	; (8006c9c <SX1276OnDio1Irq+0x148>)
 8006bec:	4410      	add	r0, r2
 8006bee:	f006 fdeb 	bl	800d7c8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006bf2:	4a25      	ldr	r2, [pc, #148]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006bf4:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8006bf8:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8006c04:	e7ae      	b.n	8006b64 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006c06:	2032      	movs	r0, #50	; 0x32
 8006c08:	f006 fe2a 	bl	800d860 <SX1276Read>
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c0e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8006c12:	e7dd      	b.n	8006bd0 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c14:	1a89      	subs	r1, r1, r2
 8006c16:	b2c9      	uxtb	r1, r1
 8006c18:	4820      	ldr	r0, [pc, #128]	; (8006c9c <SX1276OnDio1Irq+0x148>)
 8006c1a:	4410      	add	r0, r2
 8006c1c:	f006 fdd4 	bl	800d7c8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c20:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c22:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8006c26:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8006c2a:	e79b      	b.n	8006b64 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 8006c2c:	4b16      	ldr	r3, [pc, #88]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c2e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d196      	bne.n	8006b64 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 8006c36:	f7ff fd5b 	bl	80066f0 <SX1276GetDio1PinState>
 8006c3a:	2801      	cmp	r0, #1
 8006c3c:	d092      	beq.n	8006b64 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c40:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8006c44:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8006c48:	eba0 0c02 	sub.w	ip, r0, r2
 8006c4c:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8006c50:	458c      	cmp	ip, r1
 8006c52:	dd0c      	ble.n	8006c6e <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8006c54:	4811      	ldr	r0, [pc, #68]	; (8006c9c <SX1276OnDio1Irq+0x148>)
 8006c56:	4410      	add	r0, r2
 8006c58:	f006 fdbd 	bl	800d7d6 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c5e:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8006c62:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 8006c66:	440a      	add	r2, r1
 8006c68:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8006c6c:	e77a      	b.n	8006b64 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006c6e:	1a81      	subs	r1, r0, r2
 8006c70:	b2c9      	uxtb	r1, r1
 8006c72:	480a      	ldr	r0, [pc, #40]	; (8006c9c <SX1276OnDio1Irq+0x148>)
 8006c74:	4410      	add	r0, r2
 8006c76:	f006 fdae 	bl	800d7d6 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8006c7a:	4b03      	ldr	r3, [pc, #12]	; (8006c88 <SX1276OnDio1Irq+0x134>)
 8006c7c:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8006c80:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8006c84:	e76e      	b.n	8006b64 <SX1276OnDio1Irq+0x10>
 8006c86:	bf00      	nop
 8006c88:	20000d24 	.word	0x20000d24
 8006c8c:	20000c0c 	.word	0x20000c0c
 8006c90:	20000bf0 	.word	0x20000bf0
 8006c94:	20000bf4 	.word	0x20000bf4
 8006c98:	20000e3a 	.word	0x20000e3a
 8006c9c:	20000c24 	.word	0x20000c24

08006ca0 <SX1276OnDio0Irq>:
{
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8006caa:	4bb0      	ldr	r3, [pc, #704]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006cac:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d004      	beq.n	8006cbe <SX1276OnDio0Irq+0x1e>
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	f000 813c 	beq.w	8006f32 <SX1276OnDio0Irq+0x292>
}
 8006cba:	b002      	add	sp, #8
 8006cbc:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8006cbe:	4bab      	ldr	r3, [pc, #684]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006cc0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006cc4:	b343      	cbz	r3, 8006d18 <SX1276OnDio0Irq+0x78>
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d1f7      	bne.n	8006cba <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8006cca:	2140      	movs	r1, #64	; 0x40
 8006ccc:	2012      	movs	r0, #18
 8006cce:	f006 fdbb 	bl	800d848 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006cd2:	2012      	movs	r0, #18
 8006cd4:	f006 fdc4 	bl	800d860 <SX1276Read>
 8006cd8:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006cdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006ce0:	f013 0f20 	tst.w	r3, #32
 8006ce4:	f000 80bd 	beq.w	8006e62 <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006ce8:	2120      	movs	r1, #32
 8006cea:	2012      	movs	r0, #18
 8006cec:	f006 fdac 	bl	800d848 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006cf0:	4b9e      	ldr	r3, [pc, #632]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006cf2:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8006cf6:	b91b      	cbnz	r3, 8006d00 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8006cf8:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8006d00:	489b      	ldr	r0, [pc, #620]	; (8006f70 <SX1276OnDio0Irq+0x2d0>)
 8006d02:	f7ff fdbd 	bl	8006880 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006d06:	4b9b      	ldr	r3, [pc, #620]	; (8006f74 <SX1276OnDio0Irq+0x2d4>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0d5      	beq.n	8006cba <SX1276OnDio0Irq+0x1a>
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0d2      	beq.n	8006cba <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 8006d14:	4798      	blx	r3
 8006d16:	e7d0      	b.n	8006cba <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006d18:	4b94      	ldr	r3, [pc, #592]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d1a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006d1e:	bb0b      	cbnz	r3, 8006d64 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006d20:	4b92      	ldr	r3, [pc, #584]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d22:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d15e      	bne.n	8006de8 <SX1276OnDio0Irq+0x148>
 8006d2a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d15a      	bne.n	8006de8 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006d32:	4b8e      	ldr	r3, [pc, #568]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d34:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14e      	bne.n	8006dda <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	488e      	ldr	r0, [pc, #568]	; (8006f78 <SX1276OnDio0Irq+0x2d8>)
 8006d40:	f006 fd42 	bl	800d7c8 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006d44:	4c89      	ldr	r4, [pc, #548]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d46:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006d4a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8006d4e:	1ac9      	subs	r1, r1, r3
 8006d50:	b2c9      	uxtb	r1, r1
 8006d52:	488a      	ldr	r0, [pc, #552]	; (8006f7c <SX1276OnDio0Irq+0x2dc>)
 8006d54:	4418      	add	r0, r3
 8006d56:	f006 fd37 	bl	800d7c8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006d5a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006d5e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8006d62:	e04e      	b.n	8006e02 <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006d64:	203f      	movs	r0, #63	; 0x3f
 8006d66:	f006 fd7b 	bl	800d860 <SX1276Read>
 8006d6a:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006d6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006d72:	f013 0f02 	tst.w	r3, #2
 8006d76:	d1d3      	bne.n	8006d20 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006d78:	210b      	movs	r1, #11
 8006d7a:	203e      	movs	r0, #62	; 0x3e
 8006d7c:	f006 fd64 	bl	800d848 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006d80:	2110      	movs	r1, #16
 8006d82:	203f      	movs	r0, #63	; 0x3f
 8006d84:	f006 fd60 	bl	800d848 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006d88:	4879      	ldr	r0, [pc, #484]	; (8006f70 <SX1276OnDio0Irq+0x2d0>)
 8006d8a:	f7ff fd79 	bl	8006880 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006d8e:	4b77      	ldr	r3, [pc, #476]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d90:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006d94:	b9bb      	cbnz	r3, 8006dc6 <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 8006d96:	487a      	ldr	r0, [pc, #488]	; (8006f80 <SX1276OnDio0Irq+0x2e0>)
 8006d98:	f7ff fd72 	bl	8006880 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8006d9c:	4b73      	ldr	r3, [pc, #460]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006da4:	4b73      	ldr	r3, [pc, #460]	; (8006f74 <SX1276OnDio0Irq+0x2d4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b113      	cbz	r3, 8006db0 <SX1276OnDio0Irq+0x110>
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	b103      	cbz	r3, 8006db0 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 8006dae:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006db0:	4b6e      	ldr	r3, [pc, #440]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006db8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006dbc:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006dc0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8006dc4:	e779      	b.n	8006cba <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006dc6:	200d      	movs	r0, #13
 8006dc8:	f006 fd4a 	bl	800d860 <SX1276Read>
 8006dcc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006dd0:	b2c9      	uxtb	r1, r1
 8006dd2:	200d      	movs	r0, #13
 8006dd4:	f006 fd38 	bl	800d848 <SX1276Write>
 8006dd8:	e7e4      	b.n	8006da4 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006dda:	2032      	movs	r0, #50	; 0x32
 8006ddc:	f006 fd40 	bl	800d860 <SX1276Read>
 8006de0:	4b62      	ldr	r3, [pc, #392]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006de2:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8006de6:	e7ad      	b.n	8006d44 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006de8:	4c60      	ldr	r4, [pc, #384]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006dea:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006dee:	1ac9      	subs	r1, r1, r3
 8006df0:	b2c9      	uxtb	r1, r1
 8006df2:	4862      	ldr	r0, [pc, #392]	; (8006f7c <SX1276OnDio0Irq+0x2dc>)
 8006df4:	4418      	add	r0, r3
 8006df6:	f006 fce7 	bl	800d7c8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006dfa:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006dfe:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 8006e02:	485b      	ldr	r0, [pc, #364]	; (8006f70 <SX1276OnDio0Irq+0x2d0>)
 8006e04:	f7ff fd3c 	bl	8006880 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006e08:	4b58      	ldr	r3, [pc, #352]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e0a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006e0e:	b9f3      	cbnz	r3, 8006e4e <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 8006e10:	4b56      	ldr	r3, [pc, #344]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8006e18:	4859      	ldr	r0, [pc, #356]	; (8006f80 <SX1276OnDio0Irq+0x2e0>)
 8006e1a:	f7ff fd31 	bl	8006880 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006e1e:	4b55      	ldr	r3, [pc, #340]	; (8006f74 <SX1276OnDio0Irq+0x2d4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	b14b      	cbz	r3, 8006e38 <SX1276OnDio0Irq+0x198>
 8006e24:	689c      	ldr	r4, [r3, #8]
 8006e26:	b13c      	cbz	r4, 8006e38 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006e28:	4950      	ldr	r1, [pc, #320]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 8006e30:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 8006e34:	4851      	ldr	r0, [pc, #324]	; (8006f7c <SX1276OnDio0Irq+0x2dc>)
 8006e36:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006e38:	4b4c      	ldr	r3, [pc, #304]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006e40:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006e44:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 8006e48:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 8006e4c:	e735      	b.n	8006cba <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006e4e:	200d      	movs	r0, #13
 8006e50:	f006 fd06 	bl	800d860 <SX1276Read>
 8006e54:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006e58:	b2c9      	uxtb	r1, r1
 8006e5a:	200d      	movs	r0, #13
 8006e5c:	f006 fcf4 	bl	800d848 <SX1276Write>
 8006e60:	e7dd      	b.n	8006e1e <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006e62:	2019      	movs	r0, #25
 8006e64:	f006 fcfc 	bl	800d860 <SX1276Read>
 8006e68:	b243      	sxtb	r3, r0
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	109b      	asrs	r3, r3, #2
 8006e6e:	4c3f      	ldr	r4, [pc, #252]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e70:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006e74:	201a      	movs	r0, #26
 8006e76:	f006 fcf3 	bl	800d860 <SX1276Read>
 8006e7a:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006e7c:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	db39      	blt.n	8006ef8 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006e84:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e86:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006e8a:	4b3e      	ldr	r3, [pc, #248]	; (8006f84 <SX1276OnDio0Irq+0x2e4>)
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d949      	bls.n	8006f24 <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006e90:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006e94:	389d      	subs	r0, #157	; 0x9d
 8006e96:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006e98:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006e9c:	2013      	movs	r0, #19
 8006e9e:	f006 fcdf 	bl	800d860 <SX1276Read>
 8006ea2:	4c32      	ldr	r4, [pc, #200]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006ea4:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	f006 fcd9 	bl	800d860 <SX1276Read>
 8006eae:	4601      	mov	r1, r0
 8006eb0:	200d      	movs	r0, #13
 8006eb2:	f006 fcc9 	bl	800d848 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8006eb6:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8006eba:	4830      	ldr	r0, [pc, #192]	; (8006f7c <SX1276OnDio0Irq+0x2dc>)
 8006ebc:	f006 fc84 	bl	800d7c8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006ec0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8006ec4:	b913      	cbnz	r3, 8006ecc <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8006ecc:	4828      	ldr	r0, [pc, #160]	; (8006f70 <SX1276OnDio0Irq+0x2d0>)
 8006ece:	f7ff fcd7 	bl	8006880 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006ed2:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <SX1276OnDio0Irq+0x2d4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f43f aeef 	beq.w	8006cba <SX1276OnDio0Irq+0x1a>
 8006edc:	689c      	ldr	r4, [r3, #8]
 8006ede:	2c00      	cmp	r4, #0
 8006ee0:	f43f aeeb 	beq.w	8006cba <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006ee4:	4921      	ldr	r1, [pc, #132]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006ee6:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8006eea:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8006eee:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8006ef2:	4822      	ldr	r0, [pc, #136]	; (8006f7c <SX1276OnDio0Irq+0x2dc>)
 8006ef4:	47a0      	blx	r4
 8006ef6:	e6e0      	b.n	8006cba <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006ef8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8006efc:	4a21      	ldr	r2, [pc, #132]	; (8006f84 <SX1276OnDio0Irq+0x2e4>)
 8006efe:	4291      	cmp	r1, r2
 8006f00:	d907      	bls.n	8006f12 <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006f02:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006f06:	fa03 f380 	sxtah	r3, r3, r0
 8006f0a:	3b9d      	subs	r3, #157	; 0x9d
 8006f0c:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 8006f10:	e7c4      	b.n	8006e9c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8006f12:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006f16:	fa03 f380 	sxtah	r3, r3, r0
 8006f1a:	3ba4      	subs	r3, #164	; 0xa4
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006f1e:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 8006f22:	e7bb      	b.n	8006e9c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006f24:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006f28:	38a4      	subs	r0, #164	; 0xa4
 8006f2a:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006f2c:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8006f30:	e7b4      	b.n	8006e9c <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 8006f32:	4815      	ldr	r0, [pc, #84]	; (8006f88 <SX1276OnDio0Irq+0x2e8>)
 8006f34:	f7ff fca4 	bl	8006880 <TimerStop>
            switch( SX1276.Settings.Modem )
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006f3a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d00e      	beq.n	8006f60 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <SX1276OnDio0Irq+0x2cc>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <SX1276OnDio0Irq+0x2d4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f43f aeb3 	beq.w	8006cba <SX1276OnDio0Irq+0x1a>
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f43f aeaf 	beq.w	8006cba <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 8006f5c:	4798      	blx	r3
}
 8006f5e:	e6ac      	b.n	8006cba <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8006f60:	2108      	movs	r1, #8
 8006f62:	2012      	movs	r0, #18
 8006f64:	f006 fc70 	bl	800d848 <SX1276Write>
 8006f68:	e7eb      	b.n	8006f42 <SX1276OnDio0Irq+0x2a2>
 8006f6a:	bf00      	nop
 8006f6c:	20000d24 	.word	0x20000d24
 8006f70:	20000c0c 	.word	0x20000c0c
 8006f74:	20000bf0 	.word	0x20000bf0
 8006f78:	20000e3a 	.word	0x20000e3a
 8006f7c:	20000c24 	.word	0x20000c24
 8006f80:	20000bf4 	.word	0x20000bf4
 8006f84:	1f4add40 	.word	0x1f4add40
 8006f88:	20000e68 	.word	0x20000e68

08006f8c <RxChainCalibration>:
{
 8006f8c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8006f8e:	2009      	movs	r0, #9
 8006f90:	f006 fc66 	bl	800d860 <SX1276Read>
 8006f94:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006f96:	2006      	movs	r0, #6
 8006f98:	f006 fc62 	bl	800d860 <SX1276Read>
 8006f9c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006f9e:	2007      	movs	r0, #7
 8006fa0:	f006 fc5e 	bl	800d860 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006fa4:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8006fa8:	2008      	movs	r0, #8
 8006faa:	f006 fc59 	bl	800d860 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006fae:	4320      	orrs	r0, r4
 8006fb0:	f006 fb9d 	bl	800d6ee <SX1276ConvertPllStepToFreqInHz>
 8006fb4:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2009      	movs	r0, #9
 8006fba:	f006 fc45 	bl	800d848 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006fbe:	203b      	movs	r0, #59	; 0x3b
 8006fc0:	f006 fc4e 	bl	800d860 <SX1276Read>
 8006fc4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006fc8:	b2c9      	uxtb	r1, r1
 8006fca:	203b      	movs	r0, #59	; 0x3b
 8006fcc:	f006 fc3c 	bl	800d848 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006fd0:	203b      	movs	r0, #59	; 0x3b
 8006fd2:	f006 fc45 	bl	800d860 <SX1276Read>
 8006fd6:	f010 0f20 	tst.w	r0, #32
 8006fda:	d1f9      	bne.n	8006fd0 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8006fdc:	480c      	ldr	r0, [pc, #48]	; (8007010 <RxChainCalibration+0x84>)
 8006fde:	f7ff fcf5 	bl	80069cc <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006fe2:	203b      	movs	r0, #59	; 0x3b
 8006fe4:	f006 fc3c 	bl	800d860 <SX1276Read>
 8006fe8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006fec:	b2c9      	uxtb	r1, r1
 8006fee:	203b      	movs	r0, #59	; 0x3b
 8006ff0:	f006 fc2a 	bl	800d848 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006ff4:	203b      	movs	r0, #59	; 0x3b
 8006ff6:	f006 fc33 	bl	800d860 <SX1276Read>
 8006ffa:	f010 0f20 	tst.w	r0, #32
 8006ffe:	d1f9      	bne.n	8006ff4 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8007000:	4629      	mov	r1, r5
 8007002:	2009      	movs	r0, #9
 8007004:	f006 fc20 	bl	800d848 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff fcdf 	bl	80069cc <SX1276SetChannel>
}
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	33bca100 	.word	0x33bca100

08007014 <SX1276SetSleep>:
{
 8007014:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8007016:	480a      	ldr	r0, [pc, #40]	; (8007040 <SX1276SetSleep+0x2c>)
 8007018:	f7ff fc32 	bl	8006880 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800701c:	4809      	ldr	r0, [pc, #36]	; (8007044 <SX1276SetSleep+0x30>)
 800701e:	f7ff fc2f 	bl	8006880 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007022:	4809      	ldr	r0, [pc, #36]	; (8007048 <SX1276SetSleep+0x34>)
 8007024:	f7ff fc2c 	bl	8006880 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007028:	2000      	movs	r0, #0
 800702a:	f006 fc25 	bl	800d878 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 800702e:	2000      	movs	r0, #0
 8007030:	f006 faf6 	bl	800d620 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <SX1276SetSleep+0x38>)
 8007036:	2200      	movs	r2, #0
 8007038:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800703c:	bd08      	pop	{r3, pc}
 800703e:	bf00      	nop
 8007040:	20000c0c 	.word	0x20000c0c
 8007044:	20000e68 	.word	0x20000e68
 8007048:	20000bf4 	.word	0x20000bf4
 800704c:	20000d24 	.word	0x20000d24

08007050 <SX1276SetStby>:
{
 8007050:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8007052:	4808      	ldr	r0, [pc, #32]	; (8007074 <SX1276SetStby+0x24>)
 8007054:	f7ff fc14 	bl	8006880 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007058:	4807      	ldr	r0, [pc, #28]	; (8007078 <SX1276SetStby+0x28>)
 800705a:	f7ff fc11 	bl	8006880 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800705e:	4807      	ldr	r0, [pc, #28]	; (800707c <SX1276SetStby+0x2c>)
 8007060:	f7ff fc0e 	bl	8006880 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8007064:	2001      	movs	r0, #1
 8007066:	f006 fc07 	bl	800d878 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <SX1276SetStby+0x30>)
 800706c:	2200      	movs	r2, #0
 800706e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007072:	bd08      	pop	{r3, pc}
 8007074:	20000c0c 	.word	0x20000c0c
 8007078:	20000e68 	.word	0x20000e68
 800707c:	20000bf4 	.word	0x20000bf4
 8007080:	20000d24 	.word	0x20000d24

08007084 <SX1276SetTx>:
{
 8007084:	b510      	push	{r4, lr}
 8007086:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8007088:	4829      	ldr	r0, [pc, #164]	; (8007130 <SX1276SetTx+0xac>)
 800708a:	f7ff fbf9 	bl	8006880 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800708e:	4621      	mov	r1, r4
 8007090:	4828      	ldr	r0, [pc, #160]	; (8007134 <SX1276SetTx+0xb0>)
 8007092:	f006 fb01 	bl	800d698 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8007096:	4b28      	ldr	r3, [pc, #160]	; (8007138 <SX1276SetTx+0xb4>)
 8007098:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800709c:	b163      	cbz	r3, 80070b8 <SX1276SetTx+0x34>
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d023      	beq.n	80070ea <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 80070a2:	4b25      	ldr	r3, [pc, #148]	; (8007138 <SX1276SetTx+0xb4>)
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80070aa:	4822      	ldr	r0, [pc, #136]	; (8007134 <SX1276SetTx+0xb0>)
 80070ac:	f7ff fb6e 	bl	800678c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80070b0:	2003      	movs	r0, #3
 80070b2:	f006 fbe1 	bl	800d878 <SX1276SetOpMode>
}
 80070b6:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80070b8:	2040      	movs	r0, #64	; 0x40
 80070ba:	f006 fbd1 	bl	800d860 <SX1276Read>
 80070be:	f000 0103 	and.w	r1, r0, #3
 80070c2:	2040      	movs	r0, #64	; 0x40
 80070c4:	f006 fbc0 	bl	800d848 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80070c8:	2041      	movs	r0, #65	; 0x41
 80070ca:	f006 fbc9 	bl	800d860 <SX1276Read>
 80070ce:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 80070d2:	2041      	movs	r0, #65	; 0x41
 80070d4:	f006 fbb8 	bl	800d848 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80070d8:	2035      	movs	r0, #53	; 0x35
 80070da:	f006 fbc1 	bl	800d860 <SX1276Read>
 80070de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80070e2:	4b15      	ldr	r3, [pc, #84]	; (8007138 <SX1276SetTx+0xb4>)
 80070e4:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 80070e8:	e7db      	b.n	80070a2 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80070ea:	4b13      	ldr	r3, [pc, #76]	; (8007138 <SX1276SetTx+0xb4>)
 80070ec:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80070f0:	b173      	cbz	r3, 8007110 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80070f2:	21f5      	movs	r1, #245	; 0xf5
 80070f4:	2011      	movs	r0, #17
 80070f6:	f006 fba7 	bl	800d848 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80070fa:	2040      	movs	r0, #64	; 0x40
 80070fc:	f006 fbb0 	bl	800d860 <SX1276Read>
 8007100:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8007104:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007108:	2040      	movs	r0, #64	; 0x40
 800710a:	f006 fb9d 	bl	800d848 <SX1276Write>
 800710e:	e7c8      	b.n	80070a2 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007110:	21f7      	movs	r1, #247	; 0xf7
 8007112:	2011      	movs	r0, #17
 8007114:	f006 fb98 	bl	800d848 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8007118:	2040      	movs	r0, #64	; 0x40
 800711a:	f006 fba1 	bl	800d860 <SX1276Read>
 800711e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8007122:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007126:	2040      	movs	r0, #64	; 0x40
 8007128:	f006 fb8e 	bl	800d848 <SX1276Write>
 800712c:	e7b9      	b.n	80070a2 <SX1276SetTx+0x1e>
 800712e:	bf00      	nop
 8007130:	20000c0c 	.word	0x20000c0c
 8007134:	20000e68 	.word	0x20000e68
 8007138:	20000d24 	.word	0x20000d24

0800713c <SX1276Send>:
{
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	b083      	sub	sp, #12
 8007140:	4604      	mov	r4, r0
 8007142:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8007146:	4b44      	ldr	r3, [pc, #272]	; (8007258 <SX1276Send+0x11c>)
 8007148:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800714c:	b133      	cbz	r3, 800715c <SX1276Send+0x20>
 800714e:	2b01      	cmp	r3, #1
 8007150:	d03a      	beq.n	80071c8 <SX1276Send+0x8c>
 8007152:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8007154:	f7ff ff96 	bl	8007084 <SX1276SetTx>
}
 8007158:	b003      	add	sp, #12
 800715a:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800715c:	4b3e      	ldr	r3, [pc, #248]	; (8007258 <SX1276Send+0x11c>)
 800715e:	2200      	movs	r2, #0
 8007160:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8007164:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007168:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 800716c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007170:	b9eb      	cbnz	r3, 80071ae <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8007172:	2101      	movs	r1, #1
 8007174:	f10d 0007 	add.w	r0, sp, #7
 8007178:	f006 fb2d 	bl	800d7d6 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 800717c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007180:	1e53      	subs	r3, r2, #1
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b3f      	cmp	r3, #63	; 0x3f
 8007186:	d816      	bhi.n	80071b6 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8007188:	4b33      	ldr	r3, [pc, #204]	; (8007258 <SX1276Send+0x11c>)
 800718a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800718e:	4d32      	ldr	r5, [pc, #200]	; (8007258 <SX1276Send+0x11c>)
 8007190:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8007194:	4620      	mov	r0, r4
 8007196:	f006 fb1e 	bl	800d7d6 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800719a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 800719e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 80071a2:	4413      	add	r3, r2
 80071a4:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80071a8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 80071ac:	e7d2      	b.n	8007154 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 80071ae:	2032      	movs	r0, #50	; 0x32
 80071b0:	f006 fb4a 	bl	800d848 <SX1276Write>
 80071b4:	e7e2      	b.n	800717c <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 80071b6:	4621      	mov	r1, r4
 80071b8:	4828      	ldr	r0, [pc, #160]	; (800725c <SX1276Send+0x120>)
 80071ba:	f006 fa43 	bl	800d644 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80071be:	4b26      	ldr	r3, [pc, #152]	; (8007258 <SX1276Send+0x11c>)
 80071c0:	2220      	movs	r2, #32
 80071c2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80071c6:	e7e2      	b.n	800718e <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80071c8:	4b23      	ldr	r3, [pc, #140]	; (8007258 <SX1276Send+0x11c>)
 80071ca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80071ce:	b353      	cbz	r3, 8007226 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80071d0:	2033      	movs	r0, #51	; 0x33
 80071d2:	f006 fb45 	bl	800d860 <SX1276Read>
 80071d6:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 80071da:	2033      	movs	r0, #51	; 0x33
 80071dc:	f006 fb34 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80071e0:	2119      	movs	r1, #25
 80071e2:	203b      	movs	r0, #59	; 0x3b
 80071e4:	f006 fb30 	bl	800d848 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80071e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80071ec:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <SX1276Send+0x11c>)
 80071ee:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80071f2:	2022      	movs	r0, #34	; 0x22
 80071f4:	f006 fb28 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80071f8:	2100      	movs	r1, #0
 80071fa:	200e      	movs	r0, #14
 80071fc:	f006 fb24 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007200:	2100      	movs	r1, #0
 8007202:	200d      	movs	r0, #13
 8007204:	f006 fb20 	bl	800d848 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8007208:	2001      	movs	r0, #1
 800720a:	f006 fb29 	bl	800d860 <SX1276Read>
 800720e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8007212:	d01a      	beq.n	800724a <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8007214:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8007218:	4620      	mov	r0, r4
 800721a:	f006 fadc 	bl	800d7d6 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <SX1276Send+0x11c>)
 8007220:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8007224:	e796      	b.n	8007154 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8007226:	2033      	movs	r0, #51	; 0x33
 8007228:	f006 fb1a 	bl	800d860 <SX1276Read>
 800722c:	b241      	sxtb	r1, r0
 800722e:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8007232:	f041 0101 	orr.w	r1, r1, #1
 8007236:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 800723a:	2033      	movs	r0, #51	; 0x33
 800723c:	f006 fb04 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007240:	211d      	movs	r1, #29
 8007242:	203b      	movs	r0, #59	; 0x3b
 8007244:	f006 fb00 	bl	800d848 <SX1276Write>
 8007248:	e7ce      	b.n	80071e8 <SX1276Send+0xac>
                SX1276SetStby( );
 800724a:	f7ff ff01 	bl	8007050 <SX1276SetStby>
                DelayMs( 1 );
 800724e:	2001      	movs	r0, #1
 8007250:	f006 fa49 	bl	800d6e6 <DelayMs>
 8007254:	e7de      	b.n	8007214 <SX1276Send+0xd8>
 8007256:	bf00      	nop
 8007258:	20000d24 	.word	0x20000d24
 800725c:	20000c24 	.word	0x20000c24

08007260 <SX1276SetRx>:
{
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8007264:	489d      	ldr	r0, [pc, #628]	; (80074dc <SX1276SetRx+0x27c>)
 8007266:	f7ff fb0b 	bl	8006880 <TimerStop>
    switch( SX1276.Settings.Modem )
 800726a:	4b9d      	ldr	r3, [pc, #628]	; (80074e0 <SX1276SetRx+0x280>)
 800726c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007270:	b1e3      	cbz	r3, 80072ac <SX1276SetRx+0x4c>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d045      	beq.n	8007302 <SX1276SetRx+0xa2>
 8007276:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8007278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800727c:	2100      	movs	r1, #0
 800727e:	4899      	ldr	r0, [pc, #612]	; (80074e4 <SX1276SetRx+0x284>)
 8007280:	f007 f8d5 	bl	800e42e <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8007284:	4b96      	ldr	r3, [pc, #600]	; (80074e0 <SX1276SetRx+0x280>)
 8007286:	2201      	movs	r2, #1
 8007288:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 800728c:	2c00      	cmp	r4, #0
 800728e:	f040 8107 	bne.w	80074a0 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8007292:	4b93      	ldr	r3, [pc, #588]	; (80074e0 <SX1276SetRx+0x280>)
 8007294:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 810a 	beq.w	80074b2 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 800729e:	2e00      	cmp	r6, #0
 80072a0:	f000 8118 	beq.w	80074d4 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80072a4:	2005      	movs	r0, #5
 80072a6:	f006 fae7 	bl	800d878 <SX1276SetOpMode>
}
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80072ac:	4d8c      	ldr	r5, [pc, #560]	; (80074e0 <SX1276SetRx+0x280>)
 80072ae:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80072b2:	2040      	movs	r0, #64	; 0x40
 80072b4:	f006 fad4 	bl	800d860 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80072b8:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80072bc:	f041 010c 	orr.w	r1, r1, #12
 80072c0:	2040      	movs	r0, #64	; 0x40
 80072c2:	f006 fac1 	bl	800d848 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80072c6:	2041      	movs	r0, #65	; 0x41
 80072c8:	f006 faca 	bl	800d860 <SX1276Read>
 80072cc:	f060 013e 	orn	r1, r0, #62	; 0x3e
 80072d0:	b2c9      	uxtb	r1, r1
 80072d2:	2041      	movs	r0, #65	; 0x41
 80072d4:	f006 fab8 	bl	800d848 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80072d8:	2035      	movs	r0, #53	; 0x35
 80072da:	f006 fac1 	bl	800d860 <SX1276Read>
 80072de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80072e2:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80072e6:	211e      	movs	r1, #30
 80072e8:	200d      	movs	r0, #13
 80072ea:	f006 faad 	bl	800d848 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80072ee:	2300      	movs	r3, #0
 80072f0:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80072f4:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80072f8:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 80072fc:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8007300:	e7ba      	b.n	8007278 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007302:	4b77      	ldr	r3, [pc, #476]	; (80074e0 <SX1276SetRx+0x280>)
 8007304:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007308:	b353      	cbz	r3, 8007360 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800730a:	2033      	movs	r0, #51	; 0x33
 800730c:	f006 faa8 	bl	800d860 <SX1276Read>
 8007310:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8007314:	b2c9      	uxtb	r1, r1
 8007316:	2033      	movs	r0, #51	; 0x33
 8007318:	f006 fa96 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800731c:	2119      	movs	r1, #25
 800731e:	203b      	movs	r0, #59	; 0x3b
 8007320:	f006 fa92 	bl	800d848 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8007324:	4b6e      	ldr	r3, [pc, #440]	; (80074e0 <SX1276SetRx+0x280>)
 8007326:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800732a:	2b08      	cmp	r3, #8
 800732c:	f200 8087 	bhi.w	800743e <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8007330:	2031      	movs	r0, #49	; 0x31
 8007332:	f006 fa95 	bl	800d860 <SX1276Read>
 8007336:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800733a:	2031      	movs	r0, #49	; 0x31
 800733c:	f006 fa84 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8007340:	2100      	movs	r1, #0
 8007342:	2030      	movs	r0, #48	; 0x30
 8007344:	f006 fa80 	bl	800d848 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8007348:	4b65      	ldr	r3, [pc, #404]	; (80074e0 <SX1276SetRx+0x280>)
 800734a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800734e:	2b08      	cmp	r3, #8
 8007350:	d87e      	bhi.n	8007450 <SX1276SetRx+0x1f0>
 8007352:	e8df f003 	tbb	[pc, r3]
 8007356:	2417      	.short	0x2417
 8007358:	584b3e31 	.word	0x584b3e31
 800735c:	6a65      	.short	0x6a65
 800735e:	6f          	.byte	0x6f
 800735f:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8007360:	2033      	movs	r0, #51	; 0x33
 8007362:	f006 fa7d 	bl	800d860 <SX1276Read>
 8007366:	b241      	sxtb	r1, r0
 8007368:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 800736c:	f041 0101 	orr.w	r1, r1, #1
 8007370:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8007374:	2033      	movs	r0, #51	; 0x33
 8007376:	f006 fa67 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800737a:	211d      	movs	r1, #29
 800737c:	203b      	movs	r0, #59	; 0x3b
 800737e:	f006 fa63 	bl	800d848 <SX1276Write>
 8007382:	e7cf      	b.n	8007324 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8007384:	2148      	movs	r1, #72	; 0x48
 8007386:	202f      	movs	r0, #47	; 0x2f
 8007388:	f006 fa5e 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800738c:	4b54      	ldr	r3, [pc, #336]	; (80074e0 <SX1276SetRx+0x280>)
 800738e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8007392:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8007396:	3002      	adds	r0, #2
 8007398:	f7ff fb18 	bl	80069cc <SX1276SetChannel>
                    break;
 800739c:	e058      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800739e:	2144      	movs	r1, #68	; 0x44
 80073a0:	202f      	movs	r0, #47	; 0x2f
 80073a2:	f006 fa51 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80073a6:	4b4e      	ldr	r3, [pc, #312]	; (80074e0 <SX1276SetRx+0x280>)
 80073a8:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80073ac:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 80073b0:	3034      	adds	r0, #52	; 0x34
 80073b2:	f7ff fb0b 	bl	80069cc <SX1276SetChannel>
                    break;
 80073b6:	e04b      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80073b8:	2144      	movs	r1, #68	; 0x44
 80073ba:	202f      	movs	r0, #47	; 0x2f
 80073bc:	f006 fa44 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80073c0:	4b47      	ldr	r3, [pc, #284]	; (80074e0 <SX1276SetRx+0x280>)
 80073c2:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80073c6:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 80073ca:	3004      	adds	r0, #4
 80073cc:	f7ff fafe 	bl	80069cc <SX1276SetChannel>
                    break;
 80073d0:	e03e      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80073d2:	2144      	movs	r1, #68	; 0x44
 80073d4:	202f      	movs	r0, #47	; 0x2f
 80073d6:	f006 fa37 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80073da:	4b41      	ldr	r3, [pc, #260]	; (80074e0 <SX1276SetRx+0x280>)
 80073dc:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80073e0:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 80073e4:	305e      	adds	r0, #94	; 0x5e
 80073e6:	f7ff faf1 	bl	80069cc <SX1276SetChannel>
                    break;
 80073ea:	e031      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80073ec:	2144      	movs	r1, #68	; 0x44
 80073ee:	202f      	movs	r0, #47	; 0x2f
 80073f0:	f006 fa2a 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80073f4:	4b3a      	ldr	r3, [pc, #232]	; (80074e0 <SX1276SetRx+0x280>)
 80073f6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80073fa:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 80073fe:	3012      	adds	r0, #18
 8007400:	f7ff fae4 	bl	80069cc <SX1276SetChannel>
                    break;
 8007404:	e024      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007406:	2144      	movs	r1, #68	; 0x44
 8007408:	202f      	movs	r0, #47	; 0x2f
 800740a:	f006 fa1d 	bl	800d848 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800740e:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <SX1276SetRx+0x280>)
 8007410:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8007414:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8007418:	30c6      	adds	r0, #198	; 0xc6
 800741a:	f7ff fad7 	bl	80069cc <SX1276SetChannel>
                    break;
 800741e:	e017      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007420:	2140      	movs	r1, #64	; 0x40
 8007422:	202f      	movs	r0, #47	; 0x2f
 8007424:	f006 fa10 	bl	800d848 <SX1276Write>
                    break;
 8007428:	e012      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800742a:	2140      	movs	r1, #64	; 0x40
 800742c:	202f      	movs	r0, #47	; 0x2f
 800742e:	f006 fa0b 	bl	800d848 <SX1276Write>
                    break;
 8007432:	e00d      	b.n	8007450 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007434:	2140      	movs	r1, #64	; 0x40
 8007436:	202f      	movs	r0, #47	; 0x2f
 8007438:	f006 fa06 	bl	800d848 <SX1276Write>
                    break;
 800743c:	e008      	b.n	8007450 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800743e:	2031      	movs	r0, #49	; 0x31
 8007440:	f006 fa0e 	bl	800d860 <SX1276Read>
 8007444:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8007448:	b2c9      	uxtb	r1, r1
 800744a:	2031      	movs	r0, #49	; 0x31
 800744c:	f006 f9fc 	bl	800d848 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8007450:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <SX1276SetRx+0x280>)
 8007452:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007456:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 800745a:	b1a3      	cbz	r3, 8007486 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800745c:	211d      	movs	r1, #29
 800745e:	2011      	movs	r0, #17
 8007460:	f006 f9f2 	bl	800d848 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8007464:	2040      	movs	r0, #64	; 0x40
 8007466:	f006 f9fb 	bl	800d860 <SX1276Read>
 800746a:	f000 0133 	and.w	r1, r0, #51	; 0x33
 800746e:	2040      	movs	r0, #64	; 0x40
 8007470:	f006 f9ea 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8007474:	2100      	movs	r1, #0
 8007476:	200f      	movs	r0, #15
 8007478:	f006 f9e6 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800747c:	2100      	movs	r1, #0
 800747e:	200d      	movs	r0, #13
 8007480:	f006 f9e2 	bl	800d848 <SX1276Write>
        break;
 8007484:	e6f8      	b.n	8007278 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007486:	211f      	movs	r1, #31
 8007488:	2011      	movs	r0, #17
 800748a:	f006 f9dd 	bl	800d848 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800748e:	2040      	movs	r0, #64	; 0x40
 8007490:	f006 f9e6 	bl	800d860 <SX1276Read>
 8007494:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8007498:	2040      	movs	r0, #64	; 0x40
 800749a:	f006 f9d5 	bl	800d848 <SX1276Write>
 800749e:	e7e9      	b.n	8007474 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80074a0:	4d11      	ldr	r5, [pc, #68]	; (80074e8 <SX1276SetRx+0x288>)
 80074a2:	4621      	mov	r1, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	f006 f8f7 	bl	800d698 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7ff f96e 	bl	800678c <TimerStart>
 80074b0:	e6ef      	b.n	8007292 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80074b2:	2005      	movs	r0, #5
 80074b4:	f006 f9e0 	bl	800d878 <SX1276SetOpMode>
        if( rxContinuous == false )
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	f47f aef6 	bne.w	80072aa <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80074be:	4c0b      	ldr	r4, [pc, #44]	; (80074ec <SX1276SetRx+0x28c>)
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <SX1276SetRx+0x280>)
 80074c2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80074c6:	4620      	mov	r0, r4
 80074c8:	f006 f8e6 	bl	800d698 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff f95d 	bl	800678c <TimerStart>
 80074d2:	e6ea      	b.n	80072aa <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80074d4:	2006      	movs	r0, #6
 80074d6:	f006 f9cf 	bl	800d878 <SX1276SetOpMode>
}
 80074da:	e6e6      	b.n	80072aa <SX1276SetRx+0x4a>
 80074dc:	20000e68 	.word	0x20000e68
 80074e0:	20000d24 	.word	0x20000d24
 80074e4:	20000c24 	.word	0x20000c24
 80074e8:	20000c0c 	.word	0x20000c0c
 80074ec:	20000bf4 	.word	0x20000bf4

080074f0 <SX1276ReadRssi>:
{
 80074f0:	b508      	push	{r3, lr}
    switch( modem )
 80074f2:	b120      	cbz	r0, 80074fe <SX1276ReadRssi+0xe>
 80074f4:	2801      	cmp	r0, #1
 80074f6:	d00a      	beq.n	800750e <SX1276ReadRssi+0x1e>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80074fc:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80074fe:	2011      	movs	r0, #17
 8007500:	f006 f9ae 	bl	800d860 <SX1276Read>
 8007504:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8007508:	4240      	negs	r0, r0
 800750a:	b200      	sxth	r0, r0
        break;
 800750c:	e7f6      	b.n	80074fc <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800750e:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <SX1276ReadRssi+0x48>)
 8007510:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8007514:	4b09      	ldr	r3, [pc, #36]	; (800753c <SX1276ReadRssi+0x4c>)
 8007516:	429a      	cmp	r2, r3
 8007518:	d906      	bls.n	8007528 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800751a:	201b      	movs	r0, #27
 800751c:	f006 f9a0 	bl	800d860 <SX1276Read>
 8007520:	b200      	sxth	r0, r0
 8007522:	389d      	subs	r0, #157	; 0x9d
 8007524:	b200      	sxth	r0, r0
 8007526:	e7e9      	b.n	80074fc <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8007528:	201b      	movs	r0, #27
 800752a:	f006 f999 	bl	800d860 <SX1276Read>
 800752e:	b200      	sxth	r0, r0
 8007530:	38a4      	subs	r0, #164	; 0xa4
 8007532:	b200      	sxth	r0, r0
 8007534:	e7e2      	b.n	80074fc <SX1276ReadRssi+0xc>
 8007536:	bf00      	nop
 8007538:	20000d24 	.word	0x20000d24
 800753c:	1f4add40 	.word	0x1f4add40

08007540 <SX1276SetModem>:
{
 8007540:	b510      	push	{r4, lr}
 8007542:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8007544:	2001      	movs	r0, #1
 8007546:	f006 f98b 	bl	800d860 <SX1276Read>
 800754a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800754e:	d121      	bne.n	8007594 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8007550:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <SX1276SetModem+0x88>)
 8007552:	2200      	movs	r2, #0
 8007554:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <SX1276SetModem+0x88>)
 800755a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800755e:	42a3      	cmp	r3, r4
 8007560:	d017      	beq.n	8007592 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8007562:	4b19      	ldr	r3, [pc, #100]	; (80075c8 <SX1276SetModem+0x88>)
 8007564:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8007568:	2c01      	cmp	r4, #1
 800756a:	d018      	beq.n	800759e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800756c:	2000      	movs	r0, #0
 800756e:	f006 f983 	bl	800d878 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8007572:	2001      	movs	r0, #1
 8007574:	f006 f974 	bl	800d860 <SX1276Read>
 8007578:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800757c:	2001      	movs	r0, #1
 800757e:	f006 f963 	bl	800d848 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8007582:	2100      	movs	r1, #0
 8007584:	2040      	movs	r0, #64	; 0x40
 8007586:	f006 f95f 	bl	800d848 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800758a:	2130      	movs	r1, #48	; 0x30
 800758c:	2041      	movs	r0, #65	; 0x41
 800758e:	f006 f95b 	bl	800d848 <SX1276Write>
}
 8007592:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <SX1276SetModem+0x88>)
 8007596:	2201      	movs	r2, #1
 8007598:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800759c:	e7dc      	b.n	8007558 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800759e:	2000      	movs	r0, #0
 80075a0:	f006 f96a 	bl	800d878 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80075a4:	2001      	movs	r0, #1
 80075a6:	f006 f95b 	bl	800d860 <SX1276Read>
 80075aa:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80075ae:	b2c9      	uxtb	r1, r1
 80075b0:	2001      	movs	r0, #1
 80075b2:	f006 f949 	bl	800d848 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80075b6:	2100      	movs	r1, #0
 80075b8:	2040      	movs	r0, #64	; 0x40
 80075ba:	f006 f945 	bl	800d848 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80075be:	2100      	movs	r1, #0
 80075c0:	2041      	movs	r0, #65	; 0x41
 80075c2:	f006 f941 	bl	800d848 <SX1276Write>
        break;
 80075c6:	e7e4      	b.n	8007592 <SX1276SetModem+0x52>
 80075c8:	20000d24 	.word	0x20000d24

080075cc <SX1276Init>:
{
 80075cc:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 80075ce:	4b19      	ldr	r3, [pc, #100]	; (8007634 <SX1276Init+0x68>)
 80075d0:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80075d2:	4c19      	ldr	r4, [pc, #100]	; (8007638 <SX1276Init+0x6c>)
 80075d4:	4621      	mov	r1, r4
 80075d6:	4819      	ldr	r0, [pc, #100]	; (800763c <SX1276Init+0x70>)
 80075d8:	f006 f855 	bl	800d686 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80075dc:	4621      	mov	r1, r4
 80075de:	4818      	ldr	r0, [pc, #96]	; (8007640 <SX1276Init+0x74>)
 80075e0:	f006 f851 	bl	800d686 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80075e4:	4621      	mov	r1, r4
 80075e6:	4817      	ldr	r0, [pc, #92]	; (8007644 <SX1276Init+0x78>)
 80075e8:	f006 f84d 	bl	800d686 <TimerInit>
    SX1276Reset( );
 80075ec:	f7fe fde2 	bl	80061b4 <SX1276Reset>
    RxChainCalibration( );
 80075f0:	f7ff fccc 	bl	8006f8c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80075f4:	2000      	movs	r0, #0
 80075f6:	f006 f93f 	bl	800d878 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 80075fa:	4813      	ldr	r0, [pc, #76]	; (8007648 <SX1276Init+0x7c>)
 80075fc:	f7fe fe0e 	bl	800621c <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007600:	2400      	movs	r4, #0
 8007602:	e00c      	b.n	800761e <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8007604:	4a11      	ldr	r2, [pc, #68]	; (800764c <SX1276Init+0x80>)
 8007606:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800760a:	18d5      	adds	r5, r2, r3
 800760c:	5cd0      	ldrb	r0, [r2, r3]
 800760e:	f7ff ff97 	bl	8007540 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007612:	78a9      	ldrb	r1, [r5, #2]
 8007614:	7868      	ldrb	r0, [r5, #1]
 8007616:	f006 f917 	bl	800d848 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800761a:	3401      	adds	r4, #1
 800761c:	b2e4      	uxtb	r4, r4
 800761e:	2c0f      	cmp	r4, #15
 8007620:	d9f0      	bls.n	8007604 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8007622:	2000      	movs	r0, #0
 8007624:	f7ff ff8c 	bl	8007540 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <SX1276Init+0x84>)
 800762a:	2200      	movs	r2, #0
 800762c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	20000bf0 	.word	0x20000bf0
 8007638:	08007c4d 	.word	0x08007c4d
 800763c:	20000e68 	.word	0x20000e68
 8007640:	20000c0c 	.word	0x20000c0c
 8007644:	20000bf4 	.word	0x20000bf4
 8007648:	200000a0 	.word	0x200000a0
 800764c:	08010168 	.word	0x08010168
 8007650:	20000d24 	.word	0x20000d24

08007654 <SX1276SetRxConfig>:
{
 8007654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	b085      	sub	sp, #20
 800765a:	4604      	mov	r4, r0
 800765c:	9101      	str	r1, [sp, #4]
 800765e:	4615      	mov	r5, r2
 8007660:	9303      	str	r3, [sp, #12]
 8007662:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8007666:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800766a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800766e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8007672:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8007676:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 800767a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800767e:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8007680:	f7ff ff5e 	bl	8007540 <SX1276SetModem>
    switch( modem )
 8007684:	b124      	cbz	r4, 8007690 <SX1276SetRxConfig+0x3c>
 8007686:	2c01      	cmp	r4, #1
 8007688:	d069      	beq.n	800775e <SX1276SetRxConfig+0x10a>
}
 800768a:	b005      	add	sp, #20
 800768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007690:	4ba0      	ldr	r3, [pc, #640]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 8007692:	9c01      	ldr	r4, [sp, #4]
 8007694:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8007698:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800769c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800769e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 80076a2:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80076a6:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80076aa:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80076ae:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80076b2:	9a02      	ldr	r2, [sp, #8]
 80076b4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80076b8:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80076bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80076c0:	fb02 fa0a 	mul.w	sl, r2, sl
 80076c4:	fbba f2f5 	udiv	r2, sl, r5
 80076c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80076cc:	4b92      	ldr	r3, [pc, #584]	; (8007918 <SX1276SetRxConfig+0x2c4>)
 80076ce:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80076d2:	f3c5 2107 	ubfx	r1, r5, #8, #8
 80076d6:	2002      	movs	r0, #2
 80076d8:	f006 f8b6 	bl	800d848 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80076dc:	b2e9      	uxtb	r1, r5
 80076de:	2003      	movs	r0, #3
 80076e0:	f006 f8b2 	bl	800d848 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7ff f91f 	bl	8006928 <GetFskBandwidthRegValue>
 80076ea:	4601      	mov	r1, r0
 80076ec:	2012      	movs	r0, #18
 80076ee:	f006 f8ab 	bl	800d848 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80076f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076f4:	f7ff f918 	bl	8006928 <GetFskBandwidthRegValue>
 80076f8:	4601      	mov	r1, r0
 80076fa:	2013      	movs	r0, #19
 80076fc:	f006 f8a4 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007700:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8007704:	2025      	movs	r0, #37	; 0x25
 8007706:	f006 f89f 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800770a:	fa5f f188 	uxtb.w	r1, r8
 800770e:	2026      	movs	r0, #38	; 0x26
 8007710:	f006 f89a 	bl	800d848 <SX1276Write>
            if( fixLen == 1 )
 8007714:	b1df      	cbz	r7, 800774e <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8007716:	4649      	mov	r1, r9
 8007718:	2032      	movs	r0, #50	; 0x32
 800771a:	f006 f895 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800771e:	2030      	movs	r0, #48	; 0x30
 8007720:	f006 f89e 	bl	800d860 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8007724:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007728:	b1b7      	cbz	r7, 8007758 <SX1276SetRxConfig+0x104>
 800772a:	2300      	movs	r3, #0
 800772c:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800772e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8007732:	b2c9      	uxtb	r1, r1
 8007734:	2030      	movs	r0, #48	; 0x30
 8007736:	f006 f887 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800773a:	2031      	movs	r0, #49	; 0x31
 800773c:	f006 f890 	bl	800d860 <SX1276Read>
 8007740:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8007744:	b2c9      	uxtb	r1, r1
 8007746:	2031      	movs	r0, #49	; 0x31
 8007748:	f006 f87e 	bl	800d848 <SX1276Write>
        break;
 800774c:	e79d      	b.n	800768a <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800774e:	21ff      	movs	r1, #255	; 0xff
 8007750:	2032      	movs	r0, #50	; 0x32
 8007752:	f006 f879 	bl	800d848 <SX1276Write>
 8007756:	e7e2      	b.n	800771e <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007758:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800775c:	e7e6      	b.n	800772c <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d900      	bls.n	8007766 <SX1276SetRxConfig+0x112>
                while( 1 );
 8007764:	e7fe      	b.n	8007764 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 8007766:	9c01      	ldr	r4, [sp, #4]
 8007768:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800776a:	4b6a      	ldr	r3, [pc, #424]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 800776c:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8007770:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8007774:	9a03      	ldr	r2, [sp, #12]
 8007776:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800777a:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800777e:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8007782:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007786:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800778a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800778e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007792:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8007796:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800779a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800779e:	9a02      	ldr	r2, [sp, #8]
 80077a0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	d803      	bhi.n	80077b0 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 80077a8:	2d05      	cmp	r5, #5
 80077aa:	d802      	bhi.n	80077b2 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 80077ac:	2506      	movs	r5, #6
 80077ae:	e000      	b.n	80077b2 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 80077b0:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80077b2:	2c07      	cmp	r4, #7
 80077b4:	d063      	beq.n	800787e <SX1276SetRxConfig+0x22a>
 80077b6:	2c08      	cmp	r4, #8
 80077b8:	d06a      	beq.n	8007890 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80077c2:	201d      	movs	r0, #29
 80077c4:	f006 f84c 	bl	800d860 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80077c8:	0123      	lsls	r3, r4, #4
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 80077d4:	ea43 0107 	orr.w	r1, r3, r7
 80077d8:	201d      	movs	r0, #29
 80077da:	f006 f835 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80077de:	201e      	movs	r0, #30
 80077e0:	f006 f83e 	bl	800d860 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80077e4:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80077e8:	012a      	lsls	r2, r5, #4
 80077ea:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80077ec:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80077ee:	00b3      	lsls	r3, r6, #2
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80077f4:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80077f8:	4319      	orrs	r1, r3
 80077fa:	201e      	movs	r0, #30
 80077fc:	f006 f824 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007800:	2026      	movs	r0, #38	; 0x26
 8007802:	f006 f82d 	bl	800d860 <SX1276Read>
 8007806:	b241      	sxtb	r1, r0
 8007808:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800780c:	4b41      	ldr	r3, [pc, #260]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 800780e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007812:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007816:	b2c9      	uxtb	r1, r1
 8007818:	2026      	movs	r0, #38	; 0x26
 800781a:	f006 f815 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800781e:	fa5f f18a 	uxtb.w	r1, sl
 8007822:	201f      	movs	r0, #31
 8007824:	f006 f810 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007828:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800782c:	2020      	movs	r0, #32
 800782e:	f006 f80b 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007832:	fa5f f188 	uxtb.w	r1, r8
 8007836:	2021      	movs	r0, #33	; 0x21
 8007838:	f006 f806 	bl	800d848 <SX1276Write>
            if( fixLen == 1 )
 800783c:	bb5f      	cbnz	r7, 8007896 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800783e:	4b35      	ldr	r3, [pc, #212]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 8007840:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8007844:	bb63      	cbnz	r3, 80078a0 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007846:	2c09      	cmp	r4, #9
 8007848:	d03a      	beq.n	80078c0 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 800784a:	2c09      	cmp	r4, #9
 800784c:	d047      	beq.n	80078de <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800784e:	2103      	movs	r1, #3
 8007850:	2036      	movs	r0, #54	; 0x36
 8007852:	f005 fff9 	bl	800d848 <SX1276Write>
            if( datarate == 6 )
 8007856:	2d06      	cmp	r5, #6
 8007858:	d04a      	beq.n	80078f0 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800785a:	2031      	movs	r0, #49	; 0x31
 800785c:	f006 f800 	bl	800d860 <SX1276Read>
 8007860:	b241      	sxtb	r1, r0
 8007862:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007866:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800786a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 800786e:	2031      	movs	r0, #49	; 0x31
 8007870:	f005 ffea 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007874:	210a      	movs	r1, #10
 8007876:	2037      	movs	r0, #55	; 0x37
 8007878:	f005 ffe6 	bl	800d848 <SX1276Write>
}
 800787c:	e705      	b.n	800768a <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800787e:	f1a5 030b 	sub.w	r3, r5, #11
 8007882:	2b01      	cmp	r3, #1
 8007884:	d897      	bhi.n	80077b6 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007886:	4b23      	ldr	r3, [pc, #140]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800788e:	e798      	b.n	80077c2 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007890:	2d0c      	cmp	r5, #12
 8007892:	d192      	bne.n	80077ba <SX1276SetRxConfig+0x166>
 8007894:	e7f7      	b.n	8007886 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8007896:	4649      	mov	r1, r9
 8007898:	2022      	movs	r0, #34	; 0x22
 800789a:	f005 ffd5 	bl	800d848 <SX1276Write>
 800789e:	e7ce      	b.n	800783e <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80078a0:	2044      	movs	r0, #68	; 0x44
 80078a2:	f005 ffdd 	bl	800d860 <SX1276Read>
 80078a6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80078aa:	b2c9      	uxtb	r1, r1
 80078ac:	2044      	movs	r0, #68	; 0x44
 80078ae:	f005 ffcb 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80078b2:	4b18      	ldr	r3, [pc, #96]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 80078b4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80078b8:	2024      	movs	r0, #36	; 0x24
 80078ba:	f005 ffc5 	bl	800d848 <SX1276Write>
 80078be:	e7c2      	b.n	8007846 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80078c0:	4b14      	ldr	r3, [pc, #80]	; (8007914 <SX1276SetRxConfig+0x2c0>)
 80078c2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80078c6:	4b15      	ldr	r3, [pc, #84]	; (800791c <SX1276SetRxConfig+0x2c8>)
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d9be      	bls.n	800784a <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80078cc:	2102      	movs	r1, #2
 80078ce:	2036      	movs	r0, #54	; 0x36
 80078d0:	f005 ffba 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80078d4:	2164      	movs	r1, #100	; 0x64
 80078d6:	203a      	movs	r0, #58	; 0x3a
 80078d8:	f005 ffb6 	bl	800d848 <SX1276Write>
 80078dc:	e7bb      	b.n	8007856 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80078de:	2102      	movs	r1, #2
 80078e0:	2036      	movs	r0, #54	; 0x36
 80078e2:	f005 ffb1 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80078e6:	217f      	movs	r1, #127	; 0x7f
 80078e8:	203a      	movs	r0, #58	; 0x3a
 80078ea:	f005 ffad 	bl	800d848 <SX1276Write>
 80078ee:	e7b2      	b.n	8007856 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80078f0:	2031      	movs	r0, #49	; 0x31
 80078f2:	f005 ffb5 	bl	800d860 <SX1276Read>
 80078f6:	b241      	sxtb	r1, r0
 80078f8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80078fc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007900:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8007904:	2031      	movs	r0, #49	; 0x31
 8007906:	f005 ff9f 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800790a:	210c      	movs	r1, #12
 800790c:	2037      	movs	r0, #55	; 0x37
 800790e:	f005 ff9b 	bl	800d848 <SX1276Write>
 8007912:	e6ba      	b.n	800768a <SX1276SetRxConfig+0x36>
 8007914:	20000d24 	.word	0x20000d24
 8007918:	01e84800 	.word	0x01e84800
 800791c:	1f4add40 	.word	0x1f4add40

08007920 <SX1276SetTxConfig>:
{
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	b083      	sub	sp, #12
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	9201      	str	r2, [sp, #4]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8007932:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8007936:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 800793a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 800793e:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8007942:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 8007946:	f7ff fdfb 	bl	8007540 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 800794a:	4628      	mov	r0, r5
 800794c:	f7fe fe48 	bl	80065e0 <SX1276SetRfTxPower>
    switch( modem )
 8007950:	b124      	cbz	r4, 800795c <SX1276SetTxConfig+0x3c>
 8007952:	2c01      	cmp	r4, #1
 8007954:	d057      	beq.n	8007a06 <SX1276SetTxConfig+0xe6>
}
 8007956:	b003      	add	sp, #12
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 800795c:	4b81      	ldr	r3, [pc, #516]	; (8007b64 <SX1276SetTxConfig+0x244>)
 800795e:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8007962:	9801      	ldr	r0, [sp, #4]
 8007964:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007968:	9a00      	ldr	r2, [sp, #0]
 800796a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 800796e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007970:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007974:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007978:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800797c:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007980:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8007984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007986:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800798a:	f7fe ffb9 	bl	8006900 <SX1276ConvertFreqInHzToPllStep>
 800798e:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8007990:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8007994:	2004      	movs	r0, #4
 8007996:	f005 ff57 	bl	800d848 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800799a:	b2e1      	uxtb	r1, r4
 800799c:	2005      	movs	r0, #5
 800799e:	f005 ff53 	bl	800d848 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80079a2:	4c71      	ldr	r4, [pc, #452]	; (8007b68 <SX1276SetTxConfig+0x248>)
 80079a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a6:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80079aa:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80079ae:	2002      	movs	r0, #2
 80079b0:	f005 ff4a 	bl	800d848 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 80079b4:	b2e1      	uxtb	r1, r4
 80079b6:	2003      	movs	r0, #3
 80079b8:	f005 ff46 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80079bc:	0a39      	lsrs	r1, r7, #8
 80079be:	2025      	movs	r0, #37	; 0x25
 80079c0:	f005 ff42 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80079c4:	b2f9      	uxtb	r1, r7
 80079c6:	2026      	movs	r0, #38	; 0x26
 80079c8:	f005 ff3e 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80079cc:	2030      	movs	r0, #48	; 0x30
 80079ce:	f005 ff47 	bl	800d860 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80079d2:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80079d6:	f1b8 0f00 	cmp.w	r8, #0
 80079da:	d011      	beq.n	8007a00 <SX1276SetTxConfig+0xe0>
 80079dc:	2300      	movs	r3, #0
 80079de:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80079e0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80079e4:	b2c9      	uxtb	r1, r1
 80079e6:	2030      	movs	r0, #48	; 0x30
 80079e8:	f005 ff2e 	bl	800d848 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80079ec:	2031      	movs	r0, #49	; 0x31
 80079ee:	f005 ff37 	bl	800d860 <SX1276Read>
 80079f2:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80079f6:	b2c9      	uxtb	r1, r1
 80079f8:	2031      	movs	r0, #49	; 0x31
 80079fa:	f005 ff25 	bl	800d848 <SX1276Write>
        break;
 80079fe:	e7aa      	b.n	8007956 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007a00:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007a04:	e7eb      	b.n	80079de <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8007a06:	4b57      	ldr	r3, [pc, #348]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007a08:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d900      	bls.n	8007a14 <SX1276SetTxConfig+0xf4>
                while( 1 );
 8007a12:	e7fe      	b.n	8007a12 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8007a14:	9c00      	ldr	r4, [sp, #0]
 8007a16:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007a18:	4b52      	ldr	r3, [pc, #328]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007a1a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8007a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a20:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8007a24:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007a28:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007a2c:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8007a30:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007a34:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8007a38:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007a3c:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007a40:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007a44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a46:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 8007a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a4c:	2b0c      	cmp	r3, #12
 8007a4e:	d804      	bhi.n	8007a5a <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d804      	bhi.n	8007a5e <SX1276SetTxConfig+0x13e>
                datarate = 6;
 8007a54:	2306      	movs	r3, #6
 8007a56:	930c      	str	r3, [sp, #48]	; 0x30
 8007a58:	e001      	b.n	8007a5e <SX1276SetTxConfig+0x13e>
                datarate = 12;
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a5e:	2c07      	cmp	r4, #7
 8007a60:	d051      	beq.n	8007b06 <SX1276SetTxConfig+0x1e6>
 8007a62:	2c08      	cmp	r4, #8
 8007a64:	d058      	beq.n	8007b18 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007a66:	4b3f      	ldr	r3, [pc, #252]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007a6e:	f1bb 0f00 	cmp.w	fp, #0
 8007a72:	d155      	bne.n	8007b20 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007a74:	201d      	movs	r0, #29
 8007a76:	f005 fef3 	bl	800d860 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007a7a:	0123      	lsls	r3, r4, #4
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007a86:	ea43 0108 	orr.w	r1, r3, r8
 8007a8a:	201d      	movs	r0, #29
 8007a8c:	f005 fedc 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8007a90:	201e      	movs	r0, #30
 8007a92:	f005 fee5 	bl	800d860 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8007a96:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8007a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8007aa0:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8007aa2:	00b3      	lsls	r3, r6, #2
 8007aa4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007aa6:	4319      	orrs	r1, r3
 8007aa8:	201e      	movs	r0, #30
 8007aaa:	f005 fecd 	bl	800d848 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007aae:	2026      	movs	r0, #38	; 0x26
 8007ab0:	f005 fed6 	bl	800d860 <SX1276Read>
 8007ab4:	b241      	sxtb	r1, r0
 8007ab6:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007aba:	4b2a      	ldr	r3, [pc, #168]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007abc:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007ac0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007ac4:	b2c9      	uxtb	r1, r1
 8007ac6:	2026      	movs	r0, #38	; 0x26
 8007ac8:	f005 febe 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007acc:	0a39      	lsrs	r1, r7, #8
 8007ace:	2020      	movs	r0, #32
 8007ad0:	f005 feba 	bl	800d848 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8007ad4:	b2f9      	uxtb	r1, r7
 8007ad6:	2021      	movs	r0, #33	; 0x21
 8007ad8:	f005 feb6 	bl	800d848 <SX1276Write>
            if( datarate == 6 )
 8007adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ade:	2b06      	cmp	r3, #6
 8007ae0:	d02e      	beq.n	8007b40 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007ae2:	2031      	movs	r0, #49	; 0x31
 8007ae4:	f005 febc 	bl	800d860 <SX1276Read>
 8007ae8:	b241      	sxtb	r1, r0
 8007aea:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007aee:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007af2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8007af6:	2031      	movs	r0, #49	; 0x31
 8007af8:	f005 fea6 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007afc:	210a      	movs	r1, #10
 8007afe:	2037      	movs	r0, #55	; 0x37
 8007b00:	f005 fea2 	bl	800d848 <SX1276Write>
}
 8007b04:	e727      	b.n	8007956 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b08:	3b0b      	subs	r3, #11
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d8a9      	bhi.n	8007a62 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8007b16:	e7aa      	b.n	8007a6e <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b1a:	2b0c      	cmp	r3, #12
 8007b1c:	d1a3      	bne.n	8007a66 <SX1276SetTxConfig+0x146>
 8007b1e:	e7f6      	b.n	8007b0e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007b20:	2044      	movs	r0, #68	; 0x44
 8007b22:	f005 fe9d 	bl	800d860 <SX1276Read>
 8007b26:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8007b2a:	b2c9      	uxtb	r1, r1
 8007b2c:	2044      	movs	r0, #68	; 0x44
 8007b2e:	f005 fe8b 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007b32:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <SX1276SetTxConfig+0x244>)
 8007b34:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8007b38:	2024      	movs	r0, #36	; 0x24
 8007b3a:	f005 fe85 	bl	800d848 <SX1276Write>
 8007b3e:	e799      	b.n	8007a74 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007b40:	2031      	movs	r0, #49	; 0x31
 8007b42:	f005 fe8d 	bl	800d860 <SX1276Read>
 8007b46:	b241      	sxtb	r1, r0
 8007b48:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007b4c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007b50:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8007b54:	2031      	movs	r0, #49	; 0x31
 8007b56:	f005 fe77 	bl	800d848 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007b5a:	210c      	movs	r1, #12
 8007b5c:	2037      	movs	r0, #55	; 0x37
 8007b5e:	f005 fe73 	bl	800d848 <SX1276Write>
 8007b62:	e6f8      	b.n	8007956 <SX1276SetTxConfig+0x36>
 8007b64:	20000d24 	.word	0x20000d24
 8007b68:	01e84800 	.word	0x01e84800

08007b6c <SX1276SetTxContinuousWave>:
{
 8007b6c:	b530      	push	{r4, r5, lr}
 8007b6e:	b08b      	sub	sp, #44	; 0x2c
 8007b70:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8007b72:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007b76:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 8007b7a:	f7fe ff27 	bl	80069cc <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8007b7e:	9408      	str	r4, [sp, #32]
 8007b80:	2000      	movs	r0, #0
 8007b82:	9007      	str	r0, [sp, #28]
 8007b84:	9006      	str	r0, [sp, #24]
 8007b86:	9005      	str	r0, [sp, #20]
 8007b88:	9004      	str	r0, [sp, #16]
 8007b8a:	9003      	str	r0, [sp, #12]
 8007b8c:	2305      	movs	r3, #5
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	9001      	str	r0, [sp, #4]
 8007b92:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	f7ff febf 	bl	8007920 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8007ba2:	2031      	movs	r0, #49	; 0x31
 8007ba4:	f005 fe5c 	bl	800d860 <SX1276Read>
 8007ba8:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8007bac:	2031      	movs	r0, #49	; 0x31
 8007bae:	f005 fe4b 	bl	800d848 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8007bb2:	21f0      	movs	r1, #240	; 0xf0
 8007bb4:	2040      	movs	r0, #64	; 0x40
 8007bb6:	f005 fe47 	bl	800d848 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8007bba:	21a0      	movs	r1, #160	; 0xa0
 8007bbc:	2041      	movs	r0, #65	; 0x41
 8007bbe:	f005 fe43 	bl	800d848 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8007bc2:	4d08      	ldr	r5, [pc, #32]	; (8007be4 <SX1276SetTxContinuousWave+0x78>)
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f005 fd66 	bl	800d698 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <SX1276SetTxContinuousWave+0x7c>)
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f7fe fdd9 	bl	800678c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007bda:	2003      	movs	r0, #3
 8007bdc:	f005 fe4c 	bl	800d878 <SX1276SetOpMode>
}
 8007be0:	b00b      	add	sp, #44	; 0x2c
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	20000e68 	.word	0x20000e68
 8007be8:	20000d24 	.word	0x20000d24

08007bec <SX1276SetMaxPayloadLength>:
{
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8007bf2:	f7ff fca5 	bl	8007540 <SX1276SetModem>
    switch( modem )
 8007bf6:	b114      	cbz	r4, 8007bfe <SX1276SetMaxPayloadLength+0x12>
 8007bf8:	2c01      	cmp	r4, #1
 8007bfa:	d00a      	beq.n	8007c12 <SX1276SetMaxPayloadLength+0x26>
}
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <SX1276SetMaxPayloadLength+0x30>)
 8007c00:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f9      	bne.n	8007bfc <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8007c08:	4629      	mov	r1, r5
 8007c0a:	2032      	movs	r0, #50	; 0x32
 8007c0c:	f005 fe1c 	bl	800d848 <SX1276Write>
 8007c10:	e7f4      	b.n	8007bfc <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8007c12:	4629      	mov	r1, r5
 8007c14:	2023      	movs	r0, #35	; 0x23
 8007c16:	f005 fe17 	bl	800d848 <SX1276Write>
}
 8007c1a:	e7ef      	b.n	8007bfc <SX1276SetMaxPayloadLength+0x10>
 8007c1c:	20000d24 	.word	0x20000d24

08007c20 <SX1276SetPublicNetwork>:
{
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7ff fc8b 	bl	8007540 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8007c2a:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <SX1276SetPublicNetwork+0x28>)
 8007c2c:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8007c30:	b124      	cbz	r4, 8007c3c <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8007c32:	2134      	movs	r1, #52	; 0x34
 8007c34:	2039      	movs	r0, #57	; 0x39
 8007c36:	f005 fe07 	bl	800d848 <SX1276Write>
}
 8007c3a:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8007c3c:	2112      	movs	r1, #18
 8007c3e:	2039      	movs	r0, #57	; 0x39
 8007c40:	f005 fe02 	bl	800d848 <SX1276Write>
}
 8007c44:	e7f9      	b.n	8007c3a <SX1276SetPublicNetwork+0x1a>
 8007c46:	bf00      	nop
 8007c48:	20000d24 	.word	0x20000d24

08007c4c <SX1276OnTimeoutIrq>:
{
 8007c4c:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8007c4e:	4b33      	ldr	r3, [pc, #204]	; (8007d1c <SX1276OnTimeoutIrq+0xd0>)
 8007c50:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d002      	beq.n	8007c5e <SX1276OnTimeoutIrq+0x12>
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d033      	beq.n	8007cc4 <SX1276OnTimeoutIrq+0x78>
}
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8007c5e:	4b2f      	ldr	r3, [pc, #188]	; (8007d1c <SX1276OnTimeoutIrq+0xd0>)
 8007c60:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8007c64:	b143      	cbz	r3, 8007c78 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007c66:	4b2e      	ldr	r3, [pc, #184]	; (8007d20 <SX1276OnTimeoutIrq+0xd4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f6      	beq.n	8007c5c <SX1276OnTimeoutIrq+0x10>
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f3      	beq.n	8007c5c <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8007c74:	4798      	blx	r3
 8007c76:	e7f1      	b.n	8007c5c <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007c78:	4c28      	ldr	r4, [pc, #160]	; (8007d1c <SX1276OnTimeoutIrq+0xd0>)
 8007c7a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007c7e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007c82:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007c86:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8007c8a:	210b      	movs	r1, #11
 8007c8c:	203e      	movs	r0, #62	; 0x3e
 8007c8e:	f005 fddb 	bl	800d848 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8007c92:	2110      	movs	r1, #16
 8007c94:	203f      	movs	r0, #63	; 0x3f
 8007c96:	f005 fdd7 	bl	800d848 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8007c9a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8007c9e:	b14b      	cbz	r3, 8007cb4 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007ca0:	200d      	movs	r0, #13
 8007ca2:	f005 fddd 	bl	800d860 <SX1276Read>
 8007ca6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8007caa:	b2c9      	uxtb	r1, r1
 8007cac:	200d      	movs	r0, #13
 8007cae:	f005 fdcb 	bl	800d848 <SX1276Write>
 8007cb2:	e7d8      	b.n	8007c66 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8007cb4:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <SX1276OnTimeoutIrq+0xd0>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8007cbc:	4819      	ldr	r0, [pc, #100]	; (8007d24 <SX1276OnTimeoutIrq+0xd8>)
 8007cbe:	f7fe fddf 	bl	8006880 <TimerStop>
 8007cc2:	e7d0      	b.n	8007c66 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8007cc4:	f7fe fa76 	bl	80061b4 <SX1276Reset>
        RxChainCalibration( );
 8007cc8:	f7ff f960 	bl	8006f8c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f005 fdd3 	bl	800d878 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007cd2:	2400      	movs	r4, #0
 8007cd4:	e00c      	b.n	8007cf0 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <SX1276OnTimeoutIrq+0xdc>)
 8007cd8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007cdc:	18d5      	adds	r5, r2, r3
 8007cde:	5cd0      	ldrb	r0, [r2, r3]
 8007ce0:	f7ff fc2e 	bl	8007540 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007ce4:	78a9      	ldrb	r1, [r5, #2]
 8007ce6:	7868      	ldrb	r0, [r5, #1]
 8007ce8:	f005 fdae 	bl	800d848 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007cec:	3401      	adds	r4, #1
 8007cee:	b2e4      	uxtb	r4, r4
 8007cf0:	2c0f      	cmp	r4, #15
 8007cf2:	d9f0      	bls.n	8007cd6 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f7ff fc23 	bl	8007540 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8007cfa:	4c08      	ldr	r4, [pc, #32]	; (8007d1c <SX1276OnTimeoutIrq+0xd0>)
 8007cfc:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8007d00:	f7ff ff8e 	bl	8007c20 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007d0a:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <SX1276OnTimeoutIrq+0xd4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0a4      	beq.n	8007c5c <SX1276OnTimeoutIrq+0x10>
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0a1      	beq.n	8007c5c <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8007d18:	4798      	blx	r3
}
 8007d1a:	e79f      	b.n	8007c5c <SX1276OnTimeoutIrq+0x10>
 8007d1c:	20000d24 	.word	0x20000d24
 8007d20:	20000bf0 	.word	0x20000bf0
 8007d24:	20000bf4 	.word	0x20000bf4
 8007d28:	08010168 	.word	0x08010168

08007d2c <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007d34:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007d36:	6843      	ldr	r3, [r0, #4]
 8007d38:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8007d3a:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8007d3c:	2a01      	cmp	r2, #1
 8007d3e:	d015      	beq.n	8007d6c <uart_stm32_configure+0x40>
 8007d40:	2a02      	cmp	r2, #2
 8007d42:	d116      	bne.n	8007d72 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 8007d44:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007d48:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d017      	beq.n	8007d7e <uart_stm32_configure+0x52>
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d018      	beq.n	8007d84 <uart_stm32_configure+0x58>
 8007d52:	b18b      	cbz	r3, 8007d78 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 8007d54:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8007d58:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 8007d5a:	2902      	cmp	r1, #2
 8007d5c:	d015      	beq.n	8007d8a <uart_stm32_configure+0x5e>
 8007d5e:	2904      	cmp	r1, #4
 8007d60:	d019      	beq.n	8007d96 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	f040 8097 	bne.w	8007e96 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 8007d68:	2700      	movs	r7, #0
 8007d6a:	e016      	b.n	8007d9a <uart_stm32_configure+0x6e>
	switch (parity) {
 8007d6c:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8007d70:	e7ea      	b.n	8007d48 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8007d72:	f04f 0e00 	mov.w	lr, #0
 8007d76:	e7e7      	b.n	8007d48 <uart_stm32_configure+0x1c>
	switch (sb) {
 8007d78:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 8007d7c:	e7ec      	b.n	8007d58 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 8007d7e:	f04f 0c00 	mov.w	ip, #0
 8007d82:	e7e9      	b.n	8007d58 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8007d84:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8007d88:	e7e6      	b.n	8007d58 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 8007d8a:	b10a      	cbz	r2, 8007d90 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 8007d8c:	2700      	movs	r7, #0
 8007d8e:	e004      	b.n	8007d9a <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8007d90:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8007d94:	e001      	b.n	8007d9a <uart_stm32_configure+0x6e>
	switch (db) {
 8007d96:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8007d9a:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8007d9e:	f1ba 0f01 	cmp.w	sl, #1
 8007da2:	d07b      	beq.n	8007e9c <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8007da4:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8007da8:	f1a2 0903 	sub.w	r9, r2, #3
 8007dac:	fa5f f989 	uxtb.w	r9, r9
 8007db0:	f1b9 0f01 	cmp.w	r9, #1
 8007db4:	f240 80af 	bls.w	8007f16 <uart_stm32_configure+0x1ea>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8007db8:	b112      	cbz	r2, 8007dc0 <uart_stm32_configure+0x94>
 8007dba:	2904      	cmp	r1, #4
 8007dbc:	f000 80ae 	beq.w	8007f1c <uart_stm32_configure+0x1f0>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80ae 	beq.w	8007f22 <uart_stm32_configure+0x1f6>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	f000 80ae 	beq.w	8007f28 <uart_stm32_configure+0x1fc>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8007dcc:	2901      	cmp	r1, #1
 8007dce:	f240 80ae 	bls.w	8007f2e <uart_stm32_configure+0x202>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8007dd2:	2904      	cmp	r1, #4
 8007dd4:	f000 80ae 	beq.w	8007f34 <uart_stm32_configure+0x208>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8007dd8:	f1ba 0f00 	cmp.w	sl, #0
 8007ddc:	d017      	beq.n	8007e0e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8007dde:	4b5a      	ldr	r3, [pc, #360]	; (8007f48 <uart_stm32_configure+0x21c>)
 8007de0:	429d      	cmp	r5, r3
 8007de2:	d010      	beq.n	8007e06 <uart_stm32_configure+0xda>
 8007de4:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8007de8:	429d      	cmp	r5, r3
 8007dea:	d00c      	beq.n	8007e06 <uart_stm32_configure+0xda>
 8007dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df0:	429d      	cmp	r5, r3
 8007df2:	d008      	beq.n	8007e06 <uart_stm32_configure+0xda>
 8007df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df8:	429d      	cmp	r5, r3
 8007dfa:	d004      	beq.n	8007e06 <uart_stm32_configure+0xda>
 8007dfc:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8007e00:	429d      	cmp	r5, r3
 8007e02:	f040 809a 	bne.w	8007f3a <uart_stm32_configure+0x20e>
 8007e06:	f1ba 0f01 	cmp.w	sl, #1
 8007e0a:	f040 8099 	bne.w	8007f40 <uart_stm32_configure+0x214>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e16:	6843      	ldr	r3, [r0, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8007e20:	459e      	cmp	lr, r3
 8007e22:	d005      	beq.n	8007e30 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8007e24:	6813      	ldr	r3, [r2, #0]
 8007e26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e2a:	ea4e 0303 	orr.w	r3, lr, r3
 8007e2e:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e30:	6843      	ldr	r3, [r0, #4]
 8007e32:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8007e34:	6853      	ldr	r3, [r2, #4]
 8007e36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8007e3a:	459c      	cmp	ip, r3
 8007e3c:	d005      	beq.n	8007e4a <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007e3e:	6853      	ldr	r3, [r2, #4]
 8007e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e44:	ea4c 0303 	orr.w	r3, ip, r3
 8007e48:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e4a:	6843      	ldr	r3, [r0, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8007e4e:	6813      	ldr	r3, [r2, #0]
 8007e50:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8007e54:	429f      	cmp	r7, r3
 8007e56:	d004      	beq.n	8007e62 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8007e58:	6813      	ldr	r3, [r2, #0]
 8007e5a:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8007e5e:	431f      	orrs	r7, r3
 8007e60:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007e62:	6843      	ldr	r3, [r0, #4]
 8007e64:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007e66:	6893      	ldr	r3, [r2, #8]
 8007e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8007e6c:	4598      	cmp	r8, r3
 8007e6e:	d005      	beq.n	8007e7c <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007e70:	6893      	ldr	r3, [r2, #8]
 8007e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e76:	ea48 0303 	orr.w	r3, r8, r3
 8007e7a:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8007e7c:	f8d4 8000 	ldr.w	r8, [r4]
 8007e80:	6833      	ldr	r3, [r6, #0]
 8007e82:	4598      	cmp	r8, r3
 8007e84:	d10d      	bne.n	8007ea2 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8007e8e:	2000      	movs	r0, #0
};
 8007e90:	b002      	add	sp, #8
 8007e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8007e96:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8007e9a:	e77e      	b.n	8007d9a <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 8007e9c:	f44f 7840 	mov.w	r8, #768	; 0x300
 8007ea0:	e782      	b.n	8007da8 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007ea2:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007ea4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007ea8:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 8007eac:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007eb0:	4650      	mov	r0, sl
 8007eb2:	f005 fe86 	bl	800dbc2 <z_device_ready>
 8007eb6:	b1b8      	cbz	r0, 8007ee8 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8007eb8:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	b1b3      	cbz	r3, 8007eee <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8007ec0:	aa01      	add	r2, sp, #4
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	4798      	blx	r3
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	db13      	blt.n	8007ef4 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ed2:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8007eda:	fbb3 f3f8 	udiv	r3, r3, r8
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	6033      	str	r3, [r6, #0]
 8007ee6:	e7ce      	b.n	8007e86 <uart_stm32_configure+0x15a>
 8007ee8:	f06f 0012 	mvn.w	r0, #18
 8007eec:	e7ec      	b.n	8007ec8 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 8007eee:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007ef2:	e7e9      	b.n	8007ec8 <uart_stm32_configure+0x19c>
 8007ef4:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <uart_stm32_configure+0x220>)
 8007ef6:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <uart_stm32_configure+0x224>)
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8007efc:	f04f 0100 	mov.w	r1, #0
 8007f00:	2201      	movs	r2, #1
 8007f02:	f362 0102 	bfi	r1, r2, #0, #3
 8007f06:	f36f 01c5 	bfc	r1, #3, #3
 8007f0a:	f363 118f 	bfi	r1, r3, #6, #10
 8007f0e:	4811      	ldr	r0, [pc, #68]	; (8007f54 <uart_stm32_configure+0x228>)
 8007f10:	f7fb fc2a 	bl	8003768 <log_0>
		return;
 8007f14:	e7e5      	b.n	8007ee2 <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 8007f16:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f1a:	e7b9      	b.n	8007e90 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8007f1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f20:	e7b6      	b.n	8007e90 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8007f22:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f26:	e7b3      	b.n	8007e90 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8007f28:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f2c:	e7b0      	b.n	8007e90 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 8007f2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f32:	e7ad      	b.n	8007e90 <uart_stm32_configure+0x164>
 8007f34:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f38:	e7aa      	b.n	8007e90 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 8007f3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f3e:	e7a7      	b.n	8007e90 <uart_stm32_configure+0x164>
 8007f40:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007f44:	e7a4      	b.n	8007e90 <uart_stm32_configure+0x164>
 8007f46:	bf00      	nop
 8007f48:	40013800 	.word	0x40013800
 8007f4c:	0800efc4 	.word	0x0800efc4
 8007f50:	0800ef6c 	.word	0x0800ef6c
 8007f54:	0800fd18 	.word	0x0800fd18

08007f58 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8007f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8007f60:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007f62:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007f66:	4637      	mov	r7, r6
 8007f68:	f857 4b08 	ldr.w	r4, [r7], #8
	data->clock = clk;
 8007f6c:	4854      	ldr	r0, [pc, #336]	; (80080c0 <uart_stm32_init+0x168>)
 8007f6e:	f8c8 0004 	str.w	r0, [r8, #4]
 8007f72:	f005 fe26 	bl	800dbc2 <z_device_ready>
 8007f76:	b310      	cbz	r0, 8007fbe <uart_stm32_init+0x66>
	const struct clock_control_driver_api *api =
 8007f78:	4851      	ldr	r0, [pc, #324]	; (80080c0 <uart_stm32_init+0x168>)
 8007f7a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4798      	blx	r3
 8007f82:	4607      	mov	r7, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8007f84:	2f00      	cmp	r7, #0
 8007f86:	f040 8095 	bne.w	80080b4 <uart_stm32_init+0x15c>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8007f8a:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	69f1      	ldr	r1, [r6, #28]
 8007f90:	69b0      	ldr	r0, [r6, #24]
 8007f92:	f004 fdb7 	bl	800cb04 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f2c0 808f 	blt.w	80080ba <uart_stm32_init+0x162>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	f023 0301 	bic.w	r3, r3, #1
 8007fa2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	f043 030c 	orr.w	r3, r3, #12
 8007faa:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8007fac:	6971      	ldr	r1, [r6, #20]
 8007fae:	2902      	cmp	r1, #2
 8007fb0:	d01b      	beq.n	8007fea <uart_stm32_init+0x92>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8007fb2:	2901      	cmp	r1, #1
 8007fb4:	d062      	beq.n	800807c <uart_stm32_init+0x124>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8007fb6:	b929      	cbnz	r1, 8007fc4 <uart_stm32_init+0x6c>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007fb8:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8007fba:	4619      	mov	r1, r3
 8007fbc:	e019      	b.n	8007ff2 <uart_stm32_init+0x9a>
 8007fbe:	f06f 0712 	mvn.w	r7, #18
 8007fc2:	e7df      	b.n	8007f84 <uart_stm32_init+0x2c>
 8007fc4:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <uart_stm32_init+0x16c>)
 8007fc6:	4a40      	ldr	r2, [pc, #256]	; (80080c8 <uart_stm32_init+0x170>)
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Invalid parity setting '%d'."
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	2002      	movs	r0, #2
 8007fd2:	f360 0202 	bfi	r2, r0, #0, #3
 8007fd6:	f36f 02c5 	bfc	r2, #3, #3
 8007fda:	f363 128f 	bfi	r2, r3, #6, #10
 8007fde:	483b      	ldr	r0, [pc, #236]	; (80080cc <uart_stm32_init+0x174>)
 8007fe0:	f7fb fbec 	bl	80037bc <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007fe4:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	e003      	b.n	8007ff2 <uart_stm32_init+0x9a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8007fee:	f44f 6180 	mov.w	r1, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007ff8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	4313      	orrs	r3, r2
 8008000:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008008:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800800a:	7c33      	ldrb	r3, [r6, #16]
 800800c:	b12b      	cbz	r3, 800801a <uart_stm32_init+0xc2>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800800e:	686b      	ldr	r3, [r5, #4]
 8008010:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008012:	6893      	ldr	r3, [r2, #8]
 8008014:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008018:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800801a:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800801e:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8008020:	686d      	ldr	r5, [r5, #4]
 8008022:	f855 6b08 	ldr.w	r6, [r5], #8
	if (clock_control_get_rate(data->clock,
 8008026:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800802a:	4648      	mov	r0, r9
 800802c:	f005 fdc9 	bl	800dbc2 <z_device_ready>
 8008030:	b348      	cbz	r0, 8008086 <uart_stm32_init+0x12e>
	const struct clock_control_driver_api *api =
 8008032:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	b343      	cbz	r3, 800808c <uart_stm32_init+0x134>
	return api->get_rate(dev, sys, rate);
 800803a:	aa01      	add	r2, sp, #4
 800803c:	4629      	mov	r1, r5
 800803e:	4648      	mov	r0, r9
 8008040:	4798      	blx	r3
 8008042:	2800      	cmp	r0, #0
 8008044:	db25      	blt.n	8008092 <uart_stm32_init+0x13a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8008046:	6833      	ldr	r3, [r6, #0]
 8008048:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800804c:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8008054:	fbb3 f3f8 	udiv	r3, r3, r8
 8008058:	b29b      	uxth	r3, r3
 800805a:	60f3      	str	r3, [r6, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8008064:	69e3      	ldr	r3, [r4, #28]
 8008066:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800806a:	d0fb      	beq.n	8008064 <uart_stm32_init+0x10c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800806c:	69e3      	ldr	r3, [r4, #28]
 800806e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008072:	d0fb      	beq.n	800806c <uart_stm32_init+0x114>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8008074:	4638      	mov	r0, r7
 8008076:	b003      	add	sp, #12
 8008078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800807c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8008080:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008084:	e7b5      	b.n	8007ff2 <uart_stm32_init+0x9a>
 8008086:	f06f 0012 	mvn.w	r0, #18
 800808a:	e7da      	b.n	8008042 <uart_stm32_init+0xea>
		return -ENOSYS;
 800808c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8008090:	e7d7      	b.n	8008042 <uart_stm32_init+0xea>
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <uart_stm32_init+0x16c>)
 8008094:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <uart_stm32_init+0x170>)
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800809a:	f04f 0100 	mov.w	r1, #0
 800809e:	2201      	movs	r2, #1
 80080a0:	f362 0102 	bfi	r1, r2, #0, #3
 80080a4:	f36f 01c5 	bfc	r1, #3, #3
 80080a8:	f363 118f 	bfi	r1, r3, #6, #10
 80080ac:	4808      	ldr	r0, [pc, #32]	; (80080d0 <uart_stm32_init+0x178>)
 80080ae:	f7fb fb5b 	bl	8003768 <log_0>
		return;
 80080b2:	e7d3      	b.n	800805c <uart_stm32_init+0x104>
		return -EIO;
 80080b4:	f06f 0704 	mvn.w	r7, #4
 80080b8:	e7dc      	b.n	8008074 <uart_stm32_init+0x11c>
		return err;
 80080ba:	4607      	mov	r7, r0
 80080bc:	e7da      	b.n	8008074 <uart_stm32_init+0x11c>
 80080be:	bf00      	nop
 80080c0:	0800eb6c 	.word	0x0800eb6c
 80080c4:	0800efc4 	.word	0x0800efc4
 80080c8:	0800ef6c 	.word	0x0800ef6c
 80080cc:	08010198 	.word	0x08010198
 80080d0:	0800fd18 	.word	0x0800fd18

080080d4 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80080d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080d8:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80080da:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80080dc:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80080de:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80080e2:	d101      	bne.n	80080e8 <elapsed+0x14>
	    || (val1 < val2)) {
 80080e4:	4281      	cmp	r1, r0
 80080e6:	d208      	bcs.n	80080fa <elapsed+0x26>
		overflow_cyc += last_load;
 80080e8:	4b07      	ldr	r3, [pc, #28]	; (8008108 <elapsed+0x34>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4907      	ldr	r1, [pc, #28]	; (800810c <elapsed+0x38>)
 80080ee:	6809      	ldr	r1, [r1, #0]
 80080f0:	440a      	add	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80080f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080f8:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <elapsed+0x38>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	1a1b      	subs	r3, r3, r0
 8008100:	4a01      	ldr	r2, [pc, #4]	; (8008108 <elapsed+0x34>)
 8008102:	6810      	ldr	r0, [r2, #0]
}
 8008104:	4418      	add	r0, r3
 8008106:	4770      	bx	lr
 8008108:	20000e8c 	.word	0x20000e8c
 800810c:	20000e88 	.word	0x20000e88

08008110 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8008110:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8008112:	f7ff ffdf 	bl	80080d4 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <sys_clock_isr+0x38>)
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	4a0c      	ldr	r2, [pc, #48]	; (800814c <sys_clock_isr+0x3c>)
 800811c:	6811      	ldr	r1, [r2, #0]
 800811e:	4408      	add	r0, r1
 8008120:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <sys_clock_isr+0x40>)
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	1ac0      	subs	r0, r0, r3
 800812c:	4909      	ldr	r1, [pc, #36]	; (8008154 <sys_clock_isr+0x44>)
 800812e:	fba1 1000 	umull	r1, r0, r1, r0
 8008132:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8008134:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8008138:	fb01 3300 	mla	r3, r1, r0, r3
 800813c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 800813e:	f002 f83b 	bl	800a1b8 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 8008142:	f7fc f85b 	bl	80041fc <z_arm_exc_exit>
}
 8008146:	bd08      	pop	{r3, pc}
 8008148:	20000e8c 	.word	0x20000e8c
 800814c:	20000e84 	.word	0x20000e84
 8008150:	20000e80 	.word	0x20000e80
 8008154:	10624dd3 	.word	0x10624dd3

08008158 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <sys_clock_driver_init+0x28>)
 800815a:	2210      	movs	r2, #16
 800815c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8008160:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <sys_clock_driver_init+0x2c>)
 8008166:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8008168:	2000      	movs	r0, #0
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <sys_clock_driver_init+0x30>)
 800816c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800816e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008172:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8008174:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8008176:	691a      	ldr	r2, [r3, #16]
 8008178:	f042 0207 	orr.w	r2, r2, #7
 800817c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800817e:	4770      	bx	lr
 8008180:	e000ed00 	.word	0xe000ed00
 8008184:	20000e88 	.word	0x20000e88
 8008188:	20000e8c 	.word	0x20000e8c

0800818c <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 800818c:	b111      	cbz	r1, 8008194 <sys_clock_set_timeout+0x8>
 800818e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008192:	d00e      	beq.n	80081b2 <sys_clock_set_timeout+0x26>
{
 8008194:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 8008196:	4b37      	ldr	r3, [pc, #220]	; (8008274 <sys_clock_set_timeout+0xe8>)
 8008198:	681c      	ldr	r4, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800819a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800819e:	d013      	beq.n	80081c8 <sys_clock_set_timeout+0x3c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80081a0:	1e46      	subs	r6, r0, #1
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	dd13      	ble.n	80081ce <sys_clock_set_timeout+0x42>
 80081a6:	f5b6 6f03 	cmp.w	r6, #2096	; 0x830
 80081aa:	db11      	blt.n	80081d0 <sys_clock_set_timeout+0x44>
 80081ac:	f44f 6603 	mov.w	r6, #2096	; 0x830
 80081b0:	e00e      	b.n	80081d0 <sys_clock_set_timeout+0x44>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80081b2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80081b6:	6913      	ldr	r3, [r2, #16]
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80081be:	4b2d      	ldr	r3, [pc, #180]	; (8008274 <sys_clock_set_timeout+0xe8>)
 80081c0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80081c4:	601a      	str	r2, [r3, #0]
		return;
 80081c6:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80081c8:	f44f 6003 	mov.w	r0, #2096	; 0x830
 80081cc:	e7e8      	b.n	80081a0 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80081ce:	2600      	movs	r6, #0
	__asm__ volatile(
 80081d0:	f04f 0310 	mov.w	r3, #16
 80081d4:	f3ef 8511 	mrs	r5, BASEPRI
 80081d8:	f383 8812 	msr	BASEPRI_MAX, r3
 80081dc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 80081e0:	f7ff ff78 	bl	80080d4 <elapsed>

	val1 = SysTick->VAL;
 80081e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081e8:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <sys_clock_set_timeout+0xec>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4410      	add	r0, r2
 80081f0:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80081f2:	4b22      	ldr	r3, [pc, #136]	; (800827c <sys_clock_set_timeout+0xf0>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 80081f8:	4b21      	ldr	r3, [pc, #132]	; (8008280 <sys_clock_set_timeout+0xf4>)
 80081fa:	681a      	ldr	r2, [r3, #0]

	if ((int32_t)unannounced < 0) {
 80081fc:	1a83      	subs	r3, r0, r2
 80081fe:	d416      	bmi.n	800822e <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 8008200:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40

		/* Round delay up to next tick boundary */
		delay += unannounced;
 8008204:	fb0c 3306 	mla	r3, ip, r6, r3
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8008208:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 800820c:	331f      	adds	r3, #31
 800820e:	4e1d      	ldr	r6, [pc, #116]	; (8008284 <sys_clock_set_timeout+0xf8>)
 8008210:	fba6 6303 	umull	r6, r3, r6, r3
 8008214:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8008216:	1a12      	subs	r2, r2, r0
 8008218:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d90a      	bls.n	8008238 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 8008222:	4a19      	ldr	r2, [pc, #100]	; (8008288 <sys_clock_set_timeout+0xfc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d909      	bls.n	800823c <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8008228:	4b12      	ldr	r3, [pc, #72]	; (8008274 <sys_clock_set_timeout+0xe8>)
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e008      	b.n	8008240 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 800822e:	4b11      	ldr	r3, [pc, #68]	; (8008274 <sys_clock_set_timeout+0xe8>)
 8008230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e003      	b.n	8008240 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8008238:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 800823c:	4a0d      	ldr	r2, [pc, #52]	; (8008274 <sys_clock_set_timeout+0xe8>)
 800823e:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 8008240:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008244:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 8008246:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <sys_clock_set_timeout+0xe8>)
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	3a01      	subs	r2, #1
 800824c:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800824e:	2200      	movs	r2, #0
 8008250:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 8008252:	42b1      	cmp	r1, r6
 8008254:	d209      	bcs.n	800826a <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 8008256:	1ba4      	subs	r4, r4, r6
 8008258:	440c      	add	r4, r1
 800825a:	4420      	add	r0, r4
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <sys_clock_set_timeout+0xec>)
 800825e:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8008260:	f385 8811 	msr	BASEPRI, r5
 8008264:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8008268:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 800826a:	1b8c      	subs	r4, r1, r6
 800826c:	4420      	add	r0, r4
 800826e:	4b02      	ldr	r3, [pc, #8]	; (8008278 <sys_clock_set_timeout+0xec>)
 8008270:	6018      	str	r0, [r3, #0]
 8008272:	e7f5      	b.n	8008260 <sys_clock_set_timeout+0xd4>
 8008274:	20000e88 	.word	0x20000e88
 8008278:	20000e84 	.word	0x20000e84
 800827c:	20000e8c 	.word	0x20000e8c
 8008280:	20000e80 	.word	0x20000e80
 8008284:	10624dd3 	.word	0x10624dd3
 8008288:	00ffdc00 	.word	0x00ffdc00

0800828c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 800828c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800828e:	f04f 0310 	mov.w	r3, #16
 8008292:	f3ef 8411 	mrs	r4, BASEPRI
 8008296:	f383 8812 	msr	BASEPRI_MAX, r3
 800829a:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 800829e:	f7ff ff19 	bl	80080d4 <elapsed>
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <sys_clock_elapsed+0x34>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4418      	add	r0, r3
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <sys_clock_elapsed+0x38>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 80082ae:	f384 8811 	msr	BASEPRI, r4
 80082b2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 80082b6:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <sys_clock_elapsed+0x3c>)
 80082b8:	fba3 3000 	umull	r3, r0, r3, r0
}
 80082bc:	0a40      	lsrs	r0, r0, #9
 80082be:	bd10      	pop	{r4, pc}
 80082c0:	20000e84 	.word	0x20000e84
 80082c4:	20000e80 	.word	0x20000e80
 80082c8:	10624dd3 	.word	0x10624dd3

080082cc <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 80082cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80082ce:	f04f 0310 	mov.w	r3, #16
 80082d2:	f3ef 8411 	mrs	r4, BASEPRI
 80082d6:	f383 8812 	msr	BASEPRI_MAX, r3
 80082da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 80082de:	f7ff fef9 	bl	80080d4 <elapsed>
 80082e2:	4b04      	ldr	r3, [pc, #16]	; (80082f4 <sys_clock_cycle_get_32+0x28>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4418      	add	r0, r3
	__asm__ volatile(
 80082e8:	f384 8811 	msr	BASEPRI, r4
 80082ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	bf00      	nop
 80082f4:	20000e84 	.word	0x20000e84

080082f8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80082f8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80082fa:	6a03      	ldr	r3, [r0, #32]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008302:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008304:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008306:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8008308:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 800830c:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8008310:	680c      	ldr	r4, [r1, #0]
 8008312:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8008316:	f023 0302 	bic.w	r3, r3, #2
 800831a:	690d      	ldr	r5, [r1, #16]
 800831c:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800831e:	f023 0301 	bic.w	r3, r3, #1
 8008322:	684d      	ldr	r5, [r1, #4]
 8008324:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	4d13      	ldr	r5, [pc, #76]	; (8008374 <OC1Config+0x7c>)
 8008328:	42a8      	cmp	r0, r5
 800832a:	d007      	beq.n	800833c <OC1Config+0x44>
 800832c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8008330:	42a8      	cmp	r0, r5
 8008332:	d003      	beq.n	800833c <OC1Config+0x44>
 8008334:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008338:	42a8      	cmp	r0, r5
 800833a:	d112      	bne.n	8008362 <OC1Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800833c:	f023 0308 	bic.w	r3, r3, #8
 8008340:	694d      	ldr	r5, [r1, #20]
 8008342:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8008346:	f023 0304 	bic.w	r3, r3, #4
 800834a:	688d      	ldr	r5, [r1, #8]
 800834c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8008350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008354:	698d      	ldr	r5, [r1, #24]
 8008356:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8008358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800835c:	69cd      	ldr	r5, [r1, #28]
 800835e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008362:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8008364:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8008366:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008368:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800836a:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800836c:	2000      	movs	r0, #0
 800836e:	bc30      	pop	{r4, r5}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40012c00 	.word	0x40012c00

08008378 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008378:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800837a:	6a03      	ldr	r3, [r0, #32]
 800837c:	f023 0310 	bic.w	r3, r3, #16
 8008380:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008382:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008384:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8008386:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008388:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 800838c:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 8008390:	680c      	ldr	r4, [r1, #0]
 8008392:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008396:	f023 0320 	bic.w	r3, r3, #32
 800839a:	690d      	ldr	r5, [r1, #16]
 800839c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	684d      	ldr	r5, [r1, #4]
 80083a6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	4d13      	ldr	r5, [pc, #76]	; (80083f8 <OC2Config+0x80>)
 80083ac:	42a8      	cmp	r0, r5
 80083ae:	d007      	beq.n	80083c0 <OC2Config+0x48>
 80083b0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80083b4:	42a8      	cmp	r0, r5
 80083b6:	d003      	beq.n	80083c0 <OC2Config+0x48>
 80083b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80083bc:	42a8      	cmp	r0, r5
 80083be:	d113      	bne.n	80083e8 <OC2Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80083c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c4:	694d      	ldr	r5, [r1, #20]
 80083c6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80083ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ce:	688d      	ldr	r5, [r1, #8]
 80083d0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80083d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d8:	698d      	ldr	r5, [r1, #24]
 80083da:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80083de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083e2:	69cd      	ldr	r5, [r1, #28]
 80083e4:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80083e8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80083ea:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80083ec:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80083ee:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80083f0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80083f2:	2000      	movs	r0, #0
 80083f4:	bc30      	pop	{r4, r5}
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00

080083fc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80083fc:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80083fe:	6a03      	ldr	r3, [r0, #32]
 8008400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008404:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8008406:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8008408:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800840a:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800840c:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8008410:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8008414:	680c      	ldr	r4, [r1, #0]
 8008416:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800841a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800841e:	690d      	ldr	r5, [r1, #16]
 8008420:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008428:	684d      	ldr	r5, [r1, #4]
 800842a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800842e:	4d13      	ldr	r5, [pc, #76]	; (800847c <OC3Config+0x80>)
 8008430:	42a8      	cmp	r0, r5
 8008432:	d007      	beq.n	8008444 <OC3Config+0x48>
 8008434:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8008438:	42a8      	cmp	r0, r5
 800843a:	d003      	beq.n	8008444 <OC3Config+0x48>
 800843c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008440:	42a8      	cmp	r0, r5
 8008442:	d113      	bne.n	800846c <OC3Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8008444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008448:	694d      	ldr	r5, [r1, #20]
 800844a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800844e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008452:	688d      	ldr	r5, [r1, #8]
 8008454:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800845c:	698d      	ldr	r5, [r1, #24]
 800845e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8008462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008466:	69cd      	ldr	r5, [r1, #28]
 8008468:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800846c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800846e:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008470:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008472:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008474:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8008476:	2000      	movs	r0, #0
 8008478:	bc30      	pop	{r4, r5}
 800847a:	4770      	bx	lr
 800847c:	40012c00 	.word	0x40012c00

08008480 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008480:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8008482:	6a03      	ldr	r3, [r0, #32]
 8008484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008488:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800848a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800848c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800848e:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8008490:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008494:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008498:	680d      	ldr	r5, [r1, #0]
 800849a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800849e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084a2:	690d      	ldr	r5, [r1, #16]
 80084a4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80084a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ac:	684d      	ldr	r5, [r1, #4]
 80084ae:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	4d0c      	ldr	r5, [pc, #48]	; (80084e4 <OC4Config+0x64>)
 80084b4:	42a8      	cmp	r0, r5
 80084b6:	d007      	beq.n	80084c8 <OC4Config+0x48>
 80084b8:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80084bc:	42a8      	cmp	r0, r5
 80084be:	d003      	beq.n	80084c8 <OC4Config+0x48>
 80084c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084c4:	42a8      	cmp	r0, r5
 80084c6:	d104      	bne.n	80084d2 <OC4Config+0x52>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80084c8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80084cc:	698d      	ldr	r5, [r1, #24]
 80084ce:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80084d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80084d4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80084d6:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80084d8:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80084da:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80084dc:	2000      	movs	r0, #0
 80084de:	bc30      	pop	{r4, r5}
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	40012c00 	.word	0x40012c00

080084e8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80084e8:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80084ea:	6a03      	ldr	r3, [r0, #32]
 80084ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80084f2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80084f4:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80084f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80084fe:	680c      	ldr	r4, [r1, #0]
 8008500:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8008502:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008506:	690c      	ldr	r4, [r1, #16]
 8008508:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800850c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008510:	684c      	ldr	r4, [r1, #4]
 8008512:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008516:	4c0d      	ldr	r4, [pc, #52]	; (800854c <OC5Config+0x64>)
 8008518:	42a0      	cmp	r0, r4
 800851a:	d007      	beq.n	800852c <OC5Config+0x44>
 800851c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008520:	42a0      	cmp	r0, r4
 8008522:	d003      	beq.n	800852c <OC5Config+0x44>
 8008524:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008528:	42a0      	cmp	r0, r4
 800852a:	d107      	bne.n	800853c <OC5Config+0x54>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800852c:	6844      	ldr	r4, [r0, #4]
 800852e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8008532:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8008536:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 800853a:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800853c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800853e:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8008540:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008542:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008544:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8008546:	2000      	movs	r0, #0
 8008548:	bc10      	pop	{r4}
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00

08008550 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8008550:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8008552:	6a03      	ldr	r3, [r0, #32]
 8008554:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008558:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800855a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800855c:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800855e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008562:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008566:	680c      	ldr	r4, [r1, #0]
 8008568:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800856c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008570:	690c      	ldr	r4, [r1, #16]
 8008572:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8008576:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800857a:	684c      	ldr	r4, [r1, #4]
 800857c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008580:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <OC6Config+0x64>)
 8008582:	42a0      	cmp	r0, r4
 8008584:	d007      	beq.n	8008596 <OC6Config+0x46>
 8008586:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800858a:	42a0      	cmp	r0, r4
 800858c:	d003      	beq.n	8008596 <OC6Config+0x46>
 800858e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008592:	42a0      	cmp	r0, r4
 8008594:	d107      	bne.n	80085a6 <OC6Config+0x56>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8008596:	6844      	ldr	r4, [r0, #4]
 8008598:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800859c:	f8d1 c018 	ldr.w	ip, [r1, #24]
 80085a0:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 80085a4:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80085a6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80085a8:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80085aa:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80085ac:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80085ae:	2000      	movs	r0, #0
 80085b0:	bc10      	pop	{r4}
 80085b2:	4770      	bx	lr
 80085b4:	40012c00 	.word	0x40012c00

080085b8 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80085b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085ba:	4a1e      	ldr	r2, [pc, #120]	; (8008634 <LL_TIM_Init+0x7c>)
 80085bc:	4290      	cmp	r0, r2
 80085be:	d006      	beq.n	80085ce <LL_TIM_Init+0x16>
 80085c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80085c4:	d003      	beq.n	80085ce <LL_TIM_Init+0x16>
 80085c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80085ca:	4290      	cmp	r0, r2
 80085cc:	d103      	bne.n	80085d6 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80085ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d2:	684a      	ldr	r2, [r1, #4]
 80085d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d6:	4a17      	ldr	r2, [pc, #92]	; (8008634 <LL_TIM_Init+0x7c>)
 80085d8:	4290      	cmp	r0, r2
 80085da:	d00e      	beq.n	80085fa <LL_TIM_Init+0x42>
 80085dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80085e0:	d00b      	beq.n	80085fa <LL_TIM_Init+0x42>
 80085e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80085e6:	4290      	cmp	r0, r2
 80085e8:	d007      	beq.n	80085fa <LL_TIM_Init+0x42>
 80085ea:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80085ee:	4290      	cmp	r0, r2
 80085f0:	d003      	beq.n	80085fa <LL_TIM_Init+0x42>
 80085f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085f6:	4290      	cmp	r0, r2
 80085f8:	d103      	bne.n	8008602 <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80085fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fe:	68ca      	ldr	r2, [r1, #12]
 8008600:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008602:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8008604:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008606:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8008608:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800860a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800860c:	4b09      	ldr	r3, [pc, #36]	; (8008634 <LL_TIM_Init+0x7c>)
 800860e:	4298      	cmp	r0, r3
 8008610:	d007      	beq.n	8008622 <LL_TIM_Init+0x6a>
 8008612:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8008616:	4298      	cmp	r0, r3
 8008618:	d003      	beq.n	8008622 <LL_TIM_Init+0x6a>
 800861a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800861e:	4298      	cmp	r0, r3
 8008620:	d101      	bne.n	8008626 <LL_TIM_Init+0x6e>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008622:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008624:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008626:	6943      	ldr	r3, [r0, #20]
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	6143      	str	r3, [r0, #20]
}
 800862e:	2000      	movs	r0, #0
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	40012c00 	.word	0x40012c00

08008638 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <UTILS_PLL_IsBusy+0x20>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008640:	d007      	beq.n	8008652 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8008642:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <UTILS_PLL_IsBusy+0x20>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800864c:	d000      	beq.n	8008650 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800864e:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8008650:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8008652:	2000      	movs	r0, #0
 8008654:	e7f6      	b.n	8008644 <UTILS_PLL_IsBusy+0xc>
 8008656:	bf00      	nop
 8008658:	40021000 	.word	0x40021000

0800865c <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800865c:	4b01      	ldr	r3, [pc, #4]	; (8008664 <LL_SetSystemCoreClock+0x8>)
 800865e:	6018      	str	r0, [r3, #0]
}
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	200000c0 	.word	0x200000c0

08008668 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8008668:	1e42      	subs	r2, r0, #1
 800866a:	4b29      	ldr	r3, [pc, #164]	; (8008710 <LL_SetFlashLatency+0xa8>)
 800866c:	429a      	cmp	r2, r3
 800866e:	d84c      	bhi.n	800870a <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <LL_SetFlashLatency+0xac>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8008678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800867c:	d011      	beq.n	80086a2 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800867e:	4b26      	ldr	r3, [pc, #152]	; (8008718 <LL_SetFlashLatency+0xb0>)
 8008680:	4298      	cmp	r0, r3
 8008682:	d829      	bhi.n	80086d8 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8008684:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8008688:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800868c:	4298      	cmp	r0, r3
 800868e:	d832      	bhi.n	80086f6 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8008690:	4b22      	ldr	r3, [pc, #136]	; (800871c <LL_SetFlashLatency+0xb4>)
 8008692:	4298      	cmp	r0, r3
 8008694:	d832      	bhi.n	80086fc <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8008696:	4b22      	ldr	r3, [pc, #136]	; (8008720 <LL_SetFlashLatency+0xb8>)
 8008698:	4298      	cmp	r0, r3
 800869a:	d832      	bhi.n	8008702 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800869c:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800869e:	4608      	mov	r0, r1
 80086a0:	e01c      	b.n	80086dc <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <LL_SetFlashLatency+0xbc>)
 80086a4:	4298      	cmp	r0, r3
 80086a6:	d80b      	bhi.n	80086c0 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 80086a8:	4b1f      	ldr	r3, [pc, #124]	; (8008728 <LL_SetFlashLatency+0xc0>)
 80086aa:	4298      	cmp	r0, r3
 80086ac:	d80b      	bhi.n	80086c6 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 80086ae:	4b1f      	ldr	r3, [pc, #124]	; (800872c <LL_SetFlashLatency+0xc4>)
 80086b0:	4298      	cmp	r0, r3
 80086b2:	d80b      	bhi.n	80086cc <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <LL_SetFlashLatency+0xc8>)
 80086b6:	4298      	cmp	r0, r3
 80086b8:	d80b      	bhi.n	80086d2 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80086ba:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 80086bc:	4608      	mov	r0, r1
 80086be:	e00d      	b.n	80086dc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 80086c0:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 80086c2:	2000      	movs	r0, #0
 80086c4:	e00a      	b.n	80086dc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 80086c6:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 80086c8:	2000      	movs	r0, #0
 80086ca:	e007      	b.n	80086dc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 80086cc:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 80086ce:	2000      	movs	r0, #0
 80086d0:	e004      	b.n	80086dc <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 80086d2:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 80086d4:	2000      	movs	r0, #0
 80086d6:	e001      	b.n	80086dc <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80086d8:	2100      	movs	r1, #0
        status = ERROR;
 80086da:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80086dc:	4a15      	ldr	r2, [pc, #84]	; (8008734 <LL_SetFlashLatency+0xcc>)
 80086de:	6813      	ldr	r3, [r2, #0]
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	430b      	orrs	r3, r1
 80086e6:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80086e8:	6813      	ldr	r3, [r2, #0]
 80086ea:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d00a      	beq.n	8008708 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 80086f2:	2001      	movs	r0, #1
}
 80086f4:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80086f6:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 80086f8:	2000      	movs	r0, #0
 80086fa:	e7ef      	b.n	80086dc <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 80086fc:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 80086fe:	2000      	movs	r0, #0
 8008700:	e7ec      	b.n	80086dc <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8008702:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8008704:	2000      	movs	r0, #0
 8008706:	e7e9      	b.n	80086dc <LL_SetFlashLatency+0x74>
 8008708:	4770      	bx	lr
    status = ERROR;
 800870a:	2001      	movs	r0, #1
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	04c4b3ff 	.word	0x04c4b3ff
 8008714:	40007000 	.word	0x40007000
 8008718:	018cba80 	.word	0x018cba80
 800871c:	00b71b00 	.word	0x00b71b00
 8008720:	005b8d80 	.word	0x005b8d80
 8008724:	03d09000 	.word	0x03d09000
 8008728:	02dc6c00 	.word	0x02dc6c00
 800872c:	01e84800 	.word	0x01e84800
 8008730:	00f42400 	.word	0x00f42400
 8008734:	40022000 	.word	0x40022000

08008738 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800873c:	680b      	ldr	r3, [r1, #0]
 800873e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008742:	4a26      	ldr	r2, [pc, #152]	; (80087dc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8008744:	5cd3      	ldrb	r3, [r2, r3]
 8008746:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800874a:	4b25      	ldr	r3, [pc, #148]	; (80087e0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	42ab      	cmp	r3, r5
 8008750:	d333      	bcc.n	80087ba <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 8008752:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008754:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800875c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008764:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8008766:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800876e:	d0fa      	beq.n	8008766 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8008770:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008772:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8008774:	6899      	ldr	r1, [r3, #8]
 8008776:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800877a:	430a      	orrs	r2, r1
 800877c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	f042 0203 	orr.w	r2, r2, #3
 8008784:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008786:	4b17      	ldr	r3, [pc, #92]	; (80087e4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800878e:	2b0c      	cmp	r3, #12
 8008790:	d1f9      	bne.n	8008786 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8008792:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008794:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8008796:	6899      	ldr	r1, [r3, #8]
 8008798:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800879c:	430a      	orrs	r2, r1
 800879e:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 80087a0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80087a2:	6899      	ldr	r1, [r3, #8]
 80087a4:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 80087a8:	430a      	orrs	r2, r1
 80087aa:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	d809      	bhi.n	80087c8 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80087b4:	b16e      	cbz	r6, 80087d2 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80087b6:	4630      	mov	r0, r6
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7ff ff54 	bl	8008668 <LL_SetFlashLatency>
  if(status == SUCCESS)
 80087c0:	4606      	mov	r6, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1f2      	bne.n	80087ac <UTILS_EnablePLLAndSwitchSystem+0x74>
 80087c6:	e7c5      	b.n	8008754 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff ff4d 	bl	8008668 <LL_SetFlashLatency>
 80087ce:	4606      	mov	r6, r0
 80087d0:	e7f0      	b.n	80087b4 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 80087d2:	4628      	mov	r0, r5
 80087d4:	f7ff ff42 	bl	800865c <LL_SetSystemCoreClock>
 80087d8:	e7ed      	b.n	80087b6 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 80087da:	bf00      	nop
 80087dc:	08010230 	.word	0x08010230
 80087e0:	200000c0 	.word	0x200000c0
 80087e4:	40021000 	.word	0x40021000

080087e8 <LL_PLL_ConfigSystemClock_HSI>:
{
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80087ee:	f7ff ff23 	bl	8008638 <UTILS_PLL_IsBusy>
 80087f2:	bb20      	cbnz	r0, 800883e <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 80087f4:	4621      	mov	r1, r4
 80087f6:	4813      	ldr	r0, [pc, #76]	; (8008844 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 80087f8:	f005 f983 	bl	800db02 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80087fc:	4b12      	ldr	r3, [pc, #72]	; (8008848 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008804:	d109      	bne.n	800881a <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008806:	4a10      	ldr	r2, [pc, #64]	; (8008848 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8008808:	6813      	ldr	r3, [r2, #0]
 800880a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800880e:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008810:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008818:	d0fa      	beq.n	8008810 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	6866      	ldr	r6, [r4, #4]
 800881e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8008820:	4c09      	ldr	r4, [pc, #36]	; (8008848 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8008822:	68e7      	ldr	r7, [r4, #12]
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <LL_PLL_ConfigSystemClock_HSI+0x64>)
 8008826:	403b      	ands	r3, r7
 8008828:	f042 0202 	orr.w	r2, r2, #2
 800882c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8008830:	430a      	orrs	r2, r1
 8008832:	4313      	orrs	r3, r2
 8008834:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8008836:	4629      	mov	r1, r5
 8008838:	f7ff ff7e 	bl	8008738 <UTILS_EnablePLLAndSwitchSystem>
}
 800883c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800883e:	2001      	movs	r0, #1
 8008840:	e7fc      	b.n	800883c <LL_PLL_ConfigSystemClock_HSI+0x54>
 8008842:	bf00      	nop
 8008844:	00f42400 	.word	0x00f42400
 8008848:	40021000 	.word	0x40021000
 800884c:	f9ff808c 	.word	0xf9ff808c

08008850 <ws2812_strip_update_channels>:
                                        size_t num_channels) {
 8008850:	b508      	push	{r3, lr}
 8008852:	4b09      	ldr	r3, [pc, #36]	; (8008878 <ws2812_strip_update_channels+0x28>)
 8008854:	4a09      	ldr	r2, [pc, #36]	; (800887c <ws2812_strip_update_channels+0x2c>)
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	08db      	lsrs	r3, r3, #3
    LOG_ERR("update_channels not implemented");
 800885a:	f04f 0100 	mov.w	r1, #0
 800885e:	2201      	movs	r2, #1
 8008860:	f362 0102 	bfi	r1, r2, #0, #3
 8008864:	f36f 01c5 	bfc	r1, #3, #3
 8008868:	f363 118f 	bfi	r1, r3, #6, #10
 800886c:	4804      	ldr	r0, [pc, #16]	; (8008880 <ws2812_strip_update_channels+0x30>)
 800886e:	f7fa ff7b 	bl	8003768 <log_0>
}
 8008872:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8008876:	bd08      	pop	{r3, pc}
 8008878:	0800efcc 	.word	0x0800efcc
 800887c:	0800ef6c 	.word	0x0800ef6c
 8008880:	08010240 	.word	0x08010240

08008884 <ws2812_pwm_write>:
static int ws2812_pwm_write(const struct device *dev) {
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	b089      	sub	sp, #36	; 0x24
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800888a:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 800888c:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
    TIM_TypeDef *tim = pwm_cfg->timer;
 8008894:	681d      	ldr	r5, [r3, #0]
    uint8_t *buf = cfg->px_buf;
 8008896:	f8d4 9010 	ldr.w	r9, [r4, #16]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	3b01      	subs	r3, #1
 800889e:	4a5c      	ldr	r2, [pc, #368]	; (8008a10 <ws2812_pwm_write+0x18c>)
 80088a0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
    LL_TIM_OC_StructInit(&oc_init);
 80088a4:	4668      	mov	r0, sp
 80088a6:	f005 f8f8 	bl	800da9a <LL_TIM_OC_StructInit>
    oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 80088aa:	2360      	movs	r3, #96	; 0x60
 80088ac:	9300      	str	r3, [sp, #0]
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80088ae:	2301      	movs	r3, #1
 80088b0:	9301      	str	r3, [sp, #4]
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 80088b2:	7b20      	ldrb	r0, [r4, #12]
 80088b4:	f005 f97e 	bl	800dbb4 <get_polarity>
 80088b8:	9004      	str	r0, [sp, #16]
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 80088ba:	466a      	mov	r2, sp
 80088bc:	4659      	mov	r1, fp
 80088be:	4628      	mov	r0, r5
 80088c0:	f005 f8f5 	bl	800daae <LL_TIM_OC_Init>
 80088c4:	b9f0      	cbnz	r0, 8008904 <ws2812_pwm_write+0x80>
 80088c6:	4603      	mov	r3, r0
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80088c8:	682a      	ldr	r2, [r5, #0]
 80088ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088ce:	602a      	str	r2, [r5, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80088d0:	f1bb 0f01 	cmp.w	fp, #1
 80088d4:	d02c      	beq.n	8008930 <ws2812_pwm_write+0xac>
 80088d6:	f1bb 0f04 	cmp.w	fp, #4
 80088da:	d028      	beq.n	800892e <ws2812_pwm_write+0xaa>
 80088dc:	f1bb 0f10 	cmp.w	fp, #16
 80088e0:	d048      	beq.n	8008974 <ws2812_pwm_write+0xf0>
 80088e2:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 80088e6:	d047      	beq.n	8008978 <ws2812_pwm_write+0xf4>
 80088e8:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
 80088ec:	d046      	beq.n	800897c <ws2812_pwm_write+0xf8>
 80088ee:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 80088f2:	d045      	beq.n	8008980 <ws2812_pwm_write+0xfc>
 80088f4:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
 80088f8:	d044      	beq.n	8008984 <ws2812_pwm_write+0x100>
 80088fa:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 80088fe:	d014      	beq.n	800892a <ws2812_pwm_write+0xa6>
 8008900:	2308      	movs	r3, #8
 8008902:	e015      	b.n	8008930 <ws2812_pwm_write+0xac>
 8008904:	4b43      	ldr	r3, [pc, #268]	; (8008a14 <ws2812_pwm_write+0x190>)
 8008906:	4a44      	ldr	r2, [pc, #272]	; (8008a18 <ws2812_pwm_write+0x194>)
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Could not initialize timer channel output");
 800890c:	f04f 0100 	mov.w	r1, #0
 8008910:	2201      	movs	r2, #1
 8008912:	f362 0102 	bfi	r1, r2, #0, #3
 8008916:	f36f 01c5 	bfc	r1, #3, #3
 800891a:	f363 118f 	bfi	r1, r3, #6, #10
 800891e:	483f      	ldr	r0, [pc, #252]	; (8008a1c <ws2812_pwm_write+0x198>)
 8008920:	f7fa ff22 	bl	8003768 <log_0>
        return -EIO;
 8008924:	f06f 0004 	mvn.w	r0, #4
 8008928:	e06e      	b.n	8008a08 <ws2812_pwm_write+0x184>
 800892a:	2307      	movs	r3, #7
 800892c:	e000      	b.n	8008930 <ws2812_pwm_write+0xac>
 800892e:	2301      	movs	r3, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008930:	f105 0218 	add.w	r2, r5, #24
 8008934:	493a      	ldr	r1, [pc, #232]	; (8008a20 <ws2812_pwm_write+0x19c>)
 8008936:	5cc8      	ldrb	r0, [r1, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008938:	5811      	ldr	r1, [r2, r0]
 800893a:	4e3a      	ldr	r6, [pc, #232]	; (8008a24 <ws2812_pwm_write+0x1a0>)
 800893c:	5cf6      	ldrb	r6, [r6, r3]
 800893e:	2308      	movs	r3, #8
 8008940:	40b3      	lsls	r3, r6
 8008942:	430b      	orrs	r3, r1
 8008944:	5013      	str	r3, [r2, r0]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 8008946:	f8d8 3000 	ldr.w	r3, [r8]
 800894a:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800894c:	62eb      	str	r3, [r5, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800894e:	696b      	ldr	r3, [r5, #20]
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	616b      	str	r3, [r5, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	4b33      	ldr	r3, [pc, #204]	; (8008a28 <ws2812_pwm_write+0x1a4>)
 800895a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895e:	4628      	mov	r0, r5
 8008960:	4798      	blx	r3
    clear_timer_flag[cfg->pwm.channel](tim);
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	4b31      	ldr	r3, [pc, #196]	; (8008a2c <ws2812_pwm_write+0x1a8>)
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	4628      	mov	r0, r5
 800896c:	4798      	blx	r3
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800896e:	f04f 0a00 	mov.w	sl, #0
 8008972:	e02d      	b.n	80089d0 <ws2812_pwm_write+0x14c>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008974:	2302      	movs	r3, #2
 8008976:	e7db      	b.n	8008930 <ws2812_pwm_write+0xac>
 8008978:	2303      	movs	r3, #3
 800897a:	e7d9      	b.n	8008930 <ws2812_pwm_write+0xac>
 800897c:	2304      	movs	r3, #4
 800897e:	e7d7      	b.n	8008930 <ws2812_pwm_write+0xac>
 8008980:	2305      	movs	r3, #5
 8008982:	e7d5      	b.n	8008930 <ws2812_pwm_write+0xac>
 8008984:	2306      	movs	r3, #6
 8008986:	e7d3      	b.n	8008930 <ws2812_pwm_write+0xac>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 8008988:	f8d8 1008 	ldr.w	r1, [r8, #8]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	3b01      	subs	r3, #1
 8008990:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <ws2812_pwm_write+0x1ac>)
 8008992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008996:	4628      	mov	r0, r5
 8008998:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800899a:	6862      	ldr	r2, [r4, #4]
 800899c:	4b25      	ldr	r3, [pc, #148]	; (8008a34 <ws2812_pwm_write+0x1b0>)
 800899e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a2:	4628      	mov	r0, r5
 80089a4:	4798      	blx	r3
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d0f7      	beq.n	800899a <ws2812_pwm_write+0x116>
            clear_timer_flag[cfg->pwm.channel](tim);
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <ws2812_pwm_write+0x1a8>)
 80089ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b2:	4628      	mov	r0, r5
 80089b4:	4798      	blx	r3
            tmp <<= 1;
 80089b6:	0076      	lsls	r6, r6, #1
 80089b8:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 80089ba:	3701      	adds	r7, #1
 80089bc:	2f07      	cmp	r7, #7
 80089be:	dc05      	bgt.n	80089cc <ws2812_pwm_write+0x148>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 80089c0:	f016 0f80 	tst.w	r6, #128	; 0x80
 80089c4:	d1e0      	bne.n	8008988 <ws2812_pwm_write+0x104>
 80089c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089ca:	e7df      	b.n	800898c <ws2812_pwm_write+0x108>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 80089cc:	f10a 0a01 	add.w	sl, sl, #1
 80089d0:	6963      	ldr	r3, [r4, #20]
 80089d2:	459a      	cmp	sl, r3
 80089d4:	d203      	bcs.n	80089de <ws2812_pwm_write+0x15a>
        uint8_t tmp = *buf++;
 80089d6:	f819 6b01 	ldrb.w	r6, [r9], #1
        for(int j = 0; j < 8; j++) {
 80089da:	2700      	movs	r7, #0
 80089dc:	e7ee      	b.n	80089bc <ws2812_pwm_write+0x138>
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <ws2812_pwm_write+0x1ac>)
 80089e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e8:	2100      	movs	r1, #0
 80089ea:	4628      	mov	r0, r5
 80089ec:	4798      	blx	r3
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <ws2812_pwm_write+0x1b0>)
 80089f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f6:	4628      	mov	r0, r5
 80089f8:	4798      	blx	r3
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d0f7      	beq.n	80089ee <ws2812_pwm_write+0x16a>
  CLEAR_BIT(TIMx->CCER, Channels);
 80089fe:	6a2b      	ldr	r3, [r5, #32]
 8008a00:	ea23 030b 	bic.w	r3, r3, fp
 8008a04:	622b      	str	r3, [r5, #32]
    return 0;
 8008a06:	2000      	movs	r0, #0
}
 8008a08:	b009      	add	sp, #36	; 0x24
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	bf00      	nop
 8008a10:	080102f4 	.word	0x080102f4
 8008a14:	0800efcc 	.word	0x0800efcc
 8008a18:	0800ef6c 	.word	0x0800ef6c
 8008a1c:	0800fbdc 	.word	0x0800fbdc
 8008a20:	080102dc 	.word	0x080102dc
 8008a24:	080102e8 	.word	0x080102e8
 8008a28:	08010324 	.word	0x08010324
 8008a2c:	0801030c 	.word	0x0801030c
 8008a30:	08010354 	.word	0x08010354
 8008a34:	0801033c 	.word	0x0801033c

08008a38 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8008a3a:	6844      	ldr	r4, [r0, #4]
    uint8_t *px_buf = cfg->px_buf;
 8008a3c:	6925      	ldr	r5, [r4, #16]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 8008a3e:	7e23      	ldrb	r3, [r4, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 8008a40:	2600      	movs	r6, #0
 8008a42:	fba2 3703 	umull	r3, r7, r2, r3
 8008a46:	b92f      	cbnz	r7, 8008a54 <ws2812_strip_update_rgb+0x1c>
    return !overflow && (nbytes <= cfg->px_buf_size);
 8008a48:	b936      	cbnz	r6, 8008a58 <ws2812_strip_update_rgb+0x20>
 8008a4a:	6966      	ldr	r6, [r4, #20]
 8008a4c:	42b3      	cmp	r3, r6
 8008a4e:	d90b      	bls.n	8008a68 <ws2812_strip_update_rgb+0x30>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e002      	b.n	8008a5a <ws2812_strip_update_rgb+0x22>
 8008a54:	2601      	movs	r6, #1
 8008a56:	e7f7      	b.n	8008a48 <ws2812_strip_update_rgb+0x10>
 8008a58:	2300      	movs	r3, #0
    if (!num_pixels_ok(cfg, num_pixels)) {
 8008a5a:	b13b      	cbz	r3, 8008a6c <ws2812_strip_update_rgb+0x34>
    for (i = 0; i < num_pixels; i++) {
 8008a5c:	f04f 0e00 	mov.w	lr, #0
 8008a60:	4596      	cmp	lr, r2
 8008a62:	d22e      	bcs.n	8008ac2 <ws2812_strip_update_rgb+0x8a>
        for (j = 0; j < cfg->num_colors; j++) {
 8008a64:	2300      	movs	r3, #0
 8008a66:	e009      	b.n	8008a7c <ws2812_strip_update_rgb+0x44>
    return !overflow && (nbytes <= cfg->px_buf_size);
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f6      	b.n	8008a5a <ws2812_strip_update_rgb+0x22>
        return -ENOMEM;
 8008a6c:	f06f 050b 	mvn.w	r5, #11
 8008a70:	e02d      	b.n	8008ace <ws2812_strip_update_rgb+0x96>
                    *px_buf = 0;
 8008a72:	2600      	movs	r6, #0
 8008a74:	702e      	strb	r6, [r5, #0]
            px_buf++;
 8008a76:	3501      	adds	r5, #1
        for (j = 0; j < cfg->num_colors; j++) {
 8008a78:	3301      	adds	r3, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f894 c018 	ldrb.w	ip, [r4, #24]
 8008a80:	459c      	cmp	ip, r3
 8008a82:	d91a      	bls.n	8008aba <ws2812_strip_update_rgb+0x82>
            switch (cfg->color_mapping[j]) {
 8008a84:	69e6      	ldr	r6, [r4, #28]
 8008a86:	f816 c003 	ldrb.w	ip, [r6, r3]
 8008a8a:	f1bc 0f03 	cmp.w	ip, #3
 8008a8e:	d820      	bhi.n	8008ad2 <ws2812_strip_update_rgb+0x9a>
 8008a90:	a601      	add	r6, pc, #4	; (adr r6, 8008a98 <ws2812_strip_update_rgb+0x60>)
 8008a92:	f856 f02c 	ldr.w	pc, [r6, ip, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008a73 	.word	0x08008a73
 8008a9c:	08008aa9 	.word	0x08008aa9
 8008aa0:	08008aaf 	.word	0x08008aaf
 8008aa4:	08008ab5 	.word	0x08008ab5
                    *px_buf = pixels->r;
 8008aa8:	784e      	ldrb	r6, [r1, #1]
 8008aaa:	702e      	strb	r6, [r5, #0]
                    break;
 8008aac:	e7e3      	b.n	8008a76 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->g;
 8008aae:	788e      	ldrb	r6, [r1, #2]
 8008ab0:	702e      	strb	r6, [r5, #0]
                    break;
 8008ab2:	e7e0      	b.n	8008a76 <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->b;
 8008ab4:	78ce      	ldrb	r6, [r1, #3]
 8008ab6:	702e      	strb	r6, [r5, #0]
                    break;
 8008ab8:	e7dd      	b.n	8008a76 <ws2812_strip_update_rgb+0x3e>
        pixels++;
 8008aba:	3104      	adds	r1, #4
    for (i = 0; i < num_pixels; i++) {
 8008abc:	f10e 0e01 	add.w	lr, lr, #1
 8008ac0:	e7ce      	b.n	8008a60 <ws2812_strip_update_rgb+0x28>
    rc = ws2812_pwm_write(dev);
 8008ac2:	f7ff fedf 	bl	8008884 <ws2812_pwm_write>
 8008ac6:	4605      	mov	r5, r0
    ws2812_reset_delay(cfg->reset_delay);
 8008ac8:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	return z_impl_k_usleep(us);
 8008aca:	f005 fae4 	bl	800e096 <z_impl_k_usleep>
}
 8008ace:	4628      	mov	r0, r5
 8008ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (cfg->color_mapping[j]) {
 8008ad2:	f06f 0515 	mvn.w	r5, #21
 8008ad6:	e7fa      	b.n	8008ace <ws2812_strip_update_rgb+0x96>

08008ad8 <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
 8008ad8:	b430      	push	{r4, r5}
    if (!hsv->v)
 8008ada:	78c4      	ldrb	r4, [r0, #3]
 8008adc:	b92c      	cbnz	r4, 8008aea <led_hsv2rgb+0x12>
    {
        rgb->r = rgb->g = rgb->b = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	70cb      	strb	r3, [r1, #3]
 8008ae2:	708b      	strb	r3, [r1, #2]
 8008ae4:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 8008ae6:	bc30      	pop	{r4, r5}
 8008ae8:	4770      	bx	lr
    else if (!hsv->s)
 8008aea:	7883      	ldrb	r3, [r0, #2]
 8008aec:	b91b      	cbnz	r3, 8008af6 <led_hsv2rgb+0x1e>
        rgb->r = rgb->g = rgb->b = hsv->v;
 8008aee:	70cc      	strb	r4, [r1, #3]
 8008af0:	708c      	strb	r4, [r1, #2]
 8008af2:	704c      	strb	r4, [r1, #1]
 8008af4:	e7f7      	b.n	8008ae6 <led_hsv2rgb+0xe>
        int hue = hsv->h % 360;
 8008af6:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008afa:	4831      	ldr	r0, [pc, #196]	; (8008bc0 <led_hsv2rgb+0xe8>)
 8008afc:	fb80 5002 	smull	r5, r0, r0, r2
 8008b00:	4410      	add	r0, r2
 8008b02:	17d5      	asrs	r5, r2, #31
 8008b04:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 8008b08:	f44f 75b4 	mov.w	r5, #360	; 0x168
 8008b0c:	fb05 2210 	mls	r2, r5, r0, r2
 8008b10:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	db2c      	blt.n	8008b70 <led_hsv2rgb+0x98>
        int sector = hue / 60;
 8008b16:	482b      	ldr	r0, [pc, #172]	; (8008bc4 <led_hsv2rgb+0xec>)
 8008b18:	fb80 5002 	smull	r5, r0, r0, r2
 8008b1c:	4410      	add	r0, r2
 8008b1e:	17d5      	asrs	r5, r2, #31
 8008b20:	ebc5 1060 	rsb	r0, r5, r0, asr #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 8008b24:	f010 0f01 	tst.w	r0, #1
 8008b28:	d024      	beq.n	8008b74 <led_hsv2rgb+0x9c>
 8008b2a:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 8008b2e:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 8008b32:	f1cc 0c3c 	rsb	ip, ip, #60	; 0x3c
        int low = (255 - hsv->s) * high / 255;
 8008b36:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008b3a:	fb04 f303 	mul.w	r3, r4, r3
 8008b3e:	4a22      	ldr	r2, [pc, #136]	; (8008bc8 <led_hsv2rgb+0xf0>)
 8008b40:	fb82 5203 	smull	r5, r2, r2, r3
 8008b44:	441a      	add	r2, r3
 8008b46:	17db      	asrs	r3, r3, #31
 8008b48:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
        int middle = low + (high - low) * angle / 60;
 8008b4c:	1ae2      	subs	r2, r4, r3
 8008b4e:	fb0c f202 	mul.w	r2, ip, r2
 8008b52:	4d1c      	ldr	r5, [pc, #112]	; (8008bc4 <led_hsv2rgb+0xec>)
 8008b54:	fb85 5c02 	smull	r5, ip, r5, r2
 8008b58:	4494      	add	ip, r2
 8008b5a:	17d2      	asrs	r2, r2, #31
 8008b5c:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 8008b60:	441a      	add	r2, r3
        switch (sector)
 8008b62:	2805      	cmp	r0, #5
 8008b64:	d8bf      	bhi.n	8008ae6 <led_hsv2rgb+0xe>
 8008b66:	e8df f000 	tbb	[pc, r0]
 8008b6a:	1713      	.short	0x1713
 8008b6c:	27231f1b 	.word	0x27231f1b
        hue = hue < 0 ? 360 + hue : hue;
 8008b70:	442a      	add	r2, r5
 8008b72:	e7d0      	b.n	8008b16 <led_hsv2rgb+0x3e>
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 8008b74:	4d13      	ldr	r5, [pc, #76]	; (8008bc4 <led_hsv2rgb+0xec>)
 8008b76:	fb85 5c02 	smull	r5, ip, r5, r2
 8008b7a:	eb0c 0502 	add.w	r5, ip, r2
 8008b7e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8008b82:	ebcc 1c65 	rsb	ip, ip, r5, asr #5
 8008b86:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8008b8a:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 8008b8e:	e7d2      	b.n	8008b36 <led_hsv2rgb+0x5e>
                rgb->r = high;
 8008b90:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 8008b92:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 8008b94:	70cb      	strb	r3, [r1, #3]
                break;
 8008b96:	e7a6      	b.n	8008ae6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 8008b98:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 8008b9a:	708c      	strb	r4, [r1, #2]
                rgb->b = low;
 8008b9c:	70cb      	strb	r3, [r1, #3]
                break;
 8008b9e:	e7a2      	b.n	8008ae6 <led_hsv2rgb+0xe>
                rgb->r = low;
 8008ba0:	704b      	strb	r3, [r1, #1]
                rgb->g = high;
 8008ba2:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 8008ba4:	70ca      	strb	r2, [r1, #3]
                break;
 8008ba6:	e79e      	b.n	8008ae6 <led_hsv2rgb+0xe>
                rgb->r = low;
 8008ba8:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 8008baa:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 8008bac:	70cc      	strb	r4, [r1, #3]
                break;
 8008bae:	e79a      	b.n	8008ae6 <led_hsv2rgb+0xe>
                rgb->r = middle;
 8008bb0:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 8008bb2:	708b      	strb	r3, [r1, #2]
                rgb->b = high;
 8008bb4:	70cc      	strb	r4, [r1, #3]
                break;
 8008bb6:	e796      	b.n	8008ae6 <led_hsv2rgb+0xe>
                rgb->r = high;
 8008bb8:	704c      	strb	r4, [r1, #1]
                rgb->g = low;
 8008bba:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 8008bbc:	70ca      	strb	r2, [r1, #3]
}
 8008bbe:	e792      	b.n	8008ae6 <led_hsv2rgb+0xe>
 8008bc0:	b60b60b7 	.word	0xb60b60b7
 8008bc4:	88888889 	.word	0x88888889
 8008bc8:	80808081 	.word	0x80808081

08008bcc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8008bce:	e000      	b.n	8008bd2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8008bd0:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8008bd2:	4a03      	ldr	r2, [pc, #12]	; (8008be0 <z_device_state_init+0x14>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d3fb      	bcc.n	8008bd0 <z_device_state_init+0x4>
	}
}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	0800eb6c 	.word	0x0800eb6c
 8008be0:	0800ecbc 	.word	0x0800ecbc

08008be4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <z_sys_init_run_level+0x4c>)
 8008bea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8008bee:	e009      	b.n	8008c04 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8008bf0:	4240      	negs	r0, r0
 8008bf2:	e017      	b.n	8008c24 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8008bf4:	68eb      	ldr	r3, [r5, #12]
 8008bf6:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8008bf8:	68ea      	ldr	r2, [r5, #12]
 8008bfa:	7853      	ldrb	r3, [r2, #1]
 8008bfc:	f043 0301 	orr.w	r3, r3, #1
 8008c00:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8008c02:	3408      	adds	r4, #8
 8008c04:	1c73      	adds	r3, r6, #1
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <z_sys_init_run_level+0x4c>)
 8008c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d90d      	bls.n	8008c2c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8008c10:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	4628      	mov	r0, r5
 8008c16:	4798      	blx	r3
		if (dev != NULL) {
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	d0f2      	beq.n	8008c02 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0eb      	beq.n	8008bf8 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8008c20:	2800      	cmp	r0, #0
 8008c22:	dbe5      	blt.n	8008bf0 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8008c24:	28ff      	cmp	r0, #255	; 0xff
 8008c26:	dde5      	ble.n	8008bf4 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8008c28:	20ff      	movs	r0, #255	; 0xff
 8008c2a:	e7e3      	b.n	8008bf4 <z_sys_init_run_level+0x10>
		}
	}
}
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
 8008c2e:	bf00      	nop
 8008c30:	080103a0 	.word	0x080103a0

08008c34 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8008c34:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8008c36:	4605      	mov	r5, r0
 8008c38:	b328      	cbz	r0, 8008c86 <z_impl_device_get_binding+0x52>
 8008c3a:	7803      	ldrb	r3, [r0, #0]
 8008c3c:	b32b      	cbz	r3, 8008c8a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8008c3e:	4c14      	ldr	r4, [pc, #80]	; (8008c90 <z_impl_device_get_binding+0x5c>)
 8008c40:	e000      	b.n	8008c44 <z_impl_device_get_binding+0x10>
 8008c42:	3418      	adds	r4, #24
 8008c44:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <z_impl_device_get_binding+0x60>)
 8008c46:	429c      	cmp	r4, r3
 8008c48:	d008      	beq.n	8008c5c <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f004 ffb9 	bl	800dbc2 <z_device_ready>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0f6      	beq.n	8008c42 <z_impl_device_get_binding+0xe>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	42ab      	cmp	r3, r5
 8008c58:	d1f3      	bne.n	8008c42 <z_impl_device_get_binding+0xe>
 8008c5a:	e012      	b.n	8008c82 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8008c5c:	4c0c      	ldr	r4, [pc, #48]	; (8008c90 <z_impl_device_get_binding+0x5c>)
 8008c5e:	e000      	b.n	8008c62 <z_impl_device_get_binding+0x2e>
 8008c60:	3418      	adds	r4, #24
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <z_impl_device_get_binding+0x60>)
 8008c64:	429c      	cmp	r4, r3
 8008c66:	d00b      	beq.n	8008c80 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f004 ffaa 	bl	800dbc2 <z_device_ready>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0f6      	beq.n	8008c60 <z_impl_device_get_binding+0x2c>
 8008c72:	6821      	ldr	r1, [r4, #0]
 8008c74:	4628      	mov	r0, r5
 8008c76:	f7f8 f8e4 	bl	8000e42 <strcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d1f0      	bne.n	8008c60 <z_impl_device_get_binding+0x2c>
 8008c7e:	e000      	b.n	8008c82 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8008c80:	2400      	movs	r4, #0
}
 8008c82:	4620      	mov	r0, r4
 8008c84:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8008c86:	4604      	mov	r4, r0
 8008c88:	e7fb      	b.n	8008c82 <z_impl_device_get_binding+0x4e>
 8008c8a:	2400      	movs	r4, #0
 8008c8c:	e7f9      	b.n	8008c82 <z_impl_device_get_binding+0x4e>
 8008c8e:	bf00      	nop
 8008c90:	0800eb6c 	.word	0x0800eb6c
 8008c94:	0800ecbc 	.word	0x0800ecbc

08008c98 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8008c98:	2804      	cmp	r0, #4
 8008c9a:	d80c      	bhi.n	8008cb6 <reason_to_str+0x1e>
 8008c9c:	e8df f000 	tbb	[pc, r0]
 8008ca0:	07050d03 	.word	0x07050d03
 8008ca4:	09          	.byte	0x09
 8008ca5:	00          	.byte	0x00
 8008ca6:	4806      	ldr	r0, [pc, #24]	; (8008cc0 <reason_to_str+0x28>)
 8008ca8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 8008caa:	4806      	ldr	r0, [pc, #24]	; (8008cc4 <reason_to_str+0x2c>)
 8008cac:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 8008cae:	4806      	ldr	r0, [pc, #24]	; (8008cc8 <reason_to_str+0x30>)
 8008cb0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 8008cb2:	4806      	ldr	r0, [pc, #24]	; (8008ccc <reason_to_str+0x34>)
 8008cb4:	4770      	bx	lr
	default:
		return "Unknown error";
 8008cb6:	4806      	ldr	r0, [pc, #24]	; (8008cd0 <reason_to_str+0x38>)
 8008cb8:	4770      	bx	lr
		return "Unhandled interrupt";
 8008cba:	4806      	ldr	r0, [pc, #24]	; (8008cd4 <reason_to_str+0x3c>)
	}
}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	08010408 	.word	0x08010408
 8008cc4:	080103dc 	.word	0x080103dc
 8008cc8:	080103ec 	.word	0x080103ec
 8008ccc:	080103f8 	.word	0x080103f8
 8008cd0:	080103b8 	.word	0x080103b8
 8008cd4:	080103c8 	.word	0x080103c8

08008cd8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8008cd8:	b130      	cbz	r0, 8008ce8 <thread_name_get+0x10>
{
 8008cda:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8008cdc:	f004 fff0 	bl	800dcc0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8008ce0:	b120      	cbz	r0, 8008cec <thread_name_get+0x14>
 8008ce2:	7803      	ldrb	r3, [r0, #0]
 8008ce4:	b123      	cbz	r3, 8008cf0 <thread_name_get+0x18>
}
 8008ce6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 8008ce8:	4802      	ldr	r0, [pc, #8]	; (8008cf4 <thread_name_get+0x1c>)
}
 8008cea:	4770      	bx	lr
		thread_name = "unknown";
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <thread_name_get+0x1c>)
 8008cee:	e7fa      	b.n	8008ce6 <thread_name_get+0xe>
 8008cf0:	4800      	ldr	r0, [pc, #0]	; (8008cf4 <thread_name_get+0x1c>)
	return thread_name;
 8008cf2:	e7f8      	b.n	8008ce6 <thread_name_get+0xe>
 8008cf4:	08010418 	.word	0x08010418

08008cf8 <k_sys_fatal_error_handler>:
{
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	4604      	mov	r4, r0
	z_impl_log_panic();
 8008cfc:	f7fa fdc6 	bl	800388c <z_impl_log_panic>
 8008d00:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <k_sys_fatal_error_handler+0x30>)
 8008d02:	4a0a      	ldr	r2, [pc, #40]	; (8008d2c <k_sys_fatal_error_handler+0x34>)
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
 8008d08:	f04f 0100 	mov.w	r1, #0
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f362 0102 	bfi	r1, r2, #0, #3
 8008d12:	f36f 01c5 	bfc	r1, #3, #3
 8008d16:	f363 118f 	bfi	r1, r3, #6, #10
 8008d1a:	4805      	ldr	r0, [pc, #20]	; (8008d30 <k_sys_fatal_error_handler+0x38>)
 8008d1c:	f7fa fd24 	bl	8003768 <log_0>
	arch_system_halt(reason);
 8008d20:	4620      	mov	r0, r4
 8008d22:	f004 ff5b 	bl	800dbdc <arch_system_halt>
 8008d26:	bf00      	nop
 8008d28:	0800ef8c 	.word	0x0800ef8c
 8008d2c:	0800ef6c 	.word	0x0800ef6c
 8008d30:	08010420 	.word	0x08010420

08008d34 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	460e      	mov	r6, r1
	__asm__ volatile(
 8008d3e:	f04f 0310 	mov.w	r3, #16
 8008d42:	f3ef 8711 	mrs	r7, BASEPRI
 8008d46:	f383 8812 	msr	BASEPRI_MAX, r3
 8008d4a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8008d4e:	f001 f8f1 	bl	8009f34 <z_impl_z_current_get>
 8008d52:	4604      	mov	r4, r0
 8008d54:	4b29      	ldr	r3, [pc, #164]	; (8008dfc <z_fatal_error+0xc8>)
 8008d56:	4a2a      	ldr	r2, [pc, #168]	; (8008e00 <z_fatal_error+0xcc>)
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8008d5c:	f04f 0800 	mov.w	r8, #0
 8008d60:	2201      	movs	r2, #1
 8008d62:	f362 0802 	bfi	r8, r2, #0, #3
 8008d66:	f36f 08c5 	bfc	r8, #3, #3
 8008d6a:	f363 188f 	bfi	r8, r3, #6, #10
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7ff ff92 	bl	8008c98 <reason_to_str>
 8008d74:	4602      	mov	r2, r0
 8008d76:	f8ad 8000 	strh.w	r8, [sp]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	4821      	ldr	r0, [pc, #132]	; (8008e04 <z_fatal_error+0xd0>)
 8008d80:	f7fa fcb8 	bl	80036f4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8008d84:	b11e      	cbz	r6, 8008d8e <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8008d86:	69f3      	ldr	r3, [r6, #28]
 8008d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8c:	bb2b      	cbnz	r3, 8008dda <z_fatal_error+0xa6>
 8008d8e:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <z_fatal_error+0xc8>)
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <z_fatal_error+0xcc>)
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f362 0802 	bfi	r8, r2, #0, #3
 8008da0:	f36f 08c5 	bfc	r8, #3, #3
 8008da4:	f363 188f 	bfi	r8, r3, #6, #10
 8008da8:	4620      	mov	r0, r4
 8008daa:	f7ff ff95 	bl	8008cd8 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8008dae:	f7fa fb65 	bl	800347c <z_log_strdup>
 8008db2:	4602      	mov	r2, r0
 8008db4:	4643      	mov	r3, r8
 8008db6:	4621      	mov	r1, r4
 8008db8:	4813      	ldr	r0, [pc, #76]	; (8008e08 <z_fatal_error+0xd4>)
 8008dba:	f7fa fd31 	bl	8003820 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f7ff ff99 	bl	8008cf8 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8008dc6:	f387 8811 	msr	BASEPRI, r7
 8008dca:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f7fb fe18 	bl	8004a04 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8008dd4:	b002      	add	sp, #8
 8008dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dda:	4b08      	ldr	r3, [pc, #32]	; (8008dfc <z_fatal_error+0xc8>)
 8008ddc:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <z_fatal_error+0xcc>)
 8008dde:	1a9b      	subs	r3, r3, r2
 8008de0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
 8008de2:	f04f 0100 	mov.w	r1, #0
 8008de6:	2201      	movs	r2, #1
 8008de8:	f362 0102 	bfi	r1, r2, #0, #3
 8008dec:	f36f 01c5 	bfc	r1, #3, #3
 8008df0:	f363 118f 	bfi	r1, r3, #6, #10
 8008df4:	4805      	ldr	r0, [pc, #20]	; (8008e0c <z_fatal_error+0xd8>)
 8008df6:	f7fa fcb7 	bl	8003768 <log_0>
 8008dfa:	e7c8      	b.n	8008d8e <z_fatal_error+0x5a>
 8008dfc:	0800ef8c 	.word	0x0800ef8c
 8008e00:	0800ef6c 	.word	0x0800ef6c
 8008e04:	08010430 	.word	0x08010430
 8008e08:	0801047c 	.word	0x0801047c
 8008e0c:	08010458 	.word	0x08010458

08008e10 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8008e10:	b510      	push	{r4, lr}
 8008e12:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8008e14:	4c10      	ldr	r4, [pc, #64]	; (8008e58 <init_idle_thread+0x48>)
 8008e16:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8008e1a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008e1e:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <init_idle_thread+0x4c>)
 8008e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 8008e24:	2200      	movs	r2, #0
 8008e26:	9205      	str	r2, [sp, #20]
 8008e28:	2101      	movs	r1, #1
 8008e2a:	9104      	str	r1, [sp, #16]
 8008e2c:	210f      	movs	r1, #15
 8008e2e:	9103      	str	r1, [sp, #12]
 8008e30:	9202      	str	r2, [sp, #8]
 8008e32:	9201      	str	r2, [sp, #4]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <init_idle_thread+0x50>)
 8008e38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008e3c:	4909      	ldr	r1, [pc, #36]	; (8008e64 <init_idle_thread+0x54>)
 8008e3e:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 8008e42:	fb0c 1100 	mla	r1, ip, r0, r1
 8008e46:	4620      	mov	r0, r4
 8008e48:	f000 f920 	bl	800908c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008e4c:	7b63      	ldrb	r3, [r4, #13]
 8008e4e:	f023 0304 	bic.w	r3, r3, #4
 8008e52:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8008e54:	b006      	add	sp, #24
 8008e56:	bd10      	pop	{r4, pc}
 8008e58:	20000740 	.word	0x20000740
 8008e5c:	20000ecc 	.word	0x20000ecc
 8008e60:	0800dd27 	.word	0x0800dd27
 8008e64:	20002ee0 	.word	0x20002ee0

08008e68 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8008e68:	b570      	push	{r4, r5, r6, lr}
 8008e6a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8008e6c:	f000 ffac 	bl	8009dc8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8008e70:	4d1b      	ldr	r5, [pc, #108]	; (8008ee0 <prepare_multithreading+0x78>)
 8008e72:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <prepare_multithreading+0x7c>)
 8008e74:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8008e76:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <prepare_multithreading+0x80>)
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	2400      	movs	r4, #0
 8008e80:	9403      	str	r4, [sp, #12]
 8008e82:	9402      	str	r4, [sp, #8]
 8008e84:	9401      	str	r4, [sp, #4]
 8008e86:	9400      	str	r4, [sp, #0]
 8008e88:	4b18      	ldr	r3, [pc, #96]	; (8008eec <prepare_multithreading+0x84>)
 8008e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e8e:	4918      	ldr	r1, [pc, #96]	; (8008ef0 <prepare_multithreading+0x88>)
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 f8fb 	bl	800908c <z_setup_new_thread>
 8008e96:	4606      	mov	r6, r0
 8008e98:	7b6b      	ldrb	r3, [r5, #13]
 8008e9a:	f023 0304 	bic.w	r3, r3, #4
 8008e9e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f005 f806 	bl	800deb2 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	dd02      	ble.n	8008eb0 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8008eaa:	4630      	mov	r0, r6
 8008eac:	b006      	add	sp, #24
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f7ff ffad 	bl	8008e10 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8008eb6:	4a0f      	ldr	r2, [pc, #60]	; (8008ef4 <prepare_multithreading+0x8c>)
 8008eb8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8008ebc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <prepare_multithreading+0x7c>)
 8008ec2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ec6:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8008ec8:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8008eca:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8008ece:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <prepare_multithreading+0x90>)
 8008ed0:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8008ed4:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8008ed8:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8008eda:	3401      	adds	r4, #1
 8008edc:	e7e3      	b.n	8008ea6 <prepare_multithreading+0x3e>
 8008ede:	bf00      	nop
 8008ee0:	200007c0 	.word	0x200007c0
 8008ee4:	20000ecc 	.word	0x20000ecc
 8008ee8:	08010494 	.word	0x08010494
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	20001ec0 	.word	0x20001ec0
 8008ef4:	20000740 	.word	0x20000740
 8008ef8:	20003040 	.word	0x20003040

08008efc <bg_thread_main>:
{
 8008efc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <bg_thread_main+0x30>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8008f04:	2002      	movs	r0, #2
 8008f06:	f7ff fe6d 	bl	8008be4 <z_sys_init_run_level>
	boot_banner();
 8008f0a:	f001 fd53 	bl	800a9b4 <boot_banner>
	z_cpp_init_static();
 8008f0e:	f003 fdf3 	bl	800caf8 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8008f12:	2003      	movs	r0, #3
 8008f14:	f7ff fe66 	bl	8008be4 <z_sys_init_run_level>
	z_init_static_threads();
 8008f18:	f000 f8e8 	bl	80090ec <z_init_static_threads>
	main();
 8008f1c:	f005 fa6f 	bl	800e3fe <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8008f20:	4a03      	ldr	r2, [pc, #12]	; (8008f30 <bg_thread_main+0x34>)
 8008f22:	7b13      	ldrb	r3, [r2, #12]
 8008f24:	f023 0301 	bic.w	r3, r3, #1
 8008f28:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8008f2a:	bd08      	pop	{r3, pc}
 8008f2c:	20000f2c 	.word	0x20000f2c
 8008f30:	200007c0 	.word	0x200007c0

08008f34 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8008f34:	b508      	push	{r3, lr}
 8008f36:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8008f38:	4a01      	ldr	r2, [pc, #4]	; (8008f40 <switch_to_main_thread+0xc>)
 8008f3a:	4802      	ldr	r0, [pc, #8]	; (8008f44 <switch_to_main_thread+0x10>)
 8008f3c:	f7fb f934 	bl	80041a8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8008f40:	08008efd 	.word	0x08008efd
 8008f44:	200007c0 	.word	0x200007c0

08008f48 <z_bss_zero>:
{
 8008f48:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8008f4a:	4803      	ldr	r0, [pc, #12]	; (8008f58 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8008f4c:	4a03      	ldr	r2, [pc, #12]	; (8008f5c <z_bss_zero+0x14>)
 8008f4e:	1a12      	subs	r2, r2, r0
 8008f50:	2100      	movs	r1, #0
 8008f52:	f005 fa6c 	bl	800e42e <memset>
}
 8008f56:	bd08      	pop	{r3, pc}
 8008f58:	200004d0 	.word	0x200004d0
 8008f5c:	20000f30 	.word	0x20000f30

08008f60 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8008f60:	b500      	push	{lr}
 8008f62:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8008f64:	f7fa f9ba 	bl	80032dc <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8008f68:	4b1b      	ldr	r3, [pc, #108]	; (8008fd8 <z_cstart+0x78>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008f6a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8008f6e:	4c1b      	ldr	r4, [pc, #108]	; (8008fdc <z_cstart+0x7c>)
 8008f70:	6963      	ldr	r3, [r4, #20]
 8008f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	23f0      	movs	r3, #240	; 0xf0
 8008f7a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8008f7e:	2500      	movs	r5, #0
 8008f80:	77e5      	strb	r5, [r4, #31]
 8008f82:	7625      	strb	r5, [r4, #24]
 8008f84:	7665      	strb	r5, [r4, #25]
 8008f86:	76a5      	strb	r5, [r4, #26]
 8008f88:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8008f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008f92:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8008f94:	f7fb fcf4 	bl	8004980 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8008f98:	f7fa ffbe 	bl	8003f18 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8008f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8008fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8008fa4:	f7fb fe14 	bl	8004bd0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8008fa8:	f7fb fd42 	bl	8004a30 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8008fac:	2401      	movs	r4, #1
 8008fae:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8008fb2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8008fb6:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8008fb8:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <z_cstart+0x80>)
 8008fbc:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8008fc0:	f7ff fe04 	bl	8008bcc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f7ff fe0d 	bl	8008be4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f7ff fe0a 	bl	8008be4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8008fd0:	f7ff ff4a 	bl	8008e68 <prepare_multithreading>
 8008fd4:	f7ff ffae 	bl	8008f34 <switch_to_main_thread>
 8008fd8:	20003860 	.word	0x20003860
 8008fdc:	e000ed00 	.word	0xe000ed00
 8008fe0:	20000ecc 	.word	0x20000ecc

08008fe4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8008fe4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8008fe6:	4c06      	ldr	r4, [pc, #24]	; (8009000 <init_mem_slab_module+0x1c>)
	int rc = 0;
 8008fe8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8008fea:	e000      	b.n	8008fee <init_mem_slab_module+0xa>
 8008fec:	3420      	adds	r4, #32
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <init_mem_slab_module+0x20>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	d204      	bcs.n	8008ffe <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f004 fdfa 	bl	800dbee <create_free_list>
		if (rc < 0) {
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	daf6      	bge.n	8008fec <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 8008ffe:	bd10      	pop	{r4, pc}
 8009000:	200003a8 	.word	0x200003a8
 8009004:	200003a8 	.word	0x200003a8

08009008 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8009008:	b530      	push	{r4, r5, lr}
 800900a:	b083      	sub	sp, #12
 800900c:	460d      	mov	r5, r1
	__asm__ volatile(
 800900e:	f04f 0410 	mov.w	r4, #16
 8009012:	f3ef 8111 	mrs	r1, BASEPRI
 8009016:	f384 8812 	msr	BASEPRI_MAX, r4
 800901a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 800901e:	6984      	ldr	r4, [r0, #24]
 8009020:	b16c      	cbz	r4, 800903e <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
 8009022:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 8009024:	6983      	ldr	r3, [r0, #24]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 800902a:	69c3      	ldr	r3, [r0, #28]
 800902c:	3301      	adds	r3, #1
 800902e:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8009030:	2000      	movs	r0, #0
	__asm__ volatile(
 8009032:	f381 8811 	msr	BASEPRI, r1
 8009036:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 800903a:	b003      	add	sp, #12
 800903c:	bd30      	pop	{r4, r5, pc}
 800903e:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8009042:	ea53 0402 	orrs.w	r4, r3, r2
 8009046:	d104      	bne.n	8009052 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 8009048:	2300      	movs	r3, #0
 800904a:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
 800904c:	f06f 000b 	mvn.w	r0, #11
 8009050:	e7ef      	b.n	8009032 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8009052:	9200      	str	r2, [sp, #0]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	4602      	mov	r2, r0
 8009058:	4660      	mov	r0, ip
 800905a:	f000 fd8d 	bl	8009b78 <z_pend_curr>
		if (result == 0) {
 800905e:	2800      	cmp	r0, #0
 8009060:	d1eb      	bne.n	800903a <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
 8009062:	4b02      	ldr	r3, [pc, #8]	; (800906c <k_mem_slab_alloc+0x64>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	602b      	str	r3, [r5, #0]
		return result;
 800906a:	e7e6      	b.n	800903a <k_mem_slab_alloc+0x32>
 800906c:	20000ecc 	.word	0x20000ecc

08009070 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8009070:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8009072:	ea53 0102 	orrs.w	r1, r3, r2
 8009076:	d102      	bne.n	800907e <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8009078:	f004 fe24 	bl	800dcc4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800907c:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800907e:	4902      	ldr	r1, [pc, #8]	; (8009088 <schedule_new_thread+0x18>)
 8009080:	3018      	adds	r0, #24
 8009082:	f001 f80b 	bl	800a09c <z_add_timeout>
 8009086:	e7f9      	b.n	800907c <schedule_new_thread+0xc>
 8009088:	0800deeb 	.word	0x0800deeb

0800908c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800908c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800908e:	b085      	sub	sp, #20
 8009090:	4604      	mov	r4, r0
 8009092:	460e      	mov	r6, r1
 8009094:	4615      	mov	r5, r2
 8009096:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8009098:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800909c:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800909e:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 80090a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a2:	2204      	movs	r2, #4
 80090a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090a6:	f004 fe11 	bl	800dccc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 80090aa:	462a      	mov	r2, r5
 80090ac:	4631      	mov	r1, r6
 80090ae:	4620      	mov	r0, r4
 80090b0:	f004 fdee 	bl	800dc90 <setup_thread_stack>
 80090b4:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 80090b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090bc:	9301      	str	r3, [sp, #4]
 80090be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	463b      	mov	r3, r7
 80090c4:	4602      	mov	r2, r0
 80090c6:	4631      	mov	r1, r6
 80090c8:	4620      	mov	r0, r4
 80090ca:	f7fb f827 	bl	800411c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <z_setup_new_thread+0x5c>)
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	b123      	cbz	r3, 80090e2 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 80090d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090da:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 80090dc:	4628      	mov	r0, r5
 80090de:	b005      	add	sp, #20
 80090e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 80090e2:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 80090e4:	e7fa      	b.n	80090dc <z_setup_new_thread+0x50>
 80090e6:	bf00      	nop
 80090e8:	20000ecc 	.word	0x20000ecc

080090ec <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 80090ec:	b510      	push	{r4, lr}
 80090ee:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 80090f0:	4c1d      	ldr	r4, [pc, #116]	; (8009168 <z_init_static_threads+0x7c>)
 80090f2:	e014      	b.n	800911e <z_init_static_threads+0x32>
		z_setup_new_thread(
 80090f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	6a23      	ldr	r3, [r4, #32]
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	69e3      	ldr	r3, [r4, #28]
 80090fe:	9303      	str	r3, [sp, #12]
 8009100:	69a3      	ldr	r3, [r4, #24]
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	6963      	ldr	r3, [r4, #20]
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	68e3      	ldr	r3, [r4, #12]
 800910e:	68a2      	ldr	r2, [r4, #8]
 8009110:	6861      	ldr	r1, [r4, #4]
 8009112:	6820      	ldr	r0, [r4, #0]
 8009114:	f7ff ffba 	bl	800908c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800911c:	3430      	adds	r4, #48	; 0x30
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <z_init_static_threads+0x80>)
 8009120:	429c      	cmp	r4, r3
 8009122:	d3e7      	bcc.n	80090f4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8009124:	f000 fbd4 	bl	80098d0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8009128:	4c0f      	ldr	r4, [pc, #60]	; (8009168 <z_init_static_threads+0x7c>)
 800912a:	e000      	b.n	800912e <z_init_static_threads+0x42>
 800912c:	3430      	adds	r4, #48	; 0x30
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <z_init_static_threads+0x80>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d214      	bcs.n	800915e <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8009134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800913a:	d0f7      	beq.n	800912c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800913c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009140:	17d8      	asrs	r0, r3, #31
 8009142:	0082      	lsls	r2, r0, #2
 8009144:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8009148:	0099      	lsls	r1, r3, #2
 800914a:	18c9      	adds	r1, r1, r3
 800914c:	eb40 0002 	adc.w	r0, r0, r2
 8009150:	184a      	adds	r2, r1, r1
 8009152:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	f7ff ff8a 	bl	8009070 <schedule_new_thread>
 800915c:	e7e6      	b.n	800912c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800915e:	f000 fdc1 	bl	8009ce4 <k_sched_unlock>
}
 8009162:	b006      	add	sp, #24
 8009164:	bd10      	pop	{r4, pc}
 8009166:	bf00      	nop
 8009168:	200002e0 	.word	0x200002e0
 800916c:	20000370 	.word	0x20000370

08009170 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800917a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800917e:	f04f 0110 	mov.w	r1, #16
 8009182:	f3ef 8611 	mrs	r6, BASEPRI
 8009186:	f381 8812 	msr	BASEPRI_MAX, r1
 800918a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800918e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009190:	6921      	ldr	r1, [r4, #16]
 8009192:	4288      	cmp	r0, r1
 8009194:	d30b      	bcc.n	80091ae <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009196:	ea53 0102 	orrs.w	r1, r3, r2
 800919a:	d137      	bne.n	800920c <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800919c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 80091a0:	f386 8811 	msr	BASEPRI, r6
 80091a4:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80091a8:	b002      	add	sp, #8
 80091aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 80091ae:	4620      	mov	r0, r4
 80091b0:	f004 ff46 	bl	800e040 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 80091b4:	4680      	mov	r8, r0
 80091b6:	b180      	cbz	r0, 80091da <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80091b8:	68e2      	ldr	r2, [r4, #12]
 80091ba:	4629      	mov	r1, r5
 80091bc:	6940      	ldr	r0, [r0, #20]
 80091be:	f005 f928 	bl	800e412 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80091c2:	2400      	movs	r4, #0
 80091c4:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 80091c8:	4640      	mov	r0, r8
 80091ca:	f004 fe72 	bl	800deb2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 80091ce:	4631      	mov	r1, r6
 80091d0:	4638      	mov	r0, r7
 80091d2:	f000 fb61 	bl	8009898 <z_reschedule>
			return 0;
 80091d6:	4620      	mov	r0, r4
 80091d8:	e7e6      	b.n	80091a8 <z_impl_k_msgq_put+0x38>
 80091da:	68e2      	ldr	r2, [r4, #12]
 80091dc:	4629      	mov	r1, r5
 80091de:	6a20      	ldr	r0, [r4, #32]
 80091e0:	f005 f917 	bl	800e412 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 80091e4:	68e2      	ldr	r2, [r4, #12]
 80091e6:	6a23      	ldr	r3, [r4, #32]
 80091e8:	4413      	add	r3, r2
 80091ea:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 80091ec:	69a2      	ldr	r2, [r4, #24]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d009      	beq.n	8009206 <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 80091f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f4:	3301      	adds	r3, #1
 80091f6:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 80091f8:	2110      	movs	r1, #16
 80091fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80091fe:	f005 f8ee 	bl	800e3de <z_handle_obj_poll_events>
		result = 0;
 8009202:	2000      	movs	r0, #0
 8009204:	e7cc      	b.n	80091a0 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 8009206:	6963      	ldr	r3, [r4, #20]
 8009208:	6223      	str	r3, [r4, #32]
 800920a:	e7f2      	b.n	80091f2 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 800920c:	4905      	ldr	r1, [pc, #20]	; (8009224 <z_impl_k_msgq_put+0xb4>)
 800920e:	6889      	ldr	r1, [r1, #8]
 8009210:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8009212:	9200      	str	r2, [sp, #0]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	4622      	mov	r2, r4
 8009218:	4631      	mov	r1, r6
 800921a:	4638      	mov	r0, r7
 800921c:	f000 fcac 	bl	8009b78 <z_pend_curr>
		return result;
 8009220:	e7c2      	b.n	80091a8 <z_impl_k_msgq_put+0x38>
 8009222:	bf00      	nop
 8009224:	20000ecc 	.word	0x20000ecc

08009228 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 8009228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922a:	b083      	sub	sp, #12
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8009230:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 8009234:	f04f 0110 	mov.w	r1, #16
 8009238:	f3ef 8511 	mrs	r5, BASEPRI
 800923c:	f381 8812 	msr	BASEPRI_MAX, r1
 8009240:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 8009244:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009246:	2900      	cmp	r1, #0
 8009248:	d033      	beq.n	80092b2 <z_impl_k_msgq_get+0x8a>
 800924a:	68e2      	ldr	r2, [r4, #12]
 800924c:	69e1      	ldr	r1, [r4, #28]
 800924e:	f005 f8e0 	bl	800e412 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8009252:	68e2      	ldr	r2, [r4, #12]
 8009254:	69e3      	ldr	r3, [r4, #28]
 8009256:	4413      	add	r3, r2
 8009258:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800925a:	69a2      	ldr	r2, [r4, #24]
 800925c:	4293      	cmp	r3, r2
 800925e:	d022      	beq.n	80092a6 <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 8009260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009262:	3b01      	subs	r3, #1
 8009264:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8009266:	4620      	mov	r0, r4
 8009268:	f004 feea 	bl	800e040 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800926c:	4607      	mov	r7, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d035      	beq.n	80092de <z_impl_k_msgq_get+0xb6>
 8009272:	68e2      	ldr	r2, [r4, #12]
 8009274:	6941      	ldr	r1, [r0, #20]
 8009276:	6a20      	ldr	r0, [r4, #32]
 8009278:	f005 f8cb 	bl	800e412 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800927c:	68e2      	ldr	r2, [r4, #12]
 800927e:	6a23      	ldr	r3, [r4, #32]
 8009280:	4413      	add	r3, r2
 8009282:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8009284:	69a2      	ldr	r2, [r4, #24]
 8009286:	4293      	cmp	r3, r2
 8009288:	d010      	beq.n	80092ac <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800928a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800928c:	3301      	adds	r3, #1
 800928e:	6263      	str	r3, [r4, #36]	; 0x24
 8009290:	2400      	movs	r4, #0
 8009292:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8009294:	4638      	mov	r0, r7
 8009296:	f004 fe0c 	bl	800deb2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800929a:	4629      	mov	r1, r5
 800929c:	4630      	mov	r0, r6
 800929e:	f000 fafb 	bl	8009898 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 80092a2:	4620      	mov	r0, r4
 80092a4:	e00e      	b.n	80092c4 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 80092a6:	6963      	ldr	r3, [r4, #20]
 80092a8:	61e3      	str	r3, [r4, #28]
 80092aa:	e7d9      	b.n	8009260 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 80092ac:	6963      	ldr	r3, [r4, #20]
 80092ae:	6223      	str	r3, [r4, #32]
 80092b0:	e7eb      	b.n	800928a <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80092b2:	ea53 0102 	orrs.w	r1, r3, r2
 80092b6:	d107      	bne.n	80092c8 <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 80092b8:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 80092bc:	f385 8811 	msr	BASEPRI, r5
 80092c0:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 80092c4:	b003      	add	sp, #12
 80092c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 80092c8:	4906      	ldr	r1, [pc, #24]	; (80092e4 <z_impl_k_msgq_get+0xbc>)
 80092ca:	6889      	ldr	r1, [r1, #8]
 80092cc:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80092ce:	9200      	str	r2, [sp, #0]
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	4622      	mov	r2, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 fc4e 	bl	8009b78 <z_pend_curr>
		return result;
 80092dc:	e7f2      	b.n	80092c4 <z_impl_k_msgq_get+0x9c>
		result = 0;
 80092de:	2000      	movs	r0, #0
 80092e0:	e7ec      	b.n	80092bc <z_impl_k_msgq_get+0x94>
 80092e2:	bf00      	nop
 80092e4:	20000ecc 	.word	0x20000ecc

080092e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80092e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ec:	b083      	sub	sp, #12
 80092ee:	4604      	mov	r4, r0
 80092f0:	461d      	mov	r5, r3
	__asm__ volatile(
 80092f2:	f04f 0310 	mov.w	r3, #16
 80092f6:	f3ef 8711 	mrs	r7, BASEPRI
 80092fa:	f383 8812 	msr	BASEPRI_MAX, r3
 80092fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8009302:	68c1      	ldr	r1, [r0, #12]
 8009304:	b999      	cbnz	r1, 800932e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8009306:	2900      	cmp	r1, #0
 8009308:	d14f      	bne.n	80093aa <z_impl_k_mutex_lock+0xc2>
 800930a:	4b3a      	ldr	r3, [pc, #232]	; (80093f4 <z_impl_k_mutex_lock+0x10c>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8009312:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8009314:	3101      	adds	r1, #1
 8009316:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 8009318:	4b36      	ldr	r3, [pc, #216]	; (80093f4 <z_impl_k_mutex_lock+0x10c>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800931e:	f387 8811 	msr	BASEPRI, r7
 8009322:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 8009326:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8009328:	b003      	add	sp, #12
 800932a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8009330:	6882      	ldr	r2, [r0, #8]
 8009332:	4b30      	ldr	r3, [pc, #192]	; (80093f4 <z_impl_k_mutex_lock+0x10c>)
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	d0e5      	beq.n	8009306 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800933a:	ea55 0106 	orrs.w	r1, r5, r6
 800933e:	bf0c      	ite	eq
 8009340:	f04f 0801 	moveq.w	r8, #1
 8009344:	f04f 0800 	movne.w	r8, #0
 8009348:	d031      	beq.n	80093ae <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800934a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800934e:	4649      	mov	r1, r9
 8009350:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8009354:	f004 fcf3 	bl	800dd3e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8009358:	4581      	cmp	r9, r0
 800935a:	dc2f      	bgt.n	80093bc <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800935c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8009360:	9600      	str	r6, [sp, #0]
 8009362:	9501      	str	r5, [sp, #4]
 8009364:	4622      	mov	r2, r4
 8009366:	4639      	mov	r1, r7
 8009368:	4823      	ldr	r0, [pc, #140]	; (80093f8 <z_impl_k_mutex_lock+0x110>)
 800936a:	f000 fc05 	bl	8009b78 <z_pend_curr>
	if (got_mutex == 0) {
 800936e:	2800      	cmp	r0, #0
 8009370:	d0da      	beq.n	8009328 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8009372:	f04f 0310 	mov.w	r3, #16
 8009376:	f3ef 8511 	mrs	r5, BASEPRI
 800937a:	f383 8812 	msr	BASEPRI_MAX, r3
 800937e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8009382:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009384:	42a3      	cmp	r3, r4
 8009386:	d01f      	beq.n	80093c8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8009388:	b1f3      	cbz	r3, 80093c8 <z_impl_k_mutex_lock+0xe0>
 800938a:	6921      	ldr	r1, [r4, #16]
 800938c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8009390:	f004 fcd5 	bl	800dd3e <new_prio_for_inheritance>
 8009394:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8009396:	4620      	mov	r0, r4
 8009398:	f004 fcdc 	bl	800dd54 <adjust_owner_prio>
 800939c:	b9b0      	cbnz	r0, 80093cc <z_impl_k_mutex_lock+0xe4>
 800939e:	f1b9 0f00 	cmp.w	r9, #0
 80093a2:	d015      	beq.n	80093d0 <z_impl_k_mutex_lock+0xe8>
 80093a4:	f04f 0801 	mov.w	r8, #1
 80093a8:	e012      	b.n	80093d0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	e7b1      	b.n	8009312 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 80093ae:	f387 8811 	msr	BASEPRI, r7
 80093b2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80093b6:	f06f 000f 	mvn.w	r0, #15
 80093ba:	e7b5      	b.n	8009328 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 80093bc:	4601      	mov	r1, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f004 fcc8 	bl	800dd54 <adjust_owner_prio>
 80093c4:	4681      	mov	r9, r0
 80093c6:	e7cb      	b.n	8009360 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80093c8:	6921      	ldr	r1, [r4, #16]
 80093ca:	e7e4      	b.n	8009396 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80093cc:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 80093d0:	f1b8 0f00 	cmp.w	r8, #0
 80093d4:	d106      	bne.n	80093e4 <z_impl_k_mutex_lock+0xfc>
 80093d6:	f385 8811 	msr	BASEPRI, r5
 80093da:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 80093de:	f06f 000a 	mvn.w	r0, #10
 80093e2:	e7a1      	b.n	8009328 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 80093e4:	4629      	mov	r1, r5
 80093e6:	4804      	ldr	r0, [pc, #16]	; (80093f8 <z_impl_k_mutex_lock+0x110>)
 80093e8:	f000 fa56 	bl	8009898 <z_reschedule>
	return -EAGAIN;
 80093ec:	f06f 000a 	mvn.w	r0, #10
 80093f0:	e79a      	b.n	8009328 <z_impl_k_mutex_lock+0x40>
 80093f2:	bf00      	nop
 80093f4:	20000ecc 	.word	0x20000ecc
 80093f8:	20000ef0 	.word	0x20000ef0

080093fc <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 80093fc:	6882      	ldr	r2, [r0, #8]
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d034      	beq.n	800946c <z_impl_k_mutex_unlock+0x70>
{
 8009402:	b538      	push	{r3, r4, r5, lr}
 8009404:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8009406:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <z_impl_k_mutex_unlock+0x7c>)
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	429a      	cmp	r2, r3
 800940c:	d131      	bne.n	8009472 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800940e:	7bda      	ldrb	r2, [r3, #15]
 8009410:	3a01      	subs	r2, #1
 8009412:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8009414:	68c3      	ldr	r3, [r0, #12]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d905      	bls.n	8009426 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800941a:	3b01      	subs	r3, #1
 800941c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800941e:	f000 fc61 	bl	8009ce4 <k_sched_unlock>

	return 0;
 8009422:	2000      	movs	r0, #0
}
 8009424:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8009426:	f04f 0310 	mov.w	r3, #16
 800942a:	f3ef 8511 	mrs	r5, BASEPRI
 800942e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009432:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8009436:	6901      	ldr	r1, [r0, #16]
 8009438:	f004 fc8c 	bl	800dd54 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800943c:	4620      	mov	r0, r4
 800943e:	f004 fdff 	bl	800e040 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8009442:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8009444:	b158      	cbz	r0, 800945e <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 8009446:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800944a:	6123      	str	r3, [r4, #16]
 800944c:	2300      	movs	r3, #0
 800944e:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 8009450:	f004 fd2f 	bl	800deb2 <z_ready_thread>
		z_reschedule(&lock, key);
 8009454:	4629      	mov	r1, r5
 8009456:	4809      	ldr	r0, [pc, #36]	; (800947c <z_impl_k_mutex_unlock+0x80>)
 8009458:	f000 fa1e 	bl	8009898 <z_reschedule>
 800945c:	e7df      	b.n	800941e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8009462:	f385 8811 	msr	BASEPRI, r5
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	e7d8      	b.n	800941e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800946c:	f06f 0015 	mvn.w	r0, #21
}
 8009470:	4770      	bx	lr
		return -EPERM;
 8009472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009476:	e7d5      	b.n	8009424 <z_impl_k_mutex_unlock+0x28>
 8009478:	20000ecc 	.word	0x20000ecc
 800947c:	20000ef0 	.word	0x20000ef0

08009480 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4604      	mov	r4, r0
	__asm__ volatile(
 8009484:	f04f 0310 	mov.w	r3, #16
 8009488:	f3ef 8511 	mrs	r5, BASEPRI
 800948c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009490:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8009494:	f004 fdd4 	bl	800e040 <z_unpend_first_thread>

	if (thread != NULL) {
 8009498:	b140      	cbz	r0, 80094ac <z_impl_k_sem_give+0x2c>
 800949a:	2200      	movs	r2, #0
 800949c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800949e:	f004 fd08 	bl	800deb2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 80094a2:	4629      	mov	r1, r5
 80094a4:	4809      	ldr	r0, [pc, #36]	; (80094cc <z_impl_k_sem_give+0x4c>)
 80094a6:	f000 f9f7 	bl	8009898 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	68e2      	ldr	r2, [r4, #12]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d008      	beq.n	80094c6 <z_impl_k_sem_give+0x46>
 80094b4:	2201      	movs	r2, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 80094ba:	2102      	movs	r1, #2
 80094bc:	f104 0010 	add.w	r0, r4, #16
 80094c0:	f004 ff8d 	bl	800e3de <z_handle_obj_poll_events>
}
 80094c4:	e7ed      	b.n	80094a2 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80094c6:	2200      	movs	r2, #0
 80094c8:	e7f5      	b.n	80094b6 <z_impl_k_sem_give+0x36>
 80094ca:	bf00      	nop
 80094cc:	20000ef4 	.word	0x20000ef4

080094d0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80094d0:	b510      	push	{r4, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	f04f 0410 	mov.w	r4, #16
 80094d8:	f3ef 8111 	mrs	r1, BASEPRI
 80094dc:	f384 8812 	msr	BASEPRI_MAX, r4
 80094e0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80094e4:	6884      	ldr	r4, [r0, #8]
 80094e6:	b144      	cbz	r4, 80094fa <z_impl_k_sem_take+0x2a>
		sem->count--;
 80094e8:	3c01      	subs	r4, #1
 80094ea:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80094ec:	f381 8811 	msr	BASEPRI, r1
 80094f0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80094f4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80094f6:	b002      	add	sp, #8
 80094f8:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80094fa:	ea53 0402 	orrs.w	r4, r3, r2
 80094fe:	d006      	beq.n	800950e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8009500:	9200      	str	r2, [sp, #0]
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	4602      	mov	r2, r0
 8009506:	4805      	ldr	r0, [pc, #20]	; (800951c <z_impl_k_sem_take+0x4c>)
 8009508:	f000 fb36 	bl	8009b78 <z_pend_curr>
	return ret;
 800950c:	e7f3      	b.n	80094f6 <z_impl_k_sem_take+0x26>
 800950e:	f381 8811 	msr	BASEPRI, r1
 8009512:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8009516:	f06f 000f 	mvn.w	r0, #15
 800951a:	e7ec      	b.n	80094f6 <z_impl_k_sem_take+0x26>
 800951c:	20000ef4 	.word	0x20000ef4

08009520 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8009524:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8009526:	f013 0f02 	tst.w	r3, #2
 800952a:	d15c      	bne.n	80095e6 <submit_to_queue_locked+0xc6>
 800952c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800952e:	f013 0f04 	tst.w	r3, #4
 8009532:	d15d      	bne.n	80095f0 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8009534:	680b      	ldr	r3, [r1, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d038      	beq.n	80095ac <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800953a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800953c:	f013 0f01 	tst.w	r3, #1
 8009540:	d037      	beq.n	80095b2 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 8009542:	68a3      	ldr	r3, [r4, #8]
 8009544:	602b      	str	r3, [r5, #0]
			ret = 2;
 8009546:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 8009548:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800954a:	2e00      	cmp	r6, #0
 800954c:	d03f      	beq.n	80095ce <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800954e:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <submit_to_queue_locked+0xd4>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	42b3      	cmp	r3, r6
 8009554:	d02f      	beq.n	80095b6 <submit_to_queue_locked+0x96>
 8009556:	2300      	movs	r3, #0
 8009558:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800955a:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800955e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8009562:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8009566:	f013 0f01 	tst.w	r3, #1
 800956a:	d033      	beq.n	80095d4 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800956c:	b101      	cbz	r1, 8009570 <submit_to_queue_locked+0x50>
 800956e:	b3a2      	cbz	r2, 80095da <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 8009570:	b100      	cbz	r0, 8009574 <submit_to_queue_locked+0x54>
 8009572:	b3a9      	cbz	r1, 80095e0 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8009574:	2300      	movs	r3, #0
 8009576:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8009578:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800957c:	b313      	cbz	r3, 80095c4 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800957e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009580:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8009584:	b12e      	cbz	r6, 8009592 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8009586:	2200      	movs	r2, #0
 8009588:	4611      	mov	r1, r2
 800958a:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800958e:	f004 fdbb 	bl	800e108 <z_sched_wake>
		ret = 1;
 8009592:	2001      	movs	r0, #1

		if (rc < 0) {
 8009594:	2800      	cmp	r0, #0
 8009596:	db06      	blt.n	80095a6 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 8009598:	68e3      	ldr	r3, [r4, #12]
 800959a:	f043 0304 	orr.w	r3, r3, #4
 800959e:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	60a3      	str	r3, [r4, #8]
 80095a4:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 80095a6:	2800      	cmp	r0, #0
 80095a8:	dc21      	bgt.n	80095ee <submit_to_queue_locked+0xce>
 80095aa:	e01e      	b.n	80095ea <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 80095ac:	6883      	ldr	r3, [r0, #8]
 80095ae:	600b      	str	r3, [r1, #0]
 80095b0:	e7c3      	b.n	800953a <submit_to_queue_locked+0x1a>
		ret = 1;
 80095b2:	2701      	movs	r7, #1
 80095b4:	e7c8      	b.n	8009548 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80095b6:	f004 fb7a 	bl	800dcae <k_is_in_isr>
 80095ba:	b908      	cbnz	r0, 80095c0 <submit_to_queue_locked+0xa0>
 80095bc:	2301      	movs	r3, #1
 80095be:	e7cb      	b.n	8009558 <submit_to_queue_locked+0x38>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e7c9      	b.n	8009558 <submit_to_queue_locked+0x38>
 80095c4:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 80095c8:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 80095cc:	e7da      	b.n	8009584 <submit_to_queue_locked+0x64>
		return -EINVAL;
 80095ce:	f06f 0015 	mvn.w	r0, #21
 80095d2:	e7df      	b.n	8009594 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 80095d4:	f06f 0012 	mvn.w	r0, #18
 80095d8:	e7dc      	b.n	8009594 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80095da:	f06f 000f 	mvn.w	r0, #15
 80095de:	e7d9      	b.n	8009594 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80095e0:	f06f 000f 	mvn.w	r0, #15
 80095e4:	e7d6      	b.n	8009594 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80095e6:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 80095ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7fa      	b.n	80095ea <submit_to_queue_locked+0xca>
 80095f4:	20000ecc 	.word	0x20000ecc

080095f8 <finalize_cancel_locked>:
{
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 80095fc:	68c3      	ldr	r3, [r0, #12]
 80095fe:	f023 0302 	bic.w	r3, r3, #2
 8009602:	60c3      	str	r3, [r0, #12]
	return list->head;
 8009604:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <finalize_cancel_locked+0x78>)
 8009606:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8009608:	b1fb      	cbz	r3, 800964a <finalize_cancel_locked+0x52>
 800960a:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800960c:	b103      	cbz	r3, 8009610 <finalize_cancel_locked+0x18>
	return node->next;
 800960e:	681c      	ldr	r4, [r3, #0]
 8009610:	2600      	movs	r6, #0
 8009612:	e01f      	b.n	8009654 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8009614:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8009616:	b166      	cbz	r6, 8009632 <finalize_cancel_locked+0x3a>
	return node->next;
 8009618:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800961a:	6031      	str	r1, [r6, #0]
	return list->tail;
 800961c:	4914      	ldr	r1, [pc, #80]	; (8009670 <finalize_cancel_locked+0x78>)
 800961e:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8009620:	428b      	cmp	r3, r1
 8009622:	d00f      	beq.n	8009644 <finalize_cancel_locked+0x4c>
	parent->next = child;
 8009624:	2100      	movs	r1, #0
 8009626:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 8009628:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800962c:	f7ff ff28 	bl	8009480 <z_impl_k_sem_give>
}
 8009630:	e015      	b.n	800965e <finalize_cancel_locked+0x66>
	return node->next;
 8009632:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8009634:	490e      	ldr	r1, [pc, #56]	; (8009670 <finalize_cancel_locked+0x78>)
 8009636:	6008      	str	r0, [r1, #0]
	return list->tail;
 8009638:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800963a:	428b      	cmp	r3, r1
 800963c:	d1f2      	bne.n	8009624 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800963e:	490c      	ldr	r1, [pc, #48]	; (8009670 <finalize_cancel_locked+0x78>)
 8009640:	6048      	str	r0, [r1, #4]
}
 8009642:	e7ef      	b.n	8009624 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8009644:	490a      	ldr	r1, [pc, #40]	; (8009670 <finalize_cancel_locked+0x78>)
 8009646:	604e      	str	r6, [r1, #4]
}
 8009648:	e7ec      	b.n	8009624 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800964a:	461c      	mov	r4, r3
 800964c:	e7e0      	b.n	8009610 <finalize_cancel_locked+0x18>
 800964e:	4622      	mov	r2, r4
 8009650:	4623      	mov	r3, r4
 8009652:	4614      	mov	r4, r2
 8009654:	b153      	cbz	r3, 800966c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	42aa      	cmp	r2, r5
 800965a:	d0db      	beq.n	8009614 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800965c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800965e:	2c00      	cmp	r4, #0
 8009660:	d0f5      	beq.n	800964e <finalize_cancel_locked+0x56>
 8009662:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8009664:	2c00      	cmp	r4, #0
 8009666:	d0f3      	beq.n	8009650 <finalize_cancel_locked+0x58>
	return node->next;
 8009668:	6822      	ldr	r2, [r4, #0]
 800966a:	e7f1      	b.n	8009650 <finalize_cancel_locked+0x58>
}
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	bf00      	nop
 8009670:	20000efc 	.word	0x20000efc

08009674 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8009674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009676:	b085      	sub	sp, #20
 8009678:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800967a:	e016      	b.n	80096aa <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800967c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 8009680:	f023 0204 	bic.w	r2, r3, #4
 8009684:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 8009688:	f013 0f04 	tst.w	r3, #4
 800968c:	d159      	bne.n	8009742 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800968e:	2300      	movs	r3, #0
 8009690:	9302      	str	r3, [sp, #8]
 8009692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800969a:	e9cd 2300 	strd	r2, r3, [sp]
 800969e:	f105 0288 	add.w	r2, r5, #136	; 0x88
 80096a2:	4631      	mov	r1, r6
 80096a4:	482e      	ldr	r0, [pc, #184]	; (8009760 <work_queue_main+0xec>)
 80096a6:	f000 fc83 	bl	8009fb0 <z_sched_wait>
	__asm__ volatile(
 80096aa:	f04f 0310 	mov.w	r3, #16
 80096ae:	f3ef 8611 	mrs	r6, BASEPRI
 80096b2:	f383 8812 	msr	BASEPRI_MAX, r3
 80096b6:	f3bf 8f6f 	isb	sy
	return list->head;
 80096ba:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 80096be:	2c00      	cmp	r4, #0
 80096c0:	d0dc      	beq.n	800967c <work_queue_main+0x8>
	return node->next;
 80096c2:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 80096c4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 80096c8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80096cc:	4294      	cmp	r4, r2
 80096ce:	d035      	beq.n	800973c <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 80096d0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80096d4:	f043 0302 	orr.w	r3, r3, #2
 80096d8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80096dc:	68e3      	ldr	r3, [r4, #12]
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 80096e4:	f023 0304 	bic.w	r3, r3, #4
 80096e8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 80096ea:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 80096ec:	2c00      	cmp	r4, #0
 80096ee:	d0ce      	beq.n	800968e <work_queue_main+0x1a>
	__asm__ volatile(
 80096f0:	f386 8811 	msr	BASEPRI, r6
 80096f4:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 80096f8:	4620      	mov	r0, r4
 80096fa:	4798      	blx	r3
	__asm__ volatile(
 80096fc:	f04f 0310 	mov.w	r3, #16
 8009700:	f3ef 8611 	mrs	r6, BASEPRI
 8009704:	f383 8812 	msr	BASEPRI_MAX, r3
 8009708:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800970c:	68e3      	ldr	r3, [r4, #12]
 800970e:	f023 0301 	bic.w	r3, r3, #1
 8009712:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8009714:	f013 0f02 	tst.w	r3, #2
 8009718:	d11e      	bne.n	8009758 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800971a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800971e:	f023 0302 	bic.w	r3, r3, #2
 8009722:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 8009726:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800972a:	f386 8811 	msr	BASEPRI, r6
 800972e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1b9      	bne.n	80096aa <work_queue_main+0x36>
	z_impl_k_yield();
 8009736:	f000 fb55 	bl	8009de4 <z_impl_k_yield>
}
 800973a:	e7b6      	b.n	80096aa <work_queue_main+0x36>
	list->tail = node;
 800973c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8009740:	e7c6      	b.n	80096d0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8009742:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8009746:	2200      	movs	r2, #0
 8009748:	2101      	movs	r1, #1
 800974a:	4638      	mov	r0, r7
 800974c:	f004 fcdc 	bl	800e108 <z_sched_wake>
 8009750:	2800      	cmp	r0, #0
 8009752:	d1f8      	bne.n	8009746 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 8009754:	2300      	movs	r3, #0
 8009756:	e7c9      	b.n	80096ec <work_queue_main+0x78>
				finalize_cancel_locked(work);
 8009758:	4620      	mov	r0, r4
 800975a:	f7ff ff4d 	bl	80095f8 <finalize_cancel_locked>
 800975e:	e7dc      	b.n	800971a <work_queue_main+0xa6>
 8009760:	20000ef8 	.word	0x20000ef8

08009764 <k_work_submit>:
{
 8009764:	b508      	push	{r3, lr}
 8009766:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <k_work_submit+0xc>)
 800976a:	f004 fb0c 	bl	800dd86 <k_work_submit_to_queue>
}
 800976e:	bd08      	pop	{r3, pc}
 8009770:	20000848 	.word	0x20000848

08009774 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8009774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009776:	b089      	sub	sp, #36	; 0x24
 8009778:	4604      	mov	r4, r0
 800977a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800977c:	2000      	movs	r0, #0
 800977e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 8009782:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8009786:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800978a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800978e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8009792:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 8009796:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800979a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800979e:	b1fd      	cbz	r5, 80097e0 <k_work_queue_start+0x6c>
 80097a0:	7928      	ldrb	r0, [r5, #4]
 80097a2:	b9f8      	cbnz	r0, 80097e4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80097a4:	2001      	movs	r0, #1
	*flagp = flags;
 80097a6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80097aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80097ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80097b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097b6:	2000      	movs	r0, #0
 80097b8:	9004      	str	r0, [sp, #16]
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	9002      	str	r0, [sp, #8]
 80097be:	9001      	str	r0, [sp, #4]
 80097c0:	9400      	str	r4, [sp, #0]
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <k_work_queue_start+0x78>)
 80097c4:	4620      	mov	r0, r4
 80097c6:	f004 fa8c 	bl	800dce2 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 80097ca:	b125      	cbz	r5, 80097d6 <k_work_queue_start+0x62>
 80097cc:	6829      	ldr	r1, [r5, #0]
 80097ce:	b111      	cbz	r1, 80097d6 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 80097d0:	4620      	mov	r0, r4
 80097d2:	f004 fa72 	bl	800dcba <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80097d6:	4620      	mov	r0, r4
 80097d8:	f004 fa74 	bl	800dcc4 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80097dc:	b009      	add	sp, #36	; 0x24
 80097de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80097e0:	2001      	movs	r0, #1
 80097e2:	e7e0      	b.n	80097a6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 80097e4:	f240 1001 	movw	r0, #257	; 0x101
 80097e8:	e7dd      	b.n	80097a6 <k_work_queue_start+0x32>
 80097ea:	bf00      	nop
 80097ec:	08009675 	.word	0x08009675

080097f0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80097f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f4:	bf08      	it	eq
 80097f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80097fa:	d100      	bne.n	80097fe <add_thread_timeout+0xe>
 80097fc:	4770      	bx	lr
{
 80097fe:	b508      	push	{r3, lr}
 8009800:	4902      	ldr	r1, [pc, #8]	; (800980c <add_thread_timeout+0x1c>)
 8009802:	3018      	adds	r0, #24
 8009804:	f000 fc4a 	bl	800a09c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 8009808:	bd08      	pop	{r3, pc}
 800980a:	bf00      	nop
 800980c:	0800deeb 	.word	0x0800deeb

08009810 <z_reset_time_slice>:
{
 8009810:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8009812:	4b08      	ldr	r3, [pc, #32]	; (8009834 <z_reset_time_slice+0x24>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	b903      	cbnz	r3, 800981a <z_reset_time_slice+0xa>
}
 8009818:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800981a:	f7fe fd37 	bl	800828c <sys_clock_elapsed>
 800981e:	4603      	mov	r3, r0
 8009820:	4a04      	ldr	r2, [pc, #16]	; (8009834 <z_reset_time_slice+0x24>)
 8009822:	6810      	ldr	r0, [r2, #0]
 8009824:	4403      	add	r3, r0
 8009826:	4a04      	ldr	r2, [pc, #16]	; (8009838 <z_reset_time_slice+0x28>)
 8009828:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800982a:	2100      	movs	r1, #0
 800982c:	f004 fd0f 	bl	800e24e <z_set_timeout_expiry>
}
 8009830:	e7f2      	b.n	8009818 <z_reset_time_slice+0x8>
 8009832:	bf00      	nop
 8009834:	20000f10 	.word	0x20000f10
 8009838:	20000ecc 	.word	0x20000ecc

0800983c <k_sched_time_slice_set>:
{
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 8009842:	2300      	movs	r3, #0
	__asm__ volatile(
 8009844:	f04f 0210 	mov.w	r2, #16
 8009848:	f3ef 8611 	mrs	r6, BASEPRI
 800984c:	f382 8812 	msr	BASEPRI_MAX, r2
 8009850:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8009854:	e00c      	b.n	8009870 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 8009856:	2b02      	cmp	r3, #2
 8009858:	bfb8      	it	lt
 800985a:	2302      	movlt	r3, #2
 800985c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <k_sched_time_slice_set+0x50>)
 8009860:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 8009862:	f7ff ffd5 	bl	8009810 <z_reset_time_slice>
	__asm__ volatile(
 8009866:	f386 8811 	msr	BASEPRI, r6
 800986a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800986e:	2301      	movs	r3, #1
 8009870:	b953      	cbnz	r3, 8009888 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <k_sched_time_slice_set+0x54>)
 8009874:	2200      	movs	r2, #0
 8009876:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8009878:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800987c:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800987e:	4a05      	ldr	r2, [pc, #20]	; (8009894 <k_sched_time_slice_set+0x58>)
 8009880:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8009882:	2c00      	cmp	r4, #0
 8009884:	dce7      	bgt.n	8009856 <k_sched_time_slice_set+0x1a>
 8009886:	e7ea      	b.n	800985e <k_sched_time_slice_set+0x22>
}
 8009888:	bd70      	pop	{r4, r5, r6, pc}
 800988a:	bf00      	nop
 800988c:	20000f0c 	.word	0x20000f0c
 8009890:	20000ecc 	.word	0x20000ecc
 8009894:	20000f10 	.word	0x20000f10

08009898 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8009898:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800989a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800989c:	b921      	cbnz	r1, 80098a8 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989e:	f3ef 8305 	mrs	r3, IPSR
 80098a2:	b913      	cbnz	r3, 80098aa <z_reschedule+0x12>
 80098a4:	2101      	movs	r1, #1
 80098a6:	e000      	b.n	80098aa <z_reschedule+0x12>
 80098a8:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 80098aa:	f011 0f01 	tst.w	r1, #1
 80098ae:	d007      	beq.n	80098c0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <z_reschedule+0x34>)
 80098b2:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 80098b4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d002      	beq.n	80098c0 <z_reschedule+0x28>
	ret = arch_swap(key);
 80098ba:	f7fa fbdb 	bl	8004074 <arch_swap>
		z_swap(lock, key);
 80098be:	e003      	b.n	80098c8 <z_reschedule+0x30>
 80098c0:	f380 8811 	msr	BASEPRI, r0
 80098c4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 80098c8:	bd08      	pop	{r3, pc}
 80098ca:	bf00      	nop
 80098cc:	20000ecc 	.word	0x20000ecc

080098d0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 80098d0:	2300      	movs	r3, #0
	__asm__ volatile(
 80098d2:	f04f 0210 	mov.w	r2, #16
 80098d6:	f3ef 8111 	mrs	r1, BASEPRI
 80098da:	f382 8812 	msr	BASEPRI_MAX, r2
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	e009      	b.n	80098f8 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <k_sched_lock+0x30>)
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	7bd3      	ldrb	r3, [r2, #15]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80098ee:	f381 8811 	msr	BASEPRI, r1
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	2301      	movs	r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0f3      	beq.n	80098e4 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	20000ecc 	.word	0x20000ecc

08009904 <update_cache>:
{
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8009908:	480f      	ldr	r0, [pc, #60]	; (8009948 <update_cache+0x44>)
 800990a:	f004 facb 	bl	800dea4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800990e:	4605      	mov	r5, r0
 8009910:	b170      	cbz	r0, 8009930 <update_cache+0x2c>
	if (preempt_ok != 0) {
 8009912:	b984      	cbnz	r4, 8009936 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 8009914:	4b0d      	ldr	r3, [pc, #52]	; (800994c <update_cache+0x48>)
 8009916:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 8009918:	7b5a      	ldrb	r2, [r3, #13]
 800991a:	f012 0f1f 	tst.w	r2, #31
 800991e:	d10a      	bne.n	8009936 <update_cache+0x32>
	return node->next != NULL;
 8009920:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8009922:	b942      	cbnz	r2, 8009936 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8009924:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8009926:	2a7f      	cmp	r2, #127	; 0x7f
 8009928:	d905      	bls.n	8009936 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <update_cache+0x48>)
 800992c:	6193      	str	r3, [r2, #24]
 800992e:	e00a      	b.n	8009946 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <update_cache+0x48>)
 8009932:	68dd      	ldr	r5, [r3, #12]
 8009934:	e7ed      	b.n	8009912 <update_cache+0xe>
		if (thread != _current) {
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <update_cache+0x48>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	42ab      	cmp	r3, r5
 800993c:	d001      	beq.n	8009942 <update_cache+0x3e>
			z_reset_time_slice();
 800993e:	f7ff ff67 	bl	8009810 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8009942:	4b02      	ldr	r3, [pc, #8]	; (800994c <update_cache+0x48>)
 8009944:	619d      	str	r5, [r3, #24]
}
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	20000ee8 	.word	0x20000ee8
 800994c:	20000ecc 	.word	0x20000ecc

08009950 <move_thread_to_end_of_prio_q>:
{
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8009954:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8009956:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800995a:	2b00      	cmp	r3, #0
 800995c:	db28      	blt.n	80099b0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800995e:	7b6b      	ldrb	r3, [r5, #13]
 8009960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009964:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <move_thread_to_end_of_prio_q+0x80>)
 8009968:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800996c:	429c      	cmp	r4, r3
 800996e:	d02d      	beq.n	80099cc <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009970:	b16c      	cbz	r4, 800998e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f004 fa2a 	bl	800ddce <z_sched_prio_cmp>
 800997a:	2800      	cmp	r0, #0
 800997c:	dc20      	bgt.n	80099c0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800997e:	b134      	cbz	r4, 800998e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8009980:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <move_thread_to_end_of_prio_q+0x80>)
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	429c      	cmp	r4, r3
 8009986:	d002      	beq.n	800998e <move_thread_to_end_of_prio_q+0x3e>
 8009988:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800998a:	2c00      	cmp	r4, #0
 800998c:	d1f0      	bne.n	8009970 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800998e:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <move_thread_to_end_of_prio_q+0x80>)
 8009990:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 8009992:	f103 011c 	add.w	r1, r3, #28
 8009996:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8009998:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800999a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800999c:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800999e:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <move_thread_to_end_of_prio_q+0x80>)
 80099a0:	6898      	ldr	r0, [r3, #8]
 80099a2:	42a8      	cmp	r0, r5
 80099a4:	bf14      	ite	ne
 80099a6:	2000      	movne	r0, #0
 80099a8:	2001      	moveq	r0, #1
 80099aa:	f7ff ffab 	bl	8009904 <update_cache>
}
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80099b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099b4:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 80099b6:	4601      	mov	r1, r0
 80099b8:	4806      	ldr	r0, [pc, #24]	; (80099d4 <move_thread_to_end_of_prio_q+0x84>)
 80099ba:	f004 fa47 	bl	800de4c <z_priq_dumb_remove>
}
 80099be:	e7ce      	b.n	800995e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80099c0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 80099c2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80099c4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 80099c6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80099c8:	6065      	str	r5, [r4, #4]
}
 80099ca:	e7e8      	b.n	800999e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80099cc:	2400      	movs	r4, #0
 80099ce:	e7cf      	b.n	8009970 <move_thread_to_end_of_prio_q+0x20>
 80099d0:	20000ecc 	.word	0x20000ecc
 80099d4:	20000ee8 	.word	0x20000ee8

080099d8 <z_time_slice>:
{
 80099d8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80099da:	f04f 0310 	mov.w	r3, #16
 80099de:	f3ef 8411 	mrs	r4, BASEPRI
 80099e2:	f383 8812 	msr	BASEPRI_MAX, r3
 80099e6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80099ea:	4b21      	ldr	r3, [pc, #132]	; (8009a70 <z_time_slice+0x98>)
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	4a21      	ldr	r2, [pc, #132]	; (8009a74 <z_time_slice+0x9c>)
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d017      	beq.n	8009a26 <z_time_slice+0x4e>
	pending_current = NULL;
 80099f6:	4a1f      	ldr	r2, [pc, #124]	; (8009a74 <z_time_slice+0x9c>)
 80099f8:	2100      	movs	r1, #0
 80099fa:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80099fc:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <z_time_slice+0xa0>)
 80099fe:	6812      	ldr	r2, [r2, #0]
 8009a00:	b372      	cbz	r2, 8009a60 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8009a02:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8009a04:	2a7f      	cmp	r2, #127	; 0x7f
 8009a06:	d815      	bhi.n	8009a34 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 8009a08:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 8009a0a:	f012 0f1f 	tst.w	r2, #31
 8009a0e:	d11b      	bne.n	8009a48 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8009a10:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8009a14:	4a19      	ldr	r2, [pc, #100]	; (8009a7c <z_time_slice+0xa4>)
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	4291      	cmp	r1, r2
 8009a1a:	db17      	blt.n	8009a4c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 8009a1c:	4a18      	ldr	r2, [pc, #96]	; (8009a80 <z_time_slice+0xa8>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d016      	beq.n	8009a50 <z_time_slice+0x78>
 8009a22:	2201      	movs	r2, #1
 8009a24:	e007      	b.n	8009a36 <z_time_slice+0x5e>
		z_reset_time_slice();
 8009a26:	f7ff fef3 	bl	8009810 <z_reset_time_slice>
	__asm__ volatile(
 8009a2a:	f384 8811 	msr	BASEPRI, r4
 8009a2e:	f3bf 8f6f 	isb	sy
		return;
 8009a32:	e01c      	b.n	8009a6e <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 8009a34:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 8009a36:	b19a      	cbz	r2, 8009a60 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 8009a38:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <z_time_slice+0x98>)
 8009a3a:	6912      	ldr	r2, [r2, #16]
 8009a3c:	4282      	cmp	r2, r0
 8009a3e:	dd09      	ble.n	8009a54 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 8009a40:	1a10      	subs	r0, r2, r0
 8009a42:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <z_time_slice+0x98>)
 8009a44:	6118      	str	r0, [r3, #16]
 8009a46:	e00e      	b.n	8009a66 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8009a48:	2200      	movs	r2, #0
 8009a4a:	e7f4      	b.n	8009a36 <z_time_slice+0x5e>
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	e7f2      	b.n	8009a36 <z_time_slice+0x5e>
 8009a50:	2200      	movs	r2, #0
 8009a52:	e7f0      	b.n	8009a36 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff ff7b 	bl	8009950 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8009a5a:	f7ff fed9 	bl	8009810 <z_reset_time_slice>
 8009a5e:	e002      	b.n	8009a66 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8009a60:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <z_time_slice+0x98>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	611a      	str	r2, [r3, #16]
 8009a66:	f384 8811 	msr	BASEPRI, r4
 8009a6a:	f3bf 8f6f 	isb	sy
}
 8009a6e:	bd10      	pop	{r4, pc}
 8009a70:	20000ecc 	.word	0x20000ecc
 8009a74:	20000f04 	.word	0x20000f04
 8009a78:	20000f10 	.word	0x20000f10
 8009a7c:	20000f0c 	.word	0x20000f0c
 8009a80:	20000740 	.word	0x20000740

08009a84 <ready_thread>:
{
 8009a84:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 8009a86:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8009a88:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	db2d      	blt.n	8009aec <ready_thread+0x68>
 8009a90:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8009a92:	f013 0f1f 	tst.w	r3, #31
 8009a96:	d105      	bne.n	8009aa4 <ready_thread+0x20>
	return node->next != NULL;
 8009a98:	6982      	ldr	r2, [r0, #24]
 8009a9a:	b10a      	cbz	r2, 8009aa0 <ready_thread+0x1c>
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	e002      	b.n	8009aa6 <ready_thread+0x22>
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	e000      	b.n	8009aa6 <ready_thread+0x22>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	b30a      	cbz	r2, 8009aec <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8009aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aac:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8009aae:	4b14      	ldr	r3, [pc, #80]	; (8009b00 <ready_thread+0x7c>)
 8009ab0:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009ab4:	429d      	cmp	r5, r3
 8009ab6:	d020      	beq.n	8009afa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009ab8:	b16d      	cbz	r5, 8009ad6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009aba:	4629      	mov	r1, r5
 8009abc:	4620      	mov	r0, r4
 8009abe:	f004 f986 	bl	800ddce <z_sched_prio_cmp>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	dc13      	bgt.n	8009aee <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009ac6:	b135      	cbz	r5, 8009ad6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <ready_thread+0x7c>)
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	429d      	cmp	r5, r3
 8009ace:	d002      	beq.n	8009ad6 <ready_thread+0x52>
 8009ad0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009ad2:	2d00      	cmp	r5, #0
 8009ad4:	d1f0      	bne.n	8009ab8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <ready_thread+0x7c>)
 8009ad8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8009ada:	f103 011c 	add.w	r1, r3, #28
 8009ade:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8009ae0:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8009ae2:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8009ae4:	621c      	str	r4, [r3, #32]
		update_cache(0);
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f7ff ff0c 	bl	8009904 <update_cache>
}
 8009aec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8009aee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8009af0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009af2:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8009af4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009af6:	606c      	str	r4, [r5, #4]
}
 8009af8:	e7f5      	b.n	8009ae6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009afa:	2500      	movs	r5, #0
 8009afc:	e7dc      	b.n	8009ab8 <ready_thread+0x34>
 8009afe:	bf00      	nop
 8009b00:	20000ecc 	.word	0x20000ecc

08009b04 <z_sched_start>:
{
 8009b04:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009b06:	f04f 0310 	mov.w	r3, #16
 8009b0a:	f3ef 8411 	mrs	r4, BASEPRI
 8009b0e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b12:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8009b16:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8009b18:	f013 0f04 	tst.w	r3, #4
 8009b1c:	d104      	bne.n	8009b28 <z_sched_start+0x24>
	__asm__ volatile(
 8009b1e:	f384 8811 	msr	BASEPRI, r4
 8009b22:	f3bf 8f6f 	isb	sy
}
 8009b26:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8009b28:	f023 0304 	bic.w	r3, r3, #4
 8009b2c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8009b2e:	f7ff ffa9 	bl	8009a84 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8009b32:	4621      	mov	r1, r4
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <z_sched_start+0x38>)
 8009b36:	f7ff feaf 	bl	8009898 <z_reschedule>
 8009b3a:	e7f4      	b.n	8009b26 <z_sched_start+0x22>
 8009b3c:	20000f08 	.word	0x20000f08

08009b40 <unready_thread>:
{
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8009b44:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8009b46:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	db08      	blt.n	8009b60 <unready_thread+0x20>
	update_cache(thread == _current);
 8009b4e:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <unready_thread+0x30>)
 8009b50:	6898      	ldr	r0, [r3, #8]
 8009b52:	42a0      	cmp	r0, r4
 8009b54:	bf14      	ite	ne
 8009b56:	2000      	movne	r0, #0
 8009b58:	2001      	moveq	r0, #1
 8009b5a:	f7ff fed3 	bl	8009904 <update_cache>
}
 8009b5e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009b60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b64:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8009b66:	4601      	mov	r1, r0
 8009b68:	4802      	ldr	r0, [pc, #8]	; (8009b74 <unready_thread+0x34>)
 8009b6a:	f004 f96f 	bl	800de4c <z_priq_dumb_remove>
}
 8009b6e:	e7ee      	b.n	8009b4e <unready_thread+0xe>
 8009b70:	20000ecc 	.word	0x20000ecc
 8009b74:	20000ee8 	.word	0x20000ee8

08009b78 <z_pend_curr>:
{
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4611      	mov	r1, r2
	pending_current = _current;
 8009b7e:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <z_pend_curr+0x20>)
 8009b80:	6898      	ldr	r0, [r3, #8]
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <z_pend_curr+0x24>)
 8009b84:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8009b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b8a:	f004 fa10 	bl	800dfae <pend>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7fa fa70 	bl	8004074 <arch_swap>
}
 8009b94:	bd10      	pop	{r4, pc}
 8009b96:	bf00      	nop
 8009b98:	20000ecc 	.word	0x20000ecc
 8009b9c:	20000f04 	.word	0x20000f04

08009ba0 <z_set_prio>:
{
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8009ba8:	2300      	movs	r3, #0
	__asm__ volatile(
 8009baa:	f04f 0210 	mov.w	r2, #16
 8009bae:	f3ef 8811 	mrs	r8, BASEPRI
 8009bb2:	f382 8812 	msr	BASEPRI_MAX, r2
 8009bb6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8009bba:	461f      	mov	r7, r3
 8009bbc:	e008      	b.n	8009bd0 <z_set_prio+0x30>
		if (need_sched) {
 8009bbe:	f012 0701 	ands.w	r7, r2, #1
 8009bc2:	d111      	bne.n	8009be8 <z_set_prio+0x48>
			thread->base.prio = prio;
 8009bc4:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8009bc6:	f388 8811 	msr	BASEPRI, r8
 8009bca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8009bce:	2301      	movs	r3, #1
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d13d      	bne.n	8009c52 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8009bd6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8009bd8:	f013 0f1f 	tst.w	r3, #31
 8009bdc:	d1ef      	bne.n	8009bbe <z_set_prio+0x1e>
	return node->next != NULL;
 8009bde:	69a1      	ldr	r1, [r4, #24]
 8009be0:	2900      	cmp	r1, #0
 8009be2:	d1ec      	bne.n	8009bbe <z_set_prio+0x1e>
 8009be4:	2201      	movs	r2, #1
 8009be6:	e7ea      	b.n	8009bbe <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bec:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8009bee:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009c58 <z_set_prio+0xb8>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f004 f929 	bl	800de4c <z_priq_dumb_remove>
				thread->base.prio = prio;
 8009bfa:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8009bfc:	7b63      	ldrb	r3, [r4, #13]
 8009bfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c02:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8009c04:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009c08:	454d      	cmp	r5, r9
 8009c0a:	d020      	beq.n	8009c4e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009c0c:	b16d      	cbz	r5, 8009c2a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009c0e:	4629      	mov	r1, r5
 8009c10:	4620      	mov	r0, r4
 8009c12:	f004 f8dc 	bl	800ddce <z_sched_prio_cmp>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	dc13      	bgt.n	8009c42 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009c1a:	b135      	cbz	r5, 8009c2a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <z_set_prio+0xbc>)
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	429d      	cmp	r5, r3
 8009c22:	d002      	beq.n	8009c2a <z_set_prio+0x8a>
 8009c24:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	d1f0      	bne.n	8009c0c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <z_set_prio+0xbc>)
 8009c2c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8009c2e:	f103 011c 	add.w	r1, r3, #28
 8009c32:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8009c34:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8009c36:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8009c38:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	f7ff fe62 	bl	8009904 <update_cache>
 8009c40:	e7c1      	b.n	8009bc6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8009c42:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8009c44:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009c46:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8009c48:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009c4a:	606c      	str	r4, [r5, #4]
}
 8009c4c:	e7f5      	b.n	8009c3a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009c4e:	2500      	movs	r5, #0
 8009c50:	e7dc      	b.n	8009c0c <z_set_prio+0x6c>
}
 8009c52:	4638      	mov	r0, r7
 8009c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c58:	20000ee8 	.word	0x20000ee8
 8009c5c:	20000ecc 	.word	0x20000ecc

08009c60 <z_impl_k_thread_suspend>:
{
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8009c64:	3018      	adds	r0, #24
 8009c66:	f004 fabb 	bl	800e1e0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8009c6a:	2300      	movs	r3, #0
	__asm__ volatile(
 8009c6c:	f04f 0210 	mov.w	r2, #16
 8009c70:	f3ef 8511 	mrs	r5, BASEPRI
 8009c74:	f382 8812 	msr	BASEPRI_MAX, r2
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	e010      	b.n	8009ca0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8009c7e:	7b63      	ldrb	r3, [r4, #13]
 8009c80:	f043 0310 	orr.w	r3, r3, #16
 8009c84:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8009c86:	4b15      	ldr	r3, [pc, #84]	; (8009cdc <z_impl_k_thread_suspend+0x7c>)
 8009c88:	6898      	ldr	r0, [r3, #8]
 8009c8a:	42a0      	cmp	r0, r4
 8009c8c:	bf14      	ite	ne
 8009c8e:	2000      	movne	r0, #0
 8009c90:	2001      	moveq	r0, #1
 8009c92:	f7ff fe37 	bl	8009904 <update_cache>
	__asm__ volatile(
 8009c96:	f385 8811 	msr	BASEPRI, r5
 8009c9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	b963      	cbnz	r3, 8009cbc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 8009ca2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 8009ca4:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dae8      	bge.n	8009c7e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009cac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cb0:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	480a      	ldr	r0, [pc, #40]	; (8009ce0 <z_impl_k_thread_suspend+0x80>)
 8009cb6:	f004 f8c9 	bl	800de4c <z_priq_dumb_remove>
}
 8009cba:	e7e0      	b.n	8009c7e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <z_impl_k_thread_suspend+0x7c>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	42a3      	cmp	r3, r4
 8009cc2:	d000      	beq.n	8009cc6 <z_impl_k_thread_suspend+0x66>
}
 8009cc4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8009cc6:	f04f 0310 	mov.w	r3, #16
 8009cca:	f3ef 8011 	mrs	r0, BASEPRI
 8009cce:	f383 8812 	msr	BASEPRI_MAX, r3
 8009cd2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8009cd6:	f004 f8a4 	bl	800de22 <z_reschedule_irqlock>
 8009cda:	e7f3      	b.n	8009cc4 <z_impl_k_thread_suspend+0x64>
 8009cdc:	20000ecc 	.word	0x20000ecc
 8009ce0:	20000ee8 	.word	0x20000ee8

08009ce4 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8009ce4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f04f 0210 	mov.w	r2, #16
 8009cec:	f3ef 8411 	mrs	r4, BASEPRI
 8009cf0:	f382 8812 	msr	BASEPRI_MAX, r2
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	e00c      	b.n	8009d14 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8009cfa:	4b0d      	ldr	r3, [pc, #52]	; (8009d30 <k_sched_unlock+0x4c>)
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	7bd3      	ldrb	r3, [r2, #15]
 8009d00:	3301      	adds	r3, #1
 8009d02:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8009d04:	2000      	movs	r0, #0
 8009d06:	f7ff fdfd 	bl	8009904 <update_cache>
	__asm__ volatile(
 8009d0a:	f384 8811 	msr	BASEPRI, r4
 8009d0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8009d12:	2301      	movs	r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0f0      	beq.n	8009cfa <k_sched_unlock+0x16>
	__asm__ volatile(
 8009d18:	f04f 0310 	mov.w	r3, #16
 8009d1c:	f3ef 8011 	mrs	r0, BASEPRI
 8009d20:	f383 8812 	msr	BASEPRI_MAX, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f004 f87b 	bl	800de22 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000ecc 	.word	0x20000ecc

08009d34 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8009d34:	7b43      	ldrb	r3, [r0, #13]
 8009d36:	f013 0f08 	tst.w	r3, #8
 8009d3a:	d142      	bne.n	8009dc2 <end_thread+0x8e>
{
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8009d40:	f043 0308 	orr.w	r3, r3, #8
 8009d44:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8009d46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d4a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8009d4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d50:	d12b      	bne.n	8009daa <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8009d52:	68ab      	ldr	r3, [r5, #8]
 8009d54:	b15b      	cbz	r3, 8009d6e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8009d56:	4628      	mov	r0, r5
 8009d58:	f004 f837 	bl	800ddca <pended_on_thread>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f004 f875 	bl	800de4c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009d62:	7b6b      	ldrb	r3, [r5, #13]
 8009d64:	f023 0302 	bic.w	r3, r3, #2
 8009d68:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60ab      	str	r3, [r5, #8]
 8009d6e:	f105 0018 	add.w	r0, r5, #24
 8009d72:	f004 fa35 	bl	800e1e0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 8009d76:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8009d78:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009d7a:	42ac      	cmp	r4, r5
 8009d7c:	d01d      	beq.n	8009dba <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8009d7e:	b1e4      	cbz	r4, 8009dba <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8009d80:	4620      	mov	r0, r4
 8009d82:	f004 f822 	bl	800ddca <pended_on_thread>
 8009d86:	4621      	mov	r1, r4
 8009d88:	f004 f860 	bl	800de4c <z_priq_dumb_remove>
 8009d8c:	7b63      	ldrb	r3, [r4, #13]
 8009d8e:	f023 0302 	bic.w	r3, r3, #2
 8009d92:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8009d94:	2600      	movs	r6, #0
 8009d96:	60a6      	str	r6, [r4, #8]
 8009d98:	f104 0018 	add.w	r0, r4, #24
 8009d9c:	f004 fa20 	bl	800e1e0 <z_abort_timeout>
 8009da0:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fe6e 	bl	8009a84 <ready_thread>
 8009da8:	e7e6      	b.n	8009d78 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dae:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 8009db0:	4601      	mov	r1, r0
 8009db2:	4804      	ldr	r0, [pc, #16]	; (8009dc4 <end_thread+0x90>)
 8009db4:	f004 f84a 	bl	800de4c <z_priq_dumb_remove>
}
 8009db8:	e7cb      	b.n	8009d52 <end_thread+0x1e>
		update_cache(1);
 8009dba:	2001      	movs	r0, #1
 8009dbc:	f7ff fda2 	bl	8009904 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	4770      	bx	lr
 8009dc4:	20000ee8 	.word	0x20000ee8

08009dc8 <z_sched_init>:
{
 8009dc8:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <z_sched_init+0x18>)
 8009dcc:	f103 021c 	add.w	r2, r3, #28
 8009dd0:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 8009dd2:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	f7ff fd30 	bl	800983c <k_sched_time_slice_set>
}
 8009ddc:	bd08      	pop	{r3, pc}
 8009dde:	bf00      	nop
 8009de0:	20000ecc 	.word	0x20000ecc

08009de4 <z_impl_k_yield>:
{
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	f04f 0310 	mov.w	r3, #16
 8009dea:	f3ef 8611 	mrs	r6, BASEPRI
 8009dee:	f383 8812 	msr	BASEPRI_MAX, r3
 8009df2:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 8009df6:	4c1c      	ldr	r4, [pc, #112]	; (8009e68 <z_impl_k_yield+0x84>)
 8009df8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8009dfa:	7b4b      	ldrb	r3, [r1, #13]
 8009dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e00:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 8009e02:	f104 071c 	add.w	r7, r4, #28
 8009e06:	4638      	mov	r0, r7
 8009e08:	f004 f820 	bl	800de4c <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8009e0c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8009e0e:	7b6b      	ldrb	r3, [r5, #13]
 8009e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e14:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8009e16:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009e18:	42bc      	cmp	r4, r7
 8009e1a:	d023      	beq.n	8009e64 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009e1c:	b16c      	cbz	r4, 8009e3a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	f003 ffd4 	bl	800ddce <z_sched_prio_cmp>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	dc16      	bgt.n	8009e58 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009e2a:	b134      	cbz	r4, 8009e3a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <z_impl_k_yield+0x84>)
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d002      	beq.n	8009e3a <z_impl_k_yield+0x56>
 8009e34:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009e36:	2c00      	cmp	r4, #0
 8009e38:	d1f0      	bne.n	8009e1c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <z_impl_k_yield+0x84>)
 8009e3c:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8009e3e:	f103 011c 	add.w	r1, r3, #28
 8009e42:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8009e44:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8009e46:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8009e48:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8009e4a:	2001      	movs	r0, #1
 8009e4c:	f7ff fd5a 	bl	8009904 <update_cache>
 8009e50:	4630      	mov	r0, r6
 8009e52:	f7fa f90f 	bl	8004074 <arch_swap>
}
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8009e58:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8009e5a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8009e5c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8009e5e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8009e60:	6065      	str	r5, [r4, #4]
}
 8009e62:	e7f2      	b.n	8009e4a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009e64:	2400      	movs	r4, #0
 8009e66:	e7d9      	b.n	8009e1c <z_impl_k_yield+0x38>
 8009e68:	20000ecc 	.word	0x20000ecc

08009e6c <z_tick_sleep>:
{
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8009e70:	ea50 0301 	orrs.w	r3, r0, r1
 8009e74:	d038      	beq.n	8009ee8 <z_tick_sleep+0x7c>
 8009e76:	4604      	mov	r4, r0
 8009e78:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8009e7a:	f06f 0301 	mvn.w	r3, #1
 8009e7e:	1a1b      	subs	r3, r3, r0
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e84:	eb62 0201 	sbc.w	r2, r2, r1
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	f172 0300 	sbcs.w	r3, r2, #0
 8009e8e:	db2f      	blt.n	8009ef0 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8009e90:	f06f 0501 	mvn.w	r5, #1
 8009e94:	1a2d      	subs	r5, r5, r0
 8009e96:	f04f 0310 	mov.w	r3, #16
 8009e9a:	f3ef 8811 	mrs	r8, BASEPRI
 8009e9e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009ea2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8009ea6:	4f14      	ldr	r7, [pc, #80]	; (8009ef8 <z_tick_sleep+0x8c>)
 8009ea8:	68b8      	ldr	r0, [r7, #8]
 8009eaa:	4b14      	ldr	r3, [pc, #80]	; (8009efc <z_tick_sleep+0x90>)
 8009eac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8009eae:	f7ff fe47 	bl	8009b40 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8009eb2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	4633      	mov	r3, r6
 8009eb8:	4911      	ldr	r1, [pc, #68]	; (8009f00 <z_tick_sleep+0x94>)
 8009eba:	3018      	adds	r0, #24
 8009ebc:	f000 f8ee 	bl	800a09c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8009ec0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8009ec2:	7b53      	ldrb	r3, [r2, #13]
 8009ec4:	f043 0310 	orr.w	r3, r3, #16
 8009ec8:	7353      	strb	r3, [r2, #13]
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7fa f8d2 	bl	8004074 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8009ed0:	f004 f9e8 	bl	800e2a4 <sys_clock_tick_get_32>
 8009ed4:	1a28      	subs	r0, r5, r0
 8009ed6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8009eda:	2801      	cmp	r0, #1
 8009edc:	f173 0300 	sbcs.w	r3, r3, #0
 8009ee0:	da00      	bge.n	8009ee4 <z_tick_sleep+0x78>
	return 0;
 8009ee2:	2000      	movs	r0, #0
}
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8009ee8:	f7ff ff7c 	bl	8009de4 <z_impl_k_yield>
		return 0;
 8009eec:	2000      	movs	r0, #0
 8009eee:	e7f9      	b.n	8009ee4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8009ef0:	f004 f9d8 	bl	800e2a4 <sys_clock_tick_get_32>
 8009ef4:	1905      	adds	r5, r0, r4
 8009ef6:	e7ce      	b.n	8009e96 <z_tick_sleep+0x2a>
 8009ef8:	20000ecc 	.word	0x20000ecc
 8009efc:	20000f04 	.word	0x20000f04
 8009f00:	0800deeb 	.word	0x0800deeb

08009f04 <z_impl_k_sleep>:
{
 8009f04:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009f06:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009f0a:	bf08      	it	eq
 8009f0c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8009f10:	d007      	beq.n	8009f22 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8009f12:	f7ff ffab 	bl	8009e6c <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8009f16:	220a      	movs	r2, #10
 8009f18:	2300      	movs	r3, #0
 8009f1a:	17c1      	asrs	r1, r0, #31
 8009f1c:	f7f6 fd5e 	bl	80009dc <__aeabi_uldivmod>
}
 8009f20:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8009f22:	4b03      	ldr	r3, [pc, #12]	; (8009f30 <z_impl_k_sleep+0x2c>)
 8009f24:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8009f26:	f7ff fe9b 	bl	8009c60 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f2e:	e7f7      	b.n	8009f20 <z_impl_k_sleep+0x1c>
 8009f30:	20000ecc 	.word	0x20000ecc

08009f34 <z_impl_z_current_get>:
}
 8009f34:	4b01      	ldr	r3, [pc, #4]	; (8009f3c <z_impl_z_current_get+0x8>)
 8009f36:	6898      	ldr	r0, [r3, #8]
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	20000ecc 	.word	0x20000ecc

08009f40 <z_impl_k_is_preempt_thread>:
 8009f40:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8009f44:	b933      	cbnz	r3, 8009f54 <z_impl_k_is_preempt_thread+0x14>
 8009f46:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <z_impl_k_is_preempt_thread+0x1c>)
 8009f48:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8009f4a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8009f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8009f4e:	d803      	bhi.n	8009f58 <z_impl_k_is_preempt_thread+0x18>
 8009f50:	2001      	movs	r0, #1
 8009f52:	4770      	bx	lr
 8009f54:	2000      	movs	r0, #0
 8009f56:	4770      	bx	lr
 8009f58:	2000      	movs	r0, #0
}
 8009f5a:	4770      	bx	lr
 8009f5c:	20000ecc 	.word	0x20000ecc

08009f60 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	f04f 0310 	mov.w	r3, #16
 8009f66:	f3ef 8511 	mrs	r5, BASEPRI
 8009f6a:	f383 8812 	msr	BASEPRI_MAX, r3
 8009f6e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8009f72:	7b43      	ldrb	r3, [r0, #13]
 8009f74:	f013 0f08 	tst.w	r3, #8
 8009f78:	d004      	beq.n	8009f84 <z_thread_abort+0x24>
	__asm__ volatile(
 8009f7a:	f385 8811 	msr	BASEPRI, r5
 8009f7e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	4604      	mov	r4, r0
	end_thread(thread);
 8009f86:	f7ff fed5 	bl	8009d34 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8009f8a:	4b08      	ldr	r3, [pc, #32]	; (8009fac <z_thread_abort+0x4c>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	d004      	beq.n	8009f9c <z_thread_abort+0x3c>
 8009f92:	f385 8811 	msr	BASEPRI, r5
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	e7f2      	b.n	8009f82 <z_thread_abort+0x22>
 8009f9c:	f3ef 8305 	mrs	r3, IPSR
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1f6      	bne.n	8009f92 <z_thread_abort+0x32>
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7fa f865 	bl	8004074 <arch_swap>
	return ret;
 8009faa:	e7f2      	b.n	8009f92 <z_thread_abort+0x32>
 8009fac:	20000ecc 	.word	0x20000ecc

08009fb0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8009fb0:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8009fb8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8009fbc:	e9cd bc00 	strd	fp, ip, [sp]
 8009fc0:	f7ff fdda 	bl	8009b78 <z_pend_curr>

	if (data != NULL) {
 8009fc4:	b11c      	cbz	r4, 8009fce <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 8009fc6:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <z_sched_wait+0x24>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8009fce:	b003      	add	sp, #12
 8009fd0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 8009fd4:	20000ecc 	.word	0x20000ecc

08009fd8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8009fd8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8009fda:	4806      	ldr	r0, [pc, #24]	; (8009ff4 <z_data_copy+0x1c>)
 8009fdc:	4a06      	ldr	r2, [pc, #24]	; (8009ff8 <z_data_copy+0x20>)
 8009fde:	1a12      	subs	r2, r2, r0
 8009fe0:	4906      	ldr	r1, [pc, #24]	; (8009ffc <z_data_copy+0x24>)
 8009fe2:	f004 fa16 	bl	800e412 <memcpy>
 8009fe6:	4a06      	ldr	r2, [pc, #24]	; (800a000 <z_data_copy+0x28>)
 8009fe8:	4906      	ldr	r1, [pc, #24]	; (800a004 <z_data_copy+0x2c>)
 8009fea:	4807      	ldr	r0, [pc, #28]	; (800a008 <z_data_copy+0x30>)
 8009fec:	f004 fa11 	bl	800e412 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8009ff0:	bd08      	pop	{r3, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20000000 	.word	0x20000000
 8009ff8:	200004cc 	.word	0x200004cc
 8009ffc:	080107cc 	.word	0x080107cc
 800a000:	00000000 	.word	0x00000000
 800a004:	080107cc 	.word	0x080107cc
 800a008:	20000000 	.word	0x20000000

0800a00c <first>:
	return list->head == list;
 800a00c:	4b03      	ldr	r3, [pc, #12]	; (800a01c <first+0x10>)
 800a00e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a010:	4298      	cmp	r0, r3
 800a012:	d000      	beq.n	800a016 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800a014:	4770      	bx	lr
 800a016:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800a018:	e7fc      	b.n	800a014 <first+0x8>
 800a01a:	bf00      	nop
 800a01c:	200000c4 	.word	0x200000c4

0800a020 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800a020:	b130      	cbz	r0, 800a030 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <next+0x14>)
 800a024:	6852      	ldr	r2, [r2, #4]
 800a026:	4290      	cmp	r0, r2
 800a028:	d001      	beq.n	800a02e <next+0xe>
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	4770      	bx	lr
 800a02e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	200000c4 	.word	0x200000c4

0800a038 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800a038:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800a03a:	4b04      	ldr	r3, [pc, #16]	; (800a04c <elapsed+0x14>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	b10b      	cbz	r3, 800a044 <elapsed+0xc>
 800a040:	2000      	movs	r0, #0
}
 800a042:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800a044:	f7fe f922 	bl	800828c <sys_clock_elapsed>
 800a048:	e7fb      	b.n	800a042 <elapsed+0xa>
 800a04a:	bf00      	nop
 800a04c:	20000f14 	.word	0x20000f14

0800a050 <next_timeout>:

static int32_t next_timeout(void)
{
 800a050:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800a052:	f7ff ffdb 	bl	800a00c <first>
 800a056:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800a058:	f7ff ffee 	bl	800a038 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 800a05c:	b18c      	cbz	r4, 800a082 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800a05e:	6923      	ldr	r3, [r4, #16]
 800a060:	6962      	ldr	r2, [r4, #20]
 800a062:	1a1b      	subs	r3, r3, r0
 800a064:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800a068:	2b01      	cmp	r3, #1
 800a06a:	f172 0100 	sbcs.w	r1, r2, #0
 800a06e:	db11      	blt.n	800a094 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800a070:	4618      	mov	r0, r3
 800a072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a076:	f172 0300 	sbcs.w	r3, r2, #0
 800a07a:	db04      	blt.n	800a086 <next_timeout+0x36>
 800a07c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a080:	e001      	b.n	800a086 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 800a082:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800a086:	4b04      	ldr	r3, [pc, #16]	; (800a098 <next_timeout+0x48>)
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	b113      	cbz	r3, 800a092 <next_timeout+0x42>
 800a08c:	4283      	cmp	r3, r0
 800a08e:	da00      	bge.n	800a092 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 800a090:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800a092:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 800a094:	2000      	movs	r0, #0
 800a096:	e7f6      	b.n	800a086 <next_timeout+0x36>
 800a098:	20000ecc 	.word	0x20000ecc

0800a09c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800a09c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a0:	bf08      	it	eq
 800a0a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800a0a6:	d07f      	beq.n	800a1a8 <z_add_timeout+0x10c>
{
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	4691      	mov	r9, r2
 800a0b0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800a0b2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800a0b4:	2300      	movs	r3, #0
	__asm__ volatile(
 800a0b6:	f04f 0210 	mov.w	r2, #16
 800a0ba:	f3ef 8711 	mrs	r7, BASEPRI
 800a0be:	f382 8812 	msr	BASEPRI_MAX, r2
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	e021      	b.n	800a10c <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800a0c8:	f7ff ffb6 	bl	800a038 <elapsed>
 800a0cc:	eb19 0800 	adds.w	r8, r9, r0
 800a0d0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 800a0d4:	f118 0301 	adds.w	r3, r8, #1
 800a0d8:	f140 0000 	adc.w	r0, r0, #0
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	6160      	str	r0, [r4, #20]
 800a0e0:	e038      	b.n	800a154 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800a0e2:	1a51      	subs	r1, r2, r1
 800a0e4:	eb66 0303 	sbc.w	r3, r6, r3
 800a0e8:	6101      	str	r1, [r0, #16]
 800a0ea:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800a0ec:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800a0ee:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800a0f0:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800a0f2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800a0f4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d040      	beq.n	800a17c <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800a0fa:	f7ff ff87 	bl	800a00c <first>
 800a0fe:	4284      	cmp	r4, r0
 800a100:	d043      	beq.n	800a18a <z_add_timeout+0xee>
	__asm__ volatile(
 800a102:	f387 8811 	msr	BASEPRI, r7
 800a106:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800a10a:	2301      	movs	r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d149      	bne.n	800a1a4 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800a110:	f06f 0201 	mvn.w	r2, #1
 800a114:	ebb2 0209 	subs.w	r2, r2, r9
 800a118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a11c:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800a120:	2b00      	cmp	r3, #0
 800a122:	dbd1      	blt.n	800a0c8 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <z_add_timeout+0x110>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	eb19 0202 	adds.w	r2, r9, r2
 800a12e:	eb43 0305 	adc.w	r3, r3, r5
 800a132:	f06f 0801 	mvn.w	r8, #1
 800a136:	ebb8 0802 	subs.w	r8, r8, r2
 800a13a:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 800a13e:	4641      	mov	r1, r8
 800a140:	461a      	mov	r2, r3
 800a142:	f1b8 0f01 	cmp.w	r8, #1
 800a146:	f173 0300 	sbcs.w	r3, r3, #0
 800a14a:	da01      	bge.n	800a150 <z_add_timeout+0xb4>
 800a14c:	2101      	movs	r1, #1
 800a14e:	2200      	movs	r2, #0
 800a150:	6121      	str	r1, [r4, #16]
 800a152:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800a154:	f7ff ff5a 	bl	800a00c <first>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0cc      	beq.n	800a0f6 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800a15c:	6902      	ldr	r2, [r0, #16]
 800a15e:	6946      	ldr	r6, [r0, #20]
 800a160:	6921      	ldr	r1, [r4, #16]
 800a162:	6963      	ldr	r3, [r4, #20]
 800a164:	4291      	cmp	r1, r2
 800a166:	eb73 0c06 	sbcs.w	ip, r3, r6
 800a16a:	dbba      	blt.n	800a0e2 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800a16c:	1a89      	subs	r1, r1, r2
 800a16e:	eb63 0306 	sbc.w	r3, r3, r6
 800a172:	6121      	str	r1, [r4, #16]
 800a174:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800a176:	f7ff ff53 	bl	800a020 <next>
 800a17a:	e7ed      	b.n	800a158 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 800a17c:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <z_add_timeout+0x114>)
 800a17e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800a180:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800a182:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800a184:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800a186:	605c      	str	r4, [r3, #4]
}
 800a188:	e7b7      	b.n	800a0fa <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800a18a:	f7ff ff61 	bl	800a050 <next_timeout>

			if (next_time == 0 ||
 800a18e:	4603      	mov	r3, r0
 800a190:	b118      	cbz	r0, 800a19a <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 800a192:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <z_add_timeout+0x118>)
 800a194:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800a196:	4282      	cmp	r2, r0
 800a198:	d0b3      	beq.n	800a102 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fff5 	bl	800818c <sys_clock_set_timeout>
 800a1a2:	e7ae      	b.n	800a102 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800a1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20000840 	.word	0x20000840
 800a1b0:	200000c4 	.word	0x200000c4
 800a1b4:	20000ecc 	.word	0x20000ecc

0800a1b8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800a1bc:	f7ff fc0c 	bl	80099d8 <z_time_slice>
	__asm__ volatile(
 800a1c0:	f04f 0310 	mov.w	r3, #16
 800a1c4:	f3ef 8511 	mrs	r5, BASEPRI
 800a1c8:	f383 8812 	msr	BASEPRI_MAX, r3
 800a1cc:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800a1d0:	4b28      	ldr	r3, [pc, #160]	; (800a274 <sys_clock_announce+0xbc>)
 800a1d2:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800a1d4:	e020      	b.n	800a218 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800a1d6:	4828      	ldr	r0, [pc, #160]	; (800a278 <sys_clock_announce+0xc0>)
 800a1d8:	6801      	ldr	r1, [r0, #0]
 800a1da:	6846      	ldr	r6, [r0, #4]
 800a1dc:	1889      	adds	r1, r1, r2
 800a1de:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800a1e2:	6001      	str	r1, [r0, #0]
 800a1e4:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	4a22      	ldr	r2, [pc, #136]	; (800a274 <sys_clock_announce+0xbc>)
 800a1ea:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f003 ffbe 	bl	800e176 <remove_timeout>
	__asm__ volatile(
 800a1fa:	f385 8811 	msr	BASEPRI, r5
 800a1fe:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	4620      	mov	r0, r4
 800a206:	4798      	blx	r3
	__asm__ volatile(
 800a208:	f04f 0310 	mov.w	r3, #16
 800a20c:	f3ef 8511 	mrs	r5, BASEPRI
 800a210:	f383 8812 	msr	BASEPRI_MAX, r3
 800a214:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800a218:	f7ff fef8 	bl	800a00c <first>
 800a21c:	4604      	mov	r4, r0
 800a21e:	b140      	cbz	r0, 800a232 <sys_clock_announce+0x7a>
 800a220:	6902      	ldr	r2, [r0, #16]
 800a222:	6941      	ldr	r1, [r0, #20]
 800a224:	4b13      	ldr	r3, [pc, #76]	; (800a274 <sys_clock_announce+0xbc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	17d8      	asrs	r0, r3, #31
 800a22a:	4293      	cmp	r3, r2
 800a22c:	eb70 0101 	sbcs.w	r1, r0, r1
 800a230:	dad1      	bge.n	800a1d6 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800a232:	b144      	cbz	r4, 800a246 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800a234:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <sys_clock_announce+0xbc>)
 800a236:	6819      	ldr	r1, [r3, #0]
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	6962      	ldr	r2, [r4, #20]
 800a23c:	1a5b      	subs	r3, r3, r1
 800a23e:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800a246:	4a0c      	ldr	r2, [pc, #48]	; (800a278 <sys_clock_announce+0xc0>)
 800a248:	4e0a      	ldr	r6, [pc, #40]	; (800a274 <sys_clock_announce+0xbc>)
 800a24a:	6830      	ldr	r0, [r6, #0]
 800a24c:	6813      	ldr	r3, [r2, #0]
 800a24e:	6851      	ldr	r1, [r2, #4]
 800a250:	181b      	adds	r3, r3, r0
 800a252:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800a25a:	2400      	movs	r4, #0
 800a25c:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800a25e:	f7ff fef7 	bl	800a050 <next_timeout>
 800a262:	4621      	mov	r1, r4
 800a264:	f7fd ff92 	bl	800818c <sys_clock_set_timeout>
	__asm__ volatile(
 800a268:	f385 8811 	msr	BASEPRI, r5
 800a26c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	bf00      	nop
 800a274:	20000f14 	.word	0x20000f14
 800a278:	20000840 	.word	0x20000840

0800a27c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800a27c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800a27e:	2300      	movs	r3, #0
	__asm__ volatile(
 800a280:	f04f 0210 	mov.w	r2, #16
 800a284:	f3ef 8411 	mrs	r4, BASEPRI
 800a288:	f382 8812 	msr	BASEPRI_MAX, r2
 800a28c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800a290:	4618      	mov	r0, r3
 800a292:	4619      	mov	r1, r3
 800a294:	e00c      	b.n	800a2b0 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800a296:	f7fd fff9 	bl	800828c <sys_clock_elapsed>
 800a29a:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <sys_clock_tick_get+0x3c>)
 800a29c:	6813      	ldr	r3, [r2, #0]
 800a29e:	6851      	ldr	r1, [r2, #4]
 800a2a0:	18c0      	adds	r0, r0, r3
 800a2a2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800a2a6:	f384 8811 	msr	BASEPRI, r4
 800a2aa:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0f0      	beq.n	800a296 <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000840 	.word	0x20000840

0800a2bc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800a2bc:	b900      	cbnz	r0, 800a2c0 <z_impl_k_busy_wait+0x4>
 800a2be:	4770      	bx	lr
{
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800a2c4:	f7fe f802 	bl	80082cc <sys_clock_cycle_get_32>
 800a2c8:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800a2ca:	4907      	ldr	r1, [pc, #28]	; (800a2e8 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800a2cc:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <z_impl_k_busy_wait+0x30>)
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	fba4 0101 	umull	r0, r1, r4, r1
 800a2d4:	f7f6 fb82 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800a2d8:	4604      	mov	r4, r0
 800a2da:	f7fd fff7 	bl	80082cc <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800a2de:	1b40      	subs	r0, r0, r5
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	d3fa      	bcc.n	800a2da <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	bf00      	nop
 800a2e8:	04c4b400 	.word	0x04c4b400
 800a2ec:	000f4240 	.word	0x000f4240

0800a2f0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4604      	mov	r4, r0
	__asm__ volatile(
 800a2f4:	f04f 0310 	mov.w	r3, #16
 800a2f8:	f3ef 8511 	mrs	r5, BASEPRI
 800a2fc:	f383 8812 	msr	BASEPRI_MAX, r3
 800a300:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800a304:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a306:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a308:	ea52 0103 	orrs.w	r1, r2, r3
 800a30c:	d005      	beq.n	800a31a <z_timer_expiration_handler+0x2a>
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a312:	bf08      	it	eq
 800a314:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800a318:	d119      	bne.n	800a34e <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800a31a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a31c:	3301      	adds	r3, #1
 800a31e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800a320:	6a23      	ldr	r3, [r4, #32]
 800a322:	b10b      	cbz	r3, 800a328 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 800a324:	4620      	mov	r0, r4
 800a326:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800a328:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800a32c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a32e:	42a3      	cmp	r3, r4
 800a330:	d013      	beq.n	800a35a <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800a332:	b194      	cbz	r4, 800a35a <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800a334:	4620      	mov	r0, r4
 800a336:	f003 fd54 	bl	800dde2 <z_unpend_thread_no_timeout>
 800a33a:	2300      	movs	r3, #0
 800a33c:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800a33e:	f385 8811 	msr	BASEPRI, r5
 800a342:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800a346:	4620      	mov	r0, r4
 800a348:	f003 fdb3 	bl	800deb2 <z_ready_thread>
}
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800a34e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800a352:	4904      	ldr	r1, [pc, #16]	; (800a364 <z_timer_expiration_handler+0x74>)
 800a354:	f7ff fea2 	bl	800a09c <z_add_timeout>
 800a358:	e7df      	b.n	800a31a <z_timer_expiration_handler+0x2a>
 800a35a:	f385 8811 	msr	BASEPRI, r5
 800a35e:	f3bf 8f6f 	isb	sy
		return;
 800a362:	e7f3      	b.n	800a34c <z_timer_expiration_handler+0x5c>
 800a364:	0800a2f1 	.word	0x0800a2f1

0800a368 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	461d      	mov	r5, r3
 800a36e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a372:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a378:	bf08      	it	eq
 800a37a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800a37e:	d02f      	beq.n	800a3e0 <z_impl_k_timer_start+0x78>
 800a380:	4604      	mov	r4, r0
 800a382:	4616      	mov	r6, r2
 800a384:	4613      	mov	r3, r2
 800a386:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800a388:	4642      	mov	r2, r8
 800a38a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800a38e:	bf08      	it	eq
 800a390:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 800a394:	d00d      	beq.n	800a3b2 <z_impl_k_timer_start+0x4a>
 800a396:	ea58 0c07 	orrs.w	ip, r8, r7
 800a39a:	d00a      	beq.n	800a3b2 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 800a39c:	f06f 0c01 	mvn.w	ip, #1
 800a3a0:	ebbc 0c08 	subs.w	ip, ip, r8
 800a3a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a3a8:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800a3ac:	f1bc 0f00 	cmp.w	ip, #0
 800a3b0:	db18      	blt.n	800a3e4 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800a3b2:	f06f 0201 	mvn.w	r2, #1
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3bc:	eb62 0201 	sbc.w	r2, r2, r1
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	db1c      	blt.n	800a3fe <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f003 ff0b 	bl	800e1e0 <z_abort_timeout>
	timer->period = period;
 800a3ca:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 800a3ce:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	490d      	ldr	r1, [pc, #52]	; (800a410 <z_impl_k_timer_start+0xa8>)
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7ff fe5e 	bl	800a09c <z_add_timeout>
		     duration);
}
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800a3e4:	3a01      	subs	r2, #1
 800a3e6:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 800a3ea:	4690      	mov	r8, r2
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	2a01      	cmp	r2, #1
 800a3f0:	f170 0200 	sbcs.w	r2, r0, #0
 800a3f4:	dadd      	bge.n	800a3b2 <z_impl_k_timer_start+0x4a>
 800a3f6:	f04f 0801 	mov.w	r8, #1
 800a3fa:	2700      	movs	r7, #0
 800a3fc:	e7d9      	b.n	800a3b2 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800a3fe:	1e5e      	subs	r6, r3, #1
 800a400:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800a404:	460d      	mov	r5, r1
 800a406:	2900      	cmp	r1, #0
 800a408:	dadc      	bge.n	800a3c4 <z_impl_k_timer_start+0x5c>
 800a40a:	2600      	movs	r6, #0
 800a40c:	4635      	mov	r5, r6
 800a40e:	e7d9      	b.n	800a3c4 <z_impl_k_timer_start+0x5c>
 800a410:	0800a2f1 	.word	0x0800a2f1

0800a414 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	b087      	sub	sp, #28
 800a41a:	4682      	mov	sl, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	4693      	mov	fp, r2
 800a420:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800a422:	2500      	movs	r5, #0
	int events_registered = 0;
 800a424:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800a426:	e02f      	b.n	800a488 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	b1cb      	cbz	r3, 800a462 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800a42e:	f04f 0902 	mov.w	r9, #2
			return true;
 800a432:	2301      	movs	r3, #1
 800a434:	e015      	b.n	800a462 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800a436:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	b193      	cbz	r3, 800a462 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800a43c:	f04f 0904 	mov.w	r9, #4
			return true;
 800a440:	2301      	movs	r3, #1
 800a442:	e00e      	b.n	800a462 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800a444:	6923      	ldr	r3, [r4, #16]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	b15b      	cbz	r3, 800a462 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800a44a:	f04f 0901 	mov.w	r9, #1
			return true;
 800a44e:	464b      	mov	r3, r9
 800a450:	e007      	b.n	800a462 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	b123      	cbz	r3, 800a462 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800a458:	f04f 0910 	mov.w	r9, #16
			return true;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e000      	b.n	800a462 <register_events+0x4e>
	switch (event->type) {
 800a460:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800a462:	2b00      	cmp	r3, #0
 800a464:	d03a      	beq.n	800a4dc <register_events+0xc8>
	event->poller = NULL;
 800a466:	2100      	movs	r1, #0
 800a468:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800a470:	ea49 0202 	orr.w	r2, r9, r2
 800a474:	f362 3352 	bfi	r3, r2, #13, #6
 800a478:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800a47a:	f88b 1000 	strb.w	r1, [fp]
 800a47e:	f386 8811 	msr	BASEPRI, r6
 800a482:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800a486:	3501      	adds	r5, #1
 800a488:	42bd      	cmp	r5, r7
 800a48a:	f280 81b9 	bge.w	800a800 <register_events+0x3ec>
	__asm__ volatile(
 800a48e:	f04f 0310 	mov.w	r3, #16
 800a492:	f3ef 8611 	mrs	r6, BASEPRI
 800a496:	f383 8812 	msr	BASEPRI_MAX, r3
 800a49a:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800a49e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800a4a2:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800a4a6:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800a4aa:	7b63      	ldrb	r3, [r4, #13]
 800a4ac:	f003 031f 	and.w	r3, r3, #31
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	2b07      	cmp	r3, #7
 800a4b4:	d8d4      	bhi.n	800a460 <register_events+0x4c>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <register_events+0xa8>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a445 	.word	0x0800a445
 800a4c0:	0800a429 	.word	0x0800a429
 800a4c4:	0800a461 	.word	0x0800a461
 800a4c8:	0800a437 	.word	0x0800a437
 800a4cc:	0800a461 	.word	0x0800a461
 800a4d0:	0800a461 	.word	0x0800a461
 800a4d4:	0800a461 	.word	0x0800a461
 800a4d8:	0800a453 	.word	0x0800a453
		} else if (!just_check && poller->is_polling) {
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1cd      	bne.n	800a47e <register_events+0x6a>
 800a4e2:	f89b 3000 	ldrb.w	r3, [fp]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0c9      	beq.n	800a47e <register_events+0x6a>
	switch (event->type) {
 800a4ea:	7b63      	ldrb	r3, [r4, #13]
 800a4ec:	f003 031f 	and.w	r3, r3, #31
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	2b07      	cmp	r3, #7
 800a4f4:	d848      	bhi.n	800a588 <register_events+0x174>
 800a4f6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a4fa:	00cb      	.short	0x00cb
 800a4fc:	00470008 	.word	0x00470008
 800a500:	0047006d 	.word	0x0047006d
 800a504:	00470047 	.word	0x00470047
 800a508:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	f103 0210 	add.w	r2, r3, #16
 800a512:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800a514:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800a516:	429a      	cmp	r2, r3
 800a518:	d02f      	beq.n	800a57a <register_events+0x166>
 800a51a:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d02c      	beq.n	800a57a <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800a520:	6898      	ldr	r0, [r3, #8]
 800a522:	f003 feee 	bl	800e302 <poller_thread>
 800a526:	9005      	str	r0, [sp, #20]
 800a528:	4658      	mov	r0, fp
 800a52a:	f003 feea 	bl	800e302 <poller_thread>
 800a52e:	4601      	mov	r1, r0
 800a530:	9003      	str	r0, [sp, #12]
 800a532:	9805      	ldr	r0, [sp, #20]
 800a534:	f003 fc4b 	bl	800ddce <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc1e      	bgt.n	800a57a <register_events+0x166>
	return list->head == list;
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a540:	9a02      	ldr	r2, [sp, #8]
 800a542:	429a      	cmp	r2, r3
 800a544:	d030      	beq.n	800a5a8 <register_events+0x194>
 800a546:	9404      	str	r4, [sp, #16]
 800a548:	9505      	str	r5, [sp, #20]
 800a54a:	9d02      	ldr	r5, [sp, #8]
 800a54c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a54e:	2c00      	cmp	r4, #0
 800a550:	d030      	beq.n	800a5b4 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800a552:	68a0      	ldr	r0, [r4, #8]
 800a554:	f003 fed5 	bl	800e302 <poller_thread>
 800a558:	4601      	mov	r1, r0
 800a55a:	9803      	ldr	r0, [sp, #12]
 800a55c:	f003 fc37 	bl	800ddce <z_sched_prio_cmp>
 800a560:	2800      	cmp	r0, #0
 800a562:	dc17      	bgt.n	800a594 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800a564:	2c00      	cmp	r4, #0
 800a566:	d028      	beq.n	800a5ba <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800a568:	686b      	ldr	r3, [r5, #4]
 800a56a:	429c      	cmp	r4, r3
 800a56c:	d02f      	beq.n	800a5ce <register_events+0x1ba>
 800a56e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a570:	2c00      	cmp	r4, #0
 800a572:	d1ec      	bne.n	800a54e <register_events+0x13a>
 800a574:	9c04      	ldr	r4, [sp, #16]
 800a576:	9d05      	ldr	r5, [sp, #20]
 800a578:	e021      	b.n	800a5be <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800a57a:	9a02      	ldr	r2, [sp, #8]
 800a57c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a57e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a582:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a584:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a586:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800a588:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	3301      	adds	r3, #1
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	e774      	b.n	800a47e <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800a594:	9d05      	ldr	r5, [sp, #20]
 800a596:	4622      	mov	r2, r4
 800a598:	9c04      	ldr	r4, [sp, #16]
 800a59a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800a59c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800a59e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800a5a2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800a5a4:	6054      	str	r4, [r2, #4]
			return;
 800a5a6:	e7ef      	b.n	800a588 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	9404      	str	r4, [sp, #16]
 800a5ac:	9505      	str	r5, [sp, #20]
 800a5ae:	9d02      	ldr	r5, [sp, #8]
 800a5b0:	461c      	mov	r4, r3
 800a5b2:	e7cc      	b.n	800a54e <register_events+0x13a>
 800a5b4:	9c04      	ldr	r4, [sp, #16]
 800a5b6:	9d05      	ldr	r5, [sp, #20]
 800a5b8:	e001      	b.n	800a5be <register_events+0x1aa>
 800a5ba:	9c04      	ldr	r4, [sp, #16]
 800a5bc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800a5be:	9a02      	ldr	r2, [sp, #8]
 800a5c0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a5c2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a5c6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a5c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a5ca:	6054      	str	r4, [r2, #4]
}
 800a5cc:	e7dc      	b.n	800a588 <register_events+0x174>
 800a5ce:	9c04      	ldr	r4, [sp, #16]
 800a5d0:	9d05      	ldr	r5, [sp, #20]
 800a5d2:	e7f4      	b.n	800a5be <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	9304      	str	r3, [sp, #16]
 800a5d8:	f103 0214 	add.w	r2, r3, #20
 800a5dc:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800a5de:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d02d      	beq.n	800a640 <register_events+0x22c>
 800a5e4:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800a5e6:	b35b      	cbz	r3, 800a640 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800a5e8:	6898      	ldr	r0, [r3, #8]
 800a5ea:	f003 fe8a 	bl	800e302 <poller_thread>
 800a5ee:	9005      	str	r0, [sp, #20]
 800a5f0:	4658      	mov	r0, fp
 800a5f2:	f003 fe86 	bl	800e302 <poller_thread>
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	9003      	str	r0, [sp, #12]
 800a5fa:	9805      	ldr	r0, [sp, #20]
 800a5fc:	f003 fbe7 	bl	800ddce <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800a600:	2800      	cmp	r0, #0
 800a602:	dc1d      	bgt.n	800a640 <register_events+0x22c>
	return list->head == list;
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a608:	9a02      	ldr	r2, [sp, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d02a      	beq.n	800a664 <register_events+0x250>
 800a60e:	9404      	str	r4, [sp, #16]
 800a610:	9505      	str	r5, [sp, #20]
 800a612:	9d02      	ldr	r5, [sp, #8]
 800a614:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a616:	2c00      	cmp	r4, #0
 800a618:	d02a      	beq.n	800a670 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800a61a:	68a0      	ldr	r0, [r4, #8]
 800a61c:	f003 fe71 	bl	800e302 <poller_thread>
 800a620:	4601      	mov	r1, r0
 800a622:	9803      	ldr	r0, [sp, #12]
 800a624:	f003 fbd3 	bl	800ddce <z_sched_prio_cmp>
 800a628:	2800      	cmp	r0, #0
 800a62a:	dc11      	bgt.n	800a650 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800a62c:	b31c      	cbz	r4, 800a676 <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800a62e:	686b      	ldr	r3, [r5, #4]
 800a630:	429c      	cmp	r4, r3
 800a632:	d02a      	beq.n	800a68a <register_events+0x276>
 800a634:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a636:	2c00      	cmp	r4, #0
 800a638:	d1ed      	bne.n	800a616 <register_events+0x202>
 800a63a:	9c04      	ldr	r4, [sp, #16]
 800a63c:	9d05      	ldr	r5, [sp, #20]
 800a63e:	e01c      	b.n	800a67a <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800a640:	9a02      	ldr	r2, [sp, #8]
 800a642:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a644:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a648:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a64a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a64c:	6054      	str	r4, [r2, #4]
		return;
 800a64e:	e79b      	b.n	800a588 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800a650:	9d05      	ldr	r5, [sp, #20]
 800a652:	4622      	mov	r2, r4
 800a654:	9c04      	ldr	r4, [sp, #16]
 800a656:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800a658:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800a65a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800a65e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800a660:	6054      	str	r4, [r2, #4]
			return;
 800a662:	e791      	b.n	800a588 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a664:	2300      	movs	r3, #0
 800a666:	9404      	str	r4, [sp, #16]
 800a668:	9505      	str	r5, [sp, #20]
 800a66a:	9d02      	ldr	r5, [sp, #8]
 800a66c:	461c      	mov	r4, r3
 800a66e:	e7d2      	b.n	800a616 <register_events+0x202>
 800a670:	9c04      	ldr	r4, [sp, #16]
 800a672:	9d05      	ldr	r5, [sp, #20]
 800a674:	e001      	b.n	800a67a <register_events+0x266>
 800a676:	9c04      	ldr	r4, [sp, #16]
 800a678:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800a67a:	9a02      	ldr	r2, [sp, #8]
 800a67c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a67e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a682:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a684:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a686:	6054      	str	r4, [r2, #4]
}
 800a688:	e77e      	b.n	800a588 <register_events+0x174>
 800a68a:	9c04      	ldr	r4, [sp, #16]
 800a68c:	9d05      	ldr	r5, [sp, #20]
 800a68e:	e7f4      	b.n	800a67a <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800a694:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800a696:	429a      	cmp	r2, r3
 800a698:	d02c      	beq.n	800a6f4 <register_events+0x2e0>
 800a69a:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800a69c:	b353      	cbz	r3, 800a6f4 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800a69e:	6898      	ldr	r0, [r3, #8]
 800a6a0:	f003 fe2f 	bl	800e302 <poller_thread>
 800a6a4:	9004      	str	r0, [sp, #16]
 800a6a6:	4658      	mov	r0, fp
 800a6a8:	f003 fe2b 	bl	800e302 <poller_thread>
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	9003      	str	r0, [sp, #12]
 800a6b0:	9804      	ldr	r0, [sp, #16]
 800a6b2:	f003 fb8c 	bl	800ddce <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	dc1c      	bgt.n	800a6f4 <register_events+0x2e0>
	return list->head == list;
 800a6ba:	9b02      	ldr	r3, [sp, #8]
 800a6bc:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d02a      	beq.n	800a718 <register_events+0x304>
 800a6c2:	9404      	str	r4, [sp, #16]
 800a6c4:	9505      	str	r5, [sp, #20]
 800a6c6:	9d02      	ldr	r5, [sp, #8]
 800a6c8:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a6ca:	2c00      	cmp	r4, #0
 800a6cc:	d02a      	beq.n	800a724 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800a6ce:	68a0      	ldr	r0, [r4, #8]
 800a6d0:	f003 fe17 	bl	800e302 <poller_thread>
 800a6d4:	4601      	mov	r1, r0
 800a6d6:	9803      	ldr	r0, [sp, #12]
 800a6d8:	f003 fb79 	bl	800ddce <z_sched_prio_cmp>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	dc11      	bgt.n	800a704 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800a6e0:	b31c      	cbz	r4, 800a72a <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800a6e2:	686b      	ldr	r3, [r5, #4]
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	d02a      	beq.n	800a73e <register_events+0x32a>
 800a6e8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a6ea:	2c00      	cmp	r4, #0
 800a6ec:	d1ed      	bne.n	800a6ca <register_events+0x2b6>
 800a6ee:	9c04      	ldr	r4, [sp, #16]
 800a6f0:	9d05      	ldr	r5, [sp, #20]
 800a6f2:	e01c      	b.n	800a72e <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800a6f4:	9a02      	ldr	r2, [sp, #8]
 800a6f6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a6f8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a6fc:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a6fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a700:	6054      	str	r4, [r2, #4]
		return;
 800a702:	e741      	b.n	800a588 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800a704:	9d05      	ldr	r5, [sp, #20]
 800a706:	4622      	mov	r2, r4
 800a708:	9c04      	ldr	r4, [sp, #16]
 800a70a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800a70c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800a70e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800a712:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800a714:	6054      	str	r4, [r2, #4]
			return;
 800a716:	e737      	b.n	800a588 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a718:	2300      	movs	r3, #0
 800a71a:	9404      	str	r4, [sp, #16]
 800a71c:	9505      	str	r5, [sp, #20]
 800a71e:	9d02      	ldr	r5, [sp, #8]
 800a720:	461c      	mov	r4, r3
 800a722:	e7d2      	b.n	800a6ca <register_events+0x2b6>
 800a724:	9c04      	ldr	r4, [sp, #16]
 800a726:	9d05      	ldr	r5, [sp, #20]
 800a728:	e001      	b.n	800a72e <register_events+0x31a>
 800a72a:	9c04      	ldr	r4, [sp, #16]
 800a72c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800a72e:	9a02      	ldr	r2, [sp, #8]
 800a730:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a732:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a736:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a738:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a73a:	6054      	str	r4, [r2, #4]
}
 800a73c:	e724      	b.n	800a588 <register_events+0x174>
 800a73e:	9c04      	ldr	r4, [sp, #16]
 800a740:	9d05      	ldr	r5, [sp, #20]
 800a742:	e7f4      	b.n	800a72e <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a74c:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800a750:	429a      	cmp	r2, r3
 800a752:	d02d      	beq.n	800a7b0 <register_events+0x39c>
 800a754:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800a756:	b35b      	cbz	r3, 800a7b0 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800a758:	6898      	ldr	r0, [r3, #8]
 800a75a:	f003 fdd2 	bl	800e302 <poller_thread>
 800a75e:	9005      	str	r0, [sp, #20]
 800a760:	4658      	mov	r0, fp
 800a762:	f003 fdce 	bl	800e302 <poller_thread>
 800a766:	4601      	mov	r1, r0
 800a768:	9003      	str	r0, [sp, #12]
 800a76a:	9805      	ldr	r0, [sp, #20]
 800a76c:	f003 fb2f 	bl	800ddce <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800a770:	2800      	cmp	r0, #0
 800a772:	dc1d      	bgt.n	800a7b0 <register_events+0x39c>
	return list->head == list;
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a778:	9a02      	ldr	r2, [sp, #8]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d02a      	beq.n	800a7d4 <register_events+0x3c0>
 800a77e:	9404      	str	r4, [sp, #16]
 800a780:	9505      	str	r5, [sp, #20]
 800a782:	9d02      	ldr	r5, [sp, #8]
 800a784:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a786:	2c00      	cmp	r4, #0
 800a788:	d02a      	beq.n	800a7e0 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800a78a:	68a0      	ldr	r0, [r4, #8]
 800a78c:	f003 fdb9 	bl	800e302 <poller_thread>
 800a790:	4601      	mov	r1, r0
 800a792:	9803      	ldr	r0, [sp, #12]
 800a794:	f003 fb1b 	bl	800ddce <z_sched_prio_cmp>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dc11      	bgt.n	800a7c0 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800a79c:	b31c      	cbz	r4, 800a7e6 <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800a79e:	686b      	ldr	r3, [r5, #4]
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d02a      	beq.n	800a7fa <register_events+0x3e6>
 800a7a4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a7a6:	2c00      	cmp	r4, #0
 800a7a8:	d1ed      	bne.n	800a786 <register_events+0x372>
 800a7aa:	9c04      	ldr	r4, [sp, #16]
 800a7ac:	9d05      	ldr	r5, [sp, #20]
 800a7ae:	e01c      	b.n	800a7ea <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800a7b0:	9a02      	ldr	r2, [sp, #8]
 800a7b2:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a7b4:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a7b8:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a7ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a7bc:	6054      	str	r4, [r2, #4]
		return;
 800a7be:	e6e3      	b.n	800a588 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800a7c0:	9d05      	ldr	r5, [sp, #20]
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	9c04      	ldr	r4, [sp, #16]
 800a7c6:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800a7c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800a7ca:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800a7ce:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800a7d0:	6054      	str	r4, [r2, #4]
			return;
 800a7d2:	e6d9      	b.n	800a588 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9404      	str	r4, [sp, #16]
 800a7d8:	9505      	str	r5, [sp, #20]
 800a7da:	9d02      	ldr	r5, [sp, #8]
 800a7dc:	461c      	mov	r4, r3
 800a7de:	e7d2      	b.n	800a786 <register_events+0x372>
 800a7e0:	9c04      	ldr	r4, [sp, #16]
 800a7e2:	9d05      	ldr	r5, [sp, #20]
 800a7e4:	e001      	b.n	800a7ea <register_events+0x3d6>
 800a7e6:	9c04      	ldr	r4, [sp, #16]
 800a7e8:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800a7ea:	9a02      	ldr	r2, [sp, #8]
 800a7ec:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800a7ee:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800a7f2:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800a7f4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a7f6:	6054      	str	r4, [r2, #4]
}
 800a7f8:	e6c6      	b.n	800a588 <register_events+0x174>
 800a7fa:	9c04      	ldr	r4, [sp, #16]
 800a7fc:	9d05      	ldr	r5, [sp, #20]
 800a7fe:	e7f4      	b.n	800a7ea <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800a800:	9801      	ldr	r0, [sp, #4]
 800a802:	b007      	add	sp, #28
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a808 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	4605      	mov	r5, r0
 800a810:	4690      	mov	r8, r2
 800a812:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800a814:	4b4f      	ldr	r3, [pc, #316]	; (800a954 <z_impl_k_poll+0x14c>)
 800a816:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800a818:	2301      	movs	r3, #1
 800a81a:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800a81e:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800a822:	ea57 0302 	orrs.w	r3, r7, r2
 800a826:	bf0c      	ite	eq
 800a828:	2301      	moveq	r3, #1
 800a82a:	2300      	movne	r3, #0
 800a82c:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800a830:	f7ff fdf0 	bl	800a414 <register_events>
 800a834:	4604      	mov	r4, r0
 800a836:	f04f 0310 	mov.w	r3, #16
 800a83a:	f3ef 8111 	mrs	r1, BASEPRI
 800a83e:	f383 8812 	msr	BASEPRI_MAX, r3
 800a842:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800a846:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800a84a:	b1b3      	cbz	r3, 800a87a <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800a84c:	2300      	movs	r3, #0
 800a84e:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800a852:	ea57 0308 	orrs.w	r3, r7, r8
 800a856:	d043      	beq.n	800a8e0 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800a858:	f8cd 8000 	str.w	r8, [sp]
 800a85c:	9701      	str	r7, [sp, #4]
 800a85e:	4a3e      	ldr	r2, [pc, #248]	; (800a958 <z_impl_k_poll+0x150>)
 800a860:	483e      	ldr	r0, [pc, #248]	; (800a95c <z_impl_k_poll+0x154>)
 800a862:	f7ff f989 	bl	8009b78 <z_pend_curr>
 800a866:	f04f 0310 	mov.w	r3, #16
 800a86a:	f3ef 8611 	mrs	r6, BASEPRI
 800a86e:	f383 8812 	msr	BASEPRI_MAX, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	46b4      	mov	ip, r6
	while (num_events--) {
 800a878:	e04c      	b.n	800a914 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800a87a:	460e      	mov	r6, r1
	while (num_events--) {
 800a87c:	e00c      	b.n	800a898 <z_impl_k_poll+0x90>
	__asm__ volatile(
 800a87e:	f386 8811 	msr	BASEPRI, r6
 800a882:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800a886:	f04f 0310 	mov.w	r3, #16
 800a88a:	f3ef 8611 	mrs	r6, BASEPRI
 800a88e:	f383 8812 	msr	BASEPRI_MAX, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	4604      	mov	r4, r0
 800a898:	1e60      	subs	r0, r4, #1
 800a89a:	b1dc      	cbz	r4, 800a8d4 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800a89c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800a8a0:	009f      	lsls	r7, r3, #2
 800a8a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800a8aa:	7b5a      	ldrb	r2, [r3, #13]
 800a8ac:	f002 021f 	and.w	r2, r2, #31
 800a8b0:	2a08      	cmp	r2, #8
 800a8b2:	d8e4      	bhi.n	800a87e <z_impl_k_poll+0x76>
 800a8b4:	2401      	movs	r4, #1
 800a8b6:	fa04 f202 	lsl.w	r2, r4, r2
 800a8ba:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800a8be:	d0de      	beq.n	800a87e <z_impl_k_poll+0x76>
	return node->next != NULL;
 800a8c0:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	d0db      	beq.n	800a87e <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800a8c6:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800a8c8:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800a8ca:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800a8d0:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800a8d2:	e7d4      	b.n	800a87e <z_impl_k_poll+0x76>
	__asm__ volatile(
 800a8d4:	f381 8811 	msr	BASEPRI, r1
 800a8d8:	f3bf 8f6f 	isb	sy
		return 0;
 800a8dc:	4620      	mov	r0, r4
 800a8de:	e036      	b.n	800a94e <z_impl_k_poll+0x146>
 800a8e0:	f381 8811 	msr	BASEPRI, r1
 800a8e4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800a8e8:	f06f 000a 	mvn.w	r0, #10
 800a8ec:	e02f      	b.n	800a94e <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800a8ee:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800a8f0:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800a8f2:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800a8f8:	605a      	str	r2, [r3, #4]
 800a8fa:	f38c 8811 	msr	BASEPRI, ip
 800a8fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800a902:	f04f 0310 	mov.w	r3, #16
 800a906:	f3ef 8c11 	mrs	ip, BASEPRI
 800a90a:	f383 8812 	msr	BASEPRI_MAX, r3
 800a90e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800a912:	4674      	mov	r4, lr
 800a914:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800a918:	b1ac      	cbz	r4, 800a946 <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800a91a:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800a91e:	009c      	lsls	r4, r3, #2
 800a920:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800a924:	2200      	movs	r2, #0
 800a926:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800a928:	7b5a      	ldrb	r2, [r3, #13]
 800a92a:	f002 021f 	and.w	r2, r2, #31
 800a92e:	2a08      	cmp	r2, #8
 800a930:	d8e3      	bhi.n	800a8fa <z_impl_k_poll+0xf2>
 800a932:	2101      	movs	r1, #1
 800a934:	fa01 f202 	lsl.w	r2, r1, r2
 800a938:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800a93c:	d0dd      	beq.n	800a8fa <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800a93e:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800a940:	2a00      	cmp	r2, #0
 800a942:	d1d4      	bne.n	800a8ee <z_impl_k_poll+0xe6>
 800a944:	e7d9      	b.n	800a8fa <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800a946:	f386 8811 	msr	BASEPRI, r6
 800a94a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800a94e:	b002      	add	sp, #8
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	20000ecc 	.word	0x20000ecc
 800a958:	200000cc 	.word	0x200000cc
 800a95c:	20000f18 	.word	0x20000f18

0800a960 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4603      	mov	r3, r0
	__asm__ volatile(
 800a964:	f04f 0210 	mov.w	r2, #16
 800a968:	f3ef 8511 	mrs	r5, BASEPRI
 800a96c:	f382 8812 	msr	BASEPRI_MAX, r2
 800a970:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800a974:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800a976:	2201      	movs	r2, #1
 800a978:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800a97a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800a97c:	4283      	cmp	r3, r0
 800a97e:	d011      	beq.n	800a9a4 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800a980:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800a982:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800a984:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800a986:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800a98c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800a98e:	b148      	cbz	r0, 800a9a4 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800a990:	2101      	movs	r1, #1
 800a992:	f003 fd02 	bl	800e39a <signal_poll_event>
 800a996:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800a998:	4629      	mov	r1, r5
 800a99a:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <z_impl_k_poll_signal_raise+0x50>)
 800a99c:	f7fe ff7c 	bl	8009898 <z_reschedule>
	return rc;
}
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800a9a4:	f385 8811 	msr	BASEPRI, r5
 800a9a8:	f3bf 8f6f 	isb	sy
		return 0;
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	e7f7      	b.n	800a9a0 <z_impl_k_poll_signal_raise+0x40>
 800a9b0:	20000f18 	.word	0x20000f18

0800a9b4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800a9b4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800a9b6:	4a03      	ldr	r2, [pc, #12]	; (800a9c4 <boot_banner+0x10>)
 800a9b8:	4903      	ldr	r1, [pc, #12]	; (800a9c8 <boot_banner+0x14>)
 800a9ba:	4804      	ldr	r0, [pc, #16]	; (800a9cc <boot_banner+0x18>)
 800a9bc:	f001 fc71 	bl	800c2a2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800a9c0:	bd08      	pop	{r3, pc}
 800a9c2:	bf00      	nop
 800a9c4:	08010478 	.word	0x08010478
 800a9c8:	080104a0 	.word	0x080104a0
 800a9cc:	080104b0 	.word	0x080104b0

0800a9d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800a9d0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800a9d2:	4c06      	ldr	r4, [pc, #24]	; (800a9ec <statics_init+0x1c>)
 800a9d4:	e005      	b.n	800a9e2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800a9d6:	68a2      	ldr	r2, [r4, #8]
 800a9d8:	6861      	ldr	r1, [r4, #4]
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f003 fd11 	bl	800e402 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800a9e0:	3418      	adds	r4, #24
 800a9e2:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <statics_init+0x20>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	d3f6      	bcc.n	800a9d6 <statics_init+0x6>
		}
	}
	return 0;
}
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	bd10      	pop	{r4, pc}
 800a9ec:	200003a8 	.word	0x200003a8
 800a9f0:	200003a8 	.word	0x200003a8

0800a9f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800a9f8:	4b08      	ldr	r3, [pc, #32]	; (800aa1c <k_sys_work_q_init+0x28>)
 800a9fa:	9302      	str	r3, [sp, #8]
 800a9fc:	2400      	movs	r4, #0
 800a9fe:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800aa02:	ab02      	add	r3, sp, #8
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa0e:	4904      	ldr	r1, [pc, #16]	; (800aa20 <k_sys_work_q_init+0x2c>)
 800aa10:	4804      	ldr	r0, [pc, #16]	; (800aa24 <k_sys_work_q_init+0x30>)
 800aa12:	f7fe feaf 	bl	8009774 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800aa16:	4620      	mov	r0, r4
 800aa18:	b004      	add	sp, #16
 800aa1a:	bd10      	pop	{r4, pc}
 800aa1c:	080104d8 	.word	0x080104d8
 800aa20:	20003860 	.word	0x20003860
 800aa24:	20000848 	.word	0x20000848

0800aa28 <malloc>:
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <malloc+0xc>)
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	f000 b84d 	b.w	800aacc <_malloc_r>
 800aa32:	bf00      	nop
 800aa34:	200000d4 	.word	0x200000d4

0800aa38 <_free_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	d041      	beq.n	800aac4 <_free_r+0x8c>
 800aa40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa44:	1f0c      	subs	r4, r1, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfb8      	it	lt
 800aa4a:	18e4      	addlt	r4, r4, r3
 800aa4c:	f000 fbfc 	bl	800b248 <__malloc_lock>
 800aa50:	4a1d      	ldr	r2, [pc, #116]	; (800aac8 <_free_r+0x90>)
 800aa52:	6813      	ldr	r3, [r2, #0]
 800aa54:	b933      	cbnz	r3, 800aa64 <_free_r+0x2c>
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	6014      	str	r4, [r2, #0]
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa60:	f000 bbf8 	b.w	800b254 <__malloc_unlock>
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	d908      	bls.n	800aa7a <_free_r+0x42>
 800aa68:	6820      	ldr	r0, [r4, #0]
 800aa6a:	1821      	adds	r1, r4, r0
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	bf01      	itttt	eq
 800aa70:	6819      	ldreq	r1, [r3, #0]
 800aa72:	685b      	ldreq	r3, [r3, #4]
 800aa74:	1809      	addeq	r1, r1, r0
 800aa76:	6021      	streq	r1, [r4, #0]
 800aa78:	e7ed      	b.n	800aa56 <_free_r+0x1e>
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	b10b      	cbz	r3, 800aa84 <_free_r+0x4c>
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d9fa      	bls.n	800aa7a <_free_r+0x42>
 800aa84:	6811      	ldr	r1, [r2, #0]
 800aa86:	1850      	adds	r0, r2, r1
 800aa88:	42a0      	cmp	r0, r4
 800aa8a:	d10b      	bne.n	800aaa4 <_free_r+0x6c>
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	4401      	add	r1, r0
 800aa90:	1850      	adds	r0, r2, r1
 800aa92:	4283      	cmp	r3, r0
 800aa94:	6011      	str	r1, [r2, #0]
 800aa96:	d1e0      	bne.n	800aa5a <_free_r+0x22>
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	6053      	str	r3, [r2, #4]
 800aa9e:	4401      	add	r1, r0
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	e7da      	b.n	800aa5a <_free_r+0x22>
 800aaa4:	d902      	bls.n	800aaac <_free_r+0x74>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	602b      	str	r3, [r5, #0]
 800aaaa:	e7d6      	b.n	800aa5a <_free_r+0x22>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	1821      	adds	r1, r4, r0
 800aab0:	428b      	cmp	r3, r1
 800aab2:	bf04      	itt	eq
 800aab4:	6819      	ldreq	r1, [r3, #0]
 800aab6:	685b      	ldreq	r3, [r3, #4]
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	bf04      	itt	eq
 800aabc:	1809      	addeq	r1, r1, r0
 800aabe:	6021      	streq	r1, [r4, #0]
 800aac0:	6054      	str	r4, [r2, #4]
 800aac2:	e7ca      	b.n	800aa5a <_free_r+0x22>
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	bf00      	nop
 800aac8:	20000f1c 	.word	0x20000f1c

0800aacc <_malloc_r>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	1ccd      	adds	r5, r1, #3
 800aad0:	f025 0503 	bic.w	r5, r5, #3
 800aad4:	3508      	adds	r5, #8
 800aad6:	2d0c      	cmp	r5, #12
 800aad8:	bf38      	it	cc
 800aada:	250c      	movcc	r5, #12
 800aadc:	2d00      	cmp	r5, #0
 800aade:	4606      	mov	r6, r0
 800aae0:	db01      	blt.n	800aae6 <_malloc_r+0x1a>
 800aae2:	42a9      	cmp	r1, r5
 800aae4:	d903      	bls.n	800aaee <_malloc_r+0x22>
 800aae6:	230c      	movs	r3, #12
 800aae8:	6033      	str	r3, [r6, #0]
 800aaea:	2000      	movs	r0, #0
 800aaec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaee:	f000 fbab 	bl	800b248 <__malloc_lock>
 800aaf2:	4921      	ldr	r1, [pc, #132]	; (800ab78 <_malloc_r+0xac>)
 800aaf4:	680a      	ldr	r2, [r1, #0]
 800aaf6:	4614      	mov	r4, r2
 800aaf8:	b99c      	cbnz	r4, 800ab22 <_malloc_r+0x56>
 800aafa:	4f20      	ldr	r7, [pc, #128]	; (800ab7c <_malloc_r+0xb0>)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	b923      	cbnz	r3, 800ab0a <_malloc_r+0x3e>
 800ab00:	4621      	mov	r1, r4
 800ab02:	4630      	mov	r0, r6
 800ab04:	f000 fb8c 	bl	800b220 <_sbrk_r>
 800ab08:	6038      	str	r0, [r7, #0]
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 fb87 	bl	800b220 <_sbrk_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d123      	bne.n	800ab5e <_malloc_r+0x92>
 800ab16:	230c      	movs	r3, #12
 800ab18:	6033      	str	r3, [r6, #0]
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f000 fb9a 	bl	800b254 <__malloc_unlock>
 800ab20:	e7e3      	b.n	800aaea <_malloc_r+0x1e>
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	1b5b      	subs	r3, r3, r5
 800ab26:	d417      	bmi.n	800ab58 <_malloc_r+0x8c>
 800ab28:	2b0b      	cmp	r3, #11
 800ab2a:	d903      	bls.n	800ab34 <_malloc_r+0x68>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	441c      	add	r4, r3
 800ab30:	6025      	str	r5, [r4, #0]
 800ab32:	e004      	b.n	800ab3e <_malloc_r+0x72>
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	42a2      	cmp	r2, r4
 800ab38:	bf0c      	ite	eq
 800ab3a:	600b      	streq	r3, [r1, #0]
 800ab3c:	6053      	strne	r3, [r2, #4]
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f000 fb88 	bl	800b254 <__malloc_unlock>
 800ab44:	f104 000b 	add.w	r0, r4, #11
 800ab48:	1d23      	adds	r3, r4, #4
 800ab4a:	f020 0007 	bic.w	r0, r0, #7
 800ab4e:	1ac2      	subs	r2, r0, r3
 800ab50:	d0cc      	beq.n	800aaec <_malloc_r+0x20>
 800ab52:	1a1b      	subs	r3, r3, r0
 800ab54:	50a3      	str	r3, [r4, r2]
 800ab56:	e7c9      	b.n	800aaec <_malloc_r+0x20>
 800ab58:	4622      	mov	r2, r4
 800ab5a:	6864      	ldr	r4, [r4, #4]
 800ab5c:	e7cc      	b.n	800aaf8 <_malloc_r+0x2c>
 800ab5e:	1cc4      	adds	r4, r0, #3
 800ab60:	f024 0403 	bic.w	r4, r4, #3
 800ab64:	42a0      	cmp	r0, r4
 800ab66:	d0e3      	beq.n	800ab30 <_malloc_r+0x64>
 800ab68:	1a21      	subs	r1, r4, r0
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f000 fb58 	bl	800b220 <_sbrk_r>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d1dd      	bne.n	800ab30 <_malloc_r+0x64>
 800ab74:	e7cf      	b.n	800ab16 <_malloc_r+0x4a>
 800ab76:	bf00      	nop
 800ab78:	20000f1c 	.word	0x20000f1c
 800ab7c:	20000f20 	.word	0x20000f20

0800ab80 <_printf_float>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	b091      	sub	sp, #68	; 0x44
 800ab86:	460c      	mov	r4, r1
 800ab88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ab8c:	4616      	mov	r6, r2
 800ab8e:	461f      	mov	r7, r3
 800ab90:	4605      	mov	r5, r0
 800ab92:	f000 fb55 	bl	800b240 <_localeconv_r>
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	9309      	str	r3, [sp, #36]	; 0x24
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7f6 f95b 	bl	8000e56 <strlen>
 800aba0:	2300      	movs	r3, #0
 800aba2:	930e      	str	r3, [sp, #56]	; 0x38
 800aba4:	f8d8 3000 	ldr.w	r3, [r8]
 800aba8:	900a      	str	r0, [sp, #40]	; 0x28
 800abaa:	3307      	adds	r3, #7
 800abac:	f023 0307 	bic.w	r3, r3, #7
 800abb0:	f103 0208 	add.w	r2, r3, #8
 800abb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800abb8:	f8d4 b000 	ldr.w	fp, [r4]
 800abbc:	f8c8 2000 	str.w	r2, [r8]
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800abc8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800abcc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800abd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abd4:	4b9c      	ldr	r3, [pc, #624]	; (800ae48 <_printf_float+0x2c8>)
 800abd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abda:	4640      	mov	r0, r8
 800abdc:	f7f5 ffa0 	bl	8000b20 <__aeabi_dcmpun>
 800abe0:	bb70      	cbnz	r0, 800ac40 <_printf_float+0xc0>
 800abe2:	4b99      	ldr	r3, [pc, #612]	; (800ae48 <_printf_float+0x2c8>)
 800abe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abea:	4640      	mov	r0, r8
 800abec:	f7f5 ff7a 	bl	8000ae4 <__aeabi_dcmple>
 800abf0:	bb30      	cbnz	r0, 800ac40 <_printf_float+0xc0>
 800abf2:	2200      	movs	r2, #0
 800abf4:	2300      	movs	r3, #0
 800abf6:	4640      	mov	r0, r8
 800abf8:	4651      	mov	r1, sl
 800abfa:	f7f5 ff69 	bl	8000ad0 <__aeabi_dcmplt>
 800abfe:	b110      	cbz	r0, 800ac06 <_printf_float+0x86>
 800ac00:	232d      	movs	r3, #45	; 0x2d
 800ac02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac06:	4b91      	ldr	r3, [pc, #580]	; (800ae4c <_printf_float+0x2cc>)
 800ac08:	4891      	ldr	r0, [pc, #580]	; (800ae50 <_printf_float+0x2d0>)
 800ac0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ac0e:	bf94      	ite	ls
 800ac10:	4698      	movls	r8, r3
 800ac12:	4680      	movhi	r8, r0
 800ac14:	2303      	movs	r3, #3
 800ac16:	6123      	str	r3, [r4, #16]
 800ac18:	f02b 0304 	bic.w	r3, fp, #4
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	f04f 0a00 	mov.w	sl, #0
 800ac22:	9700      	str	r7, [sp, #0]
 800ac24:	4633      	mov	r3, r6
 800ac26:	aa0f      	add	r2, sp, #60	; 0x3c
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f003 fca5 	bl	800e57a <_printf_common>
 800ac30:	3001      	adds	r0, #1
 800ac32:	f040 808f 	bne.w	800ad54 <_printf_float+0x1d4>
 800ac36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac3a:	b011      	add	sp, #68	; 0x44
 800ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac40:	4642      	mov	r2, r8
 800ac42:	4653      	mov	r3, sl
 800ac44:	4640      	mov	r0, r8
 800ac46:	4651      	mov	r1, sl
 800ac48:	f7f5 ff6a 	bl	8000b20 <__aeabi_dcmpun>
 800ac4c:	b140      	cbz	r0, 800ac60 <_printf_float+0xe0>
 800ac4e:	f1ba 0f00 	cmp.w	sl, #0
 800ac52:	bfbc      	itt	lt
 800ac54:	232d      	movlt	r3, #45	; 0x2d
 800ac56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac5a:	487e      	ldr	r0, [pc, #504]	; (800ae54 <_printf_float+0x2d4>)
 800ac5c:	4b7e      	ldr	r3, [pc, #504]	; (800ae58 <_printf_float+0x2d8>)
 800ac5e:	e7d4      	b.n	800ac0a <_printf_float+0x8a>
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ac68:	d142      	bne.n	800acf0 <_printf_float+0x170>
 800ac6a:	2306      	movs	r3, #6
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	9206      	str	r2, [sp, #24]
 800ac72:	aa0e      	add	r2, sp, #56	; 0x38
 800ac74:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ac78:	aa0d      	add	r2, sp, #52	; 0x34
 800ac7a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ac7e:	9203      	str	r2, [sp, #12]
 800ac80:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ac84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	4642      	mov	r2, r8
 800ac90:	4653      	mov	r3, sl
 800ac92:	4628      	mov	r0, r5
 800ac94:	910b      	str	r1, [sp, #44]	; 0x2c
 800ac96:	f003 fbd2 	bl	800e43e <__cvt>
 800ac9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac9c:	2947      	cmp	r1, #71	; 0x47
 800ac9e:	4680      	mov	r8, r0
 800aca0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aca2:	d108      	bne.n	800acb6 <_printf_float+0x136>
 800aca4:	1cc8      	adds	r0, r1, #3
 800aca6:	db02      	blt.n	800acae <_printf_float+0x12e>
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	4299      	cmp	r1, r3
 800acac:	dd40      	ble.n	800ad30 <_printf_float+0x1b0>
 800acae:	f1a9 0902 	sub.w	r9, r9, #2
 800acb2:	fa5f f989 	uxtb.w	r9, r9
 800acb6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acba:	d81f      	bhi.n	800acfc <_printf_float+0x17c>
 800acbc:	3901      	subs	r1, #1
 800acbe:	464a      	mov	r2, r9
 800acc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800acc4:	910d      	str	r1, [sp, #52]	; 0x34
 800acc6:	f003 fc1a 	bl	800e4fe <__exponent>
 800acca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800accc:	1813      	adds	r3, r2, r0
 800acce:	2a01      	cmp	r2, #1
 800acd0:	4682      	mov	sl, r0
 800acd2:	6123      	str	r3, [r4, #16]
 800acd4:	dc02      	bgt.n	800acdc <_printf_float+0x15c>
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	07d2      	lsls	r2, r2, #31
 800acda:	d501      	bpl.n	800ace0 <_printf_float+0x160>
 800acdc:	3301      	adds	r3, #1
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d09c      	beq.n	800ac22 <_printf_float+0xa2>
 800ace8:	232d      	movs	r3, #45	; 0x2d
 800acea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acee:	e798      	b.n	800ac22 <_printf_float+0xa2>
 800acf0:	2947      	cmp	r1, #71	; 0x47
 800acf2:	d1bc      	bne.n	800ac6e <_printf_float+0xee>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1ba      	bne.n	800ac6e <_printf_float+0xee>
 800acf8:	2301      	movs	r3, #1
 800acfa:	e7b7      	b.n	800ac6c <_printf_float+0xec>
 800acfc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ad00:	d118      	bne.n	800ad34 <_printf_float+0x1b4>
 800ad02:	2900      	cmp	r1, #0
 800ad04:	6863      	ldr	r3, [r4, #4]
 800ad06:	dd0b      	ble.n	800ad20 <_printf_float+0x1a0>
 800ad08:	6121      	str	r1, [r4, #16]
 800ad0a:	b913      	cbnz	r3, 800ad12 <_printf_float+0x192>
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	07d0      	lsls	r0, r2, #31
 800ad10:	d502      	bpl.n	800ad18 <_printf_float+0x198>
 800ad12:	3301      	adds	r3, #1
 800ad14:	440b      	add	r3, r1
 800ad16:	6123      	str	r3, [r4, #16]
 800ad18:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad1a:	f04f 0a00 	mov.w	sl, #0
 800ad1e:	e7df      	b.n	800ace0 <_printf_float+0x160>
 800ad20:	b913      	cbnz	r3, 800ad28 <_printf_float+0x1a8>
 800ad22:	6822      	ldr	r2, [r4, #0]
 800ad24:	07d2      	lsls	r2, r2, #31
 800ad26:	d501      	bpl.n	800ad2c <_printf_float+0x1ac>
 800ad28:	3302      	adds	r3, #2
 800ad2a:	e7f4      	b.n	800ad16 <_printf_float+0x196>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f2      	b.n	800ad16 <_printf_float+0x196>
 800ad30:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ad34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad36:	4299      	cmp	r1, r3
 800ad38:	db05      	blt.n	800ad46 <_printf_float+0x1c6>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	6121      	str	r1, [r4, #16]
 800ad3e:	07d8      	lsls	r0, r3, #31
 800ad40:	d5ea      	bpl.n	800ad18 <_printf_float+0x198>
 800ad42:	1c4b      	adds	r3, r1, #1
 800ad44:	e7e7      	b.n	800ad16 <_printf_float+0x196>
 800ad46:	2900      	cmp	r1, #0
 800ad48:	bfd4      	ite	le
 800ad4a:	f1c1 0202 	rsble	r2, r1, #2
 800ad4e:	2201      	movgt	r2, #1
 800ad50:	4413      	add	r3, r2
 800ad52:	e7e0      	b.n	800ad16 <_printf_float+0x196>
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	055a      	lsls	r2, r3, #21
 800ad58:	d407      	bmi.n	800ad6a <_printf_float+0x1ea>
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b8      	blx	r7
 800ad64:	3001      	adds	r0, #1
 800ad66:	d12b      	bne.n	800adc0 <_printf_float+0x240>
 800ad68:	e765      	b.n	800ac36 <_printf_float+0xb6>
 800ad6a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad6e:	f240 80dc 	bls.w	800af2a <_printf_float+0x3aa>
 800ad72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad76:	2200      	movs	r2, #0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f7f5 fe9f 	bl	8000abc <__aeabi_dcmpeq>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d033      	beq.n	800adea <_printf_float+0x26a>
 800ad82:	4a36      	ldr	r2, [pc, #216]	; (800ae5c <_printf_float+0x2dc>)
 800ad84:	2301      	movs	r3, #1
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f af52 	beq.w	800ac36 <_printf_float+0xb6>
 800ad92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad96:	429a      	cmp	r2, r3
 800ad98:	db02      	blt.n	800ada0 <_printf_float+0x220>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07d8      	lsls	r0, r3, #31
 800ad9e:	d50f      	bpl.n	800adc0 <_printf_float+0x240>
 800ada0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	f43f af43 	beq.w	800ac36 <_printf_float+0xb6>
 800adb0:	f04f 0800 	mov.w	r8, #0
 800adb4:	f104 091a 	add.w	r9, r4, #26
 800adb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adba:	3b01      	subs	r3, #1
 800adbc:	4543      	cmp	r3, r8
 800adbe:	dc09      	bgt.n	800add4 <_printf_float+0x254>
 800adc0:	6823      	ldr	r3, [r4, #0]
 800adc2:	079b      	lsls	r3, r3, #30
 800adc4:	f100 8101 	bmi.w	800afca <_printf_float+0x44a>
 800adc8:	68e0      	ldr	r0, [r4, #12]
 800adca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adcc:	4298      	cmp	r0, r3
 800adce:	bfb8      	it	lt
 800add0:	4618      	movlt	r0, r3
 800add2:	e732      	b.n	800ac3a <_printf_float+0xba>
 800add4:	2301      	movs	r3, #1
 800add6:	464a      	mov	r2, r9
 800add8:	4631      	mov	r1, r6
 800adda:	4628      	mov	r0, r5
 800addc:	47b8      	blx	r7
 800adde:	3001      	adds	r0, #1
 800ade0:	f43f af29 	beq.w	800ac36 <_printf_float+0xb6>
 800ade4:	f108 0801 	add.w	r8, r8, #1
 800ade8:	e7e6      	b.n	800adb8 <_printf_float+0x238>
 800adea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	dc37      	bgt.n	800ae60 <_printf_float+0x2e0>
 800adf0:	4a1a      	ldr	r2, [pc, #104]	; (800ae5c <_printf_float+0x2dc>)
 800adf2:	2301      	movs	r3, #1
 800adf4:	4631      	mov	r1, r6
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f af1b 	beq.w	800ac36 <_printf_float+0xb6>
 800ae00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae04:	4313      	orrs	r3, r2
 800ae06:	d102      	bne.n	800ae0e <_printf_float+0x28e>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	07d9      	lsls	r1, r3, #31
 800ae0c:	d5d8      	bpl.n	800adc0 <_printf_float+0x240>
 800ae0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f af0c 	beq.w	800ac36 <_printf_float+0xb6>
 800ae1e:	f04f 0900 	mov.w	r9, #0
 800ae22:	f104 0a1a 	add.w	sl, r4, #26
 800ae26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae28:	425b      	negs	r3, r3
 800ae2a:	454b      	cmp	r3, r9
 800ae2c:	dc01      	bgt.n	800ae32 <_printf_float+0x2b2>
 800ae2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae30:	e794      	b.n	800ad5c <_printf_float+0x1dc>
 800ae32:	2301      	movs	r3, #1
 800ae34:	4652      	mov	r2, sl
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f aefa 	beq.w	800ac36 <_printf_float+0xb6>
 800ae42:	f109 0901 	add.w	r9, r9, #1
 800ae46:	e7ee      	b.n	800ae26 <_printf_float+0x2a6>
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	08010655 	.word	0x08010655
 800ae50:	08010659 	.word	0x08010659
 800ae54:	08010661 	.word	0x08010661
 800ae58:	0801065d 	.word	0x0801065d
 800ae5c:	08010665 	.word	0x08010665
 800ae60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae64:	429a      	cmp	r2, r3
 800ae66:	bfa8      	it	ge
 800ae68:	461a      	movge	r2, r3
 800ae6a:	2a00      	cmp	r2, #0
 800ae6c:	4691      	mov	r9, r2
 800ae6e:	dc37      	bgt.n	800aee0 <_printf_float+0x360>
 800ae70:	f04f 0b00 	mov.w	fp, #0
 800ae74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae78:	f104 021a 	add.w	r2, r4, #26
 800ae7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ae80:	ebaa 0309 	sub.w	r3, sl, r9
 800ae84:	455b      	cmp	r3, fp
 800ae86:	dc33      	bgt.n	800aef0 <_printf_float+0x370>
 800ae88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	db3b      	blt.n	800af08 <_printf_float+0x388>
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	07da      	lsls	r2, r3, #31
 800ae94:	d438      	bmi.n	800af08 <_printf_float+0x388>
 800ae96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae9a:	eba3 020a 	sub.w	r2, r3, sl
 800ae9e:	eba3 0901 	sub.w	r9, r3, r1
 800aea2:	4591      	cmp	r9, r2
 800aea4:	bfa8      	it	ge
 800aea6:	4691      	movge	r9, r2
 800aea8:	f1b9 0f00 	cmp.w	r9, #0
 800aeac:	dc34      	bgt.n	800af18 <_printf_float+0x398>
 800aeae:	f04f 0800 	mov.w	r8, #0
 800aeb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aeb6:	f104 0a1a 	add.w	sl, r4, #26
 800aeba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	eba3 0309 	sub.w	r3, r3, r9
 800aec4:	4543      	cmp	r3, r8
 800aec6:	f77f af7b 	ble.w	800adc0 <_printf_float+0x240>
 800aeca:	2301      	movs	r3, #1
 800aecc:	4652      	mov	r2, sl
 800aece:	4631      	mov	r1, r6
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b8      	blx	r7
 800aed4:	3001      	adds	r0, #1
 800aed6:	f43f aeae 	beq.w	800ac36 <_printf_float+0xb6>
 800aeda:	f108 0801 	add.w	r8, r8, #1
 800aede:	e7ec      	b.n	800aeba <_printf_float+0x33a>
 800aee0:	4613      	mov	r3, r2
 800aee2:	4631      	mov	r1, r6
 800aee4:	4642      	mov	r2, r8
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	d1c0      	bne.n	800ae70 <_printf_float+0x2f0>
 800aeee:	e6a2      	b.n	800ac36 <_printf_float+0xb6>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	920b      	str	r2, [sp, #44]	; 0x2c
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f ae9b 	beq.w	800ac36 <_printf_float+0xb6>
 800af00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af02:	f10b 0b01 	add.w	fp, fp, #1
 800af06:	e7b9      	b.n	800ae7c <_printf_float+0x2fc>
 800af08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	d1bf      	bne.n	800ae96 <_printf_float+0x316>
 800af16:	e68e      	b.n	800ac36 <_printf_float+0xb6>
 800af18:	464b      	mov	r3, r9
 800af1a:	eb08 020a 	add.w	r2, r8, sl
 800af1e:	4631      	mov	r1, r6
 800af20:	4628      	mov	r0, r5
 800af22:	47b8      	blx	r7
 800af24:	3001      	adds	r0, #1
 800af26:	d1c2      	bne.n	800aeae <_printf_float+0x32e>
 800af28:	e685      	b.n	800ac36 <_printf_float+0xb6>
 800af2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af2c:	2a01      	cmp	r2, #1
 800af2e:	dc01      	bgt.n	800af34 <_printf_float+0x3b4>
 800af30:	07db      	lsls	r3, r3, #31
 800af32:	d537      	bpl.n	800afa4 <_printf_float+0x424>
 800af34:	2301      	movs	r3, #1
 800af36:	4642      	mov	r2, r8
 800af38:	4631      	mov	r1, r6
 800af3a:	4628      	mov	r0, r5
 800af3c:	47b8      	blx	r7
 800af3e:	3001      	adds	r0, #1
 800af40:	f43f ae79 	beq.w	800ac36 <_printf_float+0xb6>
 800af44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f ae71 	beq.w	800ac36 <_printf_float+0xb6>
 800af54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af58:	2200      	movs	r2, #0
 800af5a:	2300      	movs	r3, #0
 800af5c:	f7f5 fdae 	bl	8000abc <__aeabi_dcmpeq>
 800af60:	b9d8      	cbnz	r0, 800af9a <_printf_float+0x41a>
 800af62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af64:	f108 0201 	add.w	r2, r8, #1
 800af68:	3b01      	subs	r3, #1
 800af6a:	4631      	mov	r1, r6
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	d10e      	bne.n	800af92 <_printf_float+0x412>
 800af74:	e65f      	b.n	800ac36 <_printf_float+0xb6>
 800af76:	2301      	movs	r3, #1
 800af78:	464a      	mov	r2, r9
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b8      	blx	r7
 800af80:	3001      	adds	r0, #1
 800af82:	f43f ae58 	beq.w	800ac36 <_printf_float+0xb6>
 800af86:	f108 0801 	add.w	r8, r8, #1
 800af8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af8c:	3b01      	subs	r3, #1
 800af8e:	4543      	cmp	r3, r8
 800af90:	dcf1      	bgt.n	800af76 <_printf_float+0x3f6>
 800af92:	4653      	mov	r3, sl
 800af94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af98:	e6e1      	b.n	800ad5e <_printf_float+0x1de>
 800af9a:	f04f 0800 	mov.w	r8, #0
 800af9e:	f104 091a 	add.w	r9, r4, #26
 800afa2:	e7f2      	b.n	800af8a <_printf_float+0x40a>
 800afa4:	2301      	movs	r3, #1
 800afa6:	4642      	mov	r2, r8
 800afa8:	e7df      	b.n	800af6a <_printf_float+0x3ea>
 800afaa:	2301      	movs	r3, #1
 800afac:	464a      	mov	r2, r9
 800afae:	4631      	mov	r1, r6
 800afb0:	4628      	mov	r0, r5
 800afb2:	47b8      	blx	r7
 800afb4:	3001      	adds	r0, #1
 800afb6:	f43f ae3e 	beq.w	800ac36 <_printf_float+0xb6>
 800afba:	f108 0801 	add.w	r8, r8, #1
 800afbe:	68e3      	ldr	r3, [r4, #12]
 800afc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afc2:	1a5b      	subs	r3, r3, r1
 800afc4:	4543      	cmp	r3, r8
 800afc6:	dcf0      	bgt.n	800afaa <_printf_float+0x42a>
 800afc8:	e6fe      	b.n	800adc8 <_printf_float+0x248>
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	f104 0919 	add.w	r9, r4, #25
 800afd2:	e7f4      	b.n	800afbe <_printf_float+0x43e>

0800afd4 <_printf_i>:
 800afd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afd8:	7e0f      	ldrb	r7, [r1, #24]
 800afda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afdc:	2f78      	cmp	r7, #120	; 0x78
 800afde:	4691      	mov	r9, r2
 800afe0:	4680      	mov	r8, r0
 800afe2:	460c      	mov	r4, r1
 800afe4:	469a      	mov	sl, r3
 800afe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afea:	d807      	bhi.n	800affc <_printf_i+0x28>
 800afec:	2f62      	cmp	r7, #98	; 0x62
 800afee:	d80a      	bhi.n	800b006 <_printf_i+0x32>
 800aff0:	2f00      	cmp	r7, #0
 800aff2:	f000 80d8 	beq.w	800b1a6 <_printf_i+0x1d2>
 800aff6:	2f58      	cmp	r7, #88	; 0x58
 800aff8:	f000 80a3 	beq.w	800b142 <_printf_i+0x16e>
 800affc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b004:	e03a      	b.n	800b07c <_printf_i+0xa8>
 800b006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b00a:	2b15      	cmp	r3, #21
 800b00c:	d8f6      	bhi.n	800affc <_printf_i+0x28>
 800b00e:	a101      	add	r1, pc, #4	; (adr r1, 800b014 <_printf_i+0x40>)
 800b010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b014:	0800b06d 	.word	0x0800b06d
 800b018:	0800b081 	.word	0x0800b081
 800b01c:	0800affd 	.word	0x0800affd
 800b020:	0800affd 	.word	0x0800affd
 800b024:	0800affd 	.word	0x0800affd
 800b028:	0800affd 	.word	0x0800affd
 800b02c:	0800b081 	.word	0x0800b081
 800b030:	0800affd 	.word	0x0800affd
 800b034:	0800affd 	.word	0x0800affd
 800b038:	0800affd 	.word	0x0800affd
 800b03c:	0800affd 	.word	0x0800affd
 800b040:	0800b18d 	.word	0x0800b18d
 800b044:	0800b0b1 	.word	0x0800b0b1
 800b048:	0800b16f 	.word	0x0800b16f
 800b04c:	0800affd 	.word	0x0800affd
 800b050:	0800affd 	.word	0x0800affd
 800b054:	0800b1af 	.word	0x0800b1af
 800b058:	0800affd 	.word	0x0800affd
 800b05c:	0800b0b1 	.word	0x0800b0b1
 800b060:	0800affd 	.word	0x0800affd
 800b064:	0800affd 	.word	0x0800affd
 800b068:	0800b177 	.word	0x0800b177
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	1d1a      	adds	r2, r3, #4
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	602a      	str	r2, [r5, #0]
 800b074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b07c:	2301      	movs	r3, #1
 800b07e:	e0a3      	b.n	800b1c8 <_printf_i+0x1f4>
 800b080:	6820      	ldr	r0, [r4, #0]
 800b082:	6829      	ldr	r1, [r5, #0]
 800b084:	0606      	lsls	r6, r0, #24
 800b086:	f101 0304 	add.w	r3, r1, #4
 800b08a:	d50a      	bpl.n	800b0a2 <_printf_i+0xce>
 800b08c:	680e      	ldr	r6, [r1, #0]
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	2e00      	cmp	r6, #0
 800b092:	da03      	bge.n	800b09c <_printf_i+0xc8>
 800b094:	232d      	movs	r3, #45	; 0x2d
 800b096:	4276      	negs	r6, r6
 800b098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b09c:	485e      	ldr	r0, [pc, #376]	; (800b218 <_printf_i+0x244>)
 800b09e:	230a      	movs	r3, #10
 800b0a0:	e019      	b.n	800b0d6 <_printf_i+0x102>
 800b0a2:	680e      	ldr	r6, [r1, #0]
 800b0a4:	602b      	str	r3, [r5, #0]
 800b0a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0aa:	bf18      	it	ne
 800b0ac:	b236      	sxthne	r6, r6
 800b0ae:	e7ef      	b.n	800b090 <_printf_i+0xbc>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	6820      	ldr	r0, [r4, #0]
 800b0b4:	1d19      	adds	r1, r3, #4
 800b0b6:	6029      	str	r1, [r5, #0]
 800b0b8:	0601      	lsls	r1, r0, #24
 800b0ba:	d501      	bpl.n	800b0c0 <_printf_i+0xec>
 800b0bc:	681e      	ldr	r6, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <_printf_i+0xf2>
 800b0c0:	0646      	lsls	r6, r0, #25
 800b0c2:	d5fb      	bpl.n	800b0bc <_printf_i+0xe8>
 800b0c4:	881e      	ldrh	r6, [r3, #0]
 800b0c6:	4854      	ldr	r0, [pc, #336]	; (800b218 <_printf_i+0x244>)
 800b0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b0ca:	bf0c      	ite	eq
 800b0cc:	2308      	moveq	r3, #8
 800b0ce:	230a      	movne	r3, #10
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0d6:	6865      	ldr	r5, [r4, #4]
 800b0d8:	60a5      	str	r5, [r4, #8]
 800b0da:	2d00      	cmp	r5, #0
 800b0dc:	bfa2      	ittt	ge
 800b0de:	6821      	ldrge	r1, [r4, #0]
 800b0e0:	f021 0104 	bicge.w	r1, r1, #4
 800b0e4:	6021      	strge	r1, [r4, #0]
 800b0e6:	b90e      	cbnz	r6, 800b0ec <_printf_i+0x118>
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	d04d      	beq.n	800b188 <_printf_i+0x1b4>
 800b0ec:	4615      	mov	r5, r2
 800b0ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0f2:	fb03 6711 	mls	r7, r3, r1, r6
 800b0f6:	5dc7      	ldrb	r7, [r0, r7]
 800b0f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0fc:	4637      	mov	r7, r6
 800b0fe:	42bb      	cmp	r3, r7
 800b100:	460e      	mov	r6, r1
 800b102:	d9f4      	bls.n	800b0ee <_printf_i+0x11a>
 800b104:	2b08      	cmp	r3, #8
 800b106:	d10b      	bne.n	800b120 <_printf_i+0x14c>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	07de      	lsls	r6, r3, #31
 800b10c:	d508      	bpl.n	800b120 <_printf_i+0x14c>
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	6861      	ldr	r1, [r4, #4]
 800b112:	4299      	cmp	r1, r3
 800b114:	bfde      	ittt	le
 800b116:	2330      	movle	r3, #48	; 0x30
 800b118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b11c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b120:	1b52      	subs	r2, r2, r5
 800b122:	6122      	str	r2, [r4, #16]
 800b124:	f8cd a000 	str.w	sl, [sp]
 800b128:	464b      	mov	r3, r9
 800b12a:	aa03      	add	r2, sp, #12
 800b12c:	4621      	mov	r1, r4
 800b12e:	4640      	mov	r0, r8
 800b130:	f003 fa23 	bl	800e57a <_printf_common>
 800b134:	3001      	adds	r0, #1
 800b136:	d14c      	bne.n	800b1d2 <_printf_i+0x1fe>
 800b138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b13c:	b004      	add	sp, #16
 800b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b142:	4835      	ldr	r0, [pc, #212]	; (800b218 <_printf_i+0x244>)
 800b144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b148:	6829      	ldr	r1, [r5, #0]
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b150:	6029      	str	r1, [r5, #0]
 800b152:	061d      	lsls	r5, r3, #24
 800b154:	d514      	bpl.n	800b180 <_printf_i+0x1ac>
 800b156:	07df      	lsls	r7, r3, #31
 800b158:	bf44      	itt	mi
 800b15a:	f043 0320 	orrmi.w	r3, r3, #32
 800b15e:	6023      	strmi	r3, [r4, #0]
 800b160:	b91e      	cbnz	r6, 800b16a <_printf_i+0x196>
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	f023 0320 	bic.w	r3, r3, #32
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	2310      	movs	r3, #16
 800b16c:	e7b0      	b.n	800b0d0 <_printf_i+0xfc>
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	f043 0320 	orr.w	r3, r3, #32
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	2378      	movs	r3, #120	; 0x78
 800b178:	4828      	ldr	r0, [pc, #160]	; (800b21c <_printf_i+0x248>)
 800b17a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b17e:	e7e3      	b.n	800b148 <_printf_i+0x174>
 800b180:	0659      	lsls	r1, r3, #25
 800b182:	bf48      	it	mi
 800b184:	b2b6      	uxthmi	r6, r6
 800b186:	e7e6      	b.n	800b156 <_printf_i+0x182>
 800b188:	4615      	mov	r5, r2
 800b18a:	e7bb      	b.n	800b104 <_printf_i+0x130>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	6826      	ldr	r6, [r4, #0]
 800b190:	6961      	ldr	r1, [r4, #20]
 800b192:	1d18      	adds	r0, r3, #4
 800b194:	6028      	str	r0, [r5, #0]
 800b196:	0635      	lsls	r5, r6, #24
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	d501      	bpl.n	800b1a0 <_printf_i+0x1cc>
 800b19c:	6019      	str	r1, [r3, #0]
 800b19e:	e002      	b.n	800b1a6 <_printf_i+0x1d2>
 800b1a0:	0670      	lsls	r0, r6, #25
 800b1a2:	d5fb      	bpl.n	800b19c <_printf_i+0x1c8>
 800b1a4:	8019      	strh	r1, [r3, #0]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	6123      	str	r3, [r4, #16]
 800b1aa:	4615      	mov	r5, r2
 800b1ac:	e7ba      	b.n	800b124 <_printf_i+0x150>
 800b1ae:	682b      	ldr	r3, [r5, #0]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	602a      	str	r2, [r5, #0]
 800b1b4:	681d      	ldr	r5, [r3, #0]
 800b1b6:	6862      	ldr	r2, [r4, #4]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7f4 fff0 	bl	80001a0 <memchr>
 800b1c0:	b108      	cbz	r0, 800b1c6 <_printf_i+0x1f2>
 800b1c2:	1b40      	subs	r0, r0, r5
 800b1c4:	6060      	str	r0, [r4, #4]
 800b1c6:	6863      	ldr	r3, [r4, #4]
 800b1c8:	6123      	str	r3, [r4, #16]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1d0:	e7a8      	b.n	800b124 <_printf_i+0x150>
 800b1d2:	6923      	ldr	r3, [r4, #16]
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4640      	mov	r0, r8
 800b1da:	47d0      	blx	sl
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d0ab      	beq.n	800b138 <_printf_i+0x164>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	079b      	lsls	r3, r3, #30
 800b1e4:	d413      	bmi.n	800b20e <_printf_i+0x23a>
 800b1e6:	68e0      	ldr	r0, [r4, #12]
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	4298      	cmp	r0, r3
 800b1ec:	bfb8      	it	lt
 800b1ee:	4618      	movlt	r0, r3
 800b1f0:	e7a4      	b.n	800b13c <_printf_i+0x168>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	47d0      	blx	sl
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	d09b      	beq.n	800b138 <_printf_i+0x164>
 800b200:	3501      	adds	r5, #1
 800b202:	68e3      	ldr	r3, [r4, #12]
 800b204:	9903      	ldr	r1, [sp, #12]
 800b206:	1a5b      	subs	r3, r3, r1
 800b208:	42ab      	cmp	r3, r5
 800b20a:	dcf2      	bgt.n	800b1f2 <_printf_i+0x21e>
 800b20c:	e7eb      	b.n	800b1e6 <_printf_i+0x212>
 800b20e:	2500      	movs	r5, #0
 800b210:	f104 0619 	add.w	r6, r4, #25
 800b214:	e7f5      	b.n	800b202 <_printf_i+0x22e>
 800b216:	bf00      	nop
 800b218:	08010667 	.word	0x08010667
 800b21c:	08010678 	.word	0x08010678

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f9 fd32 	bl	8004c94 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000f24 	.word	0x20000f24

0800b240 <_localeconv_r>:
 800b240:	4800      	ldr	r0, [pc, #0]	; (800b244 <_localeconv_r+0x4>)
 800b242:	4770      	bx	lr
 800b244:	20000228 	.word	0x20000228

0800b248 <__malloc_lock>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__malloc_lock+0x8>)
 800b24a:	f001 bd32 	b.w	800ccb2 <__retarget_lock_acquire_recursive>
 800b24e:	bf00      	nop
 800b250:	200003a8 	.word	0x200003a8

0800b254 <__malloc_unlock>:
 800b254:	4801      	ldr	r0, [pc, #4]	; (800b25c <__malloc_unlock+0x8>)
 800b256:	f001 bd34 	b.w	800ccc2 <__retarget_lock_release_recursive>
 800b25a:	bf00      	nop
 800b25c:	200003a8 	.word	0x200003a8

0800b260 <_Balloc>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b264:	4604      	mov	r4, r0
 800b266:	460d      	mov	r5, r1
 800b268:	b976      	cbnz	r6, 800b288 <_Balloc+0x28>
 800b26a:	2010      	movs	r0, #16
 800b26c:	f7ff fbdc 	bl	800aa28 <malloc>
 800b270:	4602      	mov	r2, r0
 800b272:	6260      	str	r0, [r4, #36]	; 0x24
 800b274:	b920      	cbnz	r0, 800b280 <_Balloc+0x20>
 800b276:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <_Balloc+0x78>)
 800b278:	4818      	ldr	r0, [pc, #96]	; (800b2dc <_Balloc+0x7c>)
 800b27a:	2166      	movs	r1, #102	; 0x66
 800b27c:	f000 fb04 	bl	800b888 <__assert_func>
 800b280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b284:	6006      	str	r6, [r0, #0]
 800b286:	60c6      	str	r6, [r0, #12]
 800b288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b28a:	68f3      	ldr	r3, [r6, #12]
 800b28c:	b183      	cbz	r3, 800b2b0 <_Balloc+0x50>
 800b28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b296:	b9b8      	cbnz	r0, 800b2c8 <_Balloc+0x68>
 800b298:	2101      	movs	r1, #1
 800b29a:	fa01 f605 	lsl.w	r6, r1, r5
 800b29e:	1d72      	adds	r2, r6, #5
 800b2a0:	0092      	lsls	r2, r2, #2
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f003 fae4 	bl	800e870 <_calloc_r>
 800b2a8:	b160      	cbz	r0, 800b2c4 <_Balloc+0x64>
 800b2aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ae:	e00e      	b.n	800b2ce <_Balloc+0x6e>
 800b2b0:	2221      	movs	r2, #33	; 0x21
 800b2b2:	2104      	movs	r1, #4
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f003 fadb 	bl	800e870 <_calloc_r>
 800b2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2bc:	60f0      	str	r0, [r6, #12]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e4      	bne.n	800b28e <_Balloc+0x2e>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	6802      	ldr	r2, [r0, #0]
 800b2ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2d4:	e7f7      	b.n	800b2c6 <_Balloc+0x66>
 800b2d6:	bf00      	nop
 800b2d8:	08010696 	.word	0x08010696
 800b2dc:	08010718 	.word	0x08010718

0800b2e0 <_Bfree>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	b976      	cbnz	r6, 800b308 <_Bfree+0x28>
 800b2ea:	2010      	movs	r0, #16
 800b2ec:	f7ff fb9c 	bl	800aa28 <malloc>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	6268      	str	r0, [r5, #36]	; 0x24
 800b2f4:	b920      	cbnz	r0, 800b300 <_Bfree+0x20>
 800b2f6:	4b09      	ldr	r3, [pc, #36]	; (800b31c <_Bfree+0x3c>)
 800b2f8:	4809      	ldr	r0, [pc, #36]	; (800b320 <_Bfree+0x40>)
 800b2fa:	218a      	movs	r1, #138	; 0x8a
 800b2fc:	f000 fac4 	bl	800b888 <__assert_func>
 800b300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b304:	6006      	str	r6, [r0, #0]
 800b306:	60c6      	str	r6, [r0, #12]
 800b308:	b13c      	cbz	r4, 800b31a <_Bfree+0x3a>
 800b30a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b30c:	6862      	ldr	r2, [r4, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b314:	6021      	str	r1, [r4, #0]
 800b316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b31a:	bd70      	pop	{r4, r5, r6, pc}
 800b31c:	08010696 	.word	0x08010696
 800b320:	08010718 	.word	0x08010718

0800b324 <__multadd>:
 800b324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	690d      	ldr	r5, [r1, #16]
 800b32a:	4607      	mov	r7, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	461e      	mov	r6, r3
 800b330:	f101 0c14 	add.w	ip, r1, #20
 800b334:	2000      	movs	r0, #0
 800b336:	f8dc 3000 	ldr.w	r3, [ip]
 800b33a:	b299      	uxth	r1, r3
 800b33c:	fb02 6101 	mla	r1, r2, r1, r6
 800b340:	0c1e      	lsrs	r6, r3, #16
 800b342:	0c0b      	lsrs	r3, r1, #16
 800b344:	fb02 3306 	mla	r3, r2, r6, r3
 800b348:	b289      	uxth	r1, r1
 800b34a:	3001      	adds	r0, #1
 800b34c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b350:	4285      	cmp	r5, r0
 800b352:	f84c 1b04 	str.w	r1, [ip], #4
 800b356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b35a:	dcec      	bgt.n	800b336 <__multadd+0x12>
 800b35c:	b30e      	cbz	r6, 800b3a2 <__multadd+0x7e>
 800b35e:	68a3      	ldr	r3, [r4, #8]
 800b360:	42ab      	cmp	r3, r5
 800b362:	dc19      	bgt.n	800b398 <__multadd+0x74>
 800b364:	6861      	ldr	r1, [r4, #4]
 800b366:	4638      	mov	r0, r7
 800b368:	3101      	adds	r1, #1
 800b36a:	f7ff ff79 	bl	800b260 <_Balloc>
 800b36e:	4680      	mov	r8, r0
 800b370:	b928      	cbnz	r0, 800b37e <__multadd+0x5a>
 800b372:	4602      	mov	r2, r0
 800b374:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <__multadd+0x84>)
 800b376:	480d      	ldr	r0, [pc, #52]	; (800b3ac <__multadd+0x88>)
 800b378:	21b5      	movs	r1, #181	; 0xb5
 800b37a:	f000 fa85 	bl	800b888 <__assert_func>
 800b37e:	6922      	ldr	r2, [r4, #16]
 800b380:	3202      	adds	r2, #2
 800b382:	f104 010c 	add.w	r1, r4, #12
 800b386:	0092      	lsls	r2, r2, #2
 800b388:	300c      	adds	r0, #12
 800b38a:	f003 f842 	bl	800e412 <memcpy>
 800b38e:	4621      	mov	r1, r4
 800b390:	4638      	mov	r0, r7
 800b392:	f7ff ffa5 	bl	800b2e0 <_Bfree>
 800b396:	4644      	mov	r4, r8
 800b398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b39c:	3501      	adds	r5, #1
 800b39e:	615e      	str	r6, [r3, #20]
 800b3a0:	6125      	str	r5, [r4, #16]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a8:	08010707 	.word	0x08010707
 800b3ac:	08010718 	.word	0x08010718

0800b3b0 <__i2b>:
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	f7ff ff53 	bl	800b260 <_Balloc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	b928      	cbnz	r0, 800b3ca <__i2b+0x1a>
 800b3be:	4b05      	ldr	r3, [pc, #20]	; (800b3d4 <__i2b+0x24>)
 800b3c0:	4805      	ldr	r0, [pc, #20]	; (800b3d8 <__i2b+0x28>)
 800b3c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3c6:	f000 fa5f 	bl	800b888 <__assert_func>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	6144      	str	r4, [r0, #20]
 800b3ce:	6103      	str	r3, [r0, #16]
 800b3d0:	bd10      	pop	{r4, pc}
 800b3d2:	bf00      	nop
 800b3d4:	08010707 	.word	0x08010707
 800b3d8:	08010718 	.word	0x08010718

0800b3dc <__multiply>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	4691      	mov	r9, r2
 800b3e2:	690a      	ldr	r2, [r1, #16]
 800b3e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	bfb8      	it	lt
 800b3ec:	460b      	movlt	r3, r1
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	bfbc      	itt	lt
 800b3f2:	464c      	movlt	r4, r9
 800b3f4:	4699      	movlt	r9, r3
 800b3f6:	6927      	ldr	r7, [r4, #16]
 800b3f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3fc:	68a3      	ldr	r3, [r4, #8]
 800b3fe:	6861      	ldr	r1, [r4, #4]
 800b400:	eb07 060a 	add.w	r6, r7, sl
 800b404:	42b3      	cmp	r3, r6
 800b406:	b085      	sub	sp, #20
 800b408:	bfb8      	it	lt
 800b40a:	3101      	addlt	r1, #1
 800b40c:	f7ff ff28 	bl	800b260 <_Balloc>
 800b410:	b930      	cbnz	r0, 800b420 <__multiply+0x44>
 800b412:	4602      	mov	r2, r0
 800b414:	4b43      	ldr	r3, [pc, #268]	; (800b524 <__multiply+0x148>)
 800b416:	4844      	ldr	r0, [pc, #272]	; (800b528 <__multiply+0x14c>)
 800b418:	f240 115d 	movw	r1, #349	; 0x15d
 800b41c:	f000 fa34 	bl	800b888 <__assert_func>
 800b420:	f100 0514 	add.w	r5, r0, #20
 800b424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b428:	462b      	mov	r3, r5
 800b42a:	2200      	movs	r2, #0
 800b42c:	4543      	cmp	r3, r8
 800b42e:	d321      	bcc.n	800b474 <__multiply+0x98>
 800b430:	f104 0314 	add.w	r3, r4, #20
 800b434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b438:	f109 0314 	add.w	r3, r9, #20
 800b43c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b440:	9202      	str	r2, [sp, #8]
 800b442:	1b3a      	subs	r2, r7, r4
 800b444:	3a15      	subs	r2, #21
 800b446:	f022 0203 	bic.w	r2, r2, #3
 800b44a:	3204      	adds	r2, #4
 800b44c:	f104 0115 	add.w	r1, r4, #21
 800b450:	428f      	cmp	r7, r1
 800b452:	bf38      	it	cc
 800b454:	2204      	movcc	r2, #4
 800b456:	9201      	str	r2, [sp, #4]
 800b458:	9a02      	ldr	r2, [sp, #8]
 800b45a:	9303      	str	r3, [sp, #12]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d80c      	bhi.n	800b47a <__multiply+0x9e>
 800b460:	2e00      	cmp	r6, #0
 800b462:	dd03      	ble.n	800b46c <__multiply+0x90>
 800b464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d059      	beq.n	800b520 <__multiply+0x144>
 800b46c:	6106      	str	r6, [r0, #16]
 800b46e:	b005      	add	sp, #20
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	f843 2b04 	str.w	r2, [r3], #4
 800b478:	e7d8      	b.n	800b42c <__multiply+0x50>
 800b47a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b47e:	f1ba 0f00 	cmp.w	sl, #0
 800b482:	d023      	beq.n	800b4cc <__multiply+0xf0>
 800b484:	f104 0e14 	add.w	lr, r4, #20
 800b488:	46a9      	mov	r9, r5
 800b48a:	f04f 0c00 	mov.w	ip, #0
 800b48e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b492:	f8d9 1000 	ldr.w	r1, [r9]
 800b496:	fa1f fb82 	uxth.w	fp, r2
 800b49a:	b289      	uxth	r1, r1
 800b49c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4a0:	4461      	add	r1, ip
 800b4a2:	f8d9 c000 	ldr.w	ip, [r9]
 800b4a6:	0c12      	lsrs	r2, r2, #16
 800b4a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b4ac:	fb0a c202 	mla	r2, sl, r2, ip
 800b4b0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4b4:	b289      	uxth	r1, r1
 800b4b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4ba:	4577      	cmp	r7, lr
 800b4bc:	f849 1b04 	str.w	r1, [r9], #4
 800b4c0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4c4:	d8e3      	bhi.n	800b48e <__multiply+0xb2>
 800b4c6:	9a01      	ldr	r2, [sp, #4]
 800b4c8:	f845 c002 	str.w	ip, [r5, r2]
 800b4cc:	9a03      	ldr	r2, [sp, #12]
 800b4ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	f1b9 0f00 	cmp.w	r9, #0
 800b4d8:	d020      	beq.n	800b51c <__multiply+0x140>
 800b4da:	6829      	ldr	r1, [r5, #0]
 800b4dc:	f104 0c14 	add.w	ip, r4, #20
 800b4e0:	46ae      	mov	lr, r5
 800b4e2:	f04f 0a00 	mov.w	sl, #0
 800b4e6:	f8bc b000 	ldrh.w	fp, [ip]
 800b4ea:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4ee:	fb09 220b 	mla	r2, r9, fp, r2
 800b4f2:	4492      	add	sl, r2
 800b4f4:	b289      	uxth	r1, r1
 800b4f6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4fa:	f84e 1b04 	str.w	r1, [lr], #4
 800b4fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b502:	f8be 1000 	ldrh.w	r1, [lr]
 800b506:	0c12      	lsrs	r2, r2, #16
 800b508:	fb09 1102 	mla	r1, r9, r2, r1
 800b50c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b510:	4567      	cmp	r7, ip
 800b512:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b516:	d8e6      	bhi.n	800b4e6 <__multiply+0x10a>
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	50a9      	str	r1, [r5, r2]
 800b51c:	3504      	adds	r5, #4
 800b51e:	e79b      	b.n	800b458 <__multiply+0x7c>
 800b520:	3e01      	subs	r6, #1
 800b522:	e79d      	b.n	800b460 <__multiply+0x84>
 800b524:	08010707 	.word	0x08010707
 800b528:	08010718 	.word	0x08010718

0800b52c <__pow5mult>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	4615      	mov	r5, r2
 800b532:	f012 0203 	ands.w	r2, r2, #3
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	d007      	beq.n	800b54c <__pow5mult+0x20>
 800b53c:	4c25      	ldr	r4, [pc, #148]	; (800b5d4 <__pow5mult+0xa8>)
 800b53e:	3a01      	subs	r2, #1
 800b540:	2300      	movs	r3, #0
 800b542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b546:	f7ff feed 	bl	800b324 <__multadd>
 800b54a:	4607      	mov	r7, r0
 800b54c:	10ad      	asrs	r5, r5, #2
 800b54e:	d03d      	beq.n	800b5cc <__pow5mult+0xa0>
 800b550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b552:	b97c      	cbnz	r4, 800b574 <__pow5mult+0x48>
 800b554:	2010      	movs	r0, #16
 800b556:	f7ff fa67 	bl	800aa28 <malloc>
 800b55a:	4602      	mov	r2, r0
 800b55c:	6270      	str	r0, [r6, #36]	; 0x24
 800b55e:	b928      	cbnz	r0, 800b56c <__pow5mult+0x40>
 800b560:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <__pow5mult+0xac>)
 800b562:	481e      	ldr	r0, [pc, #120]	; (800b5dc <__pow5mult+0xb0>)
 800b564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b568:	f000 f98e 	bl	800b888 <__assert_func>
 800b56c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b570:	6004      	str	r4, [r0, #0]
 800b572:	60c4      	str	r4, [r0, #12]
 800b574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b57c:	b94c      	cbnz	r4, 800b592 <__pow5mult+0x66>
 800b57e:	f240 2171 	movw	r1, #625	; 0x271
 800b582:	4630      	mov	r0, r6
 800b584:	f7ff ff14 	bl	800b3b0 <__i2b>
 800b588:	2300      	movs	r3, #0
 800b58a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b58e:	4604      	mov	r4, r0
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	f04f 0900 	mov.w	r9, #0
 800b596:	07eb      	lsls	r3, r5, #31
 800b598:	d50a      	bpl.n	800b5b0 <__pow5mult+0x84>
 800b59a:	4639      	mov	r1, r7
 800b59c:	4622      	mov	r2, r4
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7ff ff1c 	bl	800b3dc <__multiply>
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff fe99 	bl	800b2e0 <_Bfree>
 800b5ae:	4647      	mov	r7, r8
 800b5b0:	106d      	asrs	r5, r5, #1
 800b5b2:	d00b      	beq.n	800b5cc <__pow5mult+0xa0>
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	b938      	cbnz	r0, 800b5c8 <__pow5mult+0x9c>
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7ff ff0d 	bl	800b3dc <__multiply>
 800b5c2:	6020      	str	r0, [r4, #0]
 800b5c4:	f8c0 9000 	str.w	r9, [r0]
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	e7e4      	b.n	800b596 <__pow5mult+0x6a>
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	bf00      	nop
 800b5d4:	080104e8 	.word	0x080104e8
 800b5d8:	08010696 	.word	0x08010696
 800b5dc:	08010718 	.word	0x08010718

0800b5e0 <__lshift>:
 800b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	6849      	ldr	r1, [r1, #4]
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5f8:	f108 0601 	add.w	r6, r8, #1
 800b5fc:	42b3      	cmp	r3, r6
 800b5fe:	db0b      	blt.n	800b618 <__lshift+0x38>
 800b600:	4638      	mov	r0, r7
 800b602:	f7ff fe2d 	bl	800b260 <_Balloc>
 800b606:	4605      	mov	r5, r0
 800b608:	b948      	cbnz	r0, 800b61e <__lshift+0x3e>
 800b60a:	4602      	mov	r2, r0
 800b60c:	4b2a      	ldr	r3, [pc, #168]	; (800b6b8 <__lshift+0xd8>)
 800b60e:	482b      	ldr	r0, [pc, #172]	; (800b6bc <__lshift+0xdc>)
 800b610:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b614:	f000 f938 	bl	800b888 <__assert_func>
 800b618:	3101      	adds	r1, #1
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	e7ee      	b.n	800b5fc <__lshift+0x1c>
 800b61e:	2300      	movs	r3, #0
 800b620:	f100 0114 	add.w	r1, r0, #20
 800b624:	f100 0210 	add.w	r2, r0, #16
 800b628:	4618      	mov	r0, r3
 800b62a:	4553      	cmp	r3, sl
 800b62c:	db37      	blt.n	800b69e <__lshift+0xbe>
 800b62e:	6920      	ldr	r0, [r4, #16]
 800b630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b634:	f104 0314 	add.w	r3, r4, #20
 800b638:	f019 091f 	ands.w	r9, r9, #31
 800b63c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b644:	d02f      	beq.n	800b6a6 <__lshift+0xc6>
 800b646:	f1c9 0e20 	rsb	lr, r9, #32
 800b64a:	468a      	mov	sl, r1
 800b64c:	f04f 0c00 	mov.w	ip, #0
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	fa02 f209 	lsl.w	r2, r2, r9
 800b656:	ea42 020c 	orr.w	r2, r2, ip
 800b65a:	f84a 2b04 	str.w	r2, [sl], #4
 800b65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b662:	4298      	cmp	r0, r3
 800b664:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b668:	d8f2      	bhi.n	800b650 <__lshift+0x70>
 800b66a:	1b03      	subs	r3, r0, r4
 800b66c:	3b15      	subs	r3, #21
 800b66e:	f023 0303 	bic.w	r3, r3, #3
 800b672:	3304      	adds	r3, #4
 800b674:	f104 0215 	add.w	r2, r4, #21
 800b678:	4290      	cmp	r0, r2
 800b67a:	bf38      	it	cc
 800b67c:	2304      	movcc	r3, #4
 800b67e:	f841 c003 	str.w	ip, [r1, r3]
 800b682:	f1bc 0f00 	cmp.w	ip, #0
 800b686:	d001      	beq.n	800b68c <__lshift+0xac>
 800b688:	f108 0602 	add.w	r6, r8, #2
 800b68c:	3e01      	subs	r6, #1
 800b68e:	4638      	mov	r0, r7
 800b690:	612e      	str	r6, [r5, #16]
 800b692:	4621      	mov	r1, r4
 800b694:	f7ff fe24 	bl	800b2e0 <_Bfree>
 800b698:	4628      	mov	r0, r5
 800b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	e7c1      	b.n	800b62a <__lshift+0x4a>
 800b6a6:	3904      	subs	r1, #4
 800b6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6b0:	4298      	cmp	r0, r3
 800b6b2:	d8f9      	bhi.n	800b6a8 <__lshift+0xc8>
 800b6b4:	e7ea      	b.n	800b68c <__lshift+0xac>
 800b6b6:	bf00      	nop
 800b6b8:	08010707 	.word	0x08010707
 800b6bc:	08010718 	.word	0x08010718

0800b6c0 <__mdiff>:
 800b6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	4607      	mov	r7, r0
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	4614      	mov	r4, r2
 800b6ce:	f003 f8b4 	bl	800e83a <__mcmp>
 800b6d2:	1e06      	subs	r6, r0, #0
 800b6d4:	d111      	bne.n	800b6fa <__mdiff+0x3a>
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff fdc1 	bl	800b260 <_Balloc>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	b928      	cbnz	r0, 800b6ee <__mdiff+0x2e>
 800b6e2:	4b39      	ldr	r3, [pc, #228]	; (800b7c8 <__mdiff+0x108>)
 800b6e4:	f240 2132 	movw	r1, #562	; 0x232
 800b6e8:	4838      	ldr	r0, [pc, #224]	; (800b7cc <__mdiff+0x10c>)
 800b6ea:	f000 f8cd 	bl	800b888 <__assert_func>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fa:	bfa4      	itt	ge
 800b6fc:	4623      	movge	r3, r4
 800b6fe:	462c      	movge	r4, r5
 800b700:	4638      	mov	r0, r7
 800b702:	6861      	ldr	r1, [r4, #4]
 800b704:	bfa6      	itte	ge
 800b706:	461d      	movge	r5, r3
 800b708:	2600      	movge	r6, #0
 800b70a:	2601      	movlt	r6, #1
 800b70c:	f7ff fda8 	bl	800b260 <_Balloc>
 800b710:	4602      	mov	r2, r0
 800b712:	b918      	cbnz	r0, 800b71c <__mdiff+0x5c>
 800b714:	4b2c      	ldr	r3, [pc, #176]	; (800b7c8 <__mdiff+0x108>)
 800b716:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b71a:	e7e5      	b.n	800b6e8 <__mdiff+0x28>
 800b71c:	6927      	ldr	r7, [r4, #16]
 800b71e:	60c6      	str	r6, [r0, #12]
 800b720:	692e      	ldr	r6, [r5, #16]
 800b722:	f104 0014 	add.w	r0, r4, #20
 800b726:	f105 0914 	add.w	r9, r5, #20
 800b72a:	f102 0e14 	add.w	lr, r2, #20
 800b72e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800b732:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b736:	3410      	adds	r4, #16
 800b738:	46f2      	mov	sl, lr
 800b73a:	2100      	movs	r1, #0
 800b73c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b740:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b744:	fa1f f883 	uxth.w	r8, r3
 800b748:	fa11 f18b 	uxtah	r1, r1, fp
 800b74c:	0c1b      	lsrs	r3, r3, #16
 800b74e:	eba1 0808 	sub.w	r8, r1, r8
 800b752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b75a:	fa1f f888 	uxth.w	r8, r8
 800b75e:	1419      	asrs	r1, r3, #16
 800b760:	454e      	cmp	r6, r9
 800b762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b766:	f84a 3b04 	str.w	r3, [sl], #4
 800b76a:	d8e7      	bhi.n	800b73c <__mdiff+0x7c>
 800b76c:	1b73      	subs	r3, r6, r5
 800b76e:	3b15      	subs	r3, #21
 800b770:	f023 0303 	bic.w	r3, r3, #3
 800b774:	3304      	adds	r3, #4
 800b776:	3515      	adds	r5, #21
 800b778:	42ae      	cmp	r6, r5
 800b77a:	bf38      	it	cc
 800b77c:	2304      	movcc	r3, #4
 800b77e:	4418      	add	r0, r3
 800b780:	4473      	add	r3, lr
 800b782:	469e      	mov	lr, r3
 800b784:	4606      	mov	r6, r0
 800b786:	4566      	cmp	r6, ip
 800b788:	d30e      	bcc.n	800b7a8 <__mdiff+0xe8>
 800b78a:	f10c 0103 	add.w	r1, ip, #3
 800b78e:	1a09      	subs	r1, r1, r0
 800b790:	f021 0103 	bic.w	r1, r1, #3
 800b794:	3803      	subs	r0, #3
 800b796:	4584      	cmp	ip, r0
 800b798:	bf38      	it	cc
 800b79a:	2100      	movcc	r1, #0
 800b79c:	4419      	add	r1, r3
 800b79e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7a2:	b17b      	cbz	r3, 800b7c4 <__mdiff+0x104>
 800b7a4:	6117      	str	r7, [r2, #16]
 800b7a6:	e7a5      	b.n	800b6f4 <__mdiff+0x34>
 800b7a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7ac:	fa11 f488 	uxtah	r4, r1, r8
 800b7b0:	1425      	asrs	r5, r4, #16
 800b7b2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800b7b6:	b2a4      	uxth	r4, r4
 800b7b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800b7bc:	f84e 4b04 	str.w	r4, [lr], #4
 800b7c0:	1429      	asrs	r1, r5, #16
 800b7c2:	e7e0      	b.n	800b786 <__mdiff+0xc6>
 800b7c4:	3f01      	subs	r7, #1
 800b7c6:	e7ea      	b.n	800b79e <__mdiff+0xde>
 800b7c8:	08010707 	.word	0x08010707
 800b7cc:	08010718 	.word	0x08010718

0800b7d0 <__d2b>:
 800b7d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b7da:	4690      	mov	r8, r2
 800b7dc:	461d      	mov	r5, r3
 800b7de:	f7ff fd3f 	bl	800b260 <_Balloc>
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	b930      	cbnz	r0, 800b7f4 <__d2b+0x24>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	4b25      	ldr	r3, [pc, #148]	; (800b880 <__d2b+0xb0>)
 800b7ea:	4826      	ldr	r0, [pc, #152]	; (800b884 <__d2b+0xb4>)
 800b7ec:	f240 310a 	movw	r1, #778	; 0x30a
 800b7f0:	f000 f84a 	bl	800b888 <__assert_func>
 800b7f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b7f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b7fc:	bb2d      	cbnz	r5, 800b84a <__d2b+0x7a>
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	f1b8 0300 	subs.w	r3, r8, #0
 800b804:	d026      	beq.n	800b854 <__d2b+0x84>
 800b806:	4668      	mov	r0, sp
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	f002 ffe9 	bl	800e7e0 <__lo0bits>
 800b80e:	9900      	ldr	r1, [sp, #0]
 800b810:	b1f0      	cbz	r0, 800b850 <__d2b+0x80>
 800b812:	9a01      	ldr	r2, [sp, #4]
 800b814:	f1c0 0320 	rsb	r3, r0, #32
 800b818:	fa02 f303 	lsl.w	r3, r2, r3
 800b81c:	430b      	orrs	r3, r1
 800b81e:	40c2      	lsrs	r2, r0
 800b820:	6163      	str	r3, [r4, #20]
 800b822:	9201      	str	r2, [sp, #4]
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	61a3      	str	r3, [r4, #24]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bf14      	ite	ne
 800b82c:	2102      	movne	r1, #2
 800b82e:	2101      	moveq	r1, #1
 800b830:	6121      	str	r1, [r4, #16]
 800b832:	b1c5      	cbz	r5, 800b866 <__d2b+0x96>
 800b834:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b838:	4405      	add	r5, r0
 800b83a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b83e:	603d      	str	r5, [r7, #0]
 800b840:	6030      	str	r0, [r6, #0]
 800b842:	4620      	mov	r0, r4
 800b844:	b002      	add	sp, #8
 800b846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b84a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b84e:	e7d6      	b.n	800b7fe <__d2b+0x2e>
 800b850:	6161      	str	r1, [r4, #20]
 800b852:	e7e7      	b.n	800b824 <__d2b+0x54>
 800b854:	a801      	add	r0, sp, #4
 800b856:	f002 ffc3 	bl	800e7e0 <__lo0bits>
 800b85a:	9b01      	ldr	r3, [sp, #4]
 800b85c:	6163      	str	r3, [r4, #20]
 800b85e:	2101      	movs	r1, #1
 800b860:	6121      	str	r1, [r4, #16]
 800b862:	3020      	adds	r0, #32
 800b864:	e7e5      	b.n	800b832 <__d2b+0x62>
 800b866:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b86a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b86e:	6038      	str	r0, [r7, #0]
 800b870:	6918      	ldr	r0, [r3, #16]
 800b872:	f002 ff95 	bl	800e7a0 <__hi0bits>
 800b876:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b87a:	6031      	str	r1, [r6, #0]
 800b87c:	e7e1      	b.n	800b842 <__d2b+0x72>
 800b87e:	bf00      	nop
 800b880:	08010707 	.word	0x08010707
 800b884:	08010718 	.word	0x08010718

0800b888 <__assert_func>:
 800b888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b88a:	4614      	mov	r4, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	4b09      	ldr	r3, [pc, #36]	; (800b8b4 <__assert_func+0x2c>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4605      	mov	r5, r0
 800b894:	68d8      	ldr	r0, [r3, #12]
 800b896:	b14c      	cbz	r4, 800b8ac <__assert_func+0x24>
 800b898:	4b07      	ldr	r3, [pc, #28]	; (800b8b8 <__assert_func+0x30>)
 800b89a:	9100      	str	r1, [sp, #0]
 800b89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8a0:	4906      	ldr	r1, [pc, #24]	; (800b8bc <__assert_func+0x34>)
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	f000 f80e 	bl	800b8c4 <fiprintf>
 800b8a8:	f003 f836 	bl	800e918 <abort>
 800b8ac:	4b04      	ldr	r3, [pc, #16]	; (800b8c0 <__assert_func+0x38>)
 800b8ae:	461c      	mov	r4, r3
 800b8b0:	e7f3      	b.n	800b89a <__assert_func+0x12>
 800b8b2:	bf00      	nop
 800b8b4:	200000d4 	.word	0x200000d4
 800b8b8:	08010773 	.word	0x08010773
 800b8bc:	08010780 	.word	0x08010780
 800b8c0:	080107ae 	.word	0x080107ae

0800b8c4 <fiprintf>:
 800b8c4:	b40e      	push	{r1, r2, r3}
 800b8c6:	b503      	push	{r0, r1, lr}
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	4805      	ldr	r0, [pc, #20]	; (800b8e4 <fiprintf+0x20>)
 800b8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8d2:	6800      	ldr	r0, [r0, #0]
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	f000 f807 	bl	800b8e8 <_vfiprintf_r>
 800b8da:	b002      	add	sp, #8
 800b8dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8e0:	b003      	add	sp, #12
 800b8e2:	4770      	bx	lr
 800b8e4:	200000d4 	.word	0x200000d4

0800b8e8 <_vfiprintf_r>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	b09d      	sub	sp, #116	; 0x74
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	4698      	mov	r8, r3
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	b118      	cbz	r0, 800b900 <_vfiprintf_r+0x18>
 800b8f8:	6983      	ldr	r3, [r0, #24]
 800b8fa:	b90b      	cbnz	r3, 800b900 <_vfiprintf_r+0x18>
 800b8fc:	f000 fae4 	bl	800bec8 <__sinit>
 800b900:	4b89      	ldr	r3, [pc, #548]	; (800bb28 <_vfiprintf_r+0x240>)
 800b902:	429d      	cmp	r5, r3
 800b904:	d11b      	bne.n	800b93e <_vfiprintf_r+0x56>
 800b906:	6875      	ldr	r5, [r6, #4]
 800b908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d405      	bmi.n	800b91a <_vfiprintf_r+0x32>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	059a      	lsls	r2, r3, #22
 800b912:	d402      	bmi.n	800b91a <_vfiprintf_r+0x32>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f001 f9cc 	bl	800ccb2 <__retarget_lock_acquire_recursive>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	071b      	lsls	r3, r3, #28
 800b91e:	d501      	bpl.n	800b924 <_vfiprintf_r+0x3c>
 800b920:	692b      	ldr	r3, [r5, #16]
 800b922:	b9eb      	cbnz	r3, 800b960 <_vfiprintf_r+0x78>
 800b924:	4629      	mov	r1, r5
 800b926:	4630      	mov	r0, r6
 800b928:	f000 f960 	bl	800bbec <__swsetup_r>
 800b92c:	b1c0      	cbz	r0, 800b960 <_vfiprintf_r+0x78>
 800b92e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b930:	07dc      	lsls	r4, r3, #31
 800b932:	d50e      	bpl.n	800b952 <_vfiprintf_r+0x6a>
 800b934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b938:	b01d      	add	sp, #116	; 0x74
 800b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93e:	4b7b      	ldr	r3, [pc, #492]	; (800bb2c <_vfiprintf_r+0x244>)
 800b940:	429d      	cmp	r5, r3
 800b942:	d101      	bne.n	800b948 <_vfiprintf_r+0x60>
 800b944:	68b5      	ldr	r5, [r6, #8]
 800b946:	e7df      	b.n	800b908 <_vfiprintf_r+0x20>
 800b948:	4b79      	ldr	r3, [pc, #484]	; (800bb30 <_vfiprintf_r+0x248>)
 800b94a:	429d      	cmp	r5, r3
 800b94c:	bf08      	it	eq
 800b94e:	68f5      	ldreq	r5, [r6, #12]
 800b950:	e7da      	b.n	800b908 <_vfiprintf_r+0x20>
 800b952:	89ab      	ldrh	r3, [r5, #12]
 800b954:	0598      	lsls	r0, r3, #22
 800b956:	d4ed      	bmi.n	800b934 <_vfiprintf_r+0x4c>
 800b958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95a:	f001 f9b2 	bl	800ccc2 <__retarget_lock_release_recursive>
 800b95e:	e7e9      	b.n	800b934 <_vfiprintf_r+0x4c>
 800b960:	2300      	movs	r3, #0
 800b962:	9309      	str	r3, [sp, #36]	; 0x24
 800b964:	2320      	movs	r3, #32
 800b966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b96e:	2330      	movs	r3, #48	; 0x30
 800b970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb34 <_vfiprintf_r+0x24c>
 800b974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b978:	f04f 0901 	mov.w	r9, #1
 800b97c:	4623      	mov	r3, r4
 800b97e:	469a      	mov	sl, r3
 800b980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b984:	b10a      	cbz	r2, 800b98a <_vfiprintf_r+0xa2>
 800b986:	2a25      	cmp	r2, #37	; 0x25
 800b988:	d1f9      	bne.n	800b97e <_vfiprintf_r+0x96>
 800b98a:	ebba 0b04 	subs.w	fp, sl, r4
 800b98e:	d00b      	beq.n	800b9a8 <_vfiprintf_r+0xc0>
 800b990:	465b      	mov	r3, fp
 800b992:	4622      	mov	r2, r4
 800b994:	4629      	mov	r1, r5
 800b996:	4630      	mov	r0, r6
 800b998:	f002 ff9f 	bl	800e8da <__sfputs_r>
 800b99c:	3001      	adds	r0, #1
 800b99e:	f000 80aa 	beq.w	800baf6 <_vfiprintf_r+0x20e>
 800b9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9a4:	445a      	add	r2, fp
 800b9a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80a2 	beq.w	800baf6 <_vfiprintf_r+0x20e>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9bc:	f10a 0a01 	add.w	sl, sl, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	9307      	str	r3, [sp, #28]
 800b9c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ca:	4654      	mov	r4, sl
 800b9cc:	2205      	movs	r2, #5
 800b9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d2:	4858      	ldr	r0, [pc, #352]	; (800bb34 <_vfiprintf_r+0x24c>)
 800b9d4:	f7f4 fbe4 	bl	80001a0 <memchr>
 800b9d8:	9a04      	ldr	r2, [sp, #16]
 800b9da:	b9d8      	cbnz	r0, 800ba14 <_vfiprintf_r+0x12c>
 800b9dc:	06d1      	lsls	r1, r2, #27
 800b9de:	bf44      	itt	mi
 800b9e0:	2320      	movmi	r3, #32
 800b9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9e6:	0713      	lsls	r3, r2, #28
 800b9e8:	bf44      	itt	mi
 800b9ea:	232b      	movmi	r3, #43	; 0x2b
 800b9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f6:	d015      	beq.n	800ba24 <_vfiprintf_r+0x13c>
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	4654      	mov	r4, sl
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	f04f 0c0a 	mov.w	ip, #10
 800ba02:	4621      	mov	r1, r4
 800ba04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba08:	3b30      	subs	r3, #48	; 0x30
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d94e      	bls.n	800baac <_vfiprintf_r+0x1c4>
 800ba0e:	b1b0      	cbz	r0, 800ba3e <_vfiprintf_r+0x156>
 800ba10:	9207      	str	r2, [sp, #28]
 800ba12:	e014      	b.n	800ba3e <_vfiprintf_r+0x156>
 800ba14:	eba0 0308 	sub.w	r3, r0, r8
 800ba18:	fa09 f303 	lsl.w	r3, r9, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	46a2      	mov	sl, r4
 800ba22:	e7d2      	b.n	800b9ca <_vfiprintf_r+0xe2>
 800ba24:	9b03      	ldr	r3, [sp, #12]
 800ba26:	1d19      	adds	r1, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	9103      	str	r1, [sp, #12]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfbb      	ittet	lt
 800ba30:	425b      	neglt	r3, r3
 800ba32:	f042 0202 	orrlt.w	r2, r2, #2
 800ba36:	9307      	strge	r3, [sp, #28]
 800ba38:	9307      	strlt	r3, [sp, #28]
 800ba3a:	bfb8      	it	lt
 800ba3c:	9204      	strlt	r2, [sp, #16]
 800ba3e:	7823      	ldrb	r3, [r4, #0]
 800ba40:	2b2e      	cmp	r3, #46	; 0x2e
 800ba42:	d10c      	bne.n	800ba5e <_vfiprintf_r+0x176>
 800ba44:	7863      	ldrb	r3, [r4, #1]
 800ba46:	2b2a      	cmp	r3, #42	; 0x2a
 800ba48:	d135      	bne.n	800bab6 <_vfiprintf_r+0x1ce>
 800ba4a:	9b03      	ldr	r3, [sp, #12]
 800ba4c:	1d1a      	adds	r2, r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	9203      	str	r2, [sp, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bfb8      	it	lt
 800ba56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba5a:	3402      	adds	r4, #2
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bb38 <_vfiprintf_r+0x250>
 800ba62:	7821      	ldrb	r1, [r4, #0]
 800ba64:	2203      	movs	r2, #3
 800ba66:	4650      	mov	r0, sl
 800ba68:	f7f4 fb9a 	bl	80001a0 <memchr>
 800ba6c:	b140      	cbz	r0, 800ba80 <_vfiprintf_r+0x198>
 800ba6e:	2340      	movs	r3, #64	; 0x40
 800ba70:	eba0 000a 	sub.w	r0, r0, sl
 800ba74:	fa03 f000 	lsl.w	r0, r3, r0
 800ba78:	9b04      	ldr	r3, [sp, #16]
 800ba7a:	4303      	orrs	r3, r0
 800ba7c:	3401      	adds	r4, #1
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba84:	482d      	ldr	r0, [pc, #180]	; (800bb3c <_vfiprintf_r+0x254>)
 800ba86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba8a:	2206      	movs	r2, #6
 800ba8c:	f7f4 fb88 	bl	80001a0 <memchr>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d03f      	beq.n	800bb14 <_vfiprintf_r+0x22c>
 800ba94:	4b2a      	ldr	r3, [pc, #168]	; (800bb40 <_vfiprintf_r+0x258>)
 800ba96:	bb1b      	cbnz	r3, 800bae0 <_vfiprintf_r+0x1f8>
 800ba98:	9b03      	ldr	r3, [sp, #12]
 800ba9a:	3307      	adds	r3, #7
 800ba9c:	f023 0307 	bic.w	r3, r3, #7
 800baa0:	3308      	adds	r3, #8
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa6:	443b      	add	r3, r7
 800baa8:	9309      	str	r3, [sp, #36]	; 0x24
 800baaa:	e767      	b.n	800b97c <_vfiprintf_r+0x94>
 800baac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab0:	460c      	mov	r4, r1
 800bab2:	2001      	movs	r0, #1
 800bab4:	e7a5      	b.n	800ba02 <_vfiprintf_r+0x11a>
 800bab6:	2300      	movs	r3, #0
 800bab8:	3401      	adds	r4, #1
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	4619      	mov	r1, r3
 800babe:	f04f 0c0a 	mov.w	ip, #10
 800bac2:	4620      	mov	r0, r4
 800bac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac8:	3a30      	subs	r2, #48	; 0x30
 800baca:	2a09      	cmp	r2, #9
 800bacc:	d903      	bls.n	800bad6 <_vfiprintf_r+0x1ee>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0c5      	beq.n	800ba5e <_vfiprintf_r+0x176>
 800bad2:	9105      	str	r1, [sp, #20]
 800bad4:	e7c3      	b.n	800ba5e <_vfiprintf_r+0x176>
 800bad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bada:	4604      	mov	r4, r0
 800badc:	2301      	movs	r3, #1
 800bade:	e7f0      	b.n	800bac2 <_vfiprintf_r+0x1da>
 800bae0:	ab03      	add	r3, sp, #12
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	462a      	mov	r2, r5
 800bae6:	4b17      	ldr	r3, [pc, #92]	; (800bb44 <_vfiprintf_r+0x25c>)
 800bae8:	a904      	add	r1, sp, #16
 800baea:	4630      	mov	r0, r6
 800baec:	f7ff f848 	bl	800ab80 <_printf_float>
 800baf0:	4607      	mov	r7, r0
 800baf2:	1c78      	adds	r0, r7, #1
 800baf4:	d1d6      	bne.n	800baa4 <_vfiprintf_r+0x1bc>
 800baf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baf8:	07d9      	lsls	r1, r3, #31
 800bafa:	d405      	bmi.n	800bb08 <_vfiprintf_r+0x220>
 800bafc:	89ab      	ldrh	r3, [r5, #12]
 800bafe:	059a      	lsls	r2, r3, #22
 800bb00:	d402      	bmi.n	800bb08 <_vfiprintf_r+0x220>
 800bb02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb04:	f001 f8dd 	bl	800ccc2 <__retarget_lock_release_recursive>
 800bb08:	89ab      	ldrh	r3, [r5, #12]
 800bb0a:	065b      	lsls	r3, r3, #25
 800bb0c:	f53f af12 	bmi.w	800b934 <_vfiprintf_r+0x4c>
 800bb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb12:	e711      	b.n	800b938 <_vfiprintf_r+0x50>
 800bb14:	ab03      	add	r3, sp, #12
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	462a      	mov	r2, r5
 800bb1a:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <_vfiprintf_r+0x25c>)
 800bb1c:	a904      	add	r1, sp, #16
 800bb1e:	4630      	mov	r0, r6
 800bb20:	f7ff fa58 	bl	800afd4 <_printf_i>
 800bb24:	e7e4      	b.n	800baf0 <_vfiprintf_r+0x208>
 800bb26:	bf00      	nop
 800bb28:	08010514 	.word	0x08010514
 800bb2c:	08010534 	.word	0x08010534
 800bb30:	080104f4 	.word	0x080104f4
 800bb34:	080107b9 	.word	0x080107b9
 800bb38:	080107bf 	.word	0x080107bf
 800bb3c:	080107c3 	.word	0x080107c3
 800bb40:	0800ab81 	.word	0x0800ab81
 800bb44:	0800e8db 	.word	0x0800e8db

0800bb48 <__swbuf_r>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b118      	cbz	r0, 800bb5a <__swbuf_r+0x12>
 800bb52:	6983      	ldr	r3, [r0, #24]
 800bb54:	b90b      	cbnz	r3, 800bb5a <__swbuf_r+0x12>
 800bb56:	f000 f9b7 	bl	800bec8 <__sinit>
 800bb5a:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <__swbuf_r+0x98>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d12b      	bne.n	800bbb8 <__swbuf_r+0x70>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	69a3      	ldr	r3, [r4, #24]
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	071a      	lsls	r2, r3, #28
 800bb6a:	d52f      	bpl.n	800bbcc <__swbuf_r+0x84>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	b36b      	cbz	r3, 800bbcc <__swbuf_r+0x84>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1ac0      	subs	r0, r0, r3
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	b2f6      	uxtb	r6, r6
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	4637      	mov	r7, r6
 800bb7e:	dc04      	bgt.n	800bb8a <__swbuf_r+0x42>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4628      	mov	r0, r5
 800bb84:	f000 f922 	bl	800bdcc <_fflush_r>
 800bb88:	bb30      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	6022      	str	r2, [r4, #0]
 800bb96:	701e      	strb	r6, [r3, #0]
 800bb98:	6963      	ldr	r3, [r4, #20]
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	4283      	cmp	r3, r0
 800bb9e:	d004      	beq.n	800bbaa <__swbuf_r+0x62>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d506      	bpl.n	800bbb4 <__swbuf_r+0x6c>
 800bba6:	2e0a      	cmp	r6, #10
 800bba8:	d104      	bne.n	800bbb4 <__swbuf_r+0x6c>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f90d 	bl	800bdcc <_fflush_r>
 800bbb2:	b988      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <__swbuf_r+0x9c>)
 800bbba:	429c      	cmp	r4, r3
 800bbbc:	d101      	bne.n	800bbc2 <__swbuf_r+0x7a>
 800bbbe:	68ac      	ldr	r4, [r5, #8]
 800bbc0:	e7cf      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <__swbuf_r+0xa0>)
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	bf08      	it	eq
 800bbc8:	68ec      	ldreq	r4, [r5, #12]
 800bbca:	e7ca      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 f80c 	bl	800bbec <__swsetup_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d0cb      	beq.n	800bb70 <__swbuf_r+0x28>
 800bbd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbdc:	e7ea      	b.n	800bbb4 <__swbuf_r+0x6c>
 800bbde:	bf00      	nop
 800bbe0:	08010514 	.word	0x08010514
 800bbe4:	08010534 	.word	0x08010534
 800bbe8:	080104f4 	.word	0x080104f4

0800bbec <__swsetup_r>:
 800bbec:	4b32      	ldr	r3, [pc, #200]	; (800bcb8 <__swsetup_r+0xcc>)
 800bbee:	b570      	push	{r4, r5, r6, lr}
 800bbf0:	681d      	ldr	r5, [r3, #0]
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	b125      	cbz	r5, 800bc02 <__swsetup_r+0x16>
 800bbf8:	69ab      	ldr	r3, [r5, #24]
 800bbfa:	b913      	cbnz	r3, 800bc02 <__swsetup_r+0x16>
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	f000 f963 	bl	800bec8 <__sinit>
 800bc02:	4b2e      	ldr	r3, [pc, #184]	; (800bcbc <__swsetup_r+0xd0>)
 800bc04:	429c      	cmp	r4, r3
 800bc06:	d10f      	bne.n	800bc28 <__swsetup_r+0x3c>
 800bc08:	686c      	ldr	r4, [r5, #4]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc10:	0719      	lsls	r1, r3, #28
 800bc12:	d42c      	bmi.n	800bc6e <__swsetup_r+0x82>
 800bc14:	06dd      	lsls	r5, r3, #27
 800bc16:	d411      	bmi.n	800bc3c <__swsetup_r+0x50>
 800bc18:	2309      	movs	r3, #9
 800bc1a:	6033      	str	r3, [r6, #0]
 800bc1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc26:	e03e      	b.n	800bca6 <__swsetup_r+0xba>
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <__swsetup_r+0xd4>)
 800bc2a:	429c      	cmp	r4, r3
 800bc2c:	d101      	bne.n	800bc32 <__swsetup_r+0x46>
 800bc2e:	68ac      	ldr	r4, [r5, #8]
 800bc30:	e7eb      	b.n	800bc0a <__swsetup_r+0x1e>
 800bc32:	4b24      	ldr	r3, [pc, #144]	; (800bcc4 <__swsetup_r+0xd8>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	bf08      	it	eq
 800bc38:	68ec      	ldreq	r4, [r5, #12]
 800bc3a:	e7e6      	b.n	800bc0a <__swsetup_r+0x1e>
 800bc3c:	0758      	lsls	r0, r3, #29
 800bc3e:	d512      	bpl.n	800bc66 <__swsetup_r+0x7a>
 800bc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc42:	b141      	cbz	r1, 800bc56 <__swsetup_r+0x6a>
 800bc44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc48:	4299      	cmp	r1, r3
 800bc4a:	d002      	beq.n	800bc52 <__swsetup_r+0x66>
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f7fe fef3 	bl	800aa38 <_free_r>
 800bc52:	2300      	movs	r3, #0
 800bc54:	6363      	str	r3, [r4, #52]	; 0x34
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	2300      	movs	r3, #0
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	f043 0308 	orr.w	r3, r3, #8
 800bc6c:	81a3      	strh	r3, [r4, #12]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	b94b      	cbnz	r3, 800bc86 <__swsetup_r+0x9a>
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc7c:	d003      	beq.n	800bc86 <__swsetup_r+0x9a>
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4630      	mov	r0, r6
 800bc82:	f000 f99f 	bl	800bfc4 <__smakebuf_r>
 800bc86:	89a0      	ldrh	r0, [r4, #12]
 800bc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc8c:	f010 0301 	ands.w	r3, r0, #1
 800bc90:	d00a      	beq.n	800bca8 <__swsetup_r+0xbc>
 800bc92:	2300      	movs	r3, #0
 800bc94:	60a3      	str	r3, [r4, #8]
 800bc96:	6963      	ldr	r3, [r4, #20]
 800bc98:	425b      	negs	r3, r3
 800bc9a:	61a3      	str	r3, [r4, #24]
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	b943      	cbnz	r3, 800bcb2 <__swsetup_r+0xc6>
 800bca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bca4:	d1ba      	bne.n	800bc1c <__swsetup_r+0x30>
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	0781      	lsls	r1, r0, #30
 800bcaa:	bf58      	it	pl
 800bcac:	6963      	ldrpl	r3, [r4, #20]
 800bcae:	60a3      	str	r3, [r4, #8]
 800bcb0:	e7f4      	b.n	800bc9c <__swsetup_r+0xb0>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e7f7      	b.n	800bca6 <__swsetup_r+0xba>
 800bcb6:	bf00      	nop
 800bcb8:	200000d4 	.word	0x200000d4
 800bcbc:	08010514 	.word	0x08010514
 800bcc0:	08010534 	.word	0x08010534
 800bcc4:	080104f4 	.word	0x080104f4

0800bcc8 <__sflush_r>:
 800bcc8:	898a      	ldrh	r2, [r1, #12]
 800bcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bccc:	4605      	mov	r5, r0
 800bcce:	0710      	lsls	r0, r2, #28
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	d457      	bmi.n	800bd84 <__sflush_r+0xbc>
 800bcd4:	684b      	ldr	r3, [r1, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dc04      	bgt.n	800bce4 <__sflush_r+0x1c>
 800bcda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dc01      	bgt.n	800bce4 <__sflush_r+0x1c>
 800bce0:	2000      	movs	r0, #0
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	d0fa      	beq.n	800bce0 <__sflush_r+0x18>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcf0:	682f      	ldr	r7, [r5, #0]
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	d032      	beq.n	800bd5c <__sflush_r+0x94>
 800bcf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	075a      	lsls	r2, r3, #29
 800bcfc:	d505      	bpl.n	800bd0a <__sflush_r+0x42>
 800bcfe:	6863      	ldr	r3, [r4, #4]
 800bd00:	1ac0      	subs	r0, r0, r3
 800bd02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd04:	b10b      	cbz	r3, 800bd0a <__sflush_r+0x42>
 800bd06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd08:	1ac0      	subs	r0, r0, r3
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b0      	blx	r6
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	d106      	bne.n	800bd2a <__sflush_r+0x62>
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	291d      	cmp	r1, #29
 800bd20:	d82c      	bhi.n	800bd7c <__sflush_r+0xb4>
 800bd22:	4a29      	ldr	r2, [pc, #164]	; (800bdc8 <__sflush_r+0x100>)
 800bd24:	40ca      	lsrs	r2, r1
 800bd26:	07d6      	lsls	r6, r2, #31
 800bd28:	d528      	bpl.n	800bd7c <__sflush_r+0xb4>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6062      	str	r2, [r4, #4]
 800bd2e:	04d9      	lsls	r1, r3, #19
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	6022      	str	r2, [r4, #0]
 800bd34:	d504      	bpl.n	800bd40 <__sflush_r+0x78>
 800bd36:	1c42      	adds	r2, r0, #1
 800bd38:	d101      	bne.n	800bd3e <__sflush_r+0x76>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	b903      	cbnz	r3, 800bd40 <__sflush_r+0x78>
 800bd3e:	6560      	str	r0, [r4, #84]	; 0x54
 800bd40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d0cb      	beq.n	800bce0 <__sflush_r+0x18>
 800bd48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd4c:	4299      	cmp	r1, r3
 800bd4e:	d002      	beq.n	800bd56 <__sflush_r+0x8e>
 800bd50:	4628      	mov	r0, r5
 800bd52:	f7fe fe71 	bl	800aa38 <_free_r>
 800bd56:	2000      	movs	r0, #0
 800bd58:	6360      	str	r0, [r4, #52]	; 0x34
 800bd5a:	e7c2      	b.n	800bce2 <__sflush_r+0x1a>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4628      	mov	r0, r5
 800bd62:	47b0      	blx	r6
 800bd64:	1c41      	adds	r1, r0, #1
 800bd66:	d1c7      	bne.n	800bcf8 <__sflush_r+0x30>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c4      	beq.n	800bcf8 <__sflush_r+0x30>
 800bd6e:	2b1d      	cmp	r3, #29
 800bd70:	d001      	beq.n	800bd76 <__sflush_r+0xae>
 800bd72:	2b16      	cmp	r3, #22
 800bd74:	d101      	bne.n	800bd7a <__sflush_r+0xb2>
 800bd76:	602f      	str	r7, [r5, #0]
 800bd78:	e7b2      	b.n	800bce0 <__sflush_r+0x18>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd80:	81a3      	strh	r3, [r4, #12]
 800bd82:	e7ae      	b.n	800bce2 <__sflush_r+0x1a>
 800bd84:	690f      	ldr	r7, [r1, #16]
 800bd86:	2f00      	cmp	r7, #0
 800bd88:	d0aa      	beq.n	800bce0 <__sflush_r+0x18>
 800bd8a:	0793      	lsls	r3, r2, #30
 800bd8c:	680e      	ldr	r6, [r1, #0]
 800bd8e:	bf08      	it	eq
 800bd90:	694b      	ldreq	r3, [r1, #20]
 800bd92:	600f      	str	r7, [r1, #0]
 800bd94:	bf18      	it	ne
 800bd96:	2300      	movne	r3, #0
 800bd98:	1bf6      	subs	r6, r6, r7
 800bd9a:	608b      	str	r3, [r1, #8]
 800bd9c:	2e00      	cmp	r6, #0
 800bd9e:	dd9f      	ble.n	800bce0 <__sflush_r+0x18>
 800bda0:	6a21      	ldr	r1, [r4, #32]
 800bda2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bda6:	4633      	mov	r3, r6
 800bda8:	463a      	mov	r2, r7
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47e0      	blx	ip
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	dc06      	bgt.n	800bdc0 <__sflush_r+0xf8>
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdbe:	e790      	b.n	800bce2 <__sflush_r+0x1a>
 800bdc0:	4407      	add	r7, r0
 800bdc2:	1a36      	subs	r6, r6, r0
 800bdc4:	e7ea      	b.n	800bd9c <__sflush_r+0xd4>
 800bdc6:	bf00      	nop
 800bdc8:	20400001 	.word	0x20400001

0800bdcc <_fflush_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	690b      	ldr	r3, [r1, #16]
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b913      	cbnz	r3, 800bddc <_fflush_r+0x10>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	4628      	mov	r0, r5
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	b118      	cbz	r0, 800bde6 <_fflush_r+0x1a>
 800bdde:	6983      	ldr	r3, [r0, #24]
 800bde0:	b90b      	cbnz	r3, 800bde6 <_fflush_r+0x1a>
 800bde2:	f000 f871 	bl	800bec8 <__sinit>
 800bde6:	4b14      	ldr	r3, [pc, #80]	; (800be38 <_fflush_r+0x6c>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d11b      	bne.n	800be24 <_fflush_r+0x58>
 800bdec:	686c      	ldr	r4, [r5, #4]
 800bdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0ef      	beq.n	800bdd6 <_fflush_r+0xa>
 800bdf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf8:	07d0      	lsls	r0, r2, #31
 800bdfa:	d404      	bmi.n	800be06 <_fflush_r+0x3a>
 800bdfc:	0599      	lsls	r1, r3, #22
 800bdfe:	d402      	bmi.n	800be06 <_fflush_r+0x3a>
 800be00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be02:	f000 ff56 	bl	800ccb2 <__retarget_lock_acquire_recursive>
 800be06:	4628      	mov	r0, r5
 800be08:	4621      	mov	r1, r4
 800be0a:	f7ff ff5d 	bl	800bcc8 <__sflush_r>
 800be0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be10:	07da      	lsls	r2, r3, #31
 800be12:	4605      	mov	r5, r0
 800be14:	d4e0      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	059b      	lsls	r3, r3, #22
 800be1a:	d4dd      	bmi.n	800bdd8 <_fflush_r+0xc>
 800be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be1e:	f000 ff50 	bl	800ccc2 <__retarget_lock_release_recursive>
 800be22:	e7d9      	b.n	800bdd8 <_fflush_r+0xc>
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <_fflush_r+0x70>)
 800be26:	429c      	cmp	r4, r3
 800be28:	d101      	bne.n	800be2e <_fflush_r+0x62>
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	e7df      	b.n	800bdee <_fflush_r+0x22>
 800be2e:	4b04      	ldr	r3, [pc, #16]	; (800be40 <_fflush_r+0x74>)
 800be30:	429c      	cmp	r4, r3
 800be32:	bf08      	it	eq
 800be34:	68ec      	ldreq	r4, [r5, #12]
 800be36:	e7da      	b.n	800bdee <_fflush_r+0x22>
 800be38:	08010514 	.word	0x08010514
 800be3c:	08010534 	.word	0x08010534
 800be40:	080104f4 	.word	0x080104f4

0800be44 <std>:
 800be44:	2300      	movs	r3, #0
 800be46:	b510      	push	{r4, lr}
 800be48:	4604      	mov	r4, r0
 800be4a:	e9c0 3300 	strd	r3, r3, [r0]
 800be4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be52:	6083      	str	r3, [r0, #8]
 800be54:	8181      	strh	r1, [r0, #12]
 800be56:	6643      	str	r3, [r0, #100]	; 0x64
 800be58:	81c2      	strh	r2, [r0, #14]
 800be5a:	6183      	str	r3, [r0, #24]
 800be5c:	4619      	mov	r1, r3
 800be5e:	2208      	movs	r2, #8
 800be60:	305c      	adds	r0, #92	; 0x5c
 800be62:	f002 fae4 	bl	800e42e <memset>
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std+0x38>)
 800be68:	6263      	str	r3, [r4, #36]	; 0x24
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <std+0x3c>)
 800be6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <std+0x40>)
 800be70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <std+0x44>)
 800be74:	6224      	str	r4, [r4, #32]
 800be76:	6323      	str	r3, [r4, #48]	; 0x30
 800be78:	bd10      	pop	{r4, pc}
 800be7a:	bf00      	nop
 800be7c:	0800ea2f 	.word	0x0800ea2f
 800be80:	0800ea51 	.word	0x0800ea51
 800be84:	0800ea89 	.word	0x0800ea89
 800be88:	0800eaad 	.word	0x0800eaad

0800be8c <_cleanup_r>:
 800be8c:	4901      	ldr	r1, [pc, #4]	; (800be94 <_cleanup_r+0x8>)
 800be8e:	f002 bd60 	b.w	800e952 <_fwalk_reent>
 800be92:	bf00      	nop
 800be94:	0800bdcd 	.word	0x0800bdcd

0800be98 <__sfp_lock_acquire>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sfp_lock_acquire+0x8>)
 800be9a:	f000 bf0a 	b.w	800ccb2 <__retarget_lock_acquire_recursive>
 800be9e:	bf00      	nop
 800bea0:	200003bc 	.word	0x200003bc

0800bea4 <__sfp_lock_release>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__sfp_lock_release+0x8>)
 800bea6:	f000 bf0c 	b.w	800ccc2 <__retarget_lock_release_recursive>
 800beaa:	bf00      	nop
 800beac:	200003bc 	.word	0x200003bc

0800beb0 <__sinit_lock_acquire>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__sinit_lock_acquire+0x8>)
 800beb2:	f000 befe 	b.w	800ccb2 <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	200003d0 	.word	0x200003d0

0800bebc <__sinit_lock_release>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__sinit_lock_release+0x8>)
 800bebe:	f000 bf00 	b.w	800ccc2 <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	200003d0 	.word	0x200003d0

0800bec8 <__sinit>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	f7ff fff0 	bl	800beb0 <__sinit_lock_acquire>
 800bed0:	69a3      	ldr	r3, [r4, #24]
 800bed2:	b11b      	cbz	r3, 800bedc <__sinit+0x14>
 800bed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed8:	f7ff bff0 	b.w	800bebc <__sinit_lock_release>
 800bedc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bee0:	6523      	str	r3, [r4, #80]	; 0x50
 800bee2:	4b13      	ldr	r3, [pc, #76]	; (800bf30 <__sinit+0x68>)
 800bee4:	4a13      	ldr	r2, [pc, #76]	; (800bf34 <__sinit+0x6c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	62a2      	str	r2, [r4, #40]	; 0x28
 800beea:	42a3      	cmp	r3, r4
 800beec:	bf04      	itt	eq
 800beee:	2301      	moveq	r3, #1
 800bef0:	61a3      	streq	r3, [r4, #24]
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f820 	bl	800bf38 <__sfp>
 800bef8:	6060      	str	r0, [r4, #4]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f81c 	bl	800bf38 <__sfp>
 800bf00:	60a0      	str	r0, [r4, #8]
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 f818 	bl	800bf38 <__sfp>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	60e0      	str	r0, [r4, #12]
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	6860      	ldr	r0, [r4, #4]
 800bf10:	f7ff ff98 	bl	800be44 <std>
 800bf14:	68a0      	ldr	r0, [r4, #8]
 800bf16:	2201      	movs	r2, #1
 800bf18:	2109      	movs	r1, #9
 800bf1a:	f7ff ff93 	bl	800be44 <std>
 800bf1e:	68e0      	ldr	r0, [r4, #12]
 800bf20:	2202      	movs	r2, #2
 800bf22:	2112      	movs	r1, #18
 800bf24:	f7ff ff8e 	bl	800be44 <std>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	61a3      	str	r3, [r4, #24]
 800bf2c:	e7d2      	b.n	800bed4 <__sinit+0xc>
 800bf2e:	bf00      	nop
 800bf30:	080104e4 	.word	0x080104e4
 800bf34:	0800be8d 	.word	0x0800be8d

0800bf38 <__sfp>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	f7ff ffac 	bl	800be98 <__sfp_lock_acquire>
 800bf40:	4b1e      	ldr	r3, [pc, #120]	; (800bfbc <__sfp+0x84>)
 800bf42:	681e      	ldr	r6, [r3, #0]
 800bf44:	69b3      	ldr	r3, [r6, #24]
 800bf46:	b913      	cbnz	r3, 800bf4e <__sfp+0x16>
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7ff ffbd 	bl	800bec8 <__sinit>
 800bf4e:	3648      	adds	r6, #72	; 0x48
 800bf50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	d503      	bpl.n	800bf60 <__sfp+0x28>
 800bf58:	6833      	ldr	r3, [r6, #0]
 800bf5a:	b30b      	cbz	r3, 800bfa0 <__sfp+0x68>
 800bf5c:	6836      	ldr	r6, [r6, #0]
 800bf5e:	e7f7      	b.n	800bf50 <__sfp+0x18>
 800bf60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf64:	b9d5      	cbnz	r5, 800bf9c <__sfp+0x64>
 800bf66:	4b16      	ldr	r3, [pc, #88]	; (800bfc0 <__sfp+0x88>)
 800bf68:	60e3      	str	r3, [r4, #12]
 800bf6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf6e:	6665      	str	r5, [r4, #100]	; 0x64
 800bf70:	f000 fe96 	bl	800cca0 <__retarget_lock_init_recursive>
 800bf74:	f7ff ff96 	bl	800bea4 <__sfp_lock_release>
 800bf78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf80:	6025      	str	r5, [r4, #0]
 800bf82:	61a5      	str	r5, [r4, #24]
 800bf84:	2208      	movs	r2, #8
 800bf86:	4629      	mov	r1, r5
 800bf88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf8c:	f002 fa4f 	bl	800e42e <memset>
 800bf90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf98:	4620      	mov	r0, r4
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9c:	3468      	adds	r4, #104	; 0x68
 800bf9e:	e7d9      	b.n	800bf54 <__sfp+0x1c>
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f002 fcbf 	bl	800e926 <__sfmoreglue>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	6030      	str	r0, [r6, #0]
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d1d5      	bne.n	800bf5c <__sfp+0x24>
 800bfb0:	f7ff ff78 	bl	800bea4 <__sfp_lock_release>
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	e7ee      	b.n	800bf98 <__sfp+0x60>
 800bfba:	bf00      	nop
 800bfbc:	080104e4 	.word	0x080104e4
 800bfc0:	ffff0001 	.word	0xffff0001

0800bfc4 <__smakebuf_r>:
 800bfc4:	898b      	ldrh	r3, [r1, #12]
 800bfc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfc8:	079d      	lsls	r5, r3, #30
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460c      	mov	r4, r1
 800bfce:	d507      	bpl.n	800bfe0 <__smakebuf_r+0x1c>
 800bfd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	2301      	movs	r3, #1
 800bfda:	6163      	str	r3, [r4, #20]
 800bfdc:	b002      	add	sp, #8
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	ab01      	add	r3, sp, #4
 800bfe2:	466a      	mov	r2, sp
 800bfe4:	f002 fcd4 	bl	800e990 <__swhatbuf_r>
 800bfe8:	9900      	ldr	r1, [sp, #0]
 800bfea:	4605      	mov	r5, r0
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7fe fd6d 	bl	800aacc <_malloc_r>
 800bff2:	b948      	cbnz	r0, 800c008 <__smakebuf_r+0x44>
 800bff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff8:	059a      	lsls	r2, r3, #22
 800bffa:	d4ef      	bmi.n	800bfdc <__smakebuf_r+0x18>
 800bffc:	f023 0303 	bic.w	r3, r3, #3
 800c000:	f043 0302 	orr.w	r3, r3, #2
 800c004:	81a3      	strh	r3, [r4, #12]
 800c006:	e7e3      	b.n	800bfd0 <__smakebuf_r+0xc>
 800c008:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <__smakebuf_r+0x7c>)
 800c00a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	6020      	str	r0, [r4, #0]
 800c010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c014:	81a3      	strh	r3, [r4, #12]
 800c016:	9b00      	ldr	r3, [sp, #0]
 800c018:	6163      	str	r3, [r4, #20]
 800c01a:	9b01      	ldr	r3, [sp, #4]
 800c01c:	6120      	str	r0, [r4, #16]
 800c01e:	b15b      	cbz	r3, 800c038 <__smakebuf_r+0x74>
 800c020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c024:	4630      	mov	r0, r6
 800c026:	f000 f85b 	bl	800c0e0 <_isatty_r>
 800c02a:	b128      	cbz	r0, 800c038 <__smakebuf_r+0x74>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f023 0303 	bic.w	r3, r3, #3
 800c032:	f043 0301 	orr.w	r3, r3, #1
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	89a0      	ldrh	r0, [r4, #12]
 800c03a:	4305      	orrs	r5, r0
 800c03c:	81a5      	strh	r5, [r4, #12]
 800c03e:	e7cd      	b.n	800bfdc <__smakebuf_r+0x18>
 800c040:	0800be8d 	.word	0x0800be8d

0800c044 <raise>:
 800c044:	4b02      	ldr	r3, [pc, #8]	; (800c050 <raise+0xc>)
 800c046:	4601      	mov	r1, r0
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	f002 bcc6 	b.w	800e9da <_raise_r>
 800c04e:	bf00      	nop
 800c050:	200000d4 	.word	0x200000d4

0800c054 <_kill_r>:
 800c054:	b538      	push	{r3, r4, r5, lr}
 800c056:	4d07      	ldr	r5, [pc, #28]	; (800c074 <_kill_r+0x20>)
 800c058:	2300      	movs	r3, #0
 800c05a:	4604      	mov	r4, r0
 800c05c:	4608      	mov	r0, r1
 800c05e:	4611      	mov	r1, r2
 800c060:	602b      	str	r3, [r5, #0]
 800c062:	f000 fe14 	bl	800cc8e <_kill>
 800c066:	1c43      	adds	r3, r0, #1
 800c068:	d102      	bne.n	800c070 <_kill_r+0x1c>
 800c06a:	682b      	ldr	r3, [r5, #0]
 800c06c:	b103      	cbz	r3, 800c070 <_kill_r+0x1c>
 800c06e:	6023      	str	r3, [r4, #0]
 800c070:	bd38      	pop	{r3, r4, r5, pc}
 800c072:	bf00      	nop
 800c074:	20000f24 	.word	0x20000f24

0800c078 <_write_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d07      	ldr	r5, [pc, #28]	; (800c098 <_write_r+0x20>)
 800c07c:	4604      	mov	r4, r0
 800c07e:	4608      	mov	r0, r1
 800c080:	4611      	mov	r1, r2
 800c082:	2200      	movs	r2, #0
 800c084:	602a      	str	r2, [r5, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	f000 fdf1 	bl	800cc6e <_write>
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	d102      	bne.n	800c096 <_write_r+0x1e>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	b103      	cbz	r3, 800c096 <_write_r+0x1e>
 800c094:	6023      	str	r3, [r4, #0]
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	20000f24 	.word	0x20000f24

0800c09c <_close_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d06      	ldr	r5, [pc, #24]	; (800c0b8 <_close_r+0x1c>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	f000 fde7 	bl	800cc7a <_close>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_close_r+0x1a>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_close_r+0x1a>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	20000f24 	.word	0x20000f24

0800c0bc <_fstat_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	; (800c0dc <_fstat_r+0x20>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	f000 fde4 	bl	800cc96 <_fstat>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d102      	bne.n	800c0d8 <_fstat_r+0x1c>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	b103      	cbz	r3, 800c0d8 <_fstat_r+0x1c>
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000f24 	.word	0x20000f24

0800c0e0 <_isatty_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	; (800c0fc <_isatty_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f000 fdca 	bl	800cc84 <_isatty>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_isatty_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_isatty_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20000f24 	.word	0x20000f24

0800c100 <_lseek_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	; (800c120 <_lseek_r+0x20>)
 800c104:	4604      	mov	r4, r0
 800c106:	4608      	mov	r0, r1
 800c108:	4611      	mov	r1, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	602a      	str	r2, [r5, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	f000 fdb6 	bl	800cc80 <_lseek>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_lseek_r+0x1e>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_lseek_r+0x1e>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	20000f24 	.word	0x20000f24

0800c124 <_read_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_read_r+0x20>)
 800c128:	4604      	mov	r4, r0
 800c12a:	4608      	mov	r0, r1
 800c12c:	4611      	mov	r1, r2
 800c12e:	2200      	movs	r2, #0
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f000 fd95 	bl	800cc62 <_read>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_read_r+0x1e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_read_r+0x1e>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	20000f24 	.word	0x20000f24

0800c148 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800c148:	4770      	bx	lr

0800c14a <fill_msg_bit_field>:
void fill_msg_bit_field(uint32_t *msg_ptr, const uint8_t field_val, uint8_t field_len, uint8_t *pos) {
 800c14a:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800c14c:	781d      	ldrb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800c14e:	e017      	b.n	800c180 <fill_msg_bit_field+0x36>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800c150:	f04f 0c01 	mov.w	ip, #1
 800c154:	fa0c fe04 	lsl.w	lr, ip, r4
 800c158:	6804      	ldr	r4, [r0, #0]
 800c15a:	ea24 040e 	bic.w	r4, r4, lr
 800c15e:	6004      	str	r4, [r0, #0]
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800c160:	f893 e000 	ldrb.w	lr, [r3]
 800c164:	ebae 0e05 	sub.w	lr, lr, r5
 800c168:	fa0c fc0e 	lsl.w	ip, ip, lr
 800c16c:	ea01 0c0c 	and.w	ip, r1, ip
 800c170:	fa0c fc05 	lsl.w	ip, ip, r5
 800c174:	ea44 040c 	orr.w	r4, r4, ip
 800c178:	6004      	str	r4, [r0, #0]
        (*pos)++;
 800c17a:	781c      	ldrb	r4, [r3, #0]
 800c17c:	3401      	adds	r4, #1
 800c17e:	701c      	strb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800c180:	781c      	ldrb	r4, [r3, #0]
 800c182:	eb02 0c05 	add.w	ip, r2, r5
 800c186:	4564      	cmp	r4, ip
 800c188:	dbe2      	blt.n	800c150 <fill_msg_bit_field+0x6>
}
 800c18a:	bd30      	pop	{r4, r5, pc}

0800c18c <extract_msg_bit_field>:
{
 800c18c:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800c18e:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800c190:	e01a      	b.n	800c1c8 <extract_msg_bit_field+0x3c>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800c192:	ebac 0c04 	sub.w	ip, ip, r4
 800c196:	2501      	movs	r5, #1
 800c198:	fa05 fc0c 	lsl.w	ip, r5, ip
 800c19c:	f891 e000 	ldrb.w	lr, [r1]
 800c1a0:	ea2e 0c0c 	bic.w	ip, lr, ip
 800c1a4:	f881 c000 	strb.w	ip, [r1]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800c1a8:	f893 e000 	ldrb.w	lr, [r3]
 800c1ac:	fa05 fe0e 	lsl.w	lr, r5, lr
 800c1b0:	6805      	ldr	r5, [r0, #0]
 800c1b2:	ea05 0e0e 	and.w	lr, r5, lr
 800c1b6:	fa2e fe04 	lsr.w	lr, lr, r4
 800c1ba:	ea4c 0c0e 	orr.w	ip, ip, lr
 800c1be:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 800c1c2:	781d      	ldrb	r5, [r3, #0]
 800c1c4:	3501      	adds	r5, #1
 800c1c6:	701d      	strb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800c1c8:	f893 c000 	ldrb.w	ip, [r3]
 800c1cc:	1915      	adds	r5, r2, r4
 800c1ce:	45ac      	cmp	ip, r5
 800c1d0:	dbdf      	blt.n	800c192 <extract_msg_bit_field+0x6>
}
 800c1d2:	bd30      	pop	{r4, r5, pc}

0800c1d4 <reverse>:
{
 800c1d4:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800c1d6:	461a      	mov	r2, r3
    while( pos < 7 ) {
 800c1d8:	e007      	b.n	800c1ea <reverse+0x16>
        bit = input & BIT(0);
 800c1da:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800c1de:	430b      	orrs	r3, r1
        output = output << 1;
 800c1e0:	005b      	lsls	r3, r3, #1
 800c1e2:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800c1e4:	0840      	lsrs	r0, r0, #1
        pos++;
 800c1e6:	3201      	adds	r2, #1
 800c1e8:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 800c1ea:	2a06      	cmp	r2, #6
 800c1ec:	d9f5      	bls.n	800c1da <reverse+0x6>
    bit = input & BIT(0);
 800c1ee:	f000 0001 	and.w	r0, r0, #1
}
 800c1f2:	4318      	orrs	r0, r3
 800c1f4:	4770      	bx	lr

0800c1f6 <check_rssi>:
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 800c1f6:	f110 0f46 	cmn.w	r0, #70	; 0x46
 800c1fa:	da26      	bge.n	800c24a <check_rssi+0x54>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 800c1fc:	b283      	uxth	r3, r0
 800c1fe:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800c202:	b292      	uxth	r2, r2
 800c204:	2a09      	cmp	r2, #9
 800c206:	d922      	bls.n	800c24e <check_rssi+0x58>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 800c208:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 800c20c:	b292      	uxth	r2, r2
 800c20e:	2a09      	cmp	r2, #9
 800c210:	d91f      	bls.n	800c252 <check_rssi+0x5c>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 800c212:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800c216:	b292      	uxth	r2, r2
 800c218:	2a09      	cmp	r2, #9
 800c21a:	d91c      	bls.n	800c256 <check_rssi+0x60>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 800c21c:	f103 0269 	add.w	r2, r3, #105	; 0x69
 800c220:	b292      	uxth	r2, r2
 800c222:	2a04      	cmp	r2, #4
 800c224:	d919      	bls.n	800c25a <check_rssi+0x64>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 800c226:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800c22a:	b292      	uxth	r2, r2
 800c22c:	2a04      	cmp	r2, #4
 800c22e:	d916      	bls.n	800c25e <check_rssi+0x68>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 800c230:	f103 0273 	add.w	r2, r3, #115	; 0x73
 800c234:	b292      	uxth	r2, r2
 800c236:	2a04      	cmp	r2, #4
 800c238:	d913      	bls.n	800c262 <check_rssi+0x6c>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 800c23a:	3378      	adds	r3, #120	; 0x78
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d911      	bls.n	800c266 <check_rssi+0x70>
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
 800c242:	f110 0f78 	cmn.w	r0, #120	; 0x78
 800c246:	db10      	blt.n	800c26a <check_rssi+0x74>
}
 800c248:	4770      	bx	lr
        return LIGHT_UP_EIGHT;
 800c24a:	2008      	movs	r0, #8
 800c24c:	4770      	bx	lr
        return LIGHT_UP_SEVEN;
 800c24e:	2007      	movs	r0, #7
 800c250:	4770      	bx	lr
        return LIGHT_UP_SIX;
 800c252:	2006      	movs	r0, #6
 800c254:	4770      	bx	lr
        return LIGHT_UP_FIVE;
 800c256:	2005      	movs	r0, #5
 800c258:	4770      	bx	lr
        return LIGHT_UP_FOUR;
 800c25a:	2004      	movs	r0, #4
 800c25c:	4770      	bx	lr
        return LIGHT_UP_THREE;
 800c25e:	2003      	movs	r0, #3
 800c260:	4770      	bx	lr
        return LIGHT_UP_TWO;
 800c262:	2002      	movs	r0, #2
 800c264:	4770      	bx	lr
        return LIGHT_UP_ONE;
 800c266:	2001      	movs	r0, #1
 800c268:	4770      	bx	lr
        return LIGHT_UP_ZERO;
 800c26a:	2000      	movs	r0, #0
}
 800c26c:	4770      	bx	lr

0800c26e <arch_printk_char_out>:
}
 800c26e:	2000      	movs	r0, #0
 800c270:	4770      	bx	lr

0800c272 <str_out>:
{
 800c272:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800c274:	680c      	ldr	r4, [r1, #0]
 800c276:	b154      	cbz	r4, 800c28e <str_out+0x1c>
 800c278:	688a      	ldr	r2, [r1, #8]
 800c27a:	684b      	ldr	r3, [r1, #4]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	da06      	bge.n	800c28e <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800c280:	3b01      	subs	r3, #1
 800c282:	429a      	cmp	r2, r3
 800c284:	d008      	beq.n	800c298 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800c286:	1c53      	adds	r3, r2, #1
 800c288:	608b      	str	r3, [r1, #8]
 800c28a:	54a0      	strb	r0, [r4, r2]
 800c28c:	e002      	b.n	800c294 <str_out+0x22>
		ctx->count++;
 800c28e:	688b      	ldr	r3, [r1, #8]
 800c290:	3301      	adds	r3, #1
 800c292:	608b      	str	r3, [r1, #8]
}
 800c294:	bc10      	pop	{r4}
 800c296:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800c298:	1c53      	adds	r3, r2, #1
 800c29a:	608b      	str	r3, [r1, #8]
 800c29c:	2300      	movs	r3, #0
 800c29e:	54a3      	strb	r3, [r4, r2]
 800c2a0:	e7f8      	b.n	800c294 <str_out+0x22>

0800c2a2 <printk>:
{
 800c2a2:	b40f      	push	{r0, r1, r2, r3}
 800c2a4:	b500      	push	{lr}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	a904      	add	r1, sp, #16
 800c2aa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800c2ae:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800c2b0:	f7f6 fa56 	bl	8002760 <vprintk>
}
 800c2b4:	b003      	add	sp, #12
 800c2b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2ba:	b004      	add	sp, #16
 800c2bc:	4770      	bx	lr

0800c2be <snprintk>:
{
 800c2be:	b40c      	push	{r2, r3}
 800c2c0:	b500      	push	{lr}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	ab04      	add	r3, sp, #16
 800c2c6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800c2ca:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800c2cc:	f7f6 fa58 	bl	8002780 <vsnprintk>
}
 800c2d0:	b003      	add	sp, #12
 800c2d2:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2d6:	b002      	add	sp, #8
 800c2d8:	4770      	bx	lr

0800c2da <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800c2da:	b508      	push	{r3, lr}
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	47a0      	blx	r4
	return z_impl_z_current_get();
 800c2e6:	f7fd fe25 	bl	8009f34 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800c2ea:	f7f8 fb8b 	bl	8004a04 <z_impl_k_thread_abort>

0800c2ee <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800c2ee:	1d13      	adds	r3, r2, #4
 800c2f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c2f4:	b9d3      	cbnz	r3, 800c32c <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	fa03 fc02 	lsl.w	ip, r3, r2
 800c2fc:	68c3      	ldr	r3, [r0, #12]
 800c2fe:	ea43 030c 	orr.w	r3, r3, ip
 800c302:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800c304:	3204      	adds	r2, #4
 800c306:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800c30a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800c30e:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
 800c310:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c314:	d306      	bcc.n	800c324 <free_list_add_bidx+0x36>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 800c316:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 800c318:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800c31a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c31e:	d303      	bcc.n	800c328 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800c320:	60d9      	str	r1, [r3, #12]
 800c322:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800c324:	8099      	strh	r1, [r3, #4]
 800c326:	e7f7      	b.n	800c318 <free_list_add_bidx+0x2a>
 800c328:	80d9      	strh	r1, [r3, #6]
 800c32a:	4770      	bx	lr
{
 800c32c:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 800c32e:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 800c332:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800c334:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c338:	d31c      	bcc.n	800c374 <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 800c33a:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 800c33e:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 800c342:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c346:	d318      	bcc.n	800c37a <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 800c348:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 800c34c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800c34e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c352:	d315      	bcc.n	800c380 <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 800c354:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 800c358:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 800c35c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800c35e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c362:	d310      	bcc.n	800c386 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 800c364:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 800c366:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800c368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c36c:	d30d      	bcc.n	800c38a <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 800c36e:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 800c372:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 800c374:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800c378:	e7e1      	b.n	800c33e <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 800c37a:	f8ae 2004 	strh.w	r2, [lr, #4]
 800c37e:	e7e5      	b.n	800c34c <free_list_add_bidx+0x5e>
 800c380:	f8ae 3006 	strh.w	r3, [lr, #6]
 800c384:	e7e8      	b.n	800c358 <free_list_add_bidx+0x6a>
 800c386:	80d1      	strh	r1, [r2, #6]
 800c388:	e7ed      	b.n	800c366 <free_list_add_bidx+0x78>
 800c38a:	f8ac 1004 	strh.w	r1, [ip, #4]
 800c38e:	e7f0      	b.n	800c372 <free_list_add_bidx+0x84>

0800c390 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800c390:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 800c392:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
 800c394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c398:	d307      	bcc.n	800c3aa <free_list_add+0x1a>
	void *cmem = &buf[c];
 800c39a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 800c39e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800c3a0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 800c3a2:	2a01      	cmp	r2, #1
 800c3a4:	d002      	beq.n	800c3ac <free_list_add+0x1c>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	e000      	b.n	800c3ac <free_list_add+0x1c>
 800c3aa:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800c3ac:	b9a2      	cbnz	r2, 800c3d8 <free_list_add+0x48>
	void *cmem = &buf[c];
 800c3ae:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 800c3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3b6:	d310      	bcc.n	800c3da <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800c3b8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800c3ba:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800c3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3c0:	d30d      	bcc.n	800c3de <free_list_add+0x4e>
 800c3c2:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800c3c4:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800c3c6:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800c3ca:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800c3cc:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800c3d0:	f1c2 021f 	rsb	r2, r2, #31
 800c3d4:	f7ff ff8b 	bl	800c2ee <free_list_add_bidx>
	}
}
 800c3d8:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 800c3da:	8852      	ldrh	r2, [r2, #2]
 800c3dc:	e7ed      	b.n	800c3ba <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 800c3de:	2304      	movs	r3, #4
 800c3e0:	e7f0      	b.n	800c3c4 <free_list_add+0x34>

0800c3e2 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800c3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e4:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 800c3e6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800c3ea:	d324      	bcc.n	800c436 <sys_heap_init+0x54>
 800c3ec:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800c3f0:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800c3f4:	1dc8      	adds	r0, r1, #7
 800c3f6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800c3fa:	448c      	add	ip, r1
 800c3fc:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800c400:	ebac 0c00 	sub.w	ip, ip, r0
 800c404:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800c408:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800c40a:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 800c410:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c414:	d312      	bcc.n	800c43c <sys_heap_init+0x5a>
 800c416:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800c418:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800c41a:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 800c41e:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800c420:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800c424:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800c428:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800c42c:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800c42e:	1dde      	adds	r6, r3, #7
 800c430:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800c432:	2300      	movs	r3, #0
 800c434:	e009      	b.n	800c44a <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 800c436:	f04f 0c04 	mov.w	ip, #4
 800c43a:	e7d9      	b.n	800c3f0 <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 800c43c:	2304      	movs	r3, #4
 800c43e:	e7eb      	b.n	800c418 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 800c440:	1d1a      	adds	r2, r3, #4
 800c442:	2400      	movs	r4, #0
 800c444:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800c448:	3301      	adds	r3, #1
 800c44a:	4573      	cmp	r3, lr
 800c44c:	dbf8      	blt.n	800c440 <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800c44e:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 800c450:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c454:	d336      	bcc.n	800c4c4 <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 800c456:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 800c458:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c45c:	d334      	bcc.n	800c4c8 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 800c45e:	2300      	movs	r3, #0
 800c460:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 800c462:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c466:	d332      	bcc.n	800c4ce <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800c468:	6843      	ldr	r3, [r0, #4]
 800c46a:	f043 0301 	orr.w	r3, r3, #1
 800c46e:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800c470:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800c472:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 800c474:	f026 0307 	bic.w	r3, r6, #7
 800c478:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 800c47a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800c47e:	d32b      	bcc.n	800c4d8 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 800c480:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 800c482:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800c484:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c488:	d328      	bcc.n	800c4dc <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 800c48a:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 800c48c:	f02c 0307 	bic.w	r3, ip, #7
 800c490:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 800c492:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800c494:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c498:	d322      	bcc.n	800c4e0 <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 800c49a:	2400      	movs	r4, #0
 800c49c:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 800c4a0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800c4a2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800c4a6:	d31f      	bcc.n	800c4e8 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 800c4a8:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 800c4aa:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 800c4ae:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800c4b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c4b4:	d31a      	bcc.n	800c4ec <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	f042 0201 	orr.w	r2, r2, #1
 800c4bc:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800c4be:	f7ff ff67 	bl	800c390 <free_list_add>
}
 800c4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 800c4c4:	8043      	strh	r3, [r0, #2]
 800c4c6:	e7c7      	b.n	800c458 <sys_heap_init+0x76>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	8003      	strh	r3, [r0, #0]
 800c4cc:	e7c9      	b.n	800c462 <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800c4ce:	8843      	ldrh	r3, [r0, #2]
 800c4d0:	f043 0301 	orr.w	r3, r3, #1
 800c4d4:	8043      	strh	r3, [r0, #2]
 800c4d6:	e7cb      	b.n	800c470 <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 800c4d8:	8067      	strh	r7, [r4, #2]
 800c4da:	e7d2      	b.n	800c482 <sys_heap_init+0xa0>
 800c4dc:	52c1      	strh	r1, [r0, r3]
 800c4de:	e7d5      	b.n	800c48c <sys_heap_init+0xaa>
 800c4e0:	2400      	movs	r4, #0
 800c4e2:	f8ac 4002 	strh.w	r4, [ip, #2]
 800c4e6:	e7db      	b.n	800c4a0 <sys_heap_init+0xbe>
 800c4e8:	52c2      	strh	r2, [r0, r3]
 800c4ea:	e7de      	b.n	800c4aa <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800c4ec:	885a      	ldrh	r2, [r3, #2]
 800c4ee:	f042 0201 	orr.w	r2, r2, #1
 800c4f2:	805a      	strh	r2, [r3, #2]
 800c4f4:	e7e3      	b.n	800c4be <sys_heap_init+0xdc>

0800c4f6 <outs>:
{
 800c4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	4614      	mov	r4, r2
 800c500:	4698      	mov	r8, r3
	size_t count = 0;
 800c502:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800c504:	e006      	b.n	800c514 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800c506:	4631      	mov	r1, r6
 800c508:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c50c:	47b8      	blx	r7
		if (rc < 0) {
 800c50e:	2800      	cmp	r0, #0
 800c510:	db09      	blt.n	800c526 <outs+0x30>
		++count;
 800c512:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800c514:	4544      	cmp	r4, r8
 800c516:	d3f6      	bcc.n	800c506 <outs+0x10>
 800c518:	f1b8 0f00 	cmp.w	r8, #0
 800c51c:	d102      	bne.n	800c524 <outs+0x2e>
 800c51e:	7823      	ldrb	r3, [r4, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1f0      	bne.n	800c506 <outs+0x10>
	return (int)count;
 800c524:	4628      	mov	r0, r5
}
 800c526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c52a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800c52a:	4770      	bx	lr

0800c52c <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800c52c:	2000      	movs	r0, #0
 800c52e:	4770      	bx	lr

0800c530 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 800c530:	2300      	movs	r3, #0
 800c532:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 800c534:	6003      	str	r3, [r0, #0]
}
 800c536:	4770      	bx	lr

0800c538 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 800c538:	6803      	ldr	r3, [r0, #0]
 800c53a:	b12b      	cbz	r3, 800c548 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 800c53c:	6843      	ldr	r3, [r0, #4]
 800c53e:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 800c540:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	600b      	str	r3, [r1, #0]
}
 800c546:	4770      	bx	lr
		list->head = msg;
 800c548:	6001      	str	r1, [r0, #0]
 800c54a:	e7f9      	b.n	800c540 <log_list_add_tail+0x8>

0800c54c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	4770      	bx	lr

0800c550 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 800c550:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 800c552:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 800c554:	b108      	cbz	r0, 800c55a <log_list_head_get+0xa>
		list->head = list->head->next;
 800c556:	6802      	ldr	r2, [r0, #0]
 800c558:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 800c55a:	4770      	bx	lr

0800c55c <dummy_timestamp>:
}
 800c55c:	2000      	movs	r0, #0
 800c55e:	4770      	bx	lr

0800c560 <msg_filter_check>:
}
 800c560:	2001      	movs	r0, #1
 800c562:	4770      	bx	lr

0800c564 <default_lf_get_timestamp>:
{
 800c564:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800c566:	f001 fea1 	bl	800e2ac <z_impl_k_uptime_ticks>
 800c56a:	220a      	movs	r2, #10
 800c56c:	2300      	movs	r3, #0
 800c56e:	f7f4 fa35 	bl	80009dc <__aeabi_uldivmod>
}
 800c572:	bd08      	pop	{r3, pc}

0800c574 <block_on_alloc>:
}
 800c574:	2000      	movs	r0, #0
 800c576:	4770      	bx	lr

0800c578 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 800c578:	2901      	cmp	r1, #1
 800c57a:	d902      	bls.n	800c582 <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 800c57c:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 800c57e:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 800c580:	e006      	b.n	800c590 <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
 800c582:	3104      	adds	r1, #4
 800c584:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c588:	6888      	ldr	r0, [r1, #8]
 800c58a:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 800c58c:	3907      	subs	r1, #7
		cont = cont->next;
 800c58e:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
 800c590:	2906      	cmp	r1, #6
 800c592:	d8fb      	bhi.n	800c58c <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
 800c594:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c598:	6848      	ldr	r0, [r1, #4]
}
 800c59a:	4770      	bx	lr

0800c59c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 800c59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5a0:	461c      	mov	r4, r3
 800c5a2:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800c5a6:	8903      	ldrh	r3, [r0, #8]
 800c5a8:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 800c5ac:	42a3      	cmp	r3, r4
 800c5ae:	d91f      	bls.n	800c5f0 <log_msg_hexdump_data_op+0x54>
 800c5b0:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 800c5b2:	6811      	ldr	r1, [r2, #0]
 800c5b4:	4421      	add	r1, r4
 800c5b6:	4299      	cmp	r1, r3
 800c5b8:	d901      	bls.n	800c5be <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 800c5ba:	1b19      	subs	r1, r3, r4
 800c5bc:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 800c5be:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800c5c0:	2b0c      	cmp	r3, #12
 800c5c2:	d919      	bls.n	800c5f8 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 800c5c4:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 800c5c8:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 800c5ca:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d91e      	bls.n	800c60e <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800c5d0:	42bb      	cmp	r3, r7
 800c5d2:	bf28      	it	cs
 800c5d4:	463b      	movcs	r3, r7
 800c5d6:	461d      	mov	r5, r3

		if (put_op) {
 800c5d8:	f1b9 0f00 	cmp.w	r9, #0
 800c5dc:	d010      	beq.n	800c600 <log_msg_hexdump_data_op+0x64>
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4641      	mov	r1, r8
 800c5e2:	eb0c 0004 	add.w	r0, ip, r4
 800c5e6:	f001 ff14 	bl	800e412 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 800c5ea:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800c5ec:	44a8      	add	r8, r5
 800c5ee:	e021      	b.n	800c634 <log_msg_hexdump_data_op+0x98>
		*length = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 800c5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 800c5f8:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 800c5fc:	2600      	movs	r6, #0
 800c5fe:	e7e5      	b.n	800c5cc <log_msg_hexdump_data_op+0x30>
 800c600:	461a      	mov	r2, r3
 800c602:	eb0c 0104 	add.w	r1, ip, r4
 800c606:	4640      	mov	r0, r8
 800c608:	f001 ff03 	bl	800e412 <memcpy>
 800c60c:	e7ed      	b.n	800c5ea <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 800c60e:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 800c610:	b91e      	cbnz	r6, 800c61a <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 800c612:	6946      	ldr	r6, [r0, #20]
 800c614:	e001      	b.n	800c61a <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 800c616:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 800c618:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 800c61a:	2c1b      	cmp	r4, #27
 800c61c:	d8fb      	bhi.n	800c616 <log_msg_hexdump_data_op+0x7a>
 800c61e:	e009      	b.n	800c634 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 800c620:	1931      	adds	r1, r6, r4
 800c622:	462a      	mov	r2, r5
 800c624:	3104      	adds	r1, #4
 800c626:	4640      	mov	r0, r8
 800c628:	f001 fef3 	bl	800e412 <memcpy>
		cont = cont->next;
 800c62c:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 800c62e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800c630:	44a8      	add	r8, r5
		offset = 0;
 800c632:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 800c634:	2f00      	cmp	r7, #0
 800c636:	d0dd      	beq.n	800c5f4 <log_msg_hexdump_data_op+0x58>
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d0db      	beq.n	800c5f4 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 800c63c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800c640:	42bd      	cmp	r5, r7
 800c642:	bf28      	it	cs
 800c644:	463d      	movcs	r5, r7
		if (put_op) {
 800c646:	f1b9 0f00 	cmp.w	r9, #0
 800c64a:	d0e9      	beq.n	800c620 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 800c64c:	1930      	adds	r0, r6, r4
 800c64e:	462a      	mov	r2, r5
 800c650:	4641      	mov	r1, r8
 800c652:	3004      	adds	r0, #4
 800c654:	f001 fedd 	bl	800e412 <memcpy>
 800c658:	e7e8      	b.n	800c62c <log_msg_hexdump_data_op+0x90>

0800c65a <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 800c65a:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800c65c:	f3bf 8f5b 	dmb	ish
 800c660:	e850 3f00 	ldrex	r3, [r0]
 800c664:	3301      	adds	r3, #1
 800c666:	e840 3200 	strex	r2, r3, [r0]
 800c66a:	2a00      	cmp	r2, #0
 800c66c:	d1f8      	bne.n	800c660 <log_msg_get+0x6>
 800c66e:	f3bf 8f5b 	dmb	ish
}
 800c672:	4770      	bx	lr

0800c674 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 800c674:	7a40      	ldrb	r0, [r0, #9]
}
 800c676:	0900      	lsrs	r0, r0, #4
 800c678:	4770      	bx	lr

0800c67a <log_msg_arg_get>:
{
 800c67a:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800c67c:	7a43      	ldrb	r3, [r0, #9]
 800c67e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 800c682:	d20a      	bcs.n	800c69a <log_msg_arg_get+0x20>
 800c684:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800c686:	2a03      	cmp	r2, #3
 800c688:	d804      	bhi.n	800c694 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 800c68a:	3104      	adds	r1, #4
 800c68c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c690:	6840      	ldr	r0, [r0, #4]
 800c692:	e003      	b.n	800c69c <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 800c694:	f7ff ff70 	bl	800c578 <cont_arg_get>
 800c698:	e000      	b.n	800c69c <log_msg_arg_get+0x22>
		return 0;
 800c69a:	2000      	movs	r0, #0
}
 800c69c:	bd08      	pop	{r3, pc}

0800c69e <log_msg_str_get>:
}
 800c69e:	6900      	ldr	r0, [r0, #16]
 800c6a0:	4770      	bx	lr

0800c6a2 <log_msg_put>:
{
 800c6a2:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 800c6a4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800c6a6:	f3bf 8f5b 	dmb	ish
 800c6aa:	e853 2f00 	ldrex	r2, [r3]
 800c6ae:	3a01      	subs	r2, #1
 800c6b0:	e843 2100 	strex	r1, r2, [r3]
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	d1f8      	bne.n	800c6aa <log_msg_put+0x8>
 800c6b8:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 800c6bc:	6843      	ldr	r3, [r0, #4]
 800c6be:	b103      	cbz	r3, 800c6c2 <log_msg_put+0x20>
}
 800c6c0:	bd08      	pop	{r3, pc}
		msg_free(msg);
 800c6c2:	f7f7 f9b5 	bl	8003a30 <msg_free>
}
 800c6c6:	e7fb      	b.n	800c6c0 <log_msg_put+0x1e>

0800c6c8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	9400      	str	r4, [sp, #0]
 800c6d0:	f7ff ff64 	bl	800c59c <log_msg_hexdump_data_op>
}
 800c6d4:	b002      	add	sp, #8
 800c6d6:	bd10      	pop	{r4, pc}

0800c6d8 <buffer_write>:
{
 800c6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6da:	4607      	mov	r7, r0
 800c6dc:	460d      	mov	r5, r1
 800c6de:	4614      	mov	r4, r2
 800c6e0:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800c6e2:	4632      	mov	r2, r6
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b8      	blx	r7
		buf += processed;
 800c6ea:	4405      	add	r5, r0
	} while (len != 0);
 800c6ec:	1a24      	subs	r4, r4, r0
 800c6ee:	d1f8      	bne.n	800c6e2 <buffer_write+0xa>
}
 800c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6f2 <color_prefix>:
{
 800c6f2:	b508      	push	{r3, lr}
 800c6f4:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f7f7 fa32 	bl	8003b60 <color_print>
}
 800c6fc:	bd08      	pop	{r3, pc}

0800c6fe <color_postfix>:
{
 800c6fe:	b508      	push	{r3, lr}
 800c700:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800c702:	2200      	movs	r2, #0
 800c704:	f7f7 fa2c 	bl	8003b60 <color_print>
}
 800c708:	bd08      	pop	{r3, pc}

0800c70a <postfix_print>:
{
 800c70a:	b538      	push	{r3, r4, r5, lr}
 800c70c:	4605      	mov	r5, r0
 800c70e:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800c710:	f001 0101 	and.w	r1, r1, #1
 800c714:	f7ff fff3 	bl	800c6fe <color_postfix>
	newline_print(output, flags);
 800c718:	4621      	mov	r1, r4
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7f7 fa36 	bl	8003b8c <newline_print>
}
 800c720:	bd38      	pop	{r3, r4, r5, pc}

0800c722 <prefix_print>:
{
 800c722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c726:	b083      	sub	sp, #12
 800c728:	4604      	mov	r4, r0
 800c72a:	4615      	mov	r5, r2
 800c72c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800c730:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800c734:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 800c738:	f011 0702 	ands.w	r7, r1, #2
 800c73c:	d113      	bne.n	800c766 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
 800c73e:	4632      	mov	r2, r6
 800c740:	4649      	mov	r1, r9
 800c742:	4620      	mov	r0, r4
 800c744:	f7ff ffd5 	bl	800c6f2 <color_prefix>
	length += ids_print(output, level_on, func_on,
 800c748:	9601      	str	r6, [sp, #4]
 800c74a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800c754:	462a      	mov	r2, r5
 800c756:	4641      	mov	r1, r8
 800c758:	4620      	mov	r0, r4
 800c75a:	f7f7 fa8d 	bl	8003c78 <ids_print>
}
 800c75e:	4438      	add	r0, r7
 800c760:	b003      	add	sp, #12
 800c762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
 800c766:	461a      	mov	r2, r3
 800c768:	f7f7 f9b4 	bl	8003ad4 <timestamp_print>
 800c76c:	4607      	mov	r7, r0
 800c76e:	e7e6      	b.n	800c73e <prefix_print+0x1c>

0800c770 <std_print>:
{
 800c770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	b08e      	sub	sp, #56	; 0x38
 800c776:	af0e      	add	r7, sp, #56	; 0x38
 800c778:	4606      	mov	r6, r0
 800c77a:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 800c77c:	f7ff ff8f 	bl	800c69e <log_msg_str_get>
 800c780:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 800c782:	4630      	mov	r0, r6
 800c784:	f7ff ff76 	bl	800c674 <log_msg_nargs_get>
 800c788:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800c78a:	0083      	lsls	r3, r0, #2
 800c78c:	3307      	adds	r3, #7
 800c78e:	f023 0307 	bic.w	r3, r3, #7
 800c792:	ebad 0d03 	sub.w	sp, sp, r3
 800c796:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800c798:	2400      	movs	r4, #0
 800c79a:	e006      	b.n	800c7aa <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
 800c79c:	4621      	mov	r1, r4
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f7ff ff6b 	bl	800c67a <log_msg_arg_get>
 800c7a4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 800c7a8:	3401      	adds	r4, #1
 800c7aa:	4544      	cmp	r4, r8
 800c7ac:	d3f6      	bcc.n	800c79c <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff ff60 	bl	800c674 <log_msg_nargs_get>
 800c7b4:	280f      	cmp	r0, #15
 800c7b6:	d815      	bhi.n	800c7e4 <std_print+0x74>
 800c7b8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c7bc:	00170010 	.word	0x00170010
 800c7c0:	0024001d 	.word	0x0024001d
 800c7c4:	0038002d 	.word	0x0038002d
 800c7c8:	00540045 	.word	0x00540045
 800c7cc:	00780065 	.word	0x00780065
 800c7d0:	00a4008d 	.word	0x00a4008d
 800c7d4:	00d800bd 	.word	0x00d800bd
 800c7d8:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
 800c7dc:	4651      	mov	r1, sl
 800c7de:	4648      	mov	r0, r9
 800c7e0:	f7f7 f966 	bl	8003ab0 <print_formatted>
}
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 800c7ea:	682a      	ldr	r2, [r5, #0]
 800c7ec:	4651      	mov	r1, sl
 800c7ee:	4648      	mov	r0, r9
 800c7f0:	f7f7 f95e 	bl	8003ab0 <print_formatted>
		break;
 800c7f4:	e7f6      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
 800c7f6:	686b      	ldr	r3, [r5, #4]
 800c7f8:	682a      	ldr	r2, [r5, #0]
 800c7fa:	4651      	mov	r1, sl
 800c7fc:	4648      	mov	r0, r9
 800c7fe:	f7f7 f957 	bl	8003ab0 <print_formatted>
		break;
 800c802:	e7ef      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
 800c804:	686b      	ldr	r3, [r5, #4]
 800c806:	682a      	ldr	r2, [r5, #0]
 800c808:	68a9      	ldr	r1, [r5, #8]
 800c80a:	9100      	str	r1, [sp, #0]
 800c80c:	4651      	mov	r1, sl
 800c80e:	4648      	mov	r0, r9
 800c810:	f7f7 f94e 	bl	8003ab0 <print_formatted>
		break;
 800c814:	e7e6      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c816:	686b      	ldr	r3, [r5, #4]
 800c818:	682a      	ldr	r2, [r5, #0]
 800c81a:	68e9      	ldr	r1, [r5, #12]
 800c81c:	9101      	str	r1, [sp, #4]
 800c81e:	68a9      	ldr	r1, [r5, #8]
 800c820:	9100      	str	r1, [sp, #0]
 800c822:	4651      	mov	r1, sl
 800c824:	4648      	mov	r0, r9
 800c826:	f7f7 f943 	bl	8003ab0 <print_formatted>
		break;
 800c82a:	e7db      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c82c:	686b      	ldr	r3, [r5, #4]
 800c82e:	682a      	ldr	r2, [r5, #0]
 800c830:	6929      	ldr	r1, [r5, #16]
 800c832:	9102      	str	r1, [sp, #8]
 800c834:	68e9      	ldr	r1, [r5, #12]
 800c836:	9101      	str	r1, [sp, #4]
 800c838:	68a9      	ldr	r1, [r5, #8]
 800c83a:	9100      	str	r1, [sp, #0]
 800c83c:	4651      	mov	r1, sl
 800c83e:	4648      	mov	r0, r9
 800c840:	f7f7 f936 	bl	8003ab0 <print_formatted>
		break;
 800c844:	e7ce      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c846:	686b      	ldr	r3, [r5, #4]
 800c848:	682a      	ldr	r2, [r5, #0]
 800c84a:	6969      	ldr	r1, [r5, #20]
 800c84c:	9103      	str	r1, [sp, #12]
 800c84e:	6929      	ldr	r1, [r5, #16]
 800c850:	9102      	str	r1, [sp, #8]
 800c852:	68e9      	ldr	r1, [r5, #12]
 800c854:	9101      	str	r1, [sp, #4]
 800c856:	68a9      	ldr	r1, [r5, #8]
 800c858:	9100      	str	r1, [sp, #0]
 800c85a:	4651      	mov	r1, sl
 800c85c:	4648      	mov	r0, r9
 800c85e:	f7f7 f927 	bl	8003ab0 <print_formatted>
		break;
 800c862:	e7bf      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c864:	686b      	ldr	r3, [r5, #4]
 800c866:	682a      	ldr	r2, [r5, #0]
 800c868:	69a9      	ldr	r1, [r5, #24]
 800c86a:	9104      	str	r1, [sp, #16]
 800c86c:	6969      	ldr	r1, [r5, #20]
 800c86e:	9103      	str	r1, [sp, #12]
 800c870:	6929      	ldr	r1, [r5, #16]
 800c872:	9102      	str	r1, [sp, #8]
 800c874:	68e9      	ldr	r1, [r5, #12]
 800c876:	9101      	str	r1, [sp, #4]
 800c878:	68a9      	ldr	r1, [r5, #8]
 800c87a:	9100      	str	r1, [sp, #0]
 800c87c:	4651      	mov	r1, sl
 800c87e:	4648      	mov	r0, r9
 800c880:	f7f7 f916 	bl	8003ab0 <print_formatted>
		break;
 800c884:	e7ae      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c886:	686b      	ldr	r3, [r5, #4]
 800c888:	682a      	ldr	r2, [r5, #0]
 800c88a:	69e9      	ldr	r1, [r5, #28]
 800c88c:	9105      	str	r1, [sp, #20]
 800c88e:	69a9      	ldr	r1, [r5, #24]
 800c890:	9104      	str	r1, [sp, #16]
 800c892:	6969      	ldr	r1, [r5, #20]
 800c894:	9103      	str	r1, [sp, #12]
 800c896:	6929      	ldr	r1, [r5, #16]
 800c898:	9102      	str	r1, [sp, #8]
 800c89a:	68e9      	ldr	r1, [r5, #12]
 800c89c:	9101      	str	r1, [sp, #4]
 800c89e:	68a9      	ldr	r1, [r5, #8]
 800c8a0:	9100      	str	r1, [sp, #0]
 800c8a2:	4651      	mov	r1, sl
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	f7f7 f903 	bl	8003ab0 <print_formatted>
		break;
 800c8aa:	e79b      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c8ac:	686b      	ldr	r3, [r5, #4]
 800c8ae:	682a      	ldr	r2, [r5, #0]
 800c8b0:	6a29      	ldr	r1, [r5, #32]
 800c8b2:	9106      	str	r1, [sp, #24]
 800c8b4:	69e9      	ldr	r1, [r5, #28]
 800c8b6:	9105      	str	r1, [sp, #20]
 800c8b8:	69a9      	ldr	r1, [r5, #24]
 800c8ba:	9104      	str	r1, [sp, #16]
 800c8bc:	6969      	ldr	r1, [r5, #20]
 800c8be:	9103      	str	r1, [sp, #12]
 800c8c0:	6929      	ldr	r1, [r5, #16]
 800c8c2:	9102      	str	r1, [sp, #8]
 800c8c4:	68e9      	ldr	r1, [r5, #12]
 800c8c6:	9101      	str	r1, [sp, #4]
 800c8c8:	68a9      	ldr	r1, [r5, #8]
 800c8ca:	9100      	str	r1, [sp, #0]
 800c8cc:	4651      	mov	r1, sl
 800c8ce:	4648      	mov	r0, r9
 800c8d0:	f7f7 f8ee 	bl	8003ab0 <print_formatted>
		break;
 800c8d4:	e786      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c8d6:	686b      	ldr	r3, [r5, #4]
 800c8d8:	682a      	ldr	r2, [r5, #0]
 800c8da:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c8dc:	9107      	str	r1, [sp, #28]
 800c8de:	6a29      	ldr	r1, [r5, #32]
 800c8e0:	9106      	str	r1, [sp, #24]
 800c8e2:	69e9      	ldr	r1, [r5, #28]
 800c8e4:	9105      	str	r1, [sp, #20]
 800c8e6:	69a9      	ldr	r1, [r5, #24]
 800c8e8:	9104      	str	r1, [sp, #16]
 800c8ea:	6969      	ldr	r1, [r5, #20]
 800c8ec:	9103      	str	r1, [sp, #12]
 800c8ee:	6929      	ldr	r1, [r5, #16]
 800c8f0:	9102      	str	r1, [sp, #8]
 800c8f2:	68e9      	ldr	r1, [r5, #12]
 800c8f4:	9101      	str	r1, [sp, #4]
 800c8f6:	68a9      	ldr	r1, [r5, #8]
 800c8f8:	9100      	str	r1, [sp, #0]
 800c8fa:	4651      	mov	r1, sl
 800c8fc:	4648      	mov	r0, r9
 800c8fe:	f7f7 f8d7 	bl	8003ab0 <print_formatted>
		break;
 800c902:	e76f      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c904:	686b      	ldr	r3, [r5, #4]
 800c906:	682a      	ldr	r2, [r5, #0]
 800c908:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c90a:	9108      	str	r1, [sp, #32]
 800c90c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c90e:	9107      	str	r1, [sp, #28]
 800c910:	6a29      	ldr	r1, [r5, #32]
 800c912:	9106      	str	r1, [sp, #24]
 800c914:	69e9      	ldr	r1, [r5, #28]
 800c916:	9105      	str	r1, [sp, #20]
 800c918:	69a9      	ldr	r1, [r5, #24]
 800c91a:	9104      	str	r1, [sp, #16]
 800c91c:	6969      	ldr	r1, [r5, #20]
 800c91e:	9103      	str	r1, [sp, #12]
 800c920:	6929      	ldr	r1, [r5, #16]
 800c922:	9102      	str	r1, [sp, #8]
 800c924:	68e9      	ldr	r1, [r5, #12]
 800c926:	9101      	str	r1, [sp, #4]
 800c928:	68a9      	ldr	r1, [r5, #8]
 800c92a:	9100      	str	r1, [sp, #0]
 800c92c:	4651      	mov	r1, sl
 800c92e:	4648      	mov	r0, r9
 800c930:	f7f7 f8be 	bl	8003ab0 <print_formatted>
		break;
 800c934:	e756      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c936:	686b      	ldr	r3, [r5, #4]
 800c938:	682a      	ldr	r2, [r5, #0]
 800c93a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800c93c:	9109      	str	r1, [sp, #36]	; 0x24
 800c93e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c940:	9108      	str	r1, [sp, #32]
 800c942:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c944:	9107      	str	r1, [sp, #28]
 800c946:	6a29      	ldr	r1, [r5, #32]
 800c948:	9106      	str	r1, [sp, #24]
 800c94a:	69e9      	ldr	r1, [r5, #28]
 800c94c:	9105      	str	r1, [sp, #20]
 800c94e:	69a9      	ldr	r1, [r5, #24]
 800c950:	9104      	str	r1, [sp, #16]
 800c952:	6969      	ldr	r1, [r5, #20]
 800c954:	9103      	str	r1, [sp, #12]
 800c956:	6929      	ldr	r1, [r5, #16]
 800c958:	9102      	str	r1, [sp, #8]
 800c95a:	68e9      	ldr	r1, [r5, #12]
 800c95c:	9101      	str	r1, [sp, #4]
 800c95e:	68a9      	ldr	r1, [r5, #8]
 800c960:	9100      	str	r1, [sp, #0]
 800c962:	4651      	mov	r1, sl
 800c964:	4648      	mov	r0, r9
 800c966:	f7f7 f8a3 	bl	8003ab0 <print_formatted>
		break;
 800c96a:	e73b      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c96c:	686b      	ldr	r3, [r5, #4]
 800c96e:	682a      	ldr	r2, [r5, #0]
 800c970:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800c972:	910a      	str	r1, [sp, #40]	; 0x28
 800c974:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800c976:	9109      	str	r1, [sp, #36]	; 0x24
 800c978:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c97a:	9108      	str	r1, [sp, #32]
 800c97c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c97e:	9107      	str	r1, [sp, #28]
 800c980:	6a29      	ldr	r1, [r5, #32]
 800c982:	9106      	str	r1, [sp, #24]
 800c984:	69e9      	ldr	r1, [r5, #28]
 800c986:	9105      	str	r1, [sp, #20]
 800c988:	69a9      	ldr	r1, [r5, #24]
 800c98a:	9104      	str	r1, [sp, #16]
 800c98c:	6969      	ldr	r1, [r5, #20]
 800c98e:	9103      	str	r1, [sp, #12]
 800c990:	6929      	ldr	r1, [r5, #16]
 800c992:	9102      	str	r1, [sp, #8]
 800c994:	68e9      	ldr	r1, [r5, #12]
 800c996:	9101      	str	r1, [sp, #4]
 800c998:	68a9      	ldr	r1, [r5, #8]
 800c99a:	9100      	str	r1, [sp, #0]
 800c99c:	4651      	mov	r1, sl
 800c99e:	4648      	mov	r0, r9
 800c9a0:	f7f7 f886 	bl	8003ab0 <print_formatted>
		break;
 800c9a4:	e71e      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c9a6:	686b      	ldr	r3, [r5, #4]
 800c9a8:	682a      	ldr	r2, [r5, #0]
 800c9aa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800c9ac:	910b      	str	r1, [sp, #44]	; 0x2c
 800c9ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800c9b0:	910a      	str	r1, [sp, #40]	; 0x28
 800c9b2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800c9b4:	9109      	str	r1, [sp, #36]	; 0x24
 800c9b6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c9b8:	9108      	str	r1, [sp, #32]
 800c9ba:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c9bc:	9107      	str	r1, [sp, #28]
 800c9be:	6a29      	ldr	r1, [r5, #32]
 800c9c0:	9106      	str	r1, [sp, #24]
 800c9c2:	69e9      	ldr	r1, [r5, #28]
 800c9c4:	9105      	str	r1, [sp, #20]
 800c9c6:	69a9      	ldr	r1, [r5, #24]
 800c9c8:	9104      	str	r1, [sp, #16]
 800c9ca:	6969      	ldr	r1, [r5, #20]
 800c9cc:	9103      	str	r1, [sp, #12]
 800c9ce:	6929      	ldr	r1, [r5, #16]
 800c9d0:	9102      	str	r1, [sp, #8]
 800c9d2:	68e9      	ldr	r1, [r5, #12]
 800c9d4:	9101      	str	r1, [sp, #4]
 800c9d6:	68a9      	ldr	r1, [r5, #8]
 800c9d8:	9100      	str	r1, [sp, #0]
 800c9da:	4651      	mov	r1, sl
 800c9dc:	4648      	mov	r0, r9
 800c9de:	f7f7 f867 	bl	8003ab0 <print_formatted>
		break;
 800c9e2:	e6ff      	b.n	800c7e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800c9e4:	686b      	ldr	r3, [r5, #4]
 800c9e6:	682a      	ldr	r2, [r5, #0]
 800c9e8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800c9ea:	910c      	str	r1, [sp, #48]	; 0x30
 800c9ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800c9ee:	910b      	str	r1, [sp, #44]	; 0x2c
 800c9f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800c9f2:	910a      	str	r1, [sp, #40]	; 0x28
 800c9f4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800c9f6:	9109      	str	r1, [sp, #36]	; 0x24
 800c9f8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c9fa:	9108      	str	r1, [sp, #32]
 800c9fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c9fe:	9107      	str	r1, [sp, #28]
 800ca00:	6a29      	ldr	r1, [r5, #32]
 800ca02:	9106      	str	r1, [sp, #24]
 800ca04:	69e9      	ldr	r1, [r5, #28]
 800ca06:	9105      	str	r1, [sp, #20]
 800ca08:	69a9      	ldr	r1, [r5, #24]
 800ca0a:	9104      	str	r1, [sp, #16]
 800ca0c:	6969      	ldr	r1, [r5, #20]
 800ca0e:	9103      	str	r1, [sp, #12]
 800ca10:	6929      	ldr	r1, [r5, #16]
 800ca12:	9102      	str	r1, [sp, #8]
 800ca14:	68e9      	ldr	r1, [r5, #12]
 800ca16:	9101      	str	r1, [sp, #4]
 800ca18:	68a9      	ldr	r1, [r5, #8]
 800ca1a:	9100      	str	r1, [sp, #0]
 800ca1c:	4651      	mov	r1, sl
 800ca1e:	4648      	mov	r0, r9
 800ca20:	f7f7 f846 	bl	8003ab0 <print_formatted>
}
 800ca24:	e6de      	b.n	800c7e4 <std_print+0x74>

0800ca26 <log_output_flush>:
{
 800ca26:	b510      	push	{r4, lr}
 800ca28:	4604      	mov	r4, r0
		     output->control_block->offset,
 800ca2a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800ca2c:	6853      	ldr	r3, [r2, #4]
 800ca2e:	6812      	ldr	r2, [r2, #0]
 800ca30:	6881      	ldr	r1, [r0, #8]
 800ca32:	6800      	ldr	r0, [r0, #0]
 800ca34:	f7ff fe50 	bl	800c6d8 <buffer_write>
	output->control_block->offset = 0;
 800ca38:	6863      	ldr	r3, [r4, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
}
 800ca3e:	bd10      	pop	{r4, pc}

0800ca40 <out_func>:
{
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4605      	mov	r5, r0
 800ca44:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800ca46:	684b      	ldr	r3, [r1, #4]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	68cb      	ldr	r3, [r1, #12]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d00f      	beq.n	800ca70 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800ca50:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800ca52:	f3bf 8f5b 	dmb	ish
 800ca56:	e853 2f00 	ldrex	r2, [r3]
 800ca5a:	1c51      	adds	r1, r2, #1
 800ca5c:	e843 1000 	strex	r0, r1, [r3]
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d1f8      	bne.n	800ca56 <out_func+0x16>
 800ca64:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800ca68:	68a3      	ldr	r3, [r4, #8]
 800ca6a:	549d      	strb	r5, [r3, r2]
}
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800ca70:	4608      	mov	r0, r1
 800ca72:	f7ff ffd8 	bl	800ca26 <log_output_flush>
 800ca76:	e7eb      	b.n	800ca50 <out_func+0x10>

0800ca78 <log_output_msg_process>:
{
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	4606      	mov	r6, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	4617      	mov	r7, r2
 800ca82:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ca86:	f08c 0c01 	eor.w	ip, ip, #1
 800ca8a:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
 800ca8e:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 800ca90:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
 800ca94:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
 800ca98:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
 800ca9a:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
 800ca9e:	f01c 0507 	ands.w	r5, ip, #7
 800caa2:	d10f      	bne.n	800cac4 <log_output_msg_process+0x4c>
 800caa4:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800caa6:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 800caa8:	f013 0f01 	tst.w	r3, #1
 800caac:	d013      	beq.n	800cad6 <log_output_msg_process+0x5e>
	} else if (raw_string) {
 800caae:	b9bd      	cbnz	r5, 800cae0 <log_output_msg_process+0x68>
		raw_string_print(msg, output);
 800cab0:	4631      	mov	r1, r6
 800cab2:	4620      	mov	r0, r4
 800cab4:	f7f7 f942 	bl	8003d3c <raw_string_print>
	if (!raw_string) {
 800cab8:	b9c5      	cbnz	r5, 800caec <log_output_msg_process+0x74>
	log_output_flush(output);
 800caba:	4630      	mov	r0, r6
 800cabc:	f7ff ffb3 	bl	800ca26 <log_output_flush>
}
 800cac0:	b005      	add	sp, #20
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
 800cac4:	9102      	str	r1, [sp, #8]
 800cac6:	9001      	str	r0, [sp, #4]
 800cac8:	9500      	str	r5, [sp, #0]
 800caca:	4639      	mov	r1, r7
 800cacc:	4630      	mov	r0, r6
 800cace:	f7ff fe28 	bl	800c722 <prefix_print>
 800cad2:	4602      	mov	r2, r0
 800cad4:	e7e7      	b.n	800caa6 <log_output_msg_process+0x2e>
		std_print(msg, output);
 800cad6:	4631      	mov	r1, r6
 800cad8:	4620      	mov	r0, r4
 800cada:	f7ff fe49 	bl	800c770 <std_print>
 800cade:	e7eb      	b.n	800cab8 <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
 800cae0:	463b      	mov	r3, r7
 800cae2:	4631      	mov	r1, r6
 800cae4:	4620      	mov	r0, r4
 800cae6:	f7f7 f8fd 	bl	8003ce4 <hexdump_print>
 800caea:	e7e5      	b.n	800cab8 <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
 800caec:	462a      	mov	r2, r5
 800caee:	4639      	mov	r1, r7
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7ff fe0a 	bl	800c70a <postfix_print>
 800caf6:	e7e0      	b.n	800caba <log_output_msg_process+0x42>

0800caf8 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800caf8:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800cafa:	f7f7 f9d7 	bl	8003eac <__do_global_ctors_aux>
	__do_init_array_aux();
 800cafe:	f7f7 f9c7 	bl	8003e90 <__do_init_array_aux>
}
 800cb02:	bd08      	pop	{r3, pc}

0800cb04 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 800cb06:	b329      	cbz	r1, 800cb54 <stm32_dt_pinctrl_configure+0x50>
 800cb08:	4606      	mov	r6, r0
 800cb0a:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 800cb0c:	2400      	movs	r4, #0
	uint32_t func = 0;
 800cb0e:	4625      	mov	r5, r4
 800cb10:	e00f      	b.n	800cb32 <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800cb12:	b2d3      	uxtb	r3, r2
 800cb14:	2b10      	cmp	r3, #16
 800cb16:	d019      	beq.n	800cb4c <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800cb18:	0b13      	lsrs	r3, r2, #12
 800cb1a:	011b      	lsls	r3, r3, #4
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800cb22:	b2d2      	uxtb	r2, r2
 800cb24:	4629      	mov	r1, r5
 800cb26:	4318      	orrs	r0, r3
 800cb28:	f7f7 f9d0 	bl	8003ecc <stm32_pin_configure>
		if (ret != 0) {
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	b990      	cbnz	r0, 800cb56 <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 800cb30:	3401      	adds	r4, #1
 800cb32:	42bc      	cmp	r4, r7
 800cb34:	d20c      	bcs.n	800cb50 <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 800cb36:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800cb3a:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800cb3e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800cb42:	d1e6      	bne.n	800cb12 <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800cb44:	685d      	ldr	r5, [r3, #4]
 800cb46:	f045 0520 	orr.w	r5, r5, #32
 800cb4a:	e7e5      	b.n	800cb18 <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800cb4c:	2530      	movs	r5, #48	; 0x30
 800cb4e:	e7e3      	b.n	800cb18 <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	e000      	b.n	800cb56 <stm32_dt_pinctrl_configure+0x52>
		return 0;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb5a <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800cb5a:	b538      	push	{r3, r4, r5, lr}
 800cb5c:	4604      	mov	r4, r0

	if (esf != NULL) {
 800cb5e:	460d      	mov	r5, r1
 800cb60:	b111      	cbz	r1, 800cb68 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800cb62:	4608      	mov	r0, r1
 800cb64:	f7f7 f9ec 	bl	8003f40 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7fc f8e2 	bl	8008d34 <z_fatal_error>
}
 800cb70:	bd38      	pop	{r3, r4, r5, pc}

0800cb72 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800cb72:	b508      	push	{r3, lr}
 800cb74:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800cb76:	6800      	ldr	r0, [r0, #0]
 800cb78:	f7ff ffef 	bl	800cb5a <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800cb7c:	bd08      	pop	{r3, pc}

0800cb7e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 800cb7e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800cb80:	2100      	movs	r1, #0
 800cb82:	2001      	movs	r0, #1
 800cb84:	f7ff ffe9 	bl	800cb5a <z_arm_fatal_error>
}
 800cb88:	bd08      	pop	{r3, pc}

0800cb8a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800cb8a:	b508      	push	{r3, lr}
	handler();
 800cb8c:	f7f7 fa4a 	bl	8004024 <z_SysNmiOnReset>
	z_arm_int_exit();
 800cb90:	f7f7 fb34 	bl	80041fc <z_arm_exc_exit>
}
 800cb94:	bd08      	pop	{r3, pc}

0800cb96 <memory_fault_recoverable>:
}
 800cb96:	2000      	movs	r0, #0
 800cb98:	4770      	bx	lr

0800cb9a <fault_handle>:
{
 800cb9a:	b508      	push	{r3, lr}
	*recoverable = false;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800cba0:	1ecb      	subs	r3, r1, #3
 800cba2:	2b09      	cmp	r3, #9
 800cba4:	d81a      	bhi.n	800cbdc <fault_handle+0x42>
 800cba6:	e8df f003 	tbb	[pc, r3]
 800cbaa:	0905      	.short	0x0905
 800cbac:	1919110d 	.word	0x1919110d
 800cbb0:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	f7f7 fdb5 	bl	8004724 <hard_fault>
}
 800cbba:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f7f7 fccf 	bl	8004560 <mem_manage_fault>
		break;
 800cbc2:	e7fa      	b.n	800cbba <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800cbc4:	2100      	movs	r1, #0
 800cbc6:	f7f7 fbf3 	bl	80043b0 <bus_fault>
		break;
 800cbca:	e7f6      	b.n	800cbba <fault_handle+0x20>
		reason = usage_fault(esf);
 800cbcc:	f7f7 fb24 	bl	8004218 <usage_fault>
		break;
 800cbd0:	e7f3      	b.n	800cbba <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	f7f7 fbd2 	bl	800437c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800cbd8:	2000      	movs	r0, #0
		break;
 800cbda:	e7ee      	b.n	800cbba <fault_handle+0x20>
		reserved_exception(esf, fault);
 800cbdc:	f7f7 fe42 	bl	8004864 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800cbe0:	2000      	movs	r0, #0
	return reason;
 800cbe2:	e7ea      	b.n	800cbba <fault_handle+0x20>

0800cbe4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800cbe4:	6843      	ldr	r3, [r0, #4]
 800cbe6:	1e5a      	subs	r2, r3, #1
		&&
 800cbe8:	4213      	tst	r3, r2
 800cbea:	d106      	bne.n	800cbfa <mpu_partition_is_valid+0x16>
		&&
 800cbec:	2b1f      	cmp	r3, #31
 800cbee:	d906      	bls.n	800cbfe <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800cbf0:	6803      	ldr	r3, [r0, #0]
		&&
 800cbf2:	421a      	tst	r2, r3
 800cbf4:	d005      	beq.n	800cc02 <mpu_partition_is_valid+0x1e>
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	4770      	bx	lr
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	4770      	bx	lr
 800cbfe:	2000      	movs	r0, #0
 800cc00:	4770      	bx	lr
 800cc02:	2001      	movs	r0, #1
}
 800cc04:	4770      	bx	lr

0800cc06 <mpu_configure_region>:
{
 800cc06:	b500      	push	{lr}
 800cc08:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800cc0a:	680b      	ldr	r3, [r1, #0]
 800cc0c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800cc0e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800cc10:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800cc12:	2b20      	cmp	r3, #32
 800cc14:	d912      	bls.n	800cc3c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800cc16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc1a:	d811      	bhi.n	800cc40 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	fab3 f383 	clz	r3, r3
 800cc22:	f1c3 031f 	rsb	r3, r3, #31
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800cc30:	a901      	add	r1, sp, #4
 800cc32:	f7f7 ff31 	bl	8004a98 <region_allocate_and_init>
}
 800cc36:	b005      	add	sp, #20
 800cc38:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	e7f5      	b.n	800cc2c <mpu_configure_region+0x26>
		return REGION_4G;
 800cc40:	233e      	movs	r3, #62	; 0x3e
 800cc42:	e7f3      	b.n	800cc2c <mpu_configure_region+0x26>

0800cc44 <arm_core_mpu_configure_static_mpu_regions>:
{
 800cc44:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800cc46:	f7f7 ff89 	bl	8004b5c <mpu_configure_static_mpu_regions>
}
 800cc4a:	bd08      	pop	{r3, pc}

0800cc4c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800cc4c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800cc4e:	f7f7 ff8f 	bl	8004b70 <mpu_configure_dynamic_mpu_regions>
}
 800cc52:	bd08      	pop	{r3, pc}

0800cc54 <malloc_prepare>:
}
 800cc54:	2000      	movs	r0, #0
 800cc56:	4770      	bx	lr

0800cc58 <_stdout_hook_default>:
}
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc5c:	4770      	bx	lr

0800cc5e <_stdin_hook_default>:
}
 800cc5e:	2000      	movs	r0, #0
 800cc60:	4770      	bx	lr

0800cc62 <_read>:
{
 800cc62:	b508      	push	{r3, lr}
 800cc64:	4608      	mov	r0, r1
 800cc66:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800cc68:	f7f7 ffda 	bl	8004c20 <z_impl_zephyr_read_stdin>
}
 800cc6c:	bd08      	pop	{r3, pc}

0800cc6e <_write>:
{
 800cc6e:	b508      	push	{r3, lr}
 800cc70:	4608      	mov	r0, r1
 800cc72:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800cc74:	f7f7 ffea 	bl	8004c4c <z_impl_zephyr_write_stdout>
}
 800cc78:	bd08      	pop	{r3, pc}

0800cc7a <_close>:
}
 800cc7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc7e:	4770      	bx	lr

0800cc80 <_lseek>:
}
 800cc80:	2000      	movs	r0, #0
 800cc82:	4770      	bx	lr

0800cc84 <_isatty>:
}
 800cc84:	2802      	cmp	r0, #2
 800cc86:	bfcc      	ite	gt
 800cc88:	2000      	movgt	r0, #0
 800cc8a:	2001      	movle	r0, #1
 800cc8c:	4770      	bx	lr

0800cc8e <_kill>:
}
 800cc8e:	2000      	movs	r0, #0
 800cc90:	4770      	bx	lr

0800cc92 <_getpid>:
}
 800cc92:	2000      	movs	r0, #0
 800cc94:	4770      	bx	lr

0800cc96 <_fstat>:
	st->st_mode = S_IFCHR;
 800cc96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc9a:	604b      	str	r3, [r1, #4]
}
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	4770      	bx	lr

0800cca0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800cca0:	b510      	push	{r4, lr}
 800cca2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800cca4:	2014      	movs	r0, #20
 800cca6:	f7fd febf 	bl	800aa28 <malloc>
 800ccaa:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800ccac:	f001 f85d 	bl	800dd6a <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800ccb0:	bd10      	pop	{r4, pc}

0800ccb2 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800ccb2:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800ccb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccbc:	f7fc fb14 	bl	80092e8 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800ccc0:	bd08      	pop	{r3, pc}

0800ccc2 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800ccc2:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800ccc4:	f7fc fb9a 	bl	80093fc <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800ccc8:	bd08      	pop	{r3, pc}

0800ccca <__stm32_exti_isr_0>:
{
 800ccca:	b508      	push	{r3, lr}
 800cccc:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800ccce:	2101      	movs	r1, #1
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	f7f7 fff5 	bl	8004cc0 <__stm32_exti_isr>
}
 800ccd6:	bd08      	pop	{r3, pc}

0800ccd8 <__stm32_exti_isr_1>:
{
 800ccd8:	b508      	push	{r3, lr}
 800ccda:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800ccdc:	2102      	movs	r1, #2
 800ccde:	2001      	movs	r0, #1
 800cce0:	f7f7 ffee 	bl	8004cc0 <__stm32_exti_isr>
}
 800cce4:	bd08      	pop	{r3, pc}

0800cce6 <__stm32_exti_isr_2>:
{
 800cce6:	b508      	push	{r3, lr}
 800cce8:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800ccea:	2103      	movs	r1, #3
 800ccec:	2002      	movs	r0, #2
 800ccee:	f7f7 ffe7 	bl	8004cc0 <__stm32_exti_isr>
}
 800ccf2:	bd08      	pop	{r3, pc}

0800ccf4 <__stm32_exti_isr_3>:
{
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800ccf8:	2104      	movs	r1, #4
 800ccfa:	2003      	movs	r0, #3
 800ccfc:	f7f7 ffe0 	bl	8004cc0 <__stm32_exti_isr>
}
 800cd00:	bd08      	pop	{r3, pc}

0800cd02 <__stm32_exti_isr_4>:
{
 800cd02:	b508      	push	{r3, lr}
 800cd04:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800cd06:	2105      	movs	r1, #5
 800cd08:	2004      	movs	r0, #4
 800cd0a:	f7f7 ffd9 	bl	8004cc0 <__stm32_exti_isr>
}
 800cd0e:	bd08      	pop	{r3, pc}

0800cd10 <__stm32_exti_isr_9_5>:
{
 800cd10:	b508      	push	{r3, lr}
 800cd12:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800cd14:	210a      	movs	r1, #10
 800cd16:	2005      	movs	r0, #5
 800cd18:	f7f7 ffd2 	bl	8004cc0 <__stm32_exti_isr>
}
 800cd1c:	bd08      	pop	{r3, pc}

0800cd1e <__stm32_exti_isr_15_10>:
{
 800cd1e:	b508      	push	{r3, lr}
 800cd20:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800cd22:	2110      	movs	r1, #16
 800cd24:	200a      	movs	r0, #10
 800cd26:	f7f7 ffcb 	bl	8004cc0 <__stm32_exti_isr>
}
 800cd2a:	bd08      	pop	{r3, pc}

0800cd2c <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800cd2c:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800cd2e:	2200      	movs	r2, #0
 800cd30:	4611      	mov	r1, r2
 800cd32:	2006      	movs	r0, #6
 800cd34:	f7f7 f960 	bl	8003ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4611      	mov	r1, r2
 800cd3c:	2007      	movs	r0, #7
 800cd3e:	f7f7 f95b 	bl	8003ff8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800cd42:	2200      	movs	r2, #0
 800cd44:	4611      	mov	r1, r2
 800cd46:	2008      	movs	r0, #8
 800cd48:	f7f7 f956 	bl	8003ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	4611      	mov	r1, r2
 800cd50:	2009      	movs	r0, #9
 800cd52:	f7f7 f951 	bl	8003ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800cd56:	2200      	movs	r2, #0
 800cd58:	4611      	mov	r1, r2
 800cd5a:	200a      	movs	r0, #10
 800cd5c:	f7f7 f94c 	bl	8003ff8 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800cd60:	2200      	movs	r2, #0
 800cd62:	4611      	mov	r1, r2
 800cd64:	2017      	movs	r0, #23
 800cd66:	f7f7 f947 	bl	8003ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	2028      	movs	r0, #40	; 0x28
 800cd70:	f7f7 f942 	bl	8003ff8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800cd74:	bd08      	pop	{r3, pc}

0800cd76 <stm32_exti_init>:
{
 800cd76:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800cd78:	f7ff ffd8 	bl	800cd2c <__stm32_exti_connect_irqs>
}
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	bd08      	pop	{r3, pc}

0800cd80 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800cd80:	2300      	movs	r3, #0
 800cd82:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800cd84:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800cd86:	6083      	str	r3, [r0, #8]
}
 800cd88:	4770      	bx	lr

0800cd8a <get_bus_clock>:
}
 800cd8a:	fbb0 f0f1 	udiv	r0, r0, r1
 800cd8e:	4770      	bx	lr

0800cd90 <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800cd90:	2300      	movs	r3, #0
 800cd92:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800cd94:	2308      	movs	r3, #8
 800cd96:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800cd98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd9c:	6083      	str	r3, [r0, #8]
}
 800cd9e:	4770      	bx	lr

0800cda0 <gpio_stm32_isr>:
{
 800cda0:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800cda2:	684e      	ldr	r6, [r1, #4]
 800cda4:	2501      	movs	r5, #1
 800cda6:	4085      	lsls	r5, r0
	return list->head;
 800cda8:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800cdaa:	b119      	cbz	r1, 800cdb4 <gpio_stm32_isr+0x14>
 800cdac:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800cdae:	b149      	cbz	r1, 800cdc4 <gpio_stm32_isr+0x24>
	return node->next;
 800cdb0:	680c      	ldr	r4, [r1, #0]
 800cdb2:	e007      	b.n	800cdc4 <gpio_stm32_isr+0x24>
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	e005      	b.n	800cdc4 <gpio_stm32_isr+0x24>
 800cdb8:	b164      	cbz	r4, 800cdd4 <gpio_stm32_isr+0x34>
 800cdba:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800cdbc:	b104      	cbz	r4, 800cdc0 <gpio_stm32_isr+0x20>
	return node->next;
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	461c      	mov	r4, r3
 800cdc4:	b141      	cbz	r1, 800cdd8 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800cdc6:	688a      	ldr	r2, [r1, #8]
 800cdc8:	402a      	ands	r2, r5
 800cdca:	d0f5      	beq.n	800cdb8 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800cdcc:	684b      	ldr	r3, [r1, #4]
 800cdce:	4630      	mov	r0, r6
 800cdd0:	4798      	blx	r3
 800cdd2:	e7f1      	b.n	800cdb8 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800cdd4:	4623      	mov	r3, r4
 800cdd6:	e7f3      	b.n	800cdc0 <gpio_stm32_isr+0x20>
}
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}

0800cdda <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800cdda:	f410 7f00 	tst.w	r0, #512	; 0x200
 800cdde:	d01b      	beq.n	800ce18 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800cde0:	2310      	movs	r3, #16
 800cde2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800cde4:	f010 0f02 	tst.w	r0, #2
 800cde8:	d004      	beq.n	800cdf4 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800cdea:	f010 0f04 	tst.w	r0, #4
 800cdee:	d02c      	beq.n	800ce4a <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800cdf0:	2350      	movs	r3, #80	; 0x50
 800cdf2:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800cdf4:	f010 0310 	ands.w	r3, r0, #16
 800cdf8:	d005      	beq.n	800ce06 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800cdfa:	680b      	ldr	r3, [r1, #0]
 800cdfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce00:	600b      	str	r3, [r1, #0]
	return 0;
 800ce02:	2000      	movs	r0, #0
 800ce04:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800ce06:	f010 0020 	ands.w	r0, r0, #32
 800ce0a:	d020      	beq.n	800ce4e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800ce0c:	680a      	ldr	r2, [r1, #0]
 800ce0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce12:	600a      	str	r2, [r1, #0]
	return 0;
 800ce14:	4618      	mov	r0, r3
 800ce16:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800ce18:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ce1c:	d011      	beq.n	800ce42 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800ce22:	f010 0310 	ands.w	r3, r0, #16
 800ce26:	d004      	beq.n	800ce32 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800ce28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce2c:	600b      	str	r3, [r1, #0]
	return 0;
 800ce2e:	2000      	movs	r0, #0
 800ce30:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800ce32:	f010 0020 	ands.w	r0, r0, #32
 800ce36:	d00a      	beq.n	800ce4e <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800ce38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce3c:	600a      	str	r2, [r1, #0]
	return 0;
 800ce3e:	4618      	mov	r0, r3
 800ce40:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800ce42:	2330      	movs	r3, #48	; 0x30
 800ce44:	600b      	str	r3, [r1, #0]
	return 0;
 800ce46:	2000      	movs	r0, #0
 800ce48:	4770      	bx	lr
				return -ENOTSUP;
 800ce4a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800ce4e:	4770      	bx	lr

0800ce50 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ce50:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ce52:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800ce54:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800ce56:	600b      	str	r3, [r1, #0]
}
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4770      	bx	lr

0800ce5c <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ce5c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ce5e:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800ce60:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800ce62:	4042      	eors	r2, r0
 800ce64:	400a      	ands	r2, r1
 800ce66:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800ce68:	615a      	str	r2, [r3, #20]
}
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	4770      	bx	lr

0800ce6e <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ce6e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ce70:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800ce72:	6199      	str	r1, [r3, #24]
}
 800ce74:	2000      	movs	r0, #0
 800ce76:	4770      	bx	lr

0800ce78 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ce78:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ce7a:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800ce7c:	6299      	str	r1, [r3, #40]	; 0x28
}
 800ce7e:	2000      	movs	r0, #0
 800ce80:	4770      	bx	lr

0800ce82 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ce82:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ce84:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800ce86:	6953      	ldr	r3, [r2, #20]
 800ce88:	404b      	eors	r3, r1
 800ce8a:	6153      	str	r3, [r2, #20]
}
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	4770      	bx	lr

0800ce90 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800ce90:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800ce92:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800ce94:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800ce98:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800ce9a:	b1fb      	cbz	r3, 800cedc <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	e00d      	b.n	800cebc <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800cea0:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800cea2:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800cea4:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800cea8:	4281      	cmp	r1, r0
 800ceaa:	d112      	bne.n	800ced2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800ceac:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800ceb0:	e00f      	b.n	800ced2 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800ceb2:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800ceb6:	e00c      	b.n	800ced2 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ceb8:	4618      	mov	r0, r3
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	b163      	cbz	r3, 800ced8 <gpio_stm32_manage_callback+0x48>
 800cebe:	4299      	cmp	r1, r3
 800cec0:	d1fa      	bne.n	800ceb8 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0ec      	beq.n	800cea0 <gpio_stm32_manage_callback+0x10>
	return node->next;
 800cec6:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800cec8:	6003      	str	r3, [r0, #0]
	return list->tail;
 800ceca:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800cece:	4299      	cmp	r1, r3
 800ced0:	d0ef      	beq.n	800ceb2 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800ced2:	2300      	movs	r3, #0
 800ced4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ced6:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800ced8:	b903      	cbnz	r3, 800cedc <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800ceda:	b162      	cbz	r2, 800cef6 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800cedc:	b172      	cbz	r2, 800cefc <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800cede:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800cee0:	600b      	str	r3, [r1, #0]
	list->head = node;
 800cee2:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800cee4:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800cee8:	b10b      	cbz	r3, 800ceee <gpio_stm32_manage_callback+0x5e>
	return 0;
 800ceea:	2000      	movs	r0, #0
 800ceec:	e007      	b.n	800cefe <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800ceee:	f8cc 1004 	str.w	r1, [ip, #4]
 800cef2:	2000      	movs	r0, #0
}
 800cef4:	e003      	b.n	800cefe <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800cef6:	f06f 0015 	mvn.w	r0, #21
 800cefa:	e000      	b.n	800cefe <gpio_stm32_manage_callback+0x6e>
	return 0;
 800cefc:	2000      	movs	r0, #0
}
 800cefe:	bc10      	pop	{r4}
 800cf00:	4770      	bx	lr

0800cf02 <gpio_stm32_configure>:
{
 800cf02:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800cf04:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800cf06:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800cf08:	2001      	movs	r0, #1
 800cf0a:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800cf0c:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800cf10:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cf14:	6865      	ldr	r5, [r4, #4]
 800cf16:	ea25 0500 	bic.w	r5, r5, r0
 800cf1a:	408e      	lsls	r6, r1
 800cf1c:	4335      	orrs	r5, r6
 800cf1e:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800cf20:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800cf24:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf26:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800cf2a:	2d00      	cmp	r5, #0
 800cf2c:	d04a      	beq.n	800cfc4 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 800cf2e:	fab5 f585 	clz	r5, r5
 800cf32:	006d      	lsls	r5, r5, #1
 800cf34:	2703      	movs	r7, #3
 800cf36:	fa07 f505 	lsl.w	r5, r7, r5
 800cf3a:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf3e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800cf42:	2d00      	cmp	r5, #0
 800cf44:	d040      	beq.n	800cfc8 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 800cf46:	fab5 f585 	clz	r5, r5
 800cf4a:	006d      	lsls	r5, r5, #1
 800cf4c:	fa0e f505 	lsl.w	r5, lr, r5
 800cf50:	4335      	orrs	r5, r6
 800cf52:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800cf54:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800cf58:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf5a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800cf5e:	b3ad      	cbz	r5, 800cfcc <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 800cf60:	fab5 f585 	clz	r5, r5
 800cf64:	006d      	lsls	r5, r5, #1
 800cf66:	f04f 0e03 	mov.w	lr, #3
 800cf6a:	fa0e f505 	lsl.w	r5, lr, r5
 800cf6e:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf72:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800cf76:	b35d      	cbz	r5, 800cfd0 <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 800cf78:	fab5 f585 	clz	r5, r5
 800cf7c:	006d      	lsls	r5, r5, #1
 800cf7e:	fa02 f505 	lsl.w	r5, r2, r5
 800cf82:	ea4e 0505 	orr.w	r5, lr, r5
 800cf86:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800cf88:	f1bc 0f20 	cmp.w	ip, #32
 800cf8c:	d022      	beq.n	800cfd4 <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800cf8e:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cf92:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf94:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d052      	beq.n	800d042 <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 800cf9c:	fab3 f383 	clz	r3, r3
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	2103      	movs	r1, #3
 800cfa4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfa8:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfac:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d048      	beq.n	800d046 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 800cfb4:	fab0 f080 	clz	r0, r0
 800cfb8:	0040      	lsls	r0, r0, #1
 800cfba:	fa0c f000 	lsl.w	r0, ip, r0
 800cfbe:	4318      	orrs	r0, r3
 800cfc0:	6020      	str	r0, [r4, #0]
}
 800cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800cfc4:	2520      	movs	r5, #32
 800cfc6:	e7b4      	b.n	800cf32 <gpio_stm32_configure+0x30>
 800cfc8:	2520      	movs	r5, #32
 800cfca:	e7be      	b.n	800cf4a <gpio_stm32_configure+0x48>
 800cfcc:	2520      	movs	r5, #32
 800cfce:	e7c9      	b.n	800cf64 <gpio_stm32_configure+0x62>
 800cfd0:	2520      	movs	r5, #32
 800cfd2:	e7d3      	b.n	800cf7c <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 800cfd4:	2907      	cmp	r1, #7
 800cfd6:	dc19      	bgt.n	800d00c <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800cfd8:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfda:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800cfde:	b18a      	cbz	r2, 800d004 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 800cfe0:	fab2 f282 	clz	r2, r2
 800cfe4:	0092      	lsls	r2, r2, #2
 800cfe6:	250f      	movs	r5, #15
 800cfe8:	fa05 f202 	lsl.w	r2, r5, r2
 800cfec:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cff0:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800cff4:	b142      	cbz	r2, 800d008 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 800cff6:	fab2 f282 	clz	r2, r2
 800cffa:	0092      	lsls	r2, r2, #2
 800cffc:	4093      	lsls	r3, r2
 800cffe:	430b      	orrs	r3, r1
 800d000:	6223      	str	r3, [r4, #32]
}
 800d002:	e7c4      	b.n	800cf8e <gpio_stm32_configure+0x8c>
    return 32U;
 800d004:	2220      	movs	r2, #32
 800d006:	e7ed      	b.n	800cfe4 <gpio_stm32_configure+0xe2>
 800d008:	2220      	movs	r2, #32
 800d00a:	e7f6      	b.n	800cffa <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d00c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d00e:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d010:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800d014:	b189      	cbz	r1, 800d03a <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 800d016:	fab1 f181 	clz	r1, r1
 800d01a:	0089      	lsls	r1, r1, #2
 800d01c:	260f      	movs	r6, #15
 800d01e:	fa06 f101 	lsl.w	r1, r6, r1
 800d022:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d026:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800d02a:	b142      	cbz	r2, 800d03e <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 800d02c:	fab2 f282 	clz	r2, r2
 800d030:	0092      	lsls	r2, r2, #2
 800d032:	4093      	lsls	r3, r2
 800d034:	430b      	orrs	r3, r1
 800d036:	6263      	str	r3, [r4, #36]	; 0x24
}
 800d038:	e7a9      	b.n	800cf8e <gpio_stm32_configure+0x8c>
    return 32U;
 800d03a:	2120      	movs	r1, #32
 800d03c:	e7ed      	b.n	800d01a <gpio_stm32_configure+0x118>
 800d03e:	2220      	movs	r2, #32
 800d040:	e7f6      	b.n	800d030 <gpio_stm32_configure+0x12e>
 800d042:	2320      	movs	r3, #32
 800d044:	e7ac      	b.n	800cfa0 <gpio_stm32_configure+0x9e>
 800d046:	2020      	movs	r0, #32
 800d048:	e7b6      	b.n	800cfb8 <gpio_stm32_configure+0xb6>

0800d04a <gpio_stm32_config>:
{
 800d04a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04c:	b083      	sub	sp, #12
 800d04e:	4607      	mov	r7, r0
 800d050:	460d      	mov	r5, r1
 800d052:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800d054:	a901      	add	r1, sp, #4
 800d056:	4610      	mov	r0, r2
 800d058:	f7ff febf 	bl	800cdda <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800d05c:	4606      	mov	r6, r0
 800d05e:	b970      	cbnz	r0, 800d07e <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800d060:	f414 7f00 	tst.w	r4, #512	; 0x200
 800d064:	d005      	beq.n	800d072 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800d066:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800d06a:	d10b      	bne.n	800d084 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800d06c:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800d070:	d10e      	bne.n	800d090 <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800d072:	2300      	movs	r3, #0
 800d074:	9a01      	ldr	r2, [sp, #4]
 800d076:	4629      	mov	r1, r5
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ff42 	bl	800cf02 <gpio_stm32_configure>
}
 800d07e:	4630      	mov	r0, r6
 800d080:	b003      	add	sp, #12
 800d082:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800d084:	2101      	movs	r1, #1
 800d086:	40a9      	lsls	r1, r5
 800d088:	4638      	mov	r0, r7
 800d08a:	f7ff fef0 	bl	800ce6e <gpio_stm32_port_set_bits_raw>
 800d08e:	e7f0      	b.n	800d072 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800d090:	2101      	movs	r1, #1
 800d092:	40a9      	lsls	r1, r5
 800d094:	4638      	mov	r0, r7
 800d096:	f7ff feef 	bl	800ce78 <gpio_stm32_port_clear_bits_raw>
 800d09a:	e7ea      	b.n	800d072 <gpio_stm32_config+0x28>

0800d09c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800d09c:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800d09e:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 800d0a0:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	f7f8 f8b2 	bl	800520c <gpio_stm32_clock_request>
#endif
}
 800d0a8:	bd08      	pop	{r3, pc}

0800d0aa <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800d0aa:	6341      	str	r1, [r0, #52]	; 0x34
}
 800d0ac:	4770      	bx	lr

0800d0ae <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800d0ae:	6381      	str	r1, [r0, #56]	; 0x38
}
 800d0b0:	4770      	bx	lr

0800d0b2 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800d0b2:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800d0b4:	4770      	bx	lr

0800d0b6 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800d0b6:	6401      	str	r1, [r0, #64]	; 0x40
}
 800d0b8:	4770      	bx	lr

0800d0ba <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800d0ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d0bc:	6581      	str	r1, [r0, #88]	; 0x58
}
 800d0be:	4770      	bx	lr

0800d0c0 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800d0c0:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800d0c2:	4770      	bx	lr

0800d0c4 <get_polarity>:
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800d0c4:	f010 0f01 	tst.w	r0, #1
 800d0c8:	d001      	beq.n	800d0ce <get_polarity+0xa>
	return LL_TIM_OCPOLARITY_LOW;
 800d0ca:	2002      	movs	r0, #2
 800d0cc:	4770      	bx	lr
		return LL_TIM_OCPOLARITY_HIGH;
 800d0ce:	2000      	movs	r0, #0
}
 800d0d0:	4770      	bx	lr

0800d0d2 <pwm_stm32_get_cycles_per_sec>:
	struct pwm_stm32_data *data = dev->data;
 800d0d2:	6903      	ldr	r3, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 800d0d4:	6841      	ldr	r1, [r0, #4]
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	6849      	ldr	r1, [r1, #4]
 800d0da:	3101      	adds	r1, #1
 800d0dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	6050      	str	r0, [r2, #4]
}
 800d0e6:	4770      	bx	lr

0800d0e8 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800d0e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800d0ea:	b91b      	cbnz	r3, 800d0f4 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800d0ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d0ee:	b91b      	cbnz	r3, 800d0f8 <spi_stm32_transfer_ongoing+0x10>
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	4770      	bx	lr
 800d0f4:	2001      	movs	r0, #1
 800d0f6:	4770      	bx	lr
 800d0f8:	2001      	movs	r0, #1
}
 800d0fa:	4770      	bx	lr

0800d0fc <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800d0fc:	6883      	ldr	r3, [r0, #8]
 800d0fe:	f013 0f02 	tst.w	r3, #2
 800d102:	d0fb      	beq.n	800d0fc <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800d104:	680b      	ldr	r3, [r1, #0]
 800d106:	889b      	ldrh	r3, [r3, #4]
 800d108:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d01f      	beq.n	800d150 <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 800d110:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d044      	beq.n	800d1a0 <spi_stm32_shift_m+0xa4>
 800d116:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d143      	bne.n	800d1a4 <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800d11c:	2a00      	cmp	r2, #0
 800d11e:	d043      	beq.n	800d1a8 <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800d120:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800d122:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800d124:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d126:	2b00      	cmp	r3, #0
 800d128:	d047      	beq.n	800d1ba <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800d12a:	3b01      	subs	r3, #1
 800d12c:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d13f      	bne.n	800d1b2 <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 800d132:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d134:	3b01      	subs	r3, #1
 800d136:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d037      	beq.n	800d1ac <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 800d13c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d13e:	f103 0208 	add.w	r2, r3, #8
 800d142:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800d144:	689a      	ldr	r2, [r3, #8]
 800d146:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	085b      	lsrs	r3, r3, #1
 800d14c:	650b      	str	r3, [r1, #80]	; 0x50
 800d14e:	e034      	b.n	800d1ba <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800d150:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d152:	b1bb      	cbz	r3, 800d184 <spi_stm32_shift_m+0x88>
 800d154:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800d156:	b9ba      	cbnz	r2, 800d188 <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800d158:	b1c2      	cbz	r2, 800d18c <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800d15a:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800d15c:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 800d15e:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800d160:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d162:	b353      	cbz	r3, 800d1ba <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800d164:	3b01      	subs	r3, #1
 800d166:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800d168:	b9ab      	cbnz	r3, 800d196 <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 800d16a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d16c:	3b01      	subs	r3, #1
 800d16e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800d170:	b173      	cbz	r3, 800d190 <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 800d172:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d174:	f103 0208 	add.w	r2, r3, #8
 800d178:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	650b      	str	r3, [r1, #80]	; 0x50
 800d182:	e01a      	b.n	800d1ba <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800d184:	2200      	movs	r2, #0
 800d186:	e7e7      	b.n	800d158 <spi_stm32_shift_m+0x5c>
 800d188:	2201      	movs	r2, #1
 800d18a:	e7e5      	b.n	800d158 <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800d18c:	2300      	movs	r3, #0
 800d18e:	e7e5      	b.n	800d15c <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 800d190:	2300      	movs	r3, #0
 800d192:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d194:	e011      	b.n	800d1ba <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800d196:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d198:	b17b      	cbz	r3, 800d1ba <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800d19a:	3301      	adds	r3, #1
 800d19c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d19e:	e00c      	b.n	800d1ba <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	e7bb      	b.n	800d11c <spi_stm32_shift_m+0x20>
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	e7b9      	b.n	800d11c <spi_stm32_shift_m+0x20>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e7ba      	b.n	800d122 <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d1b0:	e003      	b.n	800d1ba <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800d1b2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d1b4:	b10b      	cbz	r3, 800d1ba <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800d1b6:	3302      	adds	r3, #2
 800d1b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800d1ba:	6883      	ldr	r3, [r0, #8]
 800d1bc:	f013 0f01 	tst.w	r3, #1
 800d1c0:	d0fb      	beq.n	800d1ba <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800d1c2:	680b      	ldr	r3, [r1, #0]
 800d1c4:	889b      	ldrh	r3, [r3, #4]
 800d1c6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800d1ca:	2b08      	cmp	r3, #8
 800d1cc:	d01f      	beq.n	800d20e <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 800d1ce:	68c3      	ldr	r3, [r0, #12]
 800d1d0:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800d1d2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800d1d4:	2a00      	cmp	r2, #0
 800d1d6:	d040      	beq.n	800d25a <spi_stm32_shift_m+0x15e>
 800d1d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d13f      	bne.n	800d25e <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800d1de:	b100      	cbz	r0, 800d1e2 <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800d1e0:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800d1e2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d043      	beq.n	800d270 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d13b      	bne.n	800d268 <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 800d1f0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d033      	beq.n	800d262 <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 800d1fa:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d1fc:	f103 0208 	add.w	r2, r3, #8
 800d200:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800d202:	689a      	ldr	r2, [r3, #8]
 800d204:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	085b      	lsrs	r3, r3, #1
 800d20a:	658b      	str	r3, [r1, #88]	; 0x58
 800d20c:	4770      	bx	lr
  return (uint8_t)(READ_REG(SPIx->DR));
 800d20e:	68c3      	ldr	r3, [r0, #12]
 800d210:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800d212:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800d214:	b1aa      	cbz	r2, 800d242 <spi_stm32_shift_m+0x146>
 800d216:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800d218:	b9a8      	cbnz	r0, 800d246 <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800d21a:	b100      	cbz	r0, 800d21e <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800d21c:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800d21e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800d220:	b333      	cbz	r3, 800d270 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800d222:	3b01      	subs	r3, #1
 800d224:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800d226:	b99b      	cbnz	r3, 800d250 <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 800d228:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800d22a:	3b01      	subs	r3, #1
 800d22c:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800d22e:	b163      	cbz	r3, 800d24a <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 800d230:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d232:	f103 0208 	add.w	r2, r3, #8
 800d236:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800d238:	689a      	ldr	r2, [r3, #8]
 800d23a:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	658b      	str	r3, [r1, #88]	; 0x58
 800d240:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800d242:	2000      	movs	r0, #0
 800d244:	e7e9      	b.n	800d21a <spi_stm32_shift_m+0x11e>
 800d246:	2001      	movs	r0, #1
 800d248:	e7e7      	b.n	800d21a <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	654b      	str	r3, [r1, #84]	; 0x54
 800d24e:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800d250:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d252:	b16b      	cbz	r3, 800d270 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800d254:	3301      	adds	r3, #1
 800d256:	654b      	str	r3, [r1, #84]	; 0x54
 800d258:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800d25a:	2000      	movs	r0, #0
 800d25c:	e7bf      	b.n	800d1de <spi_stm32_shift_m+0xe2>
 800d25e:	2001      	movs	r0, #1
 800d260:	e7bd      	b.n	800d1de <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	654b      	str	r3, [r1, #84]	; 0x54
 800d266:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800d268:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d26a:	b10b      	cbz	r3, 800d270 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800d26c:	3302      	adds	r3, #2
 800d26e:	654b      	str	r3, [r1, #84]	; 0x54
}
 800d270:	4770      	bx	lr

0800d272 <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800d272:	6883      	ldr	r3, [r0, #8]
 800d274:	f013 0f02 	tst.w	r3, #2
 800d278:	d045      	beq.n	800d306 <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 800d27a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d042      	beq.n	800d306 <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800d280:	680b      	ldr	r3, [r1, #0]
 800d282:	889b      	ldrh	r3, [r3, #4]
 800d284:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800d288:	2b08      	cmp	r3, #8
 800d28a:	d017      	beq.n	800d2bc <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800d28c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d28e:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800d290:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800d292:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d294:	2b00      	cmp	r3, #0
 800d296:	d03a      	beq.n	800d30e <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800d298:	3b01      	subs	r3, #1
 800d29a:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d12d      	bne.n	800d2fc <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 800d2a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800d2a6:	b333      	cbz	r3, 800d2f6 <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 800d2a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d2aa:	f103 0208 	add.w	r2, r3, #8
 800d2ae:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800d2b0:	689a      	ldr	r2, [r3, #8]
 800d2b2:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	085b      	lsrs	r3, r3, #1
 800d2b8:	650b      	str	r3, [r1, #80]	; 0x50
 800d2ba:	e028      	b.n	800d30e <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800d2bc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d2be:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800d2c0:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800d2c2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d2c4:	b31b      	cbz	r3, 800d30e <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800d2ca:	b97b      	cbnz	r3, 800d2ec <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 800d2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800d2d2:	b143      	cbz	r3, 800d2e6 <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 800d2d4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d2d6:	f103 0208 	add.w	r2, r3, #8
 800d2da:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800d2dc:	689a      	ldr	r2, [r3, #8]
 800d2de:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	650b      	str	r3, [r1, #80]	; 0x50
 800d2e4:	e013      	b.n	800d30e <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d2ea:	e010      	b.n	800d30e <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800d2ec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d2ee:	b173      	cbz	r3, 800d30e <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d2f4:	e00b      	b.n	800d30e <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d2fa:	e008      	b.n	800d30e <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800d2fc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800d2fe:	b133      	cbz	r3, 800d30e <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800d300:	3302      	adds	r3, #2
 800d302:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d304:	e003      	b.n	800d30e <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800d306:	6843      	ldr	r3, [r0, #4]
 800d308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d30c:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800d30e:	6883      	ldr	r3, [r0, #8]
 800d310:	f013 0f01 	tst.w	r3, #1
 800d314:	d04a      	beq.n	800d3ac <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800d316:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d318:	b30b      	cbz	r3, 800d35e <spi_stm32_shift_s+0xec>
 800d31a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800d31c:	bb0a      	cbnz	r2, 800d362 <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 800d31e:	2a00      	cmp	r2, #0
 800d320:	d044      	beq.n	800d3ac <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800d322:	680a      	ldr	r2, [r1, #0]
 800d324:	8892      	ldrh	r2, [r2, #4]
 800d326:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800d32a:	2a08      	cmp	r2, #8
 800d32c:	d01b      	beq.n	800d366 <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 800d32e:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800d330:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800d332:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800d334:	2b00      	cmp	r3, #0
 800d336:	d039      	beq.n	800d3ac <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800d338:	3b01      	subs	r3, #1
 800d33a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d131      	bne.n	800d3a4 <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 800d340:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800d342:	3b01      	subs	r3, #1
 800d344:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800d346:	2b00      	cmp	r3, #0
 800d348:	d029      	beq.n	800d39e <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 800d34a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d34c:	f103 0208 	add.w	r2, r3, #8
 800d350:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800d352:	689a      	ldr	r2, [r3, #8]
 800d354:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	085b      	lsrs	r3, r3, #1
 800d35a:	658b      	str	r3, [r1, #88]	; 0x58
 800d35c:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800d35e:	2200      	movs	r2, #0
 800d360:	e7dd      	b.n	800d31e <spi_stm32_shift_s+0xac>
 800d362:	2201      	movs	r2, #1
 800d364:	e7db      	b.n	800d31e <spi_stm32_shift_s+0xac>
  return (uint8_t)(READ_REG(SPIx->DR));
 800d366:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800d368:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800d36a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800d36c:	b1f3      	cbz	r3, 800d3ac <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800d36e:	3b01      	subs	r3, #1
 800d370:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800d372:	b97b      	cbnz	r3, 800d394 <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 800d374:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800d376:	3b01      	subs	r3, #1
 800d378:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800d37a:	b143      	cbz	r3, 800d38e <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 800d37c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800d37e:	f103 0208 	add.w	r2, r3, #8
 800d382:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800d384:	689a      	ldr	r2, [r3, #8]
 800d386:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	658b      	str	r3, [r1, #88]	; 0x58
 800d38c:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800d38e:	2300      	movs	r3, #0
 800d390:	654b      	str	r3, [r1, #84]	; 0x54
 800d392:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800d394:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d396:	b14b      	cbz	r3, 800d3ac <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800d398:	3301      	adds	r3, #1
 800d39a:	654b      	str	r3, [r1, #84]	; 0x54
 800d39c:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	654b      	str	r3, [r1, #84]	; 0x54
 800d3a2:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800d3a4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800d3a6:	b10b      	cbz	r3, 800d3ac <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800d3a8:	3302      	adds	r3, #2
 800d3aa:	654b      	str	r3, [r1, #84]	; 0x54
}
 800d3ac:	4770      	bx	lr

0800d3ae <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800d3ae:	b508      	push	{r3, lr}
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	2105      	movs	r1, #5
 800d3b4:	2023      	movs	r0, #35	; 0x23
 800d3b6:	f7f6 fe1f 	bl	8003ff8 <z_arm_irq_priority_set>
 800d3ba:	2023      	movs	r0, #35	; 0x23
 800d3bc:	f7f6 fe0e 	bl	8003fdc <arch_irq_enable>
 800d3c0:	bd08      	pop	{r3, pc}

0800d3c2 <spi_stm32_shift_frames>:
{
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800d3c6:	680b      	ldr	r3, [r1, #0]
 800d3c8:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800d3ca:	f013 0f01 	tst.w	r3, #1
 800d3ce:	d105      	bne.n	800d3dc <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800d3d0:	f7ff fe94 	bl	800d0fc <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f7f8 fa59 	bl	800588c <spi_stm32_get_err>
}
 800d3da:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800d3dc:	f7ff ff49 	bl	800d272 <spi_stm32_shift_s>
 800d3e0:	e7f8      	b.n	800d3d4 <spi_stm32_shift_frames+0x12>

0800d3e2 <spi_stm32_cs_control>:
{
 800d3e2:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800d3e4:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d034      	beq.n	800d456 <spi_stm32_cs_control+0x74>
 800d3ec:	689a      	ldr	r2, [r3, #8]
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	d031      	beq.n	800d456 <spi_stm32_cs_control+0x74>
 800d3f2:	6810      	ldr	r0, [r2, #0]
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d02e      	beq.n	800d456 <spi_stm32_cs_control+0x74>
		if (on) {
 800d3f8:	b9c9      	cbnz	r1, 800d42e <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800d3fa:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800d3fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d400:	d129      	bne.n	800d456 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800d402:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800d404:	f7fc ff5a 	bl	800a2bc <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800d410:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	2301      	movs	r3, #1
 800d416:	408b      	lsls	r3, r1
 800d418:	421a      	tst	r2, r3
 800d41a:	d126      	bne.n	800d46a <spi_stm32_cs_control+0x88>
 800d41c:	2300      	movs	r3, #0
	if (value != 0)	{
 800d41e:	b333      	cbz	r3, 800d46e <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d420:	2301      	movs	r3, #1
 800d422:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d426:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	4798      	blx	r3
 800d42c:	e013      	b.n	800d456 <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800d42e:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 800d430:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	2301      	movs	r3, #1
 800d436:	408b      	lsls	r3, r1
 800d438:	421a      	tst	r2, r3
 800d43a:	d10d      	bne.n	800d458 <spi_stm32_cs_control+0x76>
 800d43c:	2301      	movs	r3, #1
	if (value != 0)	{
 800d43e:	b16b      	cbz	r3, 800d45c <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d440:	2301      	movs	r3, #1
 800d442:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d446:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	6858      	ldr	r0, [r3, #4]
 800d452:	f7fc ff33 	bl	800a2bc <z_impl_k_busy_wait>
}
 800d456:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800d458:	2300      	movs	r3, #0
 800d45a:	e7f0      	b.n	800d43e <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d45c:	2301      	movs	r3, #1
 800d45e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d462:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	4798      	blx	r3
 800d468:	e7f0      	b.n	800d44c <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7d7      	b.n	800d41e <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d46e:	2301      	movs	r3, #1
 800d470:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d474:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	4798      	blx	r3
 800d47a:	e7ec      	b.n	800d456 <spi_stm32_cs_control+0x74>

0800d47c <spi_stm32_complete>:
{
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800d482:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800d484:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800d486:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800d488:	6863      	ldr	r3, [r4, #4]
 800d48a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d48e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800d490:	6863      	ldr	r3, [r4, #4]
 800d492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d496:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800d498:	6863      	ldr	r3, [r4, #4]
 800d49a:	f023 0320 	bic.w	r3, r3, #32
 800d49e:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	f7ff ff9e 	bl	800d3e2 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800d4a6:	68a3      	ldr	r3, [r4, #8]
 800d4a8:	f013 0f01 	tst.w	r3, #1
 800d4ac:	d001      	beq.n	800d4b2 <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800d4ae:	68e3      	ldr	r3, [r4, #12]
 800d4b0:	e7f9      	b.n	800d4a6 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800d4b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4bc:	d015      	beq.n	800d4ea <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	f013 0f20 	tst.w	r3, #32
 800d4c4:	d006      	beq.n	800d4d4 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800d4ca:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4d2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800d4d4:	6823      	ldr	r3, [r4, #0]
 800d4d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4da:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800d4dc:	63ae      	str	r6, [r5, #56]	; 0x38
	k_sem_give(&ctx->sync);
 800d4de:	f105 0020 	add.w	r0, r5, #32
	z_impl_k_sem_give(sem);
 800d4e2:	f7fb ffcd 	bl	8009480 <z_impl_k_sem_give>
}
 800d4e6:	b002      	add	sp, #8
 800d4e8:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800d4ea:	68a3      	ldr	r3, [r4, #8]
 800d4ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4f0:	d1fb      	bne.n	800d4ea <spi_stm32_complete+0x6e>
 800d4f2:	e7e4      	b.n	800d4be <spi_stm32_complete+0x42>

0800d4f4 <spi_stm32_isr>:
{
 800d4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f6:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800d4f8:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800d4fa:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800d4fc:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800d4fe:	4638      	mov	r0, r7
 800d500:	f7f8 f9c4 	bl	800588c <spi_stm32_get_err>
	if (err) {
 800d504:	4605      	mov	r5, r0
 800d506:	b968      	cbnz	r0, 800d524 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800d508:	4630      	mov	r0, r6
 800d50a:	f7ff fded 	bl	800d0e8 <spi_stm32_transfer_ongoing>
 800d50e:	b970      	cbnz	r0, 800d52e <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800d510:	b91d      	cbnz	r5, 800d51a <spi_stm32_isr+0x26>
 800d512:	4630      	mov	r0, r6
 800d514:	f7ff fde8 	bl	800d0e8 <spi_stm32_transfer_ongoing>
 800d518:	b918      	cbnz	r0, 800d522 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800d51a:	4629      	mov	r1, r5
 800d51c:	4620      	mov	r0, r4
 800d51e:	f7ff ffad 	bl	800d47c <spi_stm32_complete>
}
 800d522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800d524:	4601      	mov	r1, r0
 800d526:	4620      	mov	r0, r4
 800d528:	f7ff ffa8 	bl	800d47c <spi_stm32_complete>
		return;
 800d52c:	e7f9      	b.n	800d522 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800d52e:	4631      	mov	r1, r6
 800d530:	4638      	mov	r0, r7
 800d532:	f7ff ff46 	bl	800d3c2 <spi_stm32_shift_frames>
 800d536:	4605      	mov	r5, r0
 800d538:	e7ea      	b.n	800d510 <spi_stm32_isr+0x1c>

0800d53a <spi_stm32_transceive>:
{
 800d53a:	b510      	push	{r4, lr}
 800d53c:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800d53e:	2400      	movs	r4, #0
 800d540:	9401      	str	r4, [sp, #4]
 800d542:	9400      	str	r4, [sp, #0]
 800d544:	f7f8 f9d2 	bl	80058ec <transceive>
}
 800d548:	b002      	add	sp, #8
 800d54a:	bd10      	pop	{r4, pc}

0800d54c <spi_stm32_release>:
{
 800d54c:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800d54e:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	b1c3      	cbz	r3, 800d586 <spi_stm32_release+0x3a>
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	b1b3      	cbz	r3, 800d586 <spi_stm32_release+0x3a>
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	b1a2      	cbz	r2, 800d586 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800d55c:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800d55e:	f7fc fead 	bl	800a2bc <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800d562:	6823      	ldr	r3, [r4, #0]
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800d56a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	2301      	movs	r3, #1
 800d570:	408b      	lsls	r3, r1
 800d572:	421a      	tst	r2, r3
 800d574:	d10b      	bne.n	800d58e <spi_stm32_release+0x42>
 800d576:	2300      	movs	r3, #0
	if (value != 0)	{
 800d578:	b15b      	cbz	r3, 800d592 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d57a:	2301      	movs	r3, #1
 800d57c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d580:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	4798      	blx	r3
 800d586:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800d588:	b153      	cbz	r3, 800d5a0 <spi_stm32_release+0x54>
}
 800d58a:	2000      	movs	r0, #0
 800d58c:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800d58e:	2301      	movs	r3, #1
 800d590:	e7f2      	b.n	800d578 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800d592:	2301      	movs	r3, #1
 800d594:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800d598:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800d59e:	e7f2      	b.n	800d586 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800d5a0:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800d5a2:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800d5a6:	f7fb ff6b 	bl	8009480 <z_impl_k_sem_give>
}
 800d5aa:	e7ee      	b.n	800d58a <spi_stm32_release+0x3e>

0800d5ac <timer_work_handler>:
{
 800d5ac:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800d5ae:	f7f9 f923 	bl	80067f8 <TimerIrqHandler>
}
 800d5b2:	bd08      	pop	{r3, pc}

0800d5b4 <RtcGetTimerValue>:
{
 800d5b4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800d5b6:	f000 fe79 	bl	800e2ac <z_impl_k_uptime_ticks>
 800d5ba:	220a      	movs	r2, #10
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f7f3 fa0d 	bl	80009dc <__aeabi_uldivmod>
}
 800d5c2:	bd08      	pop	{r3, pc}

0800d5c4 <RtcGetMinimumTimeout>:
}
 800d5c4:	2001      	movs	r0, #1
 800d5c6:	4770      	bx	lr

0800d5c8 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800d5c8:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800d5ca:	0f81      	lsrs	r1, r0, #30
 800d5cc:	0083      	lsls	r3, r0, #2
 800d5ce:	1818      	adds	r0, r3, r0
 800d5d0:	f141 0100 	adc.w	r1, r1, #0
 800d5d4:	1800      	adds	r0, r0, r0
 800d5d6:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800d5d8:	f7fc fc94 	bl	8009f04 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800d5dc:	bd08      	pop	{r3, pc}

0800d5de <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800d5de:	4770      	bx	lr

0800d5e0 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800d5e0:	4770      	bx	lr

0800d5e2 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800d5e2:	f04f 0210 	mov.w	r2, #16
 800d5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ea:	f382 8812 	msr	BASEPRI_MAX, r2
 800d5ee:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800d5f2:	6003      	str	r3, [r0, #0]
}
 800d5f4:	4770      	bx	lr

0800d5f6 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800d5f6:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
}
 800d600:	4770      	bx	lr

0800d602 <clamp_int8>:
	if (x < min) {
 800d602:	4288      	cmp	r0, r1
 800d604:	db03      	blt.n	800d60e <clamp_int8+0xc>
	} else if (x > max) {
 800d606:	4290      	cmp	r0, r2
 800d608:	dd02      	ble.n	800d610 <clamp_int8+0xe>
		return max;
 800d60a:	4610      	mov	r0, r2
 800d60c:	4770      	bx	lr
		return min;
 800d60e:	4608      	mov	r0, r1
}
 800d610:	4770      	bx	lr

0800d612 <SX1276CheckRfFrequency>:
}
 800d612:	2001      	movs	r0, #1
 800d614:	4770      	bx	lr

0800d616 <sx127x_antenna_configure>:
}
 800d616:	2000      	movs	r0, #0
 800d618:	4770      	bx	lr

0800d61a <SX1276GetBoardTcxoWakeupTime>:
}
 800d61a:	2000      	movs	r0, #0
 800d61c:	4770      	bx	lr

0800d61e <SX1276SetAntSwLowPower>:
}
 800d61e:	4770      	bx	lr

0800d620 <SX1276SetBoardTcxo>:
}
 800d620:	4770      	bx	lr

0800d622 <SX1276SetAntSw>:
}
 800d622:	4770      	bx	lr

0800d624 <sx127x_read>:
{
 800d624:	b508      	push	{r3, lr}
 800d626:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800d628:	460a      	mov	r2, r1
 800d62a:	2100      	movs	r1, #0
 800d62c:	f7f8 fd70 	bl	8006110 <sx127x_transceive>
}
 800d630:	bd08      	pop	{r3, pc}

0800d632 <sx127x_write>:
{
 800d632:	b508      	push	{r3, lr}
 800d634:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800d636:	460a      	mov	r2, r1
 800d638:	2101      	movs	r1, #1
 800d63a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800d63e:	f7f8 fd67 	bl	8006110 <sx127x_transceive>
}
 800d642:	bd08      	pop	{r3, pc}

0800d644 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800d644:	e004      	b.n	800d650 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800d646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64a:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800d64e:	461a      	mov	r2, r3
 800d650:	1e53      	subs	r3, r2, #1
 800d652:	b29b      	uxth	r3, r3
 800d654:	2a00      	cmp	r2, #0
 800d656:	d1f6      	bne.n	800d646 <memcpy1+0x2>
    }
}
 800d658:	4770      	bx	lr

0800d65a <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800d65a:	b570      	push	{r4, r5, r6, lr}
 800d65c:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800d65e:	f7ff ffb1 	bl	800d5c4 <RtcGetMinimumTimeout>
 800d662:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800d664:	2301      	movs	r3, #1
 800d666:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800d668:	6826      	ldr	r6, [r4, #0]
 800d66a:	f7f8 fa7b 	bl	8005b64 <RtcGetTimerElapsedTime>
 800d66e:	4428      	add	r0, r5
 800d670:	4286      	cmp	r6, r0
 800d672:	d303      	bcc.n	800d67c <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800d674:	6820      	ldr	r0, [r4, #0]
 800d676:	f7f8 fa8b 	bl	8005b90 <RtcSetAlarm>
}
 800d67a:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800d67c:	f7f8 fa72 	bl	8005b64 <RtcGetTimerElapsedTime>
 800d680:	4405      	add	r5, r0
 800d682:	6025      	str	r5, [r4, #0]
 800d684:	e7f6      	b.n	800d674 <TimerSetTimeout+0x1a>

0800d686 <TimerInit>:
    obj->Timestamp = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800d68a:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800d68c:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800d68e:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800d690:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800d692:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800d694:	6143      	str	r3, [r0, #20]
}
 800d696:	4770      	bx	lr

0800d698 <TimerSetValue>:
{
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800d69c:	4608      	mov	r0, r1
 800d69e:	f7ff ff9e 	bl	800d5de <RtcMs2Tick>
 800d6a2:	4605      	mov	r5, r0
    TimerStop( obj );
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f7f9 f8eb 	bl	8006880 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800d6aa:	f7ff ff8b 	bl	800d5c4 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800d6ae:	4285      	cmp	r5, r0
 800d6b0:	d300      	bcc.n	800d6b4 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800d6b2:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800d6b4:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800d6b6:	6060      	str	r0, [r4, #4]
}
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}

0800d6ba <TimerGetCurrentTime>:
{
 800d6ba:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800d6bc:	f7ff ff7a 	bl	800d5b4 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800d6c0:	f7ff ff8e 	bl	800d5e0 <RtcTick2Ms>
}
 800d6c4:	bd08      	pop	{r3, pc}

0800d6c6 <TimerGetElapsedTime>:
{
 800d6c6:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	b908      	cbnz	r0, 800d6d0 <TimerGetElapsedTime+0xa>
}
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800d6d0:	f7ff ff70 	bl	800d5b4 <RtcGetTimerValue>
 800d6d4:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7ff ff81 	bl	800d5de <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800d6dc:	1a28      	subs	r0, r5, r0
 800d6de:	f7ff ff7f 	bl	800d5e0 <RtcTick2Ms>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	e7f2      	b.n	800d6cc <TimerGetElapsedTime+0x6>

0800d6e6 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800d6e6:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800d6e8:	f7ff ff6e 	bl	800d5c8 <DelayMsMcu>
}
 800d6ec:	bd08      	pop	{r3, pc}

0800d6ee <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800d6ee:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d6f0:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d6f4:	b2c3      	uxtb	r3, r0
 800d6f6:	fb02 f303 	mul.w	r3, r2, r3
 800d6fa:	3380      	adds	r3, #128	; 0x80
 800d6fc:	0a1b      	lsrs	r3, r3, #8
}
 800d6fe:	fb02 3001 	mla	r0, r2, r1, r3
 800d702:	4770      	bx	lr

0800d704 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800d704:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d706:	b941      	cbnz	r1, 800d71a <SX1276GetGfskTimeOnAirNumerator+0x16>
 800d708:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800d70a:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800d70c:	b13b      	cbz	r3, 800d71e <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800d70e:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800d710:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800d712:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800d716:	3018      	adds	r0, #24
 800d718:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d71a:	2100      	movs	r1, #0
 800d71c:	e7f5      	b.n	800d70a <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800d71e:	2300      	movs	r3, #0
 800d720:	e7f6      	b.n	800d710 <SX1276GetGfskTimeOnAirNumerator+0xc>

0800d722 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800d722:	b570      	push	{r4, r5, r6, lr}
 800d724:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800d728:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800d72c:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d72e:	f1a1 0c05 	sub.w	ip, r1, #5
 800d732:	f1bc 0f01 	cmp.w	ip, #1
 800d736:	d932      	bls.n	800d79e <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d738:	b918      	cbnz	r0, 800d742 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800d73a:	f1a1 060b 	sub.w	r6, r1, #11
 800d73e:	2e01      	cmp	r6, #1
 800d740:	d935      	bls.n	800d7ae <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800d742:	2801      	cmp	r0, #1
 800d744:	d02f      	beq.n	800d7a6 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800d746:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d748:	f89d e014 	ldrb.w	lr, [sp, #20]
 800d74c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800d750:	b38d      	cbz	r5, 800d7b6 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800d752:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d756:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800d758:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800d75a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800d75e:	b36c      	cbz	r4, 800d7bc <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800d760:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800d764:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800d766:	2906      	cmp	r1, #6
 800d768:	d904      	bls.n	800d774 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800d76a:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800d76e:	b10e      	cbz	r6, 800d774 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800d770:	1e88      	subs	r0, r1, #2
 800d772:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800d774:	f1bc 0f00 	cmp.w	ip, #0
 800d778:	db23      	blt.n	800d7c2 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d77a:	4484      	add	ip, r0
 800d77c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800d780:	fb9c fcf0 	sdiv	ip, ip, r0
 800d784:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800d788:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800d78c:	2906      	cmp	r1, #6
 800d78e:	d801      	bhi.n	800d794 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800d790:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d794:	0080      	lsls	r0, r0, #2
 800d796:	3001      	adds	r0, #1
 800d798:	3902      	subs	r1, #2
}
 800d79a:	4088      	lsls	r0, r1
 800d79c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800d79e:	2b0b      	cmp	r3, #11
 800d7a0:	d8ca      	bhi.n	800d738 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800d7a2:	230c      	movs	r3, #12
 800d7a4:	e7c8      	b.n	800d738 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d7a6:	290c      	cmp	r1, #12
 800d7a8:	d003      	beq.n	800d7b2 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800d7aa:	2600      	movs	r6, #0
 800d7ac:	e7cc      	b.n	800d748 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800d7ae:	2601      	movs	r6, #1
 800d7b0:	e7ca      	b.n	800d748 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800d7b2:	2601      	movs	r6, #1
 800d7b4:	e7c8      	b.n	800d748 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800d7b6:	f04f 0c00 	mov.w	ip, #0
 800d7ba:	e7cc      	b.n	800d756 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800d7bc:	f04f 0c14 	mov.w	ip, #20
 800d7c0:	e7d0      	b.n	800d764 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800d7c2:	f04f 0c00 	mov.w	ip, #0
 800d7c6:	e7d8      	b.n	800d77a <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800d7c8 <SX1276ReadFifo>:
{
 800d7c8:	b508      	push	{r3, lr}
 800d7ca:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d7cc:	4601      	mov	r1, r0
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f7f8 fde2 	bl	8006398 <SX1276ReadBuffer>
}
 800d7d4:	bd08      	pop	{r3, pc}

0800d7d6 <SX1276WriteFifo>:
{
 800d7d6:	b508      	push	{r3, lr}
 800d7d8:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800d7da:	4601      	mov	r1, r0
 800d7dc:	2000      	movs	r0, #0
 800d7de:	f7f8 fedf 	bl	80065a0 <SX1276WriteBuffer>
}
 800d7e2:	bd08      	pop	{r3, pc}

0800d7e4 <SX1276GetTimeOnAir>:
{
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	460e      	mov	r6, r1
 800d7ea:	4615      	mov	r5, r2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800d7f2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800d7f6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800d7fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800d7fe:	b148      	cbz	r0, 800d814 <SX1276GetTimeOnAir+0x30>
 800d800:	2801      	cmp	r0, #1
 800d802:	d010      	beq.n	800d826 <SX1276GetTimeOnAir+0x42>
 800d804:	2501      	movs	r5, #1
 800d806:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800d808:	1960      	adds	r0, r4, r5
 800d80a:	3801      	subs	r0, #1
}
 800d80c:	fbb0 f0f5 	udiv	r0, r0, r5
 800d810:	b005      	add	sp, #20
 800d812:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800d814:	463a      	mov	r2, r7
 800d816:	4660      	mov	r0, ip
 800d818:	f7ff ff74 	bl	800d704 <SX1276GetGfskTimeOnAirNumerator>
 800d81c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800d820:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800d824:	e7f0      	b.n	800d808 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	9701      	str	r7, [sp, #4]
 800d82a:	9100      	str	r1, [sp, #0]
 800d82c:	4663      	mov	r3, ip
 800d82e:	4629      	mov	r1, r5
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff ff76 	bl	800d722 <SX1276GetLoRaTimeOnAirNumerator>
 800d836:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800d83a:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800d83e:	4630      	mov	r0, r6
 800d840:	f7f9 f89a 	bl	8006978 <SX1276GetLoRaBandwidthInHz>
 800d844:	4605      	mov	r5, r0
        break;
 800d846:	e7df      	b.n	800d808 <SX1276GetTimeOnAir+0x24>

0800d848 <SX1276Write>:
{
 800d848:	b500      	push	{lr}
 800d84a:	b083      	sub	sp, #12
 800d84c:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800d850:	2201      	movs	r2, #1
 800d852:	f10d 0107 	add.w	r1, sp, #7
 800d856:	f7f8 fea3 	bl	80065a0 <SX1276WriteBuffer>
}
 800d85a:	b003      	add	sp, #12
 800d85c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d860 <SX1276Read>:
{
 800d860:	b500      	push	{lr}
 800d862:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800d864:	2201      	movs	r2, #1
 800d866:	f10d 0107 	add.w	r1, sp, #7
 800d86a:	f7f8 fd95 	bl	8006398 <SX1276ReadBuffer>
}
 800d86e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d872:	b003      	add	sp, #12
 800d874:	f85d fb04 	ldr.w	pc, [sp], #4

0800d878 <SX1276SetOpMode>:
{
 800d878:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800d87a:	4604      	mov	r4, r0
 800d87c:	b970      	cbnz	r0, 800d89c <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800d87e:	2001      	movs	r0, #1
 800d880:	f7ff fecd 	bl	800d61e <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800d884:	2001      	movs	r0, #1
 800d886:	f7ff ffeb 	bl	800d860 <SX1276Read>
 800d88a:	b241      	sxtb	r1, r0
 800d88c:	f021 0107 	bic.w	r1, r1, #7
 800d890:	4321      	orrs	r1, r4
 800d892:	b2c9      	uxtb	r1, r1
 800d894:	2001      	movs	r0, #1
 800d896:	f7ff ffd7 	bl	800d848 <SX1276Write>
}
 800d89a:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800d89c:	2001      	movs	r0, #1
 800d89e:	f7ff febf 	bl	800d620 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f7ff febb 	bl	800d61e <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f7ff feba 	bl	800d622 <SX1276SetAntSw>
 800d8ae:	e7e9      	b.n	800d884 <SX1276SetOpMode+0xc>

0800d8b0 <SX1276IsChannelFree>:
{
 800d8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b2:	4607      	mov	r7, r0
 800d8b4:	460c      	mov	r4, r1
 800d8b6:	4616      	mov	r6, r2
 800d8b8:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800d8ba:	f7f9 fbab 	bl	8007014 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800d8be:	2000      	movs	r0, #0
 800d8c0:	f7f9 fe3e 	bl	8007540 <SX1276SetModem>
    SX1276SetChannel( freq );
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	f7f9 f881 	bl	80069cc <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f7f9 f82c 	bl	8006928 <GetFskBandwidthRegValue>
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	4601      	mov	r1, r0
 800d8d4:	2012      	movs	r0, #18
 800d8d6:	f7ff ffb7 	bl	800d848 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800d8da:	4621      	mov	r1, r4
 800d8dc:	2013      	movs	r0, #19
 800d8de:	f7ff ffb3 	bl	800d848 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800d8e2:	2005      	movs	r0, #5
 800d8e4:	f7ff ffc8 	bl	800d878 <SX1276SetOpMode>
    DelayMs( 1 );
 800d8e8:	2001      	movs	r0, #1
 800d8ea:	f7ff fefc 	bl	800d6e6 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800d8ee:	f7ff fee4 	bl	800d6ba <TimerGetCurrentTime>
 800d8f2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7ff fee6 	bl	800d6c6 <TimerGetElapsedTime>
 800d8fa:	42a8      	cmp	r0, r5
 800d8fc:	d206      	bcs.n	800d90c <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800d8fe:	2000      	movs	r0, #0
 800d900:	f7f9 fdf6 	bl	80074f0 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800d904:	42b0      	cmp	r0, r6
 800d906:	ddf5      	ble.n	800d8f4 <SX1276IsChannelFree+0x44>
            status = false;
 800d908:	2400      	movs	r4, #0
 800d90a:	e000      	b.n	800d90e <SX1276IsChannelFree+0x5e>
    bool status = true;
 800d90c:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800d90e:	f7f9 fb81 	bl	8007014 <SX1276SetSleep>
}
 800d912:	4620      	mov	r0, r4
 800d914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d916 <SX1276Random>:
{
 800d916:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800d918:	2001      	movs	r0, #1
 800d91a:	f7f9 fe11 	bl	8007540 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d91e:	21ff      	movs	r1, #255	; 0xff
 800d920:	2011      	movs	r0, #17
 800d922:	f7ff ff91 	bl	800d848 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800d926:	2005      	movs	r0, #5
 800d928:	f7ff ffa6 	bl	800d878 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800d92c:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800d92e:	462c      	mov	r4, r5
 800d930:	e00b      	b.n	800d94a <SX1276Random+0x34>
        DelayMs( 1 );
 800d932:	2001      	movs	r0, #1
 800d934:	f7ff fed7 	bl	800d6e6 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800d938:	202c      	movs	r0, #44	; 0x2c
 800d93a:	f7ff ff91 	bl	800d860 <SX1276Read>
 800d93e:	f000 0001 	and.w	r0, r0, #1
 800d942:	40a0      	lsls	r0, r4
 800d944:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800d946:	3401      	adds	r4, #1
 800d948:	b2e4      	uxtb	r4, r4
 800d94a:	2c1f      	cmp	r4, #31
 800d94c:	d9f1      	bls.n	800d932 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800d94e:	f7f9 fb61 	bl	8007014 <SX1276SetSleep>
}
 800d952:	4628      	mov	r0, r5
 800d954:	bd38      	pop	{r3, r4, r5, pc}

0800d956 <SX1276GetWakeupTime>:
{
 800d956:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800d958:	f7ff fe5f 	bl	800d61a <SX1276GetBoardTcxoWakeupTime>
}
 800d95c:	3001      	adds	r0, #1
 800d95e:	bd08      	pop	{r3, pc}

0800d960 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800d960:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d966:	6843      	ldr	r3, [r0, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800d970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d974:	d02f      	beq.n	800d9d6 <uart_stm32_config_get+0x76>
 800d976:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d97a:	d12e      	bne.n	800d9da <uart_stm32_config_get+0x7a>
 800d97c:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800d97e:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d980:	6843      	ldr	r3, [r0, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800d98a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d98e:	d028      	beq.n	800d9e2 <uart_stm32_config_get+0x82>
 800d990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d994:	d027      	beq.n	800d9e6 <uart_stm32_config_get+0x86>
 800d996:	b313      	cbz	r3, 800d9de <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800d998:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800d99a:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d99c:	6843      	ldr	r3, [r0, #4]
 800d99e:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800d9a0:	6813      	ldr	r3, [r2, #0]
 800d9a2:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800d9a6:	6812      	ldr	r2, [r2, #0]
 800d9a8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800d9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b0:	d01d      	beq.n	800d9ee <uart_stm32_config_get+0x8e>
 800d9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9b6:	d11d      	bne.n	800d9f4 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800d9b8:	b1ba      	cbz	r2, 800d9ea <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800d9ba:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800d9bc:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800d9be:	6843      	ldr	r3, [r0, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800d9c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9cc:	d019      	beq.n	800da02 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800d9ce:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800d9d0:	71cb      	strb	r3, [r1, #7]
}
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800d9d6:	2302      	movs	r3, #2
 800d9d8:	e7d1      	b.n	800d97e <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e7cf      	b.n	800d97e <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e7db      	b.n	800d99a <uart_stm32_config_get+0x3a>
	switch (sb) {
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e7d9      	b.n	800d99a <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e7d7      	b.n	800d99a <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800d9ea:	2302      	movs	r3, #2
 800d9ec:	e7e6      	b.n	800d9bc <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800d9ee:	b922      	cbnz	r2, 800d9fa <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	e7e3      	b.n	800d9bc <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800d9f4:	b91a      	cbnz	r2, 800d9fe <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	e7e0      	b.n	800d9bc <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e7de      	b.n	800d9bc <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800d9fe:	2302      	movs	r3, #2
 800da00:	e7dc      	b.n	800d9bc <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800da02:	2301      	movs	r3, #1
 800da04:	e7e4      	b.n	800d9d0 <uart_stm32_config_get+0x70>

0800da06 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800da06:	6843      	ldr	r3, [r0, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800da0a:	69da      	ldr	r2, [r3, #28]
 800da0c:	f012 0f08 	tst.w	r2, #8
 800da10:	d001      	beq.n	800da16 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800da12:	2208      	movs	r2, #8
 800da14:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	f012 0f20 	tst.w	r2, #32
 800da1c:	d003      	beq.n	800da26 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800da1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800da20:	700b      	strb	r3, [r1, #0]
	return 0;
 800da22:	2000      	movs	r0, #0
 800da24:	4770      	bx	lr
		return -1;
 800da26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800da2a:	4770      	bx	lr

0800da2c <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800da2c:	6843      	ldr	r3, [r0, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800da30:	69da      	ldr	r2, [r3, #28]
 800da32:	f012 0f80 	tst.w	r2, #128	; 0x80
 800da36:	d0fb      	beq.n	800da30 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800da38:	b289      	uxth	r1, r1
 800da3a:	8519      	strh	r1, [r3, #40]	; 0x28
}
 800da3c:	4770      	bx	lr

0800da3e <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800da3e:	6843      	ldr	r3, [r0, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800da42:	69d8      	ldr	r0, [r3, #28]
 800da44:	f010 0008 	ands.w	r0, r0, #8
 800da48:	d000      	beq.n	800da4c <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800da4a:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800da4c:	69da      	ldr	r2, [r3, #28]
 800da4e:	f012 0f01 	tst.w	r2, #1
 800da52:	d001      	beq.n	800da58 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800da54:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800da58:	69da      	ldr	r2, [r3, #28]
 800da5a:	f012 0f02 	tst.w	r2, #2
 800da5e:	d001      	beq.n	800da64 <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800da60:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800da64:	f010 0f01 	tst.w	r0, #1
 800da68:	d001      	beq.n	800da6e <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800da6a:	2208      	movs	r2, #8
 800da6c:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800da6e:	f010 0f02 	tst.w	r0, #2
 800da72:	d001      	beq.n	800da78 <uart_stm32_err_check+0x3a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800da74:	2201      	movs	r2, #1
 800da76:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800da78:	f010 0f04 	tst.w	r0, #4
 800da7c:	d001      	beq.n	800da82 <uart_stm32_err_check+0x44>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800da7e:	2202      	movs	r2, #2
 800da80:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800da82:	2204      	movs	r2, #4
 800da84:	621a      	str	r2, [r3, #32]
}
 800da86:	4770      	bx	lr

0800da88 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800da88:	2300      	movs	r3, #0
 800da8a:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800da8c:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800da8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da92:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 800da94:	60c3      	str	r3, [r0, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 800da96:	6103      	str	r3, [r0, #16]
}
 800da98:	4770      	bx	lr

0800da9a <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800da9a:	2300      	movs	r3, #0
 800da9c:	6003      	str	r3, [r0, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800da9e:	6043      	str	r3, [r0, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 800daa0:	6083      	str	r3, [r0, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 800daa2:	60c3      	str	r3, [r0, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 800daa4:	6103      	str	r3, [r0, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800daa6:	6143      	str	r3, [r0, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 800daa8:	6183      	str	r3, [r0, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800daaa:	61c3      	str	r3, [r0, #28]
}
 800daac:	4770      	bx	lr

0800daae <LL_TIM_OC_Init>:
{
 800daae:	b508      	push	{r3, lr}
 800dab0:	460b      	mov	r3, r1
 800dab2:	4611      	mov	r1, r2
  switch (Channel)
 800dab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dab8:	d01d      	beq.n	800daf6 <LL_TIM_OC_Init+0x48>
 800daba:	d80e      	bhi.n	800dada <LL_TIM_OC_Init+0x2c>
 800dabc:	2b10      	cmp	r3, #16
 800dabe:	d017      	beq.n	800daf0 <LL_TIM_OC_Init+0x42>
 800dac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dac4:	d102      	bne.n	800dacc <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800dac6:	f7fa fc99 	bl	80083fc <OC3Config>
      break;
 800daca:	e005      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d102      	bne.n	800dad6 <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800dad0:	f7fa fc12 	bl	80082f8 <OC1Config>
      break;
 800dad4:	e000      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800dad6:	2001      	movs	r0, #1
}
 800dad8:	bd08      	pop	{r3, pc}
  switch (Channel)
 800dada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dade:	d00d      	beq.n	800dafc <LL_TIM_OC_Init+0x4e>
 800dae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dae4:	d102      	bne.n	800daec <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800dae6:	f7fa fd33 	bl	8008550 <OC6Config>
      break;
 800daea:	e7f5      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800daec:	2001      	movs	r0, #1
 800daee:	e7f3      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800daf0:	f7fa fc42 	bl	8008378 <OC2Config>
      break;
 800daf4:	e7f0      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800daf6:	f7fa fcc3 	bl	8008480 <OC4Config>
      break;
 800dafa:	e7ed      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800dafc:	f7fa fcf4 	bl	80084e8 <OC5Config>
      break;
 800db00:	e7ea      	b.n	800dad8 <LL_TIM_OC_Init+0x2a>

0800db02 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800db02:	680a      	ldr	r2, [r1, #0]
 800db04:	0912      	lsrs	r2, r2, #4
 800db06:	3201      	adds	r2, #1
 800db08:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800db0c:	684b      	ldr	r3, [r1, #4]
 800db0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db12:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800db16:	688b      	ldr	r3, [r1, #8]
 800db18:	0e5b      	lsrs	r3, r3, #25
 800db1a:	3301      	adds	r3, #1
 800db1c:	005b      	lsls	r3, r3, #1
}
 800db1e:	fbb0 f0f3 	udiv	r0, r0, r3
 800db22:	4770      	bx	lr

0800db24 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800db24:	6341      	str	r1, [r0, #52]	; 0x34
}
 800db26:	4770      	bx	lr

0800db28 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800db28:	6381      	str	r1, [r0, #56]	; 0x38
}
 800db2a:	4770      	bx	lr

0800db2c <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800db2c:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800db2e:	4770      	bx	lr

0800db30 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800db30:	6401      	str	r1, [r0, #64]	; 0x40
}
 800db32:	4770      	bx	lr

0800db34 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800db34:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800db36:	6581      	str	r1, [r0, #88]	; 0x58
}
 800db38:	4770      	bx	lr

0800db3a <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800db3a:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800db3c:	4770      	bx	lr

0800db3e <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800db3e:	f06f 0302 	mvn.w	r3, #2
 800db42:	6103      	str	r3, [r0, #16]
}
 800db44:	4770      	bx	lr

0800db46 <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800db46:	6900      	ldr	r0, [r0, #16]
 800db48:	f010 0002 	ands.w	r0, r0, #2
 800db4c:	d000      	beq.n	800db50 <LL_TIM_IsActiveFlag_CC1+0xa>
 800db4e:	2001      	movs	r0, #1
}
 800db50:	4770      	bx	lr

0800db52 <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800db52:	f06f 0304 	mvn.w	r3, #4
 800db56:	6103      	str	r3, [r0, #16]
}
 800db58:	4770      	bx	lr

0800db5a <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800db5a:	6900      	ldr	r0, [r0, #16]
 800db5c:	f010 0004 	ands.w	r0, r0, #4
 800db60:	d000      	beq.n	800db64 <LL_TIM_IsActiveFlag_CC2+0xa>
 800db62:	2001      	movs	r0, #1
}
 800db64:	4770      	bx	lr

0800db66 <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800db66:	f06f 0308 	mvn.w	r3, #8
 800db6a:	6103      	str	r3, [r0, #16]
}
 800db6c:	4770      	bx	lr

0800db6e <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800db6e:	6900      	ldr	r0, [r0, #16]
 800db70:	f010 0008 	ands.w	r0, r0, #8
 800db74:	d000      	beq.n	800db78 <LL_TIM_IsActiveFlag_CC3+0xa>
 800db76:	2001      	movs	r0, #1
}
 800db78:	4770      	bx	lr

0800db7a <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800db7a:	f06f 0310 	mvn.w	r3, #16
 800db7e:	6103      	str	r3, [r0, #16]
}
 800db80:	4770      	bx	lr

0800db82 <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800db82:	6900      	ldr	r0, [r0, #16]
 800db84:	f010 0010 	ands.w	r0, r0, #16
 800db88:	d000      	beq.n	800db8c <LL_TIM_IsActiveFlag_CC4+0xa>
 800db8a:	2001      	movs	r0, #1
}
 800db8c:	4770      	bx	lr

0800db8e <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 800db8e:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 800db92:	6103      	str	r3, [r0, #16]
}
 800db94:	4770      	bx	lr

0800db96 <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 800db96:	6900      	ldr	r0, [r0, #16]
 800db98:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800db9c:	d000      	beq.n	800dba0 <LL_TIM_IsActiveFlag_CC5+0xa>
 800db9e:	2001      	movs	r0, #1
}
 800dba0:	4770      	bx	lr

0800dba2 <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 800dba2:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 800dba6:	6103      	str	r3, [r0, #16]
}
 800dba8:	4770      	bx	lr

0800dbaa <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800dbaa:	6943      	ldr	r3, [r0, #20]
 800dbac:	f043 0302 	orr.w	r3, r3, #2
 800dbb0:	6143      	str	r3, [r0, #20]
}
 800dbb2:	4770      	bx	lr

0800dbb4 <get_polarity>:
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800dbb4:	f010 0f01 	tst.w	r0, #1
 800dbb8:	d001      	beq.n	800dbbe <get_polarity+0xa>
    return LL_TIM_OCPOLARITY_LOW;
 800dbba:	2002      	movs	r0, #2
 800dbbc:	4770      	bx	lr
        return LL_TIM_OCPOLARITY_HIGH;
 800dbbe:	2000      	movs	r0, #0
}
 800dbc0:	4770      	bx	lr

0800dbc2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800dbc2:	b148      	cbz	r0, 800dbd8 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800dbc4:	68c3      	ldr	r3, [r0, #12]
 800dbc6:	8818      	ldrh	r0, [r3, #0]
 800dbc8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800dbcc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800dbd0:	bf14      	ite	ne
 800dbd2:	2000      	movne	r0, #0
 800dbd4:	2001      	moveq	r0, #1
 800dbd6:	4770      	bx	lr
		return false;
 800dbd8:	2000      	movs	r0, #0
}
 800dbda:	4770      	bx	lr

0800dbdc <arch_system_halt>:
	__asm__ volatile(
 800dbdc:	f04f 0210 	mov.w	r2, #16
 800dbe0:	f3ef 8311 	mrs	r3, BASEPRI
 800dbe4:	f382 8812 	msr	BASEPRI_MAX, r2
 800dbe8:	f3bf 8f6f 	isb	sy
	for (;;) {
 800dbec:	e7fe      	b.n	800dbec <arch_system_halt+0x10>

0800dbee <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800dbee:	6902      	ldr	r2, [r0, #16]
 800dbf0:	6943      	ldr	r3, [r0, #20]
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	f012 0203 	ands.w	r2, r2, #3
 800dbf8:	d10d      	bne.n	800dc16 <create_free_list+0x28>
	slab->free_list = NULL;
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800dbfe:	e005      	b.n	800dc0c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800dc00:	6981      	ldr	r1, [r0, #24]
 800dc02:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800dc04:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800dc06:	6901      	ldr	r1, [r0, #16]
 800dc08:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800dc0a:	3201      	adds	r2, #1
 800dc0c:	68c1      	ldr	r1, [r0, #12]
 800dc0e:	4291      	cmp	r1, r2
 800dc10:	d8f6      	bhi.n	800dc00 <create_free_list+0x12>
	return 0;
 800dc12:	2000      	movs	r0, #0
 800dc14:	4770      	bx	lr
		return -EINVAL;
 800dc16:	f06f 0015 	mvn.w	r0, #21
}
 800dc1a:	4770      	bx	lr

0800dc1c <k_mem_slab_init>:
{
 800dc1c:	b510      	push	{r4, lr}
 800dc1e:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 800dc20:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
 800dc22:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
 800dc24:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 800dc26:	2300      	movs	r3, #0
 800dc28:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 800dc2a:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
 800dc2c:	f7ff ffdf 	bl	800dbee <create_free_list>
	if (rc < 0) {
 800dc30:	2800      	cmp	r0, #0
 800dc32:	db01      	blt.n	800dc38 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
 800dc34:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 800dc36:	6064      	str	r4, [r4, #4]
}
 800dc38:	bd10      	pop	{r4, pc}

0800dc3a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800dc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	460d      	mov	r5, r1
 800dc40:	f04f 0310 	mov.w	r3, #16
 800dc44:	f3ef 8611 	mrs	r6, BASEPRI
 800dc48:	f383 8812 	msr	BASEPRI_MAX, r3
 800dc4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800dc50:	6983      	ldr	r3, [r0, #24]
 800dc52:	b163      	cbz	r3, 800dc6e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	69a2      	ldr	r2, [r4, #24]
 800dc58:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800dc5a:	682b      	ldr	r3, [r5, #0]
 800dc5c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800dc5e:	69e3      	ldr	r3, [r4, #28]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800dc64:	f386 8811 	msr	BASEPRI, r6
 800dc68:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800dc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800dc72:	f000 f9e5 	bl	800e040 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d0ec      	beq.n	800dc54 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800dc7a:	682a      	ldr	r2, [r5, #0]
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800dc80:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 800dc82:	f000 f916 	bl	800deb2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800dc86:	4631      	mov	r1, r6
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f7fb fe05 	bl	8009898 <z_reschedule>
			return;
 800dc8e:	e7ed      	b.n	800dc6c <k_mem_slab_free+0x32>

0800dc90 <setup_thread_stack>:
{
 800dc90:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800dc92:	3207      	adds	r2, #7
 800dc94:	f022 0207 	bic.w	r2, r2, #7
 800dc98:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800dc9c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800dca0:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800dca2:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800dca4:	2200      	movs	r2, #0
 800dca6:	6702      	str	r2, [r0, #112]	; 0x70
}
 800dca8:	18c8      	adds	r0, r1, r3
 800dcaa:	bc10      	pop	{r4}
 800dcac:	4770      	bx	lr

0800dcae <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcae:	f3ef 8005 	mrs	r0, IPSR
}
 800dcb2:	3800      	subs	r0, #0
 800dcb4:	bf18      	it	ne
 800dcb6:	2001      	movne	r0, #1
 800dcb8:	4770      	bx	lr

0800dcba <z_impl_k_thread_name_set>:
}
 800dcba:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800dcbe:	4770      	bx	lr

0800dcc0 <k_thread_name_get>:
}
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	4770      	bx	lr

0800dcc4 <z_impl_k_thread_start>:
{
 800dcc4:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800dcc6:	f7fb ff1d 	bl	8009b04 <z_sched_start>
}
 800dcca:	bd08      	pop	{r3, pc}

0800dccc <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800dccc:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800dcce:	2400      	movs	r4, #0
 800dcd0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800dcd2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800dcd4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800dcd6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800dcd8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800dcda:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800dcdc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800dcde:	bc10      	pop	{r4}
 800dce0:	4770      	bx	lr

0800dce2 <z_impl_k_thread_create>:
{
 800dce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dce4:	b087      	sub	sp, #28
 800dce6:	4604      	mov	r4, r0
 800dce8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800dcea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800dcec:	2700      	movs	r7, #0
 800dcee:	9705      	str	r7, [sp, #20]
 800dcf0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800dcf2:	9704      	str	r7, [sp, #16]
 800dcf4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800dcf6:	9703      	str	r7, [sp, #12]
 800dcf8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800dcfa:	9702      	str	r7, [sp, #8]
 800dcfc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dcfe:	9701      	str	r7, [sp, #4]
 800dd00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800dd02:	9700      	str	r7, [sp, #0]
 800dd04:	f7fb f9c2 	bl	800908c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800dd08:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800dd0c:	bf08      	it	eq
 800dd0e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800dd12:	d102      	bne.n	800dd1a <z_impl_k_thread_create+0x38>
}
 800dd14:	4620      	mov	r0, r4
 800dd16:	b007      	add	sp, #28
 800dd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800dd1a:	4632      	mov	r2, r6
 800dd1c:	462b      	mov	r3, r5
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f7fb f9a6 	bl	8009070 <schedule_new_thread>
 800dd24:	e7f6      	b.n	800dd14 <z_impl_k_thread_create+0x32>

0800dd26 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800dd26:	b508      	push	{r3, lr}
	__asm__ volatile(
 800dd28:	f04f 0210 	mov.w	r2, #16
 800dd2c:	f3ef 8311 	mrs	r3, BASEPRI
 800dd30:	f382 8812 	msr	BASEPRI_MAX, r2
 800dd34:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800dd38:	f7f6 f8f4 	bl	8003f24 <arch_cpu_idle>
 800dd3c:	e7f4      	b.n	800dd28 <idle+0x2>

0800dd3e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800dd3e:	4288      	cmp	r0, r1
 800dd40:	da00      	bge.n	800dd44 <new_prio_for_inheritance+0x6>
 800dd42:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800dd44:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800dd48:	db01      	blt.n	800dd4e <new_prio_for_inheritance+0x10>
 800dd4a:	4608      	mov	r0, r1
 800dd4c:	4770      	bx	lr
 800dd4e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800dd52:	4770      	bx	lr

0800dd54 <adjust_owner_prio>:
{
 800dd54:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800dd56:	6880      	ldr	r0, [r0, #8]
 800dd58:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800dd5c:	428b      	cmp	r3, r1
 800dd5e:	d101      	bne.n	800dd64 <adjust_owner_prio+0x10>
	return false;
 800dd60:	2000      	movs	r0, #0
}
 800dd62:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800dd64:	f7fb ff1c 	bl	8009ba0 <z_set_prio>
 800dd68:	e7fb      	b.n	800dd62 <adjust_owner_prio+0xe>

0800dd6a <z_impl_k_mutex_init>:
{
 800dd6a:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800dd6c:	2000      	movs	r0, #0
 800dd6e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800dd70:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800dd72:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800dd74:	605b      	str	r3, [r3, #4]
}
 800dd76:	4770      	bx	lr

0800dd78 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6003      	str	r3, [r0, #0]
 800dd7c:	6043      	str	r3, [r0, #4]
 800dd7e:	6083      	str	r3, [r0, #8]
 800dd80:	60c3      	str	r3, [r0, #12]
 800dd82:	6041      	str	r1, [r0, #4]
}
 800dd84:	4770      	bx	lr

0800dd86 <k_work_submit_to_queue>:
{
 800dd86:	b530      	push	{r4, r5, lr}
 800dd88:	b083      	sub	sp, #12
 800dd8a:	9001      	str	r0, [sp, #4]
 800dd8c:	4608      	mov	r0, r1
 800dd8e:	f04f 0310 	mov.w	r3, #16
 800dd92:	f3ef 8511 	mrs	r5, BASEPRI
 800dd96:	f383 8812 	msr	BASEPRI_MAX, r3
 800dd9a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800dd9e:	a901      	add	r1, sp, #4
 800dda0:	f7fb fbbe 	bl	8009520 <submit_to_queue_locked>
 800dda4:	4604      	mov	r4, r0
	__asm__ volatile(
 800dda6:	f385 8811 	msr	BASEPRI, r5
 800ddaa:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	dc02      	bgt.n	800ddb8 <k_work_submit_to_queue+0x32>
}
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	b003      	add	sp, #12
 800ddb6:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800ddb8:	f7fc f8c2 	bl	8009f40 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d0f8      	beq.n	800ddb2 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800ddc0:	f7fc f810 	bl	8009de4 <z_impl_k_yield>
	return ret;
 800ddc4:	e7f5      	b.n	800ddb2 <k_work_submit_to_queue+0x2c>

0800ddc6 <thread_active_elsewhere>:
}
 800ddc6:	2000      	movs	r0, #0
 800ddc8:	4770      	bx	lr

0800ddca <pended_on_thread>:
}
 800ddca:	6880      	ldr	r0, [r0, #8]
 800ddcc:	4770      	bx	lr

0800ddce <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800ddce:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800ddd2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800ddd6:	4283      	cmp	r3, r0
 800ddd8:	d001      	beq.n	800ddde <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800ddda:	1ac0      	subs	r0, r0, r3
 800dddc:	4770      	bx	lr
	return 0;
 800ddde:	2000      	movs	r0, #0
}
 800dde0:	4770      	bx	lr

0800dde2 <z_unpend_thread_no_timeout>:
{
 800dde2:	b538      	push	{r3, r4, r5, lr}
 800dde4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800dde6:	2300      	movs	r3, #0
	__asm__ volatile(
 800dde8:	f04f 0210 	mov.w	r2, #16
 800ddec:	f3ef 8511 	mrs	r5, BASEPRI
 800ddf0:	f382 8812 	msr	BASEPRI_MAX, r2
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	e010      	b.n	800de1c <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f7ff ffe5 	bl	800ddca <pended_on_thread>
 800de00:	4621      	mov	r1, r4
 800de02:	f000 f823 	bl	800de4c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800de06:	7b63      	ldrb	r3, [r4, #13]
 800de08:	f023 0302 	bic.w	r3, r3, #2
 800de0c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800de12:	f385 8811 	msr	BASEPRI, r5
 800de16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800de1a:	2301      	movs	r3, #1
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d0ec      	beq.n	800ddfa <z_unpend_thread_no_timeout+0x18>
}
 800de20:	bd38      	pop	{r3, r4, r5, pc}

0800de22 <z_reschedule_irqlock>:
{
 800de22:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800de24:	4603      	mov	r3, r0
 800de26:	b920      	cbnz	r0, 800de32 <z_reschedule_irqlock+0x10>
 800de28:	f3ef 8205 	mrs	r2, IPSR
 800de2c:	b942      	cbnz	r2, 800de40 <z_reschedule_irqlock+0x1e>
 800de2e:	2201      	movs	r2, #1
 800de30:	e000      	b.n	800de34 <z_reschedule_irqlock+0x12>
 800de32:	2200      	movs	r2, #0
	if (resched(key)) {
 800de34:	b932      	cbnz	r2, 800de44 <z_reschedule_irqlock+0x22>
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
}
 800de3e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800de40:	2200      	movs	r2, #0
 800de42:	e7f7      	b.n	800de34 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800de44:	4618      	mov	r0, r3
 800de46:	f7f6 f915 	bl	8004074 <arch_swap>
	return ret;
 800de4a:	e7f8      	b.n	800de3e <z_reschedule_irqlock+0x1c>

0800de4c <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800de4c:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800de4e:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800de50:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800de52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800de54:	2300      	movs	r3, #0
 800de56:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800de58:	604b      	str	r3, [r1, #4]
}
 800de5a:	4770      	bx	lr

0800de5c <z_unpend_thread>:
{
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800de60:	2300      	movs	r3, #0
	__asm__ volatile(
 800de62:	f04f 0210 	mov.w	r2, #16
 800de66:	f3ef 8511 	mrs	r5, BASEPRI
 800de6a:	f382 8812 	msr	BASEPRI_MAX, r2
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	e010      	b.n	800de96 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff ffa8 	bl	800ddca <pended_on_thread>
 800de7a:	4621      	mov	r1, r4
 800de7c:	f7ff ffe6 	bl	800de4c <z_priq_dumb_remove>
 800de80:	7b63      	ldrb	r3, [r4, #13]
 800de82:	f023 0302 	bic.w	r3, r3, #2
 800de86:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800de88:	2300      	movs	r3, #0
 800de8a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800de8c:	f385 8811 	msr	BASEPRI, r5
 800de90:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800de94:	2301      	movs	r3, #1
 800de96:	2b00      	cmp	r3, #0
 800de98:	d0ec      	beq.n	800de74 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800de9a:	f104 0018 	add.w	r0, r4, #24
 800de9e:	f000 f99f 	bl	800e1e0 <z_abort_timeout>
}
 800dea2:	bd38      	pop	{r3, r4, r5, pc}

0800dea4 <z_priq_dumb_best>:
{
 800dea4:	4603      	mov	r3, r0
	return list->head == list;
 800dea6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800dea8:	4283      	cmp	r3, r0
 800deaa:	d000      	beq.n	800deae <z_priq_dumb_best+0xa>
}
 800deac:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800deae:	2000      	movs	r0, #0
	return thread;
 800deb0:	e7fc      	b.n	800deac <z_priq_dumb_best+0x8>

0800deb2 <z_ready_thread>:
{
 800deb2:	b538      	push	{r3, r4, r5, lr}
 800deb4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800deb6:	2300      	movs	r3, #0
	__asm__ volatile(
 800deb8:	f04f 0210 	mov.w	r2, #16
 800debc:	f3ef 8511 	mrs	r5, BASEPRI
 800dec0:	f382 8812 	msr	BASEPRI_MAX, r2
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	e004      	b.n	800ded4 <z_ready_thread+0x22>
	__asm__ volatile(
 800deca:	f385 8811 	msr	BASEPRI, r5
 800dece:	f3bf 8f6f 	isb	sy
 800ded2:	2301      	movs	r3, #1
 800ded4:	b943      	cbnz	r3, 800dee8 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff ff75 	bl	800ddc6 <thread_active_elsewhere>
 800dedc:	2800      	cmp	r0, #0
 800dede:	d1f4      	bne.n	800deca <z_ready_thread+0x18>
			ready_thread(thread);
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7fb fdcf 	bl	8009a84 <ready_thread>
 800dee6:	e7f0      	b.n	800deca <z_ready_thread+0x18>
}
 800dee8:	bd38      	pop	{r3, r4, r5, pc}

0800deea <z_thread_timeout>:
{
 800deea:	b570      	push	{r4, r5, r6, lr}
 800deec:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800deee:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800def2:	2300      	movs	r3, #0
	__asm__ volatile(
 800def4:	f04f 0210 	mov.w	r2, #16
 800def8:	f3ef 8611 	mrs	r6, BASEPRI
 800defc:	f382 8812 	msr	BASEPRI_MAX, r2
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	e011      	b.n	800df2a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800df06:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800df0a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800df0e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800df12:	f023 0310 	bic.w	r3, r3, #16
 800df16:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7fb fdb2 	bl	8009a84 <ready_thread>
	__asm__ volatile(
 800df20:	f386 8811 	msr	BASEPRI, r6
 800df24:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800df28:	2301      	movs	r3, #1
 800df2a:	b9ab      	cbnz	r3, 800df58 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800df2c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800df30:	f013 0f28 	tst.w	r3, #40	; 0x28
 800df34:	d1f4      	bne.n	800df20 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800df36:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0e3      	beq.n	800df06 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800df3e:	4628      	mov	r0, r5
 800df40:	f7ff ff43 	bl	800ddca <pended_on_thread>
 800df44:	4629      	mov	r1, r5
 800df46:	f7ff ff81 	bl	800de4c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800df4a:	7b6b      	ldrb	r3, [r5, #13]
 800df4c:	f023 0302 	bic.w	r3, r3, #2
 800df50:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	60ab      	str	r3, [r5, #8]
}
 800df56:	e7d6      	b.n	800df06 <z_thread_timeout+0x1c>
}
 800df58:	bd70      	pop	{r4, r5, r6, pc}

0800df5a <add_to_waitq_locked>:
{
 800df5a:	b570      	push	{r4, r5, r6, lr}
 800df5c:	4605      	mov	r5, r0
 800df5e:	460e      	mov	r6, r1
	unready_thread(thread);
 800df60:	f7fb fdee 	bl	8009b40 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800df64:	7b6b      	ldrb	r3, [r5, #13]
 800df66:	f043 0302 	orr.w	r3, r3, #2
 800df6a:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800df6c:	b1b6      	cbz	r6, 800df9c <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800df6e:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800df70:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800df72:	42a6      	cmp	r6, r4
 800df74:	d019      	beq.n	800dfaa <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800df76:	b164      	cbz	r4, 800df92 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800df78:	4621      	mov	r1, r4
 800df7a:	4628      	mov	r0, r5
 800df7c:	f7ff ff27 	bl	800ddce <z_sched_prio_cmp>
 800df80:	2800      	cmp	r0, #0
 800df82:	dc0c      	bgt.n	800df9e <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800df84:	b12c      	cbz	r4, 800df92 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800df86:	6873      	ldr	r3, [r6, #4]
 800df88:	429c      	cmp	r4, r3
 800df8a:	d002      	beq.n	800df92 <add_to_waitq_locked+0x38>
 800df8c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800df8e:	2c00      	cmp	r4, #0
 800df90:	d1f1      	bne.n	800df76 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800df92:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800df94:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800df96:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800df98:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800df9a:	6075      	str	r5, [r6, #4]
}
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800df9e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800dfa0:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800dfa2:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800dfa4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800dfa6:	6065      	str	r5, [r4, #4]
}
 800dfa8:	e7f8      	b.n	800df9c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800dfaa:	2400      	movs	r4, #0
 800dfac:	e7e3      	b.n	800df76 <add_to_waitq_locked+0x1c>

0800dfae <pend>:
{
 800dfae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	460e      	mov	r6, r1
 800dfb6:	4691      	mov	r9, r2
 800dfb8:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800dfba:	2400      	movs	r4, #0
	__asm__ volatile(
 800dfbc:	f04f 0310 	mov.w	r3, #16
 800dfc0:	f3ef 8711 	mrs	r7, BASEPRI
 800dfc4:	f383 8812 	msr	BASEPRI_MAX, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	e008      	b.n	800dfe0 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800dfce:	4631      	mov	r1, r6
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	f7ff ffc2 	bl	800df5a <add_to_waitq_locked>
	__asm__ volatile(
 800dfd6:	f387 8811 	msr	BASEPRI, r7
 800dfda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800dfde:	2401      	movs	r4, #1
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	d0f4      	beq.n	800dfce <pend+0x20>
	add_thread_timeout(thread, timeout);
 800dfe4:	464a      	mov	r2, r9
 800dfe6:	4643      	mov	r3, r8
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f7fb fc01 	bl	80097f0 <add_thread_timeout>
}
 800dfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dff2 <z_unpend1_no_timeout>:
{
 800dff2:	b570      	push	{r4, r5, r6, lr}
 800dff4:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800dff6:	2300      	movs	r3, #0
	__asm__ volatile(
 800dff8:	f04f 0210 	mov.w	r2, #16
 800dffc:	f3ef 8611 	mrs	r6, BASEPRI
 800e000:	f382 8812 	msr	BASEPRI_MAX, r2
 800e004:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800e008:	461c      	mov	r4, r3
 800e00a:	e004      	b.n	800e016 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800e00c:	f386 8811 	msr	BASEPRI, r6
 800e010:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e014:	2301      	movs	r3, #1
 800e016:	b98b      	cbnz	r3, 800e03c <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800e018:	4628      	mov	r0, r5
 800e01a:	f7ff ff43 	bl	800dea4 <z_priq_dumb_best>
		if (thread != NULL) {
 800e01e:	4604      	mov	r4, r0
 800e020:	2800      	cmp	r0, #0
 800e022:	d0f3      	beq.n	800e00c <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800e024:	f7ff fed1 	bl	800ddca <pended_on_thread>
 800e028:	4621      	mov	r1, r4
 800e02a:	f7ff ff0f 	bl	800de4c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800e02e:	7b63      	ldrb	r3, [r4, #13]
 800e030:	f023 0302 	bic.w	r3, r3, #2
 800e034:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800e036:	2300      	movs	r3, #0
 800e038:	60a3      	str	r3, [r4, #8]
}
 800e03a:	e7e7      	b.n	800e00c <z_unpend1_no_timeout+0x1a>
}
 800e03c:	4620      	mov	r0, r4
 800e03e:	bd70      	pop	{r4, r5, r6, pc}

0800e040 <z_unpend_first_thread>:
{
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800e044:	2300      	movs	r3, #0
	__asm__ volatile(
 800e046:	f04f 0210 	mov.w	r2, #16
 800e04a:	f3ef 8611 	mrs	r6, BASEPRI
 800e04e:	f382 8812 	msr	BASEPRI_MAX, r2
 800e052:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800e056:	461c      	mov	r4, r3
 800e058:	e004      	b.n	800e064 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800e05a:	f386 8811 	msr	BASEPRI, r6
 800e05e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e062:	2301      	movs	r3, #1
 800e064:	b9ab      	cbnz	r3, 800e092 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800e066:	4628      	mov	r0, r5
 800e068:	f7ff ff1c 	bl	800dea4 <z_priq_dumb_best>
		if (thread != NULL) {
 800e06c:	4604      	mov	r4, r0
 800e06e:	2800      	cmp	r0, #0
 800e070:	d0f3      	beq.n	800e05a <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800e072:	f7ff feaa 	bl	800ddca <pended_on_thread>
 800e076:	4621      	mov	r1, r4
 800e078:	f7ff fee8 	bl	800de4c <z_priq_dumb_remove>
 800e07c:	7b63      	ldrb	r3, [r4, #13]
 800e07e:	f023 0302 	bic.w	r3, r3, #2
 800e082:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800e084:	2300      	movs	r3, #0
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	f104 0018 	add.w	r0, r4, #24
 800e08c:	f000 f8a8 	bl	800e1e0 <z_abort_timeout>
 800e090:	e7e3      	b.n	800e05a <z_unpend_first_thread+0x1a>
}
 800e092:	4620      	mov	r0, r4
 800e094:	bd70      	pop	{r4, r5, r6, pc}

0800e096 <z_impl_k_usleep>:
{
 800e096:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
 800e098:	17c1      	asrs	r1, r0, #31
		t += off;
 800e09a:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800e09c:	f04f 0264 	mov.w	r2, #100	; 0x64
 800e0a0:	f04f 0300 	mov.w	r3, #0
 800e0a4:	f141 0100 	adc.w	r1, r1, #0
 800e0a8:	f7f2 fc98 	bl	80009dc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800e0ac:	17c1      	asrs	r1, r0, #31
 800e0ae:	f7fb fedd 	bl	8009e6c <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 800e0b2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800e0b6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
 800e0ba:	1818      	adds	r0, r3, r0
 800e0bc:	bd08      	pop	{r3, pc}

0800e0be <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800e0be:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800e0c0:	f013 0f02 	tst.w	r3, #2
 800e0c4:	d000      	beq.n	800e0c8 <z_impl_k_wakeup+0xa>
 800e0c6:	4770      	bx	lr
{
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	3018      	adds	r0, #24
 800e0ce:	f000 f887 	bl	800e1e0 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	da02      	bge.n	800e0dc <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800e0d6:	7b63      	ldrb	r3, [r4, #13]
 800e0d8:	2b10      	cmp	r3, #16
 800e0da:	d109      	bne.n	800e0f0 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800e0dc:	7b63      	ldrb	r3, [r4, #13]
 800e0de:	f023 0310 	bic.w	r3, r3, #16
 800e0e2:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f7ff fee4 	bl	800deb2 <z_ready_thread>
 800e0ea:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800e0ee:	b103      	cbz	r3, 800e0f2 <z_impl_k_wakeup+0x34>
}
 800e0f0:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800e0f2:	f04f 0310 	mov.w	r3, #16
 800e0f6:	f3ef 8011 	mrs	r0, BASEPRI
 800e0fa:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0fe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800e102:	f7ff fe8e 	bl	800de22 <z_reschedule_irqlock>
}
 800e106:	e7f3      	b.n	800e0f0 <z_impl_k_wakeup+0x32>

0800e108 <z_sched_wake>:
{
 800e108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10c:	4605      	mov	r5, r0
 800e10e:	4688      	mov	r8, r1
 800e110:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800e112:	2300      	movs	r3, #0
 800e114:	f04f 0210 	mov.w	r2, #16
 800e118:	f3ef 8611 	mrs	r6, BASEPRI
 800e11c:	f382 8812 	msr	BASEPRI_MAX, r2
 800e120:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800e124:	4699      	mov	r9, r3
 800e126:	e004      	b.n	800e132 <z_sched_wake+0x2a>
	__asm__ volatile(
 800e128:	f386 8811 	msr	BASEPRI, r6
 800e12c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800e130:	2301      	movs	r3, #1
 800e132:	b9eb      	cbnz	r3, 800e170 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800e134:	4628      	mov	r0, r5
 800e136:	f7ff feb5 	bl	800dea4 <z_priq_dumb_best>
		if (thread != NULL) {
 800e13a:	4604      	mov	r4, r0
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d0f3      	beq.n	800e128 <z_sched_wake+0x20>
 800e140:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
 800e144:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800e146:	f7ff fe40 	bl	800ddca <pended_on_thread>
 800e14a:	4621      	mov	r1, r4
 800e14c:	f7ff fe7e 	bl	800de4c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800e150:	7b63      	ldrb	r3, [r4, #13]
 800e152:	f023 0302 	bic.w	r3, r3, #2
 800e156:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	60a3      	str	r3, [r4, #8]
 800e15c:	f104 0018 	add.w	r0, r4, #24
 800e160:	f000 f83e 	bl	800e1e0 <z_abort_timeout>
			ready_thread(thread);
 800e164:	4620      	mov	r0, r4
 800e166:	f7fb fc8d 	bl	8009a84 <ready_thread>
			ret = true;
 800e16a:	f04f 0901 	mov.w	r9, #1
 800e16e:	e7db      	b.n	800e128 <z_sched_wake+0x20>
}
 800e170:	4648      	mov	r0, r9
 800e172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e176 <remove_timeout>:
{
 800e176:	b510      	push	{r4, lr}
 800e178:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800e17a:	f7fb ff51 	bl	800a020 <next>
 800e17e:	b148      	cbz	r0, 800e194 <remove_timeout+0x1e>
 800e180:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800e182:	6920      	ldr	r0, [r4, #16]
 800e184:	6961      	ldr	r1, [r4, #20]
 800e186:	6913      	ldr	r3, [r2, #16]
 800e188:	181b      	adds	r3, r3, r0
 800e18a:	6950      	ldr	r0, [r2, #20]
 800e18c:	eb41 0100 	adc.w	r1, r1, r0
 800e190:	6113      	str	r3, [r2, #16]
 800e192:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800e194:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800e196:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800e198:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e19a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800e19c:	2300      	movs	r3, #0
 800e19e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800e1a0:	6063      	str	r3, [r4, #4]
}
 800e1a2:	bd10      	pop	{r4, pc}

0800e1a4 <timeout_rem>:
	return node->next != NULL;
 800e1a4:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
 800e1a6:	b1c3      	cbz	r3, 800e1da <timeout_rem+0x36>
{
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800e1ac:	f7fb ff2e 	bl	800a00c <first>
	k_ticks_t ticks = 0;
 800e1b0:	2400      	movs	r4, #0
 800e1b2:	4625      	mov	r5, r4
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800e1b4:	b150      	cbz	r0, 800e1cc <timeout_rem+0x28>
		ticks += t->dticks;
 800e1b6:	6903      	ldr	r3, [r0, #16]
 800e1b8:	6942      	ldr	r2, [r0, #20]
 800e1ba:	191b      	adds	r3, r3, r4
 800e1bc:	461c      	mov	r4, r3
 800e1be:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
 800e1c2:	42b0      	cmp	r0, r6
 800e1c4:	d002      	beq.n	800e1cc <timeout_rem+0x28>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800e1c6:	f7fb ff2b 	bl	800a020 <next>
 800e1ca:	e7f3      	b.n	800e1b4 <timeout_rem+0x10>
	return ticks - elapsed();
 800e1cc:	f7fb ff34 	bl	800a038 <elapsed>
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	1a20      	subs	r0, r4, r0
 800e1d4:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 800e1d8:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800e1da:	2000      	movs	r0, #0
 800e1dc:	4601      	mov	r1, r0
}
 800e1de:	4770      	bx	lr

0800e1e0 <z_abort_timeout>:
{
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800e1e4:	2300      	movs	r3, #0
	__asm__ volatile(
 800e1e6:	f04f 0210 	mov.w	r2, #16
 800e1ea:	f3ef 8611 	mrs	r6, BASEPRI
 800e1ee:	f382 8812 	msr	BASEPRI_MAX, r2
 800e1f2:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800e1f6:	f06f 0015 	mvn.w	r0, #21
 800e1fa:	e004      	b.n	800e206 <z_abort_timeout+0x26>
	__asm__ volatile(
 800e1fc:	f386 8811 	msr	BASEPRI, r6
 800e200:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800e204:	2301      	movs	r3, #1
 800e206:	461d      	mov	r5, r3
 800e208:	b93b      	cbnz	r3, 800e21a <z_abort_timeout+0x3a>
 800e20a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d0f5      	beq.n	800e1fc <z_abort_timeout+0x1c>
			remove_timeout(to);
 800e210:	4620      	mov	r0, r4
 800e212:	f7ff ffb0 	bl	800e176 <remove_timeout>
			ret = 0;
 800e216:	4628      	mov	r0, r5
 800e218:	e7f0      	b.n	800e1fc <z_abort_timeout+0x1c>
}
 800e21a:	bd70      	pop	{r4, r5, r6, pc}

0800e21c <z_timeout_remaining>:
{
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800e220:	2300      	movs	r3, #0
	__asm__ volatile(
 800e222:	f04f 0210 	mov.w	r2, #16
 800e226:	f3ef 8511 	mrs	r5, BASEPRI
 800e22a:	f382 8812 	msr	BASEPRI_MAX, r2
 800e22e:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
 800e232:	4618      	mov	r0, r3
 800e234:	4619      	mov	r1, r3
 800e236:	e007      	b.n	800e248 <z_timeout_remaining+0x2c>
		ticks = timeout_rem(timeout);
 800e238:	4620      	mov	r0, r4
 800e23a:	f7ff ffb3 	bl	800e1a4 <timeout_rem>
	__asm__ volatile(
 800e23e:	f385 8811 	msr	BASEPRI, r5
 800e242:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800e246:	2301      	movs	r3, #1
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d0f5      	beq.n	800e238 <z_timeout_remaining+0x1c>
}
 800e24c:	bd38      	pop	{r3, r4, r5, pc}

0800e24e <z_set_timeout_expiry>:
{
 800e24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e250:	4605      	mov	r5, r0
 800e252:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800e254:	2300      	movs	r3, #0
	__asm__ volatile(
 800e256:	f04f 0210 	mov.w	r2, #16
 800e25a:	f3ef 8611 	mrs	r6, BASEPRI
 800e25e:	f382 8812 	msr	BASEPRI_MAX, r2
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	e00a      	b.n	800e27e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800e268:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800e26a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800e26e:	2801      	cmp	r0, #1
 800e270:	dd00      	ble.n	800e274 <z_set_timeout_expiry+0x26>
 800e272:	b97c      	cbnz	r4, 800e294 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800e274:	f386 8811 	msr	BASEPRI, r6
 800e278:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800e27c:	2301      	movs	r3, #1
 800e27e:	461c      	mov	r4, r3
 800e280:	b97b      	cbnz	r3, 800e2a2 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800e282:	f7fb fee5 	bl	800a050 <next_timeout>
			      || (ticks <= next_to);
 800e286:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e28a:	d0ed      	beq.n	800e268 <z_set_timeout_expiry+0x1a>
 800e28c:	42a8      	cmp	r0, r5
 800e28e:	dbec      	blt.n	800e26a <z_set_timeout_expiry+0x1c>
 800e290:	2401      	movs	r4, #1
 800e292:	e7ea      	b.n	800e26a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800e294:	4639      	mov	r1, r7
 800e296:	42a8      	cmp	r0, r5
 800e298:	bfa8      	it	ge
 800e29a:	4628      	movge	r0, r5
 800e29c:	f7f9 ff76 	bl	800818c <sys_clock_set_timeout>
 800e2a0:	e7e8      	b.n	800e274 <z_set_timeout_expiry+0x26>
}
 800e2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2a4 <sys_clock_tick_get_32>:
{
 800e2a4:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800e2a6:	f7fb ffe9 	bl	800a27c <sys_clock_tick_get>
}
 800e2aa:	bd08      	pop	{r3, pc}

0800e2ac <z_impl_k_uptime_ticks>:
{
 800e2ac:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800e2ae:	f7fb ffe5 	bl	800a27c <sys_clock_tick_get>
}
 800e2b2:	bd08      	pop	{r3, pc}

0800e2b4 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800e2b4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800e2b6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800e2bc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800e2c0:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800e2c2:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800e2c4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800e2c6:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800e2c8:	6343      	str	r3, [r0, #52]	; 0x34
}
 800e2ca:	4770      	bx	lr

0800e2cc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800e2d0:	f7ff ff86 	bl	800e1e0 <z_abort_timeout>

	if (inactive) {
 800e2d4:	b9a0      	cbnz	r0, 800e300 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800e2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d8:	b10b      	cbz	r3, 800e2de <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800e2de:	f104 0018 	add.w	r0, r4, #24
 800e2e2:	f7ff fe86 	bl	800dff2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800e2e6:	b158      	cbz	r0, 800e300 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800e2e8:	f7ff fde3 	bl	800deb2 <z_ready_thread>
	__asm__ volatile(
 800e2ec:	f04f 0310 	mov.w	r3, #16
 800e2f0:	f3ef 8011 	mrs	r0, BASEPRI
 800e2f4:	f383 8812 	msr	BASEPRI_MAX, r3
 800e2f8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800e2fc:	f7ff fd91 	bl	800de22 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800e300:	bd10      	pop	{r4, pc}

0800e302 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800e302:	b108      	cbz	r0, 800e308 <poller_thread+0x6>
 800e304:	3860      	subs	r0, #96	; 0x60
 800e306:	4770      	bx	lr
}
 800e308:	4770      	bx	lr

0800e30a <signal_poller>:
{
 800e30a:	b538      	push	{r3, r4, r5, lr}
 800e30c:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800e30e:	6880      	ldr	r0, [r0, #8]
 800e310:	f7ff fff7 	bl	800e302 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800e314:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800e316:	f013 0f02 	tst.w	r3, #2
 800e31a:	d024      	beq.n	800e366 <signal_poller+0x5c>
 800e31c:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800e31e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800e322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e326:	bf08      	it	eq
 800e328:	f112 0f02 	cmneq.w	r2, #2
 800e32c:	d01d      	beq.n	800e36a <signal_poller+0x60>
	z_unpend_thread(thread);
 800e32e:	f7ff fd95 	bl	800de5c <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800e332:	2d08      	cmp	r5, #8
 800e334:	d009      	beq.n	800e34a <signal_poller+0x40>
 800e336:	2300      	movs	r3, #0
 800e338:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800e33a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800e33c:	f013 0f1f 	tst.w	r3, #31
 800e340:	d108      	bne.n	800e354 <signal_poller+0x4a>
	return node->next != NULL;
 800e342:	69a3      	ldr	r3, [r4, #24]
 800e344:	b123      	cbz	r3, 800e350 <signal_poller+0x46>
 800e346:	2300      	movs	r3, #0
 800e348:	e005      	b.n	800e356 <signal_poller+0x4c>
 800e34a:	f06f 0303 	mvn.w	r3, #3
 800e34e:	e7f3      	b.n	800e338 <signal_poller+0x2e>
 800e350:	2301      	movs	r3, #1
 800e352:	e000      	b.n	800e356 <signal_poller+0x4c>
 800e354:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800e356:	b90b      	cbnz	r3, 800e35c <signal_poller+0x52>
		return 0;
 800e358:	2000      	movs	r0, #0
 800e35a:	e005      	b.n	800e368 <signal_poller+0x5e>
	z_ready_thread(thread);
 800e35c:	4620      	mov	r0, r4
 800e35e:	f7ff fda8 	bl	800deb2 <z_ready_thread>
	return 0;
 800e362:	2000      	movs	r0, #0
 800e364:	e000      	b.n	800e368 <signal_poller+0x5e>
		return 0;
 800e366:	2000      	movs	r0, #0
}
 800e368:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800e36a:	f06f 000a 	mvn.w	r0, #10
 800e36e:	e7fb      	b.n	800e368 <signal_poller+0x5e>

0800e370 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800e370:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800e372:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800e374:	7823      	ldrb	r3, [r4, #0]
 800e376:	b173      	cbz	r3, 800e396 <signal_triggered_work+0x26>
 800e378:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800e37c:	b15d      	cbz	r5, 800e396 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800e37e:	f1a4 0614 	sub.w	r6, r4, #20
 800e382:	f104 0014 	add.w	r0, r4, #20
 800e386:	f7ff ff2b 	bl	800e1e0 <z_abort_timeout>
		twork->poll_result = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800e38e:	4631      	mov	r1, r6
 800e390:	4628      	mov	r0, r5
 800e392:	f7ff fcf8 	bl	800dd86 <k_work_submit_to_queue>
	}

	return 0;
}
 800e396:	2000      	movs	r0, #0
 800e398:	bd70      	pop	{r4, r5, r6, pc}

0800e39a <signal_poll_event>:
{
 800e39a:	b570      	push	{r4, r5, r6, lr}
 800e39c:	4604      	mov	r4, r0
 800e39e:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800e3a0:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800e3a2:	b1d6      	cbz	r6, 800e3da <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800e3a4:	7873      	ldrb	r3, [r6, #1]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d00d      	beq.n	800e3c6 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d012      	beq.n	800e3d4 <signal_poll_event+0x3a>
		poller->is_polling = false;
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800e3b6:	68e3      	ldr	r3, [r4, #12]
 800e3b8:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800e3bc:	430d      	orrs	r5, r1
 800e3be:	f365 3352 	bfi	r3, r5, #13, #6
 800e3c2:	60e3      	str	r3, [r4, #12]
}
 800e3c4:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800e3c6:	f7ff ffa0 	bl	800e30a <signal_poller>
		poller->is_polling = false;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800e3ce:	4298      	cmp	r0, r3
 800e3d0:	daef      	bge.n	800e3b2 <signal_poll_event+0x18>
 800e3d2:	e7f7      	b.n	800e3c4 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800e3d4:	f7ff ffcc 	bl	800e370 <signal_triggered_work>
 800e3d8:	e7f7      	b.n	800e3ca <signal_poll_event+0x30>
	int retcode = 0;
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e7e9      	b.n	800e3b2 <signal_poll_event+0x18>

0800e3de <z_handle_obj_poll_events>:
{
 800e3de:	b508      	push	{r3, lr}
 800e3e0:	4603      	mov	r3, r0
	return list->head == list;
 800e3e2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800e3e4:	4283      	cmp	r3, r0
 800e3e6:	d009      	beq.n	800e3fc <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800e3e8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800e3ea:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800e3ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800e3ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800e3f4:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800e3f6:	b108      	cbz	r0, 800e3fc <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800e3f8:	f7ff ffcf 	bl	800e39a <signal_poll_event>
}
 800e3fc:	bd08      	pop	{r3, pc}

0800e3fe <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800e3fe:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800e400:	4770      	bx	lr

0800e402 <k_heap_init>:
{
 800e402:	b510      	push	{r4, lr}
 800e404:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800e408:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800e40a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800e40c:	f7fd ffe9 	bl	800c3e2 <sys_heap_init>
}
 800e410:	bd10      	pop	{r4, pc}

0800e412 <memcpy>:
 800e412:	440a      	add	r2, r1
 800e414:	4291      	cmp	r1, r2
 800e416:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e41a:	d100      	bne.n	800e41e <memcpy+0xc>
 800e41c:	4770      	bx	lr
 800e41e:	b510      	push	{r4, lr}
 800e420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e428:	4291      	cmp	r1, r2
 800e42a:	d1f9      	bne.n	800e420 <memcpy+0xe>
 800e42c:	bd10      	pop	{r4, pc}

0800e42e <memset>:
 800e42e:	4402      	add	r2, r0
 800e430:	4603      	mov	r3, r0
 800e432:	4293      	cmp	r3, r2
 800e434:	d100      	bne.n	800e438 <memset+0xa>
 800e436:	4770      	bx	lr
 800e438:	f803 1b01 	strb.w	r1, [r3], #1
 800e43c:	e7f9      	b.n	800e432 <memset+0x4>

0800e43e <__cvt>:
 800e43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	2b00      	cmp	r3, #0
 800e446:	461f      	mov	r7, r3
 800e448:	4614      	mov	r4, r2
 800e44a:	bfb8      	it	lt
 800e44c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e452:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e454:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e458:	bfb6      	itet	lt
 800e45a:	461f      	movlt	r7, r3
 800e45c:	2300      	movge	r3, #0
 800e45e:	232d      	movlt	r3, #45	; 0x2d
 800e460:	7013      	strb	r3, [r2, #0]
 800e462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e464:	f023 0820 	bic.w	r8, r3, #32
 800e468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e46c:	d005      	beq.n	800e47a <__cvt+0x3c>
 800e46e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e472:	d100      	bne.n	800e476 <__cvt+0x38>
 800e474:	3501      	adds	r5, #1
 800e476:	2302      	movs	r3, #2
 800e478:	e000      	b.n	800e47c <__cvt+0x3e>
 800e47a:	2303      	movs	r3, #3
 800e47c:	aa07      	add	r2, sp, #28
 800e47e:	9204      	str	r2, [sp, #16]
 800e480:	aa06      	add	r2, sp, #24
 800e482:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e486:	e9cd 3500 	strd	r3, r5, [sp]
 800e48a:	4622      	mov	r2, r4
 800e48c:	463b      	mov	r3, r7
 800e48e:	f7f2 fd6b 	bl	8000f68 <_dtoa_r>
 800e492:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e496:	4606      	mov	r6, r0
 800e498:	d102      	bne.n	800e4a0 <__cvt+0x62>
 800e49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e49c:	07db      	lsls	r3, r3, #31
 800e49e:	d522      	bpl.n	800e4e6 <__cvt+0xa8>
 800e4a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4a4:	eb06 0905 	add.w	r9, r6, r5
 800e4a8:	d110      	bne.n	800e4cc <__cvt+0x8e>
 800e4aa:	7833      	ldrb	r3, [r6, #0]
 800e4ac:	2b30      	cmp	r3, #48	; 0x30
 800e4ae:	d10a      	bne.n	800e4c6 <__cvt+0x88>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	f7f2 fb00 	bl	8000abc <__aeabi_dcmpeq>
 800e4bc:	b918      	cbnz	r0, 800e4c6 <__cvt+0x88>
 800e4be:	f1c5 0501 	rsb	r5, r5, #1
 800e4c2:	f8ca 5000 	str.w	r5, [sl]
 800e4c6:	f8da 3000 	ldr.w	r3, [sl]
 800e4ca:	4499      	add	r9, r3
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f2 faf2 	bl	8000abc <__aeabi_dcmpeq>
 800e4d8:	b108      	cbz	r0, 800e4de <__cvt+0xa0>
 800e4da:	f8cd 901c 	str.w	r9, [sp, #28]
 800e4de:	2230      	movs	r2, #48	; 0x30
 800e4e0:	9b07      	ldr	r3, [sp, #28]
 800e4e2:	454b      	cmp	r3, r9
 800e4e4:	d307      	bcc.n	800e4f6 <__cvt+0xb8>
 800e4e6:	9b07      	ldr	r3, [sp, #28]
 800e4e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e4ea:	1b9b      	subs	r3, r3, r6
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	6013      	str	r3, [r2, #0]
 800e4f0:	b008      	add	sp, #32
 800e4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f6:	1c59      	adds	r1, r3, #1
 800e4f8:	9107      	str	r1, [sp, #28]
 800e4fa:	701a      	strb	r2, [r3, #0]
 800e4fc:	e7f0      	b.n	800e4e0 <__cvt+0xa2>

0800e4fe <__exponent>:
 800e4fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e500:	4603      	mov	r3, r0
 800e502:	2900      	cmp	r1, #0
 800e504:	bfb8      	it	lt
 800e506:	4249      	neglt	r1, r1
 800e508:	f803 2b02 	strb.w	r2, [r3], #2
 800e50c:	bfb4      	ite	lt
 800e50e:	222d      	movlt	r2, #45	; 0x2d
 800e510:	222b      	movge	r2, #43	; 0x2b
 800e512:	2909      	cmp	r1, #9
 800e514:	7042      	strb	r2, [r0, #1]
 800e516:	dd2a      	ble.n	800e56e <__exponent+0x70>
 800e518:	f10d 0407 	add.w	r4, sp, #7
 800e51c:	46a4      	mov	ip, r4
 800e51e:	270a      	movs	r7, #10
 800e520:	46a6      	mov	lr, r4
 800e522:	460a      	mov	r2, r1
 800e524:	fb91 f6f7 	sdiv	r6, r1, r7
 800e528:	fb07 1516 	mls	r5, r7, r6, r1
 800e52c:	3530      	adds	r5, #48	; 0x30
 800e52e:	2a63      	cmp	r2, #99	; 0x63
 800e530:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e534:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e538:	4631      	mov	r1, r6
 800e53a:	dcf1      	bgt.n	800e520 <__exponent+0x22>
 800e53c:	3130      	adds	r1, #48	; 0x30
 800e53e:	f1ae 0502 	sub.w	r5, lr, #2
 800e542:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e546:	1c44      	adds	r4, r0, #1
 800e548:	4629      	mov	r1, r5
 800e54a:	4561      	cmp	r1, ip
 800e54c:	d30a      	bcc.n	800e564 <__exponent+0x66>
 800e54e:	f10d 0209 	add.w	r2, sp, #9
 800e552:	eba2 020e 	sub.w	r2, r2, lr
 800e556:	4565      	cmp	r5, ip
 800e558:	bf88      	it	hi
 800e55a:	2200      	movhi	r2, #0
 800e55c:	4413      	add	r3, r2
 800e55e:	1a18      	subs	r0, r3, r0
 800e560:	b003      	add	sp, #12
 800e562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e564:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e568:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e56c:	e7ed      	b.n	800e54a <__exponent+0x4c>
 800e56e:	2330      	movs	r3, #48	; 0x30
 800e570:	3130      	adds	r1, #48	; 0x30
 800e572:	7083      	strb	r3, [r0, #2]
 800e574:	70c1      	strb	r1, [r0, #3]
 800e576:	1d03      	adds	r3, r0, #4
 800e578:	e7f1      	b.n	800e55e <__exponent+0x60>

0800e57a <_printf_common>:
 800e57a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57e:	4616      	mov	r6, r2
 800e580:	4699      	mov	r9, r3
 800e582:	688a      	ldr	r2, [r1, #8]
 800e584:	690b      	ldr	r3, [r1, #16]
 800e586:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e58a:	4293      	cmp	r3, r2
 800e58c:	bfb8      	it	lt
 800e58e:	4613      	movlt	r3, r2
 800e590:	6033      	str	r3, [r6, #0]
 800e592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e596:	4607      	mov	r7, r0
 800e598:	460c      	mov	r4, r1
 800e59a:	b10a      	cbz	r2, 800e5a0 <_printf_common+0x26>
 800e59c:	3301      	adds	r3, #1
 800e59e:	6033      	str	r3, [r6, #0]
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	0699      	lsls	r1, r3, #26
 800e5a4:	bf42      	ittt	mi
 800e5a6:	6833      	ldrmi	r3, [r6, #0]
 800e5a8:	3302      	addmi	r3, #2
 800e5aa:	6033      	strmi	r3, [r6, #0]
 800e5ac:	6825      	ldr	r5, [r4, #0]
 800e5ae:	f015 0506 	ands.w	r5, r5, #6
 800e5b2:	d106      	bne.n	800e5c2 <_printf_common+0x48>
 800e5b4:	f104 0a19 	add.w	sl, r4, #25
 800e5b8:	68e3      	ldr	r3, [r4, #12]
 800e5ba:	6832      	ldr	r2, [r6, #0]
 800e5bc:	1a9b      	subs	r3, r3, r2
 800e5be:	42ab      	cmp	r3, r5
 800e5c0:	dc26      	bgt.n	800e610 <_printf_common+0x96>
 800e5c2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5c6:	1e13      	subs	r3, r2, #0
 800e5c8:	6822      	ldr	r2, [r4, #0]
 800e5ca:	bf18      	it	ne
 800e5cc:	2301      	movne	r3, #1
 800e5ce:	0692      	lsls	r2, r2, #26
 800e5d0:	d42b      	bmi.n	800e62a <_printf_common+0xb0>
 800e5d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5d6:	4649      	mov	r1, r9
 800e5d8:	4638      	mov	r0, r7
 800e5da:	47c0      	blx	r8
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d01e      	beq.n	800e61e <_printf_common+0xa4>
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	68e5      	ldr	r5, [r4, #12]
 800e5e4:	6832      	ldr	r2, [r6, #0]
 800e5e6:	f003 0306 	and.w	r3, r3, #6
 800e5ea:	2b04      	cmp	r3, #4
 800e5ec:	bf08      	it	eq
 800e5ee:	1aad      	subeq	r5, r5, r2
 800e5f0:	68a3      	ldr	r3, [r4, #8]
 800e5f2:	6922      	ldr	r2, [r4, #16]
 800e5f4:	bf0c      	ite	eq
 800e5f6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5fa:	2500      	movne	r5, #0
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	bfc4      	itt	gt
 800e600:	1a9b      	subgt	r3, r3, r2
 800e602:	18ed      	addgt	r5, r5, r3
 800e604:	2600      	movs	r6, #0
 800e606:	341a      	adds	r4, #26
 800e608:	42b5      	cmp	r5, r6
 800e60a:	d11a      	bne.n	800e642 <_printf_common+0xc8>
 800e60c:	2000      	movs	r0, #0
 800e60e:	e008      	b.n	800e622 <_printf_common+0xa8>
 800e610:	2301      	movs	r3, #1
 800e612:	4652      	mov	r2, sl
 800e614:	4649      	mov	r1, r9
 800e616:	4638      	mov	r0, r7
 800e618:	47c0      	blx	r8
 800e61a:	3001      	adds	r0, #1
 800e61c:	d103      	bne.n	800e626 <_printf_common+0xac>
 800e61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e626:	3501      	adds	r5, #1
 800e628:	e7c6      	b.n	800e5b8 <_printf_common+0x3e>
 800e62a:	18e1      	adds	r1, r4, r3
 800e62c:	1c5a      	adds	r2, r3, #1
 800e62e:	2030      	movs	r0, #48	; 0x30
 800e630:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e634:	4422      	add	r2, r4
 800e636:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e63a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e63e:	3302      	adds	r3, #2
 800e640:	e7c7      	b.n	800e5d2 <_printf_common+0x58>
 800e642:	2301      	movs	r3, #1
 800e644:	4622      	mov	r2, r4
 800e646:	4649      	mov	r1, r9
 800e648:	4638      	mov	r0, r7
 800e64a:	47c0      	blx	r8
 800e64c:	3001      	adds	r0, #1
 800e64e:	d0e6      	beq.n	800e61e <_printf_common+0xa4>
 800e650:	3601      	adds	r6, #1
 800e652:	e7d9      	b.n	800e608 <_printf_common+0x8e>

0800e654 <strncpy>:
 800e654:	b510      	push	{r4, lr}
 800e656:	3901      	subs	r1, #1
 800e658:	4603      	mov	r3, r0
 800e65a:	b132      	cbz	r2, 800e66a <strncpy+0x16>
 800e65c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e660:	f803 4b01 	strb.w	r4, [r3], #1
 800e664:	3a01      	subs	r2, #1
 800e666:	2c00      	cmp	r4, #0
 800e668:	d1f7      	bne.n	800e65a <strncpy+0x6>
 800e66a:	441a      	add	r2, r3
 800e66c:	2100      	movs	r1, #0
 800e66e:	4293      	cmp	r3, r2
 800e670:	d100      	bne.n	800e674 <strncpy+0x20>
 800e672:	bd10      	pop	{r4, pc}
 800e674:	f803 1b01 	strb.w	r1, [r3], #1
 800e678:	e7f9      	b.n	800e66e <strncpy+0x1a>

0800e67a <strnlen>:
 800e67a:	b510      	push	{r4, lr}
 800e67c:	4602      	mov	r2, r0
 800e67e:	4401      	add	r1, r0
 800e680:	428a      	cmp	r2, r1
 800e682:	4613      	mov	r3, r2
 800e684:	d003      	beq.n	800e68e <strnlen+0x14>
 800e686:	781c      	ldrb	r4, [r3, #0]
 800e688:	3201      	adds	r2, #1
 800e68a:	2c00      	cmp	r4, #0
 800e68c:	d1f8      	bne.n	800e680 <strnlen+0x6>
 800e68e:	1a18      	subs	r0, r3, r0
 800e690:	bd10      	pop	{r4, pc}

0800e692 <quorem>:
 800e692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e696:	6903      	ldr	r3, [r0, #16]
 800e698:	690c      	ldr	r4, [r1, #16]
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	4607      	mov	r7, r0
 800e69e:	db7d      	blt.n	800e79c <quorem+0x10a>
 800e6a0:	3c01      	subs	r4, #1
 800e6a2:	f101 0814 	add.w	r8, r1, #20
 800e6a6:	f100 0514 	add.w	r5, r0, #20
 800e6aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6ae:	9301      	str	r3, [sp, #4]
 800e6b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e6b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e6c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e6c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e6c8:	d32e      	bcc.n	800e728 <quorem+0x96>
 800e6ca:	f04f 0e00 	mov.w	lr, #0
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	46ac      	mov	ip, r5
 800e6d2:	46f2      	mov	sl, lr
 800e6d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e6d8:	b293      	uxth	r3, r2
 800e6da:	fb06 e303 	mla	r3, r6, r3, lr
 800e6de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e6e2:	0c12      	lsrs	r2, r2, #16
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	fb06 e202 	mla	r2, r6, r2, lr
 800e6ea:	ebaa 0303 	sub.w	r3, sl, r3
 800e6ee:	f8dc a000 	ldr.w	sl, [ip]
 800e6f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6f6:	b292      	uxth	r2, r2
 800e6f8:	fa13 f38a 	uxtah	r3, r3, sl
 800e6fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e704:	b29b      	uxth	r3, r3
 800e706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e70a:	4581      	cmp	r9, r0
 800e70c:	f84c 3b04 	str.w	r3, [ip], #4
 800e710:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e714:	d2de      	bcs.n	800e6d4 <quorem+0x42>
 800e716:	f855 300b 	ldr.w	r3, [r5, fp]
 800e71a:	b92b      	cbnz	r3, 800e728 <quorem+0x96>
 800e71c:	9b01      	ldr	r3, [sp, #4]
 800e71e:	3b04      	subs	r3, #4
 800e720:	429d      	cmp	r5, r3
 800e722:	461a      	mov	r2, r3
 800e724:	d32e      	bcc.n	800e784 <quorem+0xf2>
 800e726:	613c      	str	r4, [r7, #16]
 800e728:	4638      	mov	r0, r7
 800e72a:	f000 f886 	bl	800e83a <__mcmp>
 800e72e:	2800      	cmp	r0, #0
 800e730:	db24      	blt.n	800e77c <quorem+0xea>
 800e732:	3601      	adds	r6, #1
 800e734:	4628      	mov	r0, r5
 800e736:	f04f 0c00 	mov.w	ip, #0
 800e73a:	f858 2b04 	ldr.w	r2, [r8], #4
 800e73e:	f8d0 e000 	ldr.w	lr, [r0]
 800e742:	b293      	uxth	r3, r2
 800e744:	ebac 0303 	sub.w	r3, ip, r3
 800e748:	0c12      	lsrs	r2, r2, #16
 800e74a:	fa13 f38e 	uxtah	r3, r3, lr
 800e74e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e756:	b29b      	uxth	r3, r3
 800e758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e75c:	45c1      	cmp	r9, r8
 800e75e:	f840 3b04 	str.w	r3, [r0], #4
 800e762:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e766:	d2e8      	bcs.n	800e73a <quorem+0xa8>
 800e768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e76c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e770:	b922      	cbnz	r2, 800e77c <quorem+0xea>
 800e772:	3b04      	subs	r3, #4
 800e774:	429d      	cmp	r5, r3
 800e776:	461a      	mov	r2, r3
 800e778:	d30a      	bcc.n	800e790 <quorem+0xfe>
 800e77a:	613c      	str	r4, [r7, #16]
 800e77c:	4630      	mov	r0, r6
 800e77e:	b003      	add	sp, #12
 800e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e784:	6812      	ldr	r2, [r2, #0]
 800e786:	3b04      	subs	r3, #4
 800e788:	2a00      	cmp	r2, #0
 800e78a:	d1cc      	bne.n	800e726 <quorem+0x94>
 800e78c:	3c01      	subs	r4, #1
 800e78e:	e7c7      	b.n	800e720 <quorem+0x8e>
 800e790:	6812      	ldr	r2, [r2, #0]
 800e792:	3b04      	subs	r3, #4
 800e794:	2a00      	cmp	r2, #0
 800e796:	d1f0      	bne.n	800e77a <quorem+0xe8>
 800e798:	3c01      	subs	r4, #1
 800e79a:	e7eb      	b.n	800e774 <quorem+0xe2>
 800e79c:	2000      	movs	r0, #0
 800e79e:	e7ee      	b.n	800e77e <quorem+0xec>

0800e7a0 <__hi0bits>:
 800e7a0:	0c02      	lsrs	r2, r0, #16
 800e7a2:	0412      	lsls	r2, r2, #16
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	b9ca      	cbnz	r2, 800e7dc <__hi0bits+0x3c>
 800e7a8:	0403      	lsls	r3, r0, #16
 800e7aa:	2010      	movs	r0, #16
 800e7ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e7b0:	bf04      	itt	eq
 800e7b2:	021b      	lsleq	r3, r3, #8
 800e7b4:	3008      	addeq	r0, #8
 800e7b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e7ba:	bf04      	itt	eq
 800e7bc:	011b      	lsleq	r3, r3, #4
 800e7be:	3004      	addeq	r0, #4
 800e7c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e7c4:	bf04      	itt	eq
 800e7c6:	009b      	lsleq	r3, r3, #2
 800e7c8:	3002      	addeq	r0, #2
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	db05      	blt.n	800e7da <__hi0bits+0x3a>
 800e7ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e7d2:	f100 0001 	add.w	r0, r0, #1
 800e7d6:	bf08      	it	eq
 800e7d8:	2020      	moveq	r0, #32
 800e7da:	4770      	bx	lr
 800e7dc:	2000      	movs	r0, #0
 800e7de:	e7e5      	b.n	800e7ac <__hi0bits+0xc>

0800e7e0 <__lo0bits>:
 800e7e0:	6803      	ldr	r3, [r0, #0]
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	f013 0007 	ands.w	r0, r3, #7
 800e7e8:	d00b      	beq.n	800e802 <__lo0bits+0x22>
 800e7ea:	07d9      	lsls	r1, r3, #31
 800e7ec:	d421      	bmi.n	800e832 <__lo0bits+0x52>
 800e7ee:	0798      	lsls	r0, r3, #30
 800e7f0:	bf49      	itett	mi
 800e7f2:	085b      	lsrmi	r3, r3, #1
 800e7f4:	089b      	lsrpl	r3, r3, #2
 800e7f6:	2001      	movmi	r0, #1
 800e7f8:	6013      	strmi	r3, [r2, #0]
 800e7fa:	bf5c      	itt	pl
 800e7fc:	6013      	strpl	r3, [r2, #0]
 800e7fe:	2002      	movpl	r0, #2
 800e800:	4770      	bx	lr
 800e802:	b299      	uxth	r1, r3
 800e804:	b909      	cbnz	r1, 800e80a <__lo0bits+0x2a>
 800e806:	0c1b      	lsrs	r3, r3, #16
 800e808:	2010      	movs	r0, #16
 800e80a:	b2d9      	uxtb	r1, r3
 800e80c:	b909      	cbnz	r1, 800e812 <__lo0bits+0x32>
 800e80e:	3008      	adds	r0, #8
 800e810:	0a1b      	lsrs	r3, r3, #8
 800e812:	0719      	lsls	r1, r3, #28
 800e814:	bf04      	itt	eq
 800e816:	091b      	lsreq	r3, r3, #4
 800e818:	3004      	addeq	r0, #4
 800e81a:	0799      	lsls	r1, r3, #30
 800e81c:	bf04      	itt	eq
 800e81e:	089b      	lsreq	r3, r3, #2
 800e820:	3002      	addeq	r0, #2
 800e822:	07d9      	lsls	r1, r3, #31
 800e824:	d403      	bmi.n	800e82e <__lo0bits+0x4e>
 800e826:	085b      	lsrs	r3, r3, #1
 800e828:	f100 0001 	add.w	r0, r0, #1
 800e82c:	d003      	beq.n	800e836 <__lo0bits+0x56>
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	4770      	bx	lr
 800e832:	2000      	movs	r0, #0
 800e834:	4770      	bx	lr
 800e836:	2020      	movs	r0, #32
 800e838:	4770      	bx	lr

0800e83a <__mcmp>:
 800e83a:	690a      	ldr	r2, [r1, #16]
 800e83c:	4603      	mov	r3, r0
 800e83e:	6900      	ldr	r0, [r0, #16]
 800e840:	1a80      	subs	r0, r0, r2
 800e842:	b530      	push	{r4, r5, lr}
 800e844:	d10d      	bne.n	800e862 <__mcmp+0x28>
 800e846:	3314      	adds	r3, #20
 800e848:	3114      	adds	r1, #20
 800e84a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e84e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e852:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e856:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e85a:	4295      	cmp	r5, r2
 800e85c:	d002      	beq.n	800e864 <__mcmp+0x2a>
 800e85e:	d304      	bcc.n	800e86a <__mcmp+0x30>
 800e860:	2001      	movs	r0, #1
 800e862:	bd30      	pop	{r4, r5, pc}
 800e864:	42a3      	cmp	r3, r4
 800e866:	d3f4      	bcc.n	800e852 <__mcmp+0x18>
 800e868:	e7fb      	b.n	800e862 <__mcmp+0x28>
 800e86a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e86e:	e7f8      	b.n	800e862 <__mcmp+0x28>

0800e870 <_calloc_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	fb02 f501 	mul.w	r5, r2, r1
 800e876:	4629      	mov	r1, r5
 800e878:	f7fc f928 	bl	800aacc <_malloc_r>
 800e87c:	4604      	mov	r4, r0
 800e87e:	b118      	cbz	r0, 800e888 <_calloc_r+0x18>
 800e880:	462a      	mov	r2, r5
 800e882:	2100      	movs	r1, #0
 800e884:	f7ff fdd3 	bl	800e42e <memset>
 800e888:	4620      	mov	r0, r4
 800e88a:	bd38      	pop	{r3, r4, r5, pc}

0800e88c <__ascii_mbtowc>:
 800e88c:	b082      	sub	sp, #8
 800e88e:	b901      	cbnz	r1, 800e892 <__ascii_mbtowc+0x6>
 800e890:	a901      	add	r1, sp, #4
 800e892:	b142      	cbz	r2, 800e8a6 <__ascii_mbtowc+0x1a>
 800e894:	b14b      	cbz	r3, 800e8aa <__ascii_mbtowc+0x1e>
 800e896:	7813      	ldrb	r3, [r2, #0]
 800e898:	600b      	str	r3, [r1, #0]
 800e89a:	7812      	ldrb	r2, [r2, #0]
 800e89c:	1e10      	subs	r0, r2, #0
 800e89e:	bf18      	it	ne
 800e8a0:	2001      	movne	r0, #1
 800e8a2:	b002      	add	sp, #8
 800e8a4:	4770      	bx	lr
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	e7fb      	b.n	800e8a2 <__ascii_mbtowc+0x16>
 800e8aa:	f06f 0001 	mvn.w	r0, #1
 800e8ae:	e7f8      	b.n	800e8a2 <__ascii_mbtowc+0x16>

0800e8b0 <__sfputc_r>:
 800e8b0:	6893      	ldr	r3, [r2, #8]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	b410      	push	{r4}
 800e8b8:	6093      	str	r3, [r2, #8]
 800e8ba:	da07      	bge.n	800e8cc <__sfputc_r+0x1c>
 800e8bc:	6994      	ldr	r4, [r2, #24]
 800e8be:	42a3      	cmp	r3, r4
 800e8c0:	db01      	blt.n	800e8c6 <__sfputc_r+0x16>
 800e8c2:	290a      	cmp	r1, #10
 800e8c4:	d102      	bne.n	800e8cc <__sfputc_r+0x1c>
 800e8c6:	bc10      	pop	{r4}
 800e8c8:	f7fd b93e 	b.w	800bb48 <__swbuf_r>
 800e8cc:	6813      	ldr	r3, [r2, #0]
 800e8ce:	1c58      	adds	r0, r3, #1
 800e8d0:	6010      	str	r0, [r2, #0]
 800e8d2:	7019      	strb	r1, [r3, #0]
 800e8d4:	4608      	mov	r0, r1
 800e8d6:	bc10      	pop	{r4}
 800e8d8:	4770      	bx	lr

0800e8da <__sfputs_r>:
 800e8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8dc:	4606      	mov	r6, r0
 800e8de:	460f      	mov	r7, r1
 800e8e0:	4614      	mov	r4, r2
 800e8e2:	18d5      	adds	r5, r2, r3
 800e8e4:	42ac      	cmp	r4, r5
 800e8e6:	d101      	bne.n	800e8ec <__sfputs_r+0x12>
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	e007      	b.n	800e8fc <__sfputs_r+0x22>
 800e8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8f0:	463a      	mov	r2, r7
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7ff ffdc 	bl	800e8b0 <__sfputc_r>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d1f3      	bne.n	800e8e4 <__sfputs_r+0xa>
 800e8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8fe <__ascii_wctomb>:
 800e8fe:	4603      	mov	r3, r0
 800e900:	4608      	mov	r0, r1
 800e902:	b141      	cbz	r1, 800e916 <__ascii_wctomb+0x18>
 800e904:	2aff      	cmp	r2, #255	; 0xff
 800e906:	d904      	bls.n	800e912 <__ascii_wctomb+0x14>
 800e908:	228a      	movs	r2, #138	; 0x8a
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e910:	4770      	bx	lr
 800e912:	700a      	strb	r2, [r1, #0]
 800e914:	2001      	movs	r0, #1
 800e916:	4770      	bx	lr

0800e918 <abort>:
 800e918:	b508      	push	{r3, lr}
 800e91a:	2006      	movs	r0, #6
 800e91c:	f7fd fb92 	bl	800c044 <raise>
 800e920:	2001      	movs	r0, #1
 800e922:	f7f6 f9ad 	bl	8004c80 <_exit>

0800e926 <__sfmoreglue>:
 800e926:	b570      	push	{r4, r5, r6, lr}
 800e928:	2268      	movs	r2, #104	; 0x68
 800e92a:	1e4d      	subs	r5, r1, #1
 800e92c:	4355      	muls	r5, r2
 800e92e:	460e      	mov	r6, r1
 800e930:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e934:	f7fc f8ca 	bl	800aacc <_malloc_r>
 800e938:	4604      	mov	r4, r0
 800e93a:	b140      	cbz	r0, 800e94e <__sfmoreglue+0x28>
 800e93c:	2100      	movs	r1, #0
 800e93e:	e9c0 1600 	strd	r1, r6, [r0]
 800e942:	300c      	adds	r0, #12
 800e944:	60a0      	str	r0, [r4, #8]
 800e946:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e94a:	f7ff fd70 	bl	800e42e <memset>
 800e94e:	4620      	mov	r0, r4
 800e950:	bd70      	pop	{r4, r5, r6, pc}

0800e952 <_fwalk_reent>:
 800e952:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e956:	4606      	mov	r6, r0
 800e958:	4688      	mov	r8, r1
 800e95a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e95e:	2700      	movs	r7, #0
 800e960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e964:	f1b9 0901 	subs.w	r9, r9, #1
 800e968:	d505      	bpl.n	800e976 <_fwalk_reent+0x24>
 800e96a:	6824      	ldr	r4, [r4, #0]
 800e96c:	2c00      	cmp	r4, #0
 800e96e:	d1f7      	bne.n	800e960 <_fwalk_reent+0xe>
 800e970:	4638      	mov	r0, r7
 800e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e976:	89ab      	ldrh	r3, [r5, #12]
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d907      	bls.n	800e98c <_fwalk_reent+0x3a>
 800e97c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e980:	3301      	adds	r3, #1
 800e982:	d003      	beq.n	800e98c <_fwalk_reent+0x3a>
 800e984:	4629      	mov	r1, r5
 800e986:	4630      	mov	r0, r6
 800e988:	47c0      	blx	r8
 800e98a:	4307      	orrs	r7, r0
 800e98c:	3568      	adds	r5, #104	; 0x68
 800e98e:	e7e9      	b.n	800e964 <_fwalk_reent+0x12>

0800e990 <__swhatbuf_r>:
 800e990:	b570      	push	{r4, r5, r6, lr}
 800e992:	460e      	mov	r6, r1
 800e994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e998:	2900      	cmp	r1, #0
 800e99a:	b096      	sub	sp, #88	; 0x58
 800e99c:	4614      	mov	r4, r2
 800e99e:	461d      	mov	r5, r3
 800e9a0:	da08      	bge.n	800e9b4 <__swhatbuf_r+0x24>
 800e9a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	602a      	str	r2, [r5, #0]
 800e9aa:	061a      	lsls	r2, r3, #24
 800e9ac:	d410      	bmi.n	800e9d0 <__swhatbuf_r+0x40>
 800e9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9b2:	e00e      	b.n	800e9d2 <__swhatbuf_r+0x42>
 800e9b4:	466a      	mov	r2, sp
 800e9b6:	f7fd fb81 	bl	800c0bc <_fstat_r>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	dbf1      	blt.n	800e9a2 <__swhatbuf_r+0x12>
 800e9be:	9a01      	ldr	r2, [sp, #4]
 800e9c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9c8:	425a      	negs	r2, r3
 800e9ca:	415a      	adcs	r2, r3
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	e7ee      	b.n	800e9ae <__swhatbuf_r+0x1e>
 800e9d0:	2340      	movs	r3, #64	; 0x40
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	b016      	add	sp, #88	; 0x58
 800e9d8:	bd70      	pop	{r4, r5, r6, pc}

0800e9da <_raise_r>:
 800e9da:	291f      	cmp	r1, #31
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4604      	mov	r4, r0
 800e9e0:	460d      	mov	r5, r1
 800e9e2:	d904      	bls.n	800e9ee <_raise_r+0x14>
 800e9e4:	2316      	movs	r3, #22
 800e9e6:	6003      	str	r3, [r0, #0]
 800e9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9ec:	bd38      	pop	{r3, r4, r5, pc}
 800e9ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9f0:	b112      	cbz	r2, 800e9f8 <_raise_r+0x1e>
 800e9f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9f6:	b94b      	cbnz	r3, 800ea0c <_raise_r+0x32>
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f000 f816 	bl	800ea2a <_getpid_r>
 800e9fe:	462a      	mov	r2, r5
 800ea00:	4601      	mov	r1, r0
 800ea02:	4620      	mov	r0, r4
 800ea04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea08:	f7fd bb24 	b.w	800c054 <_kill_r>
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d00a      	beq.n	800ea26 <_raise_r+0x4c>
 800ea10:	1c59      	adds	r1, r3, #1
 800ea12:	d103      	bne.n	800ea1c <_raise_r+0x42>
 800ea14:	2316      	movs	r3, #22
 800ea16:	6003      	str	r3, [r0, #0]
 800ea18:	2001      	movs	r0, #1
 800ea1a:	e7e7      	b.n	800e9ec <_raise_r+0x12>
 800ea1c:	2400      	movs	r4, #0
 800ea1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea22:	4628      	mov	r0, r5
 800ea24:	4798      	blx	r3
 800ea26:	2000      	movs	r0, #0
 800ea28:	e7e0      	b.n	800e9ec <_raise_r+0x12>

0800ea2a <_getpid_r>:
 800ea2a:	f7fe b932 	b.w	800cc92 <_getpid>

0800ea2e <__sread>:
 800ea2e:	b510      	push	{r4, lr}
 800ea30:	460c      	mov	r4, r1
 800ea32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea36:	f7fd fb75 	bl	800c124 <_read_r>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	bfab      	itete	ge
 800ea3e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea40:	89a3      	ldrhlt	r3, [r4, #12]
 800ea42:	181b      	addge	r3, r3, r0
 800ea44:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea48:	bfac      	ite	ge
 800ea4a:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea4c:	81a3      	strhlt	r3, [r4, #12]
 800ea4e:	bd10      	pop	{r4, pc}

0800ea50 <__swrite>:
 800ea50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea54:	461f      	mov	r7, r3
 800ea56:	898b      	ldrh	r3, [r1, #12]
 800ea58:	05db      	lsls	r3, r3, #23
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	4616      	mov	r6, r2
 800ea60:	d505      	bpl.n	800ea6e <__swrite+0x1e>
 800ea62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea66:	2302      	movs	r3, #2
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f7fd fb49 	bl	800c100 <_lseek_r>
 800ea6e:	89a3      	ldrh	r3, [r4, #12]
 800ea70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea78:	81a3      	strh	r3, [r4, #12]
 800ea7a:	4632      	mov	r2, r6
 800ea7c:	463b      	mov	r3, r7
 800ea7e:	4628      	mov	r0, r5
 800ea80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea84:	f7fd baf8 	b.w	800c078 <_write_r>

0800ea88 <__sseek>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea90:	f7fd fb36 	bl	800c100 <_lseek_r>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	bf15      	itete	ne
 800ea9a:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea9c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eaa0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eaa4:	81a3      	strheq	r3, [r4, #12]
 800eaa6:	bf18      	it	ne
 800eaa8:	81a3      	strhne	r3, [r4, #12]
 800eaaa:	bd10      	pop	{r4, pc}

0800eaac <__sclose>:
 800eaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab0:	f7fd baf4 	b.w	800c09c <_close_r>

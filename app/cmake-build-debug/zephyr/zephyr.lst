
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 2e 00 20 fd 45 00 08 43 bb 00 08 b5 45 00 08     ... .E..C....E..
 8000010:	b5 45 00 08 b5 45 00 08 b5 45 00 08 00 00 00 00     .E...E...E......
	...
 800002c:	85 3d 00 08 b5 45 00 08 00 00 00 00 31 3d 00 08     .=...E......1=..
 800003c:	a9 77 00 08                                         .w..

08000040 <_irq_vector_table>:
 8000040:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000050:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000060:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000070:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000080:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000090:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000a0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000b0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000c0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000d0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000e0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 80000f0:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000100:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000110:	5d 3e 00 08 5d 3e 00 08 5d 3e 00 08 5d 3e 00 08     ]>..]>..]>..]>..
 8000120:	5d 3e 00 08                                         ]>..

Disassembly of section text:

08000128 <__aeabi_drsub>:
 8000128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800012c:	e002      	b.n	8000134 <__adddf3>
 800012e:	bf00      	nop

08000130 <__aeabi_dsub>:
 8000130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000134 <__adddf3>:
 8000134:	b530      	push	{r4, r5, lr}
 8000136:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800013a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800013e:	ea94 0f05 	teq	r4, r5
 8000142:	bf08      	it	eq
 8000144:	ea90 0f02 	teqeq	r0, r2
 8000148:	bf1f      	itttt	ne
 800014a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800014e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800015a:	f000 80e2 	beq.w	8000322 <__adddf3+0x1ee>
 800015e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000166:	bfb8      	it	lt
 8000168:	426d      	neglt	r5, r5
 800016a:	dd0c      	ble.n	8000186 <__adddf3+0x52>
 800016c:	442c      	add	r4, r5
 800016e:	ea80 0202 	eor.w	r2, r0, r2
 8000172:	ea81 0303 	eor.w	r3, r1, r3
 8000176:	ea82 0000 	eor.w	r0, r2, r0
 800017a:	ea83 0101 	eor.w	r1, r3, r1
 800017e:	ea80 0202 	eor.w	r2, r0, r2
 8000182:	ea81 0303 	eor.w	r3, r1, r3
 8000186:	2d36      	cmp	r5, #54	; 0x36
 8000188:	bf88      	it	hi
 800018a:	bd30      	pophi	{r4, r5, pc}
 800018c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000190:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800019c:	d002      	beq.n	80001a4 <__adddf3+0x70>
 800019e:	4240      	negs	r0, r0
 80001a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001b0:	d002      	beq.n	80001b8 <__adddf3+0x84>
 80001b2:	4252      	negs	r2, r2
 80001b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b8:	ea94 0f05 	teq	r4, r5
 80001bc:	f000 80a7 	beq.w	800030e <__adddf3+0x1da>
 80001c0:	f1a4 0401 	sub.w	r4, r4, #1
 80001c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80001c8:	db0d      	blt.n	80001e6 <__adddf3+0xb2>
 80001ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001ce:	fa22 f205 	lsr.w	r2, r2, r5
 80001d2:	1880      	adds	r0, r0, r2
 80001d4:	f141 0100 	adc.w	r1, r1, #0
 80001d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80001dc:	1880      	adds	r0, r0, r2
 80001de:	fa43 f305 	asr.w	r3, r3, r5
 80001e2:	4159      	adcs	r1, r3
 80001e4:	e00e      	b.n	8000204 <__adddf3+0xd0>
 80001e6:	f1a5 0520 	sub.w	r5, r5, #32
 80001ea:	f10e 0e20 	add.w	lr, lr, #32
 80001ee:	2a01      	cmp	r2, #1
 80001f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001f4:	bf28      	it	cs
 80001f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001fa:	fa43 f305 	asr.w	r3, r3, r5
 80001fe:	18c0      	adds	r0, r0, r3
 8000200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000208:	d507      	bpl.n	800021a <__adddf3+0xe6>
 800020a:	f04f 0e00 	mov.w	lr, #0
 800020e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000212:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000216:	eb6e 0101 	sbc.w	r1, lr, r1
 800021a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800021e:	d31b      	bcc.n	8000258 <__adddf3+0x124>
 8000220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000224:	d30c      	bcc.n	8000240 <__adddf3+0x10c>
 8000226:	0849      	lsrs	r1, r1, #1
 8000228:	ea5f 0030 	movs.w	r0, r0, rrx
 800022c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000230:	f104 0401 	add.w	r4, r4, #1
 8000234:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800023c:	f080 809a 	bcs.w	8000374 <__adddf3+0x240>
 8000240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000244:	bf08      	it	eq
 8000246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800024a:	f150 0000 	adcs.w	r0, r0, #0
 800024e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000252:	ea41 0105 	orr.w	r1, r1, r5
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800025c:	4140      	adcs	r0, r0
 800025e:	eb41 0101 	adc.w	r1, r1, r1
 8000262:	3c01      	subs	r4, #1
 8000264:	bf28      	it	cs
 8000266:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800026a:	d2e9      	bcs.n	8000240 <__adddf3+0x10c>
 800026c:	f091 0f00 	teq	r1, #0
 8000270:	bf04      	itt	eq
 8000272:	4601      	moveq	r1, r0
 8000274:	2000      	moveq	r0, #0
 8000276:	fab1 f381 	clz	r3, r1
 800027a:	bf08      	it	eq
 800027c:	3320      	addeq	r3, #32
 800027e:	f1a3 030b 	sub.w	r3, r3, #11
 8000282:	f1b3 0220 	subs.w	r2, r3, #32
 8000286:	da0c      	bge.n	80002a2 <__adddf3+0x16e>
 8000288:	320c      	adds	r2, #12
 800028a:	dd08      	ble.n	800029e <__adddf3+0x16a>
 800028c:	f102 0c14 	add.w	ip, r2, #20
 8000290:	f1c2 020c 	rsb	r2, r2, #12
 8000294:	fa01 f00c 	lsl.w	r0, r1, ip
 8000298:	fa21 f102 	lsr.w	r1, r1, r2
 800029c:	e00c      	b.n	80002b8 <__adddf3+0x184>
 800029e:	f102 0214 	add.w	r2, r2, #20
 80002a2:	bfd8      	it	le
 80002a4:	f1c2 0c20 	rsble	ip, r2, #32
 80002a8:	fa01 f102 	lsl.w	r1, r1, r2
 80002ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002b0:	bfdc      	itt	le
 80002b2:	ea41 010c 	orrle.w	r1, r1, ip
 80002b6:	4090      	lslle	r0, r2
 80002b8:	1ae4      	subs	r4, r4, r3
 80002ba:	bfa2      	ittt	ge
 80002bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002c0:	4329      	orrge	r1, r5
 80002c2:	bd30      	popge	{r4, r5, pc}
 80002c4:	ea6f 0404 	mvn.w	r4, r4
 80002c8:	3c1f      	subs	r4, #31
 80002ca:	da1c      	bge.n	8000306 <__adddf3+0x1d2>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc0e      	bgt.n	80002ee <__adddf3+0x1ba>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0220 	rsb	r2, r4, #32
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f302 	lsl.w	r3, r1, r2
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	fa21 f304 	lsr.w	r3, r1, r4
 80002e8:	ea45 0103 	orr.w	r1, r5, r3
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	f1c4 040c 	rsb	r4, r4, #12
 80002f2:	f1c4 0220 	rsb	r2, r4, #32
 80002f6:	fa20 f002 	lsr.w	r0, r0, r2
 80002fa:	fa01 f304 	lsl.w	r3, r1, r4
 80002fe:	ea40 0003 	orr.w	r0, r0, r3
 8000302:	4629      	mov	r1, r5
 8000304:	bd30      	pop	{r4, r5, pc}
 8000306:	fa21 f004 	lsr.w	r0, r1, r4
 800030a:	4629      	mov	r1, r5
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	f094 0f00 	teq	r4, #0
 8000312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000316:	bf06      	itte	eq
 8000318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800031c:	3401      	addeq	r4, #1
 800031e:	3d01      	subne	r5, #1
 8000320:	e74e      	b.n	80001c0 <__adddf3+0x8c>
 8000322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000326:	bf18      	it	ne
 8000328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032c:	d029      	beq.n	8000382 <__adddf3+0x24e>
 800032e:	ea94 0f05 	teq	r4, r5
 8000332:	bf08      	it	eq
 8000334:	ea90 0f02 	teqeq	r0, r2
 8000338:	d005      	beq.n	8000346 <__adddf3+0x212>
 800033a:	ea54 0c00 	orrs.w	ip, r4, r0
 800033e:	bf04      	itt	eq
 8000340:	4619      	moveq	r1, r3
 8000342:	4610      	moveq	r0, r2
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	ea91 0f03 	teq	r1, r3
 800034a:	bf1e      	ittt	ne
 800034c:	2100      	movne	r1, #0
 800034e:	2000      	movne	r0, #0
 8000350:	bd30      	popne	{r4, r5, pc}
 8000352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000356:	d105      	bne.n	8000364 <__adddf3+0x230>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	4149      	adcs	r1, r1
 800035c:	bf28      	it	cs
 800035e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000368:	bf3c      	itt	cc
 800036a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800036e:	bd30      	popcc	{r4, r5, pc}
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800037c:	f04f 0000 	mov.w	r0, #0
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf1a      	itte	ne
 8000388:	4619      	movne	r1, r3
 800038a:	4610      	movne	r0, r2
 800038c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000390:	bf1c      	itt	ne
 8000392:	460b      	movne	r3, r1
 8000394:	4602      	movne	r2, r0
 8000396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800039a:	bf06      	itte	eq
 800039c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003a0:	ea91 0f03 	teqeq	r1, r3
 80003a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	bf00      	nop

080003ac <__aeabi_ui2d>:
 80003ac:	f090 0f00 	teq	r0, #0
 80003b0:	bf04      	itt	eq
 80003b2:	2100      	moveq	r1, #0
 80003b4:	4770      	bxeq	lr
 80003b6:	b530      	push	{r4, r5, lr}
 80003b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c0:	f04f 0500 	mov.w	r5, #0
 80003c4:	f04f 0100 	mov.w	r1, #0
 80003c8:	e750      	b.n	800026c <__adddf3+0x138>
 80003ca:	bf00      	nop

080003cc <__aeabi_i2d>:
 80003cc:	f090 0f00 	teq	r0, #0
 80003d0:	bf04      	itt	eq
 80003d2:	2100      	moveq	r1, #0
 80003d4:	4770      	bxeq	lr
 80003d6:	b530      	push	{r4, r5, lr}
 80003d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003e4:	bf48      	it	mi
 80003e6:	4240      	negmi	r0, r0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e73e      	b.n	800026c <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_f2d>:
 80003f0:	0042      	lsls	r2, r0, #1
 80003f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80003fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003fe:	bf1f      	itttt	ne
 8000400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800040c:	4770      	bxne	lr
 800040e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000412:	bf08      	it	eq
 8000414:	4770      	bxeq	lr
 8000416:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800041a:	bf04      	itt	eq
 800041c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e71c      	b.n	800026c <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_ul2d>:
 8000434:	ea50 0201 	orrs.w	r2, r0, r1
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	f04f 0500 	mov.w	r5, #0
 8000442:	e00a      	b.n	800045a <__aeabi_l2d+0x16>

08000444 <__aeabi_l2d>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000452:	d502      	bpl.n	800045a <__aeabi_l2d+0x16>
 8000454:	4240      	negs	r0, r0
 8000456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000462:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000466:	f43f aed8 	beq.w	800021a <__adddf3+0xe6>
 800046a:	f04f 0203 	mov.w	r2, #3
 800046e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000472:	bf18      	it	ne
 8000474:	3203      	addne	r2, #3
 8000476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800047a:	bf18      	it	ne
 800047c:	3203      	addne	r2, #3
 800047e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	fa00 fc03 	lsl.w	ip, r0, r3
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000492:	ea40 000e 	orr.w	r0, r0, lr
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	4414      	add	r4, r2
 800049c:	e6bd      	b.n	800021a <__adddf3+0xe6>
 800049e:	bf00      	nop

080004a0 <__aeabi_dmul>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ae:	bf1d      	ittte	ne
 80004b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004b4:	ea94 0f0c 	teqne	r4, ip
 80004b8:	ea95 0f0c 	teqne	r5, ip
 80004bc:	f000 f8de 	bleq	800067c <__aeabi_dmul+0x1dc>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea81 0603 	eor.w	r6, r1, r3
 80004c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004d2:	bf18      	it	ne
 80004d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004e0:	d038      	beq.n	8000554 <__aeabi_dmul+0xb4>
 80004e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004f6:	f04f 0600 	mov.w	r6, #0
 80004fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004fe:	f09c 0f00 	teq	ip, #0
 8000502:	bf18      	it	ne
 8000504:	f04e 0e01 	orrne.w	lr, lr, #1
 8000508:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800050c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000510:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000514:	d204      	bcs.n	8000520 <__aeabi_dmul+0x80>
 8000516:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800051a:	416d      	adcs	r5, r5
 800051c:	eb46 0606 	adc.w	r6, r6, r6
 8000520:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000524:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000528:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800052c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000530:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000534:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000538:	bf88      	it	hi
 800053a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800053e:	d81e      	bhi.n	800057e <__aeabi_dmul+0xde>
 8000540:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000558:	ea46 0101 	orr.w	r1, r6, r1
 800055c:	ea40 0002 	orr.w	r0, r0, r2
 8000560:	ea81 0103 	eor.w	r1, r1, r3
 8000564:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000568:	bfc2      	ittt	gt
 800056a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800056e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000572:	bd70      	popgt	{r4, r5, r6, pc}
 8000574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000578:	f04f 0e00 	mov.w	lr, #0
 800057c:	3c01      	subs	r4, #1
 800057e:	f300 80ab 	bgt.w	80006d8 <__aeabi_dmul+0x238>
 8000582:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000586:	bfde      	ittt	le
 8000588:	2000      	movle	r0, #0
 800058a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800058e:	bd70      	pople	{r4, r5, r6, pc}
 8000590:	f1c4 0400 	rsb	r4, r4, #0
 8000594:	3c20      	subs	r4, #32
 8000596:	da35      	bge.n	8000604 <__aeabi_dmul+0x164>
 8000598:	340c      	adds	r4, #12
 800059a:	dc1b      	bgt.n	80005d4 <__aeabi_dmul+0x134>
 800059c:	f104 0414 	add.w	r4, r4, #20
 80005a0:	f1c4 0520 	rsb	r5, r4, #32
 80005a4:	fa00 f305 	lsl.w	r3, r0, r5
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f205 	lsl.w	r2, r1, r5
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005c0:	fa21 f604 	lsr.w	r6, r1, r4
 80005c4:	eb42 0106 	adc.w	r1, r2, r6
 80005c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005cc:	bf08      	it	eq
 80005ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f1c4 040c 	rsb	r4, r4, #12
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f304 	lsl.w	r3, r0, r4
 80005e0:	fa20 f005 	lsr.w	r0, r0, r5
 80005e4:	fa01 f204 	lsl.w	r2, r1, r4
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	f141 0100 	adc.w	r1, r1, #0
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f205 	lsl.w	r2, r0, r5
 800060c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000610:	fa20 f304 	lsr.w	r3, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea43 0302 	orr.w	r3, r3, r2
 800061c:	fa21 f004 	lsr.w	r0, r1, r4
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	fa21 f204 	lsr.w	r2, r1, r4
 8000628:	ea20 0002 	bic.w	r0, r0, r2
 800062c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f094 0f00 	teq	r4, #0
 8000640:	d10f      	bne.n	8000662 <__aeabi_dmul+0x1c2>
 8000642:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000646:	0040      	lsls	r0, r0, #1
 8000648:	eb41 0101 	adc.w	r1, r1, r1
 800064c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000650:	bf08      	it	eq
 8000652:	3c01      	subeq	r4, #1
 8000654:	d0f7      	beq.n	8000646 <__aeabi_dmul+0x1a6>
 8000656:	ea41 0106 	orr.w	r1, r1, r6
 800065a:	f095 0f00 	teq	r5, #0
 800065e:	bf18      	it	ne
 8000660:	4770      	bxne	lr
 8000662:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	eb43 0303 	adc.w	r3, r3, r3
 800066c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3d01      	subeq	r5, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1c6>
 8000676:	ea43 0306 	orr.w	r3, r3, r6
 800067a:	4770      	bx	lr
 800067c:	ea94 0f0c 	teq	r4, ip
 8000680:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000684:	bf18      	it	ne
 8000686:	ea95 0f0c 	teqne	r5, ip
 800068a:	d00c      	beq.n	80006a6 <__aeabi_dmul+0x206>
 800068c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000690:	bf18      	it	ne
 8000692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000696:	d1d1      	bne.n	800063c <__aeabi_dmul+0x19c>
 8000698:	ea81 0103 	eor.w	r1, r1, r3
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	f04f 0000 	mov.w	r0, #0
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006aa:	bf06      	itte	eq
 80006ac:	4610      	moveq	r0, r2
 80006ae:	4619      	moveq	r1, r3
 80006b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b4:	d019      	beq.n	80006ea <__aeabi_dmul+0x24a>
 80006b6:	ea94 0f0c 	teq	r4, ip
 80006ba:	d102      	bne.n	80006c2 <__aeabi_dmul+0x222>
 80006bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006c0:	d113      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006c2:	ea95 0f0c 	teq	r5, ip
 80006c6:	d105      	bne.n	80006d4 <__aeabi_dmul+0x234>
 80006c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006cc:	bf1c      	itt	ne
 80006ce:	4610      	movne	r0, r2
 80006d0:	4619      	movne	r1, r3
 80006d2:	d10a      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006f2:	bd70      	pop	{r4, r5, r6, pc}

080006f4 <__aeabi_ddiv>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000702:	bf1d      	ittte	ne
 8000704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000708:	ea94 0f0c 	teqne	r4, ip
 800070c:	ea95 0f0c 	teqne	r5, ip
 8000710:	f000 f8a7 	bleq	8000862 <__aeabi_ddiv+0x16e>
 8000714:	eba4 0405 	sub.w	r4, r4, r5
 8000718:	ea81 0e03 	eor.w	lr, r1, r3
 800071c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000720:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000724:	f000 8088 	beq.w	8000838 <__aeabi_ddiv+0x144>
 8000728:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800072c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000730:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000734:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000738:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800073c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000740:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000744:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000748:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800074c:	429d      	cmp	r5, r3
 800074e:	bf08      	it	eq
 8000750:	4296      	cmpeq	r6, r2
 8000752:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000756:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800075a:	d202      	bcs.n	8000762 <__aeabi_ddiv+0x6e>
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000762:	1ab6      	subs	r6, r6, r2
 8000764:	eb65 0503 	sbc.w	r5, r5, r3
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	ea4f 0232 	mov.w	r2, r2, rrx
 800076e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000772:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 000c 	orrcs.w	r0, r0, ip
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007d4:	d018      	beq.n	8000808 <__aeabi_ddiv+0x114>
 80007d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007f2:	d1c0      	bne.n	8000776 <__aeabi_ddiv+0x82>
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	d10b      	bne.n	8000812 <__aeabi_ddiv+0x11e>
 80007fa:	ea41 0100 	orr.w	r1, r1, r0
 80007fe:	f04f 0000 	mov.w	r0, #0
 8000802:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000806:	e7b6      	b.n	8000776 <__aeabi_ddiv+0x82>
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf04      	itt	eq
 800080e:	4301      	orreq	r1, r0
 8000810:	2000      	moveq	r0, #0
 8000812:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000816:	bf88      	it	hi
 8000818:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800081c:	f63f aeaf 	bhi.w	800057e <__aeabi_dmul+0xde>
 8000820:	ebb5 0c03 	subs.w	ip, r5, r3
 8000824:	bf04      	itt	eq
 8000826:	ebb6 0c02 	subseq.w	ip, r6, r2
 800082a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800082e:	f150 0000 	adcs.w	r0, r0, #0
 8000832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800083c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000840:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000844:	bfc2      	ittt	gt
 8000846:	ebd4 050c 	rsbsgt	r5, r4, ip
 800084a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800084e:	bd70      	popgt	{r4, r5, r6, pc}
 8000850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000854:	f04f 0e00 	mov.w	lr, #0
 8000858:	3c01      	subs	r4, #1
 800085a:	e690      	b.n	800057e <__aeabi_dmul+0xde>
 800085c:	ea45 0e06 	orr.w	lr, r5, r6
 8000860:	e68d      	b.n	800057e <__aeabi_dmul+0xde>
 8000862:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	bf08      	it	eq
 800086c:	ea95 0f0c 	teqeq	r5, ip
 8000870:	f43f af3b 	beq.w	80006ea <__aeabi_dmul+0x24a>
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	d10a      	bne.n	8000890 <__aeabi_ddiv+0x19c>
 800087a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800087e:	f47f af34 	bne.w	80006ea <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	f47f af25 	bne.w	80006d4 <__aeabi_dmul+0x234>
 800088a:	4610      	mov	r0, r2
 800088c:	4619      	mov	r1, r3
 800088e:	e72c      	b.n	80006ea <__aeabi_dmul+0x24a>
 8000890:	ea95 0f0c 	teq	r5, ip
 8000894:	d106      	bne.n	80008a4 <__aeabi_ddiv+0x1b0>
 8000896:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089a:	f43f aefd 	beq.w	8000698 <__aeabi_dmul+0x1f8>
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	e722      	b.n	80006ea <__aeabi_dmul+0x24a>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	f47f aec5 	bne.w	800063c <__aeabi_dmul+0x19c>
 80008b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008b6:	f47f af0d 	bne.w	80006d4 <__aeabi_dmul+0x234>
 80008ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008be:	f47f aeeb 	bne.w	8000698 <__aeabi_dmul+0x1f8>
 80008c2:	e712      	b.n	80006ea <__aeabi_dmul+0x24a>

080008c4 <__aeabi_uldivmod>:
 80008c4:	b953      	cbnz	r3, 80008dc <__aeabi_uldivmod+0x18>
 80008c6:	b94a      	cbnz	r2, 80008dc <__aeabi_uldivmod+0x18>
 80008c8:	2900      	cmp	r1, #0
 80008ca:	bf08      	it	eq
 80008cc:	2800      	cmpeq	r0, #0
 80008ce:	bf1c      	itt	ne
 80008d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 b80c 	b.w	80008f4 <__aeabi_idiv0>
 80008dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e4:	f000 f8ce 	bl	8000a84 <__udivmoddi4>
 80008e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f0:	b004      	add	sp, #16
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__udivmoddi4>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	4607      	mov	r7, r0
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4615      	mov	r5, r2
 8000a90:	463c      	mov	r4, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80c6 	bne.w	8000c28 <__udivmoddi4+0x1a4>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	fab2 f782 	clz	r7, r2
 8000aa2:	d946      	bls.n	8000b32 <__udivmoddi4+0xae>
 8000aa4:	b14f      	cbz	r7, 8000aba <__udivmoddi4+0x36>
 8000aa6:	f1c7 0e20 	rsb	lr, r7, #32
 8000aaa:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000aae:	fa00 f307 	lsl.w	r3, r0, r7
 8000ab2:	40bd      	lsls	r5, r7
 8000ab4:	ea4e 0c03 	orr.w	ip, lr, r3
 8000ab8:	40bc      	lsls	r4, r7
 8000aba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000abe:	fbbc f9f8 	udiv	r9, ip, r8
 8000ac2:	fa1f fe85 	uxth.w	lr, r5
 8000ac6:	fb08 c319 	mls	r3, r8, r9, ip
 8000aca:	fb09 fa0e 	mul.w	sl, r9, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ad4:	459a      	cmp	sl, r3
 8000ad6:	d928      	bls.n	8000b2a <__udivmoddi4+0xa6>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ade:	d204      	bcs.n	8000aea <__udivmoddi4+0x66>
 8000ae0:	459a      	cmp	sl, r3
 8000ae2:	d902      	bls.n	8000aea <__udivmoddi4+0x66>
 8000ae4:	f1a9 0002 	sub.w	r0, r9, #2
 8000ae8:	442b      	add	r3, r5
 8000aea:	eba3 030a 	sub.w	r3, r3, sl
 8000aee:	fbb3 f2f8 	udiv	r2, r3, r8
 8000af2:	fb08 3312 	mls	r3, r8, r2, r3
 8000af6:	fb02 fe0e 	mul.w	lr, r2, lr
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d914      	bls.n	8000b2e <__udivmoddi4+0xaa>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000b0a:	d203      	bcs.n	8000b14 <__udivmoddi4+0x90>
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d901      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000b10:	1e93      	subs	r3, r2, #2
 8000b12:	442c      	add	r4, r5
 8000b14:	eba4 040e 	sub.w	r4, r4, lr
 8000b18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	40fc      	lsrs	r4, r7
 8000b22:	6034      	str	r4, [r6, #0]
 8000b24:	6073      	str	r3, [r6, #4]
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	e7dd      	b.n	8000aea <__udivmoddi4+0x66>
 8000b2e:	4613      	mov	r3, r2
 8000b30:	e7f0      	b.n	8000b14 <__udivmoddi4+0x90>
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xb2>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	bb87      	cbnz	r7, 8000b9a <__udivmoddi4+0x116>
 8000b38:	2101      	movs	r1, #1
 8000b3a:	1a83      	subs	r3, r0, r2
 8000b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b40:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b44:	b2aa      	uxth	r2, r5
 8000b46:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b4a:	fb0c f802 	mul.w	r8, ip, r2
 8000b4e:	0c20      	lsrs	r0, r4, #16
 8000b50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b54:	4598      	cmp	r8, r3
 8000b56:	d963      	bls.n	8000c20 <__udivmoddi4+0x19c>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b5e:	d204      	bcs.n	8000b6a <__udivmoddi4+0xe6>
 8000b60:	4598      	cmp	r8, r3
 8000b62:	d902      	bls.n	8000b6a <__udivmoddi4+0xe6>
 8000b64:	f1ac 0002 	sub.w	r0, ip, #2
 8000b68:	442b      	add	r3, r5
 8000b6a:	eba3 0308 	sub.w	r3, r3, r8
 8000b6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b72:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b76:	fb0c f202 	mul.w	r2, ip, r2
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d94f      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000b8a:	d204      	bcs.n	8000b96 <__udivmoddi4+0x112>
 8000b8c:	42a2      	cmp	r2, r4
 8000b8e:	d902      	bls.n	8000b96 <__udivmoddi4+0x112>
 8000b90:	f1ac 0302 	sub.w	r3, ip, #2
 8000b94:	442c      	add	r4, r5
 8000b96:	1aa4      	subs	r4, r4, r2
 8000b98:	e7be      	b.n	8000b18 <__udivmoddi4+0x94>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bd      	lsls	r5, r7
 8000ba0:	fa20 f80c 	lsr.w	r8, r0, ip
 8000ba4:	fa00 f307 	lsl.w	r3, r0, r7
 8000ba8:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000bac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb0:	ea4c 0203 	orr.w	r2, ip, r3
 8000bb4:	fbb8 fcfe 	udiv	ip, r8, lr
 8000bb8:	b2ab      	uxth	r3, r5
 8000bba:	fb0e 801c 	mls	r0, lr, ip, r8
 8000bbe:	fb0c f903 	mul.w	r9, ip, r3
 8000bc2:	0c11      	lsrs	r1, r2, #16
 8000bc4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000bc8:	4581      	cmp	r9, r0
 8000bca:	fa04 f407 	lsl.w	r4, r4, r7
 8000bce:	d923      	bls.n	8000c18 <__udivmoddi4+0x194>
 8000bd0:	1828      	adds	r0, r5, r0
 8000bd2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000bd6:	d204      	bcs.n	8000be2 <__udivmoddi4+0x15e>
 8000bd8:	4581      	cmp	r9, r0
 8000bda:	d902      	bls.n	8000be2 <__udivmoddi4+0x15e>
 8000bdc:	f1ac 0102 	sub.w	r1, ip, #2
 8000be0:	4428      	add	r0, r5
 8000be2:	eba0 0009 	sub.w	r0, r0, r9
 8000be6:	fbb0 fcfe 	udiv	ip, r0, lr
 8000bea:	fb0e 001c 	mls	r0, lr, ip, r0
 8000bee:	fb0c f803 	mul.w	r8, ip, r3
 8000bf2:	b292      	uxth	r2, r2
 8000bf4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000bf8:	4598      	cmp	r8, r3
 8000bfa:	d90f      	bls.n	8000c1c <__udivmoddi4+0x198>
 8000bfc:	18eb      	adds	r3, r5, r3
 8000bfe:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000c02:	d204      	bcs.n	8000c0e <__udivmoddi4+0x18a>
 8000c04:	4598      	cmp	r8, r3
 8000c06:	d902      	bls.n	8000c0e <__udivmoddi4+0x18a>
 8000c08:	f1ac 0202 	sub.w	r2, ip, #2
 8000c0c:	442b      	add	r3, r5
 8000c0e:	eba3 0308 	sub.w	r3, r3, r8
 8000c12:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000c16:	e791      	b.n	8000b3c <__udivmoddi4+0xb8>
 8000c18:	4661      	mov	r1, ip
 8000c1a:	e7e2      	b.n	8000be2 <__udivmoddi4+0x15e>
 8000c1c:	4662      	mov	r2, ip
 8000c1e:	e7f6      	b.n	8000c0e <__udivmoddi4+0x18a>
 8000c20:	4660      	mov	r0, ip
 8000c22:	e7a2      	b.n	8000b6a <__udivmoddi4+0xe6>
 8000c24:	4663      	mov	r3, ip
 8000c26:	e7b6      	b.n	8000b96 <__udivmoddi4+0x112>
 8000c28:	4283      	cmp	r3, r0
 8000c2a:	d905      	bls.n	8000c38 <__udivmoddi4+0x1b4>
 8000c2c:	b10e      	cbz	r6, 8000c32 <__udivmoddi4+0x1ae>
 8000c2e:	e9c6 7000 	strd	r7, r0, [r6]
 8000c32:	2100      	movs	r1, #0
 8000c34:	4608      	mov	r0, r1
 8000c36:	e776      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	b981      	cbnz	r1, 8000c60 <__udivmoddi4+0x1dc>
 8000c3e:	4283      	cmp	r3, r0
 8000c40:	d301      	bcc.n	8000c46 <__udivmoddi4+0x1c2>
 8000c42:	42ba      	cmp	r2, r7
 8000c44:	d80a      	bhi.n	8000c5c <__udivmoddi4+0x1d8>
 8000c46:	1abc      	subs	r4, r7, r2
 8000c48:	eb60 0303 	sbc.w	r3, r0, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	469c      	mov	ip, r3
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d068      	beq.n	8000d26 <__udivmoddi4+0x2a2>
 8000c54:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e764      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e7f7      	b.n	8000c50 <__udivmoddi4+0x1cc>
 8000c60:	f1c1 0c20 	rsb	ip, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f40c 	lsr.w	r4, r2, ip
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000c70:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000c74:	fbbb f8f9 	udiv	r8, fp, r9
 8000c78:	fa1f fe84 	uxth.w	lr, r4
 8000c7c:	fb09 bb18 	mls	fp, r9, r8, fp
 8000c80:	fb08 fa0e 	mul.w	sl, r8, lr
 8000c84:	fa02 f501 	lsl.w	r5, r2, r1
 8000c88:	fa00 f301 	lsl.w	r3, r0, r1
 8000c8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000c90:	4313      	orrs	r3, r2
 8000c92:	0c1a      	lsrs	r2, r3, #16
 8000c94:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000c98:	4592      	cmp	sl, r2
 8000c9a:	fa07 f701 	lsl.w	r7, r7, r1
 8000c9e:	d93e      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000ca0:	18a2      	adds	r2, r4, r2
 8000ca2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000ca6:	d204      	bcs.n	8000cb2 <__udivmoddi4+0x22e>
 8000ca8:	4592      	cmp	sl, r2
 8000caa:	d902      	bls.n	8000cb2 <__udivmoddi4+0x22e>
 8000cac:	f1a8 0002 	sub.w	r0, r8, #2
 8000cb0:	4422      	add	r2, r4
 8000cb2:	eba2 020a 	sub.w	r2, r2, sl
 8000cb6:	fbb2 f8f9 	udiv	r8, r2, r9
 8000cba:	fb09 2218 	mls	r2, r9, r8, r2
 8000cbe:	fb08 fe0e 	mul.w	lr, r8, lr
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000cc8:	4596      	cmp	lr, r2
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	18a2      	adds	r2, r4, r2
 8000cce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000cd2:	d204      	bcs.n	8000cde <__udivmoddi4+0x25a>
 8000cd4:	4596      	cmp	lr, r2
 8000cd6:	d902      	bls.n	8000cde <__udivmoddi4+0x25a>
 8000cd8:	f1a8 0302 	sub.w	r3, r8, #2
 8000cdc:	4422      	add	r2, r4
 8000cde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce2:	fba0 9305 	umull	r9, r3, r0, r5
 8000ce6:	eba2 020e 	sub.w	r2, r2, lr
 8000cea:	429a      	cmp	r2, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	4698      	mov	r8, r3
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x274>
 8000cf2:	d106      	bne.n	8000d02 <__udivmoddi4+0x27e>
 8000cf4:	454f      	cmp	r7, r9
 8000cf6:	d204      	bcs.n	8000d02 <__udivmoddi4+0x27e>
 8000cf8:	ebb9 0e05 	subs.w	lr, r9, r5
 8000cfc:	eb63 0804 	sbc.w	r8, r3, r4
 8000d00:	3801      	subs	r0, #1
 8000d02:	b186      	cbz	r6, 8000d26 <__udivmoddi4+0x2a2>
 8000d04:	ebb7 030e 	subs.w	r3, r7, lr
 8000d08:	eb62 0708 	sbc.w	r7, r2, r8
 8000d0c:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d10:	40cb      	lsrs	r3, r1
 8000d12:	ea4c 0303 	orr.w	r3, ip, r3
 8000d16:	40cf      	lsrs	r7, r1
 8000d18:	e9c6 3700 	strd	r3, r7, [r6]
 8000d1c:	e79c      	b.n	8000c58 <__udivmoddi4+0x1d4>
 8000d1e:	4640      	mov	r0, r8
 8000d20:	e7c7      	b.n	8000cb2 <__udivmoddi4+0x22e>
 8000d22:	4643      	mov	r3, r8
 8000d24:	e7db      	b.n	8000cde <__udivmoddi4+0x25a>
 8000d26:	4631      	mov	r1, r6
 8000d28:	e6fd      	b.n	8000b26 <__udivmoddi4+0xa2>

08000d2a <strcmp>:
 8000d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d32:	2a01      	cmp	r2, #1
 8000d34:	bf28      	it	cs
 8000d36:	429a      	cmpcs	r2, r3
 8000d38:	d0f7      	beq.n	8000d2a <strcmp>
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	4770      	bx	lr

08000d3e <strlen>:
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d1fb      	bne.n	8000d40 <strlen+0x2>
 8000d48:	1a18      	subs	r0, r3, r0
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	4770      	bx	lr
	...

08000d50 <_dtoa_r>:
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	4616      	mov	r6, r2
 8000d56:	461f      	mov	r7, r3
 8000d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000d5a:	b099      	sub	sp, #100	; 0x64
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000d66:	b974      	cbnz	r4, 8000d86 <_dtoa_r+0x36>
 8000d68:	2010      	movs	r0, #16
 8000d6a:	f008 fe35 	bl	80099d8 <malloc>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6268      	str	r0, [r5, #36]	; 0x24
 8000d72:	b920      	cbnz	r0, 8000d7e <_dtoa_r+0x2e>
 8000d74:	21ea      	movs	r1, #234	; 0xea
 8000d76:	4ba8      	ldr	r3, [pc, #672]	; (8001018 <_dtoa_r+0x2c8>)
 8000d78:	48a8      	ldr	r0, [pc, #672]	; (800101c <_dtoa_r+0x2cc>)
 8000d7a:	f009 fd61 	bl	800a840 <__assert_func>
 8000d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000d82:	6004      	str	r4, [r0, #0]
 8000d84:	60c4      	str	r4, [r0, #12]
 8000d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	b151      	cbz	r1, 8000da2 <_dtoa_r+0x52>
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4093      	lsls	r3, r2
 8000d92:	604a      	str	r2, [r1, #4]
 8000d94:	608b      	str	r3, [r1, #8]
 8000d96:	4628      	mov	r0, r5
 8000d98:	f009 fa7a 	bl	800a290 <_Bfree>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	1e3b      	subs	r3, r7, #0
 8000da4:	bfaf      	iteee	ge
 8000da6:	2300      	movge	r3, #0
 8000da8:	2201      	movlt	r2, #1
 8000daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000dae:	9305      	strlt	r3, [sp, #20]
 8000db0:	bfa8      	it	ge
 8000db2:	f8c8 3000 	strge.w	r3, [r8]
 8000db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000dba:	4b99      	ldr	r3, [pc, #612]	; (8001020 <_dtoa_r+0x2d0>)
 8000dbc:	bfb8      	it	lt
 8000dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8000dc2:	ea33 0309 	bics.w	r3, r3, r9
 8000dc6:	d119      	bne.n	8000dfc <_dtoa_r+0xac>
 8000dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8000dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000dd4:	4333      	orrs	r3, r6
 8000dd6:	f000 857f 	beq.w	80018d8 <_dtoa_r+0xb88>
 8000dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ddc:	b953      	cbnz	r3, 8000df4 <_dtoa_r+0xa4>
 8000dde:	4b91      	ldr	r3, [pc, #580]	; (8001024 <_dtoa_r+0x2d4>)
 8000de0:	e022      	b.n	8000e28 <_dtoa_r+0xd8>
 8000de2:	4b91      	ldr	r3, [pc, #580]	; (8001028 <_dtoa_r+0x2d8>)
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	9803      	ldr	r0, [sp, #12]
 8000dee:	b019      	add	sp, #100	; 0x64
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <_dtoa_r+0x2d4>)
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	e7f5      	b.n	8000de8 <_dtoa_r+0x98>
 8000dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f7ff fdca 	bl	80009a4 <__aeabi_dcmpeq>
 8000e10:	4680      	mov	r8, r0
 8000e12:	b158      	cbz	r0, 8000e2c <_dtoa_r+0xdc>
 8000e14:	2301      	movs	r3, #1
 8000e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8558 	beq.w	80018d2 <_dtoa_r+0xb82>
 8000e22:	4882      	ldr	r0, [pc, #520]	; (800102c <_dtoa_r+0x2dc>)
 8000e24:	6018      	str	r0, [r3, #0]
 8000e26:	1e43      	subs	r3, r0, #1
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	e7df      	b.n	8000dec <_dtoa_r+0x9c>
 8000e2c:	ab16      	add	r3, sp, #88	; 0x58
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	ab17      	add	r3, sp, #92	; 0x5c
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4628      	mov	r0, r5
 8000e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000e3a:	f009 fca5 	bl	800a788 <__d2b>
 8000e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000e42:	4683      	mov	fp, r0
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d07f      	beq.n	8000f48 <_dtoa_r+0x1f8>
 8000e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000e62:	2200      	movs	r2, #0
 8000e64:	4b72      	ldr	r3, [pc, #456]	; (8001030 <_dtoa_r+0x2e0>)
 8000e66:	f7ff f963 	bl	8000130 <__aeabi_dsub>
 8000e6a:	a365      	add	r3, pc, #404	; (adr r3, 8001000 <_dtoa_r+0x2b0>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb16 	bl	80004a0 <__aeabi_dmul>
 8000e74:	a364      	add	r3, pc, #400	; (adr r3, 8001008 <_dtoa_r+0x2b8>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff f95b 	bl	8000134 <__adddf3>
 8000e7e:	4606      	mov	r6, r0
 8000e80:	4620      	mov	r0, r4
 8000e82:	460f      	mov	r7, r1
 8000e84:	f7ff faa2 	bl	80003cc <__aeabi_i2d>
 8000e88:	a361      	add	r3, pc, #388	; (adr r3, 8001010 <_dtoa_r+0x2c0>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb07 	bl	80004a0 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4630      	mov	r0, r6
 8000e98:	4639      	mov	r1, r7
 8000e9a:	f7ff f94b 	bl	8000134 <__adddf3>
 8000e9e:	4606      	mov	r6, r0
 8000ea0:	460f      	mov	r7, r1
 8000ea2:	f7ff fdc7 	bl	8000a34 <__aeabi_d2iz>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4682      	mov	sl, r0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4630      	mov	r0, r6
 8000eae:	4639      	mov	r1, r7
 8000eb0:	f7ff fd82 	bl	80009b8 <__aeabi_dcmplt>
 8000eb4:	b148      	cbz	r0, 8000eca <_dtoa_r+0x17a>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	f7ff fa88 	bl	80003cc <__aeabi_i2d>
 8000ebc:	4632      	mov	r2, r6
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	f7ff fd70 	bl	80009a4 <__aeabi_dcmpeq>
 8000ec4:	b908      	cbnz	r0, 8000eca <_dtoa_r+0x17a>
 8000ec6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eca:	f1ba 0f16 	cmp.w	sl, #22
 8000ece:	d858      	bhi.n	8000f82 <_dtoa_r+0x232>
 8000ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <_dtoa_r+0x2e4>)
 8000ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fd6b 	bl	80009b8 <__aeabi_dcmplt>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d04f      	beq.n	8000f86 <_dtoa_r+0x236>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000ef0:	1b1c      	subs	r4, r3, r4
 8000ef2:	1e63      	subs	r3, r4, #1
 8000ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef6:	bf49      	itett	mi
 8000ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8000efc:	2300      	movpl	r3, #0
 8000efe:	9306      	strmi	r3, [sp, #24]
 8000f00:	2300      	movmi	r3, #0
 8000f02:	bf54      	ite	pl
 8000f04:	9306      	strpl	r3, [sp, #24]
 8000f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8000f08:	f1ba 0f00 	cmp.w	sl, #0
 8000f0c:	db3d      	blt.n	8000f8a <_dtoa_r+0x23a>
 8000f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8000f14:	4453      	add	r3, sl
 8000f16:	9309      	str	r3, [sp, #36]	; 0x24
 8000f18:	2300      	movs	r3, #0
 8000f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8000f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	f200 808c 	bhi.w	800103c <_dtoa_r+0x2ec>
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	bfc4      	itt	gt
 8000f28:	3b04      	subgt	r3, #4
 8000f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8000f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f2e:	bfc8      	it	gt
 8000f30:	2400      	movgt	r4, #0
 8000f32:	f1a3 0302 	sub.w	r3, r3, #2
 8000f36:	bfd8      	it	le
 8000f38:	2401      	movle	r4, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	f200 808a 	bhi.w	8001054 <_dtoa_r+0x304>
 8000f40:	e8df f003 	tbb	[pc, r3]
 8000f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8000f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8000f4c:	441c      	add	r4, r3
 8000f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	bfc3      	ittte	gt
 8000f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8000f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8000f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8000f62:	f1c3 0320 	rsble	r3, r3, #32
 8000f66:	bfc6      	itte	gt
 8000f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8000f6c:	4318      	orrgt	r0, r3
 8000f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8000f72:	f7ff fa1b 	bl	80003ac <__aeabi_ui2d>
 8000f76:	2301      	movs	r3, #1
 8000f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8000f7c:	3c01      	subs	r4, #1
 8000f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f80:	e76f      	b.n	8000e62 <_dtoa_r+0x112>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e7b2      	b.n	8000eec <_dtoa_r+0x19c>
 8000f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8000f88:	e7b1      	b.n	8000eee <_dtoa_r+0x19e>
 8000f8a:	9b06      	ldr	r3, [sp, #24]
 8000f8c:	eba3 030a 	sub.w	r3, r3, sl
 8000f90:	9306      	str	r3, [sp, #24]
 8000f92:	f1ca 0300 	rsb	r3, sl, #0
 8000f96:	930a      	str	r3, [sp, #40]	; 0x28
 8000f98:	2300      	movs	r3, #0
 8000f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f9c:	e7be      	b.n	8000f1c <_dtoa_r+0x1cc>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc58      	bgt.n	800105a <_dtoa_r+0x30a>
 8000fa8:	f04f 0901 	mov.w	r9, #1
 8000fac:	464b      	mov	r3, r9
 8000fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8000fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000fba:	6042      	str	r2, [r0, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f102 0614 	add.w	r6, r2, #20
 8000fc2:	429e      	cmp	r6, r3
 8000fc4:	6841      	ldr	r1, [r0, #4]
 8000fc6:	d94e      	bls.n	8001066 <_dtoa_r+0x316>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f009 f921 	bl	800a210 <_Balloc>
 8000fce:	9003      	str	r0, [sp, #12]
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d14c      	bne.n	800106e <_dtoa_r+0x31e>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <_dtoa_r+0x2e8>)
 8000fdc:	e6cc      	b.n	8000d78 <_dtoa_r+0x28>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e7de      	b.n	8000fa0 <_dtoa_r+0x250>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fe8:	eb0a 0903 	add.w	r9, sl, r3
 8000fec:	f109 0301 	add.w	r3, r9, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	9308      	str	r3, [sp, #32]
 8000ff4:	bfb8      	it	lt
 8000ff6:	2301      	movlt	r3, #1
 8000ff8:	e7dd      	b.n	8000fb6 <_dtoa_r+0x266>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e7f2      	b.n	8000fe4 <_dtoa_r+0x294>
 8000ffe:	bf00      	nop
 8001000:	636f4361 	.word	0x636f4361
 8001004:	3fd287a7 	.word	0x3fd287a7
 8001008:	8b60c8b3 	.word	0x8b60c8b3
 800100c:	3fc68a28 	.word	0x3fc68a28
 8001010:	509f79fb 	.word	0x509f79fb
 8001014:	3fd34413 	.word	0x3fd34413
 8001018:	0800f0f6 	.word	0x0800f0f6
 800101c:	0800f10d 	.word	0x0800f10d
 8001020:	7ff00000 	.word	0x7ff00000
 8001024:	0800f0f2 	.word	0x0800f0f2
 8001028:	0800f0e9 	.word	0x0800f0e9
 800102c:	0800f0c6 	.word	0x0800f0c6
 8001030:	3ff80000 	.word	0x3ff80000
 8001034:	0800de48 	.word	0x0800de48
 8001038:	0800f167 	.word	0x0800f167
 800103c:	2401      	movs	r4, #1
 800103e:	2300      	movs	r3, #0
 8001040:	940b      	str	r4, [sp, #44]	; 0x2c
 8001042:	9322      	str	r3, [sp, #136]	; 0x88
 8001044:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	2312      	movs	r3, #18
 800104c:	f8cd 9020 	str.w	r9, [sp, #32]
 8001050:	9223      	str	r2, [sp, #140]	; 0x8c
 8001052:	e7b0      	b.n	8000fb6 <_dtoa_r+0x266>
 8001054:	2301      	movs	r3, #1
 8001056:	930b      	str	r3, [sp, #44]	; 0x2c
 8001058:	e7f4      	b.n	8001044 <_dtoa_r+0x2f4>
 800105a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800105e:	464b      	mov	r3, r9
 8001060:	f8cd 9020 	str.w	r9, [sp, #32]
 8001064:	e7a7      	b.n	8000fb6 <_dtoa_r+0x266>
 8001066:	3101      	adds	r1, #1
 8001068:	6041      	str	r1, [r0, #4]
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	e7a7      	b.n	8000fbe <_dtoa_r+0x26e>
 800106e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	9b08      	ldr	r3, [sp, #32]
 8001076:	2b0e      	cmp	r3, #14
 8001078:	f200 80a8 	bhi.w	80011cc <_dtoa_r+0x47c>
 800107c:	2c00      	cmp	r4, #0
 800107e:	f000 80a5 	beq.w	80011cc <_dtoa_r+0x47c>
 8001082:	f1ba 0f00 	cmp.w	sl, #0
 8001086:	dd34      	ble.n	80010f2 <_dtoa_r+0x3a2>
 8001088:	4a9a      	ldr	r2, [pc, #616]	; (80012f4 <_dtoa_r+0x5a4>)
 800108a:	f00a 030f 	and.w	r3, sl, #15
 800108e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800109a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800109e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80010a2:	d016      	beq.n	80010d2 <_dtoa_r+0x382>
 80010a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010a8:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <_dtoa_r+0x5a8>)
 80010aa:	2703      	movs	r7, #3
 80010ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010b0:	f7ff fb20 	bl	80006f4 <__aeabi_ddiv>
 80010b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010b8:	f004 040f 	and.w	r4, r4, #15
 80010bc:	4e8e      	ldr	r6, [pc, #568]	; (80012f8 <_dtoa_r+0x5a8>)
 80010be:	b954      	cbnz	r4, 80010d6 <_dtoa_r+0x386>
 80010c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80010c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80010c8:	f7ff fb14 	bl	80006f4 <__aeabi_ddiv>
 80010cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010d0:	e029      	b.n	8001126 <_dtoa_r+0x3d6>
 80010d2:	2702      	movs	r7, #2
 80010d4:	e7f2      	b.n	80010bc <_dtoa_r+0x36c>
 80010d6:	07e1      	lsls	r1, r4, #31
 80010d8:	d508      	bpl.n	80010ec <_dtoa_r+0x39c>
 80010da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80010de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80010e2:	f7ff f9dd 	bl	80004a0 <__aeabi_dmul>
 80010e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010ea:	3701      	adds	r7, #1
 80010ec:	1064      	asrs	r4, r4, #1
 80010ee:	3608      	adds	r6, #8
 80010f0:	e7e5      	b.n	80010be <_dtoa_r+0x36e>
 80010f2:	f000 80a5 	beq.w	8001240 <_dtoa_r+0x4f0>
 80010f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010fa:	f1ca 0400 	rsb	r4, sl, #0
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <_dtoa_r+0x5a4>)
 8001100:	f004 020f 	and.w	r2, r4, #15
 8001104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f9c8 	bl	80004a0 <__aeabi_dmul>
 8001110:	2702      	movs	r7, #2
 8001112:	2300      	movs	r3, #0
 8001114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001118:	4e77      	ldr	r6, [pc, #476]	; (80012f8 <_dtoa_r+0x5a8>)
 800111a:	1124      	asrs	r4, r4, #4
 800111c:	2c00      	cmp	r4, #0
 800111e:	f040 8084 	bne.w	800122a <_dtoa_r+0x4da>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1d2      	bne.n	80010cc <_dtoa_r+0x37c>
 8001126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 808b 	beq.w	8001244 <_dtoa_r+0x4f4>
 800112e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <_dtoa_r+0x5ac>)
 800113e:	f7ff fc3b 	bl	80009b8 <__aeabi_dcmplt>
 8001142:	2800      	cmp	r0, #0
 8001144:	d07e      	beq.n	8001244 <_dtoa_r+0x4f4>
 8001146:	9b08      	ldr	r3, [sp, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d07b      	beq.n	8001244 <_dtoa_r+0x4f4>
 800114c:	f1b9 0f00 	cmp.w	r9, #0
 8001150:	dd38      	ble.n	80011c4 <_dtoa_r+0x474>
 8001152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	4b69      	ldr	r3, [pc, #420]	; (8001300 <_dtoa_r+0x5b0>)
 800115a:	f7ff f9a1 	bl	80004a0 <__aeabi_dmul>
 800115e:	464c      	mov	r4, r9
 8001160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001164:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8001168:	3701      	adds	r7, #1
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff f92e 	bl	80003cc <__aeabi_i2d>
 8001170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001174:	f7ff f994 	bl	80004a0 <__aeabi_dmul>
 8001178:	2200      	movs	r2, #0
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <_dtoa_r+0x5b4>)
 800117c:	f7fe ffda 	bl	8000134 <__adddf3>
 8001180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8001184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001188:	9611      	str	r6, [sp, #68]	; 0x44
 800118a:	2c00      	cmp	r4, #0
 800118c:	d15d      	bne.n	800124a <_dtoa_r+0x4fa>
 800118e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001192:	2200      	movs	r2, #0
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <_dtoa_r+0x5b8>)
 8001196:	f7fe ffcb 	bl	8000130 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011a2:	4633      	mov	r3, r6
 80011a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011a6:	f7ff fc25 	bl	80009f4 <__aeabi_dcmpgt>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 829c 	bne.w	80016e8 <_dtoa_r+0x998>
 80011b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80011ba:	f7ff fbfd 	bl	80009b8 <__aeabi_dcmplt>
 80011be:	2800      	cmp	r0, #0
 80011c0:	f040 8290 	bne.w	80016e4 <_dtoa_r+0x994>
 80011c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80011c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80011cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f2c0 8152 	blt.w	8001478 <_dtoa_r+0x728>
 80011d4:	f1ba 0f0e 	cmp.w	sl, #14
 80011d8:	f300 814e 	bgt.w	8001478 <_dtoa_r+0x728>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <_dtoa_r+0x5a4>)
 80011de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80011e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80011ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f280 80db 	bge.w	80013a8 <_dtoa_r+0x658>
 80011f2:	9b08      	ldr	r3, [sp, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f300 80d7 	bgt.w	80013a8 <_dtoa_r+0x658>
 80011fa:	f040 8272 	bne.w	80016e2 <_dtoa_r+0x992>
 80011fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001202:	2200      	movs	r2, #0
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <_dtoa_r+0x5b8>)
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_dmul>
 800120a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800120e:	f7ff fbe7 	bl	80009e0 <__aeabi_dcmpge>
 8001212:	9c08      	ldr	r4, [sp, #32]
 8001214:	4626      	mov	r6, r4
 8001216:	2800      	cmp	r0, #0
 8001218:	f040 8248 	bne.w	80016ac <_dtoa_r+0x95c>
 800121c:	2331      	movs	r3, #49	; 0x31
 800121e:	9f03      	ldr	r7, [sp, #12]
 8001220:	f10a 0a01 	add.w	sl, sl, #1
 8001224:	f807 3b01 	strb.w	r3, [r7], #1
 8001228:	e244      	b.n	80016b4 <_dtoa_r+0x964>
 800122a:	07e2      	lsls	r2, r4, #31
 800122c:	d505      	bpl.n	800123a <_dtoa_r+0x4ea>
 800122e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001232:	f7ff f935 	bl	80004a0 <__aeabi_dmul>
 8001236:	2301      	movs	r3, #1
 8001238:	3701      	adds	r7, #1
 800123a:	1064      	asrs	r4, r4, #1
 800123c:	3608      	adds	r6, #8
 800123e:	e76d      	b.n	800111c <_dtoa_r+0x3cc>
 8001240:	2702      	movs	r7, #2
 8001242:	e770      	b.n	8001126 <_dtoa_r+0x3d6>
 8001244:	46d0      	mov	r8, sl
 8001246:	9c08      	ldr	r4, [sp, #32]
 8001248:	e78f      	b.n	800116a <_dtoa_r+0x41a>
 800124a:	9903      	ldr	r1, [sp, #12]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <_dtoa_r+0x5a4>)
 800124e:	4421      	add	r1, r4
 8001250:	9112      	str	r1, [sp, #72]	; 0x48
 8001252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800125c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001260:	2900      	cmp	r1, #0
 8001262:	d055      	beq.n	8001310 <_dtoa_r+0x5c0>
 8001264:	2000      	movs	r0, #0
 8001266:	4929      	ldr	r1, [pc, #164]	; (800130c <_dtoa_r+0x5bc>)
 8001268:	f7ff fa44 	bl	80006f4 <__aeabi_ddiv>
 800126c:	463b      	mov	r3, r7
 800126e:	4632      	mov	r2, r6
 8001270:	f7fe ff5e 	bl	8000130 <__aeabi_dsub>
 8001274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001278:	9f03      	ldr	r7, [sp, #12]
 800127a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800127e:	f7ff fbd9 	bl	8000a34 <__aeabi_d2iz>
 8001282:	4604      	mov	r4, r0
 8001284:	f7ff f8a2 	bl	80003cc <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001290:	f7fe ff4e 	bl	8000130 <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	3430      	adds	r4, #48	; 0x30
 800129a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800129e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012a2:	f807 4b01 	strb.w	r4, [r7], #1
 80012a6:	f7ff fb87 	bl	80009b8 <__aeabi_dcmplt>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d174      	bne.n	8001398 <_dtoa_r+0x648>
 80012ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80012b2:	2000      	movs	r0, #0
 80012b4:	4911      	ldr	r1, [pc, #68]	; (80012fc <_dtoa_r+0x5ac>)
 80012b6:	f7fe ff3b 	bl	8000130 <__aeabi_dsub>
 80012ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012be:	f7ff fb7b 	bl	80009b8 <__aeabi_dcmplt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 80b7 	bne.w	8001436 <_dtoa_r+0x6e6>
 80012c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80012ca:	429f      	cmp	r7, r3
 80012cc:	f43f af7a 	beq.w	80011c4 <_dtoa_r+0x474>
 80012d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <_dtoa_r+0x5b0>)
 80012d8:	f7ff f8e2 	bl	80004a0 <__aeabi_dmul>
 80012dc:	2200      	movs	r2, #0
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <_dtoa_r+0x5b0>)
 80012e8:	f7ff f8da 	bl	80004a0 <__aeabi_dmul>
 80012ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012f0:	e7c3      	b.n	800127a <_dtoa_r+0x52a>
 80012f2:	bf00      	nop
 80012f4:	0800de48 	.word	0x0800de48
 80012f8:	0800de20 	.word	0x0800de20
 80012fc:	3ff00000 	.word	0x3ff00000
 8001300:	40240000 	.word	0x40240000
 8001304:	401c0000 	.word	0x401c0000
 8001308:	40140000 	.word	0x40140000
 800130c:	3fe00000 	.word	0x3fe00000
 8001310:	4630      	mov	r0, r6
 8001312:	4639      	mov	r1, r7
 8001314:	f7ff f8c4 	bl	80004a0 <__aeabi_dmul>
 8001318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800131a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800131e:	9c03      	ldr	r4, [sp, #12]
 8001320:	9314      	str	r3, [sp, #80]	; 0x50
 8001322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001326:	f7ff fb85 	bl	8000a34 <__aeabi_d2iz>
 800132a:	9015      	str	r0, [sp, #84]	; 0x54
 800132c:	f7ff f84e 	bl	80003cc <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001338:	f7fe fefa 	bl	8000130 <__aeabi_dsub>
 800133c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800133e:	4606      	mov	r6, r0
 8001340:	3330      	adds	r3, #48	; 0x30
 8001342:	f804 3b01 	strb.w	r3, [r4], #1
 8001346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001348:	460f      	mov	r7, r1
 800134a:	429c      	cmp	r4, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	d124      	bne.n	800139c <_dtoa_r+0x64c>
 8001352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001356:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <_dtoa_r+0x8c8>)
 8001358:	f7fe feec 	bl	8000134 <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4630      	mov	r0, r6
 8001362:	4639      	mov	r1, r7
 8001364:	f7ff fb46 	bl	80009f4 <__aeabi_dcmpgt>
 8001368:	2800      	cmp	r0, #0
 800136a:	d163      	bne.n	8001434 <_dtoa_r+0x6e4>
 800136c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001370:	2000      	movs	r0, #0
 8001372:	49a9      	ldr	r1, [pc, #676]	; (8001618 <_dtoa_r+0x8c8>)
 8001374:	f7fe fedc 	bl	8000130 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4630      	mov	r0, r6
 800137e:	4639      	mov	r1, r7
 8001380:	f7ff fb1a 	bl	80009b8 <__aeabi_dcmplt>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af1d 	beq.w	80011c4 <_dtoa_r+0x474>
 800138a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800138c:	1e7b      	subs	r3, r7, #1
 800138e:	9314      	str	r3, [sp, #80]	; 0x50
 8001390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8001394:	2b30      	cmp	r3, #48	; 0x30
 8001396:	d0f8      	beq.n	800138a <_dtoa_r+0x63a>
 8001398:	46c2      	mov	sl, r8
 800139a:	e03b      	b.n	8001414 <_dtoa_r+0x6c4>
 800139c:	4b9f      	ldr	r3, [pc, #636]	; (800161c <_dtoa_r+0x8cc>)
 800139e:	f7ff f87f 	bl	80004a0 <__aeabi_dmul>
 80013a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013a6:	e7bc      	b.n	8001322 <_dtoa_r+0x5d2>
 80013a8:	9f03      	ldr	r7, [sp, #12]
 80013aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80013ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013b2:	4640      	mov	r0, r8
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7ff f99d 	bl	80006f4 <__aeabi_ddiv>
 80013ba:	f7ff fb3b 	bl	8000a34 <__aeabi_d2iz>
 80013be:	4604      	mov	r4, r0
 80013c0:	f7ff f804 	bl	80003cc <__aeabi_i2d>
 80013c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe feac 	bl	8000130 <__aeabi_dsub>
 80013d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80013dc:	f807 6b01 	strb.w	r6, [r7], #1
 80013e0:	9e03      	ldr	r6, [sp, #12]
 80013e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80013e6:	1bbe      	subs	r6, r7, r6
 80013e8:	45b4      	cmp	ip, r6
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	d136      	bne.n	800145e <_dtoa_r+0x70e>
 80013f0:	f7fe fea0 	bl	8000134 <__adddf3>
 80013f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
 80013fc:	f7ff fafa 	bl	80009f4 <__aeabi_dcmpgt>
 8001400:	bb58      	cbnz	r0, 800145a <_dtoa_r+0x70a>
 8001402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001406:	4640      	mov	r0, r8
 8001408:	4649      	mov	r1, r9
 800140a:	f7ff facb 	bl	80009a4 <__aeabi_dcmpeq>
 800140e:	b108      	cbz	r0, 8001414 <_dtoa_r+0x6c4>
 8001410:	07e1      	lsls	r1, r4, #31
 8001412:	d422      	bmi.n	800145a <_dtoa_r+0x70a>
 8001414:	4628      	mov	r0, r5
 8001416:	4659      	mov	r1, fp
 8001418:	f008 ff3a 	bl	800a290 <_Bfree>
 800141c:	2300      	movs	r3, #0
 800141e:	703b      	strb	r3, [r7, #0]
 8001420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001422:	f10a 0001 	add.w	r0, sl, #1
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800142a:	2b00      	cmp	r3, #0
 800142c:	f43f acde 	beq.w	8000dec <_dtoa_r+0x9c>
 8001430:	601f      	str	r7, [r3, #0]
 8001432:	e4db      	b.n	8000dec <_dtoa_r+0x9c>
 8001434:	4627      	mov	r7, r4
 8001436:	463b      	mov	r3, r7
 8001438:	461f      	mov	r7, r3
 800143a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800143e:	2a39      	cmp	r2, #57	; 0x39
 8001440:	d107      	bne.n	8001452 <_dtoa_r+0x702>
 8001442:	9a03      	ldr	r2, [sp, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d1f7      	bne.n	8001438 <_dtoa_r+0x6e8>
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	9903      	ldr	r1, [sp, #12]
 800144c:	f108 0801 	add.w	r8, r8, #1
 8001450:	700a      	strb	r2, [r1, #0]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	3201      	adds	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e79e      	b.n	8001398 <_dtoa_r+0x648>
 800145a:	46d0      	mov	r8, sl
 800145c:	e7eb      	b.n	8001436 <_dtoa_r+0x6e6>
 800145e:	2200      	movs	r2, #0
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <_dtoa_r+0x8cc>)
 8001462:	f7ff f81d 	bl	80004a0 <__aeabi_dmul>
 8001466:	2200      	movs	r2, #0
 8001468:	2300      	movs	r3, #0
 800146a:	4680      	mov	r8, r0
 800146c:	4689      	mov	r9, r1
 800146e:	f7ff fa99 	bl	80009a4 <__aeabi_dcmpeq>
 8001472:	2800      	cmp	r0, #0
 8001474:	d09b      	beq.n	80013ae <_dtoa_r+0x65e>
 8001476:	e7cd      	b.n	8001414 <_dtoa_r+0x6c4>
 8001478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800147a:	2a00      	cmp	r2, #0
 800147c:	f000 80d0 	beq.w	8001620 <_dtoa_r+0x8d0>
 8001480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001482:	2a01      	cmp	r2, #1
 8001484:	f300 80ae 	bgt.w	80015e4 <_dtoa_r+0x894>
 8001488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800148a:	2a00      	cmp	r2, #0
 800148c:	f000 80a6 	beq.w	80015dc <_dtoa_r+0x88c>
 8001490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001496:	9f06      	ldr	r7, [sp, #24]
 8001498:	9a06      	ldr	r2, [sp, #24]
 800149a:	2101      	movs	r1, #1
 800149c:	441a      	add	r2, r3
 800149e:	9206      	str	r2, [sp, #24]
 80014a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014a2:	4628      	mov	r0, r5
 80014a4:	441a      	add	r2, r3
 80014a6:	9209      	str	r2, [sp, #36]	; 0x24
 80014a8:	f008 ff5a 	bl	800a360 <__i2b>
 80014ac:	4606      	mov	r6, r0
 80014ae:	2f00      	cmp	r7, #0
 80014b0:	dd0c      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd09      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b8:	42bb      	cmp	r3, r7
 80014ba:	bfa8      	it	ge
 80014bc:	463b      	movge	r3, r7
 80014be:	9a06      	ldr	r2, [sp, #24]
 80014c0:	1aff      	subs	r7, r7, r3
 80014c2:	1ad2      	subs	r2, r2, r3
 80014c4:	9206      	str	r2, [sp, #24]
 80014c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ce:	b1f3      	cbz	r3, 800150e <_dtoa_r+0x7be>
 80014d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a8 	beq.w	8001628 <_dtoa_r+0x8d8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	dd10      	ble.n	80014fe <_dtoa_r+0x7ae>
 80014dc:	4631      	mov	r1, r6
 80014de:	4622      	mov	r2, r4
 80014e0:	4628      	mov	r0, r5
 80014e2:	f008 fffb 	bl	800a4dc <__pow5mult>
 80014e6:	465a      	mov	r2, fp
 80014e8:	4601      	mov	r1, r0
 80014ea:	4606      	mov	r6, r0
 80014ec:	4628      	mov	r0, r5
 80014ee:	f008 ff4d 	bl	800a38c <__multiply>
 80014f2:	4680      	mov	r8, r0
 80014f4:	4659      	mov	r1, fp
 80014f6:	4628      	mov	r0, r5
 80014f8:	f008 feca 	bl	800a290 <_Bfree>
 80014fc:	46c3      	mov	fp, r8
 80014fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001500:	1b1a      	subs	r2, r3, r4
 8001502:	d004      	beq.n	800150e <_dtoa_r+0x7be>
 8001504:	4659      	mov	r1, fp
 8001506:	4628      	mov	r0, r5
 8001508:	f008 ffe8 	bl	800a4dc <__pow5mult>
 800150c:	4683      	mov	fp, r0
 800150e:	2101      	movs	r1, #1
 8001510:	4628      	mov	r0, r5
 8001512:	f008 ff25 	bl	800a360 <__i2b>
 8001516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001518:	4604      	mov	r4, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f340 8086 	ble.w	800162c <_dtoa_r+0x8dc>
 8001520:	461a      	mov	r2, r3
 8001522:	4601      	mov	r1, r0
 8001524:	4628      	mov	r0, r5
 8001526:	f008 ffd9 	bl	800a4dc <__pow5mult>
 800152a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800152c:	4604      	mov	r4, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	dd7f      	ble.n	8001632 <_dtoa_r+0x8e2>
 8001532:	f04f 0800 	mov.w	r8, #0
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800153c:	6918      	ldr	r0, [r3, #16]
 800153e:	f00c f89d 	bl	800d67c <__hi0bits>
 8001542:	f1c0 0020 	rsb	r0, r0, #32
 8001546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001548:	4418      	add	r0, r3
 800154a:	f010 001f 	ands.w	r0, r0, #31
 800154e:	f000 8092 	beq.w	8001676 <_dtoa_r+0x926>
 8001552:	f1c0 0320 	rsb	r3, r0, #32
 8001556:	2b04      	cmp	r3, #4
 8001558:	f340 808a 	ble.w	8001670 <_dtoa_r+0x920>
 800155c:	f1c0 001c 	rsb	r0, r0, #28
 8001560:	9b06      	ldr	r3, [sp, #24]
 8001562:	4407      	add	r7, r0
 8001564:	4403      	add	r3, r0
 8001566:	9306      	str	r3, [sp, #24]
 8001568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800156a:	4403      	add	r3, r0
 800156c:	9309      	str	r3, [sp, #36]	; 0x24
 800156e:	9b06      	ldr	r3, [sp, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd05      	ble.n	8001580 <_dtoa_r+0x830>
 8001574:	4659      	mov	r1, fp
 8001576:	461a      	mov	r2, r3
 8001578:	4628      	mov	r0, r5
 800157a:	f009 f809 	bl	800a590 <__lshift>
 800157e:	4683      	mov	fp, r0
 8001580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	dd05      	ble.n	8001592 <_dtoa_r+0x842>
 8001586:	4621      	mov	r1, r4
 8001588:	461a      	mov	r2, r3
 800158a:	4628      	mov	r0, r5
 800158c:	f009 f800 	bl	800a590 <__lshift>
 8001590:	4604      	mov	r4, r0
 8001592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d070      	beq.n	800167a <_dtoa_r+0x92a>
 8001598:	4621      	mov	r1, r4
 800159a:	4658      	mov	r0, fp
 800159c:	f00c f8bb 	bl	800d716 <__mcmp>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	da6a      	bge.n	800167a <_dtoa_r+0x92a>
 80015a4:	2300      	movs	r3, #0
 80015a6:	4659      	mov	r1, fp
 80015a8:	220a      	movs	r2, #10
 80015aa:	4628      	mov	r0, r5
 80015ac:	f008 fe92 	bl	800a2d4 <__multadd>
 80015b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015b2:	4683      	mov	fp, r0
 80015b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8194 	beq.w	80018e6 <_dtoa_r+0xb96>
 80015be:	4631      	mov	r1, r6
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	4628      	mov	r0, r5
 80015c6:	f008 fe85 	bl	800a2d4 <__multadd>
 80015ca:	f1b9 0f00 	cmp.w	r9, #0
 80015ce:	4606      	mov	r6, r0
 80015d0:	f300 8093 	bgt.w	80016fa <_dtoa_r+0x9aa>
 80015d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	dc57      	bgt.n	800168a <_dtoa_r+0x93a>
 80015da:	e08e      	b.n	80016fa <_dtoa_r+0x9aa>
 80015dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80015de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80015e2:	e757      	b.n	8001494 <_dtoa_r+0x744>
 80015e4:	9b08      	ldr	r3, [sp, #32]
 80015e6:	1e5c      	subs	r4, r3, #1
 80015e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	bfb7      	itett	lt
 80015ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80015f0:	1b1c      	subge	r4, r3, r4
 80015f2:	1ae2      	sublt	r2, r4, r3
 80015f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80015f6:	bfbe      	ittt	lt
 80015f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80015fa:	189b      	addlt	r3, r3, r2
 80015fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80015fe:	9b08      	ldr	r3, [sp, #32]
 8001600:	bfb8      	it	lt
 8001602:	2400      	movlt	r4, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bfbb      	ittet	lt
 8001608:	9b06      	ldrlt	r3, [sp, #24]
 800160a:	9a08      	ldrlt	r2, [sp, #32]
 800160c:	9f06      	ldrge	r7, [sp, #24]
 800160e:	1a9f      	sublt	r7, r3, r2
 8001610:	bfac      	ite	ge
 8001612:	9b08      	ldrge	r3, [sp, #32]
 8001614:	2300      	movlt	r3, #0
 8001616:	e73f      	b.n	8001498 <_dtoa_r+0x748>
 8001618:	3fe00000 	.word	0x3fe00000
 800161c:	40240000 	.word	0x40240000
 8001620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001622:	9f06      	ldr	r7, [sp, #24]
 8001624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001626:	e742      	b.n	80014ae <_dtoa_r+0x75e>
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	e76b      	b.n	8001504 <_dtoa_r+0x7b4>
 800162c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800162e:	2b01      	cmp	r3, #1
 8001630:	dc19      	bgt.n	8001666 <_dtoa_r+0x916>
 8001632:	9b04      	ldr	r3, [sp, #16]
 8001634:	b9bb      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 8001636:	9b05      	ldr	r3, [sp, #20]
 8001638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800163c:	b99b      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 800163e:	9b05      	ldr	r3, [sp, #20]
 8001640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001644:	0d1b      	lsrs	r3, r3, #20
 8001646:	051b      	lsls	r3, r3, #20
 8001648:	b183      	cbz	r3, 800166c <_dtoa_r+0x91c>
 800164a:	f04f 0801 	mov.w	r8, #1
 800164e:	9b06      	ldr	r3, [sp, #24]
 8001650:	3301      	adds	r3, #1
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
 800165a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af6a 	bne.w	8001536 <_dtoa_r+0x7e6>
 8001662:	2001      	movs	r0, #1
 8001664:	e76f      	b.n	8001546 <_dtoa_r+0x7f6>
 8001666:	f04f 0800 	mov.w	r8, #0
 800166a:	e7f6      	b.n	800165a <_dtoa_r+0x90a>
 800166c:	4698      	mov	r8, r3
 800166e:	e7f4      	b.n	800165a <_dtoa_r+0x90a>
 8001670:	f43f af7d 	beq.w	800156e <_dtoa_r+0x81e>
 8001674:	4618      	mov	r0, r3
 8001676:	301c      	adds	r0, #28
 8001678:	e772      	b.n	8001560 <_dtoa_r+0x810>
 800167a:	9b08      	ldr	r3, [sp, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc36      	bgt.n	80016ee <_dtoa_r+0x99e>
 8001680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001682:	2b02      	cmp	r3, #2
 8001684:	dd33      	ble.n	80016ee <_dtoa_r+0x99e>
 8001686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800168a:	f1b9 0f00 	cmp.w	r9, #0
 800168e:	d10d      	bne.n	80016ac <_dtoa_r+0x95c>
 8001690:	4621      	mov	r1, r4
 8001692:	464b      	mov	r3, r9
 8001694:	2205      	movs	r2, #5
 8001696:	4628      	mov	r0, r5
 8001698:	f008 fe1c 	bl	800a2d4 <__multadd>
 800169c:	4601      	mov	r1, r0
 800169e:	4604      	mov	r4, r0
 80016a0:	4658      	mov	r0, fp
 80016a2:	f00c f838 	bl	800d716 <__mcmp>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	f73f adb8 	bgt.w	800121c <_dtoa_r+0x4cc>
 80016ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80016ae:	9f03      	ldr	r7, [sp, #12]
 80016b0:	ea6f 0a03 	mvn.w	sl, r3
 80016b4:	f04f 0800 	mov.w	r8, #0
 80016b8:	4621      	mov	r1, r4
 80016ba:	4628      	mov	r0, r5
 80016bc:	f008 fde8 	bl	800a290 <_Bfree>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	f43f aea7 	beq.w	8001414 <_dtoa_r+0x6c4>
 80016c6:	f1b8 0f00 	cmp.w	r8, #0
 80016ca:	d005      	beq.n	80016d8 <_dtoa_r+0x988>
 80016cc:	45b0      	cmp	r8, r6
 80016ce:	d003      	beq.n	80016d8 <_dtoa_r+0x988>
 80016d0:	4641      	mov	r1, r8
 80016d2:	4628      	mov	r0, r5
 80016d4:	f008 fddc 	bl	800a290 <_Bfree>
 80016d8:	4631      	mov	r1, r6
 80016da:	4628      	mov	r0, r5
 80016dc:	f008 fdd8 	bl	800a290 <_Bfree>
 80016e0:	e698      	b.n	8001414 <_dtoa_r+0x6c4>
 80016e2:	2400      	movs	r4, #0
 80016e4:	4626      	mov	r6, r4
 80016e6:	e7e1      	b.n	80016ac <_dtoa_r+0x95c>
 80016e8:	46c2      	mov	sl, r8
 80016ea:	4626      	mov	r6, r4
 80016ec:	e596      	b.n	800121c <_dtoa_r+0x4cc>
 80016ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80fd 	beq.w	80018f4 <_dtoa_r+0xba4>
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	dd05      	ble.n	800170a <_dtoa_r+0x9ba>
 80016fe:	4631      	mov	r1, r6
 8001700:	463a      	mov	r2, r7
 8001702:	4628      	mov	r0, r5
 8001704:	f008 ff44 	bl	800a590 <__lshift>
 8001708:	4606      	mov	r6, r0
 800170a:	f1b8 0f00 	cmp.w	r8, #0
 800170e:	d05c      	beq.n	80017ca <_dtoa_r+0xa7a>
 8001710:	4628      	mov	r0, r5
 8001712:	6871      	ldr	r1, [r6, #4]
 8001714:	f008 fd7c 	bl	800a210 <_Balloc>
 8001718:	4607      	mov	r7, r0
 800171a:	b928      	cbnz	r0, 8001728 <_dtoa_r+0x9d8>
 800171c:	4602      	mov	r2, r0
 800171e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <_dtoa_r+0xbd0>)
 8001724:	f7ff bb28 	b.w	8000d78 <_dtoa_r+0x28>
 8001728:	6932      	ldr	r2, [r6, #16]
 800172a:	f106 010c 	add.w	r1, r6, #12
 800172e:	3202      	adds	r2, #2
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	300c      	adds	r0, #12
 8001734:	f00b fdc7 	bl	800d2c6 <memcpy>
 8001738:	2201      	movs	r2, #1
 800173a:	4639      	mov	r1, r7
 800173c:	4628      	mov	r0, r5
 800173e:	f008 ff27 	bl	800a590 <__lshift>
 8001742:	46b0      	mov	r8, r6
 8001744:	4606      	mov	r6, r0
 8001746:	9b03      	ldr	r3, [sp, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	9308      	str	r3, [sp, #32]
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	444b      	add	r3, r9
 8001750:	930a      	str	r3, [sp, #40]	; 0x28
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	9b08      	ldr	r3, [sp, #32]
 800175c:	4621      	mov	r1, r4
 800175e:	3b01      	subs	r3, #1
 8001760:	4658      	mov	r0, fp
 8001762:	9304      	str	r3, [sp, #16]
 8001764:	f00b fef0 	bl	800d548 <quorem>
 8001768:	4603      	mov	r3, r0
 800176a:	4641      	mov	r1, r8
 800176c:	3330      	adds	r3, #48	; 0x30
 800176e:	9006      	str	r0, [sp, #24]
 8001770:	4658      	mov	r0, fp
 8001772:	930b      	str	r3, [sp, #44]	; 0x2c
 8001774:	f00b ffcf 	bl	800d716 <__mcmp>
 8001778:	4632      	mov	r2, r6
 800177a:	4681      	mov	r9, r0
 800177c:	4621      	mov	r1, r4
 800177e:	4628      	mov	r0, r5
 8001780:	f008 ff76 	bl	800a670 <__mdiff>
 8001784:	68c2      	ldr	r2, [r0, #12]
 8001786:	4607      	mov	r7, r0
 8001788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800178a:	bb02      	cbnz	r2, 80017ce <_dtoa_r+0xa7e>
 800178c:	4601      	mov	r1, r0
 800178e:	4658      	mov	r0, fp
 8001790:	f00b ffc1 	bl	800d716 <__mcmp>
 8001794:	4602      	mov	r2, r0
 8001796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001798:	4639      	mov	r1, r7
 800179a:	4628      	mov	r0, r5
 800179c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80017a0:	f008 fd76 	bl	800a290 <_Bfree>
 80017a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80017a8:	9f08      	ldr	r7, [sp, #32]
 80017aa:	ea43 0102 	orr.w	r1, r3, r2
 80017ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017b4:	d10d      	bne.n	80017d2 <_dtoa_r+0xa82>
 80017b6:	2b39      	cmp	r3, #57	; 0x39
 80017b8:	d029      	beq.n	800180e <_dtoa_r+0xabe>
 80017ba:	f1b9 0f00 	cmp.w	r9, #0
 80017be:	dd01      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017c0:	9b06      	ldr	r3, [sp, #24]
 80017c2:	3331      	adds	r3, #49	; 0x31
 80017c4:	9a04      	ldr	r2, [sp, #16]
 80017c6:	7013      	strb	r3, [r2, #0]
 80017c8:	e776      	b.n	80016b8 <_dtoa_r+0x968>
 80017ca:	4630      	mov	r0, r6
 80017cc:	e7b9      	b.n	8001742 <_dtoa_r+0x9f2>
 80017ce:	2201      	movs	r2, #1
 80017d0:	e7e2      	b.n	8001798 <_dtoa_r+0xa48>
 80017d2:	f1b9 0f00 	cmp.w	r9, #0
 80017d6:	db06      	blt.n	80017e6 <_dtoa_r+0xa96>
 80017d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80017da:	ea41 0909 	orr.w	r9, r1, r9
 80017de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80017e0:	ea59 0101 	orrs.w	r1, r9, r1
 80017e4:	d120      	bne.n	8001828 <_dtoa_r+0xad8>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	ddec      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017ea:	4659      	mov	r1, fp
 80017ec:	2201      	movs	r2, #1
 80017ee:	4628      	mov	r0, r5
 80017f0:	9308      	str	r3, [sp, #32]
 80017f2:	f008 fecd 	bl	800a590 <__lshift>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4683      	mov	fp, r0
 80017fa:	f00b ff8c 	bl	800d716 <__mcmp>
 80017fe:	2800      	cmp	r0, #0
 8001800:	9b08      	ldr	r3, [sp, #32]
 8001802:	dc02      	bgt.n	800180a <_dtoa_r+0xaba>
 8001804:	d1de      	bne.n	80017c4 <_dtoa_r+0xa74>
 8001806:	07da      	lsls	r2, r3, #31
 8001808:	d5dc      	bpl.n	80017c4 <_dtoa_r+0xa74>
 800180a:	2b39      	cmp	r3, #57	; 0x39
 800180c:	d1d8      	bne.n	80017c0 <_dtoa_r+0xa70>
 800180e:	2339      	movs	r3, #57	; 0x39
 8001810:	9a04      	ldr	r2, [sp, #16]
 8001812:	7013      	strb	r3, [r2, #0]
 8001814:	463b      	mov	r3, r7
 8001816:	461f      	mov	r7, r3
 8001818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800181c:	3b01      	subs	r3, #1
 800181e:	2a39      	cmp	r2, #57	; 0x39
 8001820:	d050      	beq.n	80018c4 <_dtoa_r+0xb74>
 8001822:	3201      	adds	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e747      	b.n	80016b8 <_dtoa_r+0x968>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dd03      	ble.n	8001834 <_dtoa_r+0xae4>
 800182c:	2b39      	cmp	r3, #57	; 0x39
 800182e:	d0ee      	beq.n	800180e <_dtoa_r+0xabe>
 8001830:	3301      	adds	r3, #1
 8001832:	e7c7      	b.n	80017c4 <_dtoa_r+0xa74>
 8001834:	9a08      	ldr	r2, [sp, #32]
 8001836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800183c:	428a      	cmp	r2, r1
 800183e:	d02a      	beq.n	8001896 <_dtoa_r+0xb46>
 8001840:	4659      	mov	r1, fp
 8001842:	2300      	movs	r3, #0
 8001844:	220a      	movs	r2, #10
 8001846:	4628      	mov	r0, r5
 8001848:	f008 fd44 	bl	800a2d4 <__multadd>
 800184c:	45b0      	cmp	r8, r6
 800184e:	4683      	mov	fp, r0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f04f 020a 	mov.w	r2, #10
 8001858:	4641      	mov	r1, r8
 800185a:	4628      	mov	r0, r5
 800185c:	d107      	bne.n	800186e <_dtoa_r+0xb1e>
 800185e:	f008 fd39 	bl	800a2d4 <__multadd>
 8001862:	4680      	mov	r8, r0
 8001864:	4606      	mov	r6, r0
 8001866:	9b08      	ldr	r3, [sp, #32]
 8001868:	3301      	adds	r3, #1
 800186a:	9308      	str	r3, [sp, #32]
 800186c:	e775      	b.n	800175a <_dtoa_r+0xa0a>
 800186e:	f008 fd31 	bl	800a2d4 <__multadd>
 8001872:	4631      	mov	r1, r6
 8001874:	4680      	mov	r8, r0
 8001876:	2300      	movs	r3, #0
 8001878:	220a      	movs	r2, #10
 800187a:	4628      	mov	r0, r5
 800187c:	f008 fd2a 	bl	800a2d4 <__multadd>
 8001880:	4606      	mov	r6, r0
 8001882:	e7f0      	b.n	8001866 <_dtoa_r+0xb16>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	bfcc      	ite	gt
 800188a:	464f      	movgt	r7, r9
 800188c:	2701      	movle	r7, #1
 800188e:	f04f 0800 	mov.w	r8, #0
 8001892:	9a03      	ldr	r2, [sp, #12]
 8001894:	4417      	add	r7, r2
 8001896:	4659      	mov	r1, fp
 8001898:	2201      	movs	r2, #1
 800189a:	4628      	mov	r0, r5
 800189c:	9308      	str	r3, [sp, #32]
 800189e:	f008 fe77 	bl	800a590 <__lshift>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4683      	mov	fp, r0
 80018a6:	f00b ff36 	bl	800d716 <__mcmp>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	dcb2      	bgt.n	8001814 <_dtoa_r+0xac4>
 80018ae:	d102      	bne.n	80018b6 <_dtoa_r+0xb66>
 80018b0:	9b08      	ldr	r3, [sp, #32]
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d4ae      	bmi.n	8001814 <_dtoa_r+0xac4>
 80018b6:	463b      	mov	r3, r7
 80018b8:	461f      	mov	r7, r3
 80018ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80018be:	2a30      	cmp	r2, #48	; 0x30
 80018c0:	d0fa      	beq.n	80018b8 <_dtoa_r+0xb68>
 80018c2:	e6f9      	b.n	80016b8 <_dtoa_r+0x968>
 80018c4:	9a03      	ldr	r2, [sp, #12]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d1a5      	bne.n	8001816 <_dtoa_r+0xac6>
 80018ca:	2331      	movs	r3, #49	; 0x31
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	e779      	b.n	80017c6 <_dtoa_r+0xa76>
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <_dtoa_r+0xbd4>)
 80018d4:	f7ff baa8 	b.w	8000e28 <_dtoa_r+0xd8>
 80018d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f aa81 	bne.w	8000de2 <_dtoa_r+0x92>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_dtoa_r+0xbd8>)
 80018e2:	f7ff baa1 	b.w	8000e28 <_dtoa_r+0xd8>
 80018e6:	f1b9 0f00 	cmp.w	r9, #0
 80018ea:	dc03      	bgt.n	80018f4 <_dtoa_r+0xba4>
 80018ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	f73f aecb 	bgt.w	800168a <_dtoa_r+0x93a>
 80018f4:	9f03      	ldr	r7, [sp, #12]
 80018f6:	4621      	mov	r1, r4
 80018f8:	4658      	mov	r0, fp
 80018fa:	f00b fe25 	bl	800d548 <quorem>
 80018fe:	9a03      	ldr	r2, [sp, #12]
 8001900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001904:	f807 3b01 	strb.w	r3, [r7], #1
 8001908:	1aba      	subs	r2, r7, r2
 800190a:	4591      	cmp	r9, r2
 800190c:	ddba      	ble.n	8001884 <_dtoa_r+0xb34>
 800190e:	4659      	mov	r1, fp
 8001910:	2300      	movs	r3, #0
 8001912:	220a      	movs	r2, #10
 8001914:	4628      	mov	r0, r5
 8001916:	f008 fcdd 	bl	800a2d4 <__multadd>
 800191a:	4683      	mov	fp, r0
 800191c:	e7eb      	b.n	80018f6 <_dtoa_r+0xba6>
 800191e:	bf00      	nop
 8001920:	0800f167 	.word	0x0800f167
 8001924:	0800f0c5 	.word	0x0800f0c5
 8001928:	0800f0e9 	.word	0x0800f0e9

0800192c <read_write_message>:
    output |= bit;
    return output;
}


void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	4607      	mov	r7, r0
 8001932:	460e      	mov	r6, r1
 8001934:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001936:	2400      	movs	r4, #0
 8001938:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800193c:	e008      	b.n	8001950 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800193e:	b1dd      	cbz	r5, 8001978 <read_write_message+0x4c>
 8001940:	f10d 0307 	add.w	r3, sp, #7
 8001944:	2202      	movs	r2, #2
 8001946:	7831      	ldrb	r1, [r6, #0]
 8001948:	4638      	mov	r0, r7
 800194a:	f009 fbda 	bl	800b102 <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800194e:	3401      	adds	r4, #1
 8001950:	2c05      	cmp	r4, #5
 8001952:	dc6e      	bgt.n	8001a32 <read_write_message+0x106>
        switch (cur_field) {
 8001954:	2c05      	cmp	r4, #5
 8001956:	d8fa      	bhi.n	800194e <read_write_message+0x22>
 8001958:	a301      	add	r3, pc, #4	; (adr r3, 8001960 <read_write_message+0x34>)
 800195a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800193f 	.word	0x0800193f
 8001964:	08001989 	.word	0x08001989
 8001968:	080019ab 	.word	0x080019ab
 800196c:	080019cd 	.word	0x080019cd
 8001970:	080019ef 	.word	0x080019ef
 8001974:	08001a11 	.word	0x08001a11
                extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001978:	f10d 0307 	add.w	r3, sp, #7
 800197c:	2202      	movs	r2, #2
 800197e:	4631      	mov	r1, r6
 8001980:	4638      	mov	r0, r7
 8001982:	f009 fbdf 	bl	800b144 <extract_msg_bit_field>
 8001986:	e7e2      	b.n	800194e <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001988:	b13d      	cbz	r5, 800199a <read_write_message+0x6e>
 800198a:	f10d 0307 	add.w	r3, sp, #7
 800198e:	2203      	movs	r2, #3
 8001990:	7871      	ldrb	r1, [r6, #1]
 8001992:	4638      	mov	r0, r7
 8001994:	f009 fbb5 	bl	800b102 <fill_msg_bit_field>
 8001998:	e7d9      	b.n	800194e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 800199a:	f10d 0307 	add.w	r3, sp, #7
 800199e:	2203      	movs	r2, #3
 80019a0:	1c71      	adds	r1, r6, #1
 80019a2:	4638      	mov	r0, r7
 80019a4:	f009 fbce 	bl	800b144 <extract_msg_bit_field>
 80019a8:	e7d1      	b.n	800194e <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 80019aa:	b13d      	cbz	r5, 80019bc <read_write_message+0x90>
 80019ac:	f10d 0307 	add.w	r3, sp, #7
 80019b0:	2204      	movs	r2, #4
 80019b2:	78b1      	ldrb	r1, [r6, #2]
 80019b4:	4638      	mov	r0, r7
 80019b6:	f009 fba4 	bl	800b102 <fill_msg_bit_field>
 80019ba:	e7c8      	b.n	800194e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 80019bc:	f10d 0307 	add.w	r3, sp, #7
 80019c0:	2204      	movs	r2, #4
 80019c2:	1cb1      	adds	r1, r6, #2
 80019c4:	4638      	mov	r0, r7
 80019c6:	f009 fbbd 	bl	800b144 <extract_msg_bit_field>
 80019ca:	e7c0      	b.n	800194e <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 80019cc:	b13d      	cbz	r5, 80019de <read_write_message+0xb2>
 80019ce:	f10d 0307 	add.w	r3, sp, #7
 80019d2:	2201      	movs	r2, #1
 80019d4:	78f1      	ldrb	r1, [r6, #3]
 80019d6:	4638      	mov	r0, r7
 80019d8:	f009 fb93 	bl	800b102 <fill_msg_bit_field>
 80019dc:	e7b7      	b.n	800194e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 80019de:	f10d 0307 	add.w	r3, sp, #7
 80019e2:	2201      	movs	r2, #1
 80019e4:	1cf1      	adds	r1, r6, #3
 80019e6:	4638      	mov	r0, r7
 80019e8:	f009 fbac 	bl	800b144 <extract_msg_bit_field>
 80019ec:	e7af      	b.n	800194e <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 80019ee:	b13d      	cbz	r5, 8001a00 <read_write_message+0xd4>
 80019f0:	f10d 0307 	add.w	r3, sp, #7
 80019f4:	2201      	movs	r2, #1
 80019f6:	7931      	ldrb	r1, [r6, #4]
 80019f8:	4638      	mov	r0, r7
 80019fa:	f009 fb82 	bl	800b102 <fill_msg_bit_field>
 80019fe:	e7a6      	b.n	800194e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001a00:	f10d 0307 	add.w	r3, sp, #7
 8001a04:	2201      	movs	r2, #1
 8001a06:	1d31      	adds	r1, r6, #4
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f009 fb9b 	bl	800b144 <extract_msg_bit_field>
 8001a0e:	e79e      	b.n	800194e <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001a10:	b13d      	cbz	r5, 8001a22 <read_write_message+0xf6>
 8001a12:	f10d 0307 	add.w	r3, sp, #7
 8001a16:	2208      	movs	r2, #8
 8001a18:	7971      	ldrb	r1, [r6, #5]
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f009 fb71 	bl	800b102 <fill_msg_bit_field>
 8001a20:	e795      	b.n	800194e <read_write_message+0x22>
                extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001a22:	f10d 0307 	add.w	r3, sp, #7
 8001a26:	2208      	movs	r2, #8
 8001a28:	1d71      	adds	r1, r6, #5
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f009 fb8a 	bl	800b144 <extract_msg_bit_field>
 8001a30:	e78d      	b.n	800194e <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 8001a32:	b003      	add	sp, #12
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	bf00      	nop

08001a38 <send_msg>:
    k_sleep(K_MSEC(DELAY_TIME_MSEC));
    k_timer_start(&signalman_periodic_timer, K_MSEC(DURATION_TIME_MSEC),K_MSEC(PERIOD_TIME_MSEC));
}

static void send_msg(void)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	b082      	sub	sp, #8
    volatile int rc = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
    uint32_t new_msg = 0;
 8001a40:	9300      	str	r3, [sp, #0]
    struct k_msgq* cur_queue = NULL;
//    LOG_DBG("Check queues");

    if ( signalman_msgq_tx_msg_prio.used_msgs ) {
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <send_msg+0xd0>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	b923      	cbnz	r3, 8001a52 <send_msg+0x1a>
//        LOG_DBG("Get message from priority queue");
        k_msgq_get(&signalman_msgq_tx_msg_prio, &signalman_tx_msg, K_NO_WAIT);
        cur_queue = &signalman_msgq_tx_msg_prio;
    }
    else if ( signalman_msgq_tx_msg.used_msgs ) {
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <send_msg+0xd4>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b97b      	cbnz	r3, 8001a6e <send_msg+0x36>
    }
    else {
        return;
    }
//    LOG_DBG("Message sending");
}
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001a52:	4e2d      	ldr	r6, [pc, #180]	; (8001b08 <send_msg+0xd0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	2300      	movs	r3, #0
 8001a58:	492d      	ldr	r1, [pc, #180]	; (8001b10 <send_msg+0xd8>)
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f006 fbaa 	bl	80081b4 <z_impl_k_msgq_get>
    read_write_message(&new_msg, &signalman_tx_msg, true);
 8001a60:	2201      	movs	r2, #1
 8001a62:	492b      	ldr	r1, [pc, #172]	; (8001b10 <send_msg+0xd8>)
 8001a64:	4668      	mov	r0, sp
 8001a66:	f7ff ff61 	bl	800192c <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	e015      	b.n	8001a9a <send_msg+0x62>
 8001a6e:	4e27      	ldr	r6, [pc, #156]	; (8001b0c <send_msg+0xd4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	2300      	movs	r3, #0
 8001a74:	4926      	ldr	r1, [pc, #152]	; (8001b10 <send_msg+0xd8>)
 8001a76:	4630      	mov	r0, r6
 8001a78:	f006 fb9c 	bl	80081b4 <z_impl_k_msgq_get>
        cur_queue = &signalman_msgq_tx_msg;
 8001a7c:	e7f0      	b.n	8001a60 <send_msg+0x28>
        signalman_tx_buf[i] = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 8001a7e:	00e3      	lsls	r3, r4, #3
 8001a80:	20ff      	movs	r0, #255	; 0xff
 8001a82:	4098      	lsls	r0, r3
 8001a84:	9a00      	ldr	r2, [sp, #0]
 8001a86:	4010      	ands	r0, r2
 8001a88:	40d8      	lsrs	r0, r3
 8001a8a:	b2c0      	uxtb	r0, r0
 8001a8c:	4d21      	ldr	r5, [pc, #132]	; (8001b14 <send_msg+0xdc>)
 8001a8e:	5528      	strb	r0, [r5, r4]
        signalman_tx_buf[i] = reverse(signalman_tx_buf[i]);
 8001a90:	f009 fb7c 	bl	800b18c <reverse>
 8001a94:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001a96:	3401      	adds	r4, #1
 8001a98:	b2e4      	uxtb	r4, r4
 8001a9a:	2c02      	cmp	r4, #2
 8001a9c:	d9ef      	bls.n	8001a7e <send_msg+0x46>
    if (!signalman_lora_cfg.tx) {
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <send_msg+0xe0>)
 8001aa0:	7adb      	ldrb	r3, [r3, #11]
 8001aa2:	b95b      	cbnz	r3, 8001abc <send_msg+0x84>
        signalman_lora_cfg.tx = true;
 8001aa4:	491c      	ldr	r1, [pc, #112]	; (8001b18 <send_msg+0xe0>)
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(signalman_lora_dev_ptr, &signalman_lora_cfg);
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <send_msg+0xe4>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001aae:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4798      	blx	r3
 8001ab4:	9001      	str	r0, [sp, #4]
        if (rc < 0) {
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0c      	blt.n	8001ad6 <send_msg+0x9e>
    if ( signalman_current_state.state == TRANSMIT ) {
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <send_msg+0xe8>)
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1c4      	bne.n	8001a4e <send_msg+0x16>
        rc = lora_send(signalman_lora_dev_ptr, signalman_tx_buf, MESSAGE_LEN_IN_BYTES);
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <send_msg+0xe4>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001ac8:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2203      	movs	r2, #3
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <send_msg+0xdc>)
 8001ad0:	4798      	blx	r3
 8001ad2:	9001      	str	r0, [sp, #4]
 8001ad4:	e7bb      	b.n	8001a4e <send_msg+0x16>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <send_msg+0xec>)
 8001ad8:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <send_msg+0xf0>)
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	08db      	lsrs	r3, r3, #3
            LOG_DBG("Modem not configure!!!");
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	f361 0202 	bfi	r2, r1, #0, #3
 8001ae8:	f36f 02c5 	bfc	r2, #3, #3
 8001aec:	f363 128f 	bfi	r2, r3, #6, #10
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <send_msg+0xf4>)
 8001af2:	480f      	ldr	r0, [pc, #60]	; (8001b30 <send_msg+0xf8>)
 8001af4:	f001 fcb2 	bl	800345c <log_1>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2300      	movs	r3, #0
 8001afc:	4904      	ldr	r1, [pc, #16]	; (8001b10 <send_msg+0xd8>)
 8001afe:	4630      	mov	r0, r6
 8001b00:	f006 fafc 	bl	80080fc <z_impl_k_msgq_put>
            return;
 8001b04:	e7a3      	b.n	8001a4e <send_msg+0x16>
 8001b06:	bf00      	nop
 8001b08:	20000468 	.word	0x20000468
 8001b0c:	20000434 	.word	0x20000434
 8001b10:	20000918 	.word	0x20000918
 8001b14:	20000914 	.word	0x20000914
 8001b18:	200008f0 	.word	0x200008f0
 8001b1c:	200008fc 	.word	0x200008fc
 8001b20:	200008e8 	.word	0x200008e8
 8001b24:	0800dd50 	.word	0x0800dd50
 8001b28:	0800dd28 	.word	0x0800dd28
 8001b2c:	0800e17c 	.word	0x0800e17c
 8001b30:	0800df30 	.word	0x0800df30

08001b34 <signalman_button_alarm_pressed_cb>:
    }
}


void signalman_button_alarm_pressed_cb(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
 8001b34:	b508      	push	{r3, lr}
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <signalman_button_alarm_pressed_cb+0x34>)
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <signalman_button_alarm_pressed_cb+0x38>)
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	08db      	lsrs	r3, r3, #3
    LOG_DBG("Button alarm pressed");
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	2104      	movs	r1, #4
 8001b44:	f361 0202 	bfi	r2, r1, #0, #3
 8001b48:	f36f 02c5 	bfc	r2, #3, #3
 8001b4c:	f363 128f 	bfi	r2, r3, #6, #10
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <signalman_button_alarm_pressed_cb+0x3c>)
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <signalman_button_alarm_pressed_cb+0x40>)
 8001b54:	f001 fc82 	bl	800345c <log_1>
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4906      	ldr	r1, [pc, #24]	; (8001b78 <signalman_button_alarm_pressed_cb+0x44>)
 8001b5e:	4807      	ldr	r0, [pc, #28]	; (8001b7c <signalman_button_alarm_pressed_cb+0x48>)
 8001b60:	f006 facc 	bl	80080fc <z_impl_k_msgq_put>
    k_msgq_put(&signalman_msgq_tx_msg, &alarm_msg, K_NO_WAIT);
}
 8001b64:	bd08      	pop	{r3, pc}
 8001b66:	bf00      	nop
 8001b68:	0800dd50 	.word	0x0800dd50
 8001b6c:	0800dd28 	.word	0x0800dd28
 8001b70:	0800e14c 	.word	0x0800e14c
 8001b74:	0800df4c 	.word	0x0800df4c
 8001b78:	200008d0 	.word	0x200008d0
 8001b7c:	20000434 	.word	0x20000434

08001b80 <recv_msg>:
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	b088      	sub	sp, #32
    volatile int rc = -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b88:	9307      	str	r3, [sp, #28]
    volatile uint32_t ticks = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9306      	str	r3, [sp, #24]
    int16_t rssi = 0;
 8001b8e:	f8ad 3016 	strh.w	r3, [sp, #22]
    int8_t snr = 0;
 8001b92:	f88d 3015 	strb.w	r3, [sp, #21]
    if (signalman_lora_cfg.tx) {
 8001b96:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <recv_msg+0x148>)
 8001b98:	7adb      	ldrb	r3, [r3, #11]
 8001b9a:	b15b      	cbz	r3, 8001bb4 <recv_msg+0x34>
        signalman_lora_cfg.tx = false;
 8001b9c:	494a      	ldr	r1, [pc, #296]	; (8001cc8 <recv_msg+0x148>)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(signalman_lora_dev_ptr, &signalman_lora_cfg);
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <recv_msg+0x14c>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001ba6:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4798      	blx	r3
 8001bac:	9007      	str	r0, [sp, #28]
        if (rc < 0) {
 8001bae:	9b07      	ldr	r3, [sp, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db4a      	blt.n	8001c4a <recv_msg+0xca>
__syscall k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
				       const struct k_timer *timer)
{
	return z_timeout_remaining(&timer->timeout);
 8001bb4:	4846      	ldr	r0, [pc, #280]	; (8001cd0 <recv_msg+0x150>)
 8001bb6:	f00b fa8b 	bl	800d0d0 <z_timeout_remaining>
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <recv_msg+0x154>)
 8001bbc:	fba3 3000 	umull	r3, r0, r3, r0
 8001bc0:	08c0      	lsrs	r0, r0, #3
    ticks = k_ticks_to_ms_floor32(k_timer_remaining_ticks(&signalman_periodic_timer));
 8001bc2:	9006      	str	r0, [sp, #24]
    if ( signalman_current_state.state == RECEIVE ) {
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <recv_msg+0x158>)
 8001bc6:	791b      	ldrb	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d13e      	bne.n	8001c4a <recv_msg+0xca>
        rc = lora_recv(signalman_lora_dev_ptr, signalman_rx_buf, MESSAGE_LEN_IN_BYTES, K_MSEC(ticks), &rssi, &snr);
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <recv_msg+0x14c>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	9b06      	ldr	r3, [sp, #24]
 8001bd2:	b113      	cbz	r3, 8001bda <recv_msg+0x5a>
 8001bd4:	9906      	ldr	r1, [sp, #24]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	e001      	b.n	8001bde <recv_msg+0x5e>
 8001bda:	2100      	movs	r1, #0
 8001bdc:	460a      	mov	r2, r1
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001bde:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001be2:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8001be6:	008b      	lsls	r3, r1, #2
 8001be8:	185b      	adds	r3, r3, r1
 8001bea:	eb42 020c 	adc.w	r2, r2, ip
 8001bee:	18db      	adds	r3, r3, r3
 8001bf0:	4152      	adcs	r2, r2
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001bf2:	6881      	ldr	r1, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001bf4:	68cc      	ldr	r4, [r1, #12]
 8001bf6:	f10d 0115 	add.w	r1, sp, #21
 8001bfa:	9103      	str	r1, [sp, #12]
 8001bfc:	f10d 0116 	add.w	r1, sp, #22
 8001c00:	9102      	str	r1, [sp, #8]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	9201      	str	r2, [sp, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	4934      	ldr	r1, [pc, #208]	; (8001cdc <recv_msg+0x15c>)
 8001c0a:	47a0      	blx	r4
 8001c0c:	9007      	str	r0, [sp, #28]
    if (rc > 0) {
 8001c0e:	9b07      	ldr	r3, [sp, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dd1a      	ble.n	8001c4a <recv_msg+0xca>
        if (IS_SYNC_MSG) {
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <recv_msg+0x15c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2bc1      	cmp	r3, #193	; 0xc1
 8001c1a:	d103      	bne.n	8001c24 <recv_msg+0xa4>
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <recv_msg+0x15c>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d014      	beq.n	8001c4e <recv_msg+0xce>
            k_msgq_put(&signalman_msgq_rx_msg, &signalman_rx_buf, K_NO_WAIT);
 8001c24:	2400      	movs	r4, #0
 8001c26:	2500      	movs	r5, #0
 8001c28:	4622      	mov	r2, r4
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <recv_msg+0x15c>)
 8001c2e:	482c      	ldr	r0, [pc, #176]	; (8001ce0 <recv_msg+0x160>)
 8001c30:	f006 fa64 	bl	80080fc <z_impl_k_msgq_put>
 8001c34:	4622      	mov	r2, r4
 8001c36:	462b      	mov	r3, r5
 8001c38:	f10d 0116 	add.w	r1, sp, #22
 8001c3c:	4829      	ldr	r0, [pc, #164]	; (8001ce4 <recv_msg+0x164>)
 8001c3e:	f006 fa5d 	bl	80080fc <z_impl_k_msgq_put>
            k_wakeup(proc_task_id);
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <recv_msg+0x168>)
 8001c44:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001c46:	f00b f994 	bl	800cf72 <z_impl_k_wakeup>
}
 8001c4a:	b008      	add	sp, #32
 8001c4c:	bd70      	pop	{r4, r5, r6, pc}
        if (IS_SYNC_MSG) {
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <recv_msg+0x15c>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1e6      	bne.n	8001c24 <recv_msg+0xa4>
 8001c56:	4c25      	ldr	r4, [pc, #148]	; (8001cec <recv_msg+0x16c>)
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <recv_msg+0x170>)
 8001c5a:	1ae4      	subs	r4, r4, r3
 8001c5c:	08e4      	lsrs	r4, r4, #3
            LOG_DBG(" REQUEST");
 8001c5e:	2604      	movs	r6, #4
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f366 0202 	bfi	r2, r6, #0, #3
 8001c68:	f36f 02c5 	bfc	r2, #3, #3
 8001c6c:	f364 128f 	bfi	r2, r4, #6, #10
 8001c70:	4d20      	ldr	r5, [pc, #128]	; (8001cf4 <recv_msg+0x174>)
 8001c72:	4629      	mov	r1, r5
 8001c74:	4820      	ldr	r0, [pc, #128]	; (8001cf8 <recv_msg+0x178>)
 8001c76:	f001 fbf1 	bl	800345c <log_1>
            LOG_DBG(" MESSAGE_TYPE_SYNC");
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f366 0202 	bfi	r2, r6, #0, #3
 8001c82:	f36f 02c5 	bfc	r2, #3, #3
 8001c86:	f364 128f 	bfi	r2, r4, #6, #10
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <recv_msg+0x17c>)
 8001c8e:	f001 fbe5 	bl	800345c <log_1>
	z_impl_k_timer_stop(timer);
 8001c92:	4c0f      	ldr	r4, [pc, #60]	; (8001cd0 <recv_msg+0x150>)
 8001c94:	4620      	mov	r0, r4
 8001c96:	f00b fa73 	bl	800d180 <z_impl_k_timer_stop>
            signalman_current_state = signalman_recv_state;
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <recv_msg+0x158>)
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <recv_msg+0x180>)
 8001c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ca2:	e883 0003 	stmia.w	r3, {r0, r1}
	return z_impl_k_sleep(timeout);
 8001ca6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001caa:	2100      	movs	r1, #0
 8001cac:	f007 f8f0 	bl	8008e90 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 8001cb0:	f649 1220 	movw	r2, #39200	; 0x9920
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f007 fb2a 	bl	8009318 <z_impl_k_timer_start>
        if (IS_SYNC_MSG) {
 8001cc4:	e7c1      	b.n	8001c4a <recv_msg+0xca>
 8001cc6:	bf00      	nop
 8001cc8:	200008f0 	.word	0x200008f0
 8001ccc:	200008fc 	.word	0x200008fc
 8001cd0:	200004b8 	.word	0x200004b8
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	200008e8 	.word	0x200008e8
 8001cdc:	20000908 	.word	0x20000908
 8001ce0:	20000400 	.word	0x20000400
 8001ce4:	200003cc 	.word	0x200003cc
 8001ce8:	0800e1d0 	.word	0x0800e1d0
 8001cec:	0800dd50 	.word	0x0800dd50
 8001cf0:	0800dd28 	.word	0x0800dd28
 8001cf4:	0800e170 	.word	0x0800e170
 8001cf8:	0800df68 	.word	0x0800df68
 8001cfc:	0800df78 	.word	0x0800df78
 8001d00:	20000900 	.word	0x20000900

08001d04 <signalman_periodic_timer_handler>:
    LOG_DBG("Button anti-dream pressed");
}


void signalman_periodic_timer_handler(struct k_timer *tim)
{
 8001d04:	b508      	push	{r3, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4907      	ldr	r1, [pc, #28]	; (8001d28 <signalman_periodic_timer_handler+0x24>)
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <signalman_periodic_timer_handler+0x28>)
 8001d0e:	f006 f9f5 	bl	80080fc <z_impl_k_msgq_put>
    k_msgq_put(&signalman_msgq_tx_msg_prio, &alarm_msg, K_NO_WAIT);
    signalman_current_state = *signalman_current_state.next;
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <signalman_periodic_timer_handler+0x2c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d1a:	e883 0003 	stmia.w	r3, {r0, r1}
    k_wakeup(modem_task_id);
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <signalman_periodic_timer_handler+0x30>)
 8001d20:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001d22:	f00b f926 	bl	800cf72 <z_impl_k_wakeup>
}
 8001d26:	bd08      	pop	{r3, pc}
 8001d28:	200008d0 	.word	0x200008d0
 8001d2c:	20000468 	.word	0x20000468
 8001d30:	200008e8 	.word	0x200008e8
 8001d34:	0800e1cc 	.word	0x0800e1cc

08001d38 <signalman_system_init>:
{
 8001d38:	b510      	push	{r4, lr}
    signalman_lora_cfg.frequency = 433000000;
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <signalman_system_init+0xd4>)
 8001d3c:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <signalman_system_init+0xd8>)
 8001d3e:	601a      	str	r2, [r3, #0]
    signalman_lora_cfg.bandwidth = BW_125_KHZ;
 8001d40:	2200      	movs	r2, #0
 8001d42:	711a      	strb	r2, [r3, #4]
    signalman_lora_cfg.datarate = SF_12;
 8001d44:	210c      	movs	r1, #12
 8001d46:	7159      	strb	r1, [r3, #5]
    signalman_lora_cfg.preamble_len = 8;
 8001d48:	2108      	movs	r1, #8
 8001d4a:	8119      	strh	r1, [r3, #8]
    signalman_lora_cfg.coding_rate = CR_4_5;
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	7199      	strb	r1, [r3, #6]
    signalman_lora_cfg.tx_power = 5;
 8001d50:	2105      	movs	r1, #5
 8001d52:	7299      	strb	r1, [r3, #10]
    signalman_lora_cfg.tx = false;
 8001d54:	72da      	strb	r2, [r3, #11]
    signalman_lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001d56:	482f      	ldr	r0, [pc, #188]	; (8001e14 <signalman_system_init+0xdc>)
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <signalman_system_init+0xe0>)
 8001d5a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001d5c:	f00a fe9f 	bl	800ca9e <z_device_ready>
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d03e      	beq.n	8001de2 <signalman_system_init+0xaa>
 8001d64:	2300      	movs	r3, #0
    if (!device_is_ready(signalman_lora_dev_ptr)) {
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d13e      	bne.n	8001de8 <signalman_system_init+0xb0>
    if ( lora_config(signalman_lora_dev_ptr, &signalman_lora_cfg) < 0 ) {
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <signalman_system_init+0xe0>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001d6e:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4926      	ldr	r1, [pc, #152]	; (8001e0c <signalman_system_init+0xd4>)
 8001d74:	4798      	blx	r3
 8001d76:	2800      	cmp	r0, #0
 8001d78:	db3d      	blt.n	8001df6 <signalman_system_init+0xbe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001d7a:	4828      	ldr	r0, [pc, #160]	; (8001e1c <signalman_system_init+0xe4>)
 8001d7c:	f005 ff20 	bl	8007bc0 <z_impl_device_get_binding>
    signalman_button_alarm_gpio_dev_ptr = device_get_binding(BUTTON_ALARM_GPIO_PORT);
 8001d80:	4c27      	ldr	r4, [pc, #156]	; (8001e20 <signalman_system_init+0xe8>)
 8001d82:	6020      	str	r0, [r4, #0]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8001d84:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8001d86:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d8e:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8001d90:	680b      	ldr	r3, [r1, #0]
 8001d92:	f240 1201 	movw	r2, #257	; 0x101
 8001d96:	210d      	movs	r1, #13
 8001d98:	4798      	blx	r3
    gpio_pin_interrupt_configure(signalman_button_alarm_gpio_dev_ptr, BUTTON_ALARM_GPIO_PIN,
 8001d9a:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 8001d9c:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8001d9e:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8001da0:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8001da2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001da6:	d12d      	bne.n	8001e04 <signalman_system_init+0xcc>
 8001da8:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8001dac:	699c      	ldr	r4, [r3, #24]
 8001dae:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8001db2:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8001db6:	210d      	movs	r1, #13
 8001db8:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <signalman_system_init+0xec>)
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <signalman_system_init+0xf0>)
 8001dbe:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 8001dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc4:	609a      	str	r2, [r3, #8]
    gpio_add_callback(signalman_button_alarm_gpio_dev_ptr, &signalman_button_alarm_cb);
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <signalman_system_init+0xe8>)
 8001dc8:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8001dca:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	b113      	cbz	r3, 8001dd6 <signalman_system_init+0x9e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4914      	ldr	r1, [pc, #80]	; (8001e24 <signalman_system_init+0xec>)
 8001dd4:	4798      	blx	r3
    k_timer_init(&signalman_periodic_timer, signalman_periodic_timer_handler, NULL);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4914      	ldr	r1, [pc, #80]	; (8001e2c <signalman_system_init+0xf4>)
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <signalman_system_init+0xf8>)
 8001ddc:	f00b f9c4 	bl	800d168 <k_timer_init>
}
 8001de0:	bd10      	pop	{r4, pc}
 8001de2:	f06f 0312 	mvn.w	r3, #18
 8001de6:	e7be      	b.n	8001d66 <signalman_system_init+0x2e>
	return z_impl_k_sleep(timeout);
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df0:	f007 f84e 	bl	8008e90 <z_impl_k_sleep>
 8001df4:	e7b9      	b.n	8001d6a <signalman_system_init+0x32>
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dfe:	f007 f847 	bl	8008e90 <z_impl_k_sleep>
 8001e02:	e7ba      	b.n	8001d7a <signalman_system_init+0x42>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8001e04:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8001e08:	e7d0      	b.n	8001dac <signalman_system_init+0x74>
 8001e0a:	bf00      	nop
 8001e0c:	200008f0 	.word	0x200008f0
 8001e10:	19cf0e40 	.word	0x19cf0e40
 8001e14:	0800db40 	.word	0x0800db40
 8001e18:	200008fc 	.word	0x200008fc
 8001e1c:	0800df90 	.word	0x0800df90
 8001e20:	200008e4 	.word	0x200008e4
 8001e24:	200008d8 	.word	0x200008d8
 8001e28:	08001b35 	.word	0x08001b35
 8001e2c:	08001d05 	.word	0x08001d05
 8001e30:	200004b8 	.word	0x200004b8

08001e34 <signalman_start_system>:
{
 8001e34:	b530      	push	{r4, r5, lr}
 8001e36:	b087      	sub	sp, #28
    volatile int rc = -1;
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3c:	9305      	str	r3, [sp, #20]
    int16_t rssi = 0;
 8001e3e:	2400      	movs	r4, #0
 8001e40:	f8ad 4012 	strh.w	r4, [sp, #18]
    int8_t snr = 0;
 8001e44:	f88d 4011 	strb.w	r4, [sp, #17]
    signalman_system_init();
 8001e48:	f7ff ff76 	bl	8001d38 <signalman_system_init>
    signalman_recv_state.next = &signalman_transmit_state;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <signalman_start_system+0x90>)
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <signalman_start_system+0x94>)
 8001e50:	601a      	str	r2, [r3, #0]
    signalman_recv_state.state = RECEIVE;
 8001e52:	711c      	strb	r4, [r3, #4]
    signalman_transmit_state.next = &signalman_recv_state;
 8001e54:	6013      	str	r3, [r2, #0]
    signalman_transmit_state.state = TRANSMIT;
 8001e56:	f04f 0c01 	mov.w	ip, #1
 8001e5a:	f882 c004 	strb.w	ip, [r2, #4]
    signalman_current_state = signalman_recv_state;
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <signalman_start_system+0x98>)
 8001e60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e64:	e882 0003 	stmia.w	r2, {r0, r1}
    alarm_msg.receiver_addr = RECV_BASE_STATION;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <signalman_start_system+0x9c>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	705a      	strb	r2, [r3, #1]
    alarm_msg.sender_addr = signalman_cur_dev_addr;
 8001e6e:	4919      	ldr	r1, [pc, #100]	; (8001ed4 <signalman_start_system+0xa0>)
 8001e70:	7809      	ldrb	r1, [r1, #0]
 8001e72:	7019      	strb	r1, [r3, #0]
    alarm_msg.message_type = MESSAGE_TYPE_ALARM;
 8001e74:	709c      	strb	r4, [r3, #2]
    alarm_msg.direction = REQUEST;
 8001e76:	f883 c003 	strb.w	ip, [r3, #3]
    alarm_msg.workers_in_safe_zone = 0;
 8001e7a:	715c      	strb	r4, [r3, #5]
    rc = lora_recv(signalman_lora_dev_ptr, signalman_rx_buf, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <signalman_start_system+0xa4>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001e80:	6883      	ldr	r3, [r0, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f10d 0111 	add.w	r1, sp, #17
 8001e88:	9103      	str	r1, [sp, #12]
 8001e8a:	f10d 0112 	add.w	r1, sp, #18
 8001e8e:	9102      	str	r1, [sp, #8]
 8001e90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e98:	e9cd 4500 	strd	r4, r5, [sp]
 8001e9c:	490f      	ldr	r1, [pc, #60]	; (8001edc <signalman_start_system+0xa8>)
 8001e9e:	4798      	blx	r3
 8001ea0:	9005      	str	r0, [sp, #20]
 8001ea2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	f006 fff2 	bl	8008e90 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 8001eac:	f649 1220 	movw	r2, #39200	; 0x9920
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e9cd 2300 	strd	r2, r3, [sp]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <signalman_start_system+0xac>)
 8001ebc:	f007 fa2c 	bl	8009318 <z_impl_k_timer_start>
}
 8001ec0:	b007      	add	sp, #28
 8001ec2:	bd30      	pop	{r4, r5, pc}
 8001ec4:	20000900 	.word	0x20000900
 8001ec8:	2000090c 	.word	0x2000090c
 8001ecc:	200008e8 	.word	0x200008e8
 8001ed0:	200008d0 	.word	0x200008d0
 8001ed4:	20000294 	.word	0x20000294
 8001ed8:	200008fc 	.word	0x200008fc
 8001edc:	20000908 	.word	0x20000908
 8001ee0:	200004b8 	.word	0x200004b8

08001ee4 <signalman_proc_task>:
{
 8001ee4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001ee8:	b099      	sub	sp, #100	; 0x64
    int16_t rssi = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint32_t cur_msg = 0;
 8001ef0:	9316      	str	r3, [sp, #88]	; 0x58
    struct message_s tx_msg_proc = {0};
 8001ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8001ef4:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    struct message_s rx_msg_proc = {0};
 8001ef8:	9312      	str	r3, [sp, #72]	; 0x48
 8001efa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	return z_impl_k_sleep(timeout);
 8001efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f06:	f006 ffc3 	bl	8008e90 <z_impl_k_sleep>
 8001f0a:	e1f2      	b.n	80022f2 <signalman_proc_task+0x40e>
            cur_msg = 0;
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	9416      	str	r4, [sp, #88]	; 0x58
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001f10:	e00e      	b.n	8001f30 <signalman_proc_task+0x4c>
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 8001f12:	ab18      	add	r3, sp, #96	; 0x60
 8001f14:	191d      	adds	r5, r3, r4
 8001f16:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
 8001f1a:	f009 f937 	bl	800b18c <reverse>
 8001f1e:	f805 0c1c 	strb.w	r0, [r5, #-28]
                cur_msg |= (rx_buf_proc[i]) << i*8;
 8001f22:	00e3      	lsls	r3, r4, #3
 8001f24:	4098      	lsls	r0, r3
 8001f26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f28:	4318      	orrs	r0, r3
 8001f2a:	9016      	str	r0, [sp, #88]	; 0x58
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001f2c:	3401      	adds	r4, #1
 8001f2e:	b2e4      	uxtb	r4, r4
 8001f30:	2c02      	cmp	r4, #2
 8001f32:	d9ee      	bls.n	8001f12 <signalman_proc_task+0x2e>
            read_write_message(&cur_msg, &rx_msg_proc, false); // rx_msg struct is fill
 8001f34:	2200      	movs	r2, #0
 8001f36:	a912      	add	r1, sp, #72	; 0x48
 8001f38:	a816      	add	r0, sp, #88	; 0x58
 8001f3a:	f7ff fcf7 	bl	800192c <read_write_message>
            if ( (rx_msg_proc.receiver_addr != RECV_BROADCAST) &&
 8001f3e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8001f42:	b11a      	cbz	r2, 8001f4c <signalman_proc_task+0x68>
            (rx_msg_proc.receiver_addr != signalman_cur_dev_addr) ) {
 8001f44:	4bc1      	ldr	r3, [pc, #772]	; (800224c <signalman_proc_task+0x368>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
            if ( (rx_msg_proc.receiver_addr != RECV_BROADCAST) &&
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d131      	bne.n	8001fb0 <signalman_proc_task+0xcc>
            switch (rx_msg_proc.direction) {
 8001f4c:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8106 	beq.w	8002162 <signalman_proc_task+0x27e>
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	f040 81b2 	bne.w	80022c0 <signalman_proc_task+0x3dc>
 8001f5c:	4bbc      	ldr	r3, [pc, #752]	; (8002250 <signalman_proc_task+0x36c>)
 8001f5e:	4abd      	ldr	r2, [pc, #756]	; (8002254 <signalman_proc_task+0x370>)
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	08db      	lsrs	r3, r3, #3
                    LOG_DBG(" REQUEST");
 8001f64:	2204      	movs	r2, #4
 8001f66:	f362 0702 	bfi	r7, r2, #0, #3
 8001f6a:	f36f 07c5 	bfc	r7, #3, #3
 8001f6e:	f363 178f 	bfi	r7, r3, #6, #10
 8001f72:	4cb9      	ldr	r4, [pc, #740]	; (8002258 <signalman_proc_task+0x374>)
 8001f74:	463a      	mov	r2, r7
 8001f76:	4621      	mov	r1, r4
 8001f78:	48b8      	ldr	r0, [pc, #736]	; (800225c <signalman_proc_task+0x378>)
 8001f7a:	f001 fa6f 	bl	800345c <log_1>
                    tx_msg_proc.sender_addr = signalman_cur_dev_addr;
 8001f7e:	4bb3      	ldr	r3, [pc, #716]	; (800224c <signalman_proc_task+0x368>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
                    tx_msg_proc.message_type = rx_msg_proc.message_type;
 8001f86:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8001f8a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                    tx_msg_proc.workers_in_safe_zone = 0;
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
                    tx_msg_proc.direction = RESPONSE;
 8001f94:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
                    tx_msg_proc.battery_level = BATTERY_LEVEL_GOOD; // change it after
 8001f98:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
                    tx_msg_proc.receiver_addr = RECV_BASE_STATION;
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
                    switch (rx_msg_proc.message_type) {
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	f200 80c9 	bhi.w	800213a <signalman_proc_task+0x256>
 8001fa8:	e8df f003 	tbb	[pc, r3]
 8001fac:	b37a2297 	.word	0xb37a2297
 8001fb0:	4ca7      	ldr	r4, [pc, #668]	; (8002250 <signalman_proc_task+0x36c>)
 8001fb2:	49a8      	ldr	r1, [pc, #672]	; (8002254 <signalman_proc_task+0x370>)
 8001fb4:	1a64      	subs	r4, r4, r1
 8001fb6:	08e4      	lsrs	r4, r4, #3
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, signalman_cur_dev_addr);
 8001fb8:	2504      	movs	r5, #4
 8001fba:	f365 0b02 	bfi	fp, r5, #0, #3
 8001fbe:	f36f 0bc5 	bfc	fp, #3, #3
 8001fc2:	f364 1b8f 	bfi	fp, r4, #6, #10
 8001fc6:	f8ad b000 	strh.w	fp, [sp]
 8001fca:	49a3      	ldr	r1, [pc, #652]	; (8002258 <signalman_proc_task+0x374>)
 8001fcc:	48a4      	ldr	r0, [pc, #656]	; (8002260 <signalman_proc_task+0x37c>)
 8001fce:	f001 f9e1 	bl	8003394 <log_3>
                LOG_DBG("Packet is filtered");
 8001fd2:	9b02      	ldr	r3, [sp, #8]
 8001fd4:	f365 0302 	bfi	r3, r5, #0, #3
 8001fd8:	f36f 03c5 	bfc	r3, #3, #3
 8001fdc:	f364 138f 	bfi	r3, r4, #6, #10
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001fe6:	499c      	ldr	r1, [pc, #624]	; (8002258 <signalman_proc_task+0x374>)
 8001fe8:	489e      	ldr	r0, [pc, #632]	; (8002264 <signalman_proc_task+0x380>)
 8001fea:	f001 fa37 	bl	800345c <log_1>
                continue;
 8001fee:	e180      	b.n	80022f2 <signalman_proc_task+0x40e>
 8001ff0:	4b97      	ldr	r3, [pc, #604]	; (8002250 <signalman_proc_task+0x36c>)
 8001ff2:	4a98      	ldr	r2, [pc, #608]	; (8002254 <signalman_proc_task+0x370>)
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	9903      	ldr	r1, [sp, #12]
 8001ffc:	f362 0102 	bfi	r1, r2, #0, #3
 8002000:	460a      	mov	r2, r1
 8002002:	f36f 02c5 	bfc	r2, #3, #3
 8002006:	f363 128f 	bfi	r2, r3, #6, #10
 800200a:	f8ad 200c 	strh.w	r2, [sp, #12]
 800200e:	4621      	mov	r1, r4
 8002010:	4895      	ldr	r0, [pc, #596]	; (8002268 <signalman_proc_task+0x384>)
 8002012:	f001 fa23 	bl	800345c <log_1>
                            switch (rx_msg_proc.sender_addr) {
 8002016:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800201a:	2b03      	cmp	r3, #3
 800201c:	d016      	beq.n	800204c <signalman_proc_task+0x168>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d029      	beq.n	8002076 <signalman_proc_task+0x192>
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <signalman_proc_task+0x36c>)
 8002024:	4a8b      	ldr	r2, [pc, #556]	; (8002254 <signalman_proc_task+0x370>)
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Undefined sender address for this message type");
 800202a:	2204      	movs	r2, #4
 800202c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800202e:	f362 0102 	bfi	r1, r2, #0, #3
 8002032:	460a      	mov	r2, r1
 8002034:	f36f 02c5 	bfc	r2, #3, #3
 8002038:	f363 128f 	bfi	r2, r3, #6, #10
 800203c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8002040:	4621      	mov	r1, r4
 8002042:	488a      	ldr	r0, [pc, #552]	; (800226c <signalman_proc_task+0x388>)
 8002044:	f001 fa0a 	bl	800345c <log_1>
                            msgq_cur_msg_tx_ptr = &signalman_msgq_rx_msg;
 8002048:	4889      	ldr	r0, [pc, #548]	; (8002270 <signalman_proc_task+0x38c>)
 800204a:	e03d      	b.n	80020c8 <signalman_proc_task+0x1e4>
 800204c:	4b80      	ldr	r3, [pc, #512]	; (8002250 <signalman_proc_task+0x36c>)
 800204e:	4a81      	ldr	r2, [pc, #516]	; (8002254 <signalman_proc_task+0x370>)
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Base station disabled alarm");
 8002054:	2204      	movs	r2, #4
 8002056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002058:	f362 0102 	bfi	r1, r2, #0, #3
 800205c:	460a      	mov	r2, r1
 800205e:	f36f 02c5 	bfc	r2, #3, #3
 8002062:	f363 128f 	bfi	r2, r3, #6, #10
 8002066:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800206a:	4621      	mov	r1, r4
 800206c:	4881      	ldr	r0, [pc, #516]	; (8002274 <signalman_proc_task+0x390>)
 800206e:	f001 f9f5 	bl	800345c <log_1>
                            msgq_cur_msg_tx_ptr = &signalman_msgq_rx_msg;
 8002072:	487f      	ldr	r0, [pc, #508]	; (8002270 <signalman_proc_task+0x38c>)
 8002074:	e028      	b.n	80020c8 <signalman_proc_task+0x1e4>
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <signalman_proc_task+0x36c>)
 8002078:	4a76      	ldr	r2, [pc, #472]	; (8002254 <signalman_proc_task+0x370>)
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Brigade chief disabled alarm");
 800207e:	2204      	movs	r2, #4
 8002080:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002082:	f362 0102 	bfi	r1, r2, #0, #3
 8002086:	460a      	mov	r2, r1
 8002088:	f36f 02c5 	bfc	r2, #3, #3
 800208c:	f363 128f 	bfi	r2, r3, #6, #10
 8002090:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8002094:	4621      	mov	r1, r4
 8002096:	4878      	ldr	r0, [pc, #480]	; (8002278 <signalman_proc_task+0x394>)
 8002098:	f001 f9e0 	bl	800345c <log_1>
                            msgq_cur_msg_tx_ptr = &signalman_msgq_rx_msg;
 800209c:	4874      	ldr	r0, [pc, #464]	; (8002270 <signalman_proc_task+0x38c>)
 800209e:	e013      	b.n	80020c8 <signalman_proc_task+0x1e4>
 80020a0:	4b6b      	ldr	r3, [pc, #428]	; (8002250 <signalman_proc_task+0x36c>)
 80020a2:	4a6c      	ldr	r2, [pc, #432]	; (8002254 <signalman_proc_task+0x370>)
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 80020a8:	2204      	movs	r2, #4
 80020aa:	9904      	ldr	r1, [sp, #16]
 80020ac:	f362 0102 	bfi	r1, r2, #0, #3
 80020b0:	460a      	mov	r2, r1
 80020b2:	f36f 02c5 	bfc	r2, #3, #3
 80020b6:	f363 128f 	bfi	r2, r3, #6, #10
 80020ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 80020be:	4621      	mov	r1, r4
 80020c0:	486e      	ldr	r0, [pc, #440]	; (800227c <signalman_proc_task+0x398>)
 80020c2:	f001 f9cb 	bl	800345c <log_1>
                            msgq_cur_msg_tx_ptr = &signalman_msgq_rx_msg;
 80020c6:	486a      	ldr	r0, [pc, #424]	; (8002270 <signalman_proc_task+0x38c>)
            if (msgq_cur_msg_tx_ptr) {
 80020c8:	2800      	cmp	r0, #0
 80020ca:	f000 8109 	beq.w	80022e0 <signalman_proc_task+0x3fc>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2300      	movs	r3, #0
 80020d2:	a914      	add	r1, sp, #80	; 0x50
 80020d4:	f006 f812 	bl	80080fc <z_impl_k_msgq_put>
 80020d8:	e102      	b.n	80022e0 <signalman_proc_task+0x3fc>
 80020da:	4b5d      	ldr	r3, [pc, #372]	; (8002250 <signalman_proc_task+0x36c>)
 80020dc:	4a5d      	ldr	r2, [pc, #372]	; (8002254 <signalman_proc_task+0x370>)
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 80020e2:	2204      	movs	r2, #4
 80020e4:	9905      	ldr	r1, [sp, #20]
 80020e6:	f362 0102 	bfi	r1, r2, #0, #3
 80020ea:	460a      	mov	r2, r1
 80020ec:	f36f 02c5 	bfc	r2, #3, #3
 80020f0:	f363 128f 	bfi	r2, r3, #6, #10
 80020f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80020f8:	4621      	mov	r1, r4
 80020fa:	4861      	ldr	r0, [pc, #388]	; (8002280 <signalman_proc_task+0x39c>)
 80020fc:	f001 f9ae 	bl	800345c <log_1>
                            if (rx_msg_proc.sender_addr == signalman_cur_dev_addr)
 8002100:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002104:	4b51      	ldr	r3, [pc, #324]	; (800224c <signalman_proc_task+0x368>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 80e9 	bne.w	80022e0 <signalman_proc_task+0x3fc>
                                msgq_cur_msg_tx_ptr = &signalman_msgq_tx_msg_prio; // For response message
 800210e:	485d      	ldr	r0, [pc, #372]	; (8002284 <signalman_proc_task+0x3a0>)
 8002110:	e7da      	b.n	80020c8 <signalman_proc_task+0x1e4>
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <signalman_proc_task+0x36c>)
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <signalman_proc_task+0x370>)
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 800211a:	2204      	movs	r2, #4
 800211c:	9906      	ldr	r1, [sp, #24]
 800211e:	f362 0102 	bfi	r1, r2, #0, #3
 8002122:	460a      	mov	r2, r1
 8002124:	f36f 02c5 	bfc	r2, #3, #3
 8002128:	f363 128f 	bfi	r2, r3, #6, #10
 800212c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8002130:	4621      	mov	r1, r4
 8002132:	4855      	ldr	r0, [pc, #340]	; (8002288 <signalman_proc_task+0x3a4>)
 8002134:	f001 f992 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002138:	e0d2      	b.n	80022e0 <signalman_proc_task+0x3fc>
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <signalman_proc_task+0x36c>)
 800213c:	4a45      	ldr	r2, [pc, #276]	; (8002254 <signalman_proc_task+0x370>)
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 8002142:	2204      	movs	r2, #4
 8002144:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002146:	f362 0102 	bfi	r1, r2, #0, #3
 800214a:	460a      	mov	r2, r1
 800214c:	f36f 02c5 	bfc	r2, #3, #3
 8002150:	f363 128f 	bfi	r2, r3, #6, #10
 8002154:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8002158:	4621      	mov	r1, r4
 800215a:	484c      	ldr	r0, [pc, #304]	; (800228c <signalman_proc_task+0x3a8>)
 800215c:	f001 f97e 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002160:	e0be      	b.n	80022e0 <signalman_proc_task+0x3fc>
 8002162:	4c3b      	ldr	r4, [pc, #236]	; (8002250 <signalman_proc_task+0x36c>)
 8002164:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <signalman_proc_task+0x370>)
 8002166:	1ae4      	subs	r4, r4, r3
 8002168:	08e4      	lsrs	r4, r4, #3
                    LOG_DBG(" RESPONSE");
 800216a:	2304      	movs	r3, #4
 800216c:	f363 0802 	bfi	r8, r3, #0, #3
 8002170:	f36f 08c5 	bfc	r8, #3, #3
 8002174:	f364 188f 	bfi	r8, r4, #6, #10
 8002178:	4d37      	ldr	r5, [pc, #220]	; (8002258 <signalman_proc_task+0x374>)
 800217a:	4642      	mov	r2, r8
 800217c:	4629      	mov	r1, r5
 800217e:	4844      	ldr	r0, [pc, #272]	; (8002290 <signalman_proc_task+0x3ac>)
 8002180:	f001 f96c 	bl	800345c <log_1>
                    LOG_DBG("Message type:");
 8002184:	2304      	movs	r3, #4
 8002186:	f363 0902 	bfi	r9, r3, #0, #3
 800218a:	f36f 09c5 	bfc	r9, #3, #3
 800218e:	f364 198f 	bfi	r9, r4, #6, #10
 8002192:	464a      	mov	r2, r9
 8002194:	4629      	mov	r1, r5
 8002196:	483f      	ldr	r0, [pc, #252]	; (8002294 <signalman_proc_task+0x3b0>)
 8002198:	f001 f960 	bl	800345c <log_1>
                    switch (rx_msg_proc.message_type) {
 800219c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d879      	bhi.n	8002298 <signalman_proc_task+0x3b4>
 80021a4:	e8df f003 	tbb	[pc, r3]
 80021a8:	3e16022a 	.word	0x3e16022a
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <signalman_proc_task+0x36c>)
 80021ae:	4a29      	ldr	r2, [pc, #164]	; (8002254 <signalman_proc_task+0x370>)
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 80021b4:	2204      	movs	r2, #4
 80021b6:	9907      	ldr	r1, [sp, #28]
 80021b8:	f362 0102 	bfi	r1, r2, #0, #3
 80021bc:	460a      	mov	r2, r1
 80021be:	f36f 02c5 	bfc	r2, #3, #3
 80021c2:	f363 128f 	bfi	r2, r3, #6, #10
 80021c6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80021ca:	4629      	mov	r1, r5
 80021cc:	4826      	ldr	r0, [pc, #152]	; (8002268 <signalman_proc_task+0x384>)
 80021ce:	f001 f945 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80021d2:	e085      	b.n	80022e0 <signalman_proc_task+0x3fc>
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <signalman_proc_task+0x36c>)
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <signalman_proc_task+0x370>)
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 80021dc:	2204      	movs	r2, #4
 80021de:	9908      	ldr	r1, [sp, #32]
 80021e0:	f362 0102 	bfi	r1, r2, #0, #3
 80021e4:	460a      	mov	r2, r1
 80021e6:	f36f 02c5 	bfc	r2, #3, #3
 80021ea:	f363 128f 	bfi	r2, r3, #6, #10
 80021ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 80021f2:	4629      	mov	r1, r5
 80021f4:	4821      	ldr	r0, [pc, #132]	; (800227c <signalman_proc_task+0x398>)
 80021f6:	f001 f931 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80021fa:	e071      	b.n	80022e0 <signalman_proc_task+0x3fc>
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <signalman_proc_task+0x36c>)
 80021fe:	4a15      	ldr	r2, [pc, #84]	; (8002254 <signalman_proc_task+0x370>)
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002204:	2204      	movs	r2, #4
 8002206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002208:	f362 0102 	bfi	r1, r2, #0, #3
 800220c:	460a      	mov	r2, r1
 800220e:	f36f 02c5 	bfc	r2, #3, #3
 8002212:	f363 128f 	bfi	r2, r3, #6, #10
 8002216:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800221a:	4629      	mov	r1, r5
 800221c:	4818      	ldr	r0, [pc, #96]	; (8002280 <signalman_proc_task+0x39c>)
 800221e:	f001 f91d 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002222:	e05d      	b.n	80022e0 <signalman_proc_task+0x3fc>
 8002224:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <signalman_proc_task+0x36c>)
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <signalman_proc_task+0x370>)
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 800222c:	2204      	movs	r2, #4
 800222e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002230:	f362 0102 	bfi	r1, r2, #0, #3
 8002234:	460a      	mov	r2, r1
 8002236:	f36f 02c5 	bfc	r2, #3, #3
 800223a:	f363 128f 	bfi	r2, r3, #6, #10
 800223e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8002242:	4629      	mov	r1, r5
 8002244:	4810      	ldr	r0, [pc, #64]	; (8002288 <signalman_proc_task+0x3a4>)
 8002246:	f001 f909 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 800224a:	e049      	b.n	80022e0 <signalman_proc_task+0x3fc>
 800224c:	20000294 	.word	0x20000294
 8002250:	0800dd50 	.word	0x0800dd50
 8002254:	0800dd28 	.word	0x0800dd28
 8002258:	0800e188 	.word	0x0800e188
 800225c:	0800df68 	.word	0x0800df68
 8002260:	0800dfac 	.word	0x0800dfac
 8002264:	0800dfd4 	.word	0x0800dfd4
 8002268:	0800dfec 	.word	0x0800dfec
 800226c:	0800e050 	.word	0x0800e050
 8002270:	20000400 	.word	0x20000400
 8002274:	0800e00c 	.word	0x0800e00c
 8002278:	0800e02c 	.word	0x0800e02c
 800227c:	0800e084 	.word	0x0800e084
 8002280:	0800e0a0 	.word	0x0800e0a0
 8002284:	20000468 	.word	0x20000468
 8002288:	0800e0b8 	.word	0x0800e0b8
 800228c:	0800e0d8 	.word	0x0800e0d8
 8002290:	0800e0f8 	.word	0x0800e0f8
 8002294:	0800e108 	.word	0x0800e108
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <signalman_proc_task+0x470>)
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <signalman_proc_task+0x474>)
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 80022a0:	2204      	movs	r2, #4
 80022a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80022a4:	f362 0102 	bfi	r1, r2, #0, #3
 80022a8:	460a      	mov	r2, r1
 80022aa:	f36f 02c5 	bfc	r2, #3, #3
 80022ae:	f363 128f 	bfi	r2, r3, #6, #10
 80022b2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80022b6:	4629      	mov	r1, r5
 80022b8:	4828      	ldr	r0, [pc, #160]	; (800235c <signalman_proc_task+0x478>)
 80022ba:	f001 f8cf 	bl	800345c <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80022be:	e00f      	b.n	80022e0 <signalman_proc_task+0x3fc>
 80022c0:	4b24      	ldr	r3, [pc, #144]	; (8002354 <signalman_proc_task+0x470>)
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <signalman_proc_task+0x474>)
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	08db      	lsrs	r3, r3, #3
                    LOG_DBG("Not correct message direction");
 80022c8:	2204      	movs	r2, #4
 80022ca:	f362 0a02 	bfi	sl, r2, #0, #3
 80022ce:	f36f 0ac5 	bfc	sl, #3, #3
 80022d2:	f363 1a8f 	bfi	sl, r3, #6, #10
 80022d6:	4652      	mov	r2, sl
 80022d8:	4921      	ldr	r1, [pc, #132]	; (8002360 <signalman_proc_task+0x47c>)
 80022da:	4822      	ldr	r0, [pc, #136]	; (8002364 <signalman_proc_task+0x480>)
 80022dc:	f001 f8be 	bl	800345c <log_1>
            leds_num = check_rssi(&rssi);
 80022e0:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
 80022e4:	b200      	sxth	r0, r0
 80022e6:	f008 ff62 	bl	800b1ae <check_rssi>
	return z_impl_k_sleep(timeout);
 80022ea:	2001      	movs	r0, #1
 80022ec:	2100      	movs	r1, #0
 80022ee:	f006 fdcf 	bl	8008e90 <z_impl_k_sleep>
        if ( signalman_msgq_rx_msg.used_msgs ) {
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <signalman_proc_task+0x484>)
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f7      	beq.n	80022ea <signalman_proc_task+0x406>
            k_msgq_get(&signalman_msgq_rx_msg, &rx_buf_proc, K_NO_WAIT);
 80022fa:	2400      	movs	r4, #0
 80022fc:	2500      	movs	r5, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 80022fe:	4622      	mov	r2, r4
 8002300:	462b      	mov	r3, r5
 8002302:	a911      	add	r1, sp, #68	; 0x44
 8002304:	4818      	ldr	r0, [pc, #96]	; (8002368 <signalman_proc_task+0x484>)
 8002306:	f005 ff55 	bl	80081b4 <z_impl_k_msgq_get>
 800230a:	4622      	mov	r2, r4
 800230c:	462b      	mov	r3, r5
 800230e:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8002312:	4816      	ldr	r0, [pc, #88]	; (800236c <signalman_proc_task+0x488>)
 8002314:	f005 ff4e 	bl	80081b4 <z_impl_k_msgq_get>
            if (rx_buf_proc[0] == rx_buf_proc[1] == rx_buf_proc[2] == 0) {
 8002318:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800231c:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8002320:	4293      	cmp	r3, r2
 8002322:	bf14      	ite	ne
 8002324:	2300      	movne	r3, #0
 8002326:	2301      	moveq	r3, #1
 8002328:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800232c:	4293      	cmp	r3, r2
 800232e:	f43f aded 	beq.w	8001f0c <signalman_proc_task+0x28>
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <signalman_proc_task+0x470>)
 8002334:	4a08      	ldr	r2, [pc, #32]	; (8002358 <signalman_proc_task+0x474>)
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	08db      	lsrs	r3, r3, #3
                LOG_DBG("Empty message");
 800233a:	2204      	movs	r2, #4
 800233c:	f362 0602 	bfi	r6, r2, #0, #3
 8002340:	f36f 06c5 	bfc	r6, #3, #3
 8002344:	f363 168f 	bfi	r6, r3, #6, #10
 8002348:	4632      	mov	r2, r6
 800234a:	4905      	ldr	r1, [pc, #20]	; (8002360 <signalman_proc_task+0x47c>)
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <signalman_proc_task+0x48c>)
 800234e:	f001 f885 	bl	800345c <log_1>
                continue;
 8002352:	e7ce      	b.n	80022f2 <signalman_proc_task+0x40e>
 8002354:	0800dd50 	.word	0x0800dd50
 8002358:	0800dd28 	.word	0x0800dd28
 800235c:	0800e0d8 	.word	0x0800e0d8
 8002360:	0800e188 	.word	0x0800e188
 8002364:	0800e11c 	.word	0x0800e11c
 8002368:	20000400 	.word	0x20000400
 800236c:	200003cc 	.word	0x200003cc
 8002370:	0800df98 	.word	0x0800df98

08002374 <signalman_modem_task>:
{
 8002374:	b500      	push	{lr}
 8002376:	b083      	sub	sp, #12
    volatile uint32_t ticks = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
	return z_impl_k_sleep(timeout);
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002384:	f006 fd84 	bl	8008e90 <z_impl_k_sleep>
 8002388:	e00b      	b.n	80023a2 <signalman_modem_task+0x2e>
            send_msg();
 800238a:	f7ff fb55 	bl	8001a38 <send_msg>
            signalman_current_state = *(signalman_current_state.next);
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <signalman_modem_task+0x3c>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002396:	e883 0003 	stmia.w	r3, {r0, r1}
 800239a:	2001      	movs	r0, #1
 800239c:	2100      	movs	r1, #0
 800239e:	f006 fd77 	bl	8008e90 <z_impl_k_sleep>
        if (signalman_current_state.state == TRANSMIT) {
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <signalman_modem_task+0x3c>)
 80023a4:	791b      	ldrb	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d0ef      	beq.n	800238a <signalman_modem_task+0x16>
            recv_msg();
 80023aa:	f7ff fbe9 	bl	8001b80 <recv_msg>
 80023ae:	e7f4      	b.n	800239a <signalman_modem_task+0x26>
 80023b0:	200008e8 	.word	0x200008e8

080023b4 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 80023b4:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80023b6:	680b      	ldr	r3, [r1, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <char_out+0x10>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4798      	blx	r3
}
 80023c2:	bd08      	pop	{r3, pc}
 80023c4:	20000000 	.word	0x20000000

080023c8 <__printk_hook_install>:
	_char_out = fn;
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <__printk_hook_install+0x8>)
 80023ca:	6018      	str	r0, [r3, #0]
}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80023d4:	b500      	push	{lr}
 80023d6:	b083      	sub	sp, #12
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80023dc:	2100      	movs	r1, #0
 80023de:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80023e0:	a901      	add	r1, sp, #4
 80023e2:	4803      	ldr	r0, [pc, #12]	; (80023f0 <vprintk+0x1c>)
 80023e4:	f000 fa2c 	bl	8002840 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80023e8:	b003      	add	sp, #12
 80023ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ee:	bf00      	nop
 80023f0:	080023b5 	.word	0x080023b5

080023f4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80023f4:	b510      	push	{r4, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80023fa:	9001      	str	r0, [sp, #4]
 80023fc:	9102      	str	r1, [sp, #8]
 80023fe:	2100      	movs	r1, #0
 8002400:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 8002402:	a901      	add	r1, sp, #4
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <vsnprintk+0x28>)
 8002406:	f000 fa1b 	bl	8002840 <cbvprintf>

	if (ctx.count < ctx.max) {
 800240a:	9b03      	ldr	r3, [sp, #12]
 800240c:	9a02      	ldr	r2, [sp, #8]
 800240e:	4293      	cmp	r3, r2
 8002410:	da01      	bge.n	8002416 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8002412:	2200      	movs	r2, #0
 8002414:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8002416:	9803      	ldr	r0, [sp, #12]
 8002418:	b004      	add	sp, #16
 800241a:	bd10      	pop	{r4, pc}
 800241c:	0800b22b 	.word	0x0800b22b

08002420 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002420:	4684      	mov	ip, r0
	const char *sp = *str;
 8002422:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8002424:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8002426:	e005      	b.n	8002434 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8002428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800242c:	3201      	adds	r2, #1
 800242e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002432:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8002434:	7813      	ldrb	r3, [r2, #0]
 8002436:	4904      	ldr	r1, [pc, #16]	; (8002448 <extract_decimal+0x28>)
 8002438:	5c59      	ldrb	r1, [r3, r1]
 800243a:	f011 0f04 	tst.w	r1, #4
 800243e:	d1f3      	bne.n	8002428 <extract_decimal+0x8>
	}
	*str = sp;
 8002440:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	0800efb5 	.word	0x0800efb5

0800244c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8002452:	2300      	movs	r3, #0
 8002454:	6003      	str	r3, [r0, #0]
 8002456:	6043      	str	r3, [r0, #4]
 8002458:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 800245a:	784b      	ldrb	r3, [r1, #1]
 800245c:	2b25      	cmp	r3, #37	; 0x25
 800245e:	d002      	beq.n	8002466 <extract_conversion+0x1a>
 8002460:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8002462:	2501      	movs	r5, #1
 8002464:	e01f      	b.n	80024a6 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 8002466:	1c88      	adds	r0, r1, #2
 8002468:	70e3      	strb	r3, [r4, #3]
		return sp;
 800246a:	e145      	b.n	80026f8 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 800246c:	7823      	ldrb	r3, [r4, #0]
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8002474:	b1b5      	cbz	r5, 80024a4 <extract_conversion+0x58>
			++sp;
 8002476:	3601      	adds	r6, #1
 8002478:	e014      	b.n	80024a4 <extract_conversion+0x58>
			conv->flag_plus = true;
 800247a:	7823      	ldrb	r3, [r4, #0]
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	7023      	strb	r3, [r4, #0]
			break;
 8002482:	e7f7      	b.n	8002474 <extract_conversion+0x28>
			conv->flag_space = true;
 8002484:	7823      	ldrb	r3, [r4, #0]
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	7023      	strb	r3, [r4, #0]
			break;
 800248c:	e7f2      	b.n	8002474 <extract_conversion+0x28>
			conv->flag_hash = true;
 800248e:	7823      	ldrb	r3, [r4, #0]
 8002490:	f043 0320 	orr.w	r3, r3, #32
 8002494:	7023      	strb	r3, [r4, #0]
			break;
 8002496:	e7ed      	b.n	8002474 <extract_conversion+0x28>
			conv->flag_zero = true;
 8002498:	7823      	ldrb	r3, [r4, #0]
 800249a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800249e:	7023      	strb	r3, [r4, #0]
			break;
 80024a0:	e7e8      	b.n	8002474 <extract_conversion+0x28>
		switch (*sp) {
 80024a2:	2500      	movs	r5, #0
	} while (loop);
 80024a4:	b345      	cbz	r5, 80024f8 <extract_conversion+0xac>
		switch (*sp) {
 80024a6:	7833      	ldrb	r3, [r6, #0]
 80024a8:	3b20      	subs	r3, #32
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d8f9      	bhi.n	80024a2 <extract_conversion+0x56>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <extract_conversion+0x68>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	08002485 	.word	0x08002485
 80024b8:	080024a3 	.word	0x080024a3
 80024bc:	080024a3 	.word	0x080024a3
 80024c0:	0800248f 	.word	0x0800248f
 80024c4:	080024a3 	.word	0x080024a3
 80024c8:	080024a3 	.word	0x080024a3
 80024cc:	080024a3 	.word	0x080024a3
 80024d0:	080024a3 	.word	0x080024a3
 80024d4:	080024a3 	.word	0x080024a3
 80024d8:	080024a3 	.word	0x080024a3
 80024dc:	080024a3 	.word	0x080024a3
 80024e0:	0800247b 	.word	0x0800247b
 80024e4:	080024a3 	.word	0x080024a3
 80024e8:	0800246d 	.word	0x0800246d
 80024ec:	080024a3 	.word	0x080024a3
 80024f0:	080024a3 	.word	0x080024a3
 80024f4:	08002499 	.word	0x08002499
	if (conv->flag_zero && conv->flag_dash) {
 80024f8:	7823      	ldrb	r3, [r4, #0]
 80024fa:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80024fe:	2b44      	cmp	r3, #68	; 0x44
 8002500:	d05f      	beq.n	80025c2 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8002502:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8002504:	7823      	ldrb	r3, [r4, #0]
 8002506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250a:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 800250c:	7833      	ldrb	r3, [r6, #0]
 800250e:	2b2a      	cmp	r3, #42	; 0x2a
 8002510:	d05c      	beq.n	80025cc <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8002512:	a801      	add	r0, sp, #4
 8002514:	f7ff ff84 	bl	8002420 <extract_decimal>
	if (sp != wp) {
 8002518:	9b01      	ldr	r3, [sp, #4]
 800251a:	429e      	cmp	r6, r3
 800251c:	d00f      	beq.n	800253e <extract_conversion+0xf2>
		conv->width_present = true;
 800251e:	7823      	ldrb	r3, [r4, #0]
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8002526:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 800252e:	2800      	cmp	r0, #0
 8002530:	db54      	blt.n	80025dc <extract_conversion+0x190>
 8002532:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8002534:	4313      	orrs	r3, r2
 8002536:	7822      	ldrb	r2, [r4, #0]
 8002538:	f363 0241 	bfi	r2, r3, #1, #1
 800253c:	7022      	strb	r2, [r4, #0]
	return sp;
 800253e:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8002540:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b2e      	cmp	r3, #46	; 0x2e
 8002546:	bf14      	ite	ne
 8002548:	2300      	movne	r3, #0
 800254a:	2301      	moveq	r3, #1
 800254c:	7862      	ldrb	r2, [r4, #1]
 800254e:	f363 0241 	bfi	r2, r3, #1, #1
 8002552:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8002554:	2b00      	cmp	r3, #0
 8002556:	d043      	beq.n	80025e0 <extract_conversion+0x194>
	++sp;
 8002558:	9b01      	ldr	r3, [sp, #4]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b2a      	cmp	r3, #42	; 0x2a
 8002562:	d03f      	beq.n	80025e4 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8002564:	a801      	add	r0, sp, #4
 8002566:	f7ff ff5b 	bl	8002420 <extract_decimal>
	conv->prec_value = prec;
 800256a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 800256c:	7823      	ldrb	r3, [r4, #0]
 800256e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8002572:	2800      	cmp	r0, #0
 8002574:	db3e      	blt.n	80025f4 <extract_conversion+0x1a8>
 8002576:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8002578:	4313      	orrs	r3, r2
 800257a:	7822      	ldrb	r2, [r4, #0]
 800257c:	f363 0241 	bfi	r2, r3, #1, #1
 8002580:	7022      	strb	r2, [r4, #0]
	return sp;
 8002582:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8002584:	7803      	ldrb	r3, [r0, #0]
 8002586:	3b4c      	subs	r3, #76	; 0x4c
 8002588:	2b2e      	cmp	r3, #46	; 0x2e
 800258a:	f200 809d 	bhi.w	80026c8 <extract_conversion+0x27c>
 800258e:	e8df f003 	tbb	[pc, r3]
 8002592:	9b90      	.short	0x9b90
 8002594:	9b9b9b9b 	.word	0x9b9b9b9b
 8002598:	9b9b9b9b 	.word	0x9b9b9b9b
 800259c:	9b9b9b9b 	.word	0x9b9b9b9b
 80025a0:	9b9b9b9b 	.word	0x9b9b9b9b
 80025a4:	9b9b9b9b 	.word	0x9b9b9b9b
 80025a8:	9b9b9b9b 	.word	0x9b9b9b9b
 80025ac:	9b339b9b 	.word	0x9b339b9b
 80025b0:	9b459b57 	.word	0x9b459b57
 80025b4:	9b9b9b9b 	.word	0x9b9b9b9b
 80025b8:	9b899b9b 	.word	0x9b899b9b
 80025bc:	9b9b9b9b 	.word	0x9b9b9b9b
 80025c0:	82          	.byte	0x82
 80025c1:	00          	.byte	0x00
		conv->flag_zero = false;
 80025c2:	7823      	ldrb	r3, [r4, #0]
 80025c4:	f36f 1386 	bfc	r3, #6, #1
 80025c8:	7023      	strb	r3, [r4, #0]
 80025ca:	e79a      	b.n	8002502 <extract_conversion+0xb6>
		conv->width_star = true;
 80025cc:	7863      	ldrb	r3, [r4, #1]
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80025d4:	4633      	mov	r3, r6
 80025d6:	3301      	adds	r3, #1
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	e7b1      	b.n	8002540 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 80025dc:	2201      	movs	r2, #1
 80025de:	e7a9      	b.n	8002534 <extract_conversion+0xe8>
		return sp;
 80025e0:	9801      	ldr	r0, [sp, #4]
 80025e2:	e7cf      	b.n	8002584 <extract_conversion+0x138>
		conv->prec_star = true;
 80025e4:	7863      	ldrb	r3, [r4, #1]
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80025ec:	4610      	mov	r0, r2
 80025ee:	3001      	adds	r0, #1
 80025f0:	9001      	str	r0, [sp, #4]
 80025f2:	e7c7      	b.n	8002584 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 80025f4:	2201      	movs	r2, #1
 80025f6:	e7bf      	b.n	8002578 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 80025f8:	1c42      	adds	r2, r0, #1
 80025fa:	7843      	ldrb	r3, [r0, #1]
 80025fc:	2b68      	cmp	r3, #104	; 0x68
 80025fe:	d006      	beq.n	800260e <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8002600:	7863      	ldrb	r3, [r4, #1]
 8002602:	2102      	movs	r1, #2
 8002604:	f361 03c6 	bfi	r3, r1, #3, #4
 8002608:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 800260a:	4610      	mov	r0, r2
 800260c:	e01e      	b.n	800264c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 800260e:	7863      	ldrb	r3, [r4, #1]
 8002610:	2201      	movs	r2, #1
 8002612:	f362 03c6 	bfi	r3, r2, #3, #4
 8002616:	7063      	strb	r3, [r4, #1]
			++sp;
 8002618:	3002      	adds	r0, #2
 800261a:	e017      	b.n	800264c <extract_conversion+0x200>
		if (*++sp == 'l') {
 800261c:	1c42      	adds	r2, r0, #1
 800261e:	7843      	ldrb	r3, [r0, #1]
 8002620:	2b6c      	cmp	r3, #108	; 0x6c
 8002622:	d006      	beq.n	8002632 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8002624:	7863      	ldrb	r3, [r4, #1]
 8002626:	2103      	movs	r1, #3
 8002628:	f361 03c6 	bfi	r3, r1, #3, #4
 800262c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 800262e:	4610      	mov	r0, r2
 8002630:	e00c      	b.n	800264c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8002632:	7863      	ldrb	r3, [r4, #1]
 8002634:	2204      	movs	r2, #4
 8002636:	f362 03c6 	bfi	r3, r2, #3, #4
 800263a:	7063      	strb	r3, [r4, #1]
			++sp;
 800263c:	3002      	adds	r0, #2
 800263e:	e005      	b.n	800264c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8002640:	7863      	ldrb	r3, [r4, #1]
 8002642:	2205      	movs	r2, #5
 8002644:	f362 03c6 	bfi	r3, r2, #3, #4
 8002648:	7063      	strb	r3, [r4, #1]
		++sp;
 800264a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 800264c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002650:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8002652:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002656:	2a37      	cmp	r2, #55	; 0x37
 8002658:	d87d      	bhi.n	8002756 <extract_conversion+0x30a>
 800265a:	e8df f002 	tbb	[pc, r2]
 800265e:	7c5e      	.short	0x7c5e
 8002660:	5e5e7c7c 	.word	0x5e5e7c7c
 8002664:	7c7c7c5e 	.word	0x7c7c7c5e
 8002668:	7c7c7c7c 	.word	0x7c7c7c7c
 800266c:	7c7c7c7c 	.word	0x7c7c7c7c
 8002670:	7c7c7c7c 	.word	0x7c7c7c7c
 8002674:	7c7c4f7c 	.word	0x7c7c4f7c
 8002678:	7c7c7c7c 	.word	0x7c7c7c7c
 800267c:	7c5e7c7c 	.word	0x7c5e7c7c
 8002680:	5e5e3a4f 	.word	0x5e5e3a4f
 8002684:	7c3a7c5e 	.word	0x7c3a7c5e
 8002688:	657c7c7c 	.word	0x657c7c7c
 800268c:	7c7c714f 	.word	0x7c7c714f
 8002690:	7c4f7c71 	.word	0x7c4f7c71
 8002694:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8002696:	7863      	ldrb	r3, [r4, #1]
 8002698:	2206      	movs	r2, #6
 800269a:	f362 03c6 	bfi	r3, r2, #3, #4
 800269e:	7063      	strb	r3, [r4, #1]
		++sp;
 80026a0:	3001      	adds	r0, #1
		break;
 80026a2:	e7d3      	b.n	800264c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 80026a4:	7863      	ldrb	r3, [r4, #1]
 80026a6:	2207      	movs	r2, #7
 80026a8:	f362 03c6 	bfi	r3, r2, #3, #4
 80026ac:	7063      	strb	r3, [r4, #1]
		++sp;
 80026ae:	3001      	adds	r0, #1
		break;
 80026b0:	e7cc      	b.n	800264c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 80026b2:	7863      	ldrb	r3, [r4, #1]
 80026b4:	2208      	movs	r2, #8
 80026b6:	f362 03c6 	bfi	r3, r2, #3, #4
 80026ba:	7063      	strb	r3, [r4, #1]
		++sp;
 80026bc:	3001      	adds	r0, #1
		conv->unsupported = true;
 80026be:	7823      	ldrb	r3, [r4, #0]
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	7023      	strb	r3, [r4, #0]
		break;
 80026c6:	e7c1      	b.n	800264c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 80026c8:	7863      	ldrb	r3, [r4, #1]
 80026ca:	f36f 03c6 	bfc	r3, #3, #4
 80026ce:	7063      	strb	r3, [r4, #1]
		break;
 80026d0:	e7bc      	b.n	800264c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 80026d2:	78a2      	ldrb	r2, [r4, #2]
 80026d4:	2101      	movs	r1, #1
 80026d6:	f361 0202 	bfi	r2, r1, #0, #3
 80026da:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80026dc:	7862      	ldrb	r2, [r4, #1]
 80026de:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80026e2:	2a40      	cmp	r2, #64	; 0x40
 80026e4:	d010      	beq.n	8002708 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 80026e6:	2b63      	cmp	r3, #99	; 0x63
 80026e8:	d013      	beq.n	8002712 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 80026ea:	7823      	ldrb	r3, [r4, #0]
 80026ec:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80026f0:	4315      	orrs	r5, r2
 80026f2:	f365 0341 	bfi	r3, r5, #1, #1
 80026f6:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 80026f8:	b002      	add	sp, #8
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 80026fc:	78a2      	ldrb	r2, [r4, #2]
 80026fe:	2102      	movs	r1, #2
 8002700:	f361 0202 	bfi	r2, r1, #0, #3
 8002704:	70a2      	strb	r2, [r4, #2]
 8002706:	e7e9      	b.n	80026dc <extract_conversion+0x290>
			conv->invalid = true;
 8002708:	7821      	ldrb	r1, [r4, #0]
 800270a:	f041 0101 	orr.w	r1, r1, #1
 800270e:	7021      	strb	r1, [r4, #0]
 8002710:	e7e9      	b.n	80026e6 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002712:	1e15      	subs	r5, r2, #0
 8002714:	bf18      	it	ne
 8002716:	2501      	movne	r5, #1
 8002718:	e7e7      	b.n	80026ea <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 800271a:	78a3      	ldrb	r3, [r4, #2]
 800271c:	2204      	movs	r2, #4
 800271e:	f362 0302 	bfi	r3, r2, #0, #3
 8002722:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8002724:	2501      	movs	r5, #1
			break;
 8002726:	e7e0      	b.n	80026ea <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002728:	78a3      	ldrb	r3, [r4, #2]
 800272a:	2203      	movs	r2, #3
 800272c:	f362 0302 	bfi	r3, r2, #0, #3
 8002730:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002732:	7863      	ldrb	r3, [r4, #1]
 8002734:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d1d6      	bne.n	80026ea <extract_conversion+0x29e>
			unsupported = true;
 800273c:	2501      	movs	r5, #1
 800273e:	e7d4      	b.n	80026ea <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002740:	78a3      	ldrb	r3, [r4, #2]
 8002742:	2203      	movs	r2, #3
 8002744:	f362 0302 	bfi	r3, r2, #0, #3
 8002748:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 800274a:	7863      	ldrb	r3, [r4, #1]
 800274c:	f013 0f78 	tst.w	r3, #120	; 0x78
 8002750:	d0cb      	beq.n	80026ea <extract_conversion+0x29e>
			unsupported = true;
 8002752:	2501      	movs	r5, #1
 8002754:	e7c9      	b.n	80026ea <extract_conversion+0x29e>
		conv->invalid = true;
 8002756:	7823      	ldrb	r3, [r4, #0]
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	7023      	strb	r3, [r4, #0]
		break;
 800275e:	e7c4      	b.n	80026ea <extract_conversion+0x29e>

08002760 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	b083      	sub	sp, #12
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	9201      	str	r2, [sp, #4]
 800276c:	469a      	mov	sl, r3
 800276e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8002770:	78d3      	ldrb	r3, [r2, #3]
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <encode_uint+0xdc>)
 8002774:	f813 b002 	ldrb.w	fp, [r3, r2]
 8002778:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 800277c:	2b6f      	cmp	r3, #111	; 0x6f
 800277e:	d00f      	beq.n	80027a0 <encode_uint+0x40>
 8002780:	d906      	bls.n	8002790 <encode_uint+0x30>
 8002782:	2b70      	cmp	r3, #112	; 0x70
 8002784:	d00f      	beq.n	80027a6 <encode_uint+0x46>
 8002786:	2b78      	cmp	r3, #120	; 0x78
 8002788:	d110      	bne.n	80027ac <encode_uint+0x4c>
		return 16;
 800278a:	f04f 0910 	mov.w	r9, #16
 800278e:	e023      	b.n	80027d8 <encode_uint+0x78>
	switch (specifier) {
 8002790:	2b58      	cmp	r3, #88	; 0x58
 8002792:	d002      	beq.n	800279a <encode_uint+0x3a>
 8002794:	f04f 090a 	mov.w	r9, #10
 8002798:	e01e      	b.n	80027d8 <encode_uint+0x78>
		return 16;
 800279a:	f04f 0910 	mov.w	r9, #16
 800279e:	e01b      	b.n	80027d8 <encode_uint+0x78>
		return 8;
 80027a0:	f04f 0908 	mov.w	r9, #8
 80027a4:	e018      	b.n	80027d8 <encode_uint+0x78>
		return 16;
 80027a6:	f04f 0910 	mov.w	r9, #16
 80027aa:	e015      	b.n	80027d8 <encode_uint+0x78>
	switch (specifier) {
 80027ac:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 80027b0:	e012      	b.n	80027d8 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	3230      	adds	r2, #48	; 0x30
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 80027bc:	463a      	mov	r2, r7
 80027be:	4643      	mov	r3, r8
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fe f87e 	bl	80008c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 80027c8:	42bc      	cmp	r4, r7
 80027ca:	f175 0300 	sbcs.w	r3, r5, #0
 80027ce:	d319      	bcc.n	8002804 <encode_uint+0xa4>
 80027d0:	4556      	cmp	r6, sl
 80027d2:	d917      	bls.n	8002804 <encode_uint+0xa4>
		value /= radix;
 80027d4:	4604      	mov	r4, r0
 80027d6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 80027d8:	f04f 0800 	mov.w	r8, #0
 80027dc:	464f      	mov	r7, r9
 80027de:	464a      	mov	r2, r9
 80027e0:	4643      	mov	r3, r8
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fe f86d 	bl	80008c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027ea:	2a09      	cmp	r2, #9
 80027ec:	d9e1      	bls.n	80027b2 <encode_uint+0x52>
 80027ee:	f1bb 0f01 	cmp.w	fp, #1
 80027f2:	d003      	beq.n	80027fc <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80027f4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027f6:	3257      	adds	r2, #87	; 0x57
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	e7dd      	b.n	80027b8 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80027fc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80027fe:	3237      	adds	r2, #55	; 0x37
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	e7d9      	b.n	80027b8 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f013 0f20 	tst.w	r3, #32
 800280c:	d005      	beq.n	800281a <encode_uint+0xba>
		if (radix == 8) {
 800280e:	f1b9 0f08 	cmp.w	r9, #8
 8002812:	d006      	beq.n	8002822 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8002814:	f1b9 0f10 	cmp.w	r9, #16
 8002818:	d009      	beq.n	800282e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 800281a:	4630      	mov	r0, r6
 800281c:	b003      	add	sp, #12
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8002822:	9a01      	ldr	r2, [sp, #4]
 8002824:	7893      	ldrb	r3, [r2, #2]
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	7093      	strb	r3, [r2, #2]
 800282c:	e7f5      	b.n	800281a <encode_uint+0xba>
			conv->altform_0c = true;
 800282e:	9a01      	ldr	r2, [sp, #4]
 8002830:	7893      	ldrb	r3, [r2, #2]
 8002832:	f043 0310 	orr.w	r3, r3, #16
 8002836:	7093      	strb	r3, [r2, #2]
 8002838:	e7ef      	b.n	800281a <encode_uint+0xba>
 800283a:	bf00      	nop
 800283c:	0800efb5 	.word	0x0800efb5

08002840 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002844:	b091      	sub	sp, #68	; 0x44
 8002846:	4606      	mov	r6, r0
 8002848:	460d      	mov	r5, r1
 800284a:	4691      	mov	r9, r2
 800284c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800284e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002850:	f899 0000 	ldrb.w	r0, [r9]
 8002854:	2800      	cmp	r0, #0
 8002856:	f000 82d5 	beq.w	8002e04 <cbvprintf+0x5c4>
		if (*fp != '%') {
 800285a:	2825      	cmp	r0, #37	; 0x25
 800285c:	d008      	beq.n	8002870 <cbvprintf+0x30>
			OUTC(*fp++);
 800285e:	f109 0901 	add.w	r9, r9, #1
 8002862:	4629      	mov	r1, r5
 8002864:	47b0      	blx	r6
 8002866:	2800      	cmp	r0, #0
 8002868:	f2c0 82cd 	blt.w	8002e06 <cbvprintf+0x5c6>
 800286c:	3401      	adds	r4, #1
			continue;
 800286e:	e7ef      	b.n	8002850 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8002870:	2300      	movs	r3, #0
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	9305      	str	r3, [sp, #20]
 8002876:	9306      	str	r3, [sp, #24]
 8002878:	9307      	str	r3, [sp, #28]
 800287a:	9308      	str	r3, [sp, #32]
 800287c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 800287e:	4649      	mov	r1, r9
 8002880:	a806      	add	r0, sp, #24
 8002882:	f7ff fde3 	bl	800244c <extract_conversion>
 8002886:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8002888:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800288c:	f013 0f01 	tst.w	r3, #1
 8002890:	f000 8097 	beq.w	80029c2 <cbvprintf+0x182>
			width = va_arg(ap, int);
 8002894:	9b03      	ldr	r3, [sp, #12]
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	9203      	str	r2, [sp, #12]
 800289a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 800289c:	2f00      	cmp	r7, #0
 800289e:	f2c0 8088 	blt.w	80029b2 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 80028a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80028a6:	f013 0f04 	tst.w	r3, #4
 80028aa:	f000 809c 	beq.w	80029e6 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 80028ae:	9b03      	ldr	r3, [sp, #12]
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	9203      	str	r2, [sp, #12]
 80028b4:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 80028b8:	f1ba 0f00 	cmp.w	sl, #0
 80028bc:	f2c0 808a 	blt.w	80029d4 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 80028c4:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 80028c6:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80028ca:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 80028ce:	f89d 1019 	ldrb.w	r1, [sp, #25]
 80028d2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f000 808e 	beq.w	80029f8 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 80028dc:	2b02      	cmp	r3, #2
 80028de:	f000 80d3 	beq.w	8002a88 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	f000 8124 	beq.w	8002b30 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	f000 813b 	beq.w	8002b64 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 80028ee:	f89d 8018 	ldrb.w	r8, [sp, #24]
 80028f2:	f018 0b03 	ands.w	fp, r8, #3
 80028f6:	f040 813b 	bne.w	8002b70 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 80028fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80028fe:	3b25      	subs	r3, #37	; 0x25
 8002900:	2b53      	cmp	r3, #83	; 0x53
 8002902:	f200 81e6 	bhi.w	8002cd2 <cbvprintf+0x492>
 8002906:	e8df f013 	tbh	[pc, r3, lsl #1]
 800290a:	0140      	.short	0x0140
 800290c:	01e401e4 	.word	0x01e401e4
 8002910:	01e401e4 	.word	0x01e401e4
 8002914:	01e401e4 	.word	0x01e401e4
 8002918:	01e401e4 	.word	0x01e401e4
 800291c:	01e401e4 	.word	0x01e401e4
 8002920:	01e401e4 	.word	0x01e401e4
 8002924:	01e401e4 	.word	0x01e401e4
 8002928:	01e401e4 	.word	0x01e401e4
 800292c:	01e401e4 	.word	0x01e401e4
 8002930:	01e401e4 	.word	0x01e401e4
 8002934:	01e401e4 	.word	0x01e401e4
 8002938:	01e401e4 	.word	0x01e401e4
 800293c:	01e401e4 	.word	0x01e401e4
 8002940:	01e401e4 	.word	0x01e401e4
 8002944:	01e401e4 	.word	0x01e401e4
 8002948:	01e401e4 	.word	0x01e401e4
 800294c:	01e401e4 	.word	0x01e401e4
 8002950:	01e401e4 	.word	0x01e401e4
 8002954:	01e401e4 	.word	0x01e401e4
 8002958:	01e401e4 	.word	0x01e401e4
 800295c:	01e401e4 	.word	0x01e401e4
 8002960:	01e401e4 	.word	0x01e401e4
 8002964:	01e401e4 	.word	0x01e401e4
 8002968:	01e401e4 	.word	0x01e401e4
 800296c:	01e401e4 	.word	0x01e401e4
 8002970:	01e40181 	.word	0x01e40181
 8002974:	01e401e4 	.word	0x01e401e4
 8002978:	01e401e4 	.word	0x01e401e4
 800297c:	01e401e4 	.word	0x01e401e4
 8002980:	01e401e4 	.word	0x01e401e4
 8002984:	015e01e4 	.word	0x015e01e4
 8002988:	01e40167 	.word	0x01e40167
 800298c:	01e401e4 	.word	0x01e401e4
 8002990:	016701e4 	.word	0x016701e4
 8002994:	01e401e4 	.word	0x01e401e4
 8002998:	01e401e4 	.word	0x01e401e4
 800299c:	018101be 	.word	0x018101be
 80029a0:	01e401a2 	.word	0x01e401a2
 80029a4:	014d01e4 	.word	0x014d01e4
 80029a8:	018101e4 	.word	0x018101e4
 80029ac:	01e401e4 	.word	0x01e401e4
 80029b0:	0181      	.short	0x0181
				conv->flag_dash = true;
 80029b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 80029be:	427f      	negs	r7, r7
 80029c0:	e76f      	b.n	80028a2 <cbvprintf+0x62>
		} else if (conv->width_present) {
 80029c2:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db02      	blt.n	80029d0 <cbvprintf+0x190>
		int width = -1;
 80029ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80029ce:	e768      	b.n	80028a2 <cbvprintf+0x62>
			width = conv->width_value;
 80029d0:	9f07      	ldr	r7, [sp, #28]
 80029d2:	e766      	b.n	80028a2 <cbvprintf+0x62>
				conv->prec_present = false;
 80029d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80029d8:	f36f 0341 	bfc	r3, #1, #1
 80029dc:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 80029e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80029e4:	e76c      	b.n	80028c0 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 80029e6:	f013 0f02 	tst.w	r3, #2
 80029ea:	d002      	beq.n	80029f2 <cbvprintf+0x1b2>
			precision = conv->prec_value;
 80029ec:	f8dd a020 	ldr.w	sl, [sp, #32]
 80029f0:	e766      	b.n	80028c0 <cbvprintf+0x80>
		int precision = -1;
 80029f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80029f6:	e763      	b.n	80028c0 <cbvprintf+0x80>
			switch (length_mod) {
 80029f8:	1ecb      	subs	r3, r1, #3
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d804      	bhi.n	8002a08 <cbvprintf+0x1c8>
 80029fe:	e8df f003 	tbb	[pc, r3]
 8002a02:	1d0b      	.short	0x1d0b
 8002a04:	3529      	.short	0x3529
 8002a06:	35          	.byte	0x35
 8002a07:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002a08:	9b03      	ldr	r3, [sp, #12]
 8002a0a:	1d1a      	adds	r2, r3, #4
 8002a0c:	9203      	str	r2, [sp, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	17da      	asrs	r2, r3, #31
 8002a12:	9304      	str	r3, [sp, #16]
 8002a14:	9205      	str	r2, [sp, #20]
				break;
 8002a16:	e006      	b.n	8002a26 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002a18:	9b03      	ldr	r3, [sp, #12]
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	9203      	str	r2, [sp, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	17da      	asrs	r2, r3, #31
 8002a22:	9304      	str	r3, [sp, #16]
 8002a24:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8002a26:	2901      	cmp	r1, #1
 8002a28:	d028      	beq.n	8002a7c <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002a2a:	2902      	cmp	r1, #2
 8002a2c:	f47f af5f 	bne.w	80028ee <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002a30:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002a34:	17da      	asrs	r2, r3, #31
 8002a36:	9304      	str	r3, [sp, #16]
 8002a38:	9205      	str	r2, [sp, #20]
 8002a3a:	e758      	b.n	80028ee <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002a3c:	9b03      	ldr	r3, [sp, #12]
 8002a3e:	3307      	adds	r3, #7
 8002a40:	f023 0307 	bic.w	r3, r3, #7
 8002a44:	f103 0208 	add.w	r2, r3, #8
 8002a48:	9203      	str	r2, [sp, #12]
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002a52:	e7e8      	b.n	8002a26 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8002a54:	9b03      	ldr	r3, [sp, #12]
 8002a56:	3307      	adds	r3, #7
 8002a58:	f023 0307 	bic.w	r3, r3, #7
 8002a5c:	f103 0208 	add.w	r2, r3, #8
 8002a60:	9203      	str	r2, [sp, #12]
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002a66:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002a6a:	e7dc      	b.n	8002a26 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002a6c:	9b03      	ldr	r3, [sp, #12]
 8002a6e:	1d1a      	adds	r2, r3, #4
 8002a70:	9203      	str	r2, [sp, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	17da      	asrs	r2, r3, #31
				value->sint =
 8002a76:	9304      	str	r3, [sp, #16]
 8002a78:	9205      	str	r2, [sp, #20]
				break;
 8002a7a:	e7d4      	b.n	8002a26 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8002a7c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a80:	9304      	str	r3, [sp, #16]
 8002a82:	2300      	movs	r3, #0
 8002a84:	9305      	str	r3, [sp, #20]
 8002a86:	e732      	b.n	80028ee <cbvprintf+0xae>
			switch (length_mod) {
 8002a88:	1ecb      	subs	r3, r1, #3
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d804      	bhi.n	8002a98 <cbvprintf+0x258>
 8002a8e:	e8df f003 	tbb	[pc, r3]
 8002a92:	1f0b      	.short	0x1f0b
 8002a94:	4135      	.short	0x4135
 8002a96:	41          	.byte	0x41
 8002a97:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8002a98:	9b03      	ldr	r3, [sp, #12]
 8002a9a:	1d1a      	adds	r2, r3, #4
 8002a9c:	9203      	str	r2, [sp, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	9304      	str	r3, [sp, #16]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9305      	str	r3, [sp, #20]
				break;
 8002aa6:	e01e      	b.n	8002ae6 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8002aa8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8002aac:	2b63      	cmp	r3, #99	; 0x63
 8002aae:	d007      	beq.n	8002ac0 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	9203      	str	r2, [sp, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	9304      	str	r3, [sp, #16]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9305      	str	r3, [sp, #20]
 8002abe:	e012      	b.n	8002ae6 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002ac0:	9b03      	ldr	r3, [sp, #12]
 8002ac2:	1d1a      	adds	r2, r3, #4
 8002ac4:	9203      	str	r2, [sp, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	9304      	str	r3, [sp, #16]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9305      	str	r3, [sp, #20]
 8002ace:	e00a      	b.n	8002ae6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002ad0:	9b03      	ldr	r3, [sp, #12]
 8002ad2:	3307      	adds	r3, #7
 8002ad4:	f023 0307 	bic.w	r3, r3, #7
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	9203      	str	r2, [sp, #12]
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002ae2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8002ae6:	2901      	cmp	r1, #1
 8002ae8:	d01c      	beq.n	8002b24 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002aea:	2902      	cmp	r1, #2
 8002aec:	f47f aeff 	bne.w	80028ee <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002af0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002af4:	9304      	str	r3, [sp, #16]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9305      	str	r3, [sp, #20]
 8002afa:	e6f8      	b.n	80028ee <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002afc:	9b03      	ldr	r3, [sp, #12]
 8002afe:	3307      	adds	r3, #7
 8002b00:	f023 0307 	bic.w	r3, r3, #7
 8002b04:	f103 0208 	add.w	r2, r3, #8
 8002b08:	9203      	str	r2, [sp, #12]
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002b0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002b12:	e7e8      	b.n	8002ae6 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	9203      	str	r2, [sp, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9305      	str	r3, [sp, #20]
				break;
 8002b22:	e7e0      	b.n	8002ae6 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8002b24:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9305      	str	r3, [sp, #20]
 8002b2e:	e6de      	b.n	80028ee <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002b30:	2908      	cmp	r1, #8
 8002b32:	d00b      	beq.n	8002b4c <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8002b34:	9b03      	ldr	r3, [sp, #12]
 8002b36:	3307      	adds	r3, #7
 8002b38:	f023 0307 	bic.w	r3, r3, #7
 8002b3c:	f103 0208 	add.w	r2, r3, #8
 8002b40:	9203      	str	r2, [sp, #12]
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b4a:	e6d0      	b.n	80028ee <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002b4c:	9b03      	ldr	r3, [sp, #12]
 8002b4e:	3307      	adds	r3, #7
 8002b50:	f023 0307 	bic.w	r3, r3, #7
 8002b54:	f103 0208 	add.w	r2, r3, #8
 8002b58:	9203      	str	r2, [sp, #12]
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b62:	e6c4      	b.n	80028ee <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8002b64:	9b03      	ldr	r3, [sp, #12]
 8002b66:	1d1a      	adds	r2, r3, #4
 8002b68:	9203      	str	r2, [sp, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	e6be      	b.n	80028ee <cbvprintf+0xae>
			OUTS(sp, fp);
 8002b70:	9f02      	ldr	r7, [sp, #8]
 8002b72:	463b      	mov	r3, r7
 8002b74:	464a      	mov	r2, r9
 8002b76:	4629      	mov	r1, r5
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f008 fc98 	bl	800b4ae <outs>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	f2c0 8141 	blt.w	8002e06 <cbvprintf+0x5c6>
 8002b84:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8002b86:	46b9      	mov	r9, r7
			continue;
 8002b88:	e662      	b.n	8002850 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	2025      	movs	r0, #37	; 0x25
 8002b8e:	47b0      	blx	r6
 8002b90:	2800      	cmp	r0, #0
 8002b92:	f2c0 8138 	blt.w	8002e06 <cbvprintf+0x5c6>
 8002b96:	3401      	adds	r4, #1
		char sign = 0;
 8002b98:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002b9a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002b9e:	f04f 0900 	mov.w	r9, #0
			break;
 8002ba2:	e09b      	b.n	8002cdc <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8002ba4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8002ba8:	f1ba 0f00 	cmp.w	sl, #0
 8002bac:	db07      	blt.n	8002bbe <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8002bae:	4651      	mov	r1, sl
 8002bb0:	4648      	mov	r0, r9
 8002bb2:	f00a fcbd 	bl	800d530 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8002bb6:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002bba:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002bbc:	e08e      	b.n	8002cdc <cbvprintf+0x49c>
				len = strlen(bps);
 8002bbe:	4648      	mov	r0, r9
 8002bc0:	f7fe f8bd 	bl	8000d3e <strlen>
 8002bc4:	e7f7      	b.n	8002bb6 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002bc6:	9b04      	ldr	r3, [sp, #16]
 8002bc8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002bcc:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002bce:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8002bd2:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8002bd6:	e081      	b.n	8002cdc <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002bd8:	f018 0f08 	tst.w	r8, #8
 8002bdc:	d105      	bne.n	8002bea <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002bde:	f018 0810 	ands.w	r8, r8, #16
 8002be2:	d004      	beq.n	8002bee <cbvprintf+0x3ae>
				sign = ' ';
 8002be4:	f04f 0820 	mov.w	r8, #32
 8002be8:	e001      	b.n	8002bee <cbvprintf+0x3ae>
				sign = '+';
 8002bea:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002bee:	9a04      	ldr	r2, [sp, #16]
 8002bf0:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db02      	blt.n	8002bfc <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8002bf6:	9204      	str	r2, [sp, #16]
 8002bf8:	9305      	str	r3, [sp, #20]
 8002bfa:	e008      	b.n	8002c0e <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002c02:	9204      	str	r2, [sp, #16]
 8002c04:	9305      	str	r3, [sp, #20]
				sign = '-';
 8002c06:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002c0a:	e000      	b.n	8002c0e <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002c0c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002c0e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	ab0a      	add	r3, sp, #40	; 0x28
 8002c16:	aa06      	add	r2, sp, #24
 8002c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c1c:	f7ff fda0 	bl	8002760 <encode_uint>
 8002c20:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8002c22:	f1ba 0f00 	cmp.w	sl, #0
 8002c26:	f2c0 8088 	blt.w	8002d3a <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002c2a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002c2e:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8002c32:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002c36:	f36f 1286 	bfc	r2, #6, #1
 8002c3a:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002c3e:	459a      	cmp	sl, r3
 8002c40:	d97e      	bls.n	8002d40 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8002c42:	ebaa 0303 	sub.w	r3, sl, r3
 8002c46:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002c48:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002c4c:	e046      	b.n	8002cdc <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002c4e:	9804      	ldr	r0, [sp, #16]
 8002c50:	b928      	cbnz	r0, 8002c5e <cbvprintf+0x41e>
		char sign = 0;
 8002c52:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8002c54:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002e0c <cbvprintf+0x5cc>
			bps = "(nil)";
 8002c58:	f1aa 0905 	sub.w	r9, sl, #5
 8002c5c:	e03e      	b.n	8002cdc <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002c5e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	ab0a      	add	r3, sp, #40	; 0x28
 8002c66:	aa06      	add	r2, sp, #24
 8002c68:	2100      	movs	r1, #0
 8002c6a:	f7ff fd79 	bl	8002760 <encode_uint>
 8002c6e:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8002c70:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8002c7c:	2378      	movs	r3, #120	; 0x78
 8002c7e:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 8002c82:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8002c84:	e7cd      	b.n	8002c22 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8002c86:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8002c88:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002c8c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002c90:	2b07      	cmp	r3, #7
 8002c92:	d806      	bhi.n	8002ca2 <cbvprintf+0x462>
 8002c94:	e8df f003 	tbb	[pc, r3]
 8002c98:	0f0d0b04 	.word	0x0f0d0b04
 8002c9c:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8002ca0:	6014      	str	r4, [r2, #0]
		char sign = 0;
 8002ca2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002ca4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002ca8:	f04f 0900 	mov.w	r9, #0
}
 8002cac:	e016      	b.n	8002cdc <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8002cae:	7014      	strb	r4, [r2, #0]
		break;
 8002cb0:	e7f7      	b.n	8002ca2 <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8002cb2:	8014      	strh	r4, [r2, #0]
		break;
 8002cb4:	e7f5      	b.n	8002ca2 <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8002cb6:	6014      	str	r4, [r2, #0]
		break;
 8002cb8:	e7f3      	b.n	8002ca2 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8002cba:	17e3      	asrs	r3, r4, #31
 8002cbc:	6014      	str	r4, [r2, #0]
 8002cbe:	6053      	str	r3, [r2, #4]
		break;
 8002cc0:	e7ef      	b.n	8002ca2 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8002cc2:	17e3      	asrs	r3, r4, #31
 8002cc4:	6014      	str	r4, [r2, #0]
 8002cc6:	6053      	str	r3, [r2, #4]
		break;
 8002cc8:	e7eb      	b.n	8002ca2 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002cca:	6014      	str	r4, [r2, #0]
		break;
 8002ccc:	e7e9      	b.n	8002ca2 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002cce:	6014      	str	r4, [r2, #0]
		break;
 8002cd0:	e7e7      	b.n	8002ca2 <cbvprintf+0x462>
		switch (conv->specifier) {
 8002cd2:	46d8      	mov	r8, fp
 8002cd4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002cd8:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002cdc:	f1b9 0f00 	cmp.w	r9, #0
 8002ce0:	f000 808d 	beq.w	8002dfe <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8002ce4:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002ce8:	f1b8 0f00 	cmp.w	r8, #0
 8002cec:	d000      	beq.n	8002cf0 <cbvprintf+0x4b0>
			nj_len += 1U;
 8002cee:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002cf0:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8002cf4:	f011 0f10 	tst.w	r1, #16
 8002cf8:	d025      	beq.n	8002d46 <cbvprintf+0x506>
			nj_len += 2U;
 8002cfa:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002cfc:	9b07      	ldr	r3, [sp, #28]
 8002cfe:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002d00:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d04:	d001      	beq.n	8002d0a <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8002d06:	9a08      	ldr	r2, [sp, #32]
 8002d08:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002d0a:	2f00      	cmp	r7, #0
 8002d0c:	dd31      	ble.n	8002d72 <cbvprintf+0x532>
			width -= (int)nj_len;
 8002d0e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002d10:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002d14:	f013 0f04 	tst.w	r3, #4
 8002d18:	d12b      	bne.n	8002d72 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8002d1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d1e:	d017      	beq.n	8002d50 <cbvprintf+0x510>
					if (sign != 0) {
 8002d20:	f1b8 0f00 	cmp.w	r8, #0
 8002d24:	d017      	beq.n	8002d56 <cbvprintf+0x516>
						OUTC(sign);
 8002d26:	4629      	mov	r1, r5
 8002d28:	4640      	mov	r0, r8
 8002d2a:	47b0      	blx	r6
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	db6a      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002d30:	3401      	adds	r4, #1
						sign = 0;
 8002d32:	46d8      	mov	r8, fp
					}
					pad = '0';
 8002d34:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002d38:	e00f      	b.n	8002d5a <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8002d3a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002d3e:	e7cd      	b.n	8002cdc <cbvprintf+0x49c>
 8002d40:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002d44:	e7ca      	b.n	8002cdc <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8002d46:	f011 0f08 	tst.w	r1, #8
 8002d4a:	d0d7      	beq.n	8002cfc <cbvprintf+0x4bc>
			nj_len += 1U;
 8002d4c:	3201      	adds	r2, #1
 8002d4e:	e7d5      	b.n	8002cfc <cbvprintf+0x4bc>
				char pad = ' ';
 8002d50:	f04f 0b20 	mov.w	fp, #32
 8002d54:	e001      	b.n	8002d5a <cbvprintf+0x51a>
					pad = '0';
 8002d56:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002d5a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8002d5c:	1e5f      	subs	r7, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	dd07      	ble.n	8002d72 <cbvprintf+0x532>
					OUTC(pad);
 8002d62:	4629      	mov	r1, r5
 8002d64:	4658      	mov	r0, fp
 8002d66:	47b0      	blx	r6
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	db4c      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002d6c:	3401      	adds	r4, #1
				while (width-- > 0) {
 8002d6e:	463b      	mov	r3, r7
 8002d70:	e7f4      	b.n	8002d5c <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 8002d72:	f1b8 0f00 	cmp.w	r8, #0
 8002d76:	d005      	beq.n	8002d84 <cbvprintf+0x544>
			OUTC(sign);
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	47b0      	blx	r6
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	db41      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002d82:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8002d84:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002d88:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002d8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	d005      	beq.n	8002da0 <cbvprintf+0x560>
				OUTC('0');
 8002d94:	4629      	mov	r1, r5
 8002d96:	2030      	movs	r0, #48	; 0x30
 8002d98:	47b0      	blx	r6
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	db33      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002d9e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8002da0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002da4:	f013 0f10 	tst.w	r3, #16
 8002da8:	d006      	beq.n	8002db8 <cbvprintf+0x578>
				OUTC(conv->specifier);
 8002daa:	4629      	mov	r1, r5
 8002dac:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8002db0:	47b0      	blx	r6
 8002db2:	2800      	cmp	r0, #0
 8002db4:	db27      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002db6:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002db8:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002dba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dd07      	ble.n	8002dd2 <cbvprintf+0x592>
				OUTC('0');
 8002dc2:	4629      	mov	r1, r5
 8002dc4:	2030      	movs	r0, #48	; 0x30
 8002dc6:	47b0      	blx	r6
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	db1c      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002dcc:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002dce:	4643      	mov	r3, r8
 8002dd0:	e7f3      	b.n	8002dba <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8002dd2:	4653      	mov	r3, sl
 8002dd4:	464a      	mov	r2, r9
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f008 fb68 	bl	800b4ae <outs>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	db11      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002de2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8002de4:	2f00      	cmp	r7, #0
 8002de6:	dd07      	ble.n	8002df8 <cbvprintf+0x5b8>
			OUTC(' ');
 8002de8:	4629      	mov	r1, r5
 8002dea:	2020      	movs	r0, #32
 8002dec:	47b0      	blx	r6
 8002dee:	2800      	cmp	r0, #0
 8002df0:	db09      	blt.n	8002e06 <cbvprintf+0x5c6>
 8002df2:	3401      	adds	r4, #1
			--width;
 8002df4:	3f01      	subs	r7, #1
 8002df6:	e7f5      	b.n	8002de4 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002df8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002dfc:	e528      	b.n	8002850 <cbvprintf+0x10>
 8002dfe:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002e02:	e525      	b.n	8002850 <cbvprintf+0x10>
		}
	}

	return count;
 8002e04:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8002e06:	b011      	add	sp, #68	; 0x44
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	0800e1d9 	.word	0x0800e1d9

08002e10 <stm32l1_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32l1_init(const struct device *arg)
{
 8002e10:	b082      	sub	sp, #8
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002e12:	f04f 0210 	mov.w	r2, #16
 8002e16:	f3ef 8311 	mrs	r3, BASEPRI
 8002e1a:	f382 8812 	msr	BASEPRI_MAX, r2
 8002e1e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 2.1 MHz from MSI */
	SystemCoreClock = 2097000;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <stm32l1_init+0x48>)
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <stm32l1_init+0x4c>)
 8002e2e:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <stm32l1_init+0x50>)
 8002e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e42:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <stm32l1_init+0x54>)
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e50:	6013      	str	r3, [r2, #0]
	 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);

	return 0;
}
 8002e52:	2000      	movs	r0, #0
 8002e54:	b002      	add	sp, #8
 8002e56:	4770      	bx	lr
 8002e58:	200000b0 	.word	0x200000b0
 8002e5c:	001fff68 	.word	0x001fff68
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40007000 	.word	0x40007000

08002e68 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <is_rodata+0x18>)
 8002e6a:	4298      	cmp	r0, r3
 8002e6c:	d304      	bcc.n	8002e78 <is_rodata+0x10>
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <is_rodata+0x1c>)
 8002e70:	4298      	cmp	r0, r3
 8002e72:	d303      	bcc.n	8002e7c <is_rodata+0x14>
 8002e74:	2000      	movs	r0, #0
 8002e76:	4770      	bx	lr
 8002e78:	2000      	movs	r0, #0
 8002e7a:	4770      	bx	lr
 8002e7c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 8002e7e:	4770      	bx	lr
 8002e80:	0800d998 	.word	0x0800d998
 8002e84:	0800f22c 	.word	0x0800f22c

08002e88 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8002e88:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <thread_set+0x1c>)
 8002e8c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002e8e:	b118      	cbz	r0, 8002e98 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <thread_set+0x20>)
 8002e92:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	dc00      	bgt.n	8002e9a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8002e98:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8002e9a:	4804      	ldr	r0, [pc, #16]	; (8002eac <thread_set+0x24>)
 8002e9c:	f005 fab6 	bl	800840c <z_impl_k_sem_give>
}
 8002ea0:	e7fa      	b.n	8002e98 <thread_set+0x10>
 8002ea2:	bf00      	nop
 8002ea4:	20000954 	.word	0x20000954
 8002ea8:	20000920 	.word	0x20000920
 8002eac:	2000049c 	.word	0x2000049c

08002eb0 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8002eb0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <log_process_thread_timer_expiry_fn+0xc>)
 8002eb4:	f005 faaa 	bl	800840c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8002eb8:	bd08      	pop	{r3, pc}
 8002eba:	bf00      	nop
 8002ebc:	2000049c 	.word	0x2000049c

08002ec0 <next_pending>:
{
 8002ec0:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <next_pending+0x10>)
 8002ec4:	f008 fb1e 	bl	800b504 <log_list_head_peek>
}
 8002ec8:	3800      	subs	r0, #0
 8002eca:	bf18      	it	ne
 8002ecc:	2001      	movne	r0, #1
 8002ece:	bd08      	pop	{r3, pc}
 8002ed0:	2000092c 	.word	0x2000092c

08002ed4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002ed4:	b530      	push	{r4, r5, lr}
 8002ed6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8002ed8:	2200      	movs	r2, #0
 8002eda:	490f      	ldr	r1, [pc, #60]	; (8002f18 <enable_logger+0x44>)
 8002edc:	480f      	ldr	r0, [pc, #60]	; (8002f1c <enable_logger+0x48>)
 8002ede:	f00a f943 	bl	800d168 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002ee2:	4d0f      	ldr	r5, [pc, #60]	; (8002f20 <enable_logger+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002eec:	2400      	movs	r4, #0
 8002eee:	9404      	str	r4, [sp, #16]
 8002ef0:	230e      	movs	r3, #14
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	9402      	str	r4, [sp, #8]
 8002ef6:	9401      	str	r4, [sp, #4]
 8002ef8:	9400      	str	r4, [sp, #0]
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <enable_logger+0x50>)
 8002efc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f00:	4909      	ldr	r1, [pc, #36]	; (8002f28 <enable_logger+0x54>)
 8002f02:	4628      	mov	r0, r5
 8002f04:	f009 fe5b 	bl	800cbbe <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002f08:	4908      	ldr	r1, [pc, #32]	; (8002f2c <enable_logger+0x58>)
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f009 fe43 	bl	800cb96 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8002f10:	4620      	mov	r0, r4
 8002f12:	b009      	add	sp, #36	; 0x24
 8002f14:	bd30      	pop	{r4, r5, pc}
 8002f16:	bf00      	nop
 8002f18:	08002eb1 	.word	0x08002eb1
 8002f1c:	20000670 	.word	0x20000670
 8002f20:	200006a8 	.word	0x200006a8
 8002f24:	08003585 	.word	0x08003585
 8002f28:	20001ae0 	.word	0x20001ae0
 8002f2c:	0800e1dc 	.word	0x0800e1dc

08002f30 <z_log_get_s_mask>:
{
 8002f30:	b530      	push	{r4, r5, lr}
 8002f32:	4603      	mov	r3, r0
	uint32_t mask = 0U;
 8002f34:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8002f36:	4684      	mov	ip, r0
	bool arm = false;
 8002f38:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 8002f3a:	e001      	b.n	8002f40 <z_log_get_s_mask+0x10>
			arm = !arm;
 8002f3c:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 8002f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f44:	b1b2      	cbz	r2, 8002f74 <z_log_get_s_mask+0x44>
 8002f46:	458c      	cmp	ip, r1
 8002f48:	d214      	bcs.n	8002f74 <z_log_get_s_mask+0x44>
		if (curr == '%') {
 8002f4a:	2a25      	cmp	r2, #37	; 0x25
 8002f4c:	d0f6      	beq.n	8002f3c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 8002f4e:	2c00      	cmp	r4, #0
 8002f50:	d0f6      	beq.n	8002f40 <z_log_get_s_mask+0x10>
 8002f52:	4d09      	ldr	r5, [pc, #36]	; (8002f78 <z_log_get_s_mask+0x48>)
 8002f54:	f812 e005 	ldrb.w	lr, [r2, r5]
 8002f58:	f01e 0f03 	tst.w	lr, #3
 8002f5c:	d0f0      	beq.n	8002f40 <z_log_get_s_mask+0x10>
			if (curr == 's') {
 8002f5e:	2a73      	cmp	r2, #115	; 0x73
 8002f60:	d003      	beq.n	8002f6a <z_log_get_s_mask+0x3a>
			arg++;
 8002f62:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
 8002f66:	2400      	movs	r4, #0
 8002f68:	e7ea      	b.n	8002f40 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	fa02 f20c 	lsl.w	r2, r2, ip
 8002f70:	4310      	orrs	r0, r2
 8002f72:	e7f6      	b.n	8002f62 <z_log_get_s_mask+0x32>
}
 8002f74:	bd30      	pop	{r4, r5, pc}
 8002f76:	bf00      	nop
 8002f78:	0800efb5 	.word	0x0800efb5

08002f7c <log_core_init>:
{
 8002f7c:	b508      	push	{r3, lr}
	panic_mode = false;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <log_core_init+0x34>)
 8002f82:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <log_core_init+0x38>)
 8002f86:	6013      	str	r3, [r2, #0]
		timestamp_func = default_lf_get_timestamp;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <log_core_init+0x3c>)
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <log_core_init+0x40>)
 8002f8c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8002f8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f92:	f000 fd7d 	bl	8003a90 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8002f96:	f000 fb5b 	bl	8003650 <log_msg_pool_init>
		log_list_init(&list);
 8002f9a:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <log_core_init+0x44>)
 8002f9c:	f008 faa4 	bl	800b4e8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	2228      	movs	r2, #40	; 0x28
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <log_core_init+0x48>)
 8002fa6:	4808      	ldr	r0, [pc, #32]	; (8002fc8 <log_core_init+0x4c>)
 8002fa8:	f009 fda6 	bl	800caf8 <k_mem_slab_init>
}
 8002fac:	bd08      	pop	{r3, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000e79 	.word	0x20000e79
 8002fb4:	20000924 	.word	0x20000924
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	0800b51d 	.word	0x0800b51d
 8002fc0:	2000092c 	.word	0x2000092c
 8002fc4:	20003b80 	.word	0x20003b80
 8002fc8:	20000934 	.word	0x20000934

08002fcc <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <log_init+0x64>)
 8002fce:	f3bf 8f5b 	dmb	ish
 8002fd2:	e853 2f00 	ldrex	r2, [r3]
 8002fd6:	1c51      	adds	r1, r2, #1
 8002fd8:	e843 1000 	strex	r0, r1, [r3]
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1f8      	bne.n	8002fd2 <log_init+0x6>
 8002fe0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8002fe4:	bb1a      	cbnz	r2, 800302e <log_init+0x62>
{
 8002fe6:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8002fe8:	2400      	movs	r4, #0
 8002fea:	e009      	b.n	8003000 <log_init+0x34>
					   backend->cb->ctx,
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <log_init+0x68>)
 8002fee:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002ff2:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 fb05 	bl	8003608 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8002ffe:	3401      	adds	r4, #1
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <log_init+0x6c>)
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <log_init+0x68>)
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800300a:	da0f      	bge.n	800302c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 800300c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800300e:	4d09      	ldr	r5, [pc, #36]	; (8003034 <log_init+0x68>)
 8003010:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8003014:	7b2b      	ldrb	r3, [r5, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f1      	beq.n	8002ffe <log_init+0x32>
			if (backend->api->init != NULL) {
 800301a:	0123      	lsls	r3, r4, #4
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <log_init+0x68>)
 800301e:	58d3      	ldr	r3, [r2, r3]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0e2      	beq.n	8002fec <log_init+0x20>
				backend->api->init(backend);
 8003026:	4628      	mov	r0, r5
 8003028:	4798      	blx	r3
 800302a:	e7df      	b.n	8002fec <log_init+0x20>
}
 800302c:	bd70      	pop	{r4, r5, r6, pc}
 800302e:	4770      	bx	lr
 8003030:	20000928 	.word	0x20000928
 8003034:	0800dd78 	.word	0x0800dd78
 8003038:	0800dd88 	.word	0x0800dd88

0800303c <get_msg>:
{
 800303c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800303e:	f04f 0310 	mov.w	r3, #16
 8003042:	f3ef 8411 	mrs	r4, BASEPRI
 8003046:	f383 8812 	msr	BASEPRI_MAX, r3
 800304a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <get_msg+0x24>)
 8003050:	f008 fa5a 	bl	800b508 <log_list_head_get>
	__asm__ volatile(
 8003054:	f384 8811 	msr	BASEPRI, r4
 8003058:	f3bf 8f6f 	isb	sy
}
 800305c:	bd10      	pop	{r4, pc}
 800305e:	bf00      	nop
 8003060:	2000092c 	.word	0x2000092c

08003064 <z_log_notify_backend_enabled>:
{
 8003064:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <z_log_notify_backend_enabled+0x18>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b11b      	cbz	r3, 8003074 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <z_log_notify_backend_enabled+0x18>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
}
 8003072:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <z_log_notify_backend_enabled+0x1c>)
 8003076:	f005 f9c9 	bl	800840c <z_impl_k_sem_give>
}
 800307a:	e7f7      	b.n	800306c <z_log_notify_backend_enabled+0x8>
 800307c:	20000e78 	.word	0x20000e78
 8003080:	2000049c 	.word	0x2000049c

08003084 <z_log_dropped>:
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <z_log_dropped+0x1c>)
 8003086:	f3bf 8f5b 	dmb	ish
 800308a:	e853 2f00 	ldrex	r2, [r3]
 800308e:	3201      	adds	r2, #1
 8003090:	e843 2100 	strex	r1, r2, [r3]
 8003094:	2900      	cmp	r1, #0
 8003096:	d1f8      	bne.n	800308a <z_log_dropped+0x6>
 8003098:	f3bf 8f5b 	dmb	ish
}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000924 	.word	0x20000924

080030a4 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <z_log_dropped_read_and_clear+0x1c>)
}
 80030a6:	2000      	movs	r0, #0
 80030a8:	4602      	mov	r2, r0
 80030aa:	f3bf 8f5b 	dmb	ish
 80030ae:	e853 0f00 	ldrex	r0, [r3]
 80030b2:	e843 2100 	strex	r1, r2, [r3]
 80030b6:	2900      	cmp	r1, #0
 80030b8:	d1f9      	bne.n	80030ae <z_log_dropped_read_and_clear+0xa>
 80030ba:	f3bf 8f5b 	dmb	ish
 80030be:	4770      	bx	lr
 80030c0:	20000924 	.word	0x20000924

080030c4 <dropped_notify>:
{
 80030c4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80030c6:	f7ff ffed 	bl	80030a4 <z_log_dropped_read_and_clear>
 80030ca:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 80030cc:	2400      	movs	r4, #0
 80030ce:	e000      	b.n	80030d2 <dropped_notify+0xe>
 80030d0:	3401      	adds	r4, #1
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <dropped_notify+0x3c>)
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <dropped_notify+0x40>)
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80030dc:	da0f      	bge.n	80030fe <dropped_notify+0x3a>
 80030de:	4809      	ldr	r0, [pc, #36]	; (8003104 <dropped_notify+0x40>)
 80030e0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80030e4:	6843      	ldr	r3, [r0, #4]
 80030e6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 80030ec:	0123      	lsls	r3, r4, #4
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <dropped_notify+0x40>)
 80030f0:	58d3      	ldr	r3, [r2, r3]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0eb      	beq.n	80030d0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 80030f8:	4629      	mov	r1, r5
 80030fa:	4798      	blx	r3
 80030fc:	e7e8      	b.n	80030d0 <dropped_notify+0xc>
}
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	0800dd88 	.word	0x0800dd88
 8003104:	0800dd78 	.word	0x0800dd78

08003108 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <z_log_dropped_pending+0x10>)
 800310a:	6818      	ldr	r0, [r3, #0]
}
 800310c:	2800      	cmp	r0, #0
 800310e:	bfd4      	ite	le
 8003110:	2000      	movle	r0, #0
 8003112:	2001      	movgt	r0, #1
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000924 	.word	0x20000924

0800311c <z_log_strdup>:
{
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
 8003122:	f7ff fea1 	bl	8002e68 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8003126:	bb10      	cbnz	r0, 800316e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8003128:	2200      	movs	r2, #0
 800312a:	2300      	movs	r3, #0
 800312c:	a901      	add	r1, sp, #4
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <z_log_strdup+0x58>)
 8003130:	f004 ff30 	bl	8007f94 <k_mem_slab_alloc>
	if (err != 0) {
 8003134:	b108      	cbz	r0, 800313a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 8003136:	4c10      	ldr	r4, [pc, #64]	; (8003178 <z_log_strdup+0x5c>)
 8003138:	e019      	b.n	800316e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 800313a:	9b01      	ldr	r3, [sp, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f3bf 8f5b 	dmb	ish
 8003142:	e853 1f00 	ldrex	r1, [r3]
 8003146:	e843 2000 	strex	r0, r2, [r3]
 800314a:	2800      	cmp	r0, #0
 800314c:	d1f9      	bne.n	8003142 <z_log_strdup+0x26>
 800314e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8003152:	9d01      	ldr	r5, [sp, #4]
 8003154:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8003156:	221f      	movs	r2, #31
 8003158:	4621      	mov	r1, r4
 800315a:	4630      	mov	r0, r6
 800315c:	f00a f9d5 	bl	800d50a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8003160:	237e      	movs	r3, #126	; 0x7e
 8003162:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8003166:	2300      	movs	r3, #0
 8003168:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
 800316c:	4634      	mov	r4, r6
}
 800316e:	4620      	mov	r0, r4
 8003170:	b002      	add	sp, #8
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	20000934 	.word	0x20000934
 8003178:	0800e1e4 	.word	0x0800e1e4

0800317c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 800317c:	b138      	cbz	r0, 800318e <log_is_strdup+0x12>
 800317e:	4a07      	ldr	r2, [pc, #28]	; (800319c <log_is_strdup+0x20>)
 8003180:	4290      	cmp	r0, r2
 8003182:	d306      	bcc.n	8003192 <log_is_strdup+0x16>
 8003184:	32a0      	adds	r2, #160	; 0xa0
 8003186:	4290      	cmp	r0, r2
 8003188:	d305      	bcc.n	8003196 <log_is_strdup+0x1a>
 800318a:	2000      	movs	r0, #0
 800318c:	4770      	bx	lr
 800318e:	2000      	movs	r0, #0
 8003190:	4770      	bx	lr
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr
 8003196:	2001      	movs	r0, #1
}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20003b80 	.word	0x20003b80

080031a0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80031a0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 80031a2:	f013 0f01 	tst.w	r3, #1
 80031a6:	d000      	beq.n	80031aa <detect_missed_strdup+0xa>
 80031a8:	4770      	bx	lr
{
 80031aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031ae:	b083      	sub	sp, #12
 80031b0:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 80031b2:	f008 fa50 	bl	800b656 <log_msg_str_get>
 80031b6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 80031b8:	4630      	mov	r0, r6
 80031ba:	f008 fa37 	bl	800b62c <log_msg_nargs_get>
 80031be:	4601      	mov	r1, r0
 80031c0:	4638      	mov	r0, r7
 80031c2:	f7ff feb5 	bl	8002f30 <z_log_get_s_mask>
 80031c6:	4605      	mov	r5, r0
	while (mask) {
 80031c8:	e004      	b.n	80031d4 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 80031ca:	2201      	movs	r2, #1
 80031cc:	fa02 f404 	lsl.w	r4, r2, r4
 80031d0:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 80031d4:	b36d      	cbz	r5, 8003232 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 80031d6:	fab5 f485 	clz	r4, r5
 80031da:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 80031de:	4621      	mov	r1, r4
 80031e0:	4630      	mov	r0, r6
 80031e2:	f008 fa26 	bl	800b632 <log_msg_arg_get>
 80031e6:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 80031e8:	f7ff fe3e 	bl	8002e68 <is_rodata>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d1ec      	bne.n	80031ca <detect_missed_strdup+0x2a>
 80031f0:	4648      	mov	r0, r9
 80031f2:	f7ff ffc3 	bl	800317c <log_is_strdup>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d1e7      	bne.n	80031ca <detect_missed_strdup+0x2a>
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <detect_missed_strdup+0x98>)
 80031fc:	4599      	cmp	r9, r3
 80031fe:	d0e4      	beq.n	80031ca <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8003200:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8003202:	f3c1 1189 	ubfx	r1, r1, #6, #10
 8003206:	f000 f9ef 	bl	80035e8 <log_source_name_get>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <detect_missed_strdup+0x9c>)
 800320e:	490c      	ldr	r1, [pc, #48]	; (8003240 <detect_missed_strdup+0xa0>)
 8003210:	1a5b      	subs	r3, r3, r1
 8003212:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8003214:	2101      	movs	r1, #1
 8003216:	f361 0802 	bfi	r8, r1, #0, #3
 800321a:	f36f 08c5 	bfc	r8, #3, #3
 800321e:	f363 188f 	bfi	r8, r3, #6, #10
 8003222:	f8ad 8000 	strh.w	r8, [sp]
 8003226:	463b      	mov	r3, r7
 8003228:	4621      	mov	r1, r4
 800322a:	4806      	ldr	r0, [pc, #24]	; (8003244 <detect_missed_strdup+0xa4>)
 800322c:	f000 f8b2 	bl	8003394 <log_3>
 8003230:	e7cb      	b.n	80031ca <detect_missed_strdup+0x2a>
}
 8003232:	b003      	add	sp, #12
 8003234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003238:	0800e1e4 	.word	0x0800e1e4
 800323c:	0800dd38 	.word	0x0800dd38
 8003240:	0800dd28 	.word	0x0800dd28
 8003244:	0800e200 	.word	0x0800e200

08003248 <msg_process>:
{
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4606      	mov	r6, r0
	if (!bypass) {
 800324c:	bb19      	cbnz	r1, 8003296 <msg_process+0x4e>
		    !panic_mode) {
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <msg_process+0x58>)
 8003250:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8003252:	b10b      	cbz	r3, 8003258 <msg_process+0x10>
{
 8003254:	2400      	movs	r4, #0
 8003256:	e003      	b.n	8003260 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
 8003258:	f7ff ffa2 	bl	80031a0 <detect_missed_strdup>
 800325c:	e7fa      	b.n	8003254 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 800325e:	3401      	adds	r4, #1
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <msg_process+0x5c>)
 8003262:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <msg_process+0x60>)
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800326a:	da14      	bge.n	8003296 <msg_process+0x4e>
	return &__log_backends_start[idx];
 800326c:	4d0e      	ldr	r5, [pc, #56]	; (80032a8 <msg_process+0x60>)
 800326e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8003272:	686b      	ldr	r3, [r5, #4]
 8003274:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f1      	beq.n	800325e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 800327a:	4631      	mov	r1, r6
 800327c:	4628      	mov	r0, r5
 800327e:	f008 f94b 	bl	800b518 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8003282:	2800      	cmp	r0, #0
 8003284:	d0eb      	beq.n	800325e <msg_process+0x16>
	backend->api->put(backend, msg);
 8003286:	0127      	lsls	r7, r4, #4
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <msg_process+0x60>)
 800328a:	59db      	ldr	r3, [r3, r7]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4631      	mov	r1, r6
 8003290:	4628      	mov	r0, r5
 8003292:	4798      	blx	r3
}
 8003294:	e7e3      	b.n	800325e <msg_process+0x16>
			log_msg_put(msg.msg);
 8003296:	4630      	mov	r0, r6
 8003298:	f008 f9df 	bl	800b65a <log_msg_put>
}
 800329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000e79 	.word	0x20000e79
 80032a4:	0800dd88 	.word	0x0800dd88
 80032a8:	0800dd78 	.word	0x0800dd78

080032ac <z_impl_log_process>:
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <z_impl_log_process+0x48>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b903      	cbnz	r3, 80032b8 <z_impl_log_process+0xc>
 80032b6:	b1c8      	cbz	r0, 80032ec <z_impl_log_process+0x40>
	msg = get_msg();
 80032b8:	f7ff fec0 	bl	800303c <get_msg>
	if (msg.msg) {
 80032bc:	4602      	mov	r2, r0
 80032be:	b178      	cbz	r0, 80032e0 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <z_impl_log_process+0x4c>)
 80032c2:	f3bf 8f5b 	dmb	ish
 80032c6:	e853 1f00 	ldrex	r1, [r3]
 80032ca:	3901      	subs	r1, #1
 80032cc:	e843 1000 	strex	r0, r1, [r3]
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1f8      	bne.n	80032c6 <z_impl_log_process+0x1a>
 80032d4:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 80032d8:	4621      	mov	r1, r4
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff ffb4 	bl	8003248 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 80032e0:	b914      	cbnz	r4, 80032e8 <z_impl_log_process+0x3c>
 80032e2:	f7ff ff11 	bl	8003108 <z_log_dropped_pending>
 80032e6:	b910      	cbnz	r0, 80032ee <z_impl_log_process+0x42>
	return next_pending();
 80032e8:	f7ff fdea 	bl	8002ec0 <next_pending>
}
 80032ec:	bd10      	pop	{r4, pc}
		dropped_notify();
 80032ee:	f7ff fee9 	bl	80030c4 <dropped_notify>
 80032f2:	e7f9      	b.n	80032e8 <z_impl_log_process+0x3c>
 80032f4:	20000e78 	.word	0x20000e78
 80032f8:	20000920 	.word	0x20000920

080032fc <z_log_msg_post_finalize>:
{
 80032fc:	b510      	push	{r4, lr}
 80032fe:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <z_log_msg_post_finalize+0x84>)
 8003302:	f3bf 8f5b 	dmb	ish
 8003306:	e853 2f00 	ldrex	r2, [r3]
 800330a:	3201      	adds	r2, #1
 800330c:	e843 2100 	strex	r1, r2, [r3]
 8003310:	2900      	cmp	r1, #0
 8003312:	d1f8      	bne.n	8003306 <z_log_msg_post_finalize+0xa>
 8003314:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <z_log_msg_post_finalize+0x88>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b963      	cbnz	r3, 8003338 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <z_log_msg_post_finalize+0x8c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b11b      	cbz	r3, 800332c <z_log_msg_post_finalize+0x30>
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <z_log_msg_post_finalize+0x84>)
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	2a01      	cmp	r2, #1
 800332a:	d015      	beq.n	8003358 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <z_log_msg_post_finalize+0x84>)
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	2a0a      	cmp	r2, #10
 8003332:	d01c      	beq.n	800336e <z_log_msg_post_finalize+0x72>
}
 8003334:	b002      	add	sp, #8
 8003336:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8003338:	f04f 0310 	mov.w	r3, #16
 800333c:	f3ef 8411 	mrs	r4, BASEPRI
 8003340:	f383 8812 	msr	BASEPRI_MAX, r3
 8003344:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8003348:	2000      	movs	r0, #0
 800334a:	f7ff ffaf 	bl	80032ac <z_impl_log_process>
	__asm__ volatile(
 800334e:	f384 8811 	msr	BASEPRI, r4
 8003352:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8003356:	e7ed      	b.n	8003334 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
 8003358:	2200      	movs	r2, #0
 800335a:	2300      	movs	r3, #0
 800335c:	e9cd 2300 	strd	r2, r3, [sp]
 8003360:	f242 7210 	movw	r2, #10000	; 0x2710
 8003364:	2300      	movs	r3, #0
 8003366:	4809      	ldr	r0, [pc, #36]	; (800338c <z_log_msg_post_finalize+0x90>)
 8003368:	f005 ffd6 	bl	8009318 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 800336c:	e7e2      	b.n	8003334 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0e0      	beq.n	8003334 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
 8003372:	4806      	ldr	r0, [pc, #24]	; (800338c <z_log_msg_post_finalize+0x90>)
 8003374:	f009 ff04 	bl	800d180 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <z_log_msg_post_finalize+0x94>)
 800337a:	f005 f847 	bl	800840c <z_impl_k_sem_give>
}
 800337e:	e7d9      	b.n	8003334 <z_log_msg_post_finalize+0x38>
 8003380:	20000920 	.word	0x20000920
 8003384:	20000e79 	.word	0x20000e79
 8003388:	20000954 	.word	0x20000954
 800338c:	20000670 	.word	0x20000670
 8003390:	2000049c 	.word	0x2000049c

08003394 <log_3>:
{
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	4680      	mov	r8, r0
 800339a:	460f      	mov	r7, r1
 800339c:	4616      	mov	r6, r2
 800339e:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80033a0:	f000 f97a 	bl	8003698 <log_msg_chunk_alloc>

	if (msg != NULL) {
 80033a4:	4604      	mov	r4, r0
 80033a6:	b118      	cbz	r0, 80033b0 <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 80033b0:	b14c      	cbz	r4, 80033c6 <log_3+0x32>
		msg->str = str;
 80033b2:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 80033b6:	7a60      	ldrb	r0, [r4, #9]
 80033b8:	2303      	movs	r3, #3
 80033ba:	f363 1007 	bfi	r0, r3, #4, #4
 80033be:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80033c0:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 80033c2:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 80033c4:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 80033c6:	b1c4      	cbz	r4, 80033fa <log_3+0x66>
	msg->hdr.ids = src_level;
 80033c8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80033cc:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <log_3+0x6c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4798      	blx	r3
 80033d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80033d6:	f04f 0310 	mov.w	r3, #16
 80033da:	f3ef 8511 	mrs	r5, BASEPRI
 80033de:	f383 8812 	msr	BASEPRI_MAX, r3
 80033e2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80033e6:	4621      	mov	r1, r4
 80033e8:	4806      	ldr	r0, [pc, #24]	; (8003404 <log_3+0x70>)
 80033ea:	f008 f881 	bl	800b4f0 <log_list_add_tail>
	__asm__ volatile(
 80033ee:	f385 8811 	msr	BASEPRI, r5
 80033f2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 80033f6:	f7ff ff81 	bl	80032fc <z_log_msg_post_finalize>
}
 80033fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033fe:	bf00      	nop
 8003400:	20000004 	.word	0x20000004
 8003404:	2000092c 	.word	0x2000092c

08003408 <log_0>:
{
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4605      	mov	r5, r0
 800340c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800340e:	f000 f943 	bl	8003698 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003412:	4604      	mov	r4, r0
 8003414:	b118      	cbz	r0, 800341e <log_0+0x16>
		msg->hdr.ref_cnt = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800341e:	b104      	cbz	r4, 8003422 <log_0+0x1a>
		msg->str = str;
 8003420:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8003422:	b1b4      	cbz	r4, 8003452 <log_0+0x4a>
	msg->hdr.ids = src_level;
 8003424:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <log_0+0x4c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4798      	blx	r3
 800342c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800342e:	f04f 0310 	mov.w	r3, #16
 8003432:	f3ef 8511 	mrs	r5, BASEPRI
 8003436:	f383 8812 	msr	BASEPRI_MAX, r3
 800343a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800343e:	4621      	mov	r1, r4
 8003440:	4805      	ldr	r0, [pc, #20]	; (8003458 <log_0+0x50>)
 8003442:	f008 f855 	bl	800b4f0 <log_list_add_tail>
	__asm__ volatile(
 8003446:	f385 8811 	msr	BASEPRI, r5
 800344a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800344e:	f7ff ff55 	bl	80032fc <z_log_msg_post_finalize>
}
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	20000004 	.word	0x20000004
 8003458:	2000092c 	.word	0x2000092c

0800345c <log_1>:
{
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	4607      	mov	r7, r0
 8003460:	460e      	mov	r6, r1
 8003462:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8003464:	f000 f918 	bl	8003698 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003468:	4604      	mov	r4, r0
 800346a:	b118      	cbz	r0, 8003474 <log_1+0x18>
		msg->hdr.ref_cnt = 1;
 800346c:	2301      	movs	r3, #1
 800346e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 8003474:	b134      	cbz	r4, 8003484 <log_1+0x28>
		msg->str = str;
 8003476:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 8003478:	7a63      	ldrb	r3, [r4, #9]
 800347a:	2201      	movs	r2, #1
 800347c:	f362 1307 	bfi	r3, r2, #4, #4
 8003480:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8003482:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
 8003484:	b1b4      	cbz	r4, 80034b4 <log_1+0x58>
	msg->hdr.ids = src_level;
 8003486:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <log_1+0x5c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4798      	blx	r3
 800348e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8003490:	f04f 0310 	mov.w	r3, #16
 8003494:	f3ef 8511 	mrs	r5, BASEPRI
 8003498:	f383 8812 	msr	BASEPRI_MAX, r3
 800349c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80034a0:	4621      	mov	r1, r4
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <log_1+0x60>)
 80034a4:	f008 f824 	bl	800b4f0 <log_list_add_tail>
	__asm__ volatile(
 80034a8:	f385 8811 	msr	BASEPRI, r5
 80034ac:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 80034b0:	f7ff ff24 	bl	80032fc <z_log_msg_post_finalize>
}
 80034b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000004 	.word	0x20000004
 80034bc:	2000092c 	.word	0x2000092c

080034c0 <log_2>:
{
 80034c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c4:	4680      	mov	r8, r0
 80034c6:	460f      	mov	r7, r1
 80034c8:	4616      	mov	r6, r2
 80034ca:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80034cc:	f000 f8e4 	bl	8003698 <log_msg_chunk_alloc>
	if (msg != NULL) {
 80034d0:	4604      	mov	r4, r0
 80034d2:	b118      	cbz	r0, 80034dc <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 80034dc:	b144      	cbz	r4, 80034f0 <log_2+0x30>
		msg->str = str;
 80034de:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 80034e2:	7a60      	ldrb	r0, [r4, #9]
 80034e4:	2302      	movs	r3, #2
 80034e6:	f363 1007 	bfi	r0, r3, #4, #4
 80034ea:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80034ec:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 80034ee:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
 80034f0:	b1b4      	cbz	r4, 8003520 <log_2+0x60>
	msg->hdr.ids = src_level;
 80034f2:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <log_2+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4798      	blx	r3
 80034fa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80034fc:	f04f 0310 	mov.w	r3, #16
 8003500:	f3ef 8511 	mrs	r5, BASEPRI
 8003504:	f383 8812 	msr	BASEPRI_MAX, r3
 8003508:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800350c:	4621      	mov	r1, r4
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <log_2+0x68>)
 8003510:	f007 ffee 	bl	800b4f0 <log_list_add_tail>
	__asm__ volatile(
 8003514:	f385 8811 	msr	BASEPRI, r5
 8003518:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800351c:	f7ff feee 	bl	80032fc <z_log_msg_post_finalize>
}
 8003520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003524:	20000004 	.word	0x20000004
 8003528:	2000092c 	.word	0x2000092c

0800352c <z_impl_log_panic>:
	if (panic_mode) {
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <z_impl_log_panic+0x4c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b103      	cbz	r3, 8003534 <z_impl_log_panic+0x8>
 8003532:	4770      	bx	lr
{
 8003534:	b510      	push	{r4, lr}
	log_init();
 8003536:	f7ff fd49 	bl	8002fcc <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800353a:	2400      	movs	r4, #0
 800353c:	e000      	b.n	8003540 <z_impl_log_panic+0x14>
 800353e:	3401      	adds	r4, #1
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <z_impl_log_panic+0x50>)
 8003542:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <z_impl_log_panic+0x54>)
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800354a:	da0c      	bge.n	8003566 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <z_impl_log_panic+0x54>)
 800354e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 8003552:	6843      	ldr	r3, [r0, #4]
 8003554:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f1      	beq.n	800353e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 800355a:	0123      	lsls	r3, r4, #4
 800355c:	4a08      	ldr	r2, [pc, #32]	; (8003580 <z_impl_log_panic+0x54>)
 800355e:	58d3      	ldr	r3, [r2, r3]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4798      	blx	r3
}
 8003564:	e7eb      	b.n	800353e <z_impl_log_panic+0x12>
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff fea0 	bl	80032ac <z_impl_log_process>
		while (log_process(false) == true) {
 800356c:	2800      	cmp	r0, #0
 800356e:	d1fa      	bne.n	8003566 <z_impl_log_panic+0x3a>
	panic_mode = true;
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <z_impl_log_panic+0x4c>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
}
 8003576:	bd10      	pop	{r4, pc}
 8003578:	20000e79 	.word	0x20000e79
 800357c:	0800dd88 	.word	0x0800dd88
 8003580:	0800dd78 	.word	0x0800dd78

08003584 <log_process_thread_func>:
{
 8003584:	b508      	push	{r3, lr}
	log_init();
 8003586:	f7ff fd21 	bl	8002fcc <log_init>
	return z_impl_z_current_get();
 800358a:	f005 fc99 	bl	8008ec0 <z_impl_z_current_get>
	thread_set(k_current_get());
 800358e:	f7ff fc7b 	bl	8002e88 <thread_set>
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff fe8a 	bl	80032ac <z_impl_log_process>
		if (log_process(false) == false) {
 8003598:	2800      	cmp	r0, #0
 800359a:	d1fa      	bne.n	8003592 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a4:	4801      	ldr	r0, [pc, #4]	; (80035ac <log_process_thread_func+0x28>)
 80035a6:	f004 ff59 	bl	800845c <z_impl_k_sem_take>
 80035aa:	e7f2      	b.n	8003592 <log_process_thread_func+0xe>
 80035ac:	2000049c 	.word	0x2000049c

080035b0 <log_free>:
{
 80035b0:	b500      	push	{lr}
 80035b2:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 80035b4:	3804      	subs	r0, #4
 80035b6:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 80035b8:	f3bf 8f5b 	dmb	ish
 80035bc:	e850 3f00 	ldrex	r3, [r0]
 80035c0:	1e5a      	subs	r2, r3, #1
 80035c2:	e840 2100 	strex	r1, r2, [r0]
 80035c6:	2900      	cmp	r1, #0
 80035c8:	d1f8      	bne.n	80035bc <log_free+0xc>
 80035ca:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d002      	beq.n	80035d8 <log_free+0x28>
}
 80035d2:	b003      	add	sp, #12
 80035d4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 80035d8:	a901      	add	r1, sp, #4
 80035da:	4802      	ldr	r0, [pc, #8]	; (80035e4 <log_free+0x34>)
 80035dc:	f009 fa9b 	bl	800cb16 <k_mem_slab_free>
}
 80035e0:	e7f7      	b.n	80035d2 <log_free+0x22>
 80035e2:	bf00      	nop
 80035e4:	20000934 	.word	0x20000934

080035e8 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <log_source_name_get+0x18>)
 80035ea:	4a06      	ldr	r2, [pc, #24]	; (8003604 <log_source_name_get+0x1c>)
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 80035f2:	d202      	bcs.n	80035fa <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 80035f4:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80035f8:	4770      	bx	lr
 80035fa:	2000      	movs	r0, #0
}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	0800dd78 	.word	0x0800dd78
 8003604:	0800dd28 	.word	0x0800dd28

08003608 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003608:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <log_backend_enable+0x20>)
 800360c:	1ac3      	subs	r3, r0, r3
 800360e:	111b      	asrs	r3, r3, #4
 8003610:	3301      	adds	r3, #1
	backend->cb->id = id;
 8003612:	6842      	ldr	r2, [r0, #4]
 8003614:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003616:	6843      	ldr	r3, [r0, #4]
 8003618:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 800361a:	6843      	ldr	r3, [r0, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8003620:	f7ff fd20 	bl	8003064 <z_log_notify_backend_enabled>
}
 8003624:	bd08      	pop	{r3, pc}
 8003626:	bf00      	nop
 8003628:	0800dd78 	.word	0x0800dd78

0800362c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 800362c:	b510      	push	{r4, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 8003632:	e005      	b.n	8003640 <cont_free+0x14>
		next = cont->next;
 8003634:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8003636:	a901      	add	r1, sp, #4
 8003638:	4804      	ldr	r0, [pc, #16]	; (800364c <cont_free+0x20>)
 800363a:	f009 fa6c 	bl	800cb16 <k_mem_slab_free>
		cont = next;
 800363e:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f6      	bne.n	8003634 <cont_free+0x8>
	}
}
 8003646:	b002      	add	sp, #8
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	20000958 	.word	0x20000958

08003650 <log_msg_pool_init>:
{
 8003650:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 8003652:	2320      	movs	r3, #32
 8003654:	461a      	mov	r2, r3
 8003656:	4902      	ldr	r1, [pc, #8]	; (8003660 <log_msg_pool_init+0x10>)
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <log_msg_pool_init+0x14>)
 800365a:	f009 fa4d 	bl	800caf8 <k_mem_slab_init>
}
 800365e:	bd08      	pop	{r3, pc}
 8003660:	20003c20 	.word	0x20003c20
 8003664:	20000958 	.word	0x20000958

08003668 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	9301      	str	r3, [sp, #4]
 8003670:	2001      	movs	r0, #1
 8003672:	f7ff fe1b 	bl	80032ac <z_impl_log_process>
 8003676:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 8003678:	f7ff fd04 	bl	8003084 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 800367c:	2200      	movs	r2, #0
 800367e:	2300      	movs	r3, #0
 8003680:	a901      	add	r1, sp, #4
 8003682:	4804      	ldr	r0, [pc, #16]	; (8003694 <log_msg_no_space_handle+0x2c>)
 8003684:	f004 fc86 	bl	8007f94 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8003688:	b108      	cbz	r0, 800368e <log_msg_no_space_handle+0x26>
 800368a:	2c00      	cmp	r4, #0
 800368c:	d1f0      	bne.n	8003670 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 800368e:	9801      	ldr	r0, [sp, #4]
 8003690:	b002      	add	sp, #8
 8003692:	bd10      	pop	{r4, pc}
 8003694:	20000958 	.word	0x20000958

08003698 <log_msg_chunk_alloc>:
{
 8003698:	b500      	push	{lr}
 800369a:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 80036a0:	f007 ff44 	bl	800b52c <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80036a4:	b150      	cbz	r0, 80036bc <log_msg_chunk_alloc+0x24>
 80036a6:	2200      	movs	r2, #0
 80036a8:	2300      	movs	r3, #0
 80036aa:	a901      	add	r1, sp, #4
 80036ac:	4807      	ldr	r0, [pc, #28]	; (80036cc <log_msg_chunk_alloc+0x34>)
 80036ae:	f004 fc71 	bl	8007f94 <k_mem_slab_alloc>
	if (err != 0) {
 80036b2:	b930      	cbnz	r0, 80036c2 <log_msg_chunk_alloc+0x2a>
}
 80036b4:	9801      	ldr	r0, [sp, #4]
 80036b6:	b003      	add	sp, #12
 80036b8:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80036bc:	2200      	movs	r2, #0
 80036be:	2300      	movs	r3, #0
 80036c0:	e7f3      	b.n	80036aa <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 80036c2:	f7ff ffd1 	bl	8003668 <log_msg_no_space_handle>
 80036c6:	9001      	str	r0, [sp, #4]
 80036c8:	e7f4      	b.n	80036b4 <log_msg_chunk_alloc+0x1c>
 80036ca:	bf00      	nop
 80036cc:	20000958 	.word	0x20000958

080036d0 <msg_free>:
{
 80036d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d2:	b083      	sub	sp, #12
 80036d4:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 80036d6:	4604      	mov	r4, r0
 80036d8:	f007 ffa8 	bl	800b62c <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 80036dc:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 80036de:	f013 0f01 	tst.w	r3, #1
 80036e2:	d101      	bne.n	80036e8 <msg_free+0x18>
 80036e4:	4606      	mov	r6, r0
 80036e6:	bb50      	cbnz	r0, 800373e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	7a1a      	ldrb	r2, [r3, #8]
 80036ec:	f012 0f02 	tst.w	r2, #2
 80036f0:	d128      	bne.n	8003744 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 80036f2:	a901      	add	r1, sp, #4
 80036f4:	4815      	ldr	r0, [pc, #84]	; (800374c <msg_free+0x7c>)
 80036f6:	f009 fa0e 	bl	800cb16 <k_mem_slab_free>
}
 80036fa:	b003      	add	sp, #12
 80036fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 80036fe:	9801      	ldr	r0, [sp, #4]
 8003700:	f007 ffa9 	bl	800b656 <log_msg_str_get>
 8003704:	4631      	mov	r1, r6
 8003706:	f7ff fc13 	bl	8002f30 <z_log_get_s_mask>
					if (smask == 0U) {
 800370a:	4607      	mov	r7, r0
 800370c:	b970      	cbnz	r0, 800372c <msg_free+0x5c>
 800370e:	e7eb      	b.n	80036e8 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
 8003710:	3401      	adds	r4, #1
 8003712:	42b4      	cmp	r4, r6
 8003714:	d2e8      	bcs.n	80036e8 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8003716:	4621      	mov	r1, r4
 8003718:	9801      	ldr	r0, [sp, #4]
 800371a:	f007 ff8a 	bl	800b632 <log_msg_arg_get>
 800371e:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 8003720:	f7ff fd2c 	bl	800317c <log_is_strdup>
 8003724:	2800      	cmp	r0, #0
 8003726:	d0f3      	beq.n	8003710 <msg_free+0x40>
				if (smask == 0U) {
 8003728:	2f00      	cmp	r7, #0
 800372a:	d0e8      	beq.n	80036fe <msg_free+0x2e>
				if (smask & BIT(i)) {
 800372c:	fa27 f304 	lsr.w	r3, r7, r4
 8003730:	f013 0f01 	tst.w	r3, #1
 8003734:	d0ec      	beq.n	8003710 <msg_free+0x40>
					log_free(buf);
 8003736:	4628      	mov	r0, r5
 8003738:	f7ff ff3a 	bl	80035b0 <log_free>
 800373c:	e7e8      	b.n	8003710 <msg_free+0x40>
		uint32_t smask = 0U;
 800373e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
 8003740:	463c      	mov	r4, r7
 8003742:	e7e6      	b.n	8003712 <msg_free+0x42>
		cont_free(msg->payload.ext.next);
 8003744:	6958      	ldr	r0, [r3, #20]
 8003746:	f7ff ff71 	bl	800362c <cont_free>
 800374a:	e7d2      	b.n	80036f2 <msg_free+0x22>
 800374c:	20000958 	.word	0x20000958

08003750 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 8003750:	b40e      	push	{r1, r2, r3}
 8003752:	b500      	push	{lr}
 8003754:	b082      	sub	sp, #8
 8003756:	4601      	mov	r1, r0
 8003758:	ab03      	add	r3, sp, #12
 800375a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 800375e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003760:	4803      	ldr	r0, [pc, #12]	; (8003770 <print_formatted+0x20>)
 8003762:	f7ff f86d 	bl	8002840 <cbvprintf>
	va_end(args);

	return length;
}
 8003766:	b002      	add	sp, #8
 8003768:	f85d eb04 	ldr.w	lr, [sp], #4
 800376c:	b003      	add	sp, #12
 800376e:	4770      	bx	lr
 8003770:	0800b9f9 	.word	0x0800b9f9

08003774 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 8003774:	b530      	push	{r4, r5, lr}
 8003776:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8003778:	f011 0f44 	tst.w	r1, #68	; 0x44
 800377c:	d005      	beq.n	800378a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <timestamp_print+0x74>)
 8003780:	681c      	ldr	r4, [r3, #0]
 8003782:	b934      	cbnz	r4, 8003792 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8003784:	2000      	movs	r0, #0
	}

	return length;
}
 8003786:	b005      	add	sp, #20
 8003788:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 800378a:	4918      	ldr	r1, [pc, #96]	; (80037ec <timestamp_print+0x78>)
 800378c:	f7ff ffe0 	bl	8003750 <print_formatted>
 8003790:	e7f9      	b.n	8003786 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <timestamp_print+0x7c>)
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 800379a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <timestamp_print+0x80>)
 80037a0:	fba2 320c 	umull	r3, r2, r2, ip
 80037a4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 80037a6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 80037aa:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <timestamp_print+0x84>)
 80037b0:	fba3 530e 	umull	r5, r3, r3, lr
 80037b4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 80037b6:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 80037ba:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 80037be:	fb0c f101 	mul.w	r1, ip, r1
 80037c2:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80037c6:	fb05 1114 	mls	r1, r5, r4, r1
 80037ca:	fb0c f101 	mul.w	r1, ip, r1
 80037ce:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 80037d2:	9102      	str	r1, [sp, #8]
 80037d4:	9501      	str	r5, [sp, #4]
 80037d6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80037da:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 80037de:	9100      	str	r1, [sp, #0]
 80037e0:	4906      	ldr	r1, [pc, #24]	; (80037fc <timestamp_print+0x88>)
 80037e2:	f7ff ffb5 	bl	8003750 <print_formatted>
 80037e6:	e7ce      	b.n	8003786 <timestamp_print+0x12>
 80037e8:	20000978 	.word	0x20000978
 80037ec:	0800e244 	.word	0x0800e244
 80037f0:	2000097c 	.word	0x2000097c
 80037f4:	91a2b3c5 	.word	0x91a2b3c5
 80037f8:	88888889 	.word	0x88888889
 80037fc:	0800e250 	.word	0x0800e250

08003800 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8003800:	b161      	cbz	r1, 800381c <color_print+0x1c>
{
 8003802:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003804:	b12a      	cbz	r2, 8003812 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8003806:	4a06      	ldr	r2, [pc, #24]	; (8003820 <color_print+0x20>)
 8003808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800380c:	b912      	cbnz	r2, 8003814 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <color_print+0x24>)
 8003810:	e000      	b.n	8003814 <color_print+0x14>
 8003812:	4a04      	ldr	r2, [pc, #16]	; (8003824 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8003814:	4904      	ldr	r1, [pc, #16]	; (8003828 <color_print+0x28>)
 8003816:	f7ff ff9b 	bl	8003750 <print_formatted>
	}
}
 800381a:	bd08      	pop	{r3, pc}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	0800e2c8 	.word	0x0800e2c8
 8003824:	0800e26c 	.word	0x0800e26c
 8003828:	0800e274 	.word	0x0800e274

0800382c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800382c:	f011 0f10 	tst.w	r1, #16
 8003830:	d10b      	bne.n	800384a <newline_print+0x1e>
{
 8003832:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003834:	f011 0f20 	tst.w	r1, #32
 8003838:	d003      	beq.n	8003842 <newline_print+0x16>
		print_formatted(ctx, "\n");
 800383a:	4904      	ldr	r1, [pc, #16]	; (800384c <newline_print+0x20>)
 800383c:	f7ff ff88 	bl	8003750 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8003840:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8003842:	4903      	ldr	r1, [pc, #12]	; (8003850 <newline_print+0x24>)
 8003844:	f7ff ff84 	bl	8003750 <print_formatted>
 8003848:	e7fa      	b.n	8003840 <newline_print+0x14>
 800384a:	4770      	bx	lr
 800384c:	0800e7c0 	.word	0x0800e7c0
 8003850:	0800e278 	.word	0x0800e278

08003854 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 8003854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003858:	4605      	mov	r5, r0
 800385a:	460f      	mov	r7, r1
 800385c:	4616      	mov	r6, r2
 800385e:	4698      	mov	r8, r3
	newline_print(output, flags);
 8003860:	9906      	ldr	r1, [sp, #24]
 8003862:	f7ff ffe3 	bl	800382c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 8003866:	2400      	movs	r4, #0
 8003868:	4544      	cmp	r4, r8
 800386a:	da05      	bge.n	8003878 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 800386c:	4924      	ldr	r1, [pc, #144]	; (8003900 <hexdump_line_print+0xac>)
 800386e:	4628      	mov	r0, r5
 8003870:	f7ff ff6e 	bl	8003750 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 8003874:	3401      	adds	r4, #1
 8003876:	e7f7      	b.n	8003868 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003878:	2400      	movs	r4, #0
 800387a:	e009      	b.n	8003890 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 800387c:	4920      	ldr	r1, [pc, #128]	; (8003900 <hexdump_line_print+0xac>)
 800387e:	4628      	mov	r0, r5
 8003880:	f7ff ff66 	bl	8003750 <print_formatted>
 8003884:	e00b      	b.n	800389e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8003886:	491f      	ldr	r1, [pc, #124]	; (8003904 <hexdump_line_print+0xb0>)
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff ff61 	bl	8003750 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800388e:	3401      	adds	r4, #1
 8003890:	2c0f      	cmp	r4, #15
 8003892:	dc0c      	bgt.n	80038ae <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8003894:	2c00      	cmp	r4, #0
 8003896:	dd02      	ble.n	800389e <hexdump_line_print+0x4a>
 8003898:	f014 0f07 	tst.w	r4, #7
 800389c:	d0ee      	beq.n	800387c <hexdump_line_print+0x28>
		if (i < length) {
 800389e:	42b4      	cmp	r4, r6
 80038a0:	d2f1      	bcs.n	8003886 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 80038a2:	5d3a      	ldrb	r2, [r7, r4]
 80038a4:	4918      	ldr	r1, [pc, #96]	; (8003908 <hexdump_line_print+0xb4>)
 80038a6:	4628      	mov	r0, r5
 80038a8:	f7ff ff52 	bl	8003750 <print_formatted>
 80038ac:	e7ef      	b.n	800388e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 80038ae:	4917      	ldr	r1, [pc, #92]	; (800390c <hexdump_line_print+0xb8>)
 80038b0:	4628      	mov	r0, r5
 80038b2:	f7ff ff4d 	bl	8003750 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80038b6:	2400      	movs	r4, #0
 80038b8:	e009      	b.n	80038ce <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <hexdump_line_print+0xac>)
 80038bc:	4628      	mov	r0, r5
 80038be:	f7ff ff47 	bl	8003750 <print_formatted>
 80038c2:	e00b      	b.n	80038dc <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 80038c4:	4912      	ldr	r1, [pc, #72]	; (8003910 <hexdump_line_print+0xbc>)
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7ff ff42 	bl	8003750 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80038cc:	3401      	adds	r4, #1
 80038ce:	2c0f      	cmp	r4, #15
 80038d0:	dc13      	bgt.n	80038fa <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 80038d2:	2c00      	cmp	r4, #0
 80038d4:	dd02      	ble.n	80038dc <hexdump_line_print+0x88>
 80038d6:	f014 0f07 	tst.w	r4, #7
 80038da:	d0ee      	beq.n	80038ba <hexdump_line_print+0x66>
		if (i < length) {
 80038dc:	42b4      	cmp	r4, r6
 80038de:	d207      	bcs.n	80038f0 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 80038e0:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <hexdump_line_print+0xc0>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 80038e6:	f013 0f97 	tst.w	r3, #151	; 0x97
 80038ea:	d1eb      	bne.n	80038c4 <hexdump_line_print+0x70>
 80038ec:	222e      	movs	r2, #46	; 0x2e
 80038ee:	e7e9      	b.n	80038c4 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <hexdump_line_print+0xac>)
 80038f2:	4628      	mov	r0, r5
 80038f4:	f7ff ff2c 	bl	8003750 <print_formatted>
 80038f8:	e7e8      	b.n	80038cc <hexdump_line_print+0x78>
		}
	}
}
 80038fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038fe:	bf00      	nop
 8003900:	0800e2a0 	.word	0x0800e2a0
 8003904:	0800e284 	.word	0x0800e284
 8003908:	0800e27c 	.word	0x0800e27c
 800390c:	0800e288 	.word	0x0800e288
 8003910:	0800e28c 	.word	0x0800e28c
 8003914:	0800efb5 	.word	0x0800efb5

08003918 <ids_print>:
{
 8003918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391c:	4680      	mov	r8, r0
 800391e:	4616      	mov	r6, r2
 8003920:	461d      	mov	r5, r3
 8003922:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8003926:	b959      	cbnz	r1, 8003940 <ids_print+0x28>
	int total = 0;
 8003928:	2400      	movs	r4, #0
	if (source_id >= 0) {
 800392a:	2f00      	cmp	r7, #0
 800392c:	db1c      	blt.n	8003968 <ids_print+0x50>
		total += print_formatted(output,
 800392e:	b186      	cbz	r6, 8003952 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8003930:	2301      	movs	r3, #1
 8003932:	9a07      	ldr	r2, [sp, #28]
 8003934:	4093      	lsls	r3, r2
				(func_on &&
 8003936:	f013 0f10 	tst.w	r3, #16
 800393a:	d118      	bne.n	800396e <ids_print+0x56>
		total += print_formatted(output,
 800393c:	4e0d      	ldr	r6, [pc, #52]	; (8003974 <ids_print+0x5c>)
 800393e:	e009      	b.n	8003954 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <ids_print+0x60>)
 8003942:	9a07      	ldr	r2, [sp, #28]
 8003944:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003948:	490c      	ldr	r1, [pc, #48]	; (800397c <ids_print+0x64>)
 800394a:	f7ff ff01 	bl	8003750 <print_formatted>
 800394e:	4604      	mov	r4, r0
 8003950:	e7eb      	b.n	800392a <ids_print+0x12>
		total += print_formatted(output,
 8003952:	4e08      	ldr	r6, [pc, #32]	; (8003974 <ids_print+0x5c>)
 8003954:	4639      	mov	r1, r7
 8003956:	4628      	mov	r0, r5
 8003958:	f7ff fe46 	bl	80035e8 <log_source_name_get>
 800395c:	4602      	mov	r2, r0
 800395e:	4631      	mov	r1, r6
 8003960:	4640      	mov	r0, r8
 8003962:	f7ff fef5 	bl	8003750 <print_formatted>
 8003966:	4404      	add	r4, r0
}
 8003968:	4620      	mov	r0, r4
 800396a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 800396e:	4e04      	ldr	r6, [pc, #16]	; (8003980 <ids_print+0x68>)
 8003970:	e7f0      	b.n	8003954 <ids_print+0x3c>
 8003972:	bf00      	nop
 8003974:	0800e290 	.word	0x0800e290
 8003978:	0800e304 	.word	0x0800e304
 800397c:	0800e29c 	.word	0x0800e29c
 8003980:	0800e298 	.word	0x0800e298

08003984 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
 8003984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003988:	b089      	sub	sp, #36	; 0x24
 800398a:	4607      	mov	r7, r0
 800398c:	460e      	mov	r6, r1
 800398e:	4691      	mov	r9, r2
 8003990:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
 8003992:	f007 fe60 	bl	800b656 <log_msg_str_get>
 8003996:	4602      	mov	r2, r0
 8003998:	490f      	ldr	r1, [pc, #60]	; (80039d8 <hexdump_print+0x54>)
 800399a:	4630      	mov	r0, r6
 800399c:	f7ff fed8 	bl	8003750 <print_formatted>
	uint32_t offset = 0U;
 80039a0:	2400      	movs	r4, #0
 80039a2:	e009      	b.n	80039b8 <hexdump_print+0x34>
	do {
		length = sizeof(buf);
		log_msg_hexdump_data_get(msg, buf, &length, offset);

		if (length) {
			hexdump_line_print(output, buf, length,
 80039a4:	f8cd 8000 	str.w	r8, [sp]
 80039a8:	464b      	mov	r3, r9
 80039aa:	eb0d 0105 	add.w	r1, sp, r5
 80039ae:	4630      	mov	r0, r6
 80039b0:	f7ff ff50 	bl	8003854 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 80039b4:	9d03      	ldr	r5, [sp, #12]
 80039b6:	442c      	add	r4, r5
		length = sizeof(buf);
 80039b8:	2510      	movs	r5, #16
 80039ba:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 80039bc:	4623      	mov	r3, r4
 80039be:	aa03      	add	r2, sp, #12
 80039c0:	eb0d 0105 	add.w	r1, sp, r5
 80039c4:	4638      	mov	r0, r7
 80039c6:	f007 fe5b 	bl	800b680 <log_msg_hexdump_data_get>
		if (length) {
 80039ca:	9a03      	ldr	r2, [sp, #12]
 80039cc:	2a00      	cmp	r2, #0
 80039ce:	d1e9      	bne.n	80039a4 <hexdump_print+0x20>
		} else {
			break;
		}
	} while (true);
}
 80039d0:	b009      	add	sp, #36	; 0x24
 80039d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039d6:	bf00      	nop
 80039d8:	0800e274 	.word	0x0800e274

080039dc <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b083      	sub	sp, #12
 80039e0:	4606      	mov	r6, r0
 80039e2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 80039e4:	2700      	movs	r7, #0
	size_t offset = 0;
 80039e6:	463d      	mov	r5, r7
 80039e8:	e00d      	b.n	8003a06 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
 80039ea:	68a2      	ldr	r2, [r4, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 80039f2:	2f0a      	cmp	r7, #10
 80039f4:	bf14      	ite	ne
 80039f6:	2700      	movne	r7, #0
 80039f8:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
 80039fa:	4620      	mov	r0, r4
 80039fc:	f007 ffef 	bl	800b9de <log_output_flush>
		offset += length;
 8003a00:	9b01      	ldr	r3, [sp, #4]
 8003a02:	441d      	add	r5, r3
	} while (length > 0);
 8003a04:	b173      	cbz	r3, 8003a24 <raw_string_print+0x48>
		length = output->size;
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8003a0a:	462b      	mov	r3, r5
 8003a0c:	aa01      	add	r2, sp, #4
 8003a0e:	68a1      	ldr	r1, [r4, #8]
 8003a10:	4630      	mov	r0, r6
 8003a12:	f007 fe35 	bl	800b680 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	9a01      	ldr	r2, [sp, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8003a1c:	9b01      	ldr	r3, [sp, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0eb      	beq.n	80039fa <raw_string_print+0x1e>
 8003a22:	e7e2      	b.n	80039ea <raw_string_print+0xe>

	if (eol) {
 8003a24:	b90f      	cbnz	r7, 8003a2a <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
 8003a26:	b003      	add	sp, #12
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
 8003a2a:	4902      	ldr	r1, [pc, #8]	; (8003a34 <raw_string_print+0x58>)
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff fe8f 	bl	8003750 <print_formatted>
}
 8003a32:	e7f8      	b.n	8003a26 <raw_string_print+0x4a>
 8003a34:	0800e2a4 	.word	0x0800e2a4

08003a38 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8003a3e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003a40:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf28      	it	cs
 8003a48:	460b      	movcs	r3, r1
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <log_output_dropped_process+0x4c>)
 8003a4c:	2105      	movs	r1, #5
 8003a4e:	4668      	mov	r0, sp
 8003a50:	f007 fc11 	bl	800b276 <snprintk>
 8003a54:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003a56:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	220b      	movs	r2, #11
 8003a5c:	490a      	ldr	r1, [pc, #40]	; (8003a88 <log_output_dropped_process+0x50>)
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f007 fe16 	bl	800b690 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4632      	mov	r2, r6
 8003a6a:	4669      	mov	r1, sp
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f007 fe0f 	bl	800b690 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8003a72:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	221b      	movs	r2, #27
 8003a78:	4904      	ldr	r1, [pc, #16]	; (8003a8c <log_output_dropped_process+0x54>)
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f007 fe08 	bl	800b690 <buffer_write>
}
 8003a80:	b002      	add	sp, #8
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	0800e97c 	.word	0x0800e97c
 8003a88:	0800e2f8 	.word	0x0800e2f8
 8003a8c:	0800e2dc 	.word	0x0800e2dc

08003a90 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <log_output_timestamp_freq_set+0x20>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8003a96:	e004      	b.n	8003aa2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8003a98:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <log_output_timestamp_freq_set+0x20>)
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8003aa2:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <log_output_timestamp_freq_set+0x24>)
 8003aa4:	4298      	cmp	r0, r3
 8003aa6:	d8f7      	bhi.n	8003a98 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <log_output_timestamp_freq_set+0x28>)
 8003aaa:	6018      	str	r0, [r3, #0]
}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	2000097c 	.word	0x2000097c
 8003ab4:	000f4240 	.word	0x000f4240
 8003ab8:	20000978 	.word	0x20000978

08003abc <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4606      	mov	r6, r0
 8003ac0:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8003ac2:	2400      	movs	r4, #0
 8003ac4:	e006      	b.n	8003ad4 <char_out+0x18>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <char_out+0x20>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8003acc:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8003ad2:	3401      	adds	r4, #1
 8003ad4:	42ac      	cmp	r4, r5
 8003ad6:	d3f6      	bcc.n	8003ac6 <char_out+0xa>
#endif
	}

	return length;
}
 8003ad8:	4628      	mov	r0, r5
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	20000994 	.word	0x20000994

08003ae0 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003ae0:	4b01      	ldr	r3, [pc, #4]	; (8003ae8 <log_backend_uart_init+0x8>)
 8003ae2:	4a02      	ldr	r2, [pc, #8]	; (8003aec <log_backend_uart_init+0xc>)
 8003ae4:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000994 	.word	0x20000994
 8003aec:	0800daf8 	.word	0x0800daf8

08003af0 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003af0:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003af2:	4802      	ldr	r0, [pc, #8]	; (8003afc <panic+0xc>)
 8003af4:	f007 ff73 	bl	800b9de <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003af8:	bd08      	pop	{r3, pc}
 8003afa:	bf00      	nop
 8003afc:	0800e348 	.word	0x0800e348

08003b00 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003b00:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003b02:	4802      	ldr	r0, [pc, #8]	; (8003b0c <dropped+0xc>)
 8003b04:	f7ff ff98 	bl	8003a38 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003b08:	bd08      	pop	{r3, pc}
 8003b0a:	bf00      	nop
 8003b0c:	0800e348 	.word	0x0800e348

08003b10 <put>:
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	460c      	mov	r4, r1
	log_msg_get(msg);
 8003b14:	4608      	mov	r0, r1
 8003b16:	f007 fd7c 	bl	800b612 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4803      	ldr	r0, [pc, #12]	; (8003b2c <put+0x1c>)
 8003b20:	f007 ff86 	bl	800ba30 <log_output_msg_process>
	log_msg_put(msg);
 8003b24:	4620      	mov	r0, r4
 8003b26:	f007 fd98 	bl	800b65a <log_msg_put>
}
 8003b2a:	bd10      	pop	{r4, pc}
 8003b2c:	0800e348 	.word	0x0800e348

08003b30 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8003b30:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8003b32:	4c04      	ldr	r4, [pc, #16]	; (8003b44 <__do_init_array_aux+0x14>)
 8003b34:	e002      	b.n	8003b3c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003b36:	f854 3b04 	ldr.w	r3, [r4], #4
 8003b3a:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <__do_init_array_aux+0x18>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d3f9      	bcc.n	8003b36 <__do_init_array_aux+0x6>
	}
}
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	0800dd28 	.word	0x0800dd28
 8003b48:	0800dd28 	.word	0x0800dd28

08003b4c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <__do_global_ctors_aux+0x1c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8003b50:	b14b      	cbz	r3, 8003b66 <__do_global_ctors_aux+0x1a>
{
 8003b52:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8003b54:	1e5c      	subs	r4, r3, #1
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <__do_global_ctors_aux+0x1c>)
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	4798      	blx	r3
 8003b5e:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d1f7      	bne.n	8003b54 <__do_global_ctors_aux+0x8>
	}
}
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	4770      	bx	lr
 8003b68:	0800dd20 	.word	0x0800dd20

08003b6c <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8003b6c:	28af      	cmp	r0, #175	; 0xaf
 8003b6e:	d81d      	bhi.n	8003bac <stm32_pin_configure+0x40>
{
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	4604      	mov	r4, r0
 8003b74:	460f      	mov	r7, r1
 8003b76:	4615      	mov	r5, r2
 8003b78:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <stm32_pin_configure+0x48>)
 8003b7c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003b80:	b18e      	cbz	r6, 8003ba6 <stm32_pin_configure+0x3a>
 8003b82:	4630      	mov	r0, r6
 8003b84:	f008 ff8b 	bl	800ca9e <z_device_ready>
 8003b88:	b150      	cbz	r0, 8003ba0 <stm32_pin_configure+0x34>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	b95b      	cbnz	r3, 8003ba6 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8003b8e:	462b      	mov	r3, r5
 8003b90:	463a      	mov	r2, r7
 8003b92:	f004 010f 	and.w	r1, r4, #15
 8003b96:	4630      	mov	r0, r6
 8003b98:	f008 f98e 	bl	800beb8 <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 8003b9c:	2000      	movs	r0, #0
}
 8003b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba0:	f06f 0312 	mvn.w	r3, #18
 8003ba4:	e7f2      	b.n	8003b8c <stm32_pin_configure+0x20>
		return -ENODEV;
 8003ba6:	f06f 0012 	mvn.w	r0, #18
 8003baa:	e7f8      	b.n	8003b9e <stm32_pin_configure+0x32>
		return -EINVAL;
 8003bac:	f06f 0015 	mvn.w	r0, #21
}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	0800e358 	.word	0x0800e358

08003bb8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003bb8:	4901      	ldr	r1, [pc, #4]	; (8003bc0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003bba:	2210      	movs	r2, #16
	str	r2, [r1]
 8003bbc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003bbe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003bc0:	e000ed10 	.word	0xe000ed10

08003bc4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003bc4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003bc6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003bc8:	f380 8811 	msr	BASEPRI, r0
	isb
 8003bcc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003bd0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003bd4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003bd6:	b662      	cpsie	i
	isb
 8003bd8:	f3bf 8f6f 	isb	sy

	bx	lr
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003be6:	4d1f      	ldr	r5, [pc, #124]	; (8003c64 <esf_dump+0x84>)
 8003be8:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <esf_dump+0x88>)
 8003bea:	1aed      	subs	r5, r5, r3
 8003bec:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003bee:	2601      	movs	r6, #1
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f366 0302 	bfi	r3, r6, #0, #3
 8003bf8:	f36f 03c5 	bfc	r3, #3, #3
 8003bfc:	f365 138f 	bfi	r3, r5, #6, #10
 8003c00:	f8ad 3000 	strh.w	r3, [sp]
 8003c04:	6883      	ldr	r3, [r0, #8]
 8003c06:	6842      	ldr	r2, [r0, #4]
 8003c08:	6801      	ldr	r1, [r0, #0]
 8003c0a:	4818      	ldr	r0, [pc, #96]	; (8003c6c <esf_dump+0x8c>)
 8003c0c:	f7ff fbc2 	bl	8003394 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	f366 0302 	bfi	r3, r6, #0, #3
 8003c18:	f36f 03c5 	bfc	r3, #3, #3
 8003c1c:	f365 138f 	bfi	r3, r5, #6, #10
 8003c20:	f8ad 3000 	strh.w	r3, [sp]
 8003c24:	6963      	ldr	r3, [r4, #20]
 8003c26:	6922      	ldr	r2, [r4, #16]
 8003c28:	68e1      	ldr	r1, [r4, #12]
 8003c2a:	4811      	ldr	r0, [pc, #68]	; (8003c70 <esf_dump+0x90>)
 8003c2c:	f7ff fbb2 	bl	8003394 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f366 0202 	bfi	r2, r6, #0, #3
 8003c38:	f36f 02c5 	bfc	r2, #3, #3
 8003c3c:	f365 128f 	bfi	r2, r5, #6, #10
 8003c40:	69e1      	ldr	r1, [r4, #28]
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <esf_dump+0x94>)
 8003c44:	f7ff fc0a 	bl	800345c <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f366 0202 	bfi	r2, r6, #0, #3
 8003c50:	f36f 02c5 	bfc	r2, #3, #3
 8003c54:	f365 128f 	bfi	r2, r5, #6, #10
 8003c58:	69a1      	ldr	r1, [r4, #24]
 8003c5a:	4807      	ldr	r0, [pc, #28]	; (8003c78 <esf_dump+0x98>)
 8003c5c:	f7ff fbfe 	bl	800345c <log_1>
		esf->basic.pc);
}
 8003c60:	b002      	add	sp, #8
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	0800dd48 	.word	0x0800dd48
 8003c68:	0800dd28 	.word	0x0800dd28
 8003c6c:	0800e384 	.word	0x0800e384
 8003c70:	0800e3b4 	.word	0x0800e3b4
 8003c74:	0800e3e4 	.word	0x0800e3e4
 8003c78:	0800e3f4 	.word	0x0800e3f4

08003c7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003c7c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	db07      	blt.n	8003c92 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	f000 021f 	and.w	r2, r0, #31
 8003c86:	0940      	lsrs	r0, r0, #5
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	4a01      	ldr	r2, [pc, #4]	; (8003c94 <arch_irq_enable+0x18>)
 8003c8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003c92:	4770      	bx	lr
 8003c94:	e000e100 	.word	0xe000e100

08003c98 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8003c98:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003c9a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	db08      	blt.n	8003cb2 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	0109      	lsls	r1, r1, #4
 8003ca2:	b2c9      	uxtb	r1, r1
 8003ca4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003ca8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003cac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8003cb0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	f000 000f 	and.w	r0, r0, #15
 8003cb6:	0109      	lsls	r1, r1, #4
 8003cb8:	b2c9      	uxtb	r1, r1
 8003cba:	4b01      	ldr	r3, [pc, #4]	; (8003cc0 <z_arm_irq_priority_set+0x28>)
 8003cbc:	5419      	strb	r1, [r3, r0]
}
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed14 	.word	0xe000ed14

08003cc4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003cc4:	bf30      	wfi
    b z_SysNmiOnReset
 8003cc6:	f7ff bffd 	b.w	8003cc4 <z_SysNmiOnReset>
 8003cca:	bf00      	nop

08003ccc <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003ccc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <z_arm_prep_c+0x28>)
 8003cd0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003cd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <z_arm_prep_c+0x2c>)
 8003cda:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ce0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003ce4:	f004 f8f6 	bl	8007ed4 <z_bss_zero>
	z_data_copy();
 8003ce8:	f005 f93c 	bl	8008f64 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003cec:	f000 fc6c 	bl	80045c8 <z_arm_interrupt_init>
	z_cstart();
 8003cf0:	f004 f8fc 	bl	8007eec <z_cstart>
 8003cf4:	08000000 	.word	0x08000000
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003cfc:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <arch_swap+0x28>)
 8003cfe:	6893      	ldr	r3, [r2, #8]
 8003d00:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8003d02:	4909      	ldr	r1, [pc, #36]	; (8003d28 <arch_swap+0x2c>)
 8003d04:	6809      	ldr	r1, [r1, #0]
 8003d06:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003d08:	4908      	ldr	r1, [pc, #32]	; (8003d2c <arch_swap+0x30>)
 8003d0a:	684b      	ldr	r3, [r1, #4]
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	604b      	str	r3, [r1, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003d1c:	6893      	ldr	r3, [r2, #8]
}
 8003d1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000e1c 	.word	0x20000e1c
 8003d28:	0800ee14 	.word	0x0800ee14
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003d30:	4912      	ldr	r1, [pc, #72]	; (8003d7c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003d32:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003d34:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003d38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003d3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003d3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003d42:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003d44:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003d48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003d4c:	4f0c      	ldr	r7, [pc, #48]	; (8003d80 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003d4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003d52:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003d54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003d56:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003d58:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003d5a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003d5c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003d5e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003d62:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003d64:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003d66:	f000 fc83 	bl	8004670 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003d6a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003d6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003d72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003d76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003d7a:	4770      	bx	lr
    ldr r1, =_kernel
 8003d7c:	20000e1c 	.word	0x20000e1c
    ldr v4, =_SCS_ICSR
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003d84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003d88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003d8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003d8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003d92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003d94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003d98:	2902      	cmp	r1, #2
    beq _oops
 8003d9a:	d0ff      	beq.n	8003d9c <_oops>

08003d9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003d9c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003d9e:	f007 fec4 	bl	800bb2a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003da2:	bd01      	pop	{r0, pc}

08003da4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8003da4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003da6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8003daa:	490d      	ldr	r1, [pc, #52]	; (8003de0 <arch_new_thread+0x3c>)
 8003dac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8003db0:	f021 0101 	bic.w	r1, r1, #1
 8003db4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8003db8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003dbc:	9b01      	ldr	r3, [sp, #4]
 8003dbe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8003dc2:	9b02      	ldr	r3, [sp, #8]
 8003dc4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003dce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8003dd6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003ddc:	bc10      	pop	{r4}
 8003dde:	4770      	bx	lr
 8003de0:	0800b293 	.word	0x0800b293

08003de4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <z_check_thread_stack_fail+0x48>)
 8003de6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8003de8:	b1ea      	cbz	r2, 8003e26 <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003dea:	f110 0f16 	cmn.w	r0, #22
 8003dee:	d010      	beq.n	8003e12 <z_check_thread_stack_fail+0x2e>
 8003df0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003df2:	f1a3 0c20 	sub.w	ip, r3, #32
 8003df6:	4584      	cmp	ip, r0
 8003df8:	d805      	bhi.n	8003e06 <z_check_thread_stack_fail+0x22>
 8003dfa:	4283      	cmp	r3, r0
 8003dfc:	d905      	bls.n	8003e0a <z_check_thread_stack_fail+0x26>
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d805      	bhi.n	8003e0e <z_check_thread_stack_fail+0x2a>
 8003e02:	2100      	movs	r1, #0
 8003e04:	e00a      	b.n	8003e1c <z_check_thread_stack_fail+0x38>
 8003e06:	2100      	movs	r1, #0
 8003e08:	e008      	b.n	8003e1c <z_check_thread_stack_fail+0x38>
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	e006      	b.n	8003e1c <z_check_thread_stack_fail+0x38>
 8003e0e:	2101      	movs	r1, #1
 8003e10:	e004      	b.n	8003e1c <z_check_thread_stack_fail+0x38>
 8003e12:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003e14:	428b      	cmp	r3, r1
 8003e16:	bf94      	ite	ls
 8003e18:	2100      	movls	r1, #0
 8003e1a:	2101      	movhi	r1, #1
 8003e1c:	b909      	cbnz	r1, 8003e22 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	4770      	bx	lr
		return thread->stack_info.start;
 8003e22:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003e24:	4770      	bx	lr
		return 0;
 8003e26:	2000      	movs	r0, #0
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000e1c 	.word	0x20000e1c

08003e30 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003e30:	b508      	push	{r3, lr}
 8003e32:	460d      	mov	r5, r1
 8003e34:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <arch_switch_to_main_thread+0x28>)
 8003e38:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003e3a:	f000 fc19 	bl	8004670 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f385 8809 	msr	PSP, r5
 8003e44:	2100      	movs	r1, #0
 8003e46:	b663      	cpsie	if
 8003e48:	f381 8811 	msr	BASEPRI, r1
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	2200      	movs	r2, #0
 8003e52:	2300      	movs	r3, #0
 8003e54:	f007 fa1d 	bl	800b292 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003e58:	20000e1c 	.word	0x20000e1c

08003e5c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003e5c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003e5e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003e62:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003e66:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003e6a:	4904      	ldr	r1, [pc, #16]	; (8003e7c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003e6c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003e6e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003e70:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003e72:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003e76:	4902      	ldr	r1, [pc, #8]	; (8003e80 <_isr_wrapper+0x24>)
	bx r1
 8003e78:	4708      	bx	r1
 8003e7a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003e7c:	0800db58 	.word	0x0800db58
	ldr r1, =z_arm_int_exit
 8003e80:	08003e85 	.word	0x08003e85

08003e84 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003e86:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003e88:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003e8a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003e8c:	d003      	beq.n	8003e96 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003e8e:	4903      	ldr	r1, [pc, #12]	; (8003e9c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003e94:	600a      	str	r2, [r1, #0]

08003e96 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003e96:	4770      	bx	lr
	ldr r3, =_kernel
 8003e98:	20000e1c 	.word	0x20000e1c
	ldr r1, =_SCS_ICSR
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8003ea0:	b508      	push	{r3, lr}
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <usage_fault+0x13c>)
 8003ea4:	4a4e      	ldr	r2, [pc, #312]	; (8003fe0 <usage_fault+0x140>)
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f362 0102 	bfi	r1, r2, #0, #3
 8003eb4:	f36f 01c5 	bfc	r1, #3, #3
 8003eb8:	f363 118f 	bfi	r1, r3, #6, #10
 8003ebc:	4849      	ldr	r0, [pc, #292]	; (8003fe4 <usage_fault+0x144>)
 8003ebe:	f7ff faa3 	bl	8003408 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003ec2:	4b49      	ldr	r3, [pc, #292]	; (8003fe8 <usage_fault+0x148>)
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003eca:	d121      	bne.n	8003f10 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003ecc:	4b46      	ldr	r3, [pc, #280]	; (8003fe8 <usage_fault+0x148>)
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003ed4:	d12d      	bne.n	8003f32 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003ed6:	4b44      	ldr	r3, [pc, #272]	; (8003fe8 <usage_fault+0x148>)
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ede:	d139      	bne.n	8003f54 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003ee0:	4b41      	ldr	r3, [pc, #260]	; (8003fe8 <usage_fault+0x148>)
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003ee8:	d145      	bne.n	8003f76 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <usage_fault+0x148>)
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ef2:	d151      	bne.n	8003f98 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003ef4:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <usage_fault+0x148>)
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003efc:	d15d      	bne.n	8003fba <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003efe:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <usage_fault+0x148>)
 8003f00:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f02:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003f06:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003f0a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	bd08      	pop	{r3, pc}
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <usage_fault+0x13c>)
 8003f12:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <usage_fault+0x140>)
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f362 0102 	bfi	r1, r2, #0, #3
 8003f22:	f36f 01c5 	bfc	r1, #3, #3
 8003f26:	f363 118f 	bfi	r1, r3, #6, #10
 8003f2a:	4830      	ldr	r0, [pc, #192]	; (8003fec <usage_fault+0x14c>)
 8003f2c:	f7ff fa6c 	bl	8003408 <log_0>
 8003f30:	e7cc      	b.n	8003ecc <usage_fault+0x2c>
 8003f32:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <usage_fault+0x13c>)
 8003f34:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <usage_fault+0x140>)
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f362 0102 	bfi	r1, r2, #0, #3
 8003f44:	f36f 01c5 	bfc	r1, #3, #3
 8003f48:	f363 118f 	bfi	r1, r3, #6, #10
 8003f4c:	4828      	ldr	r0, [pc, #160]	; (8003ff0 <usage_fault+0x150>)
 8003f4e:	f7ff fa5b 	bl	8003408 <log_0>
 8003f52:	e7c0      	b.n	8003ed6 <usage_fault+0x36>
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <usage_fault+0x13c>)
 8003f56:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <usage_fault+0x140>)
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	2201      	movs	r2, #1
 8003f62:	f362 0102 	bfi	r1, r2, #0, #3
 8003f66:	f36f 01c5 	bfc	r1, #3, #3
 8003f6a:	f363 118f 	bfi	r1, r3, #6, #10
 8003f6e:	4821      	ldr	r0, [pc, #132]	; (8003ff4 <usage_fault+0x154>)
 8003f70:	f7ff fa4a 	bl	8003408 <log_0>
 8003f74:	e7b4      	b.n	8003ee0 <usage_fault+0x40>
 8003f76:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <usage_fault+0x13c>)
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <usage_fault+0x140>)
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	2201      	movs	r2, #1
 8003f84:	f362 0102 	bfi	r1, r2, #0, #3
 8003f88:	f36f 01c5 	bfc	r1, #3, #3
 8003f8c:	f363 118f 	bfi	r1, r3, #6, #10
 8003f90:	4819      	ldr	r0, [pc, #100]	; (8003ff8 <usage_fault+0x158>)
 8003f92:	f7ff fa39 	bl	8003408 <log_0>
 8003f96:	e7a8      	b.n	8003eea <usage_fault+0x4a>
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <usage_fault+0x13c>)
 8003f9a:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <usage_fault+0x140>)
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f362 0102 	bfi	r1, r2, #0, #3
 8003faa:	f36f 01c5 	bfc	r1, #3, #3
 8003fae:	f363 118f 	bfi	r1, r3, #6, #10
 8003fb2:	4812      	ldr	r0, [pc, #72]	; (8003ffc <usage_fault+0x15c>)
 8003fb4:	f7ff fa28 	bl	8003408 <log_0>
 8003fb8:	e79c      	b.n	8003ef4 <usage_fault+0x54>
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <usage_fault+0x13c>)
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <usage_fault+0x140>)
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f362 0102 	bfi	r1, r2, #0, #3
 8003fcc:	f36f 01c5 	bfc	r1, #3, #3
 8003fd0:	f363 118f 	bfi	r1, r3, #6, #10
 8003fd4:	480a      	ldr	r0, [pc, #40]	; (8004000 <usage_fault+0x160>)
 8003fd6:	f7ff fa17 	bl	8003408 <log_0>
 8003fda:	e790      	b.n	8003efe <usage_fault+0x5e>
 8003fdc:	0800dd48 	.word	0x0800dd48
 8003fe0:	0800dd28 	.word	0x0800dd28
 8003fe4:	0800e424 	.word	0x0800e424
 8003fe8:	e000ed00 	.word	0xe000ed00
 8003fec:	0800e43c 	.word	0x0800e43c
 8003ff0:	0800e450 	.word	0x0800e450
 8003ff4:	0800e46c 	.word	0x0800e46c
 8003ff8:	0800e48c 	.word	0x0800e48c
 8003ffc:	0800e4b4 	.word	0x0800e4b4
 8004000:	0800e4d0 	.word	0x0800e4d0

08004004 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 8004004:	b508      	push	{r3, lr}
	*recoverable = false;
 8004006:	2200      	movs	r2, #0
 8004008:	700a      	strb	r2, [r1, #0]
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <debug_monitor+0x28>)
 800400c:	4908      	ldr	r1, [pc, #32]	; (8004030 <debug_monitor+0x2c>)
 800400e:	1a5b      	subs	r3, r3, r1
 8004010:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	2001      	movs	r0, #1
 8004018:	f360 0102 	bfi	r1, r0, #0, #3
 800401c:	f362 01c5 	bfi	r1, r2, #3, #3
 8004020:	f363 118f 	bfi	r1, r3, #6, #10
 8004024:	4803      	ldr	r0, [pc, #12]	; (8004034 <debug_monitor+0x30>)
 8004026:	f7ff f9ef 	bl	8003408 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 800402a:	bd08      	pop	{r3, pc}
 800402c:	0800dd48 	.word	0x0800dd48
 8004030:	0800dd28 	.word	0x0800dd28
 8004034:	0800e4fc 	.word	0x0800e4fc

08004038 <bus_fault>:
{
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4605      	mov	r5, r0
 800403c:	460e      	mov	r6, r1
 800403e:	4614      	mov	r4, r2
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <bus_fault+0x158>)
 8004042:	4a54      	ldr	r2, [pc, #336]	; (8004194 <bus_fault+0x15c>)
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	2201      	movs	r2, #1
 800404e:	f362 0102 	bfi	r1, r2, #0, #3
 8004052:	f36f 01c5 	bfc	r1, #3, #3
 8004056:	f363 118f 	bfi	r1, r3, #6, #10
 800405a:	484f      	ldr	r0, [pc, #316]	; (8004198 <bus_fault+0x160>)
 800405c:	f7ff f9d4 	bl	8003408 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004060:	4b4e      	ldr	r3, [pc, #312]	; (800419c <bus_fault+0x164>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004068:	d11f      	bne.n	80040aa <bus_fault+0x72>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800406a:	4b4c      	ldr	r3, [pc, #304]	; (800419c <bus_fault+0x164>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004072:	d12b      	bne.n	80040cc <bus_fault+0x94>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004074:	4b49      	ldr	r3, [pc, #292]	; (800419c <bus_fault+0x164>)
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	f413 7f00 	tst.w	r3, #512	; 0x200
 800407c:	d137      	bne.n	80040ee <bus_fault+0xb6>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <bus_fault+0x164>)
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004086:	d160      	bne.n	800414a <bus_fault+0x112>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <bus_fault+0x164>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004090:	d16c      	bne.n	800416c <bus_fault+0x134>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004092:	4a42      	ldr	r2, [pc, #264]	; (800419c <bus_fault+0x164>)
 8004094:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004096:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800409a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800409c:	2101      	movs	r1, #1
 800409e:	4628      	mov	r0, r5
 80040a0:	f007 fd55 	bl	800bb4e <memory_fault_recoverable>
 80040a4:	7020      	strb	r0, [r4, #0]
}
 80040a6:	2000      	movs	r0, #0
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <bus_fault+0x158>)
 80040ac:	4a39      	ldr	r2, [pc, #228]	; (8004194 <bus_fault+0x15c>)
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	2201      	movs	r2, #1
 80040b8:	f362 0102 	bfi	r1, r2, #0, #3
 80040bc:	f36f 01c5 	bfc	r1, #3, #3
 80040c0:	f363 118f 	bfi	r1, r3, #6, #10
 80040c4:	4836      	ldr	r0, [pc, #216]	; (80041a0 <bus_fault+0x168>)
 80040c6:	f7ff f99f 	bl	8003408 <log_0>
 80040ca:	e7ce      	b.n	800406a <bus_fault+0x32>
 80040cc:	4b30      	ldr	r3, [pc, #192]	; (8004190 <bus_fault+0x158>)
 80040ce:	4a31      	ldr	r2, [pc, #196]	; (8004194 <bus_fault+0x15c>)
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	2201      	movs	r2, #1
 80040da:	f362 0102 	bfi	r1, r2, #0, #3
 80040de:	f36f 01c5 	bfc	r1, #3, #3
 80040e2:	f363 118f 	bfi	r1, r3, #6, #10
 80040e6:	482f      	ldr	r0, [pc, #188]	; (80041a4 <bus_fault+0x16c>)
 80040e8:	f7ff f98e 	bl	8003408 <log_0>
 80040ec:	e7c2      	b.n	8004074 <bus_fault+0x3c>
 80040ee:	4b28      	ldr	r3, [pc, #160]	; (8004190 <bus_fault+0x158>)
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <bus_fault+0x15c>)
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	2201      	movs	r2, #1
 80040fc:	f362 0102 	bfi	r1, r2, #0, #3
 8004100:	f36f 01c5 	bfc	r1, #3, #3
 8004104:	f363 118f 	bfi	r1, r3, #6, #10
 8004108:	4827      	ldr	r0, [pc, #156]	; (80041a8 <bus_fault+0x170>)
 800410a:	f7ff f97d 	bl	8003408 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <bus_fault+0x164>)
 8004110:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004118:	d0b1      	beq.n	800407e <bus_fault+0x46>
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <bus_fault+0x158>)
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <bus_fault+0x15c>)
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	2001      	movs	r0, #1
 8004128:	f360 0202 	bfi	r2, r0, #0, #3
 800412c:	f36f 02c5 	bfc	r2, #3, #3
 8004130:	f363 128f 	bfi	r2, r3, #6, #10
 8004134:	481d      	ldr	r0, [pc, #116]	; (80041ac <bus_fault+0x174>)
 8004136:	f7ff f991 	bl	800345c <log_1>
			if (from_hard_fault != 0) {
 800413a:	2e00      	cmp	r6, #0
 800413c:	d09f      	beq.n	800407e <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800413e:	4a17      	ldr	r2, [pc, #92]	; (800419c <bus_fault+0x164>)
 8004140:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004146:	6293      	str	r3, [r2, #40]	; 0x28
 8004148:	e799      	b.n	800407e <bus_fault+0x46>
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <bus_fault+0x158>)
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <bus_fault+0x15c>)
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	2201      	movs	r2, #1
 8004158:	f362 0102 	bfi	r1, r2, #0, #3
 800415c:	f36f 01c5 	bfc	r1, #3, #3
 8004160:	f363 118f 	bfi	r1, r3, #6, #10
 8004164:	4812      	ldr	r0, [pc, #72]	; (80041b0 <bus_fault+0x178>)
 8004166:	f7ff f94f 	bl	8003408 <log_0>
 800416a:	e78d      	b.n	8004088 <bus_fault+0x50>
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <bus_fault+0x158>)
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <bus_fault+0x15c>)
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	2201      	movs	r2, #1
 800417a:	f362 0102 	bfi	r1, r2, #0, #3
 800417e:	f36f 01c5 	bfc	r1, #3, #3
 8004182:	f363 118f 	bfi	r1, r3, #6, #10
 8004186:	480b      	ldr	r0, [pc, #44]	; (80041b4 <bus_fault+0x17c>)
 8004188:	f7ff f93e 	bl	8003408 <log_0>
 800418c:	e781      	b.n	8004092 <bus_fault+0x5a>
 800418e:	bf00      	nop
 8004190:	0800dd48 	.word	0x0800dd48
 8004194:	0800dd28 	.word	0x0800dd28
 8004198:	0800e520 	.word	0x0800e520
 800419c:	e000ed00 	.word	0xe000ed00
 80041a0:	0800e538 	.word	0x0800e538
 80041a4:	0800e54c 	.word	0x0800e54c
 80041a8:	0800e560 	.word	0x0800e560
 80041ac:	0800e57c 	.word	0x0800e57c
 80041b0:	0800e594 	.word	0x0800e594
 80041b4:	0800e5b0 	.word	0x0800e5b0

080041b8 <mem_manage_fault>:
{
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	4605      	mov	r5, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	4616      	mov	r6, r2
 80041c0:	4b58      	ldr	r3, [pc, #352]	; (8004324 <mem_manage_fault+0x16c>)
 80041c2:	4a59      	ldr	r2, [pc, #356]	; (8004328 <mem_manage_fault+0x170>)
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	2201      	movs	r2, #1
 80041ce:	f362 0102 	bfi	r1, r2, #0, #3
 80041d2:	f36f 01c5 	bfc	r1, #3, #3
 80041d6:	f363 118f 	bfi	r1, r3, #6, #10
 80041da:	4854      	ldr	r0, [pc, #336]	; (800432c <mem_manage_fault+0x174>)
 80041dc:	f7ff f914 	bl	8003408 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <mem_manage_fault+0x178>)
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f013 0f10 	tst.w	r3, #16
 80041e8:	d12b      	bne.n	8004242 <mem_manage_fault+0x8a>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80041ea:	4b51      	ldr	r3, [pc, #324]	; (8004330 <mem_manage_fault+0x178>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	f013 0f08 	tst.w	r3, #8
 80041f2:	d137      	bne.n	8004264 <mem_manage_fault+0xac>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80041f4:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <mem_manage_fault+0x178>)
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f013 0f02 	tst.w	r3, #2
 80041fc:	d143      	bne.n	8004286 <mem_manage_fault+0xce>
	uint32_t mmfar = -EINVAL;
 80041fe:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8004202:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <mem_manage_fault+0x178>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	f013 0f01 	tst.w	r3, #1
 800420a:	d16e      	bne.n	80042ea <mem_manage_fault+0x132>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800420c:	4b48      	ldr	r3, [pc, #288]	; (8004330 <mem_manage_fault+0x178>)
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	f013 0f10 	tst.w	r3, #16
 8004214:	d104      	bne.n	8004220 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <mem_manage_fault+0x178>)
 8004218:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800421a:	f014 0402 	ands.w	r4, r4, #2
 800421e:	d004      	beq.n	800422a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <mem_manage_fault+0x178>)
 8004222:	685c      	ldr	r4, [r3, #4]
 8004224:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8004228:	d170      	bne.n	800430c <mem_manage_fault+0x154>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800422a:	4a41      	ldr	r2, [pc, #260]	; (8004330 <mem_manage_fault+0x178>)
 800422c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800422e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004232:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004234:	2101      	movs	r1, #1
 8004236:	4628      	mov	r0, r5
 8004238:	f007 fc89 	bl	800bb4e <memory_fault_recoverable>
 800423c:	7030      	strb	r0, [r6, #0]
}
 800423e:	4620      	mov	r0, r4
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004242:	4b38      	ldr	r3, [pc, #224]	; (8004324 <mem_manage_fault+0x16c>)
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <mem_manage_fault+0x170>)
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	2201      	movs	r2, #1
 8004250:	f362 0102 	bfi	r1, r2, #0, #3
 8004254:	f36f 01c5 	bfc	r1, #3, #3
 8004258:	f363 118f 	bfi	r1, r3, #6, #10
 800425c:	4835      	ldr	r0, [pc, #212]	; (8004334 <mem_manage_fault+0x17c>)
 800425e:	f7ff f8d3 	bl	8003408 <log_0>
 8004262:	e7c2      	b.n	80041ea <mem_manage_fault+0x32>
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <mem_manage_fault+0x16c>)
 8004266:	4a30      	ldr	r2, [pc, #192]	; (8004328 <mem_manage_fault+0x170>)
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	2201      	movs	r2, #1
 8004272:	f362 0102 	bfi	r1, r2, #0, #3
 8004276:	f36f 01c5 	bfc	r1, #3, #3
 800427a:	f363 118f 	bfi	r1, r3, #6, #10
 800427e:	482e      	ldr	r0, [pc, #184]	; (8004338 <mem_manage_fault+0x180>)
 8004280:	f7ff f8c2 	bl	8003408 <log_0>
 8004284:	e7b6      	b.n	80041f4 <mem_manage_fault+0x3c>
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <mem_manage_fault+0x16c>)
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <mem_manage_fault+0x170>)
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	2201      	movs	r2, #1
 8004294:	f362 0102 	bfi	r1, r2, #0, #3
 8004298:	f36f 01c5 	bfc	r1, #3, #3
 800429c:	f363 118f 	bfi	r1, r3, #6, #10
 80042a0:	4826      	ldr	r0, [pc, #152]	; (800433c <mem_manage_fault+0x184>)
 80042a2:	f7ff f8b1 	bl	8003408 <log_0>
		uint32_t temp = SCB->MMFAR;
 80042a6:	4b22      	ldr	r3, [pc, #136]	; (8004330 <mem_manage_fault+0x178>)
 80042a8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042b0:	d102      	bne.n	80042b8 <mem_manage_fault+0x100>
	uint32_t mmfar = -EINVAL;
 80042b2:	f06f 0715 	mvn.w	r7, #21
 80042b6:	e7a4      	b.n	8004202 <mem_manage_fault+0x4a>
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <mem_manage_fault+0x16c>)
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <mem_manage_fault+0x170>)
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	2101      	movs	r1, #1
 80042c6:	f361 0202 	bfi	r2, r1, #0, #3
 80042ca:	f36f 02c5 	bfc	r2, #3, #3
 80042ce:	f363 128f 	bfi	r2, r3, #6, #10
 80042d2:	4639      	mov	r1, r7
 80042d4:	481a      	ldr	r0, [pc, #104]	; (8004340 <mem_manage_fault+0x188>)
 80042d6:	f7ff f8c1 	bl	800345c <log_1>
			if (from_hard_fault != 0) {
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d091      	beq.n	8004202 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80042de:	4a14      	ldr	r2, [pc, #80]	; (8004330 <mem_manage_fault+0x178>)
 80042e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80042e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e6:	6293      	str	r3, [r2, #40]	; 0x28
 80042e8:	e78b      	b.n	8004202 <mem_manage_fault+0x4a>
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <mem_manage_fault+0x16c>)
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <mem_manage_fault+0x170>)
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	2201      	movs	r2, #1
 80042f8:	f362 0102 	bfi	r1, r2, #0, #3
 80042fc:	f36f 01c5 	bfc	r1, #3, #3
 8004300:	f363 118f 	bfi	r1, r3, #6, #10
 8004304:	480f      	ldr	r0, [pc, #60]	; (8004344 <mem_manage_fault+0x18c>)
 8004306:	f7ff f87f 	bl	8003408 <log_0>
 800430a:	e77f      	b.n	800420c <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff fd68 	bl	8003de4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004314:	4604      	mov	r4, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	d087      	beq.n	800422a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800431a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800431e:	2402      	movs	r4, #2
 8004320:	e783      	b.n	800422a <mem_manage_fault+0x72>
 8004322:	bf00      	nop
 8004324:	0800dd48 	.word	0x0800dd48
 8004328:	0800dd28 	.word	0x0800dd28
 800432c:	0800e5c8 	.word	0x0800e5c8
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	0800e5e0 	.word	0x0800e5e0
 8004338:	0800e54c 	.word	0x0800e54c
 800433c:	0800e614 	.word	0x0800e614
 8004340:	0800e62c 	.word	0x0800e62c
 8004344:	0800e644 	.word	0x0800e644

08004348 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4605      	mov	r5, r0
 800434c:	460c      	mov	r4, r1
 800434e:	4b46      	ldr	r3, [pc, #280]	; (8004468 <hard_fault+0x120>)
 8004350:	4a46      	ldr	r2, [pc, #280]	; (800446c <hard_fault+0x124>)
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	2201      	movs	r2, #1
 800435c:	f362 0102 	bfi	r1, r2, #0, #3
 8004360:	f36f 01c5 	bfc	r1, #3, #3
 8004364:	f363 118f 	bfi	r1, r3, #6, #10
 8004368:	4841      	ldr	r0, [pc, #260]	; (8004470 <hard_fault+0x128>)
 800436a:	f7ff f84d 	bl	8003408 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 800436e:	2300      	movs	r3, #0
 8004370:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004372:	4b40      	ldr	r3, [pc, #256]	; (8004474 <hard_fault+0x12c>)
 8004374:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004376:	f016 0602 	ands.w	r6, r6, #2
 800437a:	d109      	bne.n	8004390 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 800437c:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <hard_fault+0x12c>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	db17      	blt.n	80043b4 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8004384:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <hard_fault+0x12c>)
 8004386:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004388:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800438c:	d124      	bne.n	80043d8 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	4b35      	ldr	r3, [pc, #212]	; (8004468 <hard_fault+0x120>)
 8004392:	4a36      	ldr	r2, [pc, #216]	; (800446c <hard_fault+0x124>)
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	2201      	movs	r2, #1
 800439e:	f362 0102 	bfi	r1, r2, #0, #3
 80043a2:	f36f 01c5 	bfc	r1, #3, #3
 80043a6:	f363 118f 	bfi	r1, r3, #6, #10
 80043aa:	4833      	ldr	r0, [pc, #204]	; (8004478 <hard_fault+0x130>)
 80043ac:	f7ff f82c 	bl	8003408 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80043b0:	2000      	movs	r0, #0
 80043b2:	e7ec      	b.n	800438e <hard_fault+0x46>
 80043b4:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <hard_fault+0x120>)
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <hard_fault+0x124>)
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	2201      	movs	r2, #1
 80043c2:	f362 0102 	bfi	r1, r2, #0, #3
 80043c6:	f36f 01c5 	bfc	r1, #3, #3
 80043ca:	f363 118f 	bfi	r1, r3, #6, #10
 80043ce:	482b      	ldr	r0, [pc, #172]	; (800447c <hard_fault+0x134>)
 80043d0:	f7ff f81a 	bl	8003408 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80043d4:	4630      	mov	r0, r6
 80043d6:	e7da      	b.n	800438e <hard_fault+0x46>
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <hard_fault+0x120>)
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <hard_fault+0x124>)
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	2201      	movs	r2, #1
 80043e6:	f362 0102 	bfi	r1, r2, #0, #3
 80043ea:	f36f 01c5 	bfc	r1, #3, #3
 80043ee:	f363 118f 	bfi	r1, r3, #6, #10
 80043f2:	4823      	ldr	r0, [pc, #140]	; (8004480 <hard_fault+0x138>)
 80043f4:	f7ff f808 	bl	8003408 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80043f8:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 80043fa:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80043fe:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8004402:	429a      	cmp	r2, r3
 8004404:	d00d      	beq.n	8004422 <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <hard_fault+0x12c>)
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440c:	b9e3      	cbnz	r3, 8004448 <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <hard_fault+0x12c>)
 8004410:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004414:	b9f3      	cbnz	r3, 8004454 <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <hard_fault+0x12c>)
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	bb03      	cbnz	r3, 8004460 <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800441e:	4630      	mov	r0, r6
	return reason;
 8004420:	e7b5      	b.n	800438e <hard_fault+0x46>
 8004422:	4b11      	ldr	r3, [pc, #68]	; (8004468 <hard_fault+0x120>)
 8004424:	4a11      	ldr	r2, [pc, #68]	; (800446c <hard_fault+0x124>)
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	2101      	movs	r1, #1
 8004430:	f361 0202 	bfi	r2, r1, #0, #3
 8004434:	f36f 02c5 	bfc	r2, #3, #3
 8004438:	f363 128f 	bfi	r2, r3, #6, #10
 800443c:	6829      	ldr	r1, [r5, #0]
 800443e:	4811      	ldr	r0, [pc, #68]	; (8004484 <hard_fault+0x13c>)
 8004440:	f7ff f80c 	bl	800345c <log_1>
			reason = esf->basic.r0;
 8004444:	6828      	ldr	r0, [r5, #0]
 8004446:	e7a2      	b.n	800438e <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004448:	4622      	mov	r2, r4
 800444a:	2101      	movs	r1, #1
 800444c:	4628      	mov	r0, r5
 800444e:	f7ff feb3 	bl	80041b8 <mem_manage_fault>
 8004452:	e79c      	b.n	800438e <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
 8004454:	4622      	mov	r2, r4
 8004456:	2101      	movs	r1, #1
 8004458:	4628      	mov	r0, r5
 800445a:	f7ff fded 	bl	8004038 <bus_fault>
 800445e:	e796      	b.n	800438e <hard_fault+0x46>
			reason = usage_fault(esf);
 8004460:	4628      	mov	r0, r5
 8004462:	f7ff fd1d 	bl	8003ea0 <usage_fault>
 8004466:	e792      	b.n	800438e <hard_fault+0x46>
 8004468:	0800dd48 	.word	0x0800dd48
 800446c:	0800dd28 	.word	0x0800dd28
 8004470:	0800e664 	.word	0x0800e664
 8004474:	e000ed00 	.word	0xe000ed00
 8004478:	0800e67c 	.word	0x0800e67c
 800447c:	0800e6a0 	.word	0x0800e6a0
 8004480:	0800e6b0 	.word	0x0800e6b0
 8004484:	0800e6d0 	.word	0x0800e6d0

08004488 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8004488:	b508      	push	{r3, lr}
 800448a:	460a      	mov	r2, r1
 800448c:	480b      	ldr	r0, [pc, #44]	; (80044bc <reserved_exception+0x34>)
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <reserved_exception+0x38>)
 8004490:	1ac0      	subs	r0, r0, r3
 8004492:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	2101      	movs	r1, #1
 800449a:	f361 0302 	bfi	r3, r1, #0, #3
 800449e:	f36f 03c5 	bfc	r3, #3, #3
 80044a2:	f360 138f 	bfi	r3, r0, #6, #10
 80044a6:	2a0f      	cmp	r2, #15
 80044a8:	dc05      	bgt.n	80044b6 <reserved_exception+0x2e>
 80044aa:	4906      	ldr	r1, [pc, #24]	; (80044c4 <reserved_exception+0x3c>)
 80044ac:	3a10      	subs	r2, #16
 80044ae:	4806      	ldr	r0, [pc, #24]	; (80044c8 <reserved_exception+0x40>)
 80044b0:	f7ff f806 	bl	80034c0 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 80044b4:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 80044b6:	4905      	ldr	r1, [pc, #20]	; (80044cc <reserved_exception+0x44>)
 80044b8:	e7f8      	b.n	80044ac <reserved_exception+0x24>
 80044ba:	bf00      	nop
 80044bc:	0800dd48 	.word	0x0800dd48
 80044c0:	0800dd28 	.word	0x0800dd28
 80044c4:	0800e6ec 	.word	0x0800e6ec
 80044c8:	0800e720 	.word	0x0800e720
 80044cc:	0800e704 	.word	0x0800e704

080044d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <z_arm_fault+0xc4>)
 80044d6:	685d      	ldr	r5, [r3, #4]
 80044d8:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80044dc:	2300      	movs	r3, #0
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80044e6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80044ea:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80044ee:	d12a      	bne.n	8004546 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80044f0:	f002 030c 	and.w	r3, r2, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d010      	beq.n	800451a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80044f8:	f012 0f08 	tst.w	r2, #8
 80044fc:	d020      	beq.n	8004540 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
 80044fe:	460c      	mov	r4, r1
	*nested_exc = false;
 8004500:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8004502:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8004506:	4629      	mov	r1, r5
 8004508:	4620      	mov	r0, r4
 800450a:	f007 fb22 	bl	800bb52 <fault_handle>
 800450e:	4605      	mov	r5, r0
	if (recoverable) {
 8004510:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004514:	b1d3      	cbz	r3, 800454c <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8004516:	b00a      	add	sp, #40	; 0x28
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <z_arm_fault+0xc8>)
 800451c:	4a1f      	ldr	r2, [pc, #124]	; (800459c <z_arm_fault+0xcc>)
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	2201      	movs	r2, #1
 8004528:	f362 0102 	bfi	r1, r2, #0, #3
 800452c:	f36f 01c5 	bfc	r1, #3, #3
 8004530:	f363 118f 	bfi	r1, r3, #6, #10
 8004534:	481a      	ldr	r0, [pc, #104]	; (80045a0 <z_arm_fault+0xd0>)
 8004536:	f7fe ff67 	bl	8003408 <log_0>
	*nested_exc = false;
 800453a:	2600      	movs	r6, #0
		return NULL;
 800453c:	4634      	mov	r4, r6
 800453e:	e7e0      	b.n	8004502 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8004540:	4604      	mov	r4, r0
			*nested_exc = true;
 8004542:	2601      	movs	r6, #1
 8004544:	e7dd      	b.n	8004502 <z_arm_fault+0x32>
	*nested_exc = false;
 8004546:	2600      	movs	r6, #0
		return NULL;
 8004548:	4634      	mov	r4, r6
 800454a:	e7da      	b.n	8004502 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800454c:	f10d 0c04 	add.w	ip, sp, #4
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	6861      	ldr	r1, [r4, #4]
 8004554:	68a2      	ldr	r2, [r4, #8]
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800455c:	6920      	ldr	r0, [r4, #16]
 800455e:	6961      	ldr	r1, [r4, #20]
 8004560:	69a2      	ldr	r2, [r4, #24]
 8004562:	69e3      	ldr	r3, [r4, #28]
 8004564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8004568:	b146      	cbz	r6, 800457c <z_arm_fault+0xac>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800456a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800456e:	b95a      	cbnz	r2, 8004588 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004570:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004574:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8004578:	9308      	str	r3, [sp, #32]
 800457a:	e005      	b.n	8004588 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800457c:	9b08      	ldr	r3, [sp, #32]
 800457e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8004588:	a901      	add	r1, sp, #4
 800458a:	4628      	mov	r0, r5
 800458c:	f007 fac1 	bl	800bb12 <z_arm_fatal_error>
 8004590:	e7c1      	b.n	8004516 <z_arm_fault+0x46>
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00
 8004598:	0800dd48 	.word	0x0800dd48
 800459c:	0800dd28 	.word	0x0800dd28
 80045a0:	0800e734 	.word	0x0800e734

080045a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80045a4:	4a02      	ldr	r2, [pc, #8]	; (80045b0 <z_arm_fault_init+0xc>)
 80045a6:	6953      	ldr	r3, [r2, #20]
 80045a8:	f043 0310 	orr.w	r3, r3, #16
 80045ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80045ae:	4770      	bx	lr
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80045b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80045b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80045bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80045be:	4672      	mov	r2, lr
	bl z_arm_fault
 80045c0:	f7ff ff86 	bl	80044d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80045c4:	bd01      	pop	{r0, pc}
 80045c6:	bf00      	nop

080045c8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80045c8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80045ca:	e006      	b.n	80045da <z_arm_interrupt_init+0x12>
 80045cc:	f002 010f 	and.w	r1, r2, #15
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <z_arm_interrupt_init+0x30>)
 80045d2:	440b      	add	r3, r1
 80045d4:	2110      	movs	r1, #16
 80045d6:	7619      	strb	r1, [r3, #24]
 80045d8:	3201      	adds	r2, #1
 80045da:	2a38      	cmp	r2, #56	; 0x38
 80045dc:	dc0a      	bgt.n	80045f4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 80045de:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dbf3      	blt.n	80045cc <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80045e8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80045ec:	2110      	movs	r1, #16
 80045ee:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80045f2:	e7f1      	b.n	80045d8 <z_arm_interrupt_init+0x10>
	}
}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000ecfc 	.word	0xe000ecfc

080045fc <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80045fc:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80045fe:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004602:	4808      	ldr	r0, [pc, #32]	; (8004624 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004604:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8004608:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800460a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800460e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004612:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004614:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8004616:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800461a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800461e:	f7ff fb55 	bl	8003ccc <z_arm_prep_c>
 8004622:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004624:	20002f40 	.word	0x20002f40

08004628 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8004628:	b508      	push	{r3, lr}
	if (_current == thread) {
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <z_impl_k_thread_abort+0x24>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4283      	cmp	r3, r0
 8004630:	d002      	beq.n	8004638 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004632:	f004 fc5b 	bl	8008eec <z_thread_abort>
}
 8004636:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004638:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f8      	beq.n	8004632 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004640:	4a03      	ldr	r2, [pc, #12]	; (8004650 <z_impl_k_thread_abort+0x28>)
 8004642:	6853      	ldr	r3, [r2, #4]
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6053      	str	r3, [r2, #4]
 800464a:	e7f2      	b.n	8004632 <z_impl_k_thread_abort+0xa>
 800464c:	20000e1c 	.word	0x20000e1c
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8004654:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8004656:	4b03      	ldr	r3, [pc, #12]	; (8004664 <z_arm_configure_static_mpu_regions+0x10>)
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <z_arm_configure_static_mpu_regions+0x14>)
 800465a:	2101      	movs	r1, #1
 800465c:	4803      	ldr	r0, [pc, #12]	; (800466c <z_arm_configure_static_mpu_regions+0x18>)
 800465e:	f007 facd 	bl	800bbfc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8004662:	bd08      	pop	{r3, pc}
 8004664:	20014000 	.word	0x20014000
 8004668:	20000000 	.word	0x20000000
 800466c:	0800e764 	.word	0x0800e764

08004670 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004670:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004672:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004674:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004676:	4805      	ldr	r0, [pc, #20]	; (800468c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8004678:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 800467a:	2320      	movs	r3, #32
 800467c:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8004680:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004682:	2101      	movs	r1, #1
 8004684:	f007 fabe 	bl	800bc04 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8004688:	bd08      	pop	{r3, pc}
 800468a:	bf00      	nop
 800468c:	20000998 	.word	0x20000998
 8004690:	150b0000 	.word	0x150b0000

08004694 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8004694:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <region_init+0x24>)
 8004696:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800469a:	680b      	ldr	r3, [r1, #0]
 800469c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80046a0:	4303      	orrs	r3, r0
 80046a2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80046a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80046aa:	688b      	ldr	r3, [r1, #8]
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 80046bc:	b510      	push	{r4, lr}
 80046be:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 80046c0:	2807      	cmp	r0, #7
 80046c2:	d803      	bhi.n	80046cc <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 80046c4:	f7ff ffe6 	bl	8004694 <region_init>

	return index;
 80046c8:	4620      	mov	r0, r4
}
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <region_allocate_and_init+0x38>)
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <region_allocate_and_init+0x3c>)
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	2101      	movs	r1, #1
 80046da:	f361 0202 	bfi	r2, r1, #0, #3
 80046de:	f36f 02c5 	bfc	r2, #3, #3
 80046e2:	f363 128f 	bfi	r2, r3, #6, #10
 80046e6:	4601      	mov	r1, r0
 80046e8:	4804      	ldr	r0, [pc, #16]	; (80046fc <region_allocate_and_init+0x40>)
 80046ea:	f7fe feb7 	bl	800345c <log_1>
		return -EINVAL;
 80046ee:	f06f 0015 	mvn.w	r0, #21
 80046f2:	e7ea      	b.n	80046ca <region_allocate_and_init+0xe>
 80046f4:	0800dd40 	.word	0x0800dd40
 80046f8:	0800dd28 	.word	0x0800dd28
 80046fc:	0800e770 	.word	0x0800e770

08004700 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	4680      	mov	r8, r0
 8004706:	460f      	mov	r7, r1
 8004708:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
 800470a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 800470c:	2400      	movs	r4, #0
 800470e:	e009      	b.n	8004724 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004710:	4629      	mov	r1, r5
 8004712:	b2f0      	uxtb	r0, r6
 8004714:	f007 fa53 	bl	800bbbe <mpu_configure_region>
 8004718:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 800471a:	f110 0f16 	cmn.w	r0, #22
 800471e:	d025      	beq.n	800476c <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004720:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004722:	3401      	adds	r4, #1
 8004724:	42bc      	cmp	r4, r7
 8004726:	da21      	bge.n	800476c <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
 8004728:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800472c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004730:	686a      	ldr	r2, [r5, #4]
 8004732:	2a00      	cmp	r2, #0
 8004734:	d0f5      	beq.n	8004722 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 8004736:	f1ba 0f00 	cmp.w	sl, #0
 800473a:	d0e9      	beq.n	8004710 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 800473c:	4628      	mov	r0, r5
 800473e:	f007 fa2d 	bl	800bb9c <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004742:	2800      	cmp	r0, #0
 8004744:	d1e4      	bne.n	8004710 <mpu_configure_regions+0x10>
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <mpu_configure_regions+0x74>)
 8004748:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <mpu_configure_regions+0x78>)
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	2101      	movs	r1, #1
 8004754:	f361 0202 	bfi	r2, r1, #0, #3
 8004758:	f36f 02c5 	bfc	r2, #3, #3
 800475c:	f363 128f 	bfi	r2, r3, #6, #10
 8004760:	4621      	mov	r1, r4
 8004762:	4806      	ldr	r0, [pc, #24]	; (800477c <mpu_configure_regions+0x7c>)
 8004764:	f7fe fe7a 	bl	800345c <log_1>
			return -EINVAL;
 8004768:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 800476c:	4630      	mov	r0, r6
 800476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004772:	bf00      	nop
 8004774:	0800dd40 	.word	0x0800dd40
 8004778:	0800dd28 	.word	0x0800dd28
 800477c:	0800e798 	.word	0x0800e798

08004780 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8004780:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8004782:	4c03      	ldr	r4, [pc, #12]	; (8004790 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004784:	2301      	movs	r3, #1
 8004786:	7822      	ldrb	r2, [r4, #0]
 8004788:	f7ff ffba 	bl	8004700 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800478c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 800478e:	bd10      	pop	{r4, pc}
 8004790:	20000e7b 	.word	0x20000e7b

08004794 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8004794:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004796:	2300      	movs	r3, #0
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <mpu_configure_dynamic_mpu_regions+0x2c>)
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	f7ff ffb0 	bl	8004700 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80047a0:	f110 0f16 	cmn.w	r0, #22
 80047a4:	d00a      	beq.n	80047bc <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80047a6:	4603      	mov	r3, r0
 80047a8:	e006      	b.n	80047b8 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80047aa:	4a06      	ldr	r2, [pc, #24]	; (80047c4 <mpu_configure_dynamic_mpu_regions+0x30>)
 80047ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 80047b0:	2100      	movs	r1, #0
 80047b2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80047b6:	3301      	adds	r3, #1
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	ddf6      	ble.n	80047aa <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 80047bc:	bd08      	pop	{r3, pc}
 80047be:	bf00      	nop
 80047c0:	20000e7b 	.word	0x20000e7b
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <arm_core_mpu_enable+0x14>)
 80047ca:	2205      	movs	r2, #5
 80047cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80047d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047d4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80047e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <arm_core_mpu_disable+0x10>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 80047f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <z_arm_mpu_init+0x3c>)
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	2d08      	cmp	r5, #8
 80047fc:	d815      	bhi.n	800482a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80047fe:	f7ff ffef 	bl	80047e0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004802:	2400      	movs	r4, #0
 8004804:	e009      	b.n	800481a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <z_arm_mpu_init+0x3c>)
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800480e:	0093      	lsls	r3, r2, #2
 8004810:	4419      	add	r1, r3
 8004812:	4620      	mov	r0, r4
 8004814:	f7ff ff3e 	bl	8004694 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004818:	3401      	adds	r4, #1
 800481a:	42a5      	cmp	r5, r4
 800481c:	d8f3      	bhi.n	8004806 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <z_arm_mpu_init+0x40>)
 8004820:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8004822:	f7ff ffd1 	bl	80047c8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004826:	2000      	movs	r0, #0
}
 8004828:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800482a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800482e:	e7fb      	b.n	8004828 <z_arm_mpu_init+0x34>
 8004830:	0800e7d4 	.word	0x0800e7d4
 8004834:	20000e7b 	.word	0x20000e7b

08004838 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <__stdout_hook_install+0x8>)
 800483a:	6018      	str	r0, [r3, #0]
}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	2000000c 	.word	0x2000000c

08004844 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4606      	mov	r6, r0
 8004848:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 800484a:	2400      	movs	r4, #0
 800484c:	e000      	b.n	8004850 <z_impl_zephyr_read_stdin+0xc>
 800484e:	3401      	adds	r4, #1
 8004850:	42ac      	cmp	r4, r5
 8004852:	da08      	bge.n	8004866 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8004854:	4b05      	ldr	r3, [pc, #20]	; (800486c <z_impl_zephyr_read_stdin+0x28>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4798      	blx	r3
 800485a:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 800485c:	280a      	cmp	r0, #10
 800485e:	d001      	beq.n	8004864 <z_impl_zephyr_read_stdin+0x20>
 8004860:	280d      	cmp	r0, #13
 8004862:	d1f4      	bne.n	800484e <z_impl_zephyr_read_stdin+0xa>
			i++;
 8004864:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8004866:	4620      	mov	r0, r4
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	bf00      	nop
 800486c:	20000008 	.word	0x20000008

08004870 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	4605      	mov	r5, r0
 8004874:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8004876:	2400      	movs	r4, #0
 8004878:	e004      	b.n	8004884 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <z_impl_zephyr_write_stdout+0x30>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	7830      	ldrb	r0, [r6, #0]
 8004880:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8004882:	3401      	adds	r4, #1
 8004884:	42bc      	cmp	r4, r7
 8004886:	da08      	bge.n	800489a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8004888:	192e      	adds	r6, r5, r4
 800488a:	5d2b      	ldrb	r3, [r5, r4]
 800488c:	2b0a      	cmp	r3, #10
 800488e:	d1f4      	bne.n	800487a <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <z_impl_zephyr_write_stdout+0x30>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	200d      	movs	r0, #13
 8004896:	4798      	blx	r3
 8004898:	e7ef      	b.n	800487a <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 800489a:	4638      	mov	r0, r7
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80048a4:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 80048a6:	2205      	movs	r2, #5
 80048a8:	4902      	ldr	r1, [pc, #8]	; (80048b4 <_exit+0x10>)
 80048aa:	2001      	movs	r0, #1
 80048ac:	f007 f9bb 	bl	800bc26 <_write>
	while (1) {
 80048b0:	e7fe      	b.n	80048b0 <_exit+0xc>
 80048b2:	bf00      	nop
 80048b4:	0800e7bc 	.word	0x0800e7bc

080048b8 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80048b8:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <_sbrk+0x24>)
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_sbrk+0x28>)
 80048c0:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80048c2:	440a      	add	r2, r1
 80048c4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80048c8:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d202      	bcs.n	80048d6 <_sbrk+0x1e>
		heap_sz += count;
 80048d0:	4b02      	ldr	r3, [pc, #8]	; (80048dc <_sbrk+0x24>)
 80048d2:	601a      	str	r2, [r3, #0]
		ret = ptr;
 80048d4:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 80048da:	4770      	bx	lr
 80048dc:	200009a4 	.word	0x200009a4
 80048e0:	200040ca 	.word	0x200040ca

080048e4 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 80048ea:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 80048ec:	e000      	b.n	80048f0 <__stm32_exti_isr+0xc>
 80048ee:	3401      	adds	r4, #1
 80048f0:	42ac      	cmp	r4, r5
 80048f2:	da14      	bge.n	800491e <__stm32_exti_isr+0x3a>
	if (line < 32) {
 80048f4:	2c1f      	cmp	r4, #31
 80048f6:	dcfa      	bgt.n	80048ee <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80048f8:	2301      	movs	r3, #1
 80048fa:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <__stm32_exti_isr+0x3c>)
 80048fe:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8004900:	ea33 0202 	bics.w	r2, r3, r2
 8004904:	d1f3      	bne.n	80048ee <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004906:	4a06      	ldr	r2, [pc, #24]	; (8004920 <__stm32_exti_isr+0x3c>)
 8004908:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800490a:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0ed      	beq.n	80048ee <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004912:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8004916:	6851      	ldr	r1, [r2, #4]
 8004918:	4620      	mov	r0, r4
 800491a:	4798      	blx	r3
 800491c:	e7e7      	b.n	80048ee <__stm32_exti_isr+0xa>
		}
	}
}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	40010400 	.word	0x40010400

08004924 <stm32_exti_enable>:
{
 8004924:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8004926:	2301      	movs	r3, #1
 8004928:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 800492a:	4a04      	ldr	r2, [pc, #16]	; (800493c <stm32_exti_enable+0x18>)
 800492c:	6811      	ldr	r1, [r2, #0]
 800492e:	430b      	orrs	r3, r1
 8004930:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004932:	4b03      	ldr	r3, [pc, #12]	; (8004940 <stm32_exti_enable+0x1c>)
 8004934:	5618      	ldrsb	r0, [r3, r0]
 8004936:	f7ff f9a1 	bl	8003c7c <arch_irq_enable>
}
 800493a:	bd08      	pop	{r3, pc}
 800493c:	40010400 	.word	0x40010400
 8004940:	0800e814 	.word	0x0800e814

08004944 <stm32_exti_disable>:
	if (line < 32) {
 8004944:	281f      	cmp	r0, #31
 8004946:	dc06      	bgt.n	8004956 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8004948:	2301      	movs	r3, #1
 800494a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800494c:	4a02      	ldr	r2, [pc, #8]	; (8004958 <stm32_exti_disable+0x14>)
 800494e:	6810      	ldr	r0, [r2, #0]
 8004950:	ea20 0003 	bic.w	r0, r0, r3
 8004954:	6010      	str	r0, [r2, #0]
}
 8004956:	4770      	bx	lr
 8004958:	40010400 	.word	0x40010400

0800495c <stm32_exti_trigger>:
	switch (trigger) {
 800495c:	2903      	cmp	r1, #3
 800495e:	d832      	bhi.n	80049c6 <stm32_exti_trigger+0x6a>
 8004960:	e8df f001 	tbb	[pc, r1]
 8004964:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8004968:	2301      	movs	r3, #1
 800496a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <stm32_exti_trigger+0x6c>)
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	ea22 0200 	bic.w	r2, r2, r0
 8004976:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	ea22 0000 	bic.w	r0, r2, r0
 800497e:	60d8      	str	r0, [r3, #12]
}
 8004980:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004982:	2301      	movs	r3, #1
 8004984:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <stm32_exti_trigger+0x6c>)
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	4302      	orrs	r2, r0
 800498e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	ea22 0000 	bic.w	r0, r2, r0
 8004996:	60d8      	str	r0, [r3, #12]
}
 8004998:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800499a:	2301      	movs	r3, #1
 800499c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <stm32_exti_trigger+0x6c>)
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	4302      	orrs	r2, r0
 80049a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	ea22 0000 	bic.w	r0, r2, r0
 80049ae:	6098      	str	r0, [r3, #8]
}
 80049b0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80049b2:	2301      	movs	r3, #1
 80049b4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <stm32_exti_trigger+0x6c>)
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4302      	orrs	r2, r0
 80049be:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	4310      	orrs	r0, r2
 80049c4:	60d8      	str	r0, [r3, #12]
}
 80049c6:	4770      	bx	lr
 80049c8:	40010400 	.word	0x40010400

080049cc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <stm32_exti_set_callback+0x20>)
 80049ce:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80049d2:	b93b      	cbnz	r3, 80049e4 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <stm32_exti_set_callback+0x20>)
 80049d6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80049da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80049de:	6042      	str	r2, [r0, #4]

	return 0;
 80049e0:	2000      	movs	r0, #0
 80049e2:	4770      	bx	lr
		return -EBUSY;
 80049e4:	f06f 000f 	mvn.w	r0, #15
}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	200009a8 	.word	0x200009a8

080049f0 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80049f0:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <stm32_exti_unset_callback+0x10>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80049f8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80049fc:	605a      	str	r2, [r3, #4]
}
 80049fe:	4770      	bx	lr
 8004a00:	200009a8 	.word	0x200009a8

08004a04 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8004a04:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004a06:	680b      	ldr	r3, [r1, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d011      	beq.n	8004a30 <stm32_clock_control_on+0x2c>
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d01a      	beq.n	8004a46 <stm32_clock_control_on+0x42>
 8004a10:	b11b      	cbz	r3, 8004a1a <stm32_clock_control_on+0x16>
 8004a12:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8004a16:	b004      	add	sp, #16
 8004a18:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8004a1a:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004a1c:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <stm32_clock_control_on+0x58>)
 8004a1e:	69d1      	ldr	r1, [r2, #28]
 8004a20:	4319      	orrs	r1, r3
 8004a22:	61d1      	str	r1, [r2, #28]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004a24:	69d2      	ldr	r2, [r2, #28]
 8004a26:	4013      	ands	r3, r2
 8004a28:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004a2a:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004a2c:	2000      	movs	r0, #0
}
 8004a2e:	e7f2      	b.n	8004a16 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004a30:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <stm32_clock_control_on+0x58>)
 8004a34:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004a36:	4319      	orrs	r1, r3
 8004a38:	6251      	str	r1, [r2, #36]	; 0x24
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004a40:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8004a42:	2000      	movs	r0, #0
}
 8004a44:	e7e7      	b.n	8004a16 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004a46:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a48:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <stm32_clock_control_on+0x58>)
 8004a4a:	6a11      	ldr	r1, [r2, #32]
 8004a4c:	4319      	orrs	r1, r3
 8004a4e:	6211      	str	r1, [r2, #32]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a50:	6a12      	ldr	r2, [r2, #32]
 8004a52:	4013      	ands	r3, r2
 8004a54:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004a56:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8004a58:	2000      	movs	r0, #0
}
 8004a5a:	e7dc      	b.n	8004a16 <stm32_clock_control_on+0x12>
 8004a5c:	40023800 	.word	0x40023800

08004a60 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004a60:	680b      	ldr	r3, [r1, #0]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d00d      	beq.n	8004a82 <stm32_clock_control_off+0x22>
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d013      	beq.n	8004a92 <stm32_clock_control_off+0x32>
 8004a6a:	b113      	cbz	r3, 8004a72 <stm32_clock_control_off+0x12>
 8004a6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8004a70:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8004a72:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8004a74:	4a0b      	ldr	r2, [pc, #44]	; (8004aa4 <stm32_clock_control_off+0x44>)
 8004a76:	69d3      	ldr	r3, [r2, #28]
 8004a78:	ea23 0301 	bic.w	r3, r3, r1
 8004a7c:	61d3      	str	r3, [r2, #28]
	return 0;
 8004a7e:	2000      	movs	r0, #0
}
 8004a80:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8004a82:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004a84:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <stm32_clock_control_off+0x44>)
 8004a86:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004a88:	ea23 0301 	bic.w	r3, r3, r1
 8004a8c:	6253      	str	r3, [r2, #36]	; 0x24
	return 0;
 8004a8e:	2000      	movs	r0, #0
}
 8004a90:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8004a92:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8004a94:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <stm32_clock_control_off+0x44>)
 8004a96:	6a13      	ldr	r3, [r2, #32]
 8004a98:	ea23 0301 	bic.w	r3, r3, r1
 8004a9c:	6213      	str	r3, [r2, #32]
	return 0;
 8004a9e:	2000      	movs	r0, #0
}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <stm32_clock_control_get_subsys_rate+0x3c>)
 8004ab0:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f007 f944 	bl	800bd42 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d80e      	bhi.n	8004ade <stm32_clock_control_get_subsys_rate+0x36>
 8004ac0:	e8df f003 	tbb	[pc, r3]
 8004ac4:	0a070404 	.word	0x0a070404
 8004ac8:	0d0d      	.short	0x0d0d
 8004aca:	04          	.byte	0x04
 8004acb:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8004acc:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004ace:	2000      	movs	r0, #0
}
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8004ad2:	6028      	str	r0, [r5, #0]
	return 0;
 8004ad4:	2000      	movs	r0, #0
		break;
 8004ad6:	e7fb      	b.n	8004ad0 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004ad8:	6028      	str	r0, [r5, #0]
	return 0;
 8004ada:	2000      	movs	r0, #0
		break;
 8004adc:	e7f8      	b.n	8004ad0 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8004ade:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004ae2:	e7f5      	b.n	8004ad0 <stm32_clock_control_get_subsys_rate+0x28>
 8004ae4:	200000b0 	.word	0x200000b0

08004ae8 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <stm32_clock_switch_to_hsi+0x44>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f013 0f02 	tst.w	r3, #2
 8004af0:	d109      	bne.n	8004b06 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004af2:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <stm32_clock_switch_to_hsi+0x44>)
 8004af4:	6813      	ldr	r3, [r2, #0]
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004afc:	4b0b      	ldr	r3, [pc, #44]	; (8004b2c <stm32_clock_switch_to_hsi+0x44>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f013 0f02 	tst.w	r3, #2
 8004b04:	d0fa      	beq.n	8004afc <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <stm32_clock_switch_to_hsi+0x44>)
 8004b08:	6893      	ldr	r3, [r2, #8]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b14:	6893      	ldr	r3, [r2, #8]
 8004b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1a:	4318      	orrs	r0, r3
 8004b1c:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <stm32_clock_switch_to_hsi+0x44>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d1f9      	bne.n	8004b1e <stm32_clock_switch_to_hsi+0x36>
	}
}
 8004b2a:	4770      	bx	lr
 8004b2c:	40023800 	.word	0x40023800

08004b30 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8004b30:	b510      	push	{r4, lr}
 8004b32:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8004b34:	a803      	add	r0, sp, #12
 8004b36:	f007 f8ff 	bl	800bd38 <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8004b3a:	f000 f81d 	bl	8004b78 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8004b3e:	a801      	add	r0, sp, #4
 8004b40:	f007 f902 	bl	800bd48 <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7ff ffcf 	bl	8004ae8 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004b4a:	4c0a      	ldr	r4, [pc, #40]	; (8004b74 <stm32_clock_control_init+0x44>)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b52:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8004b54:	a903      	add	r1, sp, #12
 8004b56:	a801      	add	r0, sp, #4
 8004b58:	f002 ffd2 	bl	8007b00 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6a:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	b006      	add	sp, #24
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8004b78:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <config_enable_default_clocks+0x1c>)
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	621a      	str	r2, [r3, #32]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004b8c:	9b01      	ldr	r3, [sp, #4]
	(defined(CONFIG_SOC_SERIES_STM32L0X) &&			  \
	 defined(CONFIG_ENTROPY_STM32_RNG))
	/* Enable System Configuration Controller clock. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
}
 8004b8e:	b002      	add	sp, #8
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800

08004b98 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8004b9c:	280a      	cmp	r0, #10
 8004b9e:	d007      	beq.n	8004bb0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <console_out+0x28>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8004ba6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4798      	blx	r3

	return c;
}
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <console_out+0x28>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8004bb4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	210d      	movs	r1, #13
 8004bba:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8004bbc:	e7f0      	b.n	8004ba0 <console_out+0x8>
 8004bbe:	bf00      	nop
 8004bc0:	20000a28 	.word	0x20000a28

08004bc4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8004bc4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8004bc6:	4c04      	ldr	r4, [pc, #16]	; (8004bd8 <uart_console_hook_install+0x14>)
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff fe35 	bl	8004838 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7fd fbfa 	bl	80023c8 <__printk_hook_install>
}
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08004b99 	.word	0x08004b99

08004bdc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8004bdc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004bde:	4809      	ldr	r0, [pc, #36]	; (8004c04 <uart_console_init+0x28>)
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <uart_console_init+0x2c>)
 8004be2:	6018      	str	r0, [r3, #0]
 8004be4:	f007 ff5b 	bl	800ca9e <z_device_ready>
 8004be8:	b128      	cbz	r0, 8004bf6 <uart_console_init+0x1a>
 8004bea:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 8004bec:	b933      	cbnz	r3, 8004bfc <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 8004bee:	f7ff ffe9 	bl	8004bc4 <uart_console_hook_install>

	return 0;
 8004bf2:	2000      	movs	r0, #0
}
 8004bf4:	bd08      	pop	{r3, pc}
 8004bf6:	f06f 0312 	mvn.w	r3, #18
 8004bfa:	e7f7      	b.n	8004bec <uart_console_init+0x10>
		return -ENODEV;
 8004bfc:	f06f 0012 	mvn.w	r0, #18
 8004c00:	e7f8      	b.n	8004bf4 <uart_console_init+0x18>
 8004c02:	bf00      	nop
 8004c04:	0800daf8 	.word	0x0800daf8
 8004c08:	20000a28 	.word	0x20000a28

08004c0c <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004c0c:	424a      	negs	r2, r1
 8004c0e:	f001 0303 	and.w	r3, r1, #3
 8004c12:	f002 0203 	and.w	r2, r2, #3
 8004c16:	bf58      	it	pl
 8004c18:	4253      	negpl	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	009a      	lsls	r2, r3, #2
 8004c1e:	230f      	movs	r3, #15
 8004c20:	4093      	lsls	r3, r2
 8004c22:	460a      	mov	r2, r1
 8004c24:	2900      	cmp	r1, #0
 8004c26:	db19      	blt.n	8004c5c <gpio_stm32_set_exti_source+0x50>
 8004c28:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8004c2c:	f003 0c03 	and.w	ip, r3, #3
 8004c30:	f10c 0102 	add.w	r1, ip, #2
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <gpio_stm32_set_exti_source+0x58>)
 8004c36:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004c3a:	0c1a      	lsrs	r2, r3, #16
 8004c3c:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004c44:	b162      	cbz	r2, 8004c60 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8004c46:	fab2 f282 	clz	r2, r2
 8004c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	f10c 0c02 	add.w	ip, ip, #2
 8004c54:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <gpio_stm32_set_exti_source+0x58>)
 8004c56:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8004c5a:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004c5c:	1cca      	adds	r2, r1, #3
 8004c5e:	e7e3      	b.n	8004c28 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8004c60:	2220      	movs	r2, #32
 8004c62:	e7f2      	b.n	8004c4a <gpio_stm32_set_exti_source+0x3e>
 8004c64:	40010000 	.word	0x40010000

08004c68 <gpio_stm32_get_exti_source>:
 8004c68:	4242      	negs	r2, r0
 8004c6a:	f000 0303 	and.w	r3, r0, #3
 8004c6e:	f002 0203 	and.w	r2, r2, #3
 8004c72:	bf58      	it	pl
 8004c74:	4253      	negpl	r3, r2
 8004c76:	3304      	adds	r3, #4
 8004c78:	009a      	lsls	r2, r3, #2
 8004c7a:	230f      	movs	r3, #15
 8004c7c:	4093      	lsls	r3, r2
 8004c7e:	4602      	mov	r2, r0
 8004c80:	2800      	cmp	r0, #0
 8004c82:	db11      	blt.n	8004ca8 <gpio_stm32_get_exti_source+0x40>
 8004c84:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 8004c88:	f000 0303 	and.w	r3, r0, #3
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <gpio_stm32_get_exti_source+0x48>)
 8004c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c94:	0c03      	lsrs	r3, r0, #16
 8004c96:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8004c9e:	b12b      	cbz	r3, 8004cac <gpio_stm32_get_exti_source+0x44>
  return __builtin_clz(value);
 8004ca0:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8004ca4:	40d8      	lsrs	r0, r3
 8004ca6:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004ca8:	1cc2      	adds	r2, r0, #3
 8004caa:	e7eb      	b.n	8004c84 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	e7f9      	b.n	8004ca4 <gpio_stm32_get_exti_source+0x3c>
 8004cb0:	40010000 	.word	0x40010000

08004cb4 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	4606      	mov	r6, r0
 8004cba:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <gpio_stm32_enable_int+0x40>)
 8004cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004cc2:	ab02      	add	r3, sp, #8
 8004cc4:	e903 0003 	stmdb	r3, {r0, r1}
 8004cc8:	480b      	ldr	r0, [pc, #44]	; (8004cf8 <gpio_stm32_enable_int+0x44>)
 8004cca:	f007 fee8 	bl	800ca9e <z_device_ready>
 8004cce:	b148      	cbz	r0, 8004ce4 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004cd0:	4809      	ldr	r0, [pc, #36]	; (8004cf8 <gpio_stm32_enable_int+0x44>)
 8004cd2:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4669      	mov	r1, sp
 8004cd8:	4798      	blx	r3
 8004cda:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8004cdc:	b12c      	cbz	r4, 8004cea <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8004cde:	4620      	mov	r0, r4
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f06f 0412 	mvn.w	r4, #18
 8004ce8:	e7f8      	b.n	8004cdc <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8004cea:	4629      	mov	r1, r5
 8004cec:	4630      	mov	r0, r6
 8004cee:	f7ff ff8d 	bl	8004c0c <gpio_stm32_set_exti_source>
	return 0;
 8004cf2:	e7f4      	b.n	8004cde <gpio_stm32_enable_int+0x2a>
 8004cf4:	0800ddf8 	.word	0x0800ddf8
 8004cf8:	0800da38 	.word	0x0800da38

08004cfc <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8004d02:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8004d04:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8004d06:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004d0a:	d01f      	beq.n	8004d4c <gpio_stm32_pin_interrupt_configure+0x50>
 8004d0c:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8004d0e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004d12:	d034      	beq.n	8004d7e <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8004d14:	491d      	ldr	r1, [pc, #116]	; (8004d8c <gpio_stm32_pin_interrupt_configure+0x90>)
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff fe58 	bl	80049cc <stm32_exti_set_callback>
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	bb88      	cbnz	r0, 8004d84 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8004d20:	4621      	mov	r1, r4
 8004d22:	68b8      	ldr	r0, [r7, #8]
 8004d24:	f7ff ffc6 	bl	8004cb4 <gpio_stm32_enable_int>

	switch (trig) {
 8004d28:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8004d2c:	d023      	beq.n	8004d76 <gpio_stm32_pin_interrupt_configure+0x7a>
 8004d2e:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8004d32:	d022      	beq.n	8004d7a <gpio_stm32_pin_interrupt_configure+0x7e>
 8004d34:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8004d38:	d01b      	beq.n	8004d72 <gpio_stm32_pin_interrupt_configure+0x76>
 8004d3a:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7ff fe0d 	bl	800495c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff fdee 	bl	8004924 <stm32_exti_enable>

exit:
	return err;
}
 8004d48:	4630      	mov	r0, r6
 8004d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff ff8b 	bl	8004c68 <gpio_stm32_get_exti_source>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	4298      	cmp	r0, r3
 8004d56:	d001      	beq.n	8004d5c <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8004d58:	2600      	movs	r6, #0
		goto exit;
 8004d5a:	e7f5      	b.n	8004d48 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff fdf1 	bl	8004944 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7ff fe44 	bl	80049f0 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff fdf6 	bl	800495c <stm32_exti_trigger>
 8004d70:	e7f2      	b.n	8004d58 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8004d72:	2102      	movs	r1, #2
 8004d74:	e7e2      	b.n	8004d3c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8004d76:	2101      	movs	r1, #1
 8004d78:	e7e0      	b.n	8004d3c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8004d7a:	2103      	movs	r1, #3
 8004d7c:	e7de      	b.n	8004d3c <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8004d7e:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8004d82:	e7e1      	b.n	8004d48 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8004d84:	f06f 060f 	mvn.w	r6, #15
	return err;
 8004d88:	e7de      	b.n	8004d48 <gpio_stm32_pin_interrupt_configure+0x4c>
 8004d8a:	bf00      	nop
 8004d8c:	0800bd57 	.word	0x0800bd57

08004d90 <gpio_stm32_clock_request>:
{
 8004d90:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8004d92:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8004d94:	b169      	cbz	r1, 8004db2 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8004d96:	340c      	adds	r4, #12
 8004d98:	480d      	ldr	r0, [pc, #52]	; (8004dd0 <gpio_stm32_clock_request+0x40>)
 8004d9a:	f007 fe80 	bl	800ca9e <z_device_ready>
 8004d9e:	b128      	cbz	r0, 8004dac <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8004da0:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <gpio_stm32_clock_request+0x40>)
 8004da2:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4621      	mov	r1, r4
 8004da8:	4798      	blx	r3
}
 8004daa:	bd10      	pop	{r4, pc}
 8004dac:	f06f 0012 	mvn.w	r0, #18
 8004db0:	e7fb      	b.n	8004daa <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8004db2:	340c      	adds	r4, #12
 8004db4:	4806      	ldr	r0, [pc, #24]	; (8004dd0 <gpio_stm32_clock_request+0x40>)
 8004db6:	f007 fe72 	bl	800ca9e <z_device_ready>
 8004dba:	b128      	cbz	r0, 8004dc8 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004dbc:	4804      	ldr	r0, [pc, #16]	; (8004dd0 <gpio_stm32_clock_request+0x40>)
 8004dbe:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4798      	blx	r3
 8004dc6:	e7f0      	b.n	8004daa <gpio_stm32_clock_request+0x1a>
 8004dc8:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8004dcc:	e7ed      	b.n	8004daa <gpio_stm32_clock_request+0x1a>
 8004dce:	bf00      	nop
 8004dd0:	0800da38 	.word	0x0800da38

08004dd4 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd8:	b08c      	sub	sp, #48	; 0x30
 8004dda:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8004ddc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8004de0:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8004de2:	ac04      	add	r4, sp, #16
 8004de4:	4f92      	ldr	r7, [pc, #584]	; (8005030 <spi_stm32_configure+0x25c>)
 8004de6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dea:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8004df2:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8004df6:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	f000 8113 	beq.w	8005024 <spi_stm32_configure+0x250>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004dfe:	88ab      	ldrh	r3, [r5, #4]
 8004e00:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d002      	beq.n	8004e0e <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	f040 810d 	bne.w	8005028 <spi_stm32_configure+0x254>
 8004e0e:	4889      	ldr	r0, [pc, #548]	; (8005034 <spi_stm32_configure+0x260>)
 8004e10:	f007 fe45 	bl	800ca9e <z_device_ready>
 8004e14:	b198      	cbz	r0, 8004e3e <spi_stm32_configure+0x6a>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004e16:	4b87      	ldr	r3, [pc, #540]	; (8005034 <spi_stm32_configure+0x260>)
 8004e18:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	b193      	cbz	r3, 8004e44 <spi_stm32_configure+0x70>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8004e1e:	aa03      	add	r2, sp, #12
 8004e20:	4641      	mov	r1, r8
 8004e22:	4884      	ldr	r0, [pc, #528]	; (8005034 <spi_stm32_configure+0x260>)
 8004e24:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004e26:	2800      	cmp	r0, #0
 8004e28:	db0f      	blt.n	8004e4a <spi_stm32_configure+0x76>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	dc1f      	bgt.n	8004e70 <spi_stm32_configure+0x9c>
		uint32_t clk = clock >> br;
 8004e30:	9a03      	ldr	r2, [sp, #12]
 8004e32:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8004e34:	6829      	ldr	r1, [r5, #0]
 8004e36:	4291      	cmp	r1, r2
 8004e38:	d21a      	bcs.n	8004e70 <spi_stm32_configure+0x9c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	e7f6      	b.n	8004e2c <spi_stm32_configure+0x58>
 8004e3e:	f06f 0012 	mvn.w	r0, #18
 8004e42:	e7f0      	b.n	8004e26 <spi_stm32_configure+0x52>
		return -ENOSYS;
 8004e44:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004e48:	e7ed      	b.n	8004e26 <spi_stm32_configure+0x52>
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <spi_stm32_configure+0x264>)
 8004e4c:	4a7b      	ldr	r2, [pc, #492]	; (800503c <spi_stm32_configure+0x268>)
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	2201      	movs	r2, #1
 8004e58:	f362 0102 	bfi	r1, r2, #0, #3
 8004e5c:	f36f 01c5 	bfc	r1, #3, #3
 8004e60:	f363 118f 	bfi	r1, r3, #6, #10
 8004e64:	4876      	ldr	r0, [pc, #472]	; (8005040 <spi_stm32_configure+0x26c>)
 8004e66:	f7fe facf 	bl	8003408 <log_0>
		return -EIO;
 8004e6a:	f06f 0004 	mvn.w	r0, #4
 8004e6e:	e0d6      	b.n	800501e <spi_stm32_configure+0x24a>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	dc71      	bgt.n	8004f58 <spi_stm32_configure+0x184>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	aa0c      	add	r2, sp, #48	; 0x30
 8004e80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004e84:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8004e92:	88ab      	ldrh	r3, [r5, #4]
 8004e94:	f013 0f02 	tst.w	r3, #2
 8004e98:	d077      	beq.n	8004f8a <spi_stm32_configure+0x1b6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8004ea2:	88ab      	ldrh	r3, [r5, #4]
 8004ea4:	f013 0f04 	tst.w	r3, #4
 8004ea8:	d074      	beq.n	8004f94 <spi_stm32_configure+0x1c0>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8004eb8:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8004eba:	88ab      	ldrh	r3, [r5, #4]
 8004ebc:	f013 0f10 	tst.w	r3, #16
 8004ec0:	d06d      	beq.n	8004f9e <spi_stm32_configure+0x1ca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed0:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8004ed2:	68ab      	ldr	r3, [r5, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d067      	beq.n	8004fa8 <spi_stm32_configure+0x1d4>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ede:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8004ee8:	88ab      	ldrh	r3, [r5, #4]
 8004eea:	f013 0f01 	tst.w	r3, #1
 8004eee:	d073      	beq.n	8004fd8 <spi_stm32_configure+0x204>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8004ef6:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8004ef8:	88ab      	ldrh	r3, [r5, #4]
 8004efa:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d06f      	beq.n	8004fe2 <spi_stm32_configure+0x20e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f08:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8004f12:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004f14:	68ab      	ldr	r3, [r5, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d070      	beq.n	8004ffc <spi_stm32_configure+0x228>
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d06d      	beq.n	8004ffc <spi_stm32_configure+0x228>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004f20:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8004f22:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004f24:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8004f28:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
 8004f2a:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8004f2c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004f30:	d004      	beq.n	8004f3c <spi_stm32_configure+0x168>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004f32:	f013 0f01 	tst.w	r3, #1
 8004f36:	d001      	beq.n	8004f3c <spi_stm32_configure+0x168>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004f38:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004f3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004f40:	f013 0f01 	tst.w	r3, #1
 8004f44:	d052      	beq.n	8004fec <spi_stm32_configure+0x218>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004f46:	2301      	movs	r3, #1
 8004f48:	fa03 f601 	lsl.w	r6, r3, r1
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	4333      	orrs	r3, r6
 8004f50:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	4798      	blx	r3
 8004f56:	e061      	b.n	800501c <spi_stm32_configure+0x248>
 8004f58:	4b37      	ldr	r3, [pc, #220]	; (8005038 <spi_stm32_configure+0x264>)
 8004f5a:	4a38      	ldr	r2, [pc, #224]	; (800503c <spi_stm32_configure+0x268>)
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8004f60:	f04f 0100 	mov.w	r1, #0
 8004f64:	2201      	movs	r2, #1
 8004f66:	f362 0102 	bfi	r1, r2, #0, #3
 8004f6a:	f36f 01c5 	bfc	r1, #3, #3
 8004f6e:	f363 118f 	bfi	r1, r3, #6, #10
 8004f72:	9a03      	ldr	r2, [sp, #12]
 8004f74:	f8ad 1000 	strh.w	r1, [sp]
 8004f78:	0a13      	lsrs	r3, r2, #8
 8004f7a:	0852      	lsrs	r2, r2, #1
 8004f7c:	6829      	ldr	r1, [r5, #0]
 8004f7e:	4831      	ldr	r0, [pc, #196]	; (8005044 <spi_stm32_configure+0x270>)
 8004f80:	f7fe fa08 	bl	8003394 <log_3>
		return -EINVAL;
 8004f84:	f06f 0015 	mvn.w	r0, #21
 8004f88:	e049      	b.n	800501e <spi_stm32_configure+0x24a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f023 0302 	bic.w	r3, r3, #2
 8004f90:	6023      	str	r3, [r4, #0]
}
 8004f92:	e786      	b.n	8004ea2 <spi_stm32_configure+0xce>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	6023      	str	r3, [r4, #0]
}
 8004f9c:	e789      	b.n	8004eb2 <spi_stm32_configure+0xde>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa4:	6023      	str	r3, [r4, #0]
}
 8004fa6:	e790      	b.n	8004eca <spi_stm32_configure+0xf6>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8004fa8:	88ab      	ldrh	r3, [r5, #4]
 8004faa:	f013 0f01 	tst.w	r3, #1
 8004fae:	d008      	beq.n	8004fc2 <spi_stm32_configure+0x1ee>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	6063      	str	r3, [r4, #4]
}
 8004fc0:	e792      	b.n	8004ee8 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fcc:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	f043 0304 	orr.w	r3, r3, #4
 8004fd4:	6063      	str	r3, [r4, #4]
}
 8004fd6:	e787      	b.n	8004ee8 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8004fde:	6023      	str	r3, [r4, #0]
}
 8004fe0:	e78a      	b.n	8004ef8 <spi_stm32_configure+0x124>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe8:	6023      	str	r3, [r4, #0]
}
 8004fea:	e78e      	b.n	8004f0a <spi_stm32_configure+0x136>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004fec:	2301      	movs	r3, #1
 8004fee:	fa03 f601 	lsl.w	r6, r3, r1
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	ea23 0306 	bic.w	r3, r3, r6
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	e7aa      	b.n	8004f52 <spi_stm32_configure+0x17e>
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <spi_stm32_configure+0x264>)
 8004ffe:	4a0f      	ldr	r2, [pc, #60]	; (800503c <spi_stm32_configure+0x268>)
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	08db      	lsrs	r3, r3, #3
				   GPIO_OUTPUT_INACTIVE);
	} else {
		LOG_INF("CS control inhibited (no GPIO device)");
 8005004:	f04f 0100 	mov.w	r1, #0
 8005008:	2203      	movs	r2, #3
 800500a:	f362 0102 	bfi	r1, r2, #0, #3
 800500e:	f36f 01c5 	bfc	r1, #3, #3
 8005012:	f363 118f 	bfi	r1, r3, #6, #10
 8005016:	480c      	ldr	r0, [pc, #48]	; (8005048 <spi_stm32_configure+0x274>)
 8005018:	f7fe f9f6 	bl	8003408 <log_0>
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 800501c:	2000      	movs	r0, #0
}
 800501e:	b00c      	add	sp, #48	; 0x30
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8005024:	2000      	movs	r0, #0
 8005026:	e7fa      	b.n	800501e <spi_stm32_configure+0x24a>
		return -ENOTSUP;
 8005028:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800502c:	e7f7      	b.n	800501e <spi_stm32_configure+0x24a>
 800502e:	bf00      	nop
 8005030:	0800de00 	.word	0x0800de00
 8005034:	0800da38 	.word	0x0800da38
 8005038:	0800dd58 	.word	0x0800dd58
 800503c:	0800dd28 	.word	0x0800dd28
 8005040:	0800e8f8 	.word	0x0800e8f8
 8005044:	0800e91c 	.word	0x0800e91c
 8005048:	0800e94c 	.word	0x0800e94c

0800504c <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800504c:	6882      	ldr	r2, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800504e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8005052:	d101      	bne.n	8005058 <spi_stm32_get_err+0xc>
	return 0;
 8005054:	2000      	movs	r0, #0
}
 8005056:	4770      	bx	lr
{
 8005058:	b510      	push	{r4, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	4604      	mov	r4, r0
 800505e:	490f      	ldr	r1, [pc, #60]	; (800509c <spi_stm32_get_err+0x50>)
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <spi_stm32_get_err+0x54>)
 8005062:	1ac9      	subs	r1, r1, r3
 8005064:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("%s: err=%d", __func__,
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	2001      	movs	r0, #1
 800506c:	f360 0302 	bfi	r3, r0, #0, #3
 8005070:	f36f 03c5 	bfc	r3, #3, #3
 8005074:	f361 138f 	bfi	r3, r1, #6, #10
 8005078:	490a      	ldr	r1, [pc, #40]	; (80050a4 <spi_stm32_get_err+0x58>)
 800507a:	480b      	ldr	r0, [pc, #44]	; (80050a8 <spi_stm32_get_err+0x5c>)
 800507c:	f7fe fa20 	bl	80034c0 <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005086:	d005      	beq.n	8005094 <spi_stm32_get_err+0x48>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8005088:	68e3      	ldr	r3, [r4, #12]
 800508a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800508c:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8005092:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8005094:	f06f 0004 	mvn.w	r0, #4
}
 8005098:	b002      	add	sp, #8
 800509a:	bd10      	pop	{r4, pc}
 800509c:	0800dd58 	.word	0x0800dd58
 80050a0:	0800dd28 	.word	0x0800dd28
 80050a4:	0800e9d4 	.word	0x0800e9d4
 80050a8:	0800e974 	.word	0x0800e974

080050ac <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 80050ac:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 80050ae:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 80050b0:	6845      	ldr	r5, [r0, #4]
 80050b2:	4835      	ldr	r0, [pc, #212]	; (8005188 <spi_stm32_init+0xdc>)
 80050b4:	f007 fcf3 	bl	800ca9e <z_device_ready>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d02c      	beq.n	8005116 <spi_stm32_init+0x6a>
	const struct clock_control_driver_api *api =
 80050bc:	4832      	ldr	r0, [pc, #200]	; (8005188 <spi_stm32_init+0xdc>)
 80050be:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4629      	mov	r1, r5
 80050c4:	4798      	blx	r3
 80050c6:	4604      	mov	r4, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80050c8:	bb44      	cbnz	r4, 800511c <spi_stm32_init+0x70>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 80050ca:	68aa      	ldr	r2, [r5, #8]
 80050cc:	6929      	ldr	r1, [r5, #16]
 80050ce:	68e8      	ldr	r0, [r5, #12]
 80050d0:	f006 fcf4 	bl	800babc <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 80050d4:	1e05      	subs	r5, r0, #0
 80050d6:	db34      	blt.n	8005142 <spi_stm32_init+0x96>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	b1c3      	cbz	r3, 800510e <spi_stm32_init+0x62>
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	b1b3      	cbz	r3, 800510e <spi_stm32_init+0x62>
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	b1a2      	cbz	r2, 800510e <spi_stm32_init+0x62>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 80050e4:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 80050e6:	f004 f8af 	bl	8009248 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 80050ea:	6833      	ldr	r3, [r6, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 80050f2:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	2301      	movs	r3, #1
 80050f8:	408b      	lsls	r3, r1
 80050fa:	421a      	tst	r2, r3
 80050fc:	d134      	bne.n	8005168 <spi_stm32_init+0xbc>
 80050fe:	4623      	mov	r3, r4
	if (value != 0)	{
 8005100:	b3a3      	cbz	r3, 800516c <spi_stm32_init+0xc0>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8005102:	2301      	movs	r3, #1
 8005104:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8005108:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4798      	blx	r3
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
 800510e:	6933      	ldr	r3, [r6, #16]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8005110:	b39b      	cbz	r3, 800517a <spi_stm32_init+0xce>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8005112:	4620      	mov	r0, r4
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	f06f 0412 	mvn.w	r4, #18
 800511a:	e7d5      	b.n	80050c8 <spi_stm32_init+0x1c>
 800511c:	4b1b      	ldr	r3, [pc, #108]	; (800518c <spi_stm32_init+0xe0>)
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <spi_stm32_init+0xe4>)
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not enable SPI clock");
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	2201      	movs	r2, #1
 800512a:	f362 0102 	bfi	r1, r2, #0, #3
 800512e:	f36f 01c5 	bfc	r1, #3, #3
 8005132:	f363 118f 	bfi	r1, r3, #6, #10
 8005136:	4817      	ldr	r0, [pc, #92]	; (8005194 <spi_stm32_init+0xe8>)
 8005138:	f7fe f966 	bl	8003408 <log_0>
		return -EIO;
 800513c:	f06f 0404 	mvn.w	r4, #4
 8005140:	e7e7      	b.n	8005112 <spi_stm32_init+0x66>
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <spi_stm32_init+0xe0>)
 8005144:	4a12      	ldr	r2, [pc, #72]	; (8005190 <spi_stm32_init+0xe4>)
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	2101      	movs	r1, #1
 8005150:	f361 0202 	bfi	r2, r1, #0, #3
 8005154:	f36f 02c5 	bfc	r2, #3, #3
 8005158:	f363 128f 	bfi	r2, r3, #6, #10
 800515c:	4629      	mov	r1, r5
 800515e:	480e      	ldr	r0, [pc, #56]	; (8005198 <spi_stm32_init+0xec>)
 8005160:	f7fe f97c 	bl	800345c <log_1>
		return err;
 8005164:	462c      	mov	r4, r5
 8005166:	e7d4      	b.n	8005112 <spi_stm32_init+0x66>
		value = (value != 0) ? 0 : 1;
 8005168:	2301      	movs	r3, #1
 800516a:	e7c9      	b.n	8005100 <spi_stm32_init+0x54>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800516c:	2301      	movs	r3, #1
 800516e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8005172:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8005178:	e7c9      	b.n	800510e <spi_stm32_init+0x62>
		ctx->owner = NULL;
 800517a:	6073      	str	r3, [r6, #4]
		k_sem_give(&ctx->lock);
 800517c:	f106 0008 	add.w	r0, r6, #8
	z_impl_k_sem_give(sem);
 8005180:	f003 f944 	bl	800840c <z_impl_k_sem_give>
	}
}
 8005184:	e7c5      	b.n	8005112 <spi_stm32_init+0x66>
 8005186:	bf00      	nop
 8005188:	0800da38 	.word	0x0800da38
 800518c:	0800dd58 	.word	0x0800dd58
 8005190:	0800dd28 	.word	0x0800dd28
 8005194:	0800e980 	.word	0x0800e980
 8005198:	0800e99c 	.word	0x0800e99c

0800519c <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 800519c:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 800519e:	4802      	ldr	r0, [pc, #8]	; (80051a8 <timer_callback+0xc>)
 80051a0:	f003 faa6 	bl	80086f0 <k_work_submit>
}
 80051a4:	bd08      	pop	{r3, pc}
 80051a6:	bf00      	nop
 80051a8:	20000080 	.word	0x20000080

080051ac <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80051ac:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80051ae:	f007 ffd7 	bl	800d160 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80051b2:	220a      	movs	r2, #10
 80051b4:	2300      	movs	r3, #0
 80051b6:	f7fb fb85 	bl	80008c4 <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 80051ba:	4b02      	ldr	r3, [pc, #8]	; (80051c4 <RtcGetTimerElapsedTime+0x18>)
 80051bc:	681b      	ldr	r3, [r3, #0]
}
 80051be:	1ac0      	subs	r0, r0, r3
 80051c0:	bd08      	pop	{r3, pc}
 80051c2:	bf00      	nop
 80051c4:	20000a8c 	.word	0x20000a8c

080051c8 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 80051c8:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 80051ca:	4802      	ldr	r0, [pc, #8]	; (80051d4 <RtcStopAlarm+0xc>)
 80051cc:	f007 ffd8 	bl	800d180 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 80051d0:	bd08      	pop	{r3, pc}
 80051d2:	bf00      	nop
 80051d4:	20000358 	.word	0x20000358

080051d8 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 80051d8:	b500      	push	{lr}
 80051da:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 80051dc:	0f83      	lsrs	r3, r0, #30
 80051de:	0082      	lsls	r2, r0, #2
 80051e0:	1812      	adds	r2, r2, r0
 80051e2:	f143 0300 	adc.w	r3, r3, #0
 80051e6:	1892      	adds	r2, r2, r2
 80051e8:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 80051ea:	2000      	movs	r0, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	e9cd 0100 	strd	r0, r1, [sp]
 80051f2:	4803      	ldr	r0, [pc, #12]	; (8005200 <RtcSetAlarm+0x28>)
 80051f4:	f004 f890 	bl	8009318 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 80051f8:	b003      	add	sp, #12
 80051fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80051fe:	bf00      	nop
 8005200:	20000358 	.word	0x20000358

08005204 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8005204:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8005206:	f007 ffab 	bl	800d160 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800520a:	220a      	movs	r2, #10
 800520c:	2300      	movs	r3, #0
 800520e:	f7fb fb59 	bl	80008c4 <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8005212:	4b01      	ldr	r3, [pc, #4]	; (8005218 <RtcSetTimerContext+0x14>)
 8005214:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8005216:	bd08      	pop	{r3, pc}
 8005218:	20000a8c 	.word	0x20000a8c

0800521c <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 800521c:	4b01      	ldr	r3, [pc, #4]	; (8005224 <RtcGetTimerContext+0x8>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000a8c 	.word	0x20000a8c

08005228 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800522c:	f100 0534 	add.w	r5, r0, #52	; 0x34
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005230:	2302      	movs	r3, #2
 8005232:	f3bf 8f5b 	dmb	ish
 8005236:	e855 2f00 	ldrex	r2, [r5]
 800523a:	2a01      	cmp	r2, #1
 800523c:	d103      	bne.n	8005246 <modem_release+0x1e>
 800523e:	e845 3100 	strex	r1, r3, [r5]
 8005242:	2900      	cmp	r1, #0
 8005244:	d1f7      	bne.n	8005236 <modem_release+0xe>
 8005246:	f3bf 8f5b 	dmb	ish
 800524a:	bf0c      	ite	eq
 800524c:	2601      	moveq	r6, #1
 800524e:	2600      	movne	r6, #0
 8005250:	d10e      	bne.n	8005270 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8005252:	4b08      	ldr	r3, [pc, #32]	; (8005274 <modem_release+0x4c>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	6023      	str	r3, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800525c:	f3bf 8f5b 	dmb	ish
 8005260:	e855 2f00 	ldrex	r2, [r5]
 8005264:	e845 3100 	strex	r1, r3, [r5]
 8005268:	2900      	cmp	r1, #0
 800526a:	d1f9      	bne.n	8005260 <modem_release+0x38>
 800526c:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8005270:	4630      	mov	r0, r6
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	0800ebcc 	.word	0x0800ebcc

08005278 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	4617      	mov	r7, r2
 800527c:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 800527e:	4c1d      	ldr	r4, [pc, #116]	; (80052f4 <sx12xx_ev_rx_done+0x7c>)
 8005280:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005284:	2302      	movs	r3, #2
 8005286:	f3bf 8f5b 	dmb	ish
 800528a:	e854 2f00 	ldrex	r2, [r4]
 800528e:	2a01      	cmp	r2, #1
 8005290:	d104      	bne.n	800529c <sx12xx_ev_rx_done+0x24>
 8005292:	e844 3c00 	strex	ip, r3, [r4]
 8005296:	f1bc 0f00 	cmp.w	ip, #0
 800529a:	d1f6      	bne.n	800528a <sx12xx_ev_rx_done+0x12>
 800529c:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80052a0:	d127      	bne.n	80052f2 <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <sx12xx_ev_rx_done+0x7c>)
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	428a      	cmp	r2, r1
 80052aa:	d900      	bls.n	80052ae <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 80052ac:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 80052ae:	4c11      	ldr	r4, [pc, #68]	; (80052f4 <sx12xx_ev_rx_done+0x7c>)
 80052b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	4601      	mov	r1, r0
 80052b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80052b8:	f008 f805 	bl	800d2c6 <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 80052bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052be:	b103      	cbz	r3, 80052c2 <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 80052c0:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 80052c2:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <sx12xx_ev_rx_done+0x7c>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	b103      	cbz	r3, 80052ca <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 80052c8:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <sx12xx_ev_rx_done+0x80>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 80052d0:	2100      	movs	r1, #0
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <sx12xx_ev_rx_done+0x7c>)
 80052d4:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80052d8:	f3bf 8f5b 	dmb	ish
 80052dc:	e853 2f00 	ldrex	r2, [r3]
 80052e0:	e843 1000 	strex	r0, r1, [r3]
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d1f9      	bne.n	80052dc <sx12xx_ev_rx_done+0x64>
 80052e8:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 80052ec:	4630      	mov	r0, r6
 80052ee:	f004 fb0f 	bl	8009910 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f4:	20000a90 	.word	0x20000a90
 80052f8:	0800ebcc 	.word	0x0800ebcc

080052fc <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 80052fc:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80052fe:	4805      	ldr	r0, [pc, #20]	; (8005314 <sx12xx_ev_tx_done+0x18>)
 8005300:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 8005302:	f7ff ff91 	bl	8005228 <modem_release>
 8005306:	b120      	cbz	r0, 8005312 <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 8005308:	b11c      	cbz	r4, 8005312 <sx12xx_ev_tx_done+0x16>
 800530a:	2100      	movs	r1, #0
 800530c:	4620      	mov	r0, r4
 800530e:	f004 faff 	bl	8009910 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8005312:	bd10      	pop	{r4, pc}
 8005314:	20000a90 	.word	0x20000a90

08005318 <__sx12xx_configure_pin>:
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b083      	sub	sp, #12
 800531c:	4604      	mov	r4, r0
 800531e:	460f      	mov	r7, r1
 8005320:	4616      	mov	r6, r2
 8005322:	461d      	mov	r5, r3
 8005324:	4608      	mov	r0, r1
 8005326:	f002 fc4b 	bl	8007bc0 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 800532a:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 800532c:	b1f8      	cbz	r0, 800536e <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 800532e:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8005330:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005332:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8005336:	d007      	beq.n	8005348 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005338:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 800533c:	d004      	beq.n	8005348 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800533e:	f015 0f01 	tst.w	r5, #1
 8005342:	d001      	beq.n	8005348 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005344:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005348:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800534c:	f015 0f01 	tst.w	r5, #1
 8005350:	d021      	beq.n	8005396 <__sx12xx_configure_pin+0x7e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005352:	2101      	movs	r1, #1
 8005354:	fa01 f506 	lsl.w	r5, r1, r6
 8005358:	6821      	ldr	r1, [r4, #0]
 800535a:	4329      	orrs	r1, r5
 800535c:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4631      	mov	r1, r6
 8005362:	4798      	blx	r3
	if (err) {
 8005364:	4604      	mov	r4, r0
 8005366:	b9f0      	cbnz	r0, 80053a6 <__sx12xx_configure_pin+0x8e>
}
 8005368:	4620      	mov	r0, r4
 800536a:	b003      	add	sp, #12
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <__sx12xx_configure_pin+0xbc>)
 8005370:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <__sx12xx_configure_pin+0xc0>)
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device", controller);
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	2101      	movs	r1, #1
 800537c:	f361 0202 	bfi	r2, r1, #0, #3
 8005380:	f36f 02c5 	bfc	r2, #3, #3
 8005384:	f363 128f 	bfi	r2, r3, #6, #10
 8005388:	4639      	mov	r1, r7
 800538a:	4814      	ldr	r0, [pc, #80]	; (80053dc <__sx12xx_configure_pin+0xc4>)
 800538c:	f7fe f866 	bl	800345c <log_1>
		return -EIO;
 8005390:	f06f 0404 	mvn.w	r4, #4
 8005394:	e7e8      	b.n	8005368 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005396:	2101      	movs	r1, #1
 8005398:	fa01 f506 	lsl.w	r5, r1, r6
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	ea21 0105 	bic.w	r1, r1, r5
 80053a2:	6021      	str	r1, [r4, #0]
 80053a4:	e7db      	b.n	800535e <__sx12xx_configure_pin+0x46>
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <__sx12xx_configure_pin+0xbc>)
 80053a8:	4a0b      	ldr	r2, [pc, #44]	; (80053d8 <__sx12xx_configure_pin+0xc0>)
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	f361 0202 	bfi	r2, r1, #0, #3
 80053b8:	f36f 02c5 	bfc	r2, #3, #3
 80053bc:	f363 128f 	bfi	r2, r3, #6, #10
 80053c0:	f8ad 2000 	strh.w	r2, [sp]
 80053c4:	4603      	mov	r3, r0
 80053c6:	4632      	mov	r2, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	4805      	ldr	r0, [pc, #20]	; (80053e0 <__sx12xx_configure_pin+0xc8>)
 80053cc:	f7fd ffe2 	bl	8003394 <log_3>
		return err;
 80053d0:	e7ca      	b.n	8005368 <__sx12xx_configure_pin+0x50>
 80053d2:	bf00      	nop
 80053d4:	0800dd68 	.word	0x0800dd68
 80053d8:	0800dd28 	.word	0x0800dd28
 80053dc:	0800ea1c 	.word	0x0800ea1c
 80053e0:	0800ea3c 	.word	0x0800ea3c

080053e4 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80053e8:	490f      	ldr	r1, [pc, #60]	; (8005428 <sx12xx_lora_send_async+0x44>)
 80053ea:	2001      	movs	r0, #1
 80053ec:	f3bf 8f5b 	dmb	ish
 80053f0:	e851 4f00 	ldrex	r4, [r1]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d103      	bne.n	8005400 <sx12xx_lora_send_async+0x1c>
 80053f8:	e841 0600 	strex	r6, r0, [r1]
 80053fc:	2e00      	cmp	r6, #0
 80053fe:	d1f7      	bne.n	80053f0 <sx12xx_lora_send_async+0xc>
 8005400:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005404:	d10c      	bne.n	8005420 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8005406:	3934      	subs	r1, #52	; 0x34
 8005408:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 800540a:	4e08      	ldr	r6, [pc, #32]	; (800542c <sx12xx_lora_send_async+0x48>)
 800540c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800540e:	b2d4      	uxtb	r4, r2
 8005410:	4621      	mov	r1, r4
 8005412:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005414:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005416:	4621      	mov	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	4798      	blx	r3

	return 0;
 800541c:	2000      	movs	r0, #0
}
 800541e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005420:	f06f 000f 	mvn.w	r0, #15
 8005424:	e7fb      	b.n	800541e <sx12xx_lora_send_async+0x3a>
 8005426:	bf00      	nop
 8005428:	20000ac4 	.word	0x20000ac4
 800542c:	0800ebcc 	.word	0x0800ebcc

08005430 <sx12xx_lora_send>:
{
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005436:	aa0a      	add	r2, sp, #40	; 0x28
 8005438:	920a      	str	r2, [sp, #40]	; 0x28
 800543a:	920b      	str	r2, [sp, #44]	; 0x2c
 800543c:	2300      	movs	r3, #0
 800543e:	930c      	str	r3, [sp, #48]	; 0x30
 8005440:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	9306      	str	r3, [sp, #24]
 8005446:	9307      	str	r3, [sp, #28]
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8005450:	2501      	movs	r5, #1
 8005452:	f365 0304 	bfi	r3, r5, #0, #5
 8005456:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800545a:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <sx12xx_lora_send+0xd0>)
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	d049      	beq.n	80054f8 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 8005464:	4613      	mov	r3, r2
 8005466:	4622      	mov	r2, r4
 8005468:	f7ff ffbc 	bl	80053e4 <sx12xx_lora_send_async>
	if (ret < 0) {
 800546c:	2800      	cmp	r0, #0
 800546e:	db22      	blt.n	80054b6 <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005470:	4b24      	ldr	r3, [pc, #144]	; (8005504 <sx12xx_lora_send+0xd4>)
 8005472:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 8005474:	4922      	ldr	r1, [pc, #136]	; (8005500 <sx12xx_lora_send+0xd0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 8005476:	9503      	str	r5, [sp, #12]
 8005478:	b2e4      	uxtb	r4, r4
 800547a:	9402      	str	r4, [sp, #8]
 800547c:	2300      	movs	r3, #0
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 8005488:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 800548c:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8005490:	4628      	mov	r0, r5
 8005492:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8005494:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 8005498:	f3c0 7341 	ubfx	r3, r0, #29, #2
 800549c:	00c2      	lsls	r2, r0, #3
 800549e:	1852      	adds	r2, r2, r1
 80054a0:	f143 0300 	adc.w	r3, r3, #0
 80054a4:	1892      	adds	r2, r2, r2
 80054a6:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 80054a8:	4629      	mov	r1, r5
 80054aa:	a805      	add	r0, sp, #20
 80054ac:	f004 f984 	bl	80097b8 <z_impl_k_poll>
	if (ret < 0) {
 80054b0:	2800      	cmp	r0, #0
 80054b2:	db02      	blt.n	80054ba <sx12xx_lora_send+0x8a>
	return 0;
 80054b4:	2000      	movs	r0, #0
}
 80054b6:	b00e      	add	sp, #56	; 0x38
 80054b8:	bd70      	pop	{r4, r5, r6, pc}
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <sx12xx_lora_send+0xd8>)
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <sx12xx_lora_send+0xdc>)
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Packet transmission failed!");
 80054c2:	f04f 0100 	mov.w	r1, #0
 80054c6:	f365 0102 	bfi	r1, r5, #0, #3
 80054ca:	f36f 01c5 	bfc	r1, #3, #3
 80054ce:	f363 118f 	bfi	r1, r3, #6, #10
 80054d2:	480f      	ldr	r0, [pc, #60]	; (8005510 <sx12xx_lora_send+0xe0>)
 80054d4:	f7fd ff98 	bl	8003408 <log_0>
		if (!modem_release(&dev_data)) {
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <sx12xx_lora_send+0xd0>)
 80054da:	f7ff fea5 	bl	8005228 <modem_release>
 80054de:	b108      	cbz	r0, 80054e4 <sx12xx_lora_send+0xb4>
	return 0;
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7e8      	b.n	80054b6 <sx12xx_lora_send+0x86>
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ec:	4629      	mov	r1, r5
 80054ee:	a805      	add	r0, sp, #20
 80054f0:	f004 f962 	bl	80097b8 <z_impl_k_poll>
 80054f4:	2000      	movs	r0, #0
 80054f6:	e7de      	b.n	80054b6 <sx12xx_lora_send+0x86>
		return -EINVAL;
 80054f8:	f06f 0015 	mvn.w	r0, #21
 80054fc:	e7db      	b.n	80054b6 <sx12xx_lora_send+0x86>
 80054fe:	bf00      	nop
 8005500:	20000a90 	.word	0x20000a90
 8005504:	0800ebcc 	.word	0x0800ebcc
 8005508:	0800dd68 	.word	0x0800dd68
 800550c:	0800dd28 	.word	0x0800dd28
 8005510:	0800ea5c 	.word	0x0800ea5c

08005514 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8005514:	b510      	push	{r4, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800551c:	aa08      	add	r2, sp, #32
 800551e:	9208      	str	r2, [sp, #32]
 8005520:	9209      	str	r2, [sp, #36]	; 0x24
 8005522:	2300      	movs	r3, #0
 8005524:	930a      	str	r3, [sp, #40]	; 0x28
 8005526:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005528:	9303      	str	r3, [sp, #12]
 800552a:	9304      	str	r3, [sp, #16]
 800552c:	9305      	str	r3, [sp, #20]
 800552e:	9306      	str	r3, [sp, #24]
 8005530:	9307      	str	r3, [sp, #28]
 8005532:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005536:	2001      	movs	r0, #1
 8005538:	f360 0304 	bfi	r3, r0, #0, #5
 800553c:	f88d 3019 	strb.w	r3, [sp, #25]
 8005540:	9207      	str	r2, [sp, #28]
 8005542:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <sx12xx_lora_recv+0xd0>)
 8005544:	f3bf 8f5b 	dmb	ish
 8005548:	e853 2f00 	ldrex	r2, [r3]
 800554c:	2a00      	cmp	r2, #0
 800554e:	d103      	bne.n	8005558 <sx12xx_lora_recv+0x44>
 8005550:	e843 0400 	strex	r4, r0, [r3]
 8005554:	2c00      	cmp	r4, #0
 8005556:	d1f7      	bne.n	8005548 <sx12xx_lora_recv+0x34>
 8005558:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800555c:	d13e      	bne.n	80055dc <sx12xx_lora_recv+0xc8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 800555e:	3b34      	subs	r3, #52	; 0x34
 8005560:	aa08      	add	r2, sp, #32
 8005562:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8005564:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 8005566:	f10d 0207 	add.w	r2, sp, #7
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 800556c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800556e:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 8005570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005572:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005574:	4c1c      	ldr	r4, [pc, #112]	; (80055e8 <sx12xx_lora_recv+0xd4>)
 8005576:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005578:	21ff      	movs	r1, #255	; 0xff
 800557a:	4798      	blx	r3
	Radio.Rx(0);
 800557c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800557e:	2000      	movs	r0, #0
 8005580:	4798      	blx	r3
 8005582:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005586:	2101      	movs	r1, #1
 8005588:	a803      	add	r0, sp, #12
 800558a:	f004 f915 	bl	80097b8 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 800558e:	1e04      	subs	r4, r0, #0
 8005590:	db04      	blt.n	800559c <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8005592:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 8005596:	4620      	mov	r0, r4
 8005598:	b00c      	add	sp, #48	; 0x30
 800559a:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 800559c:	4813      	ldr	r0, [pc, #76]	; (80055ec <sx12xx_lora_recv+0xd8>)
 800559e:	f7ff fe43 	bl	8005228 <modem_release>
 80055a2:	b950      	cbnz	r0, 80055ba <sx12xx_lora_recv+0xa6>
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ac:	2101      	movs	r1, #1
 80055ae:	a803      	add	r0, sp, #12
 80055b0:	f004 f902 	bl	80097b8 <z_impl_k_poll>
			return size;
 80055b4:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80055b8:	e7ed      	b.n	8005596 <sx12xx_lora_recv+0x82>
 80055ba:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <sx12xx_lora_recv+0xdc>)
 80055bc:	4a0d      	ldr	r2, [pc, #52]	; (80055f4 <sx12xx_lora_recv+0xe0>)
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	08db      	lsrs	r3, r3, #3
		LOG_INF("Receive timeout");
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	2203      	movs	r2, #3
 80055c8:	f362 0102 	bfi	r1, r2, #0, #3
 80055cc:	f36f 01c5 	bfc	r1, #3, #3
 80055d0:	f363 118f 	bfi	r1, r3, #6, #10
 80055d4:	4808      	ldr	r0, [pc, #32]	; (80055f8 <sx12xx_lora_recv+0xe4>)
 80055d6:	f7fd ff17 	bl	8003408 <log_0>
		return ret;
 80055da:	e7dc      	b.n	8005596 <sx12xx_lora_recv+0x82>
		return -EBUSY;
 80055dc:	f06f 040f 	mvn.w	r4, #15
 80055e0:	e7d9      	b.n	8005596 <sx12xx_lora_recv+0x82>
 80055e2:	bf00      	nop
 80055e4:	20000ac4 	.word	0x20000ac4
 80055e8:	0800ebcc 	.word	0x0800ebcc
 80055ec:	20000a90 	.word	0x20000a90
 80055f0:	0800dd68 	.word	0x0800dd68
 80055f4:	0800dd28 	.word	0x0800dd28
 80055f8:	0800ea78 	.word	0x0800ea78

080055fc <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	460c      	mov	r4, r1
 8005602:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <sx12xx_lora_config+0xa4>)
 8005604:	2201      	movs	r2, #1
 8005606:	f3bf 8f5b 	dmb	ish
 800560a:	e853 1f00 	ldrex	r1, [r3]
 800560e:	2900      	cmp	r1, #0
 8005610:	d103      	bne.n	800561a <sx12xx_lora_config+0x1e>
 8005612:	e843 2000 	strex	r0, r2, [r3]
 8005616:	2800      	cmp	r0, #0
 8005618:	d1f7      	bne.n	800560a <sx12xx_lora_config+0xe>
 800561a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800561e:	d13b      	bne.n	8005698 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005620:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <sx12xx_lora_config+0xa8>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	6820      	ldr	r0, [r4, #0]
 8005626:	4798      	blx	r3

	if (config->tx) {
 8005628:	7ae3      	ldrb	r3, [r4, #11]
 800562a:	b9cb      	cbnz	r3, 8005660 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <sx12xx_lora_config+0xa8>)
 800562e:	699d      	ldr	r5, [r3, #24]
 8005630:	2001      	movs	r0, #1
 8005632:	9009      	str	r0, [sp, #36]	; 0x24
 8005634:	2300      	movs	r3, #0
 8005636:	9308      	str	r3, [sp, #32]
 8005638:	9307      	str	r3, [sp, #28]
 800563a:	9306      	str	r3, [sp, #24]
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	220a      	movs	r2, #10
 8005644:	9202      	str	r2, [sp, #8]
 8005646:	8922      	ldrh	r2, [r4, #8]
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	79a3      	ldrb	r3, [r4, #6]
 800564e:	7962      	ldrb	r2, [r4, #5]
 8005650:	7921      	ldrb	r1, [r4, #4]
 8005652:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 8005654:	4814      	ldr	r0, [pc, #80]	; (80056a8 <sx12xx_lora_config+0xac>)
 8005656:	f7ff fde7 	bl	8005228 <modem_release>
	return 0;
 800565a:	2000      	movs	r0, #0
}
 800565c:	b00a      	add	sp, #40	; 0x28
 800565e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 8005660:	4b12      	ldr	r3, [pc, #72]	; (80056ac <sx12xx_lora_config+0xb0>)
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	6861      	ldr	r1, [r4, #4]
 8005666:	68a2      	ldr	r2, [r4, #8]
 8005668:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <sx12xx_lora_config+0xa8>)
 800566c:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 800566e:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8005670:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8005672:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005676:	9208      	str	r2, [sp, #32]
 8005678:	2200      	movs	r2, #0
 800567a:	9207      	str	r2, [sp, #28]
 800567c:	9206      	str	r2, [sp, #24]
 800567e:	9205      	str	r2, [sp, #20]
 8005680:	2001      	movs	r0, #1
 8005682:	9004      	str	r0, [sp, #16]
 8005684:	9203      	str	r2, [sp, #12]
 8005686:	8926      	ldrh	r6, [r4, #8]
 8005688:	9602      	str	r6, [sp, #8]
 800568a:	9101      	str	r1, [sp, #4]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	7923      	ldrb	r3, [r4, #4]
 8005690:	f994 100a 	ldrsb.w	r1, [r4, #10]
 8005694:	47a8      	blx	r5
 8005696:	e7dd      	b.n	8005654 <sx12xx_lora_config+0x58>
		return -EBUSY;
 8005698:	f06f 000f 	mvn.w	r0, #15
 800569c:	e7de      	b.n	800565c <sx12xx_lora_config+0x60>
 800569e:	bf00      	nop
 80056a0:	20000ac4 	.word	0x20000ac4
 80056a4:	0800ebcc 	.word	0x0800ebcc
 80056a8:	20000a90 	.word	0x20000a90
 80056ac:	20000ab8 	.word	0x20000ab8

080056b0 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80056b0:	b510      	push	{r4, lr}
 80056b2:	4608      	mov	r0, r1
 80056b4:	4611      	mov	r1, r2
 80056b6:	461a      	mov	r2, r3
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <sx12xx_lora_test_cw+0x3c>)
 80056ba:	f04f 0c01 	mov.w	ip, #1
 80056be:	f3bf 8f5b 	dmb	ish
 80056c2:	e853 ef00 	ldrex	lr, [r3]
 80056c6:	f1be 0f00 	cmp.w	lr, #0
 80056ca:	d103      	bne.n	80056d4 <sx12xx_lora_test_cw+0x24>
 80056cc:	e843 c400 	strex	r4, ip, [r3]
 80056d0:	2c00      	cmp	r4, #0
 80056d2:	d1f6      	bne.n	80056c2 <sx12xx_lora_test_cw+0x12>
 80056d4:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80056d8:	d104      	bne.n	80056e4 <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <sx12xx_lora_test_cw+0x40>)
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	4798      	blx	r3
	return 0;
 80056e0:	2000      	movs	r0, #0
}
 80056e2:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80056e4:	f06f 000f 	mvn.w	r0, #15
 80056e8:	e7fb      	b.n	80056e2 <sx12xx_lora_test_cw+0x32>
 80056ea:	bf00      	nop
 80056ec:	20000ac4 	.word	0x20000ac4
 80056f0:	0800ebcc 	.word	0x0800ebcc

080056f4 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 80056f4:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80056f6:	480d      	ldr	r0, [pc, #52]	; (800572c <sx12xx_init+0x38>)
 80056f8:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80056fc:	2400      	movs	r4, #0
 80056fe:	f3bf 8f5b 	dmb	ish
 8005702:	e853 2f00 	ldrex	r2, [r3]
 8005706:	e843 4100 	strex	r1, r4, [r3]
 800570a:	2900      	cmp	r1, #0
 800570c:	d1f9      	bne.n	8005702 <sx12xx_init+0xe>
 800570e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <sx12xx_init+0x3c>)
 8005714:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <sx12xx_init+0x40>)
 8005718:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 800571a:	4d07      	ldr	r5, [pc, #28]	; (8005738 <sx12xx_init+0x44>)
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	3004      	adds	r0, #4
 8005720:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8005722:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005724:	4798      	blx	r3

	return 0;
}
 8005726:	4620      	mov	r0, r4
 8005728:	bd38      	pop	{r3, r4, r5, pc}
 800572a:	bf00      	nop
 800572c:	20000a90 	.word	0x20000a90
 8005730:	080052fd 	.word	0x080052fd
 8005734:	08005279 	.word	0x08005279
 8005738:	0800ebcc 	.word	0x0800ebcc

0800573c <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 800573c:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <sx127x_dio_work_handle+0x14>)
 8005740:	1ac0      	subs	r0, r0, r3
 8005742:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8005744:	4b03      	ldr	r3, [pc, #12]	; (8005754 <sx127x_dio_work_handle+0x18>)
 8005746:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800574a:	2000      	movs	r0, #0
 800574c:	4798      	blx	r3
}
 800574e:	bd08      	pop	{r3, pc}
 8005750:	20000b2c 	.word	0x20000b2c
 8005754:	20000090 	.word	0x20000090

08005758 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8005758:	b510      	push	{r4, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8005760:	f10d 0007 	add.w	r0, sp, #7
 8005764:	9006      	str	r0, [sp, #24]
 8005766:	2001      	movs	r0, #1
 8005768:	9007      	str	r0, [sp, #28]
 800576a:	9208      	str	r2, [sp, #32]
 800576c:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 800576e:	ab06      	add	r3, sp, #24
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	2302      	movs	r3, #2
 8005774:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8005776:	b149      	cbz	r1, 800578c <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8005778:	490b      	ldr	r1, [pc, #44]	; (80057a8 <sx127x_transceive+0x50>)
 800577a:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 800577c:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800577e:	681c      	ldr	r4, [r3, #0]
 8005780:	2300      	movs	r3, #0
 8005782:	aa04      	add	r2, sp, #16
 8005784:	3108      	adds	r1, #8
 8005786:	47a0      	blx	r4
}
 8005788:	b00a      	add	sp, #40	; 0x28
 800578a:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 800578c:	ab06      	add	r3, sp, #24
 800578e:	9302      	str	r3, [sp, #8]
 8005790:	2302      	movs	r3, #2
 8005792:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8005794:	4904      	ldr	r1, [pc, #16]	; (80057a8 <sx127x_transceive+0x50>)
 8005796:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8005798:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800579a:	681c      	ldr	r4, [r3, #0]
 800579c:	ab02      	add	r3, sp, #8
 800579e:	aa04      	add	r2, sp, #16
 80057a0:	3108      	adds	r1, #8
 80057a2:	47a0      	blx	r4
 80057a4:	e7f0      	b.n	8005788 <sx127x_transceive+0x30>
 80057a6:	bf00      	nop
 80057a8:	20000b08 	.word	0x20000b08

080057ac <sx127x_irq_callback>:
{
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 80057b0:	fa92 f6a2 	rbit	r6, r2
 80057b4:	fab6 f686 	clz	r6, r6
 80057b8:	b90a      	cbnz	r2, 80057be <sx127x_irq_callback+0x12>
 80057ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80057be:	2400      	movs	r4, #0
 80057c0:	e000      	b.n	80057c4 <sx127x_irq_callback+0x18>
 80057c2:	3401      	adds	r4, #1
 80057c4:	2c03      	cmp	r4, #3
 80057c6:	d813      	bhi.n	80057f0 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 80057c8:	1d23      	adds	r3, r4, #4
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <sx127x_irq_callback+0x48>)
 80057cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	d1f5      	bne.n	80057c2 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <sx127x_irq_callback+0x4c>)
 80057d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057dc:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 80057de:	42b3      	cmp	r3, r6
 80057e0:	d1ef      	bne.n	80057c2 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 80057e2:	1ca0      	adds	r0, r4, #2
 80057e4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80057e8:	3004      	adds	r0, #4
 80057ea:	f002 ff81 	bl	80086f0 <k_work_submit>
 80057ee:	e7e8      	b.n	80057c2 <sx127x_irq_callback+0x16>
}
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	bf00      	nop
 80057f4:	20000b08 	.word	0x20000b08
 80057f8:	0800ec38 	.word	0x0800ec38

080057fc <SX1276Reset>:
{
 80057fc:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 80057fe:	4b18      	ldr	r3, [pc, #96]	; (8005860 <SX1276Reset+0x64>)
 8005800:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005802:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f013 0f01 	tst.w	r3, #1
 800580a:	d11b      	bne.n	8005844 <SX1276Reset+0x48>
 800580c:	2301      	movs	r3, #1
	if (value != 0)	{
 800580e:	b1db      	cbz	r3, 8005848 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8005810:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2101      	movs	r1, #1
 8005816:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8005818:	200a      	movs	r0, #10
 800581a:	2100      	movs	r1, #0
 800581c:	f003 fb38 	bl	8008e90 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <SX1276Reset+0x64>)
 8005822:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005824:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f013 0f01 	tst.w	r3, #1
 800582c:	d111      	bne.n	8005852 <SX1276Reset+0x56>
 800582e:	2300      	movs	r3, #0
	if (value != 0)	{
 8005830:	b18b      	cbz	r3, 8005856 <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8005832:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2101      	movs	r1, #1
 8005838:	4798      	blx	r3
 800583a:	203c      	movs	r0, #60	; 0x3c
 800583c:	2100      	movs	r1, #0
 800583e:	f003 fb27 	bl	8008e90 <z_impl_k_sleep>
}
 8005842:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8005844:	2300      	movs	r3, #0
 8005846:	e7e2      	b.n	800580e <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8005848:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2101      	movs	r1, #1
 800584e:	4798      	blx	r3
 8005850:	e7e2      	b.n	8005818 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8005852:	2301      	movs	r3, #1
 8005854:	e7ec      	b.n	8005830 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8005856:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2101      	movs	r1, #1
 800585c:	4798      	blx	r3
 800585e:	e7ec      	b.n	800583a <SX1276Reset+0x3e>
 8005860:	20000b08 	.word	0x20000b08

08005864 <SX1276IoIrqInit>:
{
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005868:	2400      	movs	r4, #0
 800586a:	e052      	b.n	8005912 <SX1276IoIrqInit+0xae>
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <SX1276IoIrqInit+0x158>)
 800586e:	4a54      	ldr	r2, [pc, #336]	; (80059c0 <SX1276IoIrqInit+0x15c>)
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot get pointer to %s device",
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	2101      	movs	r1, #1
 800587a:	f361 0202 	bfi	r2, r1, #0, #3
 800587e:	f36f 02c5 	bfc	r2, #3, #3
 8005882:	f363 128f 	bfi	r2, r3, #6, #10
 8005886:	4b4f      	ldr	r3, [pc, #316]	; (80059c4 <SX1276IoIrqInit+0x160>)
 8005888:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 800588c:	484e      	ldr	r0, [pc, #312]	; (80059c8 <SX1276IoIrqInit+0x164>)
 800588e:	f7fd fde5 	bl	800345c <log_1>
}
 8005892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005894:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005898:	f013 0f01 	tst.w	r3, #1
 800589c:	d06f      	beq.n	800597e <SX1276IoIrqInit+0x11a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800589e:	2301      	movs	r3, #1
 80058a0:	fa03 fc01 	lsl.w	ip, r3, r1
 80058a4:	6833      	ldr	r3, [r6, #0]
 80058a6:	ea43 030c 	orr.w	r3, r3, ip
 80058aa:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 80058b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80058b4:	4b45      	ldr	r3, [pc, #276]	; (80059cc <SX1276IoIrqInit+0x168>)
 80058b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 80058ba:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <SX1276IoIrqInit+0x160>)
 80058bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058c0:	791e      	ldrb	r6, [r3, #4]
 80058c2:	2301      	movs	r3, #1
 80058c4:	40b3      	lsls	r3, r6
	callback->handler = handler;
 80058c6:	4a42      	ldr	r2, [pc, #264]	; (80059d0 <SX1276IoIrqInit+0x16c>)
 80058c8:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 80058ca:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 80058cc:	1d23      	adds	r3, r4, #4
 80058ce:	4a41      	ldr	r2, [pc, #260]	; (80059d4 <SX1276IoIrqInit+0x170>)
 80058d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058d4:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 80058d6:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d057      	beq.n	800598e <SX1276IoIrqInit+0x12a>
	return api->manage_callback(port, callback, true);
 80058de:	2201      	movs	r2, #1
 80058e0:	4798      	blx	r3
 80058e2:	2800      	cmp	r0, #0
 80058e4:	db56      	blt.n	8005994 <SX1276IoIrqInit+0x130>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 80058e6:	1d23      	adds	r3, r4, #4
 80058e8:	4a3a      	ldr	r2, [pc, #232]	; (80059d4 <SX1276IoIrqInit+0x170>)
 80058ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80058ee:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 80058f0:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 80058f2:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	2301      	movs	r3, #1
 80058f8:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 80058fa:	421a      	tst	r2, r3
 80058fc:	d15b      	bne.n	80059b6 <SX1276IoIrqInit+0x152>
 80058fe:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8005902:	698f      	ldr	r7, [r1, #24]
 8005904:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8005908:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 800590c:	4631      	mov	r1, r6
 800590e:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005910:	3401      	adds	r4, #1
 8005912:	2c03      	cmp	r4, #3
 8005914:	d8bd      	bhi.n	8005892 <SX1276IoIrqInit+0x2e>
		if (!irqHandlers[i]) {
 8005916:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f8      	beq.n	8005910 <SX1276IoIrqInit+0xac>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <SX1276IoIrqInit+0x160>)
 8005920:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8005924:	f002 f94c 	bl	8007bc0 <z_impl_device_get_binding>
 8005928:	1d23      	adds	r3, r4, #4
 800592a:	4a2a      	ldr	r2, [pc, #168]	; (80059d4 <SX1276IoIrqInit+0x170>)
 800592c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005930:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8005932:	2800      	cmp	r0, #0
 8005934:	d09a      	beq.n	800586c <SX1276IoIrqInit+0x8>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8005936:	4e27      	ldr	r6, [pc, #156]	; (80059d4 <SX1276IoIrqInit+0x170>)
 8005938:	1ca0      	adds	r0, r4, #2
 800593a:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 800593e:	4926      	ldr	r1, [pc, #152]	; (80059d8 <SX1276IoIrqInit+0x174>)
 8005940:	3004      	adds	r0, #4
 8005942:	f007 f987 	bl	800cc54 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8005946:	1d23      	adds	r3, r4, #4
 8005948:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800594c:	6870      	ldr	r0, [r6, #4]
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <SX1276IoIrqInit+0x160>)
 8005950:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005954:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8005956:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8005958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800595c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8005960:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8005962:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005964:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005968:	2a00      	cmp	r2, #0
 800596a:	d093      	beq.n	8005894 <SX1276IoIrqInit+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800596c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8005970:	d090      	beq.n	8005894 <SX1276IoIrqInit+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005972:	f013 0f01 	tst.w	r3, #1
 8005976:	d08d      	beq.n	8005894 <SX1276IoIrqInit+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005978:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 800597c:	e78a      	b.n	8005894 <SX1276IoIrqInit+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800597e:	2301      	movs	r3, #1
 8005980:	fa03 fc01 	lsl.w	ip, r3, r1
 8005984:	6833      	ldr	r3, [r6, #0]
 8005986:	ea23 030c 	bic.w	r3, r3, ip
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	e78e      	b.n	80058ac <SX1276IoIrqInit+0x48>
		return -ENOTSUP;
 800598e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005992:	e7a6      	b.n	80058e2 <SX1276IoIrqInit+0x7e>
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <SX1276IoIrqInit+0x158>)
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <SX1276IoIrqInit+0x15c>)
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set gpio callback.");
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	2201      	movs	r2, #1
 80059a2:	f362 0102 	bfi	r1, r2, #0, #3
 80059a6:	f36f 01c5 	bfc	r1, #3, #3
 80059aa:	f363 118f 	bfi	r1, r3, #6, #10
 80059ae:	480b      	ldr	r0, [pc, #44]	; (80059dc <SX1276IoIrqInit+0x178>)
 80059b0:	f7fd fd2a 	bl	8003408 <log_0>
			return;
 80059b4:	e76d      	b.n	8005892 <SX1276IoIrqInit+0x2e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 80059b6:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 80059ba:	e7a2      	b.n	8005902 <SX1276IoIrqInit+0x9e>
 80059bc:	0800dd60 	.word	0x0800dd60
 80059c0:	0800dd28 	.word	0x0800dd28
 80059c4:	0800ec38 	.word	0x0800ec38
 80059c8:	0800ea1c 	.word	0x0800ea1c
 80059cc:	20000ad8 	.word	0x20000ad8
 80059d0:	080057ad 	.word	0x080057ad
 80059d4:	20000b08 	.word	0x20000b08
 80059d8:	0800573d 	.word	0x0800573d
 80059dc:	0800ea98 	.word	0x0800ea98

080059e0 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 80059e0:	b510      	push	{r4, lr}
 80059e2:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 80059e4:	b2c0      	uxtb	r0, r0
 80059e6:	f006 fe10 	bl	800c60a <sx127x_read>
	if (ret < 0) {
 80059ea:	2800      	cmp	r0, #0
 80059ec:	db00      	blt.n	80059f0 <SX1276ReadBuffer+0x10>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 80059ee:	bd10      	pop	{r4, pc}
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <SX1276ReadBuffer+0x34>)
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <SX1276ReadBuffer+0x38>)
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read address: 0x%x", addr);
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	2101      	movs	r1, #1
 80059fe:	f361 0202 	bfi	r2, r1, #0, #3
 8005a02:	f36f 02c5 	bfc	r2, #3, #3
 8005a06:	f363 128f 	bfi	r2, r3, #6, #10
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4803      	ldr	r0, [pc, #12]	; (8005a1c <SX1276ReadBuffer+0x3c>)
 8005a0e:	f7fd fd25 	bl	800345c <log_1>
}
 8005a12:	e7ec      	b.n	80059ee <SX1276ReadBuffer+0xe>
 8005a14:	0800dd60 	.word	0x0800dd60
 8005a18:	0800dd28 	.word	0x0800dd28
 8005a1c:	0800eab8 	.word	0x0800eab8

08005a20 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8005a20:	b530      	push	{r4, r5, lr}
 8005a22:	b083      	sub	sp, #12
 8005a24:	4604      	mov	r4, r0
 8005a26:	4864      	ldr	r0, [pc, #400]	; (8005bb8 <sx127x_lora_init+0x198>)
 8005a28:	f002 f8ca 	bl	8007bc0 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8005a2c:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <sx127x_lora_init+0x19c>)
 8005a2e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8005a30:	b300      	cbz	r0, 8005a74 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <sx127x_lora_init+0x19c>)
 8005a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a38:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8005a3a:	4a61      	ldr	r2, [pc, #388]	; (8005bc0 <sx127x_lora_init+0x1a0>)
 8005a3c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	81da      	strh	r2, [r3, #14]
 8005a42:	4860      	ldr	r0, [pc, #384]	; (8005bc4 <sx127x_lora_init+0x1a4>)
 8005a44:	f002 f8bc 	bl	8007bc0 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8005a48:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <sx127x_lora_init+0x1a8>)
 8005a4a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8005a4c:	b330      	cbz	r0, 8005a9c <sx127x_lora_init+0x7c>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8005a4e:	4b5e      	ldr	r3, [pc, #376]	; (8005bc8 <sx127x_lora_init+0x1a8>)
 8005a50:	2206      	movs	r2, #6
 8005a52:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8005a54:	2201      	movs	r2, #1
 8005a56:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 8005a5c:	4857      	ldr	r0, [pc, #348]	; (8005bbc <sx127x_lora_init+0x19c>)
 8005a5e:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8005a60:	f641 2307 	movw	r3, #6663	; 0x1a07
 8005a64:	4957      	ldr	r1, [pc, #348]	; (8005bc4 <sx127x_lora_init+0x1a4>)
 8005a66:	f7ff fc57 	bl	8005318 <__sx12xx_configure_pin>
	if (ret) {
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	b350      	cbz	r0, 8005ac4 <sx127x_lora_init+0xa4>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8005a6e:	4628      	mov	r0, r5
 8005a70:	b003      	add	sp, #12
 8005a72:	bd30      	pop	{r4, r5, pc}
 8005a74:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005a76:	4a56      	ldr	r2, [pc, #344]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	2101      	movs	r1, #1
 8005a82:	f361 0202 	bfi	r2, r1, #0, #3
 8005a86:	f36f 02c5 	bfc	r2, #3, #3
 8005a8a:	f363 128f 	bfi	r2, r3, #6, #10
 8005a8e:	494a      	ldr	r1, [pc, #296]	; (8005bb8 <sx127x_lora_init+0x198>)
 8005a90:	4850      	ldr	r0, [pc, #320]	; (8005bd4 <sx127x_lora_init+0x1b4>)
 8005a92:	f7fd fce3 	bl	800345c <log_1>
		return -EINVAL;
 8005a96:	f06f 0515 	mvn.w	r5, #21
 8005a9a:	e7e8      	b.n	8005a6e <sx127x_lora_init+0x4e>
 8005a9c:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005a9e:	4a4c      	ldr	r2, [pc, #304]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	f361 0202 	bfi	r2, r1, #0, #3
 8005aae:	f36f 02c5 	bfc	r2, #3, #3
 8005ab2:	f363 128f 	bfi	r2, r3, #6, #10
 8005ab6:	4943      	ldr	r1, [pc, #268]	; (8005bc4 <sx127x_lora_init+0x1a4>)
 8005ab8:	4846      	ldr	r0, [pc, #280]	; (8005bd4 <sx127x_lora_init+0x1b4>)
 8005aba:	f7fd fccf 	bl	800345c <log_1>
		return -EIO;
 8005abe:	f06f 0504 	mvn.w	r5, #4
 8005ac2:	e7d4      	b.n	8005a6e <sx127x_lora_init+0x4e>
 8005ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f003 f9e1 	bl	8008e90 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8005ace:	4b3b      	ldr	r3, [pc, #236]	; (8005bbc <sx127x_lora_init+0x19c>)
 8005ad0:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005ad2:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f013 0f01 	tst.w	r3, #1
 8005ada:	d140      	bne.n	8005b5e <sx127x_lora_init+0x13e>
 8005adc:	462b      	mov	r3, r5
	if (value != 0)	{
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d03f      	beq.n	8005b62 <sx127x_lora_init+0x142>
	const struct gpio_driver_api *api =
 8005ae2:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4798      	blx	r3
 8005aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005aee:	2100      	movs	r1, #0
 8005af0:	f003 f9ce 	bl	8008e90 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8005af4:	2201      	movs	r2, #1
 8005af6:	f10d 0107 	add.w	r1, sp, #7
 8005afa:	2042      	movs	r0, #66	; 0x42
 8005afc:	f006 fd85 	bl	800c60a <sx127x_read>
	if (ret < 0) {
 8005b00:	2800      	cmp	r0, #0
 8005b02:	db33      	blt.n	8005b6c <sx127x_lora_init+0x14c>
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005b06:	4a32      	ldr	r2, [pc, #200]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	08db      	lsrs	r3, r3, #3
	LOG_INF("SX127x version 0x%02x found", regval);
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	2103      	movs	r1, #3
 8005b12:	f361 0202 	bfi	r2, r1, #0, #3
 8005b16:	f36f 02c5 	bfc	r2, #3, #3
 8005b1a:	f363 128f 	bfi	r2, r3, #6, #10
 8005b1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005b22:	482d      	ldr	r0, [pc, #180]	; (8005bd8 <sx127x_lora_init+0x1b8>)
 8005b24:	f7fd fc9a 	bl	800345c <log_1>
	ret = sx127x_antenna_configure();
 8005b28:	f006 fd68 	bl	800c5fc <sx127x_antenna_configure>
	if (ret < 0) {
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	db30      	blt.n	8005b92 <sx127x_lora_init+0x172>
	ret = sx12xx_init(dev);
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff fddf 	bl	80056f4 <sx12xx_init>
	if (ret < 0) {
 8005b36:	1e04      	subs	r4, r0, #0
 8005b38:	da99      	bge.n	8005a6e <sx127x_lora_init+0x4e>
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005b3c:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize SX12xx common");
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	2201      	movs	r2, #1
 8005b48:	f362 0102 	bfi	r1, r2, #0, #3
 8005b4c:	f36f 01c5 	bfc	r1, #3, #3
 8005b50:	f363 118f 	bfi	r1, r3, #6, #10
 8005b54:	4821      	ldr	r0, [pc, #132]	; (8005bdc <sx127x_lora_init+0x1bc>)
 8005b56:	f7fd fc57 	bl	8003408 <log_0>
		return ret;
 8005b5a:	4625      	mov	r5, r4
 8005b5c:	e787      	b.n	8005a6e <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e7bd      	b.n	8005ade <sx127x_lora_init+0xbe>
	const struct gpio_driver_api *api =
 8005b62:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2101      	movs	r1, #1
 8005b68:	4798      	blx	r3
 8005b6a:	e7be      	b.n	8005aea <sx127x_lora_init+0xca>
 8005b6c:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read version info");
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f362 0102 	bfi	r1, r2, #0, #3
 8005b7e:	f36f 01c5 	bfc	r1, #3, #3
 8005b82:	f363 118f 	bfi	r1, r3, #6, #10
 8005b86:	4816      	ldr	r0, [pc, #88]	; (8005be0 <sx127x_lora_init+0x1c0>)
 8005b88:	f7fd fc3e 	bl	8003408 <log_0>
		return -EIO;
 8005b8c:	f06f 0504 	mvn.w	r5, #4
 8005b90:	e76d      	b.n	8005a6e <sx127x_lora_init+0x4e>
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <sx127x_lora_init+0x1ac>)
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <sx127x_lora_init+0x1b0>)
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to configure antenna");
 8005b9a:	f04f 0100 	mov.w	r1, #0
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f362 0102 	bfi	r1, r2, #0, #3
 8005ba4:	f36f 01c5 	bfc	r1, #3, #3
 8005ba8:	f363 118f 	bfi	r1, r3, #6, #10
 8005bac:	480d      	ldr	r0, [pc, #52]	; (8005be4 <sx127x_lora_init+0x1c4>)
 8005bae:	f7fd fc2b 	bl	8003408 <log_0>
		return -EIO;
 8005bb2:	f06f 0504 	mvn.w	r5, #4
 8005bb6:	e75a      	b.n	8005a6e <sx127x_lora_init+0x4e>
 8005bb8:	0800e9bc 	.word	0x0800e9bc
 8005bbc:	20000b08 	.word	0x20000b08
 8005bc0:	0007a120 	.word	0x0007a120
 8005bc4:	0800e84c 	.word	0x0800e84c
 8005bc8:	20000b6c 	.word	0x20000b6c
 8005bcc:	0800dd60 	.word	0x0800dd60
 8005bd0:	0800dd28 	.word	0x0800dd28
 8005bd4:	0800ea1c 	.word	0x0800ea1c
 8005bd8:	0800eaf4 	.word	0x0800eaf4
 8005bdc:	0800eb2c 	.word	0x0800eb2c
 8005be0:	0800ead8 	.word	0x0800ead8
 8005be4:	0800eb10 	.word	0x0800eb10

08005be8 <SX1276WriteBuffer>:
{
 8005be8:	b510      	push	{r4, lr}
 8005bea:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8005bec:	b2c0      	uxtb	r0, r0
 8005bee:	f006 fd13 	bl	800c618 <sx127x_write>
	if (ret < 0) {
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	db00      	blt.n	8005bf8 <SX1276WriteBuffer+0x10>
}
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <SX1276WriteBuffer+0x34>)
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <SX1276WriteBuffer+0x38>)
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write address: 0x%x", addr);
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	2101      	movs	r1, #1
 8005c06:	f361 0202 	bfi	r2, r1, #0, #3
 8005c0a:	f36f 02c5 	bfc	r2, #3, #3
 8005c0e:	f363 128f 	bfi	r2, r3, #6, #10
 8005c12:	4621      	mov	r1, r4
 8005c14:	4803      	ldr	r0, [pc, #12]	; (8005c24 <SX1276WriteBuffer+0x3c>)
 8005c16:	f7fd fc21 	bl	800345c <log_1>
}
 8005c1a:	e7ec      	b.n	8005bf6 <SX1276WriteBuffer+0xe>
 8005c1c:	0800dd60 	.word	0x0800dd60
 8005c20:	0800dd28 	.word	0x0800dd28
 8005c24:	0800eb50 	.word	0x0800eb50

08005c28 <SX1276SetRfTxPower>:
{
 8005c28:	b530      	push	{r4, r5, lr}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 8005c34:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f10d 0106 	add.w	r1, sp, #6
 8005c3e:	204d      	movs	r0, #77	; 0x4d
 8005c40:	f006 fce3 	bl	800c60a <sx127x_read>
	if (ret < 0) {
 8005c44:	2800      	cmp	r0, #0
 8005c46:	db2e      	blt.n	8005ca6 <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8005c48:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8005c4c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8005c50:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 8005c54:	2214      	movs	r2, #20
 8005c56:	2102      	movs	r1, #2
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f006 fcc5 	bl	800c5e8 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8005c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c66:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 8005c6a:	2811      	cmp	r0, #17
 8005c6c:	dd2c      	ble.n	8005cc8 <SX1276SetRfTxPower+0xa0>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8005c6e:	f044 0407 	orr.w	r4, r4, #7
 8005c72:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005c76:	3805      	subs	r0, #5
 8005c78:	f000 000f 	and.w	r0, r0, #15
 8005c7c:	4318      	orrs	r0, r3
 8005c7e:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8005c82:	2201      	movs	r2, #1
 8005c84:	f10d 0107 	add.w	r1, sp, #7
 8005c88:	2009      	movs	r0, #9
 8005c8a:	f006 fcc5 	bl	800c618 <sx127x_write>
	if (ret < 0) {
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	db25      	blt.n	8005cde <SX1276SetRfTxPower+0xb6>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8005c92:	2201      	movs	r2, #1
 8005c94:	f10d 0106 	add.w	r1, sp, #6
 8005c98:	204d      	movs	r0, #77	; 0x4d
 8005c9a:	f006 fcbd 	bl	800c618 <sx127x_write>
	if (ret < 0) {
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	db2e      	blt.n	8005d00 <SX1276SetRfTxPower+0xd8>
}
 8005ca2:	b003      	add	sp, #12
 8005ca4:	bd30      	pop	{r4, r5, pc}
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <SX1276SetRfTxPower+0xfc>)
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <SX1276SetRfTxPower+0x100>)
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read PA dac");
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f362 0102 	bfi	r1, r2, #0, #3
 8005cb8:	f36f 01c5 	bfc	r1, #3, #3
 8005cbc:	f363 118f 	bfi	r1, r3, #6, #10
 8005cc0:	481a      	ldr	r0, [pc, #104]	; (8005d2c <SX1276SetRfTxPower+0x104>)
 8005cc2:	f7fd fba1 	bl	8003408 <log_0>
		return;
 8005cc6:	e7ec      	b.n	8005ca2 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8005cc8:	f044 0404 	orr.w	r4, r4, #4
 8005ccc:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005cd0:	3802      	subs	r0, #2
 8005cd2:	f000 000f 	and.w	r0, r0, #15
 8005cd6:	4318      	orrs	r0, r3
 8005cd8:	f88d 0007 	strb.w	r0, [sp, #7]
 8005cdc:	e7d1      	b.n	8005c82 <SX1276SetRfTxPower+0x5a>
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <SX1276SetRfTxPower+0xfc>)
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <SX1276SetRfTxPower+0x100>)
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA config");
 8005ce6:	f04f 0100 	mov.w	r1, #0
 8005cea:	2201      	movs	r2, #1
 8005cec:	f362 0102 	bfi	r1, r2, #0, #3
 8005cf0:	f36f 01c5 	bfc	r1, #3, #3
 8005cf4:	f363 118f 	bfi	r1, r3, #6, #10
 8005cf8:	480d      	ldr	r0, [pc, #52]	; (8005d30 <SX1276SetRfTxPower+0x108>)
 8005cfa:	f7fd fb85 	bl	8003408 <log_0>
		return;
 8005cfe:	e7d0      	b.n	8005ca2 <SX1276SetRfTxPower+0x7a>
 8005d00:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <SX1276SetRfTxPower+0xfc>)
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <SX1276SetRfTxPower+0x100>)
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA dac");
 8005d08:	f04f 0100 	mov.w	r1, #0
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f362 0102 	bfi	r1, r2, #0, #3
 8005d12:	f36f 01c5 	bfc	r1, #3, #3
 8005d16:	f363 118f 	bfi	r1, r3, #6, #10
 8005d1a:	4806      	ldr	r0, [pc, #24]	; (8005d34 <SX1276SetRfTxPower+0x10c>)
 8005d1c:	f7fd fb74 	bl	8003408 <log_0>
		return;
 8005d20:	e7bf      	b.n	8005ca2 <SX1276SetRfTxPower+0x7a>
 8005d22:	bf00      	nop
 8005d24:	0800dd60 	.word	0x0800dd60
 8005d28:	0800dd28 	.word	0x0800dd28
 8005d2c:	0800eb70 	.word	0x0800eb70
 8005d30:	0800eb88 	.word	0x0800eb88
 8005d34:	0800eba4 	.word	0x0800eba4

08005d38 <SX1276GetDio1PinState>:
{
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <SX1276GetDio1PinState+0x34>)
 8005d3e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8005d40:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8005d42:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	a901      	add	r1, sp, #4
 8005d48:	4798      	blx	r3
	if (ret == 0) {
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	b918      	cbnz	r0, 8005d56 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8005d4e:	6821      	ldr	r1, [r4, #0]
 8005d50:	9a01      	ldr	r2, [sp, #4]
 8005d52:	404a      	eors	r2, r1
 8005d54:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 8005d56:	b913      	cbnz	r3, 8005d5e <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dc02      	bgt.n	8005d68 <SX1276GetDio1PinState+0x30>
	return 0U;
 8005d62:	2000      	movs	r0, #0
}
 8005d64:	b002      	add	sp, #8
 8005d66:	bd10      	pop	{r4, pc}
		return 1U;
 8005d68:	2001      	movs	r0, #1
 8005d6a:	e7fb      	b.n	8005d64 <SX1276GetDio1PinState+0x2c>
 8005d6c:	20000b08 	.word	0x20000b08

08005d70 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <TimerInsertTimer+0x28>)
 8005d72:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8005d74:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8005d76:	e001      	b.n	8005d7c <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 8005d78:	461a      	mov	r2, r3
            next = next->Next;
 8005d7a:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8005d7c:	6951      	ldr	r1, [r2, #20]
 8005d7e:	b139      	cbz	r1, 8005d90 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	f8d0 c000 	ldr.w	ip, [r0]
 8005d86:	458c      	cmp	ip, r1
 8005d88:	d8f6      	bhi.n	8005d78 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 8005d8a:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8005d8c:	6143      	str	r3, [r0, #20]
            return;
 8005d8e:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 8005d90:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	6143      	str	r3, [r0, #20]
}
 8005d96:	4770      	bx	lr
 8005d98:	20000b78 	.word	0x20000b78

08005d9c <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <TimerExists+0x18>)
 8005d9e:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8005da0:	e000      	b.n	8005da4 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8005da2:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 8005da4:	b11b      	cbz	r3, 8005dae <TimerExists+0x12>
        if( cur == obj )
 8005da6:	4283      	cmp	r3, r0
 8005da8:	d1fb      	bne.n	8005da2 <TimerExists+0x6>
            return true;
 8005daa:	2001      	movs	r0, #1
    }
    return false;
}
 8005dac:	4770      	bx	lr
    return false;
 8005dae:	2000      	movs	r0, #0
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000b78 	.word	0x20000b78

08005db8 <TimerInsertNewHeadTimer>:
{
 8005db8:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <TimerInsertNewHeadTimer+0x18>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8005dbe:	b10b      	cbz	r3, 8005dc4 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8005dc4:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8005dc6:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <TimerInsertNewHeadTimer+0x18>)
 8005dc8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8005dca:	f006 fc39 	bl	800c640 <TimerSetTimeout>
}
 8005dce:	bd08      	pop	{r3, pc}
 8005dd0:	20000b78 	.word	0x20000b78

08005dd4 <TimerStart>:
{
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005dda:	a801      	add	r0, sp, #4
 8005ddc:	f006 fbf4 	bl	800c5c8 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005de0:	b1f4      	cbz	r4, 8005e20 <TimerStart+0x4c>
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff ffda 	bl	8005d9c <TimerExists>
 8005de8:	b9d0      	cbnz	r0, 8005e20 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8005dee:	2301      	movs	r3, #1
 8005df0:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8005df2:	2300      	movs	r3, #0
 8005df4:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <TimerStart+0x68>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b1ab      	cbz	r3, 8005e28 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8005dfc:	f7ff f9d6 	bl	80051ac <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	4418      	add	r0, r3
 8005e04:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <TimerStart+0x68>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	d211      	bcs.n	8005e34 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff ffd1 	bl	8005db8 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8005e16:	a801      	add	r0, sp, #4
 8005e18:	f006 fbe0 	bl	800c5dc <BoardCriticalSectionEnd>
}
 8005e1c:	b002      	add	sp, #8
 8005e1e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8005e20:	a801      	add	r0, sp, #4
 8005e22:	f006 fbdb 	bl	800c5dc <BoardCriticalSectionEnd>
        return;
 8005e26:	e7f9      	b.n	8005e1c <TimerStart+0x48>
        RtcSetTimerContext( );
 8005e28:	f7ff f9ec 	bl	8005204 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f7ff ffc3 	bl	8005db8 <TimerInsertNewHeadTimer>
 8005e32:	e7f0      	b.n	8005e16 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff ff9b 	bl	8005d70 <TimerInsertTimer>
 8005e3a:	e7ec      	b.n	8005e16 <TimerStart+0x42>
 8005e3c:	20000b78 	.word	0x20000b78

08005e40 <TimerIrqHandler>:
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8005e42:	f7ff f9eb 	bl	800521c <RtcGetTimerContext>
 8005e46:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8005e48:	f7ff f9dc 	bl	8005204 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8005e4c:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8005e50:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <TimerIrqHandler+0x84>)
 8005e52:	681e      	ldr	r6, [r3, #0]
 8005e54:	b16e      	cbz	r6, 8005e72 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005e56:	4632      	mov	r2, r6
 8005e58:	e002      	b.n	8005e60 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005e5e:	6952      	ldr	r2, [r2, #20]
 8005e60:	6953      	ldr	r3, [r2, #20]
 8005e62:	b133      	cbz	r3, 8005e72 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	4561      	cmp	r1, ip
 8005e68:	d9f7      	bls.n	8005e5a <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8005e6a:	1a2c      	subs	r4, r5, r0
 8005e6c:	4421      	add	r1, r4
 8005e6e:	6019      	str	r1, [r3, #0]
 8005e70:	e7f5      	b.n	8005e5e <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8005e72:	b146      	cbz	r6, 8005e86 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8005e74:	6972      	ldr	r2, [r6, #20]
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <TimerIrqHandler+0x84>)
 8005e78:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005e7e:	68f3      	ldr	r3, [r6, #12]
 8005e80:	b1a3      	cbz	r3, 8005eac <TimerIrqHandler+0x6c>
 8005e82:	6930      	ldr	r0, [r6, #16]
 8005e84:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8005e86:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <TimerIrqHandler+0x84>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	b18b      	cbz	r3, 8005eb0 <TimerIrqHandler+0x70>
 8005e8c:	681c      	ldr	r4, [r3, #0]
 8005e8e:	f7ff f98d 	bl	80051ac <RtcGetTimerElapsedTime>
 8005e92:	4284      	cmp	r4, r0
 8005e94:	d20c      	bcs.n	8005eb0 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8005e96:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <TimerIrqHandler+0x84>)
 8005e98:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8005e9a:	6959      	ldr	r1, [r3, #20]
 8005e9c:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	b11a      	cbz	r2, 8005eae <TimerIrqHandler+0x6e>
 8005ea6:	6918      	ldr	r0, [r3, #16]
 8005ea8:	4790      	blx	r2
 8005eaa:	e7ec      	b.n	8005e86 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005eac:	e7fe      	b.n	8005eac <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005eae:	e7fe      	b.n	8005eae <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8005eb0:	4b04      	ldr	r3, [pc, #16]	; (8005ec4 <TimerIrqHandler+0x84>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	b108      	cbz	r0, 8005eba <TimerIrqHandler+0x7a>
 8005eb6:	7a43      	ldrb	r3, [r0, #9]
 8005eb8:	b103      	cbz	r3, 8005ebc <TimerIrqHandler+0x7c>
}
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8005ebc:	f006 fbc0 	bl	800c640 <TimerSetTimeout>
}
 8005ec0:	e7fb      	b.n	8005eba <TimerIrqHandler+0x7a>
 8005ec2:	bf00      	nop
 8005ec4:	20000b78 	.word	0x20000b78

08005ec8 <TimerStop>:
{
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005ece:	a801      	add	r0, sp, #4
 8005ed0:	f006 fb7a 	bl	800c5c8 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <TimerStop+0x7c>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005ed8:	b15a      	cbz	r2, 8005ef2 <TimerStop+0x2a>
 8005eda:	b154      	cbz	r4, 8005ef2 <TimerStop+0x2a>
    obj->IsStarted = false;
 8005edc:	2300      	movs	r3, #0
 8005ede:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8005ee0:	42a2      	cmp	r2, r4
 8005ee2:	d00a      	beq.n	8005efa <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8005ee4:	4613      	mov	r3, r2
        while( cur != NULL )
 8005ee6:	b32b      	cbz	r3, 8005f34 <TimerStop+0x6c>
            if( cur == obj )
 8005ee8:	42a3      	cmp	r3, r4
 8005eea:	d020      	beq.n	8005f2e <TimerStop+0x66>
                prev = cur;
 8005eec:	461a      	mov	r2, r3
                cur = cur->Next;
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	e7f9      	b.n	8005ee6 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8005ef2:	a801      	add	r0, sp, #4
 8005ef4:	f006 fb72 	bl	800c5dc <BoardCriticalSectionEnd>
        return;
 8005ef8:	e01f      	b.n	8005f3a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005efa:	7a53      	ldrb	r3, [r2, #9]
 8005efc:	b173      	cbz	r3, 8005f1c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8005efe:	2300      	movs	r3, #0
 8005f00:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8005f02:	6950      	ldr	r0, [r2, #20]
 8005f04:	b120      	cbz	r0, 8005f10 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <TimerStop+0x7c>)
 8005f08:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8005f0a:	f006 fb99 	bl	800c640 <TimerSetTimeout>
 8005f0e:	e011      	b.n	8005f34 <TimerStop+0x6c>
                RtcStopAlarm( );
 8005f10:	f7ff f95a 	bl	80051c8 <RtcStopAlarm>
                TimerListHead = NULL;
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <TimerStop+0x7c>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e00b      	b.n	8005f34 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8005f1c:	6953      	ldr	r3, [r2, #20]
 8005f1e:	b113      	cbz	r3, 8005f26 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <TimerStop+0x7c>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e006      	b.n	8005f34 <TimerStop+0x6c>
                TimerListHead = NULL;
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <TimerStop+0x7c>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e002      	b.n	8005f34 <TimerStop+0x6c>
                if( cur->Next != NULL )
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	b12b      	cbz	r3, 8005f3e <TimerStop+0x76>
                    prev->Next = cur;
 8005f32:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8005f34:	a801      	add	r0, sp, #4
 8005f36:	f006 fb51 	bl	800c5dc <BoardCriticalSectionEnd>
}
 8005f3a:	b002      	add	sp, #8
 8005f3c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6153      	str	r3, [r2, #20]
 8005f42:	e7f7      	b.n	8005f34 <TimerStop+0x6c>
 8005f44:	20000b78 	.word	0x20000b78

08005f48 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005f48:	4908      	ldr	r1, [pc, #32]	; (8005f6c <SX1276ConvertFreqInHzToPllStep+0x24>)
 8005f4a:	fba1 3200 	umull	r3, r2, r1, r0
 8005f4e:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005f50:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005f54:	fb03 0012 	mls	r0, r3, r2, r0
 8005f58:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005f5c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8005f60:	fba1 1303 	umull	r1, r3, r1, r3
 8005f64:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8005f66:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8005f6a:	4770      	bx	lr
 8005f6c:	431bde83 	.word	0x431bde83

08005f70 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005f70:	2300      	movs	r3, #0
 8005f72:	e008      	b.n	8005f86 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005f74:	e7fe      	b.n	8005f74 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8005f76:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <GetFskBandwidthRegValue+0x4c>)
 8005f78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005f7c:	7908      	ldrb	r0, [r1, #4]
}
 8005f7e:	bc10      	pop	{r4}
 8005f80:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b14      	cmp	r3, #20
 8005f88:	d817      	bhi.n	8005fba <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <GetFskBandwidthRegValue+0x4c>)
 8005f8e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005f92:	4282      	cmp	r2, r0
 8005f94:	d8f5      	bhi.n	8005f82 <GetFskBandwidthRegValue+0x12>
{
 8005f96:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	4c08      	ldr	r4, [pc, #32]	; (8005fbc <GetFskBandwidthRegValue+0x4c>)
 8005f9c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8005fa0:	4282      	cmp	r2, r0
 8005fa2:	d8e8      	bhi.n	8005f76 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b14      	cmp	r3, #20
 8005faa:	d8e3      	bhi.n	8005f74 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005fac:	4619      	mov	r1, r3
 8005fae:	4a03      	ldr	r2, [pc, #12]	; (8005fbc <GetFskBandwidthRegValue+0x4c>)
 8005fb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005fb4:	4282      	cmp	r2, r0
 8005fb6:	d8f5      	bhi.n	8005fa4 <GetFskBandwidthRegValue+0x34>
 8005fb8:	e7ee      	b.n	8005f98 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8005fba:	e7fe      	b.n	8005fba <GetFskBandwidthRegValue+0x4a>
 8005fbc:	0800ec6c 	.word	0x0800ec6c

08005fc0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8005fc0:	2801      	cmp	r0, #1
 8005fc2:	d006      	beq.n	8005fd2 <SX1276GetLoRaBandwidthInHz+0x12>
 8005fc4:	2802      	cmp	r0, #2
 8005fc6:	d006      	beq.n	8005fd6 <SX1276GetLoRaBandwidthInHz+0x16>
 8005fc8:	b108      	cbz	r0, 8005fce <SX1276GetLoRaBandwidthInHz+0xe>
 8005fca:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8005fcc:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8005fce:	4803      	ldr	r0, [pc, #12]	; (8005fdc <SX1276GetLoRaBandwidthInHz+0x1c>)
 8005fd0:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8005fd2:	4803      	ldr	r0, [pc, #12]	; (8005fe0 <SX1276GetLoRaBandwidthInHz+0x20>)
 8005fd4:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8005fd6:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <SX1276GetLoRaBandwidthInHz+0x24>)
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	0001e848 	.word	0x0001e848
 8005fe0:	0003d090 	.word	0x0003d090
 8005fe4:	0007a120 	.word	0x0007a120

08005fe8 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <SX1276OnDio4Irq+0x1c>)
 8005fea:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005fee:	b93b      	cbnz	r3, 8006000 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <SX1276OnDio4Irq+0x1c>)
 8005ff2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005ff6:	b91b      	cbnz	r3, 8006000 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005ff8:	4b02      	ldr	r3, [pc, #8]	; (8006004 <SX1276OnDio4Irq+0x1c>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000cb0 	.word	0x20000cb0

08006008 <SX1276GetStatus>:
}
 8006008:	4b01      	ldr	r3, [pc, #4]	; (8006010 <SX1276GetStatus+0x8>)
 800600a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 800600e:	4770      	bx	lr
 8006010:	20000cb0 	.word	0x20000cb0

08006014 <SX1276SetChannel>:
{
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8006018:	f7ff ff96 	bl	8005f48 <SX1276ConvertFreqInHzToPllStep>
 800601c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <SX1276SetChannel+0x30>)
 8006020:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8006024:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8006028:	2006      	movs	r0, #6
 800602a:	f006 fc00 	bl	800c82e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800602e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8006032:	2007      	movs	r0, #7
 8006034:	f006 fbfb 	bl	800c82e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8006038:	b2e1      	uxtb	r1, r4
 800603a:	2008      	movs	r0, #8
 800603c:	f006 fbf7 	bl	800c82e <SX1276Write>
}
 8006040:	bd38      	pop	{r3, r4, r5, pc}
 8006042:	bf00      	nop
 8006044:	20000cb0 	.word	0x20000cb0

08006048 <SX1276OnDio3Irq>:
{
 8006048:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <SX1276OnDio3Irq+0x54>)
 800604c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d000      	beq.n	8006056 <SX1276OnDio3Irq+0xe>
}
 8006054:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8006056:	2012      	movs	r0, #18
 8006058:	f006 fbf5 	bl	800c846 <SX1276Read>
 800605c:	f010 0f01 	tst.w	r0, #1
 8006060:	d00d      	beq.n	800607e <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8006062:	2105      	movs	r1, #5
 8006064:	2012      	movs	r0, #18
 8006066:	f006 fbe2 	bl	800c82e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <SX1276OnDio3Irq+0x58>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <SX1276OnDio3Irq+0xc>
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0ed      	beq.n	8006054 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8006078:	2001      	movs	r0, #1
 800607a:	4798      	blx	r3
 800607c:	e7ea      	b.n	8006054 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800607e:	2104      	movs	r1, #4
 8006080:	2012      	movs	r0, #18
 8006082:	f006 fbd4 	bl	800c82e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <SX1276OnDio3Irq+0x58>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0e2      	beq.n	8006054 <SX1276OnDio3Irq+0xc>
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0df      	beq.n	8006054 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8006094:	2000      	movs	r0, #0
 8006096:	4798      	blx	r3
}
 8006098:	e7dc      	b.n	8006054 <SX1276OnDio3Irq+0xc>
 800609a:	bf00      	nop
 800609c:	20000cb0 	.word	0x20000cb0
 80060a0:	20000b7c 	.word	0x20000b7c

080060a4 <SX1276OnDio2Irq>:
{
 80060a4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80060a6:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <SX1276OnDio2Irq+0xec>)
 80060a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d002      	beq.n	80060b6 <SX1276OnDio2Irq+0x12>
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d051      	beq.n	8006158 <SX1276OnDio2Irq+0xb4>
}
 80060b4:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <SX1276OnDio2Irq+0xec>)
 80060b8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80060bc:	b1c3      	cbz	r3, 80060f0 <SX1276OnDio2Irq+0x4c>
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d1f8      	bne.n	80060b4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80060c2:	4b33      	ldr	r3, [pc, #204]	; (8006190 <SX1276OnDio2Irq+0xec>)
 80060c4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f3      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80060cc:	2102      	movs	r1, #2
 80060ce:	2012      	movs	r0, #18
 80060d0:	f006 fbad 	bl	800c82e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80060d4:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <SX1276OnDio2Irq+0xf0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0eb      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
 80060dc:	695c      	ldr	r4, [r3, #20]
 80060de:	2c00      	cmp	r4, #0
 80060e0:	d0e8      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80060e2:	201c      	movs	r0, #28
 80060e4:	f006 fbaf 	bl	800c846 <SX1276Read>
 80060e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80060ec:	47a0      	blx	r4
 80060ee:	e7e1      	b.n	80060b4 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <SX1276OnDio2Irq+0xec>)
 80060f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f4:	b35b      	cbz	r3, 800614e <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <SX1276OnDio2Irq+0xec>)
 80060f8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0d9      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
 8006100:	4b23      	ldr	r3, [pc, #140]	; (8006190 <SX1276OnDio2Irq+0xec>)
 8006102:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1d4      	bne.n	80060b4 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 800610a:	4823      	ldr	r0, [pc, #140]	; (8006198 <SX1276OnDio2Irq+0xf4>)
 800610c:	f7ff fedc 	bl	8005ec8 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8006110:	4c1f      	ldr	r4, [pc, #124]	; (8006190 <SX1276OnDio2Irq+0xec>)
 8006112:	2301      	movs	r3, #1
 8006114:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006118:	2011      	movs	r0, #17
 800611a:	f006 fb94 	bl	800c846 <SX1276Read>
 800611e:	0843      	lsrs	r3, r0, #1
 8006120:	425b      	negs	r3, r3
 8006122:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8006126:	201b      	movs	r0, #27
 8006128:	f006 fb8d 	bl	800c846 <SX1276Read>
 800612c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800612e:	201c      	movs	r0, #28
 8006130:	f006 fb89 	bl	800c846 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8006134:	4328      	orrs	r0, r5
 8006136:	f006 facd 	bl	800c6d4 <SX1276ConvertPllStepToFreqInHz>
 800613a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800613e:	200c      	movs	r0, #12
 8006140:	f006 fb81 	bl	800c846 <SX1276Read>
 8006144:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8006148:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 800614c:	e7b2      	b.n	80060b4 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <SX1276OnDio2Irq+0xec>)
 8006150:	2201      	movs	r2, #1
 8006152:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8006156:	e7ce      	b.n	80060f6 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8006158:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <SX1276OnDio2Irq+0xec>)
 800615a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800615e:	2b01      	cmp	r3, #1
 8006160:	d1a8      	bne.n	80060b4 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <SX1276OnDio2Irq+0xec>)
 8006164:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0a3      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800616c:	2102      	movs	r1, #2
 800616e:	2012      	movs	r0, #18
 8006170:	f006 fb5d 	bl	800c82e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <SX1276OnDio2Irq+0xf0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d09b      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
 800617c:	695c      	ldr	r4, [r3, #20]
 800617e:	2c00      	cmp	r4, #0
 8006180:	d098      	beq.n	80060b4 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8006182:	201c      	movs	r0, #28
 8006184:	f006 fb5f 	bl	800c846 <SX1276Read>
 8006188:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800618c:	47a0      	blx	r4
}
 800618e:	e791      	b.n	80060b4 <SX1276OnDio2Irq+0x10>
 8006190:	20000cb0 	.word	0x20000cb0
 8006194:	20000b7c 	.word	0x20000b7c
 8006198:	20000b80 	.word	0x20000b80

0800619c <SX1276OnDio1Irq>:
{
 800619c:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 800619e:	4b4c      	ldr	r3, [pc, #304]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80061a0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d002      	beq.n	80061ae <SX1276OnDio1Irq+0x12>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d063      	beq.n	8006274 <SX1276OnDio1Irq+0xd8>
}
 80061ac:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80061ae:	4b48      	ldr	r3, [pc, #288]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80061b0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80061b4:	b1cb      	cbz	r3, 80061ea <SX1276OnDio1Irq+0x4e>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d1f8      	bne.n	80061ac <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 80061ba:	f7ff fdbd 	bl	8005d38 <SX1276GetDio1PinState>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d0f4      	beq.n	80061ac <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 80061c2:	4844      	ldr	r0, [pc, #272]	; (80062d4 <SX1276OnDio1Irq+0x138>)
 80061c4:	f7ff fe80 	bl	8005ec8 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80061c8:	2180      	movs	r1, #128	; 0x80
 80061ca:	2012      	movs	r0, #18
 80061cc:	f006 fb2f 	bl	800c82e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80061d0:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80061d8:	4b3f      	ldr	r3, [pc, #252]	; (80062d8 <SX1276OnDio1Irq+0x13c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0e5      	beq.n	80061ac <SX1276OnDio1Irq+0x10>
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0e2      	beq.n	80061ac <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 80061e6:	4798      	blx	r3
 80061e8:	e7e0      	b.n	80061ac <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 80061ea:	f7ff fda5 	bl	8005d38 <SX1276GetDio1PinState>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d0dc      	beq.n	80061ac <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 80061f2:	483a      	ldr	r0, [pc, #232]	; (80062dc <SX1276OnDio1Irq+0x140>)
 80061f4:	f7ff fe68 	bl	8005ec8 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80061f8:	4b35      	ldr	r3, [pc, #212]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80061fa:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 80061fe:	b95b      	cbnz	r3, 8006218 <SX1276OnDio1Irq+0x7c>
 8006200:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 8006202:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006206:	b93b      	cbnz	r3, 8006218 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006208:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 800620a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800620e:	b9f3      	cbnz	r3, 800624e <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8006210:	2101      	movs	r1, #1
 8006212:	4833      	ldr	r0, [pc, #204]	; (80062e0 <SX1276OnDio1Irq+0x144>)
 8006214:	f006 facb 	bl	800c7ae <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006218:	4b2d      	ldr	r3, [pc, #180]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 800621a:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800621e:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8006222:	1a88      	subs	r0, r1, r2
 8006224:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8006228:	4298      	cmp	r0, r3
 800622a:	db17      	blt.n	800625c <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800622c:	b25b      	sxtb	r3, r3
 800622e:	1e59      	subs	r1, r3, #1
 8006230:	b2c9      	uxtb	r1, r1
 8006232:	482c      	ldr	r0, [pc, #176]	; (80062e4 <SX1276OnDio1Irq+0x148>)
 8006234:	4410      	add	r0, r2
 8006236:	f006 faba 	bl	800c7ae <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800623a:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 800623c:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8006240:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8006244:	440b      	add	r3, r1
 8006246:	3b01      	subs	r3, #1
 8006248:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 800624c:	e7ae      	b.n	80061ac <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800624e:	2032      	movs	r0, #50	; 0x32
 8006250:	f006 faf9 	bl	800c846 <SX1276Read>
 8006254:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 8006256:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 800625a:	e7dd      	b.n	8006218 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800625c:	1a89      	subs	r1, r1, r2
 800625e:	b2c9      	uxtb	r1, r1
 8006260:	4820      	ldr	r0, [pc, #128]	; (80062e4 <SX1276OnDio1Irq+0x148>)
 8006262:	4410      	add	r0, r2
 8006264:	f006 faa3 	bl	800c7ae <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 800626a:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 800626e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8006272:	e79b      	b.n	80061ac <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 8006276:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d196      	bne.n	80061ac <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 800627e:	f7ff fd5b 	bl	8005d38 <SX1276GetDio1PinState>
 8006282:	2801      	cmp	r0, #1
 8006284:	d092      	beq.n	80061ac <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8006286:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 8006288:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 800628c:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8006290:	eba0 0c02 	sub.w	ip, r0, r2
 8006294:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8006298:	458c      	cmp	ip, r1
 800629a:	dd0c      	ble.n	80062b6 <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800629c:	4811      	ldr	r0, [pc, #68]	; (80062e4 <SX1276OnDio1Irq+0x148>)
 800629e:	4410      	add	r0, r2
 80062a0:	f006 fa8c 	bl	800c7bc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80062a6:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80062aa:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80062ae:	440a      	add	r2, r1
 80062b0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80062b4:	e77a      	b.n	80061ac <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80062b6:	1a81      	subs	r1, r0, r2
 80062b8:	b2c9      	uxtb	r1, r1
 80062ba:	480a      	ldr	r0, [pc, #40]	; (80062e4 <SX1276OnDio1Irq+0x148>)
 80062bc:	4410      	add	r0, r2
 80062be:	f006 fa7d 	bl	800c7bc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <SX1276OnDio1Irq+0x134>)
 80062c4:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80062c8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 80062cc:	e76e      	b.n	80061ac <SX1276OnDio1Irq+0x10>
 80062ce:	bf00      	nop
 80062d0:	20000cb0 	.word	0x20000cb0
 80062d4:	20000b98 	.word	0x20000b98
 80062d8:	20000b7c 	.word	0x20000b7c
 80062dc:	20000b80 	.word	0x20000b80
 80062e0:	20000dc6 	.word	0x20000dc6
 80062e4:	20000bb0 	.word	0x20000bb0

080062e8 <SX1276OnDio0Irq>:
{
 80062e8:	b510      	push	{r4, lr}
 80062ea:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 80062f2:	4bb0      	ldr	r3, [pc, #704]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80062f4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d004      	beq.n	8006306 <SX1276OnDio0Irq+0x1e>
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	f000 813c 	beq.w	800657a <SX1276OnDio0Irq+0x292>
}
 8006302:	b002      	add	sp, #8
 8006304:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8006306:	4bab      	ldr	r3, [pc, #684]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006308:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 800630c:	b343      	cbz	r3, 8006360 <SX1276OnDio0Irq+0x78>
 800630e:	2b01      	cmp	r3, #1
 8006310:	d1f7      	bne.n	8006302 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8006312:	2140      	movs	r1, #64	; 0x40
 8006314:	2012      	movs	r0, #18
 8006316:	f006 fa8a 	bl	800c82e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800631a:	2012      	movs	r0, #18
 800631c:	f006 fa93 	bl	800c846 <SX1276Read>
 8006320:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006324:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006328:	f013 0f20 	tst.w	r3, #32
 800632c:	f000 80bd 	beq.w	80064aa <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006330:	2120      	movs	r1, #32
 8006332:	2012      	movs	r0, #18
 8006334:	f006 fa7b 	bl	800c82e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006338:	4b9e      	ldr	r3, [pc, #632]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800633a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 800633e:	b91b      	cbnz	r3, 8006348 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8006340:	4b9c      	ldr	r3, [pc, #624]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006342:	2200      	movs	r2, #0
 8006344:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8006348:	489b      	ldr	r0, [pc, #620]	; (80065b8 <SX1276OnDio0Irq+0x2d0>)
 800634a:	f7ff fdbd 	bl	8005ec8 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800634e:	4b9b      	ldr	r3, [pc, #620]	; (80065bc <SX1276OnDio0Irq+0x2d4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0d5      	beq.n	8006302 <SX1276OnDio0Irq+0x1a>
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0d2      	beq.n	8006302 <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 800635c:	4798      	blx	r3
 800635e:	e7d0      	b.n	8006302 <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006360:	4b94      	ldr	r3, [pc, #592]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006362:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006366:	bb0b      	cbnz	r3, 80063ac <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006368:	4b92      	ldr	r3, [pc, #584]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800636a:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 800636e:	2900      	cmp	r1, #0
 8006370:	d15e      	bne.n	8006430 <SX1276OnDio0Irq+0x148>
 8006372:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006376:	2b00      	cmp	r3, #0
 8006378:	d15a      	bne.n	8006430 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800637a:	4b8e      	ldr	r3, [pc, #568]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800637c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006380:	2b00      	cmp	r3, #0
 8006382:	d14e      	bne.n	8006422 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8006384:	2101      	movs	r1, #1
 8006386:	488e      	ldr	r0, [pc, #568]	; (80065c0 <SX1276OnDio0Irq+0x2d8>)
 8006388:	f006 fa11 	bl	800c7ae <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800638c:	4c89      	ldr	r4, [pc, #548]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800638e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006392:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8006396:	1ac9      	subs	r1, r1, r3
 8006398:	b2c9      	uxtb	r1, r1
 800639a:	488a      	ldr	r0, [pc, #552]	; (80065c4 <SX1276OnDio0Irq+0x2dc>)
 800639c:	4418      	add	r0, r3
 800639e:	f006 fa06 	bl	800c7ae <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80063a2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80063a6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80063aa:	e04e      	b.n	800644a <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80063ac:	203f      	movs	r0, #63	; 0x3f
 80063ae:	f006 fa4a 	bl	800c846 <SX1276Read>
 80063b2:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80063b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80063ba:	f013 0f02 	tst.w	r3, #2
 80063be:	d1d3      	bne.n	8006368 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80063c0:	210b      	movs	r1, #11
 80063c2:	203e      	movs	r0, #62	; 0x3e
 80063c4:	f006 fa33 	bl	800c82e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80063c8:	2110      	movs	r1, #16
 80063ca:	203f      	movs	r0, #63	; 0x3f
 80063cc:	f006 fa2f 	bl	800c82e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80063d0:	4879      	ldr	r0, [pc, #484]	; (80065b8 <SX1276OnDio0Irq+0x2d0>)
 80063d2:	f7ff fd79 	bl	8005ec8 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80063d6:	4b77      	ldr	r3, [pc, #476]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80063d8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80063dc:	b9bb      	cbnz	r3, 800640e <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 80063de:	487a      	ldr	r0, [pc, #488]	; (80065c8 <SX1276OnDio0Irq+0x2e0>)
 80063e0:	f7ff fd72 	bl	8005ec8 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80063e4:	4b73      	ldr	r3, [pc, #460]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80063ec:	4b73      	ldr	r3, [pc, #460]	; (80065bc <SX1276OnDio0Irq+0x2d4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	b113      	cbz	r3, 80063f8 <SX1276OnDio0Irq+0x110>
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	b103      	cbz	r3, 80063f8 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 80063f6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80063f8:	4b6e      	ldr	r3, [pc, #440]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006400:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006404:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006408:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 800640c:	e779      	b.n	8006302 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800640e:	200d      	movs	r0, #13
 8006410:	f006 fa19 	bl	800c846 <SX1276Read>
 8006414:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006418:	b2c9      	uxtb	r1, r1
 800641a:	200d      	movs	r0, #13
 800641c:	f006 fa07 	bl	800c82e <SX1276Write>
 8006420:	e7e4      	b.n	80063ec <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006422:	2032      	movs	r0, #50	; 0x32
 8006424:	f006 fa0f 	bl	800c846 <SX1276Read>
 8006428:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800642a:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 800642e:	e7ad      	b.n	800638c <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006430:	4c60      	ldr	r4, [pc, #384]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006432:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006436:	1ac9      	subs	r1, r1, r3
 8006438:	b2c9      	uxtb	r1, r1
 800643a:	4862      	ldr	r0, [pc, #392]	; (80065c4 <SX1276OnDio0Irq+0x2dc>)
 800643c:	4418      	add	r0, r3
 800643e:	f006 f9b6 	bl	800c7ae <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006442:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006446:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800644a:	485b      	ldr	r0, [pc, #364]	; (80065b8 <SX1276OnDio0Irq+0x2d0>)
 800644c:	f7ff fd3c 	bl	8005ec8 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006452:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006456:	b9f3      	cbnz	r3, 8006496 <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 8006458:	4b56      	ldr	r3, [pc, #344]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800645a:	2200      	movs	r2, #0
 800645c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 8006460:	4859      	ldr	r0, [pc, #356]	; (80065c8 <SX1276OnDio0Irq+0x2e0>)
 8006462:	f7ff fd31 	bl	8005ec8 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006466:	4b55      	ldr	r3, [pc, #340]	; (80065bc <SX1276OnDio0Irq+0x2d4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	b14b      	cbz	r3, 8006480 <SX1276OnDio0Irq+0x198>
 800646c:	689c      	ldr	r4, [r3, #8]
 800646e:	b13c      	cbz	r4, 8006480 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006470:	4950      	ldr	r1, [pc, #320]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006472:	2300      	movs	r3, #0
 8006474:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 8006478:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 800647c:	4851      	ldr	r0, [pc, #324]	; (80065c4 <SX1276OnDio0Irq+0x2dc>)
 800647e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006480:	4b4c      	ldr	r3, [pc, #304]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006482:	2200      	movs	r2, #0
 8006484:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006488:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800648c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 8006490:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 8006494:	e735      	b.n	8006302 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006496:	200d      	movs	r0, #13
 8006498:	f006 f9d5 	bl	800c846 <SX1276Read>
 800649c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80064a0:	b2c9      	uxtb	r1, r1
 80064a2:	200d      	movs	r0, #13
 80064a4:	f006 f9c3 	bl	800c82e <SX1276Write>
 80064a8:	e7dd      	b.n	8006466 <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80064aa:	2019      	movs	r0, #25
 80064ac:	f006 f9cb 	bl	800c846 <SX1276Read>
 80064b0:	b243      	sxtb	r3, r0
 80064b2:	3302      	adds	r3, #2
 80064b4:	109b      	asrs	r3, r3, #2
 80064b6:	4c3f      	ldr	r4, [pc, #252]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80064b8:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80064bc:	201a      	movs	r0, #26
 80064be:	f006 f9c2 	bl	800c846 <SX1276Read>
 80064c2:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80064c4:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 80064c8:	2a00      	cmp	r2, #0
 80064ca:	db39      	blt.n	8006540 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80064cc:	4b39      	ldr	r3, [pc, #228]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80064ce:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80064d2:	4b3e      	ldr	r3, [pc, #248]	; (80065cc <SX1276OnDio0Irq+0x2e4>)
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d949      	bls.n	800656c <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80064d8:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80064dc:	389d      	subs	r0, #157	; 0x9d
 80064de:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80064e0:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80064e4:	2013      	movs	r0, #19
 80064e6:	f006 f9ae 	bl	800c846 <SX1276Read>
 80064ea:	4c32      	ldr	r4, [pc, #200]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 80064ec:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80064f0:	2010      	movs	r0, #16
 80064f2:	f006 f9a8 	bl	800c846 <SX1276Read>
 80064f6:	4601      	mov	r1, r0
 80064f8:	200d      	movs	r0, #13
 80064fa:	f006 f998 	bl	800c82e <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80064fe:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8006502:	4830      	ldr	r0, [pc, #192]	; (80065c4 <SX1276OnDio0Irq+0x2dc>)
 8006504:	f006 f953 	bl	800c7ae <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006508:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 800650c:	b913      	cbnz	r3, 8006514 <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 800650e:	2200      	movs	r2, #0
 8006510:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8006514:	4828      	ldr	r0, [pc, #160]	; (80065b8 <SX1276OnDio0Irq+0x2d0>)
 8006516:	f7ff fcd7 	bl	8005ec8 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800651a:	4b28      	ldr	r3, [pc, #160]	; (80065bc <SX1276OnDio0Irq+0x2d4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f43f aeef 	beq.w	8006302 <SX1276OnDio0Irq+0x1a>
 8006524:	689c      	ldr	r4, [r3, #8]
 8006526:	2c00      	cmp	r4, #0
 8006528:	f43f aeeb 	beq.w	8006302 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800652c:	4921      	ldr	r1, [pc, #132]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800652e:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8006532:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8006536:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800653a:	4822      	ldr	r0, [pc, #136]	; (80065c4 <SX1276OnDio0Irq+0x2dc>)
 800653c:	47a0      	blx	r4
 800653e:	e6e0      	b.n	8006302 <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006540:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <SX1276OnDio0Irq+0x2e4>)
 8006546:	4299      	cmp	r1, r3
 8006548:	d907      	bls.n	800655a <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800654a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800654e:	b203      	sxth	r3, r0
 8006550:	4413      	add	r3, r2
 8006552:	3b9d      	subs	r3, #157	; 0x9d
 8006554:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 8006558:	e7c4      	b.n	80064e4 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800655a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800655e:	b203      	sxth	r3, r0
 8006560:	4413      	add	r3, r2
 8006562:	3ba4      	subs	r3, #164	; 0xa4
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006566:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 800656a:	e7bb      	b.n	80064e4 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800656c:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006570:	38a4      	subs	r0, #164	; 0xa4
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006574:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8006578:	e7b4      	b.n	80064e4 <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 800657a:	4815      	ldr	r0, [pc, #84]	; (80065d0 <SX1276OnDio0Irq+0x2e8>)
 800657c:	f7ff fca4 	bl	8005ec8 <TimerStop>
            switch( SX1276.Settings.Modem )
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 8006582:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d00e      	beq.n	80065a8 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 800658a:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <SX1276OnDio0Irq+0x2cc>)
 800658c:	2200      	movs	r2, #0
 800658e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <SX1276OnDio0Irq+0x2d4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f aeb3 	beq.w	8006302 <SX1276OnDio0Irq+0x1a>
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f43f aeaf 	beq.w	8006302 <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 80065a4:	4798      	blx	r3
}
 80065a6:	e6ac      	b.n	8006302 <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80065a8:	2108      	movs	r1, #8
 80065aa:	2012      	movs	r0, #18
 80065ac:	f006 f93f 	bl	800c82e <SX1276Write>
 80065b0:	e7eb      	b.n	800658a <SX1276OnDio0Irq+0x2a2>
 80065b2:	bf00      	nop
 80065b4:	20000cb0 	.word	0x20000cb0
 80065b8:	20000b98 	.word	0x20000b98
 80065bc:	20000b7c 	.word	0x20000b7c
 80065c0:	20000dc6 	.word	0x20000dc6
 80065c4:	20000bb0 	.word	0x20000bb0
 80065c8:	20000b80 	.word	0x20000b80
 80065cc:	1f4add40 	.word	0x1f4add40
 80065d0:	20000df4 	.word	0x20000df4

080065d4 <RxChainCalibration>:
{
 80065d4:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80065d6:	2009      	movs	r0, #9
 80065d8:	f006 f935 	bl	800c846 <SX1276Read>
 80065dc:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80065de:	2006      	movs	r0, #6
 80065e0:	f006 f931 	bl	800c846 <SX1276Read>
 80065e4:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80065e6:	2007      	movs	r0, #7
 80065e8:	f006 f92d 	bl	800c846 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80065ec:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 80065f0:	2008      	movs	r0, #8
 80065f2:	f006 f928 	bl	800c846 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80065f6:	4320      	orrs	r0, r4
 80065f8:	f006 f86c 	bl	800c6d4 <SX1276ConvertPllStepToFreqInHz>
 80065fc:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80065fe:	2100      	movs	r1, #0
 8006600:	2009      	movs	r0, #9
 8006602:	f006 f914 	bl	800c82e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006606:	203b      	movs	r0, #59	; 0x3b
 8006608:	f006 f91d 	bl	800c846 <SX1276Read>
 800660c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006610:	b2c9      	uxtb	r1, r1
 8006612:	203b      	movs	r0, #59	; 0x3b
 8006614:	f006 f90b 	bl	800c82e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006618:	203b      	movs	r0, #59	; 0x3b
 800661a:	f006 f914 	bl	800c846 <SX1276Read>
 800661e:	f010 0f20 	tst.w	r0, #32
 8006622:	d1f9      	bne.n	8006618 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8006624:	480c      	ldr	r0, [pc, #48]	; (8006658 <RxChainCalibration+0x84>)
 8006626:	f7ff fcf5 	bl	8006014 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800662a:	203b      	movs	r0, #59	; 0x3b
 800662c:	f006 f90b 	bl	800c846 <SX1276Read>
 8006630:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006634:	b2c9      	uxtb	r1, r1
 8006636:	203b      	movs	r0, #59	; 0x3b
 8006638:	f006 f8f9 	bl	800c82e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800663c:	203b      	movs	r0, #59	; 0x3b
 800663e:	f006 f902 	bl	800c846 <SX1276Read>
 8006642:	f010 0f20 	tst.w	r0, #32
 8006646:	d1f9      	bne.n	800663c <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8006648:	4629      	mov	r1, r5
 800664a:	2009      	movs	r0, #9
 800664c:	f006 f8ef 	bl	800c82e <SX1276Write>
    SX1276SetChannel( initialFreq );
 8006650:	4620      	mov	r0, r4
 8006652:	f7ff fcdf 	bl	8006014 <SX1276SetChannel>
}
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	33bca100 	.word	0x33bca100

0800665c <SX1276SetSleep>:
{
 800665c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 800665e:	480a      	ldr	r0, [pc, #40]	; (8006688 <SX1276SetSleep+0x2c>)
 8006660:	f7ff fc32 	bl	8005ec8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <SX1276SetSleep+0x30>)
 8006666:	f7ff fc2f 	bl	8005ec8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800666a:	4809      	ldr	r0, [pc, #36]	; (8006690 <SX1276SetSleep+0x34>)
 800666c:	f7ff fc2c 	bl	8005ec8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006670:	2000      	movs	r0, #0
 8006672:	f006 f8f4 	bl	800c85e <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 8006676:	2000      	movs	r0, #0
 8006678:	f005 ffc5 	bl	800c606 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <SX1276SetSleep+0x38>)
 800667e:	2200      	movs	r2, #0
 8006680:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006684:	bd08      	pop	{r3, pc}
 8006686:	bf00      	nop
 8006688:	20000b98 	.word	0x20000b98
 800668c:	20000df4 	.word	0x20000df4
 8006690:	20000b80 	.word	0x20000b80
 8006694:	20000cb0 	.word	0x20000cb0

08006698 <SX1276SetStby>:
{
 8006698:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 800669a:	4808      	ldr	r0, [pc, #32]	; (80066bc <SX1276SetStby+0x24>)
 800669c:	f7ff fc14 	bl	8005ec8 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80066a0:	4807      	ldr	r0, [pc, #28]	; (80066c0 <SX1276SetStby+0x28>)
 80066a2:	f7ff fc11 	bl	8005ec8 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80066a6:	4807      	ldr	r0, [pc, #28]	; (80066c4 <SX1276SetStby+0x2c>)
 80066a8:	f7ff fc0e 	bl	8005ec8 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80066ac:	2001      	movs	r0, #1
 80066ae:	f006 f8d6 	bl	800c85e <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80066b2:	4b05      	ldr	r3, [pc, #20]	; (80066c8 <SX1276SetStby+0x30>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80066ba:	bd08      	pop	{r3, pc}
 80066bc:	20000b98 	.word	0x20000b98
 80066c0:	20000df4 	.word	0x20000df4
 80066c4:	20000b80 	.word	0x20000b80
 80066c8:	20000cb0 	.word	0x20000cb0

080066cc <SX1276SetTx>:
{
 80066cc:	b510      	push	{r4, lr}
 80066ce:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 80066d0:	4829      	ldr	r0, [pc, #164]	; (8006778 <SX1276SetTx+0xac>)
 80066d2:	f7ff fbf9 	bl	8005ec8 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80066d6:	4621      	mov	r1, r4
 80066d8:	4828      	ldr	r0, [pc, #160]	; (800677c <SX1276SetTx+0xb0>)
 80066da:	f005 ffd0 	bl	800c67e <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <SX1276SetTx+0xb4>)
 80066e0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80066e4:	b163      	cbz	r3, 8006700 <SX1276SetTx+0x34>
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d023      	beq.n	8006732 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 80066ea:	4b25      	ldr	r3, [pc, #148]	; (8006780 <SX1276SetTx+0xb4>)
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80066f2:	4822      	ldr	r0, [pc, #136]	; (800677c <SX1276SetTx+0xb0>)
 80066f4:	f7ff fb6e 	bl	8005dd4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80066f8:	2003      	movs	r0, #3
 80066fa:	f006 f8b0 	bl	800c85e <SX1276SetOpMode>
}
 80066fe:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006700:	2040      	movs	r0, #64	; 0x40
 8006702:	f006 f8a0 	bl	800c846 <SX1276Read>
 8006706:	f000 0103 	and.w	r1, r0, #3
 800670a:	2040      	movs	r0, #64	; 0x40
 800670c:	f006 f88f 	bl	800c82e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006710:	2041      	movs	r0, #65	; 0x41
 8006712:	f006 f898 	bl	800c846 <SX1276Read>
 8006716:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 800671a:	2041      	movs	r0, #65	; 0x41
 800671c:	f006 f887 	bl	800c82e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006720:	2035      	movs	r0, #53	; 0x35
 8006722:	f006 f890 	bl	800c846 <SX1276Read>
 8006726:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <SX1276SetTx+0xb4>)
 800672c:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8006730:	e7db      	b.n	80066ea <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <SX1276SetTx+0xb4>)
 8006734:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006738:	b173      	cbz	r3, 8006758 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800673a:	21f5      	movs	r1, #245	; 0xf5
 800673c:	2011      	movs	r0, #17
 800673e:	f006 f876 	bl	800c82e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006742:	2040      	movs	r0, #64	; 0x40
 8006744:	f006 f87f 	bl	800c846 <SX1276Read>
 8006748:	f000 0133 	and.w	r1, r0, #51	; 0x33
 800674c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006750:	2040      	movs	r0, #64	; 0x40
 8006752:	f006 f86c 	bl	800c82e <SX1276Write>
 8006756:	e7c8      	b.n	80066ea <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006758:	21f7      	movs	r1, #247	; 0xf7
 800675a:	2011      	movs	r0, #17
 800675c:	f006 f867 	bl	800c82e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006760:	2040      	movs	r0, #64	; 0x40
 8006762:	f006 f870 	bl	800c846 <SX1276Read>
 8006766:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 800676a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800676e:	2040      	movs	r0, #64	; 0x40
 8006770:	f006 f85d 	bl	800c82e <SX1276Write>
 8006774:	e7b9      	b.n	80066ea <SX1276SetTx+0x1e>
 8006776:	bf00      	nop
 8006778:	20000b98 	.word	0x20000b98
 800677c:	20000df4 	.word	0x20000df4
 8006780:	20000cb0 	.word	0x20000cb0

08006784 <SX1276Send>:
{
 8006784:	b530      	push	{r4, r5, lr}
 8006786:	b083      	sub	sp, #12
 8006788:	4604      	mov	r4, r0
 800678a:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 800678e:	4b44      	ldr	r3, [pc, #272]	; (80068a0 <SX1276Send+0x11c>)
 8006790:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006794:	b133      	cbz	r3, 80067a4 <SX1276Send+0x20>
 8006796:	2b01      	cmp	r3, #1
 8006798:	d03a      	beq.n	8006810 <SX1276Send+0x8c>
 800679a:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 800679c:	f7ff ff96 	bl	80066cc <SX1276SetTx>
}
 80067a0:	b003      	add	sp, #12
 80067a2:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80067a4:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <SX1276Send+0x11c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 80067ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80067b0:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 80067b4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80067b8:	b9eb      	cbnz	r3, 80067f6 <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80067ba:	2101      	movs	r1, #1
 80067bc:	f10d 0007 	add.w	r0, sp, #7
 80067c0:	f005 fffc 	bl	800c7bc <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 80067c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80067c8:	1e53      	subs	r3, r2, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b3f      	cmp	r3, #63	; 0x3f
 80067ce:	d816      	bhi.n	80067fe <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80067d0:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <SX1276Send+0x11c>)
 80067d2:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80067d6:	4d32      	ldr	r5, [pc, #200]	; (80068a0 <SX1276Send+0x11c>)
 80067d8:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 80067dc:	4620      	mov	r0, r4
 80067de:	f005 ffed 	bl	800c7bc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80067e2:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 80067e6:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 80067ea:	4413      	add	r3, r2
 80067ec:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80067f0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 80067f4:	e7d2      	b.n	800679c <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 80067f6:	2032      	movs	r0, #50	; 0x32
 80067f8:	f006 f819 	bl	800c82e <SX1276Write>
 80067fc:	e7e2      	b.n	80067c4 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 80067fe:	4621      	mov	r1, r4
 8006800:	4828      	ldr	r0, [pc, #160]	; (80068a4 <SX1276Send+0x120>)
 8006802:	f005 ff12 	bl	800c62a <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <SX1276Send+0x11c>)
 8006808:	2220      	movs	r2, #32
 800680a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 800680e:	e7e2      	b.n	80067d6 <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006810:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <SX1276Send+0x11c>)
 8006812:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006816:	b353      	cbz	r3, 800686e <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006818:	2033      	movs	r0, #51	; 0x33
 800681a:	f006 f814 	bl	800c846 <SX1276Read>
 800681e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8006822:	2033      	movs	r0, #51	; 0x33
 8006824:	f006 f803 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006828:	2119      	movs	r1, #25
 800682a:	203b      	movs	r0, #59	; 0x3b
 800682c:	f005 ffff 	bl	800c82e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006830:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <SX1276Send+0x11c>)
 8006836:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800683a:	2022      	movs	r0, #34	; 0x22
 800683c:	f005 fff7 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006840:	2100      	movs	r1, #0
 8006842:	200e      	movs	r0, #14
 8006844:	f005 fff3 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006848:	2100      	movs	r1, #0
 800684a:	200d      	movs	r0, #13
 800684c:	f005 ffef 	bl	800c82e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006850:	2001      	movs	r0, #1
 8006852:	f005 fff8 	bl	800c846 <SX1276Read>
 8006856:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 800685a:	d01a      	beq.n	8006892 <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 800685c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006860:	4620      	mov	r0, r4
 8006862:	f005 ffab 	bl	800c7bc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <SX1276Send+0x11c>)
 8006868:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 800686c:	e796      	b.n	800679c <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800686e:	2033      	movs	r0, #51	; 0x33
 8006870:	f005 ffe9 	bl	800c846 <SX1276Read>
 8006874:	b241      	sxtb	r1, r0
 8006876:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 800687a:	f041 0101 	orr.w	r1, r1, #1
 800687e:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8006882:	2033      	movs	r0, #51	; 0x33
 8006884:	f005 ffd3 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006888:	211d      	movs	r1, #29
 800688a:	203b      	movs	r0, #59	; 0x3b
 800688c:	f005 ffcf 	bl	800c82e <SX1276Write>
 8006890:	e7ce      	b.n	8006830 <SX1276Send+0xac>
                SX1276SetStby( );
 8006892:	f7ff ff01 	bl	8006698 <SX1276SetStby>
                DelayMs( 1 );
 8006896:	2001      	movs	r0, #1
 8006898:	f005 ff18 	bl	800c6cc <DelayMs>
 800689c:	e7de      	b.n	800685c <SX1276Send+0xd8>
 800689e:	bf00      	nop
 80068a0:	20000cb0 	.word	0x20000cb0
 80068a4:	20000bb0 	.word	0x20000bb0

080068a8 <SX1276SetRx>:
{
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 80068ac:	489d      	ldr	r0, [pc, #628]	; (8006b24 <SX1276SetRx+0x27c>)
 80068ae:	f7ff fb0b 	bl	8005ec8 <TimerStop>
    switch( SX1276.Settings.Modem )
 80068b2:	4b9d      	ldr	r3, [pc, #628]	; (8006b28 <SX1276SetRx+0x280>)
 80068b4:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80068b8:	b1e3      	cbz	r3, 80068f4 <SX1276SetRx+0x4c>
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d045      	beq.n	800694a <SX1276SetRx+0xa2>
 80068be:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 80068c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c4:	2100      	movs	r1, #0
 80068c6:	4899      	ldr	r0, [pc, #612]	; (8006b2c <SX1276SetRx+0x284>)
 80068c8:	f006 fd0b 	bl	800d2e2 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80068cc:	4b96      	ldr	r3, [pc, #600]	; (8006b28 <SX1276SetRx+0x280>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 80068d4:	2c00      	cmp	r4, #0
 80068d6:	f040 8107 	bne.w	8006ae8 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80068da:	4b93      	ldr	r3, [pc, #588]	; (8006b28 <SX1276SetRx+0x280>)
 80068dc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 810a 	beq.w	8006afa <SX1276SetRx+0x252>
        if( rxContinuous == true )
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	f000 8118 	beq.w	8006b1c <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80068ec:	2005      	movs	r0, #5
 80068ee:	f005 ffb6 	bl	800c85e <SX1276SetOpMode>
}
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80068f4:	4d8c      	ldr	r5, [pc, #560]	; (8006b28 <SX1276SetRx+0x280>)
 80068f6:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80068fa:	2040      	movs	r0, #64	; 0x40
 80068fc:	f005 ffa3 	bl	800c846 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006900:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006904:	f041 010c 	orr.w	r1, r1, #12
 8006908:	2040      	movs	r0, #64	; 0x40
 800690a:	f005 ff90 	bl	800c82e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800690e:	2041      	movs	r0, #65	; 0x41
 8006910:	f005 ff99 	bl	800c846 <SX1276Read>
 8006914:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8006918:	b2c9      	uxtb	r1, r1
 800691a:	2041      	movs	r0, #65	; 0x41
 800691c:	f005 ff87 	bl	800c82e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006920:	2035      	movs	r0, #53	; 0x35
 8006922:	f005 ff90 	bl	800c846 <SX1276Read>
 8006926:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800692a:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800692e:	211e      	movs	r1, #30
 8006930:	200d      	movs	r0, #13
 8006932:	f005 ff7c 	bl	800c82e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006936:	2300      	movs	r3, #0
 8006938:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800693c:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006940:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006944:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8006948:	e7ba      	b.n	80068c0 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800694a:	4b77      	ldr	r3, [pc, #476]	; (8006b28 <SX1276SetRx+0x280>)
 800694c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006950:	b353      	cbz	r3, 80069a8 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8006952:	2033      	movs	r0, #51	; 0x33
 8006954:	f005 ff77 	bl	800c846 <SX1276Read>
 8006958:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 800695c:	b2c9      	uxtb	r1, r1
 800695e:	2033      	movs	r0, #51	; 0x33
 8006960:	f005 ff65 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006964:	2119      	movs	r1, #25
 8006966:	203b      	movs	r0, #59	; 0x3b
 8006968:	f005 ff61 	bl	800c82e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800696c:	4b6e      	ldr	r3, [pc, #440]	; (8006b28 <SX1276SetRx+0x280>)
 800696e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8006972:	2b08      	cmp	r3, #8
 8006974:	f200 8087 	bhi.w	8006a86 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006978:	2031      	movs	r0, #49	; 0x31
 800697a:	f005 ff64 	bl	800c846 <SX1276Read>
 800697e:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006982:	2031      	movs	r0, #49	; 0x31
 8006984:	f005 ff53 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006988:	2100      	movs	r1, #0
 800698a:	2030      	movs	r0, #48	; 0x30
 800698c:	f005 ff4f 	bl	800c82e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006990:	4b65      	ldr	r3, [pc, #404]	; (8006b28 <SX1276SetRx+0x280>)
 8006992:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8006996:	2b08      	cmp	r3, #8
 8006998:	d87e      	bhi.n	8006a98 <SX1276SetRx+0x1f0>
 800699a:	e8df f003 	tbb	[pc, r3]
 800699e:	2417      	.short	0x2417
 80069a0:	584b3e31 	.word	0x584b3e31
 80069a4:	6a65      	.short	0x6a65
 80069a6:	6f          	.byte	0x6f
 80069a7:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80069a8:	2033      	movs	r0, #51	; 0x33
 80069aa:	f005 ff4c 	bl	800c846 <SX1276Read>
 80069ae:	b241      	sxtb	r1, r0
 80069b0:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80069b4:	f041 0101 	orr.w	r1, r1, #1
 80069b8:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 80069bc:	2033      	movs	r0, #51	; 0x33
 80069be:	f005 ff36 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80069c2:	211d      	movs	r1, #29
 80069c4:	203b      	movs	r0, #59	; 0x3b
 80069c6:	f005 ff32 	bl	800c82e <SX1276Write>
 80069ca:	e7cf      	b.n	800696c <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80069cc:	2148      	movs	r1, #72	; 0x48
 80069ce:	202f      	movs	r0, #47	; 0x2f
 80069d0:	f005 ff2d 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80069d4:	4b54      	ldr	r3, [pc, #336]	; (8006b28 <SX1276SetRx+0x280>)
 80069d6:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80069da:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 80069de:	3002      	adds	r0, #2
 80069e0:	f7ff fb18 	bl	8006014 <SX1276SetChannel>
                    break;
 80069e4:	e058      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80069e6:	2144      	movs	r1, #68	; 0x44
 80069e8:	202f      	movs	r0, #47	; 0x2f
 80069ea:	f005 ff20 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <SX1276SetRx+0x280>)
 80069f0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80069f4:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 80069f8:	3034      	adds	r0, #52	; 0x34
 80069fa:	f7ff fb0b 	bl	8006014 <SX1276SetChannel>
                    break;
 80069fe:	e04b      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a00:	2144      	movs	r1, #68	; 0x44
 8006a02:	202f      	movs	r0, #47	; 0x2f
 8006a04:	f005 ff13 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006a08:	4b47      	ldr	r3, [pc, #284]	; (8006b28 <SX1276SetRx+0x280>)
 8006a0a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006a0e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8006a12:	3004      	adds	r0, #4
 8006a14:	f7ff fafe 	bl	8006014 <SX1276SetChannel>
                    break;
 8006a18:	e03e      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a1a:	2144      	movs	r1, #68	; 0x44
 8006a1c:	202f      	movs	r0, #47	; 0x2f
 8006a1e:	f005 ff06 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006a22:	4b41      	ldr	r3, [pc, #260]	; (8006b28 <SX1276SetRx+0x280>)
 8006a24:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006a28:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8006a2c:	305e      	adds	r0, #94	; 0x5e
 8006a2e:	f7ff faf1 	bl	8006014 <SX1276SetChannel>
                    break;
 8006a32:	e031      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a34:	2144      	movs	r1, #68	; 0x44
 8006a36:	202f      	movs	r0, #47	; 0x2f
 8006a38:	f005 fef9 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8006a3c:	4b3a      	ldr	r3, [pc, #232]	; (8006b28 <SX1276SetRx+0x280>)
 8006a3e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006a42:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8006a46:	3012      	adds	r0, #18
 8006a48:	f7ff fae4 	bl	8006014 <SX1276SetChannel>
                    break;
 8006a4c:	e024      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006a4e:	2144      	movs	r1, #68	; 0x44
 8006a50:	202f      	movs	r0, #47	; 0x2f
 8006a52:	f005 feec 	bl	800c82e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006a56:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <SX1276SetRx+0x280>)
 8006a58:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006a5c:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8006a60:	30c6      	adds	r0, #198	; 0xc6
 8006a62:	f7ff fad7 	bl	8006014 <SX1276SetChannel>
                    break;
 8006a66:	e017      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	202f      	movs	r0, #47	; 0x2f
 8006a6c:	f005 fedf 	bl	800c82e <SX1276Write>
                    break;
 8006a70:	e012      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006a72:	2140      	movs	r1, #64	; 0x40
 8006a74:	202f      	movs	r0, #47	; 0x2f
 8006a76:	f005 feda 	bl	800c82e <SX1276Write>
                    break;
 8006a7a:	e00d      	b.n	8006a98 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006a7c:	2140      	movs	r1, #64	; 0x40
 8006a7e:	202f      	movs	r0, #47	; 0x2f
 8006a80:	f005 fed5 	bl	800c82e <SX1276Write>
                    break;
 8006a84:	e008      	b.n	8006a98 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006a86:	2031      	movs	r0, #49	; 0x31
 8006a88:	f005 fedd 	bl	800c846 <SX1276Read>
 8006a8c:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006a90:	b2c9      	uxtb	r1, r1
 8006a92:	2031      	movs	r0, #49	; 0x31
 8006a94:	f005 fecb 	bl	800c82e <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006a98:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <SX1276SetRx+0x280>)
 8006a9a:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006a9e:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006aa2:	b1a3      	cbz	r3, 8006ace <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006aa4:	211d      	movs	r1, #29
 8006aa6:	2011      	movs	r0, #17
 8006aa8:	f005 fec1 	bl	800c82e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006aac:	2040      	movs	r0, #64	; 0x40
 8006aae:	f005 feca 	bl	800c846 <SX1276Read>
 8006ab2:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8006ab6:	2040      	movs	r0, #64	; 0x40
 8006ab8:	f005 feb9 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8006abc:	2100      	movs	r1, #0
 8006abe:	200f      	movs	r0, #15
 8006ac0:	f005 feb5 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	200d      	movs	r0, #13
 8006ac8:	f005 feb1 	bl	800c82e <SX1276Write>
        break;
 8006acc:	e6f8      	b.n	80068c0 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006ace:	211f      	movs	r1, #31
 8006ad0:	2011      	movs	r0, #17
 8006ad2:	f005 feac 	bl	800c82e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006ad6:	2040      	movs	r0, #64	; 0x40
 8006ad8:	f005 feb5 	bl	800c846 <SX1276Read>
 8006adc:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8006ae0:	2040      	movs	r0, #64	; 0x40
 8006ae2:	f005 fea4 	bl	800c82e <SX1276Write>
 8006ae6:	e7e9      	b.n	8006abc <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006ae8:	4d11      	ldr	r5, [pc, #68]	; (8006b30 <SX1276SetRx+0x288>)
 8006aea:	4621      	mov	r1, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f005 fdc6 	bl	800c67e <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff f96e 	bl	8005dd4 <TimerStart>
 8006af8:	e6ef      	b.n	80068da <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006afa:	2005      	movs	r0, #5
 8006afc:	f005 feaf 	bl	800c85e <SX1276SetOpMode>
        if( rxContinuous == false )
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	f47f aef6 	bne.w	80068f2 <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006b06:	4c0b      	ldr	r4, [pc, #44]	; (8006b34 <SX1276SetRx+0x28c>)
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <SX1276SetRx+0x280>)
 8006b0a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f005 fdb5 	bl	800c67e <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7ff f95d 	bl	8005dd4 <TimerStart>
 8006b1a:	e6ea      	b.n	80068f2 <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006b1c:	2006      	movs	r0, #6
 8006b1e:	f005 fe9e 	bl	800c85e <SX1276SetOpMode>
}
 8006b22:	e6e6      	b.n	80068f2 <SX1276SetRx+0x4a>
 8006b24:	20000df4 	.word	0x20000df4
 8006b28:	20000cb0 	.word	0x20000cb0
 8006b2c:	20000bb0 	.word	0x20000bb0
 8006b30:	20000b98 	.word	0x20000b98
 8006b34:	20000b80 	.word	0x20000b80

08006b38 <SX1276ReadRssi>:
{
 8006b38:	b508      	push	{r3, lr}
    switch( modem )
 8006b3a:	b120      	cbz	r0, 8006b46 <SX1276ReadRssi+0xe>
 8006b3c:	2801      	cmp	r0, #1
 8006b3e:	d00a      	beq.n	8006b56 <SX1276ReadRssi+0x1e>
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006b44:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006b46:	2011      	movs	r0, #17
 8006b48:	f005 fe7d 	bl	800c846 <SX1276Read>
 8006b4c:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8006b50:	4240      	negs	r0, r0
 8006b52:	b200      	sxth	r0, r0
        break;
 8006b54:	e7f6      	b.n	8006b44 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <SX1276ReadRssi+0x48>)
 8006b58:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <SX1276ReadRssi+0x4c>)
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d906      	bls.n	8006b70 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006b62:	201b      	movs	r0, #27
 8006b64:	f005 fe6f 	bl	800c846 <SX1276Read>
 8006b68:	b200      	sxth	r0, r0
 8006b6a:	389d      	subs	r0, #157	; 0x9d
 8006b6c:	b200      	sxth	r0, r0
 8006b6e:	e7e9      	b.n	8006b44 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006b70:	201b      	movs	r0, #27
 8006b72:	f005 fe68 	bl	800c846 <SX1276Read>
 8006b76:	b200      	sxth	r0, r0
 8006b78:	38a4      	subs	r0, #164	; 0xa4
 8006b7a:	b200      	sxth	r0, r0
 8006b7c:	e7e2      	b.n	8006b44 <SX1276ReadRssi+0xc>
 8006b7e:	bf00      	nop
 8006b80:	20000cb0 	.word	0x20000cb0
 8006b84:	1f4add40 	.word	0x1f4add40

08006b88 <SX1276SetModem>:
{
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f005 fe5a 	bl	800c846 <SX1276Read>
 8006b92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006b96:	d121      	bne.n	8006bdc <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <SX1276SetModem+0x88>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8006ba0:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <SX1276SetModem+0x88>)
 8006ba2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d017      	beq.n	8006bda <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8006baa:	4b19      	ldr	r3, [pc, #100]	; (8006c10 <SX1276SetModem+0x88>)
 8006bac:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8006bb0:	2c01      	cmp	r4, #1
 8006bb2:	d018      	beq.n	8006be6 <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	f005 fe52 	bl	800c85e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006bba:	2001      	movs	r0, #1
 8006bbc:	f005 fe43 	bl	800c846 <SX1276Read>
 8006bc0:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	f005 fe32 	bl	800c82e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006bca:	2100      	movs	r1, #0
 8006bcc:	2040      	movs	r0, #64	; 0x40
 8006bce:	f005 fe2e 	bl	800c82e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006bd2:	2130      	movs	r1, #48	; 0x30
 8006bd4:	2041      	movs	r0, #65	; 0x41
 8006bd6:	f005 fe2a 	bl	800c82e <SX1276Write>
}
 8006bda:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <SX1276SetModem+0x88>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8006be4:	e7dc      	b.n	8006ba0 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006be6:	2000      	movs	r0, #0
 8006be8:	f005 fe39 	bl	800c85e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006bec:	2001      	movs	r0, #1
 8006bee:	f005 fe2a 	bl	800c846 <SX1276Read>
 8006bf2:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006bf6:	b2c9      	uxtb	r1, r1
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f005 fe18 	bl	800c82e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006bfe:	2100      	movs	r1, #0
 8006c00:	2040      	movs	r0, #64	; 0x40
 8006c02:	f005 fe14 	bl	800c82e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006c06:	2100      	movs	r1, #0
 8006c08:	2041      	movs	r0, #65	; 0x41
 8006c0a:	f005 fe10 	bl	800c82e <SX1276Write>
        break;
 8006c0e:	e7e4      	b.n	8006bda <SX1276SetModem+0x52>
 8006c10:	20000cb0 	.word	0x20000cb0

08006c14 <SX1276Init>:
{
 8006c14:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <SX1276Init+0x68>)
 8006c18:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006c1a:	4c19      	ldr	r4, [pc, #100]	; (8006c80 <SX1276Init+0x6c>)
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4819      	ldr	r0, [pc, #100]	; (8006c84 <SX1276Init+0x70>)
 8006c20:	f005 fd24 	bl	800c66c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006c24:	4621      	mov	r1, r4
 8006c26:	4818      	ldr	r0, [pc, #96]	; (8006c88 <SX1276Init+0x74>)
 8006c28:	f005 fd20 	bl	800c66c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4817      	ldr	r0, [pc, #92]	; (8006c8c <SX1276Init+0x78>)
 8006c30:	f005 fd1c 	bl	800c66c <TimerInit>
    SX1276Reset( );
 8006c34:	f7fe fde2 	bl	80057fc <SX1276Reset>
    RxChainCalibration( );
 8006c38:	f7ff fccc 	bl	80065d4 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	f005 fe0e 	bl	800c85e <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8006c42:	4813      	ldr	r0, [pc, #76]	; (8006c90 <SX1276Init+0x7c>)
 8006c44:	f7fe fe0e 	bl	8005864 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006c48:	2400      	movs	r4, #0
 8006c4a:	e00c      	b.n	8006c66 <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <SX1276Init+0x80>)
 8006c4e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c52:	18d5      	adds	r5, r2, r3
 8006c54:	5cd0      	ldrb	r0, [r2, r3]
 8006c56:	f7ff ff97 	bl	8006b88 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006c5a:	78a9      	ldrb	r1, [r5, #2]
 8006c5c:	7868      	ldrb	r0, [r5, #1]
 8006c5e:	f005 fde6 	bl	800c82e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006c62:	3401      	adds	r4, #1
 8006c64:	b2e4      	uxtb	r4, r4
 8006c66:	2c0f      	cmp	r4, #15
 8006c68:	d9f0      	bls.n	8006c4c <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f7ff ff8c 	bl	8006b88 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8006c70:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <SX1276Init+0x84>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000b7c 	.word	0x20000b7c
 8006c80:	08007295 	.word	0x08007295
 8006c84:	20000df4 	.word	0x20000df4
 8006c88:	20000b98 	.word	0x20000b98
 8006c8c:	20000b80 	.word	0x20000b80
 8006c90:	20000090 	.word	0x20000090
 8006c94:	0800ed1c 	.word	0x0800ed1c
 8006c98:	20000cb0 	.word	0x20000cb0

08006c9c <SX1276SetRxConfig>:
{
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b085      	sub	sp, #20
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	9101      	str	r1, [sp, #4]
 8006ca6:	4615      	mov	r5, r2
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8006cae:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8006cb2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8006cb6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8006cba:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8006cbe:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8006cc2:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8006cc6:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8006cc8:	f7ff ff5e 	bl	8006b88 <SX1276SetModem>
    switch( modem )
 8006ccc:	b124      	cbz	r4, 8006cd8 <SX1276SetRxConfig+0x3c>
 8006cce:	2c01      	cmp	r4, #1
 8006cd0:	d069      	beq.n	8006da6 <SX1276SetRxConfig+0x10a>
}
 8006cd2:	b005      	add	sp, #20
 8006cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006cd8:	4ba0      	ldr	r3, [pc, #640]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006cda:	9c01      	ldr	r4, [sp, #4]
 8006cdc:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8006ce0:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8006ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ce6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006cea:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006cee:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006cf2:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006cf6:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006cfa:	9a02      	ldr	r2, [sp, #8]
 8006cfc:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006d00:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006d04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006d08:	fb02 fa0a 	mul.w	sl, r2, sl
 8006d0c:	fbba f2f5 	udiv	r2, sl, r5
 8006d10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006d14:	4b92      	ldr	r3, [pc, #584]	; (8006f60 <SX1276SetRxConfig+0x2c4>)
 8006d16:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006d1a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8006d1e:	2002      	movs	r0, #2
 8006d20:	f005 fd85 	bl	800c82e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006d24:	b2e9      	uxtb	r1, r5
 8006d26:	2003      	movs	r0, #3
 8006d28:	f005 fd81 	bl	800c82e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff f91f 	bl	8005f70 <GetFskBandwidthRegValue>
 8006d32:	4601      	mov	r1, r0
 8006d34:	2012      	movs	r0, #18
 8006d36:	f005 fd7a 	bl	800c82e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8006d3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d3c:	f7ff f918 	bl	8005f70 <GetFskBandwidthRegValue>
 8006d40:	4601      	mov	r1, r0
 8006d42:	2013      	movs	r0, #19
 8006d44:	f005 fd73 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006d48:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8006d4c:	2025      	movs	r0, #37	; 0x25
 8006d4e:	f005 fd6e 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006d52:	fa5f f188 	uxtb.w	r1, r8
 8006d56:	2026      	movs	r0, #38	; 0x26
 8006d58:	f005 fd69 	bl	800c82e <SX1276Write>
            if( fixLen == 1 )
 8006d5c:	b1df      	cbz	r7, 8006d96 <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006d5e:	4649      	mov	r1, r9
 8006d60:	2032      	movs	r0, #50	; 0x32
 8006d62:	f005 fd64 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006d66:	2030      	movs	r0, #48	; 0x30
 8006d68:	f005 fd6d 	bl	800c846 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8006d6c:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006d70:	b1b7      	cbz	r7, 8006da0 <SX1276SetRxConfig+0x104>
 8006d72:	2300      	movs	r3, #0
 8006d74:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006d76:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8006d7a:	b2c9      	uxtb	r1, r1
 8006d7c:	2030      	movs	r0, #48	; 0x30
 8006d7e:	f005 fd56 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006d82:	2031      	movs	r0, #49	; 0x31
 8006d84:	f005 fd5f 	bl	800c846 <SX1276Read>
 8006d88:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006d8c:	b2c9      	uxtb	r1, r1
 8006d8e:	2031      	movs	r0, #49	; 0x31
 8006d90:	f005 fd4d 	bl	800c82e <SX1276Write>
        break;
 8006d94:	e79d      	b.n	8006cd2 <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006d96:	21ff      	movs	r1, #255	; 0xff
 8006d98:	2032      	movs	r0, #50	; 0x32
 8006d9a:	f005 fd48 	bl	800c82e <SX1276Write>
 8006d9e:	e7e2      	b.n	8006d66 <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006da0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006da4:	e7e6      	b.n	8006d74 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d900      	bls.n	8006dae <SX1276SetRxConfig+0x112>
                while( 1 );
 8006dac:	e7fe      	b.n	8006dac <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 8006dae:	9c01      	ldr	r4, [sp, #4]
 8006db0:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006db2:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006db4:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8006db8:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8006dbc:	9a03      	ldr	r2, [sp, #12]
 8006dbe:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006dc2:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006dc6:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8006dca:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006dce:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006dd2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006dd6:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006dda:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8006dde:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006de2:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006de6:	9a02      	ldr	r2, [sp, #8]
 8006de8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8006dec:	2d0c      	cmp	r5, #12
 8006dee:	d803      	bhi.n	8006df8 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8006df0:	2d05      	cmp	r5, #5
 8006df2:	d802      	bhi.n	8006dfa <SX1276SetRxConfig+0x15e>
                datarate = 6;
 8006df4:	2506      	movs	r5, #6
 8006df6:	e000      	b.n	8006dfa <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8006df8:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006dfa:	2c07      	cmp	r4, #7
 8006dfc:	d063      	beq.n	8006ec6 <SX1276SetRxConfig+0x22a>
 8006dfe:	2c08      	cmp	r4, #8
 8006e00:	d06a      	beq.n	8006ed8 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006e02:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006e0a:	201d      	movs	r0, #29
 8006e0c:	f005 fd1b 	bl	800c846 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006e10:	0123      	lsls	r3, r4, #4
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006e1c:	ea43 0107 	orr.w	r1, r3, r7
 8006e20:	201d      	movs	r0, #29
 8006e22:	f005 fd04 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006e26:	201e      	movs	r0, #30
 8006e28:	f005 fd0d 	bl	800c846 <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8006e2c:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006e30:	012a      	lsls	r2, r5, #4
 8006e32:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8006e34:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006e36:	00b3      	lsls	r3, r6, #2
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8006e3c:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006e40:	4319      	orrs	r1, r3
 8006e42:	201e      	movs	r0, #30
 8006e44:	f005 fcf3 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006e48:	2026      	movs	r0, #38	; 0x26
 8006e4a:	f005 fcfc 	bl	800c846 <SX1276Read>
 8006e4e:	b241      	sxtb	r1, r0
 8006e50:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006e54:	4b41      	ldr	r3, [pc, #260]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006e56:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006e5a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006e5e:	b2c9      	uxtb	r1, r1
 8006e60:	2026      	movs	r0, #38	; 0x26
 8006e62:	f005 fce4 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8006e66:	fa5f f18a 	uxtb.w	r1, sl
 8006e6a:	201f      	movs	r0, #31
 8006e6c:	f005 fcdf 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006e70:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8006e74:	2020      	movs	r0, #32
 8006e76:	f005 fcda 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006e7a:	fa5f f188 	uxtb.w	r1, r8
 8006e7e:	2021      	movs	r0, #33	; 0x21
 8006e80:	f005 fcd5 	bl	800c82e <SX1276Write>
            if( fixLen == 1 )
 8006e84:	bb5f      	cbnz	r7, 8006ede <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006e86:	4b35      	ldr	r3, [pc, #212]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006e88:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006e8c:	bb63      	cbnz	r3, 8006ee8 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006e8e:	2c09      	cmp	r4, #9
 8006e90:	d03a      	beq.n	8006f08 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 8006e92:	2c09      	cmp	r4, #9
 8006e94:	d047      	beq.n	8006f26 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006e96:	2103      	movs	r1, #3
 8006e98:	2036      	movs	r0, #54	; 0x36
 8006e9a:	f005 fcc8 	bl	800c82e <SX1276Write>
            if( datarate == 6 )
 8006e9e:	2d06      	cmp	r5, #6
 8006ea0:	d04a      	beq.n	8006f38 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006ea2:	2031      	movs	r0, #49	; 0x31
 8006ea4:	f005 fccf 	bl	800c846 <SX1276Read>
 8006ea8:	b241      	sxtb	r1, r0
 8006eaa:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006eae:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006eb2:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8006eb6:	2031      	movs	r0, #49	; 0x31
 8006eb8:	f005 fcb9 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006ebc:	210a      	movs	r1, #10
 8006ebe:	2037      	movs	r0, #55	; 0x37
 8006ec0:	f005 fcb5 	bl	800c82e <SX1276Write>
}
 8006ec4:	e705      	b.n	8006cd2 <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006ec6:	f1a5 030b 	sub.w	r3, r5, #11
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d897      	bhi.n	8006dfe <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006ece:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8006ed6:	e798      	b.n	8006e0a <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006ed8:	2d0c      	cmp	r5, #12
 8006eda:	d192      	bne.n	8006e02 <SX1276SetRxConfig+0x166>
 8006edc:	e7f7      	b.n	8006ece <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006ede:	4649      	mov	r1, r9
 8006ee0:	2022      	movs	r0, #34	; 0x22
 8006ee2:	f005 fca4 	bl	800c82e <SX1276Write>
 8006ee6:	e7ce      	b.n	8006e86 <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006ee8:	2044      	movs	r0, #68	; 0x44
 8006eea:	f005 fcac 	bl	800c846 <SX1276Read>
 8006eee:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006ef2:	b2c9      	uxtb	r1, r1
 8006ef4:	2044      	movs	r0, #68	; 0x44
 8006ef6:	f005 fc9a 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006efc:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8006f00:	2024      	movs	r0, #36	; 0x24
 8006f02:	f005 fc94 	bl	800c82e <SX1276Write>
 8006f06:	e7c2      	b.n	8006e8e <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006f08:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <SX1276SetRxConfig+0x2c0>)
 8006f0a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006f0e:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <SX1276SetRxConfig+0x2c8>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d9be      	bls.n	8006e92 <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006f14:	2102      	movs	r1, #2
 8006f16:	2036      	movs	r0, #54	; 0x36
 8006f18:	f005 fc89 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006f1c:	2164      	movs	r1, #100	; 0x64
 8006f1e:	203a      	movs	r0, #58	; 0x3a
 8006f20:	f005 fc85 	bl	800c82e <SX1276Write>
 8006f24:	e7bb      	b.n	8006e9e <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006f26:	2102      	movs	r1, #2
 8006f28:	2036      	movs	r0, #54	; 0x36
 8006f2a:	f005 fc80 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006f2e:	217f      	movs	r1, #127	; 0x7f
 8006f30:	203a      	movs	r0, #58	; 0x3a
 8006f32:	f005 fc7c 	bl	800c82e <SX1276Write>
 8006f36:	e7b2      	b.n	8006e9e <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006f38:	2031      	movs	r0, #49	; 0x31
 8006f3a:	f005 fc84 	bl	800c846 <SX1276Read>
 8006f3e:	b241      	sxtb	r1, r0
 8006f40:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006f44:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006f48:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8006f4c:	2031      	movs	r0, #49	; 0x31
 8006f4e:	f005 fc6e 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006f52:	210c      	movs	r1, #12
 8006f54:	2037      	movs	r0, #55	; 0x37
 8006f56:	f005 fc6a 	bl	800c82e <SX1276Write>
 8006f5a:	e6ba      	b.n	8006cd2 <SX1276SetRxConfig+0x36>
 8006f5c:	20000cb0 	.word	0x20000cb0
 8006f60:	01e84800 	.word	0x01e84800
 8006f64:	1f4add40 	.word	0x1f4add40

08006f68 <SX1276SetTxConfig>:
{
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	4604      	mov	r4, r0
 8006f70:	460d      	mov	r5, r1
 8006f72:	9201      	str	r2, [sp, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8006f7a:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8006f7e:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8006f82:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8006f86:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8006f8a:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 8006f8e:	f7ff fdfb 	bl	8006b88 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7fe fe48 	bl	8005c28 <SX1276SetRfTxPower>
    switch( modem )
 8006f98:	b124      	cbz	r4, 8006fa4 <SX1276SetTxConfig+0x3c>
 8006f9a:	2c01      	cmp	r4, #1
 8006f9c:	d057      	beq.n	800704e <SX1276SetTxConfig+0xe6>
}
 8006f9e:	b003      	add	sp, #12
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8006fa4:	4b81      	ldr	r3, [pc, #516]	; (80071ac <SX1276SetTxConfig+0x244>)
 8006fa6:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8006faa:	9801      	ldr	r0, [sp, #4]
 8006fac:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006fb0:	9a00      	ldr	r2, [sp, #0]
 8006fb2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8006fb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006fbc:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006fc0:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006fc4:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006fc8:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006fcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8006fd2:	f7fe ffb9 	bl	8005f48 <SX1276ConvertFreqInHzToPllStep>
 8006fd6:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006fd8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006fdc:	2004      	movs	r0, #4
 8006fde:	f005 fc26 	bl	800c82e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8006fe2:	b2e1      	uxtb	r1, r4
 8006fe4:	2005      	movs	r0, #5
 8006fe6:	f005 fc22 	bl	800c82e <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006fea:	4c71      	ldr	r4, [pc, #452]	; (80071b0 <SX1276SetTxConfig+0x248>)
 8006fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fee:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006ff2:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8006ff6:	2002      	movs	r0, #2
 8006ff8:	f005 fc19 	bl	800c82e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006ffc:	b2e1      	uxtb	r1, r4
 8006ffe:	2003      	movs	r0, #3
 8007000:	f005 fc15 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007004:	0a39      	lsrs	r1, r7, #8
 8007006:	2025      	movs	r0, #37	; 0x25
 8007008:	f005 fc11 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800700c:	b2f9      	uxtb	r1, r7
 800700e:	2026      	movs	r0, #38	; 0x26
 8007010:	f005 fc0d 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8007014:	2030      	movs	r0, #48	; 0x30
 8007016:	f005 fc16 	bl	800c846 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 800701a:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800701e:	f1b8 0f00 	cmp.w	r8, #0
 8007022:	d011      	beq.n	8007048 <SX1276SetTxConfig+0xe0>
 8007024:	2300      	movs	r3, #0
 8007026:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007028:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 800702c:	b2c9      	uxtb	r1, r1
 800702e:	2030      	movs	r0, #48	; 0x30
 8007030:	f005 fbfd 	bl	800c82e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8007034:	2031      	movs	r0, #49	; 0x31
 8007036:	f005 fc06 	bl	800c846 <SX1276Read>
 800703a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800703e:	b2c9      	uxtb	r1, r1
 8007040:	2031      	movs	r0, #49	; 0x31
 8007042:	f005 fbf4 	bl	800c82e <SX1276Write>
        break;
 8007046:	e7aa      	b.n	8006f9e <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007048:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800704c:	e7eb      	b.n	8007026 <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 800704e:	4b57      	ldr	r3, [pc, #348]	; (80071ac <SX1276SetTxConfig+0x244>)
 8007050:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8007054:	9b00      	ldr	r3, [sp, #0]
 8007056:	2b02      	cmp	r3, #2
 8007058:	d900      	bls.n	800705c <SX1276SetTxConfig+0xf4>
                while( 1 );
 800705a:	e7fe      	b.n	800705a <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 800705c:	9c00      	ldr	r4, [sp, #0]
 800705e:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007060:	4b52      	ldr	r3, [pc, #328]	; (80071ac <SX1276SetTxConfig+0x244>)
 8007062:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8007066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007068:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 800706c:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007070:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007074:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8007078:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800707c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8007080:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007084:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007088:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800708c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800708e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 8007092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d804      	bhi.n	80070a2 <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8007098:	2b05      	cmp	r3, #5
 800709a:	d804      	bhi.n	80070a6 <SX1276SetTxConfig+0x13e>
                datarate = 6;
 800709c:	2306      	movs	r3, #6
 800709e:	930c      	str	r3, [sp, #48]	; 0x30
 80070a0:	e001      	b.n	80070a6 <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80070a2:	230c      	movs	r3, #12
 80070a4:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80070a6:	2c07      	cmp	r4, #7
 80070a8:	d051      	beq.n	800714e <SX1276SetTxConfig+0x1e6>
 80070aa:	2c08      	cmp	r4, #8
 80070ac:	d058      	beq.n	8007160 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80070ae:	4b3f      	ldr	r3, [pc, #252]	; (80071ac <SX1276SetTxConfig+0x244>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80070b6:	f1bb 0f00 	cmp.w	fp, #0
 80070ba:	d155      	bne.n	8007168 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80070bc:	201d      	movs	r0, #29
 80070be:	f005 fbc2 	bl	800c846 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80070c2:	0123      	lsls	r3, r4, #4
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 80070ce:	ea43 0108 	orr.w	r1, r3, r8
 80070d2:	201d      	movs	r0, #29
 80070d4:	f005 fbab 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80070d8:	201e      	movs	r0, #30
 80070da:	f005 fbb4 	bl	800c846 <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 80070de:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80070e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80070e8:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80070ea:	00b3      	lsls	r3, r6, #2
 80070ec:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80070ee:	4319      	orrs	r1, r3
 80070f0:	201e      	movs	r0, #30
 80070f2:	f005 fb9c 	bl	800c82e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80070f6:	2026      	movs	r0, #38	; 0x26
 80070f8:	f005 fba5 	bl	800c846 <SX1276Read>
 80070fc:	b241      	sxtb	r1, r0
 80070fe:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007102:	4b2a      	ldr	r3, [pc, #168]	; (80071ac <SX1276SetTxConfig+0x244>)
 8007104:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007108:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800710c:	b2c9      	uxtb	r1, r1
 800710e:	2026      	movs	r0, #38	; 0x26
 8007110:	f005 fb8d 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007114:	0a39      	lsrs	r1, r7, #8
 8007116:	2020      	movs	r0, #32
 8007118:	f005 fb89 	bl	800c82e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800711c:	b2f9      	uxtb	r1, r7
 800711e:	2021      	movs	r0, #33	; 0x21
 8007120:	f005 fb85 	bl	800c82e <SX1276Write>
            if( datarate == 6 )
 8007124:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007126:	2b06      	cmp	r3, #6
 8007128:	d02e      	beq.n	8007188 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800712a:	2031      	movs	r0, #49	; 0x31
 800712c:	f005 fb8b 	bl	800c846 <SX1276Read>
 8007130:	b241      	sxtb	r1, r0
 8007132:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007136:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800713a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 800713e:	2031      	movs	r0, #49	; 0x31
 8007140:	f005 fb75 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007144:	210a      	movs	r1, #10
 8007146:	2037      	movs	r0, #55	; 0x37
 8007148:	f005 fb71 	bl	800c82e <SX1276Write>
}
 800714c:	e727      	b.n	8006f9e <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800714e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007150:	3b0b      	subs	r3, #11
 8007152:	2b01      	cmp	r3, #1
 8007154:	d8a9      	bhi.n	80070aa <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <SX1276SetTxConfig+0x244>)
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800715e:	e7aa      	b.n	80070b6 <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007162:	2b0c      	cmp	r3, #12
 8007164:	d1a3      	bne.n	80070ae <SX1276SetTxConfig+0x146>
 8007166:	e7f6      	b.n	8007156 <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007168:	2044      	movs	r0, #68	; 0x44
 800716a:	f005 fb6c 	bl	800c846 <SX1276Read>
 800716e:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8007172:	b2c9      	uxtb	r1, r1
 8007174:	2044      	movs	r0, #68	; 0x44
 8007176:	f005 fb5a 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <SX1276SetTxConfig+0x244>)
 800717c:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8007180:	2024      	movs	r0, #36	; 0x24
 8007182:	f005 fb54 	bl	800c82e <SX1276Write>
 8007186:	e799      	b.n	80070bc <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007188:	2031      	movs	r0, #49	; 0x31
 800718a:	f005 fb5c 	bl	800c846 <SX1276Read>
 800718e:	b241      	sxtb	r1, r0
 8007190:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007194:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007198:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 800719c:	2031      	movs	r0, #49	; 0x31
 800719e:	f005 fb46 	bl	800c82e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80071a2:	210c      	movs	r1, #12
 80071a4:	2037      	movs	r0, #55	; 0x37
 80071a6:	f005 fb42 	bl	800c82e <SX1276Write>
 80071aa:	e6f8      	b.n	8006f9e <SX1276SetTxConfig+0x36>
 80071ac:	20000cb0 	.word	0x20000cb0
 80071b0:	01e84800 	.word	0x01e84800

080071b4 <SX1276SetTxContinuousWave>:
{
 80071b4:	b530      	push	{r4, r5, lr}
 80071b6:	b08b      	sub	sp, #44	; 0x2c
 80071b8:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80071ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80071be:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 80071c2:	f7fe ff27 	bl	8006014 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80071c6:	9408      	str	r4, [sp, #32]
 80071c8:	2000      	movs	r0, #0
 80071ca:	9007      	str	r0, [sp, #28]
 80071cc:	9006      	str	r0, [sp, #24]
 80071ce:	9005      	str	r0, [sp, #20]
 80071d0:	9004      	str	r0, [sp, #16]
 80071d2:	9003      	str	r0, [sp, #12]
 80071d4:	2305      	movs	r3, #5
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	9001      	str	r0, [sp, #4]
 80071da:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	4603      	mov	r3, r0
 80071e2:	4602      	mov	r2, r0
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7ff febf 	bl	8006f68 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80071ea:	2031      	movs	r0, #49	; 0x31
 80071ec:	f005 fb2b 	bl	800c846 <SX1276Read>
 80071f0:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 80071f4:	2031      	movs	r0, #49	; 0x31
 80071f6:	f005 fb1a 	bl	800c82e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80071fa:	21f0      	movs	r1, #240	; 0xf0
 80071fc:	2040      	movs	r0, #64	; 0x40
 80071fe:	f005 fb16 	bl	800c82e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8007202:	21a0      	movs	r1, #160	; 0xa0
 8007204:	2041      	movs	r0, #65	; 0x41
 8007206:	f005 fb12 	bl	800c82e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800720a:	4d08      	ldr	r5, [pc, #32]	; (800722c <SX1276SetTxContinuousWave+0x78>)
 800720c:	4621      	mov	r1, r4
 800720e:	4628      	mov	r0, r5
 8007210:	f005 fa35 	bl	800c67e <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <SX1276SetTxContinuousWave+0x7c>)
 8007216:	2202      	movs	r2, #2
 8007218:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 800721c:	4628      	mov	r0, r5
 800721e:	f7fe fdd9 	bl	8005dd4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007222:	2003      	movs	r0, #3
 8007224:	f005 fb1b 	bl	800c85e <SX1276SetOpMode>
}
 8007228:	b00b      	add	sp, #44	; 0x2c
 800722a:	bd30      	pop	{r4, r5, pc}
 800722c:	20000df4 	.word	0x20000df4
 8007230:	20000cb0 	.word	0x20000cb0

08007234 <SX1276SetMaxPayloadLength>:
{
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4604      	mov	r4, r0
 8007238:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 800723a:	f7ff fca5 	bl	8006b88 <SX1276SetModem>
    switch( modem )
 800723e:	b114      	cbz	r4, 8007246 <SX1276SetMaxPayloadLength+0x12>
 8007240:	2c01      	cmp	r4, #1
 8007242:	d00a      	beq.n	800725a <SX1276SetMaxPayloadLength+0x26>
}
 8007244:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <SX1276SetMaxPayloadLength+0x30>)
 8007248:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f9      	bne.n	8007244 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8007250:	4629      	mov	r1, r5
 8007252:	2032      	movs	r0, #50	; 0x32
 8007254:	f005 faeb 	bl	800c82e <SX1276Write>
 8007258:	e7f4      	b.n	8007244 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800725a:	4629      	mov	r1, r5
 800725c:	2023      	movs	r0, #35	; 0x23
 800725e:	f005 fae6 	bl	800c82e <SX1276Write>
}
 8007262:	e7ef      	b.n	8007244 <SX1276SetMaxPayloadLength+0x10>
 8007264:	20000cb0 	.word	0x20000cb0

08007268 <SX1276SetPublicNetwork>:
{
 8007268:	b510      	push	{r4, lr}
 800726a:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 800726c:	2001      	movs	r0, #1
 800726e:	f7ff fc8b 	bl	8006b88 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8007272:	4b07      	ldr	r3, [pc, #28]	; (8007290 <SX1276SetPublicNetwork+0x28>)
 8007274:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8007278:	b124      	cbz	r4, 8007284 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800727a:	2134      	movs	r1, #52	; 0x34
 800727c:	2039      	movs	r0, #57	; 0x39
 800727e:	f005 fad6 	bl	800c82e <SX1276Write>
}
 8007282:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8007284:	2112      	movs	r1, #18
 8007286:	2039      	movs	r0, #57	; 0x39
 8007288:	f005 fad1 	bl	800c82e <SX1276Write>
}
 800728c:	e7f9      	b.n	8007282 <SX1276SetPublicNetwork+0x1a>
 800728e:	bf00      	nop
 8007290:	20000cb0 	.word	0x20000cb0

08007294 <SX1276OnTimeoutIrq>:
{
 8007294:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8007296:	4b33      	ldr	r3, [pc, #204]	; (8007364 <SX1276OnTimeoutIrq+0xd0>)
 8007298:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800729c:	2b01      	cmp	r3, #1
 800729e:	d002      	beq.n	80072a6 <SX1276OnTimeoutIrq+0x12>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d033      	beq.n	800730c <SX1276OnTimeoutIrq+0x78>
}
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80072a6:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <SX1276OnTimeoutIrq+0xd0>)
 80072a8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80072ac:	b143      	cbz	r3, 80072c0 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80072ae:	4b2e      	ldr	r3, [pc, #184]	; (8007368 <SX1276OnTimeoutIrq+0xd4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f6      	beq.n	80072a4 <SX1276OnTimeoutIrq+0x10>
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f3      	beq.n	80072a4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 80072bc:	4798      	blx	r3
 80072be:	e7f1      	b.n	80072a4 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80072c0:	4c28      	ldr	r4, [pc, #160]	; (8007364 <SX1276OnTimeoutIrq+0xd0>)
 80072c2:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80072c6:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80072ca:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 80072ce:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80072d2:	210b      	movs	r1, #11
 80072d4:	203e      	movs	r0, #62	; 0x3e
 80072d6:	f005 faaa 	bl	800c82e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80072da:	2110      	movs	r1, #16
 80072dc:	203f      	movs	r0, #63	; 0x3f
 80072de:	f005 faa6 	bl	800c82e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80072e2:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 80072e6:	b14b      	cbz	r3, 80072fc <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80072e8:	200d      	movs	r0, #13
 80072ea:	f005 faac 	bl	800c846 <SX1276Read>
 80072ee:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80072f2:	b2c9      	uxtb	r1, r1
 80072f4:	200d      	movs	r0, #13
 80072f6:	f005 fa9a 	bl	800c82e <SX1276Write>
 80072fa:	e7d8      	b.n	80072ae <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 80072fc:	4b19      	ldr	r3, [pc, #100]	; (8007364 <SX1276OnTimeoutIrq+0xd0>)
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8007304:	4819      	ldr	r0, [pc, #100]	; (800736c <SX1276OnTimeoutIrq+0xd8>)
 8007306:	f7fe fddf 	bl	8005ec8 <TimerStop>
 800730a:	e7d0      	b.n	80072ae <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 800730c:	f7fe fa76 	bl	80057fc <SX1276Reset>
        RxChainCalibration( );
 8007310:	f7ff f960 	bl	80065d4 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007314:	2000      	movs	r0, #0
 8007316:	f005 faa2 	bl	800c85e <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800731a:	2400      	movs	r4, #0
 800731c:	e00c      	b.n	8007338 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800731e:	4a14      	ldr	r2, [pc, #80]	; (8007370 <SX1276OnTimeoutIrq+0xdc>)
 8007320:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007324:	18d5      	adds	r5, r2, r3
 8007326:	5cd0      	ldrb	r0, [r2, r3]
 8007328:	f7ff fc2e 	bl	8006b88 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800732c:	78a9      	ldrb	r1, [r5, #2]
 800732e:	7868      	ldrb	r0, [r5, #1]
 8007330:	f005 fa7d 	bl	800c82e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007334:	3401      	adds	r4, #1
 8007336:	b2e4      	uxtb	r4, r4
 8007338:	2c0f      	cmp	r4, #15
 800733a:	d9f0      	bls.n	800731e <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 800733c:	2000      	movs	r0, #0
 800733e:	f7ff fc23 	bl	8006b88 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8007342:	4c08      	ldr	r4, [pc, #32]	; (8007364 <SX1276OnTimeoutIrq+0xd0>)
 8007344:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8007348:	f7ff ff8e 	bl	8007268 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800734c:	2300      	movs	r3, #0
 800734e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <SX1276OnTimeoutIrq+0xd4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0a4      	beq.n	80072a4 <SX1276OnTimeoutIrq+0x10>
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0a1      	beq.n	80072a4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8007360:	4798      	blx	r3
}
 8007362:	e79f      	b.n	80072a4 <SX1276OnTimeoutIrq+0x10>
 8007364:	20000cb0 	.word	0x20000cb0
 8007368:	20000b7c 	.word	0x20000b7c
 800736c:	20000b80 	.word	0x20000b80
 8007370:	0800ed1c 	.word	0x0800ed1c

08007374 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 800737c:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800737e:	6843      	ldr	r3, [r0, #4]
 8007380:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8007382:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8007384:	2a01      	cmp	r2, #1
 8007386:	f000 8091 	beq.w	80074ac <uart_stm32_configure+0x138>
 800738a:	2a02      	cmp	r2, #2
 800738c:	f040 8091 	bne.w	80074b2 <uart_stm32_configure+0x13e>
		return LL_USART_PARITY_EVEN;
 8007390:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8007394:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8007396:	2b01      	cmp	r3, #1
 8007398:	f000 8091 	beq.w	80074be <uart_stm32_configure+0x14a>
 800739c:	2b02      	cmp	r3, #2
 800739e:	f000 8090 	beq.w	80074c2 <uart_stm32_configure+0x14e>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8088 	beq.w	80074b8 <uart_stm32_configure+0x144>
		return LL_USART_STOPBITS_2;
 80073a8:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80073ac:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 80073ae:	2904      	cmp	r1, #4
 80073b0:	f000 808a 	beq.w	80074c8 <uart_stm32_configure+0x154>
		if (p == UART_CFG_PARITY_NONE) {
 80073b4:	2a00      	cmp	r2, #0
 80073b6:	f040 808a 	bne.w	80074ce <uart_stm32_configure+0x15a>
			return LL_USART_DATAWIDTH_8B;
 80073ba:	f04f 0800 	mov.w	r8, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80073be:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 80073c2:	f1ba 0f01 	cmp.w	sl, #1
 80073c6:	f000 8085 	beq.w	80074d4 <uart_stm32_configure+0x160>
	return LL_USART_HWCONTROL_NONE;
 80073ca:	f04f 0e00 	mov.w	lr, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 80073ce:	f1a2 0903 	sub.w	r9, r2, #3
 80073d2:	fa5f f989 	uxtb.w	r9, r9
 80073d6:	f1b9 0f01 	cmp.w	r9, #1
 80073da:	f240 80d3 	bls.w	8007584 <uart_stm32_configure+0x210>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 80073de:	b112      	cbz	r2, 80073e6 <uart_stm32_configure+0x72>
 80073e0:	2904      	cmp	r1, #4
 80073e2:	f000 80d2 	beq.w	800758a <uart_stm32_configure+0x216>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80d2 	beq.w	8007590 <uart_stm32_configure+0x21c>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	f000 80d2 	beq.w	8007596 <uart_stm32_configure+0x222>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 80073f2:	2902      	cmp	r1, #2
 80073f4:	f240 80d2 	bls.w	800759c <uart_stm32_configure+0x228>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 80073f8:	2904      	cmp	r1, #4
 80073fa:	f000 80d2 	beq.w	80075a2 <uart_stm32_configure+0x22e>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 80073fe:	f1ba 0f00 	cmp.w	sl, #0
 8007402:	d00f      	beq.n	8007424 <uart_stm32_configure+0xb0>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8007404:	4b6b      	ldr	r3, [pc, #428]	; (80075b4 <uart_stm32_configure+0x240>)
 8007406:	429d      	cmp	r5, r3
 8007408:	d008      	beq.n	800741c <uart_stm32_configure+0xa8>
 800740a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800740e:	429d      	cmp	r5, r3
 8007410:	d004      	beq.n	800741c <uart_stm32_configure+0xa8>
 8007412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007416:	429d      	cmp	r5, r3
 8007418:	f040 80c6 	bne.w	80075a8 <uart_stm32_configure+0x234>
 800741c:	f1ba 0f01 	cmp.w	sl, #1
 8007420:	f040 80c5 	bne.w	80075ae <uart_stm32_configure+0x23a>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007424:	68eb      	ldr	r3, [r5, #12]
 8007426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800742a:	60eb      	str	r3, [r5, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800742c:	6843      	ldr	r3, [r0, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007430:	68d3      	ldr	r3, [r2, #12]
 8007432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8007436:	459c      	cmp	ip, r3
 8007438:	d005      	beq.n	8007446 <uart_stm32_configure+0xd2>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800743a:	68d3      	ldr	r3, [r2, #12]
 800743c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007440:	ea4c 0303 	orr.w	r3, ip, r3
 8007444:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007446:	6843      	ldr	r3, [r0, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800744a:	6913      	ldr	r3, [r2, #16]
 800744c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8007450:	429f      	cmp	r7, r3
 8007452:	d004      	beq.n	800745e <uart_stm32_configure+0xea>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007454:	6913      	ldr	r3, [r2, #16]
 8007456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800745a:	431f      	orrs	r7, r3
 800745c:	6117      	str	r7, [r2, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800745e:	6843      	ldr	r3, [r0, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8007462:	68d3      	ldr	r3, [r2, #12]
 8007464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 8007468:	4598      	cmp	r8, r3
 800746a:	d005      	beq.n	8007478 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800746c:	68d3      	ldr	r3, [r2, #12]
 800746e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007472:	ea48 0303 	orr.w	r3, r8, r3
 8007476:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007478:	6843      	ldr	r3, [r0, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800747c:	6953      	ldr	r3, [r2, #20]
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8007482:	459e      	cmp	lr, r3
 8007484:	d005      	beq.n	8007492 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007486:	6953      	ldr	r3, [r2, #20]
 8007488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748c:	ea4e 0303 	orr.w	r3, lr, r3
 8007490:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8007492:	f8d4 8000 	ldr.w	r8, [r4]
 8007496:	6833      	ldr	r3, [r6, #0]
 8007498:	4598      	cmp	r8, r3
 800749a:	d11e      	bne.n	80074da <uart_stm32_configure+0x166>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800749c:	68eb      	ldr	r3, [r5, #12]
 800749e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074a2:	60eb      	str	r3, [r5, #12]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80074a4:	2000      	movs	r0, #0
};
 80074a6:	b002      	add	sp, #8
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 80074ac:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 80074b0:	e770      	b.n	8007394 <uart_stm32_configure+0x20>
		return LL_USART_PARITY_NONE;
 80074b2:	f04f 0c00 	mov.w	ip, #0
 80074b6:	e76d      	b.n	8007394 <uart_stm32_configure+0x20>
	switch (sb) {
 80074b8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80074bc:	e776      	b.n	80073ac <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1;
 80074be:	2700      	movs	r7, #0
 80074c0:	e774      	b.n	80073ac <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1_5;
 80074c2:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 80074c6:	e771      	b.n	80073ac <uart_stm32_configure+0x38>
		return LL_USART_DATAWIDTH_9B;
 80074c8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80074cc:	e777      	b.n	80073be <uart_stm32_configure+0x4a>
			return LL_USART_DATAWIDTH_9B;
 80074ce:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 80074d2:	e774      	b.n	80073be <uart_stm32_configure+0x4a>
		return LL_USART_HWCONTROL_RTS_CTS;
 80074d4:	f44f 7e40 	mov.w	lr, #768	; 0x300
 80074d8:	e779      	b.n	80073ce <uart_stm32_configure+0x5a>
	struct uart_stm32_data *data = DEV_DATA(dev);
 80074da:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80074dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80074e0:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 80074e4:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80074e8:	4650      	mov	r0, sl
 80074ea:	f005 fad8 	bl	800ca9e <z_device_ready>
 80074ee:	b390      	cbz	r0, 8007556 <uart_stm32_configure+0x1e2>
	const struct clock_control_driver_api *api =
 80074f0:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	b38b      	cbz	r3, 800755c <uart_stm32_configure+0x1e8>
	return api->get_rate(dev, sys, rate);
 80074f8:	aa01      	add	r2, sp, #4
 80074fa:	4649      	mov	r1, r9
 80074fc:	4650      	mov	r0, sl
 80074fe:	4798      	blx	r3
 8007500:	2800      	cmp	r0, #0
 8007502:	db2e      	blt.n	8007562 <uart_stm32_configure+0x1ee>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800750a:	60fb      	str	r3, [r7, #12]
		LL_USART_SetBaudRate(UartInstance,
 800750c:	9a01      	ldr	r2, [sp, #4]
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800750e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007512:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007516:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800751a:	fbb2 f2f8 	udiv	r2, r2, r8
 800751e:	4826      	ldr	r0, [pc, #152]	; (80075b8 <uart_stm32_configure+0x244>)
 8007520:	fba0 1302 	umull	r1, r3, r0, r2
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	0119      	lsls	r1, r3, #4
 8007528:	b289      	uxth	r1, r1
 800752a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800752e:	fb0c 2313 	mls	r3, ip, r3, r2
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	fba0 2303 	umull	r2, r3, r0, r3
 800753a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800753e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007542:	440a      	add	r2, r1
 8007544:	b292      	uxth	r2, r2
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	4413      	add	r3, r2
 800754c:	b29b      	uxth	r3, r3
 800754e:	60bb      	str	r3, [r7, #8]
		data->baud_rate = cfg->baudrate;
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	e7a2      	b.n	800749c <uart_stm32_configure+0x128>
 8007556:	f06f 0012 	mvn.w	r0, #18
 800755a:	e7d1      	b.n	8007500 <uart_stm32_configure+0x18c>
		return -ENOSYS;
 800755c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007560:	e7ce      	b.n	8007500 <uart_stm32_configure+0x18c>
 8007562:	4b16      	ldr	r3, [pc, #88]	; (80075bc <uart_stm32_configure+0x248>)
 8007564:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <uart_stm32_configure+0x24c>)
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800756a:	f04f 0100 	mov.w	r1, #0
 800756e:	2201      	movs	r2, #1
 8007570:	f362 0102 	bfi	r1, r2, #0, #3
 8007574:	f36f 01c5 	bfc	r1, #3, #3
 8007578:	f363 118f 	bfi	r1, r3, #6, #10
 800757c:	4811      	ldr	r0, [pc, #68]	; (80075c4 <uart_stm32_configure+0x250>)
 800757e:	f7fb ff43 	bl	8003408 <log_0>
		return;
 8007582:	e7e5      	b.n	8007550 <uart_stm32_configure+0x1dc>
		return -ENOTSUP;
 8007584:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007588:	e78d      	b.n	80074a6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 800758a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800758e:	e78a      	b.n	80074a6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 8007590:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007594:	e787      	b.n	80074a6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 8007596:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800759a:	e784      	b.n	80074a6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 800759c:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80075a0:	e781      	b.n	80074a6 <uart_stm32_configure+0x132>
 80075a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80075a6:	e77e      	b.n	80074a6 <uart_stm32_configure+0x132>
			return -ENOTSUP;
 80075a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80075ac:	e77b      	b.n	80074a6 <uart_stm32_configure+0x132>
 80075ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80075b2:	e778      	b.n	80074a6 <uart_stm32_configure+0x132>
 80075b4:	40013800 	.word	0x40013800
 80075b8:	51eb851f 	.word	0x51eb851f
 80075bc:	0800dd70 	.word	0x0800dd70
 80075c0:	0800dd28 	.word	0x0800dd28
 80075c4:	0800e8f8 	.word	0x0800e8f8

080075c8 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80075c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075cc:	b083      	sub	sp, #12
 80075ce:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80075d0:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80075d2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80075d6:	463d      	mov	r5, r7
 80075d8:	f855 4b08 	ldr.w	r4, [r5], #8
	data->clock = clk;
 80075dc:	485d      	ldr	r0, [pc, #372]	; (8007754 <uart_stm32_init+0x18c>)
 80075de:	f8c8 0004 	str.w	r0, [r8, #4]
 80075e2:	f005 fa5c 	bl	800ca9e <z_device_ready>
 80075e6:	b310      	cbz	r0, 800762e <uart_stm32_init+0x66>
	const struct clock_control_driver_api *api =
 80075e8:	485a      	ldr	r0, [pc, #360]	; (8007754 <uart_stm32_init+0x18c>)
 80075ea:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4629      	mov	r1, r5
 80075f0:	4798      	blx	r3
 80075f2:	4605      	mov	r5, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	f040 80a7 	bne.w	8007748 <uart_stm32_init+0x180>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 80075fa:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	69f9      	ldr	r1, [r7, #28]
 8007600:	69b8      	ldr	r0, [r7, #24]
 8007602:	f004 fa5b 	bl	800babc <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8007606:	2800      	cmp	r0, #0
 8007608:	f2c0 80a1 	blt.w	800774e <uart_stm32_init+0x186>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800760c:	68e3      	ldr	r3, [r4, #12]
 800760e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007612:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007614:	68e3      	ldr	r3, [r4, #12]
 8007616:	f043 030c 	orr.w	r3, r3, #12
 800761a:	60e3      	str	r3, [r4, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	2902      	cmp	r1, #2
 8007620:	d01b      	beq.n	800765a <uart_stm32_init+0x92>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8007622:	2901      	cmp	r1, #1
 8007624:	d074      	beq.n	8007710 <uart_stm32_init+0x148>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8007626:	b929      	cbnz	r1, 8007634 <uart_stm32_init+0x6c>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007628:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800762a:	4619      	mov	r1, r3
 800762c:	e019      	b.n	8007662 <uart_stm32_init+0x9a>
 800762e:	f06f 0512 	mvn.w	r5, #18
 8007632:	e7df      	b.n	80075f4 <uart_stm32_init+0x2c>
 8007634:	4b48      	ldr	r3, [pc, #288]	; (8007758 <uart_stm32_init+0x190>)
 8007636:	4a49      	ldr	r2, [pc, #292]	; (800775c <uart_stm32_init+0x194>)
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Invalid parity setting '%d'."
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	2002      	movs	r0, #2
 8007642:	f360 0202 	bfi	r2, r0, #0, #3
 8007646:	f36f 02c5 	bfc	r2, #3, #3
 800764a:	f363 128f 	bfi	r2, r3, #6, #10
 800764e:	4844      	ldr	r0, [pc, #272]	; (8007760 <uart_stm32_init+0x198>)
 8007650:	f7fb ff04 	bl	800345c <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007654:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8007656:	4619      	mov	r1, r3
 8007658:	e003      	b.n	8007662 <uart_stm32_init+0x9a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800765a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800765e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8007662:	68e2      	ldr	r2, [r4, #12]
 8007664:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8007668:	430b      	orrs	r3, r1
 800766a:	4313      	orrs	r3, r2
 800766c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007674:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8007676:	7c3b      	ldrb	r3, [r7, #16]
 8007678:	b12b      	cbz	r3, 8007686 <uart_stm32_init+0xbe>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800767a:	6873      	ldr	r3, [r6, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800767e:	6953      	ldr	r3, [r2, #20]
 8007680:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007684:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8007686:	f8d8 7000 	ldr.w	r7, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 800768a:	6933      	ldr	r3, [r6, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800768c:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8007690:	f858 6b08 	ldr.w	r6, [r8], #8
	if (clock_control_get_rate(data->clock,
 8007694:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007698:	4648      	mov	r0, r9
 800769a:	f005 fa00 	bl	800ca9e <z_device_ready>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d03b      	beq.n	800771a <uart_stm32_init+0x152>
	const struct clock_control_driver_api *api =
 80076a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d039      	beq.n	8007720 <uart_stm32_init+0x158>
	return api->get_rate(dev, sys, rate);
 80076ac:	aa01      	add	r2, sp, #4
 80076ae:	4641      	mov	r1, r8
 80076b0:	4648      	mov	r0, r9
 80076b2:	4798      	blx	r3
 80076b4:	2800      	cmp	r0, #0
 80076b6:	db36      	blt.n	8007726 <uart_stm32_init+0x15e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80076b8:	68f3      	ldr	r3, [r6, #12]
 80076ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076be:	60f3      	str	r3, [r6, #12]
		LL_USART_SetBaudRate(UartInstance,
 80076c0:	9a01      	ldr	r2, [sp, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80076c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80076c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80076ca:	00bf      	lsls	r7, r7, #2
 80076cc:	fbb2 f2f7 	udiv	r2, r2, r7
 80076d0:	4824      	ldr	r0, [pc, #144]	; (8007764 <uart_stm32_init+0x19c>)
 80076d2:	fba0 1302 	umull	r1, r3, r0, r2
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	0119      	lsls	r1, r3, #4
 80076da:	b289      	uxth	r1, r1
 80076dc:	2764      	movs	r7, #100	; 0x64
 80076de:	fb07 2313 	mls	r3, r7, r3, r2
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	3332      	adds	r3, #50	; 0x32
 80076e6:	fba0 2303 	umull	r2, r3, r0, r3
 80076ea:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80076ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076f2:	440a      	add	r2, r1
 80076f4:	b292      	uxth	r2, r2
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	4413      	add	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007700:	68e3      	ldr	r3, [r4, #12]
 8007702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007706:	60e3      	str	r3, [r4, #12]
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8007708:	4628      	mov	r0, r5
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8007714:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007718:	e7a3      	b.n	8007662 <uart_stm32_init+0x9a>
 800771a:	f06f 0012 	mvn.w	r0, #18
 800771e:	e7c9      	b.n	80076b4 <uart_stm32_init+0xec>
		return -ENOSYS;
 8007720:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007724:	e7c6      	b.n	80076b4 <uart_stm32_init+0xec>
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <uart_stm32_init+0x190>)
 8007728:	4a0c      	ldr	r2, [pc, #48]	; (800775c <uart_stm32_init+0x194>)
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800772e:	f04f 0100 	mov.w	r1, #0
 8007732:	2201      	movs	r2, #1
 8007734:	f362 0102 	bfi	r1, r2, #0, #3
 8007738:	f36f 01c5 	bfc	r1, #3, #3
 800773c:	f363 118f 	bfi	r1, r3, #6, #10
 8007740:	4809      	ldr	r0, [pc, #36]	; (8007768 <uart_stm32_init+0x1a0>)
 8007742:	f7fb fe61 	bl	8003408 <log_0>
		return;
 8007746:	e7db      	b.n	8007700 <uart_stm32_init+0x138>
		return -EIO;
 8007748:	f06f 0504 	mvn.w	r5, #4
 800774c:	e7dc      	b.n	8007708 <uart_stm32_init+0x140>
		return err;
 800774e:	4605      	mov	r5, r0
 8007750:	e7da      	b.n	8007708 <uart_stm32_init+0x140>
 8007752:	bf00      	nop
 8007754:	0800da38 	.word	0x0800da38
 8007758:	0800dd70 	.word	0x0800dd70
 800775c:	0800dd28 	.word	0x0800dd28
 8007760:	0800ed4c 	.word	0x0800ed4c
 8007764:	51eb851f 	.word	0x51eb851f
 8007768:	0800e8f8 	.word	0x0800e8f8

0800776c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 800776c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007770:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007772:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8007774:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007776:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800777a:	d101      	bne.n	8007780 <elapsed+0x14>
	    || (val1 < val2)) {
 800777c:	4281      	cmp	r1, r0
 800777e:	d208      	bcs.n	8007792 <elapsed+0x26>
		overflow_cyc += last_load;
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <elapsed+0x34>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4907      	ldr	r1, [pc, #28]	; (80077a4 <elapsed+0x38>)
 8007786:	6809      	ldr	r1, [r1, #0]
 8007788:	440a      	add	r2, r1
 800778a:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 800778c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007790:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8007792:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <elapsed+0x38>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	1a1b      	subs	r3, r3, r0
 8007798:	4a01      	ldr	r2, [pc, #4]	; (80077a0 <elapsed+0x34>)
 800779a:	6810      	ldr	r0, [r2, #0]
}
 800779c:	4418      	add	r0, r3
 800779e:	4770      	bx	lr
 80077a0:	20000e18 	.word	0x20000e18
 80077a4:	20000e14 	.word	0x20000e14

080077a8 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 80077a8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80077aa:	f7ff ffdf 	bl	800776c <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <sys_clock_isr+0x38>)
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	4a0c      	ldr	r2, [pc, #48]	; (80077e4 <sys_clock_isr+0x3c>)
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	4408      	add	r0, r1
 80077b8:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80077be:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <sys_clock_isr+0x40>)
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	1ac0      	subs	r0, r0, r3
 80077c4:	4909      	ldr	r1, [pc, #36]	; (80077ec <sys_clock_isr+0x44>)
 80077c6:	fba1 1000 	umull	r1, r0, r1, r0
 80077ca:	0a80      	lsrs	r0, r0, #10
		announced_cycles += dticks * CYC_PER_TICK;
 80077cc:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80077d0:	fb01 3300 	mla	r3, r1, r0, r3
 80077d4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80077d6:	f001 fcb5 	bl	8009144 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 80077da:	f7fc fb53 	bl	8003e84 <z_arm_exc_exit>
}
 80077de:	bd08      	pop	{r3, pc}
 80077e0:	20000e18 	.word	0x20000e18
 80077e4:	20000e10 	.word	0x20000e10
 80077e8:	20000e0c 	.word	0x20000e0c
 80077ec:	51eb851f 	.word	0x51eb851f

080077f0 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <sys_clock_driver_init+0x28>)
 80077f2:	2210      	movs	r2, #16
 80077f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80077f8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80077fc:	4b07      	ldr	r3, [pc, #28]	; (800781c <sys_clock_driver_init+0x2c>)
 80077fe:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8007800:	2000      	movs	r0, #0
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <sys_clock_driver_init+0x30>)
 8007804:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8007806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800780a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800780c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	f042 0207 	orr.w	r2, r2, #7
 8007814:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007816:	4770      	bx	lr
 8007818:	e000ed00 	.word	0xe000ed00
 800781c:	20000e14 	.word	0x20000e14
 8007820:	20000e18 	.word	0x20000e18

08007824 <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8007824:	b111      	cbz	r1, 800782c <sys_clock_set_timeout+0x8>
 8007826:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800782a:	d00f      	beq.n	800784c <sys_clock_set_timeout+0x28>
{
 800782c:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 800782e:	4b37      	ldr	r3, [pc, #220]	; (800790c <sys_clock_set_timeout+0xe8>)
 8007830:	681d      	ldr	r5, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007832:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007836:	d014      	beq.n	8007862 <sys_clock_set_timeout+0x3e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007838:	1e46      	subs	r6, r0, #1
 800783a:	2e00      	cmp	r6, #0
 800783c:	dd14      	ble.n	8007868 <sys_clock_set_timeout+0x44>
 800783e:	f241 4378 	movw	r3, #5240	; 0x1478
 8007842:	429e      	cmp	r6, r3
 8007844:	dd11      	ble.n	800786a <sys_clock_set_timeout+0x46>
 8007846:	f241 4679 	movw	r6, #5241	; 0x1479
 800784a:	e00e      	b.n	800786a <sys_clock_set_timeout+0x46>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800784c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007850:	6913      	ldr	r3, [r2, #16]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <sys_clock_set_timeout+0xe8>)
 800785a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800785e:	601a      	str	r2, [r3, #0]
		return;
 8007860:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007862:	f241 4079 	movw	r0, #5241	; 0x1479
 8007866:	e7e7      	b.n	8007838 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007868:	2600      	movs	r6, #0
	__asm__ volatile(
 800786a:	f04f 0310 	mov.w	r3, #16
 800786e:	f3ef 8411 	mrs	r4, BASEPRI
 8007872:	f383 8812 	msr	BASEPRI_MAX, r3
 8007876:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 800787a:	f7ff ff77 	bl	800776c <elapsed>

	val1 = SysTick->VAL;
 800787e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007882:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 8007884:	4b22      	ldr	r3, [pc, #136]	; (8007910 <sys_clock_set_timeout+0xec>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	4410      	add	r0, r2
 800788a:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <sys_clock_set_timeout+0xf0>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 8007892:	4b21      	ldr	r3, [pc, #132]	; (8007918 <sys_clock_set_timeout+0xf4>)
 8007894:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 8007896:	1ac2      	subs	r2, r0, r3
 8007898:	d415      	bmi.n	80078c6 <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 800789a:	f44f 6c48 	mov.w	ip, #3200	; 0xc80

		/* Round delay up to next tick boundary */
		delay += unannounced;
 800789e:	fb0c 2206 	mla	r2, ip, r6, r2
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80078a2:	f602 427f 	addw	r2, r2, #3199	; 0xc7f
 80078a6:	4e1d      	ldr	r6, [pc, #116]	; (800791c <sys_clock_set_timeout+0xf8>)
 80078a8:	fba6 6202 	umull	r6, r2, r6, r2
 80078ac:	0a92      	lsrs	r2, r2, #10
		delay -= unannounced;
 80078ae:	1a1b      	subs	r3, r3, r0
 80078b0:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 80078b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b8:	d90a      	bls.n	80078d0 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 80078ba:	4a19      	ldr	r2, [pc, #100]	; (8007920 <sys_clock_set_timeout+0xfc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d909      	bls.n	80078d4 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <sys_clock_set_timeout+0xe8>)
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e008      	b.n	80078d8 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 80078c6:	4b11      	ldr	r3, [pc, #68]	; (800790c <sys_clock_set_timeout+0xe8>)
 80078c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e003      	b.n	80078d8 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 80078d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <sys_clock_set_timeout+0xe8>)
 80078d6:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 80078d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80078dc:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 80078de:	4a0b      	ldr	r2, [pc, #44]	; (800790c <sys_clock_set_timeout+0xe8>)
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	3a01      	subs	r2, #1
 80078e4:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 80078e6:	2200      	movs	r2, #0
 80078e8:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 80078ea:	42b1      	cmp	r1, r6
 80078ec:	d209      	bcs.n	8007902 <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 80078ee:	1bad      	subs	r5, r5, r6
 80078f0:	440d      	add	r5, r1
 80078f2:	4428      	add	r0, r5
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <sys_clock_set_timeout+0xec>)
 80078f6:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 80078f8:	f384 8811 	msr	BASEPRI, r4
 80078fc:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8007900:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8007902:	1b8d      	subs	r5, r1, r6
 8007904:	4428      	add	r0, r5
 8007906:	4b02      	ldr	r3, [pc, #8]	; (8007910 <sys_clock_set_timeout+0xec>)
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	e7f5      	b.n	80078f8 <sys_clock_set_timeout+0xd4>
 800790c:	20000e14 	.word	0x20000e14
 8007910:	20000e10 	.word	0x20000e10
 8007914:	20000e18 	.word	0x20000e18
 8007918:	20000e0c 	.word	0x20000e0c
 800791c:	51eb851f 	.word	0x51eb851f
 8007920:	00ffe880 	.word	0x00ffe880

08007924 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8007924:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007926:	f04f 0310 	mov.w	r3, #16
 800792a:	f3ef 8411 	mrs	r4, BASEPRI
 800792e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007932:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007936:	f7ff ff19 	bl	800776c <elapsed>
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <sys_clock_elapsed+0x34>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4418      	add	r0, r3
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <sys_clock_elapsed+0x38>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8007946:	f384 8811 	msr	BASEPRI, r4
 800794a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <sys_clock_elapsed+0x3c>)
 8007950:	fba3 3000 	umull	r3, r0, r3, r0
}
 8007954:	0a80      	lsrs	r0, r0, #10
 8007956:	bd10      	pop	{r4, pc}
 8007958:	20000e10 	.word	0x20000e10
 800795c:	20000e0c 	.word	0x20000e0c
 8007960:	51eb851f 	.word	0x51eb851f

08007964 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8007964:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007966:	f04f 0310 	mov.w	r3, #16
 800796a:	f3ef 8411 	mrs	r4, BASEPRI
 800796e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007972:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8007976:	f7ff fef9 	bl	800776c <elapsed>
 800797a:	4b04      	ldr	r3, [pc, #16]	; (800798c <sys_clock_cycle_get_32+0x28>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4418      	add	r0, r3
	__asm__ volatile(
 8007980:	f384 8811 	msr	BASEPRI, r4
 8007984:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	20000e10 	.word	0x20000e10

08007990 <UTILS_GetPLLOutputFrequency>:
  /* Check different PLL parameters according to RM                          */
  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     96 MHz as PLLVCO when the product is in range 1,
     48 MHz as PLLVCO when the product is in range 2,
     24 MHz when the product is in range 3. */
  pllfreq = PLL_InputFrequency * (PLLMulTable[UTILS_PLLInitStruct->PLLMul >> RCC_CFGR_PLLMUL_Pos]);
 8007990:	680a      	ldr	r2, [r1, #0]
 8007992:	0c92      	lsrs	r2, r2, #18
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <UTILS_GetPLLOutputFrequency+0x18>)
 8007996:	5c9b      	ldrb	r3, [r3, r2]
 8007998:	fb03 f000 	mul.w	r0, r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     maximum frequency 32000000 in range 1 */
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLDiv >> RCC_CFGR_PLLDIV_Pos)+1U);
 800799c:	684b      	ldr	r3, [r1, #4]
 800799e:	0d9b      	lsrs	r3, r3, #22
 80079a0:	3301      	adds	r3, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 80079a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80079a6:	4770      	bx	lr
 80079a8:	0800edf4 	.word	0x0800edf4

080079ac <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <UTILS_PLL_IsBusy+0x14>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80079b4:	d001      	beq.n	80079ba <UTILS_PLL_IsBusy+0xe>

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 80079b6:	2001      	movs	r0, #1
 80079b8:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 80079ba:	2000      	movs	r0, #0
  }

  return status;
}
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40023800 	.word	0x40023800

080079c4 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 80079c4:	4b01      	ldr	r3, [pc, #4]	; (80079cc <LL_SetSystemCoreClock+0x8>)
 80079c6:	6018      	str	r0, [r3, #0]
}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	200000b0 	.word	0x200000b0

080079d0 <LL_SetFlashLatency>:
  if ((Frequency == 0U) || (Frequency > UTILS_MAX_FREQUENCY_SCALE1))
 80079d0:	1e42      	subs	r2, r0, #1
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <LL_SetFlashLatency+0x70>)
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d231      	bcs.n	8007a3c <LL_SetFlashLatency+0x6c>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <LL_SetFlashLatency+0x74>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e4:	d01c      	beq.n	8007a20 <LL_SetFlashLatency+0x50>
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <LL_SetFlashLatency+0x74>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    else if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f2:	d01a      	beq.n	8007a2a <LL_SetFlashLatency+0x5a>
      if (Frequency > UTILS_SCALE3_LATENCY1_FREQ)
 80079f4:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <LL_SetFlashLatency+0x78>)
 80079f6:	4298      	cmp	r0, r3
 80079f8:	d91c      	bls.n	8007a34 <LL_SetFlashLatency+0x64>
  * @rmtoll FLASH_ACR    ACC64         LL_FLASH_Enable64bitAccess
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_Enable64bitAccess(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ACC64);
 80079fa:	4a14      	ldr	r2, [pc, #80]	; (8007a4c <LL_SetFlashLatency+0x7c>)
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	f043 0304 	orr.w	r3, r3, #4
 8007a02:	6013      	str	r3, [r2, #0]
}
 8007a04:	2101      	movs	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007a06:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <LL_SetFlashLatency+0x7c>)
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	430b      	orrs	r3, r1
 8007a10:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	f003 0301 	and.w	r3, r3, #1
    if (LL_FLASH_GetLatency() != latency)
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d00d      	beq.n	8007a38 <LL_SetFlashLatency+0x68>
      status = ERROR;
 8007a1c:	2001      	movs	r0, #1
}
 8007a1e:	4770      	bx	lr
      if (Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <LL_SetFlashLatency+0x80>)
 8007a22:	4298      	cmp	r0, r3
 8007a24:	d8e9      	bhi.n	80079fa <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007a26:	2100      	movs	r1, #0
 8007a28:	e7ed      	b.n	8007a06 <LL_SetFlashLatency+0x36>
      if (Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <LL_SetFlashLatency+0x84>)
 8007a2c:	4298      	cmp	r0, r3
 8007a2e:	d8e4      	bhi.n	80079fa <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007a30:	2100      	movs	r1, #0
 8007a32:	e7e8      	b.n	8007a06 <LL_SetFlashLatency+0x36>
 8007a34:	2100      	movs	r1, #0
 8007a36:	e7e6      	b.n	8007a06 <LL_SetFlashLatency+0x36>
  ErrorStatus status = SUCCESS;
 8007a38:	2000      	movs	r0, #0
 8007a3a:	4770      	bx	lr
    status = ERROR;
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	4770      	bx	lr
 8007a40:	01e84800 	.word	0x01e84800
 8007a44:	40007000 	.word	0x40007000
 8007a48:	001e8480 	.word	0x001e8480
 8007a4c:	40023c00 	.word	0x40023c00
 8007a50:	00f42400 	.word	0x00f42400
 8007a54:	007a1200 	.word	0x007a1200

08007a58 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007a5c:	680b      	ldr	r3, [r1, #0]
 8007a5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007a62:	4a24      	ldr	r2, [pc, #144]	; (8007af4 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8007a64:	5cd3      	ldrb	r3, [r2, r3]
 8007a66:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (SystemCoreClock < hclk_frequency)
 8007a6a:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	42ab      	cmp	r3, r5
 8007a70:	d32f      	bcc.n	8007ad2 <UTILS_EnablePLLAndSwitchSystem+0x7a>
  ErrorStatus status = SUCCESS;
 8007a72:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007a74:	4a21      	ldr	r2, [pc, #132]	; (8007afc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a7c:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8007a7e:	4b1f      	ldr	r3, [pc, #124]	; (8007afc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007a86:	d0fa      	beq.n	8007a7e <UTILS_EnablePLLAndSwitchSystem+0x26>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8007a88:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007a8a:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007a8c:	6899      	ldr	r1, [r3, #8]
 8007a8e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8007a92:	430a      	orrs	r2, r1
 8007a94:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	f042 0203 	orr.w	r2, r2, #3
 8007a9c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007a9e:	4b17      	ldr	r3, [pc, #92]	; (8007afc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007aa6:	2b0c      	cmp	r3, #12
 8007aa8:	d1f9      	bne.n	8007a9e <UTILS_EnablePLLAndSwitchSystem+0x46>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8007aaa:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007aae:	6899      	ldr	r1, [r3, #8]
 8007ab0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8007ab8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007aba:	6899      	ldr	r1, [r3, #8]
 8007abc:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (SystemCoreClock > hclk_frequency)
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	d809      	bhi.n	8007ae0 <UTILS_EnablePLLAndSwitchSystem+0x88>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 8007acc:	b16e      	cbz	r6, 8007aea <UTILS_EnablePLLAndSwitchSystem+0x92>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8007ace:	4630      	mov	r0, r6
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f7ff ff7c 	bl	80079d0 <LL_SetFlashLatency>
  if (status == SUCCESS)
 8007ad8:	4606      	mov	r6, r0
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d1f2      	bne.n	8007ac4 <UTILS_EnablePLLAndSwitchSystem+0x6c>
 8007ade:	e7c9      	b.n	8007a74 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff ff75 	bl	80079d0 <LL_SetFlashLatency>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	e7f0      	b.n	8007acc <UTILS_EnablePLLAndSwitchSystem+0x74>
    LL_SetSystemCoreClock(hclk_frequency);
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff ff6a 	bl	80079c4 <LL_SetSystemCoreClock>
 8007af0:	e7ed      	b.n	8007ace <UTILS_EnablePLLAndSwitchSystem+0x76>
 8007af2:	bf00      	nop
 8007af4:	0800ede4 	.word	0x0800ede4
 8007af8:	200000b0 	.word	0x200000b0
 8007afc:	40023800 	.word	0x40023800

08007b00 <LL_PLL_ConfigSystemClock_HSI>:
{
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4604      	mov	r4, r0
 8007b04:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8007b06:	f7ff ff51 	bl	80079ac <UTILS_PLL_IsBusy>
 8007b0a:	b9f8      	cbnz	r0, 8007b4c <LL_PLL_ConfigSystemClock_HSI+0x4c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4810      	ldr	r0, [pc, #64]	; (8007b50 <LL_PLL_ConfigSystemClock_HSI+0x50>)
 8007b10:	f7ff ff3e 	bl	8007990 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007b14:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f013 0f02 	tst.w	r3, #2
 8007b1c:	d109      	bne.n	8007b32 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007b20:	6813      	ldr	r3, [r2, #0]
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f013 0f02 	tst.w	r3, #2
 8007b30:	d0fa      	beq.n	8007b28 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8007b32:	6822      	ldr	r2, [r4, #0]
 8007b34:	6864      	ldr	r4, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8007b36:	4907      	ldr	r1, [pc, #28]	; (8007b54 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007b38:	688b      	ldr	r3, [r1, #8]
 8007b3a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8007b3e:	4322      	orrs	r2, r4
 8007b40:	4313      	orrs	r3, r2
 8007b42:	608b      	str	r3, [r1, #8]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7ff ff87 	bl	8007a58 <UTILS_EnablePLLAndSwitchSystem>
}
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
    status = ERROR;
 8007b4c:	2001      	movs	r0, #1
 8007b4e:	e7fc      	b.n	8007b4a <LL_PLL_ConfigSystemClock_HSI+0x4a>
 8007b50:	00f42400 	.word	0x00f42400
 8007b54:	40023800 	.word	0x40023800

08007b58 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8007b5a:	e000      	b.n	8007b5e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8007b5c:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8007b5e:	4a03      	ldr	r2, [pc, #12]	; (8007b6c <z_device_state_init+0x14>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d3fb      	bcc.n	8007b5c <z_device_state_init+0x4>
	}
}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	0800da38 	.word	0x0800da38
 8007b6c:	0800db58 	.word	0x0800db58

08007b70 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8007b70:	b570      	push	{r4, r5, r6, lr}
 8007b72:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007b74:	4b11      	ldr	r3, [pc, #68]	; (8007bbc <z_sys_init_run_level+0x4c>)
 8007b76:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007b7a:	e009      	b.n	8007b90 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8007b7c:	4240      	negs	r0, r0
 8007b7e:	e017      	b.n	8007bb0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8007b80:	68eb      	ldr	r3, [r5, #12]
 8007b82:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8007b84:	68ea      	ldr	r2, [r5, #12]
 8007b86:	7853      	ldrb	r3, [r2, #1]
 8007b88:	f043 0301 	orr.w	r3, r3, #1
 8007b8c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007b8e:	3408      	adds	r4, #8
 8007b90:	1c73      	adds	r3, r6, #1
 8007b92:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <z_sys_init_run_level+0x4c>)
 8007b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d90d      	bls.n	8007bb8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8007b9c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	4798      	blx	r3
		if (dev != NULL) {
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	d0f2      	beq.n	8007b8e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0eb      	beq.n	8007b84 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8007bac:	2800      	cmp	r0, #0
 8007bae:	dbe5      	blt.n	8007b7c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8007bb0:	28ff      	cmp	r0, #255	; 0xff
 8007bb2:	dde5      	ble.n	8007b80 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8007bb4:	20ff      	movs	r0, #255	; 0xff
 8007bb6:	e7e3      	b.n	8007b80 <z_sys_init_run_level+0x10>
		}
	}
}
 8007bb8:	bd70      	pop	{r4, r5, r6, pc}
 8007bba:	bf00      	nop
 8007bbc:	0800ee00 	.word	0x0800ee00

08007bc0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8007bc0:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	b328      	cbz	r0, 8007c12 <z_impl_device_get_binding+0x52>
 8007bc6:	7803      	ldrb	r3, [r0, #0]
 8007bc8:	b32b      	cbz	r3, 8007c16 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8007bca:	4c14      	ldr	r4, [pc, #80]	; (8007c1c <z_impl_device_get_binding+0x5c>)
 8007bcc:	e000      	b.n	8007bd0 <z_impl_device_get_binding+0x10>
 8007bce:	3418      	adds	r4, #24
 8007bd0:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <z_impl_device_get_binding+0x60>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d008      	beq.n	8007be8 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f004 ff61 	bl	800ca9e <z_device_ready>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0f6      	beq.n	8007bce <z_impl_device_get_binding+0xe>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	42ab      	cmp	r3, r5
 8007be4:	d1f3      	bne.n	8007bce <z_impl_device_get_binding+0xe>
 8007be6:	e012      	b.n	8007c0e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8007be8:	4c0c      	ldr	r4, [pc, #48]	; (8007c1c <z_impl_device_get_binding+0x5c>)
 8007bea:	e000      	b.n	8007bee <z_impl_device_get_binding+0x2e>
 8007bec:	3418      	adds	r4, #24
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <z_impl_device_get_binding+0x60>)
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d00b      	beq.n	8007c0c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f004 ff52 	bl	800ca9e <z_device_ready>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d0f6      	beq.n	8007bec <z_impl_device_get_binding+0x2c>
 8007bfe:	6821      	ldr	r1, [r4, #0]
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7f9 f892 	bl	8000d2a <strcmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d1f0      	bne.n	8007bec <z_impl_device_get_binding+0x2c>
 8007c0a:	e000      	b.n	8007c0e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8007c0c:	2400      	movs	r4, #0
}
 8007c0e:	4620      	mov	r0, r4
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8007c12:	4604      	mov	r4, r0
 8007c14:	e7fb      	b.n	8007c0e <z_impl_device_get_binding+0x4e>
 8007c16:	2400      	movs	r4, #0
 8007c18:	e7f9      	b.n	8007c0e <z_impl_device_get_binding+0x4e>
 8007c1a:	bf00      	nop
 8007c1c:	0800da38 	.word	0x0800da38
 8007c20:	0800db58 	.word	0x0800db58

08007c24 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8007c24:	2804      	cmp	r0, #4
 8007c26:	d80c      	bhi.n	8007c42 <reason_to_str+0x1e>
 8007c28:	e8df f000 	tbb	[pc, r0]
 8007c2c:	07050d03 	.word	0x07050d03
 8007c30:	09          	.byte	0x09
 8007c31:	00          	.byte	0x00
 8007c32:	4806      	ldr	r0, [pc, #24]	; (8007c4c <reason_to_str+0x28>)
 8007c34:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 8007c36:	4806      	ldr	r0, [pc, #24]	; (8007c50 <reason_to_str+0x2c>)
 8007c38:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 8007c3a:	4806      	ldr	r0, [pc, #24]	; (8007c54 <reason_to_str+0x30>)
 8007c3c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 8007c3e:	4806      	ldr	r0, [pc, #24]	; (8007c58 <reason_to_str+0x34>)
 8007c40:	4770      	bx	lr
	default:
		return "Unknown error";
 8007c42:	4806      	ldr	r0, [pc, #24]	; (8007c5c <reason_to_str+0x38>)
 8007c44:	4770      	bx	lr
		return "Unhandled interrupt";
 8007c46:	4806      	ldr	r0, [pc, #24]	; (8007c60 <reason_to_str+0x3c>)
	}
}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	0800ee68 	.word	0x0800ee68
 8007c50:	0800ee3c 	.word	0x0800ee3c
 8007c54:	0800ee4c 	.word	0x0800ee4c
 8007c58:	0800ee58 	.word	0x0800ee58
 8007c5c:	0800ee18 	.word	0x0800ee18
 8007c60:	0800ee28 	.word	0x0800ee28

08007c64 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007c64:	b130      	cbz	r0, 8007c74 <thread_name_get+0x10>
{
 8007c66:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007c68:	f004 ff98 	bl	800cb9c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8007c6c:	b120      	cbz	r0, 8007c78 <thread_name_get+0x14>
 8007c6e:	7803      	ldrb	r3, [r0, #0]
 8007c70:	b123      	cbz	r3, 8007c7c <thread_name_get+0x18>
}
 8007c72:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 8007c74:	4802      	ldr	r0, [pc, #8]	; (8007c80 <thread_name_get+0x1c>)
}
 8007c76:	4770      	bx	lr
		thread_name = "unknown";
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <thread_name_get+0x1c>)
 8007c7a:	e7fa      	b.n	8007c72 <thread_name_get+0xe>
 8007c7c:	4800      	ldr	r0, [pc, #0]	; (8007c80 <thread_name_get+0x1c>)
	return thread_name;
 8007c7e:	e7f8      	b.n	8007c72 <thread_name_get+0xe>
 8007c80:	0800ee78 	.word	0x0800ee78

08007c84 <k_sys_fatal_error_handler>:
{
 8007c84:	b510      	push	{r4, lr}
 8007c86:	4604      	mov	r4, r0
	z_impl_log_panic();
 8007c88:	f7fb fc50 	bl	800352c <z_impl_log_panic>
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <k_sys_fatal_error_handler+0x30>)
 8007c8e:	4a0a      	ldr	r2, [pc, #40]	; (8007cb8 <k_sys_fatal_error_handler+0x34>)
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
 8007c94:	f04f 0100 	mov.w	r1, #0
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f362 0102 	bfi	r1, r2, #0, #3
 8007c9e:	f36f 01c5 	bfc	r1, #3, #3
 8007ca2:	f363 118f 	bfi	r1, r3, #6, #10
 8007ca6:	4805      	ldr	r0, [pc, #20]	; (8007cbc <k_sys_fatal_error_handler+0x38>)
 8007ca8:	f7fb fbae 	bl	8003408 <log_0>
	arch_system_halt(reason);
 8007cac:	4620      	mov	r0, r4
 8007cae:	f004 ff03 	bl	800cab8 <arch_system_halt>
 8007cb2:	bf00      	nop
 8007cb4:	0800dd48 	.word	0x0800dd48
 8007cb8:	0800dd28 	.word	0x0800dd28
 8007cbc:	0800ee80 	.word	0x0800ee80

08007cc0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	460e      	mov	r6, r1
	__asm__ volatile(
 8007cca:	f04f 0310 	mov.w	r3, #16
 8007cce:	f3ef 8711 	mrs	r7, BASEPRI
 8007cd2:	f383 8812 	msr	BASEPRI_MAX, r3
 8007cd6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8007cda:	f001 f8f1 	bl	8008ec0 <z_impl_z_current_get>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4b29      	ldr	r3, [pc, #164]	; (8007d88 <z_fatal_error+0xc8>)
 8007ce2:	4a2a      	ldr	r2, [pc, #168]	; (8007d8c <z_fatal_error+0xcc>)
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	2201      	movs	r2, #1
 8007cee:	f362 0802 	bfi	r8, r2, #0, #3
 8007cf2:	f36f 08c5 	bfc	r8, #3, #3
 8007cf6:	f363 188f 	bfi	r8, r3, #6, #10
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f7ff ff92 	bl	8007c24 <reason_to_str>
 8007d00:	4602      	mov	r2, r0
 8007d02:	f8ad 8000 	strh.w	r8, [sp]
 8007d06:	2300      	movs	r3, #0
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4821      	ldr	r0, [pc, #132]	; (8007d90 <z_fatal_error+0xd0>)
 8007d0c:	f7fb fb42 	bl	8003394 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8007d10:	b11e      	cbz	r6, 8007d1a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8007d12:	69f3      	ldr	r3, [r6, #28]
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	bb2b      	cbnz	r3, 8007d66 <z_fatal_error+0xa6>
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <z_fatal_error+0xc8>)
 8007d1c:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <z_fatal_error+0xcc>)
 8007d1e:	1a9b      	subs	r3, r3, r2
 8007d20:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8007d22:	f04f 0800 	mov.w	r8, #0
 8007d26:	2201      	movs	r2, #1
 8007d28:	f362 0802 	bfi	r8, r2, #0, #3
 8007d2c:	f36f 08c5 	bfc	r8, #3, #3
 8007d30:	f363 188f 	bfi	r8, r3, #6, #10
 8007d34:	4620      	mov	r0, r4
 8007d36:	f7ff ff95 	bl	8007c64 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8007d3a:	f7fb f9ef 	bl	800311c <z_log_strdup>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4643      	mov	r3, r8
 8007d42:	4621      	mov	r1, r4
 8007d44:	4813      	ldr	r0, [pc, #76]	; (8007d94 <z_fatal_error+0xd4>)
 8007d46:	f7fb fbbb 	bl	80034c0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f7ff ff99 	bl	8007c84 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8007d52:	f387 8811 	msr	BASEPRI, r7
 8007d56:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7fc fc64 	bl	8004628 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8007d60:	b002      	add	sp, #8
 8007d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <z_fatal_error+0xc8>)
 8007d68:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <z_fatal_error+0xcc>)
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
 8007d6e:	f04f 0100 	mov.w	r1, #0
 8007d72:	2201      	movs	r2, #1
 8007d74:	f362 0102 	bfi	r1, r2, #0, #3
 8007d78:	f36f 01c5 	bfc	r1, #3, #3
 8007d7c:	f363 118f 	bfi	r1, r3, #6, #10
 8007d80:	4805      	ldr	r0, [pc, #20]	; (8007d98 <z_fatal_error+0xd8>)
 8007d82:	f7fb fb41 	bl	8003408 <log_0>
 8007d86:	e7c8      	b.n	8007d1a <z_fatal_error+0x5a>
 8007d88:	0800dd48 	.word	0x0800dd48
 8007d8c:	0800dd28 	.word	0x0800dd28
 8007d90:	0800ee90 	.word	0x0800ee90
 8007d94:	0800eedc 	.word	0x0800eedc
 8007d98:	0800eeb8 	.word	0x0800eeb8

08007d9c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 8007da0:	4c10      	ldr	r4, [pc, #64]	; (8007de4 <init_idle_thread+0x48>)
 8007da2:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
 8007da6:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8007daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007dae:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <init_idle_thread+0x4c>)
 8007db0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
 8007db4:	2300      	movs	r3, #0
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	2201      	movs	r2, #1
 8007dba:	9204      	str	r2, [sp, #16]
 8007dbc:	220f      	movs	r2, #15
 8007dbe:	9203      	str	r2, [sp, #12]
 8007dc0:	9302      	str	r3, [sp, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	9000      	str	r0, [sp, #0]
 8007dc6:	4b09      	ldr	r3, [pc, #36]	; (8007dec <init_idle_thread+0x50>)
 8007dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dcc:	4908      	ldr	r1, [pc, #32]	; (8007df0 <init_idle_thread+0x54>)
 8007dce:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f920 	bl	8008018 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007dd8:	7b63      	ldrb	r3, [r4, #13]
 8007dda:	f023 0304 	bic.w	r3, r3, #4
 8007dde:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8007de0:	b006      	add	sp, #24
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	20000728 	.word	0x20000728
 8007de8:	20000e1c 	.word	0x20000e1c
 8007dec:	0800cc03 	.word	0x0800cc03
 8007df0:	20002e20 	.word	0x20002e20

08007df4 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8007df8:	f000 ffac 	bl	8008d54 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8007dfc:	4d1b      	ldr	r5, [pc, #108]	; (8007e6c <prepare_multithreading+0x78>)
 8007dfe:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <prepare_multithreading+0x7c>)
 8007e00:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007e02:	4b1c      	ldr	r3, [pc, #112]	; (8007e74 <prepare_multithreading+0x80>)
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	2301      	movs	r3, #1
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	2400      	movs	r4, #0
 8007e0c:	9403      	str	r4, [sp, #12]
 8007e0e:	9402      	str	r4, [sp, #8]
 8007e10:	9401      	str	r4, [sp, #4]
 8007e12:	9400      	str	r4, [sp, #0]
 8007e14:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <prepare_multithreading+0x84>)
 8007e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e1a:	4918      	ldr	r1, [pc, #96]	; (8007e7c <prepare_multithreading+0x88>)
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f8fb 	bl	8008018 <z_setup_new_thread>
 8007e22:	4606      	mov	r6, r0
 8007e24:	7b6b      	ldrb	r3, [r5, #13]
 8007e26:	f023 0304 	bic.w	r3, r3, #4
 8007e2a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f004 ffae 	bl	800cd8e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	dd02      	ble.n	8007e3c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8007e36:	4630      	mov	r0, r6
 8007e38:	b006      	add	sp, #24
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f7ff ffad 	bl	8007d9c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8007e42:	4a0f      	ldr	r2, [pc, #60]	; (8007e80 <prepare_multithreading+0x8c>)
 8007e44:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8007e48:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <prepare_multithreading+0x7c>)
 8007e4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007e52:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8007e54:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8007e56:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <prepare_multithreading+0x90>)
 8007e5c:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8007e60:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8007e64:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8007e66:	3401      	adds	r4, #1
 8007e68:	e7e3      	b.n	8007e32 <prepare_multithreading+0x3e>
 8007e6a:	bf00      	nop
 8007e6c:	200007a8 	.word	0x200007a8
 8007e70:	20000e1c 	.word	0x20000e1c
 8007e74:	0800eef4 	.word	0x0800eef4
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	20001e00 	.word	0x20001e00
 8007e80:	20000728 	.word	0x20000728
 8007e84:	20002f40 	.word	0x20002f40

08007e88 <bg_thread_main>:
{
 8007e88:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <bg_thread_main+0x30>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8007e90:	2002      	movs	r0, #2
 8007e92:	f7ff fe6d 	bl	8007b70 <z_sys_init_run_level>
	boot_banner();
 8007e96:	f001 fd65 	bl	8009964 <boot_banner>
	z_cpp_init_static();
 8007e9a:	f003 fe09 	bl	800bab0 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8007e9e:	2003      	movs	r0, #3
 8007ea0:	f7ff fe66 	bl	8007b70 <z_sys_init_run_level>
	z_init_static_threads();
 8007ea4:	f000 f8e8 	bl	8008078 <z_init_static_threads>
	main();
 8007ea8:	f005 fa03 	bl	800d2b2 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8007eac:	4a03      	ldr	r2, [pc, #12]	; (8007ebc <bg_thread_main+0x34>)
 8007eae:	7b13      	ldrb	r3, [r2, #12]
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8007eb6:	bd08      	pop	{r3, pc}
 8007eb8:	20000e7c 	.word	0x20000e7c
 8007ebc:	200007a8 	.word	0x200007a8

08007ec0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8007ec0:	b508      	push	{r3, lr}
 8007ec2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8007ec4:	4a01      	ldr	r2, [pc, #4]	; (8007ecc <switch_to_main_thread+0xc>)
 8007ec6:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <switch_to_main_thread+0x10>)
 8007ec8:	f7fb ffb2 	bl	8003e30 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8007ecc:	08007e89 	.word	0x08007e89
 8007ed0:	200007a8 	.word	0x200007a8

08007ed4 <z_bss_zero>:
{
 8007ed4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8007ed6:	4803      	ldr	r0, [pc, #12]	; (8007ee4 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8007ed8:	4a03      	ldr	r2, [pc, #12]	; (8007ee8 <z_bss_zero+0x14>)
 8007eda:	1a12      	subs	r2, r2, r0
 8007edc:	2100      	movs	r1, #0
 8007ede:	f005 fa00 	bl	800d2e2 <memset>
}
 8007ee2:	bd08      	pop	{r3, pc}
 8007ee4:	200004b8 	.word	0x200004b8
 8007ee8:	20000e80 	.word	0x20000e80

08007eec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8007eec:	b500      	push	{lr}
 8007eee:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8007ef0:	f7fb f844 	bl	8002f7c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <z_cstart+0x78>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007ef6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8007efa:	4c1b      	ldr	r4, [pc, #108]	; (8007f68 <z_cstart+0x7c>)
 8007efc:	6963      	ldr	r3, [r4, #20]
 8007efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f02:	6163      	str	r3, [r4, #20]
 8007f04:	23f0      	movs	r3, #240	; 0xf0
 8007f06:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8007f0a:	2500      	movs	r5, #0
 8007f0c:	77e5      	strb	r5, [r4, #31]
 8007f0e:	7625      	strb	r5, [r4, #24]
 8007f10:	7665      	strb	r5, [r4, #25]
 8007f12:	76a5      	strb	r5, [r4, #26]
 8007f14:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8007f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007f1e:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8007f20:	f7fc fb40 	bl	80045a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8007f24:	f7fb fe48 	bl	8003bb8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8007f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f2c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8007f2e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8007f30:	f7fc fc60 	bl	80047f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8007f34:	f7fc fb8e 	bl	8004654 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8007f38:	2401      	movs	r4, #1
 8007f3a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8007f3e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8007f42:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8007f44:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <z_cstart+0x80>)
 8007f48:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8007f4c:	f7ff fe04 	bl	8007b58 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8007f50:	4628      	mov	r0, r5
 8007f52:	f7ff fe0d 	bl	8007b70 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8007f56:	4620      	mov	r0, r4
 8007f58:	f7ff fe0a 	bl	8007b70 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8007f5c:	f7ff ff4a 	bl	8007df4 <prepare_multithreading>
 8007f60:	f7ff ffae 	bl	8007ec0 <switch_to_main_thread>
 8007f64:	20003760 	.word	0x20003760
 8007f68:	e000ed00 	.word	0xe000ed00
 8007f6c:	20000e1c 	.word	0x20000e1c

08007f70 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8007f70:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8007f72:	4c06      	ldr	r4, [pc, #24]	; (8007f8c <init_mem_slab_module+0x1c>)
	int rc = 0;
 8007f74:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8007f76:	e000      	b.n	8007f7a <init_mem_slab_module+0xa>
 8007f78:	3420      	adds	r4, #32
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <init_mem_slab_module+0x20>)
 8007f7c:	429c      	cmp	r4, r3
 8007f7e:	d204      	bcs.n	8007f8a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8007f80:	4620      	mov	r0, r4
 8007f82:	f004 fda2 	bl	800caca <create_free_list>
		if (rc < 0) {
 8007f86:	2800      	cmp	r0, #0
 8007f88:	daf6      	bge.n	8007f78 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 8007f8a:	bd10      	pop	{r4, pc}
 8007f8c:	20000390 	.word	0x20000390
 8007f90:	20000390 	.word	0x20000390

08007f94 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8007f94:	b530      	push	{r4, r5, lr}
 8007f96:	b083      	sub	sp, #12
 8007f98:	460d      	mov	r5, r1
	__asm__ volatile(
 8007f9a:	f04f 0410 	mov.w	r4, #16
 8007f9e:	f3ef 8111 	mrs	r1, BASEPRI
 8007fa2:	f384 8812 	msr	BASEPRI_MAX, r4
 8007fa6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 8007faa:	6984      	ldr	r4, [r0, #24]
 8007fac:	b16c      	cbz	r4, 8007fca <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
 8007fae:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 8007fb0:	6983      	ldr	r3, [r0, #24]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8007fb6:	69c3      	ldr	r3, [r0, #28]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8007fbc:	2000      	movs	r0, #0
	__asm__ volatile(
 8007fbe:	f381 8811 	msr	BASEPRI, r1
 8007fc2:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 8007fc6:	b003      	add	sp, #12
 8007fc8:	bd30      	pop	{r4, r5, pc}
 8007fca:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8007fce:	ea53 0402 	orrs.w	r4, r3, r2
 8007fd2:	d104      	bne.n	8007fde <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
 8007fd8:	f06f 000b 	mvn.w	r0, #11
 8007fdc:	e7ef      	b.n	8007fbe <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8007fde:	9200      	str	r2, [sp, #0]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4660      	mov	r0, ip
 8007fe6:	f000 fd8d 	bl	8008b04 <z_pend_curr>
		if (result == 0) {
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1eb      	bne.n	8007fc6 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
 8007fee:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <k_mem_slab_alloc+0x64>)
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	602b      	str	r3, [r5, #0]
		return result;
 8007ff6:	e7e6      	b.n	8007fc6 <k_mem_slab_alloc+0x32>
 8007ff8:	20000e1c 	.word	0x20000e1c

08007ffc <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8007ffc:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007ffe:	ea53 0102 	orrs.w	r1, r3, r2
 8008002:	d102      	bne.n	800800a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8008004:	f004 fdcc 	bl	800cba0 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8008008:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800800a:	4902      	ldr	r1, [pc, #8]	; (8008014 <schedule_new_thread+0x18>)
 800800c:	3018      	adds	r0, #24
 800800e:	f001 f80b 	bl	8009028 <z_add_timeout>
 8008012:	e7f9      	b.n	8008008 <schedule_new_thread+0xc>
 8008014:	0800cdc7 	.word	0x0800cdc7

08008018 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8008018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801a:	b085      	sub	sp, #20
 800801c:	4604      	mov	r4, r0
 800801e:	460e      	mov	r6, r1
 8008020:	4615      	mov	r5, r2
 8008022:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8008024:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8008028:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800802a:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800802c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800802e:	2204      	movs	r2, #4
 8008030:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008032:	f004 fdb9 	bl	800cba8 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8008036:	462a      	mov	r2, r5
 8008038:	4631      	mov	r1, r6
 800803a:	4620      	mov	r0, r4
 800803c:	f004 fd96 	bl	800cb6c <setup_thread_stack>
 8008040:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8008042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	463b      	mov	r3, r7
 8008050:	4602      	mov	r2, r0
 8008052:	4631      	mov	r1, r6
 8008054:	4620      	mov	r0, r4
 8008056:	f7fb fea5 	bl	8003da4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <z_setup_new_thread+0x5c>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	b123      	cbz	r3, 800806e <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8008064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008066:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 8008068:	4628      	mov	r0, r5
 800806a:	b005      	add	sp, #20
 800806c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800806e:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 8008070:	e7fa      	b.n	8008068 <z_setup_new_thread+0x50>
 8008072:	bf00      	nop
 8008074:	20000e1c 	.word	0x20000e1c

08008078 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8008078:	b510      	push	{r4, lr}
 800807a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800807c:	4c1d      	ldr	r4, [pc, #116]	; (80080f4 <z_init_static_threads+0x7c>)
 800807e:	e014      	b.n	80080aa <z_init_static_threads+0x32>
		z_setup_new_thread(
 8008080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	6a23      	ldr	r3, [r4, #32]
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	69e3      	ldr	r3, [r4, #28]
 800808a:	9303      	str	r3, [sp, #12]
 800808c:	69a3      	ldr	r3, [r4, #24]
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	6963      	ldr	r3, [r4, #20]
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	6923      	ldr	r3, [r4, #16]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	68e3      	ldr	r3, [r4, #12]
 800809a:	68a2      	ldr	r2, [r4, #8]
 800809c:	6861      	ldr	r1, [r4, #4]
 800809e:	6820      	ldr	r0, [r4, #0]
 80080a0:	f7ff ffba 	bl	8008018 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80080a8:	3430      	adds	r4, #48	; 0x30
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <z_init_static_threads+0x80>)
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d3e7      	bcc.n	8008080 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80080b0:	f000 fbd4 	bl	800885c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80080b4:	4c0f      	ldr	r4, [pc, #60]	; (80080f4 <z_init_static_threads+0x7c>)
 80080b6:	e000      	b.n	80080ba <z_init_static_threads+0x42>
 80080b8:	3430      	adds	r4, #48	; 0x30
 80080ba:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <z_init_static_threads+0x80>)
 80080bc:	429c      	cmp	r4, r3
 80080be:	d214      	bcs.n	80080ea <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 80080c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c6:	d0f7      	beq.n	80080b8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 80080c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080cc:	17d8      	asrs	r0, r3, #31
 80080ce:	0082      	lsls	r2, r0, #2
 80080d0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80080d4:	0099      	lsls	r1, r3, #2
 80080d6:	18c9      	adds	r1, r1, r3
 80080d8:	eb40 0002 	adc.w	r0, r0, r2
 80080dc:	184a      	adds	r2, r1, r1
 80080de:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 80080e2:	6820      	ldr	r0, [r4, #0]
 80080e4:	f7ff ff8a 	bl	8007ffc <schedule_new_thread>
 80080e8:	e7e6      	b.n	80080b8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 80080ea:	f000 fdc1 	bl	8008c70 <k_sched_unlock>
}
 80080ee:	b006      	add	sp, #24
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	200002c8 	.word	0x200002c8
 80080f8:	20000358 	.word	0x20000358

080080fc <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 80080fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	4604      	mov	r4, r0
 8008104:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8008106:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800810a:	f04f 0110 	mov.w	r1, #16
 800810e:	f3ef 8611 	mrs	r6, BASEPRI
 8008112:	f381 8812 	msr	BASEPRI_MAX, r1
 8008116:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800811a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800811c:	6921      	ldr	r1, [r4, #16]
 800811e:	4288      	cmp	r0, r1
 8008120:	d30b      	bcc.n	800813a <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8008122:	ea53 0102 	orrs.w	r1, r3, r2
 8008126:	d137      	bne.n	8008198 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8008128:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800812c:	f386 8811 	msr	BASEPRI, r6
 8008130:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8008134:	b002      	add	sp, #8
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800813a:	4620      	mov	r0, r4
 800813c:	f004 feee 	bl	800cf1c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8008140:	4680      	mov	r8, r0
 8008142:	b180      	cbz	r0, 8008166 <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8008144:	68e2      	ldr	r2, [r4, #12]
 8008146:	4629      	mov	r1, r5
 8008148:	6940      	ldr	r0, [r0, #20]
 800814a:	f005 f8bc 	bl	800d2c6 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800814e:	2400      	movs	r4, #0
 8008150:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 8008154:	4640      	mov	r0, r8
 8008156:	f004 fe1a 	bl	800cd8e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800815a:	4631      	mov	r1, r6
 800815c:	4638      	mov	r0, r7
 800815e:	f000 fb61 	bl	8008824 <z_reschedule>
			return 0;
 8008162:	4620      	mov	r0, r4
 8008164:	e7e6      	b.n	8008134 <z_impl_k_msgq_put+0x38>
 8008166:	68e2      	ldr	r2, [r4, #12]
 8008168:	4629      	mov	r1, r5
 800816a:	6a20      	ldr	r0, [r4, #32]
 800816c:	f005 f8ab 	bl	800d2c6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8008170:	68e2      	ldr	r2, [r4, #12]
 8008172:	6a23      	ldr	r3, [r4, #32]
 8008174:	4413      	add	r3, r2
 8008176:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8008178:	69a2      	ldr	r2, [r4, #24]
 800817a:	4293      	cmp	r3, r2
 800817c:	d009      	beq.n	8008192 <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 800817e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008180:	3301      	adds	r3, #1
 8008182:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 8008184:	2110      	movs	r1, #16
 8008186:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800818a:	f005 f882 	bl	800d292 <z_handle_obj_poll_events>
		result = 0;
 800818e:	2000      	movs	r0, #0
 8008190:	e7cc      	b.n	800812c <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 8008192:	6963      	ldr	r3, [r4, #20]
 8008194:	6223      	str	r3, [r4, #32]
 8008196:	e7f2      	b.n	800817e <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 8008198:	4905      	ldr	r1, [pc, #20]	; (80081b0 <z_impl_k_msgq_put+0xb4>)
 800819a:	6889      	ldr	r1, [r1, #8]
 800819c:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800819e:	9200      	str	r2, [sp, #0]
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	4622      	mov	r2, r4
 80081a4:	4631      	mov	r1, r6
 80081a6:	4638      	mov	r0, r7
 80081a8:	f000 fcac 	bl	8008b04 <z_pend_curr>
		return result;
 80081ac:	e7c2      	b.n	8008134 <z_impl_k_msgq_put+0x38>
 80081ae:	bf00      	nop
 80081b0:	20000e1c 	.word	0x20000e1c

080081b4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b083      	sub	sp, #12
 80081b8:	4604      	mov	r4, r0
 80081ba:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 80081bc:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 80081c0:	f04f 0110 	mov.w	r1, #16
 80081c4:	f3ef 8511 	mrs	r5, BASEPRI
 80081c8:	f381 8812 	msr	BASEPRI_MAX, r1
 80081cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 80081d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d033      	beq.n	800823e <z_impl_k_msgq_get+0x8a>
 80081d6:	68e2      	ldr	r2, [r4, #12]
 80081d8:	69e1      	ldr	r1, [r4, #28]
 80081da:	f005 f874 	bl	800d2c6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 80081de:	68e2      	ldr	r2, [r4, #12]
 80081e0:	69e3      	ldr	r3, [r4, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 80081e6:	69a2      	ldr	r2, [r4, #24]
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d022      	beq.n	8008232 <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 80081ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081ee:	3b01      	subs	r3, #1
 80081f0:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 80081f2:	4620      	mov	r0, r4
 80081f4:	f004 fe92 	bl	800cf1c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 80081f8:	4607      	mov	r7, r0
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d035      	beq.n	800826a <z_impl_k_msgq_get+0xb6>
 80081fe:	68e2      	ldr	r2, [r4, #12]
 8008200:	6941      	ldr	r1, [r0, #20]
 8008202:	6a20      	ldr	r0, [r4, #32]
 8008204:	f005 f85f 	bl	800d2c6 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8008208:	68e2      	ldr	r2, [r4, #12]
 800820a:	6a23      	ldr	r3, [r4, #32]
 800820c:	4413      	add	r3, r2
 800820e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8008210:	69a2      	ldr	r2, [r4, #24]
 8008212:	4293      	cmp	r3, r2
 8008214:	d010      	beq.n	8008238 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	3301      	adds	r3, #1
 800821a:	6263      	str	r3, [r4, #36]	; 0x24
 800821c:	2400      	movs	r4, #0
 800821e:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8008220:	4638      	mov	r0, r7
 8008222:	f004 fdb4 	bl	800cd8e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8008226:	4629      	mov	r1, r5
 8008228:	4630      	mov	r0, r6
 800822a:	f000 fafb 	bl	8008824 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800822e:	4620      	mov	r0, r4
 8008230:	e00e      	b.n	8008250 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 8008232:	6963      	ldr	r3, [r4, #20]
 8008234:	61e3      	str	r3, [r4, #28]
 8008236:	e7d9      	b.n	80081ec <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 8008238:	6963      	ldr	r3, [r4, #20]
 800823a:	6223      	str	r3, [r4, #32]
 800823c:	e7eb      	b.n	8008216 <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800823e:	ea53 0102 	orrs.w	r1, r3, r2
 8008242:	d107      	bne.n	8008254 <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 8008244:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8008248:	f385 8811 	msr	BASEPRI, r5
 800824c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8008250:	b003      	add	sp, #12
 8008252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 8008254:	4906      	ldr	r1, [pc, #24]	; (8008270 <z_impl_k_msgq_get+0xbc>)
 8008256:	6889      	ldr	r1, [r1, #8]
 8008258:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800825a:	9200      	str	r2, [sp, #0]
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	4622      	mov	r2, r4
 8008260:	4629      	mov	r1, r5
 8008262:	4630      	mov	r0, r6
 8008264:	f000 fc4e 	bl	8008b04 <z_pend_curr>
		return result;
 8008268:	e7f2      	b.n	8008250 <z_impl_k_msgq_get+0x9c>
		result = 0;
 800826a:	2000      	movs	r0, #0
 800826c:	e7ec      	b.n	8008248 <z_impl_k_msgq_get+0x94>
 800826e:	bf00      	nop
 8008270:	20000e1c 	.word	0x20000e1c

08008274 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8008274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	4604      	mov	r4, r0
 800827c:	461d      	mov	r5, r3
	__asm__ volatile(
 800827e:	f04f 0310 	mov.w	r3, #16
 8008282:	f3ef 8711 	mrs	r7, BASEPRI
 8008286:	f383 8812 	msr	BASEPRI_MAX, r3
 800828a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800828e:	68c1      	ldr	r1, [r0, #12]
 8008290:	b999      	cbnz	r1, 80082ba <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8008292:	2900      	cmp	r1, #0
 8008294:	d14f      	bne.n	8008336 <z_impl_k_mutex_lock+0xc2>
 8008296:	4b3a      	ldr	r3, [pc, #232]	; (8008380 <z_impl_k_mutex_lock+0x10c>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800829e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 80082a0:	3101      	adds	r1, #1
 80082a2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 80082a4:	4b36      	ldr	r3, [pc, #216]	; (8008380 <z_impl_k_mutex_lock+0x10c>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80082aa:	f387 8811 	msr	BASEPRI, r7
 80082ae:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 80082b2:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082ba:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80082bc:	6882      	ldr	r2, [r0, #8]
 80082be:	4b30      	ldr	r3, [pc, #192]	; (8008380 <z_impl_k_mutex_lock+0x10c>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d0e5      	beq.n	8008292 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 80082c6:	ea55 0106 	orrs.w	r1, r5, r6
 80082ca:	bf0c      	ite	eq
 80082cc:	f04f 0801 	moveq.w	r8, #1
 80082d0:	f04f 0800 	movne.w	r8, #0
 80082d4:	d031      	beq.n	800833a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 80082d6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 80082da:	4649      	mov	r1, r9
 80082dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80082e0:	f004 fc9b 	bl	800cc1a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 80082e4:	4581      	cmp	r9, r0
 80082e6:	dc2f      	bgt.n	8008348 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 80082e8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 80082ec:	9600      	str	r6, [sp, #0]
 80082ee:	9501      	str	r5, [sp, #4]
 80082f0:	4622      	mov	r2, r4
 80082f2:	4639      	mov	r1, r7
 80082f4:	4823      	ldr	r0, [pc, #140]	; (8008384 <z_impl_k_mutex_lock+0x110>)
 80082f6:	f000 fc05 	bl	8008b04 <z_pend_curr>
	if (got_mutex == 0) {
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d0da      	beq.n	80082b4 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 80082fe:	f04f 0310 	mov.w	r3, #16
 8008302:	f3ef 8511 	mrs	r5, BASEPRI
 8008306:	f383 8812 	msr	BASEPRI_MAX, r3
 800830a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800830e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008310:	42a3      	cmp	r3, r4
 8008312:	d01f      	beq.n	8008354 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8008314:	b1f3      	cbz	r3, 8008354 <z_impl_k_mutex_lock+0xe0>
 8008316:	6921      	ldr	r1, [r4, #16]
 8008318:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800831c:	f004 fc7d 	bl	800cc1a <new_prio_for_inheritance>
 8008320:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8008322:	4620      	mov	r0, r4
 8008324:	f004 fc84 	bl	800cc30 <adjust_owner_prio>
 8008328:	b9b0      	cbnz	r0, 8008358 <z_impl_k_mutex_lock+0xe4>
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	d015      	beq.n	800835c <z_impl_k_mutex_lock+0xe8>
 8008330:	f04f 0801 	mov.w	r8, #1
 8008334:	e012      	b.n	800835c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	e7b1      	b.n	800829e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800833a:	f387 8811 	msr	BASEPRI, r7
 800833e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8008342:	f06f 000f 	mvn.w	r0, #15
 8008346:	e7b5      	b.n	80082b4 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8008348:	4601      	mov	r1, r0
 800834a:	4620      	mov	r0, r4
 800834c:	f004 fc70 	bl	800cc30 <adjust_owner_prio>
 8008350:	4681      	mov	r9, r0
 8008352:	e7cb      	b.n	80082ec <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8008354:	6921      	ldr	r1, [r4, #16]
 8008356:	e7e4      	b.n	8008322 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8008358:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800835c:	f1b8 0f00 	cmp.w	r8, #0
 8008360:	d106      	bne.n	8008370 <z_impl_k_mutex_lock+0xfc>
 8008362:	f385 8811 	msr	BASEPRI, r5
 8008366:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800836a:	f06f 000a 	mvn.w	r0, #10
 800836e:	e7a1      	b.n	80082b4 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8008370:	4629      	mov	r1, r5
 8008372:	4804      	ldr	r0, [pc, #16]	; (8008384 <z_impl_k_mutex_lock+0x110>)
 8008374:	f000 fa56 	bl	8008824 <z_reschedule>
	return -EAGAIN;
 8008378:	f06f 000a 	mvn.w	r0, #10
 800837c:	e79a      	b.n	80082b4 <z_impl_k_mutex_lock+0x40>
 800837e:	bf00      	nop
 8008380:	20000e1c 	.word	0x20000e1c
 8008384:	20000e40 	.word	0x20000e40

08008388 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8008388:	6882      	ldr	r2, [r0, #8]
 800838a:	2a00      	cmp	r2, #0
 800838c:	d034      	beq.n	80083f8 <z_impl_k_mutex_unlock+0x70>
{
 800838e:	b538      	push	{r3, r4, r5, lr}
 8008390:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8008392:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <z_impl_k_mutex_unlock+0x7c>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d131      	bne.n	80083fe <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800839a:	7bda      	ldrb	r2, [r3, #15]
 800839c:	3a01      	subs	r2, #1
 800839e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80083a0:	68c3      	ldr	r3, [r0, #12]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d905      	bls.n	80083b2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 80083aa:	f000 fc61 	bl	8008c70 <k_sched_unlock>

	return 0;
 80083ae:	2000      	movs	r0, #0
}
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80083b2:	f04f 0310 	mov.w	r3, #16
 80083b6:	f3ef 8511 	mrs	r5, BASEPRI
 80083ba:	f383 8812 	msr	BASEPRI_MAX, r3
 80083be:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 80083c2:	6901      	ldr	r1, [r0, #16]
 80083c4:	f004 fc34 	bl	800cc30 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 80083c8:	4620      	mov	r0, r4
 80083ca:	f004 fda7 	bl	800cf1c <z_unpend_first_thread>
	mutex->owner = new_owner;
 80083ce:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 80083d0:	b158      	cbz	r0, 80083ea <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 80083d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80083d6:	6123      	str	r3, [r4, #16]
 80083d8:	2300      	movs	r3, #0
 80083da:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 80083dc:	f004 fcd7 	bl	800cd8e <z_ready_thread>
		z_reschedule(&lock, key);
 80083e0:	4629      	mov	r1, r5
 80083e2:	4809      	ldr	r0, [pc, #36]	; (8008408 <z_impl_k_mutex_unlock+0x80>)
 80083e4:	f000 fa1e 	bl	8008824 <z_reschedule>
 80083e8:	e7df      	b.n	80083aa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 80083ee:	f385 8811 	msr	BASEPRI, r5
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	e7d8      	b.n	80083aa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 80083f8:	f06f 0015 	mvn.w	r0, #21
}
 80083fc:	4770      	bx	lr
		return -EPERM;
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008402:	e7d5      	b.n	80083b0 <z_impl_k_mutex_unlock+0x28>
 8008404:	20000e1c 	.word	0x20000e1c
 8008408:	20000e40 	.word	0x20000e40

0800840c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4604      	mov	r4, r0
	__asm__ volatile(
 8008410:	f04f 0310 	mov.w	r3, #16
 8008414:	f3ef 8511 	mrs	r5, BASEPRI
 8008418:	f383 8812 	msr	BASEPRI_MAX, r3
 800841c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8008420:	f004 fd7c 	bl	800cf1c <z_unpend_first_thread>

	if (thread != NULL) {
 8008424:	b140      	cbz	r0, 8008438 <z_impl_k_sem_give+0x2c>
 8008426:	2200      	movs	r2, #0
 8008428:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800842a:	f004 fcb0 	bl	800cd8e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800842e:	4629      	mov	r1, r5
 8008430:	4809      	ldr	r0, [pc, #36]	; (8008458 <z_impl_k_sem_give+0x4c>)
 8008432:	f000 f9f7 	bl	8008824 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8008436:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8008438:	68a3      	ldr	r3, [r4, #8]
 800843a:	68e2      	ldr	r2, [r4, #12]
 800843c:	4293      	cmp	r3, r2
 800843e:	d008      	beq.n	8008452 <z_impl_k_sem_give+0x46>
 8008440:	2201      	movs	r2, #1
 8008442:	4413      	add	r3, r2
 8008444:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8008446:	2102      	movs	r1, #2
 8008448:	f104 0010 	add.w	r0, r4, #16
 800844c:	f004 ff21 	bl	800d292 <z_handle_obj_poll_events>
}
 8008450:	e7ed      	b.n	800842e <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8008452:	2200      	movs	r2, #0
 8008454:	e7f5      	b.n	8008442 <z_impl_k_sem_give+0x36>
 8008456:	bf00      	nop
 8008458:	20000e44 	.word	0x20000e44

0800845c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800845c:	b510      	push	{r4, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	f04f 0410 	mov.w	r4, #16
 8008464:	f3ef 8111 	mrs	r1, BASEPRI
 8008468:	f384 8812 	msr	BASEPRI_MAX, r4
 800846c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8008470:	6884      	ldr	r4, [r0, #8]
 8008472:	b144      	cbz	r4, 8008486 <z_impl_k_sem_take+0x2a>
		sem->count--;
 8008474:	3c01      	subs	r4, #1
 8008476:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 8008478:	f381 8811 	msr	BASEPRI, r1
 800847c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8008480:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8008482:	b002      	add	sp, #8
 8008484:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8008486:	ea53 0402 	orrs.w	r4, r3, r2
 800848a:	d006      	beq.n	800849a <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800848c:	9200      	str	r2, [sp, #0]
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	4602      	mov	r2, r0
 8008492:	4805      	ldr	r0, [pc, #20]	; (80084a8 <z_impl_k_sem_take+0x4c>)
 8008494:	f000 fb36 	bl	8008b04 <z_pend_curr>
	return ret;
 8008498:	e7f3      	b.n	8008482 <z_impl_k_sem_take+0x26>
 800849a:	f381 8811 	msr	BASEPRI, r1
 800849e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80084a2:	f06f 000f 	mvn.w	r0, #15
 80084a6:	e7ec      	b.n	8008482 <z_impl_k_sem_take+0x26>
 80084a8:	20000e44 	.word	0x20000e44

080084ac <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 80084b0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80084b2:	f013 0f02 	tst.w	r3, #2
 80084b6:	d15c      	bne.n	8008572 <submit_to_queue_locked+0xc6>
 80084b8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 80084ba:	f013 0f04 	tst.w	r3, #4
 80084be:	d15d      	bne.n	800857c <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 80084c0:	680b      	ldr	r3, [r1, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d038      	beq.n	8008538 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 80084c6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 80084c8:	f013 0f01 	tst.w	r3, #1
 80084cc:	d037      	beq.n	800853e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 80084ce:	68a3      	ldr	r3, [r4, #8]
 80084d0:	602b      	str	r3, [r5, #0]
			ret = 2;
 80084d2:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 80084d4:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 80084d6:	2e00      	cmp	r6, #0
 80084d8:	d03f      	beq.n	800855a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 80084da:	4b29      	ldr	r3, [pc, #164]	; (8008580 <submit_to_queue_locked+0xd4>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	42b3      	cmp	r3, r6
 80084e0:	d02f      	beq.n	8008542 <submit_to_queue_locked+0x96>
 80084e2:	2300      	movs	r3, #0
 80084e4:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 80084e6:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80084ea:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80084ee:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 80084f2:	f013 0f01 	tst.w	r3, #1
 80084f6:	d033      	beq.n	8008560 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 80084f8:	b101      	cbz	r1, 80084fc <submit_to_queue_locked+0x50>
 80084fa:	b3a2      	cbz	r2, 8008566 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 80084fc:	b100      	cbz	r0, 8008500 <submit_to_queue_locked+0x54>
 80084fe:	b3a9      	cbz	r1, 800856c <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8008500:	2300      	movs	r3, #0
 8008502:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8008504:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8008508:	b313      	cbz	r3, 8008550 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800850a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800850c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8008510:	b12e      	cbz	r6, 800851e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8008512:	2200      	movs	r2, #0
 8008514:	4611      	mov	r1, r2
 8008516:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800851a:	f004 fd4f 	bl	800cfbc <z_sched_wake>
		ret = 1;
 800851e:	2001      	movs	r0, #1

		if (rc < 0) {
 8008520:	2800      	cmp	r0, #0
 8008522:	db06      	blt.n	8008532 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 8008524:	68e3      	ldr	r3, [r4, #12]
 8008526:	f043 0304 	orr.w	r3, r3, #4
 800852a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	60a3      	str	r3, [r4, #8]
 8008530:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 8008532:	2800      	cmp	r0, #0
 8008534:	dc21      	bgt.n	800857a <submit_to_queue_locked+0xce>
 8008536:	e01e      	b.n	8008576 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 8008538:	6883      	ldr	r3, [r0, #8]
 800853a:	600b      	str	r3, [r1, #0]
 800853c:	e7c3      	b.n	80084c6 <submit_to_queue_locked+0x1a>
		ret = 1;
 800853e:	2701      	movs	r7, #1
 8008540:	e7c8      	b.n	80084d4 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008542:	f004 fb22 	bl	800cb8a <k_is_in_isr>
 8008546:	b908      	cbnz	r0, 800854c <submit_to_queue_locked+0xa0>
 8008548:	2301      	movs	r3, #1
 800854a:	e7cb      	b.n	80084e4 <submit_to_queue_locked+0x38>
 800854c:	2300      	movs	r3, #0
 800854e:	e7c9      	b.n	80084e4 <submit_to_queue_locked+0x38>
 8008550:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 8008554:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 8008558:	e7da      	b.n	8008510 <submit_to_queue_locked+0x64>
		return -EINVAL;
 800855a:	f06f 0015 	mvn.w	r0, #21
 800855e:	e7df      	b.n	8008520 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 8008560:	f06f 0012 	mvn.w	r0, #18
 8008564:	e7dc      	b.n	8008520 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8008566:	f06f 000f 	mvn.w	r0, #15
 800856a:	e7d9      	b.n	8008520 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800856c:	f06f 000f 	mvn.w	r0, #15
 8008570:	e7d6      	b.n	8008520 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 8008572:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800857a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800857c:	2000      	movs	r0, #0
 800857e:	e7fa      	b.n	8008576 <submit_to_queue_locked+0xca>
 8008580:	20000e1c 	.word	0x20000e1c

08008584 <finalize_cancel_locked>:
{
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 8008588:	68c3      	ldr	r3, [r0, #12]
 800858a:	f023 0302 	bic.w	r3, r3, #2
 800858e:	60c3      	str	r3, [r0, #12]
	return list->head;
 8008590:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <finalize_cancel_locked+0x78>)
 8008592:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8008594:	b1fb      	cbz	r3, 80085d6 <finalize_cancel_locked+0x52>
 8008596:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008598:	b103      	cbz	r3, 800859c <finalize_cancel_locked+0x18>
	return node->next;
 800859a:	681c      	ldr	r4, [r3, #0]
 800859c:	2600      	movs	r6, #0
 800859e:	e01f      	b.n	80085e0 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80085a0:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80085a2:	b166      	cbz	r6, 80085be <finalize_cancel_locked+0x3a>
	return node->next;
 80085a4:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 80085a6:	6031      	str	r1, [r6, #0]
	return list->tail;
 80085a8:	4914      	ldr	r1, [pc, #80]	; (80085fc <finalize_cancel_locked+0x78>)
 80085aa:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80085ac:	428b      	cmp	r3, r1
 80085ae:	d00f      	beq.n	80085d0 <finalize_cancel_locked+0x4c>
	parent->next = child;
 80085b0:	2100      	movs	r1, #0
 80085b2:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 80085b4:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 80085b8:	f7ff ff28 	bl	800840c <z_impl_k_sem_give>
}
 80085bc:	e015      	b.n	80085ea <finalize_cancel_locked+0x66>
	return node->next;
 80085be:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 80085c0:	490e      	ldr	r1, [pc, #56]	; (80085fc <finalize_cancel_locked+0x78>)
 80085c2:	6008      	str	r0, [r1, #0]
	return list->tail;
 80085c4:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80085c6:	428b      	cmp	r3, r1
 80085c8:	d1f2      	bne.n	80085b0 <finalize_cancel_locked+0x2c>
	list->tail = node;
 80085ca:	490c      	ldr	r1, [pc, #48]	; (80085fc <finalize_cancel_locked+0x78>)
 80085cc:	6048      	str	r0, [r1, #4]
}
 80085ce:	e7ef      	b.n	80085b0 <finalize_cancel_locked+0x2c>
	list->tail = node;
 80085d0:	490a      	ldr	r1, [pc, #40]	; (80085fc <finalize_cancel_locked+0x78>)
 80085d2:	604e      	str	r6, [r1, #4]
}
 80085d4:	e7ec      	b.n	80085b0 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80085d6:	461c      	mov	r4, r3
 80085d8:	e7e0      	b.n	800859c <finalize_cancel_locked+0x18>
 80085da:	4622      	mov	r2, r4
 80085dc:	4623      	mov	r3, r4
 80085de:	4614      	mov	r4, r2
 80085e0:	b153      	cbz	r3, 80085f8 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	42aa      	cmp	r2, r5
 80085e6:	d0db      	beq.n	80085a0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 80085e8:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80085ea:	2c00      	cmp	r4, #0
 80085ec:	d0f5      	beq.n	80085da <finalize_cancel_locked+0x56>
 80085ee:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	d0f3      	beq.n	80085dc <finalize_cancel_locked+0x58>
	return node->next;
 80085f4:	6822      	ldr	r2, [r4, #0]
 80085f6:	e7f1      	b.n	80085dc <finalize_cancel_locked+0x58>
}
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	bf00      	nop
 80085fc:	20000e4c 	.word	0x20000e4c

08008600 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	b085      	sub	sp, #20
 8008604:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 8008606:	e016      	b.n	8008636 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8008608:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800860c:	f023 0204 	bic.w	r2, r3, #4
 8008610:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 8008614:	f013 0f04 	tst.w	r3, #4
 8008618:	d159      	bne.n	80086ce <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800861a:	2300      	movs	r3, #0
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008626:	e9cd 2300 	strd	r2, r3, [sp]
 800862a:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800862e:	4631      	mov	r1, r6
 8008630:	482e      	ldr	r0, [pc, #184]	; (80086ec <work_queue_main+0xec>)
 8008632:	f000 fc83 	bl	8008f3c <z_sched_wait>
	__asm__ volatile(
 8008636:	f04f 0310 	mov.w	r3, #16
 800863a:	f3ef 8611 	mrs	r6, BASEPRI
 800863e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008642:	f3bf 8f6f 	isb	sy
	return list->head;
 8008646:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800864a:	2c00      	cmp	r4, #0
 800864c:	d0dc      	beq.n	8008608 <work_queue_main+0x8>
	return node->next;
 800864e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8008650:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 8008654:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8008658:	4294      	cmp	r4, r2
 800865a:	d035      	beq.n	80086c8 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800865c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8008660:	f043 0302 	orr.w	r3, r3, #2
 8008664:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8008668:	68e3      	ldr	r3, [r4, #12]
 800866a:	f043 0301 	orr.w	r3, r3, #1
 800866e:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 8008670:	f023 0304 	bic.w	r3, r3, #4
 8008674:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 8008676:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 8008678:	2c00      	cmp	r4, #0
 800867a:	d0ce      	beq.n	800861a <work_queue_main+0x1a>
	__asm__ volatile(
 800867c:	f386 8811 	msr	BASEPRI, r6
 8008680:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 8008684:	4620      	mov	r0, r4
 8008686:	4798      	blx	r3
	__asm__ volatile(
 8008688:	f04f 0310 	mov.w	r3, #16
 800868c:	f3ef 8611 	mrs	r6, BASEPRI
 8008690:	f383 8812 	msr	BASEPRI_MAX, r3
 8008694:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8008698:	68e3      	ldr	r3, [r4, #12]
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80086a0:	f013 0f02 	tst.w	r3, #2
 80086a4:	d11e      	bne.n	80086e4 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 80086a6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80086aa:	f023 0302 	bic.w	r3, r3, #2
 80086ae:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 80086b2:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 80086b6:	f386 8811 	msr	BASEPRI, r6
 80086ba:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1b9      	bne.n	8008636 <work_queue_main+0x36>
	z_impl_k_yield();
 80086c2:	f000 fb55 	bl	8008d70 <z_impl_k_yield>
}
 80086c6:	e7b6      	b.n	8008636 <work_queue_main+0x36>
	list->tail = node;
 80086c8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80086cc:	e7c6      	b.n	800865c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 80086ce:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 80086d2:	2200      	movs	r2, #0
 80086d4:	2101      	movs	r1, #1
 80086d6:	4638      	mov	r0, r7
 80086d8:	f004 fc70 	bl	800cfbc <z_sched_wake>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1f8      	bne.n	80086d2 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e7c9      	b.n	8008678 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff ff4d 	bl	8008584 <finalize_cancel_locked>
 80086ea:	e7dc      	b.n	80086a6 <work_queue_main+0xa6>
 80086ec:	20000e48 	.word	0x20000e48

080086f0 <k_work_submit>:
{
 80086f0:	b508      	push	{r3, lr}
 80086f2:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 80086f4:	4801      	ldr	r0, [pc, #4]	; (80086fc <k_work_submit+0xc>)
 80086f6:	f004 fab4 	bl	800cc62 <k_work_submit_to_queue>
}
 80086fa:	bd08      	pop	{r3, pc}
 80086fc:	20000830 	.word	0x20000830

08008700 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8008700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008702:	b089      	sub	sp, #36	; 0x24
 8008704:	4604      	mov	r4, r0
 8008706:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8008708:	2000      	movs	r0, #0
 800870a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800870e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008712:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 8008716:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800871a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800871e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 8008722:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 8008726:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800872a:	b1fd      	cbz	r5, 800876c <k_work_queue_start+0x6c>
 800872c:	7928      	ldrb	r0, [r5, #4]
 800872e:	b9f8      	cbnz	r0, 8008770 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8008730:	2001      	movs	r0, #1
	*flagp = flags;
 8008732:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8008736:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800873a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800873e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008742:	2000      	movs	r0, #0
 8008744:	9004      	str	r0, [sp, #16]
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9001      	str	r0, [sp, #4]
 800874c:	9400      	str	r4, [sp, #0]
 800874e:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <k_work_queue_start+0x78>)
 8008750:	4620      	mov	r0, r4
 8008752:	f004 fa34 	bl	800cbbe <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8008756:	b125      	cbz	r5, 8008762 <k_work_queue_start+0x62>
 8008758:	6829      	ldr	r1, [r5, #0]
 800875a:	b111      	cbz	r1, 8008762 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800875c:	4620      	mov	r0, r4
 800875e:	f004 fa1a 	bl	800cb96 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8008762:	4620      	mov	r0, r4
 8008764:	f004 fa1c 	bl	800cba0 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8008768:	b009      	add	sp, #36	; 0x24
 800876a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800876c:	2001      	movs	r0, #1
 800876e:	e7e0      	b.n	8008732 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 8008770:	f240 1001 	movw	r0, #257	; 0x101
 8008774:	e7dd      	b.n	8008732 <k_work_queue_start+0x32>
 8008776:	bf00      	nop
 8008778:	08008601 	.word	0x08008601

0800877c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008780:	bf08      	it	eq
 8008782:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008786:	d100      	bne.n	800878a <add_thread_timeout+0xe>
 8008788:	4770      	bx	lr
{
 800878a:	b508      	push	{r3, lr}
 800878c:	4902      	ldr	r1, [pc, #8]	; (8008798 <add_thread_timeout+0x1c>)
 800878e:	3018      	adds	r0, #24
 8008790:	f000 fc4a 	bl	8009028 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 8008794:	bd08      	pop	{r3, pc}
 8008796:	bf00      	nop
 8008798:	0800cdc7 	.word	0x0800cdc7

0800879c <z_reset_time_slice>:
{
 800879c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800879e:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <z_reset_time_slice+0x24>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	b903      	cbnz	r3, 80087a6 <z_reset_time_slice+0xa>
}
 80087a4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80087a6:	f7ff f8bd 	bl	8007924 <sys_clock_elapsed>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4a04      	ldr	r2, [pc, #16]	; (80087c0 <z_reset_time_slice+0x24>)
 80087ae:	6810      	ldr	r0, [r2, #0]
 80087b0:	4403      	add	r3, r0
 80087b2:	4a04      	ldr	r2, [pc, #16]	; (80087c4 <z_reset_time_slice+0x28>)
 80087b4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80087b6:	2100      	movs	r1, #0
 80087b8:	f004 fca3 	bl	800d102 <z_set_timeout_expiry>
}
 80087bc:	e7f2      	b.n	80087a4 <z_reset_time_slice+0x8>
 80087be:	bf00      	nop
 80087c0:	20000e60 	.word	0x20000e60
 80087c4:	20000e1c 	.word	0x20000e1c

080087c8 <k_sched_time_slice_set>:
{
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 80087ce:	2300      	movs	r3, #0
	__asm__ volatile(
 80087d0:	f04f 0210 	mov.w	r2, #16
 80087d4:	f3ef 8611 	mrs	r6, BASEPRI
 80087d8:	f382 8812 	msr	BASEPRI_MAX, r2
 80087dc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80087e0:	e00c      	b.n	80087fc <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	bfb8      	it	lt
 80087e6:	2302      	movlt	r3, #2
 80087e8:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <k_sched_time_slice_set+0x50>)
 80087ec:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 80087ee:	f7ff ffd5 	bl	800879c <z_reset_time_slice>
	__asm__ volatile(
 80087f2:	f386 8811 	msr	BASEPRI, r6
 80087f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80087fa:	2301      	movs	r3, #1
 80087fc:	b953      	cbnz	r3, 8008814 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 80087fe:	4b07      	ldr	r3, [pc, #28]	; (800881c <k_sched_time_slice_set+0x54>)
 8008800:	2200      	movs	r2, #0
 8008802:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8008804:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008808:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800880a:	4a05      	ldr	r2, [pc, #20]	; (8008820 <k_sched_time_slice_set+0x58>)
 800880c:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800880e:	2c00      	cmp	r4, #0
 8008810:	dce7      	bgt.n	80087e2 <k_sched_time_slice_set+0x1a>
 8008812:	e7ea      	b.n	80087ea <k_sched_time_slice_set+0x22>
}
 8008814:	bd70      	pop	{r4, r5, r6, pc}
 8008816:	bf00      	nop
 8008818:	20000e5c 	.word	0x20000e5c
 800881c:	20000e1c 	.word	0x20000e1c
 8008820:	20000e60 	.word	0x20000e60

08008824 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8008824:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8008826:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008828:	b921      	cbnz	r1, 8008834 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882a:	f3ef 8305 	mrs	r3, IPSR
 800882e:	b913      	cbnz	r3, 8008836 <z_reschedule+0x12>
 8008830:	2101      	movs	r1, #1
 8008832:	e000      	b.n	8008836 <z_reschedule+0x12>
 8008834:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8008836:	f011 0f01 	tst.w	r1, #1
 800883a:	d007      	beq.n	800884c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <z_reschedule+0x34>)
 800883e:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8008840:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8008842:	429a      	cmp	r2, r3
 8008844:	d002      	beq.n	800884c <z_reschedule+0x28>
	ret = arch_swap(key);
 8008846:	f7fb fa59 	bl	8003cfc <arch_swap>
		z_swap(lock, key);
 800884a:	e003      	b.n	8008854 <z_reschedule+0x30>
 800884c:	f380 8811 	msr	BASEPRI, r0
 8008850:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8008854:	bd08      	pop	{r3, pc}
 8008856:	bf00      	nop
 8008858:	20000e1c 	.word	0x20000e1c

0800885c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800885c:	2300      	movs	r3, #0
	__asm__ volatile(
 800885e:	f04f 0210 	mov.w	r2, #16
 8008862:	f3ef 8111 	mrs	r1, BASEPRI
 8008866:	f382 8812 	msr	BASEPRI_MAX, r2
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	e009      	b.n	8008884 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <k_sched_lock+0x30>)
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	7bd3      	ldrb	r3, [r2, #15]
 8008876:	3b01      	subs	r3, #1
 8008878:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800887a:	f381 8811 	msr	BASEPRI, r1
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	2301      	movs	r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f3      	beq.n	8008870 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	20000e1c 	.word	0x20000e1c

08008890 <update_cache>:
{
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8008894:	480f      	ldr	r0, [pc, #60]	; (80088d4 <update_cache+0x44>)
 8008896:	f004 fa73 	bl	800cd80 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800889a:	4605      	mov	r5, r0
 800889c:	b170      	cbz	r0, 80088bc <update_cache+0x2c>
	if (preempt_ok != 0) {
 800889e:	b984      	cbnz	r4, 80088c2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 80088a0:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <update_cache+0x48>)
 80088a2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 80088a4:	7b5a      	ldrb	r2, [r3, #13]
 80088a6:	f012 0f1f 	tst.w	r2, #31
 80088aa:	d10a      	bne.n	80088c2 <update_cache+0x32>
	return node->next != NULL;
 80088ac:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80088ae:	b942      	cbnz	r2, 80088c2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80088b0:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 80088b2:	2a7f      	cmp	r2, #127	; 0x7f
 80088b4:	d905      	bls.n	80088c2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 80088b6:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <update_cache+0x48>)
 80088b8:	6193      	str	r3, [r2, #24]
 80088ba:	e00a      	b.n	80088d2 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80088bc:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <update_cache+0x48>)
 80088be:	68dd      	ldr	r5, [r3, #12]
 80088c0:	e7ed      	b.n	800889e <update_cache+0xe>
		if (thread != _current) {
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <update_cache+0x48>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	42ab      	cmp	r3, r5
 80088c8:	d001      	beq.n	80088ce <update_cache+0x3e>
			z_reset_time_slice();
 80088ca:	f7ff ff67 	bl	800879c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80088ce:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <update_cache+0x48>)
 80088d0:	619d      	str	r5, [r3, #24]
}
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000e38 	.word	0x20000e38
 80088d8:	20000e1c 	.word	0x20000e1c

080088dc <move_thread_to_end_of_prio_q>:
{
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 80088e0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 80088e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	db28      	blt.n	800893c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 80088ea:	7b6b      	ldrb	r3, [r5, #13]
 80088ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088f0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 80088f2:	4b1a      	ldr	r3, [pc, #104]	; (800895c <move_thread_to_end_of_prio_q+0x80>)
 80088f4:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80088f8:	429c      	cmp	r4, r3
 80088fa:	d02d      	beq.n	8008958 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80088fc:	b16c      	cbz	r4, 800891a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f004 f9d2 	bl	800ccaa <z_sched_prio_cmp>
 8008906:	2800      	cmp	r0, #0
 8008908:	dc20      	bgt.n	800894c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800890a:	b134      	cbz	r4, 800891a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <move_thread_to_end_of_prio_q+0x80>)
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	429c      	cmp	r4, r3
 8008912:	d002      	beq.n	800891a <move_thread_to_end_of_prio_q+0x3e>
 8008914:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008916:	2c00      	cmp	r4, #0
 8008918:	d1f0      	bne.n	80088fc <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800891a:	4b10      	ldr	r3, [pc, #64]	; (800895c <move_thread_to_end_of_prio_q+0x80>)
 800891c:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800891e:	f103 011c 	add.w	r1, r3, #28
 8008922:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8008924:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8008926:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8008928:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <move_thread_to_end_of_prio_q+0x80>)
 800892c:	6898      	ldr	r0, [r3, #8]
 800892e:	42a8      	cmp	r0, r5
 8008930:	bf14      	ite	ne
 8008932:	2000      	movne	r0, #0
 8008934:	2001      	moveq	r0, #1
 8008936:	f7ff ffab 	bl	8008890 <update_cache>
}
 800893a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800893c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008940:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8008942:	4601      	mov	r1, r0
 8008944:	4806      	ldr	r0, [pc, #24]	; (8008960 <move_thread_to_end_of_prio_q+0x84>)
 8008946:	f004 f9ef 	bl	800cd28 <z_priq_dumb_remove>
}
 800894a:	e7ce      	b.n	80088ea <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800894c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800894e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8008950:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8008952:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008954:	6065      	str	r5, [r4, #4]
}
 8008956:	e7e8      	b.n	800892a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008958:	2400      	movs	r4, #0
 800895a:	e7cf      	b.n	80088fc <move_thread_to_end_of_prio_q+0x20>
 800895c:	20000e1c 	.word	0x20000e1c
 8008960:	20000e38 	.word	0x20000e38

08008964 <z_time_slice>:
{
 8008964:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008966:	f04f 0310 	mov.w	r3, #16
 800896a:	f3ef 8411 	mrs	r4, BASEPRI
 800896e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008972:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8008976:	4b21      	ldr	r3, [pc, #132]	; (80089fc <z_time_slice+0x98>)
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <z_time_slice+0x9c>)
 800897c:	6812      	ldr	r2, [r2, #0]
 800897e:	4293      	cmp	r3, r2
 8008980:	d017      	beq.n	80089b2 <z_time_slice+0x4e>
	pending_current = NULL;
 8008982:	4a1f      	ldr	r2, [pc, #124]	; (8008a00 <z_time_slice+0x9c>)
 8008984:	2100      	movs	r1, #0
 8008986:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8008988:	4a1e      	ldr	r2, [pc, #120]	; (8008a04 <z_time_slice+0xa0>)
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	b372      	cbz	r2, 80089ec <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800898e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8008990:	2a7f      	cmp	r2, #127	; 0x7f
 8008992:	d815      	bhi.n	80089c0 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 8008994:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 8008996:	f012 0f1f 	tst.w	r2, #31
 800899a:	d11b      	bne.n	80089d4 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800899c:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80089a0:	4a19      	ldr	r2, [pc, #100]	; (8008a08 <z_time_slice+0xa4>)
 80089a2:	6812      	ldr	r2, [r2, #0]
 80089a4:	4291      	cmp	r1, r2
 80089a6:	db17      	blt.n	80089d8 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 80089a8:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <z_time_slice+0xa8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d016      	beq.n	80089dc <z_time_slice+0x78>
 80089ae:	2201      	movs	r2, #1
 80089b0:	e007      	b.n	80089c2 <z_time_slice+0x5e>
		z_reset_time_slice();
 80089b2:	f7ff fef3 	bl	800879c <z_reset_time_slice>
	__asm__ volatile(
 80089b6:	f384 8811 	msr	BASEPRI, r4
 80089ba:	f3bf 8f6f 	isb	sy
		return;
 80089be:	e01c      	b.n	80089fa <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 80089c0:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 80089c2:	b19a      	cbz	r2, 80089ec <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 80089c4:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <z_time_slice+0x98>)
 80089c6:	6912      	ldr	r2, [r2, #16]
 80089c8:	4282      	cmp	r2, r0
 80089ca:	dd09      	ble.n	80089e0 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 80089cc:	1a10      	subs	r0, r2, r0
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <z_time_slice+0x98>)
 80089d0:	6118      	str	r0, [r3, #16]
 80089d2:	e00e      	b.n	80089f2 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 80089d4:	2200      	movs	r2, #0
 80089d6:	e7f4      	b.n	80089c2 <z_time_slice+0x5e>
 80089d8:	2200      	movs	r2, #0
 80089da:	e7f2      	b.n	80089c2 <z_time_slice+0x5e>
 80089dc:	2200      	movs	r2, #0
 80089de:	e7f0      	b.n	80089c2 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff ff7b 	bl	80088dc <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 80089e6:	f7ff fed9 	bl	800879c <z_reset_time_slice>
 80089ea:	e002      	b.n	80089f2 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <z_time_slice+0x98>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	611a      	str	r2, [r3, #16]
 80089f2:	f384 8811 	msr	BASEPRI, r4
 80089f6:	f3bf 8f6f 	isb	sy
}
 80089fa:	bd10      	pop	{r4, pc}
 80089fc:	20000e1c 	.word	0x20000e1c
 8008a00:	20000e54 	.word	0x20000e54
 8008a04:	20000e60 	.word	0x20000e60
 8008a08:	20000e5c 	.word	0x20000e5c
 8008a0c:	20000728 	.word	0x20000728

08008a10 <ready_thread>:
{
 8008a10:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 8008a12:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008a14:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	db2d      	blt.n	8008a78 <ready_thread+0x68>
 8008a1c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008a1e:	f013 0f1f 	tst.w	r3, #31
 8008a22:	d105      	bne.n	8008a30 <ready_thread+0x20>
	return node->next != NULL;
 8008a24:	6982      	ldr	r2, [r0, #24]
 8008a26:	b10a      	cbz	r2, 8008a2c <ready_thread+0x1c>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	e002      	b.n	8008a32 <ready_thread+0x22>
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	e000      	b.n	8008a32 <ready_thread+0x22>
 8008a30:	2200      	movs	r2, #0
 8008a32:	b30a      	cbz	r2, 8008a78 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a38:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <ready_thread+0x7c>)
 8008a3c:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008a40:	429d      	cmp	r5, r3
 8008a42:	d020      	beq.n	8008a86 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a44:	b16d      	cbz	r5, 8008a62 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008a46:	4629      	mov	r1, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f004 f92e 	bl	800ccaa <z_sched_prio_cmp>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	dc13      	bgt.n	8008a7a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008a52:	b135      	cbz	r5, 8008a62 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8008a54:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <ready_thread+0x7c>)
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	429d      	cmp	r5, r3
 8008a5a:	d002      	beq.n	8008a62 <ready_thread+0x52>
 8008a5c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	d1f0      	bne.n	8008a44 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 8008a62:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <ready_thread+0x7c>)
 8008a64:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008a66:	f103 011c 	add.w	r1, r3, #28
 8008a6a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8008a6c:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8008a6e:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008a70:	621c      	str	r4, [r3, #32]
		update_cache(0);
 8008a72:	2000      	movs	r0, #0
 8008a74:	f7ff ff0c 	bl	8008890 <update_cache>
}
 8008a78:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8008a7a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8008a7c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8008a7e:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8008a80:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008a82:	606c      	str	r4, [r5, #4]
}
 8008a84:	e7f5      	b.n	8008a72 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a86:	2500      	movs	r5, #0
 8008a88:	e7dc      	b.n	8008a44 <ready_thread+0x34>
 8008a8a:	bf00      	nop
 8008a8c:	20000e1c 	.word	0x20000e1c

08008a90 <z_sched_start>:
{
 8008a90:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008a92:	f04f 0310 	mov.w	r3, #16
 8008a96:	f3ef 8411 	mrs	r4, BASEPRI
 8008a9a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008a9e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8008aa2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8008aa4:	f013 0f04 	tst.w	r3, #4
 8008aa8:	d104      	bne.n	8008ab4 <z_sched_start+0x24>
	__asm__ volatile(
 8008aaa:	f384 8811 	msr	BASEPRI, r4
 8008aae:	f3bf 8f6f 	isb	sy
}
 8008ab2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008ab4:	f023 0304 	bic.w	r3, r3, #4
 8008ab8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8008aba:	f7ff ffa9 	bl	8008a10 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <z_sched_start+0x38>)
 8008ac2:	f7ff feaf 	bl	8008824 <z_reschedule>
 8008ac6:	e7f4      	b.n	8008ab2 <z_sched_start+0x22>
 8008ac8:	20000e58 	.word	0x20000e58

08008acc <unready_thread>:
{
 8008acc:	b510      	push	{r4, lr}
 8008ace:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8008ad0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8008ad2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	db08      	blt.n	8008aec <unready_thread+0x20>
	update_cache(thread == _current);
 8008ada:	4b08      	ldr	r3, [pc, #32]	; (8008afc <unready_thread+0x30>)
 8008adc:	6898      	ldr	r0, [r3, #8]
 8008ade:	42a0      	cmp	r0, r4
 8008ae0:	bf14      	ite	ne
 8008ae2:	2000      	movne	r0, #0
 8008ae4:	2001      	moveq	r0, #1
 8008ae6:	f7ff fed3 	bl	8008890 <update_cache>
}
 8008aea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008af0:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8008af2:	4601      	mov	r1, r0
 8008af4:	4802      	ldr	r0, [pc, #8]	; (8008b00 <unready_thread+0x34>)
 8008af6:	f004 f917 	bl	800cd28 <z_priq_dumb_remove>
}
 8008afa:	e7ee      	b.n	8008ada <unready_thread+0xe>
 8008afc:	20000e1c 	.word	0x20000e1c
 8008b00:	20000e38 	.word	0x20000e38

08008b04 <z_pend_curr>:
{
 8008b04:	b510      	push	{r4, lr}
 8008b06:	460c      	mov	r4, r1
 8008b08:	4611      	mov	r1, r2
	pending_current = _current;
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <z_pend_curr+0x20>)
 8008b0c:	6898      	ldr	r0, [r3, #8]
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <z_pend_curr+0x24>)
 8008b10:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8008b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b16:	f004 f9b8 	bl	800ce8a <pend>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7fb f8ee 	bl	8003cfc <arch_swap>
}
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	20000e1c 	.word	0x20000e1c
 8008b28:	20000e54 	.word	0x20000e54

08008b2c <z_set_prio>:
{
 8008b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b30:	4604      	mov	r4, r0
 8008b32:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8008b34:	2300      	movs	r3, #0
	__asm__ volatile(
 8008b36:	f04f 0210 	mov.w	r2, #16
 8008b3a:	f3ef 8811 	mrs	r8, BASEPRI
 8008b3e:	f382 8812 	msr	BASEPRI_MAX, r2
 8008b42:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8008b46:	461f      	mov	r7, r3
 8008b48:	e008      	b.n	8008b5c <z_set_prio+0x30>
		if (need_sched) {
 8008b4a:	f012 0701 	ands.w	r7, r2, #1
 8008b4e:	d111      	bne.n	8008b74 <z_set_prio+0x48>
			thread->base.prio = prio;
 8008b50:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8008b52:	f388 8811 	msr	BASEPRI, r8
 8008b56:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d13d      	bne.n	8008bde <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8008b62:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008b64:	f013 0f1f 	tst.w	r3, #31
 8008b68:	d1ef      	bne.n	8008b4a <z_set_prio+0x1e>
	return node->next != NULL;
 8008b6a:	69a1      	ldr	r1, [r4, #24]
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d1ec      	bne.n	8008b4a <z_set_prio+0x1e>
 8008b70:	2201      	movs	r2, #1
 8008b72:	e7ea      	b.n	8008b4a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b78:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8008b7a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008be4 <z_set_prio+0xb8>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4648      	mov	r0, r9
 8008b82:	f004 f8d1 	bl	800cd28 <z_priq_dumb_remove>
				thread->base.prio = prio;
 8008b86:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008b88:	7b63      	ldrb	r3, [r4, #13]
 8008b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b8e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8008b90:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008b94:	454d      	cmp	r5, r9
 8008b96:	d020      	beq.n	8008bda <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008b98:	b16d      	cbz	r5, 8008bb6 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f004 f884 	bl	800ccaa <z_sched_prio_cmp>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	dc13      	bgt.n	8008bce <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008ba6:	b135      	cbz	r5, 8008bb6 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <z_set_prio+0xbc>)
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	429d      	cmp	r5, r3
 8008bae:	d002      	beq.n	8008bb6 <z_set_prio+0x8a>
 8008bb0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008bb2:	2d00      	cmp	r5, #0
 8008bb4:	d1f0      	bne.n	8008b98 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <z_set_prio+0xbc>)
 8008bb8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008bba:	f103 011c 	add.w	r1, r3, #28
 8008bbe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8008bc0:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8008bc2:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008bc4:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	f7ff fe62 	bl	8008890 <update_cache>
 8008bcc:	e7c1      	b.n	8008b52 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8008bce:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8008bd0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8008bd2:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8008bd4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008bd6:	606c      	str	r4, [r5, #4]
}
 8008bd8:	e7f5      	b.n	8008bc6 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008bda:	2500      	movs	r5, #0
 8008bdc:	e7dc      	b.n	8008b98 <z_set_prio+0x6c>
}
 8008bde:	4638      	mov	r0, r7
 8008be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be4:	20000e38 	.word	0x20000e38
 8008be8:	20000e1c 	.word	0x20000e1c

08008bec <z_impl_k_thread_suspend>:
{
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8008bf0:	3018      	adds	r0, #24
 8008bf2:	f004 fa4f 	bl	800d094 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8008bf6:	2300      	movs	r3, #0
	__asm__ volatile(
 8008bf8:	f04f 0210 	mov.w	r2, #16
 8008bfc:	f3ef 8511 	mrs	r5, BASEPRI
 8008c00:	f382 8812 	msr	BASEPRI_MAX, r2
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	e010      	b.n	8008c2c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008c0a:	7b63      	ldrb	r3, [r4, #13]
 8008c0c:	f043 0310 	orr.w	r3, r3, #16
 8008c10:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <z_impl_k_thread_suspend+0x7c>)
 8008c14:	6898      	ldr	r0, [r3, #8]
 8008c16:	42a0      	cmp	r0, r4
 8008c18:	bf14      	ite	ne
 8008c1a:	2000      	movne	r0, #0
 8008c1c:	2001      	moveq	r0, #1
 8008c1e:	f7ff fe37 	bl	8008890 <update_cache>
	__asm__ volatile(
 8008c22:	f385 8811 	msr	BASEPRI, r5
 8008c26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	b963      	cbnz	r3, 8008c48 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 8008c2e:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 8008c30:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dae8      	bge.n	8008c0a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c3c:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 8008c3e:	4621      	mov	r1, r4
 8008c40:	480a      	ldr	r0, [pc, #40]	; (8008c6c <z_impl_k_thread_suspend+0x80>)
 8008c42:	f004 f871 	bl	800cd28 <z_priq_dumb_remove>
}
 8008c46:	e7e0      	b.n	8008c0a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <z_impl_k_thread_suspend+0x7c>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	d000      	beq.n	8008c52 <z_impl_k_thread_suspend+0x66>
}
 8008c50:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8008c52:	f04f 0310 	mov.w	r3, #16
 8008c56:	f3ef 8011 	mrs	r0, BASEPRI
 8008c5a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008c5e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8008c62:	f004 f84c 	bl	800ccfe <z_reschedule_irqlock>
 8008c66:	e7f3      	b.n	8008c50 <z_impl_k_thread_suspend+0x64>
 8008c68:	20000e1c 	.word	0x20000e1c
 8008c6c:	20000e38 	.word	0x20000e38

08008c70 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8008c70:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8008c72:	2300      	movs	r3, #0
 8008c74:	f04f 0210 	mov.w	r2, #16
 8008c78:	f3ef 8411 	mrs	r4, BASEPRI
 8008c7c:	f382 8812 	msr	BASEPRI_MAX, r2
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	e00c      	b.n	8008ca0 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8008c86:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <k_sched_unlock+0x4c>)
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	7bd3      	ldrb	r3, [r2, #15]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8008c90:	2000      	movs	r0, #0
 8008c92:	f7ff fdfd 	bl	8008890 <update_cache>
	__asm__ volatile(
 8008c96:	f384 8811 	msr	BASEPRI, r4
 8008c9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0f0      	beq.n	8008c86 <k_sched_unlock+0x16>
	__asm__ volatile(
 8008ca4:	f04f 0310 	mov.w	r3, #16
 8008ca8:	f3ef 8011 	mrs	r0, BASEPRI
 8008cac:	f383 8812 	msr	BASEPRI_MAX, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f004 f823 	bl	800ccfe <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000e1c 	.word	0x20000e1c

08008cc0 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8008cc0:	7b43      	ldrb	r3, [r0, #13]
 8008cc2:	f013 0f08 	tst.w	r3, #8
 8008cc6:	d142      	bne.n	8008d4e <end_thread+0x8e>
{
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8008ccc:	f043 0308 	orr.w	r3, r3, #8
 8008cd0:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 8008cd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cd6:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8008cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cdc:	d12b      	bne.n	8008d36 <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8008cde:	68ab      	ldr	r3, [r5, #8]
 8008ce0:	b15b      	cbz	r3, 8008cfa <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f003 ffdf 	bl	800cca6 <pended_on_thread>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f004 f81d 	bl	800cd28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8008cee:	7b6b      	ldrb	r3, [r5, #13]
 8008cf0:	f023 0302 	bic.w	r3, r3, #2
 8008cf4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60ab      	str	r3, [r5, #8]
 8008cfa:	f105 0018 	add.w	r0, r5, #24
 8008cfe:	f004 f9c9 	bl	800d094 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 8008d02:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8008d04:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008d06:	42ac      	cmp	r4, r5
 8008d08:	d01d      	beq.n	8008d46 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008d0a:	b1e4      	cbz	r4, 8008d46 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f003 ffca 	bl	800cca6 <pended_on_thread>
 8008d12:	4621      	mov	r1, r4
 8008d14:	f004 f808 	bl	800cd28 <z_priq_dumb_remove>
 8008d18:	7b63      	ldrb	r3, [r4, #13]
 8008d1a:	f023 0302 	bic.w	r3, r3, #2
 8008d1e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8008d20:	2600      	movs	r6, #0
 8008d22:	60a6      	str	r6, [r4, #8]
 8008d24:	f104 0018 	add.w	r0, r4, #24
 8008d28:	f004 f9b4 	bl	800d094 <z_abort_timeout>
 8008d2c:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff fe6e 	bl	8008a10 <ready_thread>
 8008d34:	e7e6      	b.n	8008d04 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d3a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4804      	ldr	r0, [pc, #16]	; (8008d50 <end_thread+0x90>)
 8008d40:	f003 fff2 	bl	800cd28 <z_priq_dumb_remove>
}
 8008d44:	e7cb      	b.n	8008cde <end_thread+0x1e>
		update_cache(1);
 8008d46:	2001      	movs	r0, #1
 8008d48:	f7ff fda2 	bl	8008890 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
 8008d4e:	4770      	bx	lr
 8008d50:	20000e38 	.word	0x20000e38

08008d54 <z_sched_init>:
{
 8008d54:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <z_sched_init+0x18>)
 8008d58:	f103 021c 	add.w	r2, r3, #28
 8008d5c:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 8008d5e:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8008d60:	2100      	movs	r1, #0
 8008d62:	4608      	mov	r0, r1
 8008d64:	f7ff fd30 	bl	80087c8 <k_sched_time_slice_set>
}
 8008d68:	bd08      	pop	{r3, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000e1c 	.word	0x20000e1c

08008d70 <z_impl_k_yield>:
{
 8008d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d72:	f04f 0310 	mov.w	r3, #16
 8008d76:	f3ef 8611 	mrs	r6, BASEPRI
 8008d7a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008d7e:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 8008d82:	4c1c      	ldr	r4, [pc, #112]	; (8008df4 <z_impl_k_yield+0x84>)
 8008d84:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008d86:	7b4b      	ldrb	r3, [r1, #13]
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 8008d8e:	f104 071c 	add.w	r7, r4, #28
 8008d92:	4638      	mov	r0, r7
 8008d94:	f003 ffc8 	bl	800cd28 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8008d98:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008d9a:	7b6b      	ldrb	r3, [r5, #13]
 8008d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008da0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8008da2:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008da4:	42bc      	cmp	r4, r7
 8008da6:	d023      	beq.n	8008df0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008da8:	b16c      	cbz	r4, 8008dc6 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f003 ff7c 	bl	800ccaa <z_sched_prio_cmp>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	dc16      	bgt.n	8008de4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008db6:	b134      	cbz	r4, 8008dc6 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8008db8:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <z_impl_k_yield+0x84>)
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	d002      	beq.n	8008dc6 <z_impl_k_yield+0x56>
 8008dc0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008dc2:	2c00      	cmp	r4, #0
 8008dc4:	d1f0      	bne.n	8008da8 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <z_impl_k_yield+0x84>)
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008dca:	f103 011c 	add.w	r1, r3, #28
 8008dce:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8008dd0:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8008dd2:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8008dd4:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	f7ff fd5a 	bl	8008890 <update_cache>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7fa ff8d 	bl	8003cfc <arch_swap>
}
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8008de4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8008de6:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8008de8:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8008dea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008dec:	6065      	str	r5, [r4, #4]
}
 8008dee:	e7f2      	b.n	8008dd6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008df0:	2400      	movs	r4, #0
 8008df2:	e7d9      	b.n	8008da8 <z_impl_k_yield+0x38>
 8008df4:	20000e1c 	.word	0x20000e1c

08008df8 <z_tick_sleep>:
{
 8008df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8008dfc:	ea50 0301 	orrs.w	r3, r0, r1
 8008e00:	d038      	beq.n	8008e74 <z_tick_sleep+0x7c>
 8008e02:	4604      	mov	r4, r0
 8008e04:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8008e06:	f06f 0301 	mvn.w	r3, #1
 8008e0a:	1a1b      	subs	r3, r3, r0
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e10:	eb62 0201 	sbc.w	r2, r2, r1
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	f172 0300 	sbcs.w	r3, r2, #0
 8008e1a:	db2f      	blt.n	8008e7c <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8008e1c:	f06f 0501 	mvn.w	r5, #1
 8008e20:	1a2d      	subs	r5, r5, r0
 8008e22:	f04f 0310 	mov.w	r3, #16
 8008e26:	f3ef 8811 	mrs	r8, BASEPRI
 8008e2a:	f383 8812 	msr	BASEPRI_MAX, r3
 8008e2e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8008e32:	4f14      	ldr	r7, [pc, #80]	; (8008e84 <z_tick_sleep+0x8c>)
 8008e34:	68b8      	ldr	r0, [r7, #8]
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <z_tick_sleep+0x90>)
 8008e38:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8008e3a:	f7ff fe47 	bl	8008acc <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8008e3e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008e40:	4622      	mov	r2, r4
 8008e42:	4633      	mov	r3, r6
 8008e44:	4911      	ldr	r1, [pc, #68]	; (8008e8c <z_tick_sleep+0x94>)
 8008e46:	3018      	adds	r0, #24
 8008e48:	f000 f8ee 	bl	8009028 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8008e4c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008e4e:	7b53      	ldrb	r3, [r2, #13]
 8008e50:	f043 0310 	orr.w	r3, r3, #16
 8008e54:	7353      	strb	r3, [r2, #13]
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7fa ff50 	bl	8003cfc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8008e5c:	f004 f97c 	bl	800d158 <sys_clock_tick_get_32>
 8008e60:	1a28      	subs	r0, r5, r0
 8008e62:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8008e66:	2801      	cmp	r0, #1
 8008e68:	f173 0300 	sbcs.w	r3, r3, #0
 8008e6c:	da00      	bge.n	8008e70 <z_tick_sleep+0x78>
	return 0;
 8008e6e:	2000      	movs	r0, #0
}
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8008e74:	f7ff ff7c 	bl	8008d70 <z_impl_k_yield>
		return 0;
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7f9      	b.n	8008e70 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8008e7c:	f004 f96c 	bl	800d158 <sys_clock_tick_get_32>
 8008e80:	1905      	adds	r5, r0, r4
 8008e82:	e7ce      	b.n	8008e22 <z_tick_sleep+0x2a>
 8008e84:	20000e1c 	.word	0x20000e1c
 8008e88:	20000e54 	.word	0x20000e54
 8008e8c:	0800cdc7 	.word	0x0800cdc7

08008e90 <z_impl_k_sleep>:
{
 8008e90:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008e92:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008e96:	bf08      	it	eq
 8008e98:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8008e9c:	d007      	beq.n	8008eae <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8008e9e:	f7ff ffab 	bl	8008df8 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	17c1      	asrs	r1, r0, #31
 8008ea8:	f7f7 fd0c 	bl	80008c4 <__aeabi_uldivmod>
}
 8008eac:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8008eae:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <z_impl_k_sleep+0x2c>)
 8008eb0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8008eb2:	f7ff fe9b 	bl	8008bec <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eba:	e7f7      	b.n	8008eac <z_impl_k_sleep+0x1c>
 8008ebc:	20000e1c 	.word	0x20000e1c

08008ec0 <z_impl_z_current_get>:
}
 8008ec0:	4b01      	ldr	r3, [pc, #4]	; (8008ec8 <z_impl_z_current_get+0x8>)
 8008ec2:	6898      	ldr	r0, [r3, #8]
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	20000e1c 	.word	0x20000e1c

08008ecc <z_impl_k_is_preempt_thread>:
 8008ecc:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8008ed0:	b933      	cbnz	r3, 8008ee0 <z_impl_k_is_preempt_thread+0x14>
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <z_impl_k_is_preempt_thread+0x1c>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8008ed6:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8008ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8008eda:	d803      	bhi.n	8008ee4 <z_impl_k_is_preempt_thread+0x18>
 8008edc:	2001      	movs	r0, #1
 8008ede:	4770      	bx	lr
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	4770      	bx	lr
 8008ee4:	2000      	movs	r0, #0
}
 8008ee6:	4770      	bx	lr
 8008ee8:	20000e1c 	.word	0x20000e1c

08008eec <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	f04f 0310 	mov.w	r3, #16
 8008ef2:	f3ef 8511 	mrs	r5, BASEPRI
 8008ef6:	f383 8812 	msr	BASEPRI_MAX, r3
 8008efa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8008efe:	7b43      	ldrb	r3, [r0, #13]
 8008f00:	f013 0f08 	tst.w	r3, #8
 8008f04:	d004      	beq.n	8008f10 <z_thread_abort+0x24>
	__asm__ volatile(
 8008f06:	f385 8811 	msr	BASEPRI, r5
 8008f0a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	4604      	mov	r4, r0
	end_thread(thread);
 8008f12:	f7ff fed5 	bl	8008cc0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <z_thread_abort+0x4c>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d004      	beq.n	8008f28 <z_thread_abort+0x3c>
 8008f1e:	f385 8811 	msr	BASEPRI, r5
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	e7f2      	b.n	8008f0e <z_thread_abort+0x22>
 8008f28:	f3ef 8305 	mrs	r3, IPSR
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1f6      	bne.n	8008f1e <z_thread_abort+0x32>
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7fa fee3 	bl	8003cfc <arch_swap>
	return ret;
 8008f36:	e7f2      	b.n	8008f1e <z_thread_abort+0x32>
 8008f38:	20000e1c 	.word	0x20000e1c

08008f3c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8008f3c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8008f40:	b083      	sub	sp, #12
 8008f42:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8008f44:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8008f48:	e9cd bc00 	strd	fp, ip, [sp]
 8008f4c:	f7ff fdda 	bl	8008b04 <z_pend_curr>

	if (data != NULL) {
 8008f50:	b11c      	cbz	r4, 8008f5a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 8008f52:	4b03      	ldr	r3, [pc, #12]	; (8008f60 <z_sched_wait+0x24>)
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8008f5a:	b003      	add	sp, #12
 8008f5c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 8008f60:	20000e1c 	.word	0x20000e1c

08008f64 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8008f64:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8008f66:	4806      	ldr	r0, [pc, #24]	; (8008f80 <z_data_copy+0x1c>)
 8008f68:	4a06      	ldr	r2, [pc, #24]	; (8008f84 <z_data_copy+0x20>)
 8008f6a:	1a12      	subs	r2, r2, r0
 8008f6c:	4906      	ldr	r1, [pc, #24]	; (8008f88 <z_data_copy+0x24>)
 8008f6e:	f004 f9aa 	bl	800d2c6 <memcpy>
 8008f72:	4a06      	ldr	r2, [pc, #24]	; (8008f8c <z_data_copy+0x28>)
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <z_data_copy+0x2c>)
 8008f76:	4807      	ldr	r0, [pc, #28]	; (8008f94 <z_data_copy+0x30>)
 8008f78:	f004 f9a5 	bl	800d2c6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8008f7c:	bd08      	pop	{r3, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000000 	.word	0x20000000
 8008f84:	200004b4 	.word	0x200004b4
 8008f88:	0800f22c 	.word	0x0800f22c
 8008f8c:	00000000 	.word	0x00000000
 8008f90:	0800f22c 	.word	0x0800f22c
 8008f94:	20000000 	.word	0x20000000

08008f98 <first>:
	return list->head == list;
 8008f98:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <first+0x10>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008f9c:	4298      	cmp	r0, r3
 8008f9e:	d000      	beq.n	8008fa2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8008fa0:	4770      	bx	lr
 8008fa2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8008fa4:	e7fc      	b.n	8008fa0 <first+0x8>
 8008fa6:	bf00      	nop
 8008fa8:	200000b4 	.word	0x200000b4

08008fac <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008fac:	b130      	cbz	r0, 8008fbc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8008fae:	4a04      	ldr	r2, [pc, #16]	; (8008fc0 <next+0x14>)
 8008fb0:	6852      	ldr	r2, [r2, #4]
 8008fb2:	4290      	cmp	r0, r2
 8008fb4:	d001      	beq.n	8008fba <next+0xe>
 8008fb6:	6800      	ldr	r0, [r0, #0]
 8008fb8:	4770      	bx	lr
 8008fba:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200000b4 	.word	0x200000b4

08008fc4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8008fc4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <elapsed+0x14>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	b10b      	cbz	r3, 8008fd0 <elapsed+0xc>
 8008fcc:	2000      	movs	r0, #0
}
 8008fce:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008fd0:	f7fe fca8 	bl	8007924 <sys_clock_elapsed>
 8008fd4:	e7fb      	b.n	8008fce <elapsed+0xa>
 8008fd6:	bf00      	nop
 8008fd8:	20000e64 	.word	0x20000e64

08008fdc <next_timeout>:

static int32_t next_timeout(void)
{
 8008fdc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8008fde:	f7ff ffdb 	bl	8008f98 <first>
 8008fe2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8008fe4:	f7ff ffee 	bl	8008fc4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8008fe8:	b18c      	cbz	r4, 800900e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	6962      	ldr	r2, [r4, #20]
 8008fee:	1a1b      	subs	r3, r3, r0
 8008ff0:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	f172 0100 	sbcs.w	r1, r2, #0
 8008ffa:	db11      	blt.n	8009020 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009002:	f172 0300 	sbcs.w	r3, r2, #0
 8009006:	db04      	blt.n	8009012 <next_timeout+0x36>
 8009008:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800900c:	e001      	b.n	8009012 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 800900e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8009012:	4b04      	ldr	r3, [pc, #16]	; (8009024 <next_timeout+0x48>)
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	b113      	cbz	r3, 800901e <next_timeout+0x42>
 8009018:	4283      	cmp	r3, r0
 800901a:	da00      	bge.n	800901e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 800901c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800901e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8009020:	2000      	movs	r0, #0
 8009022:	e7f6      	b.n	8009012 <next_timeout+0x36>
 8009024:	20000e1c 	.word	0x20000e1c

08009028 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800902c:	bf08      	it	eq
 800902e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8009032:	d07f      	beq.n	8009134 <z_add_timeout+0x10c>
{
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009038:	4604      	mov	r4, r0
 800903a:	4691      	mov	r9, r2
 800903c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800903e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8009040:	2300      	movs	r3, #0
	__asm__ volatile(
 8009042:	f04f 0210 	mov.w	r2, #16
 8009046:	f3ef 8711 	mrs	r7, BASEPRI
 800904a:	f382 8812 	msr	BASEPRI_MAX, r2
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	e021      	b.n	8009098 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8009054:	f7ff ffb6 	bl	8008fc4 <elapsed>
 8009058:	eb19 0800 	adds.w	r8, r9, r0
 800905c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8009060:	f118 0301 	adds.w	r3, r8, #1
 8009064:	f140 0000 	adc.w	r0, r0, #0
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	6160      	str	r0, [r4, #20]
 800906c:	e038      	b.n	80090e0 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800906e:	1a51      	subs	r1, r2, r1
 8009070:	eb66 0303 	sbc.w	r3, r6, r3
 8009074:	6101      	str	r1, [r0, #16]
 8009076:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8009078:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800907a:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800907c:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800907e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009080:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8009082:	2800      	cmp	r0, #0
 8009084:	d040      	beq.n	8009108 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8009086:	f7ff ff87 	bl	8008f98 <first>
 800908a:	4284      	cmp	r4, r0
 800908c:	d043      	beq.n	8009116 <z_add_timeout+0xee>
	__asm__ volatile(
 800908e:	f387 8811 	msr	BASEPRI, r7
 8009092:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8009096:	2301      	movs	r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d149      	bne.n	8009130 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800909c:	f06f 0201 	mvn.w	r2, #1
 80090a0:	ebb2 0209 	subs.w	r2, r2, r9
 80090a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80090a8:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dbd1      	blt.n	8009054 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80090b0:	4b21      	ldr	r3, [pc, #132]	; (8009138 <z_add_timeout+0x110>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	eb19 0202 	adds.w	r2, r9, r2
 80090ba:	eb43 0305 	adc.w	r3, r3, r5
 80090be:	f06f 0801 	mvn.w	r8, #1
 80090c2:	ebb8 0802 	subs.w	r8, r8, r2
 80090c6:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 80090ca:	4641      	mov	r1, r8
 80090cc:	461a      	mov	r2, r3
 80090ce:	f1b8 0f01 	cmp.w	r8, #1
 80090d2:	f173 0300 	sbcs.w	r3, r3, #0
 80090d6:	da01      	bge.n	80090dc <z_add_timeout+0xb4>
 80090d8:	2101      	movs	r1, #1
 80090da:	2200      	movs	r2, #0
 80090dc:	6121      	str	r1, [r4, #16]
 80090de:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 80090e0:	f7ff ff5a 	bl	8008f98 <first>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0cc      	beq.n	8009082 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 80090e8:	6902      	ldr	r2, [r0, #16]
 80090ea:	6946      	ldr	r6, [r0, #20]
 80090ec:	6921      	ldr	r1, [r4, #16]
 80090ee:	6963      	ldr	r3, [r4, #20]
 80090f0:	4291      	cmp	r1, r2
 80090f2:	eb73 0c06 	sbcs.w	ip, r3, r6
 80090f6:	dbba      	blt.n	800906e <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 80090f8:	1a89      	subs	r1, r1, r2
 80090fa:	eb63 0306 	sbc.w	r3, r3, r6
 80090fe:	6121      	str	r1, [r4, #16]
 8009100:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8009102:	f7ff ff53 	bl	8008fac <next>
 8009106:	e7ed      	b.n	80090e4 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <z_add_timeout+0x114>)
 800910a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800910c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800910e:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8009110:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8009112:	605c      	str	r4, [r3, #4]
}
 8009114:	e7b7      	b.n	8009086 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8009116:	f7ff ff61 	bl	8008fdc <next_timeout>

			if (next_time == 0 ||
 800911a:	4603      	mov	r3, r0
 800911c:	b118      	cbz	r0, 8009126 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 800911e:	4a08      	ldr	r2, [pc, #32]	; (8009140 <z_add_timeout+0x118>)
 8009120:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8009122:	4282      	cmp	r2, r0
 8009124:	d0b3      	beq.n	800908e <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe fb7b 	bl	8007824 <sys_clock_set_timeout>
 800912e:	e7ae      	b.n	800908e <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8009130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	20000828 	.word	0x20000828
 800913c:	200000b4 	.word	0x200000b4
 8009140:	20000e1c 	.word	0x20000e1c

08009144 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8009148:	f7ff fc0c 	bl	8008964 <z_time_slice>
	__asm__ volatile(
 800914c:	f04f 0310 	mov.w	r3, #16
 8009150:	f3ef 8511 	mrs	r5, BASEPRI
 8009154:	f383 8812 	msr	BASEPRI_MAX, r3
 8009158:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800915c:	4b28      	ldr	r3, [pc, #160]	; (8009200 <sys_clock_announce+0xbc>)
 800915e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8009160:	e020      	b.n	80091a4 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8009162:	4828      	ldr	r0, [pc, #160]	; (8009204 <sys_clock_announce+0xc0>)
 8009164:	6801      	ldr	r1, [r0, #0]
 8009166:	6846      	ldr	r6, [r0, #4]
 8009168:	1889      	adds	r1, r1, r2
 800916a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800916e:	6001      	str	r1, [r0, #0]
 8009170:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 8009172:	1a9b      	subs	r3, r3, r2
 8009174:	4a22      	ldr	r2, [pc, #136]	; (8009200 <sys_clock_announce+0xbc>)
 8009176:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8009180:	4620      	mov	r0, r4
 8009182:	f003 ff52 	bl	800d02a <remove_timeout>
	__asm__ volatile(
 8009186:	f385 8811 	msr	BASEPRI, r5
 800918a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800918e:	68a3      	ldr	r3, [r4, #8]
 8009190:	4620      	mov	r0, r4
 8009192:	4798      	blx	r3
	__asm__ volatile(
 8009194:	f04f 0310 	mov.w	r3, #16
 8009198:	f3ef 8511 	mrs	r5, BASEPRI
 800919c:	f383 8812 	msr	BASEPRI_MAX, r3
 80091a0:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80091a4:	f7ff fef8 	bl	8008f98 <first>
 80091a8:	4604      	mov	r4, r0
 80091aa:	b140      	cbz	r0, 80091be <sys_clock_announce+0x7a>
 80091ac:	6902      	ldr	r2, [r0, #16]
 80091ae:	6941      	ldr	r1, [r0, #20]
 80091b0:	4b13      	ldr	r3, [pc, #76]	; (8009200 <sys_clock_announce+0xbc>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	17d8      	asrs	r0, r3, #31
 80091b6:	4293      	cmp	r3, r2
 80091b8:	eb70 0101 	sbcs.w	r1, r0, r1
 80091bc:	dad1      	bge.n	8009162 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 80091be:	b144      	cbz	r4, 80091d2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 80091c0:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <sys_clock_announce+0xbc>)
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	6962      	ldr	r2, [r4, #20]
 80091c8:	1a5b      	subs	r3, r3, r1
 80091ca:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <sys_clock_announce+0xc0>)
 80091d4:	4e0a      	ldr	r6, [pc, #40]	; (8009200 <sys_clock_announce+0xbc>)
 80091d6:	6830      	ldr	r0, [r6, #0]
 80091d8:	6813      	ldr	r3, [r2, #0]
 80091da:	6851      	ldr	r1, [r2, #4]
 80091dc:	181b      	adds	r3, r3, r0
 80091de:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 80091e6:	2400      	movs	r4, #0
 80091e8:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80091ea:	f7ff fef7 	bl	8008fdc <next_timeout>
 80091ee:	4621      	mov	r1, r4
 80091f0:	f7fe fb18 	bl	8007824 <sys_clock_set_timeout>
	__asm__ volatile(
 80091f4:	f385 8811 	msr	BASEPRI, r5
 80091f8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80091fc:	bd70      	pop	{r4, r5, r6, pc}
 80091fe:	bf00      	nop
 8009200:	20000e64 	.word	0x20000e64
 8009204:	20000828 	.word	0x20000828

08009208 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8009208:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800920a:	2300      	movs	r3, #0
	__asm__ volatile(
 800920c:	f04f 0210 	mov.w	r2, #16
 8009210:	f3ef 8411 	mrs	r4, BASEPRI
 8009214:	f382 8812 	msr	BASEPRI_MAX, r2
 8009218:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800921c:	4618      	mov	r0, r3
 800921e:	4619      	mov	r1, r3
 8009220:	e00c      	b.n	800923c <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 8009222:	f7fe fb7f 	bl	8007924 <sys_clock_elapsed>
 8009226:	4a07      	ldr	r2, [pc, #28]	; (8009244 <sys_clock_tick_get+0x3c>)
 8009228:	6813      	ldr	r3, [r2, #0]
 800922a:	6851      	ldr	r1, [r2, #4]
 800922c:	18c0      	adds	r0, r0, r3
 800922e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8009232:	f384 8811 	msr	BASEPRI, r4
 8009236:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800923a:	2301      	movs	r3, #1
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8009240:	bd10      	pop	{r4, pc}
 8009242:	bf00      	nop
 8009244:	20000828 	.word	0x20000828

08009248 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8009248:	b900      	cbnz	r0, 800924c <z_impl_k_busy_wait+0x4>
 800924a:	4770      	bx	lr
{
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4605      	mov	r5, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8009250:	f7fe fb88 	bl	8007964 <sys_clock_cycle_get_32>
 8009254:	4604      	mov	r4, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8009256:	0eeb      	lsrs	r3, r5, #27
 8009258:	0169      	lsls	r1, r5, #5
 800925a:	1b4a      	subs	r2, r1, r5
 800925c:	f163 0000 	sbc.w	r0, r3, #0
 8009260:	0183      	lsls	r3, r0, #6
 8009262:	ea43 6392 	orr.w	r3, r3, r2, lsr #26
 8009266:	0191      	lsls	r1, r2, #6
 8009268:	1a89      	subs	r1, r1, r2
 800926a:	eb63 0300 	sbc.w	r3, r3, r0
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009274:	00c9      	lsls	r1, r1, #3
 8009276:	194d      	adds	r5, r1, r5
 8009278:	f143 0300 	adc.w	r3, r3, #0
 800927c:	02d9      	lsls	r1, r3, #11
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800927e:	4a07      	ldr	r2, [pc, #28]	; (800929c <z_impl_k_busy_wait+0x54>)
 8009280:	2300      	movs	r3, #0
 8009282:	02e8      	lsls	r0, r5, #11
 8009284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8009288:	f7f7 fb1c 	bl	80008c4 <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800928c:	4605      	mov	r5, r0
 800928e:	f7fe fb69 	bl	8007964 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8009292:	1b00      	subs	r0, r0, r4
 8009294:	42a8      	cmp	r0, r5
 8009296:	d3fa      	bcc.n	800928e <z_impl_k_busy_wait+0x46>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	000f4240 	.word	0x000f4240

080092a0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4604      	mov	r4, r0
	__asm__ volatile(
 80092a4:	f04f 0310 	mov.w	r3, #16
 80092a8:	f3ef 8511 	mrs	r5, BASEPRI
 80092ac:	f383 8812 	msr	BASEPRI_MAX, r3
 80092b0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80092b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80092b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80092b8:	ea52 0103 	orrs.w	r1, r2, r3
 80092bc:	d005      	beq.n	80092ca <z_timer_expiration_handler+0x2a>
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c2:	bf08      	it	eq
 80092c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80092c8:	d119      	bne.n	80092fe <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80092ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092cc:	3301      	adds	r3, #1
 80092ce:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80092d0:	6a23      	ldr	r3, [r4, #32]
 80092d2:	b10b      	cbz	r3, 80092d8 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 80092d4:	4620      	mov	r0, r4
 80092d6:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80092d8:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 80092dc:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092de:	42a3      	cmp	r3, r4
 80092e0:	d013      	beq.n	800930a <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 80092e2:	b194      	cbz	r4, 800930a <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 80092e4:	4620      	mov	r0, r4
 80092e6:	f003 fcea 	bl	800ccbe <z_unpend_thread_no_timeout>
 80092ea:	2300      	movs	r3, #0
 80092ec:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 80092ee:	f385 8811 	msr	BASEPRI, r5
 80092f2:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 80092f6:	4620      	mov	r0, r4
 80092f8:	f003 fd49 	bl	800cd8e <z_ready_thread>
}
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80092fe:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8009302:	4904      	ldr	r1, [pc, #16]	; (8009314 <z_timer_expiration_handler+0x74>)
 8009304:	f7ff fe90 	bl	8009028 <z_add_timeout>
 8009308:	e7df      	b.n	80092ca <z_timer_expiration_handler+0x2a>
 800930a:	f385 8811 	msr	BASEPRI, r5
 800930e:	f3bf 8f6f 	isb	sy
		return;
 8009312:	e7f3      	b.n	80092fc <z_timer_expiration_handler+0x5c>
 8009314:	080092a1 	.word	0x080092a1

08009318 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8009318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931c:	461d      	mov	r5, r3
 800931e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009322:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009328:	bf08      	it	eq
 800932a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800932e:	d02f      	beq.n	8009390 <z_impl_k_timer_start+0x78>
 8009330:	4604      	mov	r4, r0
 8009332:	4616      	mov	r6, r2
 8009334:	4613      	mov	r3, r2
 8009336:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8009338:	4642      	mov	r2, r8
 800933a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800933e:	bf08      	it	eq
 8009340:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8009344:	d00d      	beq.n	8009362 <z_impl_k_timer_start+0x4a>
 8009346:	ea58 0c07 	orrs.w	ip, r8, r7
 800934a:	d00a      	beq.n	8009362 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 800934c:	f06f 0c01 	mvn.w	ip, #1
 8009350:	ebbc 0c08 	subs.w	ip, ip, r8
 8009354:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009358:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800935c:	f1bc 0f00 	cmp.w	ip, #0
 8009360:	db18      	blt.n	8009394 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8009362:	f06f 0201 	mvn.w	r2, #1
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800936c:	eb62 0201 	sbc.w	r2, r2, r1
 8009370:	2a00      	cmp	r2, #0
 8009372:	db1c      	blt.n	80093ae <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8009374:	4620      	mov	r0, r4
 8009376:	f003 fe8d 	bl	800d094 <z_abort_timeout>
	timer->period = period;
 800937a:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 800937e:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009384:	4632      	mov	r2, r6
 8009386:	462b      	mov	r3, r5
 8009388:	490d      	ldr	r1, [pc, #52]	; (80093c0 <z_impl_k_timer_start+0xa8>)
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff fe4c 	bl	8009028 <z_add_timeout>
		     duration);
}
 8009390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8009394:	3a01      	subs	r2, #1
 8009396:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 800939a:	4690      	mov	r8, r2
 800939c:	4607      	mov	r7, r0
 800939e:	2a01      	cmp	r2, #1
 80093a0:	f170 0200 	sbcs.w	r2, r0, #0
 80093a4:	dadd      	bge.n	8009362 <z_impl_k_timer_start+0x4a>
 80093a6:	f04f 0801 	mov.w	r8, #1
 80093aa:	2700      	movs	r7, #0
 80093ac:	e7d9      	b.n	8009362 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80093ae:	1e5e      	subs	r6, r3, #1
 80093b0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80093b4:	460d      	mov	r5, r1
 80093b6:	2900      	cmp	r1, #0
 80093b8:	dadc      	bge.n	8009374 <z_impl_k_timer_start+0x5c>
 80093ba:	2600      	movs	r6, #0
 80093bc:	4635      	mov	r5, r6
 80093be:	e7d9      	b.n	8009374 <z_impl_k_timer_start+0x5c>
 80093c0:	080092a1 	.word	0x080092a1

080093c4 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 80093c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	b087      	sub	sp, #28
 80093ca:	4682      	mov	sl, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	4693      	mov	fp, r2
 80093d0:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 80093d2:	2500      	movs	r5, #0
	int events_registered = 0;
 80093d4:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 80093d6:	e02f      	b.n	8009438 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	b1cb      	cbz	r3, 8009412 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 80093de:	f04f 0902 	mov.w	r9, #2
			return true;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e015      	b.n	8009412 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 80093e6:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b193      	cbz	r3, 8009412 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 80093ec:	f04f 0904 	mov.w	r9, #4
			return true;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e00e      	b.n	8009412 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	b15b      	cbz	r3, 8009412 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 80093fa:	f04f 0901 	mov.w	r9, #1
			return true;
 80093fe:	464b      	mov	r3, r9
 8009400:	e007      	b.n	8009412 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	b123      	cbz	r3, 8009412 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 8009408:	f04f 0910 	mov.w	r9, #16
			return true;
 800940c:	2301      	movs	r3, #1
 800940e:	e000      	b.n	8009412 <register_events+0x4e>
	switch (event->type) {
 8009410:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 8009412:	2b00      	cmp	r3, #0
 8009414:	d03a      	beq.n	800948c <register_events+0xc8>
	event->poller = NULL;
 8009416:	2100      	movs	r1, #0
 8009418:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	f3c3 3245 	ubfx	r2, r3, #13, #6
 8009420:	ea49 0202 	orr.w	r2, r9, r2
 8009424:	f362 3352 	bfi	r3, r2, #13, #6
 8009428:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800942a:	f88b 1000 	strb.w	r1, [fp]
 800942e:	f386 8811 	msr	BASEPRI, r6
 8009432:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 8009436:	3501      	adds	r5, #1
 8009438:	42bd      	cmp	r5, r7
 800943a:	f280 81b9 	bge.w	80097b0 <register_events+0x3ec>
	__asm__ volatile(
 800943e:	f04f 0310 	mov.w	r3, #16
 8009442:	f3ef 8611 	mrs	r6, BASEPRI
 8009446:	f383 8812 	msr	BASEPRI_MAX, r3
 800944a:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800944e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8009452:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8009456:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800945a:	7b63      	ldrb	r3, [r4, #13]
 800945c:	f003 031f 	and.w	r3, r3, #31
 8009460:	3b01      	subs	r3, #1
 8009462:	2b07      	cmp	r3, #7
 8009464:	d8d4      	bhi.n	8009410 <register_events+0x4c>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <register_events+0xa8>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	080093f5 	.word	0x080093f5
 8009470:	080093d9 	.word	0x080093d9
 8009474:	08009411 	.word	0x08009411
 8009478:	080093e7 	.word	0x080093e7
 800947c:	08009411 	.word	0x08009411
 8009480:	08009411 	.word	0x08009411
 8009484:	08009411 	.word	0x08009411
 8009488:	08009403 	.word	0x08009403
		} else if (!just_check && poller->is_polling) {
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1cd      	bne.n	800942e <register_events+0x6a>
 8009492:	f89b 3000 	ldrb.w	r3, [fp]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c9      	beq.n	800942e <register_events+0x6a>
	switch (event->type) {
 800949a:	7b63      	ldrb	r3, [r4, #13]
 800949c:	f003 031f 	and.w	r3, r3, #31
 80094a0:	3b01      	subs	r3, #1
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	d848      	bhi.n	8009538 <register_events+0x174>
 80094a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80094aa:	00cb      	.short	0x00cb
 80094ac:	00470008 	.word	0x00470008
 80094b0:	0047006d 	.word	0x0047006d
 80094b4:	00470047 	.word	0x00470047
 80094b8:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	f103 0210 	add.w	r2, r3, #16
 80094c2:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80094c4:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d02f      	beq.n	800952a <register_events+0x166>
 80094ca:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d02c      	beq.n	800952a <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80094d0:	6898      	ldr	r0, [r3, #8]
 80094d2:	f003 fe70 	bl	800d1b6 <poller_thread>
 80094d6:	9005      	str	r0, [sp, #20]
 80094d8:	4658      	mov	r0, fp
 80094da:	f003 fe6c 	bl	800d1b6 <poller_thread>
 80094de:	4601      	mov	r1, r0
 80094e0:	9003      	str	r0, [sp, #12]
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	f003 fbe1 	bl	800ccaa <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80094e8:	2800      	cmp	r0, #0
 80094ea:	dc1e      	bgt.n	800952a <register_events+0x166>
	return list->head == list;
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80094f0:	9a02      	ldr	r2, [sp, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d030      	beq.n	8009558 <register_events+0x194>
 80094f6:	9404      	str	r4, [sp, #16]
 80094f8:	9505      	str	r5, [sp, #20]
 80094fa:	9d02      	ldr	r5, [sp, #8]
 80094fc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80094fe:	2c00      	cmp	r4, #0
 8009500:	d030      	beq.n	8009564 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009502:	68a0      	ldr	r0, [r4, #8]
 8009504:	f003 fe57 	bl	800d1b6 <poller_thread>
 8009508:	4601      	mov	r1, r0
 800950a:	9803      	ldr	r0, [sp, #12]
 800950c:	f003 fbcd 	bl	800ccaa <z_sched_prio_cmp>
 8009510:	2800      	cmp	r0, #0
 8009512:	dc17      	bgt.n	8009544 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009514:	2c00      	cmp	r4, #0
 8009516:	d028      	beq.n	800956a <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 8009518:	686b      	ldr	r3, [r5, #4]
 800951a:	429c      	cmp	r4, r3
 800951c:	d02f      	beq.n	800957e <register_events+0x1ba>
 800951e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009520:	2c00      	cmp	r4, #0
 8009522:	d1ec      	bne.n	80094fe <register_events+0x13a>
 8009524:	9c04      	ldr	r4, [sp, #16]
 8009526:	9d05      	ldr	r5, [sp, #20]
 8009528:	e021      	b.n	800956e <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800952a:	9a02      	ldr	r2, [sp, #8]
 800952c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800952e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009532:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009534:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009536:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 8009538:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	3301      	adds	r3, #1
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	e774      	b.n	800942e <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 8009544:	9d05      	ldr	r5, [sp, #20]
 8009546:	4622      	mov	r2, r4
 8009548:	9c04      	ldr	r4, [sp, #16]
 800954a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800954c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800954e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8009552:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009554:	6054      	str	r4, [r2, #4]
			return;
 8009556:	e7ef      	b.n	8009538 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009558:	2300      	movs	r3, #0
 800955a:	9404      	str	r4, [sp, #16]
 800955c:	9505      	str	r5, [sp, #20]
 800955e:	9d02      	ldr	r5, [sp, #8]
 8009560:	461c      	mov	r4, r3
 8009562:	e7cc      	b.n	80094fe <register_events+0x13a>
 8009564:	9c04      	ldr	r4, [sp, #16]
 8009566:	9d05      	ldr	r5, [sp, #20]
 8009568:	e001      	b.n	800956e <register_events+0x1aa>
 800956a:	9c04      	ldr	r4, [sp, #16]
 800956c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800956e:	9a02      	ldr	r2, [sp, #8]
 8009570:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009572:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009576:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009578:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800957a:	6054      	str	r4, [r2, #4]
}
 800957c:	e7dc      	b.n	8009538 <register_events+0x174>
 800957e:	9c04      	ldr	r4, [sp, #16]
 8009580:	9d05      	ldr	r5, [sp, #20]
 8009582:	e7f4      	b.n	800956e <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	f103 0214 	add.w	r2, r3, #20
 800958c:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800958e:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009590:	429a      	cmp	r2, r3
 8009592:	d02d      	beq.n	80095f0 <register_events+0x22c>
 8009594:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009596:	b35b      	cbz	r3, 80095f0 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009598:	6898      	ldr	r0, [r3, #8]
 800959a:	f003 fe0c 	bl	800d1b6 <poller_thread>
 800959e:	9005      	str	r0, [sp, #20]
 80095a0:	4658      	mov	r0, fp
 80095a2:	f003 fe08 	bl	800d1b6 <poller_thread>
 80095a6:	4601      	mov	r1, r0
 80095a8:	9003      	str	r0, [sp, #12]
 80095aa:	9805      	ldr	r0, [sp, #20]
 80095ac:	f003 fb7d 	bl	800ccaa <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80095b0:	2800      	cmp	r0, #0
 80095b2:	dc1d      	bgt.n	80095f0 <register_events+0x22c>
	return list->head == list;
 80095b4:	9b04      	ldr	r3, [sp, #16]
 80095b6:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d02a      	beq.n	8009614 <register_events+0x250>
 80095be:	9404      	str	r4, [sp, #16]
 80095c0:	9505      	str	r5, [sp, #20]
 80095c2:	9d02      	ldr	r5, [sp, #8]
 80095c4:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80095c6:	2c00      	cmp	r4, #0
 80095c8:	d02a      	beq.n	8009620 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 80095ca:	68a0      	ldr	r0, [r4, #8]
 80095cc:	f003 fdf3 	bl	800d1b6 <poller_thread>
 80095d0:	4601      	mov	r1, r0
 80095d2:	9803      	ldr	r0, [sp, #12]
 80095d4:	f003 fb69 	bl	800ccaa <z_sched_prio_cmp>
 80095d8:	2800      	cmp	r0, #0
 80095da:	dc11      	bgt.n	8009600 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80095dc:	b31c      	cbz	r4, 8009626 <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 80095de:	686b      	ldr	r3, [r5, #4]
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d02a      	beq.n	800963a <register_events+0x276>
 80095e4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	d1ed      	bne.n	80095c6 <register_events+0x202>
 80095ea:	9c04      	ldr	r4, [sp, #16]
 80095ec:	9d05      	ldr	r5, [sp, #20]
 80095ee:	e01c      	b.n	800962a <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 80095f0:	9a02      	ldr	r2, [sp, #8]
 80095f2:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80095f4:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80095f8:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80095fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80095fc:	6054      	str	r4, [r2, #4]
		return;
 80095fe:	e79b      	b.n	8009538 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8009600:	9d05      	ldr	r5, [sp, #20]
 8009602:	4622      	mov	r2, r4
 8009604:	9c04      	ldr	r4, [sp, #16]
 8009606:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009608:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800960a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800960e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009610:	6054      	str	r4, [r2, #4]
			return;
 8009612:	e791      	b.n	8009538 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009614:	2300      	movs	r3, #0
 8009616:	9404      	str	r4, [sp, #16]
 8009618:	9505      	str	r5, [sp, #20]
 800961a:	9d02      	ldr	r5, [sp, #8]
 800961c:	461c      	mov	r4, r3
 800961e:	e7d2      	b.n	80095c6 <register_events+0x202>
 8009620:	9c04      	ldr	r4, [sp, #16]
 8009622:	9d05      	ldr	r5, [sp, #20]
 8009624:	e001      	b.n	800962a <register_events+0x266>
 8009626:	9c04      	ldr	r4, [sp, #16]
 8009628:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800962a:	9a02      	ldr	r2, [sp, #8]
 800962c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800962e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009632:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009634:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009636:	6054      	str	r4, [r2, #4]
}
 8009638:	e77e      	b.n	8009538 <register_events+0x174>
 800963a:	9c04      	ldr	r4, [sp, #16]
 800963c:	9d05      	ldr	r5, [sp, #20]
 800963e:	e7f4      	b.n	800962a <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8009644:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009646:	429a      	cmp	r2, r3
 8009648:	d02c      	beq.n	80096a4 <register_events+0x2e0>
 800964a:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800964c:	b353      	cbz	r3, 80096a4 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800964e:	6898      	ldr	r0, [r3, #8]
 8009650:	f003 fdb1 	bl	800d1b6 <poller_thread>
 8009654:	9004      	str	r0, [sp, #16]
 8009656:	4658      	mov	r0, fp
 8009658:	f003 fdad 	bl	800d1b6 <poller_thread>
 800965c:	4601      	mov	r1, r0
 800965e:	9003      	str	r0, [sp, #12]
 8009660:	9804      	ldr	r0, [sp, #16]
 8009662:	f003 fb22 	bl	800ccaa <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009666:	2800      	cmp	r0, #0
 8009668:	dc1c      	bgt.n	80096a4 <register_events+0x2e0>
	return list->head == list;
 800966a:	9b02      	ldr	r3, [sp, #8]
 800966c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800966e:	4293      	cmp	r3, r2
 8009670:	d02a      	beq.n	80096c8 <register_events+0x304>
 8009672:	9404      	str	r4, [sp, #16]
 8009674:	9505      	str	r5, [sp, #20]
 8009676:	9d02      	ldr	r5, [sp, #8]
 8009678:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800967a:	2c00      	cmp	r4, #0
 800967c:	d02a      	beq.n	80096d4 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800967e:	68a0      	ldr	r0, [r4, #8]
 8009680:	f003 fd99 	bl	800d1b6 <poller_thread>
 8009684:	4601      	mov	r1, r0
 8009686:	9803      	ldr	r0, [sp, #12]
 8009688:	f003 fb0f 	bl	800ccaa <z_sched_prio_cmp>
 800968c:	2800      	cmp	r0, #0
 800968e:	dc11      	bgt.n	80096b4 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009690:	b31c      	cbz	r4, 80096da <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 8009692:	686b      	ldr	r3, [r5, #4]
 8009694:	429c      	cmp	r4, r3
 8009696:	d02a      	beq.n	80096ee <register_events+0x32a>
 8009698:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800969a:	2c00      	cmp	r4, #0
 800969c:	d1ed      	bne.n	800967a <register_events+0x2b6>
 800969e:	9c04      	ldr	r4, [sp, #16]
 80096a0:	9d05      	ldr	r5, [sp, #20]
 80096a2:	e01c      	b.n	80096de <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 80096a4:	9a02      	ldr	r2, [sp, #8]
 80096a6:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80096a8:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80096ac:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80096ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80096b0:	6054      	str	r4, [r2, #4]
		return;
 80096b2:	e741      	b.n	8009538 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80096b4:	9d05      	ldr	r5, [sp, #20]
 80096b6:	4622      	mov	r2, r4
 80096b8:	9c04      	ldr	r4, [sp, #16]
 80096ba:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80096bc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80096be:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80096c2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80096c4:	6054      	str	r4, [r2, #4]
			return;
 80096c6:	e737      	b.n	8009538 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80096c8:	2300      	movs	r3, #0
 80096ca:	9404      	str	r4, [sp, #16]
 80096cc:	9505      	str	r5, [sp, #20]
 80096ce:	9d02      	ldr	r5, [sp, #8]
 80096d0:	461c      	mov	r4, r3
 80096d2:	e7d2      	b.n	800967a <register_events+0x2b6>
 80096d4:	9c04      	ldr	r4, [sp, #16]
 80096d6:	9d05      	ldr	r5, [sp, #20]
 80096d8:	e001      	b.n	80096de <register_events+0x31a>
 80096da:	9c04      	ldr	r4, [sp, #16]
 80096dc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80096de:	9a02      	ldr	r2, [sp, #8]
 80096e0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80096e2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80096e6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80096e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80096ea:	6054      	str	r4, [r2, #4]
}
 80096ec:	e724      	b.n	8009538 <register_events+0x174>
 80096ee:	9c04      	ldr	r4, [sp, #16]
 80096f0:	9d05      	ldr	r5, [sp, #20]
 80096f2:	e7f4      	b.n	80096de <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	9304      	str	r3, [sp, #16]
 80096f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80096fc:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009700:	429a      	cmp	r2, r3
 8009702:	d02d      	beq.n	8009760 <register_events+0x39c>
 8009704:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009706:	b35b      	cbz	r3, 8009760 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009708:	6898      	ldr	r0, [r3, #8]
 800970a:	f003 fd54 	bl	800d1b6 <poller_thread>
 800970e:	9005      	str	r0, [sp, #20]
 8009710:	4658      	mov	r0, fp
 8009712:	f003 fd50 	bl	800d1b6 <poller_thread>
 8009716:	4601      	mov	r1, r0
 8009718:	9003      	str	r0, [sp, #12]
 800971a:	9805      	ldr	r0, [sp, #20]
 800971c:	f003 fac5 	bl	800ccaa <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009720:	2800      	cmp	r0, #0
 8009722:	dc1d      	bgt.n	8009760 <register_events+0x39c>
	return list->head == list;
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009728:	9a02      	ldr	r2, [sp, #8]
 800972a:	429a      	cmp	r2, r3
 800972c:	d02a      	beq.n	8009784 <register_events+0x3c0>
 800972e:	9404      	str	r4, [sp, #16]
 8009730:	9505      	str	r5, [sp, #20]
 8009732:	9d02      	ldr	r5, [sp, #8]
 8009734:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009736:	2c00      	cmp	r4, #0
 8009738:	d02a      	beq.n	8009790 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800973a:	68a0      	ldr	r0, [r4, #8]
 800973c:	f003 fd3b 	bl	800d1b6 <poller_thread>
 8009740:	4601      	mov	r1, r0
 8009742:	9803      	ldr	r0, [sp, #12]
 8009744:	f003 fab1 	bl	800ccaa <z_sched_prio_cmp>
 8009748:	2800      	cmp	r0, #0
 800974a:	dc11      	bgt.n	8009770 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800974c:	b31c      	cbz	r4, 8009796 <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800974e:	686b      	ldr	r3, [r5, #4]
 8009750:	429c      	cmp	r4, r3
 8009752:	d02a      	beq.n	80097aa <register_events+0x3e6>
 8009754:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009756:	2c00      	cmp	r4, #0
 8009758:	d1ed      	bne.n	8009736 <register_events+0x372>
 800975a:	9c04      	ldr	r4, [sp, #16]
 800975c:	9d05      	ldr	r5, [sp, #20]
 800975e:	e01c      	b.n	800979a <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 8009760:	9a02      	ldr	r2, [sp, #8]
 8009762:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009764:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009768:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800976a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800976c:	6054      	str	r4, [r2, #4]
		return;
 800976e:	e6e3      	b.n	8009538 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8009770:	9d05      	ldr	r5, [sp, #20]
 8009772:	4622      	mov	r2, r4
 8009774:	9c04      	ldr	r4, [sp, #16]
 8009776:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009778:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800977a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800977e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009780:	6054      	str	r4, [r2, #4]
			return;
 8009782:	e6d9      	b.n	8009538 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009784:	2300      	movs	r3, #0
 8009786:	9404      	str	r4, [sp, #16]
 8009788:	9505      	str	r5, [sp, #20]
 800978a:	9d02      	ldr	r5, [sp, #8]
 800978c:	461c      	mov	r4, r3
 800978e:	e7d2      	b.n	8009736 <register_events+0x372>
 8009790:	9c04      	ldr	r4, [sp, #16]
 8009792:	9d05      	ldr	r5, [sp, #20]
 8009794:	e001      	b.n	800979a <register_events+0x3d6>
 8009796:	9c04      	ldr	r4, [sp, #16]
 8009798:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800979a:	9a02      	ldr	r2, [sp, #8]
 800979c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800979e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80097a2:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80097a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80097a6:	6054      	str	r4, [r2, #4]
}
 80097a8:	e6c6      	b.n	8009538 <register_events+0x174>
 80097aa:	9c04      	ldr	r4, [sp, #16]
 80097ac:	9d05      	ldr	r5, [sp, #20]
 80097ae:	e7f4      	b.n	800979a <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 80097b0:	9801      	ldr	r0, [sp, #4]
 80097b2:	b007      	add	sp, #28
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097b8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 80097b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	4605      	mov	r5, r0
 80097c0:	4690      	mov	r8, r2
 80097c2:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 80097c4:	4b4f      	ldr	r3, [pc, #316]	; (8009904 <z_impl_k_poll+0x14c>)
 80097c6:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 80097c8:	2301      	movs	r3, #1
 80097ca:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 80097ce:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 80097d2:	ea57 0302 	orrs.w	r3, r7, r2
 80097d6:	bf0c      	ite	eq
 80097d8:	2301      	moveq	r3, #1
 80097da:	2300      	movne	r3, #0
 80097dc:	f106 0260 	add.w	r2, r6, #96	; 0x60
 80097e0:	f7ff fdf0 	bl	80093c4 <register_events>
 80097e4:	4604      	mov	r4, r0
 80097e6:	f04f 0310 	mov.w	r3, #16
 80097ea:	f3ef 8111 	mrs	r1, BASEPRI
 80097ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80097f2:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 80097f6:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 80097fa:	b1b3      	cbz	r3, 800982a <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 80097fc:	2300      	movs	r3, #0
 80097fe:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009802:	ea57 0308 	orrs.w	r3, r7, r8
 8009806:	d043      	beq.n	8009890 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8009808:	f8cd 8000 	str.w	r8, [sp]
 800980c:	9701      	str	r7, [sp, #4]
 800980e:	4a3e      	ldr	r2, [pc, #248]	; (8009908 <z_impl_k_poll+0x150>)
 8009810:	483e      	ldr	r0, [pc, #248]	; (800990c <z_impl_k_poll+0x154>)
 8009812:	f7ff f977 	bl	8008b04 <z_pend_curr>
 8009816:	f04f 0310 	mov.w	r3, #16
 800981a:	f3ef 8611 	mrs	r6, BASEPRI
 800981e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	46b4      	mov	ip, r6
	while (num_events--) {
 8009828:	e04c      	b.n	80098c4 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800982a:	460e      	mov	r6, r1
	while (num_events--) {
 800982c:	e00c      	b.n	8009848 <z_impl_k_poll+0x90>
	__asm__ volatile(
 800982e:	f386 8811 	msr	BASEPRI, r6
 8009832:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8009836:	f04f 0310 	mov.w	r3, #16
 800983a:	f3ef 8611 	mrs	r6, BASEPRI
 800983e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	4604      	mov	r4, r0
 8009848:	1e60      	subs	r0, r4, #1
 800984a:	b1dc      	cbz	r4, 8009884 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800984c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8009850:	009f      	lsls	r7, r3, #2
 8009852:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8009856:	2200      	movs	r2, #0
 8009858:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800985a:	7b5a      	ldrb	r2, [r3, #13]
 800985c:	f002 021f 	and.w	r2, r2, #31
 8009860:	2a08      	cmp	r2, #8
 8009862:	d8e4      	bhi.n	800982e <z_impl_k_poll+0x76>
 8009864:	2401      	movs	r4, #1
 8009866:	fa04 f202 	lsl.w	r2, r4, r2
 800986a:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800986e:	d0de      	beq.n	800982e <z_impl_k_poll+0x76>
	return node->next != NULL;
 8009870:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8009872:	2a00      	cmp	r2, #0
 8009874:	d0db      	beq.n	800982e <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8009876:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8009878:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800987a:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800987c:	2200      	movs	r2, #0
 800987e:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 8009880:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 8009882:	e7d4      	b.n	800982e <z_impl_k_poll+0x76>
	__asm__ volatile(
 8009884:	f381 8811 	msr	BASEPRI, r1
 8009888:	f3bf 8f6f 	isb	sy
		return 0;
 800988c:	4620      	mov	r0, r4
 800988e:	e036      	b.n	80098fe <z_impl_k_poll+0x146>
 8009890:	f381 8811 	msr	BASEPRI, r1
 8009894:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8009898:	f06f 000a 	mvn.w	r0, #10
 800989c:	e02f      	b.n	80098fe <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800989e:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 80098a0:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 80098a2:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 80098a4:	2200      	movs	r2, #0
 80098a6:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 80098a8:	605a      	str	r2, [r3, #4]
 80098aa:	f38c 8811 	msr	BASEPRI, ip
 80098ae:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80098b2:	f04f 0310 	mov.w	r3, #16
 80098b6:	f3ef 8c11 	mrs	ip, BASEPRI
 80098ba:	f383 8812 	msr	BASEPRI_MAX, r3
 80098be:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 80098c2:	4674      	mov	r4, lr
 80098c4:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 80098c8:	b1ac      	cbz	r4, 80098f6 <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 80098ca:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80098ce:	009c      	lsls	r4, r3, #2
 80098d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 80098d4:	2200      	movs	r2, #0
 80098d6:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 80098d8:	7b5a      	ldrb	r2, [r3, #13]
 80098da:	f002 021f 	and.w	r2, r2, #31
 80098de:	2a08      	cmp	r2, #8
 80098e0:	d8e3      	bhi.n	80098aa <z_impl_k_poll+0xf2>
 80098e2:	2101      	movs	r1, #1
 80098e4:	fa01 f202 	lsl.w	r2, r1, r2
 80098e8:	f412 7f8b 	tst.w	r2, #278	; 0x116
 80098ec:	d0dd      	beq.n	80098aa <z_impl_k_poll+0xf2>
	return node->next != NULL;
 80098ee:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	d1d4      	bne.n	800989e <z_impl_k_poll+0xe6>
 80098f4:	e7d9      	b.n	80098aa <z_impl_k_poll+0xf2>
	__asm__ volatile(
 80098f6:	f386 8811 	msr	BASEPRI, r6
 80098fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 80098fe:	b002      	add	sp, #8
 8009900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009904:	20000e1c 	.word	0x20000e1c
 8009908:	200000bc 	.word	0x200000bc
 800990c:	20000e68 	.word	0x20000e68

08009910 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4603      	mov	r3, r0
	__asm__ volatile(
 8009914:	f04f 0210 	mov.w	r2, #16
 8009918:	f3ef 8511 	mrs	r5, BASEPRI
 800991c:	f382 8812 	msr	BASEPRI_MAX, r2
 8009920:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8009924:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8009926:	2201      	movs	r2, #1
 8009928:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800992a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800992c:	4283      	cmp	r3, r0
 800992e:	d011      	beq.n	8009954 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 8009930:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8009932:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8009934:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009936:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800993c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800993e:	b148      	cbz	r0, 8009954 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8009940:	2101      	movs	r1, #1
 8009942:	f003 fc84 	bl	800d24e <signal_poll_event>
 8009946:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 8009948:	4629      	mov	r1, r5
 800994a:	4805      	ldr	r0, [pc, #20]	; (8009960 <z_impl_k_poll_signal_raise+0x50>)
 800994c:	f7fe ff6a 	bl	8008824 <z_reschedule>
	return rc;
}
 8009950:	4620      	mov	r0, r4
 8009952:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8009954:	f385 8811 	msr	BASEPRI, r5
 8009958:	f3bf 8f6f 	isb	sy
		return 0;
 800995c:	2400      	movs	r4, #0
 800995e:	e7f7      	b.n	8009950 <z_impl_k_poll_signal_raise+0x40>
 8009960:	20000e68 	.word	0x20000e68

08009964 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8009964:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8009966:	4a03      	ldr	r2, [pc, #12]	; (8009974 <boot_banner+0x10>)
 8009968:	4903      	ldr	r1, [pc, #12]	; (8009978 <boot_banner+0x14>)
 800996a:	4804      	ldr	r0, [pc, #16]	; (800997c <boot_banner+0x18>)
 800996c:	f001 fc75 	bl	800b25a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8009970:	bd08      	pop	{r3, pc}
 8009972:	bf00      	nop
 8009974:	0800eed8 	.word	0x0800eed8
 8009978:	0800ef00 	.word	0x0800ef00
 800997c:	0800ef10 	.word	0x0800ef10

08009980 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8009980:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8009982:	4c06      	ldr	r4, [pc, #24]	; (800999c <statics_init+0x1c>)
 8009984:	e005      	b.n	8009992 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8009986:	68a2      	ldr	r2, [r4, #8]
 8009988:	6861      	ldr	r1, [r4, #4]
 800998a:	4620      	mov	r0, r4
 800998c:	f003 fc93 	bl	800d2b6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8009990:	3418      	adds	r4, #24
 8009992:	4b03      	ldr	r3, [pc, #12]	; (80099a0 <statics_init+0x20>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d3f6      	bcc.n	8009986 <statics_init+0x6>
		}
	}
	return 0;
}
 8009998:	2000      	movs	r0, #0
 800999a:	bd10      	pop	{r4, pc}
 800999c:	20000390 	.word	0x20000390
 80099a0:	20000390 	.word	0x20000390

080099a4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 80099a4:	b510      	push	{r4, lr}
 80099a6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 80099a8:	4b08      	ldr	r3, [pc, #32]	; (80099cc <k_sys_work_q_init+0x28>)
 80099aa:	9302      	str	r3, [sp, #8]
 80099ac:	2400      	movs	r4, #0
 80099ae:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 80099b2:	ab02      	add	r3, sp, #8
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099be:	4904      	ldr	r1, [pc, #16]	; (80099d0 <k_sys_work_q_init+0x2c>)
 80099c0:	4804      	ldr	r0, [pc, #16]	; (80099d4 <k_sys_work_q_init+0x30>)
 80099c2:	f7fe fe9d 	bl	8008700 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 80099c6:	4620      	mov	r0, r4
 80099c8:	b004      	add	sp, #16
 80099ca:	bd10      	pop	{r4, pc}
 80099cc:	0800ef38 	.word	0x0800ef38
 80099d0:	20003760 	.word	0x20003760
 80099d4:	20000830 	.word	0x20000830

080099d8 <malloc>:
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <malloc+0xc>)
 80099da:	4601      	mov	r1, r0
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f000 b84b 	b.w	8009a78 <_malloc_r>
 80099e2:	bf00      	nop
 80099e4:	200000c4 	.word	0x200000c4

080099e8 <_free_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d040      	beq.n	8009a72 <_free_r+0x8a>
 80099f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f4:	1f0c      	subs	r4, r1, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	18e4      	addlt	r4, r4, r3
 80099fc:	f000 fbfc 	bl	800a1f8 <__malloc_lock>
 8009a00:	4a1c      	ldr	r2, [pc, #112]	; (8009a74 <_free_r+0x8c>)
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x2c>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a10:	f000 bbf8 	b.w	800a204 <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x42>
 8009a18:	6820      	ldr	r0, [r4, #0]
 8009a1a:	1821      	adds	r1, r4, r0
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1809      	addeq	r1, r1, r0
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x1e>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x4c>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x42>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1850      	adds	r0, r2, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x6c>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1850      	adds	r0, r2, r1
 8009a42:	4283      	cmp	r3, r0
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x22>
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4401      	add	r1, r0
 8009a4e:	6011      	str	r1, [r2, #0]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x22>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x74>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x22>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf01      	itttt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	6054      	str	r4, [r2, #4]
 8009a70:	e7cb      	b.n	8009a0a <_free_r+0x22>
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000e6c 	.word	0x20000e6c

08009a78 <_malloc_r>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	1ccd      	adds	r5, r1, #3
 8009a7c:	f025 0503 	bic.w	r5, r5, #3
 8009a80:	3508      	adds	r5, #8
 8009a82:	2d0c      	cmp	r5, #12
 8009a84:	bf38      	it	cc
 8009a86:	250c      	movcc	r5, #12
 8009a88:	2d00      	cmp	r5, #0
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	db01      	blt.n	8009a92 <_malloc_r+0x1a>
 8009a8e:	42a9      	cmp	r1, r5
 8009a90:	d903      	bls.n	8009a9a <_malloc_r+0x22>
 8009a92:	230c      	movs	r3, #12
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	2000      	movs	r0, #0
 8009a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9a:	f000 fbad 	bl	800a1f8 <__malloc_lock>
 8009a9e:	4921      	ldr	r1, [pc, #132]	; (8009b24 <_malloc_r+0xac>)
 8009aa0:	680a      	ldr	r2, [r1, #0]
 8009aa2:	4614      	mov	r4, r2
 8009aa4:	b99c      	cbnz	r4, 8009ace <_malloc_r+0x56>
 8009aa6:	4f20      	ldr	r7, [pc, #128]	; (8009b28 <_malloc_r+0xb0>)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	b923      	cbnz	r3, 8009ab6 <_malloc_r+0x3e>
 8009aac:	4621      	mov	r1, r4
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f000 fb8e 	bl	800a1d0 <_sbrk_r>
 8009ab4:	6038      	str	r0, [r7, #0]
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 fb89 	bl	800a1d0 <_sbrk_r>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d123      	bne.n	8009b0a <_malloc_r+0x92>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	f000 fb9c 	bl	800a204 <__malloc_unlock>
 8009acc:	e7e3      	b.n	8009a96 <_malloc_r+0x1e>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	1b5b      	subs	r3, r3, r5
 8009ad2:	d417      	bmi.n	8009b04 <_malloc_r+0x8c>
 8009ad4:	2b0b      	cmp	r3, #11
 8009ad6:	d903      	bls.n	8009ae0 <_malloc_r+0x68>
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	441c      	add	r4, r3
 8009adc:	6025      	str	r5, [r4, #0]
 8009ade:	e004      	b.n	8009aea <_malloc_r+0x72>
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	42a2      	cmp	r2, r4
 8009ae4:	bf0c      	ite	eq
 8009ae6:	600b      	streq	r3, [r1, #0]
 8009ae8:	6053      	strne	r3, [r2, #4]
 8009aea:	4630      	mov	r0, r6
 8009aec:	f000 fb8a 	bl	800a204 <__malloc_unlock>
 8009af0:	f104 000b 	add.w	r0, r4, #11
 8009af4:	1d23      	adds	r3, r4, #4
 8009af6:	f020 0007 	bic.w	r0, r0, #7
 8009afa:	1ac2      	subs	r2, r0, r3
 8009afc:	d0cc      	beq.n	8009a98 <_malloc_r+0x20>
 8009afe:	1a1b      	subs	r3, r3, r0
 8009b00:	50a3      	str	r3, [r4, r2]
 8009b02:	e7c9      	b.n	8009a98 <_malloc_r+0x20>
 8009b04:	4622      	mov	r2, r4
 8009b06:	6864      	ldr	r4, [r4, #4]
 8009b08:	e7cc      	b.n	8009aa4 <_malloc_r+0x2c>
 8009b0a:	1cc4      	adds	r4, r0, #3
 8009b0c:	f024 0403 	bic.w	r4, r4, #3
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d0e3      	beq.n	8009adc <_malloc_r+0x64>
 8009b14:	1a21      	subs	r1, r4, r0
 8009b16:	4630      	mov	r0, r6
 8009b18:	f000 fb5a 	bl	800a1d0 <_sbrk_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d1dd      	bne.n	8009adc <_malloc_r+0x64>
 8009b20:	e7cf      	b.n	8009ac2 <_malloc_r+0x4a>
 8009b22:	bf00      	nop
 8009b24:	20000e6c 	.word	0x20000e6c
 8009b28:	20000e70 	.word	0x20000e70

08009b2c <_printf_float>:
 8009b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	b091      	sub	sp, #68	; 0x44
 8009b32:	460c      	mov	r4, r1
 8009b34:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009b38:	4616      	mov	r6, r2
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	f000 fb57 	bl	800a1f0 <_localeconv_r>
 8009b42:	6803      	ldr	r3, [r0, #0]
 8009b44:	4618      	mov	r0, r3
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	f7f7 f8f9 	bl	8000d3e <strlen>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8009b50:	f8d8 3000 	ldr.w	r3, [r8]
 8009b54:	900a      	str	r0, [sp, #40]	; 0x28
 8009b56:	3307      	adds	r3, #7
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	f103 0208 	add.w	r2, r3, #8
 8009b60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b64:	f8d4 b000 	ldr.w	fp, [r4]
 8009b68:	f8c8 2000 	str.w	r2, [r8]
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b74:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009b78:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009b7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b82:	4640      	mov	r0, r8
 8009b84:	4b9c      	ldr	r3, [pc, #624]	; (8009df8 <_printf_float+0x2cc>)
 8009b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b88:	f7f6 ff3e 	bl	8000a08 <__aeabi_dcmpun>
 8009b8c:	bb70      	cbnz	r0, 8009bec <_printf_float+0xc0>
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b92:	4640      	mov	r0, r8
 8009b94:	4b98      	ldr	r3, [pc, #608]	; (8009df8 <_printf_float+0x2cc>)
 8009b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b98:	f7f6 ff18 	bl	80009cc <__aeabi_dcmple>
 8009b9c:	bb30      	cbnz	r0, 8009bec <_printf_float+0xc0>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4651      	mov	r1, sl
 8009ba6:	f7f6 ff07 	bl	80009b8 <__aeabi_dcmplt>
 8009baa:	b110      	cbz	r0, 8009bb2 <_printf_float+0x86>
 8009bac:	232d      	movs	r3, #45	; 0x2d
 8009bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb2:	4b92      	ldr	r3, [pc, #584]	; (8009dfc <_printf_float+0x2d0>)
 8009bb4:	4892      	ldr	r0, [pc, #584]	; (8009e00 <_printf_float+0x2d4>)
 8009bb6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009bba:	bf94      	ite	ls
 8009bbc:	4698      	movls	r8, r3
 8009bbe:	4680      	movhi	r8, r0
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	f04f 0a00 	mov.w	sl, #0
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	f02b 0304 	bic.w	r3, fp, #4
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	4633      	mov	r3, r6
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	9700      	str	r7, [sp, #0]
 8009bd6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009bd8:	f003 fc28 	bl	800d42c <_printf_common>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	f040 8090 	bne.w	8009d02 <_printf_float+0x1d6>
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009be6:	b011      	add	sp, #68	; 0x44
 8009be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bec:	4642      	mov	r2, r8
 8009bee:	4653      	mov	r3, sl
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4651      	mov	r1, sl
 8009bf4:	f7f6 ff08 	bl	8000a08 <__aeabi_dcmpun>
 8009bf8:	b148      	cbz	r0, 8009c0e <_printf_float+0xe2>
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	bfb8      	it	lt
 8009c00:	232d      	movlt	r3, #45	; 0x2d
 8009c02:	4880      	ldr	r0, [pc, #512]	; (8009e04 <_printf_float+0x2d8>)
 8009c04:	bfb8      	it	lt
 8009c06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c0a:	4b7f      	ldr	r3, [pc, #508]	; (8009e08 <_printf_float+0x2dc>)
 8009c0c:	e7d3      	b.n	8009bb6 <_printf_float+0x8a>
 8009c0e:	6863      	ldr	r3, [r4, #4]
 8009c10:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009c14:	1c5a      	adds	r2, r3, #1
 8009c16:	d142      	bne.n	8009c9e <_printf_float+0x172>
 8009c18:	2306      	movs	r3, #6
 8009c1a:	6063      	str	r3, [r4, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	9206      	str	r2, [sp, #24]
 8009c20:	aa0e      	add	r2, sp, #56	; 0x38
 8009c22:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009c26:	aa0d      	add	r2, sp, #52	; 0x34
 8009c28:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009c2c:	9203      	str	r2, [sp, #12]
 8009c2e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009c32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c36:	6023      	str	r3, [r4, #0]
 8009c38:	6863      	ldr	r3, [r4, #4]
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4628      	mov	r0, r5
 8009c40:	4653      	mov	r3, sl
 8009c42:	910b      	str	r1, [sp, #44]	; 0x2c
 8009c44:	f003 fb55 	bl	800d2f2 <__cvt>
 8009c48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c4a:	4680      	mov	r8, r0
 8009c4c:	2947      	cmp	r1, #71	; 0x47
 8009c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009c50:	d108      	bne.n	8009c64 <_printf_float+0x138>
 8009c52:	1cc8      	adds	r0, r1, #3
 8009c54:	db02      	blt.n	8009c5c <_printf_float+0x130>
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	dd40      	ble.n	8009cde <_printf_float+0x1b2>
 8009c5c:	f1a9 0902 	sub.w	r9, r9, #2
 8009c60:	fa5f f989 	uxtb.w	r9, r9
 8009c64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c68:	d81f      	bhi.n	8009caa <_printf_float+0x17e>
 8009c6a:	464a      	mov	r2, r9
 8009c6c:	3901      	subs	r1, #1
 8009c6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c72:	910d      	str	r1, [sp, #52]	; 0x34
 8009c74:	f003 fb9c 	bl	800d3b0 <__exponent>
 8009c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c7a:	4682      	mov	sl, r0
 8009c7c:	1813      	adds	r3, r2, r0
 8009c7e:	2a01      	cmp	r2, #1
 8009c80:	6123      	str	r3, [r4, #16]
 8009c82:	dc02      	bgt.n	8009c8a <_printf_float+0x15e>
 8009c84:	6822      	ldr	r2, [r4, #0]
 8009c86:	07d2      	lsls	r2, r2, #31
 8009c88:	d501      	bpl.n	8009c8e <_printf_float+0x162>
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	6123      	str	r3, [r4, #16]
 8009c8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d09b      	beq.n	8009bce <_printf_float+0xa2>
 8009c96:	232d      	movs	r3, #45	; 0x2d
 8009c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c9c:	e797      	b.n	8009bce <_printf_float+0xa2>
 8009c9e:	2947      	cmp	r1, #71	; 0x47
 8009ca0:	d1bc      	bne.n	8009c1c <_printf_float+0xf0>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1ba      	bne.n	8009c1c <_printf_float+0xf0>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7b7      	b.n	8009c1a <_printf_float+0xee>
 8009caa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009cae:	d118      	bne.n	8009ce2 <_printf_float+0x1b6>
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	dd0b      	ble.n	8009cce <_printf_float+0x1a2>
 8009cb6:	6121      	str	r1, [r4, #16]
 8009cb8:	b913      	cbnz	r3, 8009cc0 <_printf_float+0x194>
 8009cba:	6822      	ldr	r2, [r4, #0]
 8009cbc:	07d0      	lsls	r0, r2, #31
 8009cbe:	d502      	bpl.n	8009cc6 <_printf_float+0x19a>
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	440b      	add	r3, r1
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	f04f 0a00 	mov.w	sl, #0
 8009cca:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ccc:	e7df      	b.n	8009c8e <_printf_float+0x162>
 8009cce:	b913      	cbnz	r3, 8009cd6 <_printf_float+0x1aa>
 8009cd0:	6822      	ldr	r2, [r4, #0]
 8009cd2:	07d2      	lsls	r2, r2, #31
 8009cd4:	d501      	bpl.n	8009cda <_printf_float+0x1ae>
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	e7f4      	b.n	8009cc4 <_printf_float+0x198>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e7f2      	b.n	8009cc4 <_printf_float+0x198>
 8009cde:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	db05      	blt.n	8009cf4 <_printf_float+0x1c8>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	6121      	str	r1, [r4, #16]
 8009cec:	07d8      	lsls	r0, r3, #31
 8009cee:	d5ea      	bpl.n	8009cc6 <_printf_float+0x19a>
 8009cf0:	1c4b      	adds	r3, r1, #1
 8009cf2:	e7e7      	b.n	8009cc4 <_printf_float+0x198>
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	bfcc      	ite	gt
 8009cf8:	2201      	movgt	r2, #1
 8009cfa:	f1c1 0202 	rsble	r2, r1, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	e7e0      	b.n	8009cc4 <_printf_float+0x198>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	055a      	lsls	r2, r3, #21
 8009d06:	d407      	bmi.n	8009d18 <_printf_float+0x1ec>
 8009d08:	6923      	ldr	r3, [r4, #16]
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	d12b      	bne.n	8009d6e <_printf_float+0x242>
 8009d16:	e764      	b.n	8009be2 <_printf_float+0xb6>
 8009d18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d1c:	f240 80dd 	bls.w	8009eda <_printf_float+0x3ae>
 8009d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d24:	2200      	movs	r2, #0
 8009d26:	2300      	movs	r3, #0
 8009d28:	f7f6 fe3c 	bl	80009a4 <__aeabi_dcmpeq>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d033      	beq.n	8009d98 <_printf_float+0x26c>
 8009d30:	2301      	movs	r3, #1
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	4a35      	ldr	r2, [pc, #212]	; (8009e0c <_printf_float+0x2e0>)
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f43f af51 	beq.w	8009be2 <_printf_float+0xb6>
 8009d40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009d44:	429a      	cmp	r2, r3
 8009d46:	db02      	blt.n	8009d4e <_printf_float+0x222>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	07d8      	lsls	r0, r3, #31
 8009d4c:	d50f      	bpl.n	8009d6e <_printf_float+0x242>
 8009d4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d52:	4631      	mov	r1, r6
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b8      	blx	r7
 8009d58:	3001      	adds	r0, #1
 8009d5a:	f43f af42 	beq.w	8009be2 <_printf_float+0xb6>
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	f104 091a 	add.w	r9, r4, #26
 8009d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	4543      	cmp	r3, r8
 8009d6c:	dc09      	bgt.n	8009d82 <_printf_float+0x256>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	079b      	lsls	r3, r3, #30
 8009d72:	f100 8102 	bmi.w	8009f7a <_printf_float+0x44e>
 8009d76:	68e0      	ldr	r0, [r4, #12]
 8009d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d7a:	4298      	cmp	r0, r3
 8009d7c:	bfb8      	it	lt
 8009d7e:	4618      	movlt	r0, r3
 8009d80:	e731      	b.n	8009be6 <_printf_float+0xba>
 8009d82:	2301      	movs	r3, #1
 8009d84:	464a      	mov	r2, r9
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f43f af28 	beq.w	8009be2 <_printf_float+0xb6>
 8009d92:	f108 0801 	add.w	r8, r8, #1
 8009d96:	e7e6      	b.n	8009d66 <_printf_float+0x23a>
 8009d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	dc38      	bgt.n	8009e10 <_printf_float+0x2e4>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	4a19      	ldr	r2, [pc, #100]	; (8009e0c <_printf_float+0x2e0>)
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	f43f af1a 	beq.w	8009be2 <_printf_float+0xb6>
 8009dae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009db2:	4313      	orrs	r3, r2
 8009db4:	d102      	bne.n	8009dbc <_printf_float+0x290>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	07d9      	lsls	r1, r3, #31
 8009dba:	d5d8      	bpl.n	8009d6e <_printf_float+0x242>
 8009dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f43f af0b 	beq.w	8009be2 <_printf_float+0xb6>
 8009dcc:	f04f 0900 	mov.w	r9, #0
 8009dd0:	f104 0a1a 	add.w	sl, r4, #26
 8009dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd6:	425b      	negs	r3, r3
 8009dd8:	454b      	cmp	r3, r9
 8009dda:	dc01      	bgt.n	8009de0 <_printf_float+0x2b4>
 8009ddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dde:	e794      	b.n	8009d0a <_printf_float+0x1de>
 8009de0:	2301      	movs	r3, #1
 8009de2:	4652      	mov	r2, sl
 8009de4:	4631      	mov	r1, r6
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b8      	blx	r7
 8009dea:	3001      	adds	r0, #1
 8009dec:	f43f aef9 	beq.w	8009be2 <_printf_float+0xb6>
 8009df0:	f109 0901 	add.w	r9, r9, #1
 8009df4:	e7ee      	b.n	8009dd4 <_printf_float+0x2a8>
 8009df6:	bf00      	nop
 8009df8:	7fefffff 	.word	0x7fefffff
 8009dfc:	0800f0b5 	.word	0x0800f0b5
 8009e00:	0800f0b9 	.word	0x0800f0b9
 8009e04:	0800f0c1 	.word	0x0800f0c1
 8009e08:	0800f0bd 	.word	0x0800f0bd
 8009e0c:	0800f0c5 	.word	0x0800f0c5
 8009e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e14:	429a      	cmp	r2, r3
 8009e16:	bfa8      	it	ge
 8009e18:	461a      	movge	r2, r3
 8009e1a:	2a00      	cmp	r2, #0
 8009e1c:	4691      	mov	r9, r2
 8009e1e:	dc37      	bgt.n	8009e90 <_printf_float+0x364>
 8009e20:	f04f 0b00 	mov.w	fp, #0
 8009e24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e28:	f104 021a 	add.w	r2, r4, #26
 8009e2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e30:	ebaa 0309 	sub.w	r3, sl, r9
 8009e34:	455b      	cmp	r3, fp
 8009e36:	dc33      	bgt.n	8009ea0 <_printf_float+0x374>
 8009e38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	db3b      	blt.n	8009eb8 <_printf_float+0x38c>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	07da      	lsls	r2, r3, #31
 8009e44:	d438      	bmi.n	8009eb8 <_printf_float+0x38c>
 8009e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e4a:	eba3 020a 	sub.w	r2, r3, sl
 8009e4e:	eba3 0901 	sub.w	r9, r3, r1
 8009e52:	4591      	cmp	r9, r2
 8009e54:	bfa8      	it	ge
 8009e56:	4691      	movge	r9, r2
 8009e58:	f1b9 0f00 	cmp.w	r9, #0
 8009e5c:	dc34      	bgt.n	8009ec8 <_printf_float+0x39c>
 8009e5e:	f04f 0800 	mov.w	r8, #0
 8009e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e66:	f104 0a1a 	add.w	sl, r4, #26
 8009e6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e6e:	1a9b      	subs	r3, r3, r2
 8009e70:	eba3 0309 	sub.w	r3, r3, r9
 8009e74:	4543      	cmp	r3, r8
 8009e76:	f77f af7a 	ble.w	8009d6e <_printf_float+0x242>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4652      	mov	r2, sl
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	f43f aeac 	beq.w	8009be2 <_printf_float+0xb6>
 8009e8a:	f108 0801 	add.w	r8, r8, #1
 8009e8e:	e7ec      	b.n	8009e6a <_printf_float+0x33e>
 8009e90:	4613      	mov	r3, r2
 8009e92:	4631      	mov	r1, r6
 8009e94:	4642      	mov	r2, r8
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d1c0      	bne.n	8009e20 <_printf_float+0x2f4>
 8009e9e:	e6a0      	b.n	8009be2 <_printf_float+0xb6>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f ae99 	beq.w	8009be2 <_printf_float+0xb6>
 8009eb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eb2:	f10b 0b01 	add.w	fp, fp, #1
 8009eb6:	e7b9      	b.n	8009e2c <_printf_float+0x300>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	d1bf      	bne.n	8009e46 <_printf_float+0x31a>
 8009ec6:	e68c      	b.n	8009be2 <_printf_float+0xb6>
 8009ec8:	464b      	mov	r3, r9
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4628      	mov	r0, r5
 8009ece:	eb08 020a 	add.w	r2, r8, sl
 8009ed2:	47b8      	blx	r7
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	d1c2      	bne.n	8009e5e <_printf_float+0x332>
 8009ed8:	e683      	b.n	8009be2 <_printf_float+0xb6>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009edc:	2a01      	cmp	r2, #1
 8009ede:	dc01      	bgt.n	8009ee4 <_printf_float+0x3b8>
 8009ee0:	07db      	lsls	r3, r3, #31
 8009ee2:	d537      	bpl.n	8009f54 <_printf_float+0x428>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	f43f ae77 	beq.w	8009be2 <_printf_float+0xb6>
 8009ef4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	f43f ae6f 	beq.w	8009be2 <_printf_float+0xb6>
 8009f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f7f6 fd4a 	bl	80009a4 <__aeabi_dcmpeq>
 8009f10:	b9d8      	cbnz	r0, 8009f4a <_printf_float+0x41e>
 8009f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f14:	f108 0201 	add.w	r2, r8, #1
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	4631      	mov	r1, r6
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	d10e      	bne.n	8009f42 <_printf_float+0x416>
 8009f24:	e65d      	b.n	8009be2 <_printf_float+0xb6>
 8009f26:	2301      	movs	r3, #1
 8009f28:	464a      	mov	r2, r9
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	47b8      	blx	r7
 8009f30:	3001      	adds	r0, #1
 8009f32:	f43f ae56 	beq.w	8009be2 <_printf_float+0xb6>
 8009f36:	f108 0801 	add.w	r8, r8, #1
 8009f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	4543      	cmp	r3, r8
 8009f40:	dcf1      	bgt.n	8009f26 <_printf_float+0x3fa>
 8009f42:	4653      	mov	r3, sl
 8009f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f48:	e6e0      	b.n	8009d0c <_printf_float+0x1e0>
 8009f4a:	f04f 0800 	mov.w	r8, #0
 8009f4e:	f104 091a 	add.w	r9, r4, #26
 8009f52:	e7f2      	b.n	8009f3a <_printf_float+0x40e>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4642      	mov	r2, r8
 8009f58:	e7df      	b.n	8009f1a <_printf_float+0x3ee>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	464a      	mov	r2, r9
 8009f5e:	4631      	mov	r1, r6
 8009f60:	4628      	mov	r0, r5
 8009f62:	47b8      	blx	r7
 8009f64:	3001      	adds	r0, #1
 8009f66:	f43f ae3c 	beq.w	8009be2 <_printf_float+0xb6>
 8009f6a:	f108 0801 	add.w	r8, r8, #1
 8009f6e:	68e3      	ldr	r3, [r4, #12]
 8009f70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f72:	1a5b      	subs	r3, r3, r1
 8009f74:	4543      	cmp	r3, r8
 8009f76:	dcf0      	bgt.n	8009f5a <_printf_float+0x42e>
 8009f78:	e6fd      	b.n	8009d76 <_printf_float+0x24a>
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	f104 0919 	add.w	r9, r4, #25
 8009f82:	e7f4      	b.n	8009f6e <_printf_float+0x442>

08009f84 <_printf_i>:
 8009f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	7e0f      	ldrb	r7, [r1, #24]
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	2f78      	cmp	r7, #120	; 0x78
 8009f8e:	4680      	mov	r8, r0
 8009f90:	460c      	mov	r4, r1
 8009f92:	469a      	mov	sl, r3
 8009f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f9a:	d807      	bhi.n	8009fac <_printf_i+0x28>
 8009f9c:	2f62      	cmp	r7, #98	; 0x62
 8009f9e:	d80a      	bhi.n	8009fb6 <_printf_i+0x32>
 8009fa0:	2f00      	cmp	r7, #0
 8009fa2:	f000 80d9 	beq.w	800a158 <_printf_i+0x1d4>
 8009fa6:	2f58      	cmp	r7, #88	; 0x58
 8009fa8:	f000 80a4 	beq.w	800a0f4 <_printf_i+0x170>
 8009fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fb4:	e03a      	b.n	800a02c <_printf_i+0xa8>
 8009fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fba:	2b15      	cmp	r3, #21
 8009fbc:	d8f6      	bhi.n	8009fac <_printf_i+0x28>
 8009fbe:	a101      	add	r1, pc, #4	; (adr r1, 8009fc4 <_printf_i+0x40>)
 8009fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc4:	0800a01d 	.word	0x0800a01d
 8009fc8:	0800a031 	.word	0x0800a031
 8009fcc:	08009fad 	.word	0x08009fad
 8009fd0:	08009fad 	.word	0x08009fad
 8009fd4:	08009fad 	.word	0x08009fad
 8009fd8:	08009fad 	.word	0x08009fad
 8009fdc:	0800a031 	.word	0x0800a031
 8009fe0:	08009fad 	.word	0x08009fad
 8009fe4:	08009fad 	.word	0x08009fad
 8009fe8:	08009fad 	.word	0x08009fad
 8009fec:	08009fad 	.word	0x08009fad
 8009ff0:	0800a13f 	.word	0x0800a13f
 8009ff4:	0800a061 	.word	0x0800a061
 8009ff8:	0800a121 	.word	0x0800a121
 8009ffc:	08009fad 	.word	0x08009fad
 800a000:	08009fad 	.word	0x08009fad
 800a004:	0800a161 	.word	0x0800a161
 800a008:	08009fad 	.word	0x08009fad
 800a00c:	0800a061 	.word	0x0800a061
 800a010:	08009fad 	.word	0x08009fad
 800a014:	08009fad 	.word	0x08009fad
 800a018:	0800a129 	.word	0x0800a129
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	1d1a      	adds	r2, r3, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	602a      	str	r2, [r5, #0]
 800a024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a02c:	2301      	movs	r3, #1
 800a02e:	e0a4      	b.n	800a17a <_printf_i+0x1f6>
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	6829      	ldr	r1, [r5, #0]
 800a034:	0606      	lsls	r6, r0, #24
 800a036:	f101 0304 	add.w	r3, r1, #4
 800a03a:	d50a      	bpl.n	800a052 <_printf_i+0xce>
 800a03c:	680e      	ldr	r6, [r1, #0]
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	2e00      	cmp	r6, #0
 800a042:	da03      	bge.n	800a04c <_printf_i+0xc8>
 800a044:	232d      	movs	r3, #45	; 0x2d
 800a046:	4276      	negs	r6, r6
 800a048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a04c:	230a      	movs	r3, #10
 800a04e:	485e      	ldr	r0, [pc, #376]	; (800a1c8 <_printf_i+0x244>)
 800a050:	e019      	b.n	800a086 <_printf_i+0x102>
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a058:	602b      	str	r3, [r5, #0]
 800a05a:	bf18      	it	ne
 800a05c:	b236      	sxthne	r6, r6
 800a05e:	e7ef      	b.n	800a040 <_printf_i+0xbc>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	6820      	ldr	r0, [r4, #0]
 800a064:	1d19      	adds	r1, r3, #4
 800a066:	6029      	str	r1, [r5, #0]
 800a068:	0601      	lsls	r1, r0, #24
 800a06a:	d501      	bpl.n	800a070 <_printf_i+0xec>
 800a06c:	681e      	ldr	r6, [r3, #0]
 800a06e:	e002      	b.n	800a076 <_printf_i+0xf2>
 800a070:	0646      	lsls	r6, r0, #25
 800a072:	d5fb      	bpl.n	800a06c <_printf_i+0xe8>
 800a074:	881e      	ldrh	r6, [r3, #0]
 800a076:	2f6f      	cmp	r7, #111	; 0x6f
 800a078:	bf0c      	ite	eq
 800a07a:	2308      	moveq	r3, #8
 800a07c:	230a      	movne	r3, #10
 800a07e:	4852      	ldr	r0, [pc, #328]	; (800a1c8 <_printf_i+0x244>)
 800a080:	2100      	movs	r1, #0
 800a082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a086:	6865      	ldr	r5, [r4, #4]
 800a088:	2d00      	cmp	r5, #0
 800a08a:	bfa8      	it	ge
 800a08c:	6821      	ldrge	r1, [r4, #0]
 800a08e:	60a5      	str	r5, [r4, #8]
 800a090:	bfa4      	itt	ge
 800a092:	f021 0104 	bicge.w	r1, r1, #4
 800a096:	6021      	strge	r1, [r4, #0]
 800a098:	b90e      	cbnz	r6, 800a09e <_printf_i+0x11a>
 800a09a:	2d00      	cmp	r5, #0
 800a09c:	d04d      	beq.n	800a13a <_printf_i+0x1b6>
 800a09e:	4615      	mov	r5, r2
 800a0a0:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0a4:	fb03 6711 	mls	r7, r3, r1, r6
 800a0a8:	5dc7      	ldrb	r7, [r0, r7]
 800a0aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0ae:	4637      	mov	r7, r6
 800a0b0:	42bb      	cmp	r3, r7
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	d9f4      	bls.n	800a0a0 <_printf_i+0x11c>
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d10b      	bne.n	800a0d2 <_printf_i+0x14e>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	07de      	lsls	r6, r3, #31
 800a0be:	d508      	bpl.n	800a0d2 <_printf_i+0x14e>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6861      	ldr	r1, [r4, #4]
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	bfde      	ittt	le
 800a0c8:	2330      	movle	r3, #48	; 0x30
 800a0ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0d2:	1b52      	subs	r2, r2, r5
 800a0d4:	6122      	str	r2, [r4, #16]
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f8cd a000 	str.w	sl, [sp]
 800a0e0:	aa03      	add	r2, sp, #12
 800a0e2:	f003 f9a3 	bl	800d42c <_printf_common>
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d14c      	bne.n	800a184 <_printf_i+0x200>
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0ee:	b004      	add	sp, #16
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	4834      	ldr	r0, [pc, #208]	; (800a1c8 <_printf_i+0x244>)
 800a0f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0fa:	6829      	ldr	r1, [r5, #0]
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	f851 6b04 	ldr.w	r6, [r1], #4
 800a102:	6029      	str	r1, [r5, #0]
 800a104:	061d      	lsls	r5, r3, #24
 800a106:	d514      	bpl.n	800a132 <_printf_i+0x1ae>
 800a108:	07df      	lsls	r7, r3, #31
 800a10a:	bf44      	itt	mi
 800a10c:	f043 0320 	orrmi.w	r3, r3, #32
 800a110:	6023      	strmi	r3, [r4, #0]
 800a112:	b91e      	cbnz	r6, 800a11c <_printf_i+0x198>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	f023 0320 	bic.w	r3, r3, #32
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	2310      	movs	r3, #16
 800a11e:	e7af      	b.n	800a080 <_printf_i+0xfc>
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	f043 0320 	orr.w	r3, r3, #32
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	2378      	movs	r3, #120	; 0x78
 800a12a:	4828      	ldr	r0, [pc, #160]	; (800a1cc <_printf_i+0x248>)
 800a12c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a130:	e7e3      	b.n	800a0fa <_printf_i+0x176>
 800a132:	0659      	lsls	r1, r3, #25
 800a134:	bf48      	it	mi
 800a136:	b2b6      	uxthmi	r6, r6
 800a138:	e7e6      	b.n	800a108 <_printf_i+0x184>
 800a13a:	4615      	mov	r5, r2
 800a13c:	e7bb      	b.n	800a0b6 <_printf_i+0x132>
 800a13e:	682b      	ldr	r3, [r5, #0]
 800a140:	6826      	ldr	r6, [r4, #0]
 800a142:	1d18      	adds	r0, r3, #4
 800a144:	6961      	ldr	r1, [r4, #20]
 800a146:	6028      	str	r0, [r5, #0]
 800a148:	0635      	lsls	r5, r6, #24
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	d501      	bpl.n	800a152 <_printf_i+0x1ce>
 800a14e:	6019      	str	r1, [r3, #0]
 800a150:	e002      	b.n	800a158 <_printf_i+0x1d4>
 800a152:	0670      	lsls	r0, r6, #25
 800a154:	d5fb      	bpl.n	800a14e <_printf_i+0x1ca>
 800a156:	8019      	strh	r1, [r3, #0]
 800a158:	2300      	movs	r3, #0
 800a15a:	4615      	mov	r5, r2
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	e7ba      	b.n	800a0d6 <_printf_i+0x152>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	2100      	movs	r1, #0
 800a164:	1d1a      	adds	r2, r3, #4
 800a166:	602a      	str	r2, [r5, #0]
 800a168:	681d      	ldr	r5, [r3, #0]
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	4628      	mov	r0, r5
 800a16e:	f003 fa77 	bl	800d660 <memchr>
 800a172:	b108      	cbz	r0, 800a178 <_printf_i+0x1f4>
 800a174:	1b40      	subs	r0, r0, r5
 800a176:	6060      	str	r0, [r4, #4]
 800a178:	6863      	ldr	r3, [r4, #4]
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	2300      	movs	r3, #0
 800a17e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a182:	e7a8      	b.n	800a0d6 <_printf_i+0x152>
 800a184:	462a      	mov	r2, r5
 800a186:	4649      	mov	r1, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	47d0      	blx	sl
 800a18e:	3001      	adds	r0, #1
 800a190:	d0ab      	beq.n	800a0ea <_printf_i+0x166>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	079b      	lsls	r3, r3, #30
 800a196:	d413      	bmi.n	800a1c0 <_printf_i+0x23c>
 800a198:	68e0      	ldr	r0, [r4, #12]
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	4298      	cmp	r0, r3
 800a19e:	bfb8      	it	lt
 800a1a0:	4618      	movlt	r0, r3
 800a1a2:	e7a4      	b.n	800a0ee <_printf_i+0x16a>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4632      	mov	r2, r6
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	47d0      	blx	sl
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d09b      	beq.n	800a0ea <_printf_i+0x166>
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	68e3      	ldr	r3, [r4, #12]
 800a1b6:	9903      	ldr	r1, [sp, #12]
 800a1b8:	1a5b      	subs	r3, r3, r1
 800a1ba:	42ab      	cmp	r3, r5
 800a1bc:	dcf2      	bgt.n	800a1a4 <_printf_i+0x220>
 800a1be:	e7eb      	b.n	800a198 <_printf_i+0x214>
 800a1c0:	2500      	movs	r5, #0
 800a1c2:	f104 0619 	add.w	r6, r4, #25
 800a1c6:	e7f5      	b.n	800a1b4 <_printf_i+0x230>
 800a1c8:	0800f0c7 	.word	0x0800f0c7
 800a1cc:	0800f0d8 	.word	0x0800f0d8

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4d05      	ldr	r5, [pc, #20]	; (800a1ec <_sbrk_r+0x1c>)
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7fa fb6c 	bl	80048b8 <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20000e74 	.word	0x20000e74

0800a1f0 <_localeconv_r>:
 800a1f0:	4800      	ldr	r0, [pc, #0]	; (800a1f4 <_localeconv_r+0x4>)
 800a1f2:	4770      	bx	lr
 800a1f4:	20000218 	.word	0x20000218

0800a1f8 <__malloc_lock>:
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <__malloc_lock+0x8>)
 800a1fa:	f001 bd36 	b.w	800bc6a <__retarget_lock_acquire_recursive>
 800a1fe:	bf00      	nop
 800a200:	20000390 	.word	0x20000390

0800a204 <__malloc_unlock>:
 800a204:	4801      	ldr	r0, [pc, #4]	; (800a20c <__malloc_unlock+0x8>)
 800a206:	f001 bd38 	b.w	800bc7a <__retarget_lock_release_recursive>
 800a20a:	bf00      	nop
 800a20c:	20000390 	.word	0x20000390

0800a210 <_Balloc>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	b976      	cbnz	r6, 800a238 <_Balloc+0x28>
 800a21a:	2010      	movs	r0, #16
 800a21c:	f7ff fbdc 	bl	80099d8 <malloc>
 800a220:	4602      	mov	r2, r0
 800a222:	6260      	str	r0, [r4, #36]	; 0x24
 800a224:	b920      	cbnz	r0, 800a230 <_Balloc+0x20>
 800a226:	2166      	movs	r1, #102	; 0x66
 800a228:	4b17      	ldr	r3, [pc, #92]	; (800a288 <_Balloc+0x78>)
 800a22a:	4818      	ldr	r0, [pc, #96]	; (800a28c <_Balloc+0x7c>)
 800a22c:	f000 fb08 	bl	800a840 <__assert_func>
 800a230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a234:	6006      	str	r6, [r0, #0]
 800a236:	60c6      	str	r6, [r0, #12]
 800a238:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a23a:	68f3      	ldr	r3, [r6, #12]
 800a23c:	b183      	cbz	r3, 800a260 <_Balloc+0x50>
 800a23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a246:	b9b8      	cbnz	r0, 800a278 <_Balloc+0x68>
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f605 	lsl.w	r6, r1, r5
 800a24e:	1d72      	adds	r2, r6, #5
 800a250:	4620      	mov	r0, r4
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	f003 fa7a 	bl	800d74c <_calloc_r>
 800a258:	b160      	cbz	r0, 800a274 <_Balloc+0x64>
 800a25a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a25e:	e00e      	b.n	800a27e <_Balloc+0x6e>
 800a260:	2221      	movs	r2, #33	; 0x21
 800a262:	2104      	movs	r1, #4
 800a264:	4620      	mov	r0, r4
 800a266:	f003 fa71 	bl	800d74c <_calloc_r>
 800a26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26c:	60f0      	str	r0, [r6, #12]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1e4      	bne.n	800a23e <_Balloc+0x2e>
 800a274:	2000      	movs	r0, #0
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	6802      	ldr	r2, [r0, #0]
 800a27a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a27e:	2300      	movs	r3, #0
 800a280:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a284:	e7f7      	b.n	800a276 <_Balloc+0x66>
 800a286:	bf00      	nop
 800a288:	0800f0f6 	.word	0x0800f0f6
 800a28c:	0800f178 	.word	0x0800f178

0800a290 <_Bfree>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a294:	4605      	mov	r5, r0
 800a296:	460c      	mov	r4, r1
 800a298:	b976      	cbnz	r6, 800a2b8 <_Bfree+0x28>
 800a29a:	2010      	movs	r0, #16
 800a29c:	f7ff fb9c 	bl	80099d8 <malloc>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2a4:	b920      	cbnz	r0, 800a2b0 <_Bfree+0x20>
 800a2a6:	218a      	movs	r1, #138	; 0x8a
 800a2a8:	4b08      	ldr	r3, [pc, #32]	; (800a2cc <_Bfree+0x3c>)
 800a2aa:	4809      	ldr	r0, [pc, #36]	; (800a2d0 <_Bfree+0x40>)
 800a2ac:	f000 fac8 	bl	800a840 <__assert_func>
 800a2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b4:	6006      	str	r6, [r0, #0]
 800a2b6:	60c6      	str	r6, [r0, #12]
 800a2b8:	b13c      	cbz	r4, 800a2ca <_Bfree+0x3a>
 800a2ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2bc:	6862      	ldr	r2, [r4, #4]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2c4:	6021      	str	r1, [r4, #0]
 800a2c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	0800f0f6 	.word	0x0800f0f6
 800a2d0:	0800f178 	.word	0x0800f178

0800a2d4 <__multadd>:
 800a2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d8:	4607      	mov	r7, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	461e      	mov	r6, r3
 800a2de:	2000      	movs	r0, #0
 800a2e0:	690d      	ldr	r5, [r1, #16]
 800a2e2:	f101 0c14 	add.w	ip, r1, #20
 800a2e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	b299      	uxth	r1, r3
 800a2ee:	fb02 6101 	mla	r1, r2, r1, r6
 800a2f2:	0c1e      	lsrs	r6, r3, #16
 800a2f4:	0c0b      	lsrs	r3, r1, #16
 800a2f6:	fb02 3306 	mla	r3, r2, r6, r3
 800a2fa:	b289      	uxth	r1, r1
 800a2fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a300:	4285      	cmp	r5, r0
 800a302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a306:	f84c 1b04 	str.w	r1, [ip], #4
 800a30a:	dcec      	bgt.n	800a2e6 <__multadd+0x12>
 800a30c:	b30e      	cbz	r6, 800a352 <__multadd+0x7e>
 800a30e:	68a3      	ldr	r3, [r4, #8]
 800a310:	42ab      	cmp	r3, r5
 800a312:	dc19      	bgt.n	800a348 <__multadd+0x74>
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	4638      	mov	r0, r7
 800a318:	3101      	adds	r1, #1
 800a31a:	f7ff ff79 	bl	800a210 <_Balloc>
 800a31e:	4680      	mov	r8, r0
 800a320:	b928      	cbnz	r0, 800a32e <__multadd+0x5a>
 800a322:	4602      	mov	r2, r0
 800a324:	21b5      	movs	r1, #181	; 0xb5
 800a326:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <__multadd+0x84>)
 800a328:	480c      	ldr	r0, [pc, #48]	; (800a35c <__multadd+0x88>)
 800a32a:	f000 fa89 	bl	800a840 <__assert_func>
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	f104 010c 	add.w	r1, r4, #12
 800a334:	3202      	adds	r2, #2
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	300c      	adds	r0, #12
 800a33a:	f002 ffc4 	bl	800d2c6 <memcpy>
 800a33e:	4621      	mov	r1, r4
 800a340:	4638      	mov	r0, r7
 800a342:	f7ff ffa5 	bl	800a290 <_Bfree>
 800a346:	4644      	mov	r4, r8
 800a348:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a34c:	3501      	adds	r5, #1
 800a34e:	615e      	str	r6, [r3, #20]
 800a350:	6125      	str	r5, [r4, #16]
 800a352:	4620      	mov	r0, r4
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	0800f167 	.word	0x0800f167
 800a35c:	0800f178 	.word	0x0800f178

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff ff53 	bl	800a210 <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a372:	4b04      	ldr	r3, [pc, #16]	; (800a384 <__i2b+0x24>)
 800a374:	4804      	ldr	r0, [pc, #16]	; (800a388 <__i2b+0x28>)
 800a376:	f000 fa63 	bl	800a840 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800f167 	.word	0x0800f167
 800a388:	0800f178 	.word	0x0800f178

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4691      	mov	r9, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a398:	460c      	mov	r4, r1
 800a39a:	429a      	cmp	r2, r3
 800a39c:	bfbe      	ittt	lt
 800a39e:	460b      	movlt	r3, r1
 800a3a0:	464c      	movlt	r4, r9
 800a3a2:	4699      	movlt	r9, r3
 800a3a4:	6927      	ldr	r7, [r4, #16]
 800a3a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3aa:	68a3      	ldr	r3, [r4, #8]
 800a3ac:	6861      	ldr	r1, [r4, #4]
 800a3ae:	eb07 060a 	add.w	r6, r7, sl
 800a3b2:	42b3      	cmp	r3, r6
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	bfb8      	it	lt
 800a3b8:	3101      	addlt	r1, #1
 800a3ba:	f7ff ff29 	bl	800a210 <_Balloc>
 800a3be:	b930      	cbnz	r0, 800a3ce <__multiply+0x42>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	f240 115d 	movw	r1, #349	; 0x15d
 800a3c6:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <__multiply+0x148>)
 800a3c8:	4843      	ldr	r0, [pc, #268]	; (800a4d8 <__multiply+0x14c>)
 800a3ca:	f000 fa39 	bl	800a840 <__assert_func>
 800a3ce:	f100 0514 	add.w	r5, r0, #20
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3da:	4543      	cmp	r3, r8
 800a3dc:	d321      	bcc.n	800a422 <__multiply+0x96>
 800a3de:	f104 0314 	add.w	r3, r4, #20
 800a3e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3e6:	f109 0314 	add.w	r3, r9, #20
 800a3ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3ee:	9202      	str	r2, [sp, #8]
 800a3f0:	1b3a      	subs	r2, r7, r4
 800a3f2:	3a15      	subs	r2, #21
 800a3f4:	f022 0203 	bic.w	r2, r2, #3
 800a3f8:	3204      	adds	r2, #4
 800a3fa:	f104 0115 	add.w	r1, r4, #21
 800a3fe:	428f      	cmp	r7, r1
 800a400:	bf38      	it	cc
 800a402:	2204      	movcc	r2, #4
 800a404:	9201      	str	r2, [sp, #4]
 800a406:	9a02      	ldr	r2, [sp, #8]
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d80c      	bhi.n	800a428 <__multiply+0x9c>
 800a40e:	2e00      	cmp	r6, #0
 800a410:	dd03      	ble.n	800a41a <__multiply+0x8e>
 800a412:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a416:	2b00      	cmp	r3, #0
 800a418:	d059      	beq.n	800a4ce <__multiply+0x142>
 800a41a:	6106      	str	r6, [r0, #16]
 800a41c:	b005      	add	sp, #20
 800a41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a422:	f843 2b04 	str.w	r2, [r3], #4
 800a426:	e7d8      	b.n	800a3da <__multiply+0x4e>
 800a428:	f8b3 a000 	ldrh.w	sl, [r3]
 800a42c:	f1ba 0f00 	cmp.w	sl, #0
 800a430:	d023      	beq.n	800a47a <__multiply+0xee>
 800a432:	46a9      	mov	r9, r5
 800a434:	f04f 0c00 	mov.w	ip, #0
 800a438:	f104 0e14 	add.w	lr, r4, #20
 800a43c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a440:	f8d9 1000 	ldr.w	r1, [r9]
 800a444:	fa1f fb82 	uxth.w	fp, r2
 800a448:	b289      	uxth	r1, r1
 800a44a:	fb0a 110b 	mla	r1, sl, fp, r1
 800a44e:	4461      	add	r1, ip
 800a450:	f8d9 c000 	ldr.w	ip, [r9]
 800a454:	0c12      	lsrs	r2, r2, #16
 800a456:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a45a:	fb0a c202 	mla	r2, sl, r2, ip
 800a45e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a462:	b289      	uxth	r1, r1
 800a464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a468:	4577      	cmp	r7, lr
 800a46a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a46e:	f849 1b04 	str.w	r1, [r9], #4
 800a472:	d8e3      	bhi.n	800a43c <__multiply+0xb0>
 800a474:	9a01      	ldr	r2, [sp, #4]
 800a476:	f845 c002 	str.w	ip, [r5, r2]
 800a47a:	9a03      	ldr	r2, [sp, #12]
 800a47c:	3304      	adds	r3, #4
 800a47e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a482:	f1b9 0f00 	cmp.w	r9, #0
 800a486:	d020      	beq.n	800a4ca <__multiply+0x13e>
 800a488:	46ae      	mov	lr, r5
 800a48a:	f04f 0a00 	mov.w	sl, #0
 800a48e:	6829      	ldr	r1, [r5, #0]
 800a490:	f104 0c14 	add.w	ip, r4, #20
 800a494:	f8bc b000 	ldrh.w	fp, [ip]
 800a498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a49c:	b289      	uxth	r1, r1
 800a49e:	fb09 220b 	mla	r2, r9, fp, r2
 800a4a2:	4492      	add	sl, r2
 800a4a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4a8:	f84e 1b04 	str.w	r1, [lr], #4
 800a4ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4b0:	f8be 1000 	ldrh.w	r1, [lr]
 800a4b4:	0c12      	lsrs	r2, r2, #16
 800a4b6:	fb09 1102 	mla	r1, r9, r2, r1
 800a4ba:	4567      	cmp	r7, ip
 800a4bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4c4:	d8e6      	bhi.n	800a494 <__multiply+0x108>
 800a4c6:	9a01      	ldr	r2, [sp, #4]
 800a4c8:	50a9      	str	r1, [r5, r2]
 800a4ca:	3504      	adds	r5, #4
 800a4cc:	e79b      	b.n	800a406 <__multiply+0x7a>
 800a4ce:	3e01      	subs	r6, #1
 800a4d0:	e79d      	b.n	800a40e <__multiply+0x82>
 800a4d2:	bf00      	nop
 800a4d4:	0800f167 	.word	0x0800f167
 800a4d8:	0800f178 	.word	0x0800f178

0800a4dc <__pow5mult>:
 800a4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4615      	mov	r5, r2
 800a4e2:	f012 0203 	ands.w	r2, r2, #3
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	d007      	beq.n	800a4fc <__pow5mult+0x20>
 800a4ec:	4c25      	ldr	r4, [pc, #148]	; (800a584 <__pow5mult+0xa8>)
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4f6:	f7ff feed 	bl	800a2d4 <__multadd>
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	10ad      	asrs	r5, r5, #2
 800a4fe:	d03d      	beq.n	800a57c <__pow5mult+0xa0>
 800a500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a502:	b97c      	cbnz	r4, 800a524 <__pow5mult+0x48>
 800a504:	2010      	movs	r0, #16
 800a506:	f7ff fa67 	bl	80099d8 <malloc>
 800a50a:	4602      	mov	r2, r0
 800a50c:	6270      	str	r0, [r6, #36]	; 0x24
 800a50e:	b928      	cbnz	r0, 800a51c <__pow5mult+0x40>
 800a510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a514:	4b1c      	ldr	r3, [pc, #112]	; (800a588 <__pow5mult+0xac>)
 800a516:	481d      	ldr	r0, [pc, #116]	; (800a58c <__pow5mult+0xb0>)
 800a518:	f000 f992 	bl	800a840 <__assert_func>
 800a51c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a520:	6004      	str	r4, [r0, #0]
 800a522:	60c4      	str	r4, [r0, #12]
 800a524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a52c:	b94c      	cbnz	r4, 800a542 <__pow5mult+0x66>
 800a52e:	f240 2171 	movw	r1, #625	; 0x271
 800a532:	4630      	mov	r0, r6
 800a534:	f7ff ff14 	bl	800a360 <__i2b>
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	07eb      	lsls	r3, r5, #31
 800a548:	d50a      	bpl.n	800a560 <__pow5mult+0x84>
 800a54a:	4639      	mov	r1, r7
 800a54c:	4622      	mov	r2, r4
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff ff1c 	bl	800a38c <__multiply>
 800a554:	4680      	mov	r8, r0
 800a556:	4639      	mov	r1, r7
 800a558:	4630      	mov	r0, r6
 800a55a:	f7ff fe99 	bl	800a290 <_Bfree>
 800a55e:	4647      	mov	r7, r8
 800a560:	106d      	asrs	r5, r5, #1
 800a562:	d00b      	beq.n	800a57c <__pow5mult+0xa0>
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	b938      	cbnz	r0, 800a578 <__pow5mult+0x9c>
 800a568:	4622      	mov	r2, r4
 800a56a:	4621      	mov	r1, r4
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff ff0d 	bl	800a38c <__multiply>
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	f8c0 9000 	str.w	r9, [r0]
 800a578:	4604      	mov	r4, r0
 800a57a:	e7e4      	b.n	800a546 <__pow5mult+0x6a>
 800a57c:	4638      	mov	r0, r7
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a582:	bf00      	nop
 800a584:	0800ef48 	.word	0x0800ef48
 800a588:	0800f0f6 	.word	0x0800f0f6
 800a58c:	0800f178 	.word	0x0800f178

0800a590 <__lshift>:
 800a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	4607      	mov	r7, r0
 800a598:	4691      	mov	r9, r2
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	6849      	ldr	r1, [r1, #4]
 800a59e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a8:	f108 0601 	add.w	r6, r8, #1
 800a5ac:	42b3      	cmp	r3, r6
 800a5ae:	db0b      	blt.n	800a5c8 <__lshift+0x38>
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff fe2d 	bl	800a210 <_Balloc>
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b948      	cbnz	r0, 800a5ce <__lshift+0x3e>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5c0:	4b29      	ldr	r3, [pc, #164]	; (800a668 <__lshift+0xd8>)
 800a5c2:	482a      	ldr	r0, [pc, #168]	; (800a66c <__lshift+0xdc>)
 800a5c4:	f000 f93c 	bl	800a840 <__assert_func>
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	e7ee      	b.n	800a5ac <__lshift+0x1c>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f100 0114 	add.w	r1, r0, #20
 800a5d4:	f100 0210 	add.w	r2, r0, #16
 800a5d8:	4618      	mov	r0, r3
 800a5da:	4553      	cmp	r3, sl
 800a5dc:	db37      	blt.n	800a64e <__lshift+0xbe>
 800a5de:	6920      	ldr	r0, [r4, #16]
 800a5e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5e4:	f104 0314 	add.w	r3, r4, #20
 800a5e8:	f019 091f 	ands.w	r9, r9, #31
 800a5ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a5f4:	d02f      	beq.n	800a656 <__lshift+0xc6>
 800a5f6:	468a      	mov	sl, r1
 800a5f8:	f04f 0c00 	mov.w	ip, #0
 800a5fc:	f1c9 0e20 	rsb	lr, r9, #32
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	fa02 f209 	lsl.w	r2, r2, r9
 800a606:	ea42 020c 	orr.w	r2, r2, ip
 800a60a:	f84a 2b04 	str.w	r2, [sl], #4
 800a60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a612:	4298      	cmp	r0, r3
 800a614:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a618:	d8f2      	bhi.n	800a600 <__lshift+0x70>
 800a61a:	1b03      	subs	r3, r0, r4
 800a61c:	3b15      	subs	r3, #21
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	3304      	adds	r3, #4
 800a624:	f104 0215 	add.w	r2, r4, #21
 800a628:	4290      	cmp	r0, r2
 800a62a:	bf38      	it	cc
 800a62c:	2304      	movcc	r3, #4
 800a62e:	f841 c003 	str.w	ip, [r1, r3]
 800a632:	f1bc 0f00 	cmp.w	ip, #0
 800a636:	d001      	beq.n	800a63c <__lshift+0xac>
 800a638:	f108 0602 	add.w	r6, r8, #2
 800a63c:	3e01      	subs	r6, #1
 800a63e:	4638      	mov	r0, r7
 800a640:	4621      	mov	r1, r4
 800a642:	612e      	str	r6, [r5, #16]
 800a644:	f7ff fe24 	bl	800a290 <_Bfree>
 800a648:	4628      	mov	r0, r5
 800a64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a652:	3301      	adds	r3, #1
 800a654:	e7c1      	b.n	800a5da <__lshift+0x4a>
 800a656:	3904      	subs	r1, #4
 800a658:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65c:	4298      	cmp	r0, r3
 800a65e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a662:	d8f9      	bhi.n	800a658 <__lshift+0xc8>
 800a664:	e7ea      	b.n	800a63c <__lshift+0xac>
 800a666:	bf00      	nop
 800a668:	0800f167 	.word	0x0800f167
 800a66c:	0800f178 	.word	0x0800f178

0800a670 <__mdiff>:
 800a670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	460d      	mov	r5, r1
 800a676:	4607      	mov	r7, r0
 800a678:	4611      	mov	r1, r2
 800a67a:	4628      	mov	r0, r5
 800a67c:	4614      	mov	r4, r2
 800a67e:	f003 f84a 	bl	800d716 <__mcmp>
 800a682:	1e06      	subs	r6, r0, #0
 800a684:	d111      	bne.n	800a6aa <__mdiff+0x3a>
 800a686:	4631      	mov	r1, r6
 800a688:	4638      	mov	r0, r7
 800a68a:	f7ff fdc1 	bl	800a210 <_Balloc>
 800a68e:	4602      	mov	r2, r0
 800a690:	b928      	cbnz	r0, 800a69e <__mdiff+0x2e>
 800a692:	f240 2132 	movw	r1, #562	; 0x232
 800a696:	4b3a      	ldr	r3, [pc, #232]	; (800a780 <__mdiff+0x110>)
 800a698:	483a      	ldr	r0, [pc, #232]	; (800a784 <__mdiff+0x114>)
 800a69a:	f000 f8d1 	bl	800a840 <__assert_func>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6aa:	bfa4      	itt	ge
 800a6ac:	4623      	movge	r3, r4
 800a6ae:	462c      	movge	r4, r5
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	6861      	ldr	r1, [r4, #4]
 800a6b4:	bfa6      	itte	ge
 800a6b6:	461d      	movge	r5, r3
 800a6b8:	2600      	movge	r6, #0
 800a6ba:	2601      	movlt	r6, #1
 800a6bc:	f7ff fda8 	bl	800a210 <_Balloc>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	b918      	cbnz	r0, 800a6cc <__mdiff+0x5c>
 800a6c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6c8:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <__mdiff+0x110>)
 800a6ca:	e7e5      	b.n	800a698 <__mdiff+0x28>
 800a6cc:	f102 0814 	add.w	r8, r2, #20
 800a6d0:	46c2      	mov	sl, r8
 800a6d2:	f04f 0c00 	mov.w	ip, #0
 800a6d6:	6927      	ldr	r7, [r4, #16]
 800a6d8:	60c6      	str	r6, [r0, #12]
 800a6da:	692e      	ldr	r6, [r5, #16]
 800a6dc:	f104 0014 	add.w	r0, r4, #20
 800a6e0:	f105 0914 	add.w	r9, r5, #20
 800a6e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a6e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6ec:	3410      	adds	r4, #16
 800a6ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a6f2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6f6:	fa1f f18b 	uxth.w	r1, fp
 800a6fa:	448c      	add	ip, r1
 800a6fc:	b299      	uxth	r1, r3
 800a6fe:	0c1b      	lsrs	r3, r3, #16
 800a700:	ebac 0101 	sub.w	r1, ip, r1
 800a704:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a708:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a70c:	b289      	uxth	r1, r1
 800a70e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a712:	454e      	cmp	r6, r9
 800a714:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a718:	f84a 3b04 	str.w	r3, [sl], #4
 800a71c:	d8e7      	bhi.n	800a6ee <__mdiff+0x7e>
 800a71e:	1b73      	subs	r3, r6, r5
 800a720:	3b15      	subs	r3, #21
 800a722:	f023 0303 	bic.w	r3, r3, #3
 800a726:	3515      	adds	r5, #21
 800a728:	3304      	adds	r3, #4
 800a72a:	42ae      	cmp	r6, r5
 800a72c:	bf38      	it	cc
 800a72e:	2304      	movcc	r3, #4
 800a730:	4418      	add	r0, r3
 800a732:	4443      	add	r3, r8
 800a734:	461e      	mov	r6, r3
 800a736:	4605      	mov	r5, r0
 800a738:	4575      	cmp	r5, lr
 800a73a:	d30e      	bcc.n	800a75a <__mdiff+0xea>
 800a73c:	f10e 0103 	add.w	r1, lr, #3
 800a740:	1a09      	subs	r1, r1, r0
 800a742:	f021 0103 	bic.w	r1, r1, #3
 800a746:	3803      	subs	r0, #3
 800a748:	4586      	cmp	lr, r0
 800a74a:	bf38      	it	cc
 800a74c:	2100      	movcc	r1, #0
 800a74e:	4419      	add	r1, r3
 800a750:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a754:	b18b      	cbz	r3, 800a77a <__mdiff+0x10a>
 800a756:	6117      	str	r7, [r2, #16]
 800a758:	e7a4      	b.n	800a6a4 <__mdiff+0x34>
 800a75a:	f855 8b04 	ldr.w	r8, [r5], #4
 800a75e:	fa1f f188 	uxth.w	r1, r8
 800a762:	4461      	add	r1, ip
 800a764:	140c      	asrs	r4, r1, #16
 800a766:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a76a:	b289      	uxth	r1, r1
 800a76c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a770:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a774:	f846 1b04 	str.w	r1, [r6], #4
 800a778:	e7de      	b.n	800a738 <__mdiff+0xc8>
 800a77a:	3f01      	subs	r7, #1
 800a77c:	e7e8      	b.n	800a750 <__mdiff+0xe0>
 800a77e:	bf00      	nop
 800a780:	0800f167 	.word	0x0800f167
 800a784:	0800f178 	.word	0x0800f178

0800a788 <__d2b>:
 800a788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a78c:	2101      	movs	r1, #1
 800a78e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a792:	4690      	mov	r8, r2
 800a794:	461d      	mov	r5, r3
 800a796:	f7ff fd3b 	bl	800a210 <_Balloc>
 800a79a:	4604      	mov	r4, r0
 800a79c:	b930      	cbnz	r0, 800a7ac <__d2b+0x24>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f240 310a 	movw	r1, #778	; 0x30a
 800a7a4:	4b24      	ldr	r3, [pc, #144]	; (800a838 <__d2b+0xb0>)
 800a7a6:	4825      	ldr	r0, [pc, #148]	; (800a83c <__d2b+0xb4>)
 800a7a8:	f000 f84a 	bl	800a840 <__assert_func>
 800a7ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a7b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a7b4:	bb2d      	cbnz	r5, 800a802 <__d2b+0x7a>
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	f1b8 0300 	subs.w	r3, r8, #0
 800a7bc:	d026      	beq.n	800a80c <__d2b+0x84>
 800a7be:	4668      	mov	r0, sp
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	f002 ff7b 	bl	800d6bc <__lo0bits>
 800a7c6:	9900      	ldr	r1, [sp, #0]
 800a7c8:	b1f0      	cbz	r0, 800a808 <__d2b+0x80>
 800a7ca:	9a01      	ldr	r2, [sp, #4]
 800a7cc:	f1c0 0320 	rsb	r3, r0, #32
 800a7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	40c2      	lsrs	r2, r0
 800a7d8:	6163      	str	r3, [r4, #20]
 800a7da:	9201      	str	r2, [sp, #4]
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2102      	movne	r1, #2
 800a7e4:	2101      	moveq	r1, #1
 800a7e6:	61a3      	str	r3, [r4, #24]
 800a7e8:	6121      	str	r1, [r4, #16]
 800a7ea:	b1c5      	cbz	r5, 800a81e <__d2b+0x96>
 800a7ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7f0:	4405      	add	r5, r0
 800a7f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7f6:	603d      	str	r5, [r7, #0]
 800a7f8:	6030      	str	r0, [r6, #0]
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	b002      	add	sp, #8
 800a7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a806:	e7d6      	b.n	800a7b6 <__d2b+0x2e>
 800a808:	6161      	str	r1, [r4, #20]
 800a80a:	e7e7      	b.n	800a7dc <__d2b+0x54>
 800a80c:	a801      	add	r0, sp, #4
 800a80e:	f002 ff55 	bl	800d6bc <__lo0bits>
 800a812:	2101      	movs	r1, #1
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	6121      	str	r1, [r4, #16]
 800a818:	6163      	str	r3, [r4, #20]
 800a81a:	3020      	adds	r0, #32
 800a81c:	e7e5      	b.n	800a7ea <__d2b+0x62>
 800a81e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a822:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a826:	6038      	str	r0, [r7, #0]
 800a828:	6918      	ldr	r0, [r3, #16]
 800a82a:	f002 ff27 	bl	800d67c <__hi0bits>
 800a82e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a832:	6031      	str	r1, [r6, #0]
 800a834:	e7e1      	b.n	800a7fa <__d2b+0x72>
 800a836:	bf00      	nop
 800a838:	0800f167 	.word	0x0800f167
 800a83c:	0800f178 	.word	0x0800f178

0800a840 <__assert_func>:
 800a840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a842:	4614      	mov	r4, r2
 800a844:	461a      	mov	r2, r3
 800a846:	4b09      	ldr	r3, [pc, #36]	; (800a86c <__assert_func+0x2c>)
 800a848:	4605      	mov	r5, r0
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68d8      	ldr	r0, [r3, #12]
 800a84e:	b14c      	cbz	r4, 800a864 <__assert_func+0x24>
 800a850:	4b07      	ldr	r3, [pc, #28]	; (800a870 <__assert_func+0x30>)
 800a852:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a856:	9100      	str	r1, [sp, #0]
 800a858:	462b      	mov	r3, r5
 800a85a:	4906      	ldr	r1, [pc, #24]	; (800a874 <__assert_func+0x34>)
 800a85c:	f000 f80e 	bl	800a87c <fiprintf>
 800a860:	f002 ffc8 	bl	800d7f4 <abort>
 800a864:	4b04      	ldr	r3, [pc, #16]	; (800a878 <__assert_func+0x38>)
 800a866:	461c      	mov	r4, r3
 800a868:	e7f3      	b.n	800a852 <__assert_func+0x12>
 800a86a:	bf00      	nop
 800a86c:	200000c4 	.word	0x200000c4
 800a870:	0800f1d3 	.word	0x0800f1d3
 800a874:	0800f1e0 	.word	0x0800f1e0
 800a878:	0800f20e 	.word	0x0800f20e

0800a87c <fiprintf>:
 800a87c:	b40e      	push	{r1, r2, r3}
 800a87e:	b503      	push	{r0, r1, lr}
 800a880:	4601      	mov	r1, r0
 800a882:	ab03      	add	r3, sp, #12
 800a884:	4805      	ldr	r0, [pc, #20]	; (800a89c <fiprintf+0x20>)
 800a886:	f853 2b04 	ldr.w	r2, [r3], #4
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	f000 f807 	bl	800a8a0 <_vfiprintf_r>
 800a892:	b002      	add	sp, #8
 800a894:	f85d eb04 	ldr.w	lr, [sp], #4
 800a898:	b003      	add	sp, #12
 800a89a:	4770      	bx	lr
 800a89c:	200000c4 	.word	0x200000c4

0800a8a0 <_vfiprintf_r>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4614      	mov	r4, r2
 800a8a8:	4698      	mov	r8, r3
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	b09d      	sub	sp, #116	; 0x74
 800a8ae:	b118      	cbz	r0, 800a8b8 <_vfiprintf_r+0x18>
 800a8b0:	6983      	ldr	r3, [r0, #24]
 800a8b2:	b90b      	cbnz	r3, 800a8b8 <_vfiprintf_r+0x18>
 800a8b4:	f000 fae4 	bl	800ae80 <__sinit>
 800a8b8:	4b89      	ldr	r3, [pc, #548]	; (800aae0 <_vfiprintf_r+0x240>)
 800a8ba:	429d      	cmp	r5, r3
 800a8bc:	d11b      	bne.n	800a8f6 <_vfiprintf_r+0x56>
 800a8be:	6875      	ldr	r5, [r6, #4]
 800a8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c2:	07d9      	lsls	r1, r3, #31
 800a8c4:	d405      	bmi.n	800a8d2 <_vfiprintf_r+0x32>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_vfiprintf_r+0x32>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ce:	f001 f9cc 	bl	800bc6a <__retarget_lock_acquire_recursive>
 800a8d2:	89ab      	ldrh	r3, [r5, #12]
 800a8d4:	071b      	lsls	r3, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <_vfiprintf_r+0x3c>
 800a8d8:	692b      	ldr	r3, [r5, #16]
 800a8da:	b9eb      	cbnz	r3, 800a918 <_vfiprintf_r+0x78>
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 f960 	bl	800aba4 <__swsetup_r>
 800a8e4:	b1c0      	cbz	r0, 800a918 <_vfiprintf_r+0x78>
 800a8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e8:	07dc      	lsls	r4, r3, #31
 800a8ea:	d50e      	bpl.n	800a90a <_vfiprintf_r+0x6a>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f0:	b01d      	add	sp, #116	; 0x74
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	4b7b      	ldr	r3, [pc, #492]	; (800aae4 <_vfiprintf_r+0x244>)
 800a8f8:	429d      	cmp	r5, r3
 800a8fa:	d101      	bne.n	800a900 <_vfiprintf_r+0x60>
 800a8fc:	68b5      	ldr	r5, [r6, #8]
 800a8fe:	e7df      	b.n	800a8c0 <_vfiprintf_r+0x20>
 800a900:	4b79      	ldr	r3, [pc, #484]	; (800aae8 <_vfiprintf_r+0x248>)
 800a902:	429d      	cmp	r5, r3
 800a904:	bf08      	it	eq
 800a906:	68f5      	ldreq	r5, [r6, #12]
 800a908:	e7da      	b.n	800a8c0 <_vfiprintf_r+0x20>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	0598      	lsls	r0, r3, #22
 800a90e:	d4ed      	bmi.n	800a8ec <_vfiprintf_r+0x4c>
 800a910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a912:	f001 f9b2 	bl	800bc7a <__retarget_lock_release_recursive>
 800a916:	e7e9      	b.n	800a8ec <_vfiprintf_r+0x4c>
 800a918:	2300      	movs	r3, #0
 800a91a:	9309      	str	r3, [sp, #36]	; 0x24
 800a91c:	2320      	movs	r3, #32
 800a91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a922:	2330      	movs	r3, #48	; 0x30
 800a924:	f04f 0901 	mov.w	r9, #1
 800a928:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aaec <_vfiprintf_r+0x24c>
 800a930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a934:	4623      	mov	r3, r4
 800a936:	469a      	mov	sl, r3
 800a938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a93c:	b10a      	cbz	r2, 800a942 <_vfiprintf_r+0xa2>
 800a93e:	2a25      	cmp	r2, #37	; 0x25
 800a940:	d1f9      	bne.n	800a936 <_vfiprintf_r+0x96>
 800a942:	ebba 0b04 	subs.w	fp, sl, r4
 800a946:	d00b      	beq.n	800a960 <_vfiprintf_r+0xc0>
 800a948:	465b      	mov	r3, fp
 800a94a:	4622      	mov	r2, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f002 ff31 	bl	800d7b6 <__sfputs_r>
 800a954:	3001      	adds	r0, #1
 800a956:	f000 80aa 	beq.w	800aaae <_vfiprintf_r+0x20e>
 800a95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a95c:	445a      	add	r2, fp
 800a95e:	9209      	str	r2, [sp, #36]	; 0x24
 800a960:	f89a 3000 	ldrb.w	r3, [sl]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80a2 	beq.w	800aaae <_vfiprintf_r+0x20e>
 800a96a:	2300      	movs	r3, #0
 800a96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a974:	f10a 0a01 	add.w	sl, sl, #1
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a980:	931a      	str	r3, [sp, #104]	; 0x68
 800a982:	4654      	mov	r4, sl
 800a984:	2205      	movs	r2, #5
 800a986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98a:	4858      	ldr	r0, [pc, #352]	; (800aaec <_vfiprintf_r+0x24c>)
 800a98c:	f002 fe68 	bl	800d660 <memchr>
 800a990:	9a04      	ldr	r2, [sp, #16]
 800a992:	b9d8      	cbnz	r0, 800a9cc <_vfiprintf_r+0x12c>
 800a994:	06d1      	lsls	r1, r2, #27
 800a996:	bf44      	itt	mi
 800a998:	2320      	movmi	r3, #32
 800a99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99e:	0713      	lsls	r3, r2, #28
 800a9a0:	bf44      	itt	mi
 800a9a2:	232b      	movmi	r3, #43	; 0x2b
 800a9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ae:	d015      	beq.n	800a9dc <_vfiprintf_r+0x13c>
 800a9b0:	4654      	mov	r4, sl
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	f04f 0c0a 	mov.w	ip, #10
 800a9b8:	9a07      	ldr	r2, [sp, #28]
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c0:	3b30      	subs	r3, #48	; 0x30
 800a9c2:	2b09      	cmp	r3, #9
 800a9c4:	d94e      	bls.n	800aa64 <_vfiprintf_r+0x1c4>
 800a9c6:	b1b0      	cbz	r0, 800a9f6 <_vfiprintf_r+0x156>
 800a9c8:	9207      	str	r2, [sp, #28]
 800a9ca:	e014      	b.n	800a9f6 <_vfiprintf_r+0x156>
 800a9cc:	eba0 0308 	sub.w	r3, r0, r8
 800a9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	46a2      	mov	sl, r4
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	e7d2      	b.n	800a982 <_vfiprintf_r+0xe2>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1d19      	adds	r1, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	9103      	str	r1, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfbb      	ittet	lt
 800a9e8:	425b      	neglt	r3, r3
 800a9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ee:	9307      	strge	r3, [sp, #28]
 800a9f0:	9307      	strlt	r3, [sp, #28]
 800a9f2:	bfb8      	it	lt
 800a9f4:	9204      	strlt	r2, [sp, #16]
 800a9f6:	7823      	ldrb	r3, [r4, #0]
 800a9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fa:	d10c      	bne.n	800aa16 <_vfiprintf_r+0x176>
 800a9fc:	7863      	ldrb	r3, [r4, #1]
 800a9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800aa00:	d135      	bne.n	800aa6e <_vfiprintf_r+0x1ce>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	3402      	adds	r4, #2
 800aa06:	1d1a      	adds	r2, r3, #4
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	9203      	str	r2, [sp, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bfb8      	it	lt
 800aa10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800aaf0 <_vfiprintf_r+0x250>
 800aa1a:	2203      	movs	r2, #3
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	7821      	ldrb	r1, [r4, #0]
 800aa20:	f002 fe1e 	bl	800d660 <memchr>
 800aa24:	b140      	cbz	r0, 800aa38 <_vfiprintf_r+0x198>
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	eba0 000a 	sub.w	r0, r0, sl
 800aa2c:	fa03 f000 	lsl.w	r0, r3, r0
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	3401      	adds	r4, #1
 800aa34:	4303      	orrs	r3, r0
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	482d      	ldr	r0, [pc, #180]	; (800aaf4 <_vfiprintf_r+0x254>)
 800aa40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa44:	f002 fe0c 	bl	800d660 <memchr>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d03f      	beq.n	800aacc <_vfiprintf_r+0x22c>
 800aa4c:	4b2a      	ldr	r3, [pc, #168]	; (800aaf8 <_vfiprintf_r+0x258>)
 800aa4e:	bb1b      	cbnz	r3, 800aa98 <_vfiprintf_r+0x1f8>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	3307      	adds	r3, #7
 800aa54:	f023 0307 	bic.w	r3, r3, #7
 800aa58:	3308      	adds	r3, #8
 800aa5a:	9303      	str	r3, [sp, #12]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	443b      	add	r3, r7
 800aa60:	9309      	str	r3, [sp, #36]	; 0x24
 800aa62:	e767      	b.n	800a934 <_vfiprintf_r+0x94>
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	e7a5      	b.n	800a9ba <_vfiprintf_r+0x11a>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4619      	mov	r1, r3
 800aa76:	3401      	adds	r4, #1
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa80:	3a30      	subs	r2, #48	; 0x30
 800aa82:	2a09      	cmp	r2, #9
 800aa84:	d903      	bls.n	800aa8e <_vfiprintf_r+0x1ee>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c5      	beq.n	800aa16 <_vfiprintf_r+0x176>
 800aa8a:	9105      	str	r1, [sp, #20]
 800aa8c:	e7c3      	b.n	800aa16 <_vfiprintf_r+0x176>
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	e7f0      	b.n	800aa7a <_vfiprintf_r+0x1da>
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	4b16      	ldr	r3, [pc, #88]	; (800aafc <_vfiprintf_r+0x25c>)
 800aaa2:	a904      	add	r1, sp, #16
 800aaa4:	f7ff f842 	bl	8009b2c <_printf_float>
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	1c78      	adds	r0, r7, #1
 800aaac:	d1d6      	bne.n	800aa5c <_vfiprintf_r+0x1bc>
 800aaae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab0:	07d9      	lsls	r1, r3, #31
 800aab2:	d405      	bmi.n	800aac0 <_vfiprintf_r+0x220>
 800aab4:	89ab      	ldrh	r3, [r5, #12]
 800aab6:	059a      	lsls	r2, r3, #22
 800aab8:	d402      	bmi.n	800aac0 <_vfiprintf_r+0x220>
 800aaba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aabc:	f001 f8dd 	bl	800bc7a <__retarget_lock_release_recursive>
 800aac0:	89ab      	ldrh	r3, [r5, #12]
 800aac2:	065b      	lsls	r3, r3, #25
 800aac4:	f53f af12 	bmi.w	800a8ec <_vfiprintf_r+0x4c>
 800aac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaca:	e711      	b.n	800a8f0 <_vfiprintf_r+0x50>
 800aacc:	ab03      	add	r3, sp, #12
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	462a      	mov	r2, r5
 800aad2:	4630      	mov	r0, r6
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <_vfiprintf_r+0x25c>)
 800aad6:	a904      	add	r1, sp, #16
 800aad8:	f7ff fa54 	bl	8009f84 <_printf_i>
 800aadc:	e7e4      	b.n	800aaa8 <_vfiprintf_r+0x208>
 800aade:	bf00      	nop
 800aae0:	0800ef74 	.word	0x0800ef74
 800aae4:	0800ef94 	.word	0x0800ef94
 800aae8:	0800ef54 	.word	0x0800ef54
 800aaec:	0800f219 	.word	0x0800f219
 800aaf0:	0800f21f 	.word	0x0800f21f
 800aaf4:	0800f223 	.word	0x0800f223
 800aaf8:	08009b2d 	.word	0x08009b2d
 800aafc:	0800d7b7 	.word	0x0800d7b7

0800ab00 <__swbuf_r>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	460e      	mov	r6, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	4605      	mov	r5, r0
 800ab08:	b118      	cbz	r0, 800ab12 <__swbuf_r+0x12>
 800ab0a:	6983      	ldr	r3, [r0, #24]
 800ab0c:	b90b      	cbnz	r3, 800ab12 <__swbuf_r+0x12>
 800ab0e:	f000 f9b7 	bl	800ae80 <__sinit>
 800ab12:	4b21      	ldr	r3, [pc, #132]	; (800ab98 <__swbuf_r+0x98>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	d12b      	bne.n	800ab70 <__swbuf_r+0x70>
 800ab18:	686c      	ldr	r4, [r5, #4]
 800ab1a:	69a3      	ldr	r3, [r4, #24]
 800ab1c:	60a3      	str	r3, [r4, #8]
 800ab1e:	89a3      	ldrh	r3, [r4, #12]
 800ab20:	071a      	lsls	r2, r3, #28
 800ab22:	d52f      	bpl.n	800ab84 <__swbuf_r+0x84>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	b36b      	cbz	r3, 800ab84 <__swbuf_r+0x84>
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	6820      	ldr	r0, [r4, #0]
 800ab2c:	b2f6      	uxtb	r6, r6
 800ab2e:	1ac0      	subs	r0, r0, r3
 800ab30:	6963      	ldr	r3, [r4, #20]
 800ab32:	4637      	mov	r7, r6
 800ab34:	4283      	cmp	r3, r0
 800ab36:	dc04      	bgt.n	800ab42 <__swbuf_r+0x42>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 f922 	bl	800ad84 <_fflush_r>
 800ab40:	bb30      	cbnz	r0, 800ab90 <__swbuf_r+0x90>
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	3001      	adds	r0, #1
 800ab46:	3b01      	subs	r3, #1
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	6022      	str	r2, [r4, #0]
 800ab50:	701e      	strb	r6, [r3, #0]
 800ab52:	6963      	ldr	r3, [r4, #20]
 800ab54:	4283      	cmp	r3, r0
 800ab56:	d004      	beq.n	800ab62 <__swbuf_r+0x62>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	07db      	lsls	r3, r3, #31
 800ab5c:	d506      	bpl.n	800ab6c <__swbuf_r+0x6c>
 800ab5e:	2e0a      	cmp	r6, #10
 800ab60:	d104      	bne.n	800ab6c <__swbuf_r+0x6c>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4628      	mov	r0, r5
 800ab66:	f000 f90d 	bl	800ad84 <_fflush_r>
 800ab6a:	b988      	cbnz	r0, 800ab90 <__swbuf_r+0x90>
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab70:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <__swbuf_r+0x9c>)
 800ab72:	429c      	cmp	r4, r3
 800ab74:	d101      	bne.n	800ab7a <__swbuf_r+0x7a>
 800ab76:	68ac      	ldr	r4, [r5, #8]
 800ab78:	e7cf      	b.n	800ab1a <__swbuf_r+0x1a>
 800ab7a:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <__swbuf_r+0xa0>)
 800ab7c:	429c      	cmp	r4, r3
 800ab7e:	bf08      	it	eq
 800ab80:	68ec      	ldreq	r4, [r5, #12]
 800ab82:	e7ca      	b.n	800ab1a <__swbuf_r+0x1a>
 800ab84:	4621      	mov	r1, r4
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 f80c 	bl	800aba4 <__swsetup_r>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d0cb      	beq.n	800ab28 <__swbuf_r+0x28>
 800ab90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab94:	e7ea      	b.n	800ab6c <__swbuf_r+0x6c>
 800ab96:	bf00      	nop
 800ab98:	0800ef74 	.word	0x0800ef74
 800ab9c:	0800ef94 	.word	0x0800ef94
 800aba0:	0800ef54 	.word	0x0800ef54

0800aba4 <__swsetup_r>:
 800aba4:	4b32      	ldr	r3, [pc, #200]	; (800ac70 <__swsetup_r+0xcc>)
 800aba6:	b570      	push	{r4, r5, r6, lr}
 800aba8:	681d      	ldr	r5, [r3, #0]
 800abaa:	4606      	mov	r6, r0
 800abac:	460c      	mov	r4, r1
 800abae:	b125      	cbz	r5, 800abba <__swsetup_r+0x16>
 800abb0:	69ab      	ldr	r3, [r5, #24]
 800abb2:	b913      	cbnz	r3, 800abba <__swsetup_r+0x16>
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 f963 	bl	800ae80 <__sinit>
 800abba:	4b2e      	ldr	r3, [pc, #184]	; (800ac74 <__swsetup_r+0xd0>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	d10f      	bne.n	800abe0 <__swsetup_r+0x3c>
 800abc0:	686c      	ldr	r4, [r5, #4]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abc8:	0719      	lsls	r1, r3, #28
 800abca:	d42c      	bmi.n	800ac26 <__swsetup_r+0x82>
 800abcc:	06dd      	lsls	r5, r3, #27
 800abce:	d411      	bmi.n	800abf4 <__swsetup_r+0x50>
 800abd0:	2309      	movs	r3, #9
 800abd2:	6033      	str	r3, [r6, #0]
 800abd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	e03e      	b.n	800ac5e <__swsetup_r+0xba>
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <__swsetup_r+0xd4>)
 800abe2:	429c      	cmp	r4, r3
 800abe4:	d101      	bne.n	800abea <__swsetup_r+0x46>
 800abe6:	68ac      	ldr	r4, [r5, #8]
 800abe8:	e7eb      	b.n	800abc2 <__swsetup_r+0x1e>
 800abea:	4b24      	ldr	r3, [pc, #144]	; (800ac7c <__swsetup_r+0xd8>)
 800abec:	429c      	cmp	r4, r3
 800abee:	bf08      	it	eq
 800abf0:	68ec      	ldreq	r4, [r5, #12]
 800abf2:	e7e6      	b.n	800abc2 <__swsetup_r+0x1e>
 800abf4:	0758      	lsls	r0, r3, #29
 800abf6:	d512      	bpl.n	800ac1e <__swsetup_r+0x7a>
 800abf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfa:	b141      	cbz	r1, 800ac0e <__swsetup_r+0x6a>
 800abfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d002      	beq.n	800ac0a <__swsetup_r+0x66>
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7fe feef 	bl	80099e8 <_free_r>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	2300      	movs	r3, #0
 800ac18:	6063      	str	r3, [r4, #4]
 800ac1a:	6923      	ldr	r3, [r4, #16]
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f043 0308 	orr.w	r3, r3, #8
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	b94b      	cbnz	r3, 800ac3e <__swsetup_r+0x9a>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac34:	d003      	beq.n	800ac3e <__swsetup_r+0x9a>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f99f 	bl	800af7c <__smakebuf_r>
 800ac3e:	89a0      	ldrh	r0, [r4, #12]
 800ac40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac44:	f010 0301 	ands.w	r3, r0, #1
 800ac48:	d00a      	beq.n	800ac60 <__swsetup_r+0xbc>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60a3      	str	r3, [r4, #8]
 800ac4e:	6963      	ldr	r3, [r4, #20]
 800ac50:	425b      	negs	r3, r3
 800ac52:	61a3      	str	r3, [r4, #24]
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	b943      	cbnz	r3, 800ac6a <__swsetup_r+0xc6>
 800ac58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac5c:	d1ba      	bne.n	800abd4 <__swsetup_r+0x30>
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	0781      	lsls	r1, r0, #30
 800ac62:	bf58      	it	pl
 800ac64:	6963      	ldrpl	r3, [r4, #20]
 800ac66:	60a3      	str	r3, [r4, #8]
 800ac68:	e7f4      	b.n	800ac54 <__swsetup_r+0xb0>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	e7f7      	b.n	800ac5e <__swsetup_r+0xba>
 800ac6e:	bf00      	nop
 800ac70:	200000c4 	.word	0x200000c4
 800ac74:	0800ef74 	.word	0x0800ef74
 800ac78:	0800ef94 	.word	0x0800ef94
 800ac7c:	0800ef54 	.word	0x0800ef54

0800ac80 <__sflush_r>:
 800ac80:	898a      	ldrh	r2, [r1, #12]
 800ac82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac84:	4605      	mov	r5, r0
 800ac86:	0710      	lsls	r0, r2, #28
 800ac88:	460c      	mov	r4, r1
 800ac8a:	d457      	bmi.n	800ad3c <__sflush_r+0xbc>
 800ac8c:	684b      	ldr	r3, [r1, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	dc04      	bgt.n	800ac9c <__sflush_r+0x1c>
 800ac92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dc01      	bgt.n	800ac9c <__sflush_r+0x1c>
 800ac98:	2000      	movs	r0, #0
 800ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	d0fa      	beq.n	800ac98 <__sflush_r+0x18>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aca8:	682f      	ldr	r7, [r5, #0]
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	d032      	beq.n	800ad14 <__sflush_r+0x94>
 800acae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	075a      	lsls	r2, r3, #29
 800acb4:	d505      	bpl.n	800acc2 <__sflush_r+0x42>
 800acb6:	6863      	ldr	r3, [r4, #4]
 800acb8:	1ac0      	subs	r0, r0, r3
 800acba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acbc:	b10b      	cbz	r3, 800acc2 <__sflush_r+0x42>
 800acbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acc0:	1ac0      	subs	r0, r0, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	4602      	mov	r2, r0
 800acc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acc8:	4628      	mov	r0, r5
 800acca:	6a21      	ldr	r1, [r4, #32]
 800accc:	47b0      	blx	r6
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	d106      	bne.n	800ace2 <__sflush_r+0x62>
 800acd4:	6829      	ldr	r1, [r5, #0]
 800acd6:	291d      	cmp	r1, #29
 800acd8:	d82c      	bhi.n	800ad34 <__sflush_r+0xb4>
 800acda:	4a29      	ldr	r2, [pc, #164]	; (800ad80 <__sflush_r+0x100>)
 800acdc:	40ca      	lsrs	r2, r1
 800acde:	07d6      	lsls	r6, r2, #31
 800ace0:	d528      	bpl.n	800ad34 <__sflush_r+0xb4>
 800ace2:	2200      	movs	r2, #0
 800ace4:	6062      	str	r2, [r4, #4]
 800ace6:	6922      	ldr	r2, [r4, #16]
 800ace8:	04d9      	lsls	r1, r3, #19
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	d504      	bpl.n	800acf8 <__sflush_r+0x78>
 800acee:	1c42      	adds	r2, r0, #1
 800acf0:	d101      	bne.n	800acf6 <__sflush_r+0x76>
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	b903      	cbnz	r3, 800acf8 <__sflush_r+0x78>
 800acf6:	6560      	str	r0, [r4, #84]	; 0x54
 800acf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acfa:	602f      	str	r7, [r5, #0]
 800acfc:	2900      	cmp	r1, #0
 800acfe:	d0cb      	beq.n	800ac98 <__sflush_r+0x18>
 800ad00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad04:	4299      	cmp	r1, r3
 800ad06:	d002      	beq.n	800ad0e <__sflush_r+0x8e>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f7fe fe6d 	bl	80099e8 <_free_r>
 800ad0e:	2000      	movs	r0, #0
 800ad10:	6360      	str	r0, [r4, #52]	; 0x34
 800ad12:	e7c2      	b.n	800ac9a <__sflush_r+0x1a>
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	2301      	movs	r3, #1
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	1c41      	adds	r1, r0, #1
 800ad1e:	d1c7      	bne.n	800acb0 <__sflush_r+0x30>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0c4      	beq.n	800acb0 <__sflush_r+0x30>
 800ad26:	2b1d      	cmp	r3, #29
 800ad28:	d001      	beq.n	800ad2e <__sflush_r+0xae>
 800ad2a:	2b16      	cmp	r3, #22
 800ad2c:	d101      	bne.n	800ad32 <__sflush_r+0xb2>
 800ad2e:	602f      	str	r7, [r5, #0]
 800ad30:	e7b2      	b.n	800ac98 <__sflush_r+0x18>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	e7ae      	b.n	800ac9a <__sflush_r+0x1a>
 800ad3c:	690f      	ldr	r7, [r1, #16]
 800ad3e:	2f00      	cmp	r7, #0
 800ad40:	d0aa      	beq.n	800ac98 <__sflush_r+0x18>
 800ad42:	0793      	lsls	r3, r2, #30
 800ad44:	bf18      	it	ne
 800ad46:	2300      	movne	r3, #0
 800ad48:	680e      	ldr	r6, [r1, #0]
 800ad4a:	bf08      	it	eq
 800ad4c:	694b      	ldreq	r3, [r1, #20]
 800ad4e:	1bf6      	subs	r6, r6, r7
 800ad50:	600f      	str	r7, [r1, #0]
 800ad52:	608b      	str	r3, [r1, #8]
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	dd9f      	ble.n	800ac98 <__sflush_r+0x18>
 800ad58:	4633      	mov	r3, r6
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	6a21      	ldr	r1, [r4, #32]
 800ad60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ad64:	47e0      	blx	ip
 800ad66:	2800      	cmp	r0, #0
 800ad68:	dc06      	bgt.n	800ad78 <__sflush_r+0xf8>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	e790      	b.n	800ac9a <__sflush_r+0x1a>
 800ad78:	4407      	add	r7, r0
 800ad7a:	1a36      	subs	r6, r6, r0
 800ad7c:	e7ea      	b.n	800ad54 <__sflush_r+0xd4>
 800ad7e:	bf00      	nop
 800ad80:	20400001 	.word	0x20400001

0800ad84 <_fflush_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	690b      	ldr	r3, [r1, #16]
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	b913      	cbnz	r3, 800ad94 <_fflush_r+0x10>
 800ad8e:	2500      	movs	r5, #0
 800ad90:	4628      	mov	r0, r5
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	b118      	cbz	r0, 800ad9e <_fflush_r+0x1a>
 800ad96:	6983      	ldr	r3, [r0, #24]
 800ad98:	b90b      	cbnz	r3, 800ad9e <_fflush_r+0x1a>
 800ad9a:	f000 f871 	bl	800ae80 <__sinit>
 800ad9e:	4b14      	ldr	r3, [pc, #80]	; (800adf0 <_fflush_r+0x6c>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	d11b      	bne.n	800addc <_fflush_r+0x58>
 800ada4:	686c      	ldr	r4, [r5, #4]
 800ada6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0ef      	beq.n	800ad8e <_fflush_r+0xa>
 800adae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adb0:	07d0      	lsls	r0, r2, #31
 800adb2:	d404      	bmi.n	800adbe <_fflush_r+0x3a>
 800adb4:	0599      	lsls	r1, r3, #22
 800adb6:	d402      	bmi.n	800adbe <_fflush_r+0x3a>
 800adb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adba:	f000 ff56 	bl	800bc6a <__retarget_lock_acquire_recursive>
 800adbe:	4628      	mov	r0, r5
 800adc0:	4621      	mov	r1, r4
 800adc2:	f7ff ff5d 	bl	800ac80 <__sflush_r>
 800adc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adc8:	4605      	mov	r5, r0
 800adca:	07da      	lsls	r2, r3, #31
 800adcc:	d4e0      	bmi.n	800ad90 <_fflush_r+0xc>
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	059b      	lsls	r3, r3, #22
 800add2:	d4dd      	bmi.n	800ad90 <_fflush_r+0xc>
 800add4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800add6:	f000 ff50 	bl	800bc7a <__retarget_lock_release_recursive>
 800adda:	e7d9      	b.n	800ad90 <_fflush_r+0xc>
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <_fflush_r+0x70>)
 800adde:	429c      	cmp	r4, r3
 800ade0:	d101      	bne.n	800ade6 <_fflush_r+0x62>
 800ade2:	68ac      	ldr	r4, [r5, #8]
 800ade4:	e7df      	b.n	800ada6 <_fflush_r+0x22>
 800ade6:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <_fflush_r+0x74>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	bf08      	it	eq
 800adec:	68ec      	ldreq	r4, [r5, #12]
 800adee:	e7da      	b.n	800ada6 <_fflush_r+0x22>
 800adf0:	0800ef74 	.word	0x0800ef74
 800adf4:	0800ef94 	.word	0x0800ef94
 800adf8:	0800ef54 	.word	0x0800ef54

0800adfc <std>:
 800adfc:	2300      	movs	r3, #0
 800adfe:	b510      	push	{r4, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	e9c0 3300 	strd	r3, r3, [r0]
 800ae06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae0a:	6083      	str	r3, [r0, #8]
 800ae0c:	8181      	strh	r1, [r0, #12]
 800ae0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae10:	81c2      	strh	r2, [r0, #14]
 800ae12:	6183      	str	r3, [r0, #24]
 800ae14:	4619      	mov	r1, r3
 800ae16:	2208      	movs	r2, #8
 800ae18:	305c      	adds	r0, #92	; 0x5c
 800ae1a:	f002 fa62 	bl	800d2e2 <memset>
 800ae1e:	4b05      	ldr	r3, [pc, #20]	; (800ae34 <std+0x38>)
 800ae20:	6224      	str	r4, [r4, #32]
 800ae22:	6263      	str	r3, [r4, #36]	; 0x24
 800ae24:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <std+0x3c>)
 800ae26:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <std+0x40>)
 800ae2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <std+0x44>)
 800ae2e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	bf00      	nop
 800ae34:	0800d90b 	.word	0x0800d90b
 800ae38:	0800d92d 	.word	0x0800d92d
 800ae3c:	0800d965 	.word	0x0800d965
 800ae40:	0800d989 	.word	0x0800d989

0800ae44 <_cleanup_r>:
 800ae44:	4901      	ldr	r1, [pc, #4]	; (800ae4c <_cleanup_r+0x8>)
 800ae46:	f002 bcf2 	b.w	800d82e <_fwalk_reent>
 800ae4a:	bf00      	nop
 800ae4c:	0800ad85 	.word	0x0800ad85

0800ae50 <__sfp_lock_acquire>:
 800ae50:	4801      	ldr	r0, [pc, #4]	; (800ae58 <__sfp_lock_acquire+0x8>)
 800ae52:	f000 bf0a 	b.w	800bc6a <__retarget_lock_acquire_recursive>
 800ae56:	bf00      	nop
 800ae58:	200003a4 	.word	0x200003a4

0800ae5c <__sfp_lock_release>:
 800ae5c:	4801      	ldr	r0, [pc, #4]	; (800ae64 <__sfp_lock_release+0x8>)
 800ae5e:	f000 bf0c 	b.w	800bc7a <__retarget_lock_release_recursive>
 800ae62:	bf00      	nop
 800ae64:	200003a4 	.word	0x200003a4

0800ae68 <__sinit_lock_acquire>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__sinit_lock_acquire+0x8>)
 800ae6a:	f000 befe 	b.w	800bc6a <__retarget_lock_acquire_recursive>
 800ae6e:	bf00      	nop
 800ae70:	200003b8 	.word	0x200003b8

0800ae74 <__sinit_lock_release>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__sinit_lock_release+0x8>)
 800ae76:	f000 bf00 	b.w	800bc7a <__retarget_lock_release_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	200003b8 	.word	0x200003b8

0800ae80 <__sinit>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	f7ff fff0 	bl	800ae68 <__sinit_lock_acquire>
 800ae88:	69a3      	ldr	r3, [r4, #24]
 800ae8a:	b11b      	cbz	r3, 800ae94 <__sinit+0x14>
 800ae8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae90:	f7ff bff0 	b.w	800ae74 <__sinit_lock_release>
 800ae94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae98:	6523      	str	r3, [r4, #80]	; 0x50
 800ae9a:	4b13      	ldr	r3, [pc, #76]	; (800aee8 <__sinit+0x68>)
 800ae9c:	4a13      	ldr	r2, [pc, #76]	; (800aeec <__sinit+0x6c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aea2:	42a3      	cmp	r3, r4
 800aea4:	bf08      	it	eq
 800aea6:	2301      	moveq	r3, #1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	bf08      	it	eq
 800aeac:	61a3      	streq	r3, [r4, #24]
 800aeae:	f000 f81f 	bl	800aef0 <__sfp>
 800aeb2:	6060      	str	r0, [r4, #4]
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 f81b 	bl	800aef0 <__sfp>
 800aeba:	60a0      	str	r0, [r4, #8]
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 f817 	bl	800aef0 <__sfp>
 800aec2:	2200      	movs	r2, #0
 800aec4:	2104      	movs	r1, #4
 800aec6:	60e0      	str	r0, [r4, #12]
 800aec8:	6860      	ldr	r0, [r4, #4]
 800aeca:	f7ff ff97 	bl	800adfc <std>
 800aece:	2201      	movs	r2, #1
 800aed0:	2109      	movs	r1, #9
 800aed2:	68a0      	ldr	r0, [r4, #8]
 800aed4:	f7ff ff92 	bl	800adfc <std>
 800aed8:	2202      	movs	r2, #2
 800aeda:	2112      	movs	r1, #18
 800aedc:	68e0      	ldr	r0, [r4, #12]
 800aede:	f7ff ff8d 	bl	800adfc <std>
 800aee2:	2301      	movs	r3, #1
 800aee4:	61a3      	str	r3, [r4, #24]
 800aee6:	e7d1      	b.n	800ae8c <__sinit+0xc>
 800aee8:	0800ef44 	.word	0x0800ef44
 800aeec:	0800ae45 	.word	0x0800ae45

0800aef0 <__sfp>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	4607      	mov	r7, r0
 800aef4:	f7ff ffac 	bl	800ae50 <__sfp_lock_acquire>
 800aef8:	4b1e      	ldr	r3, [pc, #120]	; (800af74 <__sfp+0x84>)
 800aefa:	681e      	ldr	r6, [r3, #0]
 800aefc:	69b3      	ldr	r3, [r6, #24]
 800aefe:	b913      	cbnz	r3, 800af06 <__sfp+0x16>
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ffbd 	bl	800ae80 <__sinit>
 800af06:	3648      	adds	r6, #72	; 0x48
 800af08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	d503      	bpl.n	800af18 <__sfp+0x28>
 800af10:	6833      	ldr	r3, [r6, #0]
 800af12:	b30b      	cbz	r3, 800af58 <__sfp+0x68>
 800af14:	6836      	ldr	r6, [r6, #0]
 800af16:	e7f7      	b.n	800af08 <__sfp+0x18>
 800af18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af1c:	b9d5      	cbnz	r5, 800af54 <__sfp+0x64>
 800af1e:	4b16      	ldr	r3, [pc, #88]	; (800af78 <__sfp+0x88>)
 800af20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af24:	60e3      	str	r3, [r4, #12]
 800af26:	6665      	str	r5, [r4, #100]	; 0x64
 800af28:	f000 fe96 	bl	800bc58 <__retarget_lock_init_recursive>
 800af2c:	f7ff ff96 	bl	800ae5c <__sfp_lock_release>
 800af30:	2208      	movs	r2, #8
 800af32:	4629      	mov	r1, r5
 800af34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af3c:	6025      	str	r5, [r4, #0]
 800af3e:	61a5      	str	r5, [r4, #24]
 800af40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af44:	f002 f9cd 	bl	800d2e2 <memset>
 800af48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af50:	4620      	mov	r0, r4
 800af52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af54:	3468      	adds	r4, #104	; 0x68
 800af56:	e7d9      	b.n	800af0c <__sfp+0x1c>
 800af58:	2104      	movs	r1, #4
 800af5a:	4638      	mov	r0, r7
 800af5c:	f002 fc51 	bl	800d802 <__sfmoreglue>
 800af60:	4604      	mov	r4, r0
 800af62:	6030      	str	r0, [r6, #0]
 800af64:	2800      	cmp	r0, #0
 800af66:	d1d5      	bne.n	800af14 <__sfp+0x24>
 800af68:	f7ff ff78 	bl	800ae5c <__sfp_lock_release>
 800af6c:	230c      	movs	r3, #12
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	e7ee      	b.n	800af50 <__sfp+0x60>
 800af72:	bf00      	nop
 800af74:	0800ef44 	.word	0x0800ef44
 800af78:	ffff0001 	.word	0xffff0001

0800af7c <__smakebuf_r>:
 800af7c:	898b      	ldrh	r3, [r1, #12]
 800af7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af80:	079d      	lsls	r5, r3, #30
 800af82:	4606      	mov	r6, r0
 800af84:	460c      	mov	r4, r1
 800af86:	d507      	bpl.n	800af98 <__smakebuf_r+0x1c>
 800af88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	2301      	movs	r3, #1
 800af92:	6163      	str	r3, [r4, #20]
 800af94:	b002      	add	sp, #8
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	466a      	mov	r2, sp
 800af9a:	ab01      	add	r3, sp, #4
 800af9c:	f002 fc66 	bl	800d86c <__swhatbuf_r>
 800afa0:	9900      	ldr	r1, [sp, #0]
 800afa2:	4605      	mov	r5, r0
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7fe fd67 	bl	8009a78 <_malloc_r>
 800afaa:	b948      	cbnz	r0, 800afc0 <__smakebuf_r+0x44>
 800afac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb0:	059a      	lsls	r2, r3, #22
 800afb2:	d4ef      	bmi.n	800af94 <__smakebuf_r+0x18>
 800afb4:	f023 0303 	bic.w	r3, r3, #3
 800afb8:	f043 0302 	orr.w	r3, r3, #2
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	e7e3      	b.n	800af88 <__smakebuf_r+0xc>
 800afc0:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <__smakebuf_r+0x7c>)
 800afc2:	62b3      	str	r3, [r6, #40]	; 0x28
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afcc:	81a3      	strh	r3, [r4, #12]
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	6120      	str	r0, [r4, #16]
 800afd2:	6163      	str	r3, [r4, #20]
 800afd4:	9b01      	ldr	r3, [sp, #4]
 800afd6:	b15b      	cbz	r3, 800aff0 <__smakebuf_r+0x74>
 800afd8:	4630      	mov	r0, r6
 800afda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afde:	f000 f85b 	bl	800b098 <_isatty_r>
 800afe2:	b128      	cbz	r0, 800aff0 <__smakebuf_r+0x74>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f023 0303 	bic.w	r3, r3, #3
 800afea:	f043 0301 	orr.w	r3, r3, #1
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	89a0      	ldrh	r0, [r4, #12]
 800aff2:	4305      	orrs	r5, r0
 800aff4:	81a5      	strh	r5, [r4, #12]
 800aff6:	e7cd      	b.n	800af94 <__smakebuf_r+0x18>
 800aff8:	0800ae45 	.word	0x0800ae45

0800affc <raise>:
 800affc:	4b02      	ldr	r3, [pc, #8]	; (800b008 <raise+0xc>)
 800affe:	4601      	mov	r1, r0
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	f002 bc58 	b.w	800d8b6 <_raise_r>
 800b006:	bf00      	nop
 800b008:	200000c4 	.word	0x200000c4

0800b00c <_kill_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	2300      	movs	r3, #0
 800b010:	4d06      	ldr	r5, [pc, #24]	; (800b02c <_kill_r+0x20>)
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	4611      	mov	r1, r2
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	f000 fe14 	bl	800bc46 <_kill>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d102      	bne.n	800b028 <_kill_r+0x1c>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	b103      	cbz	r3, 800b028 <_kill_r+0x1c>
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	bd38      	pop	{r3, r4, r5, pc}
 800b02a:	bf00      	nop
 800b02c:	20000e74 	.word	0x20000e74

0800b030 <_write_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	4611      	mov	r1, r2
 800b038:	2200      	movs	r2, #0
 800b03a:	4d05      	ldr	r5, [pc, #20]	; (800b050 <_write_r+0x20>)
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	f000 fdf1 	bl	800bc26 <_write>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_write_r+0x1e>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_write_r+0x1e>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	20000e74 	.word	0x20000e74

0800b054 <_close_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	2300      	movs	r3, #0
 800b058:	4d05      	ldr	r5, [pc, #20]	; (800b070 <_close_r+0x1c>)
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f000 fde7 	bl	800bc32 <_close>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_close_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_close_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20000e74 	.word	0x20000e74

0800b074 <_fstat_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	2300      	movs	r3, #0
 800b078:	4d06      	ldr	r5, [pc, #24]	; (800b094 <_fstat_r+0x20>)
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	f000 fde4 	bl	800bc4e <_fstat>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d102      	bne.n	800b090 <_fstat_r+0x1c>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b103      	cbz	r3, 800b090 <_fstat_r+0x1c>
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	bd38      	pop	{r3, r4, r5, pc}
 800b092:	bf00      	nop
 800b094:	20000e74 	.word	0x20000e74

0800b098 <_isatty_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	2300      	movs	r3, #0
 800b09c:	4d05      	ldr	r5, [pc, #20]	; (800b0b4 <_isatty_r+0x1c>)
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f000 fdca 	bl	800bc3c <_isatty>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_isatty_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_isatty_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20000e74 	.word	0x20000e74

0800b0b8 <_lseek_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4d05      	ldr	r5, [pc, #20]	; (800b0d8 <_lseek_r+0x20>)
 800b0c4:	602a      	str	r2, [r5, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	f000 fdb6 	bl	800bc38 <_lseek>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_lseek_r+0x1e>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_lseek_r+0x1e>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20000e74 	.word	0x20000e74

0800b0dc <_read_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4d05      	ldr	r5, [pc, #20]	; (800b0fc <_read_r+0x20>)
 800b0e8:	602a      	str	r2, [r5, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	f000 fd95 	bl	800bc1a <_read>
 800b0f0:	1c43      	adds	r3, r0, #1
 800b0f2:	d102      	bne.n	800b0fa <_read_r+0x1e>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	b103      	cbz	r3, 800b0fa <_read_r+0x1e>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	20000e74 	.word	0x20000e74

0800b100 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800b100:	4770      	bx	lr

0800b102 <fill_msg_bit_field>:
void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 800b102:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800b104:	781d      	ldrb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b106:	e017      	b.n	800b138 <fill_msg_bit_field+0x36>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800b108:	f04f 0c01 	mov.w	ip, #1
 800b10c:	fa0c fe04 	lsl.w	lr, ip, r4
 800b110:	6804      	ldr	r4, [r0, #0]
 800b112:	ea24 040e 	bic.w	r4, r4, lr
 800b116:	6004      	str	r4, [r0, #0]
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800b118:	f893 e000 	ldrb.w	lr, [r3]
 800b11c:	ebae 0e05 	sub.w	lr, lr, r5
 800b120:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b124:	ea01 0c0c 	and.w	ip, r1, ip
 800b128:	fa0c fc05 	lsl.w	ip, ip, r5
 800b12c:	ea44 040c 	orr.w	r4, r4, ip
 800b130:	6004      	str	r4, [r0, #0]
        (*pos)++;
 800b132:	781c      	ldrb	r4, [r3, #0]
 800b134:	3401      	adds	r4, #1
 800b136:	701c      	strb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b138:	781c      	ldrb	r4, [r3, #0]
 800b13a:	eb02 0c05 	add.w	ip, r2, r5
 800b13e:	4564      	cmp	r4, ip
 800b140:	dbe2      	blt.n	800b108 <fill_msg_bit_field+0x6>
}
 800b142:	bd30      	pop	{r4, r5, pc}

0800b144 <extract_msg_bit_field>:
void extract_msg_bit_field(const uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 800b144:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800b146:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b148:	e01a      	b.n	800b180 <extract_msg_bit_field+0x3c>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800b14a:	ebac 0c04 	sub.w	ip, ip, r4
 800b14e:	2501      	movs	r5, #1
 800b150:	fa05 fc0c 	lsl.w	ip, r5, ip
 800b154:	f891 e000 	ldrb.w	lr, [r1]
 800b158:	ea2e 0c0c 	bic.w	ip, lr, ip
 800b15c:	f881 c000 	strb.w	ip, [r1]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800b160:	f893 e000 	ldrb.w	lr, [r3]
 800b164:	fa05 fe0e 	lsl.w	lr, r5, lr
 800b168:	6805      	ldr	r5, [r0, #0]
 800b16a:	ea05 0e0e 	and.w	lr, r5, lr
 800b16e:	fa2e fe04 	lsr.w	lr, lr, r4
 800b172:	ea4c 0c0e 	orr.w	ip, ip, lr
 800b176:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 800b17a:	781d      	ldrb	r5, [r3, #0]
 800b17c:	3501      	adds	r5, #1
 800b17e:	701d      	strb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b180:	f893 c000 	ldrb.w	ip, [r3]
 800b184:	1915      	adds	r5, r2, r4
 800b186:	45ac      	cmp	ip, r5
 800b188:	dbdf      	blt.n	800b14a <extract_msg_bit_field+0x6>
}
 800b18a:	bd30      	pop	{r4, r5, pc}

0800b18c <reverse>:
uint8_t reverse(uint8_t input) {
 800b18c:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800b18e:	461a      	mov	r2, r3
    while( pos < 7 ) {
 800b190:	e007      	b.n	800b1a2 <reverse+0x16>
        bit = input & BIT(0);
 800b192:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800b196:	430b      	orrs	r3, r1
        output = output << 1;
 800b198:	005b      	lsls	r3, r3, #1
 800b19a:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800b19c:	0840      	lsrs	r0, r0, #1
        pos++;
 800b19e:	3201      	adds	r2, #1
 800b1a0:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 800b1a2:	2a06      	cmp	r2, #6
 800b1a4:	d9f5      	bls.n	800b192 <reverse+0x6>
    bit = input & BIT(0);
 800b1a6:	f000 0001 	and.w	r0, r0, #1
}
 800b1aa:	4318      	orrs	r0, r3
 800b1ac:	4770      	bx	lr

0800b1ae <check_rssi>:


uint8_t check_rssi(const int16_t rssi) {
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 800b1ae:	f110 0f32 	cmn.w	r0, #50	; 0x32
 800b1b2:	da26      	bge.n	800b202 <check_rssi+0x54>
        return LIGHT_UP_EIGHT;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 800b1b4:	b283      	uxth	r3, r0
 800b1b6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b1ba:	b292      	uxth	r2, r2
 800b1bc:	2a09      	cmp	r2, #9
 800b1be:	d922      	bls.n	800b206 <check_rssi+0x58>
        return LIGHT_UP_SEVEN;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 800b1c0:	f103 0246 	add.w	r2, r3, #70	; 0x46
 800b1c4:	b292      	uxth	r2, r2
 800b1c6:	2a09      	cmp	r2, #9
 800b1c8:	d91f      	bls.n	800b20a <check_rssi+0x5c>
        return LIGHT_UP_SIX;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 800b1ca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	2a09      	cmp	r2, #9
 800b1d2:	d91c      	bls.n	800b20e <check_rssi+0x60>
        return LIGHT_UP_FIVE;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 800b1d4:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	2a09      	cmp	r2, #9
 800b1dc:	d919      	bls.n	800b212 <check_rssi+0x64>
        return LIGHT_UP_FOUR;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 800b1de:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800b1e2:	b292      	uxth	r2, r2
 800b1e4:	2a09      	cmp	r2, #9
 800b1e6:	d916      	bls.n	800b216 <check_rssi+0x68>
        return LIGHT_UP_THREE;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 800b1e8:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800b1ec:	b292      	uxth	r2, r2
 800b1ee:	2a09      	cmp	r2, #9
 800b1f0:	d913      	bls.n	800b21a <check_rssi+0x6c>
        return LIGHT_UP_TWO;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 800b1f2:	3378      	adds	r3, #120	; 0x78
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d911      	bls.n	800b21e <check_rssi+0x70>
        return LIGHT_UP_ONE;
    }
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
 800b1fa:	f110 0f78 	cmn.w	r0, #120	; 0x78
 800b1fe:	db10      	blt.n	800b222 <check_rssi+0x74>
        return LIGHT_UP_ZERO;
    }
 800b200:	4770      	bx	lr
        return LIGHT_UP_EIGHT;
 800b202:	2008      	movs	r0, #8
 800b204:	4770      	bx	lr
        return LIGHT_UP_SEVEN;
 800b206:	2007      	movs	r0, #7
 800b208:	4770      	bx	lr
        return LIGHT_UP_SIX;
 800b20a:	2006      	movs	r0, #6
 800b20c:	4770      	bx	lr
        return LIGHT_UP_FIVE;
 800b20e:	2005      	movs	r0, #5
 800b210:	4770      	bx	lr
        return LIGHT_UP_FOUR;
 800b212:	2004      	movs	r0, #4
 800b214:	4770      	bx	lr
        return LIGHT_UP_THREE;
 800b216:	2003      	movs	r0, #3
 800b218:	4770      	bx	lr
        return LIGHT_UP_TWO;
 800b21a:	2002      	movs	r0, #2
 800b21c:	4770      	bx	lr
        return LIGHT_UP_ONE;
 800b21e:	2001      	movs	r0, #1
 800b220:	4770      	bx	lr
        return LIGHT_UP_ZERO;
 800b222:	2000      	movs	r0, #0
 800b224:	4770      	bx	lr

0800b226 <arch_printk_char_out>:
}
 800b226:	2000      	movs	r0, #0
 800b228:	4770      	bx	lr

0800b22a <str_out>:
{
 800b22a:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800b22c:	680c      	ldr	r4, [r1, #0]
 800b22e:	b154      	cbz	r4, 800b246 <str_out+0x1c>
 800b230:	688a      	ldr	r2, [r1, #8]
 800b232:	684b      	ldr	r3, [r1, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	da06      	bge.n	800b246 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800b238:	3b01      	subs	r3, #1
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d008      	beq.n	800b250 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800b23e:	1c53      	adds	r3, r2, #1
 800b240:	608b      	str	r3, [r1, #8]
 800b242:	54a0      	strb	r0, [r4, r2]
 800b244:	e002      	b.n	800b24c <str_out+0x22>
		ctx->count++;
 800b246:	688b      	ldr	r3, [r1, #8]
 800b248:	3301      	adds	r3, #1
 800b24a:	608b      	str	r3, [r1, #8]
}
 800b24c:	bc10      	pop	{r4}
 800b24e:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800b250:	1c53      	adds	r3, r2, #1
 800b252:	608b      	str	r3, [r1, #8]
 800b254:	2300      	movs	r3, #0
 800b256:	54a3      	strb	r3, [r4, r2]
 800b258:	e7f8      	b.n	800b24c <str_out+0x22>

0800b25a <printk>:
{
 800b25a:	b40f      	push	{r0, r1, r2, r3}
 800b25c:	b500      	push	{lr}
 800b25e:	b083      	sub	sp, #12
 800b260:	a904      	add	r1, sp, #16
 800b262:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800b266:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800b268:	f7f7 f8b4 	bl	80023d4 <vprintk>
}
 800b26c:	b003      	add	sp, #12
 800b26e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b272:	b004      	add	sp, #16
 800b274:	4770      	bx	lr

0800b276 <snprintk>:
{
 800b276:	b40c      	push	{r2, r3}
 800b278:	b500      	push	{lr}
 800b27a:	b083      	sub	sp, #12
 800b27c:	ab04      	add	r3, sp, #16
 800b27e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800b282:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800b284:	f7f7 f8b6 	bl	80023f4 <vsnprintk>
}
 800b288:	b003      	add	sp, #12
 800b28a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b28e:	b002      	add	sp, #8
 800b290:	4770      	bx	lr

0800b292 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800b292:	b508      	push	{r3, lr}
 800b294:	4604      	mov	r4, r0
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800b29a:	461a      	mov	r2, r3
 800b29c:	47a0      	blx	r4
	return z_impl_z_current_get();
 800b29e:	f7fd fe0f 	bl	8008ec0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800b2a2:	f7f9 f9c1 	bl	8004628 <z_impl_k_thread_abort>

0800b2a6 <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800b2a6:	1d13      	adds	r3, r2, #4
 800b2a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b2ac:	b9d3      	cbnz	r3, 800b2e4 <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	fa03 fc02 	lsl.w	ip, r3, r2
 800b2b4:	68c3      	ldr	r3, [r0, #12]
 800b2b6:	ea43 030c 	orr.w	r3, r3, ip
 800b2ba:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800b2bc:	3204      	adds	r2, #4
 800b2be:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800b2c2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b2c6:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
 800b2c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b2cc:	d306      	bcc.n	800b2dc <free_list_add_bidx+0x36>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 800b2ce:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 800b2d0:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800b2d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b2d6:	d303      	bcc.n	800b2e0 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800b2d8:	60d9      	str	r1, [r3, #12]
 800b2da:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800b2dc:	8099      	strh	r1, [r3, #4]
 800b2de:	e7f7      	b.n	800b2d0 <free_list_add_bidx+0x2a>
 800b2e0:	80d9      	strh	r1, [r3, #6]
 800b2e2:	4770      	bx	lr
{
 800b2e4:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 800b2e6:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b2ea:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b2ec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b2f0:	d31c      	bcc.n	800b32c <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 800b2f2:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 800b2f6:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 800b2fa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b2fe:	d318      	bcc.n	800b332 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 800b300:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 800b304:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b306:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b30a:	d315      	bcc.n	800b338 <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 800b30c:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 800b310:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b314:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800b316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b31a:	d310      	bcc.n	800b33e <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 800b31c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 800b31e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800b320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b324:	d30d      	bcc.n	800b342 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 800b326:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 800b32a:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 800b32c:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800b330:	e7e1      	b.n	800b2f6 <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 800b332:	f8ae 2004 	strh.w	r2, [lr, #4]
 800b336:	e7e5      	b.n	800b304 <free_list_add_bidx+0x5e>
 800b338:	f8ae 3006 	strh.w	r3, [lr, #6]
 800b33c:	e7e8      	b.n	800b310 <free_list_add_bidx+0x6a>
 800b33e:	80d1      	strh	r1, [r2, #6]
 800b340:	e7ed      	b.n	800b31e <free_list_add_bidx+0x78>
 800b342:	f8ac 1004 	strh.w	r1, [ip, #4]
 800b346:	e7f0      	b.n	800b32a <free_list_add_bidx+0x84>

0800b348 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800b348:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 800b34a:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
 800b34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b350:	d307      	bcc.n	800b362 <free_list_add+0x1a>
	void *cmem = &buf[c];
 800b352:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 800b356:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800b358:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 800b35a:	2a01      	cmp	r2, #1
 800b35c:	d002      	beq.n	800b364 <free_list_add+0x1c>
 800b35e:	2200      	movs	r2, #0
 800b360:	e000      	b.n	800b364 <free_list_add+0x1c>
 800b362:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800b364:	b9a2      	cbnz	r2, 800b390 <free_list_add+0x48>
	void *cmem = &buf[c];
 800b366:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 800b36a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b36e:	d310      	bcc.n	800b392 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800b370:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800b372:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800b374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b378:	d30d      	bcc.n	800b396 <free_list_add+0x4e>
 800b37a:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b37c:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800b37e:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800b382:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800b384:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800b388:	f1c2 021f 	rsb	r2, r2, #31
 800b38c:	f7ff ff8b 	bl	800b2a6 <free_list_add_bidx>
	}
}
 800b390:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 800b392:	8852      	ldrh	r2, [r2, #2]
 800b394:	e7ed      	b.n	800b372 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 800b396:	2304      	movs	r3, #4
 800b398:	e7f0      	b.n	800b37c <free_list_add+0x34>

0800b39a <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800b39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39c:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 800b39e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800b3a2:	d324      	bcc.n	800b3ee <sys_heap_init+0x54>
 800b3a4:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800b3a8:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800b3ac:	1dc8      	adds	r0, r1, #7
 800b3ae:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800b3b2:	448c      	add	ip, r1
 800b3b4:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800b3b8:	ebac 0c00 	sub.w	ip, ip, r0
 800b3bc:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800b3c0:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800b3c2:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 800b3c8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b3cc:	d312      	bcc.n	800b3f4 <sys_heap_init+0x5a>
 800b3ce:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b3d0:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800b3d2:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 800b3d6:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800b3d8:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800b3dc:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800b3e0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800b3e4:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b3e6:	1dde      	adds	r6, r3, #7
 800b3e8:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e009      	b.n	800b402 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 800b3ee:	f04f 0c04 	mov.w	ip, #4
 800b3f2:	e7d9      	b.n	800b3a8 <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 800b3f4:	2304      	movs	r3, #4
 800b3f6:	e7eb      	b.n	800b3d0 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 800b3f8:	1d1a      	adds	r2, r3, #4
 800b3fa:	2400      	movs	r4, #0
 800b3fc:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800b400:	3301      	adds	r3, #1
 800b402:	4573      	cmp	r3, lr
 800b404:	dbf8      	blt.n	800b3f8 <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b406:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 800b408:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b40c:	d336      	bcc.n	800b47c <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 800b40e:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 800b410:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b414:	d334      	bcc.n	800b480 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 800b416:	2300      	movs	r3, #0
 800b418:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 800b41a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b41e:	d332      	bcc.n	800b486 <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b420:	6843      	ldr	r3, [r0, #4]
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800b428:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b42a:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 800b42c:	f026 0307 	bic.w	r3, r6, #7
 800b430:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 800b432:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b436:	d32b      	bcc.n	800b490 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 800b438:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 800b43a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b43c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b440:	d328      	bcc.n	800b494 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 800b442:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 800b444:	f02c 0307 	bic.w	r3, ip, #7
 800b448:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 800b44a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b44c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b450:	d322      	bcc.n	800b498 <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 800b452:	2400      	movs	r4, #0
 800b454:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 800b458:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b45a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b45e:	d31f      	bcc.n	800b4a0 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 800b460:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 800b462:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b466:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800b468:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b46c:	d31a      	bcc.n	800b4a4 <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	f042 0201 	orr.w	r2, r2, #1
 800b474:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800b476:	f7ff ff67 	bl	800b348 <free_list_add>
}
 800b47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 800b47c:	8043      	strh	r3, [r0, #2]
 800b47e:	e7c7      	b.n	800b410 <sys_heap_init+0x76>
 800b480:	2300      	movs	r3, #0
 800b482:	8003      	strh	r3, [r0, #0]
 800b484:	e7c9      	b.n	800b41a <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b486:	8843      	ldrh	r3, [r0, #2]
 800b488:	f043 0301 	orr.w	r3, r3, #1
 800b48c:	8043      	strh	r3, [r0, #2]
 800b48e:	e7cb      	b.n	800b428 <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 800b490:	8067      	strh	r7, [r4, #2]
 800b492:	e7d2      	b.n	800b43a <sys_heap_init+0xa0>
 800b494:	52c1      	strh	r1, [r0, r3]
 800b496:	e7d5      	b.n	800b444 <sys_heap_init+0xaa>
 800b498:	2400      	movs	r4, #0
 800b49a:	f8ac 4002 	strh.w	r4, [ip, #2]
 800b49e:	e7db      	b.n	800b458 <sys_heap_init+0xbe>
 800b4a0:	52c2      	strh	r2, [r0, r3]
 800b4a2:	e7de      	b.n	800b462 <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b4a4:	885a      	ldrh	r2, [r3, #2]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	805a      	strh	r2, [r3, #2]
 800b4ac:	e7e3      	b.n	800b476 <sys_heap_init+0xdc>

0800b4ae <outs>:
{
 800b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b2:	4607      	mov	r7, r0
 800b4b4:	460e      	mov	r6, r1
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	4698      	mov	r8, r3
	size_t count = 0;
 800b4ba:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b4bc:	e006      	b.n	800b4cc <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800b4be:	4631      	mov	r1, r6
 800b4c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b4c4:	47b8      	blx	r7
		if (rc < 0) {
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	db09      	blt.n	800b4de <outs+0x30>
		++count;
 800b4ca:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b4cc:	4544      	cmp	r4, r8
 800b4ce:	d3f6      	bcc.n	800b4be <outs+0x10>
 800b4d0:	f1b8 0f00 	cmp.w	r8, #0
 800b4d4:	d102      	bne.n	800b4dc <outs+0x2e>
 800b4d6:	7823      	ldrb	r3, [r4, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1f0      	bne.n	800b4be <outs+0x10>
	return (int)count;
 800b4dc:	4628      	mov	r0, r5
}
 800b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4e2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800b4e2:	4770      	bx	lr

0800b4e4 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	4770      	bx	lr

0800b4e8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 800b4ec:	6003      	str	r3, [r0, #0]
}
 800b4ee:	4770      	bx	lr

0800b4f0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 800b4f0:	6803      	ldr	r3, [r0, #0]
 800b4f2:	b12b      	cbz	r3, 800b500 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 800b4f4:	6843      	ldr	r3, [r0, #4]
 800b4f6:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 800b4f8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	600b      	str	r3, [r1, #0]
}
 800b4fe:	4770      	bx	lr
		list->head = msg;
 800b500:	6001      	str	r1, [r0, #0]
 800b502:	e7f9      	b.n	800b4f8 <log_list_add_tail+0x8>

0800b504 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 800b504:	6800      	ldr	r0, [r0, #0]
 800b506:	4770      	bx	lr

0800b508 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 800b508:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 800b50a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 800b50c:	b108      	cbz	r0, 800b512 <log_list_head_get+0xa>
		list->head = list->head->next;
 800b50e:	6802      	ldr	r2, [r0, #0]
 800b510:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 800b512:	4770      	bx	lr

0800b514 <dummy_timestamp>:
}
 800b514:	2000      	movs	r0, #0
 800b516:	4770      	bx	lr

0800b518 <msg_filter_check>:
}
 800b518:	2001      	movs	r0, #1
 800b51a:	4770      	bx	lr

0800b51c <default_lf_get_timestamp>:
{
 800b51c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800b51e:	f001 fe1f 	bl	800d160 <z_impl_k_uptime_ticks>
 800b522:	220a      	movs	r2, #10
 800b524:	2300      	movs	r3, #0
 800b526:	f7f5 f9cd 	bl	80008c4 <__aeabi_uldivmod>
}
 800b52a:	bd08      	pop	{r3, pc}

0800b52c <block_on_alloc>:
}
 800b52c:	2000      	movs	r0, #0
 800b52e:	4770      	bx	lr

0800b530 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 800b530:	2901      	cmp	r1, #1
 800b532:	d902      	bls.n	800b53a <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 800b534:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 800b536:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 800b538:	e006      	b.n	800b548 <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
 800b53a:	3104      	adds	r1, #4
 800b53c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b540:	6888      	ldr	r0, [r1, #8]
 800b542:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 800b544:	3907      	subs	r1, #7
		cont = cont->next;
 800b546:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
 800b548:	2906      	cmp	r1, #6
 800b54a:	d8fb      	bhi.n	800b544 <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
 800b54c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b550:	6848      	ldr	r0, [r1, #4]
}
 800b552:	4770      	bx	lr

0800b554 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 800b554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b558:	461c      	mov	r4, r3
 800b55a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800b55e:	8903      	ldrh	r3, [r0, #8]
 800b560:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 800b564:	42a3      	cmp	r3, r4
 800b566:	d91f      	bls.n	800b5a8 <log_msg_hexdump_data_op+0x54>
 800b568:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 800b56a:	6811      	ldr	r1, [r2, #0]
 800b56c:	4421      	add	r1, r4
 800b56e:	4299      	cmp	r1, r3
 800b570:	d901      	bls.n	800b576 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 800b572:	1b19      	subs	r1, r3, r4
 800b574:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 800b576:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800b578:	2b0c      	cmp	r3, #12
 800b57a:	d919      	bls.n	800b5b0 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 800b57c:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 800b580:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 800b582:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 800b584:	42a3      	cmp	r3, r4
 800b586:	d91e      	bls.n	800b5c6 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b588:	42bb      	cmp	r3, r7
 800b58a:	bf28      	it	cs
 800b58c:	463b      	movcs	r3, r7
 800b58e:	461d      	mov	r5, r3

		if (put_op) {
 800b590:	f1b9 0f00 	cmp.w	r9, #0
 800b594:	d010      	beq.n	800b5b8 <log_msg_hexdump_data_op+0x64>
 800b596:	461a      	mov	r2, r3
 800b598:	4641      	mov	r1, r8
 800b59a:	eb0c 0004 	add.w	r0, ip, r4
 800b59e:	f001 fe92 	bl	800d2c6 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 800b5a2:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b5a4:	44a8      	add	r8, r5
 800b5a6:	e021      	b.n	800b5ec <log_msg_hexdump_data_op+0x98>
		*length = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 800b5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 800b5b0:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	e7e5      	b.n	800b584 <log_msg_hexdump_data_op+0x30>
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	eb0c 0104 	add.w	r1, ip, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f001 fe81 	bl	800d2c6 <memcpy>
 800b5c4:	e7ed      	b.n	800b5a2 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 800b5c6:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 800b5c8:	b91e      	cbnz	r6, 800b5d2 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 800b5ca:	6946      	ldr	r6, [r0, #20]
 800b5cc:	e001      	b.n	800b5d2 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 800b5ce:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 800b5d0:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 800b5d2:	2c1b      	cmp	r4, #27
 800b5d4:	d8fb      	bhi.n	800b5ce <log_msg_hexdump_data_op+0x7a>
 800b5d6:	e009      	b.n	800b5ec <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 800b5d8:	1931      	adds	r1, r6, r4
 800b5da:	462a      	mov	r2, r5
 800b5dc:	3104      	adds	r1, #4
 800b5de:	4640      	mov	r0, r8
 800b5e0:	f001 fe71 	bl	800d2c6 <memcpy>
		cont = cont->next;
 800b5e4:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 800b5e6:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b5e8:	44a8      	add	r8, r5
		offset = 0;
 800b5ea:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 800b5ec:	2f00      	cmp	r7, #0
 800b5ee:	d0dd      	beq.n	800b5ac <log_msg_hexdump_data_op+0x58>
 800b5f0:	2e00      	cmp	r6, #0
 800b5f2:	d0db      	beq.n	800b5ac <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 800b5f4:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b5f8:	42bd      	cmp	r5, r7
 800b5fa:	bf28      	it	cs
 800b5fc:	463d      	movcs	r5, r7
		if (put_op) {
 800b5fe:	f1b9 0f00 	cmp.w	r9, #0
 800b602:	d0e9      	beq.n	800b5d8 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 800b604:	1930      	adds	r0, r6, r4
 800b606:	462a      	mov	r2, r5
 800b608:	4641      	mov	r1, r8
 800b60a:	3004      	adds	r0, #4
 800b60c:	f001 fe5b 	bl	800d2c6 <memcpy>
 800b610:	e7e8      	b.n	800b5e4 <log_msg_hexdump_data_op+0x90>

0800b612 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 800b612:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b614:	f3bf 8f5b 	dmb	ish
 800b618:	e850 3f00 	ldrex	r3, [r0]
 800b61c:	3301      	adds	r3, #1
 800b61e:	e840 3200 	strex	r2, r3, [r0]
 800b622:	2a00      	cmp	r2, #0
 800b624:	d1f8      	bne.n	800b618 <log_msg_get+0x6>
 800b626:	f3bf 8f5b 	dmb	ish
}
 800b62a:	4770      	bx	lr

0800b62c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 800b62c:	7a40      	ldrb	r0, [r0, #9]
}
 800b62e:	0900      	lsrs	r0, r0, #4
 800b630:	4770      	bx	lr

0800b632 <log_msg_arg_get>:
{
 800b632:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800b634:	7a43      	ldrb	r3, [r0, #9]
 800b636:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 800b63a:	d20a      	bcs.n	800b652 <log_msg_arg_get+0x20>
 800b63c:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800b63e:	2a03      	cmp	r2, #3
 800b640:	d804      	bhi.n	800b64c <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 800b642:	3104      	adds	r1, #4
 800b644:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b648:	6840      	ldr	r0, [r0, #4]
 800b64a:	e003      	b.n	800b654 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 800b64c:	f7ff ff70 	bl	800b530 <cont_arg_get>
 800b650:	e000      	b.n	800b654 <log_msg_arg_get+0x22>
		return 0;
 800b652:	2000      	movs	r0, #0
}
 800b654:	bd08      	pop	{r3, pc}

0800b656 <log_msg_str_get>:
}
 800b656:	6900      	ldr	r0, [r0, #16]
 800b658:	4770      	bx	lr

0800b65a <log_msg_put>:
{
 800b65a:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 800b65c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800b65e:	f3bf 8f5b 	dmb	ish
 800b662:	e853 2f00 	ldrex	r2, [r3]
 800b666:	3a01      	subs	r2, #1
 800b668:	e843 2100 	strex	r1, r2, [r3]
 800b66c:	2900      	cmp	r1, #0
 800b66e:	d1f8      	bne.n	800b662 <log_msg_put+0x8>
 800b670:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 800b674:	6843      	ldr	r3, [r0, #4]
 800b676:	b103      	cbz	r3, 800b67a <log_msg_put+0x20>
}
 800b678:	bd08      	pop	{r3, pc}
		msg_free(msg);
 800b67a:	f7f8 f829 	bl	80036d0 <msg_free>
}
 800b67e:	e7fb      	b.n	800b678 <log_msg_put+0x1e>

0800b680 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 800b680:	b510      	push	{r4, lr}
 800b682:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800b684:	2400      	movs	r4, #0
 800b686:	9400      	str	r4, [sp, #0]
 800b688:	f7ff ff64 	bl	800b554 <log_msg_hexdump_data_op>
}
 800b68c:	b002      	add	sp, #8
 800b68e:	bd10      	pop	{r4, pc}

0800b690 <buffer_write>:
{
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	4607      	mov	r7, r0
 800b694:	460d      	mov	r5, r1
 800b696:	4614      	mov	r4, r2
 800b698:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800b69a:	4632      	mov	r2, r6
 800b69c:	4621      	mov	r1, r4
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
		buf += processed;
 800b6a2:	4405      	add	r5, r0
	} while (len != 0);
 800b6a4:	1a24      	subs	r4, r4, r0
 800b6a6:	d1f8      	bne.n	800b69a <buffer_write+0xa>
}
 800b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6aa <color_prefix>:
{
 800b6aa:	b508      	push	{r3, lr}
 800b6ac:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f7f8 f8a6 	bl	8003800 <color_print>
}
 800b6b4:	bd08      	pop	{r3, pc}

0800b6b6 <color_postfix>:
{
 800b6b6:	b508      	push	{r3, lr}
 800b6b8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f8 f8a0 	bl	8003800 <color_print>
}
 800b6c0:	bd08      	pop	{r3, pc}

0800b6c2 <postfix_print>:
{
 800b6c2:	b538      	push	{r3, r4, r5, lr}
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800b6c8:	f001 0101 	and.w	r1, r1, #1
 800b6cc:	f7ff fff3 	bl	800b6b6 <color_postfix>
	newline_print(output, flags);
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f7f8 f8aa 	bl	800382c <newline_print>
}
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}

0800b6da <prefix_print>:
{
 800b6da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	4615      	mov	r5, r2
 800b6e4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800b6e8:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800b6ec:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 800b6f0:	f011 0702 	ands.w	r7, r1, #2
 800b6f4:	d113      	bne.n	800b71e <prefix_print+0x44>
		color_prefix(output, colors_on, level);
 800b6f6:	4632      	mov	r2, r6
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff ffd5 	bl	800b6aa <color_prefix>
	length += ids_print(output, level_on, func_on,
 800b700:	9601      	str	r6, [sp, #4]
 800b702:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b70c:	462a      	mov	r2, r5
 800b70e:	4641      	mov	r1, r8
 800b710:	4620      	mov	r0, r4
 800b712:	f7f8 f901 	bl	8003918 <ids_print>
}
 800b716:	4438      	add	r0, r7
 800b718:	b003      	add	sp, #12
 800b71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f8 f828 	bl	8003774 <timestamp_print>
 800b724:	4607      	mov	r7, r0
 800b726:	e7e6      	b.n	800b6f6 <prefix_print+0x1c>

0800b728 <std_print>:
{
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	b08e      	sub	sp, #56	; 0x38
 800b72e:	af0e      	add	r7, sp, #56	; 0x38
 800b730:	4606      	mov	r6, r0
 800b732:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 800b734:	f7ff ff8f 	bl	800b656 <log_msg_str_get>
 800b738:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 800b73a:	4630      	mov	r0, r6
 800b73c:	f7ff ff76 	bl	800b62c <log_msg_nargs_get>
 800b740:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800b742:	0083      	lsls	r3, r0, #2
 800b744:	3307      	adds	r3, #7
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	ebad 0d03 	sub.w	sp, sp, r3
 800b74e:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800b750:	2400      	movs	r4, #0
 800b752:	e006      	b.n	800b762 <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
 800b754:	4621      	mov	r1, r4
 800b756:	4630      	mov	r0, r6
 800b758:	f7ff ff6b 	bl	800b632 <log_msg_arg_get>
 800b75c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 800b760:	3401      	adds	r4, #1
 800b762:	4544      	cmp	r4, r8
 800b764:	d3f6      	bcc.n	800b754 <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
 800b766:	4630      	mov	r0, r6
 800b768:	f7ff ff60 	bl	800b62c <log_msg_nargs_get>
 800b76c:	280f      	cmp	r0, #15
 800b76e:	d815      	bhi.n	800b79c <std_print+0x74>
 800b770:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b774:	00170010 	.word	0x00170010
 800b778:	0024001d 	.word	0x0024001d
 800b77c:	0038002d 	.word	0x0038002d
 800b780:	00540045 	.word	0x00540045
 800b784:	00780065 	.word	0x00780065
 800b788:	00a4008d 	.word	0x00a4008d
 800b78c:	00d800bd 	.word	0x00d800bd
 800b790:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
 800b794:	4651      	mov	r1, sl
 800b796:	4648      	mov	r0, r9
 800b798:	f7f7 ffda 	bl	8003750 <print_formatted>
}
 800b79c:	46bd      	mov	sp, r7
 800b79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 800b7a2:	682a      	ldr	r2, [r5, #0]
 800b7a4:	4651      	mov	r1, sl
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f7f7 ffd2 	bl	8003750 <print_formatted>
		break;
 800b7ac:	e7f6      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
 800b7ae:	686b      	ldr	r3, [r5, #4]
 800b7b0:	682a      	ldr	r2, [r5, #0]
 800b7b2:	4651      	mov	r1, sl
 800b7b4:	4648      	mov	r0, r9
 800b7b6:	f7f7 ffcb 	bl	8003750 <print_formatted>
		break;
 800b7ba:	e7ef      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
 800b7bc:	686b      	ldr	r3, [r5, #4]
 800b7be:	682a      	ldr	r2, [r5, #0]
 800b7c0:	68a9      	ldr	r1, [r5, #8]
 800b7c2:	9100      	str	r1, [sp, #0]
 800b7c4:	4651      	mov	r1, sl
 800b7c6:	4648      	mov	r0, r9
 800b7c8:	f7f7 ffc2 	bl	8003750 <print_formatted>
		break;
 800b7cc:	e7e6      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b7ce:	686b      	ldr	r3, [r5, #4]
 800b7d0:	682a      	ldr	r2, [r5, #0]
 800b7d2:	68e9      	ldr	r1, [r5, #12]
 800b7d4:	9101      	str	r1, [sp, #4]
 800b7d6:	68a9      	ldr	r1, [r5, #8]
 800b7d8:	9100      	str	r1, [sp, #0]
 800b7da:	4651      	mov	r1, sl
 800b7dc:	4648      	mov	r0, r9
 800b7de:	f7f7 ffb7 	bl	8003750 <print_formatted>
		break;
 800b7e2:	e7db      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b7e4:	686b      	ldr	r3, [r5, #4]
 800b7e6:	682a      	ldr	r2, [r5, #0]
 800b7e8:	6929      	ldr	r1, [r5, #16]
 800b7ea:	9102      	str	r1, [sp, #8]
 800b7ec:	68e9      	ldr	r1, [r5, #12]
 800b7ee:	9101      	str	r1, [sp, #4]
 800b7f0:	68a9      	ldr	r1, [r5, #8]
 800b7f2:	9100      	str	r1, [sp, #0]
 800b7f4:	4651      	mov	r1, sl
 800b7f6:	4648      	mov	r0, r9
 800b7f8:	f7f7 ffaa 	bl	8003750 <print_formatted>
		break;
 800b7fc:	e7ce      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b7fe:	686b      	ldr	r3, [r5, #4]
 800b800:	682a      	ldr	r2, [r5, #0]
 800b802:	6969      	ldr	r1, [r5, #20]
 800b804:	9103      	str	r1, [sp, #12]
 800b806:	6929      	ldr	r1, [r5, #16]
 800b808:	9102      	str	r1, [sp, #8]
 800b80a:	68e9      	ldr	r1, [r5, #12]
 800b80c:	9101      	str	r1, [sp, #4]
 800b80e:	68a9      	ldr	r1, [r5, #8]
 800b810:	9100      	str	r1, [sp, #0]
 800b812:	4651      	mov	r1, sl
 800b814:	4648      	mov	r0, r9
 800b816:	f7f7 ff9b 	bl	8003750 <print_formatted>
		break;
 800b81a:	e7bf      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b81c:	686b      	ldr	r3, [r5, #4]
 800b81e:	682a      	ldr	r2, [r5, #0]
 800b820:	69a9      	ldr	r1, [r5, #24]
 800b822:	9104      	str	r1, [sp, #16]
 800b824:	6969      	ldr	r1, [r5, #20]
 800b826:	9103      	str	r1, [sp, #12]
 800b828:	6929      	ldr	r1, [r5, #16]
 800b82a:	9102      	str	r1, [sp, #8]
 800b82c:	68e9      	ldr	r1, [r5, #12]
 800b82e:	9101      	str	r1, [sp, #4]
 800b830:	68a9      	ldr	r1, [r5, #8]
 800b832:	9100      	str	r1, [sp, #0]
 800b834:	4651      	mov	r1, sl
 800b836:	4648      	mov	r0, r9
 800b838:	f7f7 ff8a 	bl	8003750 <print_formatted>
		break;
 800b83c:	e7ae      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b83e:	686b      	ldr	r3, [r5, #4]
 800b840:	682a      	ldr	r2, [r5, #0]
 800b842:	69e9      	ldr	r1, [r5, #28]
 800b844:	9105      	str	r1, [sp, #20]
 800b846:	69a9      	ldr	r1, [r5, #24]
 800b848:	9104      	str	r1, [sp, #16]
 800b84a:	6969      	ldr	r1, [r5, #20]
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	6929      	ldr	r1, [r5, #16]
 800b850:	9102      	str	r1, [sp, #8]
 800b852:	68e9      	ldr	r1, [r5, #12]
 800b854:	9101      	str	r1, [sp, #4]
 800b856:	68a9      	ldr	r1, [r5, #8]
 800b858:	9100      	str	r1, [sp, #0]
 800b85a:	4651      	mov	r1, sl
 800b85c:	4648      	mov	r0, r9
 800b85e:	f7f7 ff77 	bl	8003750 <print_formatted>
		break;
 800b862:	e79b      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b864:	686b      	ldr	r3, [r5, #4]
 800b866:	682a      	ldr	r2, [r5, #0]
 800b868:	6a29      	ldr	r1, [r5, #32]
 800b86a:	9106      	str	r1, [sp, #24]
 800b86c:	69e9      	ldr	r1, [r5, #28]
 800b86e:	9105      	str	r1, [sp, #20]
 800b870:	69a9      	ldr	r1, [r5, #24]
 800b872:	9104      	str	r1, [sp, #16]
 800b874:	6969      	ldr	r1, [r5, #20]
 800b876:	9103      	str	r1, [sp, #12]
 800b878:	6929      	ldr	r1, [r5, #16]
 800b87a:	9102      	str	r1, [sp, #8]
 800b87c:	68e9      	ldr	r1, [r5, #12]
 800b87e:	9101      	str	r1, [sp, #4]
 800b880:	68a9      	ldr	r1, [r5, #8]
 800b882:	9100      	str	r1, [sp, #0]
 800b884:	4651      	mov	r1, sl
 800b886:	4648      	mov	r0, r9
 800b888:	f7f7 ff62 	bl	8003750 <print_formatted>
		break;
 800b88c:	e786      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b88e:	686b      	ldr	r3, [r5, #4]
 800b890:	682a      	ldr	r2, [r5, #0]
 800b892:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b894:	9107      	str	r1, [sp, #28]
 800b896:	6a29      	ldr	r1, [r5, #32]
 800b898:	9106      	str	r1, [sp, #24]
 800b89a:	69e9      	ldr	r1, [r5, #28]
 800b89c:	9105      	str	r1, [sp, #20]
 800b89e:	69a9      	ldr	r1, [r5, #24]
 800b8a0:	9104      	str	r1, [sp, #16]
 800b8a2:	6969      	ldr	r1, [r5, #20]
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	6929      	ldr	r1, [r5, #16]
 800b8a8:	9102      	str	r1, [sp, #8]
 800b8aa:	68e9      	ldr	r1, [r5, #12]
 800b8ac:	9101      	str	r1, [sp, #4]
 800b8ae:	68a9      	ldr	r1, [r5, #8]
 800b8b0:	9100      	str	r1, [sp, #0]
 800b8b2:	4651      	mov	r1, sl
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	f7f7 ff4b 	bl	8003750 <print_formatted>
		break;
 800b8ba:	e76f      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b8bc:	686b      	ldr	r3, [r5, #4]
 800b8be:	682a      	ldr	r2, [r5, #0]
 800b8c0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b8c2:	9108      	str	r1, [sp, #32]
 800b8c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b8c6:	9107      	str	r1, [sp, #28]
 800b8c8:	6a29      	ldr	r1, [r5, #32]
 800b8ca:	9106      	str	r1, [sp, #24]
 800b8cc:	69e9      	ldr	r1, [r5, #28]
 800b8ce:	9105      	str	r1, [sp, #20]
 800b8d0:	69a9      	ldr	r1, [r5, #24]
 800b8d2:	9104      	str	r1, [sp, #16]
 800b8d4:	6969      	ldr	r1, [r5, #20]
 800b8d6:	9103      	str	r1, [sp, #12]
 800b8d8:	6929      	ldr	r1, [r5, #16]
 800b8da:	9102      	str	r1, [sp, #8]
 800b8dc:	68e9      	ldr	r1, [r5, #12]
 800b8de:	9101      	str	r1, [sp, #4]
 800b8e0:	68a9      	ldr	r1, [r5, #8]
 800b8e2:	9100      	str	r1, [sp, #0]
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	4648      	mov	r0, r9
 800b8e8:	f7f7 ff32 	bl	8003750 <print_formatted>
		break;
 800b8ec:	e756      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b8ee:	686b      	ldr	r3, [r5, #4]
 800b8f0:	682a      	ldr	r2, [r5, #0]
 800b8f2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b8f4:	9109      	str	r1, [sp, #36]	; 0x24
 800b8f6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b8f8:	9108      	str	r1, [sp, #32]
 800b8fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b8fc:	9107      	str	r1, [sp, #28]
 800b8fe:	6a29      	ldr	r1, [r5, #32]
 800b900:	9106      	str	r1, [sp, #24]
 800b902:	69e9      	ldr	r1, [r5, #28]
 800b904:	9105      	str	r1, [sp, #20]
 800b906:	69a9      	ldr	r1, [r5, #24]
 800b908:	9104      	str	r1, [sp, #16]
 800b90a:	6969      	ldr	r1, [r5, #20]
 800b90c:	9103      	str	r1, [sp, #12]
 800b90e:	6929      	ldr	r1, [r5, #16]
 800b910:	9102      	str	r1, [sp, #8]
 800b912:	68e9      	ldr	r1, [r5, #12]
 800b914:	9101      	str	r1, [sp, #4]
 800b916:	68a9      	ldr	r1, [r5, #8]
 800b918:	9100      	str	r1, [sp, #0]
 800b91a:	4651      	mov	r1, sl
 800b91c:	4648      	mov	r0, r9
 800b91e:	f7f7 ff17 	bl	8003750 <print_formatted>
		break;
 800b922:	e73b      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b924:	686b      	ldr	r3, [r5, #4]
 800b926:	682a      	ldr	r2, [r5, #0]
 800b928:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b92a:	910a      	str	r1, [sp, #40]	; 0x28
 800b92c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b92e:	9109      	str	r1, [sp, #36]	; 0x24
 800b930:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b932:	9108      	str	r1, [sp, #32]
 800b934:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b936:	9107      	str	r1, [sp, #28]
 800b938:	6a29      	ldr	r1, [r5, #32]
 800b93a:	9106      	str	r1, [sp, #24]
 800b93c:	69e9      	ldr	r1, [r5, #28]
 800b93e:	9105      	str	r1, [sp, #20]
 800b940:	69a9      	ldr	r1, [r5, #24]
 800b942:	9104      	str	r1, [sp, #16]
 800b944:	6969      	ldr	r1, [r5, #20]
 800b946:	9103      	str	r1, [sp, #12]
 800b948:	6929      	ldr	r1, [r5, #16]
 800b94a:	9102      	str	r1, [sp, #8]
 800b94c:	68e9      	ldr	r1, [r5, #12]
 800b94e:	9101      	str	r1, [sp, #4]
 800b950:	68a9      	ldr	r1, [r5, #8]
 800b952:	9100      	str	r1, [sp, #0]
 800b954:	4651      	mov	r1, sl
 800b956:	4648      	mov	r0, r9
 800b958:	f7f7 fefa 	bl	8003750 <print_formatted>
		break;
 800b95c:	e71e      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b95e:	686b      	ldr	r3, [r5, #4]
 800b960:	682a      	ldr	r2, [r5, #0]
 800b962:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b964:	910b      	str	r1, [sp, #44]	; 0x2c
 800b966:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b968:	910a      	str	r1, [sp, #40]	; 0x28
 800b96a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b96c:	9109      	str	r1, [sp, #36]	; 0x24
 800b96e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b970:	9108      	str	r1, [sp, #32]
 800b972:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b974:	9107      	str	r1, [sp, #28]
 800b976:	6a29      	ldr	r1, [r5, #32]
 800b978:	9106      	str	r1, [sp, #24]
 800b97a:	69e9      	ldr	r1, [r5, #28]
 800b97c:	9105      	str	r1, [sp, #20]
 800b97e:	69a9      	ldr	r1, [r5, #24]
 800b980:	9104      	str	r1, [sp, #16]
 800b982:	6969      	ldr	r1, [r5, #20]
 800b984:	9103      	str	r1, [sp, #12]
 800b986:	6929      	ldr	r1, [r5, #16]
 800b988:	9102      	str	r1, [sp, #8]
 800b98a:	68e9      	ldr	r1, [r5, #12]
 800b98c:	9101      	str	r1, [sp, #4]
 800b98e:	68a9      	ldr	r1, [r5, #8]
 800b990:	9100      	str	r1, [sp, #0]
 800b992:	4651      	mov	r1, sl
 800b994:	4648      	mov	r0, r9
 800b996:	f7f7 fedb 	bl	8003750 <print_formatted>
		break;
 800b99a:	e6ff      	b.n	800b79c <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b99c:	686b      	ldr	r3, [r5, #4]
 800b99e:	682a      	ldr	r2, [r5, #0]
 800b9a0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800b9a2:	910c      	str	r1, [sp, #48]	; 0x30
 800b9a4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b9a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b9a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b9aa:	910a      	str	r1, [sp, #40]	; 0x28
 800b9ac:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b9ae:	9109      	str	r1, [sp, #36]	; 0x24
 800b9b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b9b2:	9108      	str	r1, [sp, #32]
 800b9b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b9b6:	9107      	str	r1, [sp, #28]
 800b9b8:	6a29      	ldr	r1, [r5, #32]
 800b9ba:	9106      	str	r1, [sp, #24]
 800b9bc:	69e9      	ldr	r1, [r5, #28]
 800b9be:	9105      	str	r1, [sp, #20]
 800b9c0:	69a9      	ldr	r1, [r5, #24]
 800b9c2:	9104      	str	r1, [sp, #16]
 800b9c4:	6969      	ldr	r1, [r5, #20]
 800b9c6:	9103      	str	r1, [sp, #12]
 800b9c8:	6929      	ldr	r1, [r5, #16]
 800b9ca:	9102      	str	r1, [sp, #8]
 800b9cc:	68e9      	ldr	r1, [r5, #12]
 800b9ce:	9101      	str	r1, [sp, #4]
 800b9d0:	68a9      	ldr	r1, [r5, #8]
 800b9d2:	9100      	str	r1, [sp, #0]
 800b9d4:	4651      	mov	r1, sl
 800b9d6:	4648      	mov	r0, r9
 800b9d8:	f7f7 feba 	bl	8003750 <print_formatted>
}
 800b9dc:	e6de      	b.n	800b79c <std_print+0x74>

0800b9de <log_output_flush>:
{
 800b9de:	b510      	push	{r4, lr}
 800b9e0:	4604      	mov	r4, r0
		     output->control_block->offset,
 800b9e2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800b9e4:	6853      	ldr	r3, [r2, #4]
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	6881      	ldr	r1, [r0, #8]
 800b9ea:	6800      	ldr	r0, [r0, #0]
 800b9ec:	f7ff fe50 	bl	800b690 <buffer_write>
	output->control_block->offset = 0;
 800b9f0:	6863      	ldr	r3, [r4, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
}
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <out_func>:
{
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800b9fe:	684b      	ldr	r3, [r1, #4]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68cb      	ldr	r3, [r1, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d00f      	beq.n	800ba28 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800ba08:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800ba0a:	f3bf 8f5b 	dmb	ish
 800ba0e:	e853 2f00 	ldrex	r2, [r3]
 800ba12:	1c51      	adds	r1, r2, #1
 800ba14:	e843 1000 	strex	r0, r1, [r3]
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d1f8      	bne.n	800ba0e <out_func+0x16>
 800ba1c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800ba20:	68a3      	ldr	r3, [r4, #8]
 800ba22:	549d      	strb	r5, [r3, r2]
}
 800ba24:	2000      	movs	r0, #0
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800ba28:	4608      	mov	r0, r1
 800ba2a:	f7ff ffd8 	bl	800b9de <log_output_flush>
 800ba2e:	e7eb      	b.n	800ba08 <out_func+0x10>

0800ba30 <log_output_msg_process>:
{
 800ba30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba32:	b085      	sub	sp, #20
 800ba34:	4606      	mov	r6, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	4617      	mov	r7, r2
 800ba3a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ba3e:	f08c 0c01 	eor.w	ip, ip, #1
 800ba42:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
 800ba46:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 800ba48:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
 800ba4c:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
 800ba50:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
 800ba52:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
 800ba56:	f01c 0507 	ands.w	r5, ip, #7
 800ba5a:	d10f      	bne.n	800ba7c <log_output_msg_process+0x4c>
 800ba5c:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800ba5e:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 800ba60:	f013 0f01 	tst.w	r3, #1
 800ba64:	d013      	beq.n	800ba8e <log_output_msg_process+0x5e>
	} else if (raw_string) {
 800ba66:	b9bd      	cbnz	r5, 800ba98 <log_output_msg_process+0x68>
		raw_string_print(msg, output);
 800ba68:	4631      	mov	r1, r6
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f7f7 ffb6 	bl	80039dc <raw_string_print>
	if (!raw_string) {
 800ba70:	b9c5      	cbnz	r5, 800baa4 <log_output_msg_process+0x74>
	log_output_flush(output);
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ffb3 	bl	800b9de <log_output_flush>
}
 800ba78:	b005      	add	sp, #20
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
 800ba7c:	9102      	str	r1, [sp, #8]
 800ba7e:	9001      	str	r0, [sp, #4]
 800ba80:	9500      	str	r5, [sp, #0]
 800ba82:	4639      	mov	r1, r7
 800ba84:	4630      	mov	r0, r6
 800ba86:	f7ff fe28 	bl	800b6da <prefix_print>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	e7e7      	b.n	800ba5e <log_output_msg_process+0x2e>
		std_print(msg, output);
 800ba8e:	4631      	mov	r1, r6
 800ba90:	4620      	mov	r0, r4
 800ba92:	f7ff fe49 	bl	800b728 <std_print>
 800ba96:	e7eb      	b.n	800ba70 <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f7f7 ff71 	bl	8003984 <hexdump_print>
 800baa2:	e7e5      	b.n	800ba70 <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
 800baa4:	462a      	mov	r2, r5
 800baa6:	4639      	mov	r1, r7
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7ff fe0a 	bl	800b6c2 <postfix_print>
 800baae:	e7e0      	b.n	800ba72 <log_output_msg_process+0x42>

0800bab0 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800bab0:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800bab2:	f7f8 f84b 	bl	8003b4c <__do_global_ctors_aux>
	__do_init_array_aux();
 800bab6:	f7f8 f83b 	bl	8003b30 <__do_init_array_aux>
}
 800baba:	bd08      	pop	{r3, pc}

0800babc <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 800babe:	b329      	cbz	r1, 800bb0c <stm32_dt_pinctrl_configure+0x50>
 800bac0:	4606      	mov	r6, r0
 800bac2:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 800bac4:	2400      	movs	r4, #0
	uint32_t func = 0;
 800bac6:	4625      	mov	r5, r4
 800bac8:	e00f      	b.n	800baea <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800baca:	b2d3      	uxtb	r3, r2
 800bacc:	2b10      	cmp	r3, #16
 800bace:	d019      	beq.n	800bb04 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800bad0:	0b13      	lsrs	r3, r2, #12
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	4629      	mov	r1, r5
 800bade:	4318      	orrs	r0, r3
 800bae0:	f7f8 f844 	bl	8003b6c <stm32_pin_configure>
		if (ret != 0) {
 800bae4:	4603      	mov	r3, r0
 800bae6:	b990      	cbnz	r0, 800bb0e <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 800bae8:	3401      	adds	r4, #1
 800baea:	42bc      	cmp	r4, r7
 800baec:	d20c      	bcs.n	800bb08 <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 800baee:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800baf2:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800baf6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800bafa:	d1e6      	bne.n	800baca <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800bafc:	685d      	ldr	r5, [r3, #4]
 800bafe:	f045 0520 	orr.w	r5, r5, #32
 800bb02:	e7e5      	b.n	800bad0 <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800bb04:	2530      	movs	r5, #48	; 0x30
 800bb06:	e7e3      	b.n	800bad0 <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e000      	b.n	800bb0e <stm32_dt_pinctrl_configure+0x52>
		return 0;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb12 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800bb12:	b538      	push	{r3, r4, r5, lr}
 800bb14:	4604      	mov	r4, r0

	if (esf != NULL) {
 800bb16:	460d      	mov	r5, r1
 800bb18:	b111      	cbz	r1, 800bb20 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	f7f8 f860 	bl	8003be0 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800bb20:	4629      	mov	r1, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7fc f8cc 	bl	8007cc0 <z_fatal_error>
}
 800bb28:	bd38      	pop	{r3, r4, r5, pc}

0800bb2a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800bb2a:	b508      	push	{r3, lr}
 800bb2c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800bb2e:	6800      	ldr	r0, [r0, #0]
 800bb30:	f7ff ffef 	bl	800bb12 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800bb34:	bd08      	pop	{r3, pc}

0800bb36 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 800bb36:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800bb38:	2100      	movs	r1, #0
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	f7ff ffe9 	bl	800bb12 <z_arm_fatal_error>
}
 800bb40:	bd08      	pop	{r3, pc}

0800bb42 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800bb42:	b508      	push	{r3, lr}
	handler();
 800bb44:	f7f8 f8be 	bl	8003cc4 <z_SysNmiOnReset>
	z_arm_int_exit();
 800bb48:	f7f8 f99c 	bl	8003e84 <z_arm_exc_exit>
}
 800bb4c:	bd08      	pop	{r3, pc}

0800bb4e <memory_fault_recoverable>:
}
 800bb4e:	2000      	movs	r0, #0
 800bb50:	4770      	bx	lr

0800bb52 <fault_handle>:
{
 800bb52:	b508      	push	{r3, lr}
	*recoverable = false;
 800bb54:	2300      	movs	r3, #0
 800bb56:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800bb58:	1ecb      	subs	r3, r1, #3
 800bb5a:	2b09      	cmp	r3, #9
 800bb5c:	d81a      	bhi.n	800bb94 <fault_handle+0x42>
 800bb5e:	e8df f003 	tbb	[pc, r3]
 800bb62:	0905      	.short	0x0905
 800bb64:	1919110d 	.word	0x1919110d
 800bb68:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	f7f8 fbeb 	bl	8004348 <hard_fault>
}
 800bb72:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800bb74:	2100      	movs	r1, #0
 800bb76:	f7f8 fb1f 	bl	80041b8 <mem_manage_fault>
		break;
 800bb7a:	e7fa      	b.n	800bb72 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	f7f8 fa5b 	bl	8004038 <bus_fault>
		break;
 800bb82:	e7f6      	b.n	800bb72 <fault_handle+0x20>
		reason = usage_fault(esf);
 800bb84:	f7f8 f98c 	bl	8003ea0 <usage_fault>
		break;
 800bb88:	e7f3      	b.n	800bb72 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	f7f8 fa3a 	bl	8004004 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800bb90:	2000      	movs	r0, #0
		break;
 800bb92:	e7ee      	b.n	800bb72 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800bb94:	f7f8 fc78 	bl	8004488 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800bb98:	2000      	movs	r0, #0
	return reason;
 800bb9a:	e7ea      	b.n	800bb72 <fault_handle+0x20>

0800bb9c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800bb9c:	6843      	ldr	r3, [r0, #4]
 800bb9e:	1e5a      	subs	r2, r3, #1
		&&
 800bba0:	4213      	tst	r3, r2
 800bba2:	d106      	bne.n	800bbb2 <mpu_partition_is_valid+0x16>
		&&
 800bba4:	2b1f      	cmp	r3, #31
 800bba6:	d906      	bls.n	800bbb6 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800bba8:	6803      	ldr	r3, [r0, #0]
		&&
 800bbaa:	421a      	tst	r2, r3
 800bbac:	d005      	beq.n	800bbba <mpu_partition_is_valid+0x1e>
 800bbae:	2000      	movs	r0, #0
 800bbb0:	4770      	bx	lr
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	4770      	bx	lr
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	4770      	bx	lr
 800bbba:	2001      	movs	r0, #1
}
 800bbbc:	4770      	bx	lr

0800bbbe <mpu_configure_region>:
{
 800bbbe:	b500      	push	{lr}
 800bbc0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800bbc2:	680b      	ldr	r3, [r1, #0]
 800bbc4:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800bbc6:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800bbc8:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800bbca:	2b20      	cmp	r3, #32
 800bbcc:	d912      	bls.n	800bbf4 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800bbce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd2:	d811      	bhi.n	800bbf8 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	fab3 f383 	clz	r3, r3
 800bbda:	f1c3 031f 	rsb	r3, r3, #31
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800bbe8:	a901      	add	r1, sp, #4
 800bbea:	f7f8 fd67 	bl	80046bc <region_allocate_and_init>
}
 800bbee:	b005      	add	sp, #20
 800bbf0:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800bbf4:	2308      	movs	r3, #8
 800bbf6:	e7f5      	b.n	800bbe4 <mpu_configure_region+0x26>
		return REGION_4G;
 800bbf8:	233e      	movs	r3, #62	; 0x3e
 800bbfa:	e7f3      	b.n	800bbe4 <mpu_configure_region+0x26>

0800bbfc <arm_core_mpu_configure_static_mpu_regions>:
{
 800bbfc:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800bbfe:	f7f8 fdbf 	bl	8004780 <mpu_configure_static_mpu_regions>
}
 800bc02:	bd08      	pop	{r3, pc}

0800bc04 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800bc04:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800bc06:	f7f8 fdc5 	bl	8004794 <mpu_configure_dynamic_mpu_regions>
}
 800bc0a:	bd08      	pop	{r3, pc}

0800bc0c <malloc_prepare>:
}
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	4770      	bx	lr

0800bc10 <_stdout_hook_default>:
}
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc14:	4770      	bx	lr

0800bc16 <_stdin_hook_default>:
}
 800bc16:	2000      	movs	r0, #0
 800bc18:	4770      	bx	lr

0800bc1a <_read>:
{
 800bc1a:	b508      	push	{r3, lr}
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800bc20:	f7f8 fe10 	bl	8004844 <z_impl_zephyr_read_stdin>
}
 800bc24:	bd08      	pop	{r3, pc}

0800bc26 <_write>:
{
 800bc26:	b508      	push	{r3, lr}
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800bc2c:	f7f8 fe20 	bl	8004870 <z_impl_zephyr_write_stdout>
}
 800bc30:	bd08      	pop	{r3, pc}

0800bc32 <_close>:
}
 800bc32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc36:	4770      	bx	lr

0800bc38 <_lseek>:
}
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr

0800bc3c <_isatty>:
}
 800bc3c:	2802      	cmp	r0, #2
 800bc3e:	bfcc      	ite	gt
 800bc40:	2000      	movgt	r0, #0
 800bc42:	2001      	movle	r0, #1
 800bc44:	4770      	bx	lr

0800bc46 <_kill>:
}
 800bc46:	2000      	movs	r0, #0
 800bc48:	4770      	bx	lr

0800bc4a <_getpid>:
}
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	4770      	bx	lr

0800bc4e <_fstat>:
	st->st_mode = S_IFCHR;
 800bc4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc52:	604b      	str	r3, [r1, #4]
}
 800bc54:	2000      	movs	r0, #0
 800bc56:	4770      	bx	lr

0800bc58 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800bc5c:	2014      	movs	r0, #20
 800bc5e:	f7fd febb 	bl	80099d8 <malloc>
 800bc62:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800bc64:	f000 ffef 	bl	800cc46 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800bc6a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800bc6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc74:	f7fc fafe 	bl	8008274 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800bc78:	bd08      	pop	{r3, pc}

0800bc7a <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800bc7a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800bc7c:	f7fc fb84 	bl	8008388 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800bc80:	bd08      	pop	{r3, pc}

0800bc82 <__stm32_exti_isr_0>:
{
 800bc82:	b508      	push	{r3, lr}
 800bc84:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800bc86:	2101      	movs	r1, #1
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f7f8 fe2b 	bl	80048e4 <__stm32_exti_isr>
}
 800bc8e:	bd08      	pop	{r3, pc}

0800bc90 <__stm32_exti_isr_1>:
{
 800bc90:	b508      	push	{r3, lr}
 800bc92:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800bc94:	2102      	movs	r1, #2
 800bc96:	2001      	movs	r0, #1
 800bc98:	f7f8 fe24 	bl	80048e4 <__stm32_exti_isr>
}
 800bc9c:	bd08      	pop	{r3, pc}

0800bc9e <__stm32_exti_isr_2>:
{
 800bc9e:	b508      	push	{r3, lr}
 800bca0:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800bca2:	2103      	movs	r1, #3
 800bca4:	2002      	movs	r0, #2
 800bca6:	f7f8 fe1d 	bl	80048e4 <__stm32_exti_isr>
}
 800bcaa:	bd08      	pop	{r3, pc}

0800bcac <__stm32_exti_isr_3>:
{
 800bcac:	b508      	push	{r3, lr}
 800bcae:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800bcb0:	2104      	movs	r1, #4
 800bcb2:	2003      	movs	r0, #3
 800bcb4:	f7f8 fe16 	bl	80048e4 <__stm32_exti_isr>
}
 800bcb8:	bd08      	pop	{r3, pc}

0800bcba <__stm32_exti_isr_4>:
{
 800bcba:	b508      	push	{r3, lr}
 800bcbc:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800bcbe:	2105      	movs	r1, #5
 800bcc0:	2004      	movs	r0, #4
 800bcc2:	f7f8 fe0f 	bl	80048e4 <__stm32_exti_isr>
}
 800bcc6:	bd08      	pop	{r3, pc}

0800bcc8 <__stm32_exti_isr_9_5>:
{
 800bcc8:	b508      	push	{r3, lr}
 800bcca:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800bccc:	210a      	movs	r1, #10
 800bcce:	2005      	movs	r0, #5
 800bcd0:	f7f8 fe08 	bl	80048e4 <__stm32_exti_isr>
}
 800bcd4:	bd08      	pop	{r3, pc}

0800bcd6 <__stm32_exti_isr_15_10>:
{
 800bcd6:	b508      	push	{r3, lr}
 800bcd8:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800bcda:	2110      	movs	r1, #16
 800bcdc:	200a      	movs	r0, #10
 800bcde:	f7f8 fe01 	bl	80048e4 <__stm32_exti_isr>
}
 800bce2:	bd08      	pop	{r3, pc}

0800bce4 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800bce4:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800bce6:	2200      	movs	r2, #0
 800bce8:	4611      	mov	r1, r2
 800bcea:	2006      	movs	r0, #6
 800bcec:	f7f7 ffd4 	bl	8003c98 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	2007      	movs	r0, #7
 800bcf6:	f7f7 ffcf 	bl	8003c98 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2008      	movs	r0, #8
 800bd00:	f7f7 ffca 	bl	8003c98 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800bd04:	2200      	movs	r2, #0
 800bd06:	4611      	mov	r1, r2
 800bd08:	2009      	movs	r0, #9
 800bd0a:	f7f7 ffc5 	bl	8003c98 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4611      	mov	r1, r2
 800bd12:	200a      	movs	r0, #10
 800bd14:	f7f7 ffc0 	bl	8003c98 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	2017      	movs	r0, #23
 800bd1e:	f7f7 ffbb 	bl	8003c98 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800bd22:	2200      	movs	r2, #0
 800bd24:	4611      	mov	r1, r2
 800bd26:	2028      	movs	r0, #40	; 0x28
 800bd28:	f7f7 ffb6 	bl	8003c98 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800bd2c:	bd08      	pop	{r3, pc}

0800bd2e <stm32_exti_init>:
{
 800bd2e:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800bd30:	f7ff ffd8 	bl	800bce4 <__stm32_exti_connect_irqs>
}
 800bd34:	2000      	movs	r0, #0
 800bd36:	bd08      	pop	{r3, pc}

0800bd38 <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800bd38:	2300      	movs	r3, #0
 800bd3a:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800bd3c:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800bd3e:	6083      	str	r3, [r0, #8]
}
 800bd40:	4770      	bx	lr

0800bd42 <get_bus_clock>:
}
 800bd42:	fbb0 f0f1 	udiv	r0, r0, r1
 800bd46:	4770      	bx	lr

0800bd48 <config_pll_init>:
	pllinit->PLLMul = pll_mul(STM32_PLL_MULTIPLIER);
 800bd48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bd4c:	6003      	str	r3, [r0, #0]
	pllinit->PLLDiv = pll_div(STM32_PLL_DIVISOR);
 800bd4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bd52:	6043      	str	r3, [r0, #4]
}
 800bd54:	4770      	bx	lr

0800bd56 <gpio_stm32_isr>:
{
 800bd56:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800bd58:	684e      	ldr	r6, [r1, #4]
 800bd5a:	2501      	movs	r5, #1
 800bd5c:	4085      	lsls	r5, r0
	return list->head;
 800bd5e:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800bd60:	b119      	cbz	r1, 800bd6a <gpio_stm32_isr+0x14>
 800bd62:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800bd64:	b149      	cbz	r1, 800bd7a <gpio_stm32_isr+0x24>
	return node->next;
 800bd66:	680c      	ldr	r4, [r1, #0]
 800bd68:	e007      	b.n	800bd7a <gpio_stm32_isr+0x24>
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	e005      	b.n	800bd7a <gpio_stm32_isr+0x24>
 800bd6e:	b164      	cbz	r4, 800bd8a <gpio_stm32_isr+0x34>
 800bd70:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800bd72:	b104      	cbz	r4, 800bd76 <gpio_stm32_isr+0x20>
	return node->next;
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	4621      	mov	r1, r4
 800bd78:	461c      	mov	r4, r3
 800bd7a:	b141      	cbz	r1, 800bd8e <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800bd7c:	688a      	ldr	r2, [r1, #8]
 800bd7e:	402a      	ands	r2, r5
 800bd80:	d0f5      	beq.n	800bd6e <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800bd82:	684b      	ldr	r3, [r1, #4]
 800bd84:	4630      	mov	r0, r6
 800bd86:	4798      	blx	r3
 800bd88:	e7f1      	b.n	800bd6e <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800bd8a:	4623      	mov	r3, r4
 800bd8c:	e7f3      	b.n	800bd76 <gpio_stm32_isr+0x20>
}
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}

0800bd90 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800bd90:	f410 7f00 	tst.w	r0, #512	; 0x200
 800bd94:	d01b      	beq.n	800bdce <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800bd96:	2310      	movs	r3, #16
 800bd98:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800bd9a:	f010 0f02 	tst.w	r0, #2
 800bd9e:	d004      	beq.n	800bdaa <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800bda0:	f010 0f04 	tst.w	r0, #4
 800bda4:	d02c      	beq.n	800be00 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800bda6:	2350      	movs	r3, #80	; 0x50
 800bda8:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800bdaa:	f010 0310 	ands.w	r3, r0, #16
 800bdae:	d005      	beq.n	800bdbc <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800bdb0:	680b      	ldr	r3, [r1, #0]
 800bdb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdb6:	600b      	str	r3, [r1, #0]
	return 0;
 800bdb8:	2000      	movs	r0, #0
 800bdba:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800bdbc:	f010 0020 	ands.w	r0, r0, #32
 800bdc0:	d020      	beq.n	800be04 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800bdc2:	680a      	ldr	r2, [r1, #0]
 800bdc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdc8:	600a      	str	r2, [r1, #0]
	return 0;
 800bdca:	4618      	mov	r0, r3
 800bdcc:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800bdce:	f410 7f80 	tst.w	r0, #256	; 0x100
 800bdd2:	d011      	beq.n	800bdf8 <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800bdd8:	f010 0310 	ands.w	r3, r0, #16
 800bddc:	d004      	beq.n	800bde8 <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800bdde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde2:	600b      	str	r3, [r1, #0]
	return 0;
 800bde4:	2000      	movs	r0, #0
 800bde6:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800bde8:	f010 0020 	ands.w	r0, r0, #32
 800bdec:	d00a      	beq.n	800be04 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800bdee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdf2:	600a      	str	r2, [r1, #0]
	return 0;
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800bdf8:	2330      	movs	r3, #48	; 0x30
 800bdfa:	600b      	str	r3, [r1, #0]
	return 0;
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	4770      	bx	lr
				return -ENOTSUP;
 800be00:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800be04:	4770      	bx	lr

0800be06 <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800be06:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800be08:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800be0a:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800be0c:	600b      	str	r3, [r1, #0]
}
 800be0e:	2000      	movs	r0, #0
 800be10:	4770      	bx	lr

0800be12 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800be12:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800be14:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800be16:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800be18:	4042      	eors	r2, r0
 800be1a:	400a      	ands	r2, r1
 800be1c:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800be1e:	615a      	str	r2, [r3, #20]
}
 800be20:	2000      	movs	r0, #0
 800be22:	4770      	bx	lr

0800be24 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800be24:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800be26:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800be28:	6199      	str	r1, [r3, #24]
}
 800be2a:	2000      	movs	r0, #0
 800be2c:	4770      	bx	lr

0800be2e <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800be2e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800be30:	685b      	ldr	r3, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 800be32:	6299      	str	r1, [r3, #40]	; 0x28
}
 800be34:	2000      	movs	r0, #0
 800be36:	4770      	bx	lr

0800be38 <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800be38:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800be3a:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800be3c:	6953      	ldr	r3, [r2, #20]
 800be3e:	404b      	eors	r3, r1
 800be40:	6153      	str	r3, [r2, #20]
}
 800be42:	2000      	movs	r0, #0
 800be44:	4770      	bx	lr

0800be46 <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800be46:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800be48:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800be4a:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800be4e:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800be50:	b1fb      	cbz	r3, 800be92 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800be52:	2000      	movs	r0, #0
 800be54:	e00d      	b.n	800be72 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800be56:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800be58:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800be5a:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800be5e:	4281      	cmp	r1, r0
 800be60:	d112      	bne.n	800be88 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800be62:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800be66:	e00f      	b.n	800be88 <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800be68:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800be6c:	e00c      	b.n	800be88 <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800be6e:	4618      	mov	r0, r3
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	b163      	cbz	r3, 800be8e <gpio_stm32_manage_callback+0x48>
 800be74:	4299      	cmp	r1, r3
 800be76:	d1fa      	bne.n	800be6e <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0ec      	beq.n	800be56 <gpio_stm32_manage_callback+0x10>
	return node->next;
 800be7c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800be7e:	6003      	str	r3, [r0, #0]
	return list->tail;
 800be80:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800be84:	4299      	cmp	r1, r3
 800be86:	d0ef      	beq.n	800be68 <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800be88:	2300      	movs	r3, #0
 800be8a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800be8c:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800be8e:	b903      	cbnz	r3, 800be92 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800be90:	b162      	cbz	r2, 800beac <gpio_stm32_manage_callback+0x66>
	if (set) {
 800be92:	b172      	cbz	r2, 800beb2 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800be94:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800be96:	600b      	str	r3, [r1, #0]
	list->head = node;
 800be98:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800be9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800be9e:	b10b      	cbz	r3, 800bea4 <gpio_stm32_manage_callback+0x5e>
	return 0;
 800bea0:	2000      	movs	r0, #0
 800bea2:	e007      	b.n	800beb4 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800bea4:	f8cc 1004 	str.w	r1, [ip, #4]
 800bea8:	2000      	movs	r0, #0
}
 800beaa:	e003      	b.n	800beb4 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800beac:	f06f 0015 	mvn.w	r0, #21
 800beb0:	e000      	b.n	800beb4 <gpio_stm32_manage_callback+0x6e>
	return 0;
 800beb2:	2000      	movs	r0, #0
}
 800beb4:	bc10      	pop	{r4}
 800beb6:	4770      	bx	lr

0800beb8 <gpio_stm32_configure>:
{
 800beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800beba:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800bebc:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800bebe:	2001      	movs	r0, #1
 800bec0:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800bec2:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800bec6:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800beca:	6865      	ldr	r5, [r4, #4]
 800becc:	ea25 0500 	bic.w	r5, r5, r0
 800bed0:	408e      	lsls	r6, r1
 800bed2:	4335      	orrs	r5, r6
 800bed4:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800bed6:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800beda:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bedc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bee0:	2d00      	cmp	r5, #0
 800bee2:	d04a      	beq.n	800bf7a <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 800bee4:	fab5 f585 	clz	r5, r5
 800bee8:	006d      	lsls	r5, r5, #1
 800beea:	2703      	movs	r7, #3
 800beec:	fa07 f505 	lsl.w	r5, r7, r5
 800bef0:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bef4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bef8:	2d00      	cmp	r5, #0
 800befa:	d040      	beq.n	800bf7e <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 800befc:	fab5 f585 	clz	r5, r5
 800bf00:	006d      	lsls	r5, r5, #1
 800bf02:	fa0e f505 	lsl.w	r5, lr, r5
 800bf06:	4335      	orrs	r5, r6
 800bf08:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800bf0a:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800bf0e:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf10:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bf14:	b3ad      	cbz	r5, 800bf82 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 800bf16:	fab5 f585 	clz	r5, r5
 800bf1a:	006d      	lsls	r5, r5, #1
 800bf1c:	f04f 0e03 	mov.w	lr, #3
 800bf20:	fa0e f505 	lsl.w	r5, lr, r5
 800bf24:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf28:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bf2c:	b35d      	cbz	r5, 800bf86 <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 800bf2e:	fab5 f585 	clz	r5, r5
 800bf32:	006d      	lsls	r5, r5, #1
 800bf34:	fa02 f505 	lsl.w	r5, r2, r5
 800bf38:	ea4e 0505 	orr.w	r5, lr, r5
 800bf3c:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800bf3e:	f1bc 0f20 	cmp.w	ip, #32
 800bf42:	d022      	beq.n	800bf8a <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800bf44:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bf48:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf4a:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d052      	beq.n	800bff8 <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 800bf52:	fab3 f383 	clz	r3, r3
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	2103      	movs	r1, #3
 800bf5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf5e:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf62:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d048      	beq.n	800bffc <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 800bf6a:	fab0 f080 	clz	r0, r0
 800bf6e:	0040      	lsls	r0, r0, #1
 800bf70:	fa0c f000 	lsl.w	r0, ip, r0
 800bf74:	4318      	orrs	r0, r3
 800bf76:	6020      	str	r0, [r4, #0]
}
 800bf78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800bf7a:	2520      	movs	r5, #32
 800bf7c:	e7b4      	b.n	800bee8 <gpio_stm32_configure+0x30>
 800bf7e:	2520      	movs	r5, #32
 800bf80:	e7be      	b.n	800bf00 <gpio_stm32_configure+0x48>
 800bf82:	2520      	movs	r5, #32
 800bf84:	e7c9      	b.n	800bf1a <gpio_stm32_configure+0x62>
 800bf86:	2520      	movs	r5, #32
 800bf88:	e7d3      	b.n	800bf32 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 800bf8a:	2907      	cmp	r1, #7
 800bf8c:	dc19      	bgt.n	800bfc2 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800bf8e:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf90:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800bf94:	b18a      	cbz	r2, 800bfba <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 800bf96:	fab2 f282 	clz	r2, r2
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	250f      	movs	r5, #15
 800bf9e:	fa05 f202 	lsl.w	r2, r5, r2
 800bfa2:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfa6:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800bfaa:	b142      	cbz	r2, 800bfbe <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 800bfac:	fab2 f282 	clz	r2, r2
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	4093      	lsls	r3, r2
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	6223      	str	r3, [r4, #32]
}
 800bfb8:	e7c4      	b.n	800bf44 <gpio_stm32_configure+0x8c>
    return 32U;
 800bfba:	2220      	movs	r2, #32
 800bfbc:	e7ed      	b.n	800bf9a <gpio_stm32_configure+0xe2>
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	e7f6      	b.n	800bfb0 <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800bfc2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bfc4:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfc6:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800bfca:	b189      	cbz	r1, 800bff0 <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 800bfcc:	fab1 f181 	clz	r1, r1
 800bfd0:	0089      	lsls	r1, r1, #2
 800bfd2:	260f      	movs	r6, #15
 800bfd4:	fa06 f101 	lsl.w	r1, r6, r1
 800bfd8:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfdc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800bfe0:	b142      	cbz	r2, 800bff4 <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 800bfe2:	fab2 f282 	clz	r2, r2
 800bfe6:	0092      	lsls	r2, r2, #2
 800bfe8:	4093      	lsls	r3, r2
 800bfea:	430b      	orrs	r3, r1
 800bfec:	6263      	str	r3, [r4, #36]	; 0x24
}
 800bfee:	e7a9      	b.n	800bf44 <gpio_stm32_configure+0x8c>
    return 32U;
 800bff0:	2120      	movs	r1, #32
 800bff2:	e7ed      	b.n	800bfd0 <gpio_stm32_configure+0x118>
 800bff4:	2220      	movs	r2, #32
 800bff6:	e7f6      	b.n	800bfe6 <gpio_stm32_configure+0x12e>
 800bff8:	2320      	movs	r3, #32
 800bffa:	e7ac      	b.n	800bf56 <gpio_stm32_configure+0x9e>
 800bffc:	2020      	movs	r0, #32
 800bffe:	e7b6      	b.n	800bf6e <gpio_stm32_configure+0xb6>

0800c000 <gpio_stm32_config>:
{
 800c000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c002:	b083      	sub	sp, #12
 800c004:	4607      	mov	r7, r0
 800c006:	460d      	mov	r5, r1
 800c008:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800c00a:	a901      	add	r1, sp, #4
 800c00c:	4610      	mov	r0, r2
 800c00e:	f7ff febf 	bl	800bd90 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800c012:	4606      	mov	r6, r0
 800c014:	b970      	cbnz	r0, 800c034 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800c016:	f414 7f00 	tst.w	r4, #512	; 0x200
 800c01a:	d005      	beq.n	800c028 <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800c01c:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800c020:	d10b      	bne.n	800c03a <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800c022:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800c026:	d10e      	bne.n	800c046 <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800c028:	2300      	movs	r3, #0
 800c02a:	9a01      	ldr	r2, [sp, #4]
 800c02c:	4629      	mov	r1, r5
 800c02e:	4638      	mov	r0, r7
 800c030:	f7ff ff42 	bl	800beb8 <gpio_stm32_configure>
}
 800c034:	4630      	mov	r0, r6
 800c036:	b003      	add	sp, #12
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c03a:	2101      	movs	r1, #1
 800c03c:	40a9      	lsls	r1, r5
 800c03e:	4638      	mov	r0, r7
 800c040:	f7ff fef0 	bl	800be24 <gpio_stm32_port_set_bits_raw>
 800c044:	e7f0      	b.n	800c028 <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800c046:	2101      	movs	r1, #1
 800c048:	40a9      	lsls	r1, r5
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7ff feef 	bl	800be2e <gpio_stm32_port_clear_bits_raw>
 800c050:	e7ea      	b.n	800c028 <gpio_stm32_config+0x28>

0800c052 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800c052:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800c054:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 800c056:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 800c058:	2101      	movs	r1, #1
 800c05a:	f7f8 fe99 	bl	8004d90 <gpio_stm32_clock_request>
#endif
}
 800c05e:	bd08      	pop	{r3, pc}

0800c060 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800c060:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800c062:	b91b      	cbnz	r3, 800c06c <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800c064:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c066:	b91b      	cbnz	r3, 800c070 <spi_stm32_transfer_ongoing+0x10>
 800c068:	2000      	movs	r0, #0
 800c06a:	4770      	bx	lr
 800c06c:	2001      	movs	r0, #1
 800c06e:	4770      	bx	lr
 800c070:	2001      	movs	r0, #1
}
 800c072:	4770      	bx	lr

0800c074 <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c074:	6883      	ldr	r3, [r0, #8]
 800c076:	f013 0f02 	tst.w	r3, #2
 800c07a:	d0fb      	beq.n	800c074 <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c07c:	680b      	ldr	r3, [r1, #0]
 800c07e:	889b      	ldrh	r3, [r3, #4]
 800c080:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c084:	2b08      	cmp	r3, #8
 800c086:	d01f      	beq.n	800c0c8 <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c088:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d044      	beq.n	800c118 <spi_stm32_shift_m+0xa4>
 800c08e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c090:	2a00      	cmp	r2, #0
 800c092:	d143      	bne.n	800c11c <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800c094:	2a00      	cmp	r2, #0
 800c096:	d043      	beq.n	800c120 <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800c098:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800c09a:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c09c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d047      	beq.n	800c132 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d13f      	bne.n	800c12a <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 800c0aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d037      	beq.n	800c124 <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 800c0b4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c0b6:	f103 0208 	add.w	r2, r3, #8
 800c0ba:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c0bc:	689a      	ldr	r2, [r3, #8]
 800c0be:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	085b      	lsrs	r3, r3, #1
 800c0c4:	650b      	str	r3, [r1, #80]	; 0x50
 800c0c6:	e034      	b.n	800c132 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c0c8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c0ca:	b1bb      	cbz	r3, 800c0fc <spi_stm32_shift_m+0x88>
 800c0cc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c0ce:	b9ba      	cbnz	r2, 800c100 <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800c0d0:	b1c2      	cbz	r2, 800c104 <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800c0d2:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800c0d4:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 800c0d6:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c0d8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c0da:	b353      	cbz	r3, 800c132 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c0e0:	b9ab      	cbnz	r3, 800c10e <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 800c0e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c0e8:	b173      	cbz	r3, 800c108 <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 800c0ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c0ec:	f103 0208 	add.w	r2, r3, #8
 800c0f0:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	650b      	str	r3, [r1, #80]	; 0x50
 800c0fa:	e01a      	b.n	800c132 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	e7e7      	b.n	800c0d0 <spi_stm32_shift_m+0x5c>
 800c100:	2201      	movs	r2, #1
 800c102:	e7e5      	b.n	800c0d0 <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800c104:	2300      	movs	r3, #0
 800c106:	e7e5      	b.n	800c0d4 <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 800c108:	2300      	movs	r3, #0
 800c10a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c10c:	e011      	b.n	800c132 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800c10e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c110:	b17b      	cbz	r3, 800c132 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800c112:	3301      	adds	r3, #1
 800c114:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c116:	e00c      	b.n	800c132 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c118:	2200      	movs	r2, #0
 800c11a:	e7bb      	b.n	800c094 <spi_stm32_shift_m+0x20>
 800c11c:	2201      	movs	r2, #1
 800c11e:	e7b9      	b.n	800c094 <spi_stm32_shift_m+0x20>
 800c120:	2300      	movs	r3, #0
 800c122:	e7ba      	b.n	800c09a <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 800c124:	2300      	movs	r3, #0
 800c126:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c128:	e003      	b.n	800c132 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800c12a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c12c:	b10b      	cbz	r3, 800c132 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800c12e:	3302      	adds	r3, #2
 800c130:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c132:	6883      	ldr	r3, [r0, #8]
 800c134:	f013 0f01 	tst.w	r3, #1
 800c138:	d0fb      	beq.n	800c132 <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c13a:	680b      	ldr	r3, [r1, #0]
 800c13c:	889b      	ldrh	r3, [r3, #4]
 800c13e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c142:	2b08      	cmp	r3, #8
 800c144:	d01f      	beq.n	800c186 <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 800c146:	68c3      	ldr	r3, [r0, #12]
 800c148:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800c14a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	d040      	beq.n	800c1d2 <spi_stm32_shift_m+0x15e>
 800c150:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c152:	2800      	cmp	r0, #0
 800c154:	d13f      	bne.n	800c1d6 <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800c156:	b100      	cbz	r0, 800c15a <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800c158:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800c15a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d043      	beq.n	800c1e8 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800c160:	3b01      	subs	r3, #1
 800c162:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c164:	2b00      	cmp	r3, #0
 800c166:	d13b      	bne.n	800c1e0 <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 800c168:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c16a:	3b01      	subs	r3, #1
 800c16c:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d033      	beq.n	800c1da <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 800c172:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c174:	f103 0208 	add.w	r2, r3, #8
 800c178:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c17a:	689a      	ldr	r2, [r3, #8]
 800c17c:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	085b      	lsrs	r3, r3, #1
 800c182:	658b      	str	r3, [r1, #88]	; 0x58
 800c184:	4770      	bx	lr
  return (*((__IO uint8_t *)&SPIx->DR));
 800c186:	7b03      	ldrb	r3, [r0, #12]
 800c188:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800c18a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800c18c:	b1aa      	cbz	r2, 800c1ba <spi_stm32_shift_m+0x146>
 800c18e:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c190:	b9a8      	cbnz	r0, 800c1be <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800c192:	b100      	cbz	r0, 800c196 <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800c194:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800c196:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c198:	b333      	cbz	r3, 800c1e8 <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800c19a:	3b01      	subs	r3, #1
 800c19c:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c19e:	b99b      	cbnz	r3, 800c1c8 <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 800c1a0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c1a6:	b163      	cbz	r3, 800c1c2 <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 800c1a8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c1aa:	f103 0208 	add.w	r2, r3, #8
 800c1ae:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c1b0:	689a      	ldr	r2, [r3, #8]
 800c1b2:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	658b      	str	r3, [r1, #88]	; 0x58
 800c1b8:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e7e9      	b.n	800c192 <spi_stm32_shift_m+0x11e>
 800c1be:	2001      	movs	r0, #1
 800c1c0:	e7e7      	b.n	800c192 <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	654b      	str	r3, [r1, #84]	; 0x54
 800c1c6:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c1c8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c1ca:	b16b      	cbz	r3, 800c1e8 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	654b      	str	r3, [r1, #84]	; 0x54
 800c1d0:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	e7bf      	b.n	800c156 <spi_stm32_shift_m+0xe2>
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	e7bd      	b.n	800c156 <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	654b      	str	r3, [r1, #84]	; 0x54
 800c1de:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c1e0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c1e2:	b10b      	cbz	r3, 800c1e8 <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800c1e4:	3302      	adds	r3, #2
 800c1e6:	654b      	str	r3, [r1, #84]	; 0x54
}
 800c1e8:	4770      	bx	lr

0800c1ea <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c1ea:	6883      	ldr	r3, [r0, #8]
 800c1ec:	f013 0f02 	tst.w	r3, #2
 800c1f0:	d045      	beq.n	800c27e <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 800c1f2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d042      	beq.n	800c27e <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c1f8:	680b      	ldr	r3, [r1, #0]
 800c1fa:	889b      	ldrh	r3, [r3, #4]
 800c1fc:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c200:	2b08      	cmp	r3, #8
 800c202:	d017      	beq.n	800c234 <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800c204:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c206:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800c208:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c20a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d03a      	beq.n	800c286 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800c210:	3b01      	subs	r3, #1
 800c212:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c214:	2b00      	cmp	r3, #0
 800c216:	d12d      	bne.n	800c274 <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 800c218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c21a:	3b01      	subs	r3, #1
 800c21c:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c21e:	b333      	cbz	r3, 800c26e <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 800c220:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c222:	f103 0208 	add.w	r2, r3, #8
 800c226:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	085b      	lsrs	r3, r3, #1
 800c230:	650b      	str	r3, [r1, #80]	; 0x50
 800c232:	e028      	b.n	800c286 <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800c234:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c236:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800c238:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c23a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c23c:	b31b      	cbz	r3, 800c286 <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800c23e:	3b01      	subs	r3, #1
 800c240:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c242:	b97b      	cbnz	r3, 800c264 <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 800c244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c246:	3b01      	subs	r3, #1
 800c248:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c24a:	b143      	cbz	r3, 800c25e <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 800c24c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c24e:	f103 0208 	add.w	r2, r3, #8
 800c252:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	650b      	str	r3, [r1, #80]	; 0x50
 800c25c:	e013      	b.n	800c286 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c262:	e010      	b.n	800c286 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800c264:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c266:	b173      	cbz	r3, 800c286 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800c268:	3301      	adds	r3, #1
 800c26a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c26c:	e00b      	b.n	800c286 <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800c26e:	2300      	movs	r3, #0
 800c270:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c272:	e008      	b.n	800c286 <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800c274:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c276:	b133      	cbz	r3, 800c286 <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800c278:	3302      	adds	r3, #2
 800c27a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c27c:	e003      	b.n	800c286 <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800c27e:	6843      	ldr	r3, [r0, #4]
 800c280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c284:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c286:	6883      	ldr	r3, [r0, #8]
 800c288:	f013 0f01 	tst.w	r3, #1
 800c28c:	d04a      	beq.n	800c324 <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800c28e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c290:	b30b      	cbz	r3, 800c2d6 <spi_stm32_shift_s+0xec>
 800c292:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800c294:	bb0a      	cbnz	r2, 800c2da <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 800c296:	2a00      	cmp	r2, #0
 800c298:	d044      	beq.n	800c324 <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c29a:	680a      	ldr	r2, [r1, #0]
 800c29c:	8892      	ldrh	r2, [r2, #4]
 800c29e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800c2a2:	2a08      	cmp	r2, #8
 800c2a4:	d01b      	beq.n	800c2de <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 800c2a6:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800c2a8:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800c2aa:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d039      	beq.n	800c324 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d131      	bne.n	800c31c <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 800c2b8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d029      	beq.n	800c316 <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 800c2c2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c2c4:	f103 0208 	add.w	r2, r3, #8
 800c2c8:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c2ca:	689a      	ldr	r2, [r3, #8]
 800c2cc:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	085b      	lsrs	r3, r3, #1
 800c2d2:	658b      	str	r3, [r1, #88]	; 0x58
 800c2d4:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e7dd      	b.n	800c296 <spi_stm32_shift_s+0xac>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	e7db      	b.n	800c296 <spi_stm32_shift_s+0xac>
  return (*((__IO uint8_t *)&SPIx->DR));
 800c2de:	7b02      	ldrb	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800c2e0:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800c2e2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c2e4:	b1f3      	cbz	r3, 800c324 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c2ea:	b97b      	cbnz	r3, 800c30c <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 800c2ec:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c2f2:	b143      	cbz	r3, 800c306 <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 800c2f4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c2f6:	f103 0208 	add.w	r2, r3, #8
 800c2fa:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	658b      	str	r3, [r1, #88]	; 0x58
 800c304:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	654b      	str	r3, [r1, #84]	; 0x54
 800c30a:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c30c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c30e:	b14b      	cbz	r3, 800c324 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800c310:	3301      	adds	r3, #1
 800c312:	654b      	str	r3, [r1, #84]	; 0x54
 800c314:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	654b      	str	r3, [r1, #84]	; 0x54
 800c31a:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c31c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c31e:	b10b      	cbz	r3, 800c324 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800c320:	3302      	adds	r3, #2
 800c322:	654b      	str	r3, [r1, #84]	; 0x54
}
 800c324:	4770      	bx	lr

0800c326 <spi_stm32_shift_frames>:
{
 800c326:	b510      	push	{r4, lr}
 800c328:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800c32a:	680b      	ldr	r3, [r1, #0]
 800c32c:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800c32e:	f013 0f01 	tst.w	r3, #1
 800c332:	d105      	bne.n	800c340 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800c334:	f7ff fe9e 	bl	800c074 <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800c338:	4620      	mov	r0, r4
 800c33a:	f7f8 fe87 	bl	800504c <spi_stm32_get_err>
}
 800c33e:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800c340:	f7ff ff53 	bl	800c1ea <spi_stm32_shift_s>
 800c344:	e7f8      	b.n	800c338 <spi_stm32_shift_frames+0x12>

0800c346 <spi_stm32_cs_control>:
{
 800c346:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800c348:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d034      	beq.n	800c3ba <spi_stm32_cs_control+0x74>
 800c350:	689a      	ldr	r2, [r3, #8]
 800c352:	2a00      	cmp	r2, #0
 800c354:	d031      	beq.n	800c3ba <spi_stm32_cs_control+0x74>
 800c356:	6810      	ldr	r0, [r2, #0]
 800c358:	2800      	cmp	r0, #0
 800c35a:	d02e      	beq.n	800c3ba <spi_stm32_cs_control+0x74>
		if (on) {
 800c35c:	b9c9      	cbnz	r1, 800c392 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800c35e:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800c360:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c364:	d129      	bne.n	800c3ba <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800c366:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800c368:	f7fc ff6e 	bl	8009248 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	6818      	ldr	r0, [r3, #0]
 800c372:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800c374:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	2301      	movs	r3, #1
 800c37a:	408b      	lsls	r3, r1
 800c37c:	421a      	tst	r2, r3
 800c37e:	d126      	bne.n	800c3ce <spi_stm32_cs_control+0x88>
 800c380:	2300      	movs	r3, #0
	if (value != 0)	{
 800c382:	b333      	cbz	r3, 800c3d2 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c384:	2301      	movs	r3, #1
 800c386:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c38a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	4798      	blx	r3
 800c390:	e013      	b.n	800c3ba <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c392:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 800c394:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	2301      	movs	r3, #1
 800c39a:	408b      	lsls	r3, r1
 800c39c:	421a      	tst	r2, r3
 800c39e:	d10d      	bne.n	800c3bc <spi_stm32_cs_control+0x76>
 800c3a0:	2301      	movs	r3, #1
	if (value != 0)	{
 800c3a2:	b16b      	cbz	r3, 800c3c0 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c3aa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	6858      	ldr	r0, [r3, #4]
 800c3b6:	f7fc ff47 	bl	8009248 <z_impl_k_busy_wait>
}
 800c3ba:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e7f0      	b.n	800c3a2 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c3c6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c3c8:	691b      	ldr	r3, [r3, #16]
 800c3ca:	4798      	blx	r3
 800c3cc:	e7f0      	b.n	800c3b0 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e7d7      	b.n	800c382 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c3d8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	4798      	blx	r3
 800c3de:	e7ec      	b.n	800c3ba <spi_stm32_cs_control+0x74>

0800c3e0 <spi_stm32_complete>:
{
 800c3e0:	b510      	push	{r4, lr}
 800c3e2:	b082      	sub	sp, #8
	const struct spi_stm32_config *cfg = dev->config;
 800c3e4:	6843      	ldr	r3, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800c3e6:	689c      	ldr	r4, [r3, #8]
	spi_stm32_cs_control(dev, false);
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	f7ff ffac 	bl	800c346 <spi_stm32_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800c3f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3f8:	d010      	beq.n	800c41c <spi_stm32_complete+0x3c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	f013 0f20 	tst.w	r3, #32
 800c400:	d006      	beq.n	800c410 <spi_stm32_complete+0x30>
  tmpreg_sr = SPIx->SR;
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800c406:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c40e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c416:	6023      	str	r3, [r4, #0]
}
 800c418:	b002      	add	sp, #8
 800c41a:	bd10      	pop	{r4, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c422:	d1fb      	bne.n	800c41c <spi_stm32_complete+0x3c>
 800c424:	e7e9      	b.n	800c3fa <spi_stm32_complete+0x1a>

0800c426 <transceive>:
{
 800c426:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c42a:	4605      	mov	r5, r0
 800c42c:	460e      	mov	r6, r1
 800c42e:	4698      	mov	r8, r3
 800c430:	f89d 1020 	ldrb.w	r1, [sp, #32]
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800c434:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800c436:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800c438:	689f      	ldr	r7, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800c43a:	4691      	mov	r9, r2
 800c43c:	b30a      	cbz	r2, 800c482 <transceive+0x5c>
	if (asynchronous) {
 800c43e:	2900      	cmp	r1, #0
 800c440:	d16b      	bne.n	800c51a <transceive+0xf4>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800c442:	88b3      	ldrh	r3, [r6, #4]
 800c444:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c448:	d004      	beq.n	800c454 <transceive+0x2e>
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	b913      	cbnz	r3, 800c454 <transceive+0x2e>
		(ctx->owner == spi_cfg)) {
 800c44e:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800c450:	429e      	cmp	r6, r3
 800c452:	d008      	beq.n	800c466 <transceive+0x40>
	k_sem_take(&ctx->lock, K_FOREVER);
 800c454:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
 800c458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c45c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c460:	f7fb fffc 	bl	800845c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800c464:	6066      	str	r6, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 800c466:	4631      	mov	r1, r6
 800c468:	4628      	mov	r0, r5
 800c46a:	f7f8 fcb3 	bl	8004dd4 <spi_stm32_configure>
	if (ret) {
 800c46e:	4606      	mov	r6, r0
 800c470:	b160      	cbz	r0, 800c48c <transceive+0x66>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	889b      	ldrh	r3, [r3, #4]
 800c476:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c47a:	d047      	beq.n	800c50c <transceive+0xe6>
}
 800c47c:	4630      	mov	r0, r6
 800c47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 800c482:	f1b8 0f00 	cmp.w	r8, #0
 800c486:	d1da      	bne.n	800c43e <transceive+0x18>
		return 0;
 800c488:	2600      	movs	r6, #0
 800c48a:	e7f7      	b.n	800c47c <transceive+0x56>
	if (tx_bufs) {
 800c48c:	f1b9 0f00 	cmp.w	r9, #0
 800c490:	d030      	beq.n	800c4f4 <transceive+0xce>
		ctx->current_tx = tx_bufs->buffers;
 800c492:	f8d9 3000 	ldr.w	r3, [r9]
 800c496:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 800c498:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c49c:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
 800c4a6:	f1b8 0f00 	cmp.w	r8, #0
 800c4aa:	d029      	beq.n	800c500 <transceive+0xda>
		ctx->current_rx = rx_bufs->buffers;
 800c4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b0:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 800c4b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c4b6:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63a3      	str	r3, [r4, #56]	; 0x38
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ca:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff ff39 	bl	800c346 <spi_stm32_cs_control>
		ret = spi_stm32_shift_frames(spi, data);
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	f7ff ff25 	bl	800c326 <spi_stm32_shift_frames>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800c4dc:	4606      	mov	r6, r0
 800c4de:	b920      	cbnz	r0, 800c4ea <transceive+0xc4>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7ff fdbd 	bl	800c060 <spi_stm32_transfer_ongoing>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d1f4      	bne.n	800c4d4 <transceive+0xae>
	spi_stm32_complete(dev, ret);
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7ff ff77 	bl	800c3e0 <spi_stm32_complete>
 800c4f2:	e7be      	b.n	800c472 <transceive+0x4c>
		ctx->current_tx = NULL;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 800c4f8:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 800c4fa:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 800c4fc:	6523      	str	r3, [r4, #80]	; 0x50
 800c4fe:	e7d2      	b.n	800c4a6 <transceive+0x80>
		ctx->current_rx = NULL;
 800c500:	2300      	movs	r3, #0
 800c502:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800c504:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 800c506:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 800c508:	65a3      	str	r3, [r4, #88]	; 0x58
 800c50a:	e7d9      	b.n	800c4c0 <transceive+0x9a>
		ctx->owner = NULL;
 800c50c:	2300      	movs	r3, #0
 800c50e:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800c510:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800c514:	f7fb ff7a 	bl	800840c <z_impl_k_sem_give>
}
 800c518:	e7b0      	b.n	800c47c <transceive+0x56>
		return -ENOTSUP;
 800c51a:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800c51e:	e7ad      	b.n	800c47c <transceive+0x56>

0800c520 <spi_stm32_transceive>:
{
 800c520:	b510      	push	{r4, lr}
 800c522:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800c524:	2400      	movs	r4, #0
 800c526:	9401      	str	r4, [sp, #4]
 800c528:	9400      	str	r4, [sp, #0]
 800c52a:	f7ff ff7c 	bl	800c426 <transceive>
}
 800c52e:	b002      	add	sp, #8
 800c530:	bd10      	pop	{r4, pc}

0800c532 <spi_stm32_release>:
{
 800c532:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800c534:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	b1c3      	cbz	r3, 800c56c <spi_stm32_release+0x3a>
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	b1b3      	cbz	r3, 800c56c <spi_stm32_release+0x3a>
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	b1a2      	cbz	r2, 800c56c <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800c542:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800c544:	f7fc fe80 	bl	8009248 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c548:	6823      	ldr	r3, [r4, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800c550:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	2301      	movs	r3, #1
 800c556:	408b      	lsls	r3, r1
 800c558:	421a      	tst	r2, r3
 800c55a:	d10b      	bne.n	800c574 <spi_stm32_release+0x42>
 800c55c:	2300      	movs	r3, #0
	if (value != 0)	{
 800c55e:	b15b      	cbz	r3, 800c578 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c560:	2301      	movs	r3, #1
 800c562:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c566:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	4798      	blx	r3
 800c56c:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800c56e:	b153      	cbz	r3, 800c586 <spi_stm32_release+0x54>
}
 800c570:	2000      	movs	r0, #0
 800c572:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800c574:	2301      	movs	r3, #1
 800c576:	e7f2      	b.n	800c55e <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c578:	2301      	movs	r3, #1
 800c57a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c57e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800c584:	e7f2      	b.n	800c56c <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800c586:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800c588:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800c58c:	f7fb ff3e 	bl	800840c <z_impl_k_sem_give>
}
 800c590:	e7ee      	b.n	800c570 <spi_stm32_release+0x3e>

0800c592 <timer_work_handler>:
{
 800c592:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800c594:	f7f9 fc54 	bl	8005e40 <TimerIrqHandler>
}
 800c598:	bd08      	pop	{r3, pc}

0800c59a <RtcGetTimerValue>:
{
 800c59a:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800c59c:	f000 fde0 	bl	800d160 <z_impl_k_uptime_ticks>
 800c5a0:	220a      	movs	r2, #10
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f7f4 f98e 	bl	80008c4 <__aeabi_uldivmod>
}
 800c5a8:	bd08      	pop	{r3, pc}

0800c5aa <RtcGetMinimumTimeout>:
}
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	4770      	bx	lr

0800c5ae <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800c5ae:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800c5b0:	0f81      	lsrs	r1, r0, #30
 800c5b2:	0083      	lsls	r3, r0, #2
 800c5b4:	1818      	adds	r0, r3, r0
 800c5b6:	f141 0100 	adc.w	r1, r1, #0
 800c5ba:	1800      	adds	r0, r0, r0
 800c5bc:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800c5be:	f7fc fc67 	bl	8008e90 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800c5c2:	bd08      	pop	{r3, pc}

0800c5c4 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800c5c4:	4770      	bx	lr

0800c5c6 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800c5c6:	4770      	bx	lr

0800c5c8 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800c5c8:	f04f 0210 	mov.w	r2, #16
 800c5cc:	f3ef 8311 	mrs	r3, BASEPRI
 800c5d0:	f382 8812 	msr	BASEPRI_MAX, r2
 800c5d4:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800c5d8:	6003      	str	r3, [r0, #0]
}
 800c5da:	4770      	bx	lr

0800c5dc <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800c5dc:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
}
 800c5e6:	4770      	bx	lr

0800c5e8 <clamp_int8>:
	if (x < min) {
 800c5e8:	4288      	cmp	r0, r1
 800c5ea:	db03      	blt.n	800c5f4 <clamp_int8+0xc>
	} else if (x > max) {
 800c5ec:	4290      	cmp	r0, r2
 800c5ee:	dd02      	ble.n	800c5f6 <clamp_int8+0xe>
		return max;
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	4770      	bx	lr
		return min;
 800c5f4:	4608      	mov	r0, r1
}
 800c5f6:	4770      	bx	lr

0800c5f8 <SX1276CheckRfFrequency>:
}
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	4770      	bx	lr

0800c5fc <sx127x_antenna_configure>:
}
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	4770      	bx	lr

0800c600 <SX1276GetBoardTcxoWakeupTime>:
}
 800c600:	2000      	movs	r0, #0
 800c602:	4770      	bx	lr

0800c604 <SX1276SetAntSwLowPower>:
}
 800c604:	4770      	bx	lr

0800c606 <SX1276SetBoardTcxo>:
}
 800c606:	4770      	bx	lr

0800c608 <SX1276SetAntSw>:
}
 800c608:	4770      	bx	lr

0800c60a <sx127x_read>:
{
 800c60a:	b508      	push	{r3, lr}
 800c60c:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800c60e:	460a      	mov	r2, r1
 800c610:	2100      	movs	r1, #0
 800c612:	f7f9 f8a1 	bl	8005758 <sx127x_transceive>
}
 800c616:	bd08      	pop	{r3, pc}

0800c618 <sx127x_write>:
{
 800c618:	b508      	push	{r3, lr}
 800c61a:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800c61c:	460a      	mov	r2, r1
 800c61e:	2101      	movs	r1, #1
 800c620:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800c624:	f7f9 f898 	bl	8005758 <sx127x_transceive>
}
 800c628:	bd08      	pop	{r3, pc}

0800c62a <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c62a:	e004      	b.n	800c636 <memcpy1+0xc>
    {
        *dst++ = *src++;
 800c62c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c630:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800c634:	461a      	mov	r2, r3
 800c636:	1e53      	subs	r3, r2, #1
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2a00      	cmp	r2, #0
 800c63c:	d1f6      	bne.n	800c62c <memcpy1+0x2>
    }
}
 800c63e:	4770      	bx	lr

0800c640 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800c644:	f7ff ffb1 	bl	800c5aa <RtcGetMinimumTimeout>
 800c648:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800c64a:	2301      	movs	r3, #1
 800c64c:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800c64e:	6826      	ldr	r6, [r4, #0]
 800c650:	f7f8 fdac 	bl	80051ac <RtcGetTimerElapsedTime>
 800c654:	4428      	add	r0, r5
 800c656:	4286      	cmp	r6, r0
 800c658:	d303      	bcc.n	800c662 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800c65a:	6820      	ldr	r0, [r4, #0]
 800c65c:	f7f8 fdbc 	bl	80051d8 <RtcSetAlarm>
}
 800c660:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800c662:	f7f8 fda3 	bl	80051ac <RtcGetTimerElapsedTime>
 800c666:	4405      	add	r5, r0
 800c668:	6025      	str	r5, [r4, #0]
 800c66a:	e7f6      	b.n	800c65a <TimerSetTimeout+0x1a>

0800c66c <TimerInit>:
    obj->Timestamp = 0;
 800c66c:	2300      	movs	r3, #0
 800c66e:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800c670:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800c672:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800c674:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800c676:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800c678:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800c67a:	6143      	str	r3, [r0, #20]
}
 800c67c:	4770      	bx	lr

0800c67e <TimerSetValue>:
{
 800c67e:	b538      	push	{r3, r4, r5, lr}
 800c680:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800c682:	4608      	mov	r0, r1
 800c684:	f7ff ff9e 	bl	800c5c4 <RtcMs2Tick>
 800c688:	4605      	mov	r5, r0
    TimerStop( obj );
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7f9 fc1c 	bl	8005ec8 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800c690:	f7ff ff8b 	bl	800c5aa <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800c694:	4285      	cmp	r5, r0
 800c696:	d300      	bcc.n	800c69a <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800c698:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800c69a:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800c69c:	6060      	str	r0, [r4, #4]
}
 800c69e:	bd38      	pop	{r3, r4, r5, pc}

0800c6a0 <TimerGetCurrentTime>:
{
 800c6a0:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800c6a2:	f7ff ff7a 	bl	800c59a <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800c6a6:	f7ff ff8e 	bl	800c5c6 <RtcTick2Ms>
}
 800c6aa:	bd08      	pop	{r3, pc}

0800c6ac <TimerGetElapsedTime>:
{
 800c6ac:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	b908      	cbnz	r0, 800c6b6 <TimerGetElapsedTime+0xa>
}
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800c6b6:	f7ff ff70 	bl	800c59a <RtcGetTimerValue>
 800c6ba:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f7ff ff81 	bl	800c5c4 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800c6c2:	1a28      	subs	r0, r5, r0
 800c6c4:	f7ff ff7f 	bl	800c5c6 <RtcTick2Ms>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	e7f2      	b.n	800c6b2 <TimerGetElapsedTime+0x6>

0800c6cc <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800c6cc:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800c6ce:	f7ff ff6e 	bl	800c5ae <DelayMsMcu>
}
 800c6d2:	bd08      	pop	{r3, pc}

0800c6d4 <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c6d4:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c6d6:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c6da:	b2c3      	uxtb	r3, r0
 800c6dc:	fb02 f303 	mul.w	r3, r2, r3
 800c6e0:	3380      	adds	r3, #128	; 0x80
 800c6e2:	0a1b      	lsrs	r3, r3, #8
}
 800c6e4:	fb02 3001 	mla	r0, r2, r1, r3
 800c6e8:	4770      	bx	lr

0800c6ea <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800c6ea:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c6ec:	b941      	cbnz	r1, 800c700 <SX1276GetGfskTimeOnAirNumerator+0x16>
 800c6ee:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800c6f0:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c6f2:	b13b      	cbz	r3, 800c704 <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800c6f4:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800c6f6:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800c6f8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800c6fc:	3018      	adds	r0, #24
 800c6fe:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c700:	2100      	movs	r1, #0
 800c702:	e7f5      	b.n	800c6f0 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c704:	2300      	movs	r3, #0
 800c706:	e7f6      	b.n	800c6f6 <SX1276GetGfskTimeOnAirNumerator+0xc>

0800c708 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800c70e:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800c712:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c714:	f1a1 0c05 	sub.w	ip, r1, #5
 800c718:	f1bc 0f01 	cmp.w	ip, #1
 800c71c:	d932      	bls.n	800c784 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c71e:	b918      	cbnz	r0, 800c728 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800c720:	f1a1 060b 	sub.w	r6, r1, #11
 800c724:	2e01      	cmp	r6, #1
 800c726:	d935      	bls.n	800c794 <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800c728:	2801      	cmp	r0, #1
 800c72a:	d02f      	beq.n	800c78c <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800c72c:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c72e:	f89d e014 	ldrb.w	lr, [sp, #20]
 800c732:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800c736:	b38d      	cbz	r5, 800c79c <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800c738:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c73c:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800c73e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800c740:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800c744:	b36c      	cbz	r4, 800c7a2 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800c746:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800c74a:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800c74c:	2906      	cmp	r1, #6
 800c74e:	d904      	bls.n	800c75a <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800c750:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800c754:	b10e      	cbz	r6, 800c75a <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800c756:	1e88      	subs	r0, r1, #2
 800c758:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800c75a:	f1bc 0f00 	cmp.w	ip, #0
 800c75e:	db23      	blt.n	800c7a8 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c760:	4484      	add	ip, r0
 800c762:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c766:	fb9c fcf0 	sdiv	ip, ip, r0
 800c76a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800c76e:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800c772:	2906      	cmp	r1, #6
 800c774:	d801      	bhi.n	800c77a <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800c776:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c77a:	0080      	lsls	r0, r0, #2
 800c77c:	3001      	adds	r0, #1
 800c77e:	3902      	subs	r1, #2
}
 800c780:	4088      	lsls	r0, r1
 800c782:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800c784:	2b0b      	cmp	r3, #11
 800c786:	d8ca      	bhi.n	800c71e <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800c788:	230c      	movs	r3, #12
 800c78a:	e7c8      	b.n	800c71e <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c78c:	290c      	cmp	r1, #12
 800c78e:	d003      	beq.n	800c798 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800c790:	2600      	movs	r6, #0
 800c792:	e7cc      	b.n	800c72e <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800c794:	2601      	movs	r6, #1
 800c796:	e7ca      	b.n	800c72e <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800c798:	2601      	movs	r6, #1
 800c79a:	e7c8      	b.n	800c72e <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800c79c:	f04f 0c00 	mov.w	ip, #0
 800c7a0:	e7cc      	b.n	800c73c <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800c7a2:	f04f 0c14 	mov.w	ip, #20
 800c7a6:	e7d0      	b.n	800c74a <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800c7a8:	f04f 0c00 	mov.w	ip, #0
 800c7ac:	e7d8      	b.n	800c760 <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800c7ae <SX1276ReadFifo>:
{
 800c7ae:	b508      	push	{r3, lr}
 800c7b0:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	f7f9 f913 	bl	80059e0 <SX1276ReadBuffer>
}
 800c7ba:	bd08      	pop	{r3, pc}

0800c7bc <SX1276WriteFifo>:
{
 800c7bc:	b508      	push	{r3, lr}
 800c7be:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800c7c0:	4601      	mov	r1, r0
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f7f9 fa10 	bl	8005be8 <SX1276WriteBuffer>
}
 800c7c8:	bd08      	pop	{r3, pc}

0800c7ca <SX1276GetTimeOnAir>:
{
 800c7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	460e      	mov	r6, r1
 800c7d0:	4615      	mov	r5, r2
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800c7d8:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800c7dc:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800c7e0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800c7e4:	b148      	cbz	r0, 800c7fa <SX1276GetTimeOnAir+0x30>
 800c7e6:	2801      	cmp	r0, #1
 800c7e8:	d010      	beq.n	800c80c <SX1276GetTimeOnAir+0x42>
 800c7ea:	2501      	movs	r5, #1
 800c7ec:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c7ee:	1960      	adds	r0, r4, r5
 800c7f0:	3801      	subs	r0, #1
}
 800c7f2:	fbb0 f0f5 	udiv	r0, r0, r5
 800c7f6:	b005      	add	sp, #20
 800c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c7fa:	463a      	mov	r2, r7
 800c7fc:	4660      	mov	r0, ip
 800c7fe:	f7ff ff74 	bl	800c6ea <SX1276GetGfskTimeOnAirNumerator>
 800c802:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c806:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800c80a:	e7f0      	b.n	800c7ee <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	9701      	str	r7, [sp, #4]
 800c810:	9100      	str	r1, [sp, #0]
 800c812:	4663      	mov	r3, ip
 800c814:	4629      	mov	r1, r5
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ff76 	bl	800c708 <SX1276GetLoRaTimeOnAirNumerator>
 800c81c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c820:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800c824:	4630      	mov	r0, r6
 800c826:	f7f9 fbcb 	bl	8005fc0 <SX1276GetLoRaBandwidthInHz>
 800c82a:	4605      	mov	r5, r0
        break;
 800c82c:	e7df      	b.n	800c7ee <SX1276GetTimeOnAir+0x24>

0800c82e <SX1276Write>:
{
 800c82e:	b500      	push	{lr}
 800c830:	b083      	sub	sp, #12
 800c832:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800c836:	2201      	movs	r2, #1
 800c838:	f10d 0107 	add.w	r1, sp, #7
 800c83c:	f7f9 f9d4 	bl	8005be8 <SX1276WriteBuffer>
}
 800c840:	b003      	add	sp, #12
 800c842:	f85d fb04 	ldr.w	pc, [sp], #4

0800c846 <SX1276Read>:
{
 800c846:	b500      	push	{lr}
 800c848:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800c84a:	2201      	movs	r2, #1
 800c84c:	f10d 0107 	add.w	r1, sp, #7
 800c850:	f7f9 f8c6 	bl	80059e0 <SX1276ReadBuffer>
}
 800c854:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c858:	b003      	add	sp, #12
 800c85a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c85e <SX1276SetOpMode>:
{
 800c85e:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800c860:	4604      	mov	r4, r0
 800c862:	b970      	cbnz	r0, 800c882 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800c864:	2001      	movs	r0, #1
 800c866:	f7ff fecd 	bl	800c604 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c86a:	2001      	movs	r0, #1
 800c86c:	f7ff ffeb 	bl	800c846 <SX1276Read>
 800c870:	b241      	sxtb	r1, r0
 800c872:	f021 0107 	bic.w	r1, r1, #7
 800c876:	4321      	orrs	r1, r4
 800c878:	b2c9      	uxtb	r1, r1
 800c87a:	2001      	movs	r0, #1
 800c87c:	f7ff ffd7 	bl	800c82e <SX1276Write>
}
 800c880:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800c882:	2001      	movs	r0, #1
 800c884:	f7ff febf 	bl	800c606 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800c888:	2000      	movs	r0, #0
 800c88a:	f7ff febb 	bl	800c604 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff feba 	bl	800c608 <SX1276SetAntSw>
 800c894:	e7e9      	b.n	800c86a <SX1276SetOpMode+0xc>

0800c896 <SX1276IsChannelFree>:
{
 800c896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c898:	4607      	mov	r7, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	4616      	mov	r6, r2
 800c89e:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800c8a0:	f7f9 fedc 	bl	800665c <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f7fa f96f 	bl	8006b88 <SX1276SetModem>
    SX1276SetChannel( freq );
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f7f9 fbb2 	bl	8006014 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7f9 fb5d 	bl	8005f70 <GetFskBandwidthRegValue>
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4601      	mov	r1, r0
 800c8ba:	2012      	movs	r0, #18
 800c8bc:	f7ff ffb7 	bl	800c82e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	2013      	movs	r0, #19
 800c8c4:	f7ff ffb3 	bl	800c82e <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800c8c8:	2005      	movs	r0, #5
 800c8ca:	f7ff ffc8 	bl	800c85e <SX1276SetOpMode>
    DelayMs( 1 );
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	f7ff fefc 	bl	800c6cc <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800c8d4:	f7ff fee4 	bl	800c6a0 <TimerGetCurrentTime>
 800c8d8:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f7ff fee6 	bl	800c6ac <TimerGetElapsedTime>
 800c8e0:	42a8      	cmp	r0, r5
 800c8e2:	d206      	bcs.n	800c8f2 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f7fa f927 	bl	8006b38 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800c8ea:	42b0      	cmp	r0, r6
 800c8ec:	ddf5      	ble.n	800c8da <SX1276IsChannelFree+0x44>
            status = false;
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	e000      	b.n	800c8f4 <SX1276IsChannelFree+0x5e>
    bool status = true;
 800c8f2:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800c8f4:	f7f9 feb2 	bl	800665c <SX1276SetSleep>
}
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8fc <SX1276Random>:
{
 800c8fc:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800c8fe:	2001      	movs	r0, #1
 800c900:	f7fa f942 	bl	8006b88 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800c904:	21ff      	movs	r1, #255	; 0xff
 800c906:	2011      	movs	r0, #17
 800c908:	f7ff ff91 	bl	800c82e <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800c90c:	2005      	movs	r0, #5
 800c90e:	f7ff ffa6 	bl	800c85e <SX1276SetOpMode>
    uint32_t rnd = 0;
 800c912:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800c914:	462c      	mov	r4, r5
 800c916:	e00b      	b.n	800c930 <SX1276Random+0x34>
        DelayMs( 1 );
 800c918:	2001      	movs	r0, #1
 800c91a:	f7ff fed7 	bl	800c6cc <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800c91e:	202c      	movs	r0, #44	; 0x2c
 800c920:	f7ff ff91 	bl	800c846 <SX1276Read>
 800c924:	f000 0001 	and.w	r0, r0, #1
 800c928:	40a0      	lsls	r0, r4
 800c92a:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800c92c:	3401      	adds	r4, #1
 800c92e:	b2e4      	uxtb	r4, r4
 800c930:	2c1f      	cmp	r4, #31
 800c932:	d9f1      	bls.n	800c918 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800c934:	f7f9 fe92 	bl	800665c <SX1276SetSleep>
}
 800c938:	4628      	mov	r0, r5
 800c93a:	bd38      	pop	{r3, r4, r5, pc}

0800c93c <SX1276GetWakeupTime>:
{
 800c93c:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800c93e:	f7ff fe5f 	bl	800c600 <SX1276GetBoardTcxoWakeupTime>
}
 800c942:	3001      	adds	r0, #1
 800c944:	bd08      	pop	{r3, pc}

0800c946 <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800c946:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c94c:	6843      	ldr	r3, [r0, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800c956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c95a:	d02a      	beq.n	800c9b2 <uart_stm32_config_get+0x6c>
 800c95c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c960:	d129      	bne.n	800c9b6 <uart_stm32_config_get+0x70>
 800c962:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800c964:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c966:	6843      	ldr	r3, [r0, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800c970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c974:	d023      	beq.n	800c9be <uart_stm32_config_get+0x78>
 800c976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c97a:	d022      	beq.n	800c9c2 <uart_stm32_config_get+0x7c>
 800c97c:	b1eb      	cbz	r3, 800c9ba <uart_stm32_config_get+0x74>
		return UART_CFG_STOP_BITS_2;
 800c97e:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800c980:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c982:	6843      	ldr	r3, [r0, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800c986:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 800c98e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800c992:	d118      	bne.n	800c9c6 <uart_stm32_config_get+0x80>
		if (p == LL_USART_PARITY_NONE) {
 800c994:	b9e3      	cbnz	r3, 800c9d0 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_8;
 800c996:	2303      	movs	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800c998:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c99a:	6843      	ldr	r3, [r0, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800c99e:	695b      	ldr	r3, [r3, #20]
 800c9a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800c9a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9a8:	d014      	beq.n	800c9d4 <uart_stm32_config_get+0x8e>
	return UART_CFG_FLOW_CTRL_NONE;
 800c9aa:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800c9ac:	71cb      	strb	r3, [r1, #7]
}
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e7d6      	b.n	800c964 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e7d4      	b.n	800c964 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e7e0      	b.n	800c980 <uart_stm32_config_get+0x3a>
	switch (sb) {
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e7de      	b.n	800c980 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800c9c2:	2302      	movs	r3, #2
 800c9c4:	e7dc      	b.n	800c980 <uart_stm32_config_get+0x3a>
		if (p == LL_USART_PARITY_NONE) {
 800c9c6:	b90b      	cbnz	r3, 800c9cc <uart_stm32_config_get+0x86>
			return UART_CFG_DATA_BITS_9;
 800c9c8:	2304      	movs	r3, #4
 800c9ca:	e7e5      	b.n	800c998 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_8;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e7e3      	b.n	800c998 <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_7;
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e7e1      	b.n	800c998 <uart_stm32_config_get+0x52>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e7e9      	b.n	800c9ac <uart_stm32_config_get+0x66>

0800c9d8 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c9d8:	6843      	ldr	r3, [r0, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800c9dc:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800c9de:	f012 0f08 	tst.w	r2, #8
 800c9e2:	d012      	beq.n	800ca0a <uart_stm32_poll_in+0x32>
{
 800c9e4:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c9ea:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800c9ec:	685a      	ldr	r2, [r3, #4]
 800c9ee:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c9f0:	9a01      	ldr	r2, [sp, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800c9f2:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800c9f4:	f012 0f20 	tst.w	r2, #32
 800c9f8:	d004      	beq.n	800ca04 <uart_stm32_poll_in+0x2c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800c9fa:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800c9fc:	700b      	strb	r3, [r1, #0]
	return 0;
 800c9fe:	2000      	movs	r0, #0
}
 800ca00:	b002      	add	sp, #8
 800ca02:	4770      	bx	lr
		return -1;
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca08:	e7fa      	b.n	800ca00 <uart_stm32_poll_in+0x28>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800ca0a:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800ca0c:	f012 0f20 	tst.w	r2, #32
 800ca10:	d003      	beq.n	800ca1a <uart_stm32_poll_in+0x42>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800ca12:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800ca14:	700b      	strb	r3, [r1, #0]
	return 0;
 800ca16:	2000      	movs	r0, #0
 800ca18:	4770      	bx	lr
		return -1;
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ca1e:	4770      	bx	lr

0800ca20 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ca20:	6843      	ldr	r3, [r0, #4]
 800ca22:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800ca24:	6813      	ldr	r3, [r2, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800ca26:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca2a:	d0fb      	beq.n	800ca24 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800ca2c:	6051      	str	r1, [r2, #4]
}
 800ca2e:	4770      	bx	lr

0800ca30 <uart_stm32_err_check>:
{
 800ca30:	b084      	sub	sp, #16
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800ca32:	6843      	ldr	r3, [r0, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800ca36:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800ca38:	f010 0008 	ands.w	r0, r0, #8
 800ca3c:	d000      	beq.n	800ca40 <uart_stm32_err_check+0x10>
		err |= UART_ERROR_OVERRUN;
 800ca3e:	2001      	movs	r0, #1
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800ca40:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800ca42:	f012 0f01 	tst.w	r2, #1
 800ca46:	d001      	beq.n	800ca4c <uart_stm32_err_check+0x1c>
		err |= UART_ERROR_PARITY;
 800ca48:	f040 0002 	orr.w	r0, r0, #2
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800ca4c:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800ca4e:	f012 0f02 	tst.w	r2, #2
 800ca52:	d001      	beq.n	800ca58 <uart_stm32_err_check+0x28>
		err |= UART_ERROR_FRAMING;
 800ca54:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800ca58:	f010 0f01 	tst.w	r0, #1
 800ca5c:	d005      	beq.n	800ca6a <uart_stm32_err_check+0x3a>
  tmpreg = USARTx->SR;
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800ca62:	9a00      	ldr	r2, [sp, #0]
  tmpreg = USARTx->DR;
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800ca68:	9a00      	ldr	r2, [sp, #0]
	if (err & UART_ERROR_PARITY) {
 800ca6a:	f010 0f02 	tst.w	r0, #2
 800ca6e:	d005      	beq.n	800ca7c <uart_stm32_err_check+0x4c>
  tmpreg = USARTx->SR;
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800ca74:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800ca76:	685a      	ldr	r2, [r3, #4]
 800ca78:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800ca7a:	9a01      	ldr	r2, [sp, #4]
	if (err & UART_ERROR_FRAMING) {
 800ca7c:	f010 0f04 	tst.w	r0, #4
 800ca80:	d005      	beq.n	800ca8e <uart_stm32_err_check+0x5e>
  tmpreg = USARTx->SR;
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800ca86:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800ca8c:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800ca92:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 800ca98:	9b03      	ldr	r3, [sp, #12]
}
 800ca9a:	b004      	add	sp, #16
 800ca9c:	4770      	bx	lr

0800ca9e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800ca9e:	b148      	cbz	r0, 800cab4 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800caa0:	68c3      	ldr	r3, [r0, #12]
 800caa2:	8818      	ldrh	r0, [r3, #0]
 800caa4:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800caa8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800caac:	bf14      	ite	ne
 800caae:	2000      	movne	r0, #0
 800cab0:	2001      	moveq	r0, #1
 800cab2:	4770      	bx	lr
		return false;
 800cab4:	2000      	movs	r0, #0
}
 800cab6:	4770      	bx	lr

0800cab8 <arch_system_halt>:
	__asm__ volatile(
 800cab8:	f04f 0210 	mov.w	r2, #16
 800cabc:	f3ef 8311 	mrs	r3, BASEPRI
 800cac0:	f382 8812 	msr	BASEPRI_MAX, r2
 800cac4:	f3bf 8f6f 	isb	sy
	for (;;) {
 800cac8:	e7fe      	b.n	800cac8 <arch_system_halt+0x10>

0800caca <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800caca:	6902      	ldr	r2, [r0, #16]
 800cacc:	6943      	ldr	r3, [r0, #20]
 800cace:	431a      	orrs	r2, r3
 800cad0:	f012 0203 	ands.w	r2, r2, #3
 800cad4:	d10d      	bne.n	800caf2 <create_free_list+0x28>
	slab->free_list = NULL;
 800cad6:	2100      	movs	r1, #0
 800cad8:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800cada:	e005      	b.n	800cae8 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800cadc:	6981      	ldr	r1, [r0, #24]
 800cade:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800cae0:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800cae2:	6901      	ldr	r1, [r0, #16]
 800cae4:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800cae6:	3201      	adds	r2, #1
 800cae8:	68c1      	ldr	r1, [r0, #12]
 800caea:	4291      	cmp	r1, r2
 800caec:	d8f6      	bhi.n	800cadc <create_free_list+0x12>
	return 0;
 800caee:	2000      	movs	r0, #0
 800caf0:	4770      	bx	lr
		return -EINVAL;
 800caf2:	f06f 0015 	mvn.w	r0, #21
}
 800caf6:	4770      	bx	lr

0800caf8 <k_mem_slab_init>:
{
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 800cafc:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
 800cafe:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
 800cb00:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 800cb06:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
 800cb08:	f7ff ffdf 	bl	800caca <create_free_list>
	if (rc < 0) {
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	db01      	blt.n	800cb14 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
 800cb10:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 800cb12:	6064      	str	r4, [r4, #4]
}
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800cb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb18:	4604      	mov	r4, r0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	f04f 0310 	mov.w	r3, #16
 800cb20:	f3ef 8611 	mrs	r6, BASEPRI
 800cb24:	f383 8812 	msr	BASEPRI_MAX, r3
 800cb28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800cb2c:	6983      	ldr	r3, [r0, #24]
 800cb2e:	b163      	cbz	r3, 800cb4a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	69a2      	ldr	r2, [r4, #24]
 800cb34:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800cb3a:	69e3      	ldr	r3, [r4, #28]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800cb40:	f386 8811 	msr	BASEPRI, r6
 800cb44:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800cb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb4a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800cb4e:	f000 f9e5 	bl	800cf1c <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d0ec      	beq.n	800cb30 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800cb56:	682a      	ldr	r2, [r5, #0]
 800cb58:	2100      	movs	r1, #0
 800cb5a:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800cb5c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 800cb5e:	f000 f916 	bl	800cd8e <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800cb62:	4631      	mov	r1, r6
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7fb fe5d 	bl	8008824 <z_reschedule>
			return;
 800cb6a:	e7ed      	b.n	800cb48 <k_mem_slab_free+0x32>

0800cb6c <setup_thread_stack>:
{
 800cb6c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800cb6e:	3207      	adds	r2, #7
 800cb70:	f022 0207 	bic.w	r2, r2, #7
 800cb74:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800cb78:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800cb7c:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800cb7e:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800cb80:	2200      	movs	r2, #0
 800cb82:	6702      	str	r2, [r0, #112]	; 0x70
}
 800cb84:	18c8      	adds	r0, r1, r3
 800cb86:	bc10      	pop	{r4}
 800cb88:	4770      	bx	lr

0800cb8a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb8a:	f3ef 8005 	mrs	r0, IPSR
}
 800cb8e:	3800      	subs	r0, #0
 800cb90:	bf18      	it	ne
 800cb92:	2001      	movne	r0, #1
 800cb94:	4770      	bx	lr

0800cb96 <z_impl_k_thread_name_set>:
}
 800cb96:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800cb9a:	4770      	bx	lr

0800cb9c <k_thread_name_get>:
}
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	4770      	bx	lr

0800cba0 <z_impl_k_thread_start>:
{
 800cba0:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800cba2:	f7fb ff75 	bl	8008a90 <z_sched_start>
}
 800cba6:	bd08      	pop	{r3, pc}

0800cba8 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800cba8:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800cbaa:	2400      	movs	r4, #0
 800cbac:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800cbae:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800cbb0:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800cbb2:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800cbb4:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800cbb6:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800cbb8:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800cbba:	bc10      	pop	{r4}
 800cbbc:	4770      	bx	lr

0800cbbe <z_impl_k_thread_create>:
{
 800cbbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbc0:	b087      	sub	sp, #28
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cbc6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800cbc8:	2700      	movs	r7, #0
 800cbca:	9705      	str	r7, [sp, #20]
 800cbcc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cbce:	9704      	str	r7, [sp, #16]
 800cbd0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cbd2:	9703      	str	r7, [sp, #12]
 800cbd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cbd6:	9702      	str	r7, [sp, #8]
 800cbd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cbda:	9701      	str	r7, [sp, #4]
 800cbdc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cbde:	9700      	str	r7, [sp, #0]
 800cbe0:	f7fb fa1a 	bl	8008018 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800cbe4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800cbe8:	bf08      	it	eq
 800cbea:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800cbee:	d102      	bne.n	800cbf6 <z_impl_k_thread_create+0x38>
}
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	b007      	add	sp, #28
 800cbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7fb f9fe 	bl	8007ffc <schedule_new_thread>
 800cc00:	e7f6      	b.n	800cbf0 <z_impl_k_thread_create+0x32>

0800cc02 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800cc02:	b508      	push	{r3, lr}
	__asm__ volatile(
 800cc04:	f04f 0210 	mov.w	r2, #16
 800cc08:	f3ef 8311 	mrs	r3, BASEPRI
 800cc0c:	f382 8812 	msr	BASEPRI_MAX, r2
 800cc10:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800cc14:	f7f6 ffd6 	bl	8003bc4 <arch_cpu_idle>
 800cc18:	e7f4      	b.n	800cc04 <idle+0x2>

0800cc1a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800cc1a:	4288      	cmp	r0, r1
 800cc1c:	da00      	bge.n	800cc20 <new_prio_for_inheritance+0x6>
 800cc1e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800cc20:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800cc24:	db01      	blt.n	800cc2a <new_prio_for_inheritance+0x10>
 800cc26:	4608      	mov	r0, r1
 800cc28:	4770      	bx	lr
 800cc2a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800cc2e:	4770      	bx	lr

0800cc30 <adjust_owner_prio>:
{
 800cc30:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800cc32:	6880      	ldr	r0, [r0, #8]
 800cc34:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800cc38:	428b      	cmp	r3, r1
 800cc3a:	d101      	bne.n	800cc40 <adjust_owner_prio+0x10>
	return false;
 800cc3c:	2000      	movs	r0, #0
}
 800cc3e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800cc40:	f7fb ff74 	bl	8008b2c <z_set_prio>
 800cc44:	e7fb      	b.n	800cc3e <adjust_owner_prio+0xe>

0800cc46 <z_impl_k_mutex_init>:
{
 800cc46:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800cc48:	2000      	movs	r0, #0
 800cc4a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800cc4c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800cc4e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800cc50:	605b      	str	r3, [r3, #4]
}
 800cc52:	4770      	bx	lr

0800cc54 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800cc54:	2300      	movs	r3, #0
 800cc56:	6003      	str	r3, [r0, #0]
 800cc58:	6043      	str	r3, [r0, #4]
 800cc5a:	6083      	str	r3, [r0, #8]
 800cc5c:	60c3      	str	r3, [r0, #12]
 800cc5e:	6041      	str	r1, [r0, #4]
}
 800cc60:	4770      	bx	lr

0800cc62 <k_work_submit_to_queue>:
{
 800cc62:	b530      	push	{r4, r5, lr}
 800cc64:	b083      	sub	sp, #12
 800cc66:	9001      	str	r0, [sp, #4]
 800cc68:	4608      	mov	r0, r1
 800cc6a:	f04f 0310 	mov.w	r3, #16
 800cc6e:	f3ef 8511 	mrs	r5, BASEPRI
 800cc72:	f383 8812 	msr	BASEPRI_MAX, r3
 800cc76:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800cc7a:	a901      	add	r1, sp, #4
 800cc7c:	f7fb fc16 	bl	80084ac <submit_to_queue_locked>
 800cc80:	4604      	mov	r4, r0
	__asm__ volatile(
 800cc82:	f385 8811 	msr	BASEPRI, r5
 800cc86:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	dc02      	bgt.n	800cc94 <k_work_submit_to_queue+0x32>
}
 800cc8e:	4620      	mov	r0, r4
 800cc90:	b003      	add	sp, #12
 800cc92:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800cc94:	f7fc f91a 	bl	8008ecc <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d0f8      	beq.n	800cc8e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800cc9c:	f7fc f868 	bl	8008d70 <z_impl_k_yield>
	return ret;
 800cca0:	e7f5      	b.n	800cc8e <k_work_submit_to_queue+0x2c>

0800cca2 <thread_active_elsewhere>:
}
 800cca2:	2000      	movs	r0, #0
 800cca4:	4770      	bx	lr

0800cca6 <pended_on_thread>:
}
 800cca6:	6880      	ldr	r0, [r0, #8]
 800cca8:	4770      	bx	lr

0800ccaa <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800ccaa:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800ccae:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800ccb2:	4283      	cmp	r3, r0
 800ccb4:	d001      	beq.n	800ccba <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800ccb6:	1ac0      	subs	r0, r0, r3
 800ccb8:	4770      	bx	lr
	return 0;
 800ccba:	2000      	movs	r0, #0
}
 800ccbc:	4770      	bx	lr

0800ccbe <z_unpend_thread_no_timeout>:
{
 800ccbe:	b538      	push	{r3, r4, r5, lr}
 800ccc0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800ccc2:	2300      	movs	r3, #0
	__asm__ volatile(
 800ccc4:	f04f 0210 	mov.w	r2, #16
 800ccc8:	f3ef 8511 	mrs	r5, BASEPRI
 800cccc:	f382 8812 	msr	BASEPRI_MAX, r2
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	e010      	b.n	800ccf8 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7ff ffe5 	bl	800cca6 <pended_on_thread>
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f000 f823 	bl	800cd28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cce2:	7b63      	ldrb	r3, [r4, #13]
 800cce4:	f023 0302 	bic.w	r3, r3, #2
 800cce8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ccee:	f385 8811 	msr	BASEPRI, r5
 800ccf2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d0ec      	beq.n	800ccd6 <z_unpend_thread_no_timeout+0x18>
}
 800ccfc:	bd38      	pop	{r3, r4, r5, pc}

0800ccfe <z_reschedule_irqlock>:
{
 800ccfe:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cd00:	4603      	mov	r3, r0
 800cd02:	b920      	cbnz	r0, 800cd0e <z_reschedule_irqlock+0x10>
 800cd04:	f3ef 8205 	mrs	r2, IPSR
 800cd08:	b942      	cbnz	r2, 800cd1c <z_reschedule_irqlock+0x1e>
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	e000      	b.n	800cd10 <z_reschedule_irqlock+0x12>
 800cd0e:	2200      	movs	r2, #0
	if (resched(key)) {
 800cd10:	b932      	cbnz	r2, 800cd20 <z_reschedule_irqlock+0x22>
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
}
 800cd1a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	e7f7      	b.n	800cd10 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7f6 ffeb 	bl	8003cfc <arch_swap>
	return ret;
 800cd26:	e7f8      	b.n	800cd1a <z_reschedule_irqlock+0x1c>

0800cd28 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800cd28:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800cd2a:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800cd2c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800cd2e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800cd30:	2300      	movs	r3, #0
 800cd32:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800cd34:	604b      	str	r3, [r1, #4]
}
 800cd36:	4770      	bx	lr

0800cd38 <z_unpend_thread>:
{
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800cd3c:	2300      	movs	r3, #0
	__asm__ volatile(
 800cd3e:	f04f 0210 	mov.w	r2, #16
 800cd42:	f3ef 8511 	mrs	r5, BASEPRI
 800cd46:	f382 8812 	msr	BASEPRI_MAX, r2
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	e010      	b.n	800cd72 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cd50:	4620      	mov	r0, r4
 800cd52:	f7ff ffa8 	bl	800cca6 <pended_on_thread>
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7ff ffe6 	bl	800cd28 <z_priq_dumb_remove>
 800cd5c:	7b63      	ldrb	r3, [r4, #13]
 800cd5e:	f023 0302 	bic.w	r3, r3, #2
 800cd62:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800cd68:	f385 8811 	msr	BASEPRI, r5
 800cd6c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cd70:	2301      	movs	r3, #1
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0ec      	beq.n	800cd50 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800cd76:	f104 0018 	add.w	r0, r4, #24
 800cd7a:	f000 f98b 	bl	800d094 <z_abort_timeout>
}
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}

0800cd80 <z_priq_dumb_best>:
{
 800cd80:	4603      	mov	r3, r0
	return list->head == list;
 800cd82:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800cd84:	4283      	cmp	r3, r0
 800cd86:	d000      	beq.n	800cd8a <z_priq_dumb_best+0xa>
}
 800cd88:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800cd8a:	2000      	movs	r0, #0
	return thread;
 800cd8c:	e7fc      	b.n	800cd88 <z_priq_dumb_best+0x8>

0800cd8e <z_ready_thread>:
{
 800cd8e:	b538      	push	{r3, r4, r5, lr}
 800cd90:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800cd92:	2300      	movs	r3, #0
	__asm__ volatile(
 800cd94:	f04f 0210 	mov.w	r2, #16
 800cd98:	f3ef 8511 	mrs	r5, BASEPRI
 800cd9c:	f382 8812 	msr	BASEPRI_MAX, r2
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	e004      	b.n	800cdb0 <z_ready_thread+0x22>
	__asm__ volatile(
 800cda6:	f385 8811 	msr	BASEPRI, r5
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	2301      	movs	r3, #1
 800cdb0:	b943      	cbnz	r3, 800cdc4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f7ff ff75 	bl	800cca2 <thread_active_elsewhere>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1f4      	bne.n	800cda6 <z_ready_thread+0x18>
			ready_thread(thread);
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f7fb fe27 	bl	8008a10 <ready_thread>
 800cdc2:	e7f0      	b.n	800cda6 <z_ready_thread+0x18>
}
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}

0800cdc6 <z_thread_timeout>:
{
 800cdc6:	b570      	push	{r4, r5, r6, lr}
 800cdc8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800cdca:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800cdce:	2300      	movs	r3, #0
	__asm__ volatile(
 800cdd0:	f04f 0210 	mov.w	r2, #16
 800cdd4:	f3ef 8611 	mrs	r6, BASEPRI
 800cdd8:	f382 8812 	msr	BASEPRI_MAX, r2
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	e011      	b.n	800ce06 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800cde2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800cde6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800cdea:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800cdee:	f023 0310 	bic.w	r3, r3, #16
 800cdf2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	f7fb fe0a 	bl	8008a10 <ready_thread>
	__asm__ volatile(
 800cdfc:	f386 8811 	msr	BASEPRI, r6
 800ce00:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ce04:	2301      	movs	r3, #1
 800ce06:	b9ab      	cbnz	r3, 800ce34 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800ce08:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800ce0c:	f013 0f28 	tst.w	r3, #40	; 0x28
 800ce10:	d1f4      	bne.n	800cdfc <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800ce12:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0e3      	beq.n	800cde2 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	f7ff ff43 	bl	800cca6 <pended_on_thread>
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7ff ff81 	bl	800cd28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ce26:	7b6b      	ldrb	r3, [r5, #13]
 800ce28:	f023 0302 	bic.w	r3, r3, #2
 800ce2c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60ab      	str	r3, [r5, #8]
}
 800ce32:	e7d6      	b.n	800cde2 <z_thread_timeout+0x1c>
}
 800ce34:	bd70      	pop	{r4, r5, r6, pc}

0800ce36 <add_to_waitq_locked>:
{
 800ce36:	b570      	push	{r4, r5, r6, lr}
 800ce38:	4605      	mov	r5, r0
 800ce3a:	460e      	mov	r6, r1
	unready_thread(thread);
 800ce3c:	f7fb fe46 	bl	8008acc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800ce40:	7b6b      	ldrb	r3, [r5, #13]
 800ce42:	f043 0302 	orr.w	r3, r3, #2
 800ce46:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800ce48:	b1b6      	cbz	r6, 800ce78 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800ce4a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800ce4c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ce4e:	42a6      	cmp	r6, r4
 800ce50:	d019      	beq.n	800ce86 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce52:	b164      	cbz	r4, 800ce6e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ce54:	4621      	mov	r1, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	f7ff ff27 	bl	800ccaa <z_sched_prio_cmp>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dc0c      	bgt.n	800ce7a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ce60:	b12c      	cbz	r4, 800ce6e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800ce62:	6873      	ldr	r3, [r6, #4]
 800ce64:	429c      	cmp	r4, r3
 800ce66:	d002      	beq.n	800ce6e <add_to_waitq_locked+0x38>
 800ce68:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce6a:	2c00      	cmp	r4, #0
 800ce6c:	d1f1      	bne.n	800ce52 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800ce6e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800ce70:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800ce72:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800ce74:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800ce76:	6075      	str	r5, [r6, #4]
}
 800ce78:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800ce7a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800ce7c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800ce7e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800ce80:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800ce82:	6065      	str	r5, [r4, #4]
}
 800ce84:	e7f8      	b.n	800ce78 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ce86:	2400      	movs	r4, #0
 800ce88:	e7e3      	b.n	800ce52 <add_to_waitq_locked+0x1c>

0800ce8a <pend>:
{
 800ce8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce8e:	4605      	mov	r5, r0
 800ce90:	460e      	mov	r6, r1
 800ce92:	4691      	mov	r9, r2
 800ce94:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800ce96:	2400      	movs	r4, #0
	__asm__ volatile(
 800ce98:	f04f 0310 	mov.w	r3, #16
 800ce9c:	f3ef 8711 	mrs	r7, BASEPRI
 800cea0:	f383 8812 	msr	BASEPRI_MAX, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	e008      	b.n	800cebc <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800ceaa:	4631      	mov	r1, r6
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7ff ffc2 	bl	800ce36 <add_to_waitq_locked>
	__asm__ volatile(
 800ceb2:	f387 8811 	msr	BASEPRI, r7
 800ceb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ceba:	2401      	movs	r4, #1
 800cebc:	2c00      	cmp	r4, #0
 800cebe:	d0f4      	beq.n	800ceaa <pend+0x20>
	add_thread_timeout(thread, timeout);
 800cec0:	464a      	mov	r2, r9
 800cec2:	4643      	mov	r3, r8
 800cec4:	4628      	mov	r0, r5
 800cec6:	f7fb fc59 	bl	800877c <add_thread_timeout>
}
 800ceca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cece <z_unpend1_no_timeout>:
{
 800cece:	b570      	push	{r4, r5, r6, lr}
 800ced0:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800ced2:	2300      	movs	r3, #0
	__asm__ volatile(
 800ced4:	f04f 0210 	mov.w	r2, #16
 800ced8:	f3ef 8611 	mrs	r6, BASEPRI
 800cedc:	f382 8812 	msr	BASEPRI_MAX, r2
 800cee0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800cee4:	461c      	mov	r4, r3
 800cee6:	e004      	b.n	800cef2 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800cee8:	f386 8811 	msr	BASEPRI, r6
 800ceec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cef0:	2301      	movs	r3, #1
 800cef2:	b98b      	cbnz	r3, 800cf18 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800cef4:	4628      	mov	r0, r5
 800cef6:	f7ff ff43 	bl	800cd80 <z_priq_dumb_best>
		if (thread != NULL) {
 800cefa:	4604      	mov	r4, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0f3      	beq.n	800cee8 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cf00:	f7ff fed1 	bl	800cca6 <pended_on_thread>
 800cf04:	4621      	mov	r1, r4
 800cf06:	f7ff ff0f 	bl	800cd28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cf0a:	7b63      	ldrb	r3, [r4, #13]
 800cf0c:	f023 0302 	bic.w	r3, r3, #2
 800cf10:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60a3      	str	r3, [r4, #8]
}
 800cf16:	e7e7      	b.n	800cee8 <z_unpend1_no_timeout+0x1a>
}
 800cf18:	4620      	mov	r0, r4
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}

0800cf1c <z_unpend_first_thread>:
{
 800cf1c:	b570      	push	{r4, r5, r6, lr}
 800cf1e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800cf20:	2300      	movs	r3, #0
	__asm__ volatile(
 800cf22:	f04f 0210 	mov.w	r2, #16
 800cf26:	f3ef 8611 	mrs	r6, BASEPRI
 800cf2a:	f382 8812 	msr	BASEPRI_MAX, r2
 800cf2e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800cf32:	461c      	mov	r4, r3
 800cf34:	e004      	b.n	800cf40 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800cf36:	f386 8811 	msr	BASEPRI, r6
 800cf3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cf3e:	2301      	movs	r3, #1
 800cf40:	b9ab      	cbnz	r3, 800cf6e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800cf42:	4628      	mov	r0, r5
 800cf44:	f7ff ff1c 	bl	800cd80 <z_priq_dumb_best>
		if (thread != NULL) {
 800cf48:	4604      	mov	r4, r0
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d0f3      	beq.n	800cf36 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cf4e:	f7ff feaa 	bl	800cca6 <pended_on_thread>
 800cf52:	4621      	mov	r1, r4
 800cf54:	f7ff fee8 	bl	800cd28 <z_priq_dumb_remove>
 800cf58:	7b63      	ldrb	r3, [r4, #13]
 800cf5a:	f023 0302 	bic.w	r3, r3, #2
 800cf5e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cf60:	2300      	movs	r3, #0
 800cf62:	60a3      	str	r3, [r4, #8]
 800cf64:	f104 0018 	add.w	r0, r4, #24
 800cf68:	f000 f894 	bl	800d094 <z_abort_timeout>
 800cf6c:	e7e3      	b.n	800cf36 <z_unpend_first_thread+0x1a>
}
 800cf6e:	4620      	mov	r0, r4
 800cf70:	bd70      	pop	{r4, r5, r6, pc}

0800cf72 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800cf72:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800cf74:	f013 0f02 	tst.w	r3, #2
 800cf78:	d000      	beq.n	800cf7c <z_impl_k_wakeup+0xa>
 800cf7a:	4770      	bx	lr
{
 800cf7c:	b510      	push	{r4, lr}
 800cf7e:	4604      	mov	r4, r0
 800cf80:	3018      	adds	r0, #24
 800cf82:	f000 f887 	bl	800d094 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800cf86:	2800      	cmp	r0, #0
 800cf88:	da02      	bge.n	800cf90 <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800cf8a:	7b63      	ldrb	r3, [r4, #13]
 800cf8c:	2b10      	cmp	r3, #16
 800cf8e:	d109      	bne.n	800cfa4 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800cf90:	7b63      	ldrb	r3, [r4, #13]
 800cf92:	f023 0310 	bic.w	r3, r3, #16
 800cf96:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7ff fef8 	bl	800cd8e <z_ready_thread>
 800cf9e:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800cfa2:	b103      	cbz	r3, 800cfa6 <z_impl_k_wakeup+0x34>
}
 800cfa4:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800cfa6:	f04f 0310 	mov.w	r3, #16
 800cfaa:	f3ef 8011 	mrs	r0, BASEPRI
 800cfae:	f383 8812 	msr	BASEPRI_MAX, r3
 800cfb2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800cfb6:	f7ff fea2 	bl	800ccfe <z_reschedule_irqlock>
}
 800cfba:	e7f3      	b.n	800cfa4 <z_impl_k_wakeup+0x32>

0800cfbc <z_sched_wake>:
{
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	4688      	mov	r8, r1
 800cfc4:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f04f 0210 	mov.w	r2, #16
 800cfcc:	f3ef 8611 	mrs	r6, BASEPRI
 800cfd0:	f382 8812 	msr	BASEPRI_MAX, r2
 800cfd4:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800cfd8:	4699      	mov	r9, r3
 800cfda:	e004      	b.n	800cfe6 <z_sched_wake+0x2a>
	__asm__ volatile(
 800cfdc:	f386 8811 	msr	BASEPRI, r6
 800cfe0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	b9eb      	cbnz	r3, 800d024 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f7ff fec9 	bl	800cd80 <z_priq_dumb_best>
		if (thread != NULL) {
 800cfee:	4604      	mov	r4, r0
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d0f3      	beq.n	800cfdc <z_sched_wake+0x20>
 800cff4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
 800cff8:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cffa:	f7ff fe54 	bl	800cca6 <pended_on_thread>
 800cffe:	4621      	mov	r1, r4
 800d000:	f7ff fe92 	bl	800cd28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800d004:	7b63      	ldrb	r3, [r4, #13]
 800d006:	f023 0302 	bic.w	r3, r3, #2
 800d00a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800d00c:	2300      	movs	r3, #0
 800d00e:	60a3      	str	r3, [r4, #8]
 800d010:	f104 0018 	add.w	r0, r4, #24
 800d014:	f000 f83e 	bl	800d094 <z_abort_timeout>
			ready_thread(thread);
 800d018:	4620      	mov	r0, r4
 800d01a:	f7fb fcf9 	bl	8008a10 <ready_thread>
			ret = true;
 800d01e:	f04f 0901 	mov.w	r9, #1
 800d022:	e7db      	b.n	800cfdc <z_sched_wake+0x20>
}
 800d024:	4648      	mov	r0, r9
 800d026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d02a <remove_timeout>:
{
 800d02a:	b510      	push	{r4, lr}
 800d02c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800d02e:	f7fb ffbd 	bl	8008fac <next>
 800d032:	b148      	cbz	r0, 800d048 <remove_timeout+0x1e>
 800d034:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800d036:	6920      	ldr	r0, [r4, #16]
 800d038:	6961      	ldr	r1, [r4, #20]
 800d03a:	6913      	ldr	r3, [r2, #16]
 800d03c:	181b      	adds	r3, r3, r0
 800d03e:	6950      	ldr	r0, [r2, #20]
 800d040:	eb41 0100 	adc.w	r1, r1, r0
 800d044:	6113      	str	r3, [r2, #16]
 800d046:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800d048:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800d04a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800d04c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d04e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800d054:	6063      	str	r3, [r4, #4]
}
 800d056:	bd10      	pop	{r4, pc}

0800d058 <timeout_rem>:
	return node->next != NULL;
 800d058:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
 800d05a:	b1c3      	cbz	r3, 800d08e <timeout_rem+0x36>
{
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800d060:	f7fb ff9a 	bl	8008f98 <first>
	k_ticks_t ticks = 0;
 800d064:	2400      	movs	r4, #0
 800d066:	4625      	mov	r5, r4
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800d068:	b150      	cbz	r0, 800d080 <timeout_rem+0x28>
		ticks += t->dticks;
 800d06a:	6903      	ldr	r3, [r0, #16]
 800d06c:	6942      	ldr	r2, [r0, #20]
 800d06e:	191b      	adds	r3, r3, r4
 800d070:	461c      	mov	r4, r3
 800d072:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
 800d076:	42b0      	cmp	r0, r6
 800d078:	d002      	beq.n	800d080 <timeout_rem+0x28>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800d07a:	f7fb ff97 	bl	8008fac <next>
 800d07e:	e7f3      	b.n	800d068 <timeout_rem+0x10>
	return ticks - elapsed();
 800d080:	f7fb ffa0 	bl	8008fc4 <elapsed>
 800d084:	4601      	mov	r1, r0
 800d086:	1a20      	subs	r0, r4, r0
 800d088:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 800d08c:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800d08e:	2000      	movs	r0, #0
 800d090:	4601      	mov	r1, r0
}
 800d092:	4770      	bx	lr

0800d094 <z_abort_timeout>:
{
 800d094:	b570      	push	{r4, r5, r6, lr}
 800d096:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800d098:	2300      	movs	r3, #0
	__asm__ volatile(
 800d09a:	f04f 0210 	mov.w	r2, #16
 800d09e:	f3ef 8611 	mrs	r6, BASEPRI
 800d0a2:	f382 8812 	msr	BASEPRI_MAX, r2
 800d0a6:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800d0aa:	f06f 0015 	mvn.w	r0, #21
 800d0ae:	e004      	b.n	800d0ba <z_abort_timeout+0x26>
	__asm__ volatile(
 800d0b0:	f386 8811 	msr	BASEPRI, r6
 800d0b4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	461d      	mov	r5, r3
 800d0bc:	b93b      	cbnz	r3, 800d0ce <z_abort_timeout+0x3a>
 800d0be:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d0f5      	beq.n	800d0b0 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7ff ffb0 	bl	800d02a <remove_timeout>
			ret = 0;
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	e7f0      	b.n	800d0b0 <z_abort_timeout+0x1c>
}
 800d0ce:	bd70      	pop	{r4, r5, r6, pc}

0800d0d0 <z_timeout_remaining>:
{
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800d0d4:	2300      	movs	r3, #0
	__asm__ volatile(
 800d0d6:	f04f 0210 	mov.w	r2, #16
 800d0da:	f3ef 8511 	mrs	r5, BASEPRI
 800d0de:	f382 8812 	msr	BASEPRI_MAX, r2
 800d0e2:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	e007      	b.n	800d0fc <z_timeout_remaining+0x2c>
		ticks = timeout_rem(timeout);
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7ff ffb3 	bl	800d058 <timeout_rem>
	__asm__ volatile(
 800d0f2:	f385 8811 	msr	BASEPRI, r5
 800d0f6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0f5      	beq.n	800d0ec <z_timeout_remaining+0x1c>
}
 800d100:	bd38      	pop	{r3, r4, r5, pc}

0800d102 <z_set_timeout_expiry>:
{
 800d102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d104:	4605      	mov	r5, r0
 800d106:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800d108:	2300      	movs	r3, #0
	__asm__ volatile(
 800d10a:	f04f 0210 	mov.w	r2, #16
 800d10e:	f3ef 8611 	mrs	r6, BASEPRI
 800d112:	f382 8812 	msr	BASEPRI_MAX, r2
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	e00a      	b.n	800d132 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800d11c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800d11e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800d122:	2801      	cmp	r0, #1
 800d124:	dd00      	ble.n	800d128 <z_set_timeout_expiry+0x26>
 800d126:	b97c      	cbnz	r4, 800d148 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800d128:	f386 8811 	msr	BASEPRI, r6
 800d12c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d130:	2301      	movs	r3, #1
 800d132:	461c      	mov	r4, r3
 800d134:	b97b      	cbnz	r3, 800d156 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800d136:	f7fb ff51 	bl	8008fdc <next_timeout>
			      || (ticks <= next_to);
 800d13a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d13e:	d0ed      	beq.n	800d11c <z_set_timeout_expiry+0x1a>
 800d140:	42a8      	cmp	r0, r5
 800d142:	dbec      	blt.n	800d11e <z_set_timeout_expiry+0x1c>
 800d144:	2401      	movs	r4, #1
 800d146:	e7ea      	b.n	800d11e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800d148:	4639      	mov	r1, r7
 800d14a:	42a8      	cmp	r0, r5
 800d14c:	bfa8      	it	ge
 800d14e:	4628      	movge	r0, r5
 800d150:	f7fa fb68 	bl	8007824 <sys_clock_set_timeout>
 800d154:	e7e8      	b.n	800d128 <z_set_timeout_expiry+0x26>
}
 800d156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d158 <sys_clock_tick_get_32>:
{
 800d158:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800d15a:	f7fc f855 	bl	8009208 <sys_clock_tick_get>
}
 800d15e:	bd08      	pop	{r3, pc}

0800d160 <z_impl_k_uptime_ticks>:
{
 800d160:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800d162:	f7fc f851 	bl	8009208 <sys_clock_tick_get>
}
 800d166:	bd08      	pop	{r3, pc}

0800d168 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800d168:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800d16a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800d16c:	2300      	movs	r3, #0
 800d16e:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800d170:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800d174:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800d176:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800d178:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d17a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800d17c:	6343      	str	r3, [r0, #52]	; 0x34
}
 800d17e:	4770      	bx	lr

0800d180 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800d180:	b510      	push	{r4, lr}
 800d182:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800d184:	f7ff ff86 	bl	800d094 <z_abort_timeout>

	if (inactive) {
 800d188:	b9a0      	cbnz	r0, 800d1b4 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800d18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d18c:	b10b      	cbz	r3, 800d192 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800d18e:	4620      	mov	r0, r4
 800d190:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800d192:	f104 0018 	add.w	r0, r4, #24
 800d196:	f7ff fe9a 	bl	800cece <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800d19a:	b158      	cbz	r0, 800d1b4 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800d19c:	f7ff fdf7 	bl	800cd8e <z_ready_thread>
	__asm__ volatile(
 800d1a0:	f04f 0310 	mov.w	r3, #16
 800d1a4:	f3ef 8011 	mrs	r0, BASEPRI
 800d1a8:	f383 8812 	msr	BASEPRI_MAX, r3
 800d1ac:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800d1b0:	f7ff fda5 	bl	800ccfe <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800d1b4:	bd10      	pop	{r4, pc}

0800d1b6 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800d1b6:	b108      	cbz	r0, 800d1bc <poller_thread+0x6>
 800d1b8:	3860      	subs	r0, #96	; 0x60
 800d1ba:	4770      	bx	lr
}
 800d1bc:	4770      	bx	lr

0800d1be <signal_poller>:
{
 800d1be:	b538      	push	{r3, r4, r5, lr}
 800d1c0:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800d1c2:	6880      	ldr	r0, [r0, #8]
 800d1c4:	f7ff fff7 	bl	800d1b6 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800d1c8:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800d1ca:	f013 0f02 	tst.w	r3, #2
 800d1ce:	d024      	beq.n	800d21a <signal_poller+0x5c>
 800d1d0:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800d1d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800d1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1da:	bf08      	it	eq
 800d1dc:	f112 0f02 	cmneq.w	r2, #2
 800d1e0:	d01d      	beq.n	800d21e <signal_poller+0x60>
	z_unpend_thread(thread);
 800d1e2:	f7ff fda9 	bl	800cd38 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800d1e6:	2d08      	cmp	r5, #8
 800d1e8:	d009      	beq.n	800d1fe <signal_poller+0x40>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800d1ee:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800d1f0:	f013 0f1f 	tst.w	r3, #31
 800d1f4:	d108      	bne.n	800d208 <signal_poller+0x4a>
	return node->next != NULL;
 800d1f6:	69a3      	ldr	r3, [r4, #24]
 800d1f8:	b123      	cbz	r3, 800d204 <signal_poller+0x46>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e005      	b.n	800d20a <signal_poller+0x4c>
 800d1fe:	f06f 0303 	mvn.w	r3, #3
 800d202:	e7f3      	b.n	800d1ec <signal_poller+0x2e>
 800d204:	2301      	movs	r3, #1
 800d206:	e000      	b.n	800d20a <signal_poller+0x4c>
 800d208:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800d20a:	b90b      	cbnz	r3, 800d210 <signal_poller+0x52>
		return 0;
 800d20c:	2000      	movs	r0, #0
 800d20e:	e005      	b.n	800d21c <signal_poller+0x5e>
	z_ready_thread(thread);
 800d210:	4620      	mov	r0, r4
 800d212:	f7ff fdbc 	bl	800cd8e <z_ready_thread>
	return 0;
 800d216:	2000      	movs	r0, #0
 800d218:	e000      	b.n	800d21c <signal_poller+0x5e>
		return 0;
 800d21a:	2000      	movs	r0, #0
}
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800d21e:	f06f 000a 	mvn.w	r0, #10
 800d222:	e7fb      	b.n	800d21c <signal_poller+0x5e>

0800d224 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800d224:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800d226:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800d228:	7823      	ldrb	r3, [r4, #0]
 800d22a:	b173      	cbz	r3, 800d24a <signal_triggered_work+0x26>
 800d22c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d230:	b15d      	cbz	r5, 800d24a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800d232:	f1a4 0614 	sub.w	r6, r4, #20
 800d236:	f104 0014 	add.w	r0, r4, #20
 800d23a:	f7ff ff2b 	bl	800d094 <z_abort_timeout>
		twork->poll_result = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800d242:	4631      	mov	r1, r6
 800d244:	4628      	mov	r0, r5
 800d246:	f7ff fd0c 	bl	800cc62 <k_work_submit_to_queue>
	}

	return 0;
}
 800d24a:	2000      	movs	r0, #0
 800d24c:	bd70      	pop	{r4, r5, r6, pc}

0800d24e <signal_poll_event>:
{
 800d24e:	b570      	push	{r4, r5, r6, lr}
 800d250:	4604      	mov	r4, r0
 800d252:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800d254:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800d256:	b1d6      	cbz	r6, 800d28e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800d258:	7873      	ldrb	r3, [r6, #1]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d00d      	beq.n	800d27a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d012      	beq.n	800d288 <signal_poll_event+0x3a>
		poller->is_polling = false;
 800d262:	2000      	movs	r0, #0
 800d264:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800d266:	2300      	movs	r3, #0
 800d268:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800d26a:	68e3      	ldr	r3, [r4, #12]
 800d26c:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800d270:	430d      	orrs	r5, r1
 800d272:	f365 3352 	bfi	r3, r5, #13, #6
 800d276:	60e3      	str	r3, [r4, #12]
}
 800d278:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800d27a:	f7ff ffa0 	bl	800d1be <signal_poller>
		poller->is_polling = false;
 800d27e:	2300      	movs	r3, #0
 800d280:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800d282:	4298      	cmp	r0, r3
 800d284:	daef      	bge.n	800d266 <signal_poll_event+0x18>
 800d286:	e7f7      	b.n	800d278 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800d288:	f7ff ffcc 	bl	800d224 <signal_triggered_work>
 800d28c:	e7f7      	b.n	800d27e <signal_poll_event+0x30>
	int retcode = 0;
 800d28e:	2000      	movs	r0, #0
 800d290:	e7e9      	b.n	800d266 <signal_poll_event+0x18>

0800d292 <z_handle_obj_poll_events>:
{
 800d292:	b508      	push	{r3, lr}
 800d294:	4603      	mov	r3, r0
	return list->head == list;
 800d296:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800d298:	4283      	cmp	r3, r0
 800d29a:	d009      	beq.n	800d2b0 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800d29c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800d29e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800d2a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d2a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d2a8:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800d2aa:	b108      	cbz	r0, 800d2b0 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800d2ac:	f7ff ffcf 	bl	800d24e <signal_poll_event>
}
 800d2b0:	bd08      	pop	{r3, pc}

0800d2b2 <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800d2b2:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800d2b4:	4770      	bx	lr

0800d2b6 <k_heap_init>:
{
 800d2b6:	b510      	push	{r4, lr}
 800d2b8:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800d2bc:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800d2be:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800d2c0:	f7fe f86b 	bl	800b39a <sys_heap_init>
}
 800d2c4:	bd10      	pop	{r4, pc}

0800d2c6 <memcpy>:
 800d2c6:	440a      	add	r2, r1
 800d2c8:	4291      	cmp	r1, r2
 800d2ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d2ce:	d100      	bne.n	800d2d2 <memcpy+0xc>
 800d2d0:	4770      	bx	lr
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2d8:	4291      	cmp	r1, r2
 800d2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2de:	d1f9      	bne.n	800d2d4 <memcpy+0xe>
 800d2e0:	bd10      	pop	{r4, pc}

0800d2e2 <memset>:
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	4402      	add	r2, r0
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d100      	bne.n	800d2ec <memset+0xa>
 800d2ea:	4770      	bx	lr
 800d2ec:	f803 1b01 	strb.w	r1, [r3], #1
 800d2f0:	e7f9      	b.n	800d2e6 <memset+0x4>

0800d2f2 <__cvt>:
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f8:	461f      	mov	r7, r3
 800d2fa:	bfbb      	ittet	lt
 800d2fc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d300:	461f      	movlt	r7, r3
 800d302:	2300      	movge	r3, #0
 800d304:	232d      	movlt	r3, #45	; 0x2d
 800d306:	b088      	sub	sp, #32
 800d308:	4614      	mov	r4, r2
 800d30a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d30c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d30e:	7013      	strb	r3, [r2, #0]
 800d310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d312:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d316:	f023 0820 	bic.w	r8, r3, #32
 800d31a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d31e:	d005      	beq.n	800d32c <__cvt+0x3a>
 800d320:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d324:	d100      	bne.n	800d328 <__cvt+0x36>
 800d326:	3501      	adds	r5, #1
 800d328:	2302      	movs	r3, #2
 800d32a:	e000      	b.n	800d32e <__cvt+0x3c>
 800d32c:	2303      	movs	r3, #3
 800d32e:	aa07      	add	r2, sp, #28
 800d330:	9204      	str	r2, [sp, #16]
 800d332:	aa06      	add	r2, sp, #24
 800d334:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d338:	e9cd 3500 	strd	r3, r5, [sp]
 800d33c:	4622      	mov	r2, r4
 800d33e:	463b      	mov	r3, r7
 800d340:	f7f3 fd06 	bl	8000d50 <_dtoa_r>
 800d344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d348:	4606      	mov	r6, r0
 800d34a:	d102      	bne.n	800d352 <__cvt+0x60>
 800d34c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d34e:	07db      	lsls	r3, r3, #31
 800d350:	d522      	bpl.n	800d398 <__cvt+0xa6>
 800d352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d356:	eb06 0905 	add.w	r9, r6, r5
 800d35a:	d110      	bne.n	800d37e <__cvt+0x8c>
 800d35c:	7833      	ldrb	r3, [r6, #0]
 800d35e:	2b30      	cmp	r3, #48	; 0x30
 800d360:	d10a      	bne.n	800d378 <__cvt+0x86>
 800d362:	2200      	movs	r2, #0
 800d364:	2300      	movs	r3, #0
 800d366:	4620      	mov	r0, r4
 800d368:	4639      	mov	r1, r7
 800d36a:	f7f3 fb1b 	bl	80009a4 <__aeabi_dcmpeq>
 800d36e:	b918      	cbnz	r0, 800d378 <__cvt+0x86>
 800d370:	f1c5 0501 	rsb	r5, r5, #1
 800d374:	f8ca 5000 	str.w	r5, [sl]
 800d378:	f8da 3000 	ldr.w	r3, [sl]
 800d37c:	4499      	add	r9, r3
 800d37e:	2200      	movs	r2, #0
 800d380:	2300      	movs	r3, #0
 800d382:	4620      	mov	r0, r4
 800d384:	4639      	mov	r1, r7
 800d386:	f7f3 fb0d 	bl	80009a4 <__aeabi_dcmpeq>
 800d38a:	b108      	cbz	r0, 800d390 <__cvt+0x9e>
 800d38c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d390:	2230      	movs	r2, #48	; 0x30
 800d392:	9b07      	ldr	r3, [sp, #28]
 800d394:	454b      	cmp	r3, r9
 800d396:	d307      	bcc.n	800d3a8 <__cvt+0xb6>
 800d398:	4630      	mov	r0, r6
 800d39a:	9b07      	ldr	r3, [sp, #28]
 800d39c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d39e:	1b9b      	subs	r3, r3, r6
 800d3a0:	6013      	str	r3, [r2, #0]
 800d3a2:	b008      	add	sp, #32
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	1c59      	adds	r1, r3, #1
 800d3aa:	9107      	str	r1, [sp, #28]
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	e7f0      	b.n	800d392 <__cvt+0xa0>

0800d3b0 <__exponent>:
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3b4:	2900      	cmp	r1, #0
 800d3b6:	f803 2b02 	strb.w	r2, [r3], #2
 800d3ba:	bfb6      	itet	lt
 800d3bc:	222d      	movlt	r2, #45	; 0x2d
 800d3be:	222b      	movge	r2, #43	; 0x2b
 800d3c0:	4249      	neglt	r1, r1
 800d3c2:	2909      	cmp	r1, #9
 800d3c4:	7042      	strb	r2, [r0, #1]
 800d3c6:	dd2b      	ble.n	800d420 <__exponent+0x70>
 800d3c8:	f10d 0407 	add.w	r4, sp, #7
 800d3cc:	46a4      	mov	ip, r4
 800d3ce:	270a      	movs	r7, #10
 800d3d0:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3d4:	460a      	mov	r2, r1
 800d3d6:	46a6      	mov	lr, r4
 800d3d8:	fb07 1516 	mls	r5, r7, r6, r1
 800d3dc:	2a63      	cmp	r2, #99	; 0x63
 800d3de:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d3e8:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3ec:	dcf0      	bgt.n	800d3d0 <__exponent+0x20>
 800d3ee:	3130      	adds	r1, #48	; 0x30
 800d3f0:	f1ae 0502 	sub.w	r5, lr, #2
 800d3f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	1c44      	adds	r4, r0, #1
 800d3fc:	4561      	cmp	r1, ip
 800d3fe:	d30a      	bcc.n	800d416 <__exponent+0x66>
 800d400:	f10d 0209 	add.w	r2, sp, #9
 800d404:	eba2 020e 	sub.w	r2, r2, lr
 800d408:	4565      	cmp	r5, ip
 800d40a:	bf88      	it	hi
 800d40c:	2200      	movhi	r2, #0
 800d40e:	4413      	add	r3, r2
 800d410:	1a18      	subs	r0, r3, r0
 800d412:	b003      	add	sp, #12
 800d414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d41a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d41e:	e7ed      	b.n	800d3fc <__exponent+0x4c>
 800d420:	2330      	movs	r3, #48	; 0x30
 800d422:	3130      	adds	r1, #48	; 0x30
 800d424:	7083      	strb	r3, [r0, #2]
 800d426:	70c1      	strb	r1, [r0, #3]
 800d428:	1d03      	adds	r3, r0, #4
 800d42a:	e7f1      	b.n	800d410 <__exponent+0x60>

0800d42c <_printf_common>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	4616      	mov	r6, r2
 800d432:	4699      	mov	r9, r3
 800d434:	688a      	ldr	r2, [r1, #8]
 800d436:	690b      	ldr	r3, [r1, #16]
 800d438:	4607      	mov	r7, r0
 800d43a:	4293      	cmp	r3, r2
 800d43c:	bfb8      	it	lt
 800d43e:	4613      	movlt	r3, r2
 800d440:	6033      	str	r3, [r6, #0]
 800d442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d446:	460c      	mov	r4, r1
 800d448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d44c:	b10a      	cbz	r2, 800d452 <_printf_common+0x26>
 800d44e:	3301      	adds	r3, #1
 800d450:	6033      	str	r3, [r6, #0]
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	0699      	lsls	r1, r3, #26
 800d456:	bf42      	ittt	mi
 800d458:	6833      	ldrmi	r3, [r6, #0]
 800d45a:	3302      	addmi	r3, #2
 800d45c:	6033      	strmi	r3, [r6, #0]
 800d45e:	6825      	ldr	r5, [r4, #0]
 800d460:	f015 0506 	ands.w	r5, r5, #6
 800d464:	d106      	bne.n	800d474 <_printf_common+0x48>
 800d466:	f104 0a19 	add.w	sl, r4, #25
 800d46a:	68e3      	ldr	r3, [r4, #12]
 800d46c:	6832      	ldr	r2, [r6, #0]
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	42ab      	cmp	r3, r5
 800d472:	dc28      	bgt.n	800d4c6 <_printf_common+0x9a>
 800d474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d478:	1e13      	subs	r3, r2, #0
 800d47a:	6822      	ldr	r2, [r4, #0]
 800d47c:	bf18      	it	ne
 800d47e:	2301      	movne	r3, #1
 800d480:	0692      	lsls	r2, r2, #26
 800d482:	d42d      	bmi.n	800d4e0 <_printf_common+0xb4>
 800d484:	4649      	mov	r1, r9
 800d486:	4638      	mov	r0, r7
 800d488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d48c:	47c0      	blx	r8
 800d48e:	3001      	adds	r0, #1
 800d490:	d020      	beq.n	800d4d4 <_printf_common+0xa8>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	68e5      	ldr	r5, [r4, #12]
 800d496:	f003 0306 	and.w	r3, r3, #6
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	bf18      	it	ne
 800d49e:	2500      	movne	r5, #0
 800d4a0:	6832      	ldr	r2, [r6, #0]
 800d4a2:	f04f 0600 	mov.w	r6, #0
 800d4a6:	68a3      	ldr	r3, [r4, #8]
 800d4a8:	bf08      	it	eq
 800d4aa:	1aad      	subeq	r5, r5, r2
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	bf08      	it	eq
 800d4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	bfc4      	itt	gt
 800d4b8:	1a9b      	subgt	r3, r3, r2
 800d4ba:	18ed      	addgt	r5, r5, r3
 800d4bc:	341a      	adds	r4, #26
 800d4be:	42b5      	cmp	r5, r6
 800d4c0:	d11a      	bne.n	800d4f8 <_printf_common+0xcc>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e008      	b.n	800d4d8 <_printf_common+0xac>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4652      	mov	r2, sl
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	47c0      	blx	r8
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_printf_common+0xb0>
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4dc:	3501      	adds	r5, #1
 800d4de:	e7c4      	b.n	800d46a <_printf_common+0x3e>
 800d4e0:	2030      	movs	r0, #48	; 0x30
 800d4e2:	18e1      	adds	r1, r4, r3
 800d4e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4ee:	4422      	add	r2, r4
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4f6:	e7c5      	b.n	800d484 <_printf_common+0x58>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	4638      	mov	r0, r7
 800d500:	47c0      	blx	r8
 800d502:	3001      	adds	r0, #1
 800d504:	d0e6      	beq.n	800d4d4 <_printf_common+0xa8>
 800d506:	3601      	adds	r6, #1
 800d508:	e7d9      	b.n	800d4be <_printf_common+0x92>

0800d50a <strncpy>:
 800d50a:	4603      	mov	r3, r0
 800d50c:	b510      	push	{r4, lr}
 800d50e:	3901      	subs	r1, #1
 800d510:	b132      	cbz	r2, 800d520 <strncpy+0x16>
 800d512:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d516:	3a01      	subs	r2, #1
 800d518:	f803 4b01 	strb.w	r4, [r3], #1
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	d1f7      	bne.n	800d510 <strncpy+0x6>
 800d520:	2100      	movs	r1, #0
 800d522:	441a      	add	r2, r3
 800d524:	4293      	cmp	r3, r2
 800d526:	d100      	bne.n	800d52a <strncpy+0x20>
 800d528:	bd10      	pop	{r4, pc}
 800d52a:	f803 1b01 	strb.w	r1, [r3], #1
 800d52e:	e7f9      	b.n	800d524 <strncpy+0x1a>

0800d530 <strnlen>:
 800d530:	4602      	mov	r2, r0
 800d532:	b510      	push	{r4, lr}
 800d534:	4401      	add	r1, r0
 800d536:	428a      	cmp	r2, r1
 800d538:	4613      	mov	r3, r2
 800d53a:	d003      	beq.n	800d544 <strnlen+0x14>
 800d53c:	781c      	ldrb	r4, [r3, #0]
 800d53e:	3201      	adds	r2, #1
 800d540:	2c00      	cmp	r4, #0
 800d542:	d1f8      	bne.n	800d536 <strnlen+0x6>
 800d544:	1a18      	subs	r0, r3, r0
 800d546:	bd10      	pop	{r4, pc}

0800d548 <quorem>:
 800d548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	6903      	ldr	r3, [r0, #16]
 800d54e:	690c      	ldr	r4, [r1, #16]
 800d550:	4607      	mov	r7, r0
 800d552:	42a3      	cmp	r3, r4
 800d554:	f2c0 8082 	blt.w	800d65c <quorem+0x114>
 800d558:	3c01      	subs	r4, #1
 800d55a:	f100 0514 	add.w	r5, r0, #20
 800d55e:	f101 0814 	add.w	r8, r1, #20
 800d562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d566:	9301      	str	r3, [sp, #4]
 800d568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d56c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d570:	3301      	adds	r3, #1
 800d572:	429a      	cmp	r2, r3
 800d574:	fbb2 f6f3 	udiv	r6, r2, r3
 800d578:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d57c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d580:	d331      	bcc.n	800d5e6 <quorem+0x9e>
 800d582:	f04f 0e00 	mov.w	lr, #0
 800d586:	4640      	mov	r0, r8
 800d588:	46ac      	mov	ip, r5
 800d58a:	46f2      	mov	sl, lr
 800d58c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d590:	b293      	uxth	r3, r2
 800d592:	fb06 e303 	mla	r3, r6, r3, lr
 800d596:	0c12      	lsrs	r2, r2, #16
 800d598:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	fb06 e202 	mla	r2, r6, r2, lr
 800d5a2:	ebaa 0303 	sub.w	r3, sl, r3
 800d5a6:	f8dc a000 	ldr.w	sl, [ip]
 800d5aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5ae:	fa1f fa8a 	uxth.w	sl, sl
 800d5b2:	4453      	add	r3, sl
 800d5b4:	f8dc a000 	ldr.w	sl, [ip]
 800d5b8:	b292      	uxth	r2, r2
 800d5ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d5be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5c8:	4581      	cmp	r9, r0
 800d5ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d5ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d5d2:	d2db      	bcs.n	800d58c <quorem+0x44>
 800d5d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d5d8:	b92b      	cbnz	r3, 800d5e6 <quorem+0x9e>
 800d5da:	9b01      	ldr	r3, [sp, #4]
 800d5dc:	3b04      	subs	r3, #4
 800d5de:	429d      	cmp	r5, r3
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	d32f      	bcc.n	800d644 <quorem+0xfc>
 800d5e4:	613c      	str	r4, [r7, #16]
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f000 f895 	bl	800d716 <__mcmp>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	db25      	blt.n	800d63c <quorem+0xf4>
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	f04f 0c00 	mov.w	ip, #0
 800d5f6:	3601      	adds	r6, #1
 800d5f8:	f858 1b04 	ldr.w	r1, [r8], #4
 800d5fc:	f8d0 e000 	ldr.w	lr, [r0]
 800d600:	b28b      	uxth	r3, r1
 800d602:	ebac 0303 	sub.w	r3, ip, r3
 800d606:	fa1f f28e 	uxth.w	r2, lr
 800d60a:	4413      	add	r3, r2
 800d60c:	0c0a      	lsrs	r2, r1, #16
 800d60e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d616:	b29b      	uxth	r3, r3
 800d618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d61c:	45c1      	cmp	r9, r8
 800d61e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d622:	f840 3b04 	str.w	r3, [r0], #4
 800d626:	d2e7      	bcs.n	800d5f8 <quorem+0xb0>
 800d628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d630:	b922      	cbnz	r2, 800d63c <quorem+0xf4>
 800d632:	3b04      	subs	r3, #4
 800d634:	429d      	cmp	r5, r3
 800d636:	461a      	mov	r2, r3
 800d638:	d30a      	bcc.n	800d650 <quorem+0x108>
 800d63a:	613c      	str	r4, [r7, #16]
 800d63c:	4630      	mov	r0, r6
 800d63e:	b003      	add	sp, #12
 800d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	3b04      	subs	r3, #4
 800d648:	2a00      	cmp	r2, #0
 800d64a:	d1cb      	bne.n	800d5e4 <quorem+0x9c>
 800d64c:	3c01      	subs	r4, #1
 800d64e:	e7c6      	b.n	800d5de <quorem+0x96>
 800d650:	6812      	ldr	r2, [r2, #0]
 800d652:	3b04      	subs	r3, #4
 800d654:	2a00      	cmp	r2, #0
 800d656:	d1f0      	bne.n	800d63a <quorem+0xf2>
 800d658:	3c01      	subs	r4, #1
 800d65a:	e7eb      	b.n	800d634 <quorem+0xec>
 800d65c:	2000      	movs	r0, #0
 800d65e:	e7ee      	b.n	800d63e <quorem+0xf6>

0800d660 <memchr>:
 800d660:	4603      	mov	r3, r0
 800d662:	b510      	push	{r4, lr}
 800d664:	b2c9      	uxtb	r1, r1
 800d666:	4402      	add	r2, r0
 800d668:	4293      	cmp	r3, r2
 800d66a:	4618      	mov	r0, r3
 800d66c:	d101      	bne.n	800d672 <memchr+0x12>
 800d66e:	2000      	movs	r0, #0
 800d670:	e003      	b.n	800d67a <memchr+0x1a>
 800d672:	7804      	ldrb	r4, [r0, #0]
 800d674:	3301      	adds	r3, #1
 800d676:	428c      	cmp	r4, r1
 800d678:	d1f6      	bne.n	800d668 <memchr+0x8>
 800d67a:	bd10      	pop	{r4, pc}

0800d67c <__hi0bits>:
 800d67c:	0c02      	lsrs	r2, r0, #16
 800d67e:	0412      	lsls	r2, r2, #16
 800d680:	4603      	mov	r3, r0
 800d682:	b9ca      	cbnz	r2, 800d6b8 <__hi0bits+0x3c>
 800d684:	0403      	lsls	r3, r0, #16
 800d686:	2010      	movs	r0, #16
 800d688:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d68c:	bf04      	itt	eq
 800d68e:	021b      	lsleq	r3, r3, #8
 800d690:	3008      	addeq	r0, #8
 800d692:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d696:	bf04      	itt	eq
 800d698:	011b      	lsleq	r3, r3, #4
 800d69a:	3004      	addeq	r0, #4
 800d69c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d6a0:	bf04      	itt	eq
 800d6a2:	009b      	lsleq	r3, r3, #2
 800d6a4:	3002      	addeq	r0, #2
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	db05      	blt.n	800d6b6 <__hi0bits+0x3a>
 800d6aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d6ae:	f100 0001 	add.w	r0, r0, #1
 800d6b2:	bf08      	it	eq
 800d6b4:	2020      	moveq	r0, #32
 800d6b6:	4770      	bx	lr
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	e7e5      	b.n	800d688 <__hi0bits+0xc>

0800d6bc <__lo0bits>:
 800d6bc:	6803      	ldr	r3, [r0, #0]
 800d6be:	4602      	mov	r2, r0
 800d6c0:	f013 0007 	ands.w	r0, r3, #7
 800d6c4:	d00b      	beq.n	800d6de <__lo0bits+0x22>
 800d6c6:	07d9      	lsls	r1, r3, #31
 800d6c8:	d421      	bmi.n	800d70e <__lo0bits+0x52>
 800d6ca:	0798      	lsls	r0, r3, #30
 800d6cc:	bf49      	itett	mi
 800d6ce:	085b      	lsrmi	r3, r3, #1
 800d6d0:	089b      	lsrpl	r3, r3, #2
 800d6d2:	2001      	movmi	r0, #1
 800d6d4:	6013      	strmi	r3, [r2, #0]
 800d6d6:	bf5c      	itt	pl
 800d6d8:	2002      	movpl	r0, #2
 800d6da:	6013      	strpl	r3, [r2, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	b299      	uxth	r1, r3
 800d6e0:	b909      	cbnz	r1, 800d6e6 <__lo0bits+0x2a>
 800d6e2:	2010      	movs	r0, #16
 800d6e4:	0c1b      	lsrs	r3, r3, #16
 800d6e6:	b2d9      	uxtb	r1, r3
 800d6e8:	b909      	cbnz	r1, 800d6ee <__lo0bits+0x32>
 800d6ea:	3008      	adds	r0, #8
 800d6ec:	0a1b      	lsrs	r3, r3, #8
 800d6ee:	0719      	lsls	r1, r3, #28
 800d6f0:	bf04      	itt	eq
 800d6f2:	091b      	lsreq	r3, r3, #4
 800d6f4:	3004      	addeq	r0, #4
 800d6f6:	0799      	lsls	r1, r3, #30
 800d6f8:	bf04      	itt	eq
 800d6fa:	089b      	lsreq	r3, r3, #2
 800d6fc:	3002      	addeq	r0, #2
 800d6fe:	07d9      	lsls	r1, r3, #31
 800d700:	d403      	bmi.n	800d70a <__lo0bits+0x4e>
 800d702:	085b      	lsrs	r3, r3, #1
 800d704:	f100 0001 	add.w	r0, r0, #1
 800d708:	d003      	beq.n	800d712 <__lo0bits+0x56>
 800d70a:	6013      	str	r3, [r2, #0]
 800d70c:	4770      	bx	lr
 800d70e:	2000      	movs	r0, #0
 800d710:	4770      	bx	lr
 800d712:	2020      	movs	r0, #32
 800d714:	4770      	bx	lr

0800d716 <__mcmp>:
 800d716:	4603      	mov	r3, r0
 800d718:	690a      	ldr	r2, [r1, #16]
 800d71a:	6900      	ldr	r0, [r0, #16]
 800d71c:	b530      	push	{r4, r5, lr}
 800d71e:	1a80      	subs	r0, r0, r2
 800d720:	d10d      	bne.n	800d73e <__mcmp+0x28>
 800d722:	3314      	adds	r3, #20
 800d724:	3114      	adds	r1, #20
 800d726:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d72a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d72e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d732:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d736:	4295      	cmp	r5, r2
 800d738:	d002      	beq.n	800d740 <__mcmp+0x2a>
 800d73a:	d304      	bcc.n	800d746 <__mcmp+0x30>
 800d73c:	2001      	movs	r0, #1
 800d73e:	bd30      	pop	{r4, r5, pc}
 800d740:	42a3      	cmp	r3, r4
 800d742:	d3f4      	bcc.n	800d72e <__mcmp+0x18>
 800d744:	e7fb      	b.n	800d73e <__mcmp+0x28>
 800d746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d74a:	e7f8      	b.n	800d73e <__mcmp+0x28>

0800d74c <_calloc_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	fb02 f501 	mul.w	r5, r2, r1
 800d752:	4629      	mov	r1, r5
 800d754:	f7fc f990 	bl	8009a78 <_malloc_r>
 800d758:	4604      	mov	r4, r0
 800d75a:	b118      	cbz	r0, 800d764 <_calloc_r+0x18>
 800d75c:	462a      	mov	r2, r5
 800d75e:	2100      	movs	r1, #0
 800d760:	f7ff fdbf 	bl	800d2e2 <memset>
 800d764:	4620      	mov	r0, r4
 800d766:	bd38      	pop	{r3, r4, r5, pc}

0800d768 <__ascii_mbtowc>:
 800d768:	b082      	sub	sp, #8
 800d76a:	b901      	cbnz	r1, 800d76e <__ascii_mbtowc+0x6>
 800d76c:	a901      	add	r1, sp, #4
 800d76e:	b142      	cbz	r2, 800d782 <__ascii_mbtowc+0x1a>
 800d770:	b14b      	cbz	r3, 800d786 <__ascii_mbtowc+0x1e>
 800d772:	7813      	ldrb	r3, [r2, #0]
 800d774:	600b      	str	r3, [r1, #0]
 800d776:	7812      	ldrb	r2, [r2, #0]
 800d778:	1e10      	subs	r0, r2, #0
 800d77a:	bf18      	it	ne
 800d77c:	2001      	movne	r0, #1
 800d77e:	b002      	add	sp, #8
 800d780:	4770      	bx	lr
 800d782:	4610      	mov	r0, r2
 800d784:	e7fb      	b.n	800d77e <__ascii_mbtowc+0x16>
 800d786:	f06f 0001 	mvn.w	r0, #1
 800d78a:	e7f8      	b.n	800d77e <__ascii_mbtowc+0x16>

0800d78c <__sfputc_r>:
 800d78c:	6893      	ldr	r3, [r2, #8]
 800d78e:	b410      	push	{r4}
 800d790:	3b01      	subs	r3, #1
 800d792:	2b00      	cmp	r3, #0
 800d794:	6093      	str	r3, [r2, #8]
 800d796:	da07      	bge.n	800d7a8 <__sfputc_r+0x1c>
 800d798:	6994      	ldr	r4, [r2, #24]
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	db01      	blt.n	800d7a2 <__sfputc_r+0x16>
 800d79e:	290a      	cmp	r1, #10
 800d7a0:	d102      	bne.n	800d7a8 <__sfputc_r+0x1c>
 800d7a2:	bc10      	pop	{r4}
 800d7a4:	f7fd b9ac 	b.w	800ab00 <__swbuf_r>
 800d7a8:	6813      	ldr	r3, [r2, #0]
 800d7aa:	1c58      	adds	r0, r3, #1
 800d7ac:	6010      	str	r0, [r2, #0]
 800d7ae:	7019      	strb	r1, [r3, #0]
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	bc10      	pop	{r4}
 800d7b4:	4770      	bx	lr

0800d7b6 <__sfputs_r>:
 800d7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	460f      	mov	r7, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	18d5      	adds	r5, r2, r3
 800d7c0:	42ac      	cmp	r4, r5
 800d7c2:	d101      	bne.n	800d7c8 <__sfputs_r+0x12>
 800d7c4:	2000      	movs	r0, #0
 800d7c6:	e007      	b.n	800d7d8 <__sfputs_r+0x22>
 800d7c8:	463a      	mov	r2, r7
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d0:	f7ff ffdc 	bl	800d78c <__sfputc_r>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d1f3      	bne.n	800d7c0 <__sfputs_r+0xa>
 800d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7da <__ascii_wctomb>:
 800d7da:	4603      	mov	r3, r0
 800d7dc:	4608      	mov	r0, r1
 800d7de:	b141      	cbz	r1, 800d7f2 <__ascii_wctomb+0x18>
 800d7e0:	2aff      	cmp	r2, #255	; 0xff
 800d7e2:	d904      	bls.n	800d7ee <__ascii_wctomb+0x14>
 800d7e4:	228a      	movs	r2, #138	; 0x8a
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	4770      	bx	lr
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	700a      	strb	r2, [r1, #0]
 800d7f2:	4770      	bx	lr

0800d7f4 <abort>:
 800d7f4:	2006      	movs	r0, #6
 800d7f6:	b508      	push	{r3, lr}
 800d7f8:	f7fd fc00 	bl	800affc <raise>
 800d7fc:	2001      	movs	r0, #1
 800d7fe:	f7f7 f851 	bl	80048a4 <_exit>

0800d802 <__sfmoreglue>:
 800d802:	2268      	movs	r2, #104	; 0x68
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	1e4d      	subs	r5, r1, #1
 800d808:	4355      	muls	r5, r2
 800d80a:	460e      	mov	r6, r1
 800d80c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d810:	f7fc f932 	bl	8009a78 <_malloc_r>
 800d814:	4604      	mov	r4, r0
 800d816:	b140      	cbz	r0, 800d82a <__sfmoreglue+0x28>
 800d818:	2100      	movs	r1, #0
 800d81a:	e9c0 1600 	strd	r1, r6, [r0]
 800d81e:	300c      	adds	r0, #12
 800d820:	60a0      	str	r0, [r4, #8]
 800d822:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d826:	f7ff fd5c 	bl	800d2e2 <memset>
 800d82a:	4620      	mov	r0, r4
 800d82c:	bd70      	pop	{r4, r5, r6, pc}

0800d82e <_fwalk_reent>:
 800d82e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d832:	4606      	mov	r6, r0
 800d834:	4688      	mov	r8, r1
 800d836:	2700      	movs	r7, #0
 800d838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d83c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d840:	f1b9 0901 	subs.w	r9, r9, #1
 800d844:	d505      	bpl.n	800d852 <_fwalk_reent+0x24>
 800d846:	6824      	ldr	r4, [r4, #0]
 800d848:	2c00      	cmp	r4, #0
 800d84a:	d1f7      	bne.n	800d83c <_fwalk_reent+0xe>
 800d84c:	4638      	mov	r0, r7
 800d84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d907      	bls.n	800d868 <_fwalk_reent+0x3a>
 800d858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d85c:	3301      	adds	r3, #1
 800d85e:	d003      	beq.n	800d868 <_fwalk_reent+0x3a>
 800d860:	4629      	mov	r1, r5
 800d862:	4630      	mov	r0, r6
 800d864:	47c0      	blx	r8
 800d866:	4307      	orrs	r7, r0
 800d868:	3568      	adds	r5, #104	; 0x68
 800d86a:	e7e9      	b.n	800d840 <_fwalk_reent+0x12>

0800d86c <__swhatbuf_r>:
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	460e      	mov	r6, r1
 800d870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d874:	4614      	mov	r4, r2
 800d876:	2900      	cmp	r1, #0
 800d878:	461d      	mov	r5, r3
 800d87a:	b096      	sub	sp, #88	; 0x58
 800d87c:	da08      	bge.n	800d890 <__swhatbuf_r+0x24>
 800d87e:	2200      	movs	r2, #0
 800d880:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d884:	602a      	str	r2, [r5, #0]
 800d886:	061a      	lsls	r2, r3, #24
 800d888:	d410      	bmi.n	800d8ac <__swhatbuf_r+0x40>
 800d88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d88e:	e00e      	b.n	800d8ae <__swhatbuf_r+0x42>
 800d890:	466a      	mov	r2, sp
 800d892:	f7fd fbef 	bl	800b074 <_fstat_r>
 800d896:	2800      	cmp	r0, #0
 800d898:	dbf1      	blt.n	800d87e <__swhatbuf_r+0x12>
 800d89a:	9a01      	ldr	r2, [sp, #4]
 800d89c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8a4:	425a      	negs	r2, r3
 800d8a6:	415a      	adcs	r2, r3
 800d8a8:	602a      	str	r2, [r5, #0]
 800d8aa:	e7ee      	b.n	800d88a <__swhatbuf_r+0x1e>
 800d8ac:	2340      	movs	r3, #64	; 0x40
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	b016      	add	sp, #88	; 0x58
 800d8b4:	bd70      	pop	{r4, r5, r6, pc}

0800d8b6 <_raise_r>:
 800d8b6:	291f      	cmp	r1, #31
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	460d      	mov	r5, r1
 800d8be:	d904      	bls.n	800d8ca <_raise_r+0x14>
 800d8c0:	2316      	movs	r3, #22
 800d8c2:	6003      	str	r3, [r0, #0]
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8c8:	bd38      	pop	{r3, r4, r5, pc}
 800d8ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8cc:	b112      	cbz	r2, 800d8d4 <_raise_r+0x1e>
 800d8ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8d2:	b94b      	cbnz	r3, 800d8e8 <_raise_r+0x32>
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f000 f816 	bl	800d906 <_getpid_r>
 800d8da:	462a      	mov	r2, r5
 800d8dc:	4601      	mov	r1, r0
 800d8de:	4620      	mov	r0, r4
 800d8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8e4:	f7fd bb92 	b.w	800b00c <_kill_r>
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d00a      	beq.n	800d902 <_raise_r+0x4c>
 800d8ec:	1c59      	adds	r1, r3, #1
 800d8ee:	d103      	bne.n	800d8f8 <_raise_r+0x42>
 800d8f0:	2316      	movs	r3, #22
 800d8f2:	6003      	str	r3, [r0, #0]
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	e7e7      	b.n	800d8c8 <_raise_r+0x12>
 800d8f8:	2400      	movs	r4, #0
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d900:	4798      	blx	r3
 800d902:	2000      	movs	r0, #0
 800d904:	e7e0      	b.n	800d8c8 <_raise_r+0x12>

0800d906 <_getpid_r>:
 800d906:	f7fe b9a0 	b.w	800bc4a <_getpid>

0800d90a <__sread>:
 800d90a:	b510      	push	{r4, lr}
 800d90c:	460c      	mov	r4, r1
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f7fd fbe3 	bl	800b0dc <_read_r>
 800d916:	2800      	cmp	r0, #0
 800d918:	bfab      	itete	ge
 800d91a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d91c:	89a3      	ldrhlt	r3, [r4, #12]
 800d91e:	181b      	addge	r3, r3, r0
 800d920:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d924:	bfac      	ite	ge
 800d926:	6563      	strge	r3, [r4, #84]	; 0x54
 800d928:	81a3      	strhlt	r3, [r4, #12]
 800d92a:	bd10      	pop	{r4, pc}

0800d92c <__swrite>:
 800d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d930:	461f      	mov	r7, r3
 800d932:	898b      	ldrh	r3, [r1, #12]
 800d934:	4605      	mov	r5, r0
 800d936:	05db      	lsls	r3, r3, #23
 800d938:	460c      	mov	r4, r1
 800d93a:	4616      	mov	r6, r2
 800d93c:	d505      	bpl.n	800d94a <__swrite+0x1e>
 800d93e:	2302      	movs	r3, #2
 800d940:	2200      	movs	r2, #0
 800d942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d946:	f7fd fbb7 	bl	800b0b8 <_lseek_r>
 800d94a:	89a3      	ldrh	r3, [r4, #12]
 800d94c:	4632      	mov	r2, r6
 800d94e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d952:	81a3      	strh	r3, [r4, #12]
 800d954:	4628      	mov	r0, r5
 800d956:	463b      	mov	r3, r7
 800d958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d960:	f7fd bb66 	b.w	800b030 <_write_r>

0800d964 <__sseek>:
 800d964:	b510      	push	{r4, lr}
 800d966:	460c      	mov	r4, r1
 800d968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96c:	f7fd fba4 	bl	800b0b8 <_lseek_r>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	bf15      	itete	ne
 800d976:	6560      	strne	r0, [r4, #84]	; 0x54
 800d978:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d97c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d980:	81a3      	strheq	r3, [r4, #12]
 800d982:	bf18      	it	ne
 800d984:	81a3      	strhne	r3, [r4, #12]
 800d986:	bd10      	pop	{r4, pc}

0800d988 <__sclose>:
 800d988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d98c:	f7fd bb62 	b.w	800b054 <_close_r>

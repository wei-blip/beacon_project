
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 32 00 20 79 2b 00 08 35 26 00 08 4d 2b 00 08     .2. y+..5&..M+..
 8000010:	4d 2b 00 08 4d 2b 00 08 4d 2b 00 08 00 00 00 00     M+..M+..M+......
	...
 800002c:	75 27 00 08 4d 2b 00 08 00 00 00 00 e5 26 00 08     u'..M+.......&..
 800003c:	81 7f 00 08                                         ....

08000040 <_irq_vector_table>:
 8000040:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000050:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000060:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000070:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000080:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000090:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000a0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000b0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000c0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000d0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000e0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 80000f0:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000100:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000110:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000120:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000130:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000140:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000150:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000160:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000170:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000180:	09 29 00 08 09 29 00 08 09 29 00 08 09 29 00 08     .)...)...)...)..
 8000190:	09 29 00 08                                         .)..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba2:	4688      	mov	r8, r1
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	4604      	mov	r4, r0
 8000baa:	4619      	mov	r1, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 80c7 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb2:	4542      	cmp	r2, r8
 8000bb4:	fab2 f782 	clz	r7, r2
 8000bb8:	d946      	bls.n	8000c48 <__udivmoddi4+0xac>
 8000bba:	b14f      	cbz	r7, 8000bd0 <__udivmoddi4+0x34>
 8000bbc:	f1c7 0c20 	rsb	ip, r7, #32
 8000bc0:	fa08 f307 	lsl.w	r3, r8, r7
 8000bc4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bc8:	40bd      	lsls	r5, r7
 8000bca:	ea4c 0e03 	orr.w	lr, ip, r3
 8000bce:	40bc      	lsls	r4, r7
 8000bd0:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd4:	fa1f fc85 	uxth.w	ip, r5
 8000bd8:	fbbe f9f8 	udiv	r9, lr, r8
 8000bdc:	0c22      	lsrs	r2, r4, #16
 8000bde:	fb08 e319 	mls	r3, r8, r9, lr
 8000be2:	fb09 fa0c 	mul.w	sl, r9, ip
 8000be6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bea:	459a      	cmp	sl, r3
 8000bec:	d928      	bls.n	8000c40 <__udivmoddi4+0xa4>
 8000bee:	18eb      	adds	r3, r5, r3
 8000bf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf4:	d204      	bcs.n	8000c00 <__udivmoddi4+0x64>
 8000bf6:	459a      	cmp	sl, r3
 8000bf8:	d902      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bfa:	f1a9 0002 	sub.w	r0, r9, #2
 8000bfe:	442b      	add	r3, r5
 8000c00:	eba3 030a 	sub.w	r3, r3, sl
 8000c04:	b2a4      	uxth	r4, r4
 8000c06:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0a:	fb08 3312 	mls	r3, r8, r2, r3
 8000c0e:	fb02 fc0c 	mul.w	ip, r2, ip
 8000c12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0xa8>
 8000c1a:	192c      	adds	r4, r5, r4
 8000c1c:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c20:	d203      	bcs.n	8000c2a <__udivmoddi4+0x8e>
 8000c22:	45a4      	cmp	ip, r4
 8000c24:	d901      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c26:	1e93      	subs	r3, r2, #2
 8000c28:	442c      	add	r4, r5
 8000c2a:	eba4 040c 	sub.w	r4, r4, ip
 8000c2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c32:	b11e      	cbz	r6, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40fc      	lsrs	r4, r7
 8000c36:	2300      	movs	r3, #0
 8000c38:	6034      	str	r4, [r6, #0]
 8000c3a:	6073      	str	r3, [r6, #4]
 8000c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c40:	4648      	mov	r0, r9
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0x64>
 8000c44:	4613      	mov	r3, r2
 8000c46:	e7f0      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000c48:	b902      	cbnz	r2, 8000c4c <__udivmoddi4+0xb0>
 8000c4a:	deff      	udf	#255	; 0xff
 8000c4c:	bb8f      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c4e:	eba8 0302 	sub.w	r3, r8, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7bd      	b.n	8000c2e <__udivmoddi4+0x92>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa28 f90c 	lsr.w	r9, r8, ip
 8000cba:	fa08 f307 	lsl.w	r3, r8, r7
 8000cbe:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb9 fcfe 	udiv	ip, r9, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 901c 	mls	r0, lr, ip, r9
 8000cd8:	fb0c f803 	mul.w	r8, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4580      	cmp	r8, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4580      	cmp	r8, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0008 	sub.w	r0, r0, r8
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4543      	cmp	r3, r8
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 0800 	strd	r0, r8, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e775      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000d50:	fab3 fc83 	clz	ip, r3
 8000d54:	f1bc 0f00 	cmp.w	ip, #0
 8000d58:	d110      	bne.n	8000d7c <__udivmoddi4+0x1e0>
 8000d5a:	4543      	cmp	r3, r8
 8000d5c:	d301      	bcc.n	8000d62 <__udivmoddi4+0x1c6>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	d80a      	bhi.n	8000d78 <__udivmoddi4+0x1dc>
 8000d62:	1a84      	subs	r4, r0, r2
 8000d64:	eb68 0303 	sbc.w	r3, r8, r3
 8000d68:	2001      	movs	r0, #1
 8000d6a:	469e      	mov	lr, r3
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d068      	beq.n	8000e42 <__udivmoddi4+0x2a6>
 8000d70:	e9c6 4e00 	strd	r4, lr, [r6]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e761      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000d78:	4660      	mov	r0, ip
 8000d7a:	e7f7      	b.n	8000d6c <__udivmoddi4+0x1d0>
 8000d7c:	f1cc 0e20 	rsb	lr, ip, #32
 8000d80:	fa03 f30c 	lsl.w	r3, r3, ip
 8000d84:	fa22 f40e 	lsr.w	r4, r2, lr
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f10e 	lsr.w	r1, r0, lr
 8000d8e:	fa08 f30c 	lsl.w	r3, r8, ip
 8000d92:	fa28 fb0e 	lsr.w	fp, r8, lr
 8000d96:	4319      	orrs	r1, r3
 8000d98:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d9c:	fa02 f50c 	lsl.w	r5, r2, ip
 8000da0:	fbbb f8f9 	udiv	r8, fp, r9
 8000da4:	b2a3      	uxth	r3, r4
 8000da6:	fb09 bb18 	mls	fp, r9, r8, fp
 8000daa:	0c0a      	lsrs	r2, r1, #16
 8000dac:	fb08 fa03 	mul.w	sl, r8, r3
 8000db0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db4:	4592      	cmp	sl, r2
 8000db6:	fa00 f70c 	lsl.w	r7, r0, ip
 8000dba:	d93e      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000dbc:	18a2      	adds	r2, r4, r2
 8000dbe:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dc2:	d204      	bcs.n	8000dce <__udivmoddi4+0x232>
 8000dc4:	4592      	cmp	sl, r2
 8000dc6:	d902      	bls.n	8000dce <__udivmoddi4+0x232>
 8000dc8:	f1a8 0002 	sub.w	r0, r8, #2
 8000dcc:	4422      	add	r2, r4
 8000dce:	eba2 020a 	sub.w	r2, r2, sl
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd8:	fb09 2218 	mls	r2, r9, r8, r2
 8000ddc:	fb08 f303 	mul.w	r3, r8, r3
 8000de0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d92a      	bls.n	8000e3e <__udivmoddi4+0x2a2>
 8000de8:	18a2      	adds	r2, r4, r2
 8000dea:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000dee:	d204      	bcs.n	8000dfa <__udivmoddi4+0x25e>
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d902      	bls.n	8000dfa <__udivmoddi4+0x25e>
 8000df4:	f1a8 0102 	sub.w	r1, r8, #2
 8000df8:	4422      	add	r2, r4
 8000dfa:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000dfe:	fba0 9805 	umull	r9, r8, r0, r5
 8000e02:	1ad2      	subs	r2, r2, r3
 8000e04:	4542      	cmp	r2, r8
 8000e06:	464b      	mov	r3, r9
 8000e08:	4641      	mov	r1, r8
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0x276>
 8000e0c:	d106      	bne.n	8000e1c <__udivmoddi4+0x280>
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	d204      	bcs.n	8000e1c <__udivmoddi4+0x280>
 8000e12:	ebb9 0305 	subs.w	r3, r9, r5
 8000e16:	eb68 0104 	sbc.w	r1, r8, r4
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	b18e      	cbz	r6, 8000e42 <__udivmoddi4+0x2a6>
 8000e1e:	1afc      	subs	r4, r7, r3
 8000e20:	eb62 0701 	sbc.w	r7, r2, r1
 8000e24:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e28:	fa24 f30c 	lsr.w	r3, r4, ip
 8000e2c:	ea4e 0303 	orr.w	r3, lr, r3
 8000e30:	fa27 f70c 	lsr.w	r7, r7, ip
 8000e34:	e9c6 3700 	strd	r3, r7, [r6]
 8000e38:	e79c      	b.n	8000d74 <__udivmoddi4+0x1d8>
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	e7c7      	b.n	8000dce <__udivmoddi4+0x232>
 8000e3e:	4641      	mov	r1, r8
 8000e40:	e7db      	b.n	8000dfa <__udivmoddi4+0x25e>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e6fa      	b.n	8000c3c <__udivmoddi4+0xa0>

08000e46 <strcmp>:
 8000e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4e:	2a01      	cmp	r2, #1
 8000e50:	bf28      	it	cs
 8000e52:	429a      	cmpcs	r2, r3
 8000e54:	d0f7      	beq.n	8000e46 <strcmp>
 8000e56:	1ad0      	subs	r0, r2, r3
 8000e58:	4770      	bx	lr

08000e5a <strlen>:
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	d1fb      	bne.n	8000e5c <strlen+0x2>
 8000e64:	1a18      	subs	r0, r3, r0
 8000e66:	3801      	subs	r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	0000      	movs	r0, r0
 8000e6c:	0000      	movs	r0, r0
	...

08000e70 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
 8000e70:	b500      	push	{lr}
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8000e72:	230a      	movs	r3, #10
 8000e74:	b083      	sub	sp, #12
 8000e76:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8000e90 <RtcSetAlarm+0x20>
 8000e7a:	fba0 2303 	umull	r2, r3, r0, r3
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <RtcSetAlarm+0x28>)
 8000e80:	ed8d 7b00 	vstr	d7, [sp]
 8000e84:	f00a fc92 	bl	800b7ac <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8000e88:	b003      	add	sp, #12
 8000e8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e8e:	bf00      	nop
	...
 8000e98:	20000628 	.word	0x20000628
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000ea2:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000ea4:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000ea6:	6820      	ldr	r0, [r4, #0]
static int ws2812_pwm_init(const struct device *dev) {
 8000ea8:	b083      	sub	sp, #12
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000eaa:	f009 f845 	bl	8009f38 <z_device_is_ready>
    if (!device_is_ready(cfg->pwm.dev)) {
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d03d      	beq.n	8000f2e <ws2812_pwm_init+0x8e>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000eb2:	7e21      	ldrb	r1, [r4, #24]
 8000eb4:	b179      	cbz	r1, 8000ed6 <ws2812_pwm_init+0x36>
        switch (cfg->color_mapping[i]) {
 8000eb6:	69e2      	ldr	r2, [r4, #28]
 8000eb8:	3901      	subs	r1, #1
 8000eba:	1e53      	subs	r3, r2, #1
 8000ebc:	fa52 f181 	uxtab	r1, r2, r1
 8000ec0:	e001      	b.n	8000ec6 <ws2812_pwm_init+0x26>
    for (i = 0; i < cfg->num_colors; i++) {
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d007      	beq.n	8000ed6 <ws2812_pwm_init+0x36>
        switch (cfg->color_mapping[i]) {
 8000ec6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000eca:	2a03      	cmp	r2, #3
 8000ecc:	d9f9      	bls.n	8000ec2 <ws2812_pwm_init+0x22>
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ece:	f06f 0015 	mvn.w	r0, #21
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);

    return 0;
}
 8000ed2:	b003      	add	sp, #12
 8000ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000ed6:	e9d4 0100 	ldrd	r0, r1, [r4]
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000eda:	6883      	ldr	r3, [r0, #8]
 8000edc:	466a      	mov	r2, sp
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4798      	blx	r3
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ee2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8000ee4:	9d00      	ldr	r5, [sp, #0]
 8000ee6:	9f01      	ldr	r7, [sp, #4]
 8000ee8:	fba3 0105 	umull	r0, r1, r3, r5
 8000eec:	fb03 1107 	mla	r1, r3, r7, r1
 8000ef0:	a311      	add	r3, pc, #68	; (adr r3, 8000f38 <ws2812_pwm_init+0x98>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fd71 	bl	80009dc <__aeabi_uldivmod>
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000efa:	8c21      	ldrh	r1, [r4, #32]
    ctx->pwm_period_cycles = (uint32_t)
 8000efc:	6030      	str	r0, [r6, #0]
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000efe:	fba1 0c05 	umull	r0, ip, r1, r5
 8000f02:	a30d      	add	r3, pc, #52	; (adr r3, 8000f38 <ws2812_pwm_init+0x98>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	fb01 c107 	mla	r1, r1, r7, ip
 8000f0c:	f7ff fd66 	bl	80009dc <__aeabi_uldivmod>
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f10:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f12:	6070      	str	r0, [r6, #4]
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f14:	fba3 0105 	umull	r0, r1, r3, r5
 8000f18:	fb03 1107 	mla	r1, r3, r7, r1
 8000f1c:	a306      	add	r3, pc, #24	; (adr r3, 8000f38 <ws2812_pwm_init+0x98>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fd5b 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f26:	60b0      	str	r0, [r6, #8]
    return 0;
 8000f28:	2000      	movs	r0, #0
}
 8000f2a:	b003      	add	sp, #12
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -ENODEV;
 8000f2e:	f06f 0012 	mvn.w	r0, #18
 8000f32:	e7fa      	b.n	8000f2a <ws2812_pwm_init+0x8a>
 8000f34:	f3af 8000 	nop.w
 8000f38:	3b9aca00 	.word	0x3b9aca00
 8000f3c:	00000000 	.word	0x00000000

08000f40 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
 8000f48:	ed9f 8b51 	vldr	d8, [pc, #324]	; 8001090 <work_queue_main+0x150>
 8000f4c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 800109c <work_queue_main+0x15c>
{
 8000f50:	b087      	sub	sp, #28
 8000f52:	4605      	mov	r5, r0
 8000f54:	f100 09d0 	add.w	r9, r0, #208	; 0xd0
 8000f58:	f100 0ad8 	add.w	sl, r0, #216	; 0xd8

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8000f5c:	2700      	movs	r7, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000f5e:	f04f 0310 	mov.w	r3, #16
 8000f62:	f3ef 8611 	mrs	r6, BASEPRI
 8000f66:	f383 8812 	msr	BASEPRI_MAX, r3
 8000f6a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8000f6e:	f8d5 40c8 	ldr.w	r4, [r5, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d063      	beq.n	800103e <work_queue_main+0xfe>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8000f76:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
	return node->next;
 8000f7a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8000f7c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8000f80:	4294      	cmp	r4, r2
	list->tail = node;
 8000f82:	bf08      	it	eq
 8000f84:	f8c5 30cc 	streq.w	r3, [r5, #204]	; 0xcc
	*flagp |= BIT(bit);
 8000f88:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
			handler = work->handler;
 8000f8c:	6862      	ldr	r2, [r4, #4]
	*flagp |= BIT(bit);
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	*flagp &= ~BIT(bit);
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000fa2:	f386 8811 	msr	BASEPRI, r6
 8000fa6:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8000faa:	4620      	mov	r0, r4
 8000fac:	4790      	blx	r2
	__asm__ volatile(
 8000fae:	f04f 0310 	mov.w	r3, #16
 8000fb2:	f3ef 8211 	mrs	r2, BASEPRI
 8000fb6:	f383 8812 	msr	BASEPRI_MAX, r3
 8000fba:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8000fbe:	68e3      	ldr	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8000fc0:	0798      	lsls	r0, r3, #30
	*flagp &= ~BIT(bit);
 8000fc2:	f023 0101 	bic.w	r1, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8000fc6:	d40f      	bmi.n	8000fe8 <work_queue_main+0xa8>
	*flagp &= ~BIT(bit);
 8000fc8:	60e1      	str	r1, [r4, #12]
 8000fca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000fce:	f023 0302 	bic.w	r3, r3, #2
 8000fd2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
	__asm__ volatile(
 8000fd6:	f382 8811 	msr	BASEPRI, r2
 8000fda:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	d4bd      	bmi.n	8000f5e <work_queue_main+0x1e>
	z_impl_k_yield();
 8000fe2:	f00a f857 	bl	800b094 <z_impl_k_yield>
}
 8000fe6:	e7ba      	b.n	8000f5e <work_queue_main+0x1e>
	return list->head;
 8000fe8:	f8d8 0000 	ldr.w	r0, [r8]
	*flagp &= ~BIT(bit);
 8000fec:	f023 0303 	bic.w	r3, r3, #3
 8000ff0:	60e3      	str	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d0e9      	beq.n	8000fca <work_queue_main+0x8a>
		if (wc->work == work) {
 8000ff6:	6843      	ldr	r3, [r0, #4]
	return node->next;
 8000ff8:	6806      	ldr	r6, [r0, #0]
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	f04f 0b00 	mov.w	fp, #0
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8001000:	4601      	mov	r1, r0
		if (wc->work == work) {
 8001002:	d008      	beq.n	8001016 <work_queue_main+0xd6>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8001004:	2e00      	cmp	r6, #0
 8001006:	d0e0      	beq.n	8000fca <work_queue_main+0x8a>
 8001008:	4630      	mov	r0, r6
 800100a:	468b      	mov	fp, r1
		if (wc->work == work) {
 800100c:	6843      	ldr	r3, [r0, #4]
 800100e:	6836      	ldr	r6, [r6, #0]
 8001010:	429c      	cmp	r4, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 8001012:	4601      	mov	r1, r0
		if (wc->work == work) {
 8001014:	d1f6      	bne.n	8001004 <work_queue_main+0xc4>
 8001016:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8001018:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800101c:	f1bb 0f00 	cmp.w	fp, #0
 8001020:	d02d      	beq.n	800107e <work_queue_main+0x13e>
 8001022:	4298      	cmp	r0, r3
	parent->next = child;
 8001024:	f8cb 1000 	str.w	r1, [fp]
	list->tail = node;
 8001028:	bf08      	it	eq
 800102a:	f8c8 b004 	streq.w	fp, [r8, #4]
	parent->next = child;
 800102e:	f840 7b08 	str.w	r7, [r0], #8
 8001032:	9205      	str	r2, [sp, #20]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001034:	f009 fb34 	bl	800a6a0 <z_impl_k_sem_give>
}
 8001038:	9a05      	ldr	r2, [sp, #20]
 800103a:	4659      	mov	r1, fp
 800103c:	e7e2      	b.n	8001004 <work_queue_main+0xc4>
	return (*flagp & BIT(bit)) != 0U;
 800103e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	*flagp &= ~BIT(bit);
 8001042:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
 8001046:	075c      	lsls	r4, r3, #29
	*flagp &= ~BIT(bit);
 8001048:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
		} else if (flag_test_and_clear(&queue->flags,
 800104c:	d408      	bmi.n	8001060 <work_queue_main+0x120>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800104e:	ed8d 8b00 	vstr	d8, [sp]
 8001052:	9702      	str	r7, [sp, #8]
 8001054:	464a      	mov	r2, r9
 8001056:	4631      	mov	r1, r6
 8001058:	480f      	ldr	r0, [pc, #60]	; (8001098 <work_queue_main+0x158>)
 800105a:	f00a f9d1 	bl	800b400 <z_sched_wait>
			continue;
 800105e:	e77e      	b.n	8000f5e <work_queue_main+0x1e>
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8001060:	2200      	movs	r2, #0
 8001062:	2101      	movs	r1, #1
 8001064:	4650      	mov	r0, sl
 8001066:	f00a f997 	bl	800b398 <z_sched_wake>
 800106a:	2800      	cmp	r0, #0
 800106c:	d0ef      	beq.n	800104e <work_queue_main+0x10e>
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	4650      	mov	r0, sl
 8001074:	f00a f990 	bl	800b398 <z_sched_wake>
 8001078:	2800      	cmp	r0, #0
 800107a:	d1f1      	bne.n	8001060 <work_queue_main+0x120>
 800107c:	e7e7      	b.n	800104e <work_queue_main+0x10e>
Z_GENLIST_REMOVE(slist, snode)
 800107e:	4298      	cmp	r0, r3
	list->head = node;
 8001080:	f8c8 1000 	str.w	r1, [r8]
Z_GENLIST_REMOVE(slist, snode)
 8001084:	d1d3      	bne.n	800102e <work_queue_main+0xee>
	list->tail = node;
 8001086:	f8c8 1004 	str.w	r1, [r8, #4]
}
 800108a:	e7d0      	b.n	800102e <work_queue_main+0xee>
 800108c:	f3af 8000 	nop.w
 8001090:	ffffffff 	.word	0xffffffff
 8001094:	ffffffff 	.word	0xffffffff
 8001098:	2000147c 	.word	0x2000147c
 800109c:	20001480 	.word	0x20001480

080010a0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 80010a0:	b530      	push	{r4, r5, lr}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	4604      	mov	r4, r0
	list->head = NULL;
 80010a6:	2000      	movs	r0, #0
	list->tail = NULL;
 80010a8:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
 80010ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 80010ae:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
 80010b2:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
 80010b6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 80010ba:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 80010be:	b30d      	cbz	r5, 8001104 <k_work_queue_start+0x64>
 80010c0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
 80010c2:	2800      	cmp	r0, #0
 80010c4:	f240 1001 	movw	r0, #257	; 0x101
 80010c8:	bf08      	it	eq
 80010ca:	2001      	moveq	r0, #1
	*flagp = flags;
 80010cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8001108 <k_work_queue_start+0x68>
 80010d0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 80010d4:	2000      	movs	r0, #0
 80010d6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80010da:	9303      	str	r3, [sp, #12]
 80010dc:	9004      	str	r0, [sp, #16]
 80010de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <k_work_queue_start+0x70>)
 80010e4:	9400      	str	r4, [sp, #0]
 80010e6:	4620      	mov	r0, r4
 80010e8:	f009 f848 	bl	800a17c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 80010ec:	b125      	cbz	r5, 80010f8 <k_work_queue_start+0x58>
 80010ee:	6829      	ldr	r1, [r5, #0]
 80010f0:	b111      	cbz	r1, 80010f8 <k_work_queue_start+0x58>
	return z_impl_k_thread_name_set(thread, str);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f009 f80c 	bl	800a110 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80010f8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80010fa:	b009      	add	sp, #36	; 0x24
 80010fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001100:	f009 b80a 	b.w	800a118 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8001104:	2001      	movs	r0, #1
 8001106:	e7e1      	b.n	80010cc <k_work_queue_start+0x2c>
 8001108:	ffffffff 	.word	0xffffffff
 800110c:	ffffffff 	.word	0xffffffff
 8001110:	08000f41 	.word	0x08000f41
 8001114:	00000000 	.word	0x00000000

08001118 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8001118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800111c:	ed2d 8b02 	vpush	{d8}
 8001120:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8001122:	f009 fd83 	bl	800ac2c <z_time_slice>
	__asm__ volatile(
 8001126:	f04f 0310 	mov.w	r3, #16
 800112a:	f3ef 8511 	mrs	r5, BASEPRI
 800112e:	f383 8812 	msr	BASEPRI_MAX, r3
 8001132:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8001136:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800120c <sys_clock_announce+0xf4>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800113a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001210 <sys_clock_announce+0xf8>
 800113e:	f8d9 4000 	ldr.w	r4, [r9]
 8001142:	f8c8 6000 	str.w	r6, [r8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001146:	454c      	cmp	r4, r9
 8001148:	d04d      	beq.n	80011e6 <sys_clock_announce+0xce>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
 800114a:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8001200 <sys_clock_announce+0xe8>
 800114e:	4f2e      	ldr	r7, [pc, #184]	; (8001208 <sys_clock_announce+0xf0>)
 8001150:	462b      	mov	r3, r5
		curr_tick += dt;
 8001152:	e9d7 2100 	ldrd	r2, r1, [r7]
		remove_timeout(t);
 8001156:	4620      	mov	r0, r4
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8001158:	ea4f 7ce6 	mov.w	ip, r6, asr #31
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
 800115c:	461d      	mov	r5, r3
 800115e:	b354      	cbz	r4, 80011b6 <sys_clock_announce+0x9e>
 8001160:	6923      	ldr	r3, [r4, #16]
 8001162:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8001166:	429e      	cmp	r6, r3
 8001168:	eb7c 0b0e 	sbcs.w	fp, ip, lr
		announce_remaining -= dt;
 800116c:	eba6 0a03 	sub.w	sl, r6, r3
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8001170:	db3d      	blt.n	80011ee <sys_clock_announce+0xd6>
		curr_tick += dt;
 8001172:	189a      	adds	r2, r3, r2
 8001174:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
		t->dticks = 0;
 8001178:	ed84 8b04 	vstr	d8, [r4, #16]
		curr_tick += dt;
 800117c:	e9c7 2300 	strd	r2, r3, [r7]
		announce_remaining -= dt;
 8001180:	f8c8 a000 	str.w	sl, [r8]
		remove_timeout(t);
 8001184:	f00a f96e 	bl	800b464 <remove_timeout>
	__asm__ volatile(
 8001188:	f385 8811 	msr	BASEPRI, r5
 800118c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8001190:	68a3      	ldr	r3, [r4, #8]
 8001192:	4798      	blx	r3
	__asm__ volatile(
 8001194:	f04f 0310 	mov.w	r3, #16
 8001198:	f3ef 8511 	mrs	r5, BASEPRI
 800119c:	f383 8812 	msr	BASEPRI_MAX, r3
 80011a0:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80011a4:	f8d9 4000 	ldr.w	r4, [r9]
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80011a8:	f8d8 6000 	ldr.w	r6, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80011ac:	454c      	cmp	r4, r9
	k.key = arch_irq_lock();
 80011ae:	462b      	mov	r3, r5
 80011b0:	d1cf      	bne.n	8001152 <sys_clock_announce+0x3a>
 80011b2:	ea4f 7ce6 	mov.w	ip, r6, asr #31

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	199b      	adds	r3, r3, r6
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
	announce_remaining = 0;
 80011be:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
 80011c2:	eb43 030c 	adc.w	r3, r3, ip
 80011c6:	607b      	str	r3, [r7, #4]
	announce_remaining = 0;
 80011c8:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
 80011cc:	f00a f966 	bl	800b49c <next_timeout>
 80011d0:	4621      	mov	r1, r4
 80011d2:	f006 fefb 	bl	8007fcc <sys_clock_set_timeout>
	__asm__ volatile(
 80011d6:	f385 8811 	msr	BASEPRI, r5
 80011da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80011de:	ecbd 8b02 	vpop	{d8}
 80011e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e6:	4f08      	ldr	r7, [pc, #32]	; (8001208 <sys_clock_announce+0xf0>)
 80011e8:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80011ec:	e7e3      	b.n	80011b6 <sys_clock_announce+0x9e>
		first()->dticks -= announce_remaining;
 80011ee:	1b9b      	subs	r3, r3, r6
 80011f0:	eb6e 010c 	sbc.w	r1, lr, ip
 80011f4:	6123      	str	r3, [r4, #16]
 80011f6:	6161      	str	r1, [r4, #20]
 80011f8:	e7dd      	b.n	80011b6 <sys_clock_announce+0x9e>
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
	...
 8001208:	20000c08 	.word	0x20000c08
 800120c:	20000370 	.word	0x20000370
 8001210:	20001494 	.word	0x20001494
 8001214:	00000000 	.word	0x00000000

08001218 <_dtoa_r>:
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	ed2d 8b04 	vpush	{d8-d9}
 8001220:	ec57 6b10 	vmov	r6, r7, d0
 8001224:	b093      	sub	sp, #76	; 0x4c
 8001226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800122c:	9106      	str	r1, [sp, #24]
 800122e:	ee10 aa10 	vmov	sl, s0
 8001232:	4604      	mov	r4, r0
 8001234:	9209      	str	r2, [sp, #36]	; 0x24
 8001236:	930c      	str	r3, [sp, #48]	; 0x30
 8001238:	46bb      	mov	fp, r7
 800123a:	b975      	cbnz	r5, 800125a <_dtoa_r+0x42>
 800123c:	2010      	movs	r0, #16
 800123e:	f00a fe89 	bl	800bf54 <malloc>
 8001242:	4602      	mov	r2, r0
 8001244:	6260      	str	r0, [r4, #36]	; 0x24
 8001246:	b920      	cbnz	r0, 8001252 <_dtoa_r+0x3a>
 8001248:	4ba7      	ldr	r3, [pc, #668]	; (80014e8 <_dtoa_r+0x2d0>)
 800124a:	21ea      	movs	r1, #234	; 0xea
 800124c:	48a7      	ldr	r0, [pc, #668]	; (80014ec <_dtoa_r+0x2d4>)
 800124e:	f00b fdc3 	bl	800cdd8 <__assert_func>
 8001252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8001256:	6005      	str	r5, [r0, #0]
 8001258:	60c5      	str	r5, [r0, #12]
 800125a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	b151      	cbz	r1, 8001276 <_dtoa_r+0x5e>
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	604a      	str	r2, [r1, #4]
 8001264:	2301      	movs	r3, #1
 8001266:	4093      	lsls	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
 800126a:	4620      	mov	r0, r4
 800126c:	f00b fadc 	bl	800c828 <_Bfree>
 8001270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	1e3b      	subs	r3, r7, #0
 8001278:	bfaa      	itet	ge
 800127a:	2300      	movge	r3, #0
 800127c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8001280:	f8c8 3000 	strge.w	r3, [r8]
 8001284:	4b9a      	ldr	r3, [pc, #616]	; (80014f0 <_dtoa_r+0x2d8>)
 8001286:	bfbc      	itt	lt
 8001288:	2201      	movlt	r2, #1
 800128a:	f8c8 2000 	strlt.w	r2, [r8]
 800128e:	ea33 030b 	bics.w	r3, r3, fp
 8001292:	d11b      	bne.n	80012cc <_dtoa_r+0xb4>
 8001294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001296:	f242 730f 	movw	r3, #9999	; 0x270f
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80012a0:	4333      	orrs	r3, r6
 80012a2:	f000 8592 	beq.w	8001dca <_dtoa_r+0xbb2>
 80012a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80012a8:	b963      	cbnz	r3, 80012c4 <_dtoa_r+0xac>
 80012aa:	4b92      	ldr	r3, [pc, #584]	; (80014f4 <_dtoa_r+0x2dc>)
 80012ac:	e022      	b.n	80012f4 <_dtoa_r+0xdc>
 80012ae:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <_dtoa_r+0x2e0>)
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	3308      	adds	r3, #8
 80012b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	9801      	ldr	r0, [sp, #4]
 80012ba:	b013      	add	sp, #76	; 0x4c
 80012bc:	ecbd 8b04 	vpop	{d8-d9}
 80012c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c4:	4b8b      	ldr	r3, [pc, #556]	; (80014f4 <_dtoa_r+0x2dc>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	3303      	adds	r3, #3
 80012ca:	e7f3      	b.n	80012b4 <_dtoa_r+0x9c>
 80012cc:	2200      	movs	r2, #0
 80012ce:	2300      	movs	r3, #0
 80012d0:	4650      	mov	r0, sl
 80012d2:	4659      	mov	r1, fp
 80012d4:	f7ff fbf2 	bl	8000abc <__aeabi_dcmpeq>
 80012d8:	ec4b ab19 	vmov	d9, sl, fp
 80012dc:	4680      	mov	r8, r0
 80012de:	b158      	cbz	r0, 80012f8 <_dtoa_r+0xe0>
 80012e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80012e2:	2301      	movs	r3, #1
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 856b 	beq.w	8001dc4 <_dtoa_r+0xbac>
 80012ee:	4883      	ldr	r0, [pc, #524]	; (80014fc <_dtoa_r+0x2e4>)
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	1e43      	subs	r3, r0, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	e7df      	b.n	80012b8 <_dtoa_r+0xa0>
 80012f8:	ec4b ab10 	vmov	d0, sl, fp
 80012fc:	aa10      	add	r2, sp, #64	; 0x40
 80012fe:	a911      	add	r1, sp, #68	; 0x44
 8001300:	4620      	mov	r0, r4
 8001302:	f00b fd0d 	bl	800cd20 <__d2b>
 8001306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800130a:	ee08 0a10 	vmov	s16, r0
 800130e:	2d00      	cmp	r5, #0
 8001310:	f000 8084 	beq.w	800141c <_dtoa_r+0x204>
 8001314:	ee19 3a90 	vmov	r3, s19
 8001318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800131c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8001320:	4656      	mov	r6, sl
 8001322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8001326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800132a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800132e:	4b74      	ldr	r3, [pc, #464]	; (8001500 <_dtoa_r+0x2e8>)
 8001330:	2200      	movs	r2, #0
 8001332:	4630      	mov	r0, r6
 8001334:	4639      	mov	r1, r7
 8001336:	f7fe ff87 	bl	8000248 <__aeabi_dsub>
 800133a:	a365      	add	r3, pc, #404	; (adr r3, 80014d0 <_dtoa_r+0x2b8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff f93a 	bl	80005b8 <__aeabi_dmul>
 8001344:	a364      	add	r3, pc, #400	; (adr r3, 80014d8 <_dtoa_r+0x2c0>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7fe ff7f 	bl	800024c <__adddf3>
 800134e:	4606      	mov	r6, r0
 8001350:	4628      	mov	r0, r5
 8001352:	460f      	mov	r7, r1
 8001354:	f7ff f8c6 	bl	80004e4 <__aeabi_i2d>
 8001358:	a361      	add	r3, pc, #388	; (adr r3, 80014e0 <_dtoa_r+0x2c8>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7ff f92b 	bl	80005b8 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4630      	mov	r0, r6
 8001368:	4639      	mov	r1, r7
 800136a:	f7fe ff6f 	bl	800024c <__adddf3>
 800136e:	4606      	mov	r6, r0
 8001370:	460f      	mov	r7, r1
 8001372:	f7ff fbeb 	bl	8000b4c <__aeabi_d2iz>
 8001376:	2200      	movs	r2, #0
 8001378:	9000      	str	r0, [sp, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	4630      	mov	r0, r6
 800137e:	4639      	mov	r1, r7
 8001380:	f7ff fba6 	bl	8000ad0 <__aeabi_dcmplt>
 8001384:	b150      	cbz	r0, 800139c <_dtoa_r+0x184>
 8001386:	9800      	ldr	r0, [sp, #0]
 8001388:	f7ff f8ac 	bl	80004e4 <__aeabi_i2d>
 800138c:	4632      	mov	r2, r6
 800138e:	463b      	mov	r3, r7
 8001390:	f7ff fb94 	bl	8000abc <__aeabi_dcmpeq>
 8001394:	b910      	cbnz	r0, 800139c <_dtoa_r+0x184>
 8001396:	9b00      	ldr	r3, [sp, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	2b16      	cmp	r3, #22
 80013a0:	d85a      	bhi.n	8001458 <_dtoa_r+0x240>
 80013a2:	9a00      	ldr	r2, [sp, #0]
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <_dtoa_r+0x2ec>)
 80013a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	ec51 0b19 	vmov	r0, r1, d9
 80013b2:	f7ff fb8d 	bl	8000ad0 <__aeabi_dcmplt>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d050      	beq.n	800145c <_dtoa_r+0x244>
 80013ba:	9b00      	ldr	r3, [sp, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2300      	movs	r3, #0
 80013c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80013c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80013c6:	1b5d      	subs	r5, r3, r5
 80013c8:	1e6b      	subs	r3, r5, #1
 80013ca:	9305      	str	r3, [sp, #20]
 80013cc:	bf45      	ittet	mi
 80013ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80013d2:	9304      	strmi	r3, [sp, #16]
 80013d4:	2300      	movpl	r3, #0
 80013d6:	2300      	movmi	r3, #0
 80013d8:	bf4c      	ite	mi
 80013da:	9305      	strmi	r3, [sp, #20]
 80013dc:	9304      	strpl	r3, [sp, #16]
 80013de:	9b00      	ldr	r3, [sp, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db3d      	blt.n	8001460 <_dtoa_r+0x248>
 80013e4:	9b05      	ldr	r3, [sp, #20]
 80013e6:	9a00      	ldr	r2, [sp, #0]
 80013e8:	920a      	str	r2, [sp, #40]	; 0x28
 80013ea:	4413      	add	r3, r2
 80013ec:	9305      	str	r3, [sp, #20]
 80013ee:	2300      	movs	r3, #0
 80013f0:	9307      	str	r3, [sp, #28]
 80013f2:	9b06      	ldr	r3, [sp, #24]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	f200 8089 	bhi.w	800150c <_dtoa_r+0x2f4>
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	bfc4      	itt	gt
 80013fe:	3b04      	subgt	r3, #4
 8001400:	9306      	strgt	r3, [sp, #24]
 8001402:	9b06      	ldr	r3, [sp, #24]
 8001404:	f1a3 0302 	sub.w	r3, r3, #2
 8001408:	bfcc      	ite	gt
 800140a:	2500      	movgt	r5, #0
 800140c:	2501      	movle	r5, #1
 800140e:	2b03      	cmp	r3, #3
 8001410:	f200 8087 	bhi.w	8001522 <_dtoa_r+0x30a>
 8001414:	e8df f003 	tbb	[pc, r3]
 8001418:	59383a2d 	.word	0x59383a2d
 800141c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8001420:	441d      	add	r5, r3
 8001422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8001426:	2b20      	cmp	r3, #32
 8001428:	bfc1      	itttt	gt
 800142a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800142e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8001432:	fa0b f303 	lslgt.w	r3, fp, r3
 8001436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800143a:	bfda      	itte	le
 800143c:	f1c3 0320 	rsble	r3, r3, #32
 8001440:	fa06 f003 	lslle.w	r0, r6, r3
 8001444:	4318      	orrgt	r0, r3
 8001446:	f7ff f83d 	bl	80004c4 <__aeabi_ui2d>
 800144a:	2301      	movs	r3, #1
 800144c:	4606      	mov	r6, r0
 800144e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8001452:	3d01      	subs	r5, #1
 8001454:	930e      	str	r3, [sp, #56]	; 0x38
 8001456:	e76a      	b.n	800132e <_dtoa_r+0x116>
 8001458:	2301      	movs	r3, #1
 800145a:	e7b2      	b.n	80013c2 <_dtoa_r+0x1aa>
 800145c:	900b      	str	r0, [sp, #44]	; 0x2c
 800145e:	e7b1      	b.n	80013c4 <_dtoa_r+0x1ac>
 8001460:	9b04      	ldr	r3, [sp, #16]
 8001462:	9a00      	ldr	r2, [sp, #0]
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	9304      	str	r3, [sp, #16]
 8001468:	4253      	negs	r3, r2
 800146a:	9307      	str	r3, [sp, #28]
 800146c:	2300      	movs	r3, #0
 800146e:	930a      	str	r3, [sp, #40]	; 0x28
 8001470:	e7bf      	b.n	80013f2 <_dtoa_r+0x1da>
 8001472:	2300      	movs	r3, #0
 8001474:	9308      	str	r3, [sp, #32]
 8001476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001478:	2b00      	cmp	r3, #0
 800147a:	dc55      	bgt.n	8001528 <_dtoa_r+0x310>
 800147c:	2301      	movs	r3, #1
 800147e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001482:	461a      	mov	r2, r3
 8001484:	9209      	str	r2, [sp, #36]	; 0x24
 8001486:	e00c      	b.n	80014a2 <_dtoa_r+0x28a>
 8001488:	2301      	movs	r3, #1
 800148a:	e7f3      	b.n	8001474 <_dtoa_r+0x25c>
 800148c:	2300      	movs	r3, #0
 800148e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001490:	9308      	str	r3, [sp, #32]
 8001492:	9b00      	ldr	r3, [sp, #0]
 8001494:	4413      	add	r3, r2
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	bfb8      	it	lt
 80014a0:	2301      	movlt	r3, #1
 80014a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014a4:	2200      	movs	r2, #0
 80014a6:	6042      	str	r2, [r0, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	f102 0614 	add.w	r6, r2, #20
 80014ae:	429e      	cmp	r6, r3
 80014b0:	6841      	ldr	r1, [r0, #4]
 80014b2:	d93d      	bls.n	8001530 <_dtoa_r+0x318>
 80014b4:	4620      	mov	r0, r4
 80014b6:	f00b f977 	bl	800c7a8 <_Balloc>
 80014ba:	9001      	str	r0, [sp, #4]
 80014bc:	2800      	cmp	r0, #0
 80014be:	d13b      	bne.n	8001538 <_dtoa_r+0x320>
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_dtoa_r+0x2f0>)
 80014c2:	4602      	mov	r2, r0
 80014c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80014c8:	e6c0      	b.n	800124c <_dtoa_r+0x34>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e7df      	b.n	800148e <_dtoa_r+0x276>
 80014ce:	bf00      	nop
 80014d0:	636f4361 	.word	0x636f4361
 80014d4:	3fd287a7 	.word	0x3fd287a7
 80014d8:	8b60c8b3 	.word	0x8b60c8b3
 80014dc:	3fc68a28 	.word	0x3fc68a28
 80014e0:	509f79fb 	.word	0x509f79fb
 80014e4:	3fd34413 	.word	0x3fd34413
 80014e8:	0800ecce 	.word	0x0800ecce
 80014ec:	0800ece5 	.word	0x0800ece5
 80014f0:	7ff00000 	.word	0x7ff00000
 80014f4:	0800ecca 	.word	0x0800ecca
 80014f8:	0800ecc1 	.word	0x0800ecc1
 80014fc:	0800ec9e 	.word	0x0800ec9e
 8001500:	3ff80000 	.word	0x3ff80000
 8001504:	0800e348 	.word	0x0800e348
 8001508:	0800ed3f 	.word	0x0800ed3f
 800150c:	2501      	movs	r5, #1
 800150e:	2300      	movs	r3, #0
 8001510:	9306      	str	r3, [sp, #24]
 8001512:	9508      	str	r5, [sp, #32]
 8001514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800151c:	2200      	movs	r2, #0
 800151e:	2312      	movs	r3, #18
 8001520:	e7b0      	b.n	8001484 <_dtoa_r+0x26c>
 8001522:	2301      	movs	r3, #1
 8001524:	9308      	str	r3, [sp, #32]
 8001526:	e7f5      	b.n	8001514 <_dtoa_r+0x2fc>
 8001528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800152a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800152e:	e7b8      	b.n	80014a2 <_dtoa_r+0x28a>
 8001530:	3101      	adds	r1, #1
 8001532:	6041      	str	r1, [r0, #4]
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	e7b8      	b.n	80014aa <_dtoa_r+0x292>
 8001538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	9b03      	ldr	r3, [sp, #12]
 8001540:	2b0e      	cmp	r3, #14
 8001542:	f200 809d 	bhi.w	8001680 <_dtoa_r+0x468>
 8001546:	2d00      	cmp	r5, #0
 8001548:	f000 809a 	beq.w	8001680 <_dtoa_r+0x468>
 800154c:	9b00      	ldr	r3, [sp, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	dd32      	ble.n	80015b8 <_dtoa_r+0x3a0>
 8001552:	4ab7      	ldr	r2, [pc, #732]	; (8001830 <_dtoa_r+0x618>)
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800155c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001560:	9b00      	ldr	r3, [sp, #0]
 8001562:	05d8      	lsls	r0, r3, #23
 8001564:	ea4f 1723 	mov.w	r7, r3, asr #4
 8001568:	d516      	bpl.n	8001598 <_dtoa_r+0x380>
 800156a:	4bb2      	ldr	r3, [pc, #712]	; (8001834 <_dtoa_r+0x61c>)
 800156c:	ec51 0b19 	vmov	r0, r1, d9
 8001570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001574:	f7ff f94a 	bl	800080c <__aeabi_ddiv>
 8001578:	f007 070f 	and.w	r7, r7, #15
 800157c:	4682      	mov	sl, r0
 800157e:	468b      	mov	fp, r1
 8001580:	2503      	movs	r5, #3
 8001582:	4eac      	ldr	r6, [pc, #688]	; (8001834 <_dtoa_r+0x61c>)
 8001584:	b957      	cbnz	r7, 800159c <_dtoa_r+0x384>
 8001586:	4642      	mov	r2, r8
 8001588:	464b      	mov	r3, r9
 800158a:	4650      	mov	r0, sl
 800158c:	4659      	mov	r1, fp
 800158e:	f7ff f93d 	bl	800080c <__aeabi_ddiv>
 8001592:	4682      	mov	sl, r0
 8001594:	468b      	mov	fp, r1
 8001596:	e028      	b.n	80015ea <_dtoa_r+0x3d2>
 8001598:	2502      	movs	r5, #2
 800159a:	e7f2      	b.n	8001582 <_dtoa_r+0x36a>
 800159c:	07f9      	lsls	r1, r7, #31
 800159e:	d508      	bpl.n	80015b2 <_dtoa_r+0x39a>
 80015a0:	4640      	mov	r0, r8
 80015a2:	4649      	mov	r1, r9
 80015a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80015a8:	f7ff f806 	bl	80005b8 <__aeabi_dmul>
 80015ac:	3501      	adds	r5, #1
 80015ae:	4680      	mov	r8, r0
 80015b0:	4689      	mov	r9, r1
 80015b2:	107f      	asrs	r7, r7, #1
 80015b4:	3608      	adds	r6, #8
 80015b6:	e7e5      	b.n	8001584 <_dtoa_r+0x36c>
 80015b8:	f000 809b 	beq.w	80016f2 <_dtoa_r+0x4da>
 80015bc:	9b00      	ldr	r3, [sp, #0]
 80015be:	4f9d      	ldr	r7, [pc, #628]	; (8001834 <_dtoa_r+0x61c>)
 80015c0:	425e      	negs	r6, r3
 80015c2:	4b9b      	ldr	r3, [pc, #620]	; (8001830 <_dtoa_r+0x618>)
 80015c4:	f006 020f 	and.w	r2, r6, #15
 80015c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	ec51 0b19 	vmov	r0, r1, d9
 80015d4:	f7fe fff0 	bl	80005b8 <__aeabi_dmul>
 80015d8:	1136      	asrs	r6, r6, #4
 80015da:	4682      	mov	sl, r0
 80015dc:	468b      	mov	fp, r1
 80015de:	2300      	movs	r3, #0
 80015e0:	2502      	movs	r5, #2
 80015e2:	2e00      	cmp	r6, #0
 80015e4:	d17a      	bne.n	80016dc <_dtoa_r+0x4c4>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1d3      	bne.n	8001592 <_dtoa_r+0x37a>
 80015ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8082 	beq.w	80016f6 <_dtoa_r+0x4de>
 80015f2:	4b91      	ldr	r3, [pc, #580]	; (8001838 <_dtoa_r+0x620>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	4650      	mov	r0, sl
 80015f8:	4659      	mov	r1, fp
 80015fa:	f7ff fa69 	bl	8000ad0 <__aeabi_dcmplt>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d079      	beq.n	80016f6 <_dtoa_r+0x4de>
 8001602:	9b03      	ldr	r3, [sp, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d076      	beq.n	80016f6 <_dtoa_r+0x4de>
 8001608:	9b02      	ldr	r3, [sp, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dd36      	ble.n	800167c <_dtoa_r+0x464>
 800160e:	9b00      	ldr	r3, [sp, #0]
 8001610:	4650      	mov	r0, sl
 8001612:	4659      	mov	r1, fp
 8001614:	1e5f      	subs	r7, r3, #1
 8001616:	2200      	movs	r2, #0
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <_dtoa_r+0x624>)
 800161a:	f7fe ffcd 	bl	80005b8 <__aeabi_dmul>
 800161e:	9e02      	ldr	r6, [sp, #8]
 8001620:	4682      	mov	sl, r0
 8001622:	468b      	mov	fp, r1
 8001624:	3501      	adds	r5, #1
 8001626:	4628      	mov	r0, r5
 8001628:	f7fe ff5c 	bl	80004e4 <__aeabi_i2d>
 800162c:	4652      	mov	r2, sl
 800162e:	465b      	mov	r3, fp
 8001630:	f7fe ffc2 	bl	80005b8 <__aeabi_dmul>
 8001634:	4b82      	ldr	r3, [pc, #520]	; (8001840 <_dtoa_r+0x628>)
 8001636:	2200      	movs	r2, #0
 8001638:	f7fe fe08 	bl	800024c <__adddf3>
 800163c:	46d0      	mov	r8, sl
 800163e:	46d9      	mov	r9, fp
 8001640:	4682      	mov	sl, r0
 8001642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8001646:	2e00      	cmp	r6, #0
 8001648:	d158      	bne.n	80016fc <_dtoa_r+0x4e4>
 800164a:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <_dtoa_r+0x62c>)
 800164c:	2200      	movs	r2, #0
 800164e:	4640      	mov	r0, r8
 8001650:	4649      	mov	r1, r9
 8001652:	f7fe fdf9 	bl	8000248 <__aeabi_dsub>
 8001656:	4652      	mov	r2, sl
 8001658:	465b      	mov	r3, fp
 800165a:	4680      	mov	r8, r0
 800165c:	4689      	mov	r9, r1
 800165e:	f7ff fa55 	bl	8000b0c <__aeabi_dcmpgt>
 8001662:	2800      	cmp	r0, #0
 8001664:	f040 8295 	bne.w	8001b92 <_dtoa_r+0x97a>
 8001668:	4652      	mov	r2, sl
 800166a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800166e:	4640      	mov	r0, r8
 8001670:	4649      	mov	r1, r9
 8001672:	f7ff fa2d 	bl	8000ad0 <__aeabi_dcmplt>
 8001676:	2800      	cmp	r0, #0
 8001678:	f040 8289 	bne.w	8001b8e <_dtoa_r+0x976>
 800167c:	ec5b ab19 	vmov	sl, fp, d9
 8001680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001682:	2b00      	cmp	r3, #0
 8001684:	f2c0 8148 	blt.w	8001918 <_dtoa_r+0x700>
 8001688:	9a00      	ldr	r2, [sp, #0]
 800168a:	2a0e      	cmp	r2, #14
 800168c:	f300 8144 	bgt.w	8001918 <_dtoa_r+0x700>
 8001690:	4b67      	ldr	r3, [pc, #412]	; (8001830 <_dtoa_r+0x618>)
 8001692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800169a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	f280 80d5 	bge.w	800184c <_dtoa_r+0x634>
 80016a2:	9b03      	ldr	r3, [sp, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f300 80d1 	bgt.w	800184c <_dtoa_r+0x634>
 80016aa:	f040 826f 	bne.w	8001b8c <_dtoa_r+0x974>
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <_dtoa_r+0x62c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	4640      	mov	r0, r8
 80016b4:	4649      	mov	r1, r9
 80016b6:	f7fe ff7f 	bl	80005b8 <__aeabi_dmul>
 80016ba:	4652      	mov	r2, sl
 80016bc:	465b      	mov	r3, fp
 80016be:	f7ff fa1b 	bl	8000af8 <__aeabi_dcmpge>
 80016c2:	9e03      	ldr	r6, [sp, #12]
 80016c4:	4637      	mov	r7, r6
 80016c6:	2800      	cmp	r0, #0
 80016c8:	f040 8245 	bne.w	8001b56 <_dtoa_r+0x93e>
 80016cc:	9d01      	ldr	r5, [sp, #4]
 80016ce:	2331      	movs	r3, #49	; 0x31
 80016d0:	f805 3b01 	strb.w	r3, [r5], #1
 80016d4:	9b00      	ldr	r3, [sp, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	e240      	b.n	8001b5e <_dtoa_r+0x946>
 80016dc:	07f2      	lsls	r2, r6, #31
 80016de:	d505      	bpl.n	80016ec <_dtoa_r+0x4d4>
 80016e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e4:	f7fe ff68 	bl	80005b8 <__aeabi_dmul>
 80016e8:	3501      	adds	r5, #1
 80016ea:	2301      	movs	r3, #1
 80016ec:	1076      	asrs	r6, r6, #1
 80016ee:	3708      	adds	r7, #8
 80016f0:	e777      	b.n	80015e2 <_dtoa_r+0x3ca>
 80016f2:	2502      	movs	r5, #2
 80016f4:	e779      	b.n	80015ea <_dtoa_r+0x3d2>
 80016f6:	9f00      	ldr	r7, [sp, #0]
 80016f8:	9e03      	ldr	r6, [sp, #12]
 80016fa:	e794      	b.n	8001626 <_dtoa_r+0x40e>
 80016fc:	9901      	ldr	r1, [sp, #4]
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <_dtoa_r+0x618>)
 8001700:	4431      	add	r1, r6
 8001702:	910d      	str	r1, [sp, #52]	; 0x34
 8001704:	9908      	ldr	r1, [sp, #32]
 8001706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800170a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800170e:	2900      	cmp	r1, #0
 8001710:	d043      	beq.n	800179a <_dtoa_r+0x582>
 8001712:	494d      	ldr	r1, [pc, #308]	; (8001848 <_dtoa_r+0x630>)
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff f879 	bl	800080c <__aeabi_ddiv>
 800171a:	4652      	mov	r2, sl
 800171c:	465b      	mov	r3, fp
 800171e:	f7fe fd93 	bl	8000248 <__aeabi_dsub>
 8001722:	9d01      	ldr	r5, [sp, #4]
 8001724:	4682      	mov	sl, r0
 8001726:	468b      	mov	fp, r1
 8001728:	4649      	mov	r1, r9
 800172a:	4640      	mov	r0, r8
 800172c:	f7ff fa0e 	bl	8000b4c <__aeabi_d2iz>
 8001730:	4606      	mov	r6, r0
 8001732:	f7fe fed7 	bl	80004e4 <__aeabi_i2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe fd83 	bl	8000248 <__aeabi_dsub>
 8001742:	3630      	adds	r6, #48	; 0x30
 8001744:	f805 6b01 	strb.w	r6, [r5], #1
 8001748:	4652      	mov	r2, sl
 800174a:	465b      	mov	r3, fp
 800174c:	4680      	mov	r8, r0
 800174e:	4689      	mov	r9, r1
 8001750:	f7ff f9be 	bl	8000ad0 <__aeabi_dcmplt>
 8001754:	2800      	cmp	r0, #0
 8001756:	d163      	bne.n	8001820 <_dtoa_r+0x608>
 8001758:	4642      	mov	r2, r8
 800175a:	464b      	mov	r3, r9
 800175c:	4936      	ldr	r1, [pc, #216]	; (8001838 <_dtoa_r+0x620>)
 800175e:	2000      	movs	r0, #0
 8001760:	f7fe fd72 	bl	8000248 <__aeabi_dsub>
 8001764:	4652      	mov	r2, sl
 8001766:	465b      	mov	r3, fp
 8001768:	f7ff f9b2 	bl	8000ad0 <__aeabi_dcmplt>
 800176c:	2800      	cmp	r0, #0
 800176e:	f040 80b5 	bne.w	80018dc <_dtoa_r+0x6c4>
 8001772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001774:	429d      	cmp	r5, r3
 8001776:	d081      	beq.n	800167c <_dtoa_r+0x464>
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <_dtoa_r+0x624>)
 800177a:	2200      	movs	r2, #0
 800177c:	4650      	mov	r0, sl
 800177e:	4659      	mov	r1, fp
 8001780:	f7fe ff1a 	bl	80005b8 <__aeabi_dmul>
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <_dtoa_r+0x624>)
 8001786:	4682      	mov	sl, r0
 8001788:	468b      	mov	fp, r1
 800178a:	4640      	mov	r0, r8
 800178c:	4649      	mov	r1, r9
 800178e:	2200      	movs	r2, #0
 8001790:	f7fe ff12 	bl	80005b8 <__aeabi_dmul>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	e7c6      	b.n	8001728 <_dtoa_r+0x510>
 800179a:	4650      	mov	r0, sl
 800179c:	4659      	mov	r1, fp
 800179e:	f7fe ff0b 	bl	80005b8 <__aeabi_dmul>
 80017a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80017a4:	9d01      	ldr	r5, [sp, #4]
 80017a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80017a8:	4682      	mov	sl, r0
 80017aa:	468b      	mov	fp, r1
 80017ac:	4649      	mov	r1, r9
 80017ae:	4640      	mov	r0, r8
 80017b0:	f7ff f9cc 	bl	8000b4c <__aeabi_d2iz>
 80017b4:	4606      	mov	r6, r0
 80017b6:	f7fe fe95 	bl	80004e4 <__aeabi_i2d>
 80017ba:	3630      	adds	r6, #48	; 0x30
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4640      	mov	r0, r8
 80017c2:	4649      	mov	r1, r9
 80017c4:	f7fe fd40 	bl	8000248 <__aeabi_dsub>
 80017c8:	f805 6b01 	strb.w	r6, [r5], #1
 80017cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80017ce:	429d      	cmp	r5, r3
 80017d0:	4680      	mov	r8, r0
 80017d2:	4689      	mov	r9, r1
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	d124      	bne.n	8001824 <_dtoa_r+0x60c>
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <_dtoa_r+0x630>)
 80017dc:	4650      	mov	r0, sl
 80017de:	4659      	mov	r1, fp
 80017e0:	f7fe fd34 	bl	800024c <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4640      	mov	r0, r8
 80017ea:	4649      	mov	r1, r9
 80017ec:	f7ff f98e 	bl	8000b0c <__aeabi_dcmpgt>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d173      	bne.n	80018dc <_dtoa_r+0x6c4>
 80017f4:	4652      	mov	r2, sl
 80017f6:	465b      	mov	r3, fp
 80017f8:	4913      	ldr	r1, [pc, #76]	; (8001848 <_dtoa_r+0x630>)
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7fe fd24 	bl	8000248 <__aeabi_dsub>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4640      	mov	r0, r8
 8001806:	4649      	mov	r1, r9
 8001808:	f7ff f962 	bl	8000ad0 <__aeabi_dcmplt>
 800180c:	2800      	cmp	r0, #0
 800180e:	f43f af35 	beq.w	800167c <_dtoa_r+0x464>
 8001812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8001814:	1e6b      	subs	r3, r5, #1
 8001816:	930f      	str	r3, [sp, #60]	; 0x3c
 8001818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800181c:	2b30      	cmp	r3, #48	; 0x30
 800181e:	d0f8      	beq.n	8001812 <_dtoa_r+0x5fa>
 8001820:	9700      	str	r7, [sp, #0]
 8001822:	e049      	b.n	80018b8 <_dtoa_r+0x6a0>
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <_dtoa_r+0x624>)
 8001826:	f7fe fec7 	bl	80005b8 <__aeabi_dmul>
 800182a:	4680      	mov	r8, r0
 800182c:	4689      	mov	r9, r1
 800182e:	e7bd      	b.n	80017ac <_dtoa_r+0x594>
 8001830:	0800e348 	.word	0x0800e348
 8001834:	0800e320 	.word	0x0800e320
 8001838:	3ff00000 	.word	0x3ff00000
 800183c:	40240000 	.word	0x40240000
 8001840:	401c0000 	.word	0x401c0000
 8001844:	40140000 	.word	0x40140000
 8001848:	3fe00000 	.word	0x3fe00000
 800184c:	9d01      	ldr	r5, [sp, #4]
 800184e:	4656      	mov	r6, sl
 8001850:	465f      	mov	r7, fp
 8001852:	4642      	mov	r2, r8
 8001854:	464b      	mov	r3, r9
 8001856:	4630      	mov	r0, r6
 8001858:	4639      	mov	r1, r7
 800185a:	f7fe ffd7 	bl	800080c <__aeabi_ddiv>
 800185e:	f7ff f975 	bl	8000b4c <__aeabi_d2iz>
 8001862:	4682      	mov	sl, r0
 8001864:	f7fe fe3e 	bl	80004e4 <__aeabi_i2d>
 8001868:	4642      	mov	r2, r8
 800186a:	464b      	mov	r3, r9
 800186c:	f7fe fea4 	bl	80005b8 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4630      	mov	r0, r6
 8001876:	4639      	mov	r1, r7
 8001878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800187c:	f7fe fce4 	bl	8000248 <__aeabi_dsub>
 8001880:	f805 6b01 	strb.w	r6, [r5], #1
 8001884:	9e01      	ldr	r6, [sp, #4]
 8001886:	9f03      	ldr	r7, [sp, #12]
 8001888:	1bae      	subs	r6, r5, r6
 800188a:	42b7      	cmp	r7, r6
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	d135      	bne.n	80018fe <_dtoa_r+0x6e6>
 8001892:	f7fe fcdb 	bl	800024c <__adddf3>
 8001896:	4642      	mov	r2, r8
 8001898:	464b      	mov	r3, r9
 800189a:	4606      	mov	r6, r0
 800189c:	460f      	mov	r7, r1
 800189e:	f7ff f935 	bl	8000b0c <__aeabi_dcmpgt>
 80018a2:	b9d0      	cbnz	r0, 80018da <_dtoa_r+0x6c2>
 80018a4:	4642      	mov	r2, r8
 80018a6:	464b      	mov	r3, r9
 80018a8:	4630      	mov	r0, r6
 80018aa:	4639      	mov	r1, r7
 80018ac:	f7ff f906 	bl	8000abc <__aeabi_dcmpeq>
 80018b0:	b110      	cbz	r0, 80018b8 <_dtoa_r+0x6a0>
 80018b2:	f01a 0f01 	tst.w	sl, #1
 80018b6:	d110      	bne.n	80018da <_dtoa_r+0x6c2>
 80018b8:	4620      	mov	r0, r4
 80018ba:	ee18 1a10 	vmov	r1, s16
 80018be:	f00a ffb3 	bl	800c828 <_Bfree>
 80018c2:	2300      	movs	r3, #0
 80018c4:	9800      	ldr	r0, [sp, #0]
 80018c6:	702b      	strb	r3, [r5, #0]
 80018c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018ca:	3001      	adds	r0, #1
 80018cc:	6018      	str	r0, [r3, #0]
 80018ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f43f acf1 	beq.w	80012b8 <_dtoa_r+0xa0>
 80018d6:	601d      	str	r5, [r3, #0]
 80018d8:	e4ee      	b.n	80012b8 <_dtoa_r+0xa0>
 80018da:	9f00      	ldr	r7, [sp, #0]
 80018dc:	462b      	mov	r3, r5
 80018de:	461d      	mov	r5, r3
 80018e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80018e4:	2a39      	cmp	r2, #57	; 0x39
 80018e6:	d106      	bne.n	80018f6 <_dtoa_r+0x6de>
 80018e8:	9a01      	ldr	r2, [sp, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d1f7      	bne.n	80018de <_dtoa_r+0x6c6>
 80018ee:	9901      	ldr	r1, [sp, #4]
 80018f0:	2230      	movs	r2, #48	; 0x30
 80018f2:	3701      	adds	r7, #1
 80018f4:	700a      	strb	r2, [r1, #0]
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	3201      	adds	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e790      	b.n	8001820 <_dtoa_r+0x608>
 80018fe:	4ba6      	ldr	r3, [pc, #664]	; (8001b98 <_dtoa_r+0x980>)
 8001900:	2200      	movs	r2, #0
 8001902:	f7fe fe59 	bl	80005b8 <__aeabi_dmul>
 8001906:	2200      	movs	r2, #0
 8001908:	2300      	movs	r3, #0
 800190a:	4606      	mov	r6, r0
 800190c:	460f      	mov	r7, r1
 800190e:	f7ff f8d5 	bl	8000abc <__aeabi_dcmpeq>
 8001912:	2800      	cmp	r0, #0
 8001914:	d09d      	beq.n	8001852 <_dtoa_r+0x63a>
 8001916:	e7cf      	b.n	80018b8 <_dtoa_r+0x6a0>
 8001918:	9a08      	ldr	r2, [sp, #32]
 800191a:	2a00      	cmp	r2, #0
 800191c:	f000 80d7 	beq.w	8001ace <_dtoa_r+0x8b6>
 8001920:	9a06      	ldr	r2, [sp, #24]
 8001922:	2a01      	cmp	r2, #1
 8001924:	f300 80ba 	bgt.w	8001a9c <_dtoa_r+0x884>
 8001928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800192a:	2a00      	cmp	r2, #0
 800192c:	f000 80b2 	beq.w	8001a94 <_dtoa_r+0x87c>
 8001930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001934:	9e07      	ldr	r6, [sp, #28]
 8001936:	9d04      	ldr	r5, [sp, #16]
 8001938:	9a04      	ldr	r2, [sp, #16]
 800193a:	441a      	add	r2, r3
 800193c:	9204      	str	r2, [sp, #16]
 800193e:	9a05      	ldr	r2, [sp, #20]
 8001940:	2101      	movs	r1, #1
 8001942:	441a      	add	r2, r3
 8001944:	4620      	mov	r0, r4
 8001946:	9205      	str	r2, [sp, #20]
 8001948:	f00a ffd6 	bl	800c8f8 <__i2b>
 800194c:	4607      	mov	r7, r0
 800194e:	2d00      	cmp	r5, #0
 8001950:	dd0c      	ble.n	800196c <_dtoa_r+0x754>
 8001952:	9b05      	ldr	r3, [sp, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dd09      	ble.n	800196c <_dtoa_r+0x754>
 8001958:	42ab      	cmp	r3, r5
 800195a:	9a04      	ldr	r2, [sp, #16]
 800195c:	bfa8      	it	ge
 800195e:	462b      	movge	r3, r5
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	9204      	str	r2, [sp, #16]
 8001964:	9a05      	ldr	r2, [sp, #20]
 8001966:	1aed      	subs	r5, r5, r3
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	9305      	str	r3, [sp, #20]
 800196c:	9b07      	ldr	r3, [sp, #28]
 800196e:	b31b      	cbz	r3, 80019b8 <_dtoa_r+0x7a0>
 8001970:	9b08      	ldr	r3, [sp, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80af 	beq.w	8001ad6 <_dtoa_r+0x8be>
 8001978:	2e00      	cmp	r6, #0
 800197a:	dd13      	ble.n	80019a4 <_dtoa_r+0x78c>
 800197c:	4639      	mov	r1, r7
 800197e:	4632      	mov	r2, r6
 8001980:	4620      	mov	r0, r4
 8001982:	f00b f879 	bl	800ca78 <__pow5mult>
 8001986:	ee18 2a10 	vmov	r2, s16
 800198a:	4601      	mov	r1, r0
 800198c:	4607      	mov	r7, r0
 800198e:	4620      	mov	r0, r4
 8001990:	f00a ffc8 	bl	800c924 <__multiply>
 8001994:	ee18 1a10 	vmov	r1, s16
 8001998:	4680      	mov	r8, r0
 800199a:	4620      	mov	r0, r4
 800199c:	f00a ff44 	bl	800c828 <_Bfree>
 80019a0:	ee08 8a10 	vmov	s16, r8
 80019a4:	9b07      	ldr	r3, [sp, #28]
 80019a6:	1b9a      	subs	r2, r3, r6
 80019a8:	d006      	beq.n	80019b8 <_dtoa_r+0x7a0>
 80019aa:	ee18 1a10 	vmov	r1, s16
 80019ae:	4620      	mov	r0, r4
 80019b0:	f00b f862 	bl	800ca78 <__pow5mult>
 80019b4:	ee08 0a10 	vmov	s16, r0
 80019b8:	2101      	movs	r1, #1
 80019ba:	4620      	mov	r0, r4
 80019bc:	f00a ff9c 	bl	800c8f8 <__i2b>
 80019c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	4606      	mov	r6, r0
 80019c6:	f340 8088 	ble.w	8001ada <_dtoa_r+0x8c2>
 80019ca:	461a      	mov	r2, r3
 80019cc:	4601      	mov	r1, r0
 80019ce:	4620      	mov	r0, r4
 80019d0:	f00b f852 	bl	800ca78 <__pow5mult>
 80019d4:	9b06      	ldr	r3, [sp, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	4606      	mov	r6, r0
 80019da:	f340 8081 	ble.w	8001ae0 <_dtoa_r+0x8c8>
 80019de:	f04f 0800 	mov.w	r8, #0
 80019e2:	6933      	ldr	r3, [r6, #16]
 80019e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80019e8:	6918      	ldr	r0, [r3, #16]
 80019ea:	f00c f807 	bl	800d9fc <__hi0bits>
 80019ee:	f1c0 0020 	rsb	r0, r0, #32
 80019f2:	9b05      	ldr	r3, [sp, #20]
 80019f4:	4418      	add	r0, r3
 80019f6:	f010 001f 	ands.w	r0, r0, #31
 80019fa:	f000 8092 	beq.w	8001b22 <_dtoa_r+0x90a>
 80019fe:	f1c0 0320 	rsb	r3, r0, #32
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	f340 808a 	ble.w	8001b1c <_dtoa_r+0x904>
 8001a08:	f1c0 001c 	rsb	r0, r0, #28
 8001a0c:	9b04      	ldr	r3, [sp, #16]
 8001a0e:	4403      	add	r3, r0
 8001a10:	9304      	str	r3, [sp, #16]
 8001a12:	9b05      	ldr	r3, [sp, #20]
 8001a14:	4403      	add	r3, r0
 8001a16:	4405      	add	r5, r0
 8001a18:	9305      	str	r3, [sp, #20]
 8001a1a:	9b04      	ldr	r3, [sp, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dd07      	ble.n	8001a30 <_dtoa_r+0x818>
 8001a20:	ee18 1a10 	vmov	r1, s16
 8001a24:	461a      	mov	r2, r3
 8001a26:	4620      	mov	r0, r4
 8001a28:	f00b f880 	bl	800cb2c <__lshift>
 8001a2c:	ee08 0a10 	vmov	s16, r0
 8001a30:	9b05      	ldr	r3, [sp, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	dd05      	ble.n	8001a42 <_dtoa_r+0x82a>
 8001a36:	4631      	mov	r1, r6
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f00b f876 	bl	800cb2c <__lshift>
 8001a40:	4606      	mov	r6, r0
 8001a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d06e      	beq.n	8001b26 <_dtoa_r+0x90e>
 8001a48:	ee18 0a10 	vmov	r0, s16
 8001a4c:	4631      	mov	r1, r6
 8001a4e:	f00c f824 	bl	800da9a <__mcmp>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	da67      	bge.n	8001b26 <_dtoa_r+0x90e>
 8001a56:	9b00      	ldr	r3, [sp, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	ee18 1a10 	vmov	r1, s16
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	220a      	movs	r2, #10
 8001a62:	2300      	movs	r3, #0
 8001a64:	4620      	mov	r0, r4
 8001a66:	f00a ff01 	bl	800c86c <__multadd>
 8001a6a:	9b08      	ldr	r3, [sp, #32]
 8001a6c:	ee08 0a10 	vmov	s16, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 81b1 	beq.w	8001dd8 <_dtoa_r+0xbc0>
 8001a76:	2300      	movs	r3, #0
 8001a78:	4639      	mov	r1, r7
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f00a fef5 	bl	800c86c <__multadd>
 8001a82:	9b02      	ldr	r3, [sp, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	4607      	mov	r7, r0
 8001a88:	f300 808e 	bgt.w	8001ba8 <_dtoa_r+0x990>
 8001a8c:	9b06      	ldr	r3, [sp, #24]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	dc51      	bgt.n	8001b36 <_dtoa_r+0x91e>
 8001a92:	e089      	b.n	8001ba8 <_dtoa_r+0x990>
 8001a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001a9a:	e74b      	b.n	8001934 <_dtoa_r+0x71c>
 8001a9c:	9b03      	ldr	r3, [sp, #12]
 8001a9e:	1e5e      	subs	r6, r3, #1
 8001aa0:	9b07      	ldr	r3, [sp, #28]
 8001aa2:	42b3      	cmp	r3, r6
 8001aa4:	bfbf      	itttt	lt
 8001aa6:	9b07      	ldrlt	r3, [sp, #28]
 8001aa8:	9607      	strlt	r6, [sp, #28]
 8001aaa:	1af2      	sublt	r2, r6, r3
 8001aac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001aae:	bfb6      	itet	lt
 8001ab0:	189b      	addlt	r3, r3, r2
 8001ab2:	1b9e      	subge	r6, r3, r6
 8001ab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8001ab6:	9b03      	ldr	r3, [sp, #12]
 8001ab8:	bfb8      	it	lt
 8001aba:	2600      	movlt	r6, #0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bfb7      	itett	lt
 8001ac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8001ac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8001ac8:	1a9d      	sublt	r5, r3, r2
 8001aca:	2300      	movlt	r3, #0
 8001acc:	e734      	b.n	8001938 <_dtoa_r+0x720>
 8001ace:	9e07      	ldr	r6, [sp, #28]
 8001ad0:	9d04      	ldr	r5, [sp, #16]
 8001ad2:	9f08      	ldr	r7, [sp, #32]
 8001ad4:	e73b      	b.n	800194e <_dtoa_r+0x736>
 8001ad6:	9a07      	ldr	r2, [sp, #28]
 8001ad8:	e767      	b.n	80019aa <_dtoa_r+0x792>
 8001ada:	9b06      	ldr	r3, [sp, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	dc18      	bgt.n	8001b12 <_dtoa_r+0x8fa>
 8001ae0:	f1ba 0f00 	cmp.w	sl, #0
 8001ae4:	d115      	bne.n	8001b12 <_dtoa_r+0x8fa>
 8001ae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8001aea:	b993      	cbnz	r3, 8001b12 <_dtoa_r+0x8fa>
 8001aec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8001af0:	0d1b      	lsrs	r3, r3, #20
 8001af2:	051b      	lsls	r3, r3, #20
 8001af4:	b183      	cbz	r3, 8001b18 <_dtoa_r+0x900>
 8001af6:	9b04      	ldr	r3, [sp, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	9304      	str	r3, [sp, #16]
 8001afc:	9b05      	ldr	r3, [sp, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	9305      	str	r3, [sp, #20]
 8001b02:	f04f 0801 	mov.w	r8, #1
 8001b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f47f af6a 	bne.w	80019e2 <_dtoa_r+0x7ca>
 8001b0e:	2001      	movs	r0, #1
 8001b10:	e76f      	b.n	80019f2 <_dtoa_r+0x7da>
 8001b12:	f04f 0800 	mov.w	r8, #0
 8001b16:	e7f6      	b.n	8001b06 <_dtoa_r+0x8ee>
 8001b18:	4698      	mov	r8, r3
 8001b1a:	e7f4      	b.n	8001b06 <_dtoa_r+0x8ee>
 8001b1c:	f43f af7d 	beq.w	8001a1a <_dtoa_r+0x802>
 8001b20:	4618      	mov	r0, r3
 8001b22:	301c      	adds	r0, #28
 8001b24:	e772      	b.n	8001a0c <_dtoa_r+0x7f4>
 8001b26:	9b03      	ldr	r3, [sp, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dc37      	bgt.n	8001b9c <_dtoa_r+0x984>
 8001b2c:	9b06      	ldr	r3, [sp, #24]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	dd34      	ble.n	8001b9c <_dtoa_r+0x984>
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	9b02      	ldr	r3, [sp, #8]
 8001b38:	b96b      	cbnz	r3, 8001b56 <_dtoa_r+0x93e>
 8001b3a:	4631      	mov	r1, r6
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f00a fe94 	bl	800c86c <__multadd>
 8001b44:	4601      	mov	r1, r0
 8001b46:	4606      	mov	r6, r0
 8001b48:	ee18 0a10 	vmov	r0, s16
 8001b4c:	f00b ffa5 	bl	800da9a <__mcmp>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	f73f adbb 	bgt.w	80016cc <_dtoa_r+0x4b4>
 8001b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b58:	9d01      	ldr	r5, [sp, #4]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	f04f 0800 	mov.w	r8, #0
 8001b62:	4631      	mov	r1, r6
 8001b64:	4620      	mov	r0, r4
 8001b66:	f00a fe5f 	bl	800c828 <_Bfree>
 8001b6a:	2f00      	cmp	r7, #0
 8001b6c:	f43f aea4 	beq.w	80018b8 <_dtoa_r+0x6a0>
 8001b70:	f1b8 0f00 	cmp.w	r8, #0
 8001b74:	d005      	beq.n	8001b82 <_dtoa_r+0x96a>
 8001b76:	45b8      	cmp	r8, r7
 8001b78:	d003      	beq.n	8001b82 <_dtoa_r+0x96a>
 8001b7a:	4641      	mov	r1, r8
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f00a fe53 	bl	800c828 <_Bfree>
 8001b82:	4639      	mov	r1, r7
 8001b84:	4620      	mov	r0, r4
 8001b86:	f00a fe4f 	bl	800c828 <_Bfree>
 8001b8a:	e695      	b.n	80018b8 <_dtoa_r+0x6a0>
 8001b8c:	2600      	movs	r6, #0
 8001b8e:	4637      	mov	r7, r6
 8001b90:	e7e1      	b.n	8001b56 <_dtoa_r+0x93e>
 8001b92:	9700      	str	r7, [sp, #0]
 8001b94:	4637      	mov	r7, r6
 8001b96:	e599      	b.n	80016cc <_dtoa_r+0x4b4>
 8001b98:	40240000 	.word	0x40240000
 8001b9c:	9b08      	ldr	r3, [sp, #32]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80ca 	beq.w	8001d38 <_dtoa_r+0xb20>
 8001ba4:	9b03      	ldr	r3, [sp, #12]
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2d00      	cmp	r5, #0
 8001baa:	dd05      	ble.n	8001bb8 <_dtoa_r+0x9a0>
 8001bac:	4639      	mov	r1, r7
 8001bae:	462a      	mov	r2, r5
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f00a ffbb 	bl	800cb2c <__lshift>
 8001bb6:	4607      	mov	r7, r0
 8001bb8:	f1b8 0f00 	cmp.w	r8, #0
 8001bbc:	d05b      	beq.n	8001c76 <_dtoa_r+0xa5e>
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f00a fdf1 	bl	800c7a8 <_Balloc>
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	b928      	cbnz	r0, 8001bd6 <_dtoa_r+0x9be>
 8001bca:	4b87      	ldr	r3, [pc, #540]	; (8001de8 <_dtoa_r+0xbd0>)
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8001bd2:	f7ff bb3b 	b.w	800124c <_dtoa_r+0x34>
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	3202      	adds	r2, #2
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	f107 010c 	add.w	r1, r7, #12
 8001be0:	300c      	adds	r0, #12
 8001be2:	f00b fd5d 	bl	800d6a0 <memcpy>
 8001be6:	2201      	movs	r2, #1
 8001be8:	4629      	mov	r1, r5
 8001bea:	4620      	mov	r0, r4
 8001bec:	f00a ff9e 	bl	800cb2c <__lshift>
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	f103 0901 	add.w	r9, r3, #1
 8001bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	9305      	str	r3, [sp, #20]
 8001bfe:	f00a 0301 	and.w	r3, sl, #1
 8001c02:	46b8      	mov	r8, r7
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	4607      	mov	r7, r0
 8001c08:	4631      	mov	r1, r6
 8001c0a:	ee18 0a10 	vmov	r0, s16
 8001c0e:	f00b fe6a 	bl	800d8e6 <quorem>
 8001c12:	4641      	mov	r1, r8
 8001c14:	9002      	str	r0, [sp, #8]
 8001c16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8001c1a:	ee18 0a10 	vmov	r0, s16
 8001c1e:	f00b ff3c 	bl	800da9a <__mcmp>
 8001c22:	463a      	mov	r2, r7
 8001c24:	9003      	str	r0, [sp, #12]
 8001c26:	4631      	mov	r1, r6
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f00a ffef 	bl	800cc0c <__mdiff>
 8001c2e:	68c2      	ldr	r2, [r0, #12]
 8001c30:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8001c34:	4605      	mov	r5, r0
 8001c36:	bb02      	cbnz	r2, 8001c7a <_dtoa_r+0xa62>
 8001c38:	4601      	mov	r1, r0
 8001c3a:	ee18 0a10 	vmov	r0, s16
 8001c3e:	f00b ff2c 	bl	800da9a <__mcmp>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4629      	mov	r1, r5
 8001c46:	4620      	mov	r0, r4
 8001c48:	9207      	str	r2, [sp, #28]
 8001c4a:	f00a fded 	bl	800c828 <_Bfree>
 8001c4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8001c52:	ea43 0102 	orr.w	r1, r3, r2
 8001c56:	9b04      	ldr	r3, [sp, #16]
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	464d      	mov	r5, r9
 8001c5c:	d10f      	bne.n	8001c7e <_dtoa_r+0xa66>
 8001c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8001c62:	d02a      	beq.n	8001cba <_dtoa_r+0xaa2>
 8001c64:	9b03      	ldr	r3, [sp, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	dd02      	ble.n	8001c70 <_dtoa_r+0xa58>
 8001c6a:	9b02      	ldr	r3, [sp, #8]
 8001c6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8001c70:	f88b a000 	strb.w	sl, [fp]
 8001c74:	e775      	b.n	8001b62 <_dtoa_r+0x94a>
 8001c76:	4638      	mov	r0, r7
 8001c78:	e7ba      	b.n	8001bf0 <_dtoa_r+0x9d8>
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	e7e2      	b.n	8001c44 <_dtoa_r+0xa2c>
 8001c7e:	9b03      	ldr	r3, [sp, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db04      	blt.n	8001c8e <_dtoa_r+0xa76>
 8001c84:	9906      	ldr	r1, [sp, #24]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	9904      	ldr	r1, [sp, #16]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	d122      	bne.n	8001cd4 <_dtoa_r+0xabc>
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	ddee      	ble.n	8001c70 <_dtoa_r+0xa58>
 8001c92:	ee18 1a10 	vmov	r1, s16
 8001c96:	2201      	movs	r2, #1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f00a ff47 	bl	800cb2c <__lshift>
 8001c9e:	4631      	mov	r1, r6
 8001ca0:	ee08 0a10 	vmov	s16, r0
 8001ca4:	f00b fef9 	bl	800da9a <__mcmp>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	dc03      	bgt.n	8001cb4 <_dtoa_r+0xa9c>
 8001cac:	d1e0      	bne.n	8001c70 <_dtoa_r+0xa58>
 8001cae:	f01a 0f01 	tst.w	sl, #1
 8001cb2:	d0dd      	beq.n	8001c70 <_dtoa_r+0xa58>
 8001cb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8001cb8:	d1d7      	bne.n	8001c6a <_dtoa_r+0xa52>
 8001cba:	2339      	movs	r3, #57	; 0x39
 8001cbc:	f88b 3000 	strb.w	r3, [fp]
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8001cca:	2a39      	cmp	r2, #57	; 0x39
 8001ccc:	d071      	beq.n	8001db2 <_dtoa_r+0xb9a>
 8001cce:	3201      	adds	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e746      	b.n	8001b62 <_dtoa_r+0x94a>
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	dd07      	ble.n	8001ce8 <_dtoa_r+0xad0>
 8001cd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8001cdc:	d0ed      	beq.n	8001cba <_dtoa_r+0xaa2>
 8001cde:	f10a 0301 	add.w	r3, sl, #1
 8001ce2:	f88b 3000 	strb.w	r3, [fp]
 8001ce6:	e73c      	b.n	8001b62 <_dtoa_r+0x94a>
 8001ce8:	9b05      	ldr	r3, [sp, #20]
 8001cea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8001cee:	4599      	cmp	r9, r3
 8001cf0:	d047      	beq.n	8001d82 <_dtoa_r+0xb6a>
 8001cf2:	ee18 1a10 	vmov	r1, s16
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f00a fdb6 	bl	800c86c <__multadd>
 8001d00:	45b8      	cmp	r8, r7
 8001d02:	ee08 0a10 	vmov	s16, r0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f04f 020a 	mov.w	r2, #10
 8001d0e:	4641      	mov	r1, r8
 8001d10:	4620      	mov	r0, r4
 8001d12:	d106      	bne.n	8001d22 <_dtoa_r+0xb0a>
 8001d14:	f00a fdaa 	bl	800c86c <__multadd>
 8001d18:	4680      	mov	r8, r0
 8001d1a:	4607      	mov	r7, r0
 8001d1c:	f109 0901 	add.w	r9, r9, #1
 8001d20:	e772      	b.n	8001c08 <_dtoa_r+0x9f0>
 8001d22:	f00a fda3 	bl	800c86c <__multadd>
 8001d26:	4639      	mov	r1, r7
 8001d28:	4680      	mov	r8, r0
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f00a fd9c 	bl	800c86c <__multadd>
 8001d34:	4607      	mov	r7, r0
 8001d36:	e7f1      	b.n	8001d1c <_dtoa_r+0xb04>
 8001d38:	9b03      	ldr	r3, [sp, #12]
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	9d01      	ldr	r5, [sp, #4]
 8001d3e:	ee18 0a10 	vmov	r0, s16
 8001d42:	4631      	mov	r1, r6
 8001d44:	f00b fdcf 	bl	800d8e6 <quorem>
 8001d48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8001d4c:	9b01      	ldr	r3, [sp, #4]
 8001d4e:	f805 ab01 	strb.w	sl, [r5], #1
 8001d52:	1aea      	subs	r2, r5, r3
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4293      	cmp	r3, r2
 8001d58:	dd09      	ble.n	8001d6e <_dtoa_r+0xb56>
 8001d5a:	ee18 1a10 	vmov	r1, s16
 8001d5e:	2300      	movs	r3, #0
 8001d60:	220a      	movs	r2, #10
 8001d62:	4620      	mov	r0, r4
 8001d64:	f00a fd82 	bl	800c86c <__multadd>
 8001d68:	ee08 0a10 	vmov	s16, r0
 8001d6c:	e7e7      	b.n	8001d3e <_dtoa_r+0xb26>
 8001d6e:	9b02      	ldr	r3, [sp, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bfc8      	it	gt
 8001d74:	461d      	movgt	r5, r3
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	bfd8      	it	le
 8001d7a:	2501      	movle	r5, #1
 8001d7c:	441d      	add	r5, r3
 8001d7e:	f04f 0800 	mov.w	r8, #0
 8001d82:	ee18 1a10 	vmov	r1, s16
 8001d86:	2201      	movs	r2, #1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f00a fecf 	bl	800cb2c <__lshift>
 8001d8e:	4631      	mov	r1, r6
 8001d90:	ee08 0a10 	vmov	s16, r0
 8001d94:	f00b fe81 	bl	800da9a <__mcmp>
 8001d98:	2800      	cmp	r0, #0
 8001d9a:	dc91      	bgt.n	8001cc0 <_dtoa_r+0xaa8>
 8001d9c:	d102      	bne.n	8001da4 <_dtoa_r+0xb8c>
 8001d9e:	f01a 0f01 	tst.w	sl, #1
 8001da2:	d18d      	bne.n	8001cc0 <_dtoa_r+0xaa8>
 8001da4:	462b      	mov	r3, r5
 8001da6:	461d      	mov	r5, r3
 8001da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001dac:	2a30      	cmp	r2, #48	; 0x30
 8001dae:	d0fa      	beq.n	8001da6 <_dtoa_r+0xb8e>
 8001db0:	e6d7      	b.n	8001b62 <_dtoa_r+0x94a>
 8001db2:	9a01      	ldr	r2, [sp, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d184      	bne.n	8001cc2 <_dtoa_r+0xaaa>
 8001db8:	9b00      	ldr	r3, [sp, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2331      	movs	r3, #49	; 0x31
 8001dc0:	7013      	strb	r3, [r2, #0]
 8001dc2:	e6ce      	b.n	8001b62 <_dtoa_r+0x94a>
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_dtoa_r+0xbd4>)
 8001dc6:	f7ff ba95 	b.w	80012f4 <_dtoa_r+0xdc>
 8001dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f aa6e 	bne.w	80012ae <_dtoa_r+0x96>
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_dtoa_r+0xbd8>)
 8001dd4:	f7ff ba8e 	b.w	80012f4 <_dtoa_r+0xdc>
 8001dd8:	9b02      	ldr	r3, [sp, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dcae      	bgt.n	8001d3c <_dtoa_r+0xb24>
 8001dde:	9b06      	ldr	r3, [sp, #24]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	f73f aea8 	bgt.w	8001b36 <_dtoa_r+0x91e>
 8001de6:	e7a9      	b.n	8001d3c <_dtoa_r+0xb24>
 8001de8:	0800ed3f 	.word	0x0800ed3f
 8001dec:	0800ec9d 	.word	0x0800ec9d
 8001df0:	0800ecc1 	.word	0x0800ecc1

08001df4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj>:
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x18>)
 8001dfa:	f3bf 8f5b 	dmb	ish
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3bf 8f5b 	dmb	ish

void button_alarm_pressed_cb(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    LOG_DBG("Button alarm pressed");
    /* Return if anti-dream started */
    if (atomic_get(&anti_dream_active)) {
 8001e04:	b103      	cbz	r3, 8001e08 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x10>
        return;
    }

    irq_routine(&button_alarm);
}
 8001e06:	4770      	bx	lr
    irq_routine(&button_alarm);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <_Z23button_alarm_pressed_cbPK6deviceP13gpio_callbackj+0x1c>)
 8001e0a:	f007 beef 	b.w	8009bec <irq_routine>
 8001e0e:	bf00      	nop
 8001e10:	20000d10 	.word	0x20000d10
 8001e14:	20000008 	.word	0x20000008

08001e18 <proc_task>:
{
 8001e18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001e1c:	b089      	sub	sp, #36	; 0x24
    int16_t rssi = 0;
 8001e1e:	2300      	movs	r3, #0
    struct led_strip_indicate_s *strip_ind = &status_ind;
 8001e20:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8002094 <proc_task+0x27c>
    int16_t rssi = 0;
 8001e24:	f8ad 300a 	strh.w	r3, [sp, #10]
    struct message_s tx_msg = {
 8001e28:	9304      	str	r3, [sp, #16]
 8001e2a:	f8ad 3014 	strh.w	r3, [sp, #20]
    struct message_s rx_msg = {0};
 8001e2e:	9306      	str	r3, [sp, #24]
 8001e30:	f8ad 301c 	strh.w	r3, [sp, #28]
    struct led_strip_indicate_s *strip_ind = &status_ind;
 8001e34:	4d91      	ldr	r5, [pc, #580]	; (800207c <proc_task+0x264>)
 8001e36:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8002098 <proc_task+0x280>
 8001e3a:	f8df a260 	ldr.w	sl, [pc, #608]	; 800209c <proc_task+0x284>
		arch_syscall_invoke3(*(uintptr_t *)&sig, *(uintptr_t *)&signaled, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_CHECK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_check(sig, signaled, result);
 8001e3e:	f8df b260 	ldr.w	fp, [pc, #608]	; 80020a0 <proc_task+0x288>
 8001e42:	f8cd 900c 	str.w	r9, [sp, #12]
    bool is_first = true;
 8001e46:	2301      	movs	r3, #1
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	f109 0704 	add.w	r7, r9, #4
 8001e4e:	f109 0608 	add.w	r6, r9, #8
        if (!radio_rx_queue_is_empty() && !atomic_get(&anti_dream_active)) {
 8001e52:	f007 fc95 	bl	8009780 <radio_rx_queue_is_empty>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d176      	bne.n	8001f48 <proc_task+0x130>
 8001e5a:	f3bf 8f5b 	dmb	ish
 8001e5e:	682c      	ldr	r4, [r5, #0]
 8001e60:	f3bf 8f5b 	dmb	ish
 8001e64:	2c00      	cmp	r4, #0
 8001e66:	d16f      	bne.n	8001f48 <proc_task+0x130>
            if (!proc_rx_data(rx_buf, sizeof(rx_buf), &rx_msg, cur_dev_addr)) {
 8001e68:	2301      	movs	r3, #1
 8001e6a:	aa06      	add	r2, sp, #24
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	a802      	add	r0, sp, #8
 8001e70:	f007 fade 	bl	8009430 <proc_rx_data>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d0ec      	beq.n	8001e52 <proc_task+0x3a>
            switch (rx_msg.direction) {
 8001e78:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	d06c      	beq.n	8001f5a <proc_task+0x142>
 8001e80:	2901      	cmp	r1, #1
 8001e82:	d1e6      	bne.n	8001e52 <proc_task+0x3a>
                    tx_msg.message_type = rx_msg.message_type;
 8001e84:	f89d 301a 	ldrb.w	r3, [sp, #26]
                    tx_msg.sender_addr = cur_dev_addr;
 8001e88:	f88d 1010 	strb.w	r1, [sp, #16]
                    tx_msg.message_type = rx_msg.message_type;
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f88d 3012 	strb.w	r3, [sp, #18]
                    switch (rx_msg.message_type) {
 8001e92:	f000 80af 	beq.w	8001ff4 <proc_task+0x1dc>
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d1db      	bne.n	8001e52 <proc_task+0x3a>
                            if (is_first) {
 8001e9a:	9b00      	ldr	r3, [sp, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f040 80df 	bne.w	8002060 <proc_task+0x248>
            get_rssi(&rssi);
 8001ea2:	f10d 000a 	add.w	r0, sp, #10
 8001ea6:	f007 fc73 	bl	8009790 <get_rssi>
            rssi_num = check_rssi(rssi);
 8001eaa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]


static inline uint8_t check_rssi(int16_t rssi)
{
    uint8_t leds_num = 0;
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 8001eae:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001eb2:	f280 80a4 	bge.w	8001ffe <proc_task+0x1e6>
        leds_num = 8;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	2a09      	cmp	r2, #9
 8001ec0:	f240 80bc 	bls.w	800203c <proc_task+0x224>
        leds_num = 7;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 8001ec4:	f103 025a 	add.w	r2, r3, #90	; 0x5a
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	2a09      	cmp	r2, #9
 8001ecc:	f240 80c2 	bls.w	8002054 <proc_task+0x23c>
        leds_num = 6;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 8001ed0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	2a09      	cmp	r2, #9
 8001ed8:	f240 80be 	bls.w	8002058 <proc_task+0x240>
        leds_num = 5;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 8001edc:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	2a04      	cmp	r2, #4
 8001ee4:	f240 80ba 	bls.w	800205c <proc_task+0x244>
        leds_num = 4;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 8001ee8:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001eec:	b292      	uxth	r2, r2
 8001eee:	2a13      	cmp	r2, #19
 8001ef0:	f240 80bf 	bls.w	8002072 <proc_task+0x25a>
        leds_num = 3;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 8001ef4:	f103 027f 	add.w	r2, r3, #127	; 0x7f
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	2a01      	cmp	r2, #1
 8001efc:	f240 80bb 	bls.w	8002076 <proc_task+0x25e>
        leds_num = 2;
        return leds_num;
    }
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 8001f00:	3382      	adds	r3, #130	; 0x82
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	bf8c      	ite	hi
 8001f08:	2300      	movhi	r3, #0
 8001f0a:	2301      	movls	r3, #1
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001f0c:	f3bf 8f5b 	dmb	ish
 8001f10:	e857 2f00 	ldrex	r2, [r7]
 8001f14:	e847 3100 	strex	r1, r3, [r7]
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d1f9      	bne.n	8001f10 <proc_task+0xf8>
 8001f1c:	f3bf 8f5b 	dmb	ish
 8001f20:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8001f24:	f3bf 8f5b 	dmb	ish
 8001f28:	e856 2f00 	ldrex	r2, [r6]
 8001f2c:	e846 3100 	strex	r1, r3, [r6]
 8001f30:	2900      	cmp	r1, #0
 8001f32:	d1f9      	bne.n	8001f28 <proc_task+0x110>
 8001f34:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8001f38:	f3bf 8f5b 	dmb	ish
 8001f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f40:	f3bf 8f5b 	dmb	ish
            if (!atomic_get(&alarm_is_active)) {
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d045      	beq.n	8001fd4 <proc_task+0x1bc>
	return z_impl_k_sleep(timeout);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f009 f940 	bl	800b1d0 <z_impl_k_sleep>
        if (!radio_rx_queue_is_empty() && !atomic_get(&anti_dream_active)) {
 8001f50:	f007 fc16 	bl	8009780 <radio_rx_queue_is_empty>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d080      	beq.n	8001e5a <proc_task+0x42>
 8001f58:	e7f6      	b.n	8001f48 <proc_task+0x130>
                    switch (rx_msg.message_type) {
 8001f5a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d04f      	beq.n	8002002 <proc_task+0x1ea>
 8001f62:	d823      	bhi.n	8001fac <proc_task+0x194>
                            if (rx_msg.sender_addr == cur_dev_addr) {
 8001f64:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8001f68:	2c01      	cmp	r4, #1
 8001f6a:	d19a      	bne.n	8001ea2 <proc_task+0x8a>
                                strip_ind = &msg_recv_ind;
 8001f6c:	4b44      	ldr	r3, [pc, #272]	; (8002080 <proc_task+0x268>)
 8001f6e:	9303      	str	r3, [sp, #12]
                                set_ind(&strip_ind, K_FOREVER);
 8001f70:	a803      	add	r0, sp, #12
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7a:	f007 f91d 	bl	80091b8 <set_ind>
                                set_buzzer_mode(BUZZER_MODE_DING_DONG);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f007 fc20 	bl	80097c4 <set_buzzer_mode>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8001f84:	f3bf 8f5b 	dmb	ish
 8001f88:	e858 3f00 	ldrex	r3, [r8]
 8001f8c:	e848 4200 	strex	r2, r4, [r8]
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d1f9      	bne.n	8001f88 <proc_task+0x170>
 8001f94:	f3bf 8f5b 	dmb	ish
                                strip_ind = &alarm_ind;
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <proc_task+0x26c>)
 8001f9a:	9303      	str	r3, [sp, #12]
                                set_ind(&strip_ind, K_FOREVER);
 8001f9c:	a803      	add	r0, sp, #12
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa6:	f007 f907 	bl	80091b8 <set_ind>
 8001faa:	e77a      	b.n	8001ea2 <proc_task+0x8a>
 8001fac:	3b03      	subs	r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	f63f af4f 	bhi.w	8001e52 <proc_task+0x3a>
                            if (rx_msg.sender_addr == cur_dev_addr) {
 8001fb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	f47f af72 	bne.w	8001ea2 <proc_task+0x8a>
                                strip_ind = &msg_recv_ind;
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <proc_task+0x268>)
 8001fc0:	9303      	str	r3, [sp, #12]
                                set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001fc2:	a803      	add	r0, sp, #12
 8001fc4:	4a30      	ldr	r2, [pc, #192]	; (8002088 <proc_task+0x270>)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f007 f8f6 	bl	80091b8 <set_ind>
                                set_buzzer_mode(BUZZER_MODE_DING_DONG);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f007 fbf9 	bl	80097c4 <set_buzzer_mode>
 8001fd2:	e766      	b.n	8001ea2 <proc_task+0x8a>
	z_impl_k_poll_signal_check(sig, signaled, result);
 8001fd4:	482d      	ldr	r0, [pc, #180]	; (800208c <proc_task+0x274>)
 8001fd6:	465a      	mov	r2, fp
 8001fd8:	4651      	mov	r1, sl
 8001fda:	f009 ff55 	bl	800be88 <z_impl_k_poll_signal_check>
                if (indicate_is_enabled()) {
 8001fde:	f8da 3000 	ldr.w	r3, [sl]
 8001fe2:	b36b      	cbz	r3, 8002040 <proc_task+0x228>
                    set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <proc_task+0x270>)
                    strip_ind = &status_ind;
 8001fe6:	f8cd 900c 	str.w	r9, [sp, #12]
                    set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8001fea:	a803      	add	r0, sp, #12
 8001fec:	2300      	movs	r3, #0
 8001fee:	f007 f8e3 	bl	80091b8 <set_ind>
 8001ff2:	e7a9      	b.n	8001f48 <proc_task+0x130>
                            set_msg(&tx_msg, false);
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	a804      	add	r0, sp, #16
 8001ff8:	f007 fbd2 	bl	80097a0 <set_msg>
                            break;
 8001ffc:	e751      	b.n	8001ea2 <proc_task+0x8a>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e784      	b.n	8001f0c <proc_task+0xf4>
                            strip_ind = &msg_recv_ind;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <proc_task+0x268>)
 8002004:	9303      	str	r3, [sp, #12]
                            set_ind(&strip_ind, K_FOREVER);
 8002006:	a803      	add	r0, sp, #12
 8002008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002010:	9101      	str	r1, [sp, #4]
 8002012:	f007 f8d1 	bl	80091b8 <set_ind>
                            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8002016:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <proc_task+0x270>)
                            strip_ind = &status_ind;
 8002018:	f8cd 900c 	str.w	r9, [sp, #12]
                            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800201c:	a803      	add	r0, sp, #12
 800201e:	2300      	movs	r3, #0
 8002020:	f007 f8ca 	bl	80091b8 <set_ind>
 8002024:	9901      	ldr	r1, [sp, #4]
 8002026:	f3bf 8f5b 	dmb	ish
 800202a:	e858 3f00 	ldrex	r3, [r8]
 800202e:	e848 1200 	strex	r2, r1, [r8]
 8002032:	2a00      	cmp	r2, #0
 8002034:	d1f9      	bne.n	800202a <proc_task+0x212>
 8002036:	f3bf 8f5b 	dmb	ish
 800203a:	e732      	b.n	8001ea2 <proc_task+0x8a>
 800203c:	2307      	movs	r3, #7
 800203e:	e765      	b.n	8001f0c <proc_task+0xf4>
                    strip_ind = &disable_indication;
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <proc_task+0x278>)
 8002042:	9303      	str	r3, [sp, #12]
                    set_ind(&strip_ind, K_FOREVER);
 8002044:	a803      	add	r0, sp, #12
 8002046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204e:	f007 f8b3 	bl	80091b8 <set_ind>
 8002052:	e779      	b.n	8001f48 <proc_task+0x130>
 8002054:	2306      	movs	r3, #6
 8002056:	e759      	b.n	8001f0c <proc_task+0xf4>
 8002058:	2305      	movs	r3, #5
 800205a:	e757      	b.n	8001f0c <proc_task+0xf4>
 800205c:	2304      	movs	r3, #4
 800205e:	e755      	b.n	8001f0c <proc_task+0xf4>
                                set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <proc_task+0x270>)
                                strip_ind = &status_ind;
 8002062:	f8cd 900c 	str.w	r9, [sp, #12]
                                set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8002066:	a803      	add	r0, sp, #12
 8002068:	2300      	movs	r3, #0
                                is_first = false;
 800206a:	9400      	str	r4, [sp, #0]
                                set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800206c:	f007 f8a4 	bl	80091b8 <set_ind>
                                is_first = false;
 8002070:	e717      	b.n	8001ea2 <proc_task+0x8a>
 8002072:	2303      	movs	r3, #3
 8002074:	e74a      	b.n	8001f0c <proc_task+0xf4>
 8002076:	2302      	movs	r3, #2
 8002078:	e748      	b.n	8001f0c <proc_task+0xf4>
 800207a:	bf00      	nop
 800207c:	20000d10 	.word	0x20000d10
 8002080:	20000320 	.word	0x20000320
 8002084:	200002e8 	.word	0x200002e8
 8002088:	000927c0 	.word	0x000927c0
 800208c:	2000143c 	.word	0x2000143c
 8002090:	200002f4 	.word	0x200002f4
 8002094:	20000360 	.word	0x20000360
 8002098:	20001370 	.word	0x20001370
 800209c:	20000cfc 	.word	0x20000cfc
 80020a0:	20000cf8 	.word	0x20000cf8

080020a4 <modem_task>:
{
 80020a4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    struct lora_modem_config lora_cfg = {
 80020a8:	4bad      	ldr	r3, [pc, #692]	; (8002360 <modem_task+0x2bc>)
 80020aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 80020ac:	b087      	sub	sp, #28
    struct lora_modem_config lora_cfg = {
 80020ae:	f10d 0908 	add.w	r9, sp, #8
 80020b2:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    struct led_strip_indicate_s *strip_ind = nullptr;
 80020b6:	2300      	movs	r3, #0
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	48aa      	ldr	r0, [pc, #680]	; (8002364 <modem_task+0x2c0>)
 80020bc:	f007 ff3c 	bl	8009f38 <z_device_is_ready>
    if (!device_is_ready(lora_dev)) {
 80020c0:	2800      	cmp	r0, #0
 80020c2:	f000 8137 	beq.w	8002334 <modem_task+0x290>
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 80020c6:	f8df a29c 	ldr.w	sl, [pc, #668]	; 8002364 <modem_task+0x2c0>
 80020ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 80020ce:	4649      	mov	r1, r9
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4650      	mov	r0, sl
 80020d4:	4798      	blx	r3
    if (lora_config(lora_dev, &lora_cfg) < 0 ) {
 80020d6:	2800      	cmp	r0, #0
 80020d8:	f2c0 813a 	blt.w	8002350 <modem_task+0x2ac>
     if (!device_is_ready(button_alarm.port)) {
 80020dc:	4ca2      	ldr	r4, [pc, #648]	; (8002368 <modem_task+0x2c4>)
    struct led_strip_indicate_s *strip_ind = &status_ind;
 80020de:	4ba3      	ldr	r3, [pc, #652]	; (800236c <modem_task+0x2c8>)
     if (!device_is_ready(button_alarm.port)) {
 80020e0:	6820      	ldr	r0, [r4, #0]
    struct led_strip_indicate_s *strip_ind = &status_ind;
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	f007 ff28 	bl	8009f38 <z_device_is_ready>
     if (!device_is_ready(button_alarm.port)) {
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f000 812a 	beq.w	8002342 <modem_task+0x29e>
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
 80020ee:	7966      	ldrb	r6, [r4, #5]
	return gpio_pin_configure(spec->port,
 80020f0:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
 80020f2:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
 80020f4:	f446 7280 	orr.w	r2, r6, #256	; 0x100
	struct gpio_driver_data *data =
 80020f8:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
 80020fa:	6887      	ldr	r7, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80020fc:	f016 0f01 	tst.w	r6, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8002100:	f04f 0301 	mov.w	r3, #1
 8002104:	682e      	ldr	r6, [r5, #0]
 8002106:	fa03 f301 	lsl.w	r3, r3, r1
 800210a:	bf14      	ite	ne
 800210c:	4333      	orrne	r3, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800210e:	ea26 0303 	biceq.w	r3, r6, r3
 8002112:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
 8002118:	6820      	ldr	r0, [r4, #0]
 800211a:	7921      	ldrb	r1, [r4, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 800211c:	6903      	ldr	r3, [r0, #16]
	const struct gpio_driver_api *api =
 800211e:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002120:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8002122:	6996      	ldr	r6, [r2, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8002124:	2501      	movs	r5, #1
 8002126:	fa05 f201 	lsl.w	r2, r5, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 800212a:	421a      	tst	r2, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
 800212c:	bf0c      	ite	eq
 800212e:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8002132:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8002136:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 800213a:	47b0      	blx	r6
    gpio_add_callback(button_alarm.port, &button_alarm_cb);
 800213c:	6820      	ldr	r0, [r4, #0]
    gpio_init_callback(&button_alarm_cb, button_alarm_pressed_cb, BIT(button_alarm.pin));
 800213e:	7923      	ldrb	r3, [r4, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8002140:	6882      	ldr	r2, [r0, #8]
	callback->handler = handler;
 8002142:	498b      	ldr	r1, [pc, #556]	; (8002370 <modem_task+0x2cc>)
	if (api->manage_callback == NULL) {
 8002144:	69d4      	ldr	r4, [r2, #28]
 8002146:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
 800214a:	608b      	str	r3, [r1, #8]
	callback->handler = handler;
 800214c:	4b89      	ldr	r3, [pc, #548]	; (8002374 <modem_task+0x2d0>)
 800214e:	604b      	str	r3, [r1, #4]
	if (api->manage_callback == NULL) {
 8002150:	b10c      	cbz	r4, 8002156 <modem_task+0xb2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8002152:	462a      	mov	r2, r5
 8002154:	47a0      	blx	r4
    common_kernel_services_init();
 8002156:	f007 f935 	bl	80093c4 <common_kernel_services_init>
    set_ind(&strip_ind, K_FOREVER);
 800215a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002162:	a801      	add	r0, sp, #4
 8002164:	f007 f828 	bl	80091b8 <set_ind>
    current_state = recv_state;
 8002168:	4b83      	ldr	r3, [pc, #524]	; (8002378 <modem_task+0x2d4>)
 800216a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80023a4 <modem_task+0x300>
 800216e:	4e83      	ldr	r6, [pc, #524]	; (800237c <modem_task+0x2d8>)
  lora_recv_error_timeout_cb error_timeout_cb)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb, error_timeout_cb);
 8002170:	4f7c      	ldr	r7, [pc, #496]	; (8002364 <modem_task+0x2c0>)
 8002172:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8002380 <modem_task+0x2dc>
 8002176:	e893 0003 	ldmia.w	r3, {r0, r1}
 800217a:	e888 0003 	stmia.w	r8, {r0, r1}
    set_buzzer_mode(BUZZER_MODE_SINGLE);
 800217e:	2001      	movs	r0, #1
 8002180:	f007 fb20 	bl	80097c4 <set_buzzer_mode>
 8002184:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002188:	4a7d      	ldr	r2, [pc, #500]	; (8002380 <modem_task+0x2dc>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	497d      	ldr	r1, [pc, #500]	; (8002384 <modem_task+0x2e0>)
 800218e:	4875      	ldr	r0, [pc, #468]	; (8002364 <modem_task+0x2c0>)
 8002190:	4798      	blx	r3
    struct k_msgq *cur_queue = nullptr;
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    static message_s tx_msg = {0};
    static uint8_t tx_buf[MESSAGE_LEN_IN_BYTES] = {0};
    if (current_state.state == TRANSMIT) {
 8002192:	f898 4004 	ldrb.w	r4, [r8, #4]
 8002196:	2c01      	cmp	r4, #1
 8002198:	d032      	beq.n	8002200 <modem_task+0x15c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800219a:	f3bf 8f5b 	dmb	ish
 800219e:	2400      	movs	r4, #0
 80021a0:	e856 3f00 	ldrex	r3, [r6]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d103      	bne.n	80021b0 <modem_task+0x10c>
 80021a8:	e846 4200 	strex	r2, r4, [r6]
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1f7      	bne.n	80021a0 <modem_task+0xfc>
 80021b0:	f3bf 8f5b 	dmb	ish
        current_state = recv_state;
        k_spin_unlock(&spin, key);
        return rc;

    } else {
        if (atomic_cas(&reconfig_modem, 1, 0)) {
 80021b4:	d177      	bne.n	80022a6 <modem_task+0x202>
	const struct lora_driver_api *api =
 80021b6:	f8da 5008 	ldr.w	r5, [sl, #8]
	return api->recv_async(dev, cb, error_timeout_cb);
 80021ba:	4622      	mov	r2, r4
 80021bc:	4621      	mov	r1, r4
 80021be:	692b      	ldr	r3, [r5, #16]
 80021c0:	4638      	mov	r0, r7
 80021c2:	4798      	blx	r3
            lora_recv_async(lora_dev, nullptr, nullptr);
            lora_cfg->tx = false;
 80021c4:	f88d 4015 	strb.w	r4, [sp, #21]
	return api->config(dev, config);
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	4649      	mov	r1, r9
 80021cc:	4638      	mov	r0, r7
 80021ce:	4798      	blx	r3
            rc = lora_config(lora_dev, lora_cfg);
            if (!rc) {
 80021d0:	4604      	mov	r4, r0
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d15a      	bne.n	800228c <modem_task+0x1e8>
	return api->recv_async(dev, cb, error_timeout_cb);
 80021d6:	692b      	ldr	r3, [r5, #16]
 80021d8:	496a      	ldr	r1, [pc, #424]	; (8002384 <modem_task+0x2e0>)
 80021da:	465a      	mov	r2, fp
 80021dc:	4638      	mov	r0, r7
 80021de:	4798      	blx	r3
                rc = lora_recv_async(lora_dev, lora_receive_cb, lora_receive_error_timeout);
                if (rc < 0) {
 80021e0:	2800      	cmp	r0, #0
 80021e2:	db65      	blt.n	80022b0 <modem_task+0x20c>
        if (!rc) {
 80021e4:	d15f      	bne.n	80022a6 <modem_task+0x202>
            strip_ind = &msg_send_good_ind;
 80021e6:	4b68      	ldr	r3, [pc, #416]	; (8002388 <modem_task+0x2e4>)
                strip_ind = &alarm_ind;
 80021e8:	9300      	str	r3, [sp, #0]
                set_ind(&strip_ind, K_FOREVER);
 80021ea:	4668      	mov	r0, sp
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f4:	f006 ffe0 	bl	80091b8 <set_ind>
    if (current_state.state == TRANSMIT) {
 80021f8:	f898 4004 	ldrb.w	r4, [r8, #4]
 80021fc:	2c01      	cmp	r4, #1
 80021fe:	d1cc      	bne.n	800219a <modem_task+0xf6>
        if (!proc_tx_data(cur_queue, tx_buf, sizeof(tx_buf), &tx_msg)) {
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <modem_task+0x2e8>)
 8002202:	4963      	ldr	r1, [pc, #396]	; (8002390 <modem_task+0x2ec>)
 8002204:	2202      	movs	r2, #2
 8002206:	2000      	movs	r0, #0
 8002208:	f007 f9e6 	bl	80095d8 <proc_tx_data>
 800220c:	2800      	cmp	r0, #0
 800220e:	d04a      	beq.n	80022a6 <modem_task+0x202>
	__asm__ volatile(
 8002210:	f04f 0210 	mov.w	r2, #16
 8002214:	f3ef 8311 	mrs	r3, BASEPRI
 8002218:	f382 8812 	msr	BASEPRI_MAX, r2
 800221c:	f3bf 8f6f 	isb	sy
        key = k_spin_lock(&spin);
 8002220:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <modem_task+0x2f0>)
	const struct lora_driver_api *api =
 8002222:	f8da 5008 	ldr.w	r5, [sl, #8]
 8002226:	6013      	str	r3, [r2, #0]
	return api->recv_async(dev, cb, error_timeout_cb);
 8002228:	2200      	movs	r2, #0
 800222a:	4611      	mov	r1, r2
 800222c:	692b      	ldr	r3, [r5, #16]
 800222e:	4638      	mov	r0, r7
 8002230:	4798      	blx	r3
	return api->config(dev, config);
 8002232:	682b      	ldr	r3, [r5, #0]
        lora_cfg->tx = true;
 8002234:	f88d 4015 	strb.w	r4, [sp, #21]
 8002238:	4649      	mov	r1, r9
 800223a:	4638      	mov	r0, r7
 800223c:	4798      	blx	r3
        if (rc < 0) {
 800223e:	2800      	cmp	r0, #0
 8002240:	db55      	blt.n	80022ee <modem_task+0x24a>
	return api->send(dev, data, data_len);
 8002242:	686b      	ldr	r3, [r5, #4]
 8002244:	4952      	ldr	r1, [pc, #328]	; (8002390 <modem_task+0x2ec>)
 8002246:	2202      	movs	r2, #2
 8002248:	4638      	mov	r0, r7
 800224a:	4798      	blx	r3
        if (rc < 0) {
 800224c:	1e04      	subs	r4, r0, #0
 800224e:	db6a      	blt.n	8002326 <modem_task+0x282>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002250:	f3bf 8f5b 	dmb	ish
 8002254:	2301      	movs	r3, #1
 8002256:	e856 2f00 	ldrex	r2, [r6]
 800225a:	e846 3100 	strex	r1, r3, [r6]
 800225e:	2900      	cmp	r1, #0
 8002260:	d1f9      	bne.n	8002256 <modem_task+0x1b2>
 8002262:	f3bf 8f5b 	dmb	ish
        if (tx_msg.message_type == MESSAGE_TYPE_SYNC)
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <modem_task+0x2e8>)
        current_state = recv_state;
 8002268:	4a43      	ldr	r2, [pc, #268]	; (8002378 <modem_task+0x2d4>)
        if (tx_msg.message_type == MESSAGE_TYPE_SYNC)
 800226a:	789b      	ldrb	r3, [r3, #2]
        current_state = recv_state;
 800226c:	e892 0003 	ldmia.w	r2, {r0, r1}
            rc = 1;
 8002270:	2b05      	cmp	r3, #5
	__asm__ volatile(
 8002272:	4b48      	ldr	r3, [pc, #288]	; (8002394 <modem_task+0x2f0>)
        current_state = recv_state;
 8002274:	e888 0003 	stmia.w	r8, {r0, r1}
 8002278:	681b      	ldr	r3, [r3, #0]
            rc = 1;
 800227a:	bf08      	it	eq
 800227c:	2401      	moveq	r4, #1
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
        if (!rc) {
 8002286:	2c00      	cmp	r4, #0
 8002288:	d0ad      	beq.n	80021e6 <modem_task+0x142>
 800228a:	e00a      	b.n	80022a2 <modem_task+0x1fe>
 800228c:	2301      	movs	r3, #1
 800228e:	f3bf 8f5b 	dmb	ish
 8002292:	e856 2f00 	ldrex	r2, [r6]
 8002296:	e846 3100 	strex	r1, r3, [r6]
 800229a:	2900      	cmp	r1, #0
 800229c:	d1f9      	bne.n	8002292 <modem_task+0x1ee>
 800229e:	f3bf 8f5b 	dmb	ish
        } else if (rc < 0) {
 80022a2:	2c00      	cmp	r4, #0
 80022a4:	db0f      	blt.n	80022c6 <modem_task+0x222>
	return z_impl_k_sleep(timeout);
 80022a6:	2100      	movs	r1, #0
 80022a8:	2001      	movs	r0, #1
 80022aa:	f008 ff91 	bl	800b1d0 <z_impl_k_sleep>
 80022ae:	e770      	b.n	8002192 <modem_task+0xee>
 80022b0:	2301      	movs	r3, #1
 80022b2:	f3bf 8f5b 	dmb	ish
 80022b6:	e856 2f00 	ldrex	r2, [r6]
 80022ba:	e846 3100 	strex	r1, r3, [r6]
 80022be:	2900      	cmp	r1, #0
 80022c0:	d1f9      	bne.n	80022b6 <modem_task+0x212>
 80022c2:	f3bf 8f5b 	dmb	ish
            strip_ind = &msg_send_bad_ind;
 80022c6:	4b34      	ldr	r3, [pc, #208]	; (8002398 <modem_task+0x2f4>)
 80022c8:	9300      	str	r3, [sp, #0]
            set_ind(&strip_ind, K_FOREVER);
 80022ca:	4668      	mov	r0, sp
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022d4:	f006 ff70 	bl	80091b8 <set_ind>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80022d8:	f3bf 8f5b 	dmb	ish
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <modem_task+0x2f8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3bf 8f5b 	dmb	ish
            if (atomic_get(&alarm_is_active)) {
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f43f af54 	beq.w	8002192 <modem_task+0xee>
                strip_ind = &alarm_ind;
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <modem_task+0x2fc>)
 80022ec:	e77c      	b.n	80021e8 <modem_task+0x144>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80022ee:	4927      	ldr	r1, [pc, #156]	; (800238c <modem_task+0x2e8>)
 80022f0:	2300      	movs	r3, #0
 80022f2:	2000      	movs	r0, #0
 80022f4:	2200      	movs	r2, #0
 80022f6:	f008 f811 	bl	800a31c <z_impl_k_msgq_put>
            current_state = recv_state;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <modem_task+0x2d4>)
 80022fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002300:	e888 0003 	stmia.w	r8, {r0, r1}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002304:	f3bf 8f5b 	dmb	ish
 8002308:	e856 3f00 	ldrex	r3, [r6]
 800230c:	e846 4200 	strex	r2, r4, [r6]
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f9      	bne.n	8002308 <modem_task+0x264>
 8002314:	f3bf 8f5b 	dmb	ish
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <modem_task+0x2f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
            return rc;
 8002324:	e7cf      	b.n	80022c6 <modem_task+0x222>
 8002326:	4919      	ldr	r1, [pc, #100]	; (800238c <modem_task+0x2e8>)
 8002328:	2200      	movs	r2, #0
 800232a:	2300      	movs	r3, #0
 800232c:	2000      	movs	r0, #0
 800232e:	f007 fff5 	bl	800a31c <z_impl_k_msgq_put>
 8002332:	e78d      	b.n	8002250 <modem_task+0x1ac>
	return z_impl_k_sleep(timeout);
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800233c:	f008 ff48 	bl	800b1d0 <z_impl_k_sleep>
 8002340:	e6c1      	b.n	80020c6 <modem_task+0x22>
 8002342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800234a:	f008 ff41 	bl	800b1d0 <z_impl_k_sleep>
 800234e:	e6ce      	b.n	80020ee <modem_task+0x4a>
 8002350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002358:	f008 ff3a 	bl	800b1d0 <z_impl_k_sleep>
 800235c:	e6be      	b.n	80020dc <modem_task+0x38>
 800235e:	bf00      	nop
 8002360:	0800e2e8 	.word	0x0800e2e8
 8002364:	0800df44 	.word	0x0800df44
 8002368:	20000008 	.word	0x20000008
 800236c:	20000360 	.word	0x20000360
 8002370:	20000d14 	.word	0x20000d14
 8002374:	08001df9 	.word	0x08001df9
 8002378:	0800eaac 	.word	0x0800eaac
 800237c:	20001384 	.word	0x20001384
 8002380:	08008c59 	.word	0x08008c59
 8002384:	08008cc1 	.word	0x08008cc1
 8002388:	20000338 	.word	0x20000338
 800238c:	20000d08 	.word	0x20000d08
 8002390:	20000d04 	.word	0x20000d04
 8002394:	20000d00 	.word	0x20000d00
 8002398:	2000032c 	.word	0x2000032c
 800239c:	20001370 	.word	0x20001370
 80023a0:	200002e8 	.word	0x200002e8
 80023a4:	20001378 	.word	0x20001378

080023a8 <work_button_pressed_handler_dev>:
//    }
//    k_work_reschedule(k_work_delayable_from_work(item), K_MSEC(ANTI_DREAM_PERIOD));
//}

void work_button_pressed_handler_dev(struct gpio_dt_spec *irq_gpio)
{
 80023a8:	b538      	push	{r3, r4, r5, lr}
    struct led_strip_indicate_s *strip_ind = nullptr;
    /* For this device do nothing */
    /* Send alarm message */
    if ((!strcmp(button_alarm.port->name, irq_gpio->port->name)) &&
 80023aa:	4d0a      	ldr	r5, [pc, #40]	; (80023d4 <work_button_pressed_handler_dev+0x2c>)
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	6811      	ldr	r1, [r2, #0]
{
 80023b2:	4604      	mov	r4, r0
    if ((!strcmp(button_alarm.port->name, irq_gpio->port->name)) &&
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f7fe fd46 	bl	8000e46 <strcmp>
 80023ba:	b918      	cbnz	r0, 80023c4 <work_button_pressed_handler_dev+0x1c>
 80023bc:	7922      	ldrb	r2, [r4, #4]
 80023be:	792b      	ldrb	r3, [r5, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d000      	beq.n	80023c6 <work_button_pressed_handler_dev+0x1e>
//        /* Enable indication */
//        strip_ind = &status_ind;
//        set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
//        atomic_set(&anti_dream_active, false);
//    }
}
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
 80023c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        set_msg(&alarm_msg, true);
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <work_button_pressed_handler_dev+0x30>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	f007 b9e7 	b.w	80097a0 <set_msg>
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000000 	.word	0x20000000

080023dc <periodic_timer_handler>:

void periodic_timer_handler(struct k_timer *tim)
{
    LOG_DBG("Periodic timer handler");
    current_state = transmit_state;
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <periodic_timer_handler+0x14>)
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <periodic_timer_handler+0x18>)
 80023e0:	e892 0003 	ldmia.w	r2, {r0, r1}

    k_wakeup(modem_task_id);
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <periodic_timer_handler+0x1c>)
    current_state = transmit_state;
 80023e6:	e883 0003 	stmia.w	r3, {r0, r1}
    k_wakeup(modem_task_id);
 80023ea:	6810      	ldr	r0, [r2, #0]
	z_impl_k_wakeup(thread);
 80023ec:	f008 bf1c 	b.w	800b228 <z_impl_k_wakeup>
 80023f0:	0800eab4 	.word	0x0800eab4
 80023f4:	20001378 	.word	0x20001378
 80023f8:	0800e430 	.word	0x0800e430

080023fc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80023fc:	468c      	mov	ip, r1
 80023fe:	4604      	mov	r4, r0
 8002400:	4611      	mov	r1, r2
 8002402:	b508      	push	{r3, lr}
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 8002404:	461a      	mov	r2, r3
 8002406:	4660      	mov	r0, ip
 8002408:	47a0      	blx	r4
	return z_impl_z_current_get();
 800240a:	f008 ff47 	bl	800b29c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800240e:	f000 fbc9 	bl	8002ba4 <z_impl_k_thread_abort>
 8002412:	bf00      	nop

08002414 <free_list_add>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 8002414:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	885b      	ldrh	r3, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800241c:	085b      	lsrs	r3, r3, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	f1c3 031f 	rsb	r3, r3, #31
 8002426:	eb00 0483 	add.w	r4, r0, r3, lsl #2
	void *cmem = &buf[c];
 800242a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
 800242c:	1d15      	adds	r5, r2, #4
 800242e:	f102 0c06 	add.w	ip, r2, #6
	if (b->next == 0U) {
 8002432:	6922      	ldr	r2, [r4, #16]
 8002434:	fa1f fe81 	uxth.w	lr, r1
 8002438:	b95a      	cbnz	r2, 8002452 <free_list_add+0x3e>
		h->avail_buckets |= BIT(bidx);
 800243a:	68c2      	ldr	r2, [r0, #12]
 800243c:	2601      	movs	r6, #1
 800243e:	fa06 f303 	lsl.w	r3, r6, r3
 8002442:	431a      	orrs	r2, r3
 8002444:	60c2      	str	r2, [r0, #12]
		b->next = c;
 8002446:	6121      	str	r1, [r4, #16]
 8002448:	f820 e005 	strh.w	lr, [r0, r5]
 800244c:	f820 e00c 	strh.w	lr, [r0, ip]
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
 8002450:	bd70      	pop	{r4, r5, r6, pc}
	void *cmem = &buf[c];
 8002452:	00d3      	lsls	r3, r2, #3
		return ((uint16_t *)cmem)[f];
 8002454:	3304      	adds	r3, #4
 8002456:	5ac1      	ldrh	r1, [r0, r3]
		((uint16_t *)cmem)[f] = val;
 8002458:	5341      	strh	r1, [r0, r5]
 800245a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800245e:	f820 200c 	strh.w	r2, [r0, ip]
 8002462:	f8a1 e006 	strh.w	lr, [r1, #6]
 8002466:	f820 e003 	strh.w	lr, [r0, r3]
 800246a:	bd70      	pop	{r4, r5, r6, pc}

0800246c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800246c:	f1a2 0c04 	sub.w	ip, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002470:	448c      	add	ip, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002472:	1dca      	adds	r2, r1, #7
 8002474:	f022 0207 	bic.w	r2, r2, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002478:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800247c:	ebac 0c02 	sub.w	ip, ip, r2
{
 8002480:	b430      	push	{r4, r5}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8002482:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 8002486:	6002      	str	r2, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
 8002488:	fab5 f085 	clz	r0, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800248c:	f1c0 0124 	rsb	r1, r0, #36	; 0x24
 8002490:	0089      	lsls	r1, r1, #2
	h->avail_buckets = 0;
 8002492:	2400      	movs	r4, #0
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8002494:	3107      	adds	r1, #7
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8002496:	f1d0 0020 	rsbs	r0, r0, #32
	h->avail_buckets = 0;
 800249a:	e9c2 5402 	strd	r5, r4, [r2, #8]
 800249e:	ea4f 01d1 	mov.w	r1, r1, lsr #3
	for (int i = 0; i < nb_buckets; i++) {
 80024a2:	d007      	beq.n	80024b4 <sys_heap_init+0x48>
 80024a4:	f102 030c 	add.w	r3, r2, #12
 80024a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		h->buckets[i].next = 0;
 80024ac:	f843 4f04 	str.w	r4, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
 80024b0:	4283      	cmp	r3, r0
 80024b2:	d1fb      	bne.n	80024ac <sys_heap_init+0x40>
		((uint16_t *)cmem)[f] = val;
 80024b4:	2300      	movs	r3, #0
 80024b6:	8013      	strh	r3, [r2, #0]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80024b8:	004b      	lsls	r3, r1, #1
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 80024ba:	1a6d      	subs	r5, r5, r1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80024bc:	f043 0301 	orr.w	r3, r3, #1
		((uint16_t *)cmem)[f] = val;
 80024c0:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80024c4:	8053      	strh	r3, [r2, #2]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80024c6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 80024c8:	eb02 030c 	add.w	r3, r2, ip
 80024cc:	8044      	strh	r4, [r0, #2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80024ce:	2001      	movs	r0, #1
		((uint16_t *)cmem)[f] = val;
 80024d0:	f822 1031 	strh.w	r1, [r2, r1, lsl #3]
 80024d4:	f822 500c 	strh.w	r5, [r2, ip]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80024d8:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
 80024da:	bc30      	pop	{r4, r5}
	free_list_add(h, chunk0_size);
 80024dc:	4610      	mov	r0, r2
 80024de:	f7ff bf99 	b.w	8002414 <free_list_add>
 80024e2:	bf00      	nop

080024e4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <stm32l4_init>:
	__asm__ volatile(
 80024e8:	f04f 0210 	mov.w	r2, #16
 80024ec:	f3ef 8311 	mrs	r3, BASEPRI
 80024f0:	f382 8812 	msr	BASEPRI_MAX, r2
 80024f4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <stm32l4_init+0x24>)
 8002502:	4a03      	ldr	r2, [pc, #12]	; (8002510 <stm32l4_init+0x28>)
 8002504:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002506:	2000      	movs	r0, #0
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200002e4 	.word	0x200002e4
 8002510:	003d0900 	.word	0x003d0900

08002514 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 8002514:	2000      	movs	r0, #0
 8002516:	4770      	bx	lr

08002518 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8002518:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800251a:	f000 f815 	bl	8002548 <__do_global_ctors_aux>
	__do_init_array_aux();
}
 800251e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__do_init_array_aux();
 8002522:	f000 b801 	b.w	8002528 <__do_init_array_aux>
 8002526:	bf00      	nop

08002528 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8002528:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 800252a:	4c05      	ldr	r4, [pc, #20]	; (8002540 <__do_init_array_aux+0x18>)
 800252c:	4d05      	ldr	r5, [pc, #20]	; (8002544 <__do_init_array_aux+0x1c>)
 800252e:	42ac      	cmp	r4, r5
 8002530:	d204      	bcs.n	800253c <__do_init_array_aux+0x14>
		func < __init_array_end;
		func++) {
		(*func)();
 8002532:	f854 3b04 	ldr.w	r3, [r4], #4
 8002536:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8002538:	42ac      	cmp	r4, r5
 800253a:	d3fa      	bcc.n	8002532 <__do_init_array_aux+0xa>
	}
}
 800253c:	bd38      	pop	{r3, r4, r5, pc}
 800253e:	bf00      	nop
 8002540:	0800e224 	.word	0x0800e224
 8002544:	0800e224 	.word	0x0800e224

08002548 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8002548:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 800254a:	4d06      	ldr	r5, [pc, #24]	; (8002564 <__do_global_ctors_aux+0x1c>)
 800254c:	682c      	ldr	r4, [r5, #0]

	while (nCtors >= 1U) {
 800254e:	b144      	cbz	r4, 8002562 <__do_global_ctors_aux+0x1a>
 8002550:	1c63      	adds	r3, r4, #1
 8002552:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		__CTOR_LIST__[nCtors--]();
 8002556:	3c01      	subs	r4, #1
 8002558:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800255c:	4798      	blx	r3
	while (nCtors >= 1U) {
 800255e:	2c00      	cmp	r4, #0
 8002560:	d1f9      	bne.n	8002556 <__do_global_ctors_aux+0xe>
	}
}
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	0800e21c 	.word	0x0800e21c

08002568 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8002568:	4901      	ldr	r1, [pc, #4]	; (8002570 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800256a:	2210      	movs	r2, #16
	str	r2, [r1]
 800256c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800256e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8002570:	e000ed10 	.word	0xe000ed10

08002574 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8002574:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8002576:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8002578:	f380 8811 	msr	BASEPRI, r0
	isb
 800257c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8002580:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8002584:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8002586:	b662      	cpsie	i
	isb
 8002588:	f3bf 8f6f 	isb	sy

	bx	lr
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002590:	f007 bcec 	b.w	8009f6c <z_fatal_error>

08002594 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002594:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002596:	6800      	ldr	r0, [r0, #0]
 8002598:	f007 bce8 	b.w	8009f6c <z_fatal_error>

0800259c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800259c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db08      	blt.n	80025b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	4905      	ldr	r1, [pc, #20]	; (80025b8 <arch_irq_enable+0x1c>)
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2201      	movs	r2, #1
 80025a8:	f000 001f 	and.w	r0, r0, #31
 80025ac:	fa02 f000 	lsl.w	r0, r2, r0
 80025b0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
 80025bc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0d      	blt.n	80025de <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <arch_irq_disable+0x24>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	3320      	adds	r3, #32
 80025ca:	f000 001f 	and.w	r0, r0, #31
 80025ce:	fa02 f000 	lsl.w	r0, r2, r0
 80025d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025da:	f3bf 8f6f 	isb	sy
}
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <arch_irq_is_enabled+0x18>)
 80025e6:	0942      	lsrs	r2, r0, #5
 80025e8:	f000 001f 	and.w	r0, r0, #31
 80025ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025f0:	2301      	movs	r3, #1
 80025f2:	fa03 f000 	lsl.w	r0, r3, r0
}
 80025f6:	4010      	ands	r0, r2
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8002600:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8002602:	b243      	sxtb	r3, r0
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	0109      	lsls	r1, r1, #4
  if ((int32_t)(IRQn) >= 0)
 8002606:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	b2c9      	uxtb	r1, r1
  if ((int32_t)(IRQn) >= 0)
 800260a:	db06      	blt.n	800261a <z_arm_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8002610:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002614:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8002618:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <z_arm_irq_priority_set+0x28>)
 800261c:	f000 000f 	and.w	r0, r0, #15
 8002620:	4403      	add	r3, r0
 8002622:	7619      	strb	r1, [r3, #24]
}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ecfc 	.word	0xe000ecfc

0800262c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800262c:	2100      	movs	r1, #0
 800262e:	2001      	movs	r0, #1
 8002630:	f7ff bfae 	b.w	8002590 <z_arm_fatal_error>

08002634 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8002634:	b508      	push	{r3, lr}
	handler();
 8002636:	f000 f805 	bl	8002644 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800263a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 800263e:	f000 b977 	b.w	8002930 <z_arm_exc_exit>
 8002642:	bf00      	nop

08002644 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002644:	bf30      	wfi
    b z_SysNmiOnReset
 8002646:	f7ff bffd 	b.w	8002644 <z_SysNmiOnReset>
 800264a:	bf00      	nop

0800264c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 800264e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <z_arm_prep_c+0x58>)
 8002652:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002656:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002660:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8002664:	4910      	ldr	r1, [pc, #64]	; (80026a8 <z_arm_prep_c+0x5c>)
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 800266e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8002672:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8002676:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800267a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800267e:	6348      	str	r0, [r1, #52]	; 0x34
  __ASM volatile ("dsb 0xF":::"memory");
 8002680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002684:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 8002688:	2300      	movs	r3, #0
 800268a:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 800268e:	f007 fca7 	bl	8009fe0 <z_bss_zero>
	z_data_copy();
 8002692:	f008 fecd 	bl	800b430 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8002696:	f000 fa63 	bl	8002b60 <z_arm_interrupt_init>
	z_cstart();
 800269a:	f007 fcab 	bl	8009ff4 <z_cstart>
 800269e:	bf00      	nop
 80026a0:	08000000 	.word	0x08000000
 80026a4:	e000ed00 	.word	0xe000ed00
 80026a8:	e000ef00 	.word	0xe000ef00

080026ac <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
 80026ac:	b410      	push	{r4}
	/* store off key and return value */
	_current->arch.basepri = key;
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <arch_swap+0x30>)
	_current->arch.basepri = key;
 80026b2:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 80026b4:	6824      	ldr	r4, [r4, #0]

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80026b6:	490a      	ldr	r1, [pc, #40]	; (80026e0 <arch_swap+0x34>)
	_current->arch.swap_return_value = _k_neg_eagain;
 80026b8:	e9c3 041e 	strd	r0, r4, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80026bc:	684b      	ldr	r3, [r1, #4]
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2000      	movs	r0, #0
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	f380 8811 	msr	BASEPRI, r0
 80026ca:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 80026ce:	6893      	ldr	r3, [r2, #8]
}
 80026d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026d4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80026d6:	4770      	bx	lr
 80026d8:	2000144c 	.word	0x2000144c
 80026dc:	0800eb04 	.word	0x0800eb04
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 80026e4:	4921      	ldr	r1, [pc, #132]	; (800276c <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 80026e6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 80026e8:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 80026ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 80026f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 80026f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 80026f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 80026fa:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 80026fe:	d103      	bne.n	8002708 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8002700:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
 8002704:	ec80 8a10 	vstmia	r0, {s16-s31}

08002708 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002708:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 800270a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800270e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002712:	4f17      	ldr	r7, [pc, #92]	; (8002770 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002714:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8002718:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 800271a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800271c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 800271e:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8002722:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8002724:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8002726:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8002728:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 800272c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 8002730:	d003      	beq.n	800273a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8002732:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8002734:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8002738:	e003      	b.n	8002742 <in_fp_endif>

0800273a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 800273a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
 800273e:	ec90 8a10 	vldmia	r0, {s16-s31}

08002742 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8002742:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8002746:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 800274a:	f383 8814 	msr	CONTROL, r3
    isb
 800274e:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8002752:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8002754:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8002756:	f000 fa47 	bl	8002be8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800275a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 800275e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8002762:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8002766:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 800276a:	4770      	bx	lr
    ldr r1, =_kernel
 800276c:	2000144c 	.word	0x2000144c
    ldr v4, =_SCS_ICSR
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8002774:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8002778:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 800277a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 800277e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8002782:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8002784:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8002788:	2902      	cmp	r1, #2
    beq _oops
 800278a:	d0ff      	beq.n	800278c <_oops>

0800278c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 800278c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 800278e:	f7ff ff01 	bl	8002594 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8002792:	bd01      	pop	{r0, pc}

08002794 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8002794:	7b01      	ldrb	r1, [r0, #12]
{
 8002796:	b410      	push	{r4}
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 8002798:	f011 0402 	ands.w	r4, r1, #2
 800279c:	d005      	beq.n	80027aa <arch_new_thread+0x16>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 800279e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80027a0:	3160      	adds	r1, #96	; 0x60
 80027a2:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 80027a4:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80027a6:	3960      	subs	r1, #96	; 0x60
 80027a8:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 80027aa:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 80027ae:	9b01      	ldr	r3, [sp, #4]
 80027b0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 80027b4:	9b02      	ldr	r3, [sp, #8]
 80027b6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 80027ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027be:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->a4 = (uint32_t)p3;
 80027c2:	9b03      	ldr	r3, [sp, #12]
 80027c4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <arch_new_thread+0x68>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	f842 3c08 	str.w	r3, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 80027d2:	2100      	movs	r1, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80027d4:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 80027d6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 80027d8:	6781      	str	r1, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 80027da:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 80027de:	b92c      	cbnz	r4, 80027ec <arch_new_thread+0x58>
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 80027e0:	23fd      	movs	r3, #253	; 0xfd
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80027e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 80027e6:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
}
 80027ea:	4770      	bx	lr
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80027ec:	f64f 5308 	movw	r3, #64776	; 0xfd08
}
 80027f0:	f85d 4b04 	ldr.w	r4, [sp], #4
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80027f4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	080023fd 	.word	0x080023fd

08002800 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * Adjust the MPU stack guard size together with the FPU
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
 8002800:	b430      	push	{r4, r5}
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8002802:	7b03      	ldrb	r3, [r0, #12]
		if ((thread->arch.mode &
 8002804:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8002808:	079d      	lsls	r5, r3, #30
		if ((thread->arch.mode &
 800280a:	f002 0408 	and.w	r4, r2, #8
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800280e:	d403      	bmi.n	8002818 <z_arm_mpu_stack_guard_and_fpu_adjust+0x18>
 8002810:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
 8002814:	06c9      	lsls	r1, r1, #27
 8002816:	d40b      	bmi.n	8002830 <z_arm_mpu_stack_guard_and_fpu_adjust+0x30>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 8002818:	4d16      	ldr	r5, [pc, #88]	; (8002874 <z_arm_mpu_stack_guard_and_fpu_adjust+0x74>)
 800281a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800281c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8002820:	6369      	str	r1, [r5, #52]	; 0x34
		if ((thread->arch.mode &
 8002822:	b1c4      	cbz	r4, 8002856 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	7303      	strb	r3, [r0, #12]
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
}
 800282a:	bc30      	pop	{r4, r5}
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 800282c:	2080      	movs	r0, #128	; 0x80
}
 800282e:	4770      	bx	lr
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 8002830:	4910      	ldr	r1, [pc, #64]	; (8002874 <z_arm_mpu_stack_guard_and_fpu_adjust+0x74>)
 8002832:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002838:	634b      	str	r3, [r1, #52]	; 0x34
		if ((thread->arch.mode &
 800283a:	b1bc      	cbz	r4, 800286c <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>
				thread->stack_info.size +=
 800283c:	e9d0 131a 	ldrd	r1, r3, [r0, #104]	; 0x68
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8002840:	f022 0208 	bic.w	r2, r2, #8
				thread->stack_info.start -=
 8002844:	3960      	subs	r1, #96	; 0x60
				thread->stack_info.size +=
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	e9c0 131a 	strd	r1, r3, [r0, #104]	; 0x68
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800284c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
}
 8002850:	bc30      	pop	{r4, r5}
	return MPU_GUARD_ALIGN_AND_SIZE;
 8002852:	2020      	movs	r0, #32
}
 8002854:	4770      	bx	lr
				thread->stack_info.size -=
 8002856:	e9d0 411a 	ldrd	r4, r1, [r0, #104]	; 0x68
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 800285a:	f042 0208 	orr.w	r2, r2, #8
				thread->stack_info.start +=
 800285e:	3460      	adds	r4, #96	; 0x60
				thread->stack_info.size -=
 8002860:	3960      	subs	r1, #96	; 0x60
 8002862:	e9c0 411a 	strd	r4, r1, [r0, #104]	; 0x68
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8002866:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
				thread->stack_info.start +=
 800286a:	e7db      	b.n	8002824 <z_arm_mpu_stack_guard_and_fpu_adjust+0x24>
	return MPU_GUARD_ALIGN_AND_SIZE;
 800286c:	2020      	movs	r0, #32
}
 800286e:	bc30      	pop	{r4, r5}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ef00 	.word	0xe000ef00

08002878 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <z_check_thread_stack_fail+0x44>)
 800287a:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
 800287c:	b1db      	cbz	r3, 80028b6 <z_check_thread_stack_fail+0x3e>
{
 800287e:	b410      	push	{r4}
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 8002880:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
 8002884:	4602      	mov	r2, r0
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8002886:	f014 0f08 	tst.w	r4, #8
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800288a:	6e98      	ldr	r0, [r3, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 800288c:	bf14      	ite	ne
 800288e:	2380      	movne	r3, #128	; 0x80
 8002890:	2320      	moveq	r3, #32
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8002892:	f112 0f16 	cmn.w	r2, #22
 8002896:	d008      	beq.n	80028aa <z_check_thread_stack_fail+0x32>
 8002898:	1ac3      	subs	r3, r0, r3
 800289a:	4293      	cmp	r3, r2
 800289c:	d903      	bls.n	80028a6 <z_check_thread_stack_fail+0x2e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800289e:	2000      	movs	r0, #0
}
 80028a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a4:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80028a6:	4282      	cmp	r2, r0
 80028a8:	d2f9      	bcs.n	800289e <z_check_thread_stack_fail+0x26>
	return 0;
 80028aa:	4281      	cmp	r1, r0
 80028ac:	bf28      	it	cs
 80028ae:	2000      	movcs	r0, #0
}
 80028b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028b4:	4770      	bx	lr
	return 0;
 80028b6:	4618      	mov	r0, r3
}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	2000144c 	.word	0x2000144c

080028c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80028c0:	b508      	push	{r3, lr}
 80028c2:	4614      	mov	r4, r2
 80028c4:	460d      	mov	r5, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80028cc:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80028d0:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80028d4:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <arch_switch_to_main_thread+0x44>)
 80028e2:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80028e4:	f000 f980 	bl	8002be8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80028e8:	4620      	mov	r0, r4
 80028ea:	f385 8809 	msr	PSP, r5
 80028ee:	2100      	movs	r1, #0
 80028f0:	b663      	cpsie	if
 80028f2:	f381 8811 	msr	BASEPRI, r1
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	2200      	movs	r2, #0
 80028fc:	2300      	movs	r3, #0
 80028fe:	f7ff fd7d 	bl	80023fc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8002902:	bf00      	nop
 8002904:	2000144c 	.word	0x2000144c

08002908 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8002908:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800290a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 800290e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8002912:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8002918:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800291a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 800291c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 800291e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8002922:	4902      	ldr	r1, [pc, #8]	; (800292c <_isr_wrapper+0x24>)
	bx r1
 8002924:	4708      	bx	r1
 8002926:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8002928:	0800df74 	.word	0x0800df74
	ldr r1, =z_arm_int_exit
 800292c:	08002931 	.word	0x08002931

08002930 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8002932:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8002934:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8002936:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002938:	d003      	beq.n	8002942 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800293a:	4903      	ldr	r1, [pc, #12]	; (8002948 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 800293c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002940:	600a      	str	r2, [r1, #0]

08002942 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8002942:	4770      	bx	lr
	ldr r3, =_kernel
 8002944:	2000144c 	.word	0x2000144c
	ldr r1, =_SCS_ICSR
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 800294c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <mem_manage_fault+0x6c>)
 8002950:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002952:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002954:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8002956:	07ad      	lsls	r5, r5, #30
{
 8002958:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 800295a:	d503      	bpl.n	8002964 <mem_manage_fault+0x18>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 800295c:	6b5d      	ldr	r5, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800295e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002960:	0612      	lsls	r2, r2, #24
 8002962:	d421      	bmi.n	80029a8 <mem_manage_fault+0x5c>
	uint32_t mmfar = -EINVAL;
 8002964:	f06f 0515 	mvn.w	r5, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <mem_manage_fault+0x6c>)
 800296a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 800296c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800296e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002970:	06d1      	lsls	r1, r2, #27
 8002972:	d40b      	bmi.n	800298c <mem_manage_fault+0x40>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8002976:	079a      	lsls	r2, r3, #30
 8002978:	d408      	bmi.n	800298c <mem_manage_fault+0x40>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800297a:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800297c:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <mem_manage_fault+0x6c>)
 800297e:	6a93      	ldr	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
 8002980:	2100      	movs	r1, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8002982:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8002986:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8002988:	7021      	strb	r1, [r4, #0]

	return reason;
}
 800298a:	bd38      	pop	{r3, r4, r5, pc}
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <mem_manage_fault+0x6c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	051b      	lsls	r3, r3, #20
 8002992:	d5f2      	bpl.n	800297a <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8002994:	4601      	mov	r1, r0
 8002996:	4628      	mov	r0, r5
 8002998:	f7ff ff6e 	bl	8002878 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 800299c:	2800      	cmp	r0, #0
 800299e:	d0ec      	beq.n	800297a <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80029a0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80029a4:	2002      	movs	r0, #2
 80029a6:	e7e9      	b.n	800297c <mem_manage_fault+0x30>
			if (from_hard_fault != 0) {
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d0dd      	beq.n	8002968 <mem_manage_fault+0x1c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80029ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
 80029b4:	e7d8      	b.n	8002968 <mem_manage_fault+0x1c>
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <bus_fault.constprop.0+0x3c>)
 80029be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 80029c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 80029c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c4:	0592      	lsls	r2, r2, #22
 80029c6:	d508      	bpl.n	80029da <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 80029c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80029ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	d504      	bpl.n	80029da <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
 80029d0:	b118      	cbz	r0, 80029da <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80029d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <bus_fault.constprop.0+0x3c>)
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80029de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e0:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <bus_fault.constprop.0+0x3c>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80029e4:	bf58      	it	pl
 80029e6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80029e8:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 80029ea:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80029ec:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80029f0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 80029f2:	7008      	strb	r0, [r1, #0]

	return reason;
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80029fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80029fe:	4b4e      	ldr	r3, [pc, #312]	; (8002b38 <z_arm_fault+0x13c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
{
 8002a02:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	2500      	movs	r5, #0
 8002a0a:	f385 8811 	msr	BASEPRI, r5
 8002a0e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8002a12:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 8002a16:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 8002a1a:	d169      	bne.n	8002af0 <z_arm_fault+0xf4>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8002a1c:	f002 040c 	and.w	r4, r2, #12
 8002a20:	2c08      	cmp	r4, #8
 8002a22:	d065      	beq.n	8002af0 <z_arm_fault+0xf4>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8002a24:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8002a26:	bf47      	ittee	mi
 8002a28:	460c      	movmi	r4, r1
	*nested_exc = false;
 8002a2a:	462e      	movmi	r6, r5
			ptr_esf = (z_arch_esf_t *)msp;
 8002a2c:	4604      	movpl	r4, r0
			*nested_exc = true;
 8002a2e:	2601      	movpl	r6, #1
	*recoverable = false;
 8002a30:	2200      	movs	r2, #0
	switch (fault) {
 8002a32:	3b03      	subs	r3, #3
	*recoverable = false;
 8002a34:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d866      	bhi.n	8002b0a <z_arm_fault+0x10e>
 8002a3c:	e8df f003 	tbb	[pc, r3]
 8002a40:	0225313b 	.word	0x0225313b
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <z_arm_fault+0x13c>)
		reason = usage_fault(esf);
 8002a46:	2500      	movs	r5, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a56:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8002a5a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002a60:	2268      	movs	r2, #104	; 0x68
 8002a62:	4621      	mov	r1, r4
 8002a64:	a802      	add	r0, sp, #8
 8002a66:	f00a fe1b 	bl	800d6a0 <memcpy>
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (nested_exc) {
 8002a6c:	2e00      	cmp	r6, #0
 8002a6e:	d042      	beq.n	8002af6 <z_arm_fault+0xfa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002a70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a78:	b90a      	cbnz	r2, 8002a7e <z_arm_fault+0x82>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	9309      	str	r3, [sp, #36]	; 0x24
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002a7e:	a902      	add	r1, sp, #8
 8002a80:	4628      	mov	r0, r5
 8002a82:	f7ff fd85 	bl	8002590 <z_arm_fatal_error>
}
 8002a86:	b01c      	add	sp, #112	; 0x70
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
		reason = bus_fault(esf, 0, recoverable);
 8002a8a:	f10d 0107 	add.w	r1, sp, #7
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff ff94 	bl	80029bc <bus_fault.constprop.0>
	if (recoverable) {
 8002a94:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = bus_fault(esf, 0, recoverable);
 8002a98:	4605      	mov	r5, r0
	if (recoverable) {
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0e0      	beq.n	8002a60 <z_arm_fault+0x64>
}
 8002a9e:	b01c      	add	sp, #112	; 0x70
 8002aa0:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8002aa2:	f10d 0207 	add.w	r2, sp, #7
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff4f 	bl	800294c <mem_manage_fault>
	if (recoverable) {
 8002aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		reason = mem_manage_fault(esf, 0, recoverable);
 8002ab2:	4605      	mov	r5, r0
		break;
 8002ab4:	e7f1      	b.n	8002a9a <z_arm_fault+0x9e>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <z_arm_fault+0x13c>)
 8002ab8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002aba:	f015 0502 	ands.w	r5, r5, #2
 8002abe:	d124      	bne.n	8002b0a <z_arm_fault+0x10e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8002ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	dbcc      	blt.n	8002a60 <z_arm_fault+0x64>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	0052      	lsls	r2, r2, #1
 8002aca:	d5c9      	bpl.n	8002a60 <z_arm_fault+0x64>
	uint16_t fault_insn = *(ret_addr - 1);
 8002acc:	69a2      	ldr	r2, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8002ace:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8002ad2:	f64d 7202 	movw	r2, #57090	; 0xdf02
 8002ad6:	4291      	cmp	r1, r2
 8002ad8:	d023      	beq.n	8002b22 <z_arm_fault+0x126>
		} else if (SCB_MMFSR != 0) {
 8002ada:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002ade:	b9b2      	cbnz	r2, 8002b0e <z_arm_fault+0x112>
		} else if (SCB_BFSR != 0) {
 8002ae0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8002ae4:	b9fa      	cbnz	r2, 8002b26 <z_arm_fault+0x12a>
		} else if (SCB_UFSR != 0) {
 8002ae6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	d0b8      	beq.n	8002a60 <z_arm_fault+0x64>
 8002aee:	e7ab      	b.n	8002a48 <z_arm_fault+0x4c>
	*nested_exc = false;
 8002af0:	462e      	mov	r6, r5
		return NULL;
 8002af2:	462c      	mov	r4, r5
 8002af4:	e79c      	b.n	8002a30 <z_arm_fault+0x34>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002af6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002afa:	f023 0301 	bic.w	r3, r3, #1
	z_arm_fatal_error(reason, &esf_copy);
 8002afe:	a902      	add	r1, sp, #8
 8002b00:	4628      	mov	r0, r5
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002b02:	9309      	str	r3, [sp, #36]	; 0x24
	z_arm_fatal_error(reason, &esf_copy);
 8002b04:	f7ff fd44 	bl	8002590 <z_arm_fatal_error>
 8002b08:	e7bd      	b.n	8002a86 <z_arm_fault+0x8a>
	switch (fault) {
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	e7a8      	b.n	8002a60 <z_arm_fault+0x64>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002b0e:	f10d 0207 	add.w	r2, sp, #7
 8002b12:	2101      	movs	r1, #1
 8002b14:	4620      	mov	r0, r4
 8002b16:	f7ff ff19 	bl	800294c <mem_manage_fault>
	if (recoverable) {
 8002b1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = mem_manage_fault(esf, 1, recoverable);
 8002b1e:	4605      	mov	r5, r0
 8002b20:	e7bb      	b.n	8002a9a <z_arm_fault+0x9e>
			reason = esf->basic.r0;
 8002b22:	6825      	ldr	r5, [r4, #0]
 8002b24:	e79c      	b.n	8002a60 <z_arm_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
 8002b26:	f10d 0107 	add.w	r1, sp, #7
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7ff ff46 	bl	80029bc <bus_fault.constprop.0>
	if (recoverable) {
 8002b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
			reason = bus_fault(esf, 1, recoverable);
 8002b34:	4605      	mov	r5, r0
 8002b36:	e7b0      	b.n	8002a9a <z_arm_fault+0x9e>
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002b3c:	4a02      	ldr	r2, [pc, #8]	; (8002b48 <z_arm_fault_init+0xc>)
 8002b3e:	6953      	ldr	r3, [r2, #20]
 8002b40:	f043 0310 	orr.w	r3, r3, #16
 8002b44:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002b4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002b50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8002b54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8002b56:	4672      	mov	r2, lr
	bl z_arm_fault
 8002b58:	f7ff ff50 	bl	80029fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002b5c:	bd01      	pop	{r0, pc}
 8002b5e:	bf00      	nop

08002b60 <z_arm_interrupt_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	4804      	ldr	r0, [pc, #16]	; (8002b74 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	2110      	movs	r1, #16
 8002b66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002b68:	3301      	adds	r3, #1
 8002b6a:	2b55      	cmp	r3, #85	; 0x55
 8002b6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002b70:	d1f9      	bne.n	8002b66 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8002b78:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8002b7a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8002b7e:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8002b80:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8002b84:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8002b86:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8002b8a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8002b8e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002b90:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002b92:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002b96:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8002b9a:	f7ff fd57 	bl	800264c <z_arm_prep_c>
 8002b9e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002ba0:	20003480 	.word	0x20003480

08002ba4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <z_impl_k_thread_abort+0x24>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4283      	cmp	r3, r0
 8002baa:	d001      	beq.n	8002bb0 <z_impl_k_thread_abort+0xc>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8002bac:	f008 bb8c 	b.w	800b2c8 <z_thread_abort>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f9      	beq.n	8002bac <z_impl_k_thread_abort+0x8>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <z_impl_k_thread_abort+0x28>)
 8002bba:	6853      	ldr	r3, [r2, #4]
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6053      	str	r3, [r2, #4]
	z_thread_abort(thread);
 8002bc2:	f008 bb81 	b.w	800b2c8 <z_thread_abort>
 8002bc6:	bf00      	nop
 8002bc8:	2000144c 	.word	0x2000144c
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <z_arm_configure_static_mpu_regions+0xc>)
 8002bd2:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <z_arm_configure_static_mpu_regions+0x10>)
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <z_arm_configure_static_mpu_regions+0x14>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	f000 b864 	b.w	8002ca4 <arm_core_mpu_configure_static_mpu_regions>
 8002bdc:	20028000 	.word	0x20028000
 8002be0:	20000000 	.word	0x20000000
 8002be4:	0800e434 	.word	0x0800e434

08002be8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8002be8:	b510      	push	{r4, lr}
 8002bea:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8002bec:	f7ff fe08 	bl	8002800 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002bf0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <z_arm_configure_dynamic_mpu_regions+0x24>)
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002bf4:	4c06      	ldr	r4, [pc, #24]	; (8002c10 <z_arm_configure_dynamic_mpu_regions+0x28>)
 8002bf6:	609c      	str	r4, [r3, #8]
		guard_start = thread->stack_info.start - guard_size;
 8002bf8:	1a12      	subs	r2, r2, r0
	dynamic_regions[region_num].size = guard_size;
 8002bfa:	e9c3 2000 	strd	r2, r0, [r3]
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
}
 8002bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 b857 	b.w	8002cb8 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002c0a:	bf00      	nop
 8002c0c:	20000d20 	.word	0x20000d20
 8002c10:	150b0000 	.word	0x150b0000

08002c14 <mpu_configure_regions>:
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8002c14:	2900      	cmp	r1, #0
 8002c16:	d041      	beq.n	8002c9c <mpu_configure_regions+0x88>
{
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8002c1a:	4f21      	ldr	r7, [pc, #132]	; (8002ca0 <mpu_configure_regions+0x8c>)
 8002c1c:	4684      	mov	ip, r0
	for (i = 0; i < regions_num; i++) {
 8002c1e:	f04f 0e00 	mov.w	lr, #0
		if (regions[i].size == 0U) {
 8002c22:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8002c26:	b36c      	cbz	r4, 8002c84 <mpu_configure_regions+0x70>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002c28:	f8dc 5000 	ldr.w	r5, [ip]
 8002c2c:	b153      	cbz	r3, 8002c44 <mpu_configure_regions+0x30>
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
		&&
 8002c2e:	2c1f      	cmp	r4, #31
 8002c30:	d904      	bls.n	8002c3c <mpu_configure_regions+0x28>
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002c32:	ea44 0005 	orr.w	r0, r4, r5
		((part->size & (part->size - 1U)) == 0U)
 8002c36:	1e66      	subs	r6, r4, #1
		&&
 8002c38:	4230      	tst	r0, r6
 8002c3a:	d003      	beq.n	8002c44 <mpu_configure_regions+0x30>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
 8002c3c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8002c40:	4610      	mov	r0, r2
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8002c44:	2c20      	cmp	r4, #32
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002c46:	f8dc 6008 	ldr.w	r6, [ip, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002c4a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
 8002c4c:	d922      	bls.n	8002c94 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
 8002c4e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002c52:	d821      	bhi.n	8002c98 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002c54:	3c01      	subs	r4, #1
 8002c56:	fab4 f484 	clz	r4, r4
 8002c5a:	f1c4 041f 	rsb	r4, r4, #31
 8002c5e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8002c60:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002c62:	ea44 0406 	orr.w	r4, r4, r6
 8002c66:	d8e9      	bhi.n	8002c3c <mpu_configure_regions+0x28>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c68:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8002c6c:	4315      	orrs	r5, r2
 8002c6e:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c72:	f044 0401 	orr.w	r4, r4, #1
 8002c76:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c7a:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
 8002c7e:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c80:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
 8002c84:	f10e 0e01 	add.w	lr, lr, #1
 8002c88:	458e      	cmp	lr, r1
 8002c8a:	f10c 0c0c 	add.w	ip, ip, #12
 8002c8e:	d1c8      	bne.n	8002c22 <mpu_configure_regions+0xe>
}
 8002c90:	4610      	mov	r0, r2
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return REGION_32B;
 8002c94:	2408      	movs	r4, #8
 8002c96:	e7e3      	b.n	8002c60 <mpu_configure_regions+0x4c>
		return REGION_4G;
 8002c98:	243e      	movs	r4, #62	; 0x3e
 8002c9a:	e7e1      	b.n	8002c60 <mpu_configure_regions+0x4c>
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
 8002ca4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002ca6:	4c03      	ldr	r4, [pc, #12]	; (8002cb4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002ca8:	2301      	movs	r3, #1
 8002caa:	7822      	ldrb	r2, [r4, #0]
 8002cac:	f7ff ffb2 	bl	8002c14 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002cb0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
 8002cb2:	bd10      	pop	{r4, pc}
 8002cb4:	200014a8 	.word	0x200014a8

08002cb8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8002cb8:	b508      	push	{r3, lr}
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
	int mpu_reg_index = static_regions_num;
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	f7ff ffa8 	bl	8002c14 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002cc4:	f110 0f16 	cmn.w	r0, #22
 8002cc8:	d009      	beq.n	8002cde <arm_core_mpu_configure_dynamic_mpu_regions+0x26>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002cca:	2807      	cmp	r0, #7
 8002ccc:	dc07      	bgt.n	8002cde <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
 8002cd0:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	2808      	cmp	r0, #8
  MPU->RASR = 0U;
 8002cd8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002cdc:	d1f8      	bne.n	8002cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
 8002cde:	bd08      	pop	{r3, pc}
 8002ce0:	200014a8 	.word	0x200014a8
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <z_arm_mpu_init+0x6c>)
{
 8002cea:	b410      	push	{r4}
	if (mpu_config.num_regions > get_num_regions()) {
 8002cec:	681c      	ldr	r4, [r3, #0]
 8002cee:	2c08      	cmp	r4, #8
 8002cf0:	d82c      	bhi.n	8002d4c <z_arm_mpu_init+0x64>
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf2:	f3bf 8f5f 	dmb	sy
	MPU->CTRL = 0;
 8002cf6:	4818      	ldr	r0, [pc, #96]	; (8002d58 <z_arm_mpu_init+0x70>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002cfe:	b31c      	cbz	r4, 8002d48 <z_arm_mpu_init+0x60>
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002d06:	680b      	ldr	r3, [r1, #0]
 8002d08:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	310c      	adds	r1, #12
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002d14:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d1c:	3201      	adds	r2, #1
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	42a2      	cmp	r2, r4
 8002d24:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8002d28:	d1eb      	bne.n	8002d02 <z_arm_mpu_init+0x1a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	480b      	ldr	r0, [pc, #44]	; (8002d5c <z_arm_mpu_init+0x74>)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <z_arm_mpu_init+0x70>)
	static_regions_num = mpu_config.num_regions;
 8002d30:	7002      	strb	r2, [r0, #0]
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002d32:	2105      	movs	r1, #5
 8002d34:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8002d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d3c:	f3bf 8f6f 	isb	sy
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8002d40:	2000      	movs	r0, #0
}
 8002d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d46:	4770      	bx	lr
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002d48:	4622      	mov	r2, r4
 8002d4a:	e7ef      	b.n	8002d2c <z_arm_mpu_init+0x44>
		return -1;
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d50:	e7f7      	b.n	8002d42 <z_arm_mpu_init+0x5a>
 8002d52:	bf00      	nop
 8002d54:	0800e458 	.word	0x0800e458
 8002d58:	e000ed00 	.word	0xe000ed00
 8002d5c:	200014a8 	.word	0x200014a8

08002d60 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
 8002d60:	2000      	movs	r0, #0
 8002d62:	4770      	bx	lr

08002d64 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	4770      	bx	lr

08002d70 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	9101      	str	r1, [sp, #4]
	for (i = 0; i < nbytes; i++) {
 8002d76:	2a00      	cmp	r2, #0
 8002d78:	dd16      	ble.n	8002da8 <_read+0x38>
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	4f0b      	ldr	r7, [pc, #44]	; (8002dac <_read+0x3c>)
 8002d7e:	460e      	mov	r6, r1
 8002d80:	1e4c      	subs	r4, r1, #1
 8002d82:	188d      	adds	r5, r1, r2
 8002d84:	e003      	b.n	8002d8e <_read+0x1e>
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002d86:	280d      	cmp	r0, #13
 8002d88:	d00b      	beq.n	8002da2 <_read+0x32>
	for (i = 0; i < nbytes; i++) {
 8002d8a:	42ac      	cmp	r4, r5
 8002d8c:	d009      	beq.n	8002da2 <_read+0x32>
		*(buf + i) = _stdin_hook();
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002d92:	4623      	mov	r3, r4
 8002d94:	3302      	adds	r3, #2
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002d96:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 8002d98:	f804 0f01 	strb.w	r0, [r4, #1]!
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8002d9c:	eba3 0306 	sub.w	r3, r3, r6
 8002da0:	d1f1      	bne.n	8002d86 <_read+0x16>
	ARG_UNUSED(fd);

	return zephyr_read_stdin(buf, nbytes);
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	b003      	add	sp, #12
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < nbytes; i++) {
 8002da8:	2300      	movs	r3, #0
	return zephyr_read_stdin(buf, nbytes);
 8002daa:	e7fa      	b.n	8002da2 <_read+0x32>
 8002dac:	20000010 	.word	0x20000010

08002db0 <_write>:
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	4617      	mov	r7, r2
	for (i = 0; i < nbytes; i++) {
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	dd0f      	ble.n	8002dd8 <_write+0x28>
 8002db8:	1e55      	subs	r5, r2, #1
 8002dba:	4e08      	ldr	r6, [pc, #32]	; (8002ddc <_write+0x2c>)
 8002dbc:	1e4c      	subs	r4, r1, #1
 8002dbe:	440d      	add	r5, r1
		if (*(buf + i) == '\n') {
 8002dc0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002dc4:	280a      	cmp	r0, #10
 8002dc6:	d103      	bne.n	8002dd0 <_write+0x20>
			_stdout_hook('\r');
 8002dc8:	6833      	ldr	r3, [r6, #0]
 8002dca:	200d      	movs	r0, #13
 8002dcc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8002dce:	7820      	ldrb	r0, [r4, #0]
 8002dd0:	6833      	ldr	r3, [r6, #0]
 8002dd2:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002dd4:	42ac      	cmp	r4, r5
 8002dd6:	d1f3      	bne.n	8002dc0 <_write+0x10>
	ARG_UNUSED(fd);

	return zephyr_write_stdout(buf, nbytes);
}
 8002dd8:	4638      	mov	r0, r7
 8002dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ddc:	20000014 	.word	0x20000014

08002de0 <_close>:
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002de8:	2000      	movs	r0, #0
 8002dea:	4770      	bx	lr

08002dec <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
 8002dec:	2802      	cmp	r0, #2
 8002dee:	bfcc      	ite	gt
 8002df0:	2000      	movgt	r0, #0
 8002df2:	2001      	movle	r0, #1
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <_kill>:
__weak FUNC_ALIAS(_isatty, isatty, int);

int _kill(int i, int j)
{
	return 0;
}
 8002df8:	2000      	movs	r0, #0
 8002dfa:	4770      	bx	lr

08002dfc <_getpid>:
__weak FUNC_ALIAS(_kill, kill, int);

int _getpid(void)
{
	return 0;
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	4770      	bx	lr

08002e00 <_fstat>:
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e04:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e06:	2000      	movs	r0, #0
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop

08002e0c <_exit>:
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (*(buf + i) == '\n') {
 8002e0e:	4c0b      	ldr	r4, [pc, #44]	; (8002e3c <_exit+0x30>)
 8002e10:	4e0b      	ldr	r6, [pc, #44]	; (8002e40 <_exit+0x34>)
 8002e12:	1d27      	adds	r7, r4, #4
 8002e14:	2565      	movs	r5, #101	; 0x65
		_stdout_hook(*(buf + i));
 8002e16:	6833      	ldr	r3, [r6, #0]
 8002e18:	4628      	mov	r0, r5
 8002e1a:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002e1c:	42bc      	cmp	r4, r7
 8002e1e:	d00b      	beq.n	8002e38 <_exit+0x2c>
		if (*(buf + i) == '\n') {
 8002e20:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8002e24:	2d0a      	cmp	r5, #10
 8002e26:	d1f6      	bne.n	8002e16 <_exit+0xa>
			_stdout_hook('\r');
 8002e28:	6833      	ldr	r3, [r6, #0]
 8002e2a:	200d      	movs	r0, #13
 8002e2c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8002e2e:	6833      	ldr	r3, [r6, #0]
 8002e30:	4628      	mov	r0, r5
 8002e32:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8002e34:	42bc      	cmp	r4, r7
 8002e36:	d1f3      	bne.n	8002e20 <_exit+0x14>
	_write(1, "exit\n", 5);
	while (1) {
 8002e38:	e7fe      	b.n	8002e38 <_exit+0x2c>
 8002e3a:	bf00      	nop
 8002e3c:	0800e440 	.word	0x0800e440
 8002e40:	20000014 	.word	0x20000014

08002e44 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8002e44:	b430      	push	{r4, r5}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8002e46:	4c08      	ldr	r4, [pc, #32]	; (8002e68 <_sbrk+0x24>)

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8002e48:	4d08      	ldr	r5, [pc, #32]	; (8002e6c <_sbrk+0x28>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8002e4a:	6823      	ldr	r3, [r4, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8002e4c:	f1c5 5100 	rsb	r1, r5, #536870912	; 0x20000000
 8002e50:	18c2      	adds	r2, r0, r3
 8002e52:	f501 3120 	add.w	r1, r1, #163840	; 0x28000
 8002e56:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
 8002e58:	bf3a      	itte	cc
 8002e5a:	1958      	addcc	r0, r3, r5
		heap_sz += count;
 8002e5c:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8002e5e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8002e62:	bc30      	pop	{r4, r5}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000d2c 	.word	0x20000d2c
 8002e6c:	200041e8 	.word	0x200041e8

08002e70 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 8002e74:	2014      	movs	r0, #20
 8002e76:	f009 f86d 	bl	800bf54 <malloc>
 8002e7a:	6020      	str	r0, [r4, #0]
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
 8002e80:	f007 bb2a 	b.w	800a4d8 <z_impl_k_mutex_init>

08002e84 <__retarget_lock_acquire_recursive>:

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_mutex_lock(mutex, timeout);
 8002e8c:	f007 bb2c 	b.w	800a4e8 <z_impl_k_mutex_lock>

08002e90 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
 8002e90:	f007 bbae 	b.w	800a5f0 <z_impl_k_mutex_unlock>

08002e94 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 8002e94:	2200      	movs	r2, #0
{
 8002e96:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002e98:	4611      	mov	r1, r2
 8002e9a:	2006      	movs	r0, #6
 8002e9c:	f7ff fbb0 	bl	8002600 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	2007      	movs	r0, #7
 8002ea6:	f7ff fbab 	bl	8002600 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4611      	mov	r1, r2
 8002eae:	2008      	movs	r0, #8
 8002eb0:	f7ff fba6 	bl	8002600 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	2009      	movs	r0, #9
 8002eba:	f7ff fba1 	bl	8002600 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	200a      	movs	r0, #10
 8002ec4:	f7ff fb9c 	bl	8002600 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4611      	mov	r1, r2
 8002ecc:	2017      	movs	r0, #23
 8002ece:	f7ff fb97 	bl	8002600 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2028      	movs	r0, #40	; 0x28
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	f7ff fb92 	bl	8002600 <z_arm_irq_priority_set>
}
 8002edc:	2000      	movs	r0, #0
 8002ede:	bd08      	pop	{r3, pc}

08002ee0 <__stm32_exti_isr_15_10>:
{
 8002ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee4:	6907      	ldr	r7, [r0, #16]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002ee6:	4d0e      	ldr	r5, [pc, #56]	; (8002f20 <__stm32_exti_isr_15_10+0x40>)
	for (line = min; line < max; line++) {
 8002ee8:	240a      	movs	r4, #10
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002eea:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 8002eec:	f107 0804 	add.w	r8, r7, #4
 8002ef0:	e002      	b.n	8002ef8 <__stm32_exti_isr_15_10+0x18>
	for (line = min; line < max; line++) {
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	2c10      	cmp	r4, #16
 8002ef6:	d011      	beq.n	8002f1c <__stm32_exti_isr_15_10+0x3c>
 8002ef8:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002efa:	fa06 f304 	lsl.w	r3, r6, r4
 8002efe:	ea33 0202 	bics.w	r2, r3, r2
 8002f02:	d1f6      	bne.n	8002ef2 <__stm32_exti_isr_15_10+0x12>
			if (!data->cb[line].cb) {
 8002f04:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f08:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 8002f0a:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <__stm32_exti_isr_15_10+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8002f10:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8002f14:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 8002f16:	4790      	blx	r2
	for (line = min; line < max; line++) {
 8002f18:	2c10      	cmp	r4, #16
 8002f1a:	d1ed      	bne.n	8002ef8 <__stm32_exti_isr_15_10+0x18>
}
 8002f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f20:	40010400 	.word	0x40010400

08002f24 <__stm32_exti_isr_0>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <__stm32_exti_isr_0+0x1c>)
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	07d2      	lsls	r2, r2, #31
 8002f2a:	d400      	bmi.n	8002f2e <__stm32_exti_isr_0+0xa>
}
 8002f2c:	4770      	bx	lr
 8002f2e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002f30:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f32:	2001      	movs	r0, #1
 8002f34:	6158      	str	r0, [r3, #20]
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d0f8      	beq.n	8002f2c <__stm32_exti_isr_0+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 8002f3a:	6849      	ldr	r1, [r1, #4]
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4710      	bx	r2
 8002f40:	40010400 	.word	0x40010400

08002f44 <__stm32_exti_isr_1>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <__stm32_exti_isr_1+0x1c>)
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	0792      	lsls	r2, r2, #30
 8002f4a:	d400      	bmi.n	8002f4e <__stm32_exti_isr_1+0xa>
}
 8002f4c:	4770      	bx	lr
 8002f4e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002f50:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f52:	2002      	movs	r0, #2
 8002f54:	6158      	str	r0, [r3, #20]
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d0f8      	beq.n	8002f4c <__stm32_exti_isr_1+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 8002f5a:	68c9      	ldr	r1, [r1, #12]
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	4710      	bx	r2
 8002f60:	40010400 	.word	0x40010400

08002f64 <__stm32_exti_isr_2>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <__stm32_exti_isr_2+0x1c>)
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	0752      	lsls	r2, r2, #29
 8002f6a:	d400      	bmi.n	8002f6e <__stm32_exti_isr_2+0xa>
}
 8002f6c:	4770      	bx	lr
 8002f6e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002f70:	690a      	ldr	r2, [r1, #16]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f72:	2004      	movs	r0, #4
 8002f74:	6158      	str	r0, [r3, #20]
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d0f8      	beq.n	8002f6c <__stm32_exti_isr_2+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 8002f7a:	6949      	ldr	r1, [r1, #20]
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	4710      	bx	r2
 8002f80:	40010400 	.word	0x40010400

08002f84 <__stm32_exti_isr_3>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <__stm32_exti_isr_3+0x1c>)
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	0712      	lsls	r2, r2, #28
 8002f8a:	d400      	bmi.n	8002f8e <__stm32_exti_isr_3+0xa>
}
 8002f8c:	4770      	bx	lr
 8002f8e:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002f90:	698a      	ldr	r2, [r1, #24]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002f92:	2008      	movs	r0, #8
 8002f94:	6158      	str	r0, [r3, #20]
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	d0f8      	beq.n	8002f8c <__stm32_exti_isr_3+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 8002f9a:	69c9      	ldr	r1, [r1, #28]
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	4710      	bx	r2
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <__stm32_exti_isr_4>:
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <__stm32_exti_isr_4+0x1c>)
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	06d2      	lsls	r2, r2, #27
 8002faa:	d400      	bmi.n	8002fae <__stm32_exti_isr_4+0xa>
}
 8002fac:	4770      	bx	lr
 8002fae:	6901      	ldr	r1, [r0, #16]
			if (!data->cb[line].cb) {
 8002fb0:	6a0a      	ldr	r2, [r1, #32]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002fb2:	2010      	movs	r0, #16
 8002fb4:	6158      	str	r0, [r3, #20]
 8002fb6:	2a00      	cmp	r2, #0
 8002fb8:	d0f8      	beq.n	8002fac <__stm32_exti_isr_4+0x8>
			data->cb[line].cb(line, data->cb[line].data);
 8002fba:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002fbc:	2004      	movs	r0, #4
 8002fbe:	4710      	bx	r2
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <__stm32_exti_isr_9_5>:
{
 8002fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc8:	6907      	ldr	r7, [r0, #16]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002fca:	4d0e      	ldr	r5, [pc, #56]	; (8003004 <__stm32_exti_isr_9_5+0x40>)
	for (line = min; line < max; line++) {
 8002fcc:	2405      	movs	r4, #5
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002fce:	2601      	movs	r6, #1
			data->cb[line].cb(line, data->cb[line].data);
 8002fd0:	f107 0804 	add.w	r8, r7, #4
 8002fd4:	e002      	b.n	8002fdc <__stm32_exti_isr_9_5+0x18>
	for (line = min; line < max; line++) {
 8002fd6:	3401      	adds	r4, #1
 8002fd8:	2c0a      	cmp	r4, #10
 8002fda:	d011      	beq.n	8003000 <__stm32_exti_isr_9_5+0x3c>
 8002fdc:	696a      	ldr	r2, [r5, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8002fde:	fa06 f304 	lsl.w	r3, r6, r4
 8002fe2:	ea33 0202 	bics.w	r2, r3, r2
 8002fe6:	d1f6      	bne.n	8002fd6 <__stm32_exti_isr_9_5+0x12>
			if (!data->cb[line].cb) {
 8002fe8:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002fec:	616b      	str	r3, [r5, #20]
			data->cb[line].cb(line, data->cb[line].data);
 8002fee:	4620      	mov	r0, r4
			if (!data->cb[line].cb) {
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <__stm32_exti_isr_9_5+0x12>
			data->cb[line].cb(line, data->cb[line].data);
 8002ff4:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
	for (line = min; line < max; line++) {
 8002ff8:	3401      	adds	r4, #1
			data->cb[line].cb(line, data->cb[line].data);
 8002ffa:	4790      	blx	r2
	for (line = min; line < max; line++) {
 8002ffc:	2c0a      	cmp	r4, #10
 8002ffe:	d1ed      	bne.n	8002fdc <__stm32_exti_isr_9_5+0x18>
}
 8003000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003004:	40010400 	.word	0x40010400

08003008 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <stm32_exti_enable+0x1c>)
	irqnum = exti_irq_table[line];
 800300a:	4907      	ldr	r1, [pc, #28]	; (8003028 <stm32_exti_enable+0x20>)
{
 800300c:	b410      	push	{r4}
	LL_EXTI_EnableIT_0_31(1 << line);
 800300e:	2301      	movs	r3, #1
 8003010:	6814      	ldr	r4, [r2, #0]
 8003012:	4083      	lsls	r3, r0
 8003014:	4323      	orrs	r3, r4
	irq_enable(irqnum);
 8003016:	5608      	ldrsb	r0, [r1, r0]
}
 8003018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800301c:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800301e:	f7ff babd 	b.w	800259c <arch_irq_enable>
 8003022:	bf00      	nop
 8003024:	40010400 	.word	0x40010400
 8003028:	0800e498 	.word	0x0800e498

0800302c <stm32_exti_disable>:
	if (line < 32) {
 800302c:	281f      	cmp	r0, #31
 800302e:	dc07      	bgt.n	8003040 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8003032:	2201      	movs	r2, #1
 8003034:	680b      	ldr	r3, [r1, #0]
 8003036:	fa02 f000 	lsl.w	r0, r2, r0
 800303a:	ea23 0000 	bic.w	r0, r3, r0
 800303e:	6008      	str	r0, [r1, #0]
}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40010400 	.word	0x40010400

08003048 <stm32_exti_trigger>:
	switch (trigger) {
 8003048:	2903      	cmp	r1, #3
 800304a:	d80d      	bhi.n	8003068 <stm32_exti_trigger+0x20>
 800304c:	e8df f001 	tbb	[pc, r1]
 8003050:	020d1925 	.word	0x020d1925
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003056:	2301      	movs	r3, #1
 8003058:	6891      	ldr	r1, [r2, #8]
 800305a:	fa03 f000 	lsl.w	r0, r3, r0
 800305e:	4301      	orrs	r1, r0
 8003060:	6091      	str	r1, [r2, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003062:	68d3      	ldr	r3, [r2, #12]
 8003064:	4318      	orrs	r0, r3
 8003066:	60d0      	str	r0, [r2, #12]
}
 8003068:	4770      	bx	lr
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800306c:	2201      	movs	r2, #1
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	fa02 f000 	lsl.w	r0, r2, r0
 8003074:	4301      	orrs	r1, r0
 8003076:	60d9      	str	r1, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	ea22 0000 	bic.w	r0, r2, r0
 800307e:	6098      	str	r0, [r3, #8]
}
 8003080:	4770      	bx	lr
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003084:	2201      	movs	r2, #1
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	fa02 f000 	lsl.w	r0, r2, r0
 800308c:	4301      	orrs	r1, r0
 800308e:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	ea22 0000 	bic.w	r0, r2, r0
 8003096:	60d8      	str	r0, [r3, #12]
}
 8003098:	4770      	bx	lr
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <stm32_exti_trigger+0x6c>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 800309c:	2201      	movs	r2, #1
 800309e:	6899      	ldr	r1, [r3, #8]
 80030a0:	fa02 f000 	lsl.w	r0, r2, r0
 80030a4:	ea21 0100 	bic.w	r1, r1, r0
 80030a8:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	ea22 0000 	bic.w	r0, r2, r0
 80030b0:	60d8      	str	r0, [r3, #12]
}
 80030b2:	4770      	bx	lr
 80030b4:	40010400 	.word	0x40010400

080030b8 <stm32_exti_set_callback>:
	if (data->cb[line].cb) {
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <stm32_exti_set_callback+0x24>)
{
 80030ba:	b410      	push	{r4}
	if (data->cb[line].cb) {
 80030bc:	f853 4030 	ldr.w	r4, [r3, r0, lsl #3]
 80030c0:	b944      	cbnz	r4, 80030d4 <stm32_exti_set_callback+0x1c>
	data->cb[line].cb = cb;
 80030c2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80030c6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	return 0;
 80030ca:	4620      	mov	r0, r4
	data->cb[line].data = arg;
 80030cc:	605a      	str	r2, [r3, #4]
}
 80030ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030d2:	4770      	bx	lr
		return -EBUSY;
 80030d4:	f06f 000f 	mvn.w	r0, #15
 80030d8:	e7f9      	b.n	80030ce <stm32_exti_set_callback+0x16>
 80030da:	bf00      	nop
 80030dc:	20000d30 	.word	0x20000d30

080030e0 <stm32_exti_unset_callback>:
	data->cb[line].cb = NULL;
 80030e0:	4a03      	ldr	r2, [pc, #12]	; (80030f0 <stm32_exti_unset_callback+0x10>)
	data->cb[line].data = NULL;
 80030e2:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
	data->cb[line].cb = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 80030ec:	604b      	str	r3, [r1, #4]
}
 80030ee:	4770      	bx	lr
 80030f0:	20000d30 	.word	0x20000d30

080030f4 <stm32_clock_control_get_subsys_rate>:
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d804      	bhi.n	8003104 <stm32_clock_control_get_subsys_rate+0x10>
	uint32_t ahb_clock = SystemCoreClock;
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <stm32_clock_control_get_subsys_rate+0x1c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && \
	!defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 80030fe:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8003100:	2000      	movs	r0, #0
		break;
 8003102:	4770      	bx	lr
	switch (pclken->bus) {
 8003104:	2b06      	cmp	r3, #6
 8003106:	d0f8      	beq.n	80030fa <stm32_clock_control_get_subsys_rate+0x6>
 8003108:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200002e4 	.word	0x200002e4

08003114 <stm32_clock_control_on>:
	switch (pclken->bus) {
 8003114:	680b      	ldr	r3, [r1, #0]
{
 8003116:	b086      	sub	sp, #24
	switch (pclken->bus) {
 8003118:	2b06      	cmp	r3, #6
 800311a:	d84d      	bhi.n	80031b8 <stm32_clock_control_on+0xa4>
 800311c:	e8df f003 	tbb	[pc, r3]
 8003120:	34281c10 	.word	0x34281c10
 8003124:	4c40      	.short	0x4c40
 8003126:	04          	.byte	0x04
 8003127:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800312a:	684b      	ldr	r3, [r1, #4]
 800312c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800312e:	4319      	orrs	r1, r3
 8003130:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003134:	4013      	ands	r3, r2
 8003136:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003138:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800313a:	2000      	movs	r0, #0
}
 800313c:	b006      	add	sp, #24
 800313e:	4770      	bx	lr
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003142:	684b      	ldr	r3, [r1, #4]
 8003144:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003146:	4319      	orrs	r1, r3
 8003148:	6491      	str	r1, [r2, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800314a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800314c:	4013      	ands	r3, r2
 800314e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003150:	9b05      	ldr	r3, [sp, #20]
 8003152:	2000      	movs	r0, #0
}
 8003154:	b006      	add	sp, #24
 8003156:	4770      	bx	lr
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800315a:	684b      	ldr	r3, [r1, #4]
 800315c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800315e:	4319      	orrs	r1, r3
 8003160:	64d1      	str	r1, [r2, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003162:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003164:	4013      	ands	r3, r2
 8003166:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003168:	9b00      	ldr	r3, [sp, #0]
	return 0;
 800316a:	2000      	movs	r0, #0
}
 800316c:	b006      	add	sp, #24
 800316e:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003170:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8003172:	684b      	ldr	r3, [r1, #4]
 8003174:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8003176:	4319      	orrs	r1, r3
 8003178:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800317a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800317c:	4013      	ands	r3, r2
 800317e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003180:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8003182:	2000      	movs	r0, #0
}
 8003184:	b006      	add	sp, #24
 8003186:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 800318a:	684b      	ldr	r3, [r1, #4]
 800318c:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800318e:	4319      	orrs	r1, r3
 8003190:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003192:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003194:	4013      	ands	r3, r2
 8003196:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8003198:	9b04      	ldr	r3, [sp, #16]
	return 0;
 800319a:	2000      	movs	r0, #0
}
 800319c:	b006      	add	sp, #24
 800319e:	4770      	bx	lr
  SET_BIT(RCC->APB1ENR2, Periphs);
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <stm32_clock_control_on+0xac>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 80031a2:	684b      	ldr	r3, [r1, #4]
 80031a4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80031a6:	4319      	orrs	r1, r3
 80031a8:	65d1      	str	r1, [r2, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031ac:	4013      	ands	r3, r2
 80031ae:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80031b0:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	b006      	add	sp, #24
 80031b6:	4770      	bx	lr
	switch (pclken->bus) {
 80031b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80031bc:	e7be      	b.n	800313c <stm32_clock_control_on+0x28>
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000

080031c4 <stm32_clock_control_off>:
	switch (pclken->bus) {
 80031c4:	680b      	ldr	r3, [r1, #0]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d835      	bhi.n	8003236 <stm32_clock_control_off+0x72>
 80031ca:	e8df f003 	tbb	[pc, r3]
 80031ce:	140c      	.short	0x140c
 80031d0:	342c241c 	.word	0x342c241c
 80031d4:	04          	.byte	0x04
 80031d5:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80031d6:	4a19      	ldr	r2, [pc, #100]	; (800323c <stm32_clock_control_off+0x78>)
 80031d8:	6849      	ldr	r1, [r1, #4]
 80031da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80031dc:	ea23 0301 	bic.w	r3, r3, r1
	return 0;
 80031e0:	2000      	movs	r0, #0
 80031e2:	6513      	str	r3, [r2, #80]	; 0x50
}
 80031e4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <stm32_clock_control_off+0x78>)
 80031e8:	6849      	ldr	r1, [r1, #4]
 80031ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80031ec:	ea23 0301 	bic.w	r3, r3, r1
 80031f0:	2000      	movs	r0, #0
 80031f2:	6493      	str	r3, [r2, #72]	; 0x48
 80031f4:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <stm32_clock_control_off+0x78>)
 80031f8:	6849      	ldr	r1, [r1, #4]
 80031fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80031fc:	ea23 0301 	bic.w	r3, r3, r1
 8003200:	2000      	movs	r0, #0
 8003202:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003204:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <stm32_clock_control_off+0x78>)
 8003208:	6849      	ldr	r1, [r1, #4]
 800320a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800320c:	ea23 0301 	bic.w	r3, r3, r1
 8003210:	2000      	movs	r0, #0
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003214:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <stm32_clock_control_off+0x78>)
 8003218:	6849      	ldr	r1, [r1, #4]
 800321a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800321c:	ea23 0301 	bic.w	r3, r3, r1
 8003220:	2000      	movs	r0, #0
 8003222:	6613      	str	r3, [r2, #96]	; 0x60
}
 8003224:	4770      	bx	lr
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <stm32_clock_control_off+0x78>)
 8003228:	6849      	ldr	r1, [r1, #4]
 800322a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800322c:	ea23 0301 	bic.w	r3, r3, r1
 8003230:	2000      	movs	r0, #0
 8003232:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003234:	4770      	bx	lr
	switch (pclken->bus) {
 8003236:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000

08003240 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8003240:	b510      	push	{r4, lr}
 8003242:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 8003244:	2300      	movs	r3, #0
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 8003246:	e9cd 3300 	strd	r3, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800324a:	9302      	str	r3, [sp, #8]
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800324c:	f000 f83c 	bl	80032c8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8003250:	a803      	add	r0, sp, #12
 8003252:	f000 f831 	bl	80032b8 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003256:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <stm32_clock_control_init+0x74>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	0551      	lsls	r1, r2, #21
 800325c:	d406      	bmi.n	800326c <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	0552      	lsls	r2, r2, #21
 800326a:	d5fc      	bpl.n	8003266 <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800326c:	4c11      	ldr	r4, [pc, #68]	; (80032b4 <stm32_clock_control_init+0x74>)
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003280:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8003288:	2b04      	cmp	r3, #4
 800328a:	d1fa      	bne.n	8003282 <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003292:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8003294:	4669      	mov	r1, sp
 8003296:	a803      	add	r0, sp, #12
 8003298:	f005 fabe 	bl	8008818 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032a4:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80032a6:	2000      	movs	r0, #0
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	b006      	add	sp, #24
 80032b0:	bd10      	pop	{r4, pc}
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <config_pll_init>:
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 80032b8:	2100      	movs	r1, #0
 80032ba:	2214      	movs	r2, #20
 80032bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop

080032c8 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <config_enable_default_clocks+0x1c>)
 80032ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032d0:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80032d4:	b082      	sub	sp, #8
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80032dc:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80032de:	b002      	add	sp, #8
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <dma_stm32_config_irq_0>:

static void dma_stm32_config_irq_0(const struct device *dev)
{
	ARG_UNUSED(dev);

	DMA_STM32_IRQ_CONNECT(0, 0);
 80032e8:	2200      	movs	r2, #0
{
 80032ea:	b508      	push	{r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 0);
 80032ec:	4611      	mov	r1, r2
 80032ee:	200b      	movs	r0, #11
 80032f0:	f7ff f986 	bl	8002600 <z_arm_irq_priority_set>
 80032f4:	200b      	movs	r0, #11
 80032f6:	f7ff f951 	bl	800259c <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(0, 1);
 80032fa:	2200      	movs	r2, #0
 80032fc:	4611      	mov	r1, r2
 80032fe:	200c      	movs	r0, #12
 8003300:	f7ff f97e 	bl	8002600 <z_arm_irq_priority_set>
 8003304:	200c      	movs	r0, #12
 8003306:	f7ff f949 	bl	800259c <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 2);
 800330a:	2200      	movs	r2, #0
 800330c:	4611      	mov	r1, r2
 800330e:	200d      	movs	r0, #13
 8003310:	f7ff f976 	bl	8002600 <z_arm_irq_priority_set>
 8003314:	200d      	movs	r0, #13
 8003316:	f7ff f941 	bl	800259c <arch_irq_enable>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
	DMA_STM32_IRQ_CONNECT(0, 3);
 800331a:	2200      	movs	r2, #0
 800331c:	4611      	mov	r1, r2
 800331e:	200e      	movs	r0, #14
 8003320:	f7ff f96e 	bl	8002600 <z_arm_irq_priority_set>
 8003324:	200e      	movs	r0, #14
 8003326:	f7ff f939 	bl	800259c <arch_irq_enable>
#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(0, 4);
 800332a:	2200      	movs	r2, #0
 800332c:	4611      	mov	r1, r2
 800332e:	200f      	movs	r0, #15
 8003330:	f7ff f966 	bl	8002600 <z_arm_irq_priority_set>
 8003334:	200f      	movs	r0, #15
 8003336:	f7ff f931 	bl	800259c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 5)
	DMA_STM32_IRQ_CONNECT(0, 5);
 800333a:	2200      	movs	r2, #0
 800333c:	4611      	mov	r1, r2
 800333e:	2010      	movs	r0, #16
 8003340:	f7ff f95e 	bl	8002600 <z_arm_irq_priority_set>
 8003344:	2010      	movs	r0, #16
 8003346:	f7ff f929 	bl	800259c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(0, 6)
	DMA_STM32_IRQ_CONNECT(0, 6);
 800334a:	2200      	movs	r2, #0
 800334c:	2011      	movs	r0, #17
 800334e:	4611      	mov	r1, r2
 8003350:	f7ff f956 	bl	8002600 <z_arm_irq_priority_set>
#endif /* DT_INST_IRQ_HAS_IDX(0, 5) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 6) */
#endif /* DT_INST_IRQ_HAS_IDX(0, 7) */
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/* Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series. */
}
 8003354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_STM32_IRQ_CONNECT(0, 6);
 8003358:	2011      	movs	r0, #17
 800335a:	f7ff b91f 	b.w	800259c <arch_irq_enable>
 800335e:	bf00      	nop

08003360 <dma_stm32_config_irq_1>:
static void dma_stm32_config_irq_1(const struct device *dev)
{
	ARG_UNUSED(dev);

#ifndef CONFIG_DMA_STM32_SHARED_IRQS
	DMA_STM32_IRQ_CONNECT(1, 0);
 8003360:	2200      	movs	r2, #0
{
 8003362:	b508      	push	{r3, lr}
	DMA_STM32_IRQ_CONNECT(1, 0);
 8003364:	4611      	mov	r1, r2
 8003366:	2038      	movs	r0, #56	; 0x38
 8003368:	f7ff f94a 	bl	8002600 <z_arm_irq_priority_set>
 800336c:	2038      	movs	r0, #56	; 0x38
 800336e:	f7ff f915 	bl	800259c <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 1);
 8003372:	2200      	movs	r2, #0
 8003374:	4611      	mov	r1, r2
 8003376:	2039      	movs	r0, #57	; 0x39
 8003378:	f7ff f942 	bl	8002600 <z_arm_irq_priority_set>
 800337c:	2039      	movs	r0, #57	; 0x39
 800337e:	f7ff f90d 	bl	800259c <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 2);
 8003382:	2200      	movs	r2, #0
 8003384:	4611      	mov	r1, r2
 8003386:	203a      	movs	r0, #58	; 0x3a
 8003388:	f7ff f93a 	bl	8002600 <z_arm_irq_priority_set>
 800338c:	203a      	movs	r0, #58	; 0x3a
 800338e:	f7ff f905 	bl	800259c <arch_irq_enable>
	DMA_STM32_IRQ_CONNECT(1, 3);
 8003392:	2200      	movs	r2, #0
 8003394:	4611      	mov	r1, r2
 8003396:	203b      	movs	r0, #59	; 0x3b
 8003398:	f7ff f932 	bl	8002600 <z_arm_irq_priority_set>
 800339c:	203b      	movs	r0, #59	; 0x3b
 800339e:	f7ff f8fd 	bl	800259c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 4)
	DMA_STM32_IRQ_CONNECT(1, 4);
 80033a2:	2200      	movs	r2, #0
 80033a4:	4611      	mov	r1, r2
 80033a6:	203c      	movs	r0, #60	; 0x3c
 80033a8:	f7ff f92a 	bl	8002600 <z_arm_irq_priority_set>
 80033ac:	203c      	movs	r0, #60	; 0x3c
 80033ae:	f7ff f8f5 	bl	800259c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 5)
	DMA_STM32_IRQ_CONNECT(1, 5);
 80033b2:	2200      	movs	r2, #0
 80033b4:	4611      	mov	r1, r2
 80033b6:	2044      	movs	r0, #68	; 0x44
 80033b8:	f7ff f922 	bl	8002600 <z_arm_irq_priority_set>
 80033bc:	2044      	movs	r0, #68	; 0x44
 80033be:	f7ff f8ed 	bl	800259c <arch_irq_enable>
#if DT_INST_IRQ_HAS_IDX(1, 6)
	DMA_STM32_IRQ_CONNECT(1, 6);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2045      	movs	r0, #69	; 0x45
 80033c6:	4611      	mov	r1, r2
 80033c8:	f7ff f91a 	bl	8002600 <z_arm_irq_priority_set>
#endif /* CONFIG_DMA_STM32_SHARED_IRQS */
/*
 * Either 5 or 6 or 7 or 8 channels for DMA across all stm32 series.
 * STM32F0 and STM32G0: if dma2 exits, the channel interrupts overlap with dma1
 */
}
 80033cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	DMA_STM32_IRQ_CONNECT(1, 6);
 80033d0:	2045      	movs	r0, #69	; 0x45
 80033d2:	f7ff b8e3 	b.w	800259c <arch_irq_enable>
 80033d6:	bf00      	nop

080033d8 <dma_stm32_get_status>:
	const struct dma_stm32_config *config = dev->config;
 80033d8:	6843      	ldr	r3, [r0, #4]
{
 80033da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (id >= config->max_streams) {
 80033de:	695d      	ldr	r5, [r3, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80033e0:	691f      	ldr	r7, [r3, #16]
	id = id - STREAM_OFFSET;
 80033e2:	1e48      	subs	r0, r1, #1
	if (id >= config->max_streams) {
 80033e4:	4285      	cmp	r5, r0
 80033e6:	d917      	bls.n	8003418 <dma_stm32_get_status+0x40>
	stream = &config->streams[id];
 80033e8:	699d      	ldr	r5, [r3, #24]
 80033ea:	4614      	mov	r4, r2
 80033ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80033f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80033f4:	ea4f 08c2 	mov.w	r8, r2, lsl #3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 80033f8:	f000 fb66 	bl	8003ac8 <dma_stm32_id_to_stream>
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <dma_stm32_get_status+0x48>)
	stat->dir = stream->direction;
 80033fe:	f855 2008 	ldr.w	r2, [r5, r8]
 8003402:	5c1b      	ldrb	r3, [r3, r0]
 8003404:	443b      	add	r3, r7
	return 0;
 8003406:	2000      	movs	r0, #0
 8003408:	685b      	ldr	r3, [r3, #4]
	stat->dir = stream->direction;
 800340a:	7062      	strb	r2, [r4, #1]
	stat->busy = stream->busy;
 800340c:	79b2      	ldrb	r2, [r6, #6]
 800340e:	7022      	strb	r2, [r4, #0]
 8003410:	b29b      	uxth	r3, r3
	stat->pending_length = LL_DMA_GetDataLength(dma, dma_stm32_id_to_stream(id));
 8003412:	6063      	str	r3, [r4, #4]
}
 8003414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8003418:	f06f 0015 	mvn.w	r0, #21
 800341c:	e7fa      	b.n	8003414 <dma_stm32_get_status+0x3c>
 800341e:	bf00      	nop
 8003420:	0800e4c8 	.word	0x0800e4c8

08003424 <dma_stm32_init>:
{
 8003424:	b570      	push	{r4, r5, r6, lr}
	const struct dma_stm32_config *config = dev->config;
 8003426:	6846      	ldr	r6, [r0, #4]
{
 8003428:	4604      	mov	r4, r0
 800342a:	4d12      	ldr	r5, [pc, #72]	; (8003474 <dma_stm32_init+0x50>)
 800342c:	4628      	mov	r0, r5
 800342e:	f006 fd83 	bl	8009f38 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8003432:	b1e0      	cbz	r0, 800346e <dma_stm32_init+0x4a>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003434:	68ab      	ldr	r3, [r5, #8]
 8003436:	4628      	mov	r0, r5
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4631      	mov	r1, r6
 800343c:	4798      	blx	r3
	if (clock_control_on(clk,
 800343e:	4605      	mov	r5, r0
 8003440:	b9a8      	cbnz	r0, 800346e <dma_stm32_init+0x4a>
	config->config_irq(dev);
 8003442:	68b3      	ldr	r3, [r6, #8]
 8003444:	4620      	mov	r0, r4
 8003446:	4798      	blx	r3
	for (uint32_t i = 0; i < config->max_streams; i++) {
 8003448:	6972      	ldr	r2, [r6, #20]
 800344a:	b14a      	cbz	r2, 8003460 <dma_stm32_init+0x3c>
 800344c:	69b3      	ldr	r3, [r6, #24]
 800344e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003452:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		config->streams[i].busy = false;
 8003456:	4629      	mov	r1, r5
 8003458:	7199      	strb	r1, [r3, #6]
	for (uint32_t i = 0; i < config->max_streams; i++) {
 800345a:	3318      	adds	r3, #24
 800345c:	4293      	cmp	r3, r2
 800345e:	d1fb      	bne.n	8003458 <dma_stm32_init+0x34>
	((struct dma_stm32_data *)dev->data)->dma_ctx.magic = 0;
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	2200      	movs	r2, #0
	((struct dma_stm32_data *)dev->data)->dma_ctx.dma_channels = 0;
 8003464:	e9c3 2200 	strd	r2, r2, [r3]
	((struct dma_stm32_data *)dev->data)->dma_ctx.atomic = 0;
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	4628      	mov	r0, r5
 800346c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 800346e:	f06f 0504 	mvn.w	r5, #4
 8003472:	e7fa      	b.n	800346a <dma_stm32_init+0x46>
 8003474:	0800dddc 	.word	0x0800dddc

08003478 <dma_stm32_irq_handler>:
	const struct dma_stm32_config *config = dev->config;
 8003478:	6843      	ldr	r3, [r0, #4]
{
 800347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stream = &config->streams[id];
 800347e:	699c      	ldr	r4, [r3, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003480:	691f      	ldr	r7, [r3, #16]
	stream = &config->streams[id];
 8003482:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8003486:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		stream->busy = false;
 800348a:	2300      	movs	r3, #0
{
 800348c:	b082      	sub	sp, #8
 800348e:	4606      	mov	r6, r0
		stream->busy = false;
 8003490:	71a3      	strb	r3, [r4, #6]
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8003492:	4638      	mov	r0, r7
{
 8003494:	460d      	mov	r5, r1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 8003496:	f000 fb45 	bl	8003b24 <stm32_dma_is_ht_irq_active>
	callback_arg = id + STREAM_OFFSET;
 800349a:	f105 0801 	add.w	r8, r5, #1
	if (stm32_dma_is_ht_irq_active(dma, id)) {
 800349e:	b180      	cbz	r0, 80034c2 <dma_stm32_irq_handler+0x4a>
		if (!stream->hal_override) {
 80034a0:	7963      	ldrb	r3, [r4, #5]
 80034a2:	b14b      	cbz	r3, 80034b8 <dma_stm32_irq_handler+0x40>
		stream->dma_callback(dev, stream->user_data, callback_arg, 0);
 80034a4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 80034a8:	2300      	movs	r3, #0
		stream->dma_callback(dev, stream->user_data,
 80034aa:	4642      	mov	r2, r8
 80034ac:	4630      	mov	r0, r6
 80034ae:	46ac      	mov	ip, r5
}
 80034b0:	b002      	add	sp, #8
 80034b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		stream->dma_callback(dev, stream->user_data,
 80034b6:	4760      	bx	ip
			dma_stm32_clear_ht(dma, id);
 80034b8:	4629      	mov	r1, r5
 80034ba:	4638      	mov	r0, r7
 80034bc:	f000 fb0a 	bl	8003ad4 <dma_stm32_clear_ht>
 80034c0:	e7f0      	b.n	80034a4 <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_tc_irq_active(dma, id)) {
 80034c2:	4629      	mov	r1, r5
 80034c4:	4638      	mov	r0, r7
 80034c6:	f000 fb13 	bl	8003af0 <stm32_dma_is_tc_irq_active>
 80034ca:	b138      	cbz	r0, 80034dc <dma_stm32_irq_handler+0x64>
		if (!stream->hal_override) {
 80034cc:	7963      	ldrb	r3, [r4, #5]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e8      	bne.n	80034a4 <dma_stm32_irq_handler+0x2c>
			dma_stm32_clear_tc(dma, id);
 80034d2:	4629      	mov	r1, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	f000 fb03 	bl	8003ae0 <dma_stm32_clear_tc>
 80034da:	e7e3      	b.n	80034a4 <dma_stm32_irq_handler+0x2c>
	} else if (stm32_dma_is_unexpected_irq_happened(dma, id)) {
 80034dc:	4638      	mov	r0, r7
 80034de:	4629      	mov	r1, r5
 80034e0:	f000 fb40 	bl	8003b64 <stm32_dma_is_unexpected_irq_happened>
 80034e4:	b120      	cbz	r0, 80034f0 <dma_stm32_irq_handler+0x78>
		stream->dma_callback(dev, stream->user_data,
 80034e6:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 80034ea:	f06f 0304 	mvn.w	r3, #4
 80034ee:	e7dc      	b.n	80034aa <dma_stm32_irq_handler+0x32>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80034f0:	6873      	ldr	r3, [r6, #4]
	stm32_dma_dump_stream_irq(dma, id);
 80034f2:	4629      	mov	r1, r5
 80034f4:	6918      	ldr	r0, [r3, #16]
 80034f6:	f000 faf9 	bl	8003aec <stm32_dma_dump_stream_irq>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80034fa:	6873      	ldr	r3, [r6, #4]
	dma_stm32_clear_tc(dma, id);
 80034fc:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80034fe:	6918      	ldr	r0, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8003500:	9001      	str	r0, [sp, #4]
 8003502:	f000 faed 	bl	8003ae0 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8003506:	9801      	ldr	r0, [sp, #4]
 8003508:	4629      	mov	r1, r5
 800350a:	f000 fae3 	bl	8003ad4 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 800350e:	9801      	ldr	r0, [sp, #4]
 8003510:	4629      	mov	r1, r5
 8003512:	f000 fb21 	bl	8003b58 <stm32_dma_clear_stream_irq>
 8003516:	e7e6      	b.n	80034e6 <dma_stm32_irq_handler+0x6e>

08003518 <dma_stm32_irq_0_0>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 0);
 8003518:	2100      	movs	r1, #0
 800351a:	f7ff bfad 	b.w	8003478 <dma_stm32_irq_handler>
 800351e:	bf00      	nop

08003520 <dma_stm32_irq_0_1>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 1);
 8003520:	2101      	movs	r1, #1
 8003522:	f7ff bfa9 	b.w	8003478 <dma_stm32_irq_handler>
 8003526:	bf00      	nop

08003528 <dma_stm32_irq_0_2>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 2);
 8003528:	2102      	movs	r1, #2
 800352a:	f7ff bfa5 	b.w	8003478 <dma_stm32_irq_handler>
 800352e:	bf00      	nop

08003530 <dma_stm32_irq_0_3>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 3);
 8003530:	2103      	movs	r1, #3
 8003532:	f7ff bfa1 	b.w	8003478 <dma_stm32_irq_handler>
 8003536:	bf00      	nop

08003538 <dma_stm32_irq_0_4>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 4);
 8003538:	2104      	movs	r1, #4
 800353a:	f7ff bf9d 	b.w	8003478 <dma_stm32_irq_handler>
 800353e:	bf00      	nop

08003540 <dma_stm32_irq_0_5>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 5);
 8003540:	2105      	movs	r1, #5
 8003542:	f7ff bf99 	b.w	8003478 <dma_stm32_irq_handler>
 8003546:	bf00      	nop

08003548 <dma_stm32_irq_0_6>:
DMA_STM32_DEFINE_IRQ_HANDLER(0, 6);
 8003548:	2106      	movs	r1, #6
 800354a:	f7ff bf95 	b.w	8003478 <dma_stm32_irq_handler>
 800354e:	bf00      	nop

08003550 <dma_stm32_irq_1_6>:
 8003550:	2106      	movs	r1, #6
 8003552:	f7ff bf91 	b.w	8003478 <dma_stm32_irq_handler>
 8003556:	bf00      	nop

08003558 <dma_stm32_irq_1_0>:
 8003558:	2100      	movs	r1, #0
 800355a:	f7ff bf8d 	b.w	8003478 <dma_stm32_irq_handler>
 800355e:	bf00      	nop

08003560 <dma_stm32_irq_1_1>:
 8003560:	2101      	movs	r1, #1
 8003562:	f7ff bf89 	b.w	8003478 <dma_stm32_irq_handler>
 8003566:	bf00      	nop

08003568 <dma_stm32_irq_1_2>:
 8003568:	2102      	movs	r1, #2
 800356a:	f7ff bf85 	b.w	8003478 <dma_stm32_irq_handler>
 800356e:	bf00      	nop

08003570 <dma_stm32_irq_1_3>:
 8003570:	2103      	movs	r1, #3
 8003572:	f7ff bf81 	b.w	8003478 <dma_stm32_irq_handler>
 8003576:	bf00      	nop

08003578 <dma_stm32_irq_1_4>:
 8003578:	2104      	movs	r1, #4
 800357a:	f7ff bf7d 	b.w	8003478 <dma_stm32_irq_handler>
 800357e:	bf00      	nop

08003580 <dma_stm32_irq_1_5>:
 8003580:	2105      	movs	r1, #5
 8003582:	f7ff bf79 	b.w	8003478 <dma_stm32_irq_handler>
 8003586:	bf00      	nop

08003588 <dma_stm32_start>:
	const struct dma_stm32_config *config = dev->config;
 8003588:	6843      	ldr	r3, [r0, #4]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800358a:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
	id = id - STREAM_OFFSET;
 800358e:	3901      	subs	r1, #1
	if (id >= config->max_streams) {
 8003590:	428a      	cmp	r2, r1
 8003592:	d915      	bls.n	80035c0 <dma_stm32_start+0x38>
{
 8003594:	b500      	push	{lr}
 8003596:	b083      	sub	sp, #12
	dma_stm32_clear_tc(dma, id);
 8003598:	e9cd 0100 	strd	r0, r1, [sp]
 800359c:	f000 faa0 	bl	8003ae0 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 80035a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035a4:	f000 fa96 	bl	8003ad4 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 80035a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035ac:	f000 fad4 	bl	8003b58 <stm32_dma_clear_stream_irq>
	stm32_dma_enable_stream(dma, id);
 80035b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035b4:	f000 fad8 	bl	8003b68 <stm32_dma_enable_stream>
	return 0;
 80035b8:	2000      	movs	r0, #0
}
 80035ba:	b003      	add	sp, #12
 80035bc:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
 80035c0:	f06f 0015 	mvn.w	r0, #21
}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop

080035c8 <dma_stm32_stop>:
	const struct dma_stm32_config *config = dev->config;
 80035c8:	6842      	ldr	r2, [r0, #4]
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 80035ca:	eb01 0341 	add.w	r3, r1, r1, lsl #1
{
 80035ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 80035d2:	00db      	lsls	r3, r3, #3
{
 80035d4:	4607      	mov	r7, r0
	struct dma_stm32_stream *stream = &config->streams[id - STREAM_OFFSET];
 80035d6:	6990      	ldr	r0, [r2, #24]
 80035d8:	3b18      	subs	r3, #24
 80035da:	eb00 0803 	add.w	r8, r0, r3
	if (id >= config->max_streams) {
 80035de:	e9d2 6304 	ldrd	r6, r3, [r2, #16]
	id = id - STREAM_OFFSET;
 80035e2:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 80035e4:	42ab      	cmp	r3, r5
{
 80035e6:	b082      	sub	sp, #8
	if (id >= config->max_streams) {
 80035e8:	d92b      	bls.n	8003642 <dma_stm32_stop+0x7a>
	LL_DMA_DisableIT_TC(dma, dma_stm32_id_to_stream(id));
 80035ea:	4628      	mov	r0, r5
 80035ec:	f000 fa6c 	bl	8003ac8 <dma_stm32_id_to_stream>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <dma_stm32_stop+0x80>)
 80035f2:	5c1a      	ldrb	r2, [r3, r0]
 80035f4:	5993      	ldr	r3, [r2, r6]
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	5193      	str	r3, [r2, r6]
 80035fc:	f241 348a 	movw	r4, #5002	; 0x138a
 8003600:	e005      	b.n	800360e <dma_stm32_stop+0x46>
		if (count++ > (5 * 1000)) {
 8003602:	3c01      	subs	r4, #1
 8003604:	d009      	beq.n	800361a <dma_stm32_stop+0x52>
	return z_impl_k_sleep(timeout);
 8003606:	200a      	movs	r0, #10
 8003608:	2100      	movs	r1, #0
 800360a:	f007 fde1 	bl	800b1d0 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 800360e:	4629      	mov	r1, r5
 8003610:	4630      	mov	r0, r6
 8003612:	f000 fab7 	bl	8003b84 <stm32_dma_disable_stream>
 8003616:	2800      	cmp	r0, #0
 8003618:	d1f3      	bne.n	8003602 <dma_stm32_stop+0x3a>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800361a:	687b      	ldr	r3, [r7, #4]
	dma_stm32_clear_tc(dma, id);
 800361c:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 800361e:	6918      	ldr	r0, [r3, #16]
	dma_stm32_clear_tc(dma, id);
 8003620:	9001      	str	r0, [sp, #4]
 8003622:	f000 fa5d 	bl	8003ae0 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 8003626:	9801      	ldr	r0, [sp, #4]
 8003628:	4629      	mov	r1, r5
 800362a:	f000 fa53 	bl	8003ad4 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 800362e:	9801      	ldr	r0, [sp, #4]
 8003630:	4629      	mov	r1, r5
 8003632:	f000 fa91 	bl	8003b58 <stm32_dma_clear_stream_irq>
	stream->busy = false;
 8003636:	2000      	movs	r0, #0
 8003638:	f888 0006 	strb.w	r0, [r8, #6]
}
 800363c:	b002      	add	sp, #8
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
 8003642:	f06f 0015 	mvn.w	r0, #21
 8003646:	e7f9      	b.n	800363c <dma_stm32_stop+0x74>
 8003648:	0800e4c8 	.word	0x0800e4c8

0800364c <dma_stm32_reload>:
{
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *config = dev->config;
 8003650:	6840      	ldr	r0, [r0, #4]
{
 8003652:	4699      	mov	r9, r3
	if (id >= config->max_streams) {
 8003654:	6943      	ldr	r3, [r0, #20]
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 8003656:	6906      	ldr	r6, [r0, #16]
{
 8003658:	b083      	sub	sp, #12
	id = id - STREAM_OFFSET;
 800365a:	1e4d      	subs	r5, r1, #1
	if (id >= config->max_streams) {
 800365c:	42ab      	cmp	r3, r5
{
 800365e:	9201      	str	r2, [sp, #4]
	if (id >= config->max_streams) {
 8003660:	d91e      	bls.n	80036a0 <dma_stm32_reload+0x54>
	stream = &config->streams[id];
 8003662:	f8d0 a018 	ldr.w	sl, [r0, #24]
 8003666:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800366a:	ea4f 0bc7 	mov.w	fp, r7, lsl #3
 800366e:	f241 348a 	movw	r4, #5002	; 0x138a
 8003672:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
	int count = 0;
 8003676:	e005      	b.n	8003684 <dma_stm32_reload+0x38>
		if (count++ > (5 * 1000)) {
 8003678:	3c01      	subs	r4, #1
 800367a:	d056      	beq.n	800372a <dma_stm32_reload+0xde>
 800367c:	200a      	movs	r0, #10
 800367e:	2100      	movs	r1, #0
 8003680:	f007 fda6 	bl	800b1d0 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8003684:	4629      	mov	r1, r5
 8003686:	4630      	mov	r0, r6
 8003688:	f000 fa7c 	bl	8003b84 <stm32_dma_disable_stream>
 800368c:	4680      	mov	r8, r0
 800368e:	2800      	cmp	r0, #0
 8003690:	d1f2      	bne.n	8003678 <dma_stm32_reload+0x2c>
	switch (stream->direction) {
 8003692:	f85a 200b 	ldr.w	r2, [sl, fp]
 8003696:	2a01      	cmp	r2, #1
 8003698:	d008      	beq.n	80036ac <dma_stm32_reload+0x60>
 800369a:	f032 0302 	bics.w	r3, r2, #2
 800369e:	d02c      	beq.n	80036fa <dma_stm32_reload+0xae>
 80036a0:	f06f 0815 	mvn.w	r8, #21
}
 80036a4:	4640      	mov	r0, r8
 80036a6:	b003      	add	sp, #12
 80036a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), src);
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 fa0b 	bl	8003ac8 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80036b2:	4c21      	ldr	r4, [pc, #132]	; (8003738 <dma_stm32_reload+0xec>)
 80036b4:	9b01      	ldr	r3, [sp, #4]
 80036b6:	5c22      	ldrb	r2, [r4, r0]
 80036b8:	4432      	add	r2, r6
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), dst);
 80036ba:	4628      	mov	r0, r5
 80036bc:	60d3      	str	r3, [r2, #12]
 80036be:	f000 fa03 	bl	8003ac8 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80036c2:	5c22      	ldrb	r2, [r4, r0]
 80036c4:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80036c6:	4628      	mov	r0, r5
 80036c8:	f8c2 9008 	str.w	r9, [r2, #8]
	if (stream->source_periph) {
 80036cc:	793a      	ldrb	r2, [r7, #4]
 80036ce:	b33a      	cbz	r2, 8003720 <dma_stm32_reload+0xd4>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80036d0:	f000 f9fa 	bl	8003ac8 <dma_stm32_id_to_stream>
 80036d4:	68ba      	ldr	r2, [r7, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80036d6:	5c20      	ldrb	r0, [r4, r0]
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 80036d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036da:	fbb3 f2f2 	udiv	r2, r3, r2
 80036de:	4430      	add	r0, r6
 80036e0:	6841      	ldr	r1, [r0, #4]
 80036e2:	0c09      	lsrs	r1, r1, #16
 80036e4:	0409      	lsls	r1, r1, #16
 80036e6:	430a      	orrs	r2, r1
 80036e8:	6042      	str	r2, [r0, #4]
	stm32_dma_enable_stream(dma, id);
 80036ea:	4629      	mov	r1, r5
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 fa3b 	bl	8003b68 <stm32_dma_enable_stream>
}
 80036f2:	4640      	mov	r0, r8
 80036f4:	b003      	add	sp, #12
 80036f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_DMA_SetPeriphAddress(dma, dma_stm32_id_to_stream(id), src);
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f9e4 	bl	8003ac8 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8003700:	4c0d      	ldr	r4, [pc, #52]	; (8003738 <dma_stm32_reload+0xec>)
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	5c22      	ldrb	r2, [r4, r0]
 8003706:	4432      	add	r2, r6
		LL_DMA_SetMemoryAddress(dma, dma_stm32_id_to_stream(id), dst);
 8003708:	4628      	mov	r0, r5
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	f000 f9dc 	bl	8003ac8 <dma_stm32_id_to_stream>
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8003710:	5c22      	ldrb	r2, [r4, r0]
 8003712:	4432      	add	r2, r6
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003714:	4628      	mov	r0, r5
 8003716:	f8c2 900c 	str.w	r9, [r2, #12]
	if (stream->source_periph) {
 800371a:	793a      	ldrb	r2, [r7, #4]
 800371c:	2a00      	cmp	r2, #0
 800371e:	d1d7      	bne.n	80036d0 <dma_stm32_reload+0x84>
		LL_DMA_SetDataLength(dma, dma_stm32_id_to_stream(id),
 8003720:	f000 f9d2 	bl	8003ac8 <dma_stm32_id_to_stream>
 8003724:	68fa      	ldr	r2, [r7, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8003726:	5c20      	ldrb	r0, [r4, r0]
 8003728:	e7d6      	b.n	80036d8 <dma_stm32_reload+0x8c>
		return -EBUSY;
 800372a:	f06f 080f 	mvn.w	r8, #15
}
 800372e:	4640      	mov	r0, r8
 8003730:	b003      	add	sp, #12
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	0800e4c8 	.word	0x0800e4c8

0800373c <dma_stm32_configure>:
{
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct dma_stm32_config *dev_config = dev->config;
 8003740:	6844      	ldr	r4, [r0, #4]
{
 8003742:	b08f      	sub	sp, #60	; 0x3c
 8003744:	4617      	mov	r7, r2
 8003746:	4682      	mov	sl, r0
	LL_DMA_StructInit(&DMA_InitStruct);
 8003748:	a803      	add	r0, sp, #12
	struct dma_stm32_stream *stream =
 800374a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	DMA_TypeDef *dma = (DMA_TypeDef *)dev_config->base;
 800374e:	6926      	ldr	r6, [r4, #16]
				&dev_config->streams[id - STREAM_OFFSET];
 8003750:	eb01 0841 	add.w	r8, r1, r1, lsl #1
	id = id - STREAM_OFFSET;
 8003754:	1e4d      	subs	r5, r1, #1
	LL_DMA_StructInit(&DMA_InitStruct);
 8003756:	f004 fdd9 	bl	800830c <LL_DMA_StructInit>
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 800375a:	887b      	ldrh	r3, [r7, #2]
				&dev_config->streams[id - STREAM_OFFSET];
 800375c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003760:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
				&dev_config->streams[id - STREAM_OFFSET];
 8003764:	f1a8 0818 	sub.w	r8, r8, #24
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003768:	f5b3 6ffe 	cmp.w	r3, #2032	; 0x7f0
	struct dma_stm32_stream *stream =
 800376c:	eb0b 0908 	add.w	r9, fp, r8
	if (config->linked_channel == STM32_DMA_HAL_OVERRIDE) {
 8003770:	f000 8088 	beq.w	8003884 <dma_stm32_configure+0x148>
	if (id >= dev_config->max_streams) {
 8003774:	6963      	ldr	r3, [r4, #20]
 8003776:	42ab      	cmp	r3, r5
 8003778:	d97e      	bls.n	8003878 <dma_stm32_configure+0x13c>
	if (stream->busy) {
 800377a:	f899 3006 	ldrb.w	r3, [r9, #6]
 800377e:	f241 348a 	movw	r4, #5002	; 0x138a
 8003782:	b13b      	cbz	r3, 8003794 <dma_stm32_configure+0x58>
 8003784:	e0a3      	b.n	80038ce <dma_stm32_configure+0x192>
		if (count++ > (5 * 1000)) {
 8003786:	3c01      	subs	r4, #1
 8003788:	f000 80a1 	beq.w	80038ce <dma_stm32_configure+0x192>
 800378c:	200a      	movs	r0, #10
 800378e:	2100      	movs	r1, #0
 8003790:	f007 fd1e 	bl	800b1d0 <z_impl_k_sleep>
		if (stm32_dma_disable_stream(dma, id) == 0) {
 8003794:	4629      	mov	r1, r5
 8003796:	4630      	mov	r0, r6
 8003798:	f000 f9f4 	bl	8003b84 <stm32_dma_disable_stream>
 800379c:	2800      	cmp	r0, #0
 800379e:	d1f2      	bne.n	8003786 <dma_stm32_configure+0x4a>
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80037a0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80037a4:	9001      	str	r0, [sp, #4]
	dma_stm32_clear_tc(dma, id);
 80037a6:	4629      	mov	r1, r5
	DMA_TypeDef *dma = (DMA_TypeDef *)(config->base);
 80037a8:	6910      	ldr	r0, [r2, #16]
	dma_stm32_clear_tc(dma, id);
 80037aa:	9000      	str	r0, [sp, #0]
 80037ac:	f000 f998 	bl	8003ae0 <dma_stm32_clear_tc>
	dma_stm32_clear_ht(dma, id);
 80037b0:	9800      	ldr	r0, [sp, #0]
 80037b2:	4629      	mov	r1, r5
 80037b4:	f000 f98e 	bl	8003ad4 <dma_stm32_clear_ht>
	stm32_dma_clear_stream_irq(dma, id);
 80037b8:	4629      	mov	r1, r5
 80037ba:	9800      	ldr	r0, [sp, #0]
 80037bc:	f000 f9cc 	bl	8003b58 <stm32_dma_clear_stream_irq>
	if (config->head_block->block_size > DMA_STM32_MAX_DATA_ITEMS) {
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	694a      	ldr	r2, [r1, #20]
 80037c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80037ca:	d255      	bcs.n	8003878 <dma_stm32_configure+0x13c>
	if ((config->dest_data_size != config->source_data_size)) {
 80037cc:	88fc      	ldrh	r4, [r7, #6]
 80037ce:	f8b7 c004 	ldrh.w	ip, [r7, #4]
 80037d2:	4564      	cmp	r4, ip
 80037d4:	d150      	bne.n	8003878 <dma_stm32_configure+0x13c>
	if (config->source_data_size != 4U &&
 80037d6:	2c04      	cmp	r4, #4
 80037d8:	d002      	beq.n	80037e0 <dma_stm32_configure+0xa4>
	    config->source_data_size != 2U &&
 80037da:	1e62      	subs	r2, r4, #1
 80037dc:	2a01      	cmp	r2, #1
 80037de:	d84b      	bhi.n	8003878 <dma_stm32_configure+0x13c>
	if (config->head_block->source_reload_en !=
 80037e0:	7f0a      	ldrb	r2, [r1, #28]
 80037e2:	f3c2 1080 	ubfx	r0, r2, #6, #1
 80037e6:	ebb0 1fd2 	cmp.w	r0, r2, lsr #7
 80037ea:	d145      	bne.n	8003878 <dma_stm32_configure+0x13c>
	stream->direction	= config->channel_direction;
 80037ec:	883a      	ldrh	r2, [r7, #0]
	stream->dma_callback	= config->dma_callback;
 80037ee:	69b8      	ldr	r0, [r7, #24]
 80037f0:	f8c9 0014 	str.w	r0, [r9, #20]
	stream->direction	= config->channel_direction;
 80037f4:	f3c2 12c2 	ubfx	r2, r2, #7, #3
	stream->user_data       = config->user_data;
 80037f8:	6978      	ldr	r0, [r7, #20]
	stream->busy		= true;
 80037fa:	f04f 0e01 	mov.w	lr, #1
 80037fe:	f889 e006 	strb.w	lr, [r9, #6]
	stream->direction	= config->channel_direction;
 8003802:	f84b 2008 	str.w	r2, [fp, r8]
	stream->user_data       = config->user_data;
 8003806:	f8c9 0010 	str.w	r0, [r9, #16]
	if ((config->head_block->dest_address == 0)) {
 800380a:	e9d1 e000 	ldrd	lr, r0, [r1]
	if (stream->direction == MEMORY_TO_PERIPHERAL) {
 800380e:	2a01      	cmp	r2, #1
		DMA_InitStruct.PeriphOrM2MSrcAddress =
 8003810:	bf0c      	ite	eq
 8003812:	e9cd 0e03 	strdeq	r0, lr, [sp, #12]
		DMA_InitStruct.MemoryOrM2MDstAddress =
 8003816:	e9cd e003 	strdne	lr, r0, [sp, #12]
	ret = dma_stm32_get_priority(config->channel_priority,
 800381a:	6838      	ldr	r0, [r7, #0]
	switch (priority) {
 800381c:	f3c0 3083 	ubfx	r0, r0, #14, #4
	stream->dst_size	= config->dest_data_size;
 8003820:	e9c9 c402 	strd	ip, r4, [r9, #8]
	switch (priority) {
 8003824:	2803      	cmp	r0, #3
 8003826:	d827      	bhi.n	8003878 <dma_stm32_configure+0x13c>
 8003828:	e8df f000 	tbb	[pc, r0]
 800382c:	024a463a 	.word	0x024a463a
		*ll_priority = LL_DMA_PRIORITY_VERYHIGH;
 8003830:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8003834:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 8003836:	2a01      	cmp	r2, #1
 8003838:	d036      	beq.n	80038a8 <dma_stm32_configure+0x16c>
 800383a:	2a02      	cmp	r2, #2
 800383c:	d044      	beq.n	80038c8 <dma_stm32_configure+0x18c>
 800383e:	b9da      	cbnz	r2, 8003878 <dma_stm32_configure+0x13c>
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_MEMORY;
 8003840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003844:	9205      	str	r2, [sp, #20]
		memory_addr_adj = config->head_block->dest_addr_adj;
 8003846:	7f0a      	ldrb	r2, [r1, #28]
 8003848:	f3c2 1e01 	ubfx	lr, r2, #4, #2
		periph_addr_adj = config->head_block->source_addr_adj;
 800384c:	f3c2 0a81 	ubfx	sl, r2, #2, #2
	switch (increment) {
 8003850:	f1be 0f01 	cmp.w	lr, #1
	ret = dma_stm32_get_memory_increment(memory_addr_adj,
 8003854:	fa5f f08e 	uxtb.w	r0, lr
	switch (increment) {
 8003858:	d03f      	beq.n	80038da <dma_stm32_configure+0x19e>
 800385a:	2802      	cmp	r0, #2
 800385c:	d040      	beq.n	80038e0 <dma_stm32_configure+0x1a4>
 800385e:	b958      	cbnz	r0, 8003878 <dma_stm32_configure+0x13c>
		*ll_increment = LL_DMA_MEMORY_INCREMENT;
 8003860:	2080      	movs	r0, #128	; 0x80
 8003862:	9008      	str	r0, [sp, #32]
	switch (increment) {
 8003864:	f1ba 0f01 	cmp.w	sl, #1
	ret = dma_stm32_get_periph_increment(periph_addr_adj,
 8003868:	fa5f f08a 	uxtb.w	r0, sl
	switch (increment) {
 800386c:	d035      	beq.n	80038da <dma_stm32_configure+0x19e>
 800386e:	2802      	cmp	r0, #2
 8003870:	f000 8095 	beq.w	800399e <dma_stm32_configure+0x262>
 8003874:	2800      	cmp	r0, #0
 8003876:	d036      	beq.n	80038e6 <dma_stm32_configure+0x1aa>
		return -EINVAL;
 8003878:	f06f 0315 	mvn.w	r3, #21
}
 800387c:	4618      	mov	r0, r3
 800387e:	b00f      	add	sp, #60	; 0x3c
 8003880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		stream->busy = true;
 8003884:	2301      	movs	r3, #1
		stream->dma_callback = config->dma_callback;
 8003886:	69b9      	ldr	r1, [r7, #24]
		stream->user_data = config->user_data;
 8003888:	697a      	ldr	r2, [r7, #20]
		stream->busy = true;
 800388a:	f889 3006 	strb.w	r3, [r9, #6]
		stream->hal_override = true;
 800388e:	f889 3005 	strb.w	r3, [r9, #5]
		return 0;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
		stream->user_data = config->user_data;
 8003896:	e9c9 2104 	strd	r2, r1, [r9, #16]
}
 800389a:	b00f      	add	sp, #60	; 0x3c
 800389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*ll_priority = LL_DMA_PRIORITY_LOW;
 80038a0:	2000      	movs	r0, #0
	switch (direction) {
 80038a2:	2a01      	cmp	r2, #1
		*ll_priority = LL_DMA_PRIORITY_LOW;
 80038a4:	900d      	str	r0, [sp, #52]	; 0x34
	switch (direction) {
 80038a6:	d1c8      	bne.n	800383a <dma_stm32_configure+0xfe>
		memory_addr_adj = config->head_block->source_addr_adj;
 80038a8:	7f0a      	ldrb	r2, [r1, #28]
		*ll_direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 80038aa:	2010      	movs	r0, #16
 80038ac:	9005      	str	r0, [sp, #20]
		memory_addr_adj = config->head_block->source_addr_adj;
 80038ae:	f3c2 0e81 	ubfx	lr, r2, #2, #2
		periph_addr_adj = config->head_block->dest_addr_adj;
 80038b2:	f3c2 1a01 	ubfx	sl, r2, #4, #2
		break;
 80038b6:	e7cb      	b.n	8003850 <dma_stm32_configure+0x114>
		*ll_priority = LL_DMA_PRIORITY_MEDIUM;
 80038b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80038bc:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 80038be:	e7ba      	b.n	8003836 <dma_stm32_configure+0xfa>
		*ll_priority = LL_DMA_PRIORITY_HIGH;
 80038c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80038c4:	900d      	str	r0, [sp, #52]	; 0x34
	if (ret < 0) {
 80038c6:	e7b6      	b.n	8003836 <dma_stm32_configure+0xfa>
		*ll_direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80038c8:	2200      	movs	r2, #0
 80038ca:	9205      	str	r2, [sp, #20]
	if (ret < 0) {
 80038cc:	e7bb      	b.n	8003846 <dma_stm32_configure+0x10a>
		return -EBUSY;
 80038ce:	f06f 030f 	mvn.w	r3, #15
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	b00f      	add	sp, #60	; 0x3c
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
 80038da:	f06f 0385 	mvn.w	r3, #133	; 0x85
 80038de:	e7cd      	b.n	800387c <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_MEMORY_NOINCREMENT;
 80038e0:	2000      	movs	r0, #0
 80038e2:	9008      	str	r0, [sp, #32]
	if (ret < 0) {
 80038e4:	e7be      	b.n	8003864 <dma_stm32_configure+0x128>
		*ll_increment = LL_DMA_PERIPH_INCREMENT;
 80038e6:	2040      	movs	r0, #64	; 0x40
 80038e8:	9007      	str	r0, [sp, #28]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 80038ea:	f85b 0008 	ldr.w	r0, [fp, r8]
		DMA_InitStruct.NbData = config->head_block->block_size /
 80038ee:	6949      	ldr	r1, [r1, #20]
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 80038f0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 80039a8 <dma_stm32_configure+0x26c>
 80038f4:	9300      	str	r3, [sp, #0]
		DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80038f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80038fa:	bf14      	ite	ne
 80038fc:	2220      	movne	r2, #32
 80038fe:	2200      	moveq	r2, #0
 8003900:	9206      	str	r2, [sp, #24]
	stream->source_periph = (stream->direction == PERIPHERAL_TO_MEMORY);
 8003902:	f1a0 0202 	sub.w	r2, r0, #2
 8003906:	fab2 f282 	clz	r2, r2
 800390a:	0952      	lsrs	r2, r2, #5
 800390c:	f889 2004 	strb.w	r2, [r9, #4]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8003910:	f1bc 0f00 	cmp.w	ip, #0
 8003914:	fa9c f2ac 	rbit	r2, ip
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	bf08      	it	eq
 800391e:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
 8003922:	2c00      	cmp	r4, #0
	DMA_InitStruct.PeriphOrM2MSrcDataSize = table_p_size[index];
 8003924:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8003928:	9209      	str	r2, [sp, #36]	; 0x24
 800392a:	fa94 f2a4 	rbit	r2, r4
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800392e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80039ac <dma_stm32_configure+0x270>
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	bf08      	it	eq
 8003938:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
	if (stream->source_periph) {
 800393c:	2802      	cmp	r0, #2
	DMA_InitStruct.MemoryOrM2MDstDataSize = table_m_size[index];
 800393e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8003942:	920a      	str	r2, [sp, #40]	; 0x28
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8003944:	783a      	ldrb	r2, [r7, #0]
		DMA_InitStruct.NbData = config->head_block->block_size /
 8003946:	bf18      	it	ne
 8003948:	fbb1 f1f4 	udivne	r1, r1, r4
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 800394c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 8003950:	4628      	mov	r0, r5
		DMA_InitStruct.NbData = config->head_block->block_size /
 8003952:	bf08      	it	eq
 8003954:	fbb1 f1fc 	udiveq	r1, r1, ip
	DMA_InitStruct.PeriphRequest = config->dma_slot;
 8003958:	920c      	str	r2, [sp, #48]	; 0x30
 800395a:	910b      	str	r1, [sp, #44]	; 0x2c
	LL_DMA_Init(dma, dma_stm32_id_to_stream(id), &DMA_InitStruct);
 800395c:	f000 f8b4 	bl	8003ac8 <dma_stm32_id_to_stream>
 8003960:	aa03      	add	r2, sp, #12
 8003962:	4601      	mov	r1, r0
 8003964:	4630      	mov	r0, r6
 8003966:	f004 fc93 	bl	8008290 <LL_DMA_Init>
	LL_DMA_EnableIT_TC(dma, dma_stm32_id_to_stream(id));
 800396a:	4628      	mov	r0, r5
 800396c:	f000 f8ac 	bl	8003ac8 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8003970:	4c0c      	ldr	r4, [pc, #48]	; (80039a4 <dma_stm32_configure+0x268>)
	if (config->head_block->source_reload_en) {
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	5c21      	ldrb	r1, [r4, r0]
 8003976:	7f17      	ldrb	r7, [r2, #28]
 8003978:	598a      	ldr	r2, [r1, r6]
 800397a:	9b00      	ldr	r3, [sp, #0]
 800397c:	f042 0202 	orr.w	r2, r2, #2
 8003980:	f017 0f40 	tst.w	r7, #64	; 0x40
 8003984:	518a      	str	r2, [r1, r6]
 8003986:	f43f af79 	beq.w	800387c <dma_stm32_configure+0x140>
		LL_DMA_EnableIT_HT(dma, dma_stm32_id_to_stream(id));
 800398a:	4628      	mov	r0, r5
 800398c:	f000 f89c 	bl	8003ac8 <dma_stm32_id_to_stream>
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8003990:	5c21      	ldrb	r1, [r4, r0]
}
 8003992:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_HTIE);
 8003994:	598a      	ldr	r2, [r1, r6]
 8003996:	f042 0204 	orr.w	r2, r2, #4
 800399a:	518a      	str	r2, [r1, r6]
}
 800399c:	e76e      	b.n	800387c <dma_stm32_configure+0x140>
		*ll_increment = LL_DMA_PERIPH_NOINCREMENT;
 800399e:	2000      	movs	r0, #0
 80039a0:	9007      	str	r0, [sp, #28]
	if (ret < 0) {
 80039a2:	e7a2      	b.n	80038ea <dma_stm32_configure+0x1ae>
 80039a4:	0800e4c8 	.word	0x0800e4c8
 80039a8:	0800e534 	.word	0x0800e534
 80039ac:	0800e528 	.word	0x0800e528

080039b0 <LL_DMA_IsActiveFlag_TC1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80039b0:	6800      	ldr	r0, [r0, #0]
}
 80039b2:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80039b6:	4770      	bx	lr

080039b8 <LL_DMA_IsActiveFlag_TC2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 80039b8:	6800      	ldr	r0, [r0, #0]
}
 80039ba:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80039be:	4770      	bx	lr

080039c0 <LL_DMA_IsActiveFlag_TC3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 80039c0:	6800      	ldr	r0, [r0, #0]
}
 80039c2:	f3c0 2040 	ubfx	r0, r0, #9, #1
 80039c6:	4770      	bx	lr

080039c8 <LL_DMA_IsActiveFlag_TC4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4)) ? 1UL : 0UL);
 80039c8:	6800      	ldr	r0, [r0, #0]
}
 80039ca:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80039ce:	4770      	bx	lr

080039d0 <LL_DMA_IsActiveFlag_TC5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5)) ? 1UL : 0UL);
 80039d0:	6800      	ldr	r0, [r0, #0]
}
 80039d2:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80039d6:	4770      	bx	lr

080039d8 <LL_DMA_IsActiveFlag_TC6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 80039d8:	6800      	ldr	r0, [r0, #0]
}
 80039da:	f3c0 5040 	ubfx	r0, r0, #21, #1
 80039de:	4770      	bx	lr

080039e0 <LL_DMA_IsActiveFlag_TC7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 80039e0:	6800      	ldr	r0, [r0, #0]
}
 80039e2:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80039e6:	4770      	bx	lr

080039e8 <LL_DMA_IsActiveFlag_HT1>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 80039e8:	6800      	ldr	r0, [r0, #0]
}
 80039ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80039ee:	4770      	bx	lr

080039f0 <LL_DMA_IsActiveFlag_HT2>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF2) == (DMA_ISR_HTIF2)) ? 1UL : 0UL);
 80039f0:	6800      	ldr	r0, [r0, #0]
}
 80039f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80039f6:	4770      	bx	lr

080039f8 <LL_DMA_IsActiveFlag_HT3>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF3) == (DMA_ISR_HTIF3)) ? 1UL : 0UL);
 80039f8:	6800      	ldr	r0, [r0, #0]
}
 80039fa:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80039fe:	4770      	bx	lr

08003a00 <LL_DMA_IsActiveFlag_HT4>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF4) == (DMA_ISR_HTIF4)) ? 1UL : 0UL);
 8003a00:	6800      	ldr	r0, [r0, #0]
}
 8003a02:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003a06:	4770      	bx	lr

08003a08 <LL_DMA_IsActiveFlag_HT5>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5)) ? 1UL : 0UL);
 8003a08:	6800      	ldr	r0, [r0, #0]
}
 8003a0a:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8003a0e:	4770      	bx	lr

08003a10 <LL_DMA_IsActiveFlag_HT6>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6)) ? 1UL : 0UL);
 8003a10:	6800      	ldr	r0, [r0, #0]
}
 8003a12:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8003a16:	4770      	bx	lr

08003a18 <LL_DMA_IsActiveFlag_HT7>:
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF7) == (DMA_ISR_HTIF7)) ? 1UL : 0UL);
 8003a18:	6800      	ldr	r0, [r0, #0]
}
 8003a1a:	f3c0 6080 	ubfx	r0, r0, #26, #1
 8003a1e:	4770      	bx	lr

08003a20 <LL_DMA_ClearFlag_TC1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8003a20:	2302      	movs	r3, #2
 8003a22:	6043      	str	r3, [r0, #4]
}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop

08003a28 <LL_DMA_ClearFlag_TC2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF2);
 8003a28:	2320      	movs	r3, #32
 8003a2a:	6043      	str	r3, [r0, #4]
}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <LL_DMA_ClearFlag_TC3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8003a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a34:	6043      	str	r3, [r0, #4]
}
 8003a36:	4770      	bx	lr

08003a38 <LL_DMA_ClearFlag_TC4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8003a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3c:	6043      	str	r3, [r0, #4]
}
 8003a3e:	4770      	bx	lr

08003a40 <LL_DMA_ClearFlag_TC5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	6043      	str	r3, [r0, #4]
}
 8003a46:	4770      	bx	lr

08003a48 <LL_DMA_ClearFlag_TC6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8003a48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a4c:	6043      	str	r3, [r0, #4]
}
 8003a4e:	4770      	bx	lr

08003a50 <LL_DMA_ClearFlag_TC7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8003a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a54:	6043      	str	r3, [r0, #4]
}
 8003a56:	4770      	bx	lr

08003a58 <LL_DMA_ClearFlag_HT1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003a58:	2304      	movs	r3, #4
 8003a5a:	6043      	str	r3, [r0, #4]
}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop

08003a60 <LL_DMA_ClearFlag_HT2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF2);
 8003a60:	2340      	movs	r3, #64	; 0x40
 8003a62:	6043      	str	r3, [r0, #4]
}
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <LL_DMA_ClearFlag_HT3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF3);
 8003a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6c:	6043      	str	r3, [r0, #4]
}
 8003a6e:	4770      	bx	lr

08003a70 <LL_DMA_ClearFlag_HT4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF4);
 8003a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a74:	6043      	str	r3, [r0, #4]
}
 8003a76:	4770      	bx	lr

08003a78 <LL_DMA_ClearFlag_HT5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8003a78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a7c:	6043      	str	r3, [r0, #4]
}
 8003a7e:	4770      	bx	lr

08003a80 <LL_DMA_ClearFlag_HT6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8003a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a84:	6043      	str	r3, [r0, #4]
}
 8003a86:	4770      	bx	lr

08003a88 <LL_DMA_ClearFlag_HT7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF7);
 8003a88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a8c:	6043      	str	r3, [r0, #4]
}
 8003a8e:	4770      	bx	lr

08003a90 <LL_DMA_ClearFlag_TE1>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8003a90:	2308      	movs	r3, #8
 8003a92:	6043      	str	r3, [r0, #4]
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <LL_DMA_ClearFlag_TE2>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	6043      	str	r3, [r0, #4]
}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <LL_DMA_ClearFlag_TE3>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8003aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aa4:	6043      	str	r3, [r0, #4]
}
 8003aa6:	4770      	bx	lr

08003aa8 <LL_DMA_ClearFlag_TE4>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 8003aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aac:	6043      	str	r3, [r0, #4]
}
 8003aae:	4770      	bx	lr

08003ab0 <LL_DMA_ClearFlag_TE5>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF5);
 8003ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ab4:	6043      	str	r3, [r0, #4]
}
 8003ab6:	4770      	bx	lr

08003ab8 <LL_DMA_ClearFlag_TE6>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF6);
 8003ab8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003abc:	6043      	str	r3, [r0, #4]
}
 8003abe:	4770      	bx	lr

08003ac0 <LL_DMA_ClearFlag_TE7>:
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF7);
 8003ac0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ac4:	6043      	str	r3, [r0, #4]
}
 8003ac6:	4770      	bx	lr

08003ac8 <dma_stm32_id_to_stream>:
#endif /* LL_DMA_CHANNEL_6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(stream_nr));

	return stream_nr[id];
 8003ac8:	4b01      	ldr	r3, [pc, #4]	; (8003ad0 <dma_stm32_id_to_stream+0x8>)
}
 8003aca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003ace:	4770      	bx	lr
 8003ad0:	0800e5d4 	.word	0x0800e5d4

08003ad4 <dma_stm32_clear_ht>:
#endif /* LL_DMA_IFCR_CHTIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8003ad4:	4b01      	ldr	r3, [pc, #4]	; (8003adc <dma_stm32_clear_ht+0x8>)
 8003ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ada:	4718      	bx	r3
 8003adc:	0800e5b8 	.word	0x0800e5b8

08003ae0 <dma_stm32_clear_tc>:
#endif /* LL_DMA_IFCR_CTCIF6 */
	};

	__ASSERT_NO_MSG(id < ARRAY_SIZE(func));

	func[id](DMAx);
 8003ae0:	4b01      	ldr	r3, [pc, #4]	; (8003ae8 <dma_stm32_clear_tc+0x8>)
 8003ae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ae6:	4718      	bx	r3
 8003ae8:	0800e59c 	.word	0x0800e59c

08003aec <stm32_dma_dump_stream_irq>:
	LOG_INF("tc: %d, ht: %d, te: %d, gi: %d",
		dma_stm32_is_tc_active(dma, id),
		dma_stm32_is_ht_active(dma, id),
		dma_stm32_is_te_active(dma, id),
		dma_stm32_is_gi_active(dma, id));
}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <stm32_dma_is_tc_irq_active>:

bool stm32_dma_is_tc_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8003af0:	b508      	push	{r3, lr}
	return stream_nr[id];
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <stm32_dma_is_tc_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <stm32_dma_is_tc_irq_active+0x2c>)
 8003af6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003afa:	5cd2      	ldrb	r2, [r2, r3]
 8003afc:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_TCIE) == (DMA_CCR_TCIE)) ? 1UL : 0UL);
 8003afe:	f013 0302 	ands.w	r3, r3, #2
 8003b02:	d007      	beq.n	8003b14 <stm32_dma_is_tc_irq_active+0x24>
	return func[id](DMAx);
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <stm32_dma_is_tc_irq_active+0x30>)
 8003b06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b0a:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_TC(dma, dma_stm32_id_to_stream(id)) &&
 8003b0c:	3800      	subs	r0, #0
 8003b0e:	bf18      	it	ne
 8003b10:	2001      	movne	r0, #1
	       dma_stm32_is_tc_active(dma, id);
}
 8003b12:	bd08      	pop	{r3, pc}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd08      	pop	{r3, pc}
 8003b18:	0800e5d4 	.word	0x0800e5d4
 8003b1c:	0800e540 	.word	0x0800e540
 8003b20:	0800e564 	.word	0x0800e564

08003b24 <stm32_dma_is_ht_irq_active>:

bool stm32_dma_is_ht_irq_active(DMA_TypeDef *dma, uint32_t id)
{
 8003b24:	b508      	push	{r3, lr}
	return stream_nr[id];
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <stm32_dma_is_ht_irq_active+0x28>)
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8003b28:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <stm32_dma_is_ht_irq_active+0x2c>)
 8003b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b2e:	5cd2      	ldrb	r2, [r2, r3]
 8003b30:	5883      	ldr	r3, [r0, r2]
                   DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8003b32:	f013 0304 	ands.w	r3, r3, #4
 8003b36:	d007      	beq.n	8003b48 <stm32_dma_is_ht_irq_active+0x24>
	return func[id](DMAx);
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <stm32_dma_is_ht_irq_active+0x30>)
 8003b3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b3e:	4798      	blx	r3
	return LL_DMA_IsEnabledIT_HT(dma, dma_stm32_id_to_stream(id)) &&
 8003b40:	3800      	subs	r0, #0
 8003b42:	bf18      	it	ne
 8003b44:	2001      	movne	r0, #1
	       dma_stm32_is_ht_active(dma, id);
}
 8003b46:	bd08      	pop	{r3, pc}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd08      	pop	{r3, pc}
 8003b4c:	0800e5d4 	.word	0x0800e5d4
 8003b50:	0800e540 	.word	0x0800e540
 8003b54:	0800e580 	.word	0x0800e580

08003b58 <stm32_dma_clear_stream_irq>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <stm32_dma_clear_stream_irq+0x8>)
 8003b5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b5e:	4718      	bx	r3
 8003b60:	0800e548 	.word	0x0800e548

08003b64 <stm32_dma_is_unexpected_irq_happened>:

bool stm32_dma_is_unexpected_irq_happened(DMA_TypeDef *dma, uint32_t id)
{
	/* Preserve for future amending. */
	return false;
}
 8003b64:	2000      	movs	r0, #0
 8003b66:	4770      	bx	lr

08003b68 <stm32_dma_enable_stream>:
	return stream_nr[id];
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <stm32_dma_enable_stream+0x14>)
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8003b6a:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <stm32_dma_enable_stream+0x18>)
 8003b6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b70:	5cd2      	ldrb	r2, [r2, r3]
 8003b72:	5883      	ldr	r3, [r0, r2]
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	5083      	str	r3, [r0, r2]

void stm32_dma_enable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_EnableChannel(dma, dma_stm32_id_to_stream(id));
}
 8003b7a:	4770      	bx	lr
 8003b7c:	0800e5d4 	.word	0x0800e5d4
 8003b80:	0800e540 	.word	0x0800e540

08003b84 <stm32_dma_disable_stream>:
	return stream_nr[id];
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <stm32_dma_disable_stream+0x24>)
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <stm32_dma_disable_stream+0x28>)
 8003b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b8c:	5cd3      	ldrb	r3, [r2, r3]
 8003b8e:	58c2      	ldr	r2, [r0, r3]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	50c2      	str	r2, [r0, r3]
  return ((READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8003b96:	58c3      	ldr	r3, [r0, r3]
int stm32_dma_disable_stream(DMA_TypeDef *dma, uint32_t id)
{
	LL_DMA_DisableChannel(dma, dma_stm32_id_to_stream(id));

	if (!LL_DMA_IsEnabledChannel(dma, dma_stm32_id_to_stream(id))) {
		return 0;
 8003b98:	f013 0f01 	tst.w	r3, #1
	}

	return -EAGAIN;
}
 8003b9c:	bf14      	ite	ne
 8003b9e:	f06f 000a 	mvnne.w	r0, #10
 8003ba2:	2000      	moveq	r0, #0
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	0800e5d4 	.word	0x0800e5d4
 8003bac:	0800e540 	.word	0x0800e540

08003bb0 <gpio_stm32_port_get_raw>:
}

static int gpio_stm32_port_get_raw(const struct device *dev, uint32_t *value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003bb0:	6843      	ldr	r3, [r0, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003bb4:	691b      	ldr	r3, [r3, #16]

	*value = LL_GPIO_ReadInputPort(gpio);
 8003bb6:	600b      	str	r3, [r1, #0]

	return 0;
}
 8003bb8:	2000      	movs	r0, #0
 8003bba:	4770      	bx	lr

08003bbc <gpio_stm32_port_set_masked_raw>:
static int gpio_stm32_port_set_masked_raw(const struct device *dev,
					  gpio_port_pins_t mask,
					  gpio_port_value_t value)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003bbc:	6843      	ldr	r3, [r0, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
{
 8003bc0:	b410      	push	{r4}
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003bc2:	695c      	ldr	r4, [r3, #20]
	uint32_t port_value;

	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);

	port_value = LL_GPIO_ReadOutputPort(gpio);
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003bc4:	4062      	eors	r2, r4
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	4062      	eors	r2, r4

	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
  WRITE_REG(GPIOx->ODR, PortValue);
 8003bd0:	615a      	str	r2, [r3, #20]
 8003bd2:	4770      	bx	lr

08003bd4 <gpio_stm32_port_set_bits_raw>:

static int gpio_stm32_port_set_bits_raw(const struct device *dev,
					gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003bd4:	6843      	ldr	r3, [r0, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	WRITE_REG(gpio->BSRR, pins);

	return 0;
}
 8003bd8:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8003bda:	6199      	str	r1, [r3, #24]
}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <gpio_stm32_port_clear_bits_raw>:

static int gpio_stm32_port_clear_bits_raw(const struct device *dev,
					  gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003be0:	6843      	ldr	r3, [r0, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
	/* On other series, LL abstraction is needed  */
	LL_GPIO_ResetOutputPin(gpio, pins);
#endif

	return 0;
}
 8003be4:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003be6:	6299      	str	r1, [r3, #40]	; 0x28
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop

08003bec <gpio_stm32_port_toggle_bits>:

static int gpio_stm32_port_toggle_bits(const struct device *dev,
				       gpio_port_pins_t pins)
{
	const struct gpio_stm32_config *cfg = dev->config;
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003bec:	6843      	ldr	r3, [r0, #4]
 8003bee:	685a      	ldr	r2, [r3, #4]
	/*
	 * On F1 series, using LL API requires a costly pin mask translation.
	 * Skip it and use CMSIS API directly. Valid also on other series.
	 */
	z_stm32_hsem_lock(CFG_HW_GPIO_SEMID, HSEM_LOCK_DEFAULT_RETRY);
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003bf0:	6953      	ldr	r3, [r2, #20]
 8003bf2:	4059      	eors	r1, r3
	z_stm32_hsem_unlock(CFG_HW_GPIO_SEMID);

	return 0;
}
 8003bf4:	2000      	movs	r0, #0
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8003bf6:	6151      	str	r1, [r2, #20]
}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop

08003bfc <gpio_stm32_manage_callback>:
}

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 8003bfc:	b470      	push	{r4, r5, r6}
	struct gpio_stm32_data *data = dev->data;
 8003bfe:	6905      	ldr	r5, [r0, #16]
	return list->head;
 8003c00:	68ae      	ldr	r6, [r5, #8]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
 8003c02:	b1e6      	cbz	r6, 8003c3e <gpio_stm32_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8003c04:	4633      	mov	r3, r6
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003c06:	2400      	movs	r4, #0
 8003c08:	e000      	b.n	8003c0c <gpio_stm32_manage_callback+0x10>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	d00d      	beq.n	8003c2c <gpio_stm32_manage_callback+0x30>
	return node->next;
 8003c10:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8003c12:	461c      	mov	r4, r3
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1f8      	bne.n	8003c0a <gpio_stm32_manage_callback+0xe>
			if (!set) {
				return -EINVAL;
 8003c18:	f06f 0015 	mvn.w	r0, #21
			if (!set) {
 8003c1c:	b122      	cbz	r2, 8003c28 <gpio_stm32_manage_callback+0x2c>
Z_GENLIST_PREPEND(slist, snode)
 8003c1e:	68e8      	ldr	r0, [r5, #12]
	parent->next = child;
 8003c20:	600e      	str	r6, [r1, #0]
	list->head = node;
 8003c22:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003c24:	b198      	cbz	r0, 8003c4e <gpio_stm32_manage_callback+0x52>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
 8003c26:	2000      	movs	r0, #0

	return gpio_manage_callback(&data->cb, callback, set);
}
 8003c28:	bc70      	pop	{r4, r5, r6}
 8003c2a:	4770      	bx	lr
	return node->next;
 8003c2c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
 8003c2e:	68e8      	ldr	r0, [r5, #12]
Z_GENLIST_REMOVE(slist, snode)
 8003c30:	b184      	cbz	r4, 8003c54 <gpio_stm32_manage_callback+0x58>
 8003c32:	4281      	cmp	r1, r0
	parent->next = child;
 8003c34:	6023      	str	r3, [r4, #0]
	list->tail = node;
 8003c36:	bf08      	it	eq
 8003c38:	60ec      	streq	r4, [r5, #12]
	parent->next = child;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	600b      	str	r3, [r1, #0]
	if (set) {
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d0f1      	beq.n	8003c26 <gpio_stm32_manage_callback+0x2a>
Z_GENLIST_PREPEND(slist, snode)
 8003c42:	68e8      	ldr	r0, [r5, #12]
	return list->head;
 8003c44:	68ae      	ldr	r6, [r5, #8]
	parent->next = child;
 8003c46:	600e      	str	r6, [r1, #0]
	list->head = node;
 8003c48:	60a9      	str	r1, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d1eb      	bne.n	8003c26 <gpio_stm32_manage_callback+0x2a>
	list->tail = node;
 8003c4e:	60e9      	str	r1, [r5, #12]
 8003c50:	bc70      	pop	{r4, r5, r6}
 8003c52:	4770      	bx	lr
Z_GENLIST_REMOVE(slist, snode)
 8003c54:	4281      	cmp	r1, r0
	list->head = node;
 8003c56:	60ab      	str	r3, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
 8003c58:	d1ef      	bne.n	8003c3a <gpio_stm32_manage_callback+0x3e>
	list->tail = node;
 8003c5a:	60eb      	str	r3, [r5, #12]
}
 8003c5c:	e7ed      	b.n	8003c3a <gpio_stm32_manage_callback+0x3e>
 8003c5e:	bf00      	nop

08003c60 <gpio_stm32_pin_interrupt_configure>:
{
 8003c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (mode == GPIO_INT_MODE_DISABLED) {
 8003c64:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8003c68:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8003c6a:	6900      	ldr	r0, [r0, #16]
{
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	460c      	mov	r4, r1
	if (mode == GPIO_INT_MODE_DISABLED) {
 8003c70:	d057      	beq.n	8003d22 <gpio_stm32_pin_interrupt_configure+0xc2>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8003c72:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003c76:	d07d      	beq.n	8003d74 <gpio_stm32_pin_interrupt_configure+0x114>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4940      	ldr	r1, [pc, #256]	; (8003d7c <gpio_stm32_pin_interrupt_configure+0x11c>)
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	461d      	mov	r5, r3
 8003c80:	f7ff fa1a 	bl	80030b8 <stm32_exti_set_callback>
 8003c84:	4606      	mov	r6, r0
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d171      	bne.n	8003d6e <gpio_stm32_pin_interrupt_configure+0x10e>
	struct stm32_pclken pclken = {
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <gpio_stm32_pin_interrupt_configure+0x120>)
	gpio_stm32_enable_int(cfg->port, pin);
 8003c8c:	f8d7 8008 	ldr.w	r8, [r7, #8]
	struct stm32_pclken pclken = {
 8003c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c94:	466f      	mov	r7, sp
 8003c96:	e887 0003 	stmia.w	r7, {r0, r1}
 8003c9a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003d88 <gpio_stm32_pin_interrupt_configure+0x128>
 8003c9e:	4648      	mov	r0, r9
 8003ca0:	f006 f94a 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8003ca4:	b130      	cbz	r0, 8003cb4 <gpio_stm32_pin_interrupt_configure+0x54>
	return api->on(dev, sys);
 8003ca6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003caa:	4639      	mov	r1, r7
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4648      	mov	r0, r9
 8003cb0:	4798      	blx	r3
	if (ret != 0) {
 8003cb2:	b1a0      	cbz	r0, 8003cde <gpio_stm32_pin_interrupt_configure+0x7e>
	switch (trig) {
 8003cb4:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8003cb8:	d02f      	beq.n	8003d1a <gpio_stm32_pin_interrupt_configure+0xba>
 8003cba:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8003cbe:	d02e      	beq.n	8003d1e <gpio_stm32_pin_interrupt_configure+0xbe>
 8003cc0:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8003cc4:	bf14      	ite	ne
 8003cc6:	2100      	movne	r1, #0
 8003cc8:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff f9bc 	bl	8003048 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff f999 	bl	8003008 <stm32_exti_enable>
}
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	b003      	add	sp, #12
 8003cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003cde:	f004 0203 	and.w	r2, r4, #3
 8003ce2:	3204      	adds	r2, #4
 8003ce4:	0093      	lsls	r3, r2, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	ea42 0294 	orr.w	r2, r2, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8003cee:	b2d3      	uxtb	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cf6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003cfa:	0c11      	lsrs	r1, r2, #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	fa91 f1a1 	rbit	r1, r1
  return __builtin_clz(value);
 8003d00:	fab1 f181 	clz	r1, r1
 8003d04:	fa08 f801 	lsl.w	r8, r8, r1
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	ea21 4212 	bic.w	r2, r1, r2, lsr #16
 8003d0e:	ea48 0202 	orr.w	r2, r8, r2
	switch (trig) {
 8003d12:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	d1cf      	bne.n	8003cba <gpio_stm32_pin_interrupt_configure+0x5a>
		edge = STM32_EXTI_TRIG_RISING;
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	e7d5      	b.n	8003cca <gpio_stm32_pin_interrupt_configure+0x6a>
		edge = STM32_EXTI_TRIG_BOTH;
 8003d1e:	2103      	movs	r1, #3
 8003d20:	e7d3      	b.n	8003cca <gpio_stm32_pin_interrupt_configure+0x6a>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003d22:	f001 0303 	and.w	r3, r1, #3
 8003d26:	3304      	adds	r3, #4
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	230f      	movs	r3, #15
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4913      	ldr	r1, [pc, #76]	; (8003d84 <gpio_stm32_pin_interrupt_configure+0x124>)
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	3202      	adds	r2, #2
 8003d3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d3e:	0c19      	lsrs	r1, r3, #16
 8003d40:	ea02 4313 	and.w	r3, r2, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	fa91 f2a1 	rbit	r2, r1
  return __builtin_clz(value);
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	40d3      	lsrs	r3, r2
 8003d4e:	4298      	cmp	r0, r3
 8003d50:	d001      	beq.n	8003d56 <gpio_stm32_pin_interrupt_configure+0xf6>
	int err = 0;
 8003d52:	2600      	movs	r6, #0
 8003d54:	e7bf      	b.n	8003cd6 <gpio_stm32_pin_interrupt_configure+0x76>
			stm32_exti_disable(pin);
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff f968 	bl	800302c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff f9bf 	bl	80030e0 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8003d62:	2100      	movs	r1, #0
 8003d64:	4620      	mov	r0, r4
 8003d66:	f7ff f96f 	bl	8003048 <stm32_exti_trigger>
	int err = 0;
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	e7b3      	b.n	8003cd6 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -EBUSY;
 8003d6e:	f06f 060f 	mvn.w	r6, #15
	return err;
 8003d72:	e7b0      	b.n	8003cd6 <gpio_stm32_pin_interrupt_configure+0x76>
		err = -ENOTSUP;
 8003d74:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8003d78:	e7ad      	b.n	8003cd6 <gpio_stm32_pin_interrupt_configure+0x76>
 8003d7a:	bf00      	nop
 8003d7c:	08003f3d 	.word	0x08003f3d
 8003d80:	0800e2f8 	.word	0x0800e2f8
 8003d84:	40010000 	.word	0x40010000
 8003d88:	0800dddc 	.word	0x0800dddc

08003d8c <gpio_stm32_configure_raw.isra.0>:
static void gpio_stm32_configure_raw(const struct device *dev, int pin,
 8003d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003d8e:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 8003d90:	2001      	movs	r0, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003d92:	6866      	ldr	r6, [r4, #4]
 8003d94:	4088      	lsls	r0, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003d96:	f3c2 1580 	ubfx	r5, r2, #6, #1
 8003d9a:	ea26 0600 	bic.w	r6, r6, r0
 8003d9e:	408d      	lsls	r5, r1
 8003da0:	4335      	orrs	r5, r6
 8003da2:	6065      	str	r5, [r4, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003da4:	68a7      	ldr	r7, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	fa90 f6a0 	rbit	r6, r0
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8003daa:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003dae:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  if (value == 0U)
 8003db2:	b13e      	cbz	r6, 8003dc4 <gpio_stm32_configure_raw.isra.0+0x38>
  return __builtin_clz(value);
 8003db4:	fab6 f686 	clz	r6, r6
 8003db8:	0076      	lsls	r6, r6, #1
 8003dba:	2503      	movs	r5, #3
 8003dbc:	fa05 f606 	lsl.w	r6, r5, r6
 8003dc0:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	d054      	beq.n	8003e76 <gpio_stm32_configure_raw.isra.0+0xea>
  return __builtin_clz(value);
 8003dcc:	fab5 f585 	clz	r5, r5
 8003dd0:	006d      	lsls	r5, r5, #1
 8003dd2:	fa0e f505 	lsl.w	r5, lr, r5
 8003dd6:	433d      	orrs	r5, r7
 8003dd8:	60a5      	str	r5, [r4, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003dda:	68e7      	ldr	r7, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	fa90 f6a0 	rbit	r6, r0
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8003de0:	f3c2 2241 	ubfx	r2, r2, #9, #2
  if (value == 0U)
 8003de4:	b13e      	cbz	r6, 8003df6 <gpio_stm32_configure_raw.isra.0+0x6a>
  return __builtin_clz(value);
 8003de6:	fab6 f686 	clz	r6, r6
 8003dea:	0076      	lsls	r6, r6, #1
 8003dec:	2503      	movs	r5, #3
 8003dee:	fa05 f606 	lsl.w	r6, r5, r6
 8003df2:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003dfa:	b3d5      	cbz	r5, 8003e72 <gpio_stm32_configure_raw.isra.0+0xe6>
  return __builtin_clz(value);
 8003dfc:	fab5 f585 	clz	r5, r5
 8003e00:	006d      	lsls	r5, r5, #1
 8003e02:	fa02 f505 	lsl.w	r5, r2, r5
 8003e06:	433d      	orrs	r5, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8003e08:	f1bc 0f20 	cmp.w	ip, #32
 8003e0c:	60e5      	str	r5, [r4, #12]
 8003e0e:	d018      	beq.n	8003e42 <gpio_stm32_configure_raw.isra.0+0xb6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e14:	6821      	ldr	r1, [r4, #0]
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8003e16:	ea4f 131c 	mov.w	r3, ip, lsr #4
  if (value == 0U)
 8003e1a:	b13a      	cbz	r2, 8003e2c <gpio_stm32_configure_raw.isra.0+0xa0>
  return __builtin_clz(value);
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	0052      	lsls	r2, r2, #1
 8003e22:	2503      	movs	r5, #3
 8003e24:	fa05 f202 	lsl.w	r2, r5, r2
 8003e28:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003e30:	b318      	cbz	r0, 8003e7a <gpio_stm32_configure_raw.isra.0+0xee>
  return __builtin_clz(value);
 8003e32:	fab0 f080 	clz	r0, r0
 8003e36:	0040      	lsls	r0, r0, #1
 8003e38:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3c:	4308      	orrs	r0, r1
 8003e3e:	6020      	str	r0, [r4, #0]
}
 8003e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (pin < 8) {
 8003e42:	2907      	cmp	r1, #7
 8003e44:	dc1f      	bgt.n	8003e86 <gpio_stm32_configure_raw.isra.0+0xfa>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	fa90 f2a0 	rbit	r2, r0
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003e4a:	6a21      	ldr	r1, [r4, #32]
  if (value == 0U)
 8003e4c:	b13a      	cbz	r2, 8003e5e <gpio_stm32_configure_raw.isra.0+0xd2>
  return __builtin_clz(value);
 8003e4e:	fab2 f282 	clz	r2, r2
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	250f      	movs	r5, #15
 8003e56:	fa05 f202 	lsl.w	r2, r5, r2
 8003e5a:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003e62:	b34a      	cbz	r2, 8003eb8 <gpio_stm32_configure_raw.isra.0+0x12c>
  return __builtin_clz(value);
 8003e64:	fab2 f282 	clz	r2, r2
 8003e68:	0092      	lsls	r2, r2, #2
 8003e6a:	4093      	lsls	r3, r2
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6223      	str	r3, [r4, #32]
}
 8003e70:	e7ce      	b.n	8003e10 <gpio_stm32_configure_raw.isra.0+0x84>
 8003e72:	2540      	movs	r5, #64	; 0x40
 8003e74:	e7c5      	b.n	8003e02 <gpio_stm32_configure_raw.isra.0+0x76>
 8003e76:	2540      	movs	r5, #64	; 0x40
 8003e78:	e7ab      	b.n	8003dd2 <gpio_stm32_configure_raw.isra.0+0x46>
 8003e7a:	2040      	movs	r0, #64	; 0x40
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e80:	4308      	orrs	r0, r1
 8003e82:	6020      	str	r0, [r4, #0]
}
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003e86:	0a02      	lsrs	r2, r0, #8
 8003e88:	6a65      	ldr	r5, [r4, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8003e8e:	b139      	cbz	r1, 8003ea0 <gpio_stm32_configure_raw.isra.0+0x114>
  return __builtin_clz(value);
 8003e90:	fab1 f181 	clz	r1, r1
 8003e94:	0089      	lsls	r1, r1, #2
 8003e96:	260f      	movs	r6, #15
 8003e98:	fa06 f101 	lsl.w	r1, r6, r1
 8003e9c:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003ea4:	b132      	cbz	r2, 8003eb4 <gpio_stm32_configure_raw.isra.0+0x128>
  return __builtin_clz(value);
 8003ea6:	fab2 f282 	clz	r2, r2
 8003eaa:	0092      	lsls	r2, r2, #2
 8003eac:	4093      	lsls	r3, r2
 8003eae:	432b      	orrs	r3, r5
 8003eb0:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003eb2:	e7ad      	b.n	8003e10 <gpio_stm32_configure_raw.isra.0+0x84>
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	e7f9      	b.n	8003eac <gpio_stm32_configure_raw.isra.0+0x120>
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	e7d6      	b.n	8003e6a <gpio_stm32_configure_raw.isra.0+0xde>

08003ebc <gpio_stm32_config>:
{
 8003ebc:	b508      	push	{r3, lr}
	if ((flags & GPIO_OUTPUT) != 0) {
 8003ebe:	0593      	lsls	r3, r2, #22
 8003ec0:	d511      	bpl.n	8003ee6 <gpio_stm32_config+0x2a>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8003ec2:	0793      	lsls	r3, r2, #30
 8003ec4:	d41f      	bmi.n	8003f06 <gpio_stm32_config+0x4a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003ec6:	06d3      	lsls	r3, r2, #27
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8003ec8:	f04f 0c10 	mov.w	ip, #16
		if ((flags & GPIO_PULL_UP) != 0) {
 8003ecc:	d521      	bpl.n	8003f12 <gpio_stm32_config+0x56>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003ece:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003ed2:	0513      	lsls	r3, r2, #20
	const struct gpio_stm32_config *cfg = dev->config;
 8003ed4:	6840      	ldr	r0, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003ed6:	d423      	bmi.n	8003f20 <gpio_stm32_config+0x64>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003ed8:	0552      	lsls	r2, r2, #21
 8003eda:	d509      	bpl.n	8003ef0 <gpio_stm32_config+0x34>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003edc:	6842      	ldr	r2, [r0, #4]
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003ede:	2301      	movs	r3, #1
 8003ee0:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8003ee2:	6293      	str	r3, [r2, #40]	; 0x28
	return 0;
 8003ee4:	e004      	b.n	8003ef0 <gpio_stm32_config+0x34>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003ee6:	05d3      	lsls	r3, r2, #23
	const struct gpio_stm32_config *cfg = dev->config;
 8003ee8:	6840      	ldr	r0, [r0, #4]
	} else if  ((flags & GPIO_INPUT) != 0) {
 8003eea:	d407      	bmi.n	8003efc <gpio_stm32_config+0x40>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8003eec:	f04f 0c30 	mov.w	ip, #48	; 0x30
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4662      	mov	r2, ip
 8003ef4:	f7ff ff4a 	bl	8003d8c <gpio_stm32_configure_raw.isra.0>
	return 0;
 8003ef8:	2000      	movs	r0, #0
}
 8003efa:	bd08      	pop	{r3, pc}
		if ((flags & GPIO_PULL_UP) != 0) {
 8003efc:	06d3      	lsls	r3, r2, #27
 8003efe:	d514      	bpl.n	8003f2a <gpio_stm32_config+0x6e>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003f00:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003f04:	e7f4      	b.n	8003ef0 <gpio_stm32_config+0x34>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8003f06:	0753      	lsls	r3, r2, #29
 8003f08:	d515      	bpl.n	8003f36 <gpio_stm32_config+0x7a>
		if ((flags & GPIO_PULL_UP) != 0) {
 8003f0a:	06d3      	lsls	r3, r2, #27
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8003f0c:	f04f 0c50 	mov.w	ip, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8003f10:	d4dd      	bmi.n	8003ece <gpio_stm32_config+0x12>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8003f12:	0693      	lsls	r3, r2, #26
 8003f14:	d5dd      	bpl.n	8003ed2 <gpio_stm32_config+0x16>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003f16:	0513      	lsls	r3, r2, #20
	const struct gpio_stm32_config *cfg = dev->config;
 8003f18:	6840      	ldr	r0, [r0, #4]
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003f1a:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003f1e:	d5db      	bpl.n	8003ed8 <gpio_stm32_config+0x1c>
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003f20:	6842      	ldr	r2, [r0, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003f22:	2301      	movs	r3, #1
 8003f24:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8003f26:	6193      	str	r3, [r2, #24]
	return 0;
 8003f28:	e7e2      	b.n	8003ef0 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003f2a:	f012 0c20 	ands.w	ip, r2, #32
 8003f2e:	bf18      	it	ne
 8003f30:	f44f 6c80 	movne.w	ip, #1024	; 0x400
 8003f34:	e7dc      	b.n	8003ef0 <gpio_stm32_config+0x34>
				return -ENOTSUP;
 8003f36:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003f3a:	bd08      	pop	{r3, pc}

08003f3c <gpio_stm32_isr>:
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003f3c:	688b      	ldr	r3, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003f3e:	b18b      	cbz	r3, 8003f64 <gpio_stm32_isr+0x28>
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003f42:	2201      	movs	r2, #1
 8003f44:	684e      	ldr	r6, [r1, #4]
	return node->next;
 8003f46:	681c      	ldr	r4, [r3, #0]
 8003f48:	fa02 f500 	lsl.w	r5, r2, r0
		if (cb->pin_mask & pins) {
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	402a      	ands	r2, r5
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8003f50:	4619      	mov	r1, r3
 8003f52:	4630      	mov	r0, r6
		if (cb->pin_mask & pins) {
 8003f54:	d001      	beq.n	8003f5a <gpio_stm32_isr+0x1e>
			cb->handler(port, cb, cb->pin_mask & pins);
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003f5a:	b114      	cbz	r4, 8003f62 <gpio_stm32_isr+0x26>
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	e7f4      	b.n	8003f4c <gpio_stm32_isr+0x10>
}
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 8003f68:	b538      	push	{r3, r4, r5, lr}
	struct gpio_stm32_data *data = dev->data;
	int ret;

	data->dev = dev;
 8003f6a:	6903      	ldr	r3, [r0, #16]
					(clock_control_subsys_t *)&cfg->pclken);
 8003f6c:	6844      	ldr	r4, [r0, #4]
	data->dev = dev;
 8003f6e:	6058      	str	r0, [r3, #4]
 8003f70:	4d08      	ldr	r5, [pc, #32]	; (8003f94 <gpio_stm32_init+0x2c>)
 8003f72:	4628      	mov	r0, r5
 8003f74:	f005 ffe0 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8003f78:	b140      	cbz	r0, 8003f8c <gpio_stm32_init+0x24>
	return api->on(dev, sys);
 8003f7a:	68ab      	ldr	r3, [r5, #8]
 8003f7c:	340c      	adds	r4, #12
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4621      	mov	r1, r4
 8003f82:	4628      	mov	r0, r5
 8003f84:	4798      	blx	r3
 8003f86:	ea00 70e0 	and.w	r0, r0, r0, asr #31

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
}
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	f06f 0012 	mvn.w	r0, #18
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	bf00      	nop
 8003f94:	0800dddc 	.word	0x0800dddc

08003f98 <gpio_stm32_configure>:
{
 8003f98:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 8003f9a:	6840      	ldr	r0, [r0, #4]
 8003f9c:	f7ff fef6 	bl	8003d8c <gpio_stm32_configure_raw.isra.0>
}
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	bd08      	pop	{r3, pc}

08003fa4 <LL_TIM_OC_SetCompareCH1>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003fa4:	6341      	str	r1, [r0, #52]	; 0x34
}
 8003fa6:	4770      	bx	lr

08003fa8 <LL_TIM_OC_SetCompareCH2>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003fa8:	6381      	str	r1, [r0, #56]	; 0x38
}
 8003faa:	4770      	bx	lr

08003fac <LL_TIM_OC_SetCompareCH3>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003fac:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8003fae:	4770      	bx	lr

08003fb0 <LL_TIM_OC_SetCompareCH4>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003fb0:	6401      	str	r1, [r0, #64]	; 0x40
}
 8003fb2:	4770      	bx	lr

08003fb4 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003fb4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003fb6:	6581      	str	r1, [r0, #88]	; 0x58
}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003fbc:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8003fbe:	4770      	bx	lr

08003fc0 <pwm_stm32_get_cycles_per_sec>:
					uint64_t *cycles)
{
	struct pwm_stm32_data *data = dev->data;
	const struct pwm_stm32_config *cfg = dev->config;

	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 8003fc0:	6841      	ldr	r1, [r0, #4]
 8003fc2:	6903      	ldr	r3, [r0, #16]
 8003fc4:	6849      	ldr	r1, [r1, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2000      	movs	r0, #0
 8003fca:	3101      	adds	r1, #1
 8003fcc:	6050      	str	r0, [r2, #4]
 8003fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd2:	6013      	str	r3, [r2, #0]

	return 0;
}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop

08003fd8 <pwm_stm32_pin_set>:
{
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8003fdc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
 8003fe0:	b088      	sub	sp, #32
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8003fe2:	f1bc 0f05 	cmp.w	ip, #5
{
 8003fe6:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
	const struct pwm_stm32_config *cfg = dev->config;
 8003fea:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8003fee:	f200 80ae 	bhi.w	800414e <pwm_stm32_pin_set+0x176>
	if (pulse_cycles > period_cycles) {
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f0c0 80a9 	bcc.w	800414e <pwm_stm32_pin_set+0x176>
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8003ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d003      	beq.n	800400e <pwm_stm32_pin_set+0x36>
 8004006:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800400a:	f200 80b4 	bhi.w	8004176 <pwm_stm32_pin_set+0x19e>
	channel = ch2ll[pwm - 1u];
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <pwm_stm32_pin_set+0x1b0>)
 8004010:	f852 702c 	ldr.w	r7, [r2, ip, lsl #2]
	if (period_cycles == 0u) {
 8004014:	2c00      	cmp	r4, #0
 8004016:	d068      	beq.n	80040ea <pwm_stm32_pin_set+0x112>
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	ea02 0107 	and.w	r1, r2, r7
 800401e:	ea37 0202 	bics.w	r2, r7, r2
 8004022:	f00e 0601 	and.w	r6, lr, #1
 8004026:	d031      	beq.n	800408c <pwm_stm32_pin_set+0xb4>
		LL_TIM_OC_StructInit(&oc_init);
 8004028:	4668      	mov	r0, sp
 800402a:	f004 f9c1 	bl	80083b0 <LL_TIM_OC_StructInit>
		return LL_TIM_OCPOLARITY_HIGH;
 800402e:	0076      	lsls	r6, r6, #1
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8004030:	f8d8 0000 	ldr.w	r0, [r8]
		oc_init.CompareValue = pulse_cycles;
 8004034:	9503      	str	r5, [sp, #12]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8004036:	2301      	movs	r3, #1
 8004038:	2560      	movs	r5, #96	; 0x60
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 800403a:	466a      	mov	r2, sp
 800403c:	4639      	mov	r1, r7
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800403e:	e9cd 5300 	strd	r5, r3, [sp]
		oc_init.OCPolarity = get_polarity(flags);
 8004042:	9604      	str	r6, [sp, #16]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8004044:	f004 f9be 	bl	80083c4 <LL_TIM_OC_Init>
 8004048:	2800      	cmp	r0, #0
 800404a:	f040 8091 	bne.w	8004170 <pwm_stm32_pin_set+0x198>
		LL_TIM_EnableARRPreload(cfg->timer);
 800404e:	f8d8 3000 	ldr.w	r3, [r8]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004052:	681a      	ldr	r2, [r3, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004054:	2f01      	cmp	r7, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800405a:	601a      	str	r2, [r3, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800405c:	d035      	beq.n	80040ca <pwm_stm32_pin_set+0xf2>
 800405e:	2f04      	cmp	r7, #4
 8004060:	d033      	beq.n	80040ca <pwm_stm32_pin_set+0xf2>
 8004062:	2f10      	cmp	r7, #16
 8004064:	d05e      	beq.n	8004124 <pwm_stm32_pin_set+0x14c>
 8004066:	2f40      	cmp	r7, #64	; 0x40
 8004068:	d02f      	beq.n	80040ca <pwm_stm32_pin_set+0xf2>
 800406a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800406e:	d061      	beq.n	8004134 <pwm_stm32_pin_set+0x15c>
 8004070:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8004074:	d05e      	beq.n	8004134 <pwm_stm32_pin_set+0x15c>
 8004076:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800407a:	d070      	beq.n	800415e <pwm_stm32_pin_set+0x186>
 800407c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8004080:	bf0c      	ite	eq
 8004082:	2208      	moveq	r2, #8
 8004084:	f44f 6200 	movne.w	r2, #2048	; 0x800
 8004088:	203c      	movs	r0, #60	; 0x3c
 800408a:	e01f      	b.n	80040cc <pwm_stm32_pin_set+0xf4>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800408c:	2901      	cmp	r1, #1
	return LL_TIM_OCPOLARITY_LOW;
 800408e:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 8004092:	d032      	beq.n	80040fa <pwm_stm32_pin_set+0x122>
 8004094:	2904      	cmp	r1, #4
 8004096:	d050      	beq.n	800413a <pwm_stm32_pin_set+0x162>
 8004098:	2910      	cmp	r1, #16
 800409a:	d053      	beq.n	8004144 <pwm_stm32_pin_set+0x16c>
 800409c:	2940      	cmp	r1, #64	; 0x40
 800409e:	d044      	beq.n	800412a <pwm_stm32_pin_set+0x152>
 80040a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80040a4:	d056      	beq.n	8004154 <pwm_stm32_pin_set+0x17c>
 80040a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80040aa:	d05c      	beq.n	8004166 <pwm_stm32_pin_set+0x18e>
 80040ac:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80040b0:	d064      	beq.n	800417c <pwm_stm32_pin_set+0x1a4>
 80040b2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80040b6:	bf07      	ittee	eq
 80040b8:	ea4f 4e0e 	moveq.w	lr, lr, lsl #16
 80040bc:	f46f 3200 	mvneq.w	r2, #131072	; 0x20000
 80040c0:	ea4f 5e0e 	movne.w	lr, lr, lsl #20
 80040c4:	f46f 1200 	mvnne.w	r2, #2097152	; 0x200000
 80040c8:	e019      	b.n	80040fe <pwm_stm32_pin_set+0x126>
 80040ca:	2208      	movs	r2, #8
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80040cc:	f103 0518 	add.w	r5, r3, #24
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80040d0:	3c01      	subs	r4, #1
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80040d2:	5829      	ldr	r1, [r5, r0]
 80040d4:	4311      	orrs	r1, r2
 80040d6:	5029      	str	r1, [r5, r0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040d8:	62dc      	str	r4, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
	return 0;
 80040e0:	2000      	movs	r0, #0
 80040e2:	615a      	str	r2, [r3, #20]
}
 80040e4:	b008      	add	sp, #32
 80040e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(TIMx->CCER, Channels);
 80040ea:	6a1a      	ldr	r2, [r3, #32]
		return 0;
 80040ec:	4620      	mov	r0, r4
 80040ee:	ea22 0207 	bic.w	r2, r2, r7
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	b008      	add	sp, #32
 80040f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fa:	f06f 0202 	mvn.w	r2, #2
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80040fe:	6a1e      	ldr	r6, [r3, #32]
 8004100:	4016      	ands	r6, r2
 8004102:	ea46 060e 	orr.w	r6, r6, lr
 8004106:	621e      	str	r6, [r3, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8004108:	4618      	mov	r0, r3
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <pwm_stm32_pin_set+0x1b4>)
 800410c:	4629      	mov	r1, r5
 800410e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004112:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8004114:	f8d8 3000 	ldr.w	r3, [r8]
 8004118:	3c01      	subs	r4, #1
	return 0;
 800411a:	2000      	movs	r0, #0
  WRITE_REG(TIMx->ARR, AutoReload);
 800411c:	62dc      	str	r4, [r3, #44]	; 0x2c
}
 800411e:	b008      	add	sp, #32
 8004120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004128:	e7d0      	b.n	80040cc <pwm_stm32_pin_set+0xf4>
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 800412a:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 800412e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004132:	e7e4      	b.n	80040fe <pwm_stm32_pin_set+0x126>
 8004134:	2208      	movs	r2, #8
 8004136:	2004      	movs	r0, #4
 8004138:	e7c8      	b.n	80040cc <pwm_stm32_pin_set+0xf4>
 800413a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800413e:	f06f 0208 	mvn.w	r2, #8
 8004142:	e7dc      	b.n	80040fe <pwm_stm32_pin_set+0x126>
 8004144:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8004148:	f06f 0220 	mvn.w	r2, #32
 800414c:	e7d7      	b.n	80040fe <pwm_stm32_pin_set+0x126>
		return -EINVAL;
 800414e:	f06f 0015 	mvn.w	r0, #21
 8004152:	e7c7      	b.n	80040e4 <pwm_stm32_pin_set+0x10c>
 8004154:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 8004158:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800415c:	e7cf      	b.n	80040fe <pwm_stm32_pin_set+0x126>
 800415e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004162:	2004      	movs	r0, #4
 8004164:	e7b2      	b.n	80040cc <pwm_stm32_pin_set+0xf4>
 8004166:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 800416a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800416e:	e7c6      	b.n	80040fe <pwm_stm32_pin_set+0x126>
			return -EIO;
 8004170:	f06f 0004 	mvn.w	r0, #4
 8004174:	e7b6      	b.n	80040e4 <pwm_stm32_pin_set+0x10c>
		return -ENOTSUP;
 8004176:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800417a:	e7b3      	b.n	80040e4 <pwm_stm32_pin_set+0x10c>
 800417c:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
 8004180:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8004184:	e7bb      	b.n	80040fe <pwm_stm32_pin_set+0x126>
 8004186:	bf00      	nop
 8004188:	0800e6fc 	.word	0x0800e6fc
 800418c:	0800e744 	.word	0x0800e744

08004190 <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8004190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pwm_stm32_data *data = dev->data;
	const struct pwm_stm32_config *cfg = dev->config;
 8004194:	6845      	ldr	r5, [r0, #4]
	struct pwm_stm32_data *data = dev->data;
 8004196:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
 800419a:	b086      	sub	sp, #24
 800419c:	4c2f      	ldr	r4, [pc, #188]	; (800425c <pwm_stm32_init+0xcc>)
 800419e:	4620      	mov	r0, r4
 80041a0:	f005 feca 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d055      	beq.n	8004254 <pwm_stm32_init+0xc4>
	return api->on(dev, sys);
 80041a8:	68a7      	ldr	r7, [r4, #8]
 80041aa:	f105 0608 	add.w	r6, r5, #8
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	4631      	mov	r1, r6
 80041b2:	4620      	mov	r0, r4
 80041b4:	4798      	blx	r3

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
	if (r < 0) {
 80041b6:	2800      	cmp	r0, #0
 80041b8:	db41      	blt.n	800423e <pwm_stm32_init+0xae>
 80041ba:	4620      	mov	r0, r4
 80041bc:	f005 febc 	bl	8009f38 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d047      	beq.n	8004254 <pwm_stm32_init+0xc4>
	}

	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80041c4:	68fb      	ldr	r3, [r7, #12]
		return -ENOSYS;
 80041c6:	f06f 0057 	mvn.w	r0, #87	; 0x57
	if (api->get_rate == NULL) {
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d037      	beq.n	800423e <pwm_stm32_init+0xae>
	}

	return api->get_rate(dev, sys, rate);
 80041ce:	4631      	mov	r1, r6
 80041d0:	4620      	mov	r0, r4
 80041d2:	aa01      	add	r2, sp, #4
 80041d4:	4798      	blx	r3
	if (r < 0) {
 80041d6:	2800      	cmp	r0, #0
 80041d8:	db31      	blt.n	800423e <pwm_stm32_init+0xae>
		*tim_clk = bus_clk;
 80041da:	9b01      	ldr	r3, [sp, #4]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 80041dc:	6928      	ldr	r0, [r5, #16]
 80041de:	f8c8 3000 	str.w	r3, [r8]
 80041e2:	aa01      	add	r2, sp, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	f003 ffe9 	bl	80081bc <pinctrl_lookup_state>
	if (ret < 0) {
 80041ea:	2800      	cmp	r0, #0
 80041ec:	db27      	blt.n	800423e <pwm_stm32_init+0xae>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 80041ee:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 80041f0:	2200      	movs	r2, #0
 80041f2:	7919      	ldrb	r1, [r3, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	f004 f803 	bl	8008200 <pinctrl_configure_pins>
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 80041fa:	2800      	cmp	r0, #0
 80041fc:	db1f      	blt.n	800423e <pwm_stm32_init+0xae>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 80041fe:	a801      	add	r0, sp, #4
 8004200:	f004 f892 	bl	8008328 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 8004204:	686a      	ldr	r2, [r5, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
	init.Autoreload = 0u;
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8004206:	6828      	ldr	r0, [r5, #0]
	init.Prescaler = cfg->prescaler;
 8004208:	f8ad 2004 	strh.w	r2, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 800420c:	2300      	movs	r3, #0
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800420e:	a901      	add	r1, sp, #4
	init.Autoreload = 0u;
 8004210:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004214:	9304      	str	r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8004216:	f004 f891 	bl	800833c <LL_TIM_Init>
 800421a:	b9c0      	cbnz	r0, 800424e <pwm_stm32_init+0xbe>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	4a10      	ldr	r2, [pc, #64]	; (8004260 <pwm_stm32_init+0xd0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <pwm_stm32_init+0xb4>
 8004224:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004228:	4293      	cmp	r3, r2
 800422a:	d00b      	beq.n	8004244 <pwm_stm32_init+0xb4>
 800422c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <pwm_stm32_init+0xb4>
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 800423a:	2000      	movs	r0, #0
 800423c:	601a      	str	r2, [r3, #0]
}
 800423e:	b006      	add	sp, #24
 8004240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800424c:	e7f2      	b.n	8004234 <pwm_stm32_init+0xa4>
		return -EIO;
 800424e:	f06f 0004 	mvn.w	r0, #4
 8004252:	e7f4      	b.n	800423e <pwm_stm32_init+0xae>
		return -ENODEV;
 8004254:	f06f 0012 	mvn.w	r0, #18
 8004258:	e7f1      	b.n	800423e <pwm_stm32_init+0xae>
 800425a:	bf00      	nop
 800425c:	0800dddc 	.word	0x0800dddc
 8004260:	40012c00 	.word	0x40012c00

08004264 <dma_callback>:
			 uint32_t channel, int status)
{
	/* arg directly holds the spi device */
	struct spi_stm32_data *data = arg;

	if (status != 0) {
 8004264:	b13b      	cbz	r3, 8004276 <dma_callback+0x12>
		LOG_ERR("DMA callback error with channel %d.", channel);
		data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 8004266:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	67cb      	str	r3, [r1, #124]	; 0x7c
	z_impl_k_sem_give(sem);
 800426e:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8004272:	f006 ba15 	b.w	800a6a0 <z_impl_k_sem_give>
	} else {
		/* identify the origin of this callback */
		if (channel == data->dma_tx.channel) {
 8004276:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 800427a:	4293      	cmp	r3, r2
 800427c:	d00d      	beq.n	800429a <dma_callback+0x36>
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
		} else if (channel == data->dma_rx.channel) {
 800427e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8004282:	4293      	cmp	r3, r2
			/* this part of the transfer ends */
			data->status_flags |= SPI_STM32_DMA_RX_DONE_FLAG;
 8004284:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 8004286:	bf0c      	ite	eq
 8004288:	f043 0302 	orreq.w	r3, r3, #2
		} else {
			LOG_ERR("DMA callback channel %d is not valid.",
								channel);
			data->status_flags |= SPI_STM32_DMA_ERROR_FLAG;
 800428c:	f043 0301 	orrne.w	r3, r3, #1
 8004290:	67cb      	str	r3, [r1, #124]	; 0x7c
 8004292:	f101 0064 	add.w	r0, r1, #100	; 0x64
 8004296:	f006 ba03 	b.w	800a6a0 <z_impl_k_sem_give>
			data->status_flags |= SPI_STM32_DMA_TX_DONE_FLAG;
 800429a:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	67cb      	str	r3, [r1, #124]	; 0x7c
 80042a2:	f101 0064 	add.w	r0, r1, #100	; 0x64
 80042a6:	f006 b9fb 	b.w	800a6a0 <z_impl_k_sem_give>
 80042aa:	bf00      	nop

080042ac <spi_stm32_configure.isra.0>:
		spi_stm32_complete(dev, err);
	}
}
#endif

static int spi_stm32_configure(const struct device *dev,
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct spi_config *config)
{
	const struct spi_stm32_config *cfg = dev->config;
	struct spi_stm32_data *data = dev->data;
	const uint32_t scaler[] = {
 80042b0:	4d51      	ldr	r5, [pc, #324]	; (80043f8 <spi_stm32_configure.isra.0+0x14c>)
static int spi_stm32_configure(const struct device *dev,
 80042b2:	460f      	mov	r7, r1
 80042b4:	4616      	mov	r6, r2
 80042b6:	4680      	mov	r8, r0
	const uint32_t scaler[] = {
 80042b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int spi_stm32_configure(const struct device *dev,
 80042ba:	b08a      	sub	sp, #40	; 0x28
	const uint32_t scaler[] = {
 80042bc:	ac02      	add	r4, sp, #8
 80042be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	};
	SPI_TypeDef *spi = cfg->spi;
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	42b3      	cmp	r3, r6
 80042cc:	f000 8089 	beq.w	80043e2 <spi_stm32_configure.isra.0+0x136>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 80042d0:	88b3      	ldrh	r3, [r6, #4]
 80042d2:	f3c3 1245 	ubfx	r2, r3, #5, #6
 80042d6:	2a08      	cmp	r2, #8
 80042d8:	d002      	beq.n	80042e0 <spi_stm32_configure.isra.0+0x34>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 80042da:	2a10      	cmp	r2, #16
 80042dc:	f040 8088 	bne.w	80043f0 <spi_stm32_configure.isra.0+0x144>
	SPI_TypeDef *spi = cfg->spi;
 80042e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 80042e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	bf14      	ite	ne
 80042ec:	f043 0310 	orrne.w	r3, r3, #16
 80042f0:	f023 0310 	biceq.w	r3, r3, #16
 80042f4:	6063      	str	r3, [r4, #4]
 80042f6:	4d41      	ldr	r5, [pc, #260]	; (80043fc <spi_stm32_configure.isra.0+0x150>)
 80042f8:	4628      	mov	r0, r5
 80042fa:	f005 fe1d 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 80042fe:	2800      	cmp	r0, #0
 8004300:	d073      	beq.n	80043ea <spi_stm32_configure.isra.0+0x13e>
	if (api->get_rate == NULL) {
 8004302:	68ab      	ldr	r3, [r5, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d06f      	beq.n	80043ea <spi_stm32_configure.isra.0+0x13e>
	return api->get_rate(dev, sys, rate);
 800430a:	4641      	mov	r1, r8
 800430c:	4628      	mov	r0, r5
 800430e:	aa01      	add	r2, sp, #4
 8004310:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004312:	2800      	cmp	r0, #0
 8004314:	db69      	blt.n	80043ea <spi_stm32_configure.isra.0+0x13e>
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
		uint32_t clk = clock >> br;
 8004316:	9801      	ldr	r0, [sp, #4]

		if (clk <= config->frequency) {
 8004318:	6831      	ldr	r1, [r6, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 800431a:	2301      	movs	r3, #1
		uint32_t clk = clock >> br;
 800431c:	fa20 f203 	lsr.w	r2, r0, r3
		if (clk <= config->frequency) {
 8004320:	428a      	cmp	r2, r1
 8004322:	d907      	bls.n	8004334 <spi_stm32_configure.isra.0+0x88>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004324:	3301      	adds	r3, #1
 8004326:	2b09      	cmp	r3, #9
 8004328:	d1f8      	bne.n	800431c <spi_stm32_configure.isra.0+0x70>
	if (br > ARRAY_SIZE(scaler)) {
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
			    config->frequency,
			    clock >> 1,
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
 800432a:	f06f 0015 	mvn.w	r0, #21
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
}
 800432e:	b00a      	add	sp, #40	; 0x28
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004334:	6822      	ldr	r2, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004336:	a90a      	add	r1, sp, #40	; 0x28
 8004338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800433c:	6022      	str	r2, [r4, #0]
 800433e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004348:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800434c:	431a      	orrs	r2, r3
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 800434e:	88b3      	ldrh	r3, [r6, #4]
 8004350:	6022      	str	r2, [r4, #0]
 8004352:	079a      	lsls	r2, r3, #30
 8004354:	d440      	bmi.n	80043d8 <spi_stm32_configure.isra.0+0x12c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	f022 0202 	bic.w	r2, r2, #2
 800435c:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800435e:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8004360:	075d      	lsls	r5, r3, #29
 8004362:	bf4c      	ite	mi
 8004364:	f042 0201 	orrmi.w	r2, r2, #1
 8004368:	f022 0201 	bicpl.w	r2, r2, #1
 800436c:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8004374:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004376:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8004378:	06d8      	lsls	r0, r3, #27
 800437a:	bf4c      	ite	mi
 800437c:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8004380:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8004384:	6022      	str	r2, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438c:	6022      	str	r2, [r4, #0]
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	f022 0204 	bic.w	r2, r2, #4
 800439c:	6062      	str	r2, [r4, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800439e:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 80043a0:	07d9      	lsls	r1, r3, #31
 80043a2:	bf4c      	ite	mi
 80043a4:	f422 7282 	bicmi.w	r2, r2, #260	; 0x104
 80043a8:	f442 7282 	orrpl.w	r2, r2, #260	; 0x104
 80043ac:	6022      	str	r2, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80043ae:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80043b2:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	bf06      	itte	eq
 80043b8:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 80043bc:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 80043c0:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 80043c4:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80043c6:	6863      	ldr	r3, [r4, #4]
	return 0;
 80043c8:	2000      	movs	r0, #0
 80043ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ce:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 80043d0:	603e      	str	r6, [r7, #0]
}
 80043d2:	b00a      	add	sp, #40	; 0x28
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	f042 0202 	orr.w	r2, r2, #2
 80043de:	6022      	str	r2, [r4, #0]
}
 80043e0:	e7bd      	b.n	800435e <spi_stm32_configure.isra.0+0xb2>
		return 0;
 80043e2:	2000      	movs	r0, #0
}
 80043e4:	b00a      	add	sp, #40	; 0x28
 80043e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 80043ea:	f06f 0004 	mvn.w	r0, #4
 80043ee:	e79e      	b.n	800432e <spi_stm32_configure.isra.0+0x82>
		return -ENOTSUP;
 80043f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80043f4:	e79b      	b.n	800432e <spi_stm32_configure.isra.0+0x82>
 80043f6:	bf00      	nop
 80043f8:	0800e300 	.word	0x0800e300
 80043fc:	0800dddc 	.word	0x0800dddc

08004400 <spi_stm32_release>:

static int spi_stm32_release(const struct device *dev,
			     const struct spi_config *config)
{
 8004400:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 8004402:	6904      	ldr	r4, [r0, #16]
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	b1a3      	cbz	r3, 8004432 <spi_stm32_release+0x32>
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	b193      	cbz	r3, 8004432 <spi_stm32_release+0x32>
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	b182      	cbz	r2, 8004432 <spi_stm32_release+0x32>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8004410:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004412:	f007 f959 	bl	800b6c8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800441a:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	2101      	movs	r1, #1
 8004420:	4099      	lsls	r1, r3
 8004422:	6903      	ldr	r3, [r0, #16]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004428:	6883      	ldr	r3, [r0, #8]
 800442a:	bf0c      	ite	eq
 800442c:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 800442e:	68db      	ldrne	r3, [r3, #12]
 8004430:	4798      	blx	r3
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8004432:	69a3      	ldr	r3, [r4, #24]
 8004434:	b10b      	cbz	r3, 800443a <spi_stm32_release+0x3a>

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8004436:	2000      	movs	r0, #0
 8004438:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
 800443a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 800443c:	f104 0010 	add.w	r0, r4, #16
 8004440:	f006 f92e 	bl	800a6a0 <z_impl_k_sem_give>
 8004444:	2000      	movs	r0, #0
 8004446:	bd10      	pop	{r4, pc}

08004448 <spi_stm32_complete.constprop.0.isra.0>:
static void spi_stm32_complete(const struct device *dev, int status)
 8004448:	b530      	push	{r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800444a:	680b      	ldr	r3, [r1, #0]
	SPI_TypeDef *spi = cfg->spi;
 800444c:	6884      	ldr	r4, [r0, #8]
static void spi_stm32_complete(const struct device *dev, int status)
 800444e:	b083      	sub	sp, #12
 8004450:	b1e3      	cbz	r3, 800448c <spi_stm32_complete.constprop.0.isra.0+0x44>
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	b1d2      	cbz	r2, 800448c <spi_stm32_complete.constprop.0.isra.0+0x44>
 8004456:	6810      	ldr	r0, [r2, #0]
 8004458:	b1c0      	cbz	r0, 800448c <spi_stm32_complete.constprop.0.isra.0+0x44>
			if (!force_off &&
 800445a:	889b      	ldrh	r3, [r3, #4]
 800445c:	04d8      	lsls	r0, r3, #19
 800445e:	d415      	bmi.n	800448c <spi_stm32_complete.constprop.0.isra.0+0x44>
			k_busy_wait(ctx->config->cs->delay);
 8004460:	6890      	ldr	r0, [r2, #8]
	compiler_barrier();
 8004462:	460d      	mov	r5, r1
	z_impl_k_busy_wait(usec_to_wait);
 8004464:	f007 f930 	bl	800b6c8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800446c:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800446e:	791b      	ldrb	r3, [r3, #4]
 8004470:	2101      	movs	r1, #1
 8004472:	4099      	lsls	r1, r3
 8004474:	6903      	ldr	r3, [r0, #16]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 800447a:	6883      	ldr	r3, [r0, #8]
 800447c:	bf0c      	ite	eq
 800447e:	691b      	ldreq	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 8004480:	68db      	ldrne	r3, [r3, #12]
 8004482:	4798      	blx	r3
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004484:	68a3      	ldr	r3, [r4, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8004486:	07d9      	lsls	r1, r3, #31
 8004488:	d503      	bpl.n	8004492 <spi_stm32_complete.constprop.0.isra.0+0x4a>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 800448a:	68e3      	ldr	r3, [r4, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800448c:	68a3      	ldr	r3, [r4, #8]
 800448e:	07d9      	lsls	r1, r3, #31
 8004490:	d4fb      	bmi.n	800448a <spi_stm32_complete.constprop.0.isra.0+0x42>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 8004498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449c:	d00f      	beq.n	80044be <spi_stm32_complete.constprop.0.isra.0+0x76>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800449e:	68a3      	ldr	r3, [r4, #8]
 80044a0:	069b      	lsls	r3, r3, #26
 80044a2:	d506      	bpl.n	80044b2 <spi_stm32_complete.constprop.0.isra.0+0x6a>
  tmpreg_sr = SPIx->SR;
 80044a4:	68a3      	ldr	r3, [r4, #8]
 80044a6:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 80044a8:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b0:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	6023      	str	r3, [r4, #0]
}
 80044ba:	b003      	add	sp, #12
 80044bc:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	061a      	lsls	r2, r3, #24
 80044c2:	d5ec      	bpl.n	800449e <spi_stm32_complete.constprop.0.isra.0+0x56>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	061a      	lsls	r2, r3, #24
 80044c8:	d4f9      	bmi.n	80044be <spi_stm32_complete.constprop.0.isra.0+0x76>
 80044ca:	e7e8      	b.n	800449e <spi_stm32_complete.constprop.0.isra.0+0x56>

080044cc <spi_stm32_transceive>:

static int spi_stm32_transceive(const struct device *dev,
				const struct spi_config *config,
				const struct spi_buf_set *tx_bufs,
				const struct spi_buf_set *rx_bufs)
{
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef CONFIG_SPI_STM32_DMA
	struct spi_stm32_data *data = dev->data;
 80044d0:	6906      	ldr	r6, [r0, #16]
{
 80044d2:	461f      	mov	r7, r3
	SPI_TypeDef *spi = cfg->spi;
 80044d4:	6843      	ldr	r3, [r0, #4]
 80044d6:	689d      	ldr	r5, [r3, #8]

	if ((data->dma_tx.dma_dev != NULL)
 80044d8:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
{
 80044dc:	b085      	sub	sp, #20
 80044de:	4680      	mov	r8, r0
 80044e0:	460c      	mov	r4, r1
 80044e2:	4691      	mov	r9, r2
	if ((data->dma_tx.dma_dev != NULL)
 80044e4:	b123      	cbz	r3, 80044f0 <spi_stm32_transceive+0x24>
	 && (data->dma_rx.dma_dev != NULL)) {
 80044e6:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 80da 	bne.w	80046a4 <spi_stm32_transceive+0x1d8>
	if (!tx_bufs && !rx_bufs) {
 80044f0:	f1b9 0f00 	cmp.w	r9, #0
 80044f4:	f000 824d 	beq.w	8004992 <spi_stm32_transceive+0x4c6>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80044f8:	88a3      	ldrh	r3, [r4, #4]
 80044fa:	0499      	lsls	r1, r3, #18
 80044fc:	d504      	bpl.n	8004508 <spi_stm32_transceive+0x3c>
 80044fe:	69b3      	ldr	r3, [r6, #24]
 8004500:	b913      	cbnz	r3, 8004508 <spi_stm32_transceive+0x3c>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8004502:	6873      	ldr	r3, [r6, #4]
 8004504:	429c      	cmp	r4, r3
 8004506:	d008      	beq.n	800451a <spi_stm32_transceive+0x4e>
	return z_impl_k_sem_take(sem, timeout);
 8004508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800450c:	f106 0010 	add.w	r0, r6, #16
 8004510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004514:	f006 f8ee 	bl	800a6f4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8004518:	6074      	str	r4, [r6, #4]
	ret = spi_stm32_configure(dev, config);
 800451a:	4622      	mov	r2, r4
 800451c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004524:	f7ff fec2 	bl	80042ac <spi_stm32_configure.isra.0>
	if (ret) {
 8004528:	4604      	mov	r4, r0
 800452a:	b148      	cbz	r0, 8004540 <spi_stm32_transceive+0x74>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800452c:	6833      	ldr	r3, [r6, #0]
 800452e:	889b      	ldrh	r3, [r3, #4]
 8004530:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004534:	f000 80ad 	beq.w	8004692 <spi_stm32_transceive+0x1c6>
		return transceive_dma(dev, config, tx_bufs, rx_bufs,
				      false, NULL);
	}
#endif /* CONFIG_SPI_STM32_DMA */
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
}
 8004538:	4620      	mov	r0, r4
 800453a:	b005      	add	sp, #20
 800453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8004540:	f1b9 0f00 	cmp.w	r9, #0
 8004544:	f000 8398 	beq.w	8004c78 <spi_stm32_transceive+0x7ac>
 8004548:	f8d9 2000 	ldr.w	r2, [r9]
 800454c:	6472      	str	r2, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 800454e:	2a00      	cmp	r2, #0
 8004550:	f000 8422 	beq.w	8004d98 <spi_stm32_transceive+0x8cc>
 8004554:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004558:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 800455a:	b933      	cbnz	r3, 800456a <spi_stm32_transceive+0x9e>
 800455c:	e38e      	b.n	8004c7c <spi_stm32_transceive+0x7b0>
		++(*current);
 800455e:	3208      	adds	r2, #8
		--(*count);
 8004560:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8389 	beq.w	8004c7c <spi_stm32_transceive+0x7b0>
		if (((*current)->len / dfs) != 0) {
 800456a:	6851      	ldr	r1, [r2, #4]
		--(*count);
 800456c:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 800456e:	2900      	cmp	r1, #0
 8004570:	d0f5      	beq.n	800455e <spi_stm32_transceive+0x92>
			return (*current)->buf;
 8004572:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8004574:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8004576:	6573      	str	r3, [r6, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004578:	2f00      	cmp	r7, #0
 800457a:	f000 8378 	beq.w	8004c6e <spi_stm32_transceive+0x7a2>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	64f3      	str	r3, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8406 	beq.w	8004d94 <spi_stm32_transceive+0x8c8>
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	6531      	str	r1, [r6, #80]	; 0x50
	while (*count) {
 800458c:	b931      	cbnz	r1, 800459c <spi_stm32_transceive+0xd0>
 800458e:	e370      	b.n	8004c72 <spi_stm32_transceive+0x7a6>
		++(*current);
 8004590:	3308      	adds	r3, #8
		--(*count);
 8004592:	e9c6 3113 	strd	r3, r1, [r6, #76]	; 0x4c
	while (*count) {
 8004596:	2900      	cmp	r1, #0
 8004598:	f000 836b 	beq.w	8004c72 <spi_stm32_transceive+0x7a6>
		if (((*current)->len / dfs) != 0) {
 800459c:	685a      	ldr	r2, [r3, #4]
		--(*count);
 800459e:	3901      	subs	r1, #1
		if (((*current)->len / dfs) != 0) {
 80045a0:	2a00      	cmp	r2, #0
 80045a2:	d0f5      	beq.n	8004590 <spi_stm32_transceive+0xc4>
			return (*current)->buf;
 80045a4:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 80045a6:	6632      	str	r2, [r6, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 80045a8:	65f3      	str	r3, [r6, #92]	; 0x5c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	6433      	str	r3, [r6, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80045ae:	68ab      	ldr	r3, [r5, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 80045b0:	07da      	lsls	r2, r3, #31
 80045b2:	d503      	bpl.n	80045bc <spi_stm32_transceive+0xf0>
  return (uint8_t)(READ_REG(SPIx->DR));
 80045b4:	68eb      	ldr	r3, [r5, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80045b6:	68ab      	ldr	r3, [r5, #8]
 80045b8:	07db      	lsls	r3, r3, #31
 80045ba:	d4fb      	bmi.n	80045b4 <spi_stm32_transceive+0xe8>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80045bc:	682b      	ldr	r3, [r5, #0]
	struct spi_stm32_data *data = dev->data;
 80045be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80045c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c6:	602b      	str	r3, [r5, #0]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b19b      	cbz	r3, 80045f4 <spi_stm32_transceive+0x128>
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	b18b      	cbz	r3, 80045f4 <spi_stm32_transceive+0x128>
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	b178      	cbz	r0, 80045f4 <spi_stm32_transceive+0x128>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80045d4:	791a      	ldrb	r2, [r3, #4]
 80045d6:	6903      	ldr	r3, [r0, #16]
 80045d8:	2101      	movs	r1, #1
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4091      	lsls	r1, r2
 80045de:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 80045e0:	6883      	ldr	r3, [r0, #8]
 80045e2:	bf14      	ite	ne
 80045e4:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 80045e6:	68db      	ldreq	r3, [r3, #12]
 80045e8:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 80045f0:	f007 f86a 	bl	800b6c8 <z_impl_k_busy_wait>
	*buf_len = 0;
 80045f4:	2100      	movs	r1, #0
	uint16_t operation = data->ctx.config->operation;
 80045f6:	6830      	ldr	r0, [r6, #0]
 80045f8:	8883      	ldrh	r3, [r0, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 80045fa:	07df      	lsls	r7, r3, #31
 80045fc:	f140 81ce 	bpl.w	800499c <spi_stm32_transceive+0x4d0>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004600:	68aa      	ldr	r2, [r5, #8]
 8004602:	0790      	lsls	r0, r2, #30
 8004604:	f140 8244 	bpl.w	8004a90 <spi_stm32_transceive+0x5c4>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8004608:	6db2      	ldr	r2, [r6, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800460a:	2a00      	cmp	r2, #0
 800460c:	f000 8240 	beq.w	8004a90 <spi_stm32_transceive+0x5c4>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004610:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004614:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004616:	6d70      	ldr	r0, [r6, #84]	; 0x54
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004618:	f000 8333 	beq.w	8004c82 <spi_stm32_transceive+0x7b6>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800461c:	8803      	ldrh	r3, [r0, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800461e:	81ab      	strh	r3, [r5, #12]
	ctx->tx_len -= len;
 8004620:	3a01      	subs	r2, #1
 8004622:	65b2      	str	r2, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004624:	2a00      	cmp	r2, #0
 8004626:	f000 8362 	beq.w	8004cee <spi_stm32_transceive+0x822>
		ctx->tx_buf += dfs * len;
 800462a:	3002      	adds	r0, #2
 800462c:	6570      	str	r0, [r6, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800462e:	68ab      	ldr	r3, [r5, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 8004630:	07da      	lsls	r2, r3, #31
 8004632:	d517      	bpl.n	8004664 <spi_stm32_transceive+0x198>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 8004634:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004636:	b1ab      	cbz	r3, 8004664 <spi_stm32_transceive+0x198>
 8004638:	6e32      	ldr	r2, [r6, #96]	; 0x60
 800463a:	b19a      	cbz	r2, 8004664 <spi_stm32_transceive+0x198>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800463c:	6832      	ldr	r2, [r6, #0]
 800463e:	8892      	ldrh	r2, [r2, #4]
 8004640:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8004644:	2a08      	cmp	r2, #8
 8004646:	f000 832c 	beq.w	8004ca2 <spi_stm32_transceive+0x7d6>
  return (uint16_t)(READ_REG(SPIx->DR));
 800464a:	68ea      	ldr	r2, [r5, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800464c:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800464e:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004650:	b143      	cbz	r3, 8004664 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8004652:	3b01      	subs	r3, #1
 8004654:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 837c 	beq.w	8004d54 <spi_stm32_transceive+0x888>
	} else if (ctx->rx_buf) {
 800465c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800465e:	b10b      	cbz	r3, 8004664 <spi_stm32_transceive+0x198>
		ctx->rx_buf += dfs * len;
 8004660:	3302      	adds	r3, #2
 8004662:	65f3      	str	r3, [r6, #92]	; 0x5c
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8004664:	68ab      	ldr	r3, [r5, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8004666:	f413 7fb8 	tst.w	r3, #368	; 0x170
 800466a:	f040 8387 	bne.w	8004d7c <spi_stm32_transceive+0x8b0>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800466e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1c0      	bne.n	80045f6 <spi_stm32_transceive+0x12a>
 8004674:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1bd      	bne.n	80045f6 <spi_stm32_transceive+0x12a>
	spi_stm32_complete(dev, ret);
 800467a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800467e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004682:	f7ff fee1 	bl	8004448 <spi_stm32_complete.constprop.0.isra.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8004686:	6833      	ldr	r3, [r6, #0]
 8004688:	889b      	ldrh	r3, [r3, #4]
 800468a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800468e:	f47f af53 	bne.w	8004538 <spi_stm32_transceive+0x6c>
		ctx->owner = NULL;
 8004692:	6073      	str	r3, [r6, #4]
	z_impl_k_sem_give(sem);
 8004694:	f106 0010 	add.w	r0, r6, #16
 8004698:	f006 f802 	bl	800a6a0 <z_impl_k_sem_give>
}
 800469c:	4620      	mov	r0, r4
 800469e:	b005      	add	sp, #20
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!tx_bufs && !rx_bufs) {
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	f000 831d 	beq.w	8004ce4 <spi_stm32_transceive+0x818>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 80046aa:	88a3      	ldrh	r3, [r4, #4]
 80046ac:	049a      	lsls	r2, r3, #18
 80046ae:	d504      	bpl.n	80046ba <spi_stm32_transceive+0x1ee>
 80046b0:	69b3      	ldr	r3, [r6, #24]
 80046b2:	b913      	cbnz	r3, 80046ba <spi_stm32_transceive+0x1ee>
		(k_sem_count_get(&ctx->lock) == 0) &&
 80046b4:	6873      	ldr	r3, [r6, #4]
 80046b6:	429c      	cmp	r4, r3
 80046b8:	d008      	beq.n	80046cc <spi_stm32_transceive+0x200>
	return z_impl_k_sem_take(sem, timeout);
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046be:	f106 0010 	add.w	r0, r6, #16
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c6:	f006 f815 	bl	800a6f4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 80046ca:	6074      	str	r4, [r6, #4]
	z_impl_k_sem_reset(sem);
 80046cc:	f106 0064 	add.w	r0, r6, #100	; 0x64
 80046d0:	f006 f83c 	bl	800a74c <z_impl_k_sem_reset>
	ret = spi_stm32_configure(dev, config);
 80046d4:	4622      	mov	r2, r4
 80046d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80046da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80046de:	f7ff fde5 	bl	80042ac <spi_stm32_configure.isra.0>
	if (ret) {
 80046e2:	4604      	mov	r4, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f47f af21 	bne.w	800452c <spi_stm32_transceive+0x60>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 80046ea:	f1b9 0f00 	cmp.w	r9, #0
 80046ee:	f000 8318 	beq.w	8004d22 <spi_stm32_transceive+0x856>
 80046f2:	f8d9 3000 	ldr.w	r3, [r9]
 80046f6:	6473      	str	r3, [r6, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8354 	beq.w	8004da6 <spi_stm32_transceive+0x8da>
 80046fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004702:	64b2      	str	r2, [r6, #72]	; 0x48
	while (*count) {
 8004704:	b932      	cbnz	r2, 8004714 <spi_stm32_transceive+0x248>
 8004706:	e30e      	b.n	8004d26 <spi_stm32_transceive+0x85a>
		++(*current);
 8004708:	3308      	adds	r3, #8
		--(*count);
 800470a:	e9c6 3211 	strd	r3, r2, [r6, #68]	; 0x44
	while (*count) {
 800470e:	2a00      	cmp	r2, #0
 8004710:	f000 8309 	beq.w	8004d26 <spi_stm32_transceive+0x85a>
		if (((*current)->len / dfs) != 0) {
 8004714:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8004716:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 8004718:	2900      	cmp	r1, #0
 800471a:	d0f5      	beq.n	8004708 <spi_stm32_transceive+0x23c>
			return (*current)->buf;
 800471c:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 800471e:	65b1      	str	r1, [r6, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8004720:	6573      	str	r3, [r6, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8004722:	2f00      	cmp	r7, #0
 8004724:	f000 82f8 	beq.w	8004d18 <spi_stm32_transceive+0x84c>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	64f3      	str	r3, [r6, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8338 	beq.w	8004da2 <spi_stm32_transceive+0x8d6>
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6532      	str	r2, [r6, #80]	; 0x50
	while (*count) {
 8004736:	b932      	cbnz	r2, 8004746 <spi_stm32_transceive+0x27a>
 8004738:	e2f0      	b.n	8004d1c <spi_stm32_transceive+0x850>
		++(*current);
 800473a:	3308      	adds	r3, #8
		--(*count);
 800473c:	e9c6 3213 	strd	r3, r2, [r6, #76]	; 0x4c
	while (*count) {
 8004740:	2a00      	cmp	r2, #0
 8004742:	f000 82eb 	beq.w	8004d1c <spi_stm32_transceive+0x850>
		if (((*current)->len / dfs) != 0) {
 8004746:	6859      	ldr	r1, [r3, #4]
		--(*count);
 8004748:	3a01      	subs	r2, #1
		if (((*current)->len / dfs) != 0) {
 800474a:	2900      	cmp	r1, #0
 800474c:	d0f5      	beq.n	800473a <spi_stm32_transceive+0x26e>
			return (*current)->buf;
 800474e:	681b      	ldr	r3, [r3, #0]
			*buf_len = (*current)->len / dfs;
 8004750:	6631      	str	r1, [r6, #96]	; 0x60
	struct spi_stm32_data *data = dev->data;
 8004752:	f8d8 a010 	ldr.w	sl, [r8, #16]
	ctx->rx_buf = (uint8_t *)
 8004756:	65f3      	str	r3, [r6, #92]	; 0x5c
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004758:	f8da 3000 	ldr.w	r3, [sl]
	ctx->sync_status = 0;
 800475c:	2200      	movs	r2, #0
 800475e:	6432      	str	r2, [r6, #64]	; 0x40
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004760:	b1b3      	cbz	r3, 8004790 <spi_stm32_transceive+0x2c4>
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	b1a3      	cbz	r3, 8004790 <spi_stm32_transceive+0x2c4>
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	b190      	cbz	r0, 8004790 <spi_stm32_transceive+0x2c4>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800476a:	791a      	ldrb	r2, [r3, #4]
 800476c:	6903      	ldr	r3, [r0, #16]
 800476e:	2101      	movs	r1, #1
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4091      	lsls	r1, r2
 8004774:	4219      	tst	r1, r3
	return api->port_clear_bits_raw(port, pins);
 8004776:	6883      	ldr	r3, [r0, #8]
 8004778:	bf14      	ite	ne
 800477a:	691b      	ldrne	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 800477c:	68db      	ldreq	r3, [r3, #12]
 800477e:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 8004780:	f8da 3000 	ldr.w	r3, [sl]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004788:	f006 ff9e 	bl	800b6c8 <z_impl_k_busy_wait>
	struct spi_stm32_data *data = dev->data;
 800478c:	f8d8 a010 	ldr.w	sl, [r8, #16]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004790:	682b      	ldr	r3, [r5, #0]
		} else if (data->ctx.tx_len == 0) {
 8004792:	6db4      	ldr	r4, [r6, #88]	; 0x58
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8004794:	f8d6 9060 	ldr.w	r9, [r6, #96]	; 0x60
 8004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479c:	4622      	mov	r2, r4
 800479e:	464c      	mov	r4, r9
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	2c00      	cmp	r4, #0
 80047a4:	f000 816e 	beq.w	8004a84 <spi_stm32_transceive+0x5b8>
		} else if (data->ctx.tx_len == 0) {
 80047a8:	b112      	cbz	r2, 80047b0 <spi_stm32_transceive+0x2e4>
			dma_len = MIN(data->ctx.tx_len, data->ctx.rx_len);
 80047aa:	4294      	cmp	r4, r2
 80047ac:	bf28      	it	cs
 80047ae:	4614      	movcs	r4, r2
		data->status_flags = 0;
 80047b0:	2100      	movs	r1, #0
	ret = spi_stm32_dma_rx_load(dev, data->ctx.rx_buf, dma_segment_len);
 80047b2:	f8da b05c 	ldr.w	fp, [sl, #92]	; 0x5c
 80047b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
		data->status_flags = 0;
 80047ba:	67f1      	str	r1, [r6, #124]	; 0x7c
	blk_cfg = &stream->dma_blk_cfg;
 80047bc:	f10a 09a4 	add.w	r9, sl, #164	; 0xa4

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80047c0:	2220      	movs	r2, #32
 80047c2:	4648      	mov	r0, r9
	dma_segment_len = len / data->dma_rx.dma_cfg.dest_data_size;
 80047c4:	f8ba 708e 	ldrh.w	r7, [sl, #142]	; 0x8e
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	fbb4 f7f7 	udiv	r7, r4, r7
 80047ce:	f008 ff75 	bl	800d6bc <memset>
	if (buf == NULL) {
 80047d2:	9b01      	ldr	r3, [sp, #4]
	blk_cfg->block_size = len;
 80047d4:	f8ca 70b8 	str.w	r7, [sl, #184]	; 0xb8
	if (buf == NULL) {
 80047d8:	2100      	movs	r1, #0
 80047da:	f1bb 0f00 	cmp.w	fp, #0
 80047de:	f000 81ab 	beq.w	8004b38 <spi_stm32_transceive+0x66c>
		if (data->dma_rx.dst_addr_increment) {
 80047e2:	f89a 20c6 	ldrb.w	r2, [sl, #198]	; 0xc6
		blk_cfg->dest_address = (uint32_t)buf;
 80047e6:	f8ca b0a8 	str.w	fp, [sl, #168]	; 0xa8
		if (data->dma_rx.dst_addr_increment) {
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	f000 8163 	beq.w	8004ab6 <spi_stm32_transceive+0x5ea>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80047f0:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 80047f4:	f361 1205 	bfi	r2, r1, #4, #2
 80047f8:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
  return (uint32_t) &(SPIx->DR);
 80047fc:	689b      	ldr	r3, [r3, #8]
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 80047fe:	f8da 20c8 	ldr.w	r2, [sl, #200]	; 0xc8
	stream->dma_cfg.head_block = blk_cfg;
 8004802:	f8ca 9098 	str.w	r9, [sl, #152]	; 0x98
 8004806:	330c      	adds	r3, #12
	blk_cfg->source_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_RX);
 8004808:	f8ca 30a4 	str.w	r3, [sl, #164]	; 0xa4
	if (data->dma_rx.src_addr_increment) {
 800480c:	f89a 30c5 	ldrb.w	r3, [sl, #197]	; 0xc5
	stream->dma_cfg.user_data = data;
 8004810:	f8ca a09c 	str.w	sl, [sl, #156]	; 0x9c
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf14      	ite	ne
 8004818:	2300      	movne	r3, #0
 800481a:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_rx.fifo_threshold;
 800481c:	f002 020f 	and.w	r2, r2, #15
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004826:	f8ba 20c0 	ldrh.w	r2, [sl, #192]	; 0xc0
			     struct dma_config *config)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->config(dev, channel, config);
 800482a:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
 800482e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004832:	f022 020c 	bic.w	r2, r2, #12
 8004836:	4313      	orrs	r3, r2
 8004838:	f8aa 30c0 	strh.w	r3, [sl, #192]	; 0xc0
 800483c:	6883      	ldr	r3, [r0, #8]
 800483e:	f10a 0288 	add.w	r2, sl, #136	; 0x88
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4798      	blx	r3
	if (ret != 0) {
 8004846:	4601      	mov	r1, r0
 8004848:	2800      	cmp	r0, #0
 800484a:	f040 8126 	bne.w	8004a9a <spi_stm32_transceive+0x5ce>
	return dma_start(data->dma_rx.dma_dev, data->dma_rx.channel);
 800484e:	e9da 0120 	ldrd	r0, r1, [sl, #128]	; 0x80
static inline int z_impl_dma_start(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->start(dev, channel);
 8004852:	6883      	ldr	r3, [r0, #8]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4798      	blx	r3
	if (ret != 0) {
 8004858:	4601      	mov	r1, r0
 800485a:	2800      	cmp	r0, #0
 800485c:	f040 811d 	bne.w	8004a9a <spi_stm32_transceive+0x5ce>
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 8004860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004864:	9001      	str	r0, [sp, #4]
	blk_cfg = &stream->dma_blk_cfg;
 8004866:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800486a:	4618      	mov	r0, r3
 800486c:	2220      	movs	r2, #32
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 800486e:	f8ba 90d8 	ldrh.w	r9, [sl, #216]	; 0xd8
	ret = spi_stm32_dma_tx_load(dev, data->ctx.tx_buf, dma_segment_len);
 8004872:	f8da b054 	ldr.w	fp, [sl, #84]	; 0x54
 8004876:	f8d8 a004 	ldr.w	sl, [r8, #4]
	dma_segment_len = len / data->dma_tx.dma_cfg.source_data_size;
 800487a:	fbb4 f9f9 	udiv	r9, r4, r9
 800487e:	f008 ff1d 	bl	800d6bc <memset>
	if (buf == NULL) {
 8004882:	9901      	ldr	r1, [sp, #4]
	blk_cfg->block_size = len;
 8004884:	f8c7 9104 	str.w	r9, [r7, #260]	; 0x104
 8004888:	4603      	mov	r3, r0
	if (buf == NULL) {
 800488a:	f1bb 0f00 	cmp.w	fp, #0
 800488e:	f000 816f 	beq.w	8004b70 <spi_stm32_transceive+0x6a4>
		if (data->dma_tx.src_addr_increment) {
 8004892:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
		blk_cfg->source_address = (uint32_t)buf;
 8004896:	f8c7 b0f0 	str.w	fp, [r7, #240]	; 0xf0
		if (data->dma_tx.src_addr_increment) {
 800489a:	2a00      	cmp	r2, #0
 800489c:	f000 8159 	beq.w	8004b52 <spi_stm32_transceive+0x686>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_INCREMENT;
 80048a0:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 80048a4:	f361 0283 	bfi	r2, r1, #2, #2
 80048a8:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 80048ac:	f8da 2008 	ldr.w	r2, [sl, #8]
	stream->dma_cfg.head_block = blk_cfg;
 80048b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (data->dma_tx.dst_addr_increment) {
 80048b4:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
	ret = dma_config(data->dma_tx.dma_dev, data->dma_tx.channel,
 80048b8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
	stream->dma_cfg.user_data = data;
 80048bc:	f8c7 70e8 	str.w	r7, [r7, #232]	; 0xe8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80048c0:	2b00      	cmp	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 80048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c6:	f102 020c 	add.w	r2, r2, #12
 80048ca:	f003 010f 	and.w	r1, r3, #15
	blk_cfg->dest_address = ll_func_dma_get_reg_addr(cfg->spi, SPI_STM32_DMA_TX);
 80048ce:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80048d2:	bf18      	it	ne
 80048d4:	2300      	movne	r3, #0
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 80048d6:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 80048da:	bf08      	it	eq
 80048dc:	2302      	moveq	r3, #2
	blk_cfg->fifo_mode_control = data->dma_tx.fifo_threshold;
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	f422 6273 	bic.w	r2, r2, #3888	; 0xf30
 80048e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
	return api->config(dev, channel, config);
 80048ee:	6883      	ldr	r3, [r0, #8]
 80048f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80048fa:	4798      	blx	r3
	if (ret != 0) {
 80048fc:	4601      	mov	r1, r0
 80048fe:	2800      	cmp	r0, #0
 8004900:	f040 80cb 	bne.w	8004a9a <spi_stm32_transceive+0x5ce>
	return dma_start(data->dma_tx.dma_dev, data->dma_tx.channel);
 8004904:	e9d7 0133 	ldrd	r0, r1, [r7, #204]	; 0xcc
	return api->start(dev, channel);
 8004908:	6883      	ldr	r3, [r0, #8]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4798      	blx	r3
		if (ret != 0) {
 800490e:	4601      	mov	r1, r0
 8004910:	2800      	cmp	r0, #0
 8004912:	f040 80c2 	bne.w	8004a9a <spi_stm32_transceive+0x5ce>
  SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8004916:	686b      	ldr	r3, [r5, #4]
 8004918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	606b      	str	r3, [r5, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8004922:	686b      	ldr	r3, [r5, #4]
 8004924:	f043 0302 	orr.w	r3, r3, #2
 8004928:	606b      	str	r3, [r5, #4]
		res = k_sem_take(&data->status_sem, K_MSEC(1000));
 800492a:	f107 0964 	add.w	r9, r7, #100	; 0x64
 800492e:	e007      	b.n	8004940 <spi_stm32_transceive+0x474>
		if (data->status_flags & SPI_STM32_DMA_ERROR_FLAG) {
 8004930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	f100 80f2 	bmi.w	8004b1c <spi_stm32_transceive+0x650>
		if (data->status_flags & SPI_STM32_DMA_DONE_FLAG) {
 8004938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800493a:	f013 0f06 	tst.w	r3, #6
 800493e:	d16e      	bne.n	8004a1e <spi_stm32_transceive+0x552>
	return z_impl_k_sem_take(sem, timeout);
 8004940:	f242 7210 	movw	r2, #10000	; 0x2710
 8004944:	2300      	movs	r3, #0
 8004946:	4648      	mov	r0, r9
 8004948:	f005 fed4 	bl	800a6f4 <z_impl_k_sem_take>
		if (res != 0) {
 800494c:	2800      	cmp	r0, #0
 800494e:	d0ef      	beq.n	8004930 <spi_stm32_transceive+0x464>
 8004950:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8004954:	4604      	mov	r4, r0
	spi_stm32_complete(dev, ret);
 8004956:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800495a:	4651      	mov	r1, sl
 800495c:	f7ff fd74 	bl	8004448 <spi_stm32_complete.constprop.0.isra.0>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004960:	682b      	ldr	r3, [r5, #0]
	dma_stop(data->dma_rx.dma_dev, data->dma_rx.channel);
 8004962:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
 8004966:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 800496a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496e:	602b      	str	r3, [r5, #0]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8004970:	686b      	ldr	r3, [r5, #4]
 8004972:	f023 0302 	bic.w	r3, r3, #2
 8004976:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8004978:	686b      	ldr	r3, [r5, #4]
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	606b      	str	r3, [r5, #4]
static inline int z_impl_dma_stop(const struct device *dev, uint32_t channel)
{
	const struct dma_driver_api *api =
		(const struct dma_driver_api *)dev->api;

	return api->stop(dev, channel);
 8004980:	6883      	ldr	r3, [r0, #8]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4798      	blx	r3
	dma_stop(data->dma_tx.dma_dev, data->dma_tx.channel);
 8004986:	e9d6 0133 	ldrd	r0, r1, [r6, #204]	; 0xcc
 800498a:	6883      	ldr	r3, [r0, #8]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&channel, K_SYSCALL_DMA_STOP);
	}
#endif
	compiler_barrier();
	return z_impl_dma_stop(dev, channel);
 8004990:	e5cc      	b.n	800452c <spi_stm32_transceive+0x60>
	if (!tx_bufs && !rx_bufs) {
 8004992:	2f00      	cmp	r7, #0
 8004994:	f47f adb0 	bne.w	80044f8 <spi_stm32_transceive+0x2c>
		return 0;
 8004998:	463c      	mov	r4, r7
 800499a:	e5cd      	b.n	8004538 <spi_stm32_transceive+0x6c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800499c:	68aa      	ldr	r2, [r5, #8]
 800499e:	0792      	lsls	r2, r2, #30
 80049a0:	d5fc      	bpl.n	800499c <spi_stm32_transceive+0x4d0>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80049a2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80049a6:	2b08      	cmp	r3, #8
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 80049a8:	6d72      	ldr	r2, [r6, #84]	; 0x54
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80049aa:	f000 80a1 	beq.w	8004af0 <spi_stm32_transceive+0x624>
	return !!(ctx->tx_len);
 80049ae:	6db3      	ldr	r3, [r6, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	f000 80ea 	beq.w	8004b8a <spi_stm32_transceive+0x6be>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 80b5 	bne.w	8004b26 <spi_stm32_transceive+0x65a>
  *spidr = TxData;
 80049bc:	81ab      	strh	r3, [r5, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80049be:	68ab      	ldr	r3, [r5, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 80049c0:	07df      	lsls	r7, r3, #31
 80049c2:	d5fc      	bpl.n	80049be <spi_stm32_transceive+0x4f2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80049c4:	8882      	ldrh	r2, [r0, #4]
	return !!(ctx->rx_buf && ctx->rx_len);
 80049c6:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80049c8:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 80049ca:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80049ce:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 80049d0:	68ea      	ldr	r2, [r5, #12]
 80049d2:	d078      	beq.n	8004ac6 <spi_stm32_transceive+0x5fa>
 80049d4:	b120      	cbz	r0, 80049e0 <spi_stm32_transceive+0x514>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f43f ae44 	beq.w	8004664 <spi_stm32_transceive+0x198>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 80049dc:	8002      	strh	r2, [r0, #0]
 80049de:	6e33      	ldr	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f43f ae3f 	beq.w	8004664 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f ae36 	bne.w	800465c <spi_stm32_transceive+0x190>
		++ctx->current_rx;
 80049f0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 80049f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 80049f4:	3208      	adds	r2, #8
		--ctx->rx_count;
 80049f6:	3b01      	subs	r3, #1
		++ctx->current_rx;
 80049f8:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 80049fa:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 80049fc:	b933      	cbnz	r3, 8004a0c <spi_stm32_transceive+0x540>
 80049fe:	e120      	b.n	8004c42 <spi_stm32_transceive+0x776>
		++(*current);
 8004a00:	3208      	adds	r2, #8
		--(*count);
 8004a02:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 811b 	beq.w	8004c42 <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8004a0c:	6850      	ldr	r0, [r2, #4]
 8004a0e:	2801      	cmp	r0, #1
		--(*count);
 8004a10:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8004a14:	d9f4      	bls.n	8004a00 <spi_stm32_transceive+0x534>
			*buf_len = (*current)->len / dfs;
 8004a16:	0840      	lsrs	r0, r0, #1
			return (*current)->buf;
 8004a18:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8004a1a:	6630      	str	r0, [r6, #96]	; 0x60
			return (*current)->buf;
 8004a1c:	e621      	b.n	8004662 <spi_stm32_transceive+0x196>
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8004a1e:	68ab      	ldr	r3, [r5, #8]
		while (LL_SPI_GetTxFIFOLevel(spi) > 0) {
 8004a20:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8004a24:	d1fb      	bne.n	8004a1e <spi_stm32_transceive+0x552>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004a26:	68ab      	ldr	r3, [r5, #8]
 8004a28:	079f      	lsls	r7, r3, #30
 8004a2a:	d5fc      	bpl.n	8004a26 <spi_stm32_transceive+0x55a>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8004a2c:	68ab      	ldr	r3, [r5, #8]
 8004a2e:	0618      	lsls	r0, r3, #24
 8004a30:	d4f9      	bmi.n	8004a26 <spi_stm32_transceive+0x55a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8004a32:	686b      	ldr	r3, [r5, #4]
	if (!ctx->tx_len) {
 8004a34:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004a36:	f023 0302 	bic.w	r3, r3, #2
 8004a3a:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
 8004a3c:	686b      	ldr	r3, [r5, #4]
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	606b      	str	r3, [r5, #4]
 8004a44:	b152      	cbz	r2, 8004a5c <spi_stm32_transceive+0x590>
	if (len > ctx->tx_len) {
 8004a46:	4294      	cmp	r4, r2
 8004a48:	d808      	bhi.n	8004a5c <spi_stm32_transceive+0x590>
	ctx->tx_len -= len;
 8004a4a:	1b12      	subs	r2, r2, r4
 8004a4c:	65b2      	str	r2, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004a4e:	2a00      	cmp	r2, #0
 8004a50:	f000 80d1 	beq.w	8004bf6 <spi_stm32_transceive+0x72a>
	} else if (ctx->tx_buf) {
 8004a54:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004a56:	b10b      	cbz	r3, 8004a5c <spi_stm32_transceive+0x590>
		ctx->tx_buf += dfs * len;
 8004a58:	4423      	add	r3, r4
 8004a5a:	6573      	str	r3, [r6, #84]	; 0x54
	if (!ctx->rx_len) {
 8004a5c:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004a5e:	b31b      	cbz	r3, 8004aa8 <spi_stm32_transceive+0x5dc>
	if (len > ctx->rx_len) {
 8004a60:	429c      	cmp	r4, r3
 8004a62:	d874      	bhi.n	8004b4e <spi_stm32_transceive+0x682>
	ctx->rx_len -= len;
 8004a64:	1b1b      	subs	r3, r3, r4
 8004a66:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80ae 	beq.w	8004bca <spi_stm32_transceive+0x6fe>
	} else if (ctx->rx_buf) {
 8004a6e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8004a70:	2900      	cmp	r1, #0
 8004a72:	d06c      	beq.n	8004b4e <spi_stm32_transceive+0x682>
		ctx->rx_buf += dfs * len;
 8004a74:	4421      	add	r1, r4
 8004a76:	65f1      	str	r1, [r6, #92]	; 0x5c
 8004a78:	461c      	mov	r4, r3
	struct spi_stm32_data *data = dev->data;
 8004a7a:	f8d8 a010 	ldr.w	sl, [r8, #16]
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8004a7e:	2c00      	cmp	r4, #0
 8004a80:	f47f ae92 	bne.w	80047a8 <spi_stm32_transceive+0x2dc>
 8004a84:	4614      	mov	r4, r2
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	f47f ae92 	bne.w	80047b0 <spi_stm32_transceive+0x2e4>
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	e762      	b.n	8004956 <spi_stm32_transceive+0x48a>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8004a90:	686b      	ldr	r3, [r5, #4]
 8004a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a96:	606b      	str	r3, [r5, #4]
	defined(CONFIG_SOC_SERIES_STM32U5X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8004a98:	e5c9      	b.n	800462e <spi_stm32_transceive+0x162>
 8004a9a:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	e759      	b.n	8004956 <spi_stm32_transceive+0x48a>
	*buf_len = 0;
 8004aa2:	2300      	movs	r3, #0
		ctx->rx_buf = (uint8_t *)
 8004aa4:	e9c6 3317 	strd	r3, r3, [r6, #92]	; 0x5c
	struct spi_stm32_data *data = dev->data;
 8004aa8:	f8d8 a010 	ldr.w	sl, [r8, #16]
 8004aac:	4614      	mov	r4, r2
	while (data->ctx.rx_len > 0 || data->ctx.tx_len > 0) {
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	f47f ae7e 	bne.w	80047b0 <spi_stm32_transceive+0x2e4>
 8004ab4:	e7ea      	b.n	8004a8c <spi_stm32_transceive+0x5c0>
			blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8004ab6:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8004aba:	2102      	movs	r1, #2
 8004abc:	f361 1205 	bfi	r2, r1, #4, #2
 8004ac0:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 8004ac4:	e69a      	b.n	80047fc <spi_stm32_transceive+0x330>
	return !!(ctx->rx_buf && ctx->rx_len);
 8004ac6:	b120      	cbz	r0, 8004ad2 <spi_stm32_transceive+0x606>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f43f adcb 	beq.w	8004664 <spi_stm32_transceive+0x198>
  return (uint8_t)(READ_REG(SPIx->DR));
 8004ace:	7002      	strb	r2, [r0, #0]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 8004ad0:	6e33      	ldr	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f43f adc6 	beq.w	8004664 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 809f 	beq.w	8004c20 <spi_stm32_transceive+0x754>
	} else if (ctx->rx_buf) {
 8004ae2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f43f adbd 	beq.w	8004664 <spi_stm32_transceive+0x198>
		ctx->rx_buf += dfs * len;
 8004aea:	3301      	adds	r3, #1
 8004aec:	65f3      	str	r3, [r6, #92]	; 0x5c
 8004aee:	e5b9      	b.n	8004664 <spi_stm32_transceive+0x198>
	return !!(ctx->tx_buf && ctx->tx_len);
 8004af0:	b11a      	cbz	r2, 8004afa <spi_stm32_transceive+0x62e>
 8004af2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d134      	bne.n	8004b62 <spi_stm32_transceive+0x696>
 8004af8:	461a      	mov	r2, r3
  *spidr = TxData;
 8004afa:	732a      	strb	r2, [r5, #12]
	if (!ctx->tx_len) {
 8004afc:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d034      	beq.n	8004b6c <spi_stm32_transceive+0x6a0>
	ctx->tx_len -= len;
 8004b02:	3b01      	subs	r3, #1
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004b04:	6830      	ldr	r0, [r6, #0]
 8004b06:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 809d 	beq.w	8004c48 <spi_stm32_transceive+0x77c>
	} else if (ctx->tx_buf) {
 8004b0e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f43f af54 	beq.w	80049be <spi_stm32_transceive+0x4f2>
		ctx->tx_buf += dfs * len;
 8004b16:	3301      	adds	r3, #1
 8004b18:	6573      	str	r3, [r6, #84]	; 0x54
 8004b1a:	e750      	b.n	80049be <spi_stm32_transceive+0x4f2>
 8004b1c:	f8d8 a010 	ldr.w	sl, [r8, #16]
			return -EIO;
 8004b20:	f06f 0404 	mvn.w	r4, #4
 8004b24:	e717      	b.n	8004956 <spi_stm32_transceive+0x48a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 8004b26:	8817      	ldrh	r7, [r2, #0]
  *spidr = TxData;
 8004b28:	81af      	strh	r7, [r5, #12]
	ctx->tx_len -= len;
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d034      	beq.n	8004b9c <spi_stm32_transceive+0x6d0>
		ctx->tx_buf += dfs * len;
 8004b32:	3202      	adds	r2, #2
 8004b34:	6572      	str	r2, [r6, #84]	; 0x54
 8004b36:	e742      	b.n	80049be <spi_stm32_transceive+0x4f2>
		blk_cfg->dest_address = (uint32_t)&dummy_rx_tx_buffer;
 8004b38:	4a9c      	ldr	r2, [pc, #624]	; (8004dac <spi_stm32_transceive+0x8e0>)
 8004b3a:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
		blk_cfg->dest_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8004b3e:	f89a 20c0 	ldrb.w	r2, [sl, #192]	; 0xc0
 8004b42:	2102      	movs	r1, #2
 8004b44:	f361 1205 	bfi	r2, r1, #4, #2
 8004b48:	f88a 20c0 	strb.w	r2, [sl, #192]	; 0xc0
 8004b4c:	e656      	b.n	80047fc <spi_stm32_transceive+0x330>
 8004b4e:	461c      	mov	r4, r3
 8004b50:	e793      	b.n	8004a7a <spi_stm32_transceive+0x5ae>
			blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8004b52:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8004b56:	2102      	movs	r1, #2
 8004b58:	f361 0283 	bfi	r2, r1, #2, #2
 8004b5c:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8004b60:	e6a4      	b.n	80048ac <spi_stm32_transceive+0x3e0>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004b62:	7812      	ldrb	r2, [r2, #0]
  *spidr = TxData;
 8004b64:	732a      	strb	r2, [r5, #12]
	if (!ctx->tx_len) {
 8004b66:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ca      	bne.n	8004b02 <spi_stm32_transceive+0x636>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8004b6c:	6830      	ldr	r0, [r6, #0]
 8004b6e:	e726      	b.n	80049be <spi_stm32_transceive+0x4f2>
		dummy_rx_tx_buffer = 0;
 8004b70:	4a8e      	ldr	r2, [pc, #568]	; (8004dac <spi_stm32_transceive+0x8e0>)
		blk_cfg->source_address = (uint32_t)&dummy_rx_tx_buffer;
 8004b72:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
		dummy_rx_tx_buffer = 0;
 8004b76:	f8c2 b000 	str.w	fp, [r2]
		blk_cfg->source_addr_adj = DMA_ADDR_ADJ_NO_CHANGE;
 8004b7a:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8004b7e:	2102      	movs	r1, #2
 8004b80:	f361 0283 	bfi	r2, r1, #2, #2
 8004b84:	f887 210c 	strb.w	r2, [r7, #268]	; 0x10c
 8004b88:	e690      	b.n	80048ac <spi_stm32_transceive+0x3e0>
  *spidr = TxData;
 8004b8a:	81aa      	strh	r2, [r5, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f43f af16 	beq.w	80049be <spi_stm32_transceive+0x4f2>
	ctx->tx_len -= len;
 8004b92:	3b01      	subs	r3, #1
 8004b94:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f47f af11 	bne.w	80049be <spi_stm32_transceive+0x4f2>
		++ctx->current_tx;
 8004b9c:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004b9e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8004ba0:	3208      	adds	r2, #8
		--ctx->tx_count;
 8004ba2:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8004ba4:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004ba6:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004ba8:	b92b      	cbnz	r3, 8004bb6 <spi_stm32_transceive+0x6ea>
 8004baa:	e05d      	b.n	8004c68 <spi_stm32_transceive+0x79c>
		++(*current);
 8004bac:	3208      	adds	r2, #8
		--(*count);
 8004bae:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d058      	beq.n	8004c68 <spi_stm32_transceive+0x79c>
		if (((*current)->len / dfs) != 0) {
 8004bb6:	6857      	ldr	r7, [r2, #4]
 8004bb8:	2f01      	cmp	r7, #1
		--(*count);
 8004bba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8004bbe:	d9f5      	bls.n	8004bac <spi_stm32_transceive+0x6e0>
			*buf_len = (*current)->len / dfs;
 8004bc0:	087f      	lsrs	r7, r7, #1
			return (*current)->buf;
 8004bc2:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8004bc4:	65b7      	str	r7, [r6, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 8004bc6:	6573      	str	r3, [r6, #84]	; 0x54
 8004bc8:	e6f9      	b.n	80049be <spi_stm32_transceive+0x4f2>
		++ctx->current_rx;
 8004bca:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004bcc:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8004bce:	3108      	adds	r1, #8
		--ctx->rx_count;
 8004bd0:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8004bd2:	64f1      	str	r1, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004bd4:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004bd6:	b933      	cbnz	r3, 8004be6 <spi_stm32_transceive+0x71a>
 8004bd8:	e763      	b.n	8004aa2 <spi_stm32_transceive+0x5d6>
		++(*current);
 8004bda:	3108      	adds	r1, #8
		--(*count);
 8004bdc:	e9c6 1313 	strd	r1, r3, [r6, #76]	; 0x4c
	while (*count) {
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f43f af5e 	beq.w	8004aa2 <spi_stm32_transceive+0x5d6>
		if (((*current)->len / dfs) != 0) {
 8004be6:	684c      	ldr	r4, [r1, #4]
		--(*count);
 8004be8:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d0f5      	beq.n	8004bda <spi_stm32_transceive+0x70e>
		ctx->rx_buf = (uint8_t *)
 8004bee:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 8004bf0:	e9c6 3417 	strd	r3, r4, [r6, #92]	; 0x5c
			return (*current)->buf;
 8004bf4:	e741      	b.n	8004a7a <spi_stm32_transceive+0x5ae>
		++ctx->current_tx;
 8004bf6:	6c71      	ldr	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004bf8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8004bfa:	3108      	adds	r1, #8
		--ctx->tx_count;
 8004bfc:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8004bfe:	6471      	str	r1, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004c00:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004c02:	b92b      	cbnz	r3, 8004c10 <spi_stm32_transceive+0x744>
 8004c04:	e06b      	b.n	8004cde <spi_stm32_transceive+0x812>
		++(*current);
 8004c06:	3108      	adds	r1, #8
		--(*count);
 8004c08:	e9c6 1311 	strd	r1, r3, [r6, #68]	; 0x44
	while (*count) {
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d066      	beq.n	8004cde <spi_stm32_transceive+0x812>
		if (((*current)->len / dfs) != 0) {
 8004c10:	6848      	ldr	r0, [r1, #4]
		--(*count);
 8004c12:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d0f6      	beq.n	8004c06 <spi_stm32_transceive+0x73a>
			return (*current)->buf;
 8004c18:	680b      	ldr	r3, [r1, #0]
			*buf_len = (*current)->len / dfs;
 8004c1a:	65b0      	str	r0, [r6, #88]	; 0x58
		if (((*current)->len / dfs) != 0) {
 8004c1c:	4602      	mov	r2, r0
			return (*current)->buf;
 8004c1e:	e71c      	b.n	8004a5a <spi_stm32_transceive+0x58e>
		++ctx->current_rx;
 8004c20:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004c22:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8004c24:	3208      	adds	r2, #8
		--ctx->rx_count;
 8004c26:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8004c28:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004c2a:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004c2c:	b14b      	cbz	r3, 8004c42 <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8004c2e:	6850      	ldr	r0, [r2, #4]
		--(*count);
 8004c30:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f47f aef0 	bne.w	8004a18 <spi_stm32_transceive+0x54c>
		++(*current);
 8004c38:	3208      	adds	r2, #8
		--(*count);
 8004c3a:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f5      	bne.n	8004c2e <spi_stm32_transceive+0x762>
	*buf_len = 0;
 8004c42:	6631      	str	r1, [r6, #96]	; 0x60
	return NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e50c      	b.n	8004662 <spi_stm32_transceive+0x196>
		++ctx->current_tx;
 8004c48:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004c4a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8004c4c:	3208      	adds	r2, #8
		--ctx->tx_count;
 8004c4e:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8004c50:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004c52:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004c54:	b143      	cbz	r3, 8004c68 <spi_stm32_transceive+0x79c>
		if (((*current)->len / dfs) != 0) {
 8004c56:	6857      	ldr	r7, [r2, #4]
		--(*count);
 8004c58:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004c5a:	2f00      	cmp	r7, #0
 8004c5c:	d1b1      	bne.n	8004bc2 <spi_stm32_transceive+0x6f6>
		++(*current);
 8004c5e:	3208      	adds	r2, #8
		--(*count);
 8004c60:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f6      	bne.n	8004c56 <spi_stm32_transceive+0x78a>
	*buf_len = 0;
 8004c68:	65b1      	str	r1, [r6, #88]	; 0x58
	return NULL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e7ab      	b.n	8004bc6 <spi_stm32_transceive+0x6fa>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004c6e:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 8004c76:	e497      	b.n	80045a8 <spi_stm32_transceive+0xdc>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004c78:	e9c6 0011 	strd	r0, r0, [r6, #68]	; 0x44
	*buf_len = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8004c80:	e479      	b.n	8004576 <spi_stm32_transceive+0xaa>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8004c82:	7803      	ldrb	r3, [r0, #0]
  *spidr = TxData;
 8004c84:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8004c86:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f43f acd0 	beq.w	800462e <spi_stm32_transceive+0x162>
	ctx->tx_len -= len;
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	65b3      	str	r3, [r6, #88]	; 0x58
	if (!ctx->tx_len) {
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04a      	beq.n	8004d2c <spi_stm32_transceive+0x860>
	} else if (ctx->tx_buf) {
 8004c96:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f43f acc8 	beq.w	800462e <spi_stm32_transceive+0x162>
		ctx->tx_buf += dfs * len;
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	e056      	b.n	8004d50 <spi_stm32_transceive+0x884>
  return (uint8_t)(READ_REG(SPIx->DR));
 8004ca2:	68ea      	ldr	r2, [r5, #12]
 8004ca4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 8004ca6:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f43f acdb 	beq.w	8004664 <spi_stm32_transceive+0x198>
	ctx->rx_len -= len;
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	6633      	str	r3, [r6, #96]	; 0x60
	if (!ctx->rx_len) {
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f47f af15 	bne.w	8004ae2 <spi_stm32_transceive+0x616>
		++ctx->current_rx;
 8004cb8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004cba:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8004cbc:	3208      	adds	r2, #8
		--ctx->rx_count;
 8004cbe:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8004cc0:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004cc2:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0bc      	beq.n	8004c42 <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8004cc8:	6850      	ldr	r0, [r2, #4]
		--(*count);
 8004cca:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	f47f aea3 	bne.w	8004a18 <spi_stm32_transceive+0x54c>
		++(*current);
 8004cd2:	3208      	adds	r2, #8
		--(*count);
 8004cd4:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f5      	bne.n	8004cc8 <spi_stm32_transceive+0x7fc>
 8004cdc:	e7b1      	b.n	8004c42 <spi_stm32_transceive+0x776>
	*buf_len = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8004ce2:	e6ba      	b.n	8004a5a <spi_stm32_transceive+0x58e>
	if (!tx_bufs && !rx_bufs) {
 8004ce4:	2f00      	cmp	r7, #0
 8004ce6:	f47f ace0 	bne.w	80046aa <spi_stm32_transceive+0x1de>
		return 0;
 8004cea:	463c      	mov	r4, r7
 8004cec:	e424      	b.n	8004538 <spi_stm32_transceive+0x6c>
		++ctx->current_tx;
 8004cee:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004cf0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8004cf2:	3208      	adds	r2, #8
		--ctx->tx_count;
 8004cf4:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8004cf6:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004cf8:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004cfa:	b923      	cbnz	r3, 8004d06 <spi_stm32_transceive+0x83a>
 8004cfc:	e026      	b.n	8004d4c <spi_stm32_transceive+0x880>
		++(*current);
 8004cfe:	3208      	adds	r2, #8
		--(*count);
 8004d00:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004d04:	b313      	cbz	r3, 8004d4c <spi_stm32_transceive+0x880>
		if (((*current)->len / dfs) != 0) {
 8004d06:	6850      	ldr	r0, [r2, #4]
 8004d08:	2801      	cmp	r0, #1
		--(*count);
 8004d0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8004d0e:	d9f6      	bls.n	8004cfe <spi_stm32_transceive+0x832>
			*buf_len = (*current)->len / dfs;
 8004d10:	0840      	lsrs	r0, r0, #1
			return (*current)->buf;
 8004d12:	6813      	ldr	r3, [r2, #0]
			*buf_len = (*current)->len / dfs;
 8004d14:	65b0      	str	r0, [r6, #88]	; 0x58
			return (*current)->buf;
 8004d16:	e01b      	b.n	8004d50 <spi_stm32_transceive+0x884>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004d18:	e9c6 7713 	strd	r7, r7, [r6, #76]	; 0x4c
	*buf_len = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6633      	str	r3, [r6, #96]	; 0x60
	return NULL;
 8004d20:	e517      	b.n	8004752 <spi_stm32_transceive+0x286>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004d22:	e9c6 9911 	strd	r9, r9, [r6, #68]	; 0x44
	*buf_len = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	65b3      	str	r3, [r6, #88]	; 0x58
	return NULL;
 8004d2a:	e4f9      	b.n	8004720 <spi_stm32_transceive+0x254>
		++ctx->current_tx;
 8004d2c:	6c72      	ldr	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004d2e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
		++ctx->current_tx;
 8004d30:	3208      	adds	r2, #8
		--ctx->tx_count;
 8004d32:	3b01      	subs	r3, #1
		++ctx->current_tx;
 8004d34:	6472      	str	r2, [r6, #68]	; 0x44
		--ctx->tx_count;
 8004d36:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004d38:	b143      	cbz	r3, 8004d4c <spi_stm32_transceive+0x880>
		if (((*current)->len / dfs) != 0) {
 8004d3a:	6850      	ldr	r0, [r2, #4]
		--(*count);
 8004d3c:	3b01      	subs	r3, #1
		if (((*current)->len / dfs) != 0) {
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d1e7      	bne.n	8004d12 <spi_stm32_transceive+0x846>
		++(*current);
 8004d42:	3208      	adds	r2, #8
		--(*count);
 8004d44:	e9c6 2311 	strd	r2, r3, [r6, #68]	; 0x44
	while (*count) {
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f6      	bne.n	8004d3a <spi_stm32_transceive+0x86e>
	*buf_len = 0;
 8004d4c:	65b1      	str	r1, [r6, #88]	; 0x58
	return NULL;
 8004d4e:	2300      	movs	r3, #0
		ctx->tx_buf += dfs * len;
 8004d50:	6573      	str	r3, [r6, #84]	; 0x54
 8004d52:	e46c      	b.n	800462e <spi_stm32_transceive+0x162>
		++ctx->current_rx;
 8004d54:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004d56:	6d33      	ldr	r3, [r6, #80]	; 0x50
		++ctx->current_rx;
 8004d58:	3208      	adds	r2, #8
		--ctx->rx_count;
 8004d5a:	3b01      	subs	r3, #1
		++ctx->current_rx;
 8004d5c:	64f2      	str	r2, [r6, #76]	; 0x4c
		--ctx->rx_count;
 8004d5e:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004d60:	b933      	cbnz	r3, 8004d70 <spi_stm32_transceive+0x8a4>
 8004d62:	e76e      	b.n	8004c42 <spi_stm32_transceive+0x776>
		++(*current);
 8004d64:	3208      	adds	r2, #8
		--(*count);
 8004d66:	e9c6 2313 	strd	r2, r3, [r6, #76]	; 0x4c
	while (*count) {
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f43f af69 	beq.w	8004c42 <spi_stm32_transceive+0x776>
		if (((*current)->len / dfs) != 0) {
 8004d70:	6850      	ldr	r0, [r2, #4]
 8004d72:	2801      	cmp	r0, #1
		--(*count);
 8004d74:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
		if (((*current)->len / dfs) != 0) {
 8004d78:	d9f4      	bls.n	8004d64 <spi_stm32_transceive+0x898>
 8004d7a:	e64c      	b.n	8004a16 <spi_stm32_transceive+0x54a>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8004d7c:	68ab      	ldr	r3, [r5, #8]
 8004d7e:	065b      	lsls	r3, r3, #25
 8004d80:	d50c      	bpl.n	8004d9c <spi_stm32_transceive+0x8d0>
  tmpreg = SPIx->DR;
 8004d82:	68eb      	ldr	r3, [r5, #12]
 8004d84:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8004d86:	9b03      	ldr	r3, [sp, #12]
  tmpreg = SPIx->SR;
 8004d88:	68ab      	ldr	r3, [r5, #8]
 8004d8a:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 8004d8c:	9b03      	ldr	r3, [sp, #12]
		return -EIO;
 8004d8e:	f06f 0404 	mvn.w	r4, #4
 8004d92:	e472      	b.n	800467a <spi_stm32_transceive+0x1ae>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004d94:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004d96:	e76c      	b.n	8004c72 <spi_stm32_transceive+0x7a6>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004d98:	64b0      	str	r0, [r6, #72]	; 0x48
	while (*count) {
 8004d9a:	e76f      	b.n	8004c7c <spi_stm32_transceive+0x7b0>
 8004d9c:	f06f 0404 	mvn.w	r4, #4
 8004da0:	e46b      	b.n	800467a <spi_stm32_transceive+0x1ae>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8004da2:	6533      	str	r3, [r6, #80]	; 0x50
	while (*count) {
 8004da4:	e7ba      	b.n	8004d1c <spi_stm32_transceive+0x850>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8004da6:	64b3      	str	r3, [r6, #72]	; 0x48
	while (*count) {
 8004da8:	e7bd      	b.n	8004d26 <spi_stm32_transceive+0x85a>
 8004daa:	bf00      	nop
 8004dac:	20000f80 	.word	0x20000f80

08004db0 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8004db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8004db4:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8004db6:	6846      	ldr	r6, [r0, #4]
{
 8004db8:	b082      	sub	sp, #8
 8004dba:	4c4d      	ldr	r4, [pc, #308]	; (8004ef0 <spi_stm32_init+0x140>)
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f005 f8bb 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f000 8090 	beq.w	8004ee8 <spi_stm32_init+0x138>
	return api->on(dev, sys);
 8004dc8:	68a3      	ldr	r3, [r4, #8]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4798      	blx	r3
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004dd2:	4607      	mov	r7, r0
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f040 8087 	bne.w	8004ee8 <spi_stm32_init+0x138>
	ret = pinctrl_lookup_state(config, id, &state);
 8004dda:	68f0      	ldr	r0, [r6, #12]
 8004ddc:	aa01      	add	r2, sp, #4
 8004dde:	4639      	mov	r1, r7
 8004de0:	f003 f9ec 	bl	80081bc <pinctrl_lookup_state>
	if (ret < 0) {
 8004de4:	2800      	cmp	r0, #0
 8004de6:	db57      	blt.n	8004e98 <spi_stm32_init+0xe8>
	return pinctrl_apply_state_direct(config, state);
 8004de8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8004dea:	463a      	mov	r2, r7
 8004dec:	7919      	ldrb	r1, [r3, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f003 fa06 	bl	8008200 <pinctrl_configure_pins>
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8004df4:	2800      	cmp	r0, #0
 8004df6:	db4f      	blt.n	8004e98 <spi_stm32_init+0xe8>
#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
#endif

#ifdef CONFIG_SPI_STM32_DMA
	if ((data->dma_rx.dma_dev != NULL) &&
 8004df8:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8004dfc:	b118      	cbz	r0, 8004e06 <spi_stm32_init+0x56>
 8004dfe:	f005 f89b 	bl	8009f38 <z_device_is_ready>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d042      	beq.n	8004e8c <spi_stm32_init+0xdc>
				!device_is_ready(data->dma_rx.dma_dev)) {
		LOG_ERR("%s device not ready", data->dma_rx.dma_dev->name);
		return -ENODEV;
	}

	if ((data->dma_tx.dma_dev != NULL) &&
 8004e06:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8004e0a:	b118      	cbz	r0, 8004e14 <spi_stm32_init+0x64>
 8004e0c:	f005 f894 	bl	8009f38 <z_device_is_ready>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d03b      	beq.n	8004e8c <spi_stm32_init+0xdc>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8004e14:	e9d5 4302 	ldrd	r4, r3, [r5, #8]
 8004e18:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004e1c:	429c      	cmp	r4, r3
 8004e1e:	d240      	bcs.n	8004ea2 <spi_stm32_init+0xf2>
 8004e20:	3408      	adds	r4, #8
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004e22:	f04f 0801 	mov.w	r8, #1
 8004e26:	e02a      	b.n	8004e7e <spi_stm32_init+0xce>
 8004e28:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8004e2c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
 8004e30:	f814 3c03 	ldrb.w	r3, [r4, #-3]
	struct gpio_driver_data *data =
 8004e34:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
 8004e38:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004e3c:	f8de c000 	ldr.w	ip, [lr]
	return api->pin_configure(port, pin, flags);
 8004e40:	f8d9 9000 	ldr.w	r9, [r9]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004e44:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
 8004e46:	bf54      	ite	pl
 8004e48:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004e4c:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004e50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004e54:	fa08 fa01 	lsl.w	sl, r8, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004e58:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004e5a:	bf4c      	ite	mi
 8004e5c:	ea4c 030a 	orrmi.w	r3, ip, sl
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004e60:	ea2c 030a 	bicpl.w	r3, ip, sl
 8004e64:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
 8004e68:	47c8      	blx	r9
		if (ret < 0) {
 8004e6a:	2800      	cmp	r0, #0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8004e6c:	f104 0408 	add.w	r4, r4, #8
		if (ret < 0) {
 8004e70:	db12      	blt.n	8004e98 <spi_stm32_init+0xe8>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8004e72:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8004e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e7a:	429e      	cmp	r6, r3
 8004e7c:	d211      	bcs.n	8004ea2 <spi_stm32_init+0xf2>
		if (!device_is_ready(cs_gpio->port)) {
 8004e7e:	f854 0c08 	ldr.w	r0, [r4, #-8]
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
 8004e82:	4626      	mov	r6, r4
 8004e84:	f005 f858 	bl	8009f38 <z_device_is_ready>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d1cd      	bne.n	8004e28 <spi_stm32_init+0x78>
		return -ENODEV;
 8004e8c:	f06f 0712 	mvn.w	r7, #18
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8004e90:	4638      	mov	r0, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (err < 0) {
 8004e98:	4607      	mov	r7, r0
}
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	b1a3      	cbz	r3, 8004ed0 <spi_stm32_init+0x120>
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	b193      	cbz	r3, 8004ed0 <spi_stm32_init+0x120>
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	b182      	cbz	r2, 8004ed0 <spi_stm32_init+0x120>
			k_busy_wait(ctx->config->cs->delay);
 8004eae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8004eb0:	f006 fc0a 	bl	800b6c8 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8004eb8:	6818      	ldr	r0, [r3, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004eba:	791a      	ldrb	r2, [r3, #4]
 8004ebc:	6903      	ldr	r3, [r0, #16]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4091      	lsls	r1, r2
 8004ec4:	4219      	tst	r1, r3
	return api->port_set_bits_raw(port, pins);
 8004ec6:	6883      	ldr	r3, [r0, #8]
 8004ec8:	bf14      	ite	ne
 8004eca:	68db      	ldrne	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8004ecc:	691b      	ldreq	r3, [r3, #16]
 8004ece:	4798      	blx	r3
	if (!k_sem_count_get(&ctx->lock)) {
 8004ed0:	69ab      	ldr	r3, [r5, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1dc      	bne.n	8004e90 <spi_stm32_init+0xe0>
		ctx->owner = NULL;
 8004ed6:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 8004ed8:	f105 0010 	add.w	r0, r5, #16
 8004edc:	f005 fbe0 	bl	800a6a0 <z_impl_k_sem_give>
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
 8004ee8:	f06f 0704 	mvn.w	r7, #4
 8004eec:	e7d0      	b.n	8004e90 <spi_stm32_init+0xe0>
 8004eee:	bf00      	nop
 8004ef0:	0800dddc 	.word	0x0800dddc

08004ef4 <timer_work_handler>:
	TimerIrqHandler();
 8004ef4:	f000 bedc 	b.w	8005cb0 <TimerIrqHandler>

08004ef8 <timer_callback>:
	k_work_submit(&timer_work);
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <timer_callback+0x8>)
 8004efa:	f005 bcf5 	b.w	800a8e8 <k_work_submit>
 8004efe:	bf00      	nop
 8004f00:	20000260 	.word	0x20000260

08004f04 <RtcGetTimerValue>:
{
 8004f04:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004f06:	f006 fbc7 	bl	800b698 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8004f0a:	220a      	movs	r2, #10
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f7fb fd65 	bl	80009dc <__aeabi_uldivmod>
}
 8004f12:	bd08      	pop	{r3, pc}

08004f14 <RtcGetTimerElapsedTime>:
{
 8004f14:	b508      	push	{r3, lr}
 8004f16:	f006 fbbf 	bl	800b698 <z_impl_k_uptime_ticks>
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f7fb fd5d 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8004f22:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <RtcGetTimerElapsedTime+0x18>)
 8004f24:	681b      	ldr	r3, [r3, #0]
}
 8004f26:	1ac0      	subs	r0, r0, r3
 8004f28:	bd08      	pop	{r3, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000f84 	.word	0x20000f84

08004f30 <RtcGetMinimumTimeout>:
}
 8004f30:	2001      	movs	r0, #1
 8004f32:	4770      	bx	lr

08004f34 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <RtcStopAlarm+0x8>)
 8004f36:	f006 bc8d 	b.w	800b854 <z_impl_k_timer_stop>
 8004f3a:	bf00      	nop
 8004f3c:	20000628 	.word	0x20000628

08004f40 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8004f40:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004f42:	f006 fba9 	bl	800b698 <z_impl_k_uptime_ticks>
 8004f46:	220a      	movs	r2, #10
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f7fb fd47 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8004f4e:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <RtcSetTimerContext+0x14>)
 8004f50:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8004f52:	bd08      	pop	{r3, pc}
 8004f54:	20000f84 	.word	0x20000f84

08004f58 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <RtcGetTimerContext+0x8>)
}
 8004f5a:	6818      	ldr	r0, [r3, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000f84 	.word	0x20000f84

08004f64 <DelayMsMcu>:
			return t * ((uint64_t)to_hz / from_hz);
 8004f64:	210a      	movs	r1, #10
 8004f66:	fba0 0101 	umull	r0, r1, r0, r1
	return z_impl_k_sleep(timeout);
 8004f6a:	f006 b931 	b.w	800b1d0 <z_impl_k_sleep>
 8004f6e:	bf00      	nop

08004f70 <RtcMs2Tick>:
}

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <RtcTick2Ms>:
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 8004f78:	f04f 0210 	mov.w	r2, #16
 8004f7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f80:	f382 8812 	msr	BASEPRI_MAX, r2
 8004f84:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 8004f88:	6003      	str	r3, [r0, #0]
}
 8004f8a:	4770      	bx	lr

08004f8c <BoardCriticalSectionEnd>:
	__asm__ volatile(
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
 8004f96:	4770      	bx	lr

08004f98 <sx12xx_ev_rx_error_timeout>:
}

static void sx12xx_ev_rx_error_timeout(void)
{
    LOG_DBG("Receive timeout/error");
    struct k_poll_signal *sig = dev_data.operation_done;
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <sx12xx_ev_rx_error_timeout+0x20>)

    /* Receiving in asynchronous mode */
    if (dev_data.async_rx_error_timeout_cb) {
 8004f9a:	68da      	ldr	r2, [r3, #12]
{
 8004f9c:	b510      	push	{r4, lr}
    struct k_poll_signal *sig = dev_data.operation_done;
 8004f9e:	685c      	ldr	r4, [r3, #4]
    if (dev_data.async_rx_error_timeout_cb) {
 8004fa0:	b10a      	cbz	r2, 8004fa6 <sx12xx_ev_rx_error_timeout+0xe>
        /* Run the callback */
        dev_data.async_rx_error_timeout_cb(dev_data.dev);
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	4790      	blx	r2
    }

    /* Raise signal if provided */
    if (sig) {
 8004fa6:	b12c      	cbz	r4, 8004fb4 <sx12xx_ev_rx_error_timeout+0x1c>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4620      	mov	r0, r4
        k_poll_signal_raise(sig, 0);
    }
}
 8004fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb0:	f006 bf70 	b.w	800be94 <z_impl_k_poll_signal_raise>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000f88 	.word	0x20000f88

08004fbc <sx12xx_ev_rx_done>:
{
 8004fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dev_data.async_rx_cb) {
 8004fc0:	4c27      	ldr	r4, [pc, #156]	; (8005060 <sx12xx_ev_rx_done+0xa4>)
 8004fc2:	68a5      	ldr	r5, [r4, #8]
{
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	4684      	mov	ip, r0
 8004fc8:	4617      	mov	r7, r2
 8004fca:	461e      	mov	r6, r3
	if (dev_data.async_rx_cb) {
 8004fcc:	b16d      	cbz	r5, 8004fea <sx12xx_ev_rx_done+0x2e>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	4661      	mov	r1, ip
 8004fd8:	47a8      	blx	r5
		Radio.Rx(0);
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <sx12xx_ev_rx_done+0xa8>)
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	2000      	movs	r0, #0
}
 8004fe2:	b004      	add	sp, #16
 8004fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		Radio.Rx(0);
 8004fe8:	4718      	bx	r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004fea:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8004fee:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 8004ff0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8004ff4:	f3bf 8f5b 	dmb	ish
 8004ff8:	e855 2f00 	ldrex	r2, [r5]
 8004ffc:	2a01      	cmp	r2, #1
 8004ffe:	d103      	bne.n	8005008 <sx12xx_ev_rx_done+0x4c>
 8005000:	e845 3000 	strex	r0, r3, [r5]
 8005004:	2800      	cmp	r0, #0
 8005006:	d1f7      	bne.n	8004ff8 <sx12xx_ev_rx_done+0x3c>
 8005008:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800500c:	d125      	bne.n	800505a <sx12xx_ev_rx_done+0x9e>
	if (size < *dev_data.rx_params.size) {
 800500e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	428a      	cmp	r2, r1
 8005014:	d902      	bls.n	800501c <sx12xx_ev_rx_done+0x60>
		*dev_data.rx_params.size = size;
 8005016:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8005018:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800501a:	781a      	ldrb	r2, [r3, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800501c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800501e:	4661      	mov	r1, ip
 8005020:	f008 fb3e 	bl	800d6a0 <memcpy>
	if (dev_data.rx_params.rssi) {
 8005024:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005026:	b103      	cbz	r3, 800502a <sx12xx_ev_rx_done+0x6e>
		*dev_data.rx_params.rssi = rssi;
 8005028:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 800502a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800502c:	b103      	cbz	r3, 8005030 <sx12xx_ev_rx_done+0x74>
		*dev_data.rx_params.snr = snr;
 800502e:	701e      	strb	r6, [r3, #0]
	Radio.Sleep();
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <sx12xx_ev_rx_done+0xa8>)
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	4798      	blx	r3
	dev_data.operation_done = NULL;
 8005036:	2100      	movs	r1, #0
 8005038:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800503a:	f3bf 8f5b 	dmb	ish
 800503e:	e855 3f00 	ldrex	r3, [r5]
 8005042:	e845 1200 	strex	r2, r1, [r5]
 8005046:	2a00      	cmp	r2, #0
 8005048:	d1f9      	bne.n	800503e <sx12xx_ev_rx_done+0x82>
 800504a:	f3bf 8f5b 	dmb	ish
 800504e:	4640      	mov	r0, r8
}
 8005050:	b004      	add	sp, #16
 8005052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	f006 bf1d 	b.w	800be94 <z_impl_k_poll_signal_raise>
 800505a:	b004      	add	sp, #16
 800505c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005060:	20000f88 	.word	0x20000f88
 8005064:	0800e808 	.word	0x0800e808

08005068 <sx12xx_ev_tx_done>:
{
 8005068:	b570      	push	{r4, r5, r6, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 800506a:	4d14      	ldr	r5, [pc, #80]	; (80050bc <sx12xx_ev_tx_done+0x54>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800506c:	2302      	movs	r3, #2
 800506e:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8005072:	686e      	ldr	r6, [r5, #4]
 8005074:	f3bf 8f5b 	dmb	ish
 8005078:	e854 2f00 	ldrex	r2, [r4]
 800507c:	2a01      	cmp	r2, #1
 800507e:	d103      	bne.n	8005088 <sx12xx_ev_tx_done+0x20>
 8005080:	e844 3100 	strex	r1, r3, [r4]
 8005084:	2900      	cmp	r1, #0
 8005086:	d1f7      	bne.n	8005078 <sx12xx_ev_tx_done+0x10>
 8005088:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800508c:	d114      	bne.n	80050b8 <sx12xx_ev_tx_done+0x50>
	Radio.Sleep();
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <sx12xx_ev_tx_done+0x58>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	4798      	blx	r3
	data->operation_done = NULL;
 8005094:	2100      	movs	r1, #0
 8005096:	6069      	str	r1, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005098:	f3bf 8f5b 	dmb	ish
 800509c:	e854 3f00 	ldrex	r3, [r4]
 80050a0:	e844 1200 	strex	r2, r1, [r4]
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	d1f9      	bne.n	800509c <sx12xx_ev_tx_done+0x34>
 80050a8:	f3bf 8f5b 	dmb	ish
		if (sig) {
 80050ac:	b126      	cbz	r6, 80050b8 <sx12xx_ev_tx_done+0x50>
 80050ae:	4630      	mov	r0, r6
}
 80050b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050b4:	f006 beee 	b.w	800be94 <z_impl_k_poll_signal_raise>
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
 80050ba:	bf00      	nop
 80050bc:	20000f88 	.word	0x20000f88
 80050c0:	0800e808 	.word	0x0800e808

080050c4 <sx12xx_ev_tx_timed_out>:
{
 80050c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80050c6:	4c15      	ldr	r4, [pc, #84]	; (800511c <sx12xx_ev_tx_timed_out+0x58>)
    dev_data.events.TxTimeout = NULL;
 80050c8:	2600      	movs	r6, #0
 80050ca:	6166      	str	r6, [r4, #20]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80050cc:	f104 0544 	add.w	r5, r4, #68	; 0x44
 80050d0:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
 80050d2:	6867      	ldr	r7, [r4, #4]
 80050d4:	f3bf 8f5b 	dmb	ish
 80050d8:	e855 2f00 	ldrex	r2, [r5]
 80050dc:	2a01      	cmp	r2, #1
 80050de:	d103      	bne.n	80050e8 <sx12xx_ev_tx_timed_out+0x24>
 80050e0:	e845 3100 	strex	r1, r3, [r5]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	d1f7      	bne.n	80050d8 <sx12xx_ev_tx_timed_out+0x14>
 80050e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80050ec:	d114      	bne.n	8005118 <sx12xx_ev_tx_timed_out+0x54>
	Radio.Sleep();
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <sx12xx_ev_tx_timed_out+0x5c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	4798      	blx	r3
	data->operation_done = NULL;
 80050f4:	6066      	str	r6, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80050f6:	f3bf 8f5b 	dmb	ish
 80050fa:	e855 3f00 	ldrex	r3, [r5]
 80050fe:	e845 6200 	strex	r2, r6, [r5]
 8005102:	2a00      	cmp	r2, #0
 8005104:	d1f9      	bne.n	80050fa <sx12xx_ev_tx_timed_out+0x36>
 8005106:	f3bf 8f5b 	dmb	ish
		if (sig) {
 800510a:	b12f      	cbz	r7, 8005118 <sx12xx_ev_tx_timed_out+0x54>
 800510c:	4631      	mov	r1, r6
 800510e:	4638      	mov	r0, r7
}
 8005110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005114:	f006 bebe 	b.w	800be94 <z_impl_k_poll_signal_raise>
 8005118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800511a:	bf00      	nop
 800511c:	20000f88 	.word	0x20000f88
 8005120:	0800e808 	.word	0x0800e808

08005124 <__sx12xx_configure_pin>:
{
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4605      	mov	r5, r0
 8005128:	4616      	mov	r6, r2
 800512a:	4608      	mov	r0, r1
 800512c:	461c      	mov	r4, r3
	return z_impl_device_get_binding(name);
 800512e:	f004 fecf 	bl	8009ed0 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8005132:	6028      	str	r0, [r5, #0]
	if (!(*dev)) {
 8005134:	b300      	cbz	r0, 8005178 <__sx12xx_configure_pin+0x54>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005136:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
 8005138:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
 800513a:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800513c:	d506      	bpl.n	800514c <__sx12xx_configure_pin+0x28>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 800513e:	f414 6f40 	tst.w	r4, #3072	; 0xc00
 8005142:	d003      	beq.n	800514c <__sx12xx_configure_pin+0x28>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005144:	07e3      	lsls	r3, r4, #31
 8005146:	d50f      	bpl.n	8005168 <__sx12xx_configure_pin+0x44>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005148:	f484 6440 	eor.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 800514c:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005150:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005152:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005154:	d50b      	bpl.n	800516e <__sx12xx_configure_pin+0x4a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005156:	2401      	movs	r4, #1
 8005158:	40b4      	lsls	r4, r6
 800515a:	4323      	orrs	r3, r4
 800515c:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
 800515e:	680b      	ldr	r3, [r1, #0]
 8005160:	4631      	mov	r1, r6
}
 8005162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005166:	4718      	bx	r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800516e:	2401      	movs	r4, #1
 8005170:	40b4      	lsls	r4, r6
 8005172:	ea23 0304 	bic.w	r3, r3, r4
 8005176:	e7f1      	b.n	800515c <__sx12xx_configure_pin+0x38>
 8005178:	f06f 0004 	mvn.w	r0, #4
 800517c:	bd70      	pop	{r4, r5, r6, pc}
 800517e:	bf00      	nop

08005180 <sx12xx_lora_send>:

int sx12xx_lora_send(const struct device *dev, uint8_t *data,
		     uint32_t data_len)
{
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		&done);
	uint32_t air_time;
	int ret;

	/* Validate that we have a TX configuration */
	if (!dev_data.tx_cfg.frequency) {
 8005184:	4d41      	ldr	r5, [pc, #260]	; (800528c <sx12xx_lora_send+0x10c>)
{
 8005186:	b08e      	sub	sp, #56	; 0x38
 8005188:	468a      	mov	sl, r1
	if (!dev_data.tx_cfg.frequency) {
 800518a:	6b69      	ldr	r1, [r5, #52]	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800518c:	2400      	movs	r4, #0
 800518e:	ab05      	add	r3, sp, #20
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005190:	2701      	movs	r7, #1
 8005192:	940c      	str	r4, [sp, #48]	; 0x30
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005194:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005198:	e9cd 4407 	strd	r4, r4, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800519c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80051a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80051a2:	930d      	str	r3, [sp, #52]	; 0x34
 80051a4:	f88d 7031 	strb.w	r7, [sp, #49]	; 0x31
	if (!dev_data.tx_cfg.frequency) {
 80051a8:	2900      	cmp	r1, #0
 80051aa:	d068      	beq.n	800527e <sx12xx_lora_send+0xfe>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80051ac:	f3bf 8f5b 	dmb	ish
 80051b0:	f105 0844 	add.w	r8, r5, #68	; 0x44
 80051b4:	e858 1f00 	ldrex	r1, [r8]
 80051b8:	42a1      	cmp	r1, r4
 80051ba:	d103      	bne.n	80051c4 <sx12xx_lora_send+0x44>
 80051bc:	e848 7000 	strex	r0, r7, [r8]
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d1f7      	bne.n	80051b4 <sx12xx_lora_send+0x34>
 80051c4:	f3bf 8f5b 	dmb	ish

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80051c8:	d15c      	bne.n	8005284 <sx12xx_lora_send+0x104>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80051ca:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005290 <sx12xx_lora_send+0x110>
	dev_data.operation_done = async;
 80051ce:	606b      	str	r3, [r5, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80051d0:	b2d6      	uxtb	r6, r2
 80051d2:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 80051d6:	4631      	mov	r1, r6
 80051d8:	4638      	mov	r0, r7
 80051da:	4798      	blx	r3

	Radio.Send(data, data_len);
 80051dc:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80051e0:	4650      	mov	r0, sl
 80051e2:	4631      	mov	r1, r6
 80051e4:	4798      	blx	r3
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80051e6:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80051ee:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051f8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
 80051fc:	f8d9 6024 	ldr.w	r6, [r9, #36]	; 0x24
 8005200:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 8005204:	4638      	mov	r0, r7
 8005206:	47b0      	blx	r6
 8005208:	230a      	movs	r3, #10
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 800520a:	40b8      	lsls	r0, r7
 800520c:	fba0 2303 	umull	r2, r3, r0, r3
	return z_impl_k_poll(events, num_events, timeout);
 8005210:	4639      	mov	r1, r7
 8005212:	a809      	add	r0, sp, #36	; 0x24
 8005214:	f006 fd70 	bl	800bcf8 <z_impl_k_poll>
	if (ret < 0) {
 8005218:	42a0      	cmp	r0, r4
 800521a:	db03      	blt.n	8005224 <sx12xx_lora_send+0xa4>
	return 0;
 800521c:	4620      	mov	r0, r4
}
 800521e:	b00e      	add	sp, #56	; 0x38
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	2302      	movs	r3, #2
 8005226:	f3bf 8f5b 	dmb	ish
 800522a:	e858 2f00 	ldrex	r2, [r8]
 800522e:	42ba      	cmp	r2, r7
 8005230:	d103      	bne.n	800523a <sx12xx_lora_send+0xba>
 8005232:	e848 3100 	strex	r1, r3, [r8]
 8005236:	2900      	cmp	r1, #0
 8005238:	d1f7      	bne.n	800522a <sx12xx_lora_send+0xaa>
 800523a:	f3bf 8f5b 	dmb	ish
 800523e:	bf0c      	ite	eq
 8005240:	463e      	moveq	r6, r7
 8005242:	4626      	movne	r6, r4
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005244:	d111      	bne.n	800526a <sx12xx_lora_send+0xea>
	Radio.Sleep();
 8005246:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800524a:	4798      	blx	r3
	data->operation_done = NULL;
 800524c:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800524e:	f3bf 8f5b 	dmb	ish
 8005252:	e858 3f00 	ldrex	r3, [r8]
 8005256:	e848 4200 	strex	r2, r4, [r8]
 800525a:	2a00      	cmp	r2, #0
 800525c:	d1f9      	bne.n	8005252 <sx12xx_lora_send+0xd2>
 800525e:	f3bf 8f5b 	dmb	ish
	return 0;
 8005262:	4620      	mov	r0, r4
}
 8005264:	b00e      	add	sp, #56	; 0x38
 8005266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800526e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005272:	4639      	mov	r1, r7
 8005274:	a809      	add	r0, sp, #36	; 0x24
 8005276:	f006 fd3f 	bl	800bcf8 <z_impl_k_poll>
	return 0;
 800527a:	4630      	mov	r0, r6
 800527c:	e7cf      	b.n	800521e <sx12xx_lora_send+0x9e>
		return -EINVAL;
 800527e:	f06f 0015 	mvn.w	r0, #21
 8005282:	e7cc      	b.n	800521e <sx12xx_lora_send+0x9e>
		return -EBUSY;
 8005284:	f06f 000f 	mvn.w	r0, #15
 8005288:	e7c9      	b.n	800521e <sx12xx_lora_send+0x9e>
 800528a:	bf00      	nop
 800528c:	20000f88 	.word	0x20000f88
 8005290:	0800e808 	.word	0x0800e808

08005294 <sx12xx_lora_send_async>:
{
 8005294:	b530      	push	{r4, r5, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005296:	4c12      	ldr	r4, [pc, #72]	; (80052e0 <sx12xx_lora_send_async+0x4c>)
 8005298:	f3bf 8f5b 	dmb	ish
 800529c:	b083      	sub	sp, #12
 800529e:	460d      	mov	r5, r1
 80052a0:	f104 0c44 	add.w	ip, r4, #68	; 0x44
 80052a4:	2001      	movs	r0, #1
 80052a6:	e85c 1f00 	ldrex	r1, [ip]
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d104      	bne.n	80052b8 <sx12xx_lora_send_async+0x24>
 80052ae:	e84c 0e00 	strex	lr, r0, [ip]
 80052b2:	f1be 0f00 	cmp.w	lr, #0
 80052b6:	d1f6      	bne.n	80052a6 <sx12xx_lora_send_async+0x12>
 80052b8:	f3bf 8f5b 	dmb	ish
	if (!modem_acquire(&dev_data)) {
 80052bc:	d10c      	bne.n	80052d8 <sx12xx_lora_send_async+0x44>
	dev_data.operation_done = async;
 80052be:	6063      	str	r3, [r4, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 80052c0:	4c08      	ldr	r4, [pc, #32]	; (80052e4 <sx12xx_lora_send_async+0x50>)
 80052c2:	b2d1      	uxtb	r1, r2
 80052c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052c6:	9101      	str	r1, [sp, #4]
 80052c8:	4798      	blx	r3
	Radio.Send(data, data_len);
 80052ca:	4628      	mov	r0, r5
 80052cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052ce:	9901      	ldr	r1, [sp, #4]
 80052d0:	4798      	blx	r3

	return 0;
 80052d2:	2000      	movs	r0, #0
}
 80052d4:	b003      	add	sp, #12
 80052d6:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 80052d8:	f06f 000f 	mvn.w	r0, #15
 80052dc:	e7fa      	b.n	80052d4 <sx12xx_lora_send_async+0x40>
 80052de:	bf00      	nop
 80052e0:	20000f88 	.word	0x20000f88
 80052e4:	0800e808 	.word	0x0800e808

080052e8 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 80052e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052ec:	b08d      	sub	sp, #52	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 80052ee:	2400      	movs	r4, #0
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80052f6:	e9cd 4405 	strd	r4, r4, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 80052fa:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80052fe:	4d34      	ldr	r5, [pc, #208]	; (80053d0 <sx12xx_lora_recv+0xe8>)
 8005300:	940a      	str	r4, [sp, #40]	; 0x28
 8005302:	2701      	movs	r7, #1
{
 8005304:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005308:	9409      	str	r4, [sp, #36]	; 0x24
 800530a:	930b      	str	r3, [sp, #44]	; 0x2c
 800530c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8005310:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8005314:	f3bf 8f5b 	dmb	ish
 8005318:	e858 2f00 	ldrex	r2, [r8]
 800531c:	42a2      	cmp	r2, r4
 800531e:	d103      	bne.n	8005328 <sx12xx_lora_recv+0x40>
 8005320:	e848 7000 	strex	r0, r7, [r8]
 8005324:	2800      	cmp	r0, #0
 8005326:	d1f7      	bne.n	8005318 <sx12xx_lora_recv+0x30>
 8005328:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 800532c:	d14d      	bne.n	80053ca <sx12xx_lora_recv+0xe2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
 800532e:	606b      	str	r3, [r5, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
	dev_data.rx_params.rssi = rssi;
 8005330:	9b16      	ldr	r3, [sp, #88]	; 0x58
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005332:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80053d4 <sx12xx_lora_recv+0xec>
	dev_data.rx_params.rssi = rssi;
 8005336:	652b      	str	r3, [r5, #80]	; 0x50
	dev_data.rx_params.snr = snr;
 8005338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800533a:	656b      	str	r3, [r5, #84]	; 0x54
	dev_data.rx_params.size = &size;
 800533c:	f10d 0307 	add.w	r3, sp, #7
	dev_data.rx_params.buf = data;
 8005340:	64a9      	str	r1, [r5, #72]	; 0x48
	dev_data.rx_params.size = &size;
 8005342:	64eb      	str	r3, [r5, #76]	; 0x4c
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005344:	21ff      	movs	r1, #255	; 0xff
 8005346:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
	dev_data.async_rx_cb = NULL;
 800534a:	60ac      	str	r4, [r5, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800534c:	4638      	mov	r0, r7
 800534e:	4798      	blx	r3
	Radio.Rx(0);
 8005350:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8005354:	4620      	mov	r0, r4
 8005356:	4798      	blx	r3
 8005358:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800535c:	4639      	mov	r1, r7
 800535e:	a807      	add	r0, sp, #28
 8005360:	f006 fcca 	bl	800bcf8 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 8005364:	1e06      	subs	r6, r0, #0
 8005366:	db05      	blt.n	8005374 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 8005368:	f89d 6007 	ldrb.w	r6, [sp, #7]
}
 800536c:	4630      	mov	r0, r6
 800536e:	b00d      	add	sp, #52	; 0x34
 8005370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005374:	2302      	movs	r3, #2
 8005376:	f3bf 8f5b 	dmb	ish
 800537a:	e858 2f00 	ldrex	r2, [r8]
 800537e:	42ba      	cmp	r2, r7
 8005380:	d103      	bne.n	800538a <sx12xx_lora_recv+0xa2>
 8005382:	e848 3100 	strex	r1, r3, [r8]
 8005386:	2900      	cmp	r1, #0
 8005388:	d1f7      	bne.n	800537a <sx12xx_lora_recv+0x92>
 800538a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800538e:	d111      	bne.n	80053b4 <sx12xx_lora_recv+0xcc>
	Radio.Sleep();
 8005390:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8005394:	4798      	blx	r3
	data->operation_done = NULL;
 8005396:	606c      	str	r4, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005398:	f3bf 8f5b 	dmb	ish
 800539c:	e858 3f00 	ldrex	r3, [r8]
 80053a0:	e848 4200 	strex	r2, r4, [r8]
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	d1f9      	bne.n	800539c <sx12xx_lora_recv+0xb4>
 80053a8:	f3bf 8f5b 	dmb	ish
}
 80053ac:	4630      	mov	r0, r6
 80053ae:	b00d      	add	sp, #52	; 0x34
 80053b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053bc:	4639      	mov	r1, r7
 80053be:	a807      	add	r0, sp, #28
 80053c0:	f006 fc9a 	bl	800bcf8 <z_impl_k_poll>
			return size;
 80053c4:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80053c8:	e7d0      	b.n	800536c <sx12xx_lora_recv+0x84>
		return -EBUSY;
 80053ca:	f06f 060f 	mvn.w	r6, #15
 80053ce:	e7cd      	b.n	800536c <sx12xx_lora_recv+0x84>
 80053d0:	20000f88 	.word	0x20000f88
 80053d4:	0800e808 	.word	0x0800e808

080053d8 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb,
  lora_recv_error_timeout_cb error_timeout_cb)
{
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	460e      	mov	r6, r1
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 80053dc:	b1ea      	cbz	r2, 800541a <sx12xx_lora_recv_async+0x42>
 80053de:	2900      	cmp	r1, #0
 80053e0:	d03d      	beq.n	800545e <sx12xx_lora_recv_async+0x86>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80053e2:	f3bf 8f5b 	dmb	ish
 80053e6:	4b21      	ldr	r3, [pc, #132]	; (800546c <sx12xx_lora_recv_async+0x94>)
 80053e8:	2001      	movs	r0, #1
 80053ea:	f103 0c44 	add.w	ip, r3, #68	; 0x44
 80053ee:	e85c 4f00 	ldrex	r4, [ip]
 80053f2:	2c00      	cmp	r4, #0
 80053f4:	d103      	bne.n	80053fe <sx12xx_lora_recv_async+0x26>
 80053f6:	e84c 0100 	strex	r1, r0, [ip]
 80053fa:	2900      	cmp	r1, #0
 80053fc:	d1f7      	bne.n	80053ee <sx12xx_lora_recv_async+0x16>
 80053fe:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 8005402:	d12f      	bne.n	8005464 <sx12xx_lora_recv_async+0x8c>
	/* Store parameters */
	dev_data.async_rx_cb = cb;
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8005404:	4c1a      	ldr	r4, [pc, #104]	; (8005470 <sx12xx_lora_recv_async+0x98>)
   dev_data.async_rx_error_timeout_cb = error_timeout_cb;
 8005406:	e9c3 6202 	strd	r6, r2, [r3, #8]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 800540a:	21ff      	movs	r1, #255	; 0xff
 800540c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800540e:	4798      	blx	r3
	Radio.Rx(0);
 8005410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005412:	2000      	movs	r0, #0
 8005414:	4798      	blx	r3

	return 0;
 8005416:	2000      	movs	r0, #0
}
 8005418:	bd70      	pop	{r4, r5, r6, pc}
  if (((error_timeout_cb == NULL) && cb) || (error_timeout_cb && (cb == NULL))) {
 800541a:	bb01      	cbnz	r1, 800545e <sx12xx_lora_recv_async+0x86>
 800541c:	f3bf 8f5b 	dmb	ish
 8005420:	4d12      	ldr	r5, [pc, #72]	; (800546c <sx12xx_lora_recv_async+0x94>)
 8005422:	2302      	movs	r3, #2
 8005424:	f105 0444 	add.w	r4, r5, #68	; 0x44
 8005428:	e854 2f00 	ldrex	r2, [r4]
 800542c:	2a01      	cmp	r2, #1
 800542e:	d103      	bne.n	8005438 <sx12xx_lora_recv_async+0x60>
 8005430:	e844 3100 	strex	r1, r3, [r4]
 8005434:	2900      	cmp	r1, #0
 8005436:	d1f7      	bne.n	8005428 <sx12xx_lora_recv_async+0x50>
 8005438:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800543c:	d10f      	bne.n	800545e <sx12xx_lora_recv_async+0x86>
	Radio.Sleep();
 800543e:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <sx12xx_lora_recv_async+0x98>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4798      	blx	r3
	data->operation_done = NULL;
 8005444:	606e      	str	r6, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005446:	f3bf 8f5b 	dmb	ish
 800544a:	e854 3f00 	ldrex	r3, [r4]
 800544e:	e844 6200 	strex	r2, r6, [r4]
 8005452:	2a00      	cmp	r2, #0
 8005454:	d1f9      	bne.n	800544a <sx12xx_lora_recv_async+0x72>
 8005456:	f3bf 8f5b 	dmb	ish
		return 0;
 800545a:	4630      	mov	r0, r6
}
 800545c:	bd70      	pop	{r4, r5, r6, pc}
      return -EINVAL;
 800545e:	f06f 0015 	mvn.w	r0, #21
}
 8005462:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005464:	f06f 000f 	mvn.w	r0, #15
}
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	bf00      	nop
 800546c:	20000f88 	.word	0x20000f88
 8005470:	0800e808 	.word	0x0800e808

08005474 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005478:	4e3e      	ldr	r6, [pc, #248]	; (8005574 <sx12xx_lora_config+0x100>)
 800547a:	f3bf 8f5b 	dmb	ish
 800547e:	b08c      	sub	sp, #48	; 0x30
 8005480:	460c      	mov	r4, r1
 8005482:	f106 0544 	add.w	r5, r6, #68	; 0x44
 8005486:	f04f 0801 	mov.w	r8, #1
 800548a:	e855 3f00 	ldrex	r3, [r5]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <sx12xx_lora_config+0x26>
 8005492:	e845 8200 	strex	r2, r8, [r5]
 8005496:	2a00      	cmp	r2, #0
 8005498:	d1f7      	bne.n	800548a <sx12xx_lora_config+0x16>
 800549a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800549e:	d165      	bne.n	800556c <sx12xx_lora_config+0xf8>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 80054a0:	4f35      	ldr	r7, [pc, #212]	; (8005578 <sx12xx_lora_config+0x104>)
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4798      	blx	r3

	if (config->tx) {
 80054a8:	7b63      	ldrb	r3, [r4, #13]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d13c      	bne.n	8005528 <sx12xx_lora_config+0xb4>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80054ae:	7ae3      	ldrb	r3, [r4, #11]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d137      	bne.n	8005524 <sx12xx_lora_config+0xb0>
 80054b4:	461a      	mov	r2, r3

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 80054b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80054ba:	230a      	movs	r3, #10
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	8923      	ldrh	r3, [r4, #8]
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80054cc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80054d0:	2001      	movs	r0, #1
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	9009      	str	r0, [sp, #36]	; 0x24
 80054d6:	79a3      	ldrb	r3, [r4, #6]
 80054d8:	7962      	ldrb	r2, [r4, #5]
 80054da:	7921      	ldrb	r1, [r4, #4]
 80054dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80054de:	47a0      	blx	r4
 80054e0:	f3bf 8f5b 	dmb	ish
 80054e4:	2302      	movs	r3, #2
 80054e6:	e855 2f00 	ldrex	r2, [r5]
 80054ea:	2a01      	cmp	r2, #1
 80054ec:	d103      	bne.n	80054f6 <sx12xx_lora_config+0x82>
 80054ee:	e845 3100 	strex	r1, r3, [r5]
 80054f2:	2900      	cmp	r1, #0
 80054f4:	d1f7      	bne.n	80054e6 <sx12xx_lora_config+0x72>
 80054f6:	f3bf 8f5b 	dmb	ish
 80054fa:	bf0c      	ite	eq
 80054fc:	2001      	moveq	r0, #1
 80054fe:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005500:	d10d      	bne.n	800551e <sx12xx_lora_config+0xaa>
	Radio.Sleep();
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	4798      	blx	r3
	data->operation_done = NULL;
 8005506:	2000      	movs	r0, #0
 8005508:	6070      	str	r0, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800550a:	f3bf 8f5b 	dmb	ish
 800550e:	e855 3f00 	ldrex	r3, [r5]
 8005512:	e845 0200 	strex	r2, r0, [r5]
 8005516:	2a00      	cmp	r2, #0
 8005518:	d1f9      	bne.n	800550e <sx12xx_lora_config+0x9a>
 800551a:	f3bf 8f5b 	dmb	ish
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
	return 0;
}
 800551e:	b00c      	add	sp, #48	; 0x30
 8005520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8005524:	7aa2      	ldrb	r2, [r4, #10]
 8005526:	e7c6      	b.n	80054b6 <sx12xx_lora_config+0x42>
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8005528:	f8cd 8010 	str.w	r8, [sp, #16]
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	6861      	ldr	r1, [r4, #4]
 8005530:	68a2      	ldr	r2, [r4, #8]
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	f106 0c34 	add.w	ip, r6, #52	; 0x34
 8005538:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 800553c:	2200      	movs	r2, #0
 800553e:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8005542:	9205      	str	r2, [sp, #20]
 8005544:	7ae3      	ldrb	r3, [r4, #11]
 8005546:	9303      	str	r3, [sp, #12]
 8005548:	8923      	ldrh	r3, [r4, #8]
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	79a3      	ldrb	r3, [r4, #6]
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	7963      	ldrb	r3, [r4, #5]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005558:	9308      	str	r3, [sp, #32]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	930b      	str	r3, [sp, #44]	; 0x2c
 800555e:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8005562:	7923      	ldrb	r3, [r4, #4]
 8005564:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005566:	4640      	mov	r0, r8
 8005568:	47a0      	blx	r4
 800556a:	e7b9      	b.n	80054e0 <sx12xx_lora_config+0x6c>
		return -EBUSY;
 800556c:	f06f 000f 	mvn.w	r0, #15
 8005570:	e7d5      	b.n	800551e <sx12xx_lora_config+0xaa>
 8005572:	bf00      	nop
 8005574:	20000f88 	.word	0x20000f88
 8005578:	0800e808 	.word	0x0800e808

0800557c <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 800557c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557e:	b08b      	sub	sp, #44	; 0x2c
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005580:	2500      	movs	r5, #0
 8005582:	ae01      	add	r6, sp, #4
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005584:	9508      	str	r5, [sp, #32]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005586:	e9cd 5503 	strd	r5, r5, [sp, #12]
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800558a:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800558e:	9505      	str	r5, [sp, #20]
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005590:	e9cd 6601 	strd	r6, r6, [sp, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005594:	4d31      	ldr	r5, [pc, #196]	; (800565c <sx12xx_lora_test_cw+0xe0>)
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005596:	9609      	str	r6, [sp, #36]	; 0x24
{
 8005598:	461c      	mov	r4, r3
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800559a:	2301      	movs	r3, #1
{
 800559c:	4608      	mov	r0, r1
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800559e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
{
 80055a2:	4611      	mov	r1, r2
 80055a4:	f105 0744 	add.w	r7, r5, #68	; 0x44
 80055a8:	f3bf 8f5b 	dmb	ish
 80055ac:	e857 2f00 	ldrex	r2, [r7]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d104      	bne.n	80055be <sx12xx_lora_test_cw+0x42>
 80055b4:	e847 3c00 	strex	ip, r3, [r7]
 80055b8:	f1bc 0f00 	cmp.w	ip, #0
 80055bc:	d1f6      	bne.n	80055ac <sx12xx_lora_test_cw+0x30>
 80055be:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 80055c2:	d148      	bne.n	8005656 <sx12xx_lora_test_cw+0xda>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 80055c4:	606e      	str	r6, [r5, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 80055c6:	4e26      	ldr	r6, [pc, #152]	; (8005660 <sx12xx_lora_test_cw+0xe4>)
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 80055c8:	4b26      	ldr	r3, [pc, #152]	; (8005664 <sx12xx_lora_test_cw+0xe8>)
 80055ca:	616b      	str	r3, [r5, #20]
	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 80055cc:	4622      	mov	r2, r4
 80055ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80055d0:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 80055d2:	b954      	cbnz	r4, 80055ea <sx12xx_lora_test_cw+0x6e>
	compiler_barrier();
 80055d4:	4622      	mov	r2, r4
 80055d6:	4623      	mov	r3, r4
	return z_impl_k_poll(events, num_events, timeout);
 80055d8:	2101      	movs	r1, #1
 80055da:	a805      	add	r0, sp, #20
 80055dc:	f006 fb8c 	bl	800bcf8 <z_impl_k_poll>
    if (ret < 0) {
 80055e0:	2800      	cmp	r0, #0
 80055e2:	db0f      	blt.n	8005604 <sx12xx_lora_test_cw+0x88>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 80055e4:	2000      	movs	r0, #0
}
 80055e6:	b00b      	add	sp, #44	; 0x2c
 80055e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 80055ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80055ee:	fb02 f404 	mul.w	r4, r2, r4
 80055f2:	220a      	movs	r2, #10
 80055f4:	fb84 2302 	smull	r2, r3, r4, r2
 80055f8:	2101      	movs	r1, #1
 80055fa:	a805      	add	r0, sp, #20
 80055fc:	f006 fb7c 	bl	800bcf8 <z_impl_k_poll>
    if (ret < 0) {
 8005600:	2800      	cmp	r0, #0
 8005602:	daef      	bge.n	80055e4 <sx12xx_lora_test_cw+0x68>
 8005604:	f3bf 8f5b 	dmb	ish
 8005608:	2302      	movs	r3, #2
 800560a:	e857 2f00 	ldrex	r2, [r7]
 800560e:	2a01      	cmp	r2, #1
 8005610:	d103      	bne.n	800561a <sx12xx_lora_test_cw+0x9e>
 8005612:	e847 3100 	strex	r1, r3, [r7]
 8005616:	2900      	cmp	r1, #0
 8005618:	d1f7      	bne.n	800560a <sx12xx_lora_test_cw+0x8e>
 800561a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 800561e:	d111      	bne.n	8005644 <sx12xx_lora_test_cw+0xc8>
	Radio.Sleep();
 8005620:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005622:	4798      	blx	r3
	data->operation_done = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005628:	f3bf 8f5b 	dmb	ish
 800562c:	e857 2f00 	ldrex	r2, [r7]
 8005630:	e847 3100 	strex	r1, r3, [r7]
 8005634:	2900      	cmp	r1, #0
 8005636:	d1f9      	bne.n	800562c <sx12xx_lora_test_cw+0xb0>
 8005638:	f3bf 8f5b 	dmb	ish
        dev_data.events.TxTimeout = NULL;
 800563c:	2000      	movs	r0, #0
 800563e:	6168      	str	r0, [r5, #20]
}
 8005640:	b00b      	add	sp, #44	; 0x2c
 8005642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564c:	2101      	movs	r1, #1
 800564e:	a805      	add	r0, sp, #20
 8005650:	f006 fb52 	bl	800bcf8 <z_impl_k_poll>
 8005654:	e7f2      	b.n	800563c <sx12xx_lora_test_cw+0xc0>
		return -EBUSY;
 8005656:	f06f 000f 	mvn.w	r0, #15
 800565a:	e7c4      	b.n	80055e6 <sx12xx_lora_test_cw+0x6a>
 800565c:	20000f88 	.word	0x20000f88
 8005660:	0800e808 	.word	0x0800e808
 8005664:	080050c5 	.word	0x080050c5

08005668 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8005668:	b191      	cbz	r1, 8005690 <sx12xx_lora_time_on_air+0x28>
{
 800566a:	b530      	push	{r4, r5, lr}
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 800566c:	4c0a      	ldr	r4, [pc, #40]	; (8005698 <sx12xx_lora_time_on_air+0x30>)
 800566e:	7acd      	ldrb	r5, [r1, #11]
 8005670:	890b      	ldrh	r3, [r1, #8]
{
 8005672:	b085      	sub	sp, #20
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	9202      	str	r2, [sp, #8]
 8005678:	2001      	movs	r0, #1
 800567a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800567c:	9501      	str	r5, [sp, #4]
 800567e:	9003      	str	r0, [sp, #12]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	798b      	ldrb	r3, [r1, #6]
 8005684:	4614      	mov	r4, r2
 8005686:	794a      	ldrb	r2, [r1, #5]
 8005688:	7909      	ldrb	r1, [r1, #4]
 800568a:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 800568c:	b005      	add	sp, #20
 800568e:	bd30      	pop	{r4, r5, pc}
        return -EINVAL;
 8005690:	f06f 0015 	mvn.w	r0, #21
}
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	0800e808 	.word	0x0800e808

0800569c <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 800569c:	2900      	cmp	r1, #0
 800569e:	d03e      	beq.n	800571e <sx12xx_lora_is_channel_free+0x82>
{
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80056a2:	4e20      	ldr	r6, [pc, #128]	; (8005724 <sx12xx_lora_is_channel_free+0x88>)
 80056a4:	f3bf 8f5b 	dmb	ish
 80056a8:	f106 0444 	add.w	r4, r6, #68	; 0x44
 80056ac:	2001      	movs	r0, #1
 80056ae:	e854 5f00 	ldrex	r5, [r4]
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	d103      	bne.n	80056be <sx12xx_lora_is_channel_free+0x22>
 80056b6:	e844 0700 	strex	r7, r0, [r4]
 80056ba:	2f00      	cmp	r7, #0
 80056bc:	d1f7      	bne.n	80056ae <sx12xx_lora_is_channel_free+0x12>
 80056be:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 80056c2:	d129      	bne.n	8005718 <sx12xx_lora_is_channel_free+0x7c>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 80056c4:	790d      	ldrb	r5, [r1, #4]
 80056c6:	6808      	ldr	r0, [r1, #0]
 80056c8:	4f17      	ldr	r7, [pc, #92]	; (8005728 <sx12xx_lora_is_channel_free+0x8c>)
 80056ca:	4918      	ldr	r1, [pc, #96]	; (800572c <sx12xx_lora_is_channel_free+0x90>)
 80056cc:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 80056d0:	693d      	ldr	r5, [r7, #16]
 80056d2:	47a8      	blx	r5
 80056d4:	f3bf 8f5b 	dmb	ish
 80056d8:	4605      	mov	r5, r0
 80056da:	2302      	movs	r3, #2
 80056dc:	e854 2f00 	ldrex	r2, [r4]
 80056e0:	2a01      	cmp	r2, #1
 80056e2:	d103      	bne.n	80056ec <sx12xx_lora_is_channel_free+0x50>
 80056e4:	e844 3100 	strex	r1, r3, [r4]
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d1f7      	bne.n	80056dc <sx12xx_lora_is_channel_free+0x40>
 80056ec:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80056f0:	d10f      	bne.n	8005712 <sx12xx_lora_is_channel_free+0x76>
	Radio.Sleep();
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	4798      	blx	r3
	data->operation_done = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	6073      	str	r3, [r6, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80056fa:	f3bf 8f5b 	dmb	ish
 80056fe:	e854 2f00 	ldrex	r2, [r4]
 8005702:	e844 3100 	strex	r1, r3, [r4]
 8005706:	2900      	cmp	r1, #0
 8005708:	d1f9      	bne.n	80056fe <sx12xx_lora_is_channel_free+0x62>
 800570a:	f3bf 8f5b 	dmb	ish
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 800570e:	4628      	mov	r0, r5
}
 8005710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 8005712:	f06f 0015 	mvn.w	r0, #21
}
 8005716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EBUSY;
 8005718:	f06f 000f 	mvn.w	r0, #15
}
 800571c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
 800571e:	f06f 0015 	mvn.w	r0, #21
}
 8005722:	4770      	bx	lr
 8005724:	20000f88 	.word	0x20000f88
 8005728:	0800e808 	.word	0x0800e808
 800572c:	0800e7f4 	.word	0x0800e7f4

08005730 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <sx12xx_init+0x40>)
 8005734:	f3bf 8f5b 	dmb	ish
 8005738:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800573c:	2400      	movs	r4, #0
 800573e:	e852 1f00 	ldrex	r1, [r2]
 8005742:	e842 4500 	strex	r5, r4, [r2]
 8005746:	2d00      	cmp	r5, #0
 8005748:	d1f9      	bne.n	800573e <sx12xx_init+0xe>
 800574a:	f3bf 8f5b 	dmb	ish
	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
	Radio.Init(&dev_data.events);
 800574e:	4d09      	ldr	r5, [pc, #36]	; (8005774 <sx12xx_init+0x44>)
  dev_data.events.RxError = sx12xx_ev_rx_error_timeout;
 8005750:	4a09      	ldr	r2, [pc, #36]	; (8005778 <sx12xx_init+0x48>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8005752:	490a      	ldr	r1, [pc, #40]	; (800577c <sx12xx_init+0x4c>)
 8005754:	6119      	str	r1, [r3, #16]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8005756:	490a      	ldr	r1, [pc, #40]	; (8005780 <sx12xx_init+0x50>)
 8005758:	6199      	str	r1, [r3, #24]
  dev_data.events.RxTimeout = sx12xx_ev_rx_error_timeout;
 800575a:	e9c3 2207 	strd	r2, r2, [r3, #28]
	dev_data.dev = dev;
 800575e:	6018      	str	r0, [r3, #0]
	Radio.Init(&dev_data.events);
 8005760:	682a      	ldr	r2, [r5, #0]
 8005762:	f103 0010 	add.w	r0, r3, #16
 8005766:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8005768:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800576a:	4798      	blx	r3

	return 0;
}
 800576c:	4620      	mov	r0, r4
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20000f88 	.word	0x20000f88
 8005774:	0800e808 	.word	0x0800e808
 8005778:	08004f99 	.word	0x08004f99
 800577c:	08005069 	.word	0x08005069
 8005780:	08004fbd 	.word	0x08004fbd

08005784 <SX1276CheckRfFrequency>:

bool SX127xCheckRfFrequency(uint32_t frequency)
{
	/* TODO */
	return true;
}
 8005784:	2001      	movs	r0, #1
 8005786:	4770      	bx	lr

08005788 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <sx127x_dio_work_handle+0x10>)

	(*DioIrq[dio])(NULL);
 800578a:	4a04      	ldr	r2, [pc, #16]	; (800579c <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	1103      	asrs	r3, r0, #4
	(*DioIrq[dio])(NULL);
 8005790:	2000      	movs	r0, #0
 8005792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005796:	4718      	bx	r3
 8005798:	20001034 	.word	0x20001034
 800579c:	20000270 	.word	0x20000270

080057a0 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	4c10      	ldr	r4, [pc, #64]	; (80057e8 <sx127x_irq_callback+0x48>)
 80057a6:	4e11      	ldr	r6, [pc, #68]	; (80057ec <sx127x_irq_callback+0x4c>)
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	f104 0510 	add.w	r5, r4, #16
 80057ae:	fa92 f7a2 	rbit	r7, r2
 80057b2:	fab7 f787 	clz	r7, r7
 80057b6:	4680      	mov	r8, r0
 80057b8:	bf08      	it	eq
 80057ba:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80057be:	46a9      	mov	r9, r5
		if (dev == dev_data.dio_dev[i] &&
 80057c0:	f854 3b04 	ldr.w	r3, [r4], #4
 80057c4:	4543      	cmp	r3, r8
 80057c6:	d007      	beq.n	80057d8 <sx127x_irq_callback+0x38>
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80057c8:	454c      	cmp	r4, r9
 80057ca:	f105 0510 	add.w	r5, r5, #16
 80057ce:	f106 0608 	add.w	r6, r6, #8
 80057d2:	d1f5      	bne.n	80057c0 <sx127x_irq_callback+0x20>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
		}
	}
}
 80057d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    pin == sx127x_dios[i].pin) {
 80057d8:	7933      	ldrb	r3, [r6, #4]
		if (dev == dev_data.dio_dev[i] &&
 80057da:	42bb      	cmp	r3, r7
 80057dc:	d1f4      	bne.n	80057c8 <sx127x_irq_callback+0x28>
			k_work_submit(&dev_data.dio_work[i]);
 80057de:	4628      	mov	r0, r5
 80057e0:	f005 f882 	bl	800a8e8 <k_work_submit>
 80057e4:	e7f0      	b.n	80057c8 <sx127x_irq_callback+0x28>
 80057e6:	bf00      	nop
 80057e8:	20001024 	.word	0x20001024
 80057ec:	0800e874 	.word	0x0800e874

080057f0 <SX1276WriteBuffer>:
{
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
}

void SX127xWriteBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 80057f0:	b530      	push	{r4, r5, lr}
 80057f2:	b089      	sub	sp, #36	; 0x24
	const struct spi_buf buf[2] = {
 80057f4:	f10d 0507 	add.w	r5, sp, #7
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 80057f8:	4c0b      	ldr	r4, [pc, #44]	; (8005828 <SX1276WriteBuffer+0x38>)
	const struct spi_buf buf[2] = {
 80057fa:	2301      	movs	r3, #1
 80057fc:	e9cd 5304 	strd	r5, r3, [sp, #16]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 8005800:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
 8005804:	ad04      	add	r5, sp, #16
 8005806:	2302      	movs	r3, #2
 8005808:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800580c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	struct spi_buf_set tx = {
 8005810:	e9cd 5302 	strd	r5, r3, [sp, #8]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8005814:	6860      	ldr	r0, [r4, #4]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8005816:	6882      	ldr	r2, [r0, #8]
 8005818:	2300      	movs	r3, #0
 800581a:	6815      	ldr	r5, [r2, #0]
 800581c:	f104 0108 	add.w	r1, r4, #8
 8005820:	aa02      	add	r2, sp, #8
 8005822:	47a8      	blx	r5

	ret = sx127x_write(addr, buffer, size);
	if (ret < 0) {
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}
 8005824:	b009      	add	sp, #36	; 0x24
 8005826:	bd30      	pop	{r4, r5, pc}
 8005828:	20001010 	.word	0x20001010

0800582c <SX1276ReadBuffer>:

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 800582c:	b530      	push	{r4, r5, lr}
 800582e:	b08b      	sub	sp, #44	; 0x2c
	const struct spi_buf buf[2] = {
 8005830:	f10d 0307 	add.w	r3, sp, #7
	struct spi_buf_set tx = {
 8005834:	ad06      	add	r5, sp, #24
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8005836:	4c0b      	ldr	r4, [pc, #44]	; (8005864 <SX1276ReadBuffer+0x38>)
	const struct spi_buf buf[2] = {
 8005838:	9306      	str	r3, [sp, #24]
	struct spi_buf_set tx = {
 800583a:	2302      	movs	r3, #2
 800583c:	e9cd 5302 	strd	r5, r3, [sp, #8]
		const struct spi_buf_set rx = {
 8005840:	e9cd 5304 	strd	r5, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 8005844:	2301      	movs	r3, #1
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8005846:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 800584a:	9108      	str	r1, [sp, #32]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 800584c:	6860      	ldr	r0, [r4, #4]
	return sx127x_transceive(reg_addr, false, data, len);
 800584e:	9209      	str	r2, [sp, #36]	; 0x24
	const struct spi_buf buf[2] = {
 8005850:	9307      	str	r3, [sp, #28]
 8005852:	6882      	ldr	r2, [r0, #8]
 8005854:	ab04      	add	r3, sp, #16
 8005856:	6815      	ldr	r5, [r2, #0]
 8005858:	f104 0108 	add.w	r1, r4, #8
 800585c:	aa02      	add	r2, sp, #8
 800585e:	47a8      	blx	r5
	if (ret < 0) {
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8005860:	b00b      	add	sp, #44	; 0x2c
 8005862:	bd30      	pop	{r4, r5, pc}
 8005864:	20001010 	.word	0x20001010

08005868 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	b08a      	sub	sp, #40	; 0x28
 800586e:	482f      	ldr	r0, [pc, #188]	; (800592c <sx127x_lora_init+0xc4>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8005870:	4c2f      	ldr	r4, [pc, #188]	; (8005930 <sx127x_lora_init+0xc8>)
 8005872:	f004 fb2d 	bl	8009ed0 <z_impl_device_get_binding>
 8005876:	6060      	str	r0, [r4, #4]
	if (!dev_data.spi) {
 8005878:	2800      	cmp	r0, #0
 800587a:	d054      	beq.n	8005926 <sx127x_lora_init+0xbe>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 800587c:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <sx127x_lora_init+0xcc>)
 800587e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005882:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005886:	482c      	ldr	r0, [pc, #176]	; (8005938 <sx127x_lora_init+0xd0>)
 8005888:	f004 fb22 	bl	8009ed0 <z_impl_device_get_binding>
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <sx127x_lora_init+0xd4>)
 800588e:	6010      	str	r0, [r2, #0]
	if (!spi_cs.gpio_dev) {
 8005890:	2800      	cmp	r0, #0
 8005892:	d045      	beq.n	8005920 <sx127x_lora_init+0xb8>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8005894:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8005898:	8093      	strh	r3, [r2, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
	spi_cs.delay = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	6093      	str	r3, [r2, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 800589e:	6122      	str	r2, [r4, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 80058a0:	4927      	ldr	r1, [pc, #156]	; (8005940 <sx127x_lora_init+0xd8>)
 80058a2:	f641 2307 	movw	r3, #6663	; 0x1a07
 80058a6:	2208      	movs	r2, #8
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fc3b 	bl	8005124 <__sx12xx_configure_pin>
	if (ret) {
 80058ae:	b108      	cbz	r0, 80058b4 <sx127x_lora_init+0x4c>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 80058b0:	b00a      	add	sp, #40	; 0x28
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
 80058b4:	2100      	movs	r1, #0
 80058b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ba:	f005 fc89 	bl	800b1d0 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 80058be:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80058c0:	6903      	ldr	r3, [r0, #16]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	05db      	lsls	r3, r3, #23
	return api->port_clear_bits_raw(port, pins);
 80058c6:	6883      	ldr	r3, [r0, #8]
 80058c8:	4631      	mov	r1, r6
 80058ca:	bf54      	ite	pl
 80058cc:	691b      	ldrpl	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
 80058ce:	68db      	ldrmi	r3, [r3, #12]
 80058d0:	4798      	blx	r3
 80058d2:	2100      	movs	r1, #0
 80058d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058d8:	f005 fc7a 	bl	800b1d0 <z_impl_k_sleep>
	struct spi_buf_set tx = {
 80058dc:	aa06      	add	r2, sp, #24
 80058de:	2302      	movs	r3, #2
 80058e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
		const struct spi_buf_set rx = {
 80058e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	const struct spi_buf buf[2] = {
 80058e8:	2101      	movs	r1, #1
 80058ea:	2042      	movs	r0, #66	; 0x42
 80058ec:	f10d 0207 	add.w	r2, sp, #7
 80058f0:	f10d 0306 	add.w	r3, sp, #6
 80058f4:	f88d 0007 	strb.w	r0, [sp, #7]
 80058f8:	9107      	str	r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80058fa:	6860      	ldr	r0, [r4, #4]
	const struct spi_buf buf[2] = {
 80058fc:	9109      	str	r1, [sp, #36]	; 0x24
 80058fe:	9206      	str	r2, [sp, #24]
 8005900:	9308      	str	r3, [sp, #32]
 8005902:	6882      	ldr	r2, [r0, #8]
 8005904:	490f      	ldr	r1, [pc, #60]	; (8005944 <sx127x_lora_init+0xdc>)
 8005906:	6814      	ldr	r4, [r2, #0]
 8005908:	ab04      	add	r3, sp, #16
 800590a:	aa02      	add	r2, sp, #8
 800590c:	47a0      	blx	r4
	if (ret < 0) {
 800590e:	2800      	cmp	r0, #0
 8005910:	db06      	blt.n	8005920 <sx127x_lora_init+0xb8>
	ret = sx12xx_init(dev);
 8005912:	4628      	mov	r0, r5
 8005914:	f7ff ff0c 	bl	8005730 <sx12xx_init>
	if (ret < 0) {
 8005918:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 800591c:	b00a      	add	sp, #40	; 0x28
 800591e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8005920:	f06f 0004 	mvn.w	r0, #4
 8005924:	e7c4      	b.n	80058b0 <sx127x_lora_init+0x48>
		return -EINVAL;
 8005926:	f06f 0015 	mvn.w	r0, #21
 800592a:	e7c1      	b.n	80058b0 <sx127x_lora_init+0x48>
 800592c:	0800e764 	.word	0x0800e764
 8005930:	20001010 	.word	0x20001010
 8005934:	004c4b40 	.word	0x004c4b40
 8005938:	0800e618 	.word	0x0800e618
 800593c:	20001074 	.word	0x20001074
 8005940:	0800e610 	.word	0x0800e610
 8005944:	20001018 	.word	0x20001018

08005948 <SX1276GetBoardTcxoWakeupTime>:
}
 8005948:	2000      	movs	r0, #0
 800594a:	4770      	bx	lr

0800594c <SX1276SetAntSwLowPower>:
}
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <SX1276SetBoardTcxo>:
}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <SX1276SetAntSw>:
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop

08005958 <SX1276Reset>:
{
 8005958:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 800595a:	4c10      	ldr	r4, [pc, #64]	; (800599c <SX1276Reset+0x44>)
 800595c:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800595e:	6903      	ldr	r3, [r0, #16]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	05da      	lsls	r2, r3, #23
	return api->port_set_bits_raw(port, pins);
 8005964:	6883      	ldr	r3, [r0, #8]
 8005966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596a:	bf54      	ite	pl
 800596c:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800596e:	691b      	ldrmi	r3, [r3, #16]
 8005970:	4798      	blx	r3
 8005972:	2100      	movs	r1, #0
 8005974:	200a      	movs	r0, #10
 8005976:	f005 fc2b 	bl	800b1d0 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 800597a:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800597c:	6903      	ldr	r3, [r0, #16]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	05db      	lsls	r3, r3, #23
	return api->port_set_bits_raw(port, pins);
 8005982:	6883      	ldr	r3, [r0, #8]
 8005984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005988:	bf4c      	ite	mi
 800598a:	68db      	ldrmi	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 800598c:	691b      	ldrpl	r3, [r3, #16]
 800598e:	4798      	blx	r3
 8005990:	203c      	movs	r0, #60	; 0x3c
}
 8005992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005996:	2100      	movs	r1, #0
 8005998:	f005 bc1a 	b.w	800b1d0 <z_impl_k_sleep>
 800599c:	20001010 	.word	0x20001010

080059a0 <SX1276IoIrqInit>:
{
 80059a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4c31      	ldr	r4, [pc, #196]	; (8005a6c <SX1276IoIrqInit+0xcc>)
 80059a6:	4e32      	ldr	r6, [pc, #200]	; (8005a70 <SX1276IoIrqInit+0xd0>)
 80059a8:	4d32      	ldr	r5, [pc, #200]	; (8005a74 <SX1276IoIrqInit+0xd4>)
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 80059aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a80 <SX1276IoIrqInit+0xe0>
 80059ae:	f104 0810 	add.w	r8, r4, #16
 80059b2:	f1a0 0904 	sub.w	r9, r0, #4
		if (!irqHandlers[i]) {
 80059b6:	f859 3f04 	ldr.w	r3, [r9, #4]!
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d041      	beq.n	8005a42 <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 80059be:	6828      	ldr	r0, [r5, #0]
 80059c0:	f004 fa86 	bl	8009ed0 <z_impl_device_get_binding>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 80059c4:	4651      	mov	r1, sl
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 80059c6:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d044      	beq.n	8005a56 <SX1276IoIrqInit+0xb6>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 80059cc:	4640      	mov	r0, r8
 80059ce:	f004 ff61 	bl	800a894 <k_work_init>
				   | sx127x_dios[i].flags);
 80059d2:	f895 e005 	ldrb.w	lr, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	7929      	ldrb	r1, [r5, #4]
 80059da:	f44e 2b00 	orr.w	fp, lr, #524288	; 0x80000
 80059de:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80059e2:	2301      	movs	r3, #1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80059e4:	f01e 0f01 	tst.w	lr, #1
	struct gpio_driver_data *data =
 80059e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
 80059ec:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80059ee:	fa03 f301 	lsl.w	r3, r3, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80059f2:	d032      	beq.n	8005a5a <SX1276IoIrqInit+0xba>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80059f4:	f8dc 2000 	ldr.w	r2, [ip]
 80059f8:	4313      	orrs	r3, r2
	return api->pin_configure(port, pin, flags);
 80059fa:	465a      	mov	r2, fp
 80059fc:	f8cc 3000 	str.w	r3, [ip]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8005a04:	6820      	ldr	r0, [r4, #0]
	callback->handler = handler;
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <SX1276IoIrqInit+0xd8>)
 8005a08:	6073      	str	r3, [r6, #4]
	if (api->manage_callback == NULL) {
 8005a0a:	6883      	ldr	r3, [r0, #8]
				   BIT(sx127x_dios[i].pin));
 8005a0c:	f895 b004 	ldrb.w	fp, [r5, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	2201      	movs	r2, #1
 8005a14:	fa02 f70b 	lsl.w	r7, r2, fp
	callback->pin_mask = pin_mask;
 8005a18:	60b7      	str	r7, [r6, #8]
	if (api->manage_callback == NULL) {
 8005a1a:	b1e3      	cbz	r3, 8005a56 <SX1276IoIrqInit+0xb6>
	return api->manage_callback(port, callback, true);
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8005a20:	2800      	cmp	r0, #0
 8005a22:	db18      	blt.n	8005a56 <SX1276IoIrqInit+0xb6>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8005a24:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8005a26:	6903      	ldr	r3, [r0, #16]
 8005a28:	681b      	ldr	r3, [r3, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8005a2a:	421f      	tst	r7, r3
	const struct gpio_driver_api *api =
 8005a2c:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8005a2e:	4659      	mov	r1, fp
 8005a30:	699f      	ldr	r7, [r3, #24]
 8005a32:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
 8005a36:	bf0c      	ite	eq
 8005a38:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
 8005a3c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8005a40:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <SX1276IoIrqInit+0xdc>)
 8005a44:	3404      	adds	r4, #4
 8005a46:	429c      	cmp	r4, r3
 8005a48:	f106 060c 	add.w	r6, r6, #12
 8005a4c:	f105 0508 	add.w	r5, r5, #8
 8005a50:	f108 0810 	add.w	r8, r8, #16
 8005a54:	d1af      	bne.n	80059b6 <SX1276IoIrqInit+0x16>
}
 8005a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005a5a:	f8dc 3000 	ldr.w	r3, [ip]
 8005a5e:	f04f 0e01 	mov.w	lr, #1
 8005a62:	fa0e fe01 	lsl.w	lr, lr, r1
 8005a66:	ea23 030e 	bic.w	r3, r3, lr
 8005a6a:	e7c6      	b.n	80059fa <SX1276IoIrqInit+0x5a>
 8005a6c:	20001024 	.word	0x20001024
 8005a70:	20000fe0 	.word	0x20000fe0
 8005a74:	0800e874 	.word	0x0800e874
 8005a78:	080057a1 	.word	0x080057a1
 8005a7c:	20001034 	.word	0x20001034
 8005a80:	08005789 	.word	0x08005789

08005a84 <SX1276SetRfTxPower>:
{
 8005a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	b08a      	sub	sp, #40	; 0x28
	struct spi_buf_set tx = {
 8005a8a:	2302      	movs	r3, #2
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8005a8c:	4e39      	ldr	r6, [pc, #228]	; (8005b74 <SX1276SetRfTxPower+0xf0>)
	struct spi_buf_set tx = {
 8005a8e:	9303      	str	r3, [sp, #12]
		const struct spi_buf_set rx = {
 8005a90:	9305      	str	r3, [sp, #20]
	const struct spi_buf buf[2] = {
 8005a92:	f10d 0307 	add.w	r3, sp, #7
	uint8_t pa_config = 0;
 8005a96:	2100      	movs	r1, #0
	const struct spi_buf buf[2] = {
 8005a98:	2201      	movs	r2, #1
	struct spi_buf_set tx = {
 8005a9a:	ad06      	add	r5, sp, #24
 8005a9c:	244d      	movs	r4, #77	; 0x4d
	const struct spi_buf buf[2] = {
 8005a9e:	9306      	str	r3, [sp, #24]
 8005aa0:	f10d 0306 	add.w	r3, sp, #6
 8005aa4:	f88d 4007 	strb.w	r4, [sp, #7]
	uint8_t pa_config = 0;
 8005aa8:	f88d 1005 	strb.w	r1, [sp, #5]
{
 8005aac:	4604      	mov	r4, r0
	uint8_t pa_dac = 0;
 8005aae:	f88d 1006 	strb.w	r1, [sp, #6]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8005ab2:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 8005ab4:	9207      	str	r2, [sp, #28]
 8005ab6:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
 8005ab8:	9502      	str	r5, [sp, #8]
		const struct spi_buf_set rx = {
 8005aba:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 8005abc:	9308      	str	r3, [sp, #32]
 8005abe:	6883      	ldr	r3, [r0, #8]
 8005ac0:	aa02      	add	r2, sp, #8
 8005ac2:	681f      	ldr	r7, [r3, #0]
 8005ac4:	f106 0108 	add.w	r1, r6, #8
 8005ac8:	ab04      	add	r3, sp, #16
 8005aca:	47b8      	blx	r7
	if (ret < 0) {
 8005acc:	2800      	cmp	r0, #0
 8005ace:	db44      	blt.n	8005b5a <SX1276SetRfTxPower+0xd6>
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005ad0:	2c14      	cmp	r4, #20
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	bfa8      	it	ge
 8005ad6:	2314      	movge	r3, #20
 8005ad8:	2b02      	cmp	r3, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8005ada:	f89d 2006 	ldrb.w	r2, [sp, #6]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8005ade:	f99d 1005 	ldrsb.w	r1, [sp, #5]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005ae2:	bfb8      	it	lt
 8005ae4:	2302      	movlt	r3, #2
		if (power > 17) {
 8005ae6:	2c11      	cmp	r4, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8005ae8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005aec:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8005af0:	b2db      	uxtb	r3, r3
		if (power > 17) {
 8005af2:	dc35      	bgt.n	8005b60 <SX1276SetRfTxPower+0xdc>
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005af4:	3b02      	subs	r3, #2
 8005af6:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8005af8:	f042 0204 	orr.w	r2, r2, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005afc:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8005b00:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf buf[2] = {
 8005b04:	ab02      	add	r3, sp, #8
 8005b06:	9306      	str	r3, [sp, #24]
 8005b08:	2389      	movs	r3, #137	; 0x89
 8005b0a:	2401      	movs	r4, #1
 8005b0c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct spi_buf_set tx = {
 8005b10:	2702      	movs	r7, #2
	const struct spi_buf buf[2] = {
 8005b12:	f10d 0305 	add.w	r3, sp, #5
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8005b16:	6870      	ldr	r0, [r6, #4]
	struct spi_buf_set tx = {
 8005b18:	9504      	str	r5, [sp, #16]
	const struct spi_buf buf[2] = {
 8005b1a:	9407      	str	r4, [sp, #28]
 8005b1c:	9409      	str	r4, [sp, #36]	; 0x24
 8005b1e:	9308      	str	r3, [sp, #32]
	struct spi_buf_set tx = {
 8005b20:	9705      	str	r7, [sp, #20]
 8005b22:	6883      	ldr	r3, [r0, #8]
 8005b24:	4914      	ldr	r1, [pc, #80]	; (8005b78 <SX1276SetRfTxPower+0xf4>)
 8005b26:	f8d3 8000 	ldr.w	r8, [r3]
 8005b2a:	aa04      	add	r2, sp, #16
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	47c0      	blx	r8
	if (ret < 0) {
 8005b30:	2800      	cmp	r0, #0
 8005b32:	db12      	blt.n	8005b5a <SX1276SetRfTxPower+0xd6>
	const struct spi_buf buf[2] = {
 8005b34:	ab02      	add	r3, sp, #8
 8005b36:	9306      	str	r3, [sp, #24]
 8005b38:	f10d 0306 	add.w	r3, sp, #6
 8005b3c:	9308      	str	r3, [sp, #32]
 8005b3e:	23cd      	movs	r3, #205	; 0xcd
	struct spi_buf_set tx = {
 8005b40:	e9cd 5704 	strd	r5, r7, [sp, #16]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8005b44:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf buf[2] = {
 8005b46:	9407      	str	r4, [sp, #28]
 8005b48:	9409      	str	r4, [sp, #36]	; 0x24
 8005b4a:	f88d 3008 	strb.w	r3, [sp, #8]
 8005b4e:	6883      	ldr	r3, [r0, #8]
 8005b50:	4909      	ldr	r1, [pc, #36]	; (8005b78 <SX1276SetRfTxPower+0xf4>)
 8005b52:	681c      	ldr	r4, [r3, #0]
 8005b54:	aa04      	add	r2, sp, #16
 8005b56:	2300      	movs	r3, #0
 8005b58:	47a0      	blx	r4
}
 8005b5a:	b00a      	add	sp, #40	; 0x28
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005b60:	3b05      	subs	r3, #5
 8005b62:	430b      	orrs	r3, r1
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8005b64:	f042 0207 	orr.w	r2, r2, #7
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005b68:	f88d 3005 	strb.w	r3, [sp, #5]
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8005b6c:	f88d 2006 	strb.w	r2, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005b70:	e7c8      	b.n	8005b04 <SX1276SetRfTxPower+0x80>
 8005b72:	bf00      	nop
 8005b74:	20001010 	.word	0x20001010
 8005b78:	20001018 	.word	0x20001018

08005b7c <SX1276GetDio1PinState>:
{
 8005b7c:	b510      	push	{r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <SX1276GetDio1PinState+0x30>)
 8005b80:	6998      	ldr	r0, [r3, #24]
{
 8005b82:	b082      	sub	sp, #8
	const struct gpio_driver_data *const data =
 8005b84:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
 8005b86:	6883      	ldr	r3, [r0, #8]
 8005b88:	a901      	add	r1, sp, #4
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4798      	blx	r3
	if (ret == 0) {
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d004      	beq.n	8005b9c <SX1276GetDio1PinState+0x20>
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8005b92:	bfcc      	ite	gt
 8005b94:	2001      	movgt	r0, #1
 8005b96:	2000      	movle	r0, #0
}
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd10      	pop	{r4, pc}
		*value ^= data->invert;
 8005b9c:	9801      	ldr	r0, [sp, #4]
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8005ba2:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005ba6:	b002      	add	sp, #8
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	bf00      	nop
 8005bac:	20001010 	.word	0x20001010

08005bb0 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8005bb0:	b13a      	cbz	r2, 8005bc2 <memcpy1+0x12>
 8005bb2:	3801      	subs	r0, #1
 8005bb4:	440a      	add	r2, r1
    {
        *dst++ = *src++;
 8005bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bba:	f800 3f01 	strb.w	r3, [r0, #1]!
    while( size-- )
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	d1f9      	bne.n	8005bb6 <memcpy1+0x6>
    }
}
 8005bc2:	4770      	bx	lr

08005bc4 <TimerInit>:
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
    obj->Timestamp = 0;
 8005bc4:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
 8005bc6:	e9c0 3300 	strd	r3, r3, [r0]
    obj->IsStarted = false;
    obj->IsNext2Expire = false;
    obj->Callback = callback;
    obj->Context = NULL;
 8005bca:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
 8005bce:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
 8005bd0:	6143      	str	r3, [r0, #20]
}
 8005bd2:	4770      	bx	lr

08005bd4 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8005bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	4605      	mov	r5, r0
    uint32_t elapsedTime = 0;

    CRITICAL_SECTION_BEGIN( );
 8005bda:	a801      	add	r0, sp, #4
 8005bdc:	f7ff f9cc 	bl	8004f78 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005be0:	b13d      	cbz	r5, 8005bf2 <TimerStart+0x1e>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8005be2:	4e32      	ldr	r6, [pc, #200]	; (8005cac <TimerStart+0xd8>)
 8005be4:	6834      	ldr	r4, [r6, #0]

    while( cur != NULL )
 8005be6:	b914      	cbnz	r4, 8005bee <TimerStart+0x1a>
 8005be8:	e044      	b.n	8005c74 <TimerStart+0xa0>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 8005bea:	6964      	ldr	r4, [r4, #20]
    while( cur != NULL )
 8005bec:	b134      	cbz	r4, 8005bfc <TimerStart+0x28>
        if( cur == obj )
 8005bee:	42a5      	cmp	r5, r4
 8005bf0:	d1fb      	bne.n	8005bea <TimerStart+0x16>
        CRITICAL_SECTION_END( );
 8005bf2:	a801      	add	r0, sp, #4
 8005bf4:	f7ff f9ca 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005bf8:	b003      	add	sp, #12
 8005bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 8005bfc:	686b      	ldr	r3, [r5, #4]
 8005bfe:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 8005c00:	2701      	movs	r7, #1
 8005c02:	812f      	strh	r7, [r5, #8]
        elapsedTime = RtcGetTimerElapsedTime( );
 8005c04:	f7ff f986 	bl	8004f14 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8005c08:	682b      	ldr	r3, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8005c0a:	6831      	ldr	r1, [r6, #0]
        obj->Timestamp += elapsedTime;
 8005c0c:	4418      	add	r0, r3
 8005c0e:	6028      	str	r0, [r5, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8005c10:	680b      	ldr	r3, [r1, #0]
 8005c12:	4298      	cmp	r0, r3
 8005c14:	d214      	bcs.n	8005c40 <TimerStart+0x6c>
        cur->IsNext2Expire = false;
 8005c16:	724c      	strb	r4, [r1, #9]
    obj->Next = cur;
 8005c18:	6169      	str	r1, [r5, #20]
    TimerListHead = obj;
 8005c1a:	6035      	str	r5, [r6, #0]
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005c1c:	f7ff f988 	bl	8004f30 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8005c20:	726f      	strb	r7, [r5, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005c22:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005c24:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005c26:	f7ff f975 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005c2a:	4420      	add	r0, r4
 8005c2c:	4286      	cmp	r6, r0
 8005c2e:	d337      	bcc.n	8005ca0 <TimerStart+0xcc>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 8005c30:	6828      	ldr	r0, [r5, #0]
 8005c32:	f7fb f91d 	bl	8000e70 <RtcSetAlarm>
        CRITICAL_SECTION_END( );
 8005c36:	a801      	add	r0, sp, #4
 8005c38:	f7ff f9a8 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TimerEvent_t* next = TimerListHead->Next;
 8005c40:	694b      	ldr	r3, [r1, #20]
    while( cur->Next != NULL )
 8005c42:	b96b      	cbnz	r3, 8005c60 <TimerStart+0x8c>
 8005c44:	460b      	mov	r3, r1
    obj->Next = NULL;
 8005c46:	2200      	movs	r2, #0
    cur->Next = obj;
 8005c48:	615d      	str	r5, [r3, #20]
        CRITICAL_SECTION_END( );
 8005c4a:	a801      	add	r0, sp, #4
    obj->Next = NULL;
 8005c4c:	616a      	str	r2, [r5, #20]
        CRITICAL_SECTION_END( );
 8005c4e:	f7ff f99d 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005c52:	b003      	add	sp, #12
 8005c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
            next = next->Next;
 8005c56:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
 8005c58:	4619      	mov	r1, r3
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d0f3      	beq.n	8005c46 <TimerStart+0x72>
 8005c5e:	4613      	mov	r3, r2
        if( obj->Timestamp > next->Timestamp )
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4290      	cmp	r0, r2
 8005c64:	d8f7      	bhi.n	8005c56 <TimerStart+0x82>
            cur->Next = obj;
 8005c66:	614d      	str	r5, [r1, #20]
        CRITICAL_SECTION_END( );
 8005c68:	a801      	add	r0, sp, #4
            obj->Next = next;
 8005c6a:	616b      	str	r3, [r5, #20]
        CRITICAL_SECTION_END( );
 8005c6c:	f7ff f98e 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005c70:	b003      	add	sp, #12
 8005c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    obj->Timestamp = obj->ReloadValue;
 8005c74:	686b      	ldr	r3, [r5, #4]
 8005c76:	602b      	str	r3, [r5, #0]
    obj->IsStarted = true;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	812b      	strh	r3, [r5, #8]
        RtcSetTimerContext( );
 8005c7c:	f7ff f960 	bl	8004f40 <RtcSetTimerContext>
    TimerEvent_t* cur = TimerListHead;
 8005c80:	6833      	ldr	r3, [r6, #0]
    if( cur != NULL )
 8005c82:	b103      	cbz	r3, 8005c86 <TimerStart+0xb2>
        cur->IsNext2Expire = false;
 8005c84:	725c      	strb	r4, [r3, #9]
    obj->Next = cur;
 8005c86:	616b      	str	r3, [r5, #20]
    TimerListHead = obj;
 8005c88:	6035      	str	r5, [r6, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005c8a:	f7ff f951 	bl	8004f30 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	726b      	strb	r3, [r5, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005c92:	682e      	ldr	r6, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005c94:	4604      	mov	r4, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005c96:	f7ff f93d 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005c9a:	4420      	add	r0, r4
 8005c9c:	4286      	cmp	r6, r0
 8005c9e:	d2c7      	bcs.n	8005c30 <TimerStart+0x5c>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8005ca0:	f7ff f938 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005ca4:	4420      	add	r0, r4
 8005ca6:	6028      	str	r0, [r5, #0]
 8005ca8:	e7c3      	b.n	8005c32 <TimerStart+0x5e>
 8005caa:	bf00      	nop
 8005cac:	20001080 	.word	0x20001080

08005cb0 <TimerIrqHandler>:
{
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 8005cb2:	f7ff f951 	bl	8004f58 <RtcGetTimerContext>
    if( TimerListHead != NULL )
 8005cb6:	4c27      	ldr	r4, [pc, #156]	; (8005d54 <TimerIrqHandler+0xa4>)
    uint32_t old =  RtcGetTimerContext( );
 8005cb8:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8005cba:	f7ff f941 	bl	8004f40 <RtcSetTimerContext>
    if( TimerListHead != NULL )
 8005cbe:	6827      	ldr	r7, [r4, #0]
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	d02f      	beq.n	8005d24 <TimerIrqHandler+0x74>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005cc4:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8005cc8:	f1bc 0f00 	cmp.w	ip, #0
 8005ccc:	d00c      	beq.n	8005ce8 <TimerIrqHandler+0x38>
    uint32_t deltaContext = now - old; // intentional wrap around
 8005cce:	1b46      	subs	r6, r0, r5
 8005cd0:	4663      	mov	r3, ip
                next->Timestamp -= deltaContext;
 8005cd2:	1a28      	subs	r0, r5, r0
            if( next->Timestamp > deltaContext )
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	42b1      	cmp	r1, r6
                next->Timestamp = 0;
 8005cd8:	f04f 0200 	mov.w	r2, #0
                next->Timestamp -= deltaContext;
 8005cdc:	bf88      	it	hi
 8005cde:	1842      	addhi	r2, r0, r1
 8005ce0:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f5      	bne.n	8005cd4 <TimerIrqHandler+0x24>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005ce8:	68fb      	ldr	r3, [r7, #12]
        TimerListHead = TimerListHead->Next;
 8005cea:	f8c4 c000 	str.w	ip, [r4]
        cur->IsStarted = false;
 8005cee:	2600      	movs	r6, #0
 8005cf0:	723e      	strb	r6, [r7, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005cf2:	b1cb      	cbz	r3, 8005d28 <TimerIrqHandler+0x78>
 8005cf4:	6938      	ldr	r0, [r7, #16]
 8005cf6:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	b953      	cbnz	r3, 8005d12 <TimerIrqHandler+0x62>
 8005cfc:	e012      	b.n	8005d24 <TimerIrqHandler+0x74>
        cur = TimerListHead;
 8005cfe:	6823      	ldr	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005d00:	68da      	ldr	r2, [r3, #12]
        TimerListHead = TimerListHead->Next;
 8005d02:	6959      	ldr	r1, [r3, #20]
 8005d04:	6021      	str	r1, [r4, #0]
        cur->IsStarted = false;
 8005d06:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005d08:	b16a      	cbz	r2, 8005d26 <TimerIrqHandler+0x76>
 8005d0a:	6918      	ldr	r0, [r3, #16]
 8005d0c:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	b143      	cbz	r3, 8005d24 <TimerIrqHandler+0x74>
 8005d12:	681d      	ldr	r5, [r3, #0]
 8005d14:	f7ff f8fe 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005d18:	4285      	cmp	r5, r0
 8005d1a:	d3f0      	bcc.n	8005cfe <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	b10c      	cbz	r4, 8005d24 <TimerIrqHandler+0x74>
 8005d20:	7a63      	ldrb	r3, [r4, #9]
 8005d22:	b113      	cbz	r3, 8005d2a <TimerIrqHandler+0x7a>
}
 8005d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
 8005d26:	e7fe      	b.n	8005d26 <TimerIrqHandler+0x76>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005d28:	e7fe      	b.n	8005d28 <TimerIrqHandler+0x78>
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005d2a:	f7ff f901 	bl	8004f30 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005d32:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005d34:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005d36:	f7ff f8ed 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005d3a:	4428      	add	r0, r5
 8005d3c:	4286      	cmp	r6, r0
 8005d3e:	d304      	bcc.n	8005d4a <TimerIrqHandler+0x9a>
    RtcSetAlarm( obj->Timestamp );
 8005d40:	6820      	ldr	r0, [r4, #0]
}
 8005d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    RtcSetAlarm( obj->Timestamp );
 8005d46:	f7fb b893 	b.w	8000e70 <RtcSetAlarm>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8005d4a:	f7ff f8e3 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005d4e:	4428      	add	r0, r5
 8005d50:	6020      	str	r0, [r4, #0]
 8005d52:	e7f6      	b.n	8005d42 <TimerIrqHandler+0x92>
 8005d54:	20001080 	.word	0x20001080

08005d58 <TimerStop>:
{
 8005d58:	b570      	push	{r4, r5, r6, lr}
    TimerEvent_t* prev = TimerListHead;
 8005d5a:	4d22      	ldr	r5, [pc, #136]	; (8005de4 <TimerStop+0x8c>)
{
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005d60:	a801      	add	r0, sp, #4
 8005d62:	f7ff f909 	bl	8004f78 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8005d66:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005d68:	b15b      	cbz	r3, 8005d82 <TimerStop+0x2a>
 8005d6a:	b154      	cbz	r4, 8005d82 <TimerStop+0x2a>
    obj->IsStarted = false;
 8005d6c:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
 8005d6e:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
 8005d70:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8005d72:	d102      	bne.n	8005d7a <TimerStop+0x22>
 8005d74:	e011      	b.n	8005d9a <TimerStop+0x42>
            if( cur == obj )
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d008      	beq.n	8005d8c <TimerStop+0x34>
                cur = cur->Next;
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f9      	bne.n	8005d76 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8005d82:	a801      	add	r0, sp, #4
 8005d84:	f7ff f902 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
                if( cur->Next != NULL )
 8005d8c:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
 8005d8e:	6153      	str	r3, [r2, #20]
        CRITICAL_SECTION_END( );
 8005d90:	a801      	add	r0, sp, #4
 8005d92:	f7ff f8fb 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005d96:	b002      	add	sp, #8
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005d9a:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
 8005d9c:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005d9e:	b189      	cbz	r1, 8005dc4 <TimerStop+0x6c>
            TimerListHead->IsNext2Expire = false;
 8005da0:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8005da2:	b1ac      	cbz	r4, 8005dd0 <TimerStop+0x78>
                TimerListHead = TimerListHead->Next;
 8005da4:	602c      	str	r4, [r5, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005da6:	f7ff f8c3 	bl	8004f30 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
 8005daa:	2301      	movs	r3, #1
 8005dac:	7263      	strb	r3, [r4, #9]
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005dae:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8005db0:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8005db2:	f7ff f8af 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005db6:	4428      	add	r0, r5
 8005db8:	4286      	cmp	r6, r0
 8005dba:	d30d      	bcc.n	8005dd8 <TimerStop+0x80>
    RtcSetAlarm( obj->Timestamp );
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	f7fb f857 	bl	8000e70 <RtcSetAlarm>
}
 8005dc2:	e7de      	b.n	8005d82 <TimerStop+0x2a>
        CRITICAL_SECTION_END( );
 8005dc4:	a801      	add	r0, sp, #4
                TimerListHead = NULL;
 8005dc6:	602c      	str	r4, [r5, #0]
        CRITICAL_SECTION_END( );
 8005dc8:	f7ff f8e0 	bl	8004f8c <BoardCriticalSectionEnd>
}
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
                RtcStopAlarm( );
 8005dd0:	f7ff f8b0 	bl	8004f34 <RtcStopAlarm>
                TimerListHead = NULL;
 8005dd4:	602c      	str	r4, [r5, #0]
 8005dd6:	e7d4      	b.n	8005d82 <TimerStop+0x2a>
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8005dd8:	f7ff f89c 	bl	8004f14 <RtcGetTimerElapsedTime>
 8005ddc:	4428      	add	r0, r5
 8005dde:	6020      	str	r0, [r4, #0]
 8005de0:	e7ed      	b.n	8005dbe <TimerStop+0x66>
 8005de2:	bf00      	nop
 8005de4:	20001080 	.word	0x20001080

08005de8 <TimerSetValue>:
{
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
 8005dec:	4608      	mov	r0, r1
 8005dee:	f7ff f8bf 	bl	8004f70 <RtcMs2Tick>
 8005df2:	4604      	mov	r4, r0
    TimerStop( obj );
 8005df4:	4628      	mov	r0, r5
 8005df6:	f7ff ffaf 	bl	8005d58 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 8005dfa:	f7ff f899 	bl	8004f30 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 8005dfe:	42a0      	cmp	r0, r4
 8005e00:	bf38      	it	cc
 8005e02:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
 8005e04:	e9c5 0000 	strd	r0, r0, [r5]
}
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop

08005e0c <TimerGetCurrentTime>:
{
 8005e0c:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 8005e0e:	f7ff f879 	bl	8004f04 <RtcGetTimerValue>
}
 8005e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
 8005e16:	f7ff b8ad 	b.w	8004f74 <RtcTick2Ms>
 8005e1a:	bf00      	nop

08005e1c <TimerGetElapsedTime>:
    if ( past == 0 )
 8005e1c:	b900      	cbnz	r0, 8005e20 <TimerGetElapsedTime+0x4>
}
 8005e1e:	4770      	bx	lr
{
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
    uint32_t nowInTicks = RtcGetTimerValue( );
 8005e24:	f7ff f86e 	bl	8004f04 <RtcGetTimerValue>
 8005e28:	4603      	mov	r3, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8005e2a:	4620      	mov	r0, r4
    uint32_t nowInTicks = RtcGetTimerValue( );
 8005e2c:	461c      	mov	r4, r3
    uint32_t pastInTicks = RtcMs2Tick( past );
 8005e2e:	f7ff f89f 	bl	8004f70 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8005e32:	1a20      	subs	r0, r4, r0
}
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8005e38:	f7ff b89c 	b.w	8004f74 <RtcTick2Ms>

08005e3c <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
 8005e3c:	f7ff b892 	b.w	8004f64 <DelayMsMcu>

08005e40 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void* context )
{
 8005e40:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005e42:	4c42      	ldr	r4, [pc, #264]	; (8005f4c <SX1276OnDio2Irq+0x10c>)
 8005e44:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 8005e48:	2b01      	cmp	r3, #1
{
 8005e4a:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 8005e4c:	d007      	beq.n	8005e5e <SX1276OnDio2Irq+0x1e>
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <SX1276OnDio2Irq+0x1a>
            default:
                break;
            }
            break;
        case RF_TX_RUNNING:
            switch( SX1276.Settings.Modem )
 8005e52:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005e56:	2d01      	cmp	r5, #1
 8005e58:	d029      	beq.n	8005eae <SX1276OnDio2Irq+0x6e>
            }
            break;
        default:
            break;
    }
}
 8005e5a:	b002      	add	sp, #8
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005e5e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005e62:	b34d      	cbz	r5, 8005eb8 <SX1276OnDio2Irq+0x78>
 8005e64:	2d01      	cmp	r5, #1
 8005e66:	d1f8      	bne.n	8005e5a <SX1276OnDio2Irq+0x1a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005e68:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f4      	beq.n	8005e5a <SX1276OnDio2Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005e70:	2302      	movs	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 8005e72:	462a      	mov	r2, r5
 8005e74:	f10d 0107 	add.w	r1, sp, #7
 8005e78:	2012      	movs	r0, #18
 8005e7a:	f88d 3007 	strb.w	r3, [sp, #7]
 8005e7e:	f7ff fcb7 	bl	80057f0 <SX1276WriteBuffer>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <SX1276OnDio2Irq+0x110>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0e7      	beq.n	8005e5a <SX1276OnDio2Irq+0x1a>
 8005e8a:	695c      	ldr	r4, [r3, #20]
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d0e4      	beq.n	8005e5a <SX1276OnDio2Irq+0x1a>
    SX1276ReadBuffer( addr, &data, 1 );
 8005e90:	201c      	movs	r0, #28
 8005e92:	462a      	mov	r2, r5
 8005e94:	f10d 0107 	add.w	r1, sp, #7
 8005e98:	f7ff fcc8 	bl	800582c <SX1276ReadBuffer>
    return data;
 8005e9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
 8005ea6:	b002      	add	sp, #8
 8005ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005eac:	4718      	bx	r3
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005eae:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
 8005eb2:	2a00      	cmp	r2, #0
 8005eb4:	d0d1      	beq.n	8005e5a <SX1276OnDio2Irq+0x1a>
 8005eb6:	e7dc      	b.n	8005e72 <SX1276OnDio2Irq+0x32>
                if( SX1276.DIO4.port == NULL )
 8005eb8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	d043      	beq.n	8005f46 <SX1276OnDio2Irq+0x106>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005ebe:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0c9      	beq.n	8005e5a <SX1276OnDio2Irq+0x1a>
 8005ec6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1c5      	bne.n	8005e5a <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005ece:	2601      	movs	r6, #1
                    TimerStop( &RxTimeoutSyncWord );
 8005ed0:	4820      	ldr	r0, [pc, #128]	; (8005f54 <SX1276OnDio2Irq+0x114>)
 8005ed2:	f7ff ff41 	bl	8005d58 <TimerStop>
    SX1276ReadBuffer( addr, &data, 1 );
 8005ed6:	4632      	mov	r2, r6
 8005ed8:	f10d 0107 	add.w	r1, sp, #7
 8005edc:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005ede:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
    SX1276ReadBuffer( addr, &data, 1 );
 8005ee2:	f7ff fca3 	bl	800582c <SX1276ReadBuffer>
    return data;
 8005ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005eea:	40f3      	lsrs	r3, r6
 8005eec:	425b      	negs	r3, r3
    SX1276ReadBuffer( addr, &data, 1 );
 8005eee:	4632      	mov	r2, r6
 8005ef0:	f10d 0107 	add.w	r1, sp, #7
 8005ef4:	201b      	movs	r0, #27
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005ef6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
    SX1276ReadBuffer( addr, &data, 1 );
 8005efa:	f7ff fc97 	bl	800582c <SX1276ReadBuffer>
 8005efe:	4632      	mov	r2, r6
 8005f00:	f10d 0107 	add.w	r1, sp, #7
 8005f04:	201c      	movs	r0, #28
    return data;
 8005f06:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8005f0a:	f7ff fc8f 	bl	800582c <SX1276ReadBuffer>
    return data;
 8005f0e:	f89d 0007 	ldrb.w	r0, [sp, #7]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005f12:	ea40 2305 	orr.w	r3, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005f16:	f643 5509 	movw	r5, #15625	; 0x3d09
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8005f1a:	0a1b      	lsrs	r3, r3, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005f1c:	fb05 f000 	mul.w	r0, r5, r0
 8005f20:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005f22:	fb05 f303 	mul.w	r3, r5, r3
 8005f26:	eb03 2310 	add.w	r3, r3, r0, lsr #8
    SX1276ReadBuffer( addr, &data, 1 );
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	f10d 0107 	add.w	r1, sp, #7
 8005f30:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005f32:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    SX1276ReadBuffer( addr, &data, 1 );
 8005f36:	f7ff fc79 	bl	800582c <SX1276ReadBuffer>
    return data;
 8005f3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
 8005f44:	e789      	b.n	8005e5a <SX1276OnDio2Irq+0x1a>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005f46:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005f4a:	e7bc      	b.n	8005ec6 <SX1276OnDio2Irq+0x86>
 8005f4c:	200011b8 	.word	0x200011b8
 8005f50:	20001084 	.word	0x20001084
 8005f54:	20001088 	.word	0x20001088

08005f58 <SX1276OnDio1Irq>:
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f10d 0107 	add.w	r1, sp, #7
 8005f62:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 8005f64:	4c4f      	ldr	r4, [pc, #316]	; (80060a4 <SX1276OnDio1Irq+0x14c>)
    SX1276ReadBuffer( addr, &data, 1 );
 8005f66:	f7ff fc61 	bl	800582c <SX1276ReadBuffer>
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f10d 0107 	add.w	r1, sp, #7
 8005f70:	203f      	movs	r0, #63	; 0x3f
 8005f72:	f7ff fc5b 	bl	800582c <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 8005f76:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
 8005f7a:	2d01      	cmp	r5, #1
 8005f7c:	d006      	beq.n	8005f8c <SX1276OnDio1Irq+0x34>
 8005f7e:	2d02      	cmp	r5, #2
 8005f80:	d102      	bne.n	8005f88 <SX1276OnDio1Irq+0x30>
            switch( SX1276.Settings.Modem )
 8005f82:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8005f86:	b32d      	cbz	r5, 8005fd4 <SX1276OnDio1Irq+0x7c>
}
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005f8c:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 8005f90:	2e00      	cmp	r6, #0
 8005f92:	d039      	beq.n	8006008 <SX1276OnDio1Irq+0xb0>
 8005f94:	2e01      	cmp	r6, #1
 8005f96:	d1f7      	bne.n	8005f88 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8005f98:	f7ff fdf0 	bl	8005b7c <SX1276GetDio1PinState>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d0f3      	beq.n	8005f88 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutTimer );
 8005fa0:	4841      	ldr	r0, [pc, #260]	; (80060a8 <SX1276OnDio1Irq+0x150>)
 8005fa2:	f7ff fed9 	bl	8005d58 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005fa6:	2380      	movs	r3, #128	; 0x80
    SX1276WriteBuffer( addr, &data, 1 );
 8005fa8:	4632      	mov	r2, r6
 8005faa:	f10d 0107 	add.w	r1, sp, #7
 8005fae:	2012      	movs	r0, #18
 8005fb0:	f88d 3007 	strb.w	r3, [sp, #7]
 8005fb4:	f7ff fc1c 	bl	80057f0 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <SX1276OnDio1Irq+0x154>)
 8005fba:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0e0      	beq.n	8005f88 <SX1276OnDio1Irq+0x30>
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0dd      	beq.n	8005f88 <SX1276OnDio1Irq+0x30>
}
 8005fcc:	b002      	add	sp, #8
 8005fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
 8005fd2:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 1 )
 8005fd4:	f7ff fdd2 	bl	8005b7c <SX1276GetDio1PinState>
 8005fd8:	2801      	cmp	r0, #1
 8005fda:	d0d5      	beq.n	8005f88 <SX1276OnDio1Irq+0x30>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005fdc:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
 8005fe0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8005fe4:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005fe8:	4931      	ldr	r1, [pc, #196]	; (80060b0 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005fea:	1a1b      	subs	r3, r3, r0
 8005fec:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005fee:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005ff0:	dd39      	ble.n	8006066 <SX1276OnDio1Irq+0x10e>
    SX1276WriteBuffer( 0, buffer, size );
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f7ff fbfc 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005ff8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8005ffc:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006000:	4413      	add	r3, r2
 8006002:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8006006:	e7bf      	b.n	8005f88 <SX1276OnDio1Irq+0x30>
                if( SX1276GetDio1PinState( ) == 0 )
 8006008:	f7ff fdb8 	bl	8005b7c <SX1276GetDio1PinState>
 800600c:	2800      	cmp	r0, #0
 800600e:	d0bb      	beq.n	8005f88 <SX1276OnDio1Irq+0x30>
                TimerStop( &RxTimeoutSyncWord );
 8006010:	4828      	ldr	r0, [pc, #160]	; (80060b4 <SX1276OnDio1Irq+0x15c>)
 8006012:	f7ff fea1 	bl	8005d58 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006016:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 800601a:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 800601e:	ea52 0301 	orrs.w	r3, r2, r1
 8006022:	d10b      	bne.n	800603c <SX1276OnDio1Irq+0xe4>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006024:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    SX1276ReadBuffer( 0, buffer, size );
 8006028:	462a      	mov	r2, r5
                    if( SX1276.Settings.Fsk.FixLen == false )
 800602a:	bb70      	cbnz	r0, 800608a <SX1276OnDio1Irq+0x132>
    SX1276ReadBuffer( 0, buffer, size );
 800602c:	f504 718b 	add.w	r1, r4, #278	; 0x116
 8006030:	f7ff fbfc 	bl	800582c <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006034:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 8006038:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
 800603c:	f894 011a 	ldrb.w	r0, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <SX1276OnDio1Irq+0x158>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006042:	1a52      	subs	r2, r2, r1
 8006044:	4282      	cmp	r2, r0
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006046:	4419      	add	r1, r3
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006048:	db16      	blt.n	8006078 <SX1276OnDio1Irq+0x120>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800604a:	1e42      	subs	r2, r0, #1
    SX1276ReadBuffer( 0, buffer, size );
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	2000      	movs	r0, #0
 8006050:	f7ff fbec 	bl	800582c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006054:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8006058:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
 800605c:	3a01      	subs	r2, #1
 800605e:	4413      	add	r3, r2
 8006060:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8006064:	e790      	b.n	8005f88 <SX1276OnDio1Irq+0x30>
    SX1276WriteBuffer( 0, buffer, size );
 8006066:	b2da      	uxtb	r2, r3
 8006068:	4628      	mov	r0, r5
 800606a:	f7ff fbc1 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800606e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006072:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
 8006076:	e787      	b.n	8005f88 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( 0, buffer, size );
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	2000      	movs	r0, #0
 800607c:	f7ff fbd6 	bl	800582c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006080:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006084:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8006088:	e77e      	b.n	8005f88 <SX1276OnDio1Irq+0x30>
    SX1276ReadBuffer( addr, &data, 1 );
 800608a:	f10d 0107 	add.w	r1, sp, #7
 800608e:	2032      	movs	r0, #50	; 0x32
 8006090:	f7ff fbcc 	bl	800582c <SX1276ReadBuffer>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006094:	f89d 2007 	ldrb.w	r2, [sp, #7]
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006098:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800609c:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 80060a0:	e7cc      	b.n	800603c <SX1276OnDio1Irq+0xe4>
 80060a2:	bf00      	nop
 80060a4:	200011b8 	.word	0x200011b8
 80060a8:	200010a0 	.word	0x200010a0
 80060ac:	20001084 	.word	0x20001084
 80060b0:	200010b8 	.word	0x200010b8
 80060b4:	20001088 	.word	0x20001088

080060b8 <SX1276OnDio0Irq>:
{
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	b082      	sub	sp, #8
    SX1276ReadBuffer( addr, &data, 1 );
 80060bc:	2201      	movs	r2, #1
 80060be:	f10d 0107 	add.w	r1, sp, #7
 80060c2:	203e      	movs	r0, #62	; 0x3e
    switch( SX1276.Settings.State )
 80060c4:	4cbf      	ldr	r4, [pc, #764]	; (80063c4 <SX1276OnDio0Irq+0x30c>)
    SX1276ReadBuffer( addr, &data, 1 );
 80060c6:	f7ff fbb1 	bl	800582c <SX1276ReadBuffer>
 80060ca:	2201      	movs	r2, #1
 80060cc:	f10d 0107 	add.w	r1, sp, #7
 80060d0:	203f      	movs	r0, #63	; 0x3f
 80060d2:	f7ff fbab 	bl	800582c <SX1276ReadBuffer>
    switch( SX1276.Settings.State )
 80060d6:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
    volatile uint8_t irqFlags = 0;
 80060da:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 80060dc:	2d01      	cmp	r5, #1
    volatile uint8_t irqFlags = 0;
 80060de:	f88d 3006 	strb.w	r3, [sp, #6]
    switch( SX1276.Settings.State )
 80060e2:	d014      	beq.n	800610e <SX1276OnDio0Irq+0x56>
 80060e4:	2d02      	cmp	r5, #2
 80060e6:	d118      	bne.n	800611a <SX1276OnDio0Irq+0x62>
            TimerStop( &TxTimeoutTimer );
 80060e8:	48b7      	ldr	r0, [pc, #732]	; (80063c8 <SX1276OnDio0Irq+0x310>)
 80060ea:	f7ff fe35 	bl	8005d58 <TimerStop>
            switch( SX1276.Settings.Modem )
 80060ee:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
 80060f2:	2a01      	cmp	r2, #1
 80060f4:	d043      	beq.n	800617e <SX1276OnDio0Irq+0xc6>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80060f6:	4bb5      	ldr	r3, [pc, #724]	; (80063cc <SX1276OnDio0Irq+0x314>)
 80060f8:	681b      	ldr	r3, [r3, #0]
                SX1276.Settings.State = RF_IDLE;
 80060fa:	2200      	movs	r2, #0
 80060fc:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006100:	b15b      	cbz	r3, 800611a <SX1276OnDio0Irq+0x62>
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b14b      	cbz	r3, 800611a <SX1276OnDio0Irq+0x62>
}
 8006106:	b002      	add	sp, #8
 8006108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
 800610c:	4718      	bx	r3
            switch( SX1276.Settings.Modem )
 800610e:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
 8006112:	2e00      	cmp	r6, #0
 8006114:	d03c      	beq.n	8006190 <SX1276OnDio0Irq+0xd8>
 8006116:	2e01      	cmp	r6, #1
 8006118:	d001      	beq.n	800611e <SX1276OnDio0Irq+0x66>
}
 800611a:	b002      	add	sp, #8
 800611c:	bd70      	pop	{r4, r5, r6, pc}
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800611e:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006120:	4632      	mov	r2, r6
 8006122:	2012      	movs	r0, #18
 8006124:	f10d 0107 	add.w	r1, sp, #7
 8006128:	f88d 3007 	strb.w	r3, [sp, #7]
 800612c:	f7ff fb60 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006130:	4632      	mov	r2, r6
 8006132:	f10d 0107 	add.w	r1, sp, #7
 8006136:	2012      	movs	r0, #18
 8006138:	f7ff fb78 	bl	800582c <SX1276ReadBuffer>
    return data;
 800613c:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006140:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8006144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006148:	069b      	lsls	r3, r3, #26
 800614a:	d574      	bpl.n	8006236 <SX1276OnDio0Irq+0x17e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800614c:	2320      	movs	r3, #32
    SX1276WriteBuffer( addr, &data, 1 );
 800614e:	4632      	mov	r2, r6
 8006150:	f10d 0107 	add.w	r1, sp, #7
 8006154:	2012      	movs	r0, #18
 8006156:	f88d 3007 	strb.w	r3, [sp, #7]
 800615a:	f7ff fb49 	bl	80057f0 <SX1276WriteBuffer>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800615e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8006162:	b90b      	cbnz	r3, 8006168 <SX1276OnDio0Irq+0xb0>
                            SX1276.Settings.State = RF_IDLE;
 8006164:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8006168:	4899      	ldr	r0, [pc, #612]	; (80063d0 <SX1276OnDio0Irq+0x318>)
 800616a:	f7ff fdf5 	bl	8005d58 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800616e:	4b97      	ldr	r3, [pc, #604]	; (80063cc <SX1276OnDio0Irq+0x314>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0d1      	beq.n	800611a <SX1276OnDio0Irq+0x62>
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1c4      	bne.n	8006106 <SX1276OnDio0Irq+0x4e>
 800617c:	e7cd      	b.n	800611a <SX1276OnDio0Irq+0x62>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800617e:	2308      	movs	r3, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8006180:	f10d 0107 	add.w	r1, sp, #7
 8006184:	2012      	movs	r0, #18
 8006186:	f88d 3007 	strb.w	r3, [sp, #7]
 800618a:	f7ff fb31 	bl	80057f0 <SX1276WriteBuffer>
 800618e:	e7b2      	b.n	80060f6 <SX1276OnDio0Irq+0x3e>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8006190:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 80bf 	bne.w	8006318 <SX1276OnDio0Irq+0x260>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800619a:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
 800619e:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80061a2:	ea52 0103 	orrs.w	r1, r2, r3
 80061a6:	d10c      	bne.n	80061c2 <SX1276OnDio0Irq+0x10a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80061a8:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f040 80ea 	bne.w	8006386 <SX1276OnDio0Irq+0x2ce>
    SX1276ReadBuffer( 0, buffer, size );
 80061b2:	2201      	movs	r2, #1
 80061b4:	4987      	ldr	r1, [pc, #540]	; (80063d4 <SX1276OnDio0Irq+0x31c>)
 80061b6:	f7ff fb39 	bl	800582c <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80061ba:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
 80061be:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80061c2:	4985      	ldr	r1, [pc, #532]	; (80063d8 <SX1276OnDio0Irq+0x320>)
 80061c4:	1ad2      	subs	r2, r2, r3
    SX1276ReadBuffer( 0, buffer, size );
 80061c6:	4419      	add	r1, r3
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	2000      	movs	r0, #0
 80061cc:	f7ff fb2e 	bl	800582c <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80061d0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
 80061d4:	487e      	ldr	r0, [pc, #504]	; (80063d0 <SX1276OnDio0Irq+0x318>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80061d6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 80061da:	f7ff fdbd 	bl	8005d58 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80061de:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8085 	beq.w	80062f2 <SX1276OnDio0Irq+0x23a>
    SX1276ReadBuffer( addr, &data, 1 );
 80061e8:	2201      	movs	r2, #1
 80061ea:	f10d 0107 	add.w	r1, sp, #7
 80061ee:	200d      	movs	r0, #13
 80061f0:	f7ff fb1c 	bl	800582c <SX1276ReadBuffer>
    return data;
 80061f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80061f8:	2201      	movs	r2, #1
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80061fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80061fe:	f10d 0107 	add.w	r1, sp, #7
 8006202:	200d      	movs	r0, #13
 8006204:	f88d 3007 	strb.w	r3, [sp, #7]
 8006208:	f7ff faf2 	bl	80057f0 <SX1276WriteBuffer>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800620c:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <SX1276OnDio0Irq+0x314>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b143      	cbz	r3, 8006224 <SX1276OnDio0Irq+0x16c>
 8006212:	689d      	ldr	r5, [r3, #8]
 8006214:	b135      	cbz	r5, 8006224 <SX1276OnDio0Irq+0x16c>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8006216:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
 800621a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800621e:	486e      	ldr	r0, [pc, #440]	; (80063d8 <SX1276OnDio0Irq+0x320>)
 8006220:	2300      	movs	r3, #0
 8006222:	47a8      	blx	r5
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006224:	2300      	movs	r3, #0
 8006226:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800622a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800622e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
}
 8006232:	b002      	add	sp, #8
 8006234:	bd70      	pop	{r4, r5, r6, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 8006236:	4632      	mov	r2, r6
 8006238:	f10d 0107 	add.w	r1, sp, #7
 800623c:	2019      	movs	r0, #25
 800623e:	f7ff faf5 	bl	800582c <SX1276ReadBuffer>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006242:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8006246:	3302      	adds	r3, #2
 8006248:	109b      	asrs	r3, r3, #2
    SX1276ReadBuffer( addr, &data, 1 );
 800624a:	4632      	mov	r2, r6
 800624c:	f10d 0107 	add.w	r1, sp, #7
 8006250:	201a      	movs	r0, #26
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8006252:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
    SX1276ReadBuffer( addr, &data, 1 );
 8006256:	f7ff fae9 	bl	800582c <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800625a:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
    return data;
 800625e:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006262:	2a00      	cmp	r2, #0
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006264:	ea4f 1113 	mov.w	r1, r3, lsr #4
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006268:	db49      	blt.n	80062fe <SX1276OnDio0Irq+0x246>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800626a:	4a5c      	ldr	r2, [pc, #368]	; (80063dc <SX1276OnDio0Irq+0x324>)
 800626c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006270:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006272:	4290      	cmp	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006274:	bf8c      	ite	hi
 8006276:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8006278:	3ba4      	subls	r3, #164	; 0xa4
 800627a:	440b      	add	r3, r1
 800627c:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
    SX1276ReadBuffer( addr, &data, 1 );
 8006280:	2201      	movs	r2, #1
 8006282:	f10d 0107 	add.w	r1, sp, #7
 8006286:	2013      	movs	r0, #19
 8006288:	f7ff fad0 	bl	800582c <SX1276ReadBuffer>
    return data;
 800628c:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006290:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276ReadBuffer( addr, &data, 1 );
 8006294:	2201      	movs	r2, #1
 8006296:	f10d 0107 	add.w	r1, sp, #7
 800629a:	2010      	movs	r0, #16
 800629c:	f7ff fac6 	bl	800582c <SX1276ReadBuffer>
    SX1276WriteBuffer( addr, &data, 1 );
 80062a0:	2201      	movs	r2, #1
 80062a2:	f10d 0107 	add.w	r1, sp, #7
 80062a6:	200d      	movs	r0, #13
 80062a8:	f7ff faa2 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( 0, buffer, size );
 80062ac:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 80062b0:	4949      	ldr	r1, [pc, #292]	; (80063d8 <SX1276OnDio0Irq+0x320>)
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7ff faba 	bl	800582c <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80062b8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 80062bc:	b90b      	cbnz	r3, 80062c2 <SX1276OnDio0Irq+0x20a>
                        SX1276.Settings.State = RF_IDLE;
 80062be:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 80062c2:	4843      	ldr	r0, [pc, #268]	; (80063d0 <SX1276OnDio0Irq+0x318>)
 80062c4:	f7ff fd48 	bl	8005d58 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80062c8:	4b40      	ldr	r3, [pc, #256]	; (80063cc <SX1276OnDio0Irq+0x314>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f43f af24 	beq.w	800611a <SX1276OnDio0Irq+0x62>
 80062d2:	689d      	ldr	r5, [r3, #8]
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	f43f af20 	beq.w	800611a <SX1276OnDio0Irq+0x62>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80062da:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 80062de:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
 80062e2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 80062e6:	483c      	ldr	r0, [pc, #240]	; (80063d8 <SX1276OnDio0Irq+0x320>)
 80062e8:	46ac      	mov	ip, r5
}
 80062ea:	b002      	add	sp, #8
 80062ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80062f0:	4760      	bx	ip
                    TimerStop( &RxTimeoutSyncWord );
 80062f2:	483b      	ldr	r0, [pc, #236]	; (80063e0 <SX1276OnDio0Irq+0x328>)
                    SX1276.Settings.State = RF_IDLE;
 80062f4:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80062f8:	f7ff fd2e 	bl	8005d58 <TimerStop>
 80062fc:	e786      	b.n	800620c <SX1276OnDio0Irq+0x154>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80062fe:	441a      	add	r2, r3
 8006300:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006304:	4b35      	ldr	r3, [pc, #212]	; (80063dc <SX1276OnDio0Irq+0x324>)
 8006306:	b292      	uxth	r2, r2
 8006308:	4298      	cmp	r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800630a:	bf8c      	ite	hi
 800630c:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800630e:	3aa4      	subls	r2, #164	; 0xa4
 8006310:	188b      	adds	r3, r1, r2
 8006312:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 8006316:	e7b3      	b.n	8006280 <SX1276OnDio0Irq+0x1c8>
    SX1276ReadBuffer( addr, &data, 1 );
 8006318:	462a      	mov	r2, r5
 800631a:	f10d 0107 	add.w	r1, sp, #7
 800631e:	203f      	movs	r0, #63	; 0x3f
 8006320:	f7ff fa84 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006324:	f89d 3007 	ldrb.w	r3, [sp, #7]
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8006328:	f88d 3006 	strb.w	r3, [sp, #6]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800632c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006330:	079a      	lsls	r2, r3, #30
 8006332:	f53f af32 	bmi.w	800619a <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006336:	230b      	movs	r3, #11
    SX1276WriteBuffer( addr, &data, 1 );
 8006338:	462a      	mov	r2, r5
 800633a:	f10d 0107 	add.w	r1, sp, #7
 800633e:	203e      	movs	r0, #62	; 0x3e
 8006340:	f88d 3007 	strb.w	r3, [sp, #7]
 8006344:	f7ff fa54 	bl	80057f0 <SX1276WriteBuffer>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006348:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 800634a:	462a      	mov	r2, r5
 800634c:	f10d 0107 	add.w	r1, sp, #7
 8006350:	203f      	movs	r0, #63	; 0x3f
 8006352:	f88d 3007 	strb.w	r3, [sp, #7]
 8006356:	f7ff fa4b 	bl	80057f0 <SX1276WriteBuffer>
                        TimerStop( &RxTimeoutTimer );
 800635a:	481d      	ldr	r0, [pc, #116]	; (80063d0 <SX1276OnDio0Irq+0x318>)
 800635c:	f7ff fcfc 	bl	8005d58 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006360:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
 8006364:	b9d6      	cbnz	r6, 800639c <SX1276OnDio0Irq+0x2e4>
                            TimerStop( &RxTimeoutSyncWord );
 8006366:	481e      	ldr	r0, [pc, #120]	; (80063e0 <SX1276OnDio0Irq+0x328>)
 8006368:	f7ff fcf6 	bl	8005d58 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800636c:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006370:	4b16      	ldr	r3, [pc, #88]	; (80063cc <SX1276OnDio0Irq+0x314>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f43f af55 	beq.w	8006224 <SX1276OnDio0Irq+0x16c>
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f43f af51 	beq.w	8006224 <SX1276OnDio0Irq+0x16c>
                            RadioEvents->RxError( );
 8006382:	4798      	blx	r3
 8006384:	e74e      	b.n	8006224 <SX1276OnDio0Irq+0x16c>
    SX1276ReadBuffer( addr, &data, 1 );
 8006386:	2201      	movs	r2, #1
 8006388:	f10d 0107 	add.w	r1, sp, #7
 800638c:	2032      	movs	r0, #50	; 0x32
 800638e:	f7ff fa4d 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006392:	f89d 2007 	ldrb.w	r2, [sp, #7]
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006396:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
 800639a:	e710      	b.n	80061be <SX1276OnDio0Irq+0x106>
    SX1276ReadBuffer( addr, &data, 1 );
 800639c:	462a      	mov	r2, r5
 800639e:	f10d 0107 	add.w	r1, sp, #7
 80063a2:	200d      	movs	r0, #13
 80063a4:	f7ff fa42 	bl	800582c <SX1276ReadBuffer>
    return data;
 80063a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80063ac:	462a      	mov	r2, r5
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80063ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80063b2:	f10d 0107 	add.w	r1, sp, #7
 80063b6:	200d      	movs	r0, #13
 80063b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80063bc:	f7ff fa18 	bl	80057f0 <SX1276WriteBuffer>
 80063c0:	e7d6      	b.n	8006370 <SX1276OnDio0Irq+0x2b8>
 80063c2:	bf00      	nop
 80063c4:	200011b8 	.word	0x200011b8
 80063c8:	200012fc 	.word	0x200012fc
 80063cc:	20001084 	.word	0x20001084
 80063d0:	200010a0 	.word	0x200010a0
 80063d4:	200012ce 	.word	0x200012ce
 80063d8:	200010b8 	.word	0x200010b8
 80063dc:	1f4add40 	.word	0x1f4add40
 80063e0:	20001088 	.word	0x20001088

080063e4 <SX1276SetOpMode>:
{
 80063e4:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 80063e6:	4604      	mov	r4, r0
{
 80063e8:	b082      	sub	sp, #8
    if( opMode == RF_OPMODE_SLEEP )
 80063ea:	b9c0      	cbnz	r0, 800641e <SX1276SetOpMode+0x3a>
        SX1276SetAntSwLowPower( true );
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7ff faad 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80063f2:	2201      	movs	r2, #1
 80063f4:	4610      	mov	r0, r2
 80063f6:	f10d 0107 	add.w	r1, sp, #7
 80063fa:	f7ff fa17 	bl	800582c <SX1276ReadBuffer>
    return data;
 80063fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006402:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006404:	f021 0107 	bic.w	r1, r1, #7
 8006408:	ea41 0304 	orr.w	r3, r1, r4
    SX1276WriteBuffer( addr, &data, 1 );
 800640c:	4610      	mov	r0, r2
 800640e:	f10d 0107 	add.w	r1, sp, #7
 8006412:	f88d 3007 	strb.w	r3, [sp, #7]
 8006416:	f7ff f9eb 	bl	80057f0 <SX1276WriteBuffer>
}
 800641a:	b002      	add	sp, #8
 800641c:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800641e:	2001      	movs	r0, #1
 8006420:	f7ff fa96 	bl	8005950 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8006424:	2000      	movs	r0, #0
 8006426:	f7ff fa91 	bl	800594c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fa92 	bl	8005954 <SX1276SetAntSw>
 8006430:	e7df      	b.n	80063f2 <SX1276SetOpMode+0xe>
 8006432:	bf00      	nop

08006434 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <SX1276OnDio4Irq+0x18>)
 8006436:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 800643a:	b92a      	cbnz	r2, 8006448 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800643c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8006440:	b912      	cbnz	r2, 8006448 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8006442:	2201      	movs	r2, #1
 8006444:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200011b8 	.word	0x200011b8

08006450 <SX1276OnDio3Irq>:
{
 8006450:	b530      	push	{r4, r5, lr}
    switch( SX1276.Settings.Modem )
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <SX1276OnDio3Irq+0x78>)
 8006454:	f893 40e1 	ldrb.w	r4, [r3, #225]	; 0xe1
 8006458:	2c01      	cmp	r4, #1
{
 800645a:	b083      	sub	sp, #12
    switch( SX1276.Settings.Modem )
 800645c:	d001      	beq.n	8006462 <SX1276OnDio3Irq+0x12>
}
 800645e:	b003      	add	sp, #12
 8006460:	bd30      	pop	{r4, r5, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 8006462:	2012      	movs	r0, #18
 8006464:	4622      	mov	r2, r4
 8006466:	f10d 0107 	add.w	r1, sp, #7
 800646a:	f7ff f9df 	bl	800582c <SX1276ReadBuffer>
    return data;
 800646e:	f89d 0007 	ldrb.w	r0, [sp, #7]
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8006472:	f010 0501 	ands.w	r5, r0, #1
 8006476:	d014      	beq.n	80064a2 <SX1276OnDio3Irq+0x52>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8006478:	2305      	movs	r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 800647a:	4622      	mov	r2, r4
 800647c:	f10d 0107 	add.w	r1, sp, #7
 8006480:	2012      	movs	r0, #18
 8006482:	f88d 3007 	strb.w	r3, [sp, #7]
 8006486:	f7ff f9b3 	bl	80057f0 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <SX1276OnDio3Irq+0x7c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0e5      	beq.n	800645e <SX1276OnDio3Irq+0xe>
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0e2      	beq.n	800645e <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( true );
 8006498:	4620      	mov	r0, r4
}
 800649a:	b003      	add	sp, #12
 800649c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                RadioEvents->CadDone( false );
 80064a0:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80064a2:	2304      	movs	r3, #4
    SX1276WriteBuffer( addr, &data, 1 );
 80064a4:	4622      	mov	r2, r4
 80064a6:	f10d 0107 	add.w	r1, sp, #7
 80064aa:	2012      	movs	r0, #18
 80064ac:	f88d 3007 	strb.w	r3, [sp, #7]
 80064b0:	f7ff f99e 	bl	80057f0 <SX1276WriteBuffer>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80064b4:	4b05      	ldr	r3, [pc, #20]	; (80064cc <SX1276OnDio3Irq+0x7c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0d0      	beq.n	800645e <SX1276OnDio3Irq+0xe>
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0cd      	beq.n	800645e <SX1276OnDio3Irq+0xe>
                RadioEvents->CadDone( false );
 80064c2:	4628      	mov	r0, r5
 80064c4:	e7e9      	b.n	800649a <SX1276OnDio3Irq+0x4a>
 80064c6:	bf00      	nop
 80064c8:	200011b8 	.word	0x200011b8
 80064cc:	20001084 	.word	0x20001084

080064d0 <SX1276GetStatus>:
    return SX1276.Settings.State;
 80064d0:	4b01      	ldr	r3, [pc, #4]	; (80064d8 <SX1276GetStatus+0x8>)
}
 80064d2:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 80064d6:	4770      	bx	lr
 80064d8:	200011b8 	.word	0x200011b8

080064dc <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80064dc:	4918      	ldr	r1, [pc, #96]	; (8006540 <SX1276SetChannel+0x64>)
{
 80064de:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80064e0:	fba1 2300 	umull	r2, r3, r1, r0
 80064e4:	0b1b      	lsrs	r3, r3, #12
 80064e6:	f643 5409 	movw	r4, #15625	; 0x3d09
 80064ea:	fb04 0213 	mls	r2, r4, r3, r0
 80064ee:	f641 6484 	movw	r4, #7812	; 0x1e84
 80064f2:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 80064f6:	fba1 2404 	umull	r2, r4, r1, r4
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 80064fa:	021b      	lsls	r3, r3, #8
{
 80064fc:	b082      	sub	sp, #8
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 80064fe:	eb03 3414 	add.w	r4, r3, r4, lsr #12
    SX1276.Settings.Channel = freq;
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <SX1276SetChannel+0x68>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8006504:	0c21      	lsrs	r1, r4, #16
 8006506:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276.Settings.Channel = freq;
 800650a:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 800650e:	f10d 0107 	add.w	r1, sp, #7
 8006512:	2201      	movs	r2, #1
 8006514:	2006      	movs	r0, #6
 8006516:	f7ff f96b 	bl	80057f0 <SX1276WriteBuffer>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800651a:	0a23      	lsrs	r3, r4, #8
    SX1276WriteBuffer( addr, &data, 1 );
 800651c:	f10d 0107 	add.w	r1, sp, #7
 8006520:	2201      	movs	r2, #1
 8006522:	2007      	movs	r0, #7
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8006524:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006528:	f7ff f962 	bl	80057f0 <SX1276WriteBuffer>
 800652c:	2201      	movs	r2, #1
 800652e:	f10d 0107 	add.w	r1, sp, #7
 8006532:	2008      	movs	r0, #8
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8006534:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006538:	f7ff f95a 	bl	80057f0 <SX1276WriteBuffer>
}
 800653c:	b002      	add	sp, #8
 800653e:	bd10      	pop	{r4, pc}
 8006540:	431bde83 	.word	0x431bde83
 8006544:	200011b8 	.word	0x200011b8

08006548 <RxChainCalibration>:
{
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800654c:	2201      	movs	r2, #1
 800654e:	f10d 0107 	add.w	r1, sp, #7
 8006552:	2009      	movs	r0, #9
 8006554:	f7ff f96a 	bl	800582c <SX1276ReadBuffer>
 8006558:	2201      	movs	r2, #1
 800655a:	f10d 0107 	add.w	r1, sp, #7
 800655e:	2006      	movs	r0, #6
    return data;
 8006560:	f89d 6007 	ldrb.w	r6, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8006564:	f7ff f962 	bl	800582c <SX1276ReadBuffer>
 8006568:	2201      	movs	r2, #1
 800656a:	f10d 0107 	add.w	r1, sp, #7
 800656e:	2007      	movs	r0, #7
    return data;
 8006570:	f89d 5007 	ldrb.w	r5, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 8006574:	f7ff f95a 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006578:	f89d 4007 	ldrb.w	r4, [sp, #7]
    SX1276ReadBuffer( addr, &data, 1 );
 800657c:	2201      	movs	r2, #1
 800657e:	f10d 0107 	add.w	r1, sp, #7
 8006582:	2008      	movs	r0, #8
 8006584:	f7ff f952 	bl	800582c <SX1276ReadBuffer>
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006588:	0224      	lsls	r4, r4, #8
    return data;
 800658a:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800658e:	f643 5209 	movw	r2, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006592:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	2100      	movs	r1, #0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800659c:	0a2d      	lsrs	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800659e:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80065a0:	fb02 f505 	mul.w	r5, r2, r5
 80065a4:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80065a8:	2201      	movs	r2, #1
 80065aa:	f10d 0107 	add.w	r1, sp, #7
 80065ae:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80065b0:	eb05 2513 	add.w	r5, r5, r3, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 80065b4:	f7ff f91c 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80065b8:	2201      	movs	r2, #1
 80065ba:	f10d 0107 	add.w	r1, sp, #7
 80065be:	203b      	movs	r0, #59	; 0x3b
 80065c0:	f7ff f934 	bl	800582c <SX1276ReadBuffer>
    return data;
 80065c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80065c8:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80065ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80065ce:	f10d 0107 	add.w	r1, sp, #7
 80065d2:	203b      	movs	r0, #59	; 0x3b
 80065d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80065d8:	f7ff f90a 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80065dc:	2201      	movs	r2, #1
 80065de:	f10d 0107 	add.w	r1, sp, #7
 80065e2:	203b      	movs	r0, #59	; 0x3b
 80065e4:	f7ff f922 	bl	800582c <SX1276ReadBuffer>
    return data;
 80065e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80065ec:	f013 0420 	ands.w	r4, r3, #32
 80065f0:	d1f4      	bne.n	80065dc <RxChainCalibration+0x94>
    SX1276.Settings.Channel = freq;
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <RxChainCalibration+0x138>)
 80065f4:	4f23      	ldr	r7, [pc, #140]	; (8006684 <RxChainCalibration+0x13c>)
 80065f6:	f8c3 70e4 	str.w	r7, [r3, #228]	; 0xe4
    SX1276WriteBuffer( addr, &data, 1 );
 80065fa:	2201      	movs	r2, #1
 80065fc:	23d9      	movs	r3, #217	; 0xd9
 80065fe:	f10d 0107 	add.w	r1, sp, #7
 8006602:	2006      	movs	r0, #6
 8006604:	f88d 3007 	strb.w	r3, [sp, #7]
 8006608:	f7ff f8f2 	bl	80057f0 <SX1276WriteBuffer>
 800660c:	2201      	movs	r2, #1
 800660e:	f10d 0107 	add.w	r1, sp, #7
 8006612:	2007      	movs	r0, #7
 8006614:	f88d 4007 	strb.w	r4, [sp, #7]
 8006618:	f7ff f8ea 	bl	80057f0 <SX1276WriteBuffer>
 800661c:	2201      	movs	r2, #1
 800661e:	f10d 0107 	add.w	r1, sp, #7
 8006622:	2008      	movs	r0, #8
 8006624:	f88d 4007 	strb.w	r4, [sp, #7]
 8006628:	f7ff f8e2 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800662c:	2201      	movs	r2, #1
 800662e:	f10d 0107 	add.w	r1, sp, #7
 8006632:	203b      	movs	r0, #59	; 0x3b
 8006634:	f7ff f8fa 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006638:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800663c:	2201      	movs	r2, #1
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800663e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006642:	f10d 0107 	add.w	r1, sp, #7
 8006646:	203b      	movs	r0, #59	; 0x3b
 8006648:	f88d 3007 	strb.w	r3, [sp, #7]
 800664c:	f7ff f8d0 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006650:	2201      	movs	r2, #1
 8006652:	f10d 0107 	add.w	r1, sp, #7
 8006656:	203b      	movs	r0, #59	; 0x3b
 8006658:	f7ff f8e8 	bl	800582c <SX1276ReadBuffer>
    return data;
 800665c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006660:	069b      	lsls	r3, r3, #26
 8006662:	d4f5      	bmi.n	8006650 <RxChainCalibration+0x108>
    SX1276WriteBuffer( addr, &data, 1 );
 8006664:	2201      	movs	r2, #1
 8006666:	f10d 0107 	add.w	r1, sp, #7
 800666a:	2009      	movs	r0, #9
 800666c:	f88d 6007 	strb.w	r6, [sp, #7]
 8006670:	f7ff f8be 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetChannel( initialFreq );
 8006674:	4628      	mov	r0, r5
}
 8006676:	b003      	add	sp, #12
 8006678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    SX1276SetChannel( initialFreq );
 800667c:	f7ff bf2e 	b.w	80064dc <SX1276SetChannel>
 8006680:	200011b8 	.word	0x200011b8
 8006684:	33bca100 	.word	0x33bca100

08006688 <SX1276GetTimeOnAir>:
{
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	f8bd c010 	ldrh.w	ip, [sp, #16]
 800668e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8006692:	f89d e018 	ldrb.w	lr, [sp, #24]
 8006696:	f89d 501c 	ldrb.w	r5, [sp, #28]
    switch( modem )
 800669a:	2800      	cmp	r0, #0
 800669c:	d041      	beq.n	8006722 <SX1276GetTimeOnAir+0x9a>
 800669e:	2801      	cmp	r0, #1
 80066a0:	d13d      	bne.n	800671e <SX1276GetTimeOnAir+0x96>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80066a2:	1f50      	subs	r0, r2, #5
 80066a4:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
 80066a6:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80066aa:	d956      	bls.n	800675a <SX1276GetTimeOnAir+0xd2>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d04d      	beq.n	800674c <SX1276GetTimeOnAir+0xc4>
 80066b0:	2901      	cmp	r1, #1
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80066b2:	bf03      	ittte	eq
 80066b4:	f1a2 060c 	subeq.w	r6, r2, #12
 80066b8:	fab6 f686 	clzeq	r6, r6
 80066bc:	0976      	lsreq	r6, r6, #5
    bool    lowDatareOptimize = false;
 80066be:	2600      	movne	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80066c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80066c4:	b10d      	cbz	r5, 80066ca <SX1276GetTimeOnAir+0x42>
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80066c6:	f10e 0e10 	add.w	lr, lr, #16
                            ( crcOn ? 16 : 0 ) -
 80066ca:	ebae 0e82 	sub.w	lr, lr, r2, lsl #2
                            ( 4 * datarate ) +
 80066ce:	0090      	lsls	r0, r2, #2
                            ( fixLen ? 0 : 20 );
 80066d0:	b90c      	cbnz	r4, 80066d6 <SX1276GetTimeOnAir+0x4e>
                            ( 4 * datarate ) +
 80066d2:	f10e 0e14 	add.w	lr, lr, #20
    if( datarate <= 6 )
 80066d6:	2a06      	cmp	r2, #6
            ceilDenominator = 4 * ( datarate - 2 );
 80066d8:	f1a2 0402 	sub.w	r4, r2, #2
    if( datarate <= 6 )
 80066dc:	d845      	bhi.n	800676a <SX1276GetTimeOnAir+0xe2>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80066de:	f1be 0f00 	cmp.w	lr, #0
 80066e2:	bfac      	ite	ge
 80066e4:	eb00 020e 	addge.w	r2, r0, lr
 80066e8:	1c02      	addlt	r2, r0, #0
 80066ea:	3a01      	subs	r2, #1
 80066ec:	fb92 f2f0 	sdiv	r2, r2, r0
 80066f0:	fb03 cc02 	mla	ip, r3, r2, ip
        intermediate += 2;
 80066f4:	f10c 0c0e 	add.w	ip, ip, #14
    switch( bw )
 80066f8:	2902      	cmp	r1, #2
 80066fa:	d84a      	bhi.n	8006792 <SX1276GetTimeOnAir+0x10a>
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <SX1276GetTimeOnAir+0x10c>)
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80066fe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006702:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8006706:	f10c 0001 	add.w	r0, ip, #1
 800670a:	fa00 fc04 	lsl.w	ip, r0, r4
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800670e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 8006712:	1e50      	subs	r0, r2, #1
 8006714:	fb03 000c 	mla	r0, r3, ip, r0
 8006718:	fbb0 f0f2 	udiv	r0, r0, r2
}
 800671c:	bd70      	pop	{r4, r5, r6, pc}
    switch( modem )
 800671e:	2000      	movs	r0, #0
}
 8006720:	bd70      	pop	{r4, r5, r6, pc}
    return ( preambleLen << 3 ) +
 8006722:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8006726:	b90c      	cbnz	r4, 800672c <SX1276GetTimeOnAir+0xa4>
    return ( preambleLen << 3 ) +
 8006728:	f10c 0c08 	add.w	ip, ip, #8
           ( ( fixLen == false ) ? 8 : 0 ) +
 800672c:	f10c 0c18 	add.w	ip, ip, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 8006730:	b10d      	cbz	r5, 8006736 <SX1276GetTimeOnAir+0xae>
               ( 0 ) + // Address filter size
 8006732:	f10e 0e02 	add.w	lr, lr, #2
             ( syncWordLength << 3 ) +
 8006736:	eb0c 0ece 	add.w	lr, ip, lr, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800673a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    return ( numerator + denominator - 1 ) / denominator;
 800673e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8006742:	fb00 cc0e 	mla	ip, r0, lr, ip
 8006746:	fbbc f0f2 	udiv	r0, ip, r2
}
 800674a:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800674c:	f1a2 060b 	sub.w	r6, r2, #11
 8006750:	2e01      	cmp	r6, #1
 8006752:	bf8c      	ite	hi
 8006754:	2600      	movhi	r6, #0
 8006756:	2601      	movls	r6, #1
 8006758:	e7b2      	b.n	80066c0 <SX1276GetTimeOnAir+0x38>
        if( preambleLen < 12 )
 800675a:	f1bc 0f0c 	cmp.w	ip, #12
 800675e:	bf38      	it	cc
 8006760:	f04f 0c0c 	movcc.w	ip, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006764:	2900      	cmp	r1, #0
 8006766:	d1a3      	bne.n	80066b0 <SX1276GetTimeOnAir+0x28>
 8006768:	e7f0      	b.n	800674c <SX1276GetTimeOnAir+0xc4>
        ceilNumerator += 8;
 800676a:	f10e 0e08 	add.w	lr, lr, #8
        if( lowDatareOptimize == true )
 800676e:	b176      	cbz	r6, 800678e <SX1276GetTimeOnAir+0x106>
            ceilDenominator = 4 * ( datarate - 2 );
 8006770:	00a2      	lsls	r2, r4, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006772:	f1be 0f00 	cmp.w	lr, #0
 8006776:	bfac      	ite	ge
 8006778:	eb02 000e 	addge.w	r0, r2, lr
 800677c:	1c10      	addlt	r0, r2, #0
 800677e:	3801      	subs	r0, #1
 8006780:	fb90 f2f2 	sdiv	r2, r0, r2
 8006784:	fb03 cc02 	mla	ip, r3, r2, ip
    int32_t intermediate =
 8006788:	f10c 0c0c 	add.w	ip, ip, #12
    if( datarate <= 6 )
 800678c:	e7b4      	b.n	80066f8 <SX1276GetTimeOnAir+0x70>
            ceilDenominator = 4 * datarate;
 800678e:	4602      	mov	r2, r0
 8006790:	e7ef      	b.n	8006772 <SX1276GetTimeOnAir+0xea>
    return ( numerator + denominator - 1 ) / denominator;
 8006792:	deff      	udf	#255	; 0xff
 8006794:	0800e8b4 	.word	0x0800e8b4

08006798 <SX1276Send>:
{
 8006798:	b5b0      	push	{r4, r5, r7, lr}
    switch( SX1276.Settings.Modem )
 800679a:	4c99      	ldr	r4, [pc, #612]	; (8006a00 <SX1276Send+0x268>)
{
 800679c:	b084      	sub	sp, #16
    switch( SX1276.Settings.Modem )
 800679e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
{
 80067a2:	f88d 1007 	strb.w	r1, [sp, #7]
 80067a6:	4607      	mov	r7, r0
    switch( SX1276.Settings.Modem )
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	f000 80bb 	beq.w	8006924 <SX1276Send+0x18c>
 80067ae:	2d01      	cmp	r5, #1
 80067b0:	d14d      	bne.n	800684e <SX1276Send+0xb6>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80067b2:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 80067b6:	f10d 010f 	add.w	r1, sp, #15
 80067ba:	462a      	mov	r2, r5
 80067bc:	9100      	str	r1, [sp, #0]
 80067be:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80e4 	beq.w	800698e <SX1276Send+0x1f6>
    SX1276ReadBuffer( addr, &data, 1 );
 80067c6:	f7ff f831 	bl	800582c <SX1276ReadBuffer>
    return data;
 80067ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 80067ce:	9900      	ldr	r1, [sp, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80067d0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 80067d4:	462a      	mov	r2, r5
 80067d6:	2033      	movs	r0, #51	; 0x33
 80067d8:	f88d 300f 	strb.w	r3, [sp, #15]
 80067dc:	f7ff f808 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80067e0:	2319      	movs	r3, #25
    SX1276WriteBuffer( addr, &data, 1 );
 80067e2:	462a      	mov	r2, r5
 80067e4:	9900      	ldr	r1, [sp, #0]
 80067e6:	f88d 300f 	strb.w	r3, [sp, #15]
 80067ea:	203b      	movs	r0, #59	; 0x3b
 80067ec:	f7ff f800 	bl	80057f0 <SX1276WriteBuffer>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80067f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80067f4:	9900      	ldr	r1, [sp, #0]
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80067f6:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
    SX1276WriteBuffer( addr, &data, 1 );
 80067fa:	2201      	movs	r2, #1
 80067fc:	2022      	movs	r0, #34	; 0x22
 80067fe:	f88d 300f 	strb.w	r3, [sp, #15]
 8006802:	2500      	movs	r5, #0
 8006804:	9100      	str	r1, [sp, #0]
 8006806:	f7fe fff3 	bl	80057f0 <SX1276WriteBuffer>
 800680a:	9900      	ldr	r1, [sp, #0]
 800680c:	f88d 500f 	strb.w	r5, [sp, #15]
 8006810:	2201      	movs	r2, #1
 8006812:	200e      	movs	r0, #14
 8006814:	f7fe ffec 	bl	80057f0 <SX1276WriteBuffer>
 8006818:	9900      	ldr	r1, [sp, #0]
 800681a:	f88d 500f 	strb.w	r5, [sp, #15]
 800681e:	2201      	movs	r2, #1
 8006820:	200d      	movs	r0, #13
 8006822:	f7fe ffe5 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006826:	2201      	movs	r2, #1
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	4610      	mov	r0, r2
 800682c:	f7fe fffe 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006830:	f89d 300f 	ldrb.w	r3, [sp, #15]
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006834:	f033 05f8 	bics.w	r5, r3, #248	; 0xf8
 8006838:	f000 80cf 	beq.w	80069da <SX1276Send+0x242>
    SX1276WriteBuffer( 0, buffer, size );
 800683c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006840:	4639      	mov	r1, r7
 8006842:	2000      	movs	r0, #0
 8006844:	f7fe ffd4 	bl	80057f0 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006848:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
 800684c:	e000      	b.n	8006850 <SX1276Send+0xb8>
    switch( SX1276.Settings.Modem )
 800684e:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
 8006850:	486c      	ldr	r0, [pc, #432]	; (8006a04 <SX1276Send+0x26c>)
 8006852:	f7ff fa81 	bl	8005d58 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006856:	4629      	mov	r1, r5
 8006858:	486b      	ldr	r0, [pc, #428]	; (8006a08 <SX1276Send+0x270>)
 800685a:	f7ff fac5 	bl	8005de8 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 800685e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8006862:	b375      	cbz	r5, 80068c2 <SX1276Send+0x12a>
 8006864:	2d01      	cmp	r5, #1
 8006866:	d121      	bne.n	80068ac <SX1276Send+0x114>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006868:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 809f 	beq.w	80069b0 <SX1276Send+0x218>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006872:	23f5      	movs	r3, #245	; 0xf5
    SX1276WriteBuffer( addr, &data, 1 );
 8006874:	462a      	mov	r2, r5
 8006876:	f10d 010f 	add.w	r1, sp, #15
 800687a:	2011      	movs	r0, #17
 800687c:	f88d 300f 	strb.w	r3, [sp, #15]
 8006880:	f7fe ffb6 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006884:	462a      	mov	r2, r5
 8006886:	f10d 010f 	add.w	r1, sp, #15
 800688a:	2040      	movs	r0, #64	; 0x40
 800688c:	f7fe ffce 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006890:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8006894:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006896:	f003 0333 	and.w	r3, r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800689a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 800689e:	f10d 010f 	add.w	r1, sp, #15
 80068a2:	2040      	movs	r0, #64	; 0x40
 80068a4:	f88d 300f 	strb.w	r3, [sp, #15]
 80068a8:	f7fe ffa2 	bl	80057f0 <SX1276WriteBuffer>
    SX1276.Settings.State = RF_TX_RUNNING;
 80068ac:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80068ae:	4856      	ldr	r0, [pc, #344]	; (8006a08 <SX1276Send+0x270>)
    SX1276.Settings.State = RF_TX_RUNNING;
 80068b0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80068b4:	f7ff f98e 	bl	8005bd4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80068b8:	2003      	movs	r0, #3
 80068ba:	f7ff fd93 	bl	80063e4 <SX1276SetOpMode>
}
 80068be:	b004      	add	sp, #16
 80068c0:	bdb0      	pop	{r4, r5, r7, pc}
    SX1276ReadBuffer( addr, &data, 1 );
 80068c2:	2201      	movs	r2, #1
 80068c4:	f10d 010f 	add.w	r1, sp, #15
 80068c8:	2040      	movs	r0, #64	; 0x40
 80068ca:	f7fe ffaf 	bl	800582c <SX1276ReadBuffer>
    return data;
 80068ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 80068d2:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80068d4:	f003 0303 	and.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 80068d8:	f10d 010f 	add.w	r1, sp, #15
 80068dc:	2040      	movs	r0, #64	; 0x40
 80068de:	f88d 300f 	strb.w	r3, [sp, #15]
 80068e2:	f7fe ff85 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80068e6:	2201      	movs	r2, #1
 80068e8:	f10d 010f 	add.w	r1, sp, #15
 80068ec:	2041      	movs	r0, #65	; 0x41
 80068ee:	f7fe ff9d 	bl	800582c <SX1276ReadBuffer>
    return data;
 80068f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 80068f6:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80068f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 80068fc:	f10d 010f 	add.w	r1, sp, #15
 8006900:	2041      	movs	r0, #65	; 0x41
 8006902:	f88d 300f 	strb.w	r3, [sp, #15]
 8006906:	f7fe ff73 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800690a:	2201      	movs	r2, #1
 800690c:	f10d 010f 	add.w	r1, sp, #15
 8006910:	2035      	movs	r0, #53	; 0x35
 8006912:	f7fe ff8b 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006916:	f89d 300f 	ldrb.w	r3, [sp, #15]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800691a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800691e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
        break;
 8006922:	e7c3      	b.n	80068ac <SX1276Send+0x114>
            if( SX1276.Settings.Fsk.FixLen == false )
 8006924:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
 8006928:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800692c:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8006930:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    SX1276WriteBuffer( 0, buffer, size );
 8006934:	2201      	movs	r2, #1
            if( SX1276.Settings.Fsk.FixLen == false )
 8006936:	b1d8      	cbz	r0, 8006970 <SX1276Send+0x1d8>
    SX1276WriteBuffer( addr, &data, 1 );
 8006938:	f10d 010f 	add.w	r1, sp, #15
 800693c:	2032      	movs	r0, #50	; 0x32
 800693e:	f88d 300f 	strb.w	r3, [sp, #15]
 8006942:	f7fe ff55 	bl	80057f0 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006946:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800694a:	1e53      	subs	r3, r2, #1
 800694c:	2b3f      	cmp	r3, #63	; 0x3f
 800694e:	d818      	bhi.n	8006982 <SX1276Send+0x1ea>
    SX1276WriteBuffer( 0, buffer, size );
 8006950:	4639      	mov	r1, r7
 8006952:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006954:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
 8006958:	f7fe ff4a 	bl	80057f0 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800695c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8006960:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006964:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006968:	4413      	add	r3, r2
 800696a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
 800696e:	e76f      	b.n	8006850 <SX1276Send+0xb8>
    SX1276WriteBuffer( 0, buffer, size );
 8006970:	f10d 0107 	add.w	r1, sp, #7
 8006974:	f7fe ff3c 	bl	80057f0 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006978:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800697c:	1e53      	subs	r3, r2, #1
 800697e:	2b3f      	cmp	r3, #63	; 0x3f
 8006980:	d9e6      	bls.n	8006950 <SX1276Send+0x1b8>
                memcpy1( RxTxBuffer, buffer, size );
 8006982:	4822      	ldr	r0, [pc, #136]	; (8006a0c <SX1276Send+0x274>)
 8006984:	4639      	mov	r1, r7
 8006986:	f7ff f913 	bl	8005bb0 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800698a:	2220      	movs	r2, #32
 800698c:	e7e0      	b.n	8006950 <SX1276Send+0x1b8>
    SX1276ReadBuffer( addr, &data, 1 );
 800698e:	f7fe ff4d 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006992:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 8006996:	9900      	ldr	r1, [sp, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006998:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800699c:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 80069a0:	462a      	mov	r2, r5
 80069a2:	2033      	movs	r0, #51	; 0x33
 80069a4:	f88d 300f 	strb.w	r3, [sp, #15]
 80069a8:	f7fe ff22 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80069ac:	231d      	movs	r3, #29
 80069ae:	e718      	b.n	80067e2 <SX1276Send+0x4a>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80069b0:	23f7      	movs	r3, #247	; 0xf7
    SX1276WriteBuffer( addr, &data, 1 );
 80069b2:	462a      	mov	r2, r5
 80069b4:	2011      	movs	r0, #17
 80069b6:	f10d 010f 	add.w	r1, sp, #15
 80069ba:	f88d 300f 	strb.w	r3, [sp, #15]
 80069be:	f7fe ff17 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80069c2:	462a      	mov	r2, r5
 80069c4:	f10d 010f 	add.w	r1, sp, #15
 80069c8:	2040      	movs	r0, #64	; 0x40
 80069ca:	f7fe ff2f 	bl	800582c <SX1276ReadBuffer>
    return data;
 80069ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    SX1276WriteBuffer( addr, &data, 1 );
 80069d2:	462a      	mov	r2, r5
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80069d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d8:	e75f      	b.n	800689a <SX1276Send+0x102>
    TimerStop( &RxTimeoutTimer );
 80069da:	480a      	ldr	r0, [pc, #40]	; (8006a04 <SX1276Send+0x26c>)
 80069dc:	f7ff f9bc 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80069e0:	4809      	ldr	r0, [pc, #36]	; (8006a08 <SX1276Send+0x270>)
 80069e2:	f7ff f9b9 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80069e6:	480a      	ldr	r0, [pc, #40]	; (8006a10 <SX1276Send+0x278>)
 80069e8:	f7ff f9b6 	bl	8005d58 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7ff fcf9 	bl	80063e4 <SX1276SetOpMode>
                DelayMs( 1 );
 80069f2:	2001      	movs	r0, #1
    SX1276.Settings.State = RF_IDLE;
 80069f4:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
                DelayMs( 1 );
 80069f8:	f7ff fa20 	bl	8005e3c <DelayMs>
 80069fc:	e71e      	b.n	800683c <SX1276Send+0xa4>
 80069fe:	bf00      	nop
 8006a00:	200011b8 	.word	0x200011b8
 8006a04:	200010a0 	.word	0x200010a0
 8006a08:	200012fc 	.word	0x200012fc
 8006a0c:	200010b8 	.word	0x200010b8
 8006a10:	20001088 	.word	0x20001088

08006a14 <SX1276SetSleep>:
{
 8006a14:	b500      	push	{lr}
    TimerStop( &RxTimeoutTimer );
 8006a16:	4814      	ldr	r0, [pc, #80]	; (8006a68 <SX1276SetSleep+0x54>)
{
 8006a18:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 8006a1a:	f7ff f99d 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006a1e:	4813      	ldr	r0, [pc, #76]	; (8006a6c <SX1276SetSleep+0x58>)
 8006a20:	f7ff f99a 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006a24:	4812      	ldr	r0, [pc, #72]	; (8006a70 <SX1276SetSleep+0x5c>)
 8006a26:	f7ff f997 	bl	8005d58 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f7fe ff8e 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006a30:	2201      	movs	r2, #1
 8006a32:	4610      	mov	r0, r2
 8006a34:	f10d 0107 	add.w	r1, sp, #7
 8006a38:	f7fe fef8 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006a40:	2201      	movs	r2, #1
 8006a42:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006a44:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006a48:	f10d 0107 	add.w	r1, sp, #7
 8006a4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006a50:	f7fe fece 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8006a54:	2000      	movs	r0, #0
 8006a56:	f7fe ff7b 	bl	8005950 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <SX1276SetSleep+0x60>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006a62:	b003      	add	sp, #12
 8006a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a68:	200010a0 	.word	0x200010a0
 8006a6c:	200012fc 	.word	0x200012fc
 8006a70:	20001088 	.word	0x20001088
 8006a74:	200011b8 	.word	0x200011b8

08006a78 <SX1276SetStby>:
{
 8006a78:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 8006a7a:	4808      	ldr	r0, [pc, #32]	; (8006a9c <SX1276SetStby+0x24>)
 8006a7c:	f7ff f96c 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006a80:	4807      	ldr	r0, [pc, #28]	; (8006aa0 <SX1276SetStby+0x28>)
 8006a82:	f7ff f969 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8006a86:	4807      	ldr	r0, [pc, #28]	; (8006aa4 <SX1276SetStby+0x2c>)
 8006a88:	f7ff f966 	bl	8005d58 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f7ff fca9 	bl	80063e4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <SX1276SetStby+0x30>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006a9a:	bd08      	pop	{r3, pc}
 8006a9c:	200010a0 	.word	0x200010a0
 8006aa0:	200012fc 	.word	0x200012fc
 8006aa4:	20001088 	.word	0x20001088
 8006aa8:	200011b8 	.word	0x200011b8

08006aac <SX1276SetRx>:
{
 8006aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch( SX1276.Settings.Modem )
 8006ab0:	4cd2      	ldr	r4, [pc, #840]	; (8006dfc <SX1276SetRx+0x350>)
{
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	4606      	mov	r6, r0
    TimerStop( &TxTimeoutTimer );
 8006ab6:	48d2      	ldr	r0, [pc, #840]	; (8006e00 <SX1276SetRx+0x354>)
 8006ab8:	f7ff f94e 	bl	8005d58 <TimerStop>
    switch( SX1276.Settings.Modem )
 8006abc:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	d071      	beq.n	8006ba8 <SX1276SetRx+0xfc>
 8006ac4:	2d01      	cmp	r5, #1
 8006ac6:	d14f      	bne.n	8006b68 <SX1276SetRx+0xbc>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006ac8:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
    SX1276ReadBuffer( addr, &data, 1 );
 8006acc:	f10d 0707 	add.w	r7, sp, #7
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 80bb 	bne.w	8006c52 <SX1276SetRx+0x1a6>
    SX1276ReadBuffer( addr, &data, 1 );
 8006adc:	f7fe fea6 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006ae4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
    SX1276WriteBuffer( addr, &data, 1 );
 8006aec:	462a      	mov	r2, r5
 8006aee:	4639      	mov	r1, r7
 8006af0:	2033      	movs	r0, #51	; 0x33
 8006af2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006af6:	f7fe fe7b 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006afa:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 8006afc:	462a      	mov	r2, r5
 8006afe:	4639      	mov	r1, r7
 8006b00:	203b      	movs	r0, #59	; 0x3b
 8006b02:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b06:	f7fe fe73 	bl	80057f0 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8006b0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006b0e:	2b08      	cmp	r3, #8
    SX1276ReadBuffer( addr, &data, 1 );
 8006b10:	f04f 0201 	mov.w	r2, #1
 8006b14:	4639      	mov	r1, r7
 8006b16:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8006b1a:	f200 80de 	bhi.w	8006cda <SX1276SetRx+0x22e>
    SX1276ReadBuffer( addr, &data, 1 );
 8006b1e:	f7fe fe85 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006b26:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	2031      	movs	r0, #49	; 0x31
 8006b30:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b34:	f7fe fe5c 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006b38:	2300      	movs	r3, #0
    SX1276WriteBuffer( addr, &data, 1 );
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	2030      	movs	r0, #48	; 0x30
 8006b40:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b44:	f7fe fe54 	bl	80057f0 <SX1276WriteBuffer>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006b48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	f200 8097 	bhi.w	8006c80 <SX1276SetRx+0x1d4>
 8006b52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b56:	0142      	.short	0x0142
 8006b58:	01220132 	.word	0x01220132
 8006b5c:	01020112 	.word	0x01020112
 8006b60:	008d00f2 	.word	0x008d00f2
 8006b64:	008d008d 	.word	0x008d008d
    switch( SX1276.Settings.Modem )
 8006b68:	f04f 0800 	mov.w	r8, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8006b6c:	48a5      	ldr	r0, [pc, #660]	; (8006e04 <SX1276SetRx+0x358>)
 8006b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b72:	2100      	movs	r1, #0
 8006b74:	f006 fda2 	bl	800d6bc <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	d15f      	bne.n	8006c42 <SX1276SetRx+0x196>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8006b82:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d052      	beq.n	8006c30 <SX1276SetRx+0x184>
        if( rxContinuous == true )
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d105      	bne.n	8006b9c <SX1276SetRx+0xf0>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006b90:	2006      	movs	r0, #6
}
 8006b92:	b002      	add	sp, #8
 8006b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006b98:	f7ff bc24 	b.w	80063e4 <SX1276SetOpMode>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8006b9c:	2005      	movs	r0, #5
}
 8006b9e:	b002      	add	sp, #8
 8006ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006ba4:	f7ff bc1e 	b.w	80063e4 <SX1276SetOpMode>
    SX1276ReadBuffer( addr, &data, 1 );
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f10d 0107 	add.w	r1, sp, #7
 8006bae:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8006bb0:	f894 8102 	ldrb.w	r8, [r4, #258]	; 0x102
    SX1276ReadBuffer( addr, &data, 1 );
 8006bb4:	f7fe fe3a 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006bb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006bbc:	f003 0303 	and.w	r3, r3, #3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8006bc0:	f043 030c 	orr.w	r3, r3, #12
    SX1276WriteBuffer( addr, &data, 1 );
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f10d 0107 	add.w	r1, sp, #7
 8006bca:	2040      	movs	r0, #64	; 0x40
 8006bcc:	f88d 3007 	strb.w	r3, [sp, #7]
 8006bd0:	f7fe fe0e 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f10d 0107 	add.w	r1, sp, #7
 8006bda:	2041      	movs	r0, #65	; 0x41
 8006bdc:	f7fe fe26 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006be0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006be4:	2201      	movs	r2, #1
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006be6:	f063 033e 	orn	r3, r3, #62	; 0x3e
    SX1276WriteBuffer( addr, &data, 1 );
 8006bea:	f10d 0107 	add.w	r1, sp, #7
 8006bee:	2041      	movs	r0, #65	; 0x41
 8006bf0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006bf4:	f7fe fdfc 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f10d 0107 	add.w	r1, sp, #7
 8006bfe:	2035      	movs	r0, #53	; 0x35
 8006c00:	f7fe fe14 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c0c:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
    SX1276WriteBuffer( addr, &data, 1 );
 8006c10:	f10d 0107 	add.w	r1, sp, #7
 8006c14:	231e      	movs	r3, #30
 8006c16:	2201      	movs	r2, #1
 8006c18:	200d      	movs	r0, #13
 8006c1a:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c1e:	f7fe fde7 	bl	80057f0 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006c22:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006c26:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006c2a:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
 8006c2e:	e79d      	b.n	8006b6c <SX1276SetRx+0xc0>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006c30:	2005      	movs	r0, #5
 8006c32:	f7ff fbd7 	bl	80063e4 <SX1276SetOpMode>
        if( rxContinuous == false )
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d073      	beq.n	8006d24 <SX1276SetRx+0x278>
}
 8006c3c:	b002      	add	sp, #8
 8006c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006c42:	4871      	ldr	r0, [pc, #452]	; (8006e08 <SX1276SetRx+0x35c>)
 8006c44:	4631      	mov	r1, r6
 8006c46:	f7ff f8cf 	bl	8005de8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006c4a:	486f      	ldr	r0, [pc, #444]	; (8006e08 <SX1276SetRx+0x35c>)
 8006c4c:	f7fe ffc2 	bl	8005bd4 <TimerStart>
 8006c50:	e797      	b.n	8006b82 <SX1276SetRx+0xd6>
    SX1276ReadBuffer( addr, &data, 1 );
 8006c52:	f7fe fdeb 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006c5a:	462a      	mov	r2, r5
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8006c5c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
    SX1276WriteBuffer( addr, &data, 1 );
 8006c60:	4639      	mov	r1, r7
 8006c62:	2033      	movs	r0, #51	; 0x33
 8006c64:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c68:	f7fe fdc2 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006c6c:	2319      	movs	r3, #25
 8006c6e:	e745      	b.n	8006afc <SX1276SetRx+0x50>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006c70:	2340      	movs	r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8006c72:	2201      	movs	r2, #1
 8006c74:	4639      	mov	r1, r7
 8006c76:	202f      	movs	r0, #47	; 0x2f
 8006c78:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c7c:	f7fe fdb8 	bl	80057f0 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006c80:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006c84:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006c88:	b3d3      	cbz	r3, 8006d00 <SX1276SetRx+0x254>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006c8a:	231d      	movs	r3, #29
    SX1276WriteBuffer( addr, &data, 1 );
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4639      	mov	r1, r7
 8006c90:	2011      	movs	r0, #17
 8006c92:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c96:	f7fe fdab 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	2040      	movs	r0, #64	; 0x40
 8006ca0:	f7fe fdc4 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006ca8:	f003 0333 	and.w	r3, r3, #51	; 0x33
    SX1276WriteBuffer( addr, &data, 1 );
 8006cac:	4639      	mov	r1, r7
 8006cae:	2201      	movs	r2, #1
 8006cb0:	2040      	movs	r0, #64	; 0x40
 8006cb2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	f7fe fd9a 	bl	80057f0 <SX1276WriteBuffer>
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	200f      	movs	r0, #15
 8006cc2:	f88d 5007 	strb.w	r5, [sp, #7]
 8006cc6:	f7fe fd93 	bl	80057f0 <SX1276WriteBuffer>
 8006cca:	4639      	mov	r1, r7
 8006ccc:	2201      	movs	r2, #1
 8006cce:	200d      	movs	r0, #13
 8006cd0:	f88d 5007 	strb.w	r5, [sp, #7]
 8006cd4:	f7fe fd8c 	bl	80057f0 <SX1276WriteBuffer>
        break;
 8006cd8:	e748      	b.n	8006b6c <SX1276SetRx+0xc0>
    SX1276ReadBuffer( addr, &data, 1 );
 8006cda:	f7fe fda7 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ce2:	2201      	movs	r2, #1
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006ce8:	4639      	mov	r1, r7
 8006cea:	2031      	movs	r0, #49	; 0x31
 8006cec:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cf0:	f7fe fd7e 	bl	80057f0 <SX1276WriteBuffer>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006cf4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006cf8:	f894 8132 	ldrb.w	r8, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1c4      	bne.n	8006c8a <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006d00:	231f      	movs	r3, #31
    SX1276WriteBuffer( addr, &data, 1 );
 8006d02:	2201      	movs	r2, #1
 8006d04:	4639      	mov	r1, r7
 8006d06:	2011      	movs	r0, #17
 8006d08:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d0c:	f7fe fd70 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006d10:	2201      	movs	r2, #1
 8006d12:	4639      	mov	r1, r7
 8006d14:	2040      	movs	r0, #64	; 0x40
 8006d16:	f7fe fd89 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006d1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d22:	e7c3      	b.n	8006cac <SX1276SetRx+0x200>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006d24:	4839      	ldr	r0, [pc, #228]	; (8006e0c <SX1276SetRx+0x360>)
 8006d26:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 8006d2a:	f7ff f85d 	bl	8005de8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8006d2e:	4837      	ldr	r0, [pc, #220]	; (8006e0c <SX1276SetRx+0x360>)
}
 8006d30:	b002      	add	sp, #8
 8006d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            TimerStart( &RxTimeoutSyncWord );
 8006d36:	f7fe bf4d 	b.w	8005bd4 <TimerStart>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d3a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4639      	mov	r1, r7
 8006d40:	202f      	movs	r0, #47	; 0x2f
 8006d42:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d46:	f7fe fd53 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006d4a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006d4e:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8006d52:	30c6      	adds	r0, #198	; 0xc6
 8006d54:	f7ff fbc2 	bl	80064dc <SX1276SetChannel>
                    break;
 8006d58:	e792      	b.n	8006c80 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d5a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4639      	mov	r1, r7
 8006d60:	202f      	movs	r0, #47	; 0x2f
 8006d62:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d66:	f7fe fd43 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8006d6a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006d6e:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8006d72:	3012      	adds	r0, #18
 8006d74:	f7ff fbb2 	bl	80064dc <SX1276SetChannel>
                    break;
 8006d78:	e782      	b.n	8006c80 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d7a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	4639      	mov	r1, r7
 8006d80:	202f      	movs	r0, #47	; 0x2f
 8006d82:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d86:	f7fe fd33 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006d8a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006d8e:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8006d92:	305e      	adds	r0, #94	; 0x5e
 8006d94:	f7ff fba2 	bl	80064dc <SX1276SetChannel>
                    break;
 8006d98:	e772      	b.n	8006c80 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d9a:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4639      	mov	r1, r7
 8006da0:	202f      	movs	r0, #47	; 0x2f
 8006da2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006da6:	f7fe fd23 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006daa:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006dae:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8006db2:	3004      	adds	r0, #4
 8006db4:	f7ff fb92 	bl	80064dc <SX1276SetChannel>
                    break;
 8006db8:	e762      	b.n	8006c80 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006dba:	2344      	movs	r3, #68	; 0x44
    SX1276WriteBuffer( addr, &data, 1 );
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	202f      	movs	r0, #47	; 0x2f
 8006dc2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006dc6:	f7fe fd13 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8006dca:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006dce:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8006dd2:	3034      	adds	r0, #52	; 0x34
 8006dd4:	f7ff fb82 	bl	80064dc <SX1276SetChannel>
                    break;
 8006dd8:	e752      	b.n	8006c80 <SX1276SetRx+0x1d4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8006dda:	2348      	movs	r3, #72	; 0x48
    SX1276WriteBuffer( addr, &data, 1 );
 8006ddc:	2201      	movs	r2, #1
 8006dde:	4639      	mov	r1, r7
 8006de0:	202f      	movs	r0, #47	; 0x2f
 8006de2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006de6:	f7fe fd03 	bl	80057f0 <SX1276WriteBuffer>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006dea:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006dee:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8006df2:	3002      	adds	r0, #2
 8006df4:	f7ff fb72 	bl	80064dc <SX1276SetChannel>
                    break;
 8006df8:	e742      	b.n	8006c80 <SX1276SetRx+0x1d4>
 8006dfa:	bf00      	nop
 8006dfc:	200011b8 	.word	0x200011b8
 8006e00:	200012fc 	.word	0x200012fc
 8006e04:	200010b8 	.word	0x200010b8
 8006e08:	200010a0 	.word	0x200010a0
 8006e0c:	20001088 	.word	0x20001088

08006e10 <SX1276SetModem>:
{
 8006e10:	b530      	push	{r4, r5, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8006e12:	2201      	movs	r2, #1
{
 8006e14:	b083      	sub	sp, #12
 8006e16:	4604      	mov	r4, r0
    SX1276ReadBuffer( addr, &data, 1 );
 8006e18:	f10d 0107 	add.w	r1, sp, #7
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7fe fd05 	bl	800582c <SX1276ReadBuffer>
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006e22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if( SX1276.Settings.Modem == modem )
 8006e26:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
 8006e2a:	d079      	beq.n	8006f20 <SX1276SetModem+0x110>
    SX1276.Settings.Modem = modem;
 8006e2c:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <SX1276SetModem+0x11c>)
    switch( SX1276.Settings.Modem )
 8006e2e:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
 8006e30:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8006e34:	d03a      	beq.n	8006eac <SX1276SetModem+0x9c>
        SX1276SetAntSwLowPower( true );
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7fe fd88 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f10d 0107 	add.w	r1, sp, #7
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7fe fcf2 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006e48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006e4c:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006e4e:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006e52:	f10d 0107 	add.w	r1, sp, #7
 8006e56:	4610      	mov	r0, r2
 8006e58:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e5c:	f7fe fcc8 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006e60:	2201      	movs	r2, #1
 8006e62:	f10d 0107 	add.w	r1, sp, #7
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fe fce0 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006e70:	2201      	movs	r2, #1
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006e76:	f10d 0107 	add.w	r1, sp, #7
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e80:	f7fe fcb6 	bl	80057f0 <SX1276WriteBuffer>
 8006e84:	f10d 0107 	add.w	r1, sp, #7
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	2040      	movs	r0, #64	; 0x40
 8006e8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e92:	f7fe fcad 	bl	80057f0 <SX1276WriteBuffer>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006e96:	2330      	movs	r3, #48	; 0x30
    SX1276WriteBuffer( addr, &data, 1 );
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f10d 0107 	add.w	r1, sp, #7
 8006e9e:	2041      	movs	r0, #65	; 0x41
 8006ea0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ea4:	f7fe fca4 	bl	80057f0 <SX1276WriteBuffer>
}
 8006ea8:	b003      	add	sp, #12
 8006eaa:	bd30      	pop	{r4, r5, pc}
        SX1276SetAntSwLowPower( true );
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7fe fd4d 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	f10d 0107 	add.w	r1, sp, #7
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7fe fcb7 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ec2:	4622      	mov	r2, r4
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006ec4:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006ec8:	f10d 0107 	add.w	r1, sp, #7
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ed2:	f7fe fc8d 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	f10d 0107 	add.w	r1, sp, #7
 8006edc:	4620      	mov	r0, r4
 8006ede:	f7fe fca5 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006ee6:	4622      	mov	r2, r4
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 8006eec:	f10d 0107 	add.w	r1, sp, #7
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	f7fe fc7a 	bl	80057f0 <SX1276WriteBuffer>
 8006efc:	4622      	mov	r2, r4
 8006efe:	f10d 0107 	add.w	r1, sp, #7
 8006f02:	2040      	movs	r0, #64	; 0x40
 8006f04:	f88d 5007 	strb.w	r5, [sp, #7]
 8006f08:	f7fe fc72 	bl	80057f0 <SX1276WriteBuffer>
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	f10d 0107 	add.w	r1, sp, #7
 8006f12:	2041      	movs	r0, #65	; 0x41
 8006f14:	f88d 5007 	strb.w	r5, [sp, #7]
 8006f18:	f7fe fc6a 	bl	80057f0 <SX1276WriteBuffer>
}
 8006f1c:	b003      	add	sp, #12
 8006f1e:	bd30      	pop	{r4, r5, pc}
 8006f20:	09da      	lsrs	r2, r3, #7
 8006f22:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <SX1276SetModem+0x11c>)
 8006f24:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8006f28:	b003      	add	sp, #12
 8006f2a:	bd30      	pop	{r4, r5, pc}
 8006f2c:	200011b8 	.word	0x200011b8

08006f30 <SX1276Init>:
{
 8006f30:	b530      	push	{r4, r5, lr}
    RadioEvents = events;
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <SX1276Init+0x94>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f34:	4924      	ldr	r1, [pc, #144]	; (8006fc8 <SX1276Init+0x98>)
 8006f36:	4c25      	ldr	r4, [pc, #148]	; (8006fcc <SX1276Init+0x9c>)
{
 8006f38:	b083      	sub	sp, #12
 8006f3a:	4602      	mov	r2, r0
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f3c:	4824      	ldr	r0, [pc, #144]	; (8006fd0 <SX1276Init+0xa0>)
    RadioEvents = events;
 8006f3e:	601a      	str	r2, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f40:	f7fe fe40 	bl	8005bc4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f44:	4920      	ldr	r1, [pc, #128]	; (8006fc8 <SX1276Init+0x98>)
 8006f46:	4823      	ldr	r0, [pc, #140]	; (8006fd4 <SX1276Init+0xa4>)
 8006f48:	f7fe fe3c 	bl	8005bc4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006f4c:	491e      	ldr	r1, [pc, #120]	; (8006fc8 <SX1276Init+0x98>)
 8006f4e:	4822      	ldr	r0, [pc, #136]	; (8006fd8 <SX1276Init+0xa8>)
 8006f50:	f7fe fe38 	bl	8005bc4 <TimerInit>
    SX1276Reset( );
 8006f54:	f7fe fd00 	bl	8005958 <SX1276Reset>
    RxChainCalibration( );
 8006f58:	f7ff faf6 	bl	8006548 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f7fe fcf5 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 8006f62:	2201      	movs	r2, #1
 8006f64:	4610      	mov	r0, r2
 8006f66:	f10d 0107 	add.w	r1, sp, #7
 8006f6a:	f7fe fc5f 	bl	800582c <SX1276ReadBuffer>
    return data;
 8006f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8006f72:	2201      	movs	r2, #1
 8006f74:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006f76:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8006f7a:	f10d 0107 	add.w	r1, sp, #7
 8006f7e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006f82:	f7fe fc35 	bl	80057f0 <SX1276WriteBuffer>
    SX1276IoIrqInit( DioIrq );
 8006f86:	4815      	ldr	r0, [pc, #84]	; (8006fdc <SX1276Init+0xac>)
 8006f88:	f7fe fd0a 	bl	80059a0 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f8c:	f104 052d 	add.w	r5, r4, #45	; 0x2d
    SX1276IoIrqInit( DioIrq );
 8006f90:	2000      	movs	r0, #0
 8006f92:	e001      	b.n	8006f98 <SX1276Init+0x68>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006f94:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8006f98:	f7ff ff3a 	bl	8006e10 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006f9c:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 8006f9e:	7860      	ldrb	r0, [r4, #1]
 8006fa0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f10d 0107 	add.w	r1, sp, #7
 8006faa:	f7fe fc21 	bl	80057f0 <SX1276WriteBuffer>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006fae:	42ac      	cmp	r4, r5
 8006fb0:	d1f0      	bne.n	8006f94 <SX1276Init+0x64>
    SX1276SetModem( MODEM_FSK );
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7ff ff2c 	bl	8006e10 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <SX1276Init+0xb0>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006fc0:	b003      	add	sp, #12
 8006fc2:	bd30      	pop	{r4, r5, pc}
 8006fc4:	20001084 	.word	0x20001084
 8006fc8:	080079c5 	.word	0x080079c5
 8006fcc:	0800e970 	.word	0x0800e970
 8006fd0:	200012fc 	.word	0x200012fc
 8006fd4:	200010a0 	.word	0x200010a0
 8006fd8:	20001088 	.word	0x20001088
 8006fdc:	20000270 	.word	0x20000270
 8006fe0:	200011b8 	.word	0x200011b8

08006fe4 <SX1276IsChannelFree>:
{
 8006fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b083      	sub	sp, #12
    TimerStop( &RxTimeoutTimer );
 8006fec:	484d      	ldr	r0, [pc, #308]	; (8007124 <SX1276IsChannelFree+0x140>)
    SX1276.Settings.State = RF_IDLE;
 8006fee:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007134 <SX1276IsChannelFree+0x150>
{
 8006ff2:	461f      	mov	r7, r3
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	4690      	mov	r8, r2
    TimerStop( &RxTimeoutTimer );
 8006ff8:	f7fe feae 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006ffc:	484a      	ldr	r0, [pc, #296]	; (8007128 <SX1276IsChannelFree+0x144>)
 8006ffe:	f7fe feab 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007002:	484a      	ldr	r0, [pc, #296]	; (800712c <SX1276IsChannelFree+0x148>)
 8007004:	f7fe fea8 	bl	8005d58 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8007008:	2001      	movs	r0, #1
 800700a:	f7fe fc9f 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 800700e:	2201      	movs	r2, #1
 8007010:	4610      	mov	r0, r2
 8007012:	f10d 0107 	add.w	r1, sp, #7
 8007016:	f7fe fc09 	bl	800582c <SX1276ReadBuffer>
    return data;
 800701a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800701e:	2201      	movs	r2, #1
 8007020:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007022:	f023 0307 	bic.w	r3, r3, #7
    SX1276.Settings.State = RF_IDLE;
 8007026:	2400      	movs	r4, #0
    SX1276WriteBuffer( addr, &data, 1 );
 8007028:	f10d 0107 	add.w	r1, sp, #7
 800702c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007030:	f7fe fbde 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 8007034:	4620      	mov	r0, r4
 8007036:	f7fe fc8b 	bl	8005950 <SX1276SetBoardTcxo>
    SX1276SetModem( MODEM_FSK );
 800703a:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 800703c:	f889 40e0 	strb.w	r4, [r9, #224]	; 0xe0
    SX1276SetModem( MODEM_FSK );
 8007040:	f7ff fee6 	bl	8006e10 <SX1276SetModem>
    SX1276SetChannel( freq );
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fa49 	bl	80064dc <SX1276SetChannel>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800704a:	4a39      	ldr	r2, [pc, #228]	; (8007130 <SX1276IsChannelFree+0x14c>)
    SX1276SetChannel( freq );
 800704c:	4620      	mov	r0, r4
 800704e:	f640 2528 	movw	r5, #2600	; 0xa28
 8007052:	4614      	mov	r4, r2
 8007054:	e001      	b.n	800705a <SX1276IsChannelFree+0x76>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007056:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800705a:	42ae      	cmp	r6, r5
 800705c:	d302      	bcc.n	8007064 <SX1276IsChannelFree+0x80>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	429e      	cmp	r6, r3
 8007062:	d303      	bcc.n	800706c <SX1276IsChannelFree+0x88>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007064:	3001      	adds	r0, #1
 8007066:	2815      	cmp	r0, #21
 8007068:	d1f5      	bne.n	8007056 <SX1276IsChannelFree+0x72>
    while( 1 );
 800706a:	e7fe      	b.n	800706a <SX1276IsChannelFree+0x86>
            return FskBandwidths[i].RegValue;
 800706c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007070:	f10d 0107 	add.w	r1, sp, #7
            return FskBandwidths[i].RegValue;
 8007074:	7914      	ldrb	r4, [r2, #4]
 8007076:	f88d 4007 	strb.w	r4, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800707a:	2201      	movs	r2, #1
 800707c:	2012      	movs	r0, #18
 800707e:	f7fe fbb7 	bl	80057f0 <SX1276WriteBuffer>
 8007082:	2201      	movs	r2, #1
 8007084:	f10d 0107 	add.w	r1, sp, #7
 8007088:	2013      	movs	r0, #19
 800708a:	f88d 4007 	strb.w	r4, [sp, #7]
 800708e:	f7fe fbaf 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007092:	2005      	movs	r0, #5
 8007094:	f7ff f9a6 	bl	80063e4 <SX1276SetOpMode>
    DelayMs( 1 );
 8007098:	2001      	movs	r0, #1
 800709a:	f7fe fecf 	bl	8005e3c <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800709e:	f7fe feb5 	bl	8005e0c <TimerGetCurrentTime>
 80070a2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80070a4:	e007      	b.n	80070b6 <SX1276IsChannelFree+0xd2>
    SX1276ReadBuffer( addr, &data, 1 );
 80070a6:	f7fe fbc1 	bl	800582c <SX1276ReadBuffer>
    return data;
 80070aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	425b      	negs	r3, r3
        if( rssi > rssiThresh )
 80070b2:	4598      	cmp	r8, r3
 80070b4:	db34      	blt.n	8007120 <SX1276IsChannelFree+0x13c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7fe feb0 	bl	8005e1c <TimerGetElapsedTime>
 80070bc:	4603      	mov	r3, r0
 80070be:	42bb      	cmp	r3, r7
    SX1276ReadBuffer( addr, &data, 1 );
 80070c0:	f04f 0201 	mov.w	r2, #1
 80070c4:	f10d 0107 	add.w	r1, sp, #7
 80070c8:	f04f 0011 	mov.w	r0, #17
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80070cc:	d3eb      	bcc.n	80070a6 <SX1276IsChannelFree+0xc2>
    bool status = true;
 80070ce:	4614      	mov	r4, r2
    TimerStop( &RxTimeoutTimer );
 80070d0:	4814      	ldr	r0, [pc, #80]	; (8007124 <SX1276IsChannelFree+0x140>)
 80070d2:	f7fe fe41 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80070d6:	4814      	ldr	r0, [pc, #80]	; (8007128 <SX1276IsChannelFree+0x144>)
 80070d8:	f7fe fe3e 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80070dc:	4813      	ldr	r0, [pc, #76]	; (800712c <SX1276IsChannelFree+0x148>)
 80070de:	f7fe fe3b 	bl	8005d58 <TimerStop>
        SX1276SetAntSwLowPower( true );
 80070e2:	2001      	movs	r0, #1
 80070e4:	f7fe fc32 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80070e8:	2201      	movs	r2, #1
 80070ea:	f10d 0107 	add.w	r1, sp, #7
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7fe fb9c 	bl	800582c <SX1276ReadBuffer>
    return data;
 80070f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80070f8:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80070fa:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80070fe:	4610      	mov	r0, r2
 8007100:	f10d 0107 	add.w	r1, sp, #7
 8007104:	f88d 3007 	strb.w	r3, [sp, #7]
 8007108:	f7fe fb72 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 800710c:	2000      	movs	r0, #0
 800710e:	f7fe fc1f 	bl	8005950 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4620      	mov	r0, r4
    SX1276.Settings.State = RF_IDLE;
 8007116:	f889 30e0 	strb.w	r3, [r9, #224]	; 0xe0
}
 800711a:	b003      	add	sp, #12
 800711c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            status = false;
 8007120:	2400      	movs	r4, #0
 8007122:	e7d5      	b.n	80070d0 <SX1276IsChannelFree+0xec>
 8007124:	200010a0 	.word	0x200010a0
 8007128:	200012fc 	.word	0x200012fc
 800712c:	20001088 	.word	0x20001088
 8007130:	0800e8c0 	.word	0x0800e8c0
 8007134:	200011b8 	.word	0x200011b8

08007138 <SX1276Random>:
{
 8007138:	b530      	push	{r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800713a:	2001      	movs	r0, #1
{
 800713c:	b083      	sub	sp, #12
    SX1276SetModem( MODEM_LORA );
 800713e:	f7ff fe67 	bl	8006e10 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007142:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 8007144:	2201      	movs	r2, #1
 8007146:	f10d 0107 	add.w	r1, sp, #7
 800714a:	2011      	movs	r0, #17
 800714c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007150:	f7fe fb4e 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007154:	2005      	movs	r0, #5
 8007156:	f7ff f945 	bl	80063e4 <SX1276SetOpMode>
 800715a:	2400      	movs	r4, #0
    uint32_t rnd = 0;
 800715c:	4625      	mov	r5, r4
        DelayMs( 1 );
 800715e:	2001      	movs	r0, #1
 8007160:	f7fe fe6c 	bl	8005e3c <DelayMs>
    SX1276ReadBuffer( addr, &data, 1 );
 8007164:	2201      	movs	r2, #1
 8007166:	f10d 0107 	add.w	r1, sp, #7
 800716a:	202c      	movs	r0, #44	; 0x2c
 800716c:	f7fe fb5e 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007170:	f89d 3007 	ldrb.w	r3, [sp, #7]
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	40a3      	lsls	r3, r4
    for( i = 0; i < 32; i++ )
 800717a:	3401      	adds	r4, #1
 800717c:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800717e:	ea45 0503 	orr.w	r5, r5, r3
    for( i = 0; i < 32; i++ )
 8007182:	d1ec      	bne.n	800715e <SX1276Random+0x26>
    TimerStop( &RxTimeoutTimer );
 8007184:	4813      	ldr	r0, [pc, #76]	; (80071d4 <SX1276Random+0x9c>)
 8007186:	f7fe fde7 	bl	8005d58 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800718a:	4813      	ldr	r0, [pc, #76]	; (80071d8 <SX1276Random+0xa0>)
 800718c:	f7fe fde4 	bl	8005d58 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007190:	4812      	ldr	r0, [pc, #72]	; (80071dc <SX1276Random+0xa4>)
 8007192:	f7fe fde1 	bl	8005d58 <TimerStop>
        SX1276SetAntSwLowPower( true );
 8007196:	2001      	movs	r0, #1
 8007198:	f7fe fbd8 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 800719c:	2201      	movs	r2, #1
 800719e:	4610      	mov	r0, r2
 80071a0:	f10d 0107 	add.w	r1, sp, #7
 80071a4:	f7fe fb42 	bl	800582c <SX1276ReadBuffer>
    return data;
 80071a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 80071ac:	2201      	movs	r2, #1
 80071ae:	4610      	mov	r0, r2
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80071b0:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80071b4:	f10d 0107 	add.w	r1, sp, #7
 80071b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80071bc:	f7fe fb18 	bl	80057f0 <SX1276WriteBuffer>
    SX1276SetBoardTcxo( false );
 80071c0:	2000      	movs	r0, #0
 80071c2:	f7fe fbc5 	bl	8005950 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80071c6:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <SX1276Random+0xa8>)
 80071c8:	2200      	movs	r2, #0
}
 80071ca:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_IDLE;
 80071cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80071d0:	b003      	add	sp, #12
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	200010a0 	.word	0x200010a0
 80071d8:	200012fc 	.word	0x200012fc
 80071dc:	20001088 	.word	0x20001088
 80071e0:	200011b8 	.word	0x200011b8

080071e4 <SX1276SetRxConfig>:
{
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	b089      	sub	sp, #36	; 0x24
 80071ea:	461e      	mov	r6, r3
 80071ec:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 80071fc:	9302      	str	r3, [sp, #8]
 80071fe:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8007202:	9304      	str	r3, [sp, #16]
 8007204:	4604      	mov	r4, r0
 8007206:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800720a:	f8bd a04c 	ldrh.w	sl, [sp, #76]	; 0x4c
 800720e:	f8bd 7050 	ldrh.w	r7, [sp, #80]	; 0x50
 8007212:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8007216:	f89d 806c 	ldrb.w	r8, [sp, #108]	; 0x6c
 800721a:	9305      	str	r3, [sp, #20]
 800721c:	468b      	mov	fp, r1
 800721e:	4615      	mov	r5, r2
    SX1276SetModem( modem );
 8007220:	f7ff fdf6 	bl	8006e10 <SX1276SetModem>
    switch( modem )
 8007224:	2c00      	cmp	r4, #0
 8007226:	f000 80c2 	beq.w	80073ae <SX1276SetRxConfig+0x1ca>
 800722a:	2c01      	cmp	r4, #1
 800722c:	f040 80bb 	bne.w	80073a6 <SX1276SetRxConfig+0x1c2>
            if( bandwidth > 2 )
 8007230:	f1bb 0f02 	cmp.w	fp, #2
 8007234:	f200 80ba 	bhi.w	80073ac <SX1276SetRxConfig+0x1c8>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007238:	4bbe      	ldr	r3, [pc, #760]	; (8007534 <SX1276SetRxConfig+0x350>)
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800723a:	9a04      	ldr	r2, [sp, #16]
 800723c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8007240:	2d06      	cmp	r5, #6
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007242:	9a05      	ldr	r2, [sp, #20]
 8007244:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8007248:	f883 8132 	strb.w	r8, [r3, #306]	; 0x132
            SX1276.Settings.LoRa.FixLen = fixLen;
 800724c:	9a01      	ldr	r2, [sp, #4]
 800724e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8007252:	46a8      	mov	r8, r5
 8007254:	bf38      	it	cc
 8007256:	f04f 0806 	movcc.w	r8, #6
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800725a:	9a03      	ldr	r2, [sp, #12]
 800725c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
            bandwidth += 7;
 8007260:	f10b 0407 	add.w	r4, fp, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007264:	f1b8 0f0c 	cmp.w	r8, #12
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007268:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800726a:	f883 9131 	strb.w	r9, [r3, #305]	; 0x131
 800726e:	bf28      	it	cs
 8007270:	f04f 080c 	movcs.w	r8, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007274:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
 8007276:	e9c3 4548 	strd	r4, r5, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800727a:	f883 6129 	strb.w	r6, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800727e:	f8a3 a12a 	strh.w	sl, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007282:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007286:	f000 811f 	beq.w	80074c8 <SX1276SetRxConfig+0x2e4>
 800728a:	2c08      	cmp	r4, #8
 800728c:	f000 814d 	beq.w	800752a <SX1276SetRxConfig+0x346>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007290:	2200      	movs	r2, #0
    SX1276ReadBuffer( addr, &data, 1 );
 8007292:	f10d 091f 	add.w	r9, sp, #31
 8007296:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800729a:	4649      	mov	r1, r9
 800729c:	2201      	movs	r2, #1
 800729e:	201d      	movs	r0, #29
 80072a0:	f7fe fac4 	bl	800582c <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	ea43 0246 	orr.w	r2, r3, r6, lsl #1
 80072aa:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80072ae:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80072b2:	4649      	mov	r1, r9
 80072b4:	2201      	movs	r2, #1
 80072b6:	201d      	movs	r0, #29
 80072b8:	f7fe fa9a 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80072bc:	2201      	movs	r2, #1
 80072be:	4649      	mov	r1, r9
 80072c0:	201e      	movs	r0, #30
 80072c2:	f7fe fab3 	bl	800582c <SX1276ReadBuffer>
    return data;
 80072c6:	f89d 201f 	ldrb.w	r2, [sp, #31]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80072ca:	f002 0108 	and.w	r1, r2, #8
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80072ce:	f3c7 2201 	ubfx	r2, r7, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80072d2:	430a      	orrs	r2, r1
 80072d4:	9902      	ldr	r1, [sp, #8]
 80072d6:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 80072da:	ea42 1808 	orr.w	r8, r2, r8, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 80072de:	4649      	mov	r1, r9
 80072e0:	2201      	movs	r2, #1
 80072e2:	201e      	movs	r0, #30
 80072e4:	f88d 801f 	strb.w	r8, [sp, #31]
 80072e8:	f7fe fa82 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80072ec:	2201      	movs	r2, #1
 80072ee:	4649      	mov	r1, r9
 80072f0:	2026      	movs	r0, #38	; 0x26
 80072f2:	f7fe fa9b 	bl	800582c <SX1276ReadBuffer>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80072f6:	4b8f      	ldr	r3, [pc, #572]	; (8007534 <SX1276SetRxConfig+0x350>)
    return data;
 80072f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80072fc:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007300:	f022 0208 	bic.w	r2, r2, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007304:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8007308:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 800730c:	4649      	mov	r1, r9
 800730e:	2201      	movs	r2, #1
 8007310:	2026      	movs	r0, #38	; 0x26
 8007312:	f7fe fa6d 	bl	80057f0 <SX1276WriteBuffer>
 8007316:	2201      	movs	r2, #1
 8007318:	4649      	mov	r1, r9
 800731a:	201f      	movs	r0, #31
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800731c:	f88d 701f 	strb.w	r7, [sp, #31]
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007320:	ea4f 261a 	mov.w	r6, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007324:	f7fe fa64 	bl	80057f0 <SX1276WriteBuffer>
 8007328:	2201      	movs	r2, #1
 800732a:	4649      	mov	r1, r9
 800732c:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800732e:	f88d 601f 	strb.w	r6, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007332:	f7fe fa5d 	bl	80057f0 <SX1276WriteBuffer>
 8007336:	2201      	movs	r2, #1
 8007338:	4649      	mov	r1, r9
 800733a:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800733c:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007340:	f7fe fa56 	bl	80057f0 <SX1276WriteBuffer>
            if( fixLen == 1 )
 8007344:	9a01      	ldr	r2, [sp, #4]
 8007346:	4b7b      	ldr	r3, [pc, #492]	; (8007534 <SX1276SetRxConfig+0x350>)
 8007348:	2a00      	cmp	r2, #0
 800734a:	f040 80e0 	bne.w	800750e <SX1276SetRxConfig+0x32a>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800734e:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
 8007352:	2a00      	cmp	r2, #0
 8007354:	f040 80bf 	bne.w	80074d6 <SX1276SetRxConfig+0x2f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007358:	2c09      	cmp	r4, #9
 800735a:	f000 809c 	beq.w	8007496 <SX1276SetRxConfig+0x2b2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800735e:	2303      	movs	r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007360:	2201      	movs	r2, #1
 8007362:	4649      	mov	r1, r9
 8007364:	2036      	movs	r0, #54	; 0x36
 8007366:	f88d 301f 	strb.w	r3, [sp, #31]
 800736a:	f7fe fa41 	bl	80057f0 <SX1276WriteBuffer>
            if( datarate == 6 )
 800736e:	2d06      	cmp	r5, #6
 8007370:	d97d      	bls.n	800746e <SX1276SetRxConfig+0x28a>
    SX1276ReadBuffer( addr, &data, 1 );
 8007372:	2201      	movs	r2, #1
 8007374:	4649      	mov	r1, r9
 8007376:	2031      	movs	r0, #49	; 0x31
 8007378:	f7fe fa58 	bl	800582c <SX1276ReadBuffer>
    return data;
 800737c:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007380:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007384:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007388:	2201      	movs	r2, #1
 800738a:	4649      	mov	r1, r9
 800738c:	2031      	movs	r0, #49	; 0x31
 800738e:	f88d 301f 	strb.w	r3, [sp, #31]
 8007392:	f7fe fa2d 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007396:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8007398:	2201      	movs	r2, #1
 800739a:	4649      	mov	r1, r9
 800739c:	2037      	movs	r0, #55	; 0x37
 800739e:	f88d 301f 	strb.w	r3, [sp, #31]
 80073a2:	f7fe fa25 	bl	80057f0 <SX1276WriteBuffer>
}
 80073a6:	b009      	add	sp, #36	; 0x24
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 80073ac:	e7fe      	b.n	80073ac <SX1276SetRxConfig+0x1c8>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80073ae:	4b61      	ldr	r3, [pc, #388]	; (8007534 <SX1276SetRxConfig+0x350>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80073b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073b2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 80073b6:	9a01      	ldr	r2, [sp, #4]
 80073b8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80073bc:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80073be:	f883 9101 	strb.w	r9, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80073c2:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80073c6:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80073ca:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80073cc:	f883 8102 	strb.w	r8, [r3, #258]	; 0x102
    SX1276WriteBuffer( addr, &data, 1 );
 80073d0:	f10d 091f 	add.w	r9, sp, #31
            SX1276.Settings.Fsk.Datarate = datarate;
 80073d4:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80073d8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80073dc:	fb0e f707 	mul.w	r7, lr, r7
 80073e0:	4e55      	ldr	r6, [pc, #340]	; (8007538 <SX1276SetRxConfig+0x354>)
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80073e2:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8007540 <SX1276SetRxConfig+0x35c>
 80073e6:	fbb8 f8f5 	udiv	r8, r8, r5
    SX1276WriteBuffer( addr, &data, 1 );
 80073ea:	2201      	movs	r2, #1
 80073ec:	4649      	mov	r1, r9
 80073ee:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80073f0:	fbb7 f5f5 	udiv	r5, r7, r5
 80073f4:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80073f8:	ea4f 2518 	mov.w	r5, r8, lsr #8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80073fc:	f8c3 b0f0 	str.w	fp, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007400:	f8a3 a0fc 	strh.w	sl, [r3, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8007404:	f88d 501f 	strb.w	r5, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007408:	f7fe f9f2 	bl	80057f0 <SX1276WriteBuffer>
 800740c:	2201      	movs	r2, #1
 800740e:	4649      	mov	r1, r9
 8007410:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8007412:	f88d 801f 	strb.w	r8, [sp, #31]
 8007416:	4635      	mov	r5, r6
    SX1276WriteBuffer( addr, &data, 1 );
 8007418:	f7fe f9ea 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800741c:	4631      	mov	r1, r6
 800741e:	f640 2228 	movw	r2, #2600	; 0xa28
 8007422:	e001      	b.n	8007428 <SX1276SetRxConfig+0x244>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007424:	f851 2f08 	ldr.w	r2, [r1, #8]!
 8007428:	4593      	cmp	fp, r2
 800742a:	d302      	bcc.n	8007432 <SX1276SetRxConfig+0x24e>
 800742c:	688b      	ldr	r3, [r1, #8]
 800742e:	459b      	cmp	fp, r3
 8007430:	d303      	bcc.n	800743a <SX1276SetRxConfig+0x256>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007432:	3401      	adds	r4, #1
 8007434:	2c15      	cmp	r4, #21
 8007436:	d1f5      	bne.n	8007424 <SX1276SetRxConfig+0x240>
    while( 1 );
 8007438:	e7fe      	b.n	8007438 <SX1276SetRxConfig+0x254>
            return FskBandwidths[i].RegValue;
 800743a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 800743e:	2201      	movs	r2, #1
 8007440:	7923      	ldrb	r3, [r4, #4]
 8007442:	f88d 301f 	strb.w	r3, [sp, #31]
 8007446:	4649      	mov	r1, r9
 8007448:	2012      	movs	r0, #18
 800744a:	f7fe f9d1 	bl	80057f0 <SX1276WriteBuffer>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800744e:	9912      	ldr	r1, [sp, #72]	; 0x48
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8007450:	2300      	movs	r3, #0
 8007452:	f640 2228 	movw	r2, #2600	; 0xa28
 8007456:	e001      	b.n	800745c <SX1276SetRxConfig+0x278>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8007458:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800745c:	4291      	cmp	r1, r2
 800745e:	d302      	bcc.n	8007466 <SX1276SetRxConfig+0x282>
 8007460:	68b2      	ldr	r2, [r6, #8]
 8007462:	4291      	cmp	r1, r2
 8007464:	d36e      	bcc.n	8007544 <SX1276SetRxConfig+0x360>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8007466:	3301      	adds	r3, #1
 8007468:	2b15      	cmp	r3, #21
 800746a:	d1f5      	bne.n	8007458 <SX1276SetRxConfig+0x274>
    while( 1 );
 800746c:	e7fe      	b.n	800746c <SX1276SetRxConfig+0x288>
    SX1276ReadBuffer( addr, &data, 1 );
 800746e:	4649      	mov	r1, r9
 8007470:	2201      	movs	r2, #1
 8007472:	2031      	movs	r0, #49	; 0x31
 8007474:	f7fe f9da 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007478:	f89d 301f 	ldrb.w	r3, [sp, #31]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800747c:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007480:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 8007484:	4649      	mov	r1, r9
 8007486:	2201      	movs	r2, #1
 8007488:	2031      	movs	r0, #49	; 0x31
 800748a:	f88d 301f 	strb.w	r3, [sp, #31]
 800748e:	f7fe f9af 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007492:	230c      	movs	r3, #12
 8007494:	e780      	b.n	8007398 <SX1276SetRxConfig+0x1b4>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007496:	4a29      	ldr	r2, [pc, #164]	; (800753c <SX1276SetRxConfig+0x358>)
 8007498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800749c:	4293      	cmp	r3, r2
 800749e:	f04f 0302 	mov.w	r3, #2
    SX1276WriteBuffer( addr, &data, 1 );
 80074a2:	4649      	mov	r1, r9
 80074a4:	f04f 0201 	mov.w	r2, #1
 80074a8:	f88d 301f 	strb.w	r3, [sp, #31]
 80074ac:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80074b0:	d837      	bhi.n	8007522 <SX1276SetRxConfig+0x33e>
    SX1276WriteBuffer( addr, &data, 1 );
 80074b2:	f7fe f99d 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80074b6:	237f      	movs	r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 80074b8:	2201      	movs	r2, #1
 80074ba:	4649      	mov	r1, r9
 80074bc:	203a      	movs	r0, #58	; 0x3a
 80074be:	f88d 301f 	strb.w	r3, [sp, #31]
 80074c2:	f7fe f995 	bl	80057f0 <SX1276WriteBuffer>
 80074c6:	e752      	b.n	800736e <SX1276SetRxConfig+0x18a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80074c8:	f1a8 020b 	sub.w	r2, r8, #11
 80074cc:	2a01      	cmp	r2, #1
 80074ce:	bf8c      	ite	hi
 80074d0:	2200      	movhi	r2, #0
 80074d2:	2201      	movls	r2, #1
 80074d4:	e6dd      	b.n	8007292 <SX1276SetRxConfig+0xae>
    SX1276ReadBuffer( addr, &data, 1 );
 80074d6:	2201      	movs	r2, #1
 80074d8:	4649      	mov	r1, r9
 80074da:	2044      	movs	r0, #68	; 0x44
 80074dc:	f7fe f9a6 	bl	800582c <SX1276ReadBuffer>
    return data;
 80074e0:	f89d 201f 	ldrb.w	r2, [sp, #31]
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80074e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074e8:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80074ec:	4649      	mov	r1, r9
 80074ee:	2201      	movs	r2, #1
 80074f0:	2044      	movs	r0, #68	; 0x44
 80074f2:	f7fe f97d 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80074f6:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <SX1276SetRxConfig+0x350>)
 80074f8:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80074fc:	f88d 201f 	strb.w	r2, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007500:	4649      	mov	r1, r9
 8007502:	2201      	movs	r2, #1
 8007504:	2024      	movs	r0, #36	; 0x24
 8007506:	f7fe f973 	bl	80057f0 <SX1276WriteBuffer>
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <SX1276SetRxConfig+0x350>)
 800750c:	e724      	b.n	8007358 <SX1276SetRxConfig+0x174>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007514:	2201      	movs	r2, #1
 8007516:	4649      	mov	r1, r9
 8007518:	2022      	movs	r0, #34	; 0x22
 800751a:	f7fe f969 	bl	80057f0 <SX1276WriteBuffer>
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <SX1276SetRxConfig+0x350>)
 8007520:	e715      	b.n	800734e <SX1276SetRxConfig+0x16a>
 8007522:	f7fe f965 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8007526:	2364      	movs	r3, #100	; 0x64
 8007528:	e7c6      	b.n	80074b8 <SX1276SetRxConfig+0x2d4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800752a:	2d0b      	cmp	r5, #11
 800752c:	bf94      	ite	ls
 800752e:	2200      	movls	r2, #0
 8007530:	2201      	movhi	r2, #1
 8007532:	e6ae      	b.n	8007292 <SX1276SetRxConfig+0xae>
 8007534:	200011b8 	.word	0x200011b8
 8007538:	0800e8c0 	.word	0x0800e8c0
 800753c:	1f4add40 	.word	0x1f4add40
 8007540:	01e84800 	.word	0x01e84800
            return FskBandwidths[i].RegValue;
 8007544:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007548:	2201      	movs	r2, #1
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	f88d 301f 	strb.w	r3, [sp, #31]
 8007550:	4649      	mov	r1, r9
 8007552:	2013      	movs	r0, #19
 8007554:	f7fe f94c 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007558:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 800755c:	2201      	movs	r2, #1
 800755e:	4649      	mov	r1, r9
 8007560:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007562:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007566:	f7fe f943 	bl	80057f0 <SX1276WriteBuffer>
 800756a:	2201      	movs	r2, #1
 800756c:	4649      	mov	r1, r9
 800756e:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8007570:	f88d a01f 	strb.w	sl, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007574:	f7fe f93c 	bl	80057f0 <SX1276WriteBuffer>
            if( fixLen == 1 )
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	b35b      	cbz	r3, 80075d4 <SX1276SetRxConfig+0x3f0>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	f88d 301f 	strb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 8007582:	2201      	movs	r2, #1
 8007584:	4649      	mov	r1, r9
 8007586:	2032      	movs	r0, #50	; 0x32
 8007588:	f7fe f932 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800758c:	2201      	movs	r2, #1
 800758e:	4649      	mov	r1, r9
 8007590:	2030      	movs	r0, #48	; 0x30
 8007592:	f7fe f94b 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007596:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 800759a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800759e:	9a02      	ldr	r2, [sp, #8]
    SX1276WriteBuffer( addr, &data, 1 );
 80075a0:	4649      	mov	r1, r9
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80075a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    SX1276WriteBuffer( addr, &data, 1 );
 80075a6:	2030      	movs	r0, #48	; 0x30
 80075a8:	2201      	movs	r2, #1
 80075aa:	f88d 301f 	strb.w	r3, [sp, #31]
 80075ae:	f7fe f91f 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80075b2:	4649      	mov	r1, r9
 80075b4:	2201      	movs	r2, #1
 80075b6:	2031      	movs	r0, #49	; 0x31
 80075b8:	f7fe f938 	bl	800582c <SX1276ReadBuffer>
    return data;
 80075bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    SX1276WriteBuffer( addr, &data, 1 );
 80075c0:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80075c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 80075c6:	4649      	mov	r1, r9
 80075c8:	2031      	movs	r0, #49	; 0x31
 80075ca:	f88d 301f 	strb.w	r3, [sp, #31]
 80075ce:	f7fe f90f 	bl	80057f0 <SX1276WriteBuffer>
        break;
 80075d2:	e6e8      	b.n	80073a6 <SX1276SetRxConfig+0x1c2>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80075d4:	23ff      	movs	r3, #255	; 0xff
    SX1276WriteBuffer( addr, &data, 1 );
 80075d6:	2201      	movs	r2, #1
 80075d8:	4649      	mov	r1, r9
 80075da:	2032      	movs	r0, #50	; 0x32
 80075dc:	f88d 301f 	strb.w	r3, [sp, #31]
 80075e0:	f7fe f906 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80075e4:	2201      	movs	r2, #1
 80075e6:	4649      	mov	r1, r9
 80075e8:	2030      	movs	r0, #48	; 0x30
 80075ea:	f7fe f91f 	bl	800582c <SX1276ReadBuffer>
    return data;
 80075ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
                           RF_PACKETCONFIG1_CRC_MASK &
 80075f2:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80075f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075fa:	e7d0      	b.n	800759e <SX1276SetRxConfig+0x3ba>

080075fc <SX1276SetTxConfig>:
{
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b087      	sub	sp, #28
 8007602:	461e      	mov	r6, r3
 8007604:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800760e:	9302      	str	r3, [sp, #8]
 8007610:	460d      	mov	r5, r1
 8007612:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8007616:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 800761a:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
 800761e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8007622:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8007626:	9303      	str	r3, [sp, #12]
 8007628:	4604      	mov	r4, r0
 800762a:	4690      	mov	r8, r2
    SX1276SetModem( modem );
 800762c:	f7ff fbf0 	bl	8006e10 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8007630:	4628      	mov	r0, r5
 8007632:	f7fe fa27 	bl	8005a84 <SX1276SetRfTxPower>
    switch( modem )
 8007636:	2c00      	cmp	r4, #0
 8007638:	f000 80a5 	beq.w	8007786 <SX1276SetTxConfig+0x18a>
 800763c:	2c01      	cmp	r4, #1
 800763e:	f040 809e 	bne.w	800777e <SX1276SetTxConfig+0x182>
            SX1276.Settings.LoRa.Power = power;
 8007642:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8007910 <SX1276SetTxConfig+0x314>
            if( bandwidth > 2 )
 8007646:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
 8007648:	f888 511c 	strb.w	r5, [r8, #284]	; 0x11c
            if( bandwidth > 2 )
 800764c:	f200 809a 	bhi.w	8007784 <SX1276SetTxConfig+0x188>
            bandwidth += 7;
 8007650:	9d10      	ldr	r5, [sp, #64]	; 0x40
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007652:	9b03      	ldr	r3, [sp, #12]
 8007654:	f888 3130 	strb.w	r3, [r8, #304]	; 0x130
 8007658:	2d06      	cmp	r5, #6
            SX1276.Settings.LoRa.Datarate = datarate;
 800765a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800765c:	f8c8 3124 	str.w	r3, [r8, #292]	; 0x124
 8007660:	bf38      	it	cc
 8007662:	2506      	movcc	r5, #6
            SX1276.Settings.LoRa.Coderate = coderate;
 8007664:	9b01      	ldr	r3, [sp, #4]
 8007666:	f888 3129 	strb.w	r3, [r8, #297]	; 0x129
            bandwidth += 7;
 800766a:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	f888 312f 	strb.w	r3, [r8, #303]	; 0x12f
 8007672:	2d0c      	cmp	r5, #12
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007674:	9b18      	ldr	r3, [sp, #96]	; 0x60
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007676:	f888 7131 	strb.w	r7, [r8, #305]	; 0x131
 800767a:	bf28      	it	cs
 800767c:	250c      	movcs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800767e:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8007680:	f8c8 6120 	str.w	r6, [r8, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8007684:	f8a8 a12a 	strh.w	sl, [r8, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8007688:	f888 912c 	strb.w	r9, [r8, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800768c:	f888 b12e 	strb.w	fp, [r8, #302]	; 0x12e
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007690:	f8c8 3134 	str.w	r3, [r8, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007694:	f000 80fe 	beq.w	8007894 <SX1276SetTxConfig+0x298>
 8007698:	2e08      	cmp	r6, #8
 800769a:	f000 8130 	beq.w	80078fe <SX1276SetTxConfig+0x302>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800769e:	2300      	movs	r3, #0
 80076a0:	f888 3128 	strb.w	r3, [r8, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80076a4:	9b02      	ldr	r3, [sp, #8]
    SX1276ReadBuffer( addr, &data, 1 );
 80076a6:	f10d 0417 	add.w	r4, sp, #23
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 810d 	bne.w	80078ca <SX1276SetTxConfig+0x2ce>
    SX1276ReadBuffer( addr, &data, 1 );
 80076b0:	2201      	movs	r2, #1
 80076b2:	4621      	mov	r1, r4
 80076b4:	201d      	movs	r0, #29
 80076b6:	f7fe f8b9 	bl	800582c <SX1276ReadBuffer>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	ea49 0943 	orr.w	r9, r9, r3, lsl #1
    SX1276WriteBuffer( addr, &data, 1 );
 80076c0:	2201      	movs	r2, #1
 80076c2:	4621      	mov	r1, r4
 80076c4:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80076c6:	ea49 1606 	orr.w	r6, r9, r6, lsl #4
 80076ca:	f88d 6017 	strb.w	r6, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80076ce:	f7fe f88f 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80076d2:	2201      	movs	r2, #1
 80076d4:	4621      	mov	r1, r4
 80076d6:	201e      	movs	r0, #30
 80076d8:	f7fe f8a8 	bl	800582c <SX1276ReadBuffer>
    return data;
 80076dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RFLR_MODEMCONFIG2_SF_MASK &
 80076e0:	f003 030b 	and.w	r3, r3, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
 80076e4:	ea43 0b8b 	orr.w	fp, r3, fp, lsl #2
    SX1276WriteBuffer( addr, &data, 1 );
 80076e8:	2201      	movs	r2, #1
 80076ea:	4621      	mov	r1, r4
 80076ec:	201e      	movs	r0, #30
            SX1276Write( REG_LR_MODEMCONFIG2,
 80076ee:	ea4b 1505 	orr.w	r5, fp, r5, lsl #4
 80076f2:	f88d 5017 	strb.w	r5, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80076f6:	f7fe f87b 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 80076fa:	2201      	movs	r2, #1
 80076fc:	4621      	mov	r1, r4
 80076fe:	2026      	movs	r0, #38	; 0x26
 8007700:	f7fe f894 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007704:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007708:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800770c:	f023 0308 	bic.w	r3, r3, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007710:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007714:	4621      	mov	r1, r4
 8007716:	2201      	movs	r2, #1
 8007718:	2026      	movs	r0, #38	; 0x26
 800771a:	f88d 3017 	strb.w	r3, [sp, #23]
 800771e:	f7fe f867 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007722:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007726:	2201      	movs	r2, #1
 8007728:	4621      	mov	r1, r4
 800772a:	2020      	movs	r0, #32
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800772c:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007730:	f7fe f85e 	bl	80057f0 <SX1276WriteBuffer>
 8007734:	2201      	movs	r2, #1
 8007736:	4621      	mov	r1, r4
 8007738:	2021      	movs	r0, #33	; 0x21
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800773a:	f88d a017 	strb.w	sl, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 800773e:	f7fe f857 	bl	80057f0 <SX1276WriteBuffer>
            if( datarate == 6 )
 8007742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007744:	2b06      	cmp	r3, #6
 8007746:	f240 80ac 	bls.w	80078a2 <SX1276SetTxConfig+0x2a6>
    SX1276ReadBuffer( addr, &data, 1 );
 800774a:	2201      	movs	r2, #1
 800774c:	4621      	mov	r1, r4
 800774e:	2031      	movs	r0, #49	; 0x31
 8007750:	f7fe f86c 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007754:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007758:	f023 0307 	bic.w	r3, r3, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800775c:	f043 0303 	orr.w	r3, r3, #3
    SX1276WriteBuffer( addr, &data, 1 );
 8007760:	2201      	movs	r2, #1
 8007762:	4621      	mov	r1, r4
 8007764:	2031      	movs	r0, #49	; 0x31
 8007766:	f88d 3017 	strb.w	r3, [sp, #23]
 800776a:	f7fe f841 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800776e:	230a      	movs	r3, #10
    SX1276WriteBuffer( addr, &data, 1 );
 8007770:	2201      	movs	r2, #1
 8007772:	4621      	mov	r1, r4
 8007774:	2037      	movs	r0, #55	; 0x37
 8007776:	f88d 3017 	strb.w	r3, [sp, #23]
 800777a:	f7fe f839 	bl	80057f0 <SX1276WriteBuffer>
}
 800777e:	b007      	add	sp, #28
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                while( 1 );
 8007784:	e7fe      	b.n	8007784 <SX1276SetTxConfig+0x188>
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8007786:	4961      	ldr	r1, [pc, #388]	; (800790c <SX1276SetTxConfig+0x310>)
 8007788:	fba1 0308 	umull	r0, r3, r1, r8
 800778c:	f643 5209 	movw	r2, #15625	; 0x3d09
 8007790:	0b1b      	lsrs	r3, r3, #12
 8007792:	fb02 8013 	mls	r0, r2, r3, r8
 8007796:	f641 6284 	movw	r2, #7812	; 0x1e84
 800779a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 800779e:	fba1 1202 	umull	r1, r2, r1, r2
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	eb03 3312 	add.w	r3, r3, r2, lsr #12
            SX1276.Settings.Fsk.Power = power;
 80077a8:	4a59      	ldr	r2, [pc, #356]	; (8007910 <SX1276SetTxConfig+0x314>)
            SX1276.Settings.Fsk.Datarate = datarate;
 80077aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80077ac:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80077b0:	9918      	ldr	r1, [sp, #96]	; 0x60
            SX1276.Settings.Fsk.Power = power;
 80077b2:	f882 50e8 	strb.w	r5, [r2, #232]	; 0xe8
    SX1276WriteBuffer( addr, &data, 1 );
 80077b6:	f10d 0417 	add.w	r4, sp, #23
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80077ba:	e9c2 863b 	strd	r8, r6, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80077be:	f882 7101 	strb.w	r7, [r2, #257]	; 0x101
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80077c2:	f8a2 a0fc 	strh.w	sl, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 80077c6:	f882 90fe 	strb.w	r9, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80077ca:	f882 b100 	strb.w	fp, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80077ce:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 80077d2:	0a1a      	lsrs	r2, r3, #8
    SX1276WriteBuffer( addr, &data, 1 );
 80077d4:	4621      	mov	r1, r4
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 80077d6:	f88d 2017 	strb.w	r2, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80077da:	2004      	movs	r0, #4
 80077dc:	2201      	movs	r2, #1
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 80077de:	9301      	str	r3, [sp, #4]
    SX1276WriteBuffer( addr, &data, 1 );
 80077e0:	f7fe f806 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 80077e4:	9b01      	ldr	r3, [sp, #4]
 80077e6:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80077ea:	4621      	mov	r1, r4
 80077ec:	2201      	movs	r2, #1
 80077ee:	2005      	movs	r0, #5
 80077f0:	f7fd fffe 	bl	80057f0 <SX1276WriteBuffer>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 80077f4:	4f47      	ldr	r7, [pc, #284]	; (8007914 <SX1276SetTxConfig+0x318>)
 80077f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077f8:	fbb7 f7f3 	udiv	r7, r7, r3
    SX1276WriteBuffer( addr, &data, 1 );
 80077fc:	4621      	mov	r1, r4
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 80077fe:	0a3b      	lsrs	r3, r7, #8
    SX1276WriteBuffer( addr, &data, 1 );
 8007800:	2201      	movs	r2, #1
 8007802:	2002      	movs	r0, #2
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8007804:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007808:	f7fd fff2 	bl	80057f0 <SX1276WriteBuffer>
 800780c:	4621      	mov	r1, r4
 800780e:	2201      	movs	r2, #1
 8007810:	2003      	movs	r0, #3
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8007812:	f88d 7017 	strb.w	r7, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007816:	f7fd ffeb 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800781a:	ea4f 231a 	mov.w	r3, sl, lsr #8
    SX1276WriteBuffer( addr, &data, 1 );
 800781e:	4621      	mov	r1, r4
 8007820:	2201      	movs	r2, #1
 8007822:	2025      	movs	r0, #37	; 0x25
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8007824:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007828:	f7fd ffe2 	bl	80057f0 <SX1276WriteBuffer>
 800782c:	4621      	mov	r1, r4
 800782e:	2201      	movs	r2, #1
 8007830:	2026      	movs	r0, #38	; 0x26
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8007832:	f88d a017 	strb.w	sl, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 8007836:	f7fd ffdb 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800783a:	2201      	movs	r2, #1
 800783c:	4621      	mov	r1, r4
 800783e:	2030      	movs	r0, #48	; 0x30
 8007840:	f7fd fff4 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007844:	f89d 3017 	ldrb.w	r3, [sp, #23]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007848:	f1b9 0f00 	cmp.w	r9, #0
                           RF_PACKETCONFIG1_CRC_MASK &
 800784c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007850:	bf14      	ite	ne
 8007852:	2200      	movne	r2, #0
 8007854:	f06f 027f 	mvneq.w	r2, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007858:	ea43 1b0b 	orr.w	fp, r3, fp, lsl #4
 800785c:	ea42 0b0b 	orr.w	fp, r2, fp
    SX1276WriteBuffer( addr, &data, 1 );
 8007860:	4621      	mov	r1, r4
 8007862:	2201      	movs	r2, #1
 8007864:	2030      	movs	r0, #48	; 0x30
 8007866:	f88d b017 	strb.w	fp, [sp, #23]
 800786a:	f7fd ffc1 	bl	80057f0 <SX1276WriteBuffer>
    SX1276ReadBuffer( addr, &data, 1 );
 800786e:	4621      	mov	r1, r4
 8007870:	2201      	movs	r2, #1
 8007872:	2031      	movs	r0, #49	; 0x31
 8007874:	f7fd ffda 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007878:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 800787c:	2201      	movs	r2, #1
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800787e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8007882:	4621      	mov	r1, r4
 8007884:	2031      	movs	r0, #49	; 0x31
 8007886:	f88d 3017 	strb.w	r3, [sp, #23]
 800788a:	f7fd ffb1 	bl	80057f0 <SX1276WriteBuffer>
}
 800788e:	b007      	add	sp, #28
 8007890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007894:	f1a5 030b 	sub.w	r3, r5, #11
 8007898:	2b01      	cmp	r3, #1
 800789a:	bf8c      	ite	hi
 800789c:	2300      	movhi	r3, #0
 800789e:	2301      	movls	r3, #1
 80078a0:	e6fe      	b.n	80076a0 <SX1276SetTxConfig+0xa4>
    SX1276ReadBuffer( addr, &data, 1 );
 80078a2:	4621      	mov	r1, r4
 80078a4:	2201      	movs	r2, #1
 80078a6:	2031      	movs	r0, #49	; 0x31
 80078a8:	f7fd ffc0 	bl	800582c <SX1276ReadBuffer>
    return data;
 80078ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80078b0:	f023 0307 	bic.w	r3, r3, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80078b4:	f043 0305 	orr.w	r3, r3, #5
    SX1276WriteBuffer( addr, &data, 1 );
 80078b8:	4621      	mov	r1, r4
 80078ba:	2201      	movs	r2, #1
 80078bc:	2031      	movs	r0, #49	; 0x31
 80078be:	f88d 3017 	strb.w	r3, [sp, #23]
 80078c2:	f7fd ff95 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80078c6:	230c      	movs	r3, #12
 80078c8:	e752      	b.n	8007770 <SX1276SetTxConfig+0x174>
    SX1276ReadBuffer( addr, &data, 1 );
 80078ca:	4621      	mov	r1, r4
 80078cc:	2201      	movs	r2, #1
 80078ce:	2044      	movs	r0, #68	; 0x44
 80078d0:	f7fd ffac 	bl	800582c <SX1276ReadBuffer>
    return data;
 80078d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80078d8:	4621      	mov	r1, r4
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80078da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    SX1276WriteBuffer( addr, &data, 1 );
 80078de:	2201      	movs	r2, #1
 80078e0:	2044      	movs	r0, #68	; 0x44
 80078e2:	f88d 3017 	strb.w	r3, [sp, #23]
 80078e6:	f7fd ff83 	bl	80057f0 <SX1276WriteBuffer>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80078ea:	f898 3130 	ldrb.w	r3, [r8, #304]	; 0x130
 80078ee:	f88d 3017 	strb.w	r3, [sp, #23]
    SX1276WriteBuffer( addr, &data, 1 );
 80078f2:	2201      	movs	r2, #1
 80078f4:	4621      	mov	r1, r4
 80078f6:	2024      	movs	r0, #36	; 0x24
 80078f8:	f7fd ff7a 	bl	80057f0 <SX1276WriteBuffer>
 80078fc:	e6d8      	b.n	80076b0 <SX1276SetTxConfig+0xb4>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80078fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007900:	2b0b      	cmp	r3, #11
 8007902:	bf94      	ite	ls
 8007904:	2300      	movls	r3, #0
 8007906:	2301      	movhi	r3, #1
 8007908:	e6ca      	b.n	80076a0 <SX1276SetTxConfig+0xa4>
 800790a:	bf00      	nop
 800790c:	431bde83 	.word	0x431bde83
 8007910:	200011b8 	.word	0x200011b8
 8007914:	01e84800 	.word	0x01e84800

08007918 <SX1276SetTxContinuousWave>:
{
 8007918:	b530      	push	{r4, r5, lr}
 800791a:	b08f      	sub	sp, #60	; 0x3c
    uint32_t timeout = ( uint32_t )time * 1000;
 800791c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007920:	fb02 f404 	mul.w	r4, r2, r4
{
 8007924:	910b      	str	r1, [sp, #44]	; 0x2c
    SX1276SetChannel( freq );
 8007926:	f7fe fdd9 	bl	80064dc <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800792a:	2300      	movs	r3, #0
 800792c:	2005      	movs	r0, #5
 800792e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8007932:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8007936:	e9cd 3407 	strd	r3, r4, [sp, #28]
 800793a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800793e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8007942:	4618      	mov	r0, r3
 8007944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007946:	9200      	str	r2, [sp, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	f7ff fe57 	bl	80075fc <SX1276SetTxConfig>
    SX1276ReadBuffer( addr, &data, 1 );
 800794e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007952:	2201      	movs	r2, #1
 8007954:	2031      	movs	r0, #49	; 0x31
 8007956:	f7fd ff69 	bl	800582c <SX1276ReadBuffer>
    return data;
 800795a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    TimerSetValue( &TxTimeoutTimer, timeout );
 800795e:	4d17      	ldr	r5, [pc, #92]	; (80079bc <SX1276SetTxContinuousWave+0xa4>)
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8007960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8007964:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007968:	2201      	movs	r2, #1
 800796a:	2031      	movs	r0, #49	; 0x31
 800796c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8007970:	f7fd ff3e 	bl	80057f0 <SX1276WriteBuffer>
 8007974:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007978:	23f0      	movs	r3, #240	; 0xf0
 800797a:	2201      	movs	r2, #1
 800797c:	2040      	movs	r0, #64	; 0x40
 800797e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8007982:	f7fd ff35 	bl	80057f0 <SX1276WriteBuffer>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8007986:	23a0      	movs	r3, #160	; 0xa0
    SX1276WriteBuffer( addr, &data, 1 );
 8007988:	2201      	movs	r2, #1
 800798a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 800798e:	2041      	movs	r0, #65	; 0x41
 8007990:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8007994:	f7fd ff2c 	bl	80057f0 <SX1276WriteBuffer>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f7fe fa24 	bl	8005de8 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80079a0:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <SX1276SetTxContinuousWave+0xa8>)
    TimerStart( &TxTimeoutTimer );
 80079a2:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 80079aa:	f7fe f913 	bl	8005bd4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80079ae:	2003      	movs	r0, #3
}
 80079b0:	b00f      	add	sp, #60	; 0x3c
 80079b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80079b6:	f7fe bd15 	b.w	80063e4 <SX1276SetOpMode>
 80079ba:	bf00      	nop
 80079bc:	200012fc 	.word	0x200012fc
 80079c0:	200011b8 	.word	0x200011b8

080079c4 <SX1276OnTimeoutIrq>:
{
 80079c4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80079c6:	4e4b      	ldr	r6, [pc, #300]	; (8007af4 <SX1276OnTimeoutIrq+0x130>)
 80079c8:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
 80079cc:	2c01      	cmp	r4, #1
{
 80079ce:	b082      	sub	sp, #8
    switch( SX1276.Settings.State )
 80079d0:	d04e      	beq.n	8007a70 <SX1276OnTimeoutIrq+0xac>
 80079d2:	2c02      	cmp	r4, #2
 80079d4:	d155      	bne.n	8007a82 <SX1276OnTimeoutIrq+0xbe>
        SX1276Reset( );
 80079d6:	f7fd ffbf 	bl	8005958 <SX1276Reset>
        RxChainCalibration( );
 80079da:	f7fe fdb5 	bl	8006548 <RxChainCalibration>
        SX1276SetAntSwLowPower( true );
 80079de:	2001      	movs	r0, #1
 80079e0:	f7fd ffb4 	bl	800594c <SX1276SetAntSwLowPower>
    SX1276ReadBuffer( addr, &data, 1 );
 80079e4:	2201      	movs	r2, #1
 80079e6:	4610      	mov	r0, r2
 80079e8:	f10d 0107 	add.w	r1, sp, #7
 80079ec:	f7fd ff1e 	bl	800582c <SX1276ReadBuffer>
    return data;
 80079f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80079f4:	4c40      	ldr	r4, [pc, #256]	; (8007af8 <SX1276OnTimeoutIrq+0x134>)
    SX1276WriteBuffer( addr, &data, 1 );
 80079f6:	2201      	movs	r2, #1
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80079f8:	f023 0307 	bic.w	r3, r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80079fc:	4610      	mov	r0, r2
 80079fe:	f10d 0107 	add.w	r1, sp, #7
 8007a02:	f88d 3007 	strb.w	r3, [sp, #7]
 8007a06:	f104 052d 	add.w	r5, r4, #45	; 0x2d
 8007a0a:	f7fd fef1 	bl	80057f0 <SX1276WriteBuffer>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e001      	b.n	8007a16 <SX1276OnTimeoutIrq+0x52>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8007a12:	f814 0f03 	ldrb.w	r0, [r4, #3]!
 8007a16:	f7ff f9fb 	bl	8006e10 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007a1a:	78a3      	ldrb	r3, [r4, #2]
    SX1276WriteBuffer( addr, &data, 1 );
 8007a1c:	7860      	ldrb	r0, [r4, #1]
 8007a1e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f10d 0107 	add.w	r1, sp, #7
 8007a28:	f7fd fee2 	bl	80057f0 <SX1276WriteBuffer>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007a2c:	42ac      	cmp	r4, r5
 8007a2e:	d1f0      	bne.n	8007a12 <SX1276OnTimeoutIrq+0x4e>
        SX1276SetModem( MODEM_FSK );
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7ff f9ed 	bl	8006e10 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8007a36:	f896 4138 	ldrb.w	r4, [r6, #312]	; 0x138
    SX1276SetModem( MODEM_LORA );
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	f7ff f9e8 	bl	8006e10 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8007a40:	f886 4138 	strb.w	r4, [r6, #312]	; 0x138
    if( enable == true )
 8007a44:	b9fc      	cbnz	r4, 8007a86 <SX1276OnTimeoutIrq+0xc2>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8007a46:	2312      	movs	r3, #18
    SX1276WriteBuffer( addr, &data, 1 );
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f10d 0107 	add.w	r1, sp, #7
 8007a4e:	2039      	movs	r0, #57	; 0x39
 8007a50:	f88d 3007 	strb.w	r3, [sp, #7]
 8007a54:	f7fd fecc 	bl	80057f0 <SX1276WriteBuffer>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007a58:	4b28      	ldr	r3, [pc, #160]	; (8007afc <SX1276OnTimeoutIrq+0x138>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
        SX1276.Settings.State = RF_IDLE;
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f886 20e0 	strb.w	r2, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007a62:	b173      	cbz	r3, 8007a82 <SX1276OnTimeoutIrq+0xbe>
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	b163      	cbz	r3, 8007a82 <SX1276OnTimeoutIrq+0xbe>
}
 8007a68:	b002      	add	sp, #8
 8007a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
 8007a6e:	4718      	bx	r3
        if( SX1276.Settings.Modem == MODEM_FSK )
 8007a70:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
 8007a74:	b14b      	cbz	r3, 8007a8a <SX1276OnTimeoutIrq+0xc6>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007a76:	4b21      	ldr	r3, [pc, #132]	; (8007afc <SX1276OnTimeoutIrq+0x138>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	b113      	cbz	r3, 8007a82 <SX1276OnTimeoutIrq+0xbe>
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f2      	bne.n	8007a68 <SX1276OnTimeoutIrq+0xa4>
}
 8007a82:	b002      	add	sp, #8
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8007a86:	2334      	movs	r3, #52	; 0x34
 8007a88:	e7de      	b.n	8007a48 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007a8a:	210b      	movs	r1, #11
    SX1276WriteBuffer( addr, &data, 1 );
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	f88d 1007 	strb.w	r1, [sp, #7]
 8007a92:	203e      	movs	r0, #62	; 0x3e
 8007a94:	f10d 0107 	add.w	r1, sp, #7
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007a98:	f8a6 310c 	strh.w	r3, [r6, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007a9c:	f8a6 3118 	strh.w	r3, [r6, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007aa0:	f8a6 3116 	strh.w	r3, [r6, #278]	; 0x116
    SX1276WriteBuffer( addr, &data, 1 );
 8007aa4:	f7fd fea4 	bl	80057f0 <SX1276WriteBuffer>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8007aa8:	2310      	movs	r3, #16
    SX1276WriteBuffer( addr, &data, 1 );
 8007aaa:	4622      	mov	r2, r4
 8007aac:	f10d 0107 	add.w	r1, sp, #7
 8007ab0:	203f      	movs	r0, #63	; 0x3f
 8007ab2:	f88d 3007 	strb.w	r3, [sp, #7]
 8007ab6:	f7fd fe9b 	bl	80057f0 <SX1276WriteBuffer>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8007aba:	f896 3102 	ldrb.w	r3, [r6, #258]	; 0x102
 8007abe:	b193      	cbz	r3, 8007ae6 <SX1276OnTimeoutIrq+0x122>
    SX1276ReadBuffer( addr, &data, 1 );
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	f10d 0107 	add.w	r1, sp, #7
 8007ac6:	200d      	movs	r0, #13
 8007ac8:	f7fd feb0 	bl	800582c <SX1276ReadBuffer>
    return data;
 8007acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8007ad0:	4622      	mov	r2, r4
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    SX1276WriteBuffer( addr, &data, 1 );
 8007ad6:	f10d 0107 	add.w	r1, sp, #7
 8007ada:	200d      	movs	r0, #13
 8007adc:	f88d 3007 	strb.w	r3, [sp, #7]
 8007ae0:	f7fd fe86 	bl	80057f0 <SX1276WriteBuffer>
 8007ae4:	e7c7      	b.n	8007a76 <SX1276OnTimeoutIrq+0xb2>
                TimerStop( &RxTimeoutSyncWord );
 8007ae6:	4806      	ldr	r0, [pc, #24]	; (8007b00 <SX1276OnTimeoutIrq+0x13c>)
                SX1276.Settings.State = RF_IDLE;
 8007ae8:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8007aec:	f7fe f934 	bl	8005d58 <TimerStop>
 8007af0:	e7c1      	b.n	8007a76 <SX1276OnTimeoutIrq+0xb2>
 8007af2:	bf00      	nop
 8007af4:	200011b8 	.word	0x200011b8
 8007af8:	0800e970 	.word	0x0800e970
 8007afc:	20001084 	.word	0x20001084
 8007b00:	20001088 	.word	0x20001088

08007b04 <SX1276Write>:
{
 8007b04:	b500      	push	{lr}
 8007b06:	b083      	sub	sp, #12
 8007b08:	460b      	mov	r3, r1
    SX1276WriteBuffer( addr, &data, 1 );
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f10d 0107 	add.w	r1, sp, #7
{
 8007b10:	f88d 3007 	strb.w	r3, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 8007b14:	f7fd fe6c 	bl	80057f0 <SX1276WriteBuffer>
}
 8007b18:	b003      	add	sp, #12
 8007b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b1e:	bf00      	nop

08007b20 <SX1276Read>:
{
 8007b20:	b500      	push	{lr}
 8007b22:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 8007b24:	2201      	movs	r2, #1
 8007b26:	f10d 0107 	add.w	r1, sp, #7
 8007b2a:	f7fd fe7f 	bl	800582c <SX1276ReadBuffer>
}
 8007b2e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007b32:	b003      	add	sp, #12
 8007b34:	f85d fb04 	ldr.w	pc, [sp], #4

08007b38 <SX1276SetMaxPayloadLength>:
{
 8007b38:	b530      	push	{r4, r5, lr}
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8007b40:	f7ff f966 	bl	8006e10 <SX1276SetModem>
    switch( modem )
 8007b44:	b15c      	cbz	r4, 8007b5e <SX1276SetMaxPayloadLength+0x26>
 8007b46:	2c01      	cmp	r4, #1
 8007b48:	d107      	bne.n	8007b5a <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	f10d 0107 	add.w	r1, sp, #7
 8007b50:	2023      	movs	r0, #35	; 0x23
 8007b52:	f88d 5007 	strb.w	r5, [sp, #7]
 8007b56:	f7fd fe4b 	bl	80057f0 <SX1276WriteBuffer>
}
 8007b5a:	b003      	add	sp, #12
 8007b5c:	bd30      	pop	{r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8007b5e:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <SX1276SetMaxPayloadLength+0x44>)
 8007b60:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f8      	bne.n	8007b5a <SX1276SetMaxPayloadLength+0x22>
    SX1276WriteBuffer( addr, &data, 1 );
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f10d 0107 	add.w	r1, sp, #7
 8007b6e:	2032      	movs	r0, #50	; 0x32
 8007b70:	f88d 5007 	strb.w	r5, [sp, #7]
 8007b74:	f7fd fe3c 	bl	80057f0 <SX1276WriteBuffer>
}
 8007b78:	b003      	add	sp, #12
 8007b7a:	bd30      	pop	{r4, r5, pc}
 8007b7c:	200011b8 	.word	0x200011b8

08007b80 <SX1276SetPublicNetwork>:
{
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	b082      	sub	sp, #8
    SX1276SetModem( MODEM_LORA );
 8007b86:	2001      	movs	r0, #1
 8007b88:	f7ff f942 	bl	8006e10 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8007b8c:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <SX1276SetPublicNetwork+0x30>)
 8007b8e:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8007b92:	b154      	cbz	r4, 8007baa <SX1276SetPublicNetwork+0x2a>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8007b94:	2334      	movs	r3, #52	; 0x34
    SX1276WriteBuffer( addr, &data, 1 );
 8007b96:	2201      	movs	r2, #1
 8007b98:	f10d 0107 	add.w	r1, sp, #7
 8007b9c:	2039      	movs	r0, #57	; 0x39
 8007b9e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007ba2:	f7fd fe25 	bl	80057f0 <SX1276WriteBuffer>
}
 8007ba6:	b002      	add	sp, #8
 8007ba8:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8007baa:	2312      	movs	r3, #18
 8007bac:	e7f3      	b.n	8007b96 <SX1276SetPublicNetwork+0x16>
 8007bae:	bf00      	nop
 8007bb0:	200011b8 	.word	0x200011b8

08007bb4 <SX1276GetWakeupTime>:
{
 8007bb4:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8007bb6:	f7fd fec7 	bl	8005948 <SX1276GetBoardTcxoWakeupTime>
}
 8007bba:	3001      	adds	r0, #1
 8007bbc:	bd08      	pop	{r3, pc}
 8007bbe:	bf00      	nop

08007bc0 <random_byte_get>:

static int random_byte_get(void)
{
	int retval = -EAGAIN;
	unsigned int key;
	RNG_TypeDef *rng = entropy_stm32_rng_data.rng;
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <random_byte_get+0x64>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
 8007bc4:	f04f 0310 	mov.w	r3, #16
 8007bc8:	f3ef 8c11 	mrs	ip, BASEPRI
 8007bcc:	f383 8812 	msr	BASEPRI_MAX, r3
 8007bd0:	f3bf 8f6f 	isb	sy
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007bd4:	6853      	ldr	r3, [r2, #4]
 8007bd6:	0659      	lsls	r1, r3, #25
 8007bd8:	d510      	bpl.n	8007bfc <random_byte_get+0x3c>
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_SEIS(RNG_TypeDef *RNGx)
{
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8007bda:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8007bde:	6053      	str	r3, [r2, #4]
 8007be0:	230c      	movs	r3, #12
	for (int i = 0; i < 12; ++i) {
 8007be2:	3b01      	subs	r3, #1
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 8007be4:	6891      	ldr	r1, [r2, #8]
 8007be6:	d1fc      	bne.n	8007be2 <random_byte_get+0x22>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007be8:	6853      	ldr	r3, [r2, #4]
 8007bea:	0658      	lsls	r0, r3, #25
 8007bec:	d506      	bpl.n	8007bfc <random_byte_get+0x3c>

	key = irq_lock();

	if (LL_RNG_IsActiveFlag_SEIS(rng) && (recover_seed_error(rng) < 0)) {
		retval = -EIO;
 8007bee:	f06f 0004 	mvn.w	r0, #4
	__asm__ volatile(
 8007bf2:	f38c 8811 	msr	BASEPRI, ip
 8007bf6:	f3bf 8f6f 	isb	sy

out:
	irq_unlock(key);

	return retval;
}
 8007bfa:	4770      	bx	lr
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8007bfc:	6853      	ldr	r3, [r2, #4]
	if ((LL_RNG_IsActiveFlag_DRDY(rng) == 1)) {
 8007bfe:	07db      	lsls	r3, r3, #31
 8007c00:	d50d      	bpl.n	8007c1e <random_byte_get+0x5e>
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 8007c02:	6853      	ldr	r3, [r2, #4]
 8007c04:	0799      	lsls	r1, r3, #30
 8007c06:	d4f2      	bmi.n	8007bee <random_byte_get+0x2e>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8007c08:	6853      	ldr	r3, [r2, #4]
 8007c0a:	065b      	lsls	r3, r3, #25
 8007c0c:	d4ef      	bmi.n	8007bee <random_byte_get+0x2e>
  return (uint32_t)(READ_REG(RNGx->DR));
 8007c0e:	6890      	ldr	r0, [r2, #8]
		if (retval == 0) {
 8007c10:	b128      	cbz	r0, 8007c1e <random_byte_get+0x5e>
		retval &= 0xFF;
 8007c12:	b2c0      	uxtb	r0, r0
 8007c14:	f38c 8811 	msr	BASEPRI, ip
 8007c18:	f3bf 8f6f 	isb	sy
}
 8007c1c:	4770      	bx	lr
	int retval = -EAGAIN;
 8007c1e:	f06f 000a 	mvn.w	r0, #10
 8007c22:	e7e6      	b.n	8007bf2 <random_byte_get+0x32>
 8007c24:	20000288 	.word	0x20000288

08007c28 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
 8007c2a:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
 8007c2c:	f890 e003 	ldrb.w	lr, [r0, #3]
	__asm__ volatile(
 8007c30:	f04f 0310 	mov.w	r3, #16
 8007c34:	f3ef 8c11 	mrs	ip, BASEPRI
 8007c38:	f383 8812 	msr	BASEPRI_MAX, r3
 8007c3c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
 8007c40:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
 8007c42:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
 8007c44:	1bad      	subs	r5, r5, r6
 8007c46:	ea05 050e 	and.w	r5, r5, lr
	if (available < len) {
 8007c4a:	42aa      	cmp	r2, r5
		len = available;
 8007c4c:	bf88      	it	hi
 8007c4e:	b2aa      	uxthhi	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
 8007c50:	18b4      	adds	r4, r6, r2
 8007c52:	ea0e 0404 	and.w	r4, lr, r4
	first = rngp->first_alloc;
 8007c56:	4633      	mov	r3, r6
	rngp->first_alloc = (first + len) & mask;
 8007c58:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
 8007c5a:	f38c 8811 	msr	BASEPRI, ip
 8007c5e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	while (likely(len--)) {
 8007c62:	b162      	cbz	r2, 8007c7e <rng_pool_get+0x56>
 8007c64:	188c      	adds	r4, r1, r2
		*dst++ = rngp->buffer[first];
 8007c66:	eb00 0c03 	add.w	ip, r0, r3
		first = (first + 1) & mask;
 8007c6a:	3301      	adds	r3, #1
		*dst++ = rngp->buffer[first];
 8007c6c:	f89c c005 	ldrb.w	ip, [ip, #5]
 8007c70:	f801 cb01 	strb.w	ip, [r1], #1
	while (likely(len--)) {
 8007c74:	42a1      	cmp	r1, r4
		first = (first + 1) & mask;
 8007c76:	ea03 030e 	and.w	r3, r3, lr
	while (likely(len--)) {
 8007c7a:	d1f4      	bne.n	8007c66 <rng_pool_get+0x3e>
		rngp->first_read = rngp->first_alloc;
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
 8007c7c:	1aad      	subs	r5, r5, r2
	if (likely(!other_read_in_progress)) {
 8007c7e:	42be      	cmp	r6, r7
 8007c80:	d10d      	bne.n	8007c9e <rng_pool_get+0x76>
	__asm__ volatile(
 8007c82:	f04f 0110 	mov.w	r1, #16
 8007c86:	f3ef 8311 	mrs	r3, BASEPRI
 8007c8a:	f381 8812 	msr	BASEPRI_MAX, r1
 8007c8e:	f3bf 8f6f 	isb	sy
		rngp->first_read = rngp->first_alloc;
 8007c92:	7801      	ldrb	r1, [r0, #0]
 8007c94:	7041      	strb	r1, [r0, #1]
	__asm__ volatile(
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
	if (available <= rngp->threshold) {
 8007c9e:	7903      	ldrb	r3, [r0, #4]
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	d305      	bcc.n	8007cb0 <rng_pool_get+0x88>
		LL_RNG_EnableIT(entropy_stm32_rng_data.rng);
 8007ca4:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <rng_pool_get+0x8c>)
 8007ca6:	6819      	ldr	r1, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	f043 0308 	orr.w	r3, r3, #8
 8007cae:	600b      	str	r3, [r1, #0]
	}

	return len;
}
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cb4:	20000288 	.word	0x20000288

08007cb8 <stm32_rng_isr>:
	rngp->mask	  = size - 1;
	rngp->threshold	  = threshold;
}

static void stm32_rng_isr(const void *arg)
{
 8007cb8:	b508      	push	{r3, lr}
	int byte, ret;

	ARG_UNUSED(arg);

	byte = random_byte_get();
 8007cba:	f7ff ff81 	bl	8007bc0 <random_byte_get>
	if (byte < 0) {
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	db13      	blt.n	8007cea <stm32_rng_isr+0x32>
	uint8_t last  = rngp->last;
 8007cc2:	4a19      	ldr	r2, [pc, #100]	; (8007d28 <stm32_rng_isr+0x70>)
 8007cc4:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	if (((last - first) & mask) == mask) {
 8007cc8:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
	uint8_t mask  = rngp->mask;
 8007ccc:	f892 c03b 	ldrb.w	ip, [r2, #59]	; 0x3b
	if (((last - first) & mask) == mask) {
 8007cd0:	1a59      	subs	r1, r3, r1
 8007cd2:	ea3c 0101 	bics.w	r1, ip, r1
		return;
	}

	ret = rng_pool_put((struct rng_pool *)(entropy_stm32_rng_data.isr),
 8007cd6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
 8007cd8:	d008      	beq.n	8007cec <stm32_rng_isr+0x34>
	rngp->buffer[last] = byte;
 8007cda:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 8007cdc:	3301      	adds	r3, #1
 8007cde:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8007ce2:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
	rngp->last = (last + 1) & mask;
 8007ce6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
		}

		k_sem_give(&entropy_stm32_rng_data.sem_sync);
	}
}
 8007cea:	bd08      	pop	{r3, pc}
	uint8_t last  = rngp->last;
 8007cec:	f892 304f 	ldrb.w	r3, [r2, #79]	; 0x4f
	if (((last - first) & mask) == mask) {
 8007cf0:	f892 104e 	ldrb.w	r1, [r2, #78]	; 0x4e
	uint8_t mask  = rngp->mask;
 8007cf4:	f892 c050 	ldrb.w	ip, [r2, #80]	; 0x50
	if (((last - first) & mask) == mask) {
 8007cf8:	1a59      	subs	r1, r3, r1
 8007cfa:	ea3c 0101 	bics.w	r1, ip, r1
 8007cfe:	d00c      	beq.n	8007d1a <stm32_rng_isr+0x62>
	rngp->buffer[last] = byte;
 8007d00:	18d1      	adds	r1, r2, r3
	rngp->last = (last + 1) & mask;
 8007d02:	3301      	adds	r3, #1
 8007d04:	ea03 030c 	and.w	r3, r3, ip
	rngp->buffer[last] = byte;
 8007d08:	f881 0052 	strb.w	r0, [r1, #82]	; 0x52
	rngp->last = (last + 1) & mask;
 8007d0c:	f882 304f 	strb.w	r3, [r2, #79]	; 0x4f
	z_impl_k_sem_give(sem);
 8007d10:	4806      	ldr	r0, [pc, #24]	; (8007d2c <stm32_rng_isr+0x74>)
}
 8007d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d16:	f002 bcc3 	b.w	800a6a0 <z_impl_k_sem_give>
			LL_RNG_DisableIT(entropy_stm32_rng_data.rng);
 8007d1a:	6812      	ldr	r2, [r2, #0]
  CLEAR_BIT(RNGx->CR, RNG_CR_IE);
 8007d1c:	6813      	ldr	r3, [r2, #0]
 8007d1e:	f023 0308 	bic.w	r3, r3, #8
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	e7f4      	b.n	8007d10 <stm32_rng_isr+0x58>
 8007d26:	bf00      	nop
 8007d28:	20000288 	.word	0x20000288
 8007d2c:	200002a8 	.word	0x200002a8

08007d30 <entropy_stm32_rng_get_entropy>:
					 uint16_t len)
{
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_stm32_rng_data == dev->data);

	while (len) {
 8007d30:	b34a      	cbz	r2, 8007d86 <entropy_stm32_rng_get_entropy+0x56>
{
 8007d32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
 8007d36:	4f15      	ldr	r7, [pc, #84]	; (8007d8c <entropy_stm32_rng_get_entropy+0x5c>)
 8007d38:	460e      	mov	r6, r1
 8007d3a:	4615      	mov	r5, r2
		uint16_t bytes;

		k_sem_take(&entropy_stm32_rng_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get(
 8007d3c:	f107 0845 	add.w	r8, r7, #69	; 0x45
 8007d40:	f107 0918 	add.w	r9, r7, #24
 8007d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f002 fcd1 	bl	800a6f4 <z_impl_k_sem_take>
 8007d52:	462a      	mov	r2, r5
 8007d54:	4631      	mov	r1, r6
 8007d56:	4640      	mov	r0, r8
 8007d58:	f7ff ff66 	bl	8007c28 <rng_pool_get>
 8007d5c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
 8007d5e:	4638      	mov	r0, r7
 8007d60:	f002 fc9e 	bl	800a6a0 <z_impl_k_sem_give>
			/* Pool is empty: Sleep until next interrupt. */
			k_sem_take(&entropy_stm32_rng_data.sem_sync, K_FOREVER);
			continue;
		}

		len -= bytes;
 8007d64:	1b2b      	subs	r3, r5, r4
		if (bytes == 0U) {
 8007d66:	b134      	cbz	r4, 8007d76 <entropy_stm32_rng_get_entropy+0x46>
		len -= bytes;
 8007d68:	b29d      	uxth	r5, r3
		buf += bytes;
 8007d6a:	4426      	add	r6, r4
	while (len) {
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	d1e9      	bne.n	8007d44 <entropy_stm32_rng_get_entropy+0x14>
	}

	return 0;
}
 8007d70:	2000      	movs	r0, #0
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_take(sem, timeout);
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d7e:	4648      	mov	r0, r9
 8007d80:	f002 fcb8 	bl	800a6f4 <z_impl_k_sem_take>
	while (len) {
 8007d84:	e7de      	b.n	8007d44 <entropy_stm32_rng_get_entropy+0x14>
}
 8007d86:	2000      	movs	r0, #0
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000290 	.word	0x20000290

08007d90 <entropy_stm32_rng_init>:
  *         @arg @ref LL_RCC_PLLSAI1Q_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8007d90:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <entropy_stm32_rng_init+0xd0>)
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007d98:	f042 0201 	orr.w	r2, r2, #1

	return cnt;
}

static int entropy_stm32_rng_init(const struct device *dev)
{
 8007d9c:	b570      	push	{r4, r5, r6, lr}
	const struct entropy_stm32_rng_dev_cfg *dev_cfg;
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	dev_data = dev->data;
 8007d9e:	6904      	ldr	r4, [r0, #16]
	dev_cfg = dev->config;
 8007da0:	6846      	ldr	r6, [r0, #4]
 8007da2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1Q, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLQ);
 8007da4:	691a      	ldr	r2, [r3, #16]
 8007da6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007daa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007dae:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8007db2:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007dba:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLSAI1CFGR  PLLSAI1QEN    LL_RCC_PLLSAI1_EnableDomain_48M
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN);
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007dc2:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	0112      	lsls	r2, r2, #4
 8007dc8:	d5fc      	bpl.n	8007dc4 <entropy_stm32_rng_init+0x34>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, RNGxSource);
 8007dca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	z_stm32_hsem_unlock(CFG_HW_CLK48_CONFIG_SEMID);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

#endif /* CONFIG_SOC_SERIES_STM32L4X */

	dev_data->clock = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
 8007dce:	4d25      	ldr	r5, [pc, #148]	; (8007e64 <entropy_stm32_rng_init+0xd4>)
 8007dd0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007dd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007ddc:	6065      	str	r5, [r4, #4]
 8007dde:	4628      	mov	r0, r5
 8007de0:	f002 f8aa 	bl	8009f38 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8007de4:	b120      	cbz	r0, 8007df0 <entropy_stm32_rng_init+0x60>
	return api->on(dev, sys);
 8007de6:	68ab      	ldr	r3, [r5, #8]
 8007de8:	4631      	mov	r1, r6
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4628      	mov	r0, r5
 8007dee:	4798      	blx	r3
#endif
	/* Write RNG HTCR configuration */
	LL_RNG_SetHealthConfig(dev_data->rng, DT_INST_PROP(0, health_test_config));
#endif

	LL_RNG_EnableIT(dev_data->rng);
 8007df0:	4620      	mov	r0, r4
 8007df2:	f850 3b08 	ldr.w	r3, [r0], #8
  SET_BIT(RNGx->CR, RNG_CR_IE);
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	f042 0208 	orr.w	r2, r2, #8
 8007dfc:	601a      	str	r2, [r3, #0]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	f042 0204 	orr.w	r2, r2, #4
 8007e04:	601a      	str	r2, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
 8007e06:	2201      	movs	r2, #1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	f002 fc39 	bl	800a680 <z_impl_k_sem_init>
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2100      	movs	r1, #0
 8007e12:	f104 0020 	add.w	r0, r4, #32
 8007e16:	f002 fc33 	bl	800a680 <z_impl_k_sem_init>
	rngp->threshold	  = threshold;
 8007e1a:	2304      	movs	r3, #4
	rngp->first_alloc = 0U;
 8007e1c:	2500      	movs	r5, #0
	rngp->threshold	  = threshold;
 8007e1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
	rngp->mask	  = size - 1;
 8007e22:	2207      	movs	r2, #7
	rngp->threshold	  = threshold;
 8007e24:	230c      	movs	r3, #12
	rngp->mask	  = size - 1;
 8007e26:	210f      	movs	r1, #15
 8007e28:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8007e2c:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
		      CONFIG_ENTROPY_STM32_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(dev_data->isr),
		      CONFIG_ENTROPY_STM32_ISR_POOL_SIZE,
		      CONFIG_ENTROPY_STM32_ISR_THRESHOLD);

	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007e30:	462a      	mov	r2, r5
	rngp->threshold	  = threshold;
 8007e32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007e36:	4629      	mov	r1, r5
	rngp->first_alloc = 0U;
 8007e38:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
	rngp->first_read  = 0U;
 8007e3c:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
	rngp->last	  = 0U;
 8007e40:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
	rngp->first_alloc = 0U;
 8007e44:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	rngp->first_read  = 0U;
 8007e48:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
	rngp->last	  = 0U;
 8007e4c:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
	IRQ_CONNECT(IRQN, IRQ_PRIO, stm32_rng_isr, &entropy_stm32_rng_data, 0);
 8007e50:	2050      	movs	r0, #80	; 0x50
 8007e52:	f7fa fbd5 	bl	8002600 <z_arm_irq_priority_set>
	irq_enable(IRQN);
 8007e56:	2050      	movs	r0, #80	; 0x50
 8007e58:	f7fa fba0 	bl	800259c <arch_irq_enable>

	return 0;
}
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	40021000 	.word	0x40021000
 8007e64:	0800dddc 	.word	0x0800dddc

08007e68 <entropy_stm32_rng_get_entropy_isr>:
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8007e68:	07d8      	lsls	r0, r3, #31
{
 8007e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
 8007e6e:	d404      	bmi.n	8007e7a <entropy_stm32_rng_get_entropy_isr+0x12>
		return rng_pool_get(
 8007e70:	4823      	ldr	r0, [pc, #140]	; (8007f00 <entropy_stm32_rng_get_entropy_isr+0x98>)
 8007e72:	f7ff fed9 	bl	8007c28 <rng_pool_get>
}
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	b912      	cbnz	r2, 8007e84 <entropy_stm32_rng_get_entropy_isr+0x1c>
	return cnt;
 8007e7e:	4620      	mov	r0, r4
}
 8007e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e84:	460d      	mov	r5, r1
	__asm__ volatile(
 8007e86:	f04f 0310 	mov.w	r3, #16
 8007e8a:	f3ef 8611 	mrs	r6, BASEPRI
 8007e8e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007e92:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
 8007e96:	2050      	movs	r0, #80	; 0x50
 8007e98:	f7fa fba4 	bl	80025e4 <arch_irq_is_enabled>
 8007e9c:	4680      	mov	r8, r0
		irq_disable(IRQN);
 8007e9e:	2050      	movs	r0, #80	; 0x50
 8007ea0:	f7fa fb8c 	bl	80025bc <arch_irq_disable>
	__asm__ volatile(
 8007ea4:	f386 8811 	msr	BASEPRI, r6
 8007ea8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eac:	4e15      	ldr	r6, [pc, #84]	; (8007f04 <entropy_stm32_rng_get_entropy_isr+0x9c>)
 8007eae:	f8df a058 	ldr.w	sl, [pc, #88]	; 8007f08 <entropy_stm32_rng_get_entropy_isr+0xa0>
 8007eb2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8007eb6:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
 8007eba:	46a1      	mov	r9, r4
			while (LL_RNG_IsActiveFlag_DRDY(
 8007ebc:	f8da 3000 	ldr.w	r3, [sl]
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	07db      	lsls	r3, r3, #31
 8007ec4:	d516      	bpl.n	8007ef4 <entropy_stm32_rng_get_entropy_isr+0x8c>
			byte = random_byte_get();
 8007ec6:	f7ff fe7b 	bl	8007bc0 <random_byte_get>
			if (byte < 0) {
 8007eca:	1e03      	subs	r3, r0, #0
			buf[--len] = byte;
 8007ecc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8007ed0:	f8c6 7188 	str.w	r7, [r6, #392]	; 0x188
			if (byte < 0) {
 8007ed4:	dbf2      	blt.n	8007ebc <entropy_stm32_rng_get_entropy_isr+0x54>
			buf[--len] = byte;
 8007ed6:	fa1f f982 	uxth.w	r9, r2
 8007eda:	f805 3009 	strb.w	r3, [r5, r9]
		} while (len);
 8007ede:	f1b9 0f00 	cmp.w	r9, #0
 8007ee2:	d1eb      	bne.n	8007ebc <entropy_stm32_rng_get_entropy_isr+0x54>
		if (irq_enabled) {
 8007ee4:	f1b8 0f00 	cmp.w	r8, #0
 8007ee8:	d0c9      	beq.n	8007e7e <entropy_stm32_rng_get_entropy_isr+0x16>
			irq_enable(IRQN);
 8007eea:	2050      	movs	r0, #80	; 0x50
 8007eec:	f7fa fb56 	bl	800259c <arch_irq_enable>
	return cnt;
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	e7c5      	b.n	8007e80 <entropy_stm32_rng_get_entropy_isr+0x18>
  __ASM volatile ("dsb 0xF":::"memory");
 8007ef4:	f3bf 8f4f 	dsb	sy
				__WFE();
 8007ef8:	bf20      	wfe
				__SEV();
 8007efa:	bf40      	sev
				__WFE();
 8007efc:	bf20      	wfe
 8007efe:	e7dd      	b.n	8007ebc <entropy_stm32_rng_get_entropy_isr+0x54>
 8007f00:	200002c0 	.word	0x200002c0
 8007f04:	e000e100 	.word	0xe000e100
 8007f08:	20000288 	.word	0x20000288

08007f0c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8007f0c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
{
 8007f10:	b430      	push	{r4, r5}
	uint32_t val1 = SysTick->VAL;	/* A */
 8007f12:	6995      	ldr	r5, [r2, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007f14:	6913      	ldr	r3, [r2, #16]
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
	    || (val1 < val2)) {
		overflow_cyc += last_load;
 8007f16:	4909      	ldr	r1, [pc, #36]	; (8007f3c <elapsed+0x30>)
	uint32_t val2 = SysTick->VAL;	/* C */
 8007f18:	6990      	ldr	r0, [r2, #24]
		overflow_cyc += last_load;
 8007f1a:	680c      	ldr	r4, [r1, #0]
 8007f1c:	4a08      	ldr	r2, [pc, #32]	; (8007f40 <elapsed+0x34>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007f1e:	03db      	lsls	r3, r3, #15
 8007f20:	d401      	bmi.n	8007f26 <elapsed+0x1a>
	    || (val1 < val2)) {
 8007f22:	4285      	cmp	r5, r0
 8007f24:	d205      	bcs.n	8007f32 <elapsed+0x26>
		overflow_cyc += last_load;
 8007f26:	6811      	ldr	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8007f28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		overflow_cyc += last_load;
 8007f2c:	4421      	add	r1, r4
 8007f2e:	6011      	str	r1, [r2, #0]
		(void)SysTick->CTRL;
 8007f30:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8007f32:	6813      	ldr	r3, [r2, #0]
 8007f34:	4423      	add	r3, r4
}
 8007f36:	1a18      	subs	r0, r3, r0
 8007f38:	bc30      	pop	{r4, r5}
 8007f3a:	4770      	bx	lr
 8007f3c:	2000131c 	.word	0x2000131c
 8007f40:	20001320 	.word	0x20001320

08007f44 <sys_clock_driver_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

static int sys_clock_driver_init(const struct device *dev)
{
 8007f44:	b430      	push	{r4, r5}
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
	SysTick->LOAD = last_load;
 8007f46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f4a:	4d0a      	ldr	r5, [pc, #40]	; (8007f74 <sys_clock_driver_init+0x30>)
	last_load = CYC_PER_TICK - 1;
 8007f4c:	4c0a      	ldr	r4, [pc, #40]	; (8007f78 <sys_clock_driver_init+0x34>)
	overflow_cyc = 0U;
 8007f4e:	490b      	ldr	r1, [pc, #44]	; (8007f7c <sys_clock_driver_init+0x38>)
 8007f50:	2000      	movs	r0, #0
	last_load = CYC_PER_TICK - 1;
 8007f52:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8007f56:	f04f 0c10 	mov.w	ip, #16
 8007f5a:	f885 c023 	strb.w	ip, [r5, #35]	; 0x23
 8007f5e:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0U;
 8007f60:	6008      	str	r0, [r1, #0]
	SysTick->LOAD = last_load;
 8007f62:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8007f64:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	f042 0207 	orr.w	r2, r2, #7
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007f6c:	bc30      	pop	{r4, r5}
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8007f6e:	611a      	str	r2, [r3, #16]
}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	e000ed00 	.word	0xe000ed00
 8007f78:	2000131c 	.word	0x2000131c
 8007f7c:	20001320 	.word	0x20001320

08007f80 <sys_clock_isr>:
{
 8007f80:	b538      	push	{r3, r4, r5, lr}
	elapsed();
 8007f82:	f7ff ffc3 	bl	8007f0c <elapsed>
	cycle_count += overflow_cyc;
 8007f86:	4c0d      	ldr	r4, [pc, #52]	; (8007fbc <sys_clock_isr+0x3c>)
 8007f88:	480d      	ldr	r0, [pc, #52]	; (8007fc0 <sys_clock_isr+0x40>)
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	6802      	ldr	r2, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007f8e:	490d      	ldr	r1, [pc, #52]	; (8007fc4 <sys_clock_isr+0x44>)
	cycle_count += overflow_cyc;
 8007f90:	441a      	add	r2, r3
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007f92:	680b      	ldr	r3, [r1, #0]
	cycle_count += overflow_cyc;
 8007f94:	6022      	str	r2, [r4, #0]
	overflow_cyc = 0;
 8007f96:	2500      	movs	r5, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007f98:	4c0b      	ldr	r4, [pc, #44]	; (8007fc8 <sys_clock_isr+0x48>)
	overflow_cyc = 0;
 8007f9a:	6005      	str	r5, [r0, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007f9c:	1ad0      	subs	r0, r2, r3
 8007f9e:	fba4 4000 	umull	r4, r0, r4, r0
		announced_cycles += dticks * CYC_PER_TICK;
 8007fa2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007fa6:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8007fa8:	fb02 3300 	mla	r3, r2, r0, r3
 8007fac:	600b      	str	r3, [r1, #0]
		sys_clock_announce(dticks);
 8007fae:	f7f9 f8b3 	bl	8001118 <sys_clock_announce>
}
 8007fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_arm_int_exit();
 8007fb6:	f7fa bcbb 	b.w	8002930 <z_arm_exc_exit>
 8007fba:	bf00      	nop
 8007fbc:	20001318 	.word	0x20001318
 8007fc0:	20001320 	.word	0x20001320
 8007fc4:	20001314 	.word	0x20001314
 8007fc8:	10624dd3 	.word	0x10624dd3

08007fcc <sys_clock_set_timeout>:
{
 8007fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	d03d      	beq.n	800804e <sys_clock_set_timeout+0x82>
 8007fd2:	1c42      	adds	r2, r0, #1
 8007fd4:	d066      	beq.n	80080a4 <sys_clock_set_timeout+0xd8>
	uint32_t last_load_ = last_load;
 8007fd6:	4f3a      	ldr	r7, [pc, #232]	; (80080c0 <sys_clock_set_timeout+0xf4>)
 8007fd8:	683c      	ldr	r4, [r7, #0]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007fda:	2801      	cmp	r0, #1
 8007fdc:	dd3e      	ble.n	800805c <sys_clock_set_timeout+0x90>
 8007fde:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8007fe2:	dd6a      	ble.n	80080ba <sys_clock_set_timeout+0xee>
 8007fe4:	f44f 6503 	mov.w	r5, #2096	; 0x830
	__asm__ volatile(
 8007fe8:	f04f 0310 	mov.w	r3, #16
 8007fec:	f3ef 8611 	mrs	r6, BASEPRI
 8007ff0:	f383 8812 	msr	BASEPRI_MAX, r3
 8007ff4:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8007ff8:	f7ff ff88 	bl	8007f0c <elapsed>
	cycle_count += pending;
 8007ffc:	4a31      	ldr	r2, [pc, #196]	; (80080c4 <sys_clock_set_timeout+0xf8>)
	uint32_t unannounced = cycle_count - announced_cycles;
 8007ffe:	4b32      	ldr	r3, [pc, #200]	; (80080c8 <sys_clock_set_timeout+0xfc>)
 8008000:	6819      	ldr	r1, [r3, #0]
	cycle_count += pending;
 8008002:	6813      	ldr	r3, [r2, #0]
	val1 = SysTick->VAL;
 8008004:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	cycle_count += pending;
 8008008:	4418      	add	r0, r3
	overflow_cyc = 0U;
 800800a:	4b30      	ldr	r3, [pc, #192]	; (80080cc <sys_clock_set_timeout+0x100>)
	val1 = SysTick->VAL;
 800800c:	f8dc c018 	ldr.w	ip, [ip, #24]
	cycle_count += pending;
 8008010:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0U;
 8008012:	f04f 0e00 	mov.w	lr, #0
 8008016:	f8c3 e000 	str.w	lr, [r3]
	if ((int32_t)unannounced < 0) {
 800801a:	1a43      	subs	r3, r0, r1
 800801c:	d420      	bmi.n	8008060 <sys_clock_set_timeout+0x94>
		delay = ticks * CYC_PER_TICK;
 800801e:	f44f 5efa 	mov.w	lr, #8000	; 0x1f40
		delay += unannounced;
 8008022:	fb0e 3305 	mla	r3, lr, r5, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8008026:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 800802a:	4d29      	ldr	r5, [pc, #164]	; (80080d0 <sys_clock_set_timeout+0x104>)
 800802c:	331f      	adds	r3, #31
 800802e:	fba5 5303 	umull	r5, r3, r5, r3
		delay -= unannounced;
 8008032:	1a09      	subs	r1, r1, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8008034:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8008036:	fb0e 1303 	mla	r3, lr, r3, r1
		delay = MAX(delay, MIN_DELAY);
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d928      	bls.n	8008092 <sys_clock_set_timeout+0xc6>
		if (delay > MAX_CYCLES) {
 8008040:	4924      	ldr	r1, [pc, #144]	; (80080d4 <sys_clock_set_timeout+0x108>)
 8008042:	428b      	cmp	r3, r1
 8008044:	d92b      	bls.n	800809e <sys_clock_set_timeout+0xd2>
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
 8008046:	f8df e090 	ldr.w	lr, [pc, #144]	; 80080d8 <sys_clock_set_timeout+0x10c>
			last_load = MAX_CYCLES;
 800804a:	6039      	str	r1, [r7, #0]
 800804c:	e00d      	b.n	800806a <sys_clock_set_timeout+0x9e>
	uint32_t last_load_ = last_load;
 800804e:	4f1c      	ldr	r7, [pc, #112]	; (80080c0 <sys_clock_set_timeout+0xf4>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8008050:	1c43      	adds	r3, r0, #1
	uint32_t last_load_ = last_load;
 8008052:	683c      	ldr	r4, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8008054:	d1c1      	bne.n	8007fda <sys_clock_set_timeout+0xe>
 8008056:	f640 052f 	movw	r5, #2095	; 0x82f
 800805a:	e7c5      	b.n	8007fe8 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800805c:	2500      	movs	r5, #0
 800805e:	e7c3      	b.n	8007fe8 <sys_clock_set_timeout+0x1c>
		last_load = MIN_DELAY;
 8008060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	f240 3eff 	movw	lr, #1023	; 0x3ff
	val2 = SysTick->VAL;
 800806a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	SysTick->VAL = 0; /* resets timer to last_load */
 800806e:	2500      	movs	r5, #0
	val2 = SysTick->VAL;
 8008070:	698b      	ldr	r3, [r1, #24]
	SysTick->LOAD = last_load - 1;
 8008072:	f8c1 e014 	str.w	lr, [r1, #20]
	if (val1 < val2) {
 8008076:	459c      	cmp	ip, r3
		cycle_count += (val1 + (last_load_ - val2));
 8008078:	ebac 0303 	sub.w	r3, ip, r3
 800807c:	bf3a      	itte	cc
 800807e:	18e4      	addcc	r4, r4, r3
 8008080:	1900      	addcc	r0, r0, r4
		cycle_count += (val1 - val2);
 8008082:	18c0      	addcs	r0, r0, r3
	SysTick->VAL = 0; /* resets timer to last_load */
 8008084:	618d      	str	r5, [r1, #24]
		cycle_count += (val1 - val2);
 8008086:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
 8008088:	f386 8811 	msr	BASEPRI, r6
 800808c:	f3bf 8f6f 	isb	sy
}
 8008090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008092:	f240 3eff 	movw	lr, #1023	; 0x3ff
		delay = MAX(delay, MIN_DELAY);
 8008096:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	e7e5      	b.n	800806a <sys_clock_set_timeout+0x9e>
	SysTick->LOAD = last_load - 1;
 800809e:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80080a2:	e7fa      	b.n	800809a <sys_clock_set_timeout+0xce>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80080a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
		last_load = TIMER_STOPPED;
 80080a8:	4905      	ldr	r1, [pc, #20]	; (80080c0 <sys_clock_set_timeout+0xf4>)
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80080aa:	6913      	ldr	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80080ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80080b6:	6008      	str	r0, [r1, #0]
}
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80080ba:	1e45      	subs	r5, r0, #1
 80080bc:	e794      	b.n	8007fe8 <sys_clock_set_timeout+0x1c>
 80080be:	bf00      	nop
 80080c0:	2000131c 	.word	0x2000131c
 80080c4:	20001318 	.word	0x20001318
 80080c8:	20001314 	.word	0x20001314
 80080cc:	20001320 	.word	0x20001320
 80080d0:	10624dd3 	.word	0x10624dd3
 80080d4:	00ffdc00 	.word	0x00ffdc00
 80080d8:	00ffdbff 	.word	0x00ffdbff

080080dc <sys_clock_elapsed>:
{
 80080dc:	b410      	push	{r4}
	__asm__ volatile(
 80080de:	f04f 0310 	mov.w	r3, #16
 80080e2:	f3ef 8c11 	mrs	ip, BASEPRI
 80080e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80080ea:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 80080ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080f2:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80080f4:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80080f6:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80080f8:	03d3      	lsls	r3, r2, #15
 80080fa:	d401      	bmi.n	8008100 <sys_clock_elapsed+0x24>
	    || (val1 < val2)) {
 80080fc:	42a1      	cmp	r1, r4
 80080fe:	d21c      	bcs.n	800813a <sys_clock_elapsed+0x5e>
		overflow_cyc += last_load;
 8008100:	4b10      	ldr	r3, [pc, #64]	; (8008144 <sys_clock_elapsed+0x68>)
 8008102:	4911      	ldr	r1, [pc, #68]	; (8008148 <sys_clock_elapsed+0x6c>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	6809      	ldr	r1, [r1, #0]
 8008108:	440a      	add	r2, r1
 800810a:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 800810c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008110:	6912      	ldr	r2, [r2, #16]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8008112:	4a0e      	ldr	r2, [pc, #56]	; (800814c <sys_clock_elapsed+0x70>)
	return (last_load - val2) + overflow_cyc;
 8008114:	6818      	ldr	r0, [r3, #0]
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8008116:	6813      	ldr	r3, [r2, #0]
 8008118:	4418      	add	r0, r3
 800811a:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <sys_clock_elapsed+0x74>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	1b00      	subs	r0, r0, r4
 8008120:	1ac0      	subs	r0, r0, r3
 8008122:	4408      	add	r0, r1
	__asm__ volatile(
 8008124:	f38c 8811 	msr	BASEPRI, ip
 8008128:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <sys_clock_elapsed+0x78>)
}
 800812e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return cyc / CYC_PER_TICK;
 8008132:	fba3 3000 	umull	r3, r0, r3, r0
}
 8008136:	0a40      	lsrs	r0, r0, #9
 8008138:	4770      	bx	lr
		overflow_cyc += last_load;
 800813a:	4a03      	ldr	r2, [pc, #12]	; (8008148 <sys_clock_elapsed+0x6c>)
 800813c:	4b01      	ldr	r3, [pc, #4]	; (8008144 <sys_clock_elapsed+0x68>)
 800813e:	6811      	ldr	r1, [r2, #0]
 8008140:	e7e7      	b.n	8008112 <sys_clock_elapsed+0x36>
 8008142:	bf00      	nop
 8008144:	20001320 	.word	0x20001320
 8008148:	2000131c 	.word	0x2000131c
 800814c:	20001318 	.word	0x20001318
 8008150:	20001314 	.word	0x20001314
 8008154:	10624dd3 	.word	0x10624dd3

08008158 <sys_clock_cycle_get_32>:
{
 8008158:	b410      	push	{r4}
	__asm__ volatile(
 800815a:	f04f 0310 	mov.w	r3, #16
 800815e:	f3ef 8c11 	mrs	ip, BASEPRI
 8008162:	f383 8812 	msr	BASEPRI_MAX, r3
 8008166:	f3bf 8f6f 	isb	sy
	uint32_t val1 = SysTick->VAL;	/* A */
 800816a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800816e:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8008170:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8008172:	699c      	ldr	r4, [r3, #24]
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8008174:	03d3      	lsls	r3, r2, #15
 8008176:	d401      	bmi.n	800817c <sys_clock_cycle_get_32+0x24>
	    || (val1 < val2)) {
 8008178:	42a1      	cmp	r1, r4
 800817a:	d215      	bcs.n	80081a8 <sys_clock_cycle_get_32+0x50>
		overflow_cyc += last_load;
 800817c:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <sys_clock_cycle_get_32+0x58>)
 800817e:	490d      	ldr	r1, [pc, #52]	; (80081b4 <sys_clock_cycle_get_32+0x5c>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	6809      	ldr	r1, [r1, #0]
 8008184:	440a      	add	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
		(void)SysTick->CTRL;
 8008188:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800818c:	6912      	ldr	r2, [r2, #16]
	uint32_t ret = elapsed() + cycle_count;
 800818e:	4a0a      	ldr	r2, [pc, #40]	; (80081b8 <sys_clock_cycle_get_32+0x60>)
	return (last_load - val2) + overflow_cyc;
 8008190:	6818      	ldr	r0, [r3, #0]
	uint32_t ret = elapsed() + cycle_count;
 8008192:	6813      	ldr	r3, [r2, #0]
 8008194:	4418      	add	r0, r3
 8008196:	1b00      	subs	r0, r0, r4
 8008198:	4408      	add	r0, r1
	__asm__ volatile(
 800819a:	f38c 8811 	msr	BASEPRI, ip
 800819e:	f3bf 8f6f 	isb	sy
}
 80081a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081a6:	4770      	bx	lr
		overflow_cyc += last_load;
 80081a8:	4a02      	ldr	r2, [pc, #8]	; (80081b4 <sys_clock_cycle_get_32+0x5c>)
 80081aa:	4b01      	ldr	r3, [pc, #4]	; (80081b0 <sys_clock_cycle_get_32+0x58>)
 80081ac:	6811      	ldr	r1, [r2, #0]
 80081ae:	e7ee      	b.n	800818e <sys_clock_cycle_get_32+0x36>
 80081b0:	20001320 	.word	0x20001320
 80081b4:	2000131c 	.word	0x2000131c
 80081b8:	20001318 	.word	0x20001318

080081bc <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 80081bc:	b510      	push	{r4, lr}
	*state = &config->states[0];
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 80081c2:	f890 e004 	ldrb.w	lr, [r0, #4]
 80081c6:	f10e 5e00 	add.w	lr, lr, #536870912	; 0x20000000
 80081ca:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80081ce:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
 80081d2:	4563      	cmp	r3, ip
 80081d4:	bf98      	it	ls
 80081d6:	ea4f 0ece 	movls.w	lr, lr, lsl #3
 80081da:	d906      	bls.n	80081ea <pinctrl_lookup_state+0x2e>
 80081dc:	e00d      	b.n	80081fa <pinctrl_lookup_state+0x3e>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 80081de:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 80081e0:	6804      	ldr	r4, [r0, #0]
 80081e2:	eb04 0c0e 	add.w	ip, r4, lr
 80081e6:	4563      	cmp	r3, ip
 80081e8:	d807      	bhi.n	80081fa <pinctrl_lookup_state+0x3e>
		if (id == (*state)->id) {
 80081ea:	f893 c005 	ldrb.w	ip, [r3, #5]
 80081ee:	458c      	cmp	ip, r1
		(*state)++;
 80081f0:	f103 0308 	add.w	r3, r3, #8
		if (id == (*state)->id) {
 80081f4:	d1f3      	bne.n	80081de <pinctrl_lookup_state+0x22>
			return 0;
 80081f6:	2000      	movs	r0, #0
	}

	return -ENOENT;
}
 80081f8:	bd10      	pop	{r4, pc}
	return -ENOENT;
 80081fa:	f06f 0001 	mvn.w	r0, #1
}
 80081fe:	bd10      	pop	{r4, pc}

08008200 <pinctrl_configure_pins>:
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8008200:	2900      	cmp	r1, #0
 8008202:	d041      	beq.n	8008288 <pinctrl_configure_pins+0x88>
 8008204:	3901      	subs	r1, #1
{
 8008206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820a:	b2c9      	uxtb	r1, r1
 800820c:	f100 0708 	add.w	r7, r0, #8
	port_device = gpio_ports[STM32_PORT(pin)];
 8008210:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800828c <pinctrl_configure_pins+0x8c>
 8008214:	4605      	mov	r5, r0
 8008216:	eb07 07c1 	add.w	r7, r7, r1, lsl #3
	uint32_t func = 0;
 800821a:	2600      	movs	r6, #0
 800821c:	e020      	b.n	8008260 <pinctrl_configure_pins+0x60>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800821e:	686e      	ldr	r6, [r5, #4]
 8008220:	f046 0620 	orr.w	r6, r6, #32
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8008224:	f3c4 2243 	ubfx	r2, r4, #9, #4
 8008228:	2a0a      	cmp	r2, #10
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800822a:	f3c4 1447 	ubfx	r4, r4, #5, #8
	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 800822e:	d828      	bhi.n	8008282 <pinctrl_configure_pins+0x82>
	port_device = gpio_ports[STM32_PORT(pin)];
 8008230:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8008234:	f1b9 0f00 	cmp.w	r9, #0
 8008238:	d01f      	beq.n	800827a <pinctrl_configure_pins+0x7a>
 800823a:	4648      	mov	r0, r9
 800823c:	f001 fe7c 	bl	8009f38 <z_device_is_ready>
 8008240:	4684      	mov	ip, r0
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 8008242:	3508      	adds	r5, #8
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8008244:	4653      	mov	r3, sl
 8008246:	4632      	mov	r2, r6
 8008248:	f004 010f 	and.w	r1, r4, #15
 800824c:	4648      	mov	r0, r9
	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 800824e:	f1bc 0f00 	cmp.w	ip, #0
 8008252:	d012      	beq.n	800827a <pinctrl_configure_pins+0x7a>
	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8008254:	f7fb fea0 	bl	8003f98 <gpio_stm32_configure>
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
		if (ret < 0) {
 8008258:	2800      	cmp	r0, #0
 800825a:	db0c      	blt.n	8008276 <pinctrl_configure_pins+0x76>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800825c:	42af      	cmp	r7, r5
 800825e:	d009      	beq.n	8008274 <pinctrl_configure_pins+0x74>
		mux = pins[i].pinmux;
 8008260:	682c      	ldr	r4, [r5, #0]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8008262:	06e3      	lsls	r3, r4, #27
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 8008264:	f004 0a1f 	and.w	sl, r4, #31
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 8008268:	d5d9      	bpl.n	800821e <pinctrl_configure_pins+0x1e>
			func = STM32_MODER_ANALOG_MODE;
 800826a:	f1ba 0f10 	cmp.w	sl, #16
 800826e:	bf08      	it	eq
 8008270:	2630      	moveq	r6, #48	; 0x30
 8008272:	e7d7      	b.n	8008224 <pinctrl_configure_pins+0x24>
			return ret;
		}
	}

	return 0;
 8008274:	2000      	movs	r0, #0
}
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENODEV;
 800827a:	f06f 0012 	mvn.w	r0, #18
}
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 8008282:	f06f 0015 	mvn.w	r0, #21
 8008286:	e7f6      	b.n	8008276 <pinctrl_configure_pins+0x76>
	return 0;
 8008288:	2000      	movs	r0, #0
}
 800828a:	4770      	bx	lr
 800828c:	0800e9b4 	.word	0x0800e9b4

08008290 <LL_DMA_Init>:
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8008290:	4b1d      	ldr	r3, [pc, #116]	; (8008308 <LL_DMA_Init+0x78>)
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8008292:	b530      	push	{r4, r5, lr}
 8008294:	5c5c      	ldrb	r4, [r3, r1]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8008296:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
 800829a:	432b      	orrs	r3, r5
                        DMA_InitStruct->Mode                   | \
 800829c:	6915      	ldr	r5, [r2, #16]
 800829e:	432b      	orrs	r3, r5
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 80082a0:	6955      	ldr	r5, [r2, #20]
 80082a2:	432b      	orrs	r3, r5
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80082a4:	6995      	ldr	r5, [r2, #24]
 80082a6:	432b      	orrs	r3, r5
 80082a8:	5825      	ldr	r5, [r4, r0]
 80082aa:	f425 4eff 	bic.w	lr, r5, #32640	; 0x7f80
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80082ae:	69d5      	ldr	r5, [r2, #28]
 80082b0:	432b      	orrs	r3, r5
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80082b2:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80082b4:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
 80082b8:	432b      	orrs	r3, r5
 80082ba:	eb04 0c00 	add.w	ip, r4, r0
 80082be:	ea43 030e 	orr.w	r3, r3, lr
 80082c2:	5023      	str	r3, [r4, r0]

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80082c4:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 80082c6:	f8cc 300c 	str.w	r3, [ip, #12]

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80082ca:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80082cc:	f8cc 3008 	str.w	r3, [ip, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80082d0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80082d4:	6a14      	ldr	r4, [r2, #32]
 80082d6:	0c1b      	lsrs	r3, r3, #16
 80082d8:	041b      	lsls	r3, r3, #16
 80082da:	4323      	orrs	r3, r4
 80082dc:	f8cc 3004 	str.w	r3, [ip, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80082e0:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
#else
  /*--------------------------- DMAx CSELR Configuration -----------------------
   * Configure the DMA request for DMA instance on Channel x with parameter :
   * - PeriphRequest: DMA_CSELR[31:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 80082e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80082e6:	0089      	lsls	r1, r1, #2
 80082e8:	220f      	movs	r2, #15
 80082ea:	408a      	lsls	r2, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	fa92 f1a2 	rbit	r1, r2
  return __builtin_clz(value);
 80082f0:	fab1 f181 	clz	r1, r1
 80082f4:	ea24 0202 	bic.w	r2, r4, r2
 80082f8:	fa03 f101 	lsl.w	r1, r3, r1
 80082fc:	4311      	orrs	r1, r2
 80082fe:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
#endif /* DMAMUX1 */

  return SUCCESS;
}
 8008302:	2000      	movs	r0, #0
 8008304:	bd30      	pop	{r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	0800e9f0 	.word	0x0800e9f0

0800830c <LL_DMA_StructInit>:
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800830c:	2300      	movs	r3, #0
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800830e:	e9c0 3300 	strd	r3, r3, [r0]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8008312:	e9c0 3302 	strd	r3, r3, [r0, #8]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8008316:	e9c0 3304 	strd	r3, r3, [r0, #16]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800831a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  DMA_InitStruct->NbData                 = 0x00000000U;
#if defined(DMAMUX1)
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
#else
  DMA_InitStruct->PeriphRequest          = LL_DMA_REQUEST_0;
 800831e:	e9c0 3308 	strd	r3, r3, [r0, #32]
#endif /* DMAMUX1 */
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8008322:	6283      	str	r3, [r0, #40]	; 0x28
}
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop

08008328 <LL_TIM_StructInit>:
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8008328:	2300      	movs	r3, #0
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800832a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800832e:	e9c0 3201 	strd	r3, r2, [r0, #4]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8008332:	e9c0 3303 	strd	r3, r3, [r0, #12]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8008336:	8003      	strh	r3, [r0, #0]
}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800833c:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800833e:	4d1b      	ldr	r5, [pc, #108]	; (80083ac <LL_TIM_Init+0x70>)

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8008340:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8008342:	6803      	ldr	r3, [r0, #0]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8008344:	880a      	ldrh	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008346:	42a8      	cmp	r0, r5
 8008348:	d02a      	beq.n	80083a0 <LL_TIM_Init+0x64>
 800834a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800834e:	d015      	beq.n	800837c <LL_TIM_Init+0x40>
 8008350:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8008354:	42a8      	cmp	r0, r5
 8008356:	d011      	beq.n	800837c <LL_TIM_Init+0x40>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008358:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00
 800835c:	42a8      	cmp	r0, r5
 800835e:	d003      	beq.n	8008368 <LL_TIM_Init+0x2c>
 8008360:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008364:	42a8      	cmp	r0, r5
 8008366:	d111      	bne.n	800838c <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8008368:	68cd      	ldr	r5, [r1, #12]
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8008370:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8008372:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8008374:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8008376:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008378:	6303      	str	r3, [r0, #48]	; 0x30
}
 800837a:	e00a      	b.n	8008392 <LL_TIM_Init+0x56>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800837c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800837e:	68c9      	ldr	r1, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8008380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008384:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8008386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838a:	430b      	orrs	r3, r1
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800838c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800838e:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8008390:	6282      	str	r2, [r0, #40]	; 0x28
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008392:	6943      	ldr	r3, [r0, #20]
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 800839a:	bc30      	pop	{r4, r5}
 800839c:	2000      	movs	r0, #0
 800839e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80083a0:	684d      	ldr	r5, [r1, #4]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80083a8:	e7de      	b.n	8008368 <LL_TIM_Init+0x2c>
 80083aa:	bf00      	nop
 80083ac:	40012c00 	.word	0x40012c00

080083b0 <LL_TIM_OC_StructInit>:
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80083b0:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80083b2:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80083b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80083ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80083be:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80083c2:	4770      	bx	lr

080083c4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80083c4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 80083c8:	b430      	push	{r4, r5}
  switch (Channel)
 80083ca:	f000 80f7 	beq.w	80085bc <LL_TIM_OC_Init+0x1f8>
 80083ce:	d832      	bhi.n	8008436 <LL_TIM_OC_Init+0x72>
 80083d0:	2910      	cmp	r1, #16
 80083d2:	f000 8125 	beq.w	8008620 <LL_TIM_OC_Init+0x25c>
 80083d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80083da:	d15d      	bne.n	8008498 <LL_TIM_OC_Init+0xd4>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80083dc:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80083de:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80083e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083e4:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80083e6:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80083e8:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80083ea:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80083ec:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80083f0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80083f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083f8:	6814      	ldr	r4, [r2, #0]
 80083fa:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80083fe:	431c      	orrs	r4, r3

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8008400:	6853      	ldr	r3, [r2, #4]
 8008402:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008406:	ea41 2103 	orr.w	r1, r1, r3, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840a:	4ba6      	ldr	r3, [pc, #664]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 800840c:	4298      	cmp	r0, r3
 800840e:	f000 8086 	beq.w	800851e <LL_TIM_OC_Init+0x15a>
 8008412:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8008416:	4298      	cmp	r0, r3
 8008418:	f000 8081 	beq.w	800851e <LL_TIM_OC_Init+0x15a>
 800841c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008420:	4298      	cmp	r0, r3
 8008422:	d07c      	beq.n	800851e <LL_TIM_OC_Init+0x15a>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8008424:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008426:	6045      	str	r5, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8008428:	2300      	movs	r3, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800842a:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800842c:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800842e:	bc30      	pop	{r4, r5}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008430:	6201      	str	r1, [r0, #32]
}
 8008432:	4618      	mov	r0, r3
 8008434:	4770      	bx	lr
  switch (Channel)
 8008436:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800843a:	f000 808d 	beq.w	8008558 <LL_TIM_OC_Init+0x194>
 800843e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008442:	d154      	bne.n	80084ee <LL_TIM_OC_Init+0x12a>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8008444:	6a01      	ldr	r1, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8008446:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8008448:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800844c:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800844e:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8008450:	6d43      	ldr	r3, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8008452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800845e:	6914      	ldr	r4, [r2, #16]
 8008460:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8008464:	ea41 5104 	orr.w	r1, r1, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8008468:	6854      	ldr	r4, [r2, #4]
 800846a:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800846e:	ea41 5104 	orr.w	r1, r1, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008472:	4c8c      	ldr	r4, [pc, #560]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 8008474:	42a0      	cmp	r0, r4
 8008476:	d067      	beq.n	8008548 <LL_TIM_OC_Init+0x184>
 8008478:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800847c:	42a0      	cmp	r0, r4
 800847e:	d063      	beq.n	8008548 <LL_TIM_OC_Init+0x184>
 8008480:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008484:	42a0      	cmp	r0, r4
 8008486:	d05f      	beq.n	8008548 <LL_TIM_OC_Init+0x184>

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8008488:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800848a:	6543      	str	r3, [r0, #84]	; 0x54
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800848c:	2300      	movs	r3, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 800848e:	65c2      	str	r2, [r0, #92]	; 0x5c
}
 8008490:	bc30      	pop	{r4, r5}

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008492:	6201      	str	r1, [r0, #32]
}
 8008494:	4618      	mov	r0, r3
 8008496:	4770      	bx	lr
  switch (Channel)
 8008498:	2901      	cmp	r1, #1
 800849a:	d128      	bne.n	80084ee <LL_TIM_OC_Init+0x12a>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800849c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800849e:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80084a6:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80084a8:	6843      	ldr	r3, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80084aa:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80084ac:	f021 0102 	bic.w	r1, r1, #2
 80084b0:	4329      	orrs	r1, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80084b2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80084b6:	6815      	ldr	r5, [r2, #0]
 80084b8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80084bc:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80084be:	6855      	ldr	r5, [r2, #4]
 80084c0:	f021 0101 	bic.w	r1, r1, #1
 80084c4:	4329      	orrs	r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c6:	4d77      	ldr	r5, [pc, #476]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 80084c8:	42a8      	cmp	r0, r5
 80084ca:	d014      	beq.n	80084f6 <LL_TIM_OC_Init+0x132>
 80084cc:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80084d0:	42a8      	cmp	r0, r5
 80084d2:	d010      	beq.n	80084f6 <LL_TIM_OC_Init+0x132>
 80084d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80084d8:	42a8      	cmp	r0, r5
 80084da:	d00c      	beq.n	80084f6 <LL_TIM_OC_Init+0x132>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80084dc:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80084de:	6043      	str	r3, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80084e0:	2300      	movs	r3, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80084e2:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80084e4:	6342      	str	r2, [r0, #52]	; 0x34
}
 80084e6:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80084e8:	6201      	str	r1, [r0, #32]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	4770      	bx	lr
  switch (Channel)
 80084ee:	2301      	movs	r3, #1
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	bc30      	pop	{r4, r5}
 80084f4:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80084f6:	6955      	ldr	r5, [r2, #20]
 80084f8:	f021 0108 	bic.w	r1, r1, #8
 80084fc:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8008500:	6995      	ldr	r5, [r2, #24]
 8008502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008506:	432b      	orrs	r3, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8008508:	6895      	ldr	r5, [r2, #8]
 800850a:	f021 0104 	bic.w	r1, r1, #4
 800850e:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8008512:	69d5      	ldr	r5, [r2, #28]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800851c:	e7de      	b.n	80084dc <LL_TIM_OC_Init+0x118>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800851e:	6953      	ldr	r3, [r2, #20]
 8008520:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008524:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8008528:	6993      	ldr	r3, [r2, #24]
 800852a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800852e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8008532:	6893      	ldr	r3, [r2, #8]
 8008534:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008538:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800853c:	69d3      	ldr	r3, [r2, #28]
 800853e:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 8008542:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
 8008546:	e76d      	b.n	8008424 <LL_TIM_OC_Init+0x60>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8008548:	6844      	ldr	r4, [r0, #4]
 800854a:	6995      	ldr	r5, [r2, #24]
 800854c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8008550:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8008554:	6044      	str	r4, [r0, #4]
 8008556:	e797      	b.n	8008488 <LL_TIM_OC_Init+0xc4>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8008558:	6a01      	ldr	r1, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800855a:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800855c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008560:	6201      	str	r1, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8008562:	6a01      	ldr	r1, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8008564:	6d43      	ldr	r3, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8008566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8008570:	6914      	ldr	r4, [r2, #16]
 8008572:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8008576:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800857a:	6854      	ldr	r4, [r2, #4]
 800857c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008580:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008584:	4c47      	ldr	r4, [pc, #284]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 8008586:	42a0      	cmp	r0, r4
 8008588:	d010      	beq.n	80085ac <LL_TIM_OC_Init+0x1e8>
 800858a:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800858e:	42a0      	cmp	r0, r4
 8008590:	d00c      	beq.n	80085ac <LL_TIM_OC_Init+0x1e8>
 8008592:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008596:	42a0      	cmp	r0, r4
 8008598:	d008      	beq.n	80085ac <LL_TIM_OC_Init+0x1e8>
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800859a:	6543      	str	r3, [r0, #84]	; 0x54
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800859c:	6d83      	ldr	r3, [r0, #88]	; 0x58
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800859e:	68d2      	ldr	r2, [r2, #12]
 80085a0:	6582      	str	r2, [r0, #88]	; 0x58
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80085a2:	2300      	movs	r3, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80085a4:	6201      	str	r1, [r0, #32]
}
 80085a6:	bc30      	pop	{r4, r5}
 80085a8:	4618      	mov	r0, r3
 80085aa:	4770      	bx	lr
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80085ac:	6844      	ldr	r4, [r0, #4]
 80085ae:	6995      	ldr	r5, [r2, #24]
 80085b0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80085b4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80085b8:	6044      	str	r4, [r0, #4]
 80085ba:	e7ee      	b.n	800859a <LL_TIM_OC_Init+0x1d6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80085bc:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80085be:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80085c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c4:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80085c6:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80085c8:	6845      	ldr	r5, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80085ca:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80085cc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80085d0:	ea41 3104 	orr.w	r1, r1, r4, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80085d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085d8:	6814      	ldr	r4, [r2, #0]
 80085da:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 80085de:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80085e2:	6853      	ldr	r3, [r2, #4]
 80085e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80085e8:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ec:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 80085ee:	4298      	cmp	r0, r3
 80085f0:	d010      	beq.n	8008614 <LL_TIM_OC_Init+0x250>
 80085f2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80085f6:	4298      	cmp	r0, r3
 80085f8:	d00c      	beq.n	8008614 <LL_TIM_OC_Init+0x250>
 80085fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fe:	4298      	cmp	r0, r3
 8008600:	d008      	beq.n	8008614 <LL_TIM_OC_Init+0x250>
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8008602:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008604:	6045      	str	r5, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8008606:	2300      	movs	r3, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8008608:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800860a:	6402      	str	r2, [r0, #64]	; 0x40
}
 800860c:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800860e:	6201      	str	r1, [r0, #32]
}
 8008610:	4618      	mov	r0, r3
 8008612:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8008614:	6993      	ldr	r3, [r2, #24]
 8008616:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
 800861a:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
 800861e:	e7f0      	b.n	8008602 <LL_TIM_OC_Init+0x23e>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8008620:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008622:	6914      	ldr	r4, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800862a:	6a01      	ldr	r1, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800862c:	6845      	ldr	r5, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800862e:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8008630:	f021 0120 	bic.w	r1, r1, #32
 8008634:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8008638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800863c:	6814      	ldr	r4, [r2, #0]
 800863e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8008642:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8008646:	6853      	ldr	r3, [r2, #4]
 8008648:	f021 0110 	bic.w	r1, r1, #16
 800864c:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008650:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <LL_TIM_OC_Init+0x2e0>)
 8008652:	4298      	cmp	r0, r3
 8008654:	d010      	beq.n	8008678 <LL_TIM_OC_Init+0x2b4>
 8008656:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800865a:	4298      	cmp	r0, r3
 800865c:	d00c      	beq.n	8008678 <LL_TIM_OC_Init+0x2b4>
 800865e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008662:	4298      	cmp	r0, r3
 8008664:	d008      	beq.n	8008678 <LL_TIM_OC_Init+0x2b4>
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8008666:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8008668:	6045      	str	r5, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800866a:	2300      	movs	r3, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800866c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800866e:	6382      	str	r2, [r0, #56]	; 0x38
}
 8008670:	bc30      	pop	{r4, r5}
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8008672:	6201      	str	r1, [r0, #32]
}
 8008674:	4618      	mov	r0, r3
 8008676:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8008678:	6953      	ldr	r3, [r2, #20]
 800867a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800867e:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8008682:	6993      	ldr	r3, [r2, #24]
 8008684:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8008688:	ea45 0583 	orr.w	r5, r5, r3, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800868c:	6893      	ldr	r3, [r2, #8]
 800868e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008692:	ea41 1183 	orr.w	r1, r1, r3, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8008696:	69d3      	ldr	r3, [r2, #28]
 8008698:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 800869c:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 80086a0:	e7e1      	b.n	8008666 <LL_TIM_OC_Init+0x2a2>
 80086a2:	bf00      	nop
 80086a4:	40012c00 	.word	0x40012c00

080086a8 <LL_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 80086a8:	4b24      	ldr	r3, [pc, #144]	; (800873c <LL_SetFlashLatency.part.0+0x94>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  {
    status = ERROR;
  }
  else
  {
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 80086b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b4:	d028      	beq.n	8008708 <LL_SetFlashLatency.part.0+0x60>
          latency = LL_FLASH_LATENCY_1;
        }
        /* else HCLKFrequency <= 8MHz default LL_FLASH_LATENCY_0 0WS */
      }
#else
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 80086b6:	4b22      	ldr	r3, [pc, #136]	; (8008740 <LL_SetFlashLatency.part.0+0x98>)
 80086b8:	4298      	cmp	r0, r3
 80086ba:	d910      	bls.n	80086de <LL_SetFlashLatency.part.0+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80086bc:	2300      	movs	r3, #0
      {
        /* Unexpected HCLK > 26 */
        status = ERROR;
 80086be:	f04f 0c01 	mov.w	ip, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80086c2:	4920      	ldr	r1, [pc, #128]	; (8008744 <LL_SetFlashLatency.part.0+0x9c>)
 80086c4:	680a      	ldr	r2, [r1, #0]
 80086c6:	f022 0207 	bic.w	r2, r2, #7
 80086ca:	431a      	orrs	r2, r3
 80086cc:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80086ce:	680a      	ldr	r2, [r1, #0]
 80086d0:	f002 0207 	and.w	r2, r2, #7
    {
      status = ERROR;
    }
  }
  return status;
}
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bf0c      	ite	eq
 80086d8:	4660      	moveq	r0, ip
 80086da:	2001      	movne	r0, #1
 80086dc:	4770      	bx	lr
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 80086de:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 80086e2:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 80086e6:	4298      	cmp	r0, r3
 80086e8:	d80a      	bhi.n	8008700 <LL_SetFlashLatency.part.0+0x58>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 80086ea:	4b17      	ldr	r3, [pc, #92]	; (8008748 <LL_SetFlashLatency.part.0+0xa0>)
 80086ec:	4298      	cmp	r0, r3
 80086ee:	d814      	bhi.n	800871a <LL_SetFlashLatency.part.0+0x72>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80086f0:	4b16      	ldr	r3, [pc, #88]	; (800874c <LL_SetFlashLatency.part.0+0xa4>)
 80086f2:	4298      	cmp	r0, r3
  ErrorStatus status = SUCCESS;
 80086f4:	f04f 0c00 	mov.w	ip, #0
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 80086f8:	bf94      	ite	ls
 80086fa:	2300      	movls	r3, #0
 80086fc:	2301      	movhi	r3, #1
 80086fe:	e7e0      	b.n	80086c2 <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_3;
 8008700:	2303      	movs	r3, #3
  ErrorStatus status = SUCCESS;
 8008702:	f04f 0c00 	mov.w	ip, #0
 8008706:	e7dc      	b.n	80086c2 <LL_SetFlashLatency.part.0+0x1a>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8008708:	4b11      	ldr	r3, [pc, #68]	; (8008750 <LL_SetFlashLatency.part.0+0xa8>)
 800870a:	4298      	cmp	r0, r3
 800870c:	d809      	bhi.n	8008722 <LL_SetFlashLatency.part.0+0x7a>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <LL_SetFlashLatency.part.0+0xac>)
 8008710:	4298      	cmp	r0, r3
 8008712:	d8f5      	bhi.n	8008700 <LL_SetFlashLatency.part.0+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8008714:	4b10      	ldr	r3, [pc, #64]	; (8008758 <LL_SetFlashLatency.part.0+0xb0>)
 8008716:	4298      	cmp	r0, r3
 8008718:	d907      	bls.n	800872a <LL_SetFlashLatency.part.0+0x82>
        latency = LL_FLASH_LATENCY_2;
 800871a:	2302      	movs	r3, #2
  ErrorStatus status = SUCCESS;
 800871c:	f04f 0c00 	mov.w	ip, #0
 8008720:	e7cf      	b.n	80086c2 <LL_SetFlashLatency.part.0+0x1a>
        latency = LL_FLASH_LATENCY_4;
 8008722:	2304      	movs	r3, #4
  ErrorStatus status = SUCCESS;
 8008724:	f04f 0c00 	mov.w	ip, #0
 8008728:	e7cb      	b.n	80086c2 <LL_SetFlashLatency.part.0+0x1a>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800872a:	4b0c      	ldr	r3, [pc, #48]	; (800875c <LL_SetFlashLatency.part.0+0xb4>)
 800872c:	4298      	cmp	r0, r3
  ErrorStatus status = SUCCESS;
 800872e:	f04f 0c00 	mov.w	ip, #0
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8008732:	bf94      	ite	ls
 8008734:	2300      	movls	r3, #0
 8008736:	2301      	movhi	r3, #1
 8008738:	e7c3      	b.n	80086c2 <LL_SetFlashLatency.part.0+0x1a>
 800873a:	bf00      	nop
 800873c:	40007000 	.word	0x40007000
 8008740:	018cba80 	.word	0x018cba80
 8008744:	40022000 	.word	0x40022000
 8008748:	00b71b00 	.word	0x00b71b00
 800874c:	005b8d80 	.word	0x005b8d80
 8008750:	03d09000 	.word	0x03d09000
 8008754:	02dc6c00 	.word	0x02dc6c00
 8008758:	01e84800 	.word	0x01e84800
 800875c:	00f42400 	.word	0x00f42400

08008760 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8008762:	680f      	ldr	r7, [r1, #0]
 8008764:	4a28      	ldr	r2, [pc, #160]	; (8008808 <UTILS_EnablePLLAndSwitchSystem+0xa8>)

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8008766:	4e29      	ldr	r6, [pc, #164]	; (800880c <UTILS_EnablePLLAndSwitchSystem+0xac>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8008768:	f3c7 1303 	ubfx	r3, r7, #4, #4
{
 800876c:	460d      	mov	r5, r1
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800876e:	5cd3      	ldrb	r3, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8008770:	6831      	ldr	r1, [r6, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8008772:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8008776:	42a1      	cmp	r1, r4
 8008778:	d20c      	bcs.n	8008794 <UTILS_EnablePLLAndSwitchSystem+0x34>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800877a:	4b25      	ldr	r3, [pc, #148]	; (8008810 <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 800877c:	1e62      	subs	r2, r4, #1
 800877e:	429a      	cmp	r2, r3
 8008780:	d901      	bls.n	8008786 <UTILS_EnablePLLAndSwitchSystem+0x26>
    status = ERROR;
 8008782:	2001      	movs	r0, #1
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8008784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008786:	4620      	mov	r0, r4
 8008788:	f7ff ff8e 	bl	80086a8 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 800878c:	2800      	cmp	r0, #0
 800878e:	d136      	bne.n	80087fe <UTILS_EnablePLLAndSwitchSystem+0x9e>
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8008790:	682f      	ldr	r7, [r5, #0]
  if(SystemCoreClock > hclk_frequency)
 8008792:	6831      	ldr	r1, [r6, #0]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008794:	4b1f      	ldr	r3, [pc, #124]	; (8008814 <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800879c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80087a4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	0192      	lsls	r2, r2, #6
 80087aa:	d5fc      	bpl.n	80087a6 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80087b2:	433a      	orrs	r2, r7
 80087b4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	f042 0203 	orr.w	r2, r2, #3
 80087bc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80087be:	4a15      	ldr	r2, [pc, #84]	; (8008814 <UTILS_EnablePLLAndSwitchSystem+0xb4>)
 80087c0:	6893      	ldr	r3, [r2, #8]
 80087c2:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80087c6:	2b0c      	cmp	r3, #12
 80087c8:	d1fa      	bne.n	80087c0 <UTILS_EnablePLLAndSwitchSystem+0x60>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80087ca:	6893      	ldr	r3, [r2, #8]
 80087cc:	6868      	ldr	r0, [r5, #4]
 80087ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80087d2:	4303      	orrs	r3, r0
 80087d4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80087d6:	6893      	ldr	r3, [r2, #8]
 80087d8:	68a8      	ldr	r0, [r5, #8]
 80087da:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80087de:	4303      	orrs	r3, r0
  if(SystemCoreClock > hclk_frequency)
 80087e0:	428c      	cmp	r4, r1
 80087e2:	6093      	str	r3, [r2, #8]
 80087e4:	d208      	bcs.n	80087f8 <UTILS_EnablePLLAndSwitchSystem+0x98>
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <UTILS_EnablePLLAndSwitchSystem+0xb0>)
 80087e8:	1e62      	subs	r2, r4, #1
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d8c9      	bhi.n	8008782 <UTILS_EnablePLLAndSwitchSystem+0x22>
 80087ee:	4620      	mov	r0, r4
 80087f0:	f7ff ff5a 	bl	80086a8 <LL_SetFlashLatency.part.0>
  if(status == SUCCESS)
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d1c5      	bne.n	8008784 <UTILS_EnablePLLAndSwitchSystem+0x24>
  SystemCoreClock = HCLKFrequency;
 80087f8:	6034      	str	r4, [r6, #0]
}
 80087fa:	2000      	movs	r0, #0
}
 80087fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(SystemCoreClock > hclk_frequency)
 80087fe:	6833      	ldr	r3, [r6, #0]
 8008800:	42a3      	cmp	r3, r4
 8008802:	d9bf      	bls.n	8008784 <UTILS_EnablePLLAndSwitchSystem+0x24>
 8008804:	e7f3      	b.n	80087ee <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8008806:	bf00      	nop
 8008808:	0800e9e0 	.word	0x0800e9e0
 800880c:	200002e4 	.word	0x200002e4
 8008810:	04c4b3ff 	.word	0x04c4b3ff
 8008814:	40021000 	.word	0x40021000

08008818 <LL_PLL_ConfigSystemClock_HSI>:
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8008818:	4b1c      	ldr	r3, [pc, #112]	; (800888c <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	0192      	lsls	r2, r2, #6
 800881e:	d502      	bpl.n	8008826 <LL_PLL_ConfigSystemClock_HSI+0xe>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8008820:	681b      	ldr	r3, [r3, #0]
}
 8008822:	2001      	movs	r0, #1
 8008824:	4770      	bx	lr
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	0112      	lsls	r2, r2, #4
 800882a:	d4fa      	bmi.n	8008822 <LL_PLL_ConfigSystemClock_HSI+0xa>
{
 800882c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800882e:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008832:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008834:	f8d3 e000 	ldr.w	lr, [r3]
 8008838:	4f15      	ldr	r7, [pc, #84]	; (8008890 <LL_PLL_ConfigSystemClock_HSI+0x78>)
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800883a:	0e60      	lsrs	r0, r4, #25
 800883c:	3001      	adds	r0, #1
 800883e:	0042      	lsls	r2, r0, #1
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008840:	ea4f 1c15 	mov.w	ip, r5, lsr #4
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8008844:	f006 007f 	and.w	r0, r6, #127	; 0x7f
 8008848:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800884c:	f10c 0c01 	add.w	ip, ip, #1
 8008850:	fbb7 fcfc 	udiv	ip, r7, ip
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8008854:	fb0c f000 	mul.w	r0, ip, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 8008858:	fbb0 f0f2 	udiv	r0, r0, r2
 800885c:	d106      	bne.n	800886c <LL_PLL_ConfigSystemClock_HSI+0x54>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008864:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	0552      	lsls	r2, r2, #21
 800886a:	d5fc      	bpl.n	8008866 <LL_PLL_ConfigSystemClock_HSI+0x4e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800886c:	4a07      	ldr	r2, [pc, #28]	; (800888c <LL_PLL_ConfigSystemClock_HSI+0x74>)
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <LL_PLL_ConfigSystemClock_HSI+0x7c>)
 8008870:	68d7      	ldr	r7, [r2, #12]
 8008872:	403b      	ands	r3, r7
 8008874:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8008878:	432b      	orrs	r3, r5
 800887a:	4323      	orrs	r3, r4
 800887c:	f043 0302 	orr.w	r3, r3, #2
}
 8008880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008884:	60d3      	str	r3, [r2, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8008886:	f7ff bf6b 	b.w	8008760 <UTILS_EnablePLLAndSwitchSystem>
 800888a:	bf00      	nop
 800888c:	40021000 	.word	0x40021000
 8008890:	00f42400 	.word	0x00f42400
 8008894:	f9ff808c 	.word	0xf9ff808c

08008898 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008898:	6341      	str	r1, [r0, #52]	; 0x34
}
 800889a:	4770      	bx	lr

0800889c <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800889c:	6381      	str	r1, [r0, #56]	; 0x38
}
 800889e:	4770      	bx	lr

080088a0 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80088a0:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80088a2:	4770      	bx	lr

080088a4 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80088a4:	6401      	str	r1, [r0, #64]	; 0x40
}
 80088a6:	4770      	bx	lr

080088a8 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80088a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80088aa:	6581      	str	r1, [r0, #88]	; 0x58
}
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop

080088b0 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 80088b0:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 80088b2:	4770      	bx	lr

080088b4 <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80088b4:	f06f 0302 	mvn.w	r3, #2
 80088b8:	6103      	str	r3, [r0, #16]
}
 80088ba:	4770      	bx	lr

080088bc <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80088bc:	6900      	ldr	r0, [r0, #16]
}
 80088be:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80088c2:	4770      	bx	lr

080088c4 <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80088c4:	f06f 0304 	mvn.w	r3, #4
 80088c8:	6103      	str	r3, [r0, #16]
}
 80088ca:	4770      	bx	lr

080088cc <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80088cc:	6900      	ldr	r0, [r0, #16]
}
 80088ce:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80088d2:	4770      	bx	lr

080088d4 <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80088d4:	f06f 0308 	mvn.w	r3, #8
 80088d8:	6103      	str	r3, [r0, #16]
}
 80088da:	4770      	bx	lr

080088dc <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80088dc:	6900      	ldr	r0, [r0, #16]
}
 80088de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80088e2:	4770      	bx	lr

080088e4 <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80088e4:	f06f 0310 	mvn.w	r3, #16
 80088e8:	6103      	str	r3, [r0, #16]
}
 80088ea:	4770      	bx	lr

080088ec <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80088ec:	6900      	ldr	r0, [r0, #16]
}
 80088ee:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80088f2:	4770      	bx	lr

080088f4 <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 80088f4:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 80088f8:	6103      	str	r3, [r0, #16]
}
 80088fa:	4770      	bx	lr

080088fc <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 80088fc:	6900      	ldr	r0, [r0, #16]
}
 80088fe:	f3c0 4000 	ubfx	r0, r0, #16, #1
 8008902:	4770      	bx	lr

08008904 <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 8008904:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 8008908:	6103      	str	r3, [r0, #16]
}
 800890a:	4770      	bx	lr

0800890c <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800890c:	6943      	ldr	r3, [r0, #20]
 800890e:	f043 0302 	orr.w	r3, r3, #2
 8008912:	6143      	str	r3, [r0, #20]
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <ws2812_strip_update_channels>:
}
 8008918:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8008924:	f8d0 9004 	ldr.w	r9, [r0, #4]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 8008928:	f899 5018 	ldrb.w	r5, [r9, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800892c:	fba2 4305 	umull	r4, r3, r2, r5
 8008930:	1e1e      	subs	r6, r3, #0
                                   size_t num_pixels) {
 8008932:	b08f      	sub	sp, #60	; 0x3c
 8008934:	bf18      	it	ne
 8008936:	2601      	movne	r6, #1
 8008938:	9600      	str	r6, [sp, #0]
    return !overflow && (nbytes <= cfg->px_buf_size);
 800893a:	b9c3      	cbnz	r3, 800896e <ws2812_strip_update_rgb+0x4e>
 800893c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008940:	429c      	cmp	r4, r3
 8008942:	d814      	bhi.n	800896e <ws2812_strip_update_rgb+0x4e>
    uint8_t *px_buf = cfg->px_buf;
 8008944:	f8d9 8010 	ldr.w	r8, [r9, #16]
    for (i = 0; i < num_pixels; i++) {
 8008948:	46cb      	mov	fp, r9
 800894a:	b352      	cbz	r2, 80089a2 <ws2812_strip_update_rgb+0x82>
 800894c:	9f00      	ldr	r7, [sp, #0]
 800894e:	463e      	mov	r6, r7
        for (j = 0; j < cfg->num_colors; j++) {
 8008950:	b1f5      	cbz	r5, 8008990 <ws2812_strip_update_rgb+0x70>
 8008952:	2400      	movs	r4, #0
 8008954:	4623      	mov	r3, r4
            switch (cfg->color_mapping[j]) {
 8008956:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800895a:	5ceb      	ldrb	r3, [r5, r3]
 800895c:	2b03      	cmp	r3, #3
 800895e:	f200 8102 	bhi.w	8008b66 <ws2812_strip_update_rgb+0x246>
 8008962:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008966:	00ee      	.short	0x00ee
 8008968:	00e600ea 	.word	0x00e600ea
 800896c:	000a      	.short	0x000a
        return -ENOMEM;
 800896e:	f06f 040b 	mvn.w	r4, #11
}
 8008972:	4620      	mov	r0, r4
 8008974:	b00f      	add	sp, #60	; 0x3c
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    *px_buf = pixels->b;
 800897a:	78cb      	ldrb	r3, [r1, #3]
 800897c:	f888 3000 	strb.w	r3, [r8]
        for (j = 0; j < cfg->num_colors; j++) {
 8008980:	f899 5018 	ldrb.w	r5, [r9, #24]
 8008984:	3401      	adds	r4, #1
 8008986:	b2e3      	uxtb	r3, r4
 8008988:	429d      	cmp	r5, r3
            px_buf++;
 800898a:	f108 0801 	add.w	r8, r8, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800898e:	d8e2      	bhi.n	8008956 <ws2812_strip_update_rgb+0x36>
    for (i = 0; i < num_pixels; i++) {
 8008990:	3601      	adds	r6, #1
 8008992:	42b2      	cmp	r2, r6
        pixels++;
 8008994:	f101 0104 	add.w	r1, r1, #4
    for (i = 0; i < num_pixels; i++) {
 8008998:	d1da      	bne.n	8008950 <ws2812_strip_update_rgb+0x30>
 800899a:	f8d0 b004 	ldr.w	fp, [r0, #4]
    uint8_t *buf = cfg->px_buf;
 800899e:	f8db 8010 	ldr.w	r8, [fp, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 80089a2:	f8db 2000 	ldr.w	r2, [fp]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 80089a6:	4971      	ldr	r1, [pc, #452]	; (8008b6c <ws2812_strip_update_rgb+0x24c>)
    TIM_TypeDef *tim = pwm_cfg->timer;
 80089a8:	6852      	ldr	r2, [r2, #4]
 80089aa:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80089ae:	6814      	ldr	r4, [r2, #0]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 80089b0:	f8db 2004 	ldr.w	r2, [fp, #4]
 80089b4:	3a01      	subs	r2, #1
    LL_TIM_OC_StructInit(&oc_init);
 80089b6:	a806      	add	r0, sp, #24
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 80089b8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80089bc:	9303      	str	r3, [sp, #12]
 80089be:	461d      	mov	r5, r3
    LL_TIM_OC_StructInit(&oc_init);
 80089c0:	f7ff fcf6 	bl	80083b0 <LL_TIM_OC_StructInit>
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 80089c4:	f89b 100c 	ldrb.w	r1, [fp, #12]
        return LL_TIM_OCPOLARITY_HIGH;
 80089c8:	f011 0f01 	tst.w	r1, #1
 80089cc:	bf14      	ite	ne
 80089ce:	2102      	movne	r1, #2
 80089d0:	2100      	moveq	r1, #0
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 80089d2:	910a      	str	r1, [sp, #40]	; 0x28
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80089d4:	2360      	movs	r3, #96	; 0x60
 80089d6:	2101      	movs	r1, #1
 80089d8:	e9cd 3106 	strd	r3, r1, [sp, #24]
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 80089dc:	aa06      	add	r2, sp, #24
 80089de:	4629      	mov	r1, r5
 80089e0:	4620      	mov	r0, r4
 80089e2:	f7ff fcef 	bl	80083c4 <LL_TIM_OC_Init>
 80089e6:	4602      	mov	r2, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f040 80b9 	bne.w	8008b60 <ws2812_strip_update_rgb+0x240>
	__asm__ volatile(
 80089ee:	f04f 0110 	mov.w	r1, #16
 80089f2:	f3ef 8011 	mrs	r0, BASEPRI
 80089f6:	f381 8812 	msr	BASEPRI_MAX, r1
 80089fa:	f3bf 8f6f 	isb	sy
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80089fe:	6821      	ldr	r1, [r4, #0]
 8008a00:	9004      	str	r0, [sp, #16]
 8008a02:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008a06:	2d01      	cmp	r5, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8008a08:	6021      	str	r1, [r4, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8008a0a:	f000 809d 	beq.w	8008b48 <ws2812_strip_update_rgb+0x228>
 8008a0e:	2d04      	cmp	r5, #4
 8008a10:	f000 809a 	beq.w	8008b48 <ws2812_strip_update_rgb+0x228>
 8008a14:	2d10      	cmp	r5, #16
 8008a16:	f000 8099 	beq.w	8008b4c <ws2812_strip_update_rgb+0x22c>
 8008a1a:	2d40      	cmp	r5, #64	; 0x40
 8008a1c:	f000 8094 	beq.w	8008b48 <ws2812_strip_update_rgb+0x228>
 8008a20:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008a24:	f000 8095 	beq.w	8008b52 <ws2812_strip_update_rgb+0x232>
 8008a28:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008a2c:	f000 8091 	beq.w	8008b52 <ws2812_strip_update_rgb+0x232>
 8008a30:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008a34:	f000 8090 	beq.w	8008b58 <ws2812_strip_update_rgb+0x238>
 8008a38:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2108      	moveq	r1, #8
 8008a40:	f44f 6100 	movne.w	r1, #2048	; 0x800
 8008a44:	223c      	movs	r2, #60	; 0x3c
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008a46:	f104 0018 	add.w	r0, r4, #24
    generate_timer_event[cfg->pwm.channel](tim);
 8008a4a:	4d49      	ldr	r5, [pc, #292]	; (8008b70 <ws2812_strip_update_rgb+0x250>)
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008a4c:	5886      	ldr	r6, [r0, r2]
 8008a4e:	4331      	orrs	r1, r6
 8008a50:	5081      	str	r1, [r0, r2]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 8008a52:	f8da 2000 	ldr.w	r2, [sl]
 8008a56:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8008a58:	62e2      	str	r2, [r4, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008a5a:	6962      	ldr	r2, [r4, #20]
 8008a5c:	f042 0201 	orr.w	r2, r2, #1
 8008a60:	6162      	str	r2, [r4, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 8008a62:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008a66:	4620      	mov	r0, r4
 8008a68:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008a6c:	4d41      	ldr	r5, [pc, #260]	; (8008b74 <ws2812_strip_update_rgb+0x254>)
 8008a6e:	4790      	blx	r2
    clear_timer_flag[cfg->pwm.channel](tim);
 8008a70:	4b41      	ldr	r3, [pc, #260]	; (8008b78 <ws2812_strip_update_rgb+0x258>)
 8008a72:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008a76:	4620      	mov	r0, r4
 8008a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a7c:	4790      	blx	r2
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 8008a7e:	f8db 2014 	ldr.w	r2, [fp, #20]
 8008a82:	4b3e      	ldr	r3, [pc, #248]	; (8008b7c <ws2812_strip_update_rgb+0x25c>)
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	b39a      	cbz	r2, 8008af0 <ws2812_strip_update_rgb+0x1d0>
 8008a88:	f8cd 8004 	str.w	r8, [sp, #4]
 8008a8c:	f8dd 8000 	ldr.w	r8, [sp]
 8008a90:	f8cd 9014 	str.w	r9, [sp, #20]
 8008a94:	4699      	mov	r9, r3
        uint8_t tmp = *buf++;
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	2708      	movs	r7, #8
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 8008aa0:	f8db 3004 	ldr.w	r3, [fp, #4]
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 8008aa4:	e9da 1201 	ldrd	r1, r2, [sl, #4]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 8008aa8:	3b01      	subs	r3, #1
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 8008aaa:	f016 0f80 	tst.w	r6, #128	; 0x80
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 8008aae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ab2:	bf18      	it	ne
 8008ab4:	4611      	movne	r1, r2
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 8008aba:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008ac4:	4798      	blx	r3
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d0f7      	beq.n	8008aba <ws2812_strip_update_rgb+0x19a>
            clear_timer_flag[cfg->pwm.channel](tim);
 8008aca:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008ace:	4a2a      	ldr	r2, [pc, #168]	; (8008b78 <ws2812_strip_update_rgb+0x258>)
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad6:	4798      	blx	r3
            tmp <<= 1;
 8008ad8:	0076      	lsls	r6, r6, #1
        for(int j = 0; j < 8; j++) {
 8008ada:	3f01      	subs	r7, #1
            tmp <<= 1;
 8008adc:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 8008ade:	d1df      	bne.n	8008aa0 <ws2812_strip_update_rgb+0x180>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 8008ae0:	f8db 2014 	ldr.w	r2, [fp, #20]
 8008ae4:	f108 0801 	add.w	r8, r8, #1
 8008ae8:	4590      	cmp	r8, r2
 8008aea:	d3d4      	bcc.n	8008a96 <ws2812_strip_update_rgb+0x176>
 8008aec:	f8dd 9014 	ldr.w	r9, [sp, #20]
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 8008af0:	f8db 2004 	ldr.w	r2, [fp, #4]
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	3a01      	subs	r2, #1
 8008af8:	2100      	movs	r1, #0
 8008afa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008afe:	4620      	mov	r0, r4
 8008b00:	4790      	blx	r2
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 8008b02:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8008b0c:	4798      	blx	r3
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0f7      	beq.n	8008b02 <ws2812_strip_update_rgb+0x1e2>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b12:	6a23      	ldr	r3, [r4, #32]
 8008b14:	9a03      	ldr	r2, [sp, #12]
 8008b16:	ea23 0302 	bic.w	r3, r3, r2
 8008b1a:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
    return 0;
 8008b26:	2400      	movs	r4, #0
    k_usleep(delay);
 8008b28:	f8b9 0026 	ldrh.w	r0, [r9, #38]	; 0x26
	return z_impl_k_usleep(us);
 8008b2c:	f002 fb68 	bl	800b200 <z_impl_k_usleep>
    return rc;
 8008b30:	e71f      	b.n	8008972 <ws2812_strip_update_rgb+0x52>
                    *px_buf = pixels->g;
 8008b32:	788b      	ldrb	r3, [r1, #2]
 8008b34:	f888 3000 	strb.w	r3, [r8]
                    break;
 8008b38:	e722      	b.n	8008980 <ws2812_strip_update_rgb+0x60>
                    *px_buf = pixels->r;
 8008b3a:	784b      	ldrb	r3, [r1, #1]
 8008b3c:	f888 3000 	strb.w	r3, [r8]
                    break;
 8008b40:	e71e      	b.n	8008980 <ws2812_strip_update_rgb+0x60>
                    *px_buf = 0;
 8008b42:	f888 7000 	strb.w	r7, [r8]
                    break;
 8008b46:	e71b      	b.n	8008980 <ws2812_strip_update_rgb+0x60>
 8008b48:	2108      	movs	r1, #8
 8008b4a:	e77c      	b.n	8008a46 <ws2812_strip_update_rgb+0x126>
 8008b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b50:	e779      	b.n	8008a46 <ws2812_strip_update_rgb+0x126>
 8008b52:	2108      	movs	r1, #8
 8008b54:	2204      	movs	r2, #4
 8008b56:	e776      	b.n	8008a46 <ws2812_strip_update_rgb+0x126>
 8008b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	e772      	b.n	8008a46 <ws2812_strip_update_rgb+0x126>
        return -EIO;
 8008b60:	f06f 0404 	mvn.w	r4, #4
 8008b64:	e7e0      	b.n	8008b28 <ws2812_strip_update_rgb+0x208>
            switch (cfg->color_mapping[j]) {
 8008b66:	f06f 0415 	mvn.w	r4, #21
 8008b6a:	e702      	b.n	8008972 <ws2812_strip_update_rgb+0x52>
 8008b6c:	0800ea00 	.word	0x0800ea00
 8008b70:	0800ea30 	.word	0x0800ea30
 8008b74:	0800ea48 	.word	0x0800ea48
 8008b78:	0800ea18 	.word	0x0800ea18
 8008b7c:	0800ea60 	.word	0x0800ea60

08008b80 <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
    if (!hsv->v)
 8008b80:	78c3      	ldrb	r3, [r0, #3]
 8008b82:	b91b      	cbnz	r3, 8008b8c <led_hsv2rgb+0xc>
    {
        rgb->r = rgb->g = rgb->b = 0;
 8008b84:	70cb      	strb	r3, [r1, #3]
 8008b86:	708b      	strb	r3, [r1, #2]
 8008b88:	704b      	strb	r3, [r1, #1]
 8008b8a:	4770      	bx	lr
{
 8008b8c:	b430      	push	{r4, r5}
    }
    else if (!hsv->s)
 8008b8e:	7884      	ldrb	r4, [r0, #2]
 8008b90:	b924      	cbnz	r4, 8008b9c <led_hsv2rgb+0x1c>
    {
        rgb->r = rgb->g = rgb->b = hsv->v;
 8008b92:	70cb      	strb	r3, [r1, #3]
 8008b94:	708b      	strb	r3, [r1, #2]
 8008b96:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 8008b98:	bc30      	pop	{r4, r5}
 8008b9a:	4770      	bx	lr
        int hue = hsv->h % 360;
 8008b9c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008ba0:	482a      	ldr	r0, [pc, #168]	; (8008c4c <led_hsv2rgb+0xcc>)
 8008ba2:	fb80 5002 	smull	r5, r0, r0, r2
 8008ba6:	4410      	add	r0, r2
 8008ba8:	17d5      	asrs	r5, r2, #31
 8008baa:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 8008bae:	f44f 75b4 	mov.w	r5, #360	; 0x168
 8008bb2:	fb05 2210 	mls	r2, r5, r0, r2
 8008bb6:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	bfb8      	it	lt
 8008bbc:	1952      	addlt	r2, r2, r5
        int sector = hue / 60;
 8008bbe:	4824      	ldr	r0, [pc, #144]	; (8008c50 <led_hsv2rgb+0xd0>)
 8008bc0:	bfb8      	it	lt
 8008bc2:	b212      	sxthlt	r2, r2
 8008bc4:	fba0 5002 	umull	r5, r0, r0, r2
 8008bc8:	0940      	lsrs	r0, r0, #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 8008bca:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
 8008bce:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
        int low = (255 - hsv->s) * high / 255;
 8008bd2:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 8008bd6:	07c5      	lsls	r5, r0, #31
        switch (sector)
 8008bd8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        int low = (255 - hsv->s) * high / 255;
 8008bdc:	481d      	ldr	r0, [pc, #116]	; (8008c54 <led_hsv2rgb+0xd4>)
        int middle = low + (high - low) * angle / 60;
 8008bde:	4d1c      	ldr	r5, [pc, #112]	; (8008c50 <led_hsv2rgb+0xd0>)
        int low = (255 - hsv->s) * high / 255;
 8008be0:	fb03 f404 	mul.w	r4, r3, r4
 8008be4:	fba0 0404 	umull	r0, r4, r0, r4
        int middle = low + (high - low) * angle / 60;
 8008be8:	eba3 10d4 	sub.w	r0, r3, r4, lsr #7
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 8008bec:	bf48      	it	mi
 8008bee:	f1c2 023c 	rsbmi	r2, r2, #60	; 0x3c
        int middle = low + (high - low) * angle / 60;
 8008bf2:	fb00 f202 	mul.w	r2, r0, r2
 8008bf6:	fb85 5002 	smull	r5, r0, r5, r2
 8008bfa:	4410      	add	r0, r2
 8008bfc:	17d2      	asrs	r2, r2, #31
 8008bfe:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8008c02:	eb02 12d4 	add.w	r2, r2, r4, lsr #7
                rgb->g = middle;
 8008c06:	b2d2      	uxtb	r2, r2
                rgb->b = low;
 8008c08:	f3c4 14c7 	ubfx	r4, r4, #7, #8
        switch (sector)
 8008c0c:	f1bc 0f04 	cmp.w	ip, #4
 8008c10:	d818      	bhi.n	8008c44 <led_hsv2rgb+0xc4>
 8008c12:	e8df f00c 	tbb	[pc, ip]
 8008c16:	0b07      	.short	0x0b07
 8008c18:	130f      	.short	0x130f
 8008c1a:	03          	.byte	0x03
 8008c1b:	00          	.byte	0x00
                rgb->r = high;
 8008c1c:	704b      	strb	r3, [r1, #1]
                rgb->g = low;
 8008c1e:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 8008c20:	70ca      	strb	r2, [r1, #3]
}
 8008c22:	e7b9      	b.n	8008b98 <led_hsv2rgb+0x18>
                rgb->r = middle;
 8008c24:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 8008c26:	708b      	strb	r3, [r1, #2]
                rgb->b = low;
 8008c28:	70cc      	strb	r4, [r1, #3]
                break;
 8008c2a:	e7b5      	b.n	8008b98 <led_hsv2rgb+0x18>
                rgb->r = low;
 8008c2c:	704c      	strb	r4, [r1, #1]
                rgb->g = high;
 8008c2e:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 8008c30:	70ca      	strb	r2, [r1, #3]
                break;
 8008c32:	e7b1      	b.n	8008b98 <led_hsv2rgb+0x18>
                rgb->r = low;
 8008c34:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 8008c36:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 8008c38:	70cb      	strb	r3, [r1, #3]
                break;
 8008c3a:	e7ad      	b.n	8008b98 <led_hsv2rgb+0x18>
                rgb->r = middle;
 8008c3c:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 8008c3e:	708c      	strb	r4, [r1, #2]
                rgb->b = high;
 8008c40:	70cb      	strb	r3, [r1, #3]
                break;
 8008c42:	e7a9      	b.n	8008b98 <led_hsv2rgb+0x18>
                rgb->r = high;
 8008c44:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 8008c46:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 8008c48:	70cc      	strb	r4, [r1, #3]
                break;
 8008c4a:	e7a5      	b.n	8008b98 <led_hsv2rgb+0x18>
 8008c4c:	b60b60b7 	.word	0xb60b60b7
 8008c50:	88888889 	.word	0x88888889
 8008c54:	80808081 	.word	0x80808081

08008c58 <lora_receive_error_timeout>:
    k_msgq_put(&msgq_rx_msg, data, K_NO_WAIT);
    k_msgq_put(&msgq_rssi, &rssi, K_NO_WAIT);
    k_spin_unlock(&spin, key);
}

void lora_receive_error_timeout(const struct device *dev) {
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4604      	mov	r4, r0
	__asm__ volatile(
 8008c5c:	f04f 0310 	mov.w	r3, #16
 8008c60:	f3ef 8211 	mrs	r2, BASEPRI
 8008c64:	f383 8812 	msr	BASEPRI_MAX, r3
 8008c68:	f3bf 8f6f 	isb	sy
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    key = k_spin_lock(&spin);
 8008c6c:	4d09      	ldr	r5, [pc, #36]	; (8008c94 <lora_receive_error_timeout+0x3c>)
	return api->recv_async(dev, cb, error_timeout_cb);
 8008c6e:	6883      	ldr	r3, [r0, #8]
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	4611      	mov	r1, r2
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	4798      	blx	r3
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	4a06      	ldr	r2, [pc, #24]	; (8008c98 <lora_receive_error_timeout+0x40>)
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	4906      	ldr	r1, [pc, #24]	; (8008c9c <lora_receive_error_timeout+0x44>)
 8008c82:	4620      	mov	r0, r4
 8008c84:	4798      	blx	r3
	__asm__ volatile(
 8008c86:	682b      	ldr	r3, [r5, #0]
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
    /* Restart receive */
    lora_recv_async(dev, nullptr, nullptr);
    lora_recv_async(dev, lora_receive_cb, lora_receive_error_timeout);

    k_spin_unlock(&spin, key);
}
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	2000136c 	.word	0x2000136c
 8008c98:	08008c59 	.word	0x08008c59
 8008c9c:	08008cc1 	.word	0x08008cc1

08008ca0 <dwork_enable_ind_handler>:
    k_poll_signal_raise(&signal_indicate, STANDARD_MODE_INDICATION);
}

static inline void disable_ind()
{
    event_indicate.signal->signaled = 0;
 8008ca0:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <dwork_enable_ind_handler+0x18>)
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6091      	str	r1, [r2, #8]
    event_indicate.state = K_POLL_STATE_NOT_READY;
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	f361 3252 	bfi	r2, r1, #13, #6
 8008cae:	60da      	str	r2, [r3, #12]
	z_impl_k_msgq_purge(msgq);
 8008cb0:	4802      	ldr	r0, [pc, #8]	; (8008cbc <dwork_enable_ind_handler+0x1c>)
 8008cb2:	f001 bbef 	b.w	800a494 <z_impl_k_msgq_purge>
 8008cb6:	bf00      	nop
 8008cb8:	200013e8 	.word	0x200013e8
 8008cbc:	200006b0 	.word	0x200006b0

08008cc0 <lora_receive_cb>:
void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr) {
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	4615      	mov	r5, r2
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	f8ad 300e 	strh.w	r3, [sp, #14]
    volatile uint16_t len = size;
 8008ccc:	f8ad 2016 	strh.w	r2, [sp, #22]
	__asm__ volatile(
 8008cd0:	f04f 0310 	mov.w	r3, #16
 8008cd4:	f3ef 8211 	mrs	r2, BASEPRI
 8008cd8:	f383 8812 	msr	BASEPRI_MAX, r3
 8008cdc:	f3bf 8f6f 	isb	sy
    if ((*data) == 13) {
 8008ce0:	780b      	ldrb	r3, [r1, #0]
    key = k_spin_lock(&spin);
 8008ce2:	4e22      	ldr	r6, [pc, #136]	; (8008d6c <lora_receive_cb+0xac>)
    if ((*data) == 13) {
 8008ce4:	2b0d      	cmp	r3, #13
    key = k_spin_lock(&spin);
 8008ce6:	6032      	str	r2, [r6, #0]
    if ((*data) == 13) {
 8008ce8:	d02c      	beq.n	8008d44 <lora_receive_cb+0x84>
    if ((size != MESSAGE_LEN_IN_BYTES) || is_empty_msg(data, size)) {
 8008cea:	2d02      	cmp	r5, #2
 8008cec:	d103      	bne.n	8008cf6 <lora_receive_cb+0x36>
        if (!(*(buf + i))) {
 8008cee:	7823      	ldrb	r3, [r4, #0]
 8008cf0:	b9a3      	cbnz	r3, 8008d1c <lora_receive_cb+0x5c>
 8008cf2:	7863      	ldrb	r3, [r4, #1]
 8008cf4:	b993      	cbnz	r3, 8008d1c <lora_receive_cb+0x5c>
 8008cf6:	f3bf 8f5b 	dmb	ish
 8008cfa:	4b1d      	ldr	r3, [pc, #116]	; (8008d70 <lora_receive_cb+0xb0>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	e853 1f00 	ldrex	r1, [r3]
 8008d02:	e843 2000 	strex	r0, r2, [r3]
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1f9      	bne.n	8008cfe <lora_receive_cb+0x3e>
 8008d0a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
 8008d0e:	6833      	ldr	r3, [r6, #0]
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
}
 8008d18:	b006      	add	sp, #24
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_msgq_put(msgq, data, timeout);
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4621      	mov	r1, r4
 8008d22:	4814      	ldr	r0, [pc, #80]	; (8008d74 <lora_receive_cb+0xb4>)
 8008d24:	f001 fafa 	bl	800a31c <z_impl_k_msgq_put>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f10d 010e 	add.w	r1, sp, #14
 8008d30:	4811      	ldr	r0, [pc, #68]	; (8008d78 <lora_receive_cb+0xb8>)
 8008d32:	f001 faf3 	bl	800a31c <z_impl_k_msgq_put>
 8008d36:	6833      	ldr	r3, [r6, #0]
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	b006      	add	sp, #24
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
	z_impl_k_timer_stop(timer);
 8008d44:	480d      	ldr	r0, [pc, #52]	; (8008d7c <lora_receive_cb+0xbc>)
 8008d46:	f002 fd85 	bl	800b854 <z_impl_k_timer_stop>
	return z_impl_k_sleep(timeout);
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008d50:	f002 fa3e 	bl	800b1d0 <z_impl_k_sleep>
        k_timer_start(&periodic_timer, K_MSEC(DURATION_TIME_MSEC), K_MSEC(PERIOD_TIME_MSEC));
 8008d54:	f247 7288 	movw	r2, #30600	; 0x7788
 8008d58:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 8008d5a:	4808      	ldr	r0, [pc, #32]	; (8008d7c <lora_receive_cb+0xbc>)
 8008d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8008d60:	2200      	movs	r2, #0
 8008d62:	2300      	movs	r3, #0
 8008d64:	f002 fd22 	bl	800b7ac <z_impl_k_timer_start>
 8008d68:	e7bf      	b.n	8008cea <lora_receive_cb+0x2a>
 8008d6a:	bf00      	nop
 8008d6c:	20001360 	.word	0x20001360
 8008d70:	20001384 	.word	0x20001384
 8008d74:	20000718 	.word	0x20000718
 8008d78:	200006e4 	.word	0x200006e4
 8008d7c:	20000978 	.word	0x20000978

08008d80 <work_buzzer_handler>:

void work_buzzer_handler(struct k_work *item) {
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	f8df 9338 	ldr.w	r9, [pc, #824]	; 80090c0 <work_buzzer_handler+0x340>
 8008d88:	b08f      	sub	sp, #60	; 0x3c
 8008d8a:	e003      	b.n	8008d94 <work_buzzer_handler+0x14>
	return z_impl_k_sleep(timeout);
 8008d8c:	2032      	movs	r0, #50	; 0x32
 8008d8e:	2100      	movs	r1, #0
 8008d90:	f002 fa1e 	bl	800b1d0 <z_impl_k_sleep>
	return z_impl_k_poll(events, num_events, timeout);
 8008d94:	2200      	movs	r2, #0
 8008d96:	2300      	movs	r3, #0
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f002 ffac 	bl	800bcf8 <z_impl_k_poll>
    uint8_t i = 0;

    /* Wait while signal will be raised */
    while (k_poll(&event_buzzer, 1, K_NO_WAIT)) {
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1f3      	bne.n	8008d8c <work_buzzer_handler+0xc>
        k_sleep(K_MSEC(5));
    }

    switch (event_buzzer.signal->result) {
 8008da4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008da8:	68dd      	ldr	r5, [r3, #12]
        case BUZZER_MODE_CONTINUOUS:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8008daa:	4bc2      	ldr	r3, [pc, #776]	; (80090b4 <work_buzzer_handler+0x334>)
    switch (event_buzzer.signal->result) {
 8008dac:	2d02      	cmp	r5, #2
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8008dae:	f8d3 8000 	ldr.w	r8, [r3]
    switch (event_buzzer.signal->result) {
 8008db2:	f000 8187 	beq.w	80090c4 <work_buzzer_handler+0x344>
 8008db6:	2d03      	cmp	r5, #3
 8008db8:	d04a      	beq.n	8008e50 <work_buzzer_handler+0xd0>
 8008dba:	2d01      	cmp	r5, #1
 8008dbc:	f000 8106 	beq.w	8008fcc <work_buzzer_handler+0x24c>
 8008dc0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC / 2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8008dc4:	4bbb      	ldr	r3, [pc, #748]	; (80090b4 <work_buzzer_handler+0x334>)
 8008dc6:	681d      	ldr	r5, [r3, #0]
 8008dc8:	68ab      	ldr	r3, [r5, #8]
 8008dca:	465a      	mov	r2, fp
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2102      	movs	r1, #2
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	bb70      	cbnz	r0, 8008e36 <work_buzzer_handler+0xb6>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008dd8:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 8008ddc:	00a2      	lsls	r2, r4, #2
 8008dde:	008b      	lsls	r3, r1, #2
 8008de0:	1912      	adds	r2, r2, r4
 8008de2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008de6:	eb41 0303 	adc.w	r3, r1, r3
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008df0:	00d2      	lsls	r2, r2, #3
 8008df2:	1b12      	subs	r2, r2, r4
 8008df4:	eb63 0301 	sbc.w	r3, r3, r1
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 8008dfe:	0112      	lsls	r2, r2, #4
 8008e00:	1912      	adds	r2, r2, r4
 8008e02:	eb41 0303 	adc.w	r3, r1, r3
 8008e06:	019f      	lsls	r7, r3, #6
 8008e08:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 8008e0c:	0194      	lsls	r4, r2, #6
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4aa9      	ldr	r2, [pc, #676]	; (80090b8 <work_buzzer_handler+0x338>)
 8008e12:	4620      	mov	r0, r4
 8008e14:	4639      	mov	r1, r7
 8008e16:	f7f7 fde1 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008e1a:	4ba8      	ldr	r3, [pc, #672]	; (80090bc <work_buzzer_handler+0x33c>)
 8008e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008e20:	42a1      	cmp	r1, r4
 8008e22:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008e24:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008e26:	d306      	bcc.n	8008e36 <work_buzzer_handler+0xb6>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8008e28:	68ab      	ldr	r3, [r5, #8]
 8008e2a:	9600      	str	r6, [sp, #0]
 8008e2c:	681c      	ldr	r4, [r3, #0]
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4633      	mov	r3, r6
 8008e32:	2102      	movs	r1, #2
 8008e34:	47a0      	blx	r4
                             0, PWM_FLAGS);
            break;
    }
    event_buzzer.signal->signaled = 0;
 8008e36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	609a      	str	r2, [r3, #8]
    event_buzzer.state = K_POLL_STATE_NOT_READY;
 8008e3e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008e42:	f362 3352 	bfi	r3, r2, #13, #6
 8008e46:	f8c9 300c 	str.w	r3, [r9, #12]
}
 8008e4a:	b00f      	add	sp, #60	; 0x3c
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (event_buzzer.signal->result) {
 8008e50:	2302      	movs	r3, #2
 8008e52:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008e56:	9303      	str	r3, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008e58:	46da      	mov	sl, fp
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8008e5a:	4b96      	ldr	r3, [pc, #600]	; (80090b4 <work_buzzer_handler+0x334>)
 8008e5c:	f8d3 8000 	ldr.w	r8, [r3]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8008e60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e64:	4652      	mov	r2, sl
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	2102      	movs	r1, #2
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8008e6e:	9004      	str	r0, [sp, #16]
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d161      	bne.n	8008f38 <work_buzzer_handler+0x1b8>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008e74:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8008e78:	00aa      	lsls	r2, r5, #2
 8008e7a:	00b3      	lsls	r3, r6, #2
 8008e7c:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 8008e80:	1953      	adds	r3, r2, r5
 8008e82:	eb46 0401 	adc.w	r4, r6, r1
 8008e86:	00df      	lsls	r7, r3, #3
 8008e88:	00e4      	lsls	r4, r4, #3
 8008e8a:	ebb7 0b05 	subs.w	fp, r7, r5
 8008e8e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8008e92:	ea4f 1c0b 	mov.w	ip, fp, lsl #4
 8008e96:	eb64 0406 	sbc.w	r4, r4, r6
 8008e9a:	4660      	mov	r0, ip
 8008e9c:	0124      	lsls	r4, r4, #4
 8008e9e:	9709      	str	r7, [sp, #36]	; 0x24
 8008ea0:	ea44 741b 	orr.w	r4, r4, fp, lsr #28
 8008ea4:	1947      	adds	r7, r0, r5
 8008ea6:	eb46 0404 	adc.w	r4, r6, r4
 8008eaa:	01a4      	lsls	r4, r4, #6
 8008eac:	9206      	str	r2, [sp, #24]
 8008eae:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 8008eb2:	01ba      	lsls	r2, r7, #6
 8008eb4:	9107      	str	r1, [sp, #28]
 8008eb6:	9308      	str	r3, [sp, #32]
 8008eb8:	9205      	str	r2, [sp, #20]
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4a7e      	ldr	r2, [pc, #504]	; (80090b8 <work_buzzer_handler+0x338>)
 8008ec0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f7f7 fd89 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008eca:	9a05      	ldr	r2, [sp, #20]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008ecc:	900b      	str	r0, [sp, #44]	; 0x2c
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008ece:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008ed2:	4594      	cmp	ip, r2
 8008ed4:	4a79      	ldr	r2, [pc, #484]	; (80090bc <work_buzzer_handler+0x33c>)
 8008ed6:	eb72 0e04 	sbcs.w	lr, r2, r4
 8008eda:	d32d      	bcc.n	8008f38 <work_buzzer_handler+0x1b8>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8008edc:	9c06      	ldr	r4, [sp, #24]
 8008ede:	9908      	ldr	r1, [sp, #32]
 8008ee0:	1963      	adds	r3, r4, r5
 8008ee2:	9c07      	ldr	r4, [sp, #28]
 8008ee4:	eb46 0304 	adc.w	r3, r6, r4
 8008ee8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008eea:	00db      	lsls	r3, r3, #3
 8008eec:	1b62      	subs	r2, r4, r5
 8008eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ef2:	eb63 0306 	sbc.w	r3, r3, r6
 8008ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ef8:	4a6f      	ldr	r2, [pc, #444]	; (80090b8 <work_buzzer_handler+0x338>)
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	194d      	adds	r5, r1, r5
 8008efe:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
 8008f02:	eb46 0603 	adc.w	r6, r6, r3
 8008f06:	0176      	lsls	r6, r6, #5
 8008f08:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 8008f0c:	017f      	lsls	r7, r7, #5
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4638      	mov	r0, r7
 8008f12:	4631      	mov	r1, r6
 8008f14:	f7f7 fd62 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8008f18:	4968      	ldr	r1, [pc, #416]	; (80090bc <work_buzzer_handler+0x33c>)
 8008f1a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008f1e:	45bc      	cmp	ip, r7
 8008f20:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8008f22:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8008f24:	d308      	bcc.n	8008f38 <work_buzzer_handler+0x1b8>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8008f26:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8008f2a:	9804      	ldr	r0, [sp, #16]
 8008f2c:	9000      	str	r0, [sp, #0]
 8008f2e:	680c      	ldr	r4, [r1, #0]
 8008f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f32:	4640      	mov	r0, r8
 8008f34:	2102      	movs	r1, #2
 8008f36:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 8008f38:	2100      	movs	r1, #0
 8008f3a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8008f3e:	f002 f947 	bl	800b1d0 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8008f42:	4b5c      	ldr	r3, [pc, #368]	; (80090b4 <work_buzzer_handler+0x334>)
 8008f44:	681e      	ldr	r6, [r3, #0]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8008f46:	68b3      	ldr	r3, [r6, #8]
 8008f48:	4652      	mov	r2, sl
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	4630      	mov	r0, r6
 8008f50:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8008f52:	4605      	mov	r5, r0
 8008f54:	bb70      	cbnz	r0, 8008fb4 <work_buzzer_handler+0x234>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008f56:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 8008f5a:	00a2      	lsls	r2, r4, #2
 8008f5c:	008b      	lsls	r3, r1, #2
 8008f5e:	1912      	adds	r2, r2, r4
 8008f60:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008f64:	eb41 0303 	adc.w	r3, r1, r3
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008f6e:	00d2      	lsls	r2, r2, #3
 8008f70:	1b12      	subs	r2, r2, r4
 8008f72:	eb63 0301 	sbc.w	r3, r3, r1
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 8008f7c:	0112      	lsls	r2, r2, #4
 8008f7e:	1912      	adds	r2, r2, r4
 8008f80:	eb41 0303 	adc.w	r3, r1, r3
 8008f84:	019f      	lsls	r7, r3, #6
 8008f86:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 8008f8a:	0194      	lsls	r4, r2, #6
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4a4a      	ldr	r2, [pc, #296]	; (80090b8 <work_buzzer_handler+0x338>)
 8008f90:	4620      	mov	r0, r4
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 fd22 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	4b47      	ldr	r3, [pc, #284]	; (80090bc <work_buzzer_handler+0x33c>)
 8008fa0:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008fa2:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8008fa4:	d306      	bcc.n	8008fb4 <work_buzzer_handler+0x234>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8008fa6:	68b3      	ldr	r3, [r6, #8]
 8008fa8:	9500      	str	r5, [sp, #0]
 8008faa:	681c      	ldr	r4, [r3, #0]
 8008fac:	4630      	mov	r0, r6
 8008fae:	462b      	mov	r3, r5
 8008fb0:	2102      	movs	r1, #2
 8008fb2:	47a0      	blx	r4
 8008fb4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f002 f909 	bl	800b1d0 <z_impl_k_sleep>
            while (i < 2) {
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	f43f af38 	beq.w	8008e36 <work_buzzer_handler+0xb6>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	e746      	b.n	8008e5a <work_buzzer_handler+0xda>
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8008fcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fd0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	465a      	mov	r2, fp
 8008fd8:	2102      	movs	r1, #2
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8008fde:	9004      	str	r0, [sp, #16]
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d161      	bne.n	80090a8 <work_buzzer_handler+0x328>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8008fe4:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8008fe8:	00aa      	lsls	r2, r5, #2
 8008fea:	00b3      	lsls	r3, r6, #2
 8008fec:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 8008ff0:	1953      	adds	r3, r2, r5
 8008ff2:	eb46 0401 	adc.w	r4, r6, r1
 8008ff6:	00df      	lsls	r7, r3, #3
 8008ff8:	00e4      	lsls	r4, r4, #3
 8008ffa:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8008ffe:	9708      	str	r7, [sp, #32]
 8009000:	1b7f      	subs	r7, r7, r5
 8009002:	eb64 0406 	sbc.w	r4, r4, r6
 8009006:	0138      	lsls	r0, r7, #4
 8009008:	0124      	lsls	r4, r4, #4
 800900a:	eb10 0a05 	adds.w	sl, r0, r5
 800900e:	ea44 7417 	orr.w	r4, r4, r7, lsr #28
 8009012:	eb46 0404 	adc.w	r4, r6, r4
 8009016:	01a4      	lsls	r4, r4, #6
 8009018:	ea4f 1c8a 	mov.w	ip, sl, lsl #6
 800901c:	ea44 649a 	orr.w	r4, r4, sl, lsr #26
 8009020:	9205      	str	r2, [sp, #20]
 8009022:	9106      	str	r1, [sp, #24]
 8009024:	4a24      	ldr	r2, [pc, #144]	; (80090b8 <work_buzzer_handler+0x338>)
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	9009      	str	r0, [sp, #36]	; 0x24
 800902a:	2300      	movs	r3, #0
 800902c:	4660      	mov	r0, ip
 800902e:	4621      	mov	r1, r4
 8009030:	f8cd c00c 	str.w	ip, [sp, #12]
 8009034:	f7f7 fcd2 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009038:	9a03      	ldr	r2, [sp, #12]
 800903a:	4b20      	ldr	r3, [pc, #128]	; (80090bc <work_buzzer_handler+0x33c>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800903c:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800903e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009042:	4594      	cmp	ip, r2
 8009044:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009048:	d32e      	bcc.n	80090a8 <work_buzzer_handler+0x328>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	9906      	ldr	r1, [sp, #24]
 800904e:	9c08      	ldr	r4, [sp, #32]
 8009050:	1953      	adds	r3, r2, r5
 8009052:	eb46 0301 	adc.w	r3, r6, r1
 8009056:	9907      	ldr	r1, [sp, #28]
 8009058:	00db      	lsls	r3, r3, #3
 800905a:	1b62      	subs	r2, r4, r5
 800905c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009060:	eb63 0306 	sbc.w	r3, r3, r6
 8009064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009066:	4a14      	ldr	r2, [pc, #80]	; (80090b8 <work_buzzer_handler+0x338>)
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	194d      	adds	r5, r1, r5
 800906c:	ea43 7317 	orr.w	r3, r3, r7, lsr #28
 8009070:	eb46 0603 	adc.w	r6, r6, r3
 8009074:	0176      	lsls	r6, r6, #5
 8009076:	ea46 66da 	orr.w	r6, r6, sl, lsr #27
 800907a:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 800907e:	2300      	movs	r3, #0
 8009080:	4650      	mov	r0, sl
 8009082:	4631      	mov	r1, r6
 8009084:	f7f7 fcaa 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009088:	490c      	ldr	r1, [pc, #48]	; (80090bc <work_buzzer_handler+0x33c>)
 800908a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800908e:	45d4      	cmp	ip, sl
 8009090:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009092:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009094:	d308      	bcc.n	80090a8 <work_buzzer_handler+0x328>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009096:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800909a:	9804      	ldr	r0, [sp, #16]
 800909c:	9000      	str	r0, [sp, #0]
 800909e:	680c      	ldr	r4, [r1, #0]
 80090a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a2:	4640      	mov	r0, r8
 80090a4:	2102      	movs	r1, #2
 80090a6:	47a0      	blx	r4
 80090a8:	2100      	movs	r1, #0
 80090aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80090ae:	f002 f88f 	bl	800b1d0 <z_impl_k_sleep>
 80090b2:	e687      	b.n	8008dc4 <work_buzzer_handler+0x44>
 80090b4:	20001374 	.word	0x20001374
 80090b8:	000f4240 	.word	0x000f4240
 80090bc:	000f423f 	.word	0x000f423f
 80090c0:	20000300 	.word	0x20000300
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80090c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090c8:	aa0c      	add	r2, sp, #48	; 0x30
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4629      	mov	r1, r5
 80090ce:	4640      	mov	r0, r8
 80090d0:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80090d2:	9004      	str	r0, [sp, #16]
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d164      	bne.n	80091a2 <work_buzzer_handler+0x422>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80090d8:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80090dc:	00b2      	lsls	r2, r6, #2
 80090de:	00bb      	lsls	r3, r7, #2
 80090e0:	ea43 7196 	orr.w	r1, r3, r6, lsr #30
 80090e4:	1993      	adds	r3, r2, r6
 80090e6:	eb47 0401 	adc.w	r4, r7, r1
 80090ea:	00d8      	lsls	r0, r3, #3
 80090ec:	00e4      	lsls	r4, r4, #3
 80090ee:	ebb0 0a06 	subs.w	sl, r0, r6
 80090f2:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80090f6:	eb64 0407 	sbc.w	r4, r4, r7
 80090fa:	ea4f 1c0a 	mov.w	ip, sl, lsl #4
 80090fe:	0124      	lsls	r4, r4, #4
 8009100:	eb1c 0b06 	adds.w	fp, ip, r6
 8009104:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 8009108:	eb47 0404 	adc.w	r4, r7, r4
 800910c:	01a4      	lsls	r4, r4, #6
 800910e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8009112:	ea44 649b 	orr.w	r4, r4, fp, lsr #26
 8009116:	ea4f 1c8b 	mov.w	ip, fp, lsl #6
 800911a:	9205      	str	r2, [sp, #20]
 800911c:	9106      	str	r1, [sp, #24]
 800911e:	9307      	str	r3, [sp, #28]
 8009120:	9008      	str	r0, [sp, #32]
 8009122:	4621      	mov	r1, r4
 8009124:	4660      	mov	r0, ip
 8009126:	2300      	movs	r3, #0
 8009128:	4a21      	ldr	r2, [pc, #132]	; (80091b0 <work_buzzer_handler+0x430>)
 800912a:	f8cd c00c 	str.w	ip, [sp, #12]
 800912e:	f7f7 fc55 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009132:	9b03      	ldr	r3, [sp, #12]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009134:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009136:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800913a:	459c      	cmp	ip, r3
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <work_buzzer_handler+0x434>)
 800913e:	eb73 0404 	sbcs.w	r4, r3, r4
 8009142:	d32e      	bcc.n	80091a2 <work_buzzer_handler+0x422>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	9906      	ldr	r1, [sp, #24]
 8009148:	9808      	ldr	r0, [sp, #32]
 800914a:	1993      	adds	r3, r2, r6
 800914c:	eb47 0301 	adc.w	r3, r7, r1
 8009150:	9907      	ldr	r1, [sp, #28]
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	1b82      	subs	r2, r0, r6
 8009156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800915a:	eb63 0307 	sbc.w	r3, r3, r7
 800915e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009160:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <work_buzzer_handler+0x430>)
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	198e      	adds	r6, r1, r6
 8009166:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800916a:	eb47 0703 	adc.w	r7, r7, r3
 800916e:	017f      	lsls	r7, r7, #5
 8009170:	ea47 67db 	orr.w	r7, r7, fp, lsr #27
 8009174:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
 8009178:	2300      	movs	r3, #0
 800917a:	4658      	mov	r0, fp
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 fc2d 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009182:	490c      	ldr	r1, [pc, #48]	; (80091b4 <work_buzzer_handler+0x434>)
 8009184:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009188:	45dc      	cmp	ip, fp
 800918a:	41b9      	sbcs	r1, r7
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800918c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 800918e:	d308      	bcc.n	80091a2 <work_buzzer_handler+0x422>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009190:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009194:	9c04      	ldr	r4, [sp, #16]
 8009196:	9400      	str	r4, [sp, #0]
 8009198:	6804      	ldr	r4, [r0, #0]
 800919a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800919c:	4629      	mov	r1, r5
 800919e:	4640      	mov	r0, r8
 80091a0:	47a0      	blx	r4
 80091a2:	2100      	movs	r1, #0
 80091a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80091a8:	f002 f812 	bl	800b1d0 <z_impl_k_sleep>
            break;
 80091ac:	e643      	b.n	8008e36 <work_buzzer_handler+0xb6>
 80091ae:	bf00      	nop
 80091b0:	000f4240 	.word	0x000f4240
 80091b4:	000f423f 	.word	0x000f423f

080091b8 <set_ind>:
    if ((duration_min.ticks != K_FOREVER.ticks)) {
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091bc:	bf08      	it	eq
 80091be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80091c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c6:	4606      	mov	r6, r0
    if ((duration_min.ticks != K_FOREVER.ticks)) {
 80091c8:	d10c      	bne.n	80091e4 <set_ind+0x2c>
				 struct k_msgq_attrs *attrs);


static inline uint32_t z_impl_k_msgq_num_free_get(struct k_msgq *msgq)
{
	return msgq->max_msgs - msgq->used_msgs;
 80091ca:	4814      	ldr	r0, [pc, #80]	; (800921c <set_ind+0x64>)
    if (!k_msgq_num_free_get(&msgq_led_strip)) {
 80091cc:	6902      	ldr	r2, [r0, #16]
 80091ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d020      	beq.n	8009216 <set_ind+0x5e>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80091d4:	4811      	ldr	r0, [pc, #68]	; (800921c <set_ind+0x64>)
 80091d6:	4631      	mov	r1, r6
 80091d8:	2200      	movs	r2, #0
}
 80091da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	2300      	movs	r3, #0
 80091e0:	f001 b89c 	b.w	800a31c <z_impl_k_msgq_put>
	compiler_barrier();
 80091e4:	4615      	mov	r5, r2
 80091e6:	461c      	mov	r4, r3
	z_impl_k_poll_signal_check(sig, signaled, result);
 80091e8:	4f0d      	ldr	r7, [pc, #52]	; (8009220 <set_ind+0x68>)
 80091ea:	4a0e      	ldr	r2, [pc, #56]	; (8009224 <set_ind+0x6c>)
 80091ec:	480e      	ldr	r0, [pc, #56]	; (8009228 <set_ind+0x70>)
 80091ee:	4639      	mov	r1, r7
 80091f0:	f002 fe4a 	bl	800be88 <z_impl_k_poll_signal_check>
        if (!indicate_is_enabled()) {
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e7      	bne.n	80091ca <set_ind+0x12>
	return z_impl_k_poll_signal_raise(sig, result);
 80091fa:	2101      	movs	r1, #1
 80091fc:	480a      	ldr	r0, [pc, #40]	; (8009228 <set_ind+0x70>)
 80091fe:	f002 fe49 	bl	800be94 <z_impl_k_poll_signal_raise>
            k_work_schedule(&dwork_enable_ind, duration_min);
 8009202:	462a      	mov	r2, r5
 8009204:	4623      	mov	r3, r4
 8009206:	4809      	ldr	r0, [pc, #36]	; (800922c <set_ind+0x74>)
 8009208:	f001 fb9e 	bl	800a948 <k_work_schedule>
 800920c:	4803      	ldr	r0, [pc, #12]	; (800921c <set_ind+0x64>)
    if (!k_msgq_num_free_get(&msgq_led_strip)) {
 800920e:	6902      	ldr	r2, [r0, #16]
 8009210:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009212:	429a      	cmp	r2, r3
 8009214:	d1de      	bne.n	80091d4 <set_ind+0x1c>
	z_impl_k_msgq_purge(msgq);
 8009216:	f001 f93d 	bl	800a494 <z_impl_k_msgq_purge>
}
 800921a:	e7db      	b.n	80091d4 <set_ind+0x1c>
 800921c:	200006b0 	.word	0x200006b0
 8009220:	20001368 	.word	0x20001368
 8009224:	20001364 	.word	0x20001364
 8009228:	2000143c 	.word	0x2000143c
 800922c:	20000948 	.word	0x20000948

08009230 <work_button_pressed_handler>:
void work_button_pressed_handler(struct k_work *item) {
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    atomic_t atomic_interval_count = ATOMIC_INIT(0); /* Counted number of function button pressed call */
 8009234:	2500      	movs	r5, #0
void work_button_pressed_handler(struct k_work *item) {
 8009236:	b085      	sub	sp, #20
    struct led_strip_indicate_s *strip_ind = nullptr;
 8009238:	e9cd 5501 	strd	r5, r5, [sp, #4]
 800923c:	aa01      	add	r2, sp, #4
 800923e:	f3bf 8f5b 	dmb	ish
 8009242:	e852 3f00 	ldrex	r3, [r2]
 8009246:	e842 5100 	strex	r1, r5, [r2]
 800924a:	2900      	cmp	r1, #0
 800924c:	d1f9      	bne.n	8009242 <work_button_pressed_handler+0x12>
 800924e:	f3bf 8f5b 	dmb	ish
 8009252:	4f52      	ldr	r7, [pc, #328]	; (800939c <work_button_pressed_handler+0x16c>)
	return z_impl_k_msgq_put(msgq, data, timeout);
 8009254:	f8df a164 	ldr.w	sl, [pc, #356]	; 80093bc <work_button_pressed_handler+0x18c>
                strip_ind = &short_pressed_button_ind;
 8009258:	f8df b164 	ldr.w	fp, [pc, #356]	; 80093c0 <work_button_pressed_handler+0x190>
    bool middle_pressed_is_set = false;
 800925c:	46a9      	mov	r9, r5
    bool short_pressed_is_set = false;
 800925e:	46a8      	mov	r8, r5
    while (gpio_pin_get(irq_gpio_dev->port, irq_gpio_dev->pin)) {
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
 8009266:	6906      	ldr	r6, [r0, #16]
	return api->port_get_raw(port, value);
 8009268:	6883      	ldr	r3, [r0, #8]
 800926a:	a903      	add	r1, sp, #12
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4798      	blx	r3
	if (ret == 0) {
 8009270:	b980      	cbnz	r0, 8009294 <work_button_pressed_handler+0x64>
		*value ^= data->invert;
 8009272:	6832      	ldr	r2, [r6, #0]
 8009274:	9b03      	ldr	r3, [sp, #12]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 8009276:	2601      	movs	r6, #1
		*value ^= data->invert;
 8009278:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 800927a:	fa06 f404 	lsl.w	r4, r6, r4
 800927e:	4223      	tst	r3, r4
 8009280:	d108      	bne.n	8009294 <work_button_pressed_handler+0x64>
    if (short_pressed_is_set) {
 8009282:	f1b8 0f00 	cmp.w	r8, #0
 8009286:	d157      	bne.n	8009338 <work_button_pressed_handler+0x108>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 8009288:	f1b9 0f00 	cmp.w	r9, #0
 800928c:	d15e      	bne.n	800934c <work_button_pressed_handler+0x11c>
}
 800928e:	b005      	add	sp, #20
 8009290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return z_impl_k_sleep(timeout);
 8009294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009298:	2100      	movs	r1, #0
 800929a:	f001 ff99 	bl	800b1d0 <z_impl_k_sleep>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800929e:	f3bf 8f5b 	dmb	ish
 80092a2:	ab01      	add	r3, sp, #4
 80092a4:	e853 2f00 	ldrex	r2, [r3]
 80092a8:	3201      	adds	r2, #1
 80092aa:	e843 2100 	strex	r1, r2, [r3]
 80092ae:	2900      	cmp	r1, #0
 80092b0:	d1f8      	bne.n	80092a4 <work_button_pressed_handler+0x74>
 80092b2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80092b6:	f3bf 8f5b 	dmb	ish
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	f3bf 8f5b 	dmb	ish
        if ((atomic_get(&atomic_interval_count) > SHORT_PRESSED_MIN_VAL) &&
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	dd14      	ble.n	80092ee <work_button_pressed_handler+0xbe>
 80092c4:	f3bf 8f5b 	dmb	ish
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	f3bf 8f5b 	dmb	ish
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	dc0d      	bgt.n	80092ee <work_button_pressed_handler+0xbe>
            if (!short_pressed_is_set) {
 80092d2:	f1b8 0f00 	cmp.w	r8, #0
 80092d6:	d1c3      	bne.n	8009260 <work_button_pressed_handler+0x30>
                strip_ind = &short_pressed_button_ind;
 80092d8:	f8cd b008 	str.w	fp, [sp, #8]
	return z_impl_k_msgq_put(msgq, data, timeout);
 80092dc:	2200      	movs	r2, #0
 80092de:	a902      	add	r1, sp, #8
 80092e0:	4650      	mov	r0, sl
 80092e2:	2300      	movs	r3, #0
                short_pressed_is_set = true;
 80092e4:	f04f 0801 	mov.w	r8, #1
 80092e8:	f001 f818 	bl	800a31c <z_impl_k_msgq_put>
 80092ec:	e7b8      	b.n	8009260 <work_button_pressed_handler+0x30>
 80092ee:	f3bf 8f5b 	dmb	ish
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	f3bf 8f5b 	dmb	ish
        } else if ((atomic_get(&atomic_interval_count) > MIDDLE_PRESSED_MIN_VAL) &&
 80092f8:	2b0b      	cmp	r3, #11
 80092fa:	dd14      	ble.n	8009326 <work_button_pressed_handler+0xf6>
 80092fc:	f3bf 8f5b 	dmb	ish
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	f3bf 8f5b 	dmb	ish
 8009306:	2b14      	cmp	r3, #20
 8009308:	dc0d      	bgt.n	8009326 <work_button_pressed_handler+0xf6>
            if (!middle_pressed_is_set) {
 800930a:	f1b9 0f00 	cmp.w	r9, #0
 800930e:	d1a7      	bne.n	8009260 <work_button_pressed_handler+0x30>
                strip_ind = &middle_pressed_button_ind;
 8009310:	4b23      	ldr	r3, [pc, #140]	; (80093a0 <work_button_pressed_handler+0x170>)
 8009312:	9302      	str	r3, [sp, #8]
 8009314:	2200      	movs	r2, #0
 8009316:	a902      	add	r1, sp, #8
 8009318:	4650      	mov	r0, sl
 800931a:	2300      	movs	r3, #0
                middle_pressed_is_set = true;
 800931c:	f04f 0901 	mov.w	r9, #1
 8009320:	f000 fffc 	bl	800a31c <z_impl_k_msgq_put>
 8009324:	e79c      	b.n	8009260 <work_button_pressed_handler+0x30>
 8009326:	f3bf 8f5b 	dmb	ish
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	f3bf 8f5b 	dmb	ish
            long_pressed_is_set = true;
 8009330:	2b16      	cmp	r3, #22
 8009332:	bfa8      	it	ge
 8009334:	2501      	movge	r5, #1
 8009336:	e793      	b.n	8009260 <work_button_pressed_handler+0x30>
        k_work_submit(&work_buzzer);
 8009338:	481a      	ldr	r0, [pc, #104]	; (80093a4 <work_button_pressed_handler+0x174>)
 800933a:	f001 fad5 	bl	800a8e8 <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 800933e:	481a      	ldr	r0, [pc, #104]	; (80093a8 <work_button_pressed_handler+0x178>)
 8009340:	4631      	mov	r1, r6
 8009342:	f002 fda7 	bl	800be94 <z_impl_k_poll_signal_raise>
    if (short_pressed_is_set && (!middle_pressed_is_set)) { /* Short pressed */
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	d007      	beq.n	800935c <work_button_pressed_handler+0x12c>
    } else if (middle_pressed_is_set && !long_pressed_is_set) { /* Middle pressed */
 800934c:	2d00      	cmp	r5, #0
 800934e:	d19e      	bne.n	800928e <work_button_pressed_handler+0x5e>
        work_button_pressed_handler_dev(irq_gpio_dev);
 8009350:	6838      	ldr	r0, [r7, #0]
 8009352:	f7f9 f829 	bl	80023a8 <work_button_pressed_handler_dev>
}
 8009356:	b005      	add	sp, #20
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	4b13      	ldr	r3, [pc, #76]	; (80093ac <work_button_pressed_handler+0x17c>)
 800935e:	f3bf 8f5b 	dmb	ish
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f3bf 8f5b 	dmb	ish
        if (!atomic_get(&alarm_is_active)) {
 8009368:	b93b      	cbnz	r3, 800937a <work_button_pressed_handler+0x14a>
            strip_ind = &status_ind;
 800936a:	4911      	ldr	r1, [pc, #68]	; (80093b0 <work_button_pressed_handler+0x180>)
            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 800936c:	4a11      	ldr	r2, [pc, #68]	; (80093b4 <work_button_pressed_handler+0x184>)
            strip_ind = &status_ind;
 800936e:	9102      	str	r1, [sp, #8]
            set_ind(&strip_ind, K_MINUTES(STRIP_INDICATION_TIMEOUT_MIN));
 8009370:	2300      	movs	r3, #0
 8009372:	a802      	add	r0, sp, #8
 8009374:	f7ff ff20 	bl	80091b8 <set_ind>
 8009378:	e789      	b.n	800928e <work_button_pressed_handler+0x5e>
            strip_ind = &alarm_ind;
 800937a:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <work_button_pressed_handler+0x188>)
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	480f      	ldr	r0, [pc, #60]	; (80093bc <work_button_pressed_handler+0x18c>)
    if (!k_msgq_num_free_get(&msgq_led_strip)) {
 8009380:	6902      	ldr	r2, [r0, #16]
 8009382:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009384:	429a      	cmp	r2, r3
 8009386:	d006      	beq.n	8009396 <work_button_pressed_handler+0x166>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8009388:	2200      	movs	r2, #0
 800938a:	2300      	movs	r3, #0
 800938c:	a902      	add	r1, sp, #8
 800938e:	480b      	ldr	r0, [pc, #44]	; (80093bc <work_button_pressed_handler+0x18c>)
 8009390:	f000 ffc4 	bl	800a31c <z_impl_k_msgq_put>
 8009394:	e77b      	b.n	800928e <work_button_pressed_handler+0x5e>
	z_impl_k_msgq_purge(msgq);
 8009396:	f001 f87d 	bl	800a494 <z_impl_k_msgq_purge>
}
 800939a:	e7f5      	b.n	8009388 <work_button_pressed_handler+0x158>
 800939c:	20001380 	.word	0x20001380
 80093a0:	20000314 	.word	0x20000314
 80093a4:	20001398 	.word	0x20001398
 80093a8:	20000350 	.word	0x20000350
 80093ac:	20001370 	.word	0x20001370
 80093b0:	20000360 	.word	0x20000360
 80093b4:	000927c0 	.word	0x000927c0
 80093b8:	200002e8 	.word	0x200002e8
 80093bc:	200006b0 	.word	0x200006b0
 80093c0:	20000344 	.word	0x20000344

080093c4 <common_kernel_services_init>:
{
 80093c4:	b508      	push	{r3, lr}
    buzzer_dev = DEVICE_DT_GET(PWM_CTLR);
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <common_kernel_services_init+0x44>)
 80093c8:	4810      	ldr	r0, [pc, #64]	; (800940c <common_kernel_services_init+0x48>)
 80093ca:	6018      	str	r0, [r3, #0]
 80093cc:	f000 fdb4 	bl	8009f38 <z_device_is_ready>
    if (!device_is_ready(buzzer_dev)) {
 80093d0:	b190      	cbz	r0, 80093f8 <common_kernel_services_init+0x34>
    k_work_init(&work_buzzer, work_buzzer_handler);
 80093d2:	490f      	ldr	r1, [pc, #60]	; (8009410 <common_kernel_services_init+0x4c>)
 80093d4:	480f      	ldr	r0, [pc, #60]	; (8009414 <common_kernel_services_init+0x50>)
 80093d6:	f001 fa5d 	bl	800a894 <k_work_init>
    k_work_init(&work_button_pressed, work_button_pressed_handler);
 80093da:	490f      	ldr	r1, [pc, #60]	; (8009418 <common_kernel_services_init+0x54>)
 80093dc:	480f      	ldr	r0, [pc, #60]	; (800941c <common_kernel_services_init+0x58>)
 80093de:	f001 fa59 	bl	800a894 <k_work_init>
    k_work_init_delayable(&dwork_enable_ind, dwork_enable_ind_handler); /* For enable and disable indication */
 80093e2:	490f      	ldr	r1, [pc, #60]	; (8009420 <common_kernel_services_init+0x5c>)
 80093e4:	480f      	ldr	r0, [pc, #60]	; (8009424 <common_kernel_services_init+0x60>)
 80093e6:	f001 faa3 	bl	800a930 <k_work_init_delayable>
}
 80093ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    k_timer_init(&periodic_timer, periodic_timer_handler, nullptr);
 80093ee:	490e      	ldr	r1, [pc, #56]	; (8009428 <common_kernel_services_init+0x64>)
 80093f0:	480e      	ldr	r0, [pc, #56]	; (800942c <common_kernel_services_init+0x68>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	f002 b9ca 	b.w	800b78c <k_timer_init>
	return z_impl_k_sleep(timeout);
 80093f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009400:	f001 fee6 	bl	800b1d0 <z_impl_k_sleep>
 8009404:	e7e5      	b.n	80093d2 <common_kernel_services_init+0xe>
 8009406:	bf00      	nop
 8009408:	20001374 	.word	0x20001374
 800940c:	0800dee4 	.word	0x0800dee4
 8009410:	08008d81 	.word	0x08008d81
 8009414:	20001398 	.word	0x20001398
 8009418:	08009231 	.word	0x08009231
 800941c:	20001388 	.word	0x20001388
 8009420:	08008ca1 	.word	0x08008ca1
 8009424:	20000948 	.word	0x20000948
 8009428:	080023dd 	.word	0x080023dd
 800942c:	20000978 	.word	0x20000978

08009430 <proc_rx_data>:

bool proc_rx_data(uint8_t *recv_data, size_t len, struct message_s *rx_msg, uint8_t cur_dev_addr)
{
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	4607      	mov	r7, r0
 8009436:	460e      	mov	r6, r1
 8009438:	4614      	mov	r4, r2
 800943a:	461d      	mov	r5, r3
	return z_impl_k_msgq_get(msgq, data, timeout);
 800943c:	4865      	ldr	r0, [pc, #404]	; (80095d4 <proc_rx_data+0x1a4>)
 800943e:	4639      	mov	r1, r7
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	f000 ffc6 	bl	800a3d4 <z_impl_k_msgq_get>
    uint32_t cur_msg = 0;

    k_msgq_get(&msgq_rx_msg, recv_data, K_NO_WAIT);

    for (uint8_t i = 0; i < len; ++i) {
 8009448:	2e00      	cmp	r6, #0
 800944a:	f000 80aa 	beq.w	80095a2 <proc_rx_data+0x172>
 800944e:	f04f 0800 	mov.w	r8, #0
    uint32_t cur_msg = 0;
 8009452:	4642      	mov	r2, r8
    for (uint8_t i = 0; i < len; ++i) {
 8009454:	4641      	mov	r1, r8
 8009456:	4640      	mov	r0, r8
        recv_data[i] = reverse(recv_data[i]);
 8009458:	5c3b      	ldrb	r3, [r7, r0]
 800945a:	f04f 0e07 	mov.w	lr, #7
 800945e:	4438      	add	r0, r7
        bit = input & BIT(0);
 8009460:	f003 0c01 	and.w	ip, r3, #1
        output |= bit;
 8009464:	ea48 0c0c 	orr.w	ip, r8, ip
    while( pos < 7 ) {
 8009468:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        output = output << 1;
 800946c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    while( pos < 7 ) {
 8009470:	f01e 0eff 	ands.w	lr, lr, #255	; 0xff
        output = output << 1;
 8009474:	fa5f f88c 	uxtb.w	r8, ip
        input = input >> 1;
 8009478:	ea4f 0353 	mov.w	r3, r3, lsr #1
    while( pos < 7 ) {
 800947c:	d1f0      	bne.n	8009460 <proc_rx_data+0x30>
        cur_msg |= (recv_data[i]) << i*8;
 800947e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
    bit = input & BIT(0);
 8009482:	f003 0301 	and.w	r3, r3, #1
    for (uint8_t i = 0; i < len; ++i) {
 8009486:	3101      	adds	r1, #1
    output |= bit;
 8009488:	ea48 0303 	orr.w	r3, r8, r3
 800948c:	b2c9      	uxtb	r1, r1
        cur_msg |= (recv_data[i]) << i*8;
 800948e:	fa03 fc0c 	lsl.w	ip, r3, ip
    for (uint8_t i = 0; i < len; ++i) {
 8009492:	42b1      	cmp	r1, r6
        recv_data[i] = reverse(recv_data[i]);
 8009494:	7003      	strb	r3, [r0, #0]
        cur_msg |= (recv_data[i]) << i*8;
 8009496:	ea42 020c 	orr.w	r2, r2, ip
    for (uint8_t i = 0; i < len; ++i) {
 800949a:	4608      	mov	r0, r1
 800949c:	d3dc      	bcc.n	8009458 <proc_rx_data+0x28>
    uint32_t cur_msg = 0;
 800949e:	f04f 0e01 	mov.w	lr, #1
 80094a2:	f894 c001 	ldrb.w	ip, [r4, #1]
    uint8_t pos = 0;
 80094a6:	2100      	movs	r1, #0
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80094a8:	4676      	mov	r6, lr
        switch (cur_field) {
 80094aa:	f1ae 0002 	sub.w	r0, lr, #2
    while ( *pos < start_pos + field_len ) {
 80094ae:	460b      	mov	r3, r1
        switch (cur_field) {
 80094b0:	2804      	cmp	r0, #4
 80094b2:	d878      	bhi.n	80095a6 <proc_rx_data+0x176>
 80094b4:	e8df f000 	tbb	[pc, r0]
 80094b8:	234d3860 	.word	0x234d3860
 80094bc:	03          	.byte	0x03
 80094bd:	00          	.byte	0x00
    while ( *pos < start_pos + field_len ) {
 80094be:	7966      	ldrb	r6, [r4, #5]
 80094c0:	f101 0e03 	add.w	lr, r1, #3
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80094c4:	2701      	movs	r7, #1
 80094c6:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80094ca:	fa07 f001 	lsl.w	r0, r7, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80094ce:	fa07 f808 	lsl.w	r8, r7, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80094d2:	4010      	ands	r0, r2
        (*pos)++;
 80094d4:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80094d6:	ea26 0608 	bic.w	r6, r6, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80094da:	40d8      	lsrs	r0, r3
        (*pos)++;
 80094dc:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80094de:	4306      	orrs	r6, r0
    while ( *pos < start_pos + field_len ) {
 80094e0:	458e      	cmp	lr, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80094e2:	b2f6      	uxtb	r6, r6
    while ( *pos < start_pos + field_len ) {
 80094e4:	dcef      	bgt.n	80094c6 <proc_rx_data+0x96>
 80094e6:	7166      	strb	r6, [r4, #5]
    }

    read_write_message(&cur_msg, rx_msg, false); /* fill rx_msg struct */
    if ( (rx_msg->receiver_addr != BROADCAST_ADDR) &&
 80094e8:	f1bc 0f04 	cmp.w	ip, #4
 80094ec:	bf1d      	ittte	ne
 80094ee:	eba5 000c 	subne.w	r0, r5, ip
 80094f2:	fab0 f080 	clzne	r0, r0
 80094f6:	0940      	lsrne	r0, r0, #5
        LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg->receiver_addr, cur_dev_addr);
        LOG_DBG("Packet is filtered");
        return false;
    }

    return true;
 80094f8:	2001      	moveq	r0, #1
}
 80094fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094fe:	7927      	ldrb	r7, [r4, #4]
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009500:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009504:	fa06 f001 	lsl.w	r0, r6, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009508:	fa06 f808 	lsl.w	r8, r6, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800950c:	4010      	ands	r0, r2
        (*pos)++;
 800950e:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009510:	ea27 0708 	bic.w	r7, r7, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009514:	40d8      	lsrs	r0, r3
        (*pos)++;
 8009516:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009518:	4307      	orrs	r7, r0
    while ( *pos < start_pos + field_len ) {
 800951a:	4299      	cmp	r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800951c:	b2ff      	uxtb	r7, r7
    while ( *pos < start_pos + field_len ) {
 800951e:	ddef      	ble.n	8009500 <proc_rx_data+0xd0>
 8009520:	7127      	strb	r7, [r4, #4]
 8009522:	f10e 0e01 	add.w	lr, lr, #1
 8009526:	e7c0      	b.n	80094aa <proc_rx_data+0x7a>
 8009528:	78a0      	ldrb	r0, [r4, #2]
 800952a:	f101 0804 	add.w	r8, r1, #4
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800952e:	eba1 0903 	sub.w	r9, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009532:	fa06 f701 	lsl.w	r7, r6, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009536:	fa06 f909 	lsl.w	r9, r6, r9
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800953a:	4017      	ands	r7, r2
        (*pos)++;
 800953c:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800953e:	ea20 0009 	bic.w	r0, r0, r9
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009542:	40df      	lsrs	r7, r3
        (*pos)++;
 8009544:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009546:	4338      	orrs	r0, r7
    while ( *pos < start_pos + field_len ) {
 8009548:	4588      	cmp	r8, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800954a:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 800954c:	dcef      	bgt.n	800952e <proc_rx_data+0xfe>
 800954e:	70a0      	strb	r0, [r4, #2]
 8009550:	e7e7      	b.n	8009522 <proc_rx_data+0xf2>
 8009552:	78e0      	ldrb	r0, [r4, #3]
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009554:	eba1 0803 	sub.w	r8, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009558:	fa06 f701 	lsl.w	r7, r6, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800955c:	fa06 f808 	lsl.w	r8, r6, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009560:	4017      	ands	r7, r2
        (*pos)++;
 8009562:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009564:	ea20 0008 	bic.w	r0, r0, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009568:	40df      	lsrs	r7, r3
        (*pos)++;
 800956a:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800956c:	4338      	orrs	r0, r7
    while ( *pos < start_pos + field_len ) {
 800956e:	4299      	cmp	r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009570:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 8009572:	ddef      	ble.n	8009554 <proc_rx_data+0x124>
 8009574:	70e0      	strb	r0, [r4, #3]
 8009576:	e7d4      	b.n	8009522 <proc_rx_data+0xf2>
 8009578:	f101 0803 	add.w	r8, r1, #3
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800957c:	1ac8      	subs	r0, r1, r3
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800957e:	fa06 f701 	lsl.w	r7, r6, r1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8009582:	fa06 f000 	lsl.w	r0, r6, r0
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009586:	4017      	ands	r7, r2
        (*pos)++;
 8009588:	3101      	adds	r1, #1
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800958a:	ea2c 0000 	bic.w	r0, ip, r0
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800958e:	40df      	lsrs	r7, r3
        (*pos)++;
 8009590:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009592:	4338      	orrs	r0, r7
    while ( *pos < start_pos + field_len ) {
 8009594:	4541      	cmp	r1, r8
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8009596:	fa5f fc80 	uxtb.w	ip, r0
    while ( *pos < start_pos + field_len ) {
 800959a:	dbef      	blt.n	800957c <proc_rx_data+0x14c>
 800959c:	f884 c001 	strb.w	ip, [r4, #1]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 80095a0:	e7bf      	b.n	8009522 <proc_rx_data+0xf2>
    uint32_t cur_msg = 0;
 80095a2:	4632      	mov	r2, r6
 80095a4:	e77b      	b.n	800949e <proc_rx_data+0x6e>
    while ( *pos < start_pos + field_len ) {
 80095a6:	7820      	ldrb	r0, [r4, #0]
 80095a8:	f101 0802 	add.w	r8, r1, #2
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80095ac:	1acf      	subs	r7, r1, r3
 80095ae:	fa06 f707 	lsl.w	r7, r6, r7
 80095b2:	ea20 0007 	bic.w	r0, r0, r7
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80095b6:	fa06 f701 	lsl.w	r7, r6, r1
 80095ba:	4017      	ands	r7, r2
        (*pos)++;
 80095bc:	3101      	adds	r1, #1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80095be:	40df      	lsrs	r7, r3
        (*pos)++;
 80095c0:	b2c9      	uxtb	r1, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80095c2:	4338      	orrs	r0, r7
    while ( *pos < start_pos + field_len ) {
 80095c4:	4588      	cmp	r8, r1
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80095c6:	b2c0      	uxtb	r0, r0
    while ( *pos < start_pos + field_len ) {
 80095c8:	dcf0      	bgt.n	80095ac <proc_rx_data+0x17c>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 80095ca:	f1be 0f06 	cmp.w	lr, #6
 80095ce:	7020      	strb	r0, [r4, #0]
 80095d0:	d1a7      	bne.n	8009522 <proc_rx_data+0xf2>
 80095d2:	e789      	b.n	80094e8 <proc_rx_data+0xb8>
 80095d4:	20000718 	.word	0x20000718

080095d8 <proc_tx_data>:

bool proc_tx_data(struct k_msgq *msgq, uint8_t *tx_data, size_t len, struct message_s *tx_msg)
{
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	460d      	mov	r5, r1
 80095de:	4614      	mov	r4, r2
 80095e0:	4698      	mov	r8, r3
 80095e2:	2600      	movs	r6, #0
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 80095e4:	4863      	ldr	r0, [pc, #396]	; (8009774 <proc_tx_data+0x19c>)
    uint32_t new_msg = 0;
    /* Check messages into queue
     * Beginning check priority queue, after check standard queue
     * If queue's is not empty receiving will be stopped */
    if (k_msgq_num_used_get(&msgq_tx_msg_prio)) {
 80095e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80095e8:	b953      	cbnz	r3, 8009600 <proc_tx_data+0x28>
 80095ea:	4863      	ldr	r0, [pc, #396]	; (8009778 <proc_tx_data+0x1a0>)
        k_msgq_get(&msgq_tx_msg_prio, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg_prio;
    } else if (k_msgq_num_used_get(&msgq_tx_msg)) {
 80095ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80095ee:	b93b      	cbnz	r3, 8009600 <proc_tx_data+0x28>
        k_msgq_get(&msgq_tx_msg, tx_msg, K_NO_WAIT);
        msgq = &msgq_tx_msg;
    } else {
        /* Return 1 */
        current_state = *current_state.next;
 80095f0:	4a62      	ldr	r2, [pc, #392]	; (800977c <proc_tx_data+0x1a4>)
 80095f2:	6811      	ldr	r1, [r2, #0]
 80095f4:	c903      	ldmia	r1, {r0, r1}
 80095f6:	e882 0003 	stmia.w	r2, {r0, r1}
    for (uint8_t i = 0; i < len; ++i) {
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
        *(tx_data + i) = reverse(*(tx_data + i));
    }
    return true;
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009600:	2200      	movs	r2, #0
 8009602:	4641      	mov	r1, r8
 8009604:	2300      	movs	r3, #0
 8009606:	f000 fee5 	bl	800a3d4 <z_impl_k_msgq_get>
{
 800960a:	2101      	movs	r1, #1
 800960c:	2000      	movs	r0, #0
 800960e:	4684      	mov	ip, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009610:	460f      	mov	r7, r1
        switch (cur_field) {
 8009612:	1e8b      	subs	r3, r1, #2
    while ( *pos < start_pos + field_len ) {
 8009614:	4602      	mov	r2, r0
        switch (cur_field) {
 8009616:	2b04      	cmp	r3, #4
 8009618:	f200 8095 	bhi.w	8009746 <proc_tx_data+0x16e>
 800961c:	e8df f003 	tbb	[pc, r3]
 8009620:	3d69537d 	.word	0x3d69537d
 8009624:	03          	.byte	0x03
 8009625:	00          	.byte	0x00
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009626:	f898 e005 	ldrb.w	lr, [r8, #5]
    while ( *pos < start_pos + field_len ) {
 800962a:	1cc7      	adds	r7, r0, #3
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800962c:	2101      	movs	r1, #1
 800962e:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009630:	fa01 f800 	lsl.w	r8, r1, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
        (*pos)++;
 8009638:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800963a:	ea03 030e 	and.w	r3, r3, lr
        (*pos)++;
 800963e:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009640:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009642:	ea2c 0c08 	bic.w	ip, ip, r8
    while ( *pos < start_pos + field_len ) {
 8009646:	42b8      	cmp	r0, r7
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009648:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800964c:	dbef      	blt.n	800962e <proc_tx_data+0x56>
    for (uint8_t i = 0; i < len; ++i) {
 800964e:	b304      	cbz	r4, 8009692 <proc_tx_data+0xba>
 8009650:	2100      	movs	r1, #0
 8009652:	468e      	mov	lr, r1
        *(tx_data + i) = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 8009654:	27ff      	movs	r7, #255	; 0xff
 8009656:	00cb      	lsls	r3, r1, #3
 8009658:	fa07 f203 	lsl.w	r2, r7, r3
 800965c:	ea02 020c 	and.w	r2, r2, ip
 8009660:	40da      	lsrs	r2, r3
 8009662:	44ae      	add	lr, r5
 8009664:	b2d2      	uxtb	r2, r2
 8009666:	2007      	movs	r0, #7
        bit = input & BIT(0);
 8009668:	f002 0301 	and.w	r3, r2, #1
        output |= bit;
 800966c:	4333      	orrs	r3, r6
    while( pos < 7 ) {
 800966e:	3801      	subs	r0, #1
        output = output << 1;
 8009670:	005b      	lsls	r3, r3, #1
    while( pos < 7 ) {
 8009672:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        output = output << 1;
 8009676:	b2de      	uxtb	r6, r3
        input = input >> 1;
 8009678:	ea4f 0252 	mov.w	r2, r2, lsr #1
    while( pos < 7 ) {
 800967c:	d1f4      	bne.n	8009668 <proc_tx_data+0x90>
    for (uint8_t i = 0; i < len; ++i) {
 800967e:	3101      	adds	r1, #1
 8009680:	b2c9      	uxtb	r1, r1
    bit = input & BIT(0);
 8009682:	f002 0201 	and.w	r2, r2, #1
    output |= bit;
 8009686:	4332      	orrs	r2, r6
 8009688:	42a1      	cmp	r1, r4
        *(tx_data + i) = reverse(*(tx_data + i));
 800968a:	f88e 2000 	strb.w	r2, [lr]
    for (uint8_t i = 0; i < len; ++i) {
 800968e:	468e      	mov	lr, r1
 8009690:	d3e1      	bcc.n	8009656 <proc_tx_data+0x7e>
    return true;
 8009692:	2301      	movs	r3, #1
}
 8009694:	4618      	mov	r0, r3
 8009696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800969a:	f898 3004 	ldrb.w	r3, [r8, #4]
 800969e:	eba0 0e02 	sub.w	lr, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80096a2:	fa07 f900 	lsl.w	r9, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096a6:	fa07 fe0e 	lsl.w	lr, r7, lr
        (*pos)++;
 80096aa:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096ac:	ea0e 0e03 	and.w	lr, lr, r3
        (*pos)++;
 80096b0:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096b2:	fa0e fe02 	lsl.w	lr, lr, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80096b6:	ea2c 0c09 	bic.w	ip, ip, r9
    while ( *pos < start_pos + field_len ) {
 80096ba:	4290      	cmp	r0, r2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096bc:	ea4e 0c0c 	orr.w	ip, lr, ip
    while ( *pos < start_pos + field_len ) {
 80096c0:	dded      	ble.n	800969e <proc_tx_data+0xc6>
 80096c2:	3101      	adds	r1, #1
 80096c4:	e7a5      	b.n	8009612 <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096c6:	f898 9002 	ldrb.w	r9, [r8, #2]
    while ( *pos < start_pos + field_len ) {
 80096ca:	f100 0e04 	add.w	lr, r0, #4
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096ce:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80096d0:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096d4:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 80096d8:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096da:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 80096de:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096e0:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80096e2:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 80096e6:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096e8:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 80096ec:	dbef      	blt.n	80096ce <proc_tx_data+0xf6>
 80096ee:	3101      	adds	r1, #1
 80096f0:	e78f      	b.n	8009612 <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096f2:	f898 e003 	ldrb.w	lr, [r8, #3]
 80096f6:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80096f8:	fa07 f900 	lsl.w	r9, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80096fc:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 8009700:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009702:	ea03 030e 	and.w	r3, r3, lr
        (*pos)++;
 8009706:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009708:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800970a:	ea2c 0c09 	bic.w	ip, ip, r9
    while ( *pos < start_pos + field_len ) {
 800970e:	4290      	cmp	r0, r2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009710:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 8009714:	ddef      	ble.n	80096f6 <proc_tx_data+0x11e>
 8009716:	3101      	adds	r1, #1
 8009718:	e77b      	b.n	8009612 <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800971a:	f898 9001 	ldrb.w	r9, [r8, #1]
    while ( *pos < start_pos + field_len ) {
 800971e:	f100 0e03 	add.w	lr, r0, #3
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009722:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009724:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009728:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 800972c:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800972e:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 8009732:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009734:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009736:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 800973a:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800973c:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 8009740:	dbef      	blt.n	8009722 <proc_tx_data+0x14a>
 8009742:	3101      	adds	r1, #1
 8009744:	e765      	b.n	8009612 <proc_tx_data+0x3a>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009746:	f898 9000 	ldrb.w	r9, [r8]
    while ( *pos < start_pos + field_len ) {
 800974a:	f100 0e02 	add.w	lr, r0, #2
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800974e:	1a83      	subs	r3, r0, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009750:	fa07 fa00 	lsl.w	sl, r7, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009754:	fa07 f303 	lsl.w	r3, r7, r3
        (*pos)++;
 8009758:	3001      	adds	r0, #1
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800975a:	ea03 0309 	and.w	r3, r3, r9
        (*pos)++;
 800975e:	b2c0      	uxtb	r0, r0
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009760:	4093      	lsls	r3, r2
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8009762:	ea2c 0c0a 	bic.w	ip, ip, sl
    while ( *pos < start_pos + field_len ) {
 8009766:	4570      	cmp	r0, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8009768:	ea43 0c0c 	orr.w	ip, r3, ip
    while ( *pos < start_pos + field_len ) {
 800976c:	dbef      	blt.n	800974e <proc_tx_data+0x176>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800976e:	2906      	cmp	r1, #6
 8009770:	d1a7      	bne.n	80096c2 <proc_tx_data+0xea>
 8009772:	e76c      	b.n	800964e <proc_tx_data+0x76>
 8009774:	20000780 	.word	0x20000780
 8009778:	2000074c 	.word	0x2000074c
 800977c:	20001378 	.word	0x20001378

08009780 <radio_rx_queue_is_empty>:
 8009780:	4b02      	ldr	r3, [pc, #8]	; (800978c <radio_rx_queue_is_empty+0xc>)
    disable_ind();
}

bool radio_rx_queue_is_empty()
{
    return (k_msgq_num_used_get(&msgq_rx_msg) == 0);
 8009782:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8009784:	fab0 f080 	clz	r0, r0
 8009788:	0940      	lsrs	r0, r0, #5
 800978a:	4770      	bx	lr
 800978c:	20000718 	.word	0x20000718

08009790 <get_rssi>:
{
    k_msgq_put(&msgq_rssi, rssi, K_NO_WAIT);
}

void get_rssi(int16_t *rssi)
{
 8009790:	4601      	mov	r1, r0
 8009792:	220a      	movs	r2, #10
 8009794:	2300      	movs	r3, #0
 8009796:	4801      	ldr	r0, [pc, #4]	; (800979c <get_rssi+0xc>)
 8009798:	f000 be1c 	b.w	800a3d4 <z_impl_k_msgq_get>
 800979c:	200006e4 	.word	0x200006e4

080097a0 <set_msg>:
    k_msgq_get(&msgq_rssi, rssi, K_MSEC(1));
}

void set_msg(struct message_s *msg, bool prio)
{
 80097a0:	460b      	mov	r3, r1
 80097a2:	4601      	mov	r1, r0
    if (prio)
 80097a4:	b123      	cbz	r3, 80097b0 <set_msg+0x10>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80097a6:	4805      	ldr	r0, [pc, #20]	; (80097bc <set_msg+0x1c>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	f000 bdb6 	b.w	800a31c <z_impl_k_msgq_put>
 80097b0:	4803      	ldr	r0, [pc, #12]	; (80097c0 <set_msg+0x20>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f000 bdb1 	b.w	800a31c <z_impl_k_msgq_put>
 80097ba:	bf00      	nop
 80097bc:	20000780 	.word	0x20000780
 80097c0:	2000074c 	.word	0x2000074c

080097c4 <set_buzzer_mode>:
    k_timer_stop(&periodic_timer);
    k_timer_start(&periodic_timer, duration, period);
}

void set_buzzer_mode(uint8_t buzzer_mode)
{
 80097c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 80097c8:	4dc4      	ldr	r5, [pc, #784]	; (8009adc <set_buzzer_mode+0x318>)
 80097ca:	b08f      	sub	sp, #60	; 0x3c
 80097cc:	4604      	mov	r4, r0
 80097ce:	e003      	b.n	80097d8 <set_buzzer_mode+0x14>
	return z_impl_k_sleep(timeout);
 80097d0:	2032      	movs	r0, #50	; 0x32
 80097d2:	2100      	movs	r1, #0
 80097d4:	f001 fcfc 	bl	800b1d0 <z_impl_k_sleep>
	return z_impl_k_mutex_lock(mutex, timeout);
 80097d8:	2200      	movs	r2, #0
 80097da:	2300      	movs	r3, #0
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 fe83 	bl	800a4e8 <z_impl_k_mutex_lock>
    uint8_t i = 0;
    /* Wait while signal will be raised */
    while (k_mutex_lock(&mtx_buzzer, K_NO_WAIT)) {
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d1f4      	bne.n	80097d0 <set_buzzer_mode+0xc>
        k_sleep(K_MSEC(5));
    }

    switch (buzzer_mode) {
        case BUZZER_MODE_CONTINUOUS:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80097e6:	f8df b300 	ldr.w	fp, [pc, #768]	; 8009ae8 <set_buzzer_mode+0x324>
    switch (buzzer_mode) {
 80097ea:	2c02      	cmp	r4, #2
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80097ec:	f8db 8000 	ldr.w	r8, [fp]
    switch (buzzer_mode) {
 80097f0:	f000 817c 	beq.w	8009aec <set_buzzer_mode+0x328>
 80097f4:	2c03      	cmp	r4, #3
 80097f6:	d043      	beq.n	8009880 <set_buzzer_mode+0xbc>
 80097f8:	2c01      	cmp	r4, #1
 80097fa:	f000 80fd 	beq.w	80099f8 <set_buzzer_mode+0x234>
 80097fe:	f10d 0930 	add.w	r9, sp, #48	; 0x30
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC / 2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8009802:	f8db 5000 	ldr.w	r5, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8009806:	68ab      	ldr	r3, [r5, #8]
 8009808:	464a      	mov	r2, r9
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2102      	movs	r1, #2
 800980e:	4628      	mov	r0, r5
 8009810:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8009812:	4606      	mov	r6, r0
 8009814:	bb70      	cbnz	r0, 8009874 <set_buzzer_mode+0xb0>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009816:	e9dd 470c 	ldrd	r4, r7, [sp, #48]	; 0x30
 800981a:	00bb      	lsls	r3, r7, #2
 800981c:	00a2      	lsls	r2, r4, #2
 800981e:	1912      	adds	r2, r2, r4
 8009820:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009824:	eb47 0303 	adc.w	r3, r7, r3
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800982e:	00d2      	lsls	r2, r2, #3
 8009830:	1b12      	subs	r2, r2, r4
 8009832:	eb63 0307 	sbc.w	r3, r3, r7
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 800983c:	0112      	lsls	r2, r2, #4
 800983e:	1912      	adds	r2, r2, r4
 8009840:	eb47 0703 	adc.w	r7, r7, r3
 8009844:	01bf      	lsls	r7, r7, #6
 8009846:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 800984a:	0194      	lsls	r4, r2, #6
 800984c:	2300      	movs	r3, #0
 800984e:	4aa4      	ldr	r2, [pc, #656]	; (8009ae0 <set_buzzer_mode+0x31c>)
 8009850:	4620      	mov	r0, r4
 8009852:	4639      	mov	r1, r7
 8009854:	f7f7 f8c2 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009858:	4ba2      	ldr	r3, [pc, #648]	; (8009ae4 <set_buzzer_mode+0x320>)
 800985a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800985e:	42a1      	cmp	r1, r4
 8009860:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009862:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009864:	d306      	bcc.n	8009874 <set_buzzer_mode+0xb0>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009866:	68ab      	ldr	r3, [r5, #8]
 8009868:	9600      	str	r6, [sp, #0]
 800986a:	681c      	ldr	r4, [r3, #0]
 800986c:	4628      	mov	r0, r5
 800986e:	4633      	mov	r3, r6
 8009870:	2102      	movs	r1, #2
 8009872:	47a0      	blx	r4
	return z_impl_k_mutex_unlock(mutex);
 8009874:	4899      	ldr	r0, [pc, #612]	; (8009adc <set_buzzer_mode+0x318>)
                             0, PWM_FLAGS);
            break;
    }
    k_mutex_unlock(&mtx_buzzer);
}
 8009876:	b00f      	add	sp, #60	; 0x3c
 8009878:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	f000 beb8 	b.w	800a5f0 <z_impl_k_mutex_unlock>
    switch (buzzer_mode) {
 8009880:	2302      	movs	r3, #2
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8009888:	f8db 8000 	ldr.w	r8, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800988c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009890:	464a      	mov	r2, r9
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2102      	movs	r1, #2
 8009896:	4640      	mov	r0, r8
 8009898:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800989a:	9004      	str	r0, [sp, #16]
 800989c:	2800      	cmp	r0, #0
 800989e:	d161      	bne.n	8009964 <set_buzzer_mode+0x1a0>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80098a0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80098a4:	00aa      	lsls	r2, r5, #2
 80098a6:	00b3      	lsls	r3, r6, #2
 80098a8:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 80098ac:	1953      	adds	r3, r2, r5
 80098ae:	eb46 0401 	adc.w	r4, r6, r1
 80098b2:	00df      	lsls	r7, r3, #3
 80098b4:	00e4      	lsls	r4, r4, #3
 80098b6:	ebb7 0a05 	subs.w	sl, r7, r5
 80098ba:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80098be:	ea4f 1c0a 	mov.w	ip, sl, lsl #4
 80098c2:	eb64 0406 	sbc.w	r4, r4, r6
 80098c6:	4660      	mov	r0, ip
 80098c8:	0124      	lsls	r4, r4, #4
 80098ca:	9709      	str	r7, [sp, #36]	; 0x24
 80098cc:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 80098d0:	1947      	adds	r7, r0, r5
 80098d2:	eb46 0404 	adc.w	r4, r6, r4
 80098d6:	01a4      	lsls	r4, r4, #6
 80098d8:	9206      	str	r2, [sp, #24]
 80098da:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 80098de:	01ba      	lsls	r2, r7, #6
 80098e0:	9107      	str	r1, [sp, #28]
 80098e2:	9308      	str	r3, [sp, #32]
 80098e4:	9205      	str	r2, [sp, #20]
 80098e6:	4610      	mov	r0, r2
 80098e8:	4621      	mov	r1, r4
 80098ea:	4a7d      	ldr	r2, [pc, #500]	; (8009ae0 <set_buzzer_mode+0x31c>)
 80098ec:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80098f0:	2300      	movs	r3, #0
 80098f2:	f7f7 f873 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80098f6:	9a05      	ldr	r2, [sp, #20]
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80098f8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80098fa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80098fe:	4594      	cmp	ip, r2
 8009900:	4a78      	ldr	r2, [pc, #480]	; (8009ae4 <set_buzzer_mode+0x320>)
 8009902:	eb72 0e04 	sbcs.w	lr, r2, r4
 8009906:	d32d      	bcc.n	8009964 <set_buzzer_mode+0x1a0>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009908:	9c06      	ldr	r4, [sp, #24]
 800990a:	9908      	ldr	r1, [sp, #32]
 800990c:	1963      	adds	r3, r4, r5
 800990e:	9c07      	ldr	r4, [sp, #28]
 8009910:	eb46 0304 	adc.w	r3, r6, r4
 8009914:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	1b62      	subs	r2, r4, r5
 800991a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800991e:	eb63 0306 	sbc.w	r3, r3, r6
 8009922:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009924:	4a6e      	ldr	r2, [pc, #440]	; (8009ae0 <set_buzzer_mode+0x31c>)
 8009926:	011b      	lsls	r3, r3, #4
 8009928:	194d      	adds	r5, r1, r5
 800992a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800992e:	eb46 0603 	adc.w	r6, r6, r3
 8009932:	0176      	lsls	r6, r6, #5
 8009934:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 8009938:	017f      	lsls	r7, r7, #5
 800993a:	2300      	movs	r3, #0
 800993c:	4638      	mov	r0, r7
 800993e:	4631      	mov	r1, r6
 8009940:	f7f7 f84c 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009944:	4967      	ldr	r1, [pc, #412]	; (8009ae4 <set_buzzer_mode+0x320>)
 8009946:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800994a:	45bc      	cmp	ip, r7
 800994c:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800994e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009950:	d308      	bcc.n	8009964 <set_buzzer_mode+0x1a0>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009952:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009956:	9804      	ldr	r0, [sp, #16]
 8009958:	9000      	str	r0, [sp, #0]
 800995a:	680c      	ldr	r4, [r1, #0]
 800995c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800995e:	4640      	mov	r0, r8
 8009960:	2102      	movs	r1, #2
 8009962:	47a0      	blx	r4
	return z_impl_k_sleep(timeout);
 8009964:	2100      	movs	r1, #0
 8009966:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800996a:	f001 fc31 	bl	800b1d0 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800996e:	f8db 6000 	ldr.w	r6, [fp]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8009972:	68b3      	ldr	r3, [r6, #8]
 8009974:	464a      	mov	r2, r9
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2102      	movs	r1, #2
 800997a:	4630      	mov	r0, r6
 800997c:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 800997e:	4605      	mov	r5, r0
 8009980:	bb70      	cbnz	r0, 80099e0 <set_buzzer_mode+0x21c>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009982:	e9dd 410c 	ldrd	r4, r1, [sp, #48]	; 0x30
 8009986:	00a2      	lsls	r2, r4, #2
 8009988:	008b      	lsls	r3, r1, #2
 800998a:	1912      	adds	r2, r2, r4
 800998c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009990:	eb41 0303 	adc.w	r3, r1, r3
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800999a:	00d2      	lsls	r2, r2, #3
 800999c:	1b12      	subs	r2, r2, r4
 800999e:	eb63 0301 	sbc.w	r3, r3, r1
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	ea43 7312 	orr.w	r3, r3, r2, lsr #28
 80099a8:	0112      	lsls	r2, r2, #4
 80099aa:	1912      	adds	r2, r2, r4
 80099ac:	eb41 0303 	adc.w	r3, r1, r3
 80099b0:	019f      	lsls	r7, r3, #6
 80099b2:	ea47 6792 	orr.w	r7, r7, r2, lsr #26
 80099b6:	0194      	lsls	r4, r2, #6
 80099b8:	2300      	movs	r3, #0
 80099ba:	4a49      	ldr	r2, [pc, #292]	; (8009ae0 <set_buzzer_mode+0x31c>)
 80099bc:	4620      	mov	r0, r4
 80099be:	4639      	mov	r1, r7
 80099c0:	f7f7 f80c 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <set_buzzer_mode+0x320>)
 80099cc:	41bb      	sbcs	r3, r7
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80099ce:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80099d0:	d306      	bcc.n	80099e0 <set_buzzer_mode+0x21c>
	return api->pin_set(dev, pwm, period, pulse, flags);
 80099d2:	68b3      	ldr	r3, [r6, #8]
 80099d4:	9500      	str	r5, [sp, #0]
 80099d6:	681c      	ldr	r4, [r3, #0]
 80099d8:	4630      	mov	r0, r6
 80099da:	462b      	mov	r3, r5
 80099dc:	2102      	movs	r1, #2
 80099de:	47a0      	blx	r4
 80099e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80099e4:	2100      	movs	r1, #0
 80099e6:	f001 fbf3 	bl	800b1d0 <z_impl_k_sleep>
            while (i < 2) {
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f43f af41 	beq.w	8009874 <set_buzzer_mode+0xb0>
 80099f2:	2301      	movs	r3, #1
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	e747      	b.n	8009888 <set_buzzer_mode+0xc4>
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80099f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	464a      	mov	r2, r9
 8009a04:	2102      	movs	r1, #2
 8009a06:	4640      	mov	r0, r8
 8009a08:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8009a0a:	9004      	str	r0, [sp, #16]
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d15f      	bne.n	8009ad0 <set_buzzer_mode+0x30c>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009a10:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8009a14:	00aa      	lsls	r2, r5, #2
 8009a16:	00b3      	lsls	r3, r6, #2
 8009a18:	ea43 7195 	orr.w	r1, r3, r5, lsr #30
 8009a1c:	1953      	adds	r3, r2, r5
 8009a1e:	eb46 0401 	adc.w	r4, r6, r1
 8009a22:	00df      	lsls	r7, r3, #3
 8009a24:	00e4      	lsls	r4, r4, #3
 8009a26:	ebb7 0a05 	subs.w	sl, r7, r5
 8009a2a:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8009a2e:	eb64 0406 	sbc.w	r4, r4, r6
 8009a32:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8009a36:	0124      	lsls	r4, r4, #4
 8009a38:	9708      	str	r7, [sp, #32]
 8009a3a:	ea44 741a 	orr.w	r4, r4, sl, lsr #28
 8009a3e:	1947      	adds	r7, r0, r5
 8009a40:	eb46 0404 	adc.w	r4, r6, r4
 8009a44:	01a4      	lsls	r4, r4, #6
 8009a46:	9205      	str	r2, [sp, #20]
 8009a48:	ea44 6497 	orr.w	r4, r4, r7, lsr #26
 8009a4c:	01ba      	lsls	r2, r7, #6
 8009a4e:	9106      	str	r1, [sp, #24]
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	9009      	str	r0, [sp, #36]	; 0x24
 8009a54:	9203      	str	r2, [sp, #12]
 8009a56:	4610      	mov	r0, r2
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4a21      	ldr	r2, [pc, #132]	; (8009ae0 <set_buzzer_mode+0x31c>)
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f7f6 ffbd 	bl	80009dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009a62:	9a03      	ldr	r2, [sp, #12]
 8009a64:	4b1f      	ldr	r3, [pc, #124]	; (8009ae4 <set_buzzer_mode+0x320>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009a66:	900a      	str	r0, [sp, #40]	; 0x28
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009a68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009a6c:	4594      	cmp	ip, r2
 8009a6e:	eb73 0e04 	sbcs.w	lr, r3, r4
 8009a72:	d32d      	bcc.n	8009ad0 <set_buzzer_mode+0x30c>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009a74:	9a05      	ldr	r2, [sp, #20]
 8009a76:	9906      	ldr	r1, [sp, #24]
 8009a78:	9c08      	ldr	r4, [sp, #32]
 8009a7a:	1953      	adds	r3, r2, r5
 8009a7c:	eb46 0301 	adc.w	r3, r6, r1
 8009a80:	9907      	ldr	r1, [sp, #28]
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	1b62      	subs	r2, r4, r5
 8009a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a8a:	eb63 0306 	sbc.w	r3, r3, r6
 8009a8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a90:	4a13      	ldr	r2, [pc, #76]	; (8009ae0 <set_buzzer_mode+0x31c>)
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	194d      	adds	r5, r1, r5
 8009a96:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8009a9a:	eb46 0603 	adc.w	r6, r6, r3
 8009a9e:	0176      	lsls	r6, r6, #5
 8009aa0:	ea46 66d7 	orr.w	r6, r6, r7, lsr #27
 8009aa4:	017f      	lsls	r7, r7, #5
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	4631      	mov	r1, r6
 8009aac:	f7f6 ff96 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009ab0:	490c      	ldr	r1, [pc, #48]	; (8009ae4 <set_buzzer_mode+0x320>)
 8009ab2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009ab6:	45bc      	cmp	ip, r7
 8009ab8:	41b1      	sbcs	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009aba:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009abc:	d308      	bcc.n	8009ad0 <set_buzzer_mode+0x30c>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009abe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009ac2:	9804      	ldr	r0, [sp, #16]
 8009ac4:	9000      	str	r0, [sp, #0]
 8009ac6:	680c      	ldr	r4, [r1, #0]
 8009ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aca:	4640      	mov	r0, r8
 8009acc:	2102      	movs	r1, #2
 8009ace:	47a0      	blx	r4
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009ad6:	f001 fb7b 	bl	800b1d0 <z_impl_k_sleep>
 8009ada:	e692      	b.n	8009802 <set_buzzer_mode+0x3e>
 8009adc:	2000069c 	.word	0x2000069c
 8009ae0:	000f4240 	.word	0x000f4240
 8009ae4:	000f423f 	.word	0x000f423f
 8009ae8:	20001374 	.word	0x20001374
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8009aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009af0:	aa0c      	add	r2, sp, #48	; 0x30
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	4621      	mov	r1, r4
 8009af6:	4640      	mov	r0, r8
 8009af8:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8009afa:	9004      	str	r0, [sp, #16]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d164      	bne.n	8009bca <set_buzzer_mode+0x406>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8009b00:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8009b04:	00b2      	lsls	r2, r6, #2
 8009b06:	00bb      	lsls	r3, r7, #2
 8009b08:	eb12 0b06 	adds.w	fp, r2, r6
 8009b0c:	ea43 7096 	orr.w	r0, r3, r6, lsr #30
 8009b10:	eb47 0500 	adc.w	r5, r7, r0
 8009b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b18:	00ed      	lsls	r5, r5, #3
 8009b1a:	ebb3 0a06 	subs.w	sl, r3, r6
 8009b1e:	ea45 755b 	orr.w	r5, r5, fp, lsr #29
 8009b22:	eb65 0507 	sbc.w	r5, r5, r7
 8009b26:	ea4f 1c0a 	mov.w	ip, sl, lsl #4
 8009b2a:	012d      	lsls	r5, r5, #4
 8009b2c:	eb1c 0906 	adds.w	r9, ip, r6
 8009b30:	ea45 751a 	orr.w	r5, r5, sl, lsr #28
 8009b34:	eb47 0505 	adc.w	r5, r7, r5
 8009b38:	01ad      	lsls	r5, r5, #6
 8009b3a:	f8cd c020 	str.w	ip, [sp, #32]
 8009b3e:	ea45 6599 	orr.w	r5, r5, r9, lsr #26
 8009b42:	ea4f 1c89 	mov.w	ip, r9, lsl #6
 8009b46:	9205      	str	r2, [sp, #20]
 8009b48:	9006      	str	r0, [sp, #24]
 8009b4a:	9307      	str	r3, [sp, #28]
 8009b4c:	4660      	mov	r0, ip
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4a23      	ldr	r2, [pc, #140]	; (8009be0 <set_buzzer_mode+0x41c>)
 8009b52:	f8cd c00c 	str.w	ip, [sp, #12]
 8009b56:	2300      	movs	r3, #0
 8009b58:	f7f6 ff40 	bl	80009dc <__aeabi_uldivmod>
 8009b5c:	9009      	str	r0, [sp, #36]	; 0x24
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8009b5e:	9803      	ldr	r0, [sp, #12]
 8009b60:	4920      	ldr	r1, [pc, #128]	; (8009be4 <set_buzzer_mode+0x420>)
 8009b62:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009b66:	4584      	cmp	ip, r0
 8009b68:	eb71 0505 	sbcs.w	r5, r1, r5
 8009b6c:	d32d      	bcc.n	8009bca <set_buzzer_mode+0x406>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009b6e:	9905      	ldr	r1, [sp, #20]
 8009b70:	198b      	adds	r3, r1, r6
 8009b72:	9906      	ldr	r1, [sp, #24]
 8009b74:	eb47 0301 	adc.w	r3, r7, r1
 8009b78:	9907      	ldr	r1, [sp, #28]
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	1b8a      	subs	r2, r1, r6
 8009b7e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8009b82:	eb63 0307 	sbc.w	r3, r3, r7
 8009b86:	9908      	ldr	r1, [sp, #32]
 8009b88:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <set_buzzer_mode+0x41c>)
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	198e      	adds	r6, r1, r6
 8009b8e:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8009b92:	eb47 0703 	adc.w	r7, r7, r3
 8009b96:	017f      	lsls	r7, r7, #5
 8009b98:	ea47 67d9 	orr.w	r7, r7, r9, lsr #27
 8009b9c:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4648      	mov	r0, r9
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 ff19 	bl	80009dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009baa:	490e      	ldr	r1, [pc, #56]	; (8009be4 <set_buzzer_mode+0x420>)
 8009bac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009bb0:	45cc      	cmp	ip, r9
 8009bb2:	41b9      	sbcs	r1, r7
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8009bb4:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8009bb6:	d308      	bcc.n	8009bca <set_buzzer_mode+0x406>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8009bb8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	9c04      	ldr	r4, [sp, #16]
 8009bc2:	9400      	str	r4, [sp, #0]
 8009bc4:	6804      	ldr	r4, [r0, #0]
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	47a0      	blx	r4
 8009bca:	2100      	movs	r1, #0
 8009bcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009bd0:	f001 fafe 	bl	800b1d0 <z_impl_k_sleep>
	return z_impl_k_mutex_unlock(mutex);
 8009bd4:	4804      	ldr	r0, [pc, #16]	; (8009be8 <set_buzzer_mode+0x424>)
}
 8009bd6:	b00f      	add	sp, #60	; 0x3c
 8009bd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	f000 bd08 	b.w	800a5f0 <z_impl_k_mutex_unlock>
 8009be0:	000f4240 	.word	0x000f4240
 8009be4:	000f423f 	.word	0x000f423f
 8009be8:	2000069c 	.word	0x2000069c

08009bec <irq_routine>:

void irq_routine(struct gpio_dt_spec *dev)
{
    irq_gpio_dev = dev;
 8009bec:	4b02      	ldr	r3, [pc, #8]	; (8009bf8 <irq_routine+0xc>)
{
 8009bee:	4602      	mov	r2, r0
    k_work_submit(&work_button_pressed);
 8009bf0:	4802      	ldr	r0, [pc, #8]	; (8009bfc <irq_routine+0x10>)
    irq_gpio_dev = dev;
 8009bf2:	601a      	str	r2, [r3, #0]
    k_work_submit(&work_button_pressed);
 8009bf4:	f000 be78 	b.w	800a8e8 <k_work_submit>
 8009bf8:	20001380 	.word	0x20001380
 8009bfc:	20001388 	.word	0x20001388

08009c00 <update_indication_task>:
    }
}


_Noreturn void update_indication_task(void)
{
 8009c00:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    uint8_t cnt = 0;
    uint8_t start_led_pos = 0;
    uint8_t end_led_pos = 0;
    uint8_t indication_type = 0;
    struct led_hsv color_hsv = {0};
 8009c04:	2500      	movs	r5, #0
{
 8009c06:	b097      	sub	sp, #92	; 0x5c
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 8009c08:	2240      	movs	r2, #64	; 0x40
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	a806      	add	r0, sp, #24
    struct led_hsv color_hsv = {0};
 8009c0e:	9502      	str	r5, [sp, #8]
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 8009c10:	f003 fd54 	bl	800d6bc <memset>
    struct led_strip_indicate_s *strip_indicate = {0};
 8009c14:	9503      	str	r5, [sp, #12]
	z_impl_k_poll_signal_init(sig);
 8009c16:	4890      	ldr	r0, [pc, #576]	; (8009e58 <update_indication_task+0x258>)
    k_poll_signal_init(&signal_indicate);
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
                      K_POLL_MODE_NOTIFY_ONLY,
                      &signal_indicate);

    if (!device_is_ready(strip_dev)) {
 8009c18:	4c90      	ldr	r4, [pc, #576]	; (8009e5c <update_indication_task+0x25c>)
 8009c1a:	f002 f92f 	bl	800be7c <z_impl_k_poll_signal_init>
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
 8009c1e:	4b8e      	ldr	r3, [pc, #568]	; (8009e58 <update_indication_task+0x258>)
 8009c20:	488f      	ldr	r0, [pc, #572]	; (8009e60 <update_indication_task+0x260>)
 8009c22:	462a      	mov	r2, r5
 8009c24:	2101      	movs	r1, #1
 8009c26:	f002 f857 	bl	800bcd8 <k_poll_event_init>
    if (!device_is_ready(strip_dev)) {
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	f000 f984 	bl	8009f38 <z_device_is_ready>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f000 810a 	beq.w	8009e4a <update_indication_task+0x24a>
 8009c36:	4d8b      	ldr	r5, [pc, #556]	; (8009e64 <update_indication_task+0x264>)
 8009c38:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8009e78 <update_indication_task+0x278>
 8009c3c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009e80 <update_indication_task+0x280>
        k_sleep(K_FOREVER);
    }

    while(1) {
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 8009c40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d041      	beq.n	8009cca <update_indication_task+0xca>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8009c46:	2200      	movs	r2, #0
 8009c48:	a903      	add	r1, sp, #12
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	f000 fbc1 	bl	800a3d4 <z_impl_k_msgq_get>
            k_msgq_get(&msgq_led_strip, &strip_indicate, K_NO_WAIT);
            led_strip_state = strip_indicate->led_strip_state;
 8009c52:	9a03      	ldr	r2, [sp, #12]
 8009c54:	1d13      	adds	r3, r2, #4
 8009c56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c5a:	ab04      	add	r3, sp, #16
 8009c5c:	e883 0003 	stmia.w	r3, {r0, r1}
            start_led_pos = strip_indicate->start_led_pos;
            end_led_pos = strip_indicate->end_led_pos;
            indication_type = strip_indicate->indication_type;
 8009c60:	7811      	ldrb	r1, [r2, #0]
            start_led_pos = strip_indicate->start_led_pos;
 8009c62:	f892 b001 	ldrb.w	fp, [r2, #1]
            end_led_pos = strip_indicate->end_led_pos;
 8009c66:	7897      	ldrb	r7, [r2, #2]

            /* If "blink" set -> we blinked
             * Esle -> set on strip connection quality and people number */
            switch (indication_type) {
 8009c68:	2901      	cmp	r1, #1
 8009c6a:	f000 809e 	beq.w	8009daa <update_indication_task+0x1aa>
 8009c6e:	2902      	cmp	r1, #2
 8009c70:	d040      	beq.n	8009cf4 <update_indication_task+0xf4>
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d1e4      	bne.n	8009c40 <update_indication_task+0x40>
                        cnt++;
                    }
                    led_strip_update_rgb(strip_dev, pixels_rgb, end_led_pos);
                    break;
                case INDICATION_TYPE_STATIC_COLOR:
                    switch (led_strip_state.strip_param.color) {
 8009c76:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009c7a:	2a04      	cmp	r2, #4
 8009c7c:	d807      	bhi.n	8009c8e <update_indication_task+0x8e>
 8009c7e:	e8df f002 	tbb	[pc, r2]
 8009c82:	3135      	.short	0x3135
 8009c84:	292d      	.short	0x292d
 8009c86:	03          	.byte	0x03
 8009c87:	00          	.byte	0x00
                            break;
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
                            break;
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 8009c88:	4b77      	ldr	r3, [pc, #476]	; (8009e68 <update_indication_task+0x268>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	9202      	str	r2, [sp, #8]
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 8009c8e:	45bb      	cmp	fp, r7
 8009c90:	d212      	bcs.n	8009cb8 <update_indication_task+0xb8>
 8009c92:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8009c96:	ab06      	add	r3, sp, #24
 8009c98:	eba8 080b 	sub.w	r8, r8, fp
 8009c9c:	fa5b f888 	uxtab	r8, fp, r8
 8009ca0:	eb03 068b 	add.w	r6, r3, fp, lsl #2
 8009ca4:	ab07      	add	r3, sp, #28
 8009ca6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8009caa:	4631      	mov	r1, r6
 8009cac:	a802      	add	r0, sp, #8
                    while (cnt < end_led_pos) {
 8009cae:	3604      	adds	r6, #4
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8009cb0:	f7fe ff66 	bl	8008b80 <led_hsv2rgb>
                    while (cnt < end_led_pos) {
 8009cb4:	4546      	cmp	r6, r8
 8009cb6:	d1f8      	bne.n	8009caa <update_indication_task+0xaa>
                    }

                    led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 8009cb8:	6820      	ldr	r0, [r4, #0]
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 8009cba:	6883      	ldr	r3, [r0, #8]
 8009cbc:	463a      	mov	r2, r7
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	a906      	add	r1, sp, #24
 8009cc2:	4798      	blx	r3
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 8009cc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1bd      	bne.n	8009c46 <update_indication_task+0x46>
	return z_impl_k_sleep(timeout);
 8009cca:	2100      	movs	r1, #0
 8009ccc:	2064      	movs	r0, #100	; 0x64
 8009cce:	f001 fa7f 	bl	800b1d0 <z_impl_k_sleep>
 8009cd2:	e7b5      	b.n	8009c40 <update_indication_task+0x40>
                            color_hsv = purple_hsv;
 8009cd4:	4b65      	ldr	r3, [pc, #404]	; (8009e6c <update_indication_task+0x26c>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	9202      	str	r2, [sp, #8]
                            break;
 8009cda:	e7d8      	b.n	8009c8e <update_indication_task+0x8e>
                            color_hsv = blue_hsv;
 8009cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ce0:	9202      	str	r2, [sp, #8]
                            break;
 8009ce2:	e7d4      	b.n	8009c8e <update_indication_task+0x8e>
                            color_hsv = green_hsv;
 8009ce4:	4b62      	ldr	r3, [pc, #392]	; (8009e70 <update_indication_task+0x270>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	9202      	str	r2, [sp, #8]
                            break;
 8009cea:	e7d0      	b.n	8009c8e <update_indication_task+0x8e>
                            color_hsv = red_hsv;
 8009cec:	4b61      	ldr	r3, [pc, #388]	; (8009e74 <update_indication_task+0x274>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	9202      	str	r2, [sp, #8]
                            break;
 8009cf2:	e7cc      	b.n	8009c8e <update_indication_task+0x8e>
                    switch (led_strip_state.strip_param.color) {
 8009cf4:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009cf8:	2a04      	cmp	r2, #4
 8009cfa:	d807      	bhi.n	8009d0c <update_indication_task+0x10c>
 8009cfc:	e8df f002 	tbb	[pc, r2]
 8009d00:	4d514549 	.word	0x4d514549
 8009d04:	03          	.byte	0x03
 8009d05:	00          	.byte	0x00
                            color_hsv = yellow_hsv;
 8009d06:	4b58      	ldr	r3, [pc, #352]	; (8009e68 <update_indication_task+0x268>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	9202      	str	r2, [sp, #8]
                    while (cnt < end_led_pos) {
 8009d0c:	45bb      	cmp	fp, r7
 8009d0e:	d213      	bcs.n	8009d38 <update_indication_task+0x138>
 8009d10:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8009d14:	eba8 080b 	sub.w	r8, r8, fp
 8009d18:	ab06      	add	r3, sp, #24
 8009d1a:	fa5b f888 	uxtab	r8, fp, r8
 8009d1e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8009d22:	ab07      	add	r3, sp, #28
 8009d24:	eb03 0888 	add.w	r8, r3, r8, lsl #2
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8009d28:	4659      	mov	r1, fp
 8009d2a:	a802      	add	r0, sp, #8
                    while (cnt < end_led_pos) {
 8009d2c:	f10b 0b04 	add.w	fp, fp, #4
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8009d30:	f7fe ff26 	bl	8008b80 <led_hsv2rgb>
                    while (cnt < end_led_pos) {
 8009d34:	45d8      	cmp	r8, fp
 8009d36:	d1f7      	bne.n	8009d28 <update_indication_task+0x128>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 8009d38:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8009d3c:	b1f3      	cbz	r3, 8009d7c <update_indication_task+0x17c>
 8009d3e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8009e84 <update_indication_task+0x284>
 8009d42:	2600      	movs	r6, #0
                        led_strip_update_rgb(strip_dev, color_rgb, end_led_pos);
 8009d44:	6820      	ldr	r0, [r4, #0]
 8009d46:	6883      	ldr	r3, [r0, #8]
 8009d48:	463a      	mov	r2, r7
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	a906      	add	r1, sp, #24
 8009d4e:	4798      	blx	r3
 8009d50:	2100      	movs	r1, #0
 8009d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d56:	f001 fa3b 	bl	800b1d0 <z_impl_k_sleep>
                        led_strip_update_rgb(strip_dev, empty_rgb, end_led_pos);
 8009d5a:	6820      	ldr	r0, [r4, #0]
 8009d5c:	6883      	ldr	r3, [r0, #8]
 8009d5e:	463a      	mov	r2, r7
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4641      	mov	r1, r8
 8009d64:	4798      	blx	r3
 8009d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	f001 fa30 	bl	800b1d0 <z_impl_k_sleep>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 8009d70:	3601      	adds	r6, #1
 8009d72:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8009d76:	b2f3      	uxtb	r3, r6
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d8e3      	bhi.n	8009d44 <update_indication_task+0x144>
                    led_strip_update_rgb(strip_dev, pixels_rgb, end_led_pos);
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	493e      	ldr	r1, [pc, #248]	; (8009e78 <update_indication_task+0x278>)
 8009d80:	6883      	ldr	r3, [r0, #8]
 8009d82:	463a      	mov	r2, r7
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4798      	blx	r3
 8009d88:	e75a      	b.n	8009c40 <update_indication_task+0x40>
                            color_hsv = green_hsv;
 8009d8a:	4b39      	ldr	r3, [pc, #228]	; (8009e70 <update_indication_task+0x270>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	9202      	str	r2, [sp, #8]
                            break;
 8009d90:	e7bc      	b.n	8009d0c <update_indication_task+0x10c>
                            color_hsv = red_hsv;
 8009d92:	4b38      	ldr	r3, [pc, #224]	; (8009e74 <update_indication_task+0x274>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	9202      	str	r2, [sp, #8]
                            break;
 8009d98:	e7b8      	b.n	8009d0c <update_indication_task+0x10c>
                            color_hsv = purple_hsv;
 8009d9a:	4b34      	ldr	r3, [pc, #208]	; (8009e6c <update_indication_task+0x26c>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	9202      	str	r2, [sp, #8]
                            break;
 8009da0:	e7b4      	b.n	8009d0c <update_indication_task+0x10c>
                            color_hsv = blue_hsv;
 8009da2:	f8d9 2000 	ldr.w	r2, [r9]
 8009da6:	9202      	str	r2, [sp, #8]
                            break;
 8009da8:	e7b0      	b.n	8009d0c <update_indication_task+0x10c>
                    if (led_strip_state.status.con_status >= 0)
 8009daa:	9e04      	ldr	r6, [sp, #16]
            led_strip_state = strip_indicate->led_strip_state;
 8009dac:	6893      	ldr	r3, [r2, #8]
 8009dae:	9301      	str	r3, [sp, #4]
                    if (led_strip_state.status.con_status >= 0)
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	da09      	bge.n	8009dc8 <update_indication_task+0x1c8>
                    if (led_strip_state.status.people_num >= 0)
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	da2d      	bge.n	8009e16 <update_indication_task+0x216>
                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8009dba:	6820      	ldr	r0, [r4, #0]
 8009dbc:	492e      	ldr	r1, [pc, #184]	; (8009e78 <update_indication_task+0x278>)
 8009dbe:	6883      	ldr	r3, [r0, #8]
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4798      	blx	r3
 8009dc6:	e73b      	b.n	8009c40 <update_indication_task+0x40>
        if (*pos < start_pos + con_status) {
 8009dc8:	fa5b f686 	uxtab	r6, fp, r6
    while (*pos < start_pos + RSSI_LED_LEN) {
 8009dcc:	f10b 0307 	add.w	r3, fp, #7
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	4633      	mov	r3, r6
 8009dd4:	46d8      	mov	r8, fp
 8009dd6:	465e      	mov	r6, fp
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8009dd8:	4f26      	ldr	r7, [pc, #152]	; (8009e74 <update_indication_task+0x274>)
    while (*pos < start_pos + RSSI_LED_LEN) {
 8009dda:	469b      	mov	fp, r3
 8009ddc:	e007      	b.n	8009dee <update_indication_task+0x1ee>
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 8009dde:	4824      	ldr	r0, [pc, #144]	; (8009e70 <update_indication_task+0x270>)
 8009de0:	f7fe fece 	bl	8008b80 <led_hsv2rgb>
        (*pos)++;
 8009de4:	1c73      	adds	r3, r6, #1
 8009de6:	b2de      	uxtb	r6, r3
    while (*pos < start_pos + RSSI_LED_LEN) {
 8009de8:	9b00      	ldr	r3, [sp, #0]
 8009dea:	429e      	cmp	r6, r3
 8009dec:	dc0f      	bgt.n	8009e0e <update_indication_task+0x20e>
        if (*pos < start_pos + con_status) {
 8009dee:	455e      	cmp	r6, fp
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8009df0:	f108 0201 	add.w	r2, r8, #1
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8009df4:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
        if (*pos < start_pos + con_status) {
 8009df8:	da23      	bge.n	8009e42 <update_indication_task+0x242>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8009dfa:	4296      	cmp	r6, r2
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8009dfc:	4638      	mov	r0, r7
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8009dfe:	dcee      	bgt.n	8009dde <update_indication_task+0x1de>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 8009e00:	f7fe febe 	bl	8008b80 <led_hsv2rgb>
        (*pos)++;
 8009e04:	1c73      	adds	r3, r6, #1
 8009e06:	b2de      	uxtb	r6, r3
    while (*pos < start_pos + RSSI_LED_LEN) {
 8009e08:	9b00      	ldr	r3, [sp, #0]
 8009e0a:	429e      	cmp	r6, r3
 8009e0c:	ddef      	ble.n	8009dee <update_indication_task+0x1ee>
                    if (led_strip_state.status.people_num >= 0)
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	46b3      	mov	fp, r6
 8009e14:	dbd1      	blt.n	8009dba <update_indication_task+0x1ba>
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8009e16:	f89d 8004 	ldrb.w	r8, [sp, #4]
 8009e1a:	465f      	mov	r7, fp
 8009e1c:	f10b 0605 	add.w	r6, fp, #5
        if (((*pos) - start_pos) < people_num)
 8009e20:	ebab 0307 	sub.w	r3, fp, r7
 8009e24:	4543      	cmp	r3, r8
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 8009e26:	eb0a 018b 	add.w	r1, sl, fp, lsl #2
        (*pos)++;
 8009e2a:	f10b 0b01 	add.w	fp, fp, #1
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 8009e2e:	4648      	mov	r0, r9
        (*pos)++;
 8009e30:	fa5f fb8b 	uxtb.w	fp, fp
            led_hsv2rgb(&empty_hsv, &pixels_rgb[*pos]);
 8009e34:	bfa8      	it	ge
 8009e36:	4811      	ldrge	r0, [pc, #68]	; (8009e7c <update_indication_task+0x27c>)
 8009e38:	f7fe fea2 	bl	8008b80 <led_hsv2rgb>
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8009e3c:	45b3      	cmp	fp, r6
 8009e3e:	ddef      	ble.n	8009e20 <update_indication_task+0x220>
 8009e40:	e7bb      	b.n	8009dba <update_indication_task+0x1ba>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 8009e42:	480e      	ldr	r0, [pc, #56]	; (8009e7c <update_indication_task+0x27c>)
 8009e44:	f7fe fe9c 	bl	8008b80 <led_hsv2rgb>
 8009e48:	e7dc      	b.n	8009e04 <update_indication_task+0x204>
 8009e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e52:	f001 f9bd 	bl	800b1d0 <z_impl_k_sleep>
 8009e56:	e6ee      	b.n	8009c36 <update_indication_task+0x36>
 8009e58:	2000143c 	.word	0x2000143c
 8009e5c:	2000036c 	.word	0x2000036c
 8009e60:	200013e8 	.word	0x200013e8
 8009e64:	200006b0 	.word	0x200006b0
 8009e68:	0800eaec 	.word	0x0800eaec
 8009e6c:	0800eae4 	.word	0x0800eae4
 8009e70:	0800eae0 	.word	0x0800eae0
 8009e74:	0800eae8 	.word	0x0800eae8
 8009e78:	200013fc 	.word	0x200013fc
 8009e7c:	0800eadc 	.word	0x0800eadc
 8009e80:	0800ead8 	.word	0x0800ead8
 8009e84:	200013a8 	.word	0x200013a8

08009e88 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop

08009e8c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <z_sys_init_run_level+0x40>)
 8009e8e:	1c42      	adds	r2, r0, #1
{
 8009e90:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8009e92:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009e96:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8009e9a:	42b4      	cmp	r4, r6
 8009e9c:	d215      	bcs.n	8009eca <z_sys_init_run_level+0x3e>
		const struct device *dev = entry->dev;
		int rc = entry->init(dev);
 8009e9e:	e9d4 3500 	ldrd	r3, r5, [r4]
 8009ea2:	4628      	mov	r0, r5
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8009ea4:	3408      	adds	r4, #8
		int rc = entry->init(dev);
 8009ea6:	4798      	blx	r3

		if (dev != NULL) {
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	d0f6      	beq.n	8009e9a <z_sys_init_run_level+0xe>
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8009eac:	68ea      	ldr	r2, [r5, #12]
			if (rc != 0) {
 8009eae:	b130      	cbz	r0, 8009ebe <z_sys_init_run_level+0x32>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	bfb8      	it	lt
 8009eb4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
 8009eb6:	28ff      	cmp	r0, #255	; 0xff
 8009eb8:	bfa8      	it	ge
 8009eba:	20ff      	movge	r0, #255	; 0xff
 8009ebc:	7010      	strb	r0, [r2, #0]
			}
			dev->state->initialized = true;
 8009ebe:	7853      	ldrb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8009ec0:	42b4      	cmp	r4, r6
			dev->state->initialized = true;
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8009ec8:	d3e9      	bcc.n	8009e9e <z_sys_init_run_level+0x12>
		}
	}
}
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	0800eaf0 	.word	0x0800eaf0

08009ed0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8009ed0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8009ed2:	b350      	cbz	r0, 8009f2a <z_impl_device_get_binding+0x5a>
 8009ed4:	7803      	ldrb	r3, [r0, #0]
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	b33b      	cbz	r3, 8009f2a <z_impl_device_get_binding+0x5a>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8009eda:	4a15      	ldr	r2, [pc, #84]	; (8009f30 <z_impl_device_get_binding+0x60>)
 8009edc:	4d15      	ldr	r5, [pc, #84]	; (8009f34 <z_impl_device_get_binding+0x64>)
 8009ede:	42aa      	cmp	r2, r5
 8009ee0:	d023      	beq.n	8009f2a <z_impl_device_get_binding+0x5a>
 8009ee2:	4614      	mov	r4, r2
	 */
	if (dev == NULL) {
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 8009ee4:	68e3      	ldr	r3, [r4, #12]
 8009ee6:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (dev->name == name)) {
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef0:	d102      	bne.n	8009ef8 <z_impl_device_get_binding+0x28>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	42b3      	cmp	r3, r6
 8009ef6:	d016      	beq.n	8009f26 <z_impl_device_get_binding+0x56>
	for (dev = __device_start; dev != __device_end; dev++) {
 8009ef8:	3418      	adds	r4, #24
 8009efa:	42ac      	cmp	r4, r5
 8009efc:	d1f2      	bne.n	8009ee4 <z_impl_device_get_binding+0x14>
	for (dev = __device_start; dev != __device_end; dev++) {
 8009efe:	42aa      	cmp	r2, r5
 8009f00:	d013      	beq.n	8009f2a <z_impl_device_get_binding+0x5a>
 8009f02:	4c0b      	ldr	r4, [pc, #44]	; (8009f30 <z_impl_device_get_binding+0x60>)
 8009f04:	e002      	b.n	8009f0c <z_impl_device_get_binding+0x3c>
 8009f06:	3418      	adds	r4, #24
 8009f08:	42ac      	cmp	r4, r5
 8009f0a:	d00e      	beq.n	8009f2a <z_impl_device_get_binding+0x5a>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8009f0c:	68e3      	ldr	r3, [r4, #12]
 8009f0e:	881b      	ldrh	r3, [r3, #0]
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8009f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f18:	d1f5      	bne.n	8009f06 <z_impl_device_get_binding+0x36>
 8009f1a:	6821      	ldr	r1, [r4, #0]
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7f6 ff92 	bl	8000e46 <strcmp>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d1ef      	bne.n	8009f06 <z_impl_device_get_binding+0x36>
}
 8009f26:	4620      	mov	r0, r4
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8009f2a:	2400      	movs	r4, #0
}
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	0800dddc 	.word	0x0800dddc
 8009f34:	0800df74 	.word	0x0800df74

08009f38 <z_device_is_ready>:
	if (dev == NULL) {
 8009f38:	b140      	cbz	r0, 8009f4c <z_device_is_ready+0x14>
	return dev->state->initialized && (dev->state->init_res == 0U);
 8009f3a:	68c3      	ldr	r3, [r0, #12]
 8009f3c:	8818      	ldrh	r0, [r3, #0]
 8009f3e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009f42:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8009f46:	fab0 f080 	clz	r0, r0
 8009f4a:	0940      	lsrs	r0, r0, #5
}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop

08009f50 <arch_system_halt>:
	__asm__ volatile(
 8009f50:	f04f 0210 	mov.w	r2, #16
 8009f54:	f3ef 8311 	mrs	r3, BASEPRI
 8009f58:	f382 8812 	msr	BASEPRI_MAX, r2
 8009f5c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8009f60:	e7fe      	b.n	8009f60 <arch_system_halt+0x10>
 8009f62:	bf00      	nop

08009f64 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8009f64:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8009f66:	f7ff fff3 	bl	8009f50 <arch_system_halt>
 8009f6a:	bf00      	nop

08009f6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	4605      	mov	r5, r0
 8009f72:	9101      	str	r1, [sp, #4]
 8009f74:	f04f 0310 	mov.w	r3, #16
 8009f78:	f3ef 8611 	mrs	r6, BASEPRI
 8009f7c:	f383 8812 	msr	BASEPRI_MAX, r3
 8009f80:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8009f84:	f001 f98a 	bl	800b29c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8009f88:	9901      	ldr	r1, [sp, #4]
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f7ff ffe9 	bl	8009f64 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8009f92:	f386 8811 	msr	BASEPRI, r6
 8009f96:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8009f9a:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 8009f9c:	b002      	add	sp, #8
 8009f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fa2:	f7f8 bdff 	b.w	8002ba4 <z_impl_k_thread_abort>
 8009fa6:	bf00      	nop

08009fa8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8009fa8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <bg_thread_main+0x30>)
 8009fac:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8009fae:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8009fb0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8009fb2:	f7ff ff6b 	bl	8009e8c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8009fb6:	f001 ff99 	bl	800beec <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
 8009fba:	f7f8 faad 	bl	8002518 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8009fbe:	2003      	movs	r0, #3
 8009fc0:	f7ff ff64 	bl	8009e8c <z_sys_init_run_level>

	z_init_static_threads();
 8009fc4:	f000 f926 	bl	800a214 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
 8009fc8:	f001 ff8e 	bl	800bee8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8009fcc:	4a03      	ldr	r2, [pc, #12]	; (8009fdc <bg_thread_main+0x34>)
 8009fce:	7b13      	ldrb	r3, [r2, #12]
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
 8009fd4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8009fd6:	bd08      	pop	{r3, pc}
 8009fd8:	200014a9 	.word	0x200014a9
 8009fdc:	20000b40 	.word	0x20000b40

08009fe0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8009fe0:	4802      	ldr	r0, [pc, #8]	; (8009fec <z_bss_zero+0xc>)
 8009fe2:	4a03      	ldr	r2, [pc, #12]	; (8009ff0 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	1a12      	subs	r2, r2, r0
 8009fe8:	f003 bb68 	b.w	800d6bc <memset>
 8009fec:	200007b8 	.word	0x200007b8
 8009ff0:	200014ac 	.word	0x200014ac

08009ff4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8009ff4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8009ff8:	f8df a100 	ldr.w	sl, [pc, #256]	; 800a0fc <z_cstart+0x108>
 8009ffc:	b0b9      	sub	sp, #228	; 0xe4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009ffe:	f38a 8808 	msr	MSP, sl
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800a002:	4d36      	ldr	r5, [pc, #216]	; (800a0dc <z_cstart+0xe8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
 800a004:	4e36      	ldr	r6, [pc, #216]	; (800a0e0 <z_cstart+0xec>)
 800a006:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a008:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800a100 <z_cstart+0x10c>
	z_setup_new_thread(thread, stack,
 800a00c:	4f35      	ldr	r7, [pc, #212]	; (800a0e4 <z_cstart+0xf0>)
 800a00e:	2400      	movs	r4, #0
 800a010:	22f0      	movs	r2, #240	; 0xf0
 800a012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a016:	616b      	str	r3, [r5, #20]
 800a018:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 800a01c:	77ec      	strb	r4, [r5, #31]
 800a01e:	762c      	strb	r4, [r5, #24]
 800a020:	766c      	strb	r4, [r5, #25]
 800a022:	76ac      	strb	r4, [r5, #26]
 800a024:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800a028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a02a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a02e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800a030:	f7f8 fd84 	bl	8002b3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800a034:	f7f8 fa98 	bl	8002568 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800a038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a03c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800a03e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800a040:	f7f8 fe52 	bl	8002ce8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800a044:	f7f8 fdc4 	bl	8002bd0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
 800a048:	f240 1201 	movw	r2, #257	; 0x101
	_current_cpu->current = dummy_thread;
 800a04c:	ab06      	add	r3, sp, #24
	dummy_thread->base.user_options = K_ESSENTIAL;
 800a04e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800a052:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
 800a054:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
 800a058:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800a05a:	f7ff ff15 	bl	8009e88 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800a05e:	4620      	mov	r0, r4
	_kernel.ready_q.cache = &z_main_thread;
 800a060:	4d21      	ldr	r5, [pc, #132]	; (800a0e8 <z_cstart+0xf4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800a062:	f7ff ff13 	bl	8009e8c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800a066:	2001      	movs	r0, #1
 800a068:	f7ff ff10 	bl	8009e8c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a06c:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 800a070:	f000 ffee 	bl	800b050 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a074:	4b1d      	ldr	r3, [pc, #116]	; (800a0ec <z_cstart+0xf8>)
 800a076:	491e      	ldr	r1, [pc, #120]	; (800a0f0 <z_cstart+0xfc>)
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a07e:	464b      	mov	r3, r9
 800a080:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800a084:	e9cd 4400 	strd	r4, r4, [sp]
 800a088:	f8cd b010 	str.w	fp, [sp, #16]
 800a08c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
 800a08e:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a090:	f000 f844 	bl	800a11c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800a094:	7b6b      	ldrb	r3, [r5, #13]
 800a096:	4680      	mov	r8, r0
 800a098:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 800a09c:	4628      	mov	r0, r5
 800a09e:	736b      	strb	r3, [r5, #13]
 800a0a0:	f000 fe18 	bl	800acd4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 800a0a4:	230f      	movs	r3, #15
 800a0a6:	4913      	ldr	r1, [pc, #76]	; (800a0f4 <z_cstart+0x100>)
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a0ae:	4b12      	ldr	r3, [pc, #72]	; (800a0f8 <z_cstart+0x104>)
 800a0b0:	9600      	str	r6, [sp, #0]
 800a0b2:	e9cd b404 	strd	fp, r4, [sp, #16]
 800a0b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f000 f82e 	bl	800a11c <z_setup_new_thread>
 800a0c0:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].id = i;
 800a0c2:	7534      	strb	r4, [r6, #20]
 800a0c4:	f023 0304 	bic.w	r3, r3, #4
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800a0c8:	464a      	mov	r2, r9
 800a0ca:	4641      	mov	r1, r8
 800a0cc:	4628      	mov	r0, r5
		_kernel.cpus[i].irq_stack =
 800a0ce:	f8c6 a004 	str.w	sl, [r6, #4]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800a0d2:	60f7      	str	r7, [r6, #12]
 800a0d4:	737b      	strb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800a0d6:	f7f8 fbf3 	bl	80028c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800a0da:	bf00      	nop
 800a0dc:	e000ed00 	.word	0xe000ed00
 800a0e0:	2000144c 	.word	0x2000144c
 800a0e4:	20000a78 	.word	0x20000a78
 800a0e8:	20000b40 	.word	0x20000b40
 800a0ec:	0800eb08 	.word	0x0800eb08
 800a0f0:	20002280 	.word	0x20002280
 800a0f4:	20003300 	.word	0x20003300
 800a0f8:	0800a305 	.word	0x0800a305
 800a0fc:	20003d00 	.word	0x20003d00
 800a100:	08009fa9 	.word	0x08009fa9

0800a104 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a104:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
 800a108:	3800      	subs	r0, #0
 800a10a:	bf18      	it	ne
 800a10c:	2001      	movne	r0, #1
 800a10e:	4770      	bx	lr

0800a110 <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 800a110:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop

0800a118 <z_impl_k_thread_start>:

void z_impl_k_thread_start(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, start, thread);

	z_sched_start(thread);
 800a118:	f000 bdec 	b.w	800acf4 <z_sched_start>

0800a11c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800a11c:	b570      	push	{r4, r5, r6, lr}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a11e:	3207      	adds	r2, #7
{
 800a120:	b084      	sub	sp, #16
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a122:	f022 0507 	bic.w	r5, r2, #7
{
 800a126:	460a      	mov	r2, r1

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800a128:	3220      	adds	r2, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800a12a:	6682      	str	r2, [r0, #104]	; 0x68

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800a12c:	2600      	movs	r6, #0
{
 800a12e:	9a08      	ldr	r2, [sp, #32]
	new_thread->stack_info.size = stack_buf_size;
 800a130:	66c5      	str	r5, [r0, #108]	; 0x6c
	node->prev = NULL;
 800a132:	e9c0 6606 	strd	r6, r6, [r0, #24]
	thread_base->pended_on = NULL;
 800a136:	6086      	str	r6, [r0, #8]
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
 800a138:	73c6      	strb	r6, [r0, #15]
	new_thread->stack_info.delta = delta;
 800a13a:	6706      	str	r6, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a13c:	9200      	str	r2, [sp, #0]
{
 800a13e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a140:	9201      	str	r2, [sp, #4]
{
 800a142:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a144:	9202      	str	r2, [sp, #8]
{
 800a146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	thread_base->prio = priority;
 800a148:	7382      	strb	r2, [r0, #14]
{
 800a14a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->user_options = (uint8_t)options;
 800a14c:	7302      	strb	r2, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a14e:	3520      	adds	r5, #32
 800a150:	f100 0258 	add.w	r2, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 800a154:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
	stack_ptr = (char *)stack + stack_obj_size;
 800a158:	440d      	add	r5, r1
	thread_base->thread_state = (uint8_t)initial_state;
 800a15a:	2204      	movs	r2, #4
 800a15c:	7342      	strb	r2, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a15e:	462a      	mov	r2, r5
{
 800a160:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a162:	f7f8 fb17 	bl	8002794 <arch_new_thread>
	if (!_current) {
 800a166:	4b04      	ldr	r3, [pc, #16]	; (800a178 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
 800a168:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	b103      	cbz	r3, 800a170 <z_setup_new_thread+0x54>
	new_thread->resource_pool = _current->resource_pool;
 800a16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800a170:	6763      	str	r3, [r4, #116]	; 0x74
}
 800a172:	4628      	mov	r0, r5
 800a174:	b004      	add	sp, #16
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	2000144c 	.word	0x2000144c

0800a17c <z_impl_k_thread_create>:
{
 800a17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17e:	460d      	mov	r5, r1
 800a180:	b085      	sub	sp, #20
 800a182:	3520      	adds	r5, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a184:	3207      	adds	r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800a186:	6685      	str	r5, [r0, #104]	; 0x68
{
 800a188:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
 800a18a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a18c:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
 800a190:	66c2      	str	r2, [r0, #108]	; 0x6c
	node->prev = NULL;
 800a192:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
 800a196:	6085      	str	r5, [r0, #8]
	thread_base->sched_locked = 0U;
 800a198:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 800a19a:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a19c:	9600      	str	r6, [sp, #0]
{
 800a19e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a1a0:	9601      	str	r6, [sp, #4]
{
 800a1a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a1a4:	9602      	str	r6, [sp, #8]
{
 800a1a6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->prio = priority;
 800a1a8:	7386      	strb	r6, [r0, #14]
{
 800a1aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	thread_base->user_options = (uint8_t)options;
 800a1ac:	7306      	strb	r6, [r0, #12]
 800a1ae:	f100 0658 	add.w	r6, r0, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
 800a1b2:	e9c0 6616 	strd	r6, r6, [r0, #88]	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a1b6:	3220      	adds	r2, #32
	thread_base->thread_state = (uint8_t)initial_state;
 800a1b8:	2604      	movs	r6, #4
 800a1ba:	7346      	strb	r6, [r0, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a1bc:	440a      	add	r2, r1
{
 800a1be:	4604      	mov	r4, r0
 800a1c0:	e9dd 7610 	ldrd	r7, r6, [sp, #64]	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a1c4:	f7f8 fae6 	bl	8002794 <arch_new_thread>
	if (!_current) {
 800a1c8:	4b10      	ldr	r3, [pc, #64]	; (800a20c <z_impl_k_thread_create+0x90>)
	new_thread->init_data = NULL;
 800a1ca:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	b103      	cbz	r3, 800a1d2 <z_impl_k_thread_create+0x56>
	new_thread->resource_pool = _current->resource_pool;
 800a1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 800a1d2:	6763      	str	r3, [r4, #116]	; 0x74
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800a1d4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800a1d8:	bf08      	it	eq
 800a1da:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800a1de:	d102      	bne.n	800a1e6 <z_impl_k_thread_create+0x6a>
}
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	b005      	add	sp, #20
 800a1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800a1e6:	ea56 0307 	orrs.w	r3, r6, r7
 800a1ea:	d105      	bne.n	800a1f8 <z_impl_k_thread_create+0x7c>
	z_sched_start(thread);
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fd81 	bl	800acf4 <z_sched_start>
}
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	b005      	add	sp, #20
 800a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800a1f8:	f104 0018 	add.w	r0, r4, #24
 800a1fc:	4904      	ldr	r1, [pc, #16]	; (800a210 <z_impl_k_thread_create+0x94>)
 800a1fe:	463a      	mov	r2, r7
 800a200:	4633      	mov	r3, r6
 800a202:	f001 f97b 	bl	800b4fc <z_add_timeout>
 800a206:	4620      	mov	r0, r4
 800a208:	b005      	add	sp, #20
 800a20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20c:	2000144c 	.word	0x2000144c
 800a210:	0800aae9 	.word	0x0800aae9

0800a214 <z_init_static_threads>:
{
 800a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800a218:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800a2f8 <z_init_static_threads+0xe4>
 800a21c:	4f35      	ldr	r7, [pc, #212]	; (800a2f4 <z_init_static_threads+0xe0>)
 800a21e:	45ba      	cmp	sl, r7
{
 800a220:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
 800a222:	d23f      	bcs.n	800a2a4 <z_init_static_threads+0x90>
 800a224:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800a300 <z_init_static_threads+0xec>
 800a228:	4655      	mov	r5, sl
	thread_base->pended_on = NULL;
 800a22a:	2600      	movs	r6, #0
	thread_base->thread_state = (uint8_t)initial_state;
 800a22c:	f04f 0804 	mov.w	r8, #4
		z_setup_new_thread(
 800a230:	e9d5 4100 	ldrd	r4, r1, [r5]
	thread_base->user_options = (uint8_t)options;
 800a234:	edd5 7a08 	vldr	s15, [r5, #32]
		z_setup_new_thread(
 800a238:	68aa      	ldr	r2, [r5, #8]
 800a23a:	6928      	ldr	r0, [r5, #16]
 800a23c:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 800a240:	9004      	str	r0, [sp, #16]
 800a242:	e9d5 ce05 	ldrd	ip, lr, [r5, #20]
	thread_base->user_options = (uint8_t)options;
 800a246:	ee17 0a90 	vmov	r0, s15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a24a:	3207      	adds	r2, #7
		z_setup_new_thread(
 800a24c:	68eb      	ldr	r3, [r5, #12]
	thread_base->prio = priority;
 800a24e:	f884 b00e 	strb.w	fp, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a252:	f022 0207 	bic.w	r2, r2, #7
 800a256:	f104 0b58 	add.w	fp, r4, #88	; 0x58
 800a25a:	e9c4 bb16 	strd	fp, fp, [r4, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
 800a25e:	7320      	strb	r0, [r4, #12]
	new_thread->stack_info.size = stack_buf_size;
 800a260:	66e2      	str	r2, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a262:	9804      	ldr	r0, [sp, #16]
	thread_base->pended_on = NULL;
 800a264:	60a6      	str	r6, [r4, #8]
 800a266:	f101 0b20 	add.w	fp, r1, #32
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800a26a:	3220      	adds	r2, #32
	node->prev = NULL;
 800a26c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->thread_state = (uint8_t)initial_state;
 800a270:	f884 800d 	strb.w	r8, [r4, #13]
	thread_base->sched_locked = 0U;
 800a274:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
 800a276:	6726      	str	r6, [r4, #112]	; 0x70
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800a278:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a27c:	440a      	add	r2, r1
 800a27e:	9000      	str	r0, [sp, #0]
 800a280:	e9cd ce01 	strd	ip, lr, [sp, #4]
 800a284:	4620      	mov	r0, r4
	thread_base->user_options = (uint8_t)options;
 800a286:	edcd 7a05 	vstr	s15, [sp, #20]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800a28a:	f7f8 fa83 	bl	8002794 <arch_new_thread>
	if (!_current) {
 800a28e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	new_thread->init_data = NULL;
 800a292:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
 800a294:	b103      	cbz	r3, 800a298 <z_init_static_threads+0x84>
	new_thread->resource_pool = _current->resource_pool;
 800a296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
		thread_data->init_thread->init_data = thread_data;
 800a298:	682a      	ldr	r2, [r5, #0]
 800a29a:	6763      	str	r3, [r4, #116]	; 0x74
 800a29c:	6555      	str	r5, [r2, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800a29e:	3530      	adds	r5, #48	; 0x30
 800a2a0:	42bd      	cmp	r5, r7
 800a2a2:	d3c5      	bcc.n	800a230 <z_init_static_threads+0x1c>
	k_sched_lock();
 800a2a4:	f000 fe94 	bl	800afd0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800a2a8:	45ba      	cmp	sl, r7
 800a2aa:	d21d      	bcs.n	800a2e8 <z_init_static_threads+0xd4>
 800a2ac:	4c12      	ldr	r4, [pc, #72]	; (800a2f8 <z_init_static_threads+0xe4>)
 800a2ae:	4e13      	ldr	r6, [pc, #76]	; (800a2fc <z_init_static_threads+0xe8>)
			return t * ((uint64_t)to_hz / from_hz);
 800a2b0:	250a      	movs	r5, #10
 800a2b2:	e005      	b.n	800a2c0 <z_init_static_threads+0xac>
	z_sched_start(thread);
 800a2b4:	4660      	mov	r0, ip
 800a2b6:	f000 fd1d 	bl	800acf4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800a2ba:	3430      	adds	r4, #48	; 0x30
 800a2bc:	42bc      	cmp	r4, r7
 800a2be:	d213      	bcs.n	800a2e8 <z_init_static_threads+0xd4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800a2c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					    K_MSEC(thread_data->init_delay));
 800a2c2:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800a2c6:	3101      	adds	r1, #1
 800a2c8:	fb83 2305 	smull	r2, r3, r3, r5
 800a2cc:	d0f5      	beq.n	800a2ba <z_init_static_threads+0xa6>
			schedule_new_thread(thread_data->init_thread,
 800a2ce:	f8d4 c000 	ldr.w	ip, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800a2d2:	ea52 0103 	orrs.w	r1, r2, r3
 800a2d6:	f10c 0018 	add.w	r0, ip, #24
 800a2da:	4631      	mov	r1, r6
 800a2dc:	d0ea      	beq.n	800a2b4 <z_init_static_threads+0xa0>
	_FOREACH_STATIC_THREAD(thread_data) {
 800a2de:	3430      	adds	r4, #48	; 0x30
 800a2e0:	f001 f90c 	bl	800b4fc <z_add_timeout>
 800a2e4:	42bc      	cmp	r4, r7
 800a2e6:	d3eb      	bcc.n	800a2c0 <z_init_static_threads+0xac>
}
 800a2e8:	b007      	add	sp, #28
 800a2ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
 800a2ee:	f000 be83 	b.w	800aff8 <k_sched_unlock>
 800a2f2:	bf00      	nop
 800a2f4:	20000624 	.word	0x20000624
 800a2f8:	20000594 	.word	0x20000594
 800a2fc:	0800aae9 	.word	0x0800aae9
 800a300:	2000144c 	.word	0x2000144c

0800a304 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800a304:	b508      	push	{r3, lr}
	__asm__ volatile(
 800a306:	f04f 0210 	mov.w	r2, #16
 800a30a:	f3ef 8311 	mrs	r3, BASEPRI
 800a30e:	f382 8812 	msr	BASEPRI_MAX, r2
 800a312:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800a316:	f7f8 f92d 	bl	8002574 <arch_cpu_idle>
 800a31a:	e7f4      	b.n	800a306 <idle+0x2>

0800a31c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	b082      	sub	sp, #8
 800a324:	460e      	mov	r6, r1
 800a326:	4615      	mov	r5, r2

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800a328:	f100 0808 	add.w	r8, r0, #8
 800a32c:	f04f 0210 	mov.w	r2, #16
 800a330:	f3ef 8711 	mrs	r7, BASEPRI
 800a334:	f382 8812 	msr	BASEPRI_MAX, r2
 800a338:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800a33c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800a33e:	6902      	ldr	r2, [r0, #16]
 800a340:	4291      	cmp	r1, r2
 800a342:	d30b      	bcc.n	800a35c <z_impl_k_msgq_put+0x40>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800a344:	ea55 0203 	orrs.w	r2, r5, r3
 800a348:	d135      	bne.n	800a3b6 <z_impl_k_msgq_put+0x9a>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800a34a:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800a34e:	f387 8811 	msr	BASEPRI, r7
 800a352:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800a356:	b002      	add	sp, #8
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800a35c:	f000 fd8a 	bl	800ae74 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a360:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
 800a362:	4605      	mov	r5, r0
 800a364:	b180      	cbz	r0, 800a388 <z_impl_k_msgq_put+0x6c>
 800a366:	4631      	mov	r1, r6
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800a368:	2400      	movs	r4, #0
 800a36a:	6940      	ldr	r0, [r0, #20]
 800a36c:	f003 f998 	bl	800d6a0 <memcpy>
			z_ready_thread(pending_thread);
 800a370:	4628      	mov	r0, r5
 800a372:	67ec      	str	r4, [r5, #124]	; 0x7c
 800a374:	f000 fcae 	bl	800acd4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800a378:	4640      	mov	r0, r8
 800a37a:	4639      	mov	r1, r7
 800a37c:	f000 fe0a 	bl	800af94 <z_reschedule>
			return 0;
 800a380:	4620      	mov	r0, r4
}
 800a382:	b002      	add	sp, #8
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	4631      	mov	r1, r6
 800a38a:	6a20      	ldr	r0, [r4, #32]
 800a38c:	f003 f988 	bl	800d6a0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800a390:	6a23      	ldr	r3, [r4, #32]
 800a392:	68e1      	ldr	r1, [r4, #12]
			if (msgq->write_ptr == msgq->buffer_end) {
 800a394:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 800a396:	440b      	add	r3, r1
			if (msgq->write_ptr == msgq->buffer_end) {
 800a398:	4293      	cmp	r3, r2
			msgq->write_ptr += msgq->msg_size;
 800a39a:	6223      	str	r3, [r4, #32]
				msgq->write_ptr = msgq->buffer_start;
 800a39c:	bf04      	itt	eq
 800a39e:	6963      	ldreq	r3, [r4, #20]
 800a3a0:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
 800a3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3a4:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800a3a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a3aa:	2110      	movs	r1, #16
			msgq->used_msgs++;
 800a3ac:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800a3ae:	f001 fd53 	bl	800be58 <z_handle_obj_poll_events>
		result = 0;
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e7cb      	b.n	800a34e <z_impl_k_msgq_put+0x32>
		_current->base.swap_data = (void *) data;
 800a3b6:	4c06      	ldr	r4, [pc, #24]	; (800a3d0 <z_impl_k_msgq_put+0xb4>)
 800a3b8:	68a4      	ldr	r4, [r4, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800a3ba:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
 800a3bc:	6166      	str	r6, [r4, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800a3be:	4639      	mov	r1, r7
 800a3c0:	e9cd 5300 	strd	r5, r3, [sp]
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	f000 fd1d 	bl	800ae04 <z_pend_curr>
}
 800a3ca:	b002      	add	sp, #8
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	2000144c 	.word	0x2000144c

0800a3d4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800a3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3d6:	468c      	mov	ip, r1
 800a3d8:	b083      	sub	sp, #12
 800a3da:	4604      	mov	r4, r0
 800a3dc:	4615      	mov	r5, r2

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800a3de:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800a3e2:	f04f 0210 	mov.w	r2, #16
 800a3e6:	f3ef 8611 	mrs	r6, BASEPRI
 800a3ea:	f382 8812 	msr	BASEPRI_MAX, r2
 800a3ee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800a3f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d032      	beq.n	800a45e <z_impl_k_msgq_get+0x8a>
 800a3f8:	68c2      	ldr	r2, [r0, #12]
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	69e1      	ldr	r1, [r4, #28]
 800a3fe:	f003 f94f 	bl	800d6a0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800a402:	69e3      	ldr	r3, [r4, #28]
 800a404:	68e2      	ldr	r2, [r4, #12]
 800a406:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
 800a408:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
 800a40a:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800a40c:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
 800a40e:	bf04      	itt	eq
 800a410:	6963      	ldreq	r3, [r4, #20]
 800a412:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
 800a414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a416:	3b01      	subs	r3, #1

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800a418:	4620      	mov	r0, r4
		msgq->used_msgs--;
 800a41a:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800a41c:	f000 fd2a 	bl	800ae74 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800a420:	4605      	mov	r5, r0
 800a422:	b308      	cbz	r0, 800a468 <z_impl_k_msgq_get+0x94>
 800a424:	6941      	ldr	r1, [r0, #20]
 800a426:	68e2      	ldr	r2, [r4, #12]
 800a428:	6a20      	ldr	r0, [r4, #32]
 800a42a:	f003 f939 	bl	800d6a0 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800a42e:	6a23      	ldr	r3, [r4, #32]
 800a430:	68e2      	ldr	r2, [r4, #12]
 800a432:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
 800a434:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
 800a436:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800a438:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
 800a43a:	bf04      	itt	eq
 800a43c:	6963      	ldreq	r3, [r4, #20]
 800a43e:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
 800a440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a442:	3301      	adds	r3, #1
 800a444:	6263      	str	r3, [r4, #36]	; 0x24
 800a446:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800a448:	4628      	mov	r0, r5
 800a44a:	67ec      	str	r4, [r5, #124]	; 0x7c
 800a44c:	f000 fc42 	bl	800acd4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800a450:	4638      	mov	r0, r7
 800a452:	4631      	mov	r1, r6
 800a454:	f000 fd9e 	bl	800af94 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800a458:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800a45a:	b003      	add	sp, #12
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800a45e:	ea55 0203 	orrs.w	r2, r5, r3
 800a462:	d107      	bne.n	800a474 <z_impl_k_msgq_get+0xa0>
		result = -ENOMSG;
 800a464:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800a468:	f386 8811 	msr	BASEPRI, r6
 800a46c:	f3bf 8f6f 	isb	sy
}
 800a470:	b003      	add	sp, #12
 800a472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800a474:	4c06      	ldr	r4, [pc, #24]	; (800a490 <z_impl_k_msgq_get+0xbc>)
 800a476:	68a4      	ldr	r4, [r4, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800a478:	4602      	mov	r2, r0
		_current->base.swap_data = data;
 800a47a:	f8c4 c014 	str.w	ip, [r4, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800a47e:	4631      	mov	r1, r6
 800a480:	e9cd 5300 	strd	r5, r3, [sp]
 800a484:	4638      	mov	r0, r7
 800a486:	f000 fcbd 	bl	800ae04 <z_pend_curr>
}
 800a48a:	b003      	add	sp, #12
 800a48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a48e:	bf00      	nop
 800a490:	2000144c 	.word	0x2000144c

0800a494 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
 800a498:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
 800a49c:	f04f 0310 	mov.w	r3, #16
 800a4a0:	f3ef 8711 	mrs	r7, BASEPRI
 800a4a4:	f383 8812 	msr	BASEPRI_MAX, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f06f 0522 	mvn.w	r5, #34	; 0x22
	return k;
 800a4b0:	e002      	b.n	800a4b8 <z_impl_k_msgq_purge+0x24>
 800a4b2:	67dd      	str	r5, [r3, #124]	; 0x7c
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
 800a4b4:	f000 fc0e 	bl	800acd4 <z_ready_thread>
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fcdb 	bl	800ae74 <z_unpend_first_thread>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1f6      	bne.n	800a4b2 <z_impl_k_msgq_purge+0x1e>
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
 800a4c4:	6a22      	ldr	r2, [r4, #32]
	msgq->used_msgs = 0;
 800a4c6:	6260      	str	r0, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
 800a4c8:	61e2      	str	r2, [r4, #28]

	z_reschedule(&msgq->lock, key);
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4630      	mov	r0, r6
}
 800a4ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
 800a4d2:	f000 bd5f 	b.w	800af94 <z_reschedule>
 800a4d6:	bf00      	nop

0800a4d8 <z_impl_k_mutex_init>:
 */
static struct k_spinlock lock;

int z_impl_k_mutex_init(struct k_mutex *mutex)
{
	mutex->owner = NULL;
 800a4d8:	2300      	movs	r3, #0
	mutex->lock_count = 0U;
 800a4da:	e9c0 3302 	strd	r3, r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 800a4de:	e9c0 0000 	strd	r0, r0, [r0]
	z_object_init(mutex);

	SYS_PORT_TRACING_OBJ_INIT(k_mutex, mutex, 0);

	return 0;
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop

0800a4e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	f04f 0110 	mov.w	r1, #16
 800a4f2:	f3ef 8511 	mrs	r5, BASEPRI
 800a4f6:	f381 8812 	msr	BASEPRI_MAX, r1
 800a4fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800a4fe:	68c1      	ldr	r1, [r0, #12]
 800a500:	b971      	cbnz	r1, 800a520 <z_impl_k_mutex_lock+0x38>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800a502:	4b39      	ldr	r3, [pc, #228]	; (800a5e8 <z_impl_k_mutex_lock+0x100>)
 800a504:	6898      	ldr	r0, [r3, #8]
 800a506:	f990 300e 	ldrsb.w	r3, [r0, #14]
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
 800a50a:	60a0      	str	r0, [r4, #8]
		mutex->lock_count++;
 800a50c:	3101      	adds	r1, #1
 800a50e:	e9c4 1303 	strd	r1, r3, [r4, #12]
	__asm__ volatile(
 800a512:	f385 8811 	msr	BASEPRI, r5
 800a516:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800a51a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800a51c:	b004      	add	sp, #16
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800a520:	4831      	ldr	r0, [pc, #196]	; (800a5e8 <z_impl_k_mutex_lock+0x100>)
 800a522:	68a6      	ldr	r6, [r4, #8]
 800a524:	6880      	ldr	r0, [r0, #8]
 800a526:	4286      	cmp	r6, r0
 800a528:	d101      	bne.n	800a52e <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
 800a52a:	6923      	ldr	r3, [r4, #16]
 800a52c:	e7ed      	b.n	800a50a <z_impl_k_mutex_lock+0x22>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800a52e:	ea52 0103 	orrs.w	r1, r2, r3
 800a532:	d052      	beq.n	800a5da <z_impl_k_mutex_lock+0xf2>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800a534:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800a538:	f996 000e 	ldrsb.w	r0, [r6, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
 800a53c:	4281      	cmp	r1, r0
 800a53e:	bfa8      	it	ge
 800a540:	4601      	movge	r1, r0
 800a542:	f06f 0c7e 	mvn.w	ip, #126	; 0x7e
 800a546:	4561      	cmp	r1, ip
 800a548:	bfb8      	it	lt
 800a54a:	4661      	movlt	r1, ip
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800a54c:	4288      	cmp	r0, r1
 800a54e:	dc39      	bgt.n	800a5c4 <z_impl_k_mutex_lock+0xdc>
	bool resched = false;
 800a550:	2600      	movs	r6, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800a552:	9200      	str	r2, [sp, #0]
 800a554:	4825      	ldr	r0, [pc, #148]	; (800a5ec <z_impl_k_mutex_lock+0x104>)
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	4622      	mov	r2, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f000 fc52 	bl	800ae04 <z_pend_curr>
	if (got_mutex == 0) {
 800a560:	2800      	cmp	r0, #0
 800a562:	d0db      	beq.n	800a51c <z_impl_k_mutex_lock+0x34>
	__asm__ volatile(
 800a564:	f04f 0310 	mov.w	r3, #16
 800a568:	f3ef 8511 	mrs	r5, BASEPRI
 800a56c:	f383 8812 	msr	BASEPRI_MAX, r3
 800a570:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800a574:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a576:	429c      	cmp	r4, r3
 800a578:	d02d      	beq.n	800a5d6 <z_impl_k_mutex_lock+0xee>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800a57a:	b363      	cbz	r3, 800a5d6 <z_impl_k_mutex_lock+0xee>
 800a57c:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	4299      	cmp	r1, r3
 800a584:	bfa8      	it	ge
 800a586:	4619      	movge	r1, r3
 800a588:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a58c:	4299      	cmp	r1, r3
 800a58e:	bfb8      	it	lt
 800a590:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800a592:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 800a594:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800a598:	4299      	cmp	r1, r3
 800a59a:	d107      	bne.n	800a5ac <z_impl_k_mutex_lock+0xc4>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800a59c:	b15e      	cbz	r6, 800a5b6 <z_impl_k_mutex_lock+0xce>
		z_reschedule(&lock, key);
 800a59e:	4813      	ldr	r0, [pc, #76]	; (800a5ec <z_impl_k_mutex_lock+0x104>)
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f000 fcf7 	bl	800af94 <z_reschedule>
	return -EAGAIN;
 800a5a6:	f06f 000a 	mvn.w	r0, #10
 800a5aa:	e7b7      	b.n	800a51c <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 800a5ac:	f000 fca8 	bl	800af00 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1f4      	bne.n	800a59e <z_impl_k_mutex_lock+0xb6>
 800a5b4:	e7f2      	b.n	800a59c <z_impl_k_mutex_lock+0xb4>
	__asm__ volatile(
 800a5b6:	f385 8811 	msr	BASEPRI, r5
 800a5ba:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800a5be:	f06f 000a 	mvn.w	r0, #10
 800a5c2:	e7ab      	b.n	800a51c <z_impl_k_mutex_lock+0x34>
		return z_set_prio(mutex->owner, new_prio);
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5ca:	f000 fc99 	bl	800af00 <z_set_prio>
 800a5ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	e7bd      	b.n	800a552 <z_impl_k_mutex_lock+0x6a>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800a5d6:	6921      	ldr	r1, [r4, #16]
 800a5d8:	e7db      	b.n	800a592 <z_impl_k_mutex_lock+0xaa>
 800a5da:	f385 8811 	msr	BASEPRI, r5
 800a5de:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800a5e2:	f06f 000f 	mvn.w	r0, #15
 800a5e6:	e799      	b.n	800a51c <z_impl_k_mutex_lock+0x34>
 800a5e8:	2000144c 	.word	0x2000144c
 800a5ec:	20001474 	.word	0x20001474

0800a5f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800a5f0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800a5f2:	6883      	ldr	r3, [r0, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d03b      	beq.n	800a670 <z_impl_k_mutex_unlock+0x80>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800a5f8:	4a1f      	ldr	r2, [pc, #124]	; (800a678 <z_impl_k_mutex_unlock+0x88>)
 800a5fa:	6892      	ldr	r2, [r2, #8]
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d134      	bne.n	800a66a <z_impl_k_mutex_unlock+0x7a>
	--_current->base.sched_locked;
 800a600:	7bda      	ldrb	r2, [r3, #15]
 800a602:	3a01      	subs	r2, #1
 800a604:	4604      	mov	r4, r0
 800a606:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800a608:	68c3      	ldr	r3, [r0, #12]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d905      	bls.n	800a61a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800a60e:	3b01      	subs	r3, #1
 800a610:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800a612:	f000 fcf1 	bl	800aff8 <k_sched_unlock>

	return 0;
 800a616:	2000      	movs	r0, #0
}
 800a618:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800a61a:	f04f 0310 	mov.w	r3, #16
 800a61e:	f3ef 8511 	mrs	r5, BASEPRI
 800a622:	f383 8812 	msr	BASEPRI_MAX, r3
 800a626:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800a62a:	6880      	ldr	r0, [r0, #8]
 800a62c:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
 800a62e:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800a632:	4299      	cmp	r1, r3
 800a634:	d116      	bne.n	800a664 <z_impl_k_mutex_unlock+0x74>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fc1c 	bl	800ae74 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800a63c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800a63e:	b158      	cbz	r0, 800a658 <z_impl_k_mutex_unlock+0x68>
		mutex->owner_orig_prio = new_owner->base.prio;
 800a640:	f990 200e 	ldrsb.w	r2, [r0, #14]
 800a644:	6122      	str	r2, [r4, #16]
 800a646:	2200      	movs	r2, #0
 800a648:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800a64a:	f000 fb43 	bl	800acd4 <z_ready_thread>
		z_reschedule(&lock, key);
 800a64e:	480b      	ldr	r0, [pc, #44]	; (800a67c <z_impl_k_mutex_unlock+0x8c>)
 800a650:	4629      	mov	r1, r5
 800a652:	f000 fc9f 	bl	800af94 <z_reschedule>
 800a656:	e7dc      	b.n	800a612 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800a658:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800a65a:	f385 8811 	msr	BASEPRI, r5
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	e7d6      	b.n	800a612 <z_impl_k_mutex_unlock+0x22>
		return z_set_prio(mutex->owner, new_prio);
 800a664:	f000 fc4c 	bl	800af00 <z_set_prio>
 800a668:	e7e5      	b.n	800a636 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800a670:	f06f 0015 	mvn.w	r0, #21
}
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	bf00      	nop
 800a678:	2000144c 	.word	0x2000144c
 800a67c:	20001474 	.word	0x20001474

0800a680 <z_impl_k_sem_init>:
		      unsigned int limit)
{
	/*
	 * Limit cannot be zero and count cannot be greater than limit
	 */
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800a680:	b15a      	cbz	r2, 800a69a <z_impl_k_sem_init+0x1a>
 800a682:	428a      	cmp	r2, r1
 800a684:	d309      	bcc.n	800a69a <z_impl_k_sem_init+0x1a>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, init, sem, 0);

	z_waitq_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
 800a686:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
 800a68a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 800a68e:	e9c0 0000 	strd	r0, r0, [r0]
 800a692:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif
	z_object_init(sem);

	return 0;
 800a696:	2000      	movs	r0, #0
 800a698:	4770      	bx	lr
		return -EINVAL;
 800a69a:	f06f 0015 	mvn.w	r0, #21
}
 800a69e:	4770      	bx	lr

0800a6a0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4604      	mov	r4, r0
	__asm__ volatile(
 800a6a4:	f04f 0310 	mov.w	r3, #16
 800a6a8:	f3ef 8511 	mrs	r5, BASEPRI
 800a6ac:	f383 8812 	msr	BASEPRI_MAX, r3
 800a6b0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800a6b4:	f000 fbde 	bl	800ae74 <z_unpend_first_thread>

	if (thread != NULL) {
 800a6b8:	b148      	cbz	r0, 800a6ce <z_impl_k_sem_give+0x2e>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800a6be:	f000 fb09 	bl	800acd4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	480a      	ldr	r0, [pc, #40]	; (800a6f0 <z_impl_k_sem_give+0x50>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800a6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800a6ca:	f000 bc63 	b.w	800af94 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800a6ce:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	bf18      	it	ne
 800a6d6:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800a6d8:	f104 0010 	add.w	r0, r4, #16
 800a6dc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800a6de:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800a6e0:	f001 fbba 	bl	800be58 <z_handle_obj_poll_events>
	z_reschedule(&lock, key);
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4802      	ldr	r0, [pc, #8]	; (800a6f0 <z_impl_k_sem_give+0x50>)
}
 800a6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 800a6ec:	f000 bc52 	b.w	800af94 <z_reschedule>
 800a6f0:	20001478 	.word	0x20001478

0800a6f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800a6f4:	4684      	mov	ip, r0
 800a6f6:	f04f 0010 	mov.w	r0, #16
 800a6fa:	f3ef 8111 	mrs	r1, BASEPRI
 800a6fe:	f380 8812 	msr	BASEPRI_MAX, r0
 800a702:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800a706:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800a70a:	b140      	cbz	r0, 800a71e <z_impl_k_sem_take+0x2a>
		sem->count--;
 800a70c:	3801      	subs	r0, #1
 800a70e:	f8cc 0008 	str.w	r0, [ip, #8]
	__asm__ volatile(
 800a712:	f381 8811 	msr	BASEPRI, r1
 800a716:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800a71a:	2000      	movs	r0, #0
		goto out;
 800a71c:	4770      	bx	lr
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800a71e:	ea52 0003 	orrs.w	r0, r2, r3
 800a722:	d00a      	beq.n	800a73a <z_impl_k_sem_take+0x46>
{
 800a724:	b500      	push	{lr}
 800a726:	b083      	sub	sp, #12
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800a728:	e9cd 2300 	strd	r2, r3, [sp]
 800a72c:	4806      	ldr	r0, [pc, #24]	; (800a748 <z_impl_k_sem_take+0x54>)
 800a72e:	4662      	mov	r2, ip
 800a730:	f000 fb68 	bl	800ae04 <z_pend_curr>

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800a734:	b003      	add	sp, #12
 800a736:	f85d fb04 	ldr.w	pc, [sp], #4
 800a73a:	f381 8811 	msr	BASEPRI, r1
 800a73e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800a742:	f06f 000f 	mvn.w	r0, #15
}
 800a746:	4770      	bx	lr
 800a748:	20001478 	.word	0x20001478

0800a74c <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	4604      	mov	r4, r0
	__asm__ volatile(
 800a750:	f04f 0310 	mov.w	r3, #16
 800a754:	f3ef 8611 	mrs	r6, BASEPRI
 800a758:	f383 8812 	msr	BASEPRI_MAX, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f06f 050a 	mvn.w	r5, #10
 800a764:	e002      	b.n	800a76c <z_impl_k_sem_reset+0x20>
 800a766:	67c5      	str	r5, [r0, #124]	; 0x7c
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 800a768:	f000 fab4 	bl	800acd4 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 fb81 	bl	800ae74 <z_unpend_first_thread>
		if (thread == NULL) {
 800a772:	4603      	mov	r3, r0
 800a774:	2800      	cmp	r0, #0
 800a776:	d1f6      	bne.n	800a766 <z_impl_k_sem_reset+0x1a>
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800a778:	f104 0010 	add.w	r0, r4, #16
	}
	sem->count = 0;
 800a77c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800a77e:	2102      	movs	r1, #2
 800a780:	f001 fb6a 	bl	800be58 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 800a784:	4631      	mov	r1, r6
 800a786:	4802      	ldr	r0, [pc, #8]	; (800a790 <z_impl_k_sem_reset+0x44>)
}
 800a788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 800a78c:	f000 bc02 	b.w	800af94 <z_reschedule>
 800a790:	20001478 	.word	0x20001478

0800a794 <submit_to_queue_locked>:
{
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
 800a796:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800a798:	079f      	lsls	r7, r3, #30
{
 800a79a:	460d      	mov	r5, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800a79c:	f3c3 0640 	ubfx	r6, r3, #1, #1
 800a7a0:	d40f      	bmi.n	800a7c2 <submit_to_queue_locked+0x2e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800a7a2:	075c      	lsls	r4, r3, #29
 800a7a4:	d510      	bpl.n	800a7c8 <submit_to_queue_locked+0x34>
		*queuep = NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	602b      	str	r3, [r5, #0]
}
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800a7ae:	f7ff fca9 	bl	800a104 <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
 800a7b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800a7b6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800a7b8:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800a7bc:	d543      	bpl.n	800a846 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 800a7be:	b1b2      	cbz	r2, 800a7ee <submit_to_queue_locked+0x5a>
 800a7c0:	b1c8      	cbz	r0, 800a7f6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
 800a7c2:	f06f 060f 	mvn.w	r6, #15
 800a7c6:	e7ee      	b.n	800a7a6 <submit_to_queue_locked+0x12>
		if (*queuep == NULL) {
 800a7c8:	680f      	ldr	r7, [r1, #0]
 800a7ca:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 800a7cc:	f003 0301 	and.w	r3, r3, #1
		if (*queuep == NULL) {
 800a7d0:	b33f      	cbz	r7, 800a822 <submit_to_queue_locked+0x8e>
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800a7d2:	bb4b      	cbnz	r3, 800a828 <submit_to_queue_locked+0x94>
		ret = 1;
 800a7d4:	2601      	movs	r6, #1
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800a7d6:	4b1d      	ldr	r3, [pc, #116]	; (800a84c <submit_to_queue_locked+0xb8>)
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	42bb      	cmp	r3, r7
 800a7dc:	d0e7      	beq.n	800a7ae <submit_to_queue_locked+0x1a>
	return (*flagp & BIT(bit)) != 0U;
 800a7de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800a7e2:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
 800a7e4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800a7e8:	d52d      	bpl.n	800a846 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 800a7ea:	2a00      	cmp	r2, #0
 800a7ec:	d1e9      	bne.n	800a7c2 <submit_to_queue_locked+0x2e>
	return (*flagp & BIT(bit)) != 0U;
 800a7ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e5      	bne.n	800a7c2 <submit_to_queue_locked+0x2e>
	parent->next = child;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6023      	str	r3, [r4, #0]
	return list->tail;
 800a7fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
 800a7fe:	b1db      	cbz	r3, 800a838 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800a800:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800a802:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800a806:	2200      	movs	r2, #0
 800a808:	4611      	mov	r1, r2
 800a80a:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800a80e:	f000 fdc3 	bl	800b398 <z_sched_wake>
	*flagp |= BIT(bit);
 800a812:	68e3      	ldr	r3, [r4, #12]
			work->queue = *queuep;
 800a814:	682a      	ldr	r2, [r5, #0]
	*flagp |= BIT(bit);
 800a816:	f043 0304 	orr.w	r3, r3, #4
			work->queue = *queuep;
 800a81a:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 800a81e:	4630      	mov	r0, r6
 800a820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*queuep = work->queue;
 800a822:	6887      	ldr	r7, [r0, #8]
 800a824:	600f      	str	r7, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800a826:	b153      	cbz	r3, 800a83e <submit_to_queue_locked+0xaa>
			*queuep = work->queue;
 800a828:	68a7      	ldr	r7, [r4, #8]
 800a82a:	602f      	str	r7, [r5, #0]
			ret = 2;
 800a82c:	2602      	movs	r6, #2
	if (queue == NULL) {
 800a82e:	2f00      	cmp	r7, #0
 800a830:	d1d1      	bne.n	800a7d6 <submit_to_queue_locked+0x42>
		return -EINVAL;
 800a832:	f06f 0615 	mvn.w	r6, #21
 800a836:	e7b6      	b.n	800a7a6 <submit_to_queue_locked+0x12>
	list->head = node;
 800a838:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
}
 800a83c:	e7e3      	b.n	800a806 <submit_to_queue_locked+0x72>
		ret = 1;
 800a83e:	2601      	movs	r6, #1
	if (queue == NULL) {
 800a840:	2f00      	cmp	r7, #0
 800a842:	d1c8      	bne.n	800a7d6 <submit_to_queue_locked+0x42>
 800a844:	e7f5      	b.n	800a832 <submit_to_queue_locked+0x9e>
		ret = -ENODEV;
 800a846:	f06f 0612 	mvn.w	r6, #18
 800a84a:	e7ac      	b.n	800a7a6 <submit_to_queue_locked+0x12>
 800a84c:	2000144c 	.word	0x2000144c

0800a850 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
 800a850:	b510      	push	{r4, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	f04f 0310 	mov.w	r3, #16
 800a858:	f3ef 8411 	mrs	r4, BASEPRI
 800a85c:	f383 8812 	msr	BASEPRI_MAX, r3
 800a860:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 800a864:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
 800a868:	2100      	movs	r1, #0
	*flagp &= ~BIT(bit);
 800a86a:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800a86e:	071b      	lsls	r3, r3, #28
	struct k_work_q *queue = NULL;
 800a870:	9101      	str	r1, [sp, #4]
	*flagp &= ~BIT(bit);
 800a872:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 800a876:	d405      	bmi.n	800a884 <work_timeout+0x34>
	__asm__ volatile(
 800a878:	f384 8811 	msr	BASEPRI, r4
 800a87c:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
 800a880:	b002      	add	sp, #8
 800a882:	bd10      	pop	{r4, pc}
		queue = dw->queue;
 800a884:	6983      	ldr	r3, [r0, #24]
 800a886:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 800a888:	a901      	add	r1, sp, #4
 800a88a:	3810      	subs	r0, #16
 800a88c:	f7ff ff82 	bl	800a794 <submit_to_queue_locked>
 800a890:	e7f2      	b.n	800a878 <work_timeout+0x28>
 800a892:	bf00      	nop

0800a894 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800a894:	2300      	movs	r3, #0
 800a896:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a89a:	6003      	str	r3, [r0, #0]
 800a89c:	6041      	str	r1, [r0, #4]
}
 800a89e:	4770      	bx	lr

0800a8a0 <k_work_submit_to_queue>:
{
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
 800a8a8:	f04f 0210 	mov.w	r2, #16
 800a8ac:	f3ef 8511 	mrs	r5, BASEPRI
 800a8b0:	f382 8812 	msr	BASEPRI_MAX, r2
 800a8b4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800a8b8:	a901      	add	r1, sp, #4
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff ff6a 	bl	800a794 <submit_to_queue_locked>
 800a8c0:	4604      	mov	r4, r0
	__asm__ volatile(
 800a8c2:	f385 8811 	msr	BASEPRI, r5
 800a8c6:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	dc02      	bgt.n	800a8d4 <k_work_submit_to_queue+0x34>
}
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	b003      	add	sp, #12
 800a8d2:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800a8d4:	f000 fce8 	bl	800b2a8 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d0f8      	beq.n	800a8ce <k_work_submit_to_queue+0x2e>
	z_impl_k_yield();
 800a8dc:	f000 fbda 	bl	800b094 <z_impl_k_yield>
}
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	b003      	add	sp, #12
 800a8e4:	bd30      	pop	{r4, r5, pc}
 800a8e6:	bf00      	nop

0800a8e8 <k_work_submit>:
{
 800a8e8:	b530      	push	{r4, r5, lr}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <k_work_submit+0x44>)
 800a8ee:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
 800a8f0:	f04f 0310 	mov.w	r3, #16
 800a8f4:	f3ef 8511 	mrs	r5, BASEPRI
 800a8f8:	f383 8812 	msr	BASEPRI_MAX, r3
 800a8fc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800a900:	a901      	add	r1, sp, #4
 800a902:	f7ff ff47 	bl	800a794 <submit_to_queue_locked>
 800a906:	4604      	mov	r4, r0
	__asm__ volatile(
 800a908:	f385 8811 	msr	BASEPRI, r5
 800a90c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800a910:	2800      	cmp	r0, #0
 800a912:	dc02      	bgt.n	800a91a <k_work_submit+0x32>
}
 800a914:	4620      	mov	r0, r4
 800a916:	b003      	add	sp, #12
 800a918:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800a91a:	f000 fcc5 	bl	800b2a8 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0f8      	beq.n	800a914 <k_work_submit+0x2c>
	z_impl_k_yield();
 800a922:	f000 fbb7 	bl	800b094 <z_impl_k_yield>
}
 800a926:	4620      	mov	r0, r4
 800a928:	b003      	add	sp, #12
 800a92a:	bd30      	pop	{r4, r5, pc}
 800a92c:	20000c10 	.word	0x20000c10

0800a930 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
 800a930:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*dwork = (struct k_work_delayable){
 800a932:	2230      	movs	r2, #48	; 0x30
{
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 800a938:	2100      	movs	r1, #0
 800a93a:	f002 febf 	bl	800d6bc <memset>
 800a93e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a942:	6065      	str	r5, [r4, #4]
 800a944:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
 800a946:	bd38      	pop	{r3, r4, r5, pc}

0800a948 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
 800a948:	b510      	push	{r4, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	4913      	ldr	r1, [pc, #76]	; (800a99c <k_work_schedule+0x54>)
 800a94e:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
 800a950:	f04f 0110 	mov.w	r1, #16
 800a954:	f3ef 8411 	mrs	r4, BASEPRI
 800a958:	f381 8812 	msr	BASEPRI_MAX, r1
 800a95c:	f3bf 8f6f 	isb	sy
	return *flagp;
 800a960:	68c1      	ldr	r1, [r0, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
 800a962:	f011 0f0e 	tst.w	r1, #14
 800a966:	d006      	beq.n	800a976 <k_work_schedule+0x2e>
	int ret = 0;
 800a968:	2000      	movs	r0, #0
	__asm__ volatile(
 800a96a:	f384 8811 	msr	BASEPRI, r4
 800a96e:	f3bf 8f6f 	isb	sy
	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
 800a972:	b002      	add	sp, #8
 800a974:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800a976:	ea53 0e02 	orrs.w	lr, r3, r2
 800a97a:	d00a      	beq.n	800a992 <k_work_schedule+0x4a>
	*flagp |= BIT(bit);
 800a97c:	f041 0108 	orr.w	r1, r1, #8
 800a980:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
 800a982:	9901      	ldr	r1, [sp, #4]
 800a984:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 800a986:	3010      	adds	r0, #16
 800a988:	4905      	ldr	r1, [pc, #20]	; (800a9a0 <k_work_schedule+0x58>)
 800a98a:	f000 fdb7 	bl	800b4fc <z_add_timeout>
	return ret;
 800a98e:	2001      	movs	r0, #1
 800a990:	e7eb      	b.n	800a96a <k_work_schedule+0x22>
		return submit_to_queue_locked(work, queuep);
 800a992:	a901      	add	r1, sp, #4
 800a994:	f7ff fefe 	bl	800a794 <submit_to_queue_locked>
 800a998:	e7e7      	b.n	800a96a <k_work_schedule+0x22>
 800a99a:	bf00      	nop
 800a99c:	20000c10 	.word	0x20000c10
 800a9a0:	0800a851 	.word	0x0800a851

0800a9a4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
 800a9a4:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
 800a9a6:	4d13      	ldr	r5, [pc, #76]	; (800a9f4 <update_cache+0x50>)
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d013      	beq.n	800a9da <update_cache+0x36>
struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
 800a9b2:	b194      	cbz	r4, 800a9da <update_cache+0x36>
	if (z_is_thread_prevented_from_running(_current)) {
 800a9b4:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
 800a9b6:	b948      	cbnz	r0, 800a9cc <update_cache+0x28>
	if (z_is_thread_prevented_from_running(_current)) {
 800a9b8:	7b5a      	ldrb	r2, [r3, #13]
 800a9ba:	06d2      	lsls	r2, r2, #27
 800a9bc:	d106      	bne.n	800a9cc <update_cache+0x28>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800a9be:	69a2      	ldr	r2, [r4, #24]
 800a9c0:	b922      	cbnz	r2, 800a9cc <update_cache+0x28>
	if (is_preempt(_current) || is_metairq(thread)) {
 800a9c2:	89da      	ldrh	r2, [r3, #14]
 800a9c4:	2a7f      	cmp	r2, #127	; 0x7f
 800a9c6:	d901      	bls.n	800a9cc <update_cache+0x28>
		_kernel.ready_q.cache = _current;
 800a9c8:	61ab      	str	r3, [r5, #24]
}
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	d002      	beq.n	800a9d6 <update_cache+0x32>
	if (slice_time != 0) {
 800a9d0:	4e09      	ldr	r6, [pc, #36]	; (800a9f8 <update_cache+0x54>)
 800a9d2:	6833      	ldr	r3, [r6, #0]
 800a9d4:	b91b      	cbnz	r3, 800a9de <update_cache+0x3a>
		_kernel.ready_q.cache = thread;
 800a9d6:	61ac      	str	r4, [r5, #24]
}
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800a9da:	68ec      	ldr	r4, [r5, #12]
 800a9dc:	e7ea      	b.n	800a9b4 <update_cache+0x10>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800a9de:	f7fd fb7d 	bl	80080dc <sys_clock_elapsed>
 800a9e2:	6832      	ldr	r2, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 800a9e4:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800a9e6:	1813      	adds	r3, r2, r0
		z_set_timeout_expiry(slice_time, false);
 800a9e8:	4610      	mov	r0, r2
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800a9ea:	612b      	str	r3, [r5, #16]
		z_set_timeout_expiry(slice_time, false);
 800a9ec:	f000 fe22 	bl	800b634 <z_set_timeout_expiry>
		_kernel.ready_q.cache = thread;
 800a9f0:	61ac      	str	r4, [r5, #24]
 800a9f2:	e7f1      	b.n	800a9d8 <update_cache+0x34>
 800a9f4:	2000144c 	.word	0x2000144c
 800a9f8:	20001490 	.word	0x20001490

0800a9fc <move_thread_to_end_of_prio_q>:
{
 800a9fc:	b470      	push	{r4, r5, r6}
	if (z_is_thread_queued(thread)) {
 800a9fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800aa02:	7b43      	ldrb	r3, [r0, #13]
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	db26      	blt.n	800aa56 <move_thread_to_end_of_prio_q+0x5a>
	return list->head == list;
 800aa08:	4d1b      	ldr	r5, [pc, #108]	; (800aa78 <move_thread_to_end_of_prio_q+0x7c>)
	thread->base.thread_state |= _THREAD_QUEUED;
 800aa0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aa0e:	7343      	strb	r3, [r0, #13]
 800aa10:	69eb      	ldr	r3, [r5, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800aa12:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800aa14:	f105 061c 	add.w	r6, r5, #28
 800aa18:	42b3      	cmp	r3, r6
 800aa1a:	d010      	beq.n	800aa3e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800aa1c:	b17b      	cbz	r3, 800aa3e <move_thread_to_end_of_prio_q+0x42>
	int32_t b1 = thread_1->base.prio;
 800aa1e:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800aa22:	e001      	b.n	800aa28 <move_thread_to_end_of_prio_q+0x2c>
	return (node == list->tail) ? NULL : node->next;
 800aa24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800aa26:	b153      	cbz	r3, 800aa3e <move_thread_to_end_of_prio_q+0x42>
	int32_t b2 = thread_2->base.prio;
 800aa28:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800aa2c:	4291      	cmp	r1, r2
		return b2 - b1;
 800aa2e:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800aa32:	d002      	beq.n	800aa3a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800aa34:	f1bc 0f00 	cmp.w	ip, #0
 800aa38:	dc17      	bgt.n	800aa6a <move_thread_to_end_of_prio_q+0x6e>
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	d1f2      	bne.n	800aa24 <move_thread_to_end_of_prio_q+0x28>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
 800aa3e:	e9c0 6400 	strd	r6, r4, [r0]

	tail->next = node;
 800aa42:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800aa44:	6228      	str	r0, [r5, #32]
	update_cache(thread == _current);
 800aa46:	68ab      	ldr	r3, [r5, #8]
 800aa48:	1a18      	subs	r0, r3, r0
 800aa4a:	fab0 f080 	clz	r0, r0
}
 800aa4e:	bc70      	pop	{r4, r5, r6}
	update_cache(thread == _current);
 800aa50:	0940      	lsrs	r0, r0, #5
 800aa52:	f7ff bfa7 	b.w	800a9a4 <update_cache>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
 800aa56:	e9d0 1400 	ldrd	r1, r4, [r0]
	node->next = NULL;
 800aa5a:	2200      	movs	r2, #0

	prev->next = next;
 800aa5c:	6021      	str	r1, [r4, #0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800aa5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	next->prev = prev;
 800aa62:	604c      	str	r4, [r1, #4]
	node->prev = NULL;
 800aa64:	e9c0 2200 	strd	r2, r2, [r0]
}
 800aa68:	e7ce      	b.n	800aa08 <move_thread_to_end_of_prio_q+0xc>
	sys_dnode_t *const prev = successor->prev;
 800aa6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800aa6c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800aa70:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800aa72:	6058      	str	r0, [r3, #4]
}
 800aa74:	e7e7      	b.n	800aa46 <move_thread_to_end_of_prio_q+0x4a>
 800aa76:	bf00      	nop
 800aa78:	2000144c 	.word	0x2000144c

0800aa7c <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800aa7c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800aa80:	7b43      	ldrb	r3, [r0, #13]
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	db03      	blt.n	800aa8e <ready_thread+0x12>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800aa86:	06da      	lsls	r2, r3, #27
 800aa88:	d101      	bne.n	800aa8e <ready_thread+0x12>
 800aa8a:	6982      	ldr	r2, [r0, #24]
 800aa8c:	b102      	cbz	r2, 800aa90 <ready_thread+0x14>
 800aa8e:	4770      	bx	lr
{
 800aa90:	b470      	push	{r4, r5, r6}
	thread->base.thread_state |= _THREAD_QUEUED;
 800aa92:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 800aa96:	4d13      	ldr	r5, [pc, #76]	; (800aae4 <ready_thread+0x68>)
 800aa98:	7343      	strb	r3, [r0, #13]
 800aa9a:	69eb      	ldr	r3, [r5, #28]
	return (node == list->tail) ? NULL : node->next;
 800aa9c:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800aa9e:	f105 061c 	add.w	r6, r5, #28
 800aaa2:	42b3      	cmp	r3, r6
 800aaa4:	d010      	beq.n	800aac8 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800aaa6:	b17b      	cbz	r3, 800aac8 <ready_thread+0x4c>
	int32_t b1 = thread_1->base.prio;
 800aaa8:	f990 100e 	ldrsb.w	r1, [r0, #14]
 800aaac:	e001      	b.n	800aab2 <ready_thread+0x36>
	return (node == list->tail) ? NULL : node->next;
 800aaae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800aab0:	b153      	cbz	r3, 800aac8 <ready_thread+0x4c>
	int32_t b2 = thread_2->base.prio;
 800aab2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800aab6:	4291      	cmp	r1, r2
		return b2 - b1;
 800aab8:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800aabc:	d002      	beq.n	800aac4 <ready_thread+0x48>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800aabe:	f1bc 0f00 	cmp.w	ip, #0
 800aac2:	dc09      	bgt.n	800aad8 <ready_thread+0x5c>
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d1f2      	bne.n	800aaae <ready_thread+0x32>
	node->prev = tail;
 800aac8:	e9c0 6400 	strd	r6, r4, [r0]
	tail->next = node;
 800aacc:	6020      	str	r0, [r4, #0]
	list->tail = node;
 800aace:	6228      	str	r0, [r5, #32]
}
 800aad0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7ff bf66 	b.w	800a9a4 <update_cache>
	sys_dnode_t *const prev = successor->prev;
 800aad8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800aada:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800aade:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800aae0:	6058      	str	r0, [r3, #4]
}
 800aae2:	e7f5      	b.n	800aad0 <ready_thread+0x54>
 800aae4:	2000144c 	.word	0x2000144c

0800aae8 <z_thread_timeout>:
{
 800aae8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800aaea:	f04f 0310 	mov.w	r3, #16
 800aaee:	f3ef 8411 	mrs	r4, BASEPRI
 800aaf2:	f383 8812 	msr	BASEPRI_MAX, r3
 800aaf6:	f3bf 8f6f 	isb	sy
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800aafa:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
		if (!killed) {
 800aafe:	f013 0228 	ands.w	r2, r3, #40	; 0x28
 800ab02:	d115      	bne.n	800ab30 <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
 800ab04:	f850 1c10 	ldr.w	r1, [r0, #-16]
 800ab08:	b159      	cbz	r1, 800ab22 <z_thread_timeout+0x3a>
	sys_dnode_t *const prev = node->prev;
 800ab0a:	f850 5c14 	ldr.w	r5, [r0, #-20]
	sys_dnode_t *const next = node->next;
 800ab0e:	f850 1c18 	ldr.w	r1, [r0, #-24]
	prev->next = next;
 800ab12:	6029      	str	r1, [r5, #0]
	next->prev = prev;
 800ab14:	604d      	str	r5, [r1, #4]
	node->prev = NULL;
 800ab16:	e940 2206 	strd	r2, r2, [r0, #-24]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ab1a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
	thread->base.pended_on = NULL;
 800ab1e:	f840 2c10 	str.w	r2, [r0, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800ab22:	f023 0314 	bic.w	r3, r3, #20
 800ab26:	f800 3c0b 	strb.w	r3, [r0, #-11]
			ready_thread(thread);
 800ab2a:	3818      	subs	r0, #24
 800ab2c:	f7ff ffa6 	bl	800aa7c <ready_thread>
	__asm__ volatile(
 800ab30:	f384 8811 	msr	BASEPRI, r4
 800ab34:	f3bf 8f6f 	isb	sy
}
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	bf00      	nop

0800ab3c <add_to_waitq_locked>:
{
 800ab3c:	b538      	push	{r3, r4, r5, lr}
	if (z_is_thread_queued(thread)) {
 800ab3e:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
 800ab42:	7b42      	ldrb	r2, [r0, #13]
 800ab44:	2b00      	cmp	r3, #0
{
 800ab46:	4604      	mov	r4, r0
 800ab48:	460d      	mov	r5, r1
	if (z_is_thread_queued(thread)) {
 800ab4a:	db2c      	blt.n	800aba6 <add_to_waitq_locked+0x6a>
	update_cache(thread == _current);
 800ab4c:	4b1e      	ldr	r3, [pc, #120]	; (800abc8 <add_to_waitq_locked+0x8c>)
 800ab4e:	6898      	ldr	r0, [r3, #8]
 800ab50:	1b00      	subs	r0, r0, r4
 800ab52:	fab0 f080 	clz	r0, r0
 800ab56:	0940      	lsrs	r0, r0, #5
 800ab58:	f7ff ff24 	bl	800a9a4 <update_cache>
	thread->base.thread_state |= _THREAD_PENDING;
 800ab5c:	7b63      	ldrb	r3, [r4, #13]
 800ab5e:	f043 0302 	orr.w	r3, r3, #2
 800ab62:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 800ab64:	b1c5      	cbz	r5, 800ab98 <add_to_waitq_locked+0x5c>
	return list->head == list;
 800ab66:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 800ab68:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	d015      	beq.n	800ab9a <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ab6e:	b1a3      	cbz	r3, 800ab9a <add_to_waitq_locked+0x5e>
	int32_t b1 = thread_1->base.prio;
 800ab70:	f994 100e 	ldrsb.w	r1, [r4, #14]
 800ab74:	e001      	b.n	800ab7a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800ab76:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ab78:	b153      	cbz	r3, 800ab90 <add_to_waitq_locked+0x54>
	int32_t b2 = thread_2->base.prio;
 800ab7a:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800ab7e:	4291      	cmp	r1, r2
		return b2 - b1;
 800ab80:	eba2 0001 	sub.w	r0, r2, r1
	if (b1 != b2) {
 800ab84:	d001      	beq.n	800ab8a <add_to_waitq_locked+0x4e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ab86:	2800      	cmp	r0, #0
 800ab88:	dc18      	bgt.n	800abbc <add_to_waitq_locked+0x80>
 800ab8a:	686a      	ldr	r2, [r5, #4]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d1f2      	bne.n	800ab76 <add_to_waitq_locked+0x3a>
	node->prev = tail;
 800ab90:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 800ab94:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800ab96:	606c      	str	r4, [r5, #4]
}
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	686a      	ldr	r2, [r5, #4]
	node->prev = tail;
 800ab9c:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
 800aba0:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800aba2:	606c      	str	r4, [r5, #4]
 800aba4:	e7f8      	b.n	800ab98 <add_to_waitq_locked+0x5c>
	sys_dnode_t *const next = node->next;
 800aba6:	e9d0 3100 	ldrd	r3, r1, [r0]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800abaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abae:	7342      	strb	r2, [r0, #13]
	prev->next = next;
 800abb0:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 800abb2:	6059      	str	r1, [r3, #4]
	node->next = NULL;
 800abb4:	2300      	movs	r3, #0
	node->prev = NULL;
 800abb6:	e9c0 3300 	strd	r3, r3, [r0]
}
 800abba:	e7c7      	b.n	800ab4c <add_to_waitq_locked+0x10>
	sys_dnode_t *const prev = successor->prev;
 800abbc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800abbe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800abc2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800abc4:	605c      	str	r4, [r3, #4]
}
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	2000144c 	.word	0x2000144c

0800abcc <pend>:
{
 800abcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd0:	4606      	mov	r6, r0
 800abd2:	4615      	mov	r5, r2
 800abd4:	461c      	mov	r4, r3
	__asm__ volatile(
 800abd6:	f04f 0310 	mov.w	r3, #16
 800abda:	f3ef 8711 	mrs	r7, BASEPRI
 800abde:	f383 8812 	msr	BASEPRI_MAX, r3
 800abe2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 800abe6:	f7ff ffa9 	bl	800ab3c <add_to_waitq_locked>
	__asm__ volatile(
 800abea:	f387 8811 	msr	BASEPRI, r7
 800abee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800abf2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800abf6:	bf08      	it	eq
 800abf8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 800abfc:	d101      	bne.n	800ac02 <pend+0x36>
}
 800abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac02:	462a      	mov	r2, r5
 800ac04:	4623      	mov	r3, r4
 800ac06:	f106 0018 	add.w	r0, r6, #24
 800ac0a:	4902      	ldr	r1, [pc, #8]	; (800ac14 <pend+0x48>)
 800ac0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	f000 bc74 	b.w	800b4fc <z_add_timeout>
 800ac14:	0800aae9 	.word	0x0800aae9

0800ac18 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800ac18:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800ac1c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800ac20:	4283      	cmp	r3, r0
		return b2 - b1;
 800ac22:	bf14      	ite	ne
 800ac24:	1ac0      	subne	r0, r0, r3
	return 0;
 800ac26:	2000      	moveq	r0, #0
}
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop

0800ac2c <z_time_slice>:
{
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800ac2e:	f04f 0310 	mov.w	r3, #16
 800ac32:	f3ef 8511 	mrs	r5, BASEPRI
 800ac36:	f383 8812 	msr	BASEPRI_MAX, r3
 800ac3a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800ac3e:	4c20      	ldr	r4, [pc, #128]	; (800acc0 <z_time_slice+0x94>)
 800ac40:	4a20      	ldr	r2, [pc, #128]	; (800acc4 <z_time_slice+0x98>)
 800ac42:	68a3      	ldr	r3, [r4, #8]
 800ac44:	6811      	ldr	r1, [r2, #0]
	if (slice_time != 0) {
 800ac46:	4e20      	ldr	r6, [pc, #128]	; (800acc8 <z_time_slice+0x9c>)
	if (pending_current == _current) {
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	d024      	beq.n	800ac96 <z_time_slice+0x6a>
	pending_current = NULL;
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800ac50:	6832      	ldr	r2, [r6, #0]
 800ac52:	b1ca      	cbz	r2, 800ac88 <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 800ac54:	89da      	ldrh	r2, [r3, #14]
 800ac56:	2a7f      	cmp	r2, #127	; 0x7f
 800ac58:	d816      	bhi.n	800ac88 <z_time_slice+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
 800ac5a:	7b59      	ldrb	r1, [r3, #13]
 800ac5c:	f011 071f 	ands.w	r7, r1, #31
 800ac60:	d112      	bne.n	800ac88 <z_time_slice+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800ac62:	4a1a      	ldr	r2, [pc, #104]	; (800accc <z_time_slice+0xa0>)
 800ac64:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	db0c      	blt.n	800ac88 <z_time_slice+0x5c>
		&& !z_is_idle_thread_object(thread);
 800ac6e:	4a18      	ldr	r2, [pc, #96]	; (800acd0 <z_time_slice+0xa4>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d009      	beq.n	800ac88 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	4282      	cmp	r2, r0
 800ac78:	dd1a      	ble.n	800acb0 <z_time_slice+0x84>
			_current_cpu->slice_ticks -= ticks;
 800ac7a:	1a10      	subs	r0, r2, r0
 800ac7c:	6120      	str	r0, [r4, #16]
	__asm__ volatile(
 800ac7e:	f385 8811 	msr	BASEPRI, r5
 800ac82:	f3bf 8f6f 	isb	sy
}
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_current_cpu->slice_ticks = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6123      	str	r3, [r4, #16]
 800ac8c:	f385 8811 	msr	BASEPRI, r5
 800ac90:	f3bf 8f6f 	isb	sy
}
 800ac94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (slice_time != 0) {
 800ac96:	6833      	ldr	r3, [r6, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d0f7      	beq.n	800ac8c <z_time_slice+0x60>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800ac9c:	f7fd fa1e 	bl	80080dc <sys_clock_elapsed>
 800aca0:	6832      	ldr	r2, [r6, #0]
		z_set_timeout_expiry(slice_time, false);
 800aca2:	2100      	movs	r1, #0
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800aca4:	1813      	adds	r3, r2, r0
		z_set_timeout_expiry(slice_time, false);
 800aca6:	4610      	mov	r0, r2
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800aca8:	6123      	str	r3, [r4, #16]
		z_set_timeout_expiry(slice_time, false);
 800acaa:	f000 fcc3 	bl	800b634 <z_set_timeout_expiry>
}
 800acae:	e7ed      	b.n	800ac8c <z_time_slice+0x60>
			move_thread_to_end_of_prio_q(_current);
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fea3 	bl	800a9fc <move_thread_to_end_of_prio_q>
	if (slice_time != 0) {
 800acb6:	6833      	ldr	r3, [r6, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0e7      	beq.n	800ac8c <z_time_slice+0x60>
 800acbc:	e7ee      	b.n	800ac9c <z_time_slice+0x70>
 800acbe:	bf00      	nop
 800acc0:	2000144c 	.word	0x2000144c
 800acc4:	20001488 	.word	0x20001488
 800acc8:	20001490 	.word	0x20001490
 800accc:	2000148c 	.word	0x2000148c
 800acd0:	20000a78 	.word	0x20000a78

0800acd4 <z_ready_thread>:
{
 800acd4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800acd6:	f04f 0310 	mov.w	r3, #16
 800acda:	f3ef 8411 	mrs	r4, BASEPRI
 800acde:	f383 8812 	msr	BASEPRI_MAX, r3
 800ace2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800ace6:	f7ff fec9 	bl	800aa7c <ready_thread>
	__asm__ volatile(
 800acea:	f384 8811 	msr	BASEPRI, r4
 800acee:	f3bf 8f6f 	isb	sy
}
 800acf2:	bd10      	pop	{r4, pc}

0800acf4 <z_sched_start>:
{
 800acf4:	b510      	push	{r4, lr}
	__asm__ volatile(
 800acf6:	f04f 0210 	mov.w	r2, #16
 800acfa:	f3ef 8411 	mrs	r4, BASEPRI
 800acfe:	f382 8812 	msr	BASEPRI_MAX, r2
 800ad02:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800ad06:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
 800ad08:	0753      	lsls	r3, r2, #29
 800ad0a:	d404      	bmi.n	800ad16 <z_sched_start+0x22>
	__asm__ volatile(
 800ad0c:	f384 8811 	msr	BASEPRI, r4
 800ad10:	f3bf 8f6f 	isb	sy
}
 800ad14:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800ad16:	f022 0204 	bic.w	r2, r2, #4
 800ad1a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800ad1c:	f7ff feae 	bl	800aa7c <ready_thread>
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d1f3      	bne.n	800ad0c <z_sched_start+0x18>
 800ad24:	f3ef 8005 	mrs	r0, IPSR
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d1ef      	bne.n	800ad0c <z_sched_start+0x18>
	new_thread = _kernel.ready_q.cache;
 800ad2c:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <z_sched_start+0x4c>)
	if (resched(key.key) && need_swap()) {
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d0ea      	beq.n	800ad0c <z_sched_start+0x18>
}
 800ad36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
 800ad3a:	f7f7 bcb7 	b.w	80026ac <arch_swap>
 800ad3e:	bf00      	nop
 800ad40:	2000144c 	.word	0x2000144c

0800ad44 <z_impl_k_thread_suspend>:
{
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800ad48:	3018      	adds	r0, #24
 800ad4a:	f000 fc59 	bl	800b600 <z_abort_timeout>
	__asm__ volatile(
 800ad4e:	f04f 0310 	mov.w	r3, #16
 800ad52:	f3ef 8611 	mrs	r6, BASEPRI
 800ad56:	f383 8812 	msr	BASEPRI_MAX, r3
 800ad5a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800ad5e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
 800ad62:	7b63      	ldrb	r3, [r4, #13]
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	db12      	blt.n	800ad8e <z_impl_k_thread_suspend+0x4a>
		update_cache(thread == _current);
 800ad68:	4d18      	ldr	r5, [pc, #96]	; (800adcc <z_impl_k_thread_suspend+0x88>)
 800ad6a:	68a8      	ldr	r0, [r5, #8]
 800ad6c:	1b00      	subs	r0, r0, r4
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800ad6e:	f043 0310 	orr.w	r3, r3, #16
 800ad72:	fab0 f080 	clz	r0, r0
 800ad76:	7363      	strb	r3, [r4, #13]
 800ad78:	0940      	lsrs	r0, r0, #5
 800ad7a:	f7ff fe13 	bl	800a9a4 <update_cache>
	__asm__ volatile(
 800ad7e:	f386 8811 	msr	BASEPRI, r6
 800ad82:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 800ad86:	68ab      	ldr	r3, [r5, #8]
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d00a      	beq.n	800ada2 <z_impl_k_thread_suspend+0x5e>
}
 800ad8c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const next = node->next;
 800ad8e:	e9d4 2100 	ldrd	r2, r1, [r4]
	prev->next = next;
 800ad92:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800ad94:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800ad96:	2200      	movs	r2, #0
	node->prev = NULL;
 800ad98:	e9c4 2200 	strd	r2, r2, [r4]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800ad9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800ada0:	e7e2      	b.n	800ad68 <z_impl_k_thread_suspend+0x24>
	__asm__ volatile(
 800ada2:	f04f 0210 	mov.w	r2, #16
 800ada6:	f3ef 8311 	mrs	r3, BASEPRI
 800adaa:	f382 8812 	msr	BASEPRI_MAX, r2
 800adae:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800adb2:	b933      	cbnz	r3, 800adc2 <z_impl_k_thread_suspend+0x7e>
 800adb4:	f3ef 8005 	mrs	r0, IPSR
 800adb8:	b918      	cbnz	r0, 800adc2 <z_impl_k_thread_suspend+0x7e>
}
 800adba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adbe:	f7f7 bc75 	b.w	80026ac <arch_swap>
	__asm__ volatile(
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	2000144c 	.word	0x2000144c

0800add0 <z_unpend_thread_no_timeout>:
	__asm__ volatile(
 800add0:	f04f 0310 	mov.w	r3, #16
 800add4:	f3ef 8111 	mrs	r1, BASEPRI
 800add8:	f383 8812 	msr	BASEPRI_MAX, r3
 800addc:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 800ade0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800ade4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ade6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ade8:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800adf0:	e9c0 3300 	strd	r3, r3, [r0]
 800adf4:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800adf6:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800adf8:	f381 8811 	msr	BASEPRI, r1
 800adfc:	f3bf 8f6f 	isb	sy
}
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop

0800ae04 <z_pend_curr>:
{
 800ae04:	b510      	push	{r4, lr}
	pending_current = _current;
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <z_pend_curr+0x20>)
 800ae08:	6898      	ldr	r0, [r3, #8]
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <z_pend_curr+0x24>)
{
 800ae0c:	460c      	mov	r4, r1
	pending_current = _current;
 800ae0e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800ae10:	4611      	mov	r1, r2
 800ae12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae16:	f7ff fed9 	bl	800abcc <pend>
 800ae1a:	4620      	mov	r0, r4
}
 800ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae20:	f7f7 bc44 	b.w	80026ac <arch_swap>
 800ae24:	2000144c 	.word	0x2000144c
 800ae28:	20001488 	.word	0x20001488

0800ae2c <z_unpend1_no_timeout>:
{
 800ae2c:	4603      	mov	r3, r0
	__asm__ volatile(
 800ae2e:	f04f 0210 	mov.w	r2, #16
 800ae32:	f3ef 8111 	mrs	r1, BASEPRI
 800ae36:	f382 8812 	msr	BASEPRI_MAX, r2
 800ae3a:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800ae3e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ae40:	4283      	cmp	r3, r0
 800ae42:	d011      	beq.n	800ae68 <z_unpend1_no_timeout+0x3c>
	if (n != NULL) {
 800ae44:	b158      	cbz	r0, 800ae5e <z_unpend1_no_timeout+0x32>
	sys_dnode_t *const next = node->next;
 800ae46:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800ae4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ae4c:	605a      	str	r2, [r3, #4]
 800ae4e:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800ae50:	2300      	movs	r3, #0
	node->prev = NULL;
 800ae52:	e9c0 3300 	strd	r3, r3, [r0]
 800ae56:	f022 0202 	bic.w	r2, r2, #2
 800ae5a:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800ae5c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800ae5e:	f381 8811 	msr	BASEPRI, r1
 800ae62:	f3bf 8f6f 	isb	sy
}
 800ae66:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f381 8811 	msr	BASEPRI, r1
 800ae6e:	f3bf 8f6f 	isb	sy
}
 800ae72:	4770      	bx	lr

0800ae74 <z_unpend_first_thread>:
{
 800ae74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800ae76:	f04f 0310 	mov.w	r3, #16
 800ae7a:	f3ef 8511 	mrs	r5, BASEPRI
 800ae7e:	f383 8812 	msr	BASEPRI_MAX, r3
 800ae82:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800ae86:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ae88:	42a0      	cmp	r0, r4
 800ae8a:	d016      	beq.n	800aeba <z_unpend_first_thread+0x46>
	if (n != NULL) {
 800ae8c:	b17c      	cbz	r4, 800aeae <z_unpend_first_thread+0x3a>
	sys_dnode_t *const next = node->next;
 800ae8e:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 800ae92:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ae94:	605a      	str	r2, [r3, #4]
 800ae96:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800ae9e:	e9c4 3300 	strd	r3, r3, [r4]
 800aea2:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 800aea4:	60a3      	str	r3, [r4, #8]
 800aea6:	f104 0018 	add.w	r0, r4, #24
 800aeaa:	f000 fba9 	bl	800b600 <z_abort_timeout>
	__asm__ volatile(
 800aeae:	f385 8811 	msr	BASEPRI, r5
 800aeb2:	f3bf 8f6f 	isb	sy
}
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
	struct k_thread *thread = NULL;
 800aeba:	2400      	movs	r4, #0
 800aebc:	f385 8811 	msr	BASEPRI, r5
 800aec0:	f3bf 8f6f 	isb	sy
}
 800aec4:	4620      	mov	r0, r4
 800aec6:	bd38      	pop	{r3, r4, r5, pc}

0800aec8 <z_unpend_thread>:
	__asm__ volatile(
 800aec8:	f04f 0310 	mov.w	r3, #16
 800aecc:	f3ef 8111 	mrs	r1, BASEPRI
 800aed0:	f383 8812 	msr	BASEPRI_MAX, r3
 800aed4:	f3bf 8f6f 	isb	sy
	sys_dnode_t *const next = node->next;
 800aed8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
 800aedc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800aede:	605a      	str	r2, [r3, #4]
 800aee0:	7b42      	ldrb	r2, [r0, #13]
	node->next = NULL;
 800aee2:	2300      	movs	r3, #0
 800aee4:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800aee8:	e9c0 3300 	strd	r3, r3, [r0]
 800aeec:	7342      	strb	r2, [r0, #13]
	thread->base.pended_on = NULL;
 800aeee:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 800aef0:	f381 8811 	msr	BASEPRI, r1
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	3018      	adds	r0, #24
 800aefa:	f000 bb81 	b.w	800b600 <z_abort_timeout>
 800aefe:	bf00      	nop

0800af00 <z_set_prio>:
{
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800af02:	f04f 0310 	mov.w	r3, #16
 800af06:	f3ef 8411 	mrs	r4, BASEPRI
 800af0a:	f383 8812 	msr	BASEPRI_MAX, r3
 800af0e:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
 800af12:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800af14:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
 800af16:	b249      	sxtb	r1, r1
 800af18:	d101      	bne.n	800af1e <z_set_prio+0x1e>
 800af1a:	6982      	ldr	r2, [r0, #24]
 800af1c:	b132      	cbz	r2, 800af2c <z_set_prio+0x2c>
			thread->base.prio = prio;
 800af1e:	7381      	strb	r1, [r0, #14]
 800af20:	2000      	movs	r0, #0
	__asm__ volatile(
 800af22:	f384 8811 	msr	BASEPRI, r4
 800af26:	f3bf 8f6f 	isb	sy
}
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const next = node->next;
 800af2c:	e9d0 5600 	ldrd	r5, r6, [r0]
	return list->head == list;
 800af30:	4f17      	ldr	r7, [pc, #92]	; (800af90 <z_set_prio+0x90>)
	prev->next = next;
 800af32:	6035      	str	r5, [r6, #0]
	next->prev = prev;
 800af34:	606e      	str	r6, [r5, #4]
	node->prev = NULL;
 800af36:	e9c0 2200 	strd	r2, r2, [r0]
	thread->base.thread_state |= _THREAD_QUEUED;
 800af3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
 800af3e:	463e      	mov	r6, r7
 800af40:	7343      	strb	r3, [r0, #13]
 800af42:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	return (node == list->tail) ? NULL : node->next;
 800af46:	6a3d      	ldr	r5, [r7, #32]
				thread->base.prio = prio;
 800af48:	7381      	strb	r1, [r0, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800af4a:	42b3      	cmp	r3, r6
 800af4c:	d00d      	beq.n	800af6a <z_set_prio+0x6a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800af4e:	b163      	cbz	r3, 800af6a <z_set_prio+0x6a>
	int32_t b2 = thread_2->base.prio;
 800af50:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800af54:	428a      	cmp	r2, r1
		return b2 - b1;
 800af56:	eba2 0c01 	sub.w	ip, r2, r1
	if (b1 != b2) {
 800af5a:	d002      	beq.n	800af62 <z_set_prio+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800af5c:	f1bc 0f00 	cmp.w	ip, #0
 800af60:	dc10      	bgt.n	800af84 <z_set_prio+0x84>
	return (node == list->tail) ? NULL : node->next;
 800af62:	42ab      	cmp	r3, r5
 800af64:	d001      	beq.n	800af6a <z_set_prio+0x6a>
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	e7f1      	b.n	800af4e <z_set_prio+0x4e>
	node->prev = tail;
 800af6a:	e9c0 6500 	strd	r6, r5, [r0]
	tail->next = node;
 800af6e:	6028      	str	r0, [r5, #0]
	list->tail = node;
 800af70:	6238      	str	r0, [r7, #32]
			update_cache(1);
 800af72:	2001      	movs	r0, #1
 800af74:	f7ff fd16 	bl	800a9a4 <update_cache>
 800af78:	2001      	movs	r0, #1
 800af7a:	f384 8811 	msr	BASEPRI, r4
 800af7e:	f3bf 8f6f 	isb	sy
}
 800af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800af84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800af86:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
 800af8a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800af8c:	6058      	str	r0, [r3, #4]
}
 800af8e:	e7f0      	b.n	800af72 <z_set_prio+0x72>
 800af90:	2000144c 	.word	0x2000144c

0800af94 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800af94:	b949      	cbnz	r1, 800afaa <z_reschedule+0x16>
 800af96:	f3ef 8005 	mrs	r0, IPSR
 800af9a:	b930      	cbnz	r0, 800afaa <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
 800af9c:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
 800af9e:	699a      	ldr	r2, [r3, #24]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d001      	beq.n	800afaa <z_reschedule+0x16>
 800afa6:	f7f7 bb81 	b.w	80026ac <arch_swap>
 800afaa:	f381 8811 	msr	BASEPRI, r1
 800afae:	f3bf 8f6f 	isb	sy
}
 800afb2:	4770      	bx	lr
 800afb4:	2000144c 	.word	0x2000144c

0800afb8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800afb8:	4603      	mov	r3, r0
 800afba:	b920      	cbnz	r0, 800afc6 <z_reschedule_irqlock+0xe>
 800afbc:	f3ef 8205 	mrs	r2, IPSR
 800afc0:	b90a      	cbnz	r2, 800afc6 <z_reschedule_irqlock+0xe>
 800afc2:	f7f7 bb73 	b.w	80026ac <arch_swap>
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
}
 800afce:	4770      	bx	lr

0800afd0 <k_sched_lock>:
	__asm__ volatile(
 800afd0:	f04f 0310 	mov.w	r3, #16
 800afd4:	f3ef 8111 	mrs	r1, BASEPRI
 800afd8:	f383 8812 	msr	BASEPRI_MAX, r3
 800afdc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 800afe0:	4b04      	ldr	r3, [pc, #16]	; (800aff4 <k_sched_lock+0x24>)
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	7bd3      	ldrb	r3, [r2, #15]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800afea:	f381 8811 	msr	BASEPRI, r1
 800afee:	f3bf 8f6f 	isb	sy
}
 800aff2:	4770      	bx	lr
 800aff4:	2000144c 	.word	0x2000144c

0800aff8 <k_sched_unlock>:
{
 800aff8:	b510      	push	{r4, lr}
	__asm__ volatile(
 800affa:	f04f 0310 	mov.w	r3, #16
 800affe:	f3ef 8411 	mrs	r4, BASEPRI
 800b002:	f383 8812 	msr	BASEPRI_MAX, r3
 800b006:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 800b00a:	4b10      	ldr	r3, [pc, #64]	; (800b04c <k_sched_unlock+0x54>)
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	7bd3      	ldrb	r3, [r2, #15]
 800b010:	3301      	adds	r3, #1
		update_cache(0);
 800b012:	2000      	movs	r0, #0
		++_current->base.sched_locked;
 800b014:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800b016:	f7ff fcc5 	bl	800a9a4 <update_cache>
	__asm__ volatile(
 800b01a:	f384 8811 	msr	BASEPRI, r4
 800b01e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800b022:	f04f 0210 	mov.w	r2, #16
 800b026:	f3ef 8311 	mrs	r3, BASEPRI
 800b02a:	f382 8812 	msr	BASEPRI_MAX, r2
 800b02e:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800b032:	b933      	cbnz	r3, 800b042 <k_sched_unlock+0x4a>
 800b034:	f3ef 8005 	mrs	r0, IPSR
 800b038:	b918      	cbnz	r0, 800b042 <k_sched_unlock+0x4a>
}
 800b03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03e:	f7f7 bb35 	b.w	80026ac <arch_swap>
	__asm__ volatile(
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	bd10      	pop	{r4, pc}
 800b04c:	2000144c 	.word	0x2000144c

0800b050 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 800b050:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <z_sched_init+0x38>)
 800b052:	f103 021c 	add.w	r2, r3, #28
	sys_dlist_init(&rq->runq);
#endif
}

void z_sched_init(void)
{
 800b056:	b410      	push	{r4}
	list->tail = (sys_dnode_t *)list;
 800b058:	e9c3 2207 	strd	r2, r2, [r3, #28]
	__asm__ volatile(
 800b05c:	f04f 0210 	mov.w	r2, #16
 800b060:	f3ef 8111 	mrs	r1, BASEPRI
 800b064:	f382 8812 	msr	BASEPRI_MAX, r2
 800b068:	f3bf 8f6f 	isb	sy
		slice_time = k_ms_to_ticks_ceil32(slice);
 800b06c:	4c07      	ldr	r4, [pc, #28]	; (800b08c <z_sched_init+0x3c>)
		slice_max_prio = prio;
 800b06e:	4808      	ldr	r0, [pc, #32]	; (800b090 <z_sched_init+0x40>)
		_current_cpu->slice_ticks = 0;
 800b070:	2200      	movs	r2, #0
 800b072:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 800b074:	6022      	str	r2, [r4, #0]
		slice_max_prio = prio;
 800b076:	6002      	str	r2, [r0, #0]
	__asm__ volatile(
 800b078:	f381 8811 	msr	BASEPRI, r1
 800b07c:	f3bf 8f6f 	isb	sy

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
 800b080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	2000144c 	.word	0x2000144c
 800b08c:	20001490 	.word	0x20001490
 800b090:	2000148c 	.word	0x2000148c

0800b094 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 800b096:	f04f 0310 	mov.w	r3, #16
 800b09a:	f3ef 8711 	mrs	r7, BASEPRI
 800b09e:	f383 8812 	msr	BASEPRI_MAX, r3
 800b0a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
 800b0a6:	4d1b      	ldr	r5, [pc, #108]	; (800b114 <z_impl_k_yield+0x80>)
 800b0a8:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b0aa:	7b4b      	ldrb	r3, [r1, #13]
	sys_dnode_t *const next = node->next;
 800b0ac:	680a      	ldr	r2, [r1, #0]
	sys_dnode_t *const prev = node->prev;
 800b0ae:	6848      	ldr	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_QUEUED;
 800b0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
	prev->next = next;
 800b0b4:	6002      	str	r2, [r0, #0]
	return list->head == list;
 800b0b6:	462e      	mov	r6, r5
	next->prev = prev;
 800b0b8:	6050      	str	r0, [r2, #4]
	node->next = NULL;
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	734b      	strb	r3, [r1, #13]
 800b0be:	600a      	str	r2, [r1, #0]
	return list->head == list;
 800b0c0:	f856 3f1c 	ldr.w	r3, [r6, #28]!
	node->prev = NULL;
 800b0c4:	604a      	str	r2, [r1, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b0c6:	42b3      	cmp	r3, r6
	return (node == list->tail) ? NULL : node->next;
 800b0c8:	6a2c      	ldr	r4, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b0ca:	d010      	beq.n	800b0ee <z_impl_k_yield+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b0cc:	b17b      	cbz	r3, 800b0ee <z_impl_k_yield+0x5a>
	int32_t b1 = thread_1->base.prio;
 800b0ce:	f991 000e 	ldrsb.w	r0, [r1, #14]
 800b0d2:	e001      	b.n	800b0d8 <z_impl_k_yield+0x44>
	return (node == list->tail) ? NULL : node->next;
 800b0d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b0d6:	b153      	cbz	r3, 800b0ee <z_impl_k_yield+0x5a>
	int32_t b2 = thread_2->base.prio;
 800b0d8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
 800b0dc:	4290      	cmp	r0, r2
		return b2 - b1;
 800b0de:	eba2 0c00 	sub.w	ip, r2, r0
	if (b1 != b2) {
 800b0e2:	d002      	beq.n	800b0ea <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b0e4:	f1bc 0f00 	cmp.w	ip, #0
 800b0e8:	dc0d      	bgt.n	800b106 <z_impl_k_yield+0x72>
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	d1f2      	bne.n	800b0d4 <z_impl_k_yield+0x40>
	node->prev = tail;
 800b0ee:	e9c1 6400 	strd	r6, r4, [r1]
	tail->next = node;
 800b0f2:	6021      	str	r1, [r4, #0]
	list->tail = node;
 800b0f4:	6229      	str	r1, [r5, #32]
	}
	queue_thread(_current);
	update_cache(1);
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	f7ff fc54 	bl	800a9a4 <update_cache>
 800b0fc:	4638      	mov	r0, r7
	z_swap(&sched_spinlock, key);
}
 800b0fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b102:	f7f7 bad3 	b.w	80026ac <arch_swap>
	sys_dnode_t *const prev = successor->prev;
 800b106:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800b108:	e9c1 3200 	strd	r3, r2, [r1]
	prev->next = node;
 800b10c:	6011      	str	r1, [r2, #0]
	successor->prev = node;
 800b10e:	6059      	str	r1, [r3, #4]
}
 800b110:	e7f1      	b.n	800b0f6 <z_impl_k_yield+0x62>
 800b112:	bf00      	nop
 800b114:	2000144c 	.word	0x2000144c

0800b118 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
 800b118:	ea50 0301 	orrs.w	r3, r0, r1
{
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800b120:	d04a      	beq.n	800b1b8 <z_tick_sleep+0xa0>
		k_yield();
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
 800b122:	f06f 0401 	mvn.w	r4, #1
 800b126:	1a24      	subs	r4, r4, r0
 800b128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b12c:	eb63 0301 	sbc.w	r3, r3, r1
 800b130:	2c01      	cmp	r4, #1
 800b132:	f173 0300 	sbcs.w	r3, r3, #0
 800b136:	4605      	mov	r5, r0
 800b138:	460e      	mov	r6, r1
 800b13a:	db2e      	blt.n	800b19a <z_tick_sleep+0x82>
 800b13c:	f04f 0310 	mov.w	r3, #16
 800b140:	f3ef 8811 	mrs	r8, BASEPRI
 800b144:	f383 8812 	msr	BASEPRI_MAX, r3
 800b148:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 800b14c:	4f1d      	ldr	r7, [pc, #116]	; (800b1c4 <z_tick_sleep+0xac>)
 800b14e:	4a1e      	ldr	r2, [pc, #120]	; (800b1c8 <z_tick_sleep+0xb0>)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6013      	str	r3, [r2, #0]
	if (z_is_thread_queued(thread)) {
 800b154:	f993 200d 	ldrsb.w	r2, [r3, #13]
	return (thread->base.thread_state & state) != 0U;
 800b158:	7b59      	ldrb	r1, [r3, #13]
 800b15a:	2a00      	cmp	r2, #0
 800b15c:	db21      	blt.n	800b1a2 <z_tick_sleep+0x8a>
	update_cache(thread == _current);
 800b15e:	2001      	movs	r0, #1
 800b160:	f7ff fc20 	bl	800a9a4 <update_cache>
#endif
	unready_thread(_current);
	z_add_thread_timeout(_current, timeout);
 800b164:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800b166:	4919      	ldr	r1, [pc, #100]	; (800b1cc <z_tick_sleep+0xb4>)
 800b168:	462a      	mov	r2, r5
 800b16a:	4633      	mov	r3, r6
 800b16c:	3018      	adds	r0, #24
 800b16e:	f000 f9c5 	bl	800b4fc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800b172:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800b174:	7b53      	ldrb	r3, [r2, #13]
 800b176:	f043 0310 	orr.w	r3, r3, #16
 800b17a:	7353      	strb	r3, [r2, #13]
 800b17c:	4640      	mov	r0, r8
 800b17e:	f7f7 fa95 	bl	80026ac <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800b182:	f000 fa73 	bl	800b66c <sys_clock_tick_get_32>
 800b186:	1a20      	subs	r0, r4, r0
 800b188:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800b18c:	2801      	cmp	r0, #1
 800b18e:	f173 0300 	sbcs.w	r3, r3, #0
		return ticks;
	}
#endif

	return 0;
 800b192:	bfb8      	it	lt
 800b194:	2000      	movlt	r0, #0
}
 800b196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800b19a:	f000 fa67 	bl	800b66c <sys_clock_tick_get_32>
 800b19e:	1944      	adds	r4, r0, r5
 800b1a0:	e7cc      	b.n	800b13c <z_tick_sleep+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b1a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b1a6:	7359      	strb	r1, [r3, #13]
	sys_dnode_t *const next = node->next;
 800b1a8:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
 800b1ac:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800b1ae:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800b1b0:	2200      	movs	r2, #0
	node->prev = NULL;
 800b1b2:	e9c3 2200 	strd	r2, r2, [r3]
}
 800b1b6:	e7d2      	b.n	800b15e <z_tick_sleep+0x46>
 800b1b8:	f7ff ff6c 	bl	800b094 <z_impl_k_yield>
		return 0;
 800b1bc:	2000      	movs	r0, #0
}
 800b1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c2:	bf00      	nop
 800b1c4:	2000144c 	.word	0x2000144c
 800b1c8:	20001488 	.word	0x20001488
 800b1cc:	0800aae9 	.word	0x0800aae9

0800b1d0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b1d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b1d4:	bf08      	it	eq
 800b1d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 800b1da:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b1dc:	d007      	beq.n	800b1ee <z_impl_k_sleep+0x1e>
		return (int32_t) K_TICKS_FOREVER;
	}

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
 800b1de:	f7ff ff9b 	bl	800b118 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800b1e2:	220a      	movs	r2, #10
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	17c1      	asrs	r1, r0, #31
 800b1e8:	f7f5 fbf8 	bl	80009dc <__aeabi_uldivmod>
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
 800b1ec:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800b1ee:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <z_impl_k_sleep+0x2c>)
 800b1f0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800b1f2:	f7ff fda7 	bl	800ad44 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b1fa:	bd08      	pop	{r3, pc}
 800b1fc:	2000144c 	.word	0x2000144c

0800b200 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
 800b200:	4601      	mov	r1, r0
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
 800b202:	17c9      	asrs	r1, r1, #31
		t += off;
 800b204:	3063      	adds	r0, #99	; 0x63
{
 800b206:	b508      	push	{r3, lr}
			return t / ((uint64_t)from_hz / to_hz);
 800b208:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b20c:	f04f 0300 	mov.w	r3, #0
 800b210:	f141 0100 	adc.w	r1, r1, #0
 800b214:	f7f5 fbe2 	bl	80009dc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800b218:	17c1      	asrs	r1, r0, #31
 800b21a:	f7ff ff7d 	bl	800b118 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 800b21e:	2364      	movs	r3, #100	; 0x64

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
 800b220:	fb03 f000 	mul.w	r0, r3, r0
 800b224:	bd08      	pop	{r3, pc}
 800b226:	bf00      	nop

0800b228 <z_impl_k_wakeup>:
}
#include <syscalls/k_usleep_mrsh.c>
#endif

void z_impl_k_wakeup(k_tid_t thread)
{
 800b228:	b538      	push	{r3, r4, r5, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_thread, wakeup, thread);

	if (z_is_thread_pending(thread)) {
 800b22a:	7b43      	ldrb	r3, [r0, #13]
 800b22c:	079b      	lsls	r3, r3, #30
 800b22e:	d500      	bpl.n	800b232 <z_impl_k_wakeup+0xa>
#endif

	if (!arch_is_in_isr()) {
		z_reschedule_unlocked();
	}
}
 800b230:	bd38      	pop	{r3, r4, r5, pc}
	return z_abort_timeout(&thread->base.timeout);
 800b232:	4604      	mov	r4, r0
 800b234:	3018      	adds	r0, #24
 800b236:	f000 f9e3 	bl	800b600 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800b23a:	2800      	cmp	r0, #0
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800b23c:	7b63      	ldrb	r3, [r4, #13]
	if (z_abort_thread_timeout(thread) < 0) {
 800b23e:	da01      	bge.n	800b244 <z_impl_k_wakeup+0x1c>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800b240:	2b10      	cmp	r3, #16
 800b242:	d1f5      	bne.n	800b230 <z_impl_k_wakeup+0x8>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800b244:	f023 0310 	bic.w	r3, r3, #16
 800b248:	7363      	strb	r3, [r4, #13]
 800b24a:	f04f 0310 	mov.w	r3, #16
 800b24e:	f3ef 8511 	mrs	r5, BASEPRI
 800b252:	f383 8812 	msr	BASEPRI_MAX, r3
 800b256:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
 800b25a:	4620      	mov	r0, r4
 800b25c:	f7ff fc0e 	bl	800aa7c <ready_thread>
	__asm__ volatile(
 800b260:	f385 8811 	msr	BASEPRI, r5
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1df      	bne.n	800b230 <z_impl_k_wakeup+0x8>
	__asm__ volatile(
 800b270:	f04f 0210 	mov.w	r2, #16
 800b274:	f3ef 8311 	mrs	r3, BASEPRI
 800b278:	f382 8812 	msr	BASEPRI_MAX, r2
 800b27c:	f3bf 8f6f 	isb	sy
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800b280:	b933      	cbnz	r3, 800b290 <z_impl_k_wakeup+0x68>
 800b282:	f3ef 8005 	mrs	r0, IPSR
 800b286:	b918      	cbnz	r0, 800b290 <z_impl_k_wakeup+0x68>
}
 800b288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b28c:	f7f7 ba0e 	b.w	80026ac <arch_swap>
	__asm__ volatile(
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	bd38      	pop	{r3, r4, r5, pc}
 800b29a:	bf00      	nop

0800b29c <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
 800b29c:	4b01      	ldr	r3, [pc, #4]	; (800b2a4 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800b29e:	6898      	ldr	r0, [r3, #8]
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	2000144c 	.word	0x2000144c

0800b2a8 <z_impl_k_is_preempt_thread>:
 800b2a8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
 800b2ac:	b93b      	cbnz	r3, 800b2be <z_impl_k_is_preempt_thread+0x16>
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b2b0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
 800b2b2:	89d8      	ldrh	r0, [r3, #14]
 800b2b4:	287f      	cmp	r0, #127	; 0x7f
 800b2b6:	bf8c      	ite	hi
 800b2b8:	2000      	movhi	r0, #0
 800b2ba:	2001      	movls	r0, #1
 800b2bc:	4770      	bx	lr
 800b2be:	2000      	movs	r0, #0
}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	2000144c 	.word	0x2000144c

0800b2c8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
 800b2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
 800b2cc:	f04f 0310 	mov.w	r3, #16
 800b2d0:	f3ef 8711 	mrs	r7, BASEPRI
 800b2d4:	f383 8812 	msr	BASEPRI_MAX, r3
 800b2d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800b2dc:	7b43      	ldrb	r3, [r0, #13]
 800b2de:	f013 0208 	ands.w	r2, r3, #8
 800b2e2:	d005      	beq.n	800b2f0 <z_thread_abort+0x28>
	__asm__ volatile(
 800b2e4:	f387 8811 	msr	BASEPRI, r7
 800b2e8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800b2f0:	f023 0120 	bic.w	r1, r3, #32
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	f041 0008 	orr.w	r0, r1, #8
		if (z_is_thread_queued(thread)) {
 800b2fa:	09c9      	lsrs	r1, r1, #7
 800b2fc:	d13e      	bne.n	800b37c <z_thread_abort+0xb4>
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800b2fe:	7368      	strb	r0, [r5, #13]
		if (thread->base.pended_on != NULL) {
 800b300:	68ab      	ldr	r3, [r5, #8]
 800b302:	b15b      	cbz	r3, 800b31c <z_thread_abort+0x54>
	sys_dnode_t *const next = node->next;
 800b304:	e9d5 3200 	ldrd	r3, r2, [r5]
	prev->next = next;
 800b308:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b30a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
 800b30c:	7b6a      	ldrb	r2, [r5, #13]
	node->next = NULL;
 800b30e:	2300      	movs	r3, #0
	node->prev = NULL;
 800b310:	e9c5 3300 	strd	r3, r3, [r5]
 800b314:	f022 0202 	bic.w	r2, r2, #2
 800b318:	736a      	strb	r2, [r5, #13]
	thread->base.pended_on = NULL;
 800b31a:	60ab      	str	r3, [r5, #8]
 800b31c:	f105 0018 	add.w	r0, r5, #24
 800b320:	f000 f96e 	bl	800b600 <z_abort_timeout>
	return list->head == list;
 800b324:	6dac      	ldr	r4, [r5, #88]	; 0x58
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800b326:	f105 0858 	add.w	r8, r5, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b32a:	45a0      	cmp	r8, r4
 800b32c:	d017      	beq.n	800b35e <z_thread_abort+0x96>
	node->next = NULL;
 800b32e:	2600      	movs	r6, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800b330:	b1ac      	cbz	r4, 800b35e <z_thread_abort+0x96>
	sys_dnode_t *const next = node->next;
 800b332:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
 800b336:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800b338:	605a      	str	r2, [r3, #4]
 800b33a:	7b63      	ldrb	r3, [r4, #13]
	node->next = NULL;
 800b33c:	6026      	str	r6, [r4, #0]
 800b33e:	f023 0302 	bic.w	r3, r3, #2
 800b342:	7363      	strb	r3, [r4, #13]
	node->prev = NULL;
 800b344:	6066      	str	r6, [r4, #4]
	thread->base.pended_on = NULL;
 800b346:	60a6      	str	r6, [r4, #8]
 800b348:	f104 0018 	add.w	r0, r4, #24
 800b34c:	f000 f958 	bl	800b600 <z_abort_timeout>
 800b350:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800b352:	4620      	mov	r0, r4
 800b354:	f7ff fb92 	bl	800aa7c <ready_thread>
	return list->head == list;
 800b358:	6dac      	ldr	r4, [r5, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b35a:	4544      	cmp	r4, r8
 800b35c:	d1e8      	bne.n	800b330 <z_thread_abort+0x68>
		update_cache(1);
 800b35e:	2001      	movs	r0, #1
 800b360:	f7ff fb20 	bl	800a9a4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
 800b364:	4b0b      	ldr	r3, [pc, #44]	; (800b394 <z_thread_abort+0xcc>)
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	42ab      	cmp	r3, r5
 800b36a:	d1bb      	bne.n	800b2e4 <z_thread_abort+0x1c>
 800b36c:	f3ef 8305 	mrs	r3, IPSR
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1b7      	bne.n	800b2e4 <z_thread_abort+0x1c>
 800b374:	4638      	mov	r0, r7
 800b376:	f7f7 f999 	bl	80026ac <arch_swap>
	return ret;
 800b37a:	e7b3      	b.n	800b2e4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b37c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800b380:	f043 0308 	orr.w	r3, r3, #8
	sys_dnode_t *const prev = node->prev;
 800b384:	6869      	ldr	r1, [r5, #4]
 800b386:	736b      	strb	r3, [r5, #13]
	sys_dnode_t *const next = node->next;
 800b388:	682b      	ldr	r3, [r5, #0]
	prev->next = next;
 800b38a:	600b      	str	r3, [r1, #0]
	next->prev = prev;
 800b38c:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 800b38e:	e9c5 2200 	strd	r2, r2, [r5]
}
 800b392:	e7b5      	b.n	800b300 <z_thread_abort+0x38>
 800b394:	2000144c 	.word	0x2000144c

0800b398 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
 800b398:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800b39a:	f04f 0310 	mov.w	r3, #16
 800b39e:	f3ef 8511 	mrs	r5, BASEPRI
 800b3a2:	f383 8812 	msr	BASEPRI_MAX, r3
 800b3a6:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800b3aa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b3ac:	42a0      	cmp	r0, r4
 800b3ae:	d01b      	beq.n	800b3e8 <z_sched_wake+0x50>
	if (n != NULL) {
 800b3b0:	b304      	cbz	r4, 800b3f4 <z_sched_wake+0x5c>
	sys_dnode_t *const prev = node->prev;
 800b3b2:	6860      	ldr	r0, [r4, #4]
	sys_dnode_t *const next = node->next;
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	67e1      	str	r1, [r4, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800b3b8:	6162      	str	r2, [r4, #20]
	prev->next = next;
 800b3ba:	6003      	str	r3, [r0, #0]
	next->prev = prev;
 800b3bc:	6058      	str	r0, [r3, #4]
 800b3be:	7b62      	ldrb	r2, [r4, #13]
	node->next = NULL;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f022 0202 	bic.w	r2, r2, #2
	node->prev = NULL;
 800b3c6:	e9c4 3300 	strd	r3, r3, [r4]
 800b3ca:	7362      	strb	r2, [r4, #13]
	thread->base.pended_on = NULL;
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	f104 0018 	add.w	r0, r4, #24
 800b3d2:	f000 f915 	bl	800b600 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff fb50 	bl	800aa7c <ready_thread>
			ret = true;
 800b3dc:	2001      	movs	r0, #1
	__asm__ volatile(
 800b3de:	f385 8811 	msr	BASEPRI, r5
 800b3e2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	f385 8811 	msr	BASEPRI, r5
 800b3ee:	f3bf 8f6f 	isb	sy
}
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f385 8811 	msr	BASEPRI, r5
 800b3fa:	f3bf 8f6f 	isb	sy
}
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}

0800b400 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800b400:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
 800b402:	4e09      	ldr	r6, [pc, #36]	; (800b428 <z_sched_wait+0x28>)
 800b404:	4b09      	ldr	r3, [pc, #36]	; (800b42c <z_sched_wait+0x2c>)
 800b406:	68b0      	ldr	r0, [r6, #8]
 800b408:	6018      	str	r0, [r3, #0]
{
 800b40a:	9d06      	ldr	r5, [sp, #24]
 800b40c:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
 800b40e:	4611      	mov	r1, r2
 800b410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b414:	f7ff fbda 	bl	800abcc <pend>
	ret = arch_swap(key);
 800b418:	4620      	mov	r0, r4
 800b41a:	f7f7 f947 	bl	80026ac <arch_swap>
	int ret = z_pend_curr(lock, key, wait_q, timeout);

	if (data != NULL) {
 800b41e:	b115      	cbz	r5, 800b426 <z_sched_wait+0x26>
		*data = _current->base.swap_data;
 800b420:	68b3      	ldr	r3, [r6, #8]
 800b422:	695b      	ldr	r3, [r3, #20]
 800b424:	602b      	str	r3, [r5, #0]
	}
	return ret;
}
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	2000144c 	.word	0x2000144c
 800b42c:	20001488 	.word	0x20001488

0800b430 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800b430:	b508      	push	{r3, lr}
 800b432:	4806      	ldr	r0, [pc, #24]	; (800b44c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800b434:	4a06      	ldr	r2, [pc, #24]	; (800b450 <z_data_copy+0x20>)
 800b436:	4907      	ldr	r1, [pc, #28]	; (800b454 <z_data_copy+0x24>)
 800b438:	1a12      	subs	r2, r2, r0
 800b43a:	f002 f931 	bl	800d6a0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800b43e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b442:	4a05      	ldr	r2, [pc, #20]	; (800b458 <z_data_copy+0x28>)
 800b444:	4905      	ldr	r1, [pc, #20]	; (800b45c <z_data_copy+0x2c>)
 800b446:	4806      	ldr	r0, [pc, #24]	; (800b460 <z_data_copy+0x30>)
 800b448:	f002 b92a 	b.w	800d6a0 <memcpy>
 800b44c:	20000000 	.word	0x20000000
 800b450:	200007b4 	.word	0x200007b4
 800b454:	0800ee04 	.word	0x0800ee04
 800b458:	00000000 	.word	0x00000000
 800b45c:	0800ee04 	.word	0x0800ee04
 800b460:	20000000 	.word	0x20000000

0800b464 <remove_timeout>:
{
 800b464:	b410      	push	{r4}
	return (node == list->tail) ? NULL : node->next;
 800b466:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b468:	b168      	cbz	r0, 800b486 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
 800b46a:	4a0b      	ldr	r2, [pc, #44]	; (800b498 <remove_timeout+0x34>)
 800b46c:	6852      	ldr	r2, [r2, #4]
 800b46e:	4282      	cmp	r2, r0
 800b470:	d009      	beq.n	800b486 <remove_timeout+0x22>
	if (next(t) != NULL) {
 800b472:	b143      	cbz	r3, 800b486 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 800b474:	6901      	ldr	r1, [r0, #16]
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	6944      	ldr	r4, [r0, #20]
 800b47a:	1852      	adds	r2, r2, r1
 800b47c:	6959      	ldr	r1, [r3, #20]
 800b47e:	611a      	str	r2, [r3, #16]
 800b480:	eb41 0104 	adc.w	r1, r1, r4
 800b484:	6159      	str	r1, [r3, #20]
	sys_dnode_t *const prev = node->prev;
 800b486:	6841      	ldr	r1, [r0, #4]
}
 800b488:	f85d 4b04 	ldr.w	r4, [sp], #4
	prev->next = next;
 800b48c:	600b      	str	r3, [r1, #0]
	node->next = NULL;
 800b48e:	2200      	movs	r2, #0
	next->prev = prev;
 800b490:	6059      	str	r1, [r3, #4]
	node->prev = NULL;
 800b492:	e9c0 2200 	strd	r2, r2, [r0]
 800b496:	4770      	bx	lr
 800b498:	20000370 	.word	0x20000370

0800b49c <next_timeout>:
	return list->head == list;
 800b49c:	4b14      	ldr	r3, [pc, #80]	; (800b4f0 <next_timeout+0x54>)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b49e:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <next_timeout+0x58>)
{
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	681c      	ldr	r4, [r3, #0]
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b4a4:	6812      	ldr	r2, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b4a6:	429c      	cmp	r4, r3
 800b4a8:	d01d      	beq.n	800b4e6 <next_timeout+0x4a>
 800b4aa:	b1ca      	cbz	r2, 800b4e0 <next_timeout+0x44>
 800b4ac:	2000      	movs	r0, #0
	if ((to == NULL) ||
 800b4ae:	b14c      	cbz	r4, 800b4c4 <next_timeout+0x28>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800b4b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b4b4:	1a1b      	subs	r3, r3, r0
 800b4b6:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800b4ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4be:	f170 0200 	sbcs.w	r2, r0, #0
 800b4c2:	db08      	blt.n	800b4d6 <next_timeout+0x3a>
		ret = MAX_WAIT;
 800b4c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <next_timeout+0x5c>)
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	b113      	cbz	r3, 800b4d4 <next_timeout+0x38>
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	bfa8      	it	ge
 800b4d2:	4618      	movge	r0, r3
}
 800b4d4:	bd10      	pop	{r4, pc}
		ret = MAX(0, to->dticks - ticks_elapsed);
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	bfac      	ite	ge
 800b4da:	4618      	movge	r0, r3
 800b4dc:	2000      	movlt	r0, #0
 800b4de:	e7f3      	b.n	800b4c8 <next_timeout+0x2c>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b4e0:	f7fc fdfc 	bl	80080dc <sys_clock_elapsed>
 800b4e4:	e7e3      	b.n	800b4ae <next_timeout+0x12>
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	d1ec      	bne.n	800b4c4 <next_timeout+0x28>
 800b4ea:	f7fc fdf7 	bl	80080dc <sys_clock_elapsed>
 800b4ee:	e7e9      	b.n	800b4c4 <next_timeout+0x28>
 800b4f0:	20000370 	.word	0x20000370
 800b4f4:	20001494 	.word	0x20001494
 800b4f8:	2000144c 	.word	0x2000144c

0800b4fc <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b4fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b500:	bf08      	it	eq
 800b502:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800b506:	d05f      	beq.n	800b5c8 <z_add_timeout+0xcc>
{
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	4604      	mov	r4, r0
 800b50c:	4618      	mov	r0, r3
	to->fn = fn;
 800b50e:	60a1      	str	r1, [r4, #8]
	__asm__ volatile(
 800b510:	f04f 0110 	mov.w	r1, #16
 800b514:	f3ef 8511 	mrs	r5, BASEPRI
 800b518:	f381 8812 	msr	BASEPRI_MAX, r1
 800b51c:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800b520:	f06f 0101 	mvn.w	r1, #1
 800b524:	1a8e      	subs	r6, r1, r2
 800b526:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b52a:	eb67 0603 	sbc.w	r6, r7, r3
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800b52e:	2e00      	cmp	r6, #0
 800b530:	db41      	blt.n	800b5b6 <z_add_timeout+0xba>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800b532:	4b2f      	ldr	r3, [pc, #188]	; (800b5f0 <z_add_timeout+0xf4>)
 800b534:	681e      	ldr	r6, [r3, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	1b89      	subs	r1, r1, r6
 800b53a:	eb67 0303 	sbc.w	r3, r7, r3
 800b53e:	1a8a      	subs	r2, r1, r2
			to->dticks = MAX(1, ticks);
 800b540:	eb63 0300 	sbc.w	r3, r3, r0
 800b544:	2a01      	cmp	r2, #1
 800b546:	f173 0100 	sbcs.w	r1, r3, #0
 800b54a:	bfbc      	itt	lt
 800b54c:	2201      	movlt	r2, #1
 800b54e:	2300      	movlt	r3, #0
 800b550:	e9c4 2304 	strd	r2, r3, [r4, #16]
	return list->head == list;
 800b554:	4f27      	ldr	r7, [pc, #156]	; (800b5f4 <z_add_timeout+0xf8>)
	return (node == list->tail) ? NULL : node->next;
 800b556:	e9d7 2c00 	ldrd	r2, ip, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b55a:	42ba      	cmp	r2, r7
 800b55c:	d012      	beq.n	800b584 <z_add_timeout+0x88>
		for (t = first(); t != NULL; t = next(t)) {
 800b55e:	b18a      	cbz	r2, 800b584 <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 800b560:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800b564:	e001      	b.n	800b56a <z_add_timeout+0x6e>
	return (node == list->tail) ? NULL : node->next;
 800b566:	6812      	ldr	r2, [r2, #0]
		for (t = first(); t != NULL; t = next(t)) {
 800b568:	b162      	cbz	r2, 800b584 <z_add_timeout+0x88>
			if (t->dticks > to->dticks) {
 800b56a:	e9d2 0604 	ldrd	r0, r6, [r2, #16]
 800b56e:	4283      	cmp	r3, r0
 800b570:	eb71 0e06 	sbcs.w	lr, r1, r6
 800b574:	db29      	blt.n	800b5ca <z_add_timeout+0xce>
			to->dticks -= t->dticks;
 800b576:	1a1b      	subs	r3, r3, r0
 800b578:	eb61 0106 	sbc.w	r1, r1, r6
 800b57c:	4594      	cmp	ip, r2
 800b57e:	e9c4 3104 	strd	r3, r1, [r4, #16]
 800b582:	d1f0      	bne.n	800b566 <z_add_timeout+0x6a>
	node->prev = tail;
 800b584:	e9c4 7c00 	strd	r7, ip, [r4]
	tail->next = node;
 800b588:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
 800b58c:	607c      	str	r4, [r7, #4]
	return list->head == list;
 800b58e:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b590:	42bb      	cmp	r3, r7
 800b592:	d00b      	beq.n	800b5ac <z_add_timeout+0xb0>
		if (to == first()) {
 800b594:	429c      	cmp	r4, r3
 800b596:	d109      	bne.n	800b5ac <z_add_timeout+0xb0>
			int32_t next_time = next_timeout();
 800b598:	f7ff ff80 	bl	800b49c <next_timeout>
			if (next_time == 0 ||
 800b59c:	b118      	cbz	r0, 800b5a6 <z_add_timeout+0xaa>
			    _current_cpu->slice_ticks != next_time) {
 800b59e:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	d002      	beq.n	800b5ac <z_add_timeout+0xb0>
				sys_clock_set_timeout(next_time, false);
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	f7fc fd10 	bl	8007fcc <sys_clock_set_timeout>
	__asm__ volatile(
 800b5ac:	f385 8811 	msr	BASEPRI, r5
 800b5b0:	f3bf 8f6f 	isb	sy
}
 800b5b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b5b6:	4911      	ldr	r1, [pc, #68]	; (800b5fc <z_add_timeout+0x100>)
			to->dticks = timeout.ticks + 1 + elapsed();
 800b5b8:	1c56      	adds	r6, r2, #1
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b5ba:	680a      	ldr	r2, [r1, #0]
			to->dticks = timeout.ticks + 1 + elapsed();
 800b5bc:	f143 0700 	adc.w	r7, r3, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b5c0:	b172      	cbz	r2, 800b5e0 <z_add_timeout+0xe4>
			to->dticks = timeout.ticks + 1 + elapsed();
 800b5c2:	e9c4 6704 	strd	r6, r7, [r4, #16]
 800b5c6:	e7c5      	b.n	800b554 <z_add_timeout+0x58>
 800b5c8:	4770      	bx	lr
				t->dticks -= to->dticks;
 800b5ca:	1ac3      	subs	r3, r0, r3
 800b5cc:	eb66 0101 	sbc.w	r1, r6, r1
 800b5d0:	e9c2 3104 	strd	r3, r1, [r2, #16]
	sys_dnode_t *const prev = successor->prev;
 800b5d4:	6853      	ldr	r3, [r2, #4]
	node->next = successor;
 800b5d6:	e9c4 2300 	strd	r2, r3, [r4]
	prev->next = node;
 800b5da:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800b5dc:	6054      	str	r4, [r2, #4]
		if (t == NULL) {
 800b5de:	e7d6      	b.n	800b58e <z_add_timeout+0x92>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800b5e0:	f7fc fd7c 	bl	80080dc <sys_clock_elapsed>
			to->dticks = timeout.ticks + 1 + elapsed();
 800b5e4:	1982      	adds	r2, r0, r6
 800b5e6:	4616      	mov	r6, r2
 800b5e8:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
 800b5ec:	e7e9      	b.n	800b5c2 <z_add_timeout+0xc6>
 800b5ee:	bf00      	nop
 800b5f0:	20000c08 	.word	0x20000c08
 800b5f4:	20000370 	.word	0x20000370
 800b5f8:	2000144c 	.word	0x2000144c
 800b5fc:	20001494 	.word	0x20001494

0800b600 <z_abort_timeout>:
{
 800b600:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b602:	f04f 0210 	mov.w	r2, #16
 800b606:	f3ef 8411 	mrs	r4, BASEPRI
 800b60a:	f382 8812 	msr	BASEPRI_MAX, r2
 800b60e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 800b612:	6803      	ldr	r3, [r0, #0]
 800b614:	b13b      	cbz	r3, 800b626 <z_abort_timeout+0x26>
			remove_timeout(to);
 800b616:	f7ff ff25 	bl	800b464 <remove_timeout>
			ret = 0;
 800b61a:	2000      	movs	r0, #0
	__asm__ volatile(
 800b61c:	f384 8811 	msr	BASEPRI, r4
 800b620:	f3bf 8f6f 	isb	sy
}
 800b624:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 800b626:	f06f 0015 	mvn.w	r0, #21
 800b62a:	f384 8811 	msr	BASEPRI, r4
 800b62e:	f3bf 8f6f 	isb	sy
}
 800b632:	bd10      	pop	{r4, pc}

0800b634 <z_set_timeout_expiry>:
{
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	4604      	mov	r4, r0
 800b638:	460d      	mov	r5, r1
	__asm__ volatile(
 800b63a:	f04f 0310 	mov.w	r3, #16
 800b63e:	f3ef 8611 	mrs	r6, BASEPRI
 800b642:	f383 8812 	msr	BASEPRI_MAX, r3
 800b646:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800b64a:	f7ff ff27 	bl	800b49c <next_timeout>
			      || (ticks <= next_to);
 800b64e:	42a0      	cmp	r0, r4
 800b650:	db07      	blt.n	800b662 <z_set_timeout_expiry+0x2e>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800b652:	2801      	cmp	r0, #1
 800b654:	dd05      	ble.n	800b662 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800b656:	42a0      	cmp	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	bfa8      	it	ge
 800b65c:	4620      	movge	r0, r4
 800b65e:	f7fc fcb5 	bl	8007fcc <sys_clock_set_timeout>
	__asm__ volatile(
 800b662:	f386 8811 	msr	BASEPRI, r6
 800b666:	f3bf 8f6f 	isb	sy
}
 800b66a:	bd70      	pop	{r4, r5, r6, pc}

0800b66c <sys_clock_tick_get_32>:
	}
	return t;
}

uint32_t sys_clock_tick_get_32(void)
{
 800b66c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b66e:	f04f 0310 	mov.w	r3, #16
 800b672:	f3ef 8411 	mrs	r4, BASEPRI
 800b676:	f383 8812 	msr	BASEPRI_MAX, r3
 800b67a:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 800b67e:	f7fc fd2d 	bl	80080dc <sys_clock_elapsed>
 800b682:	4b04      	ldr	r3, [pc, #16]	; (800b694 <sys_clock_tick_get_32+0x28>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4418      	add	r0, r3
	__asm__ volatile(
 800b688:	f384 8811 	msr	BASEPRI, r4
 800b68c:	f3bf 8f6f 	isb	sy
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
#else
	return (uint32_t)curr_tick;
#endif
}
 800b690:	bd10      	pop	{r4, pc}
 800b692:	bf00      	nop
 800b694:	20000c08 	.word	0x20000c08

0800b698 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
 800b698:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b69a:	f04f 0310 	mov.w	r3, #16
 800b69e:	f3ef 8411 	mrs	r4, BASEPRI
 800b6a2:	f383 8812 	msr	BASEPRI_MAX, r3
 800b6a6:	f3bf 8f6f 	isb	sy
		t = curr_tick + sys_clock_elapsed();
 800b6aa:	f7fc fd17 	bl	80080dc <sys_clock_elapsed>
 800b6ae:	4a05      	ldr	r2, [pc, #20]	; (800b6c4 <z_impl_k_uptime_ticks+0x2c>)
 800b6b0:	e9d2 3100 	ldrd	r3, r1, [r2]
 800b6b4:	18c0      	adds	r0, r0, r3
 800b6b6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800b6ba:	f384 8811 	msr	BASEPRI, r4
 800b6be:	f3bf 8f6f 	isb	sy
	return sys_clock_tick_get();
}
 800b6c2:	bd10      	pop	{r4, pc}
 800b6c4:	20000c08 	.word	0x20000c08

0800b6c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800b6c8:	b900      	cbnz	r0, 800b6cc <z_impl_k_busy_wait+0x4>
 800b6ca:	4770      	bx	lr
{
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800b6d0:	f7fc fd42 	bl	8008158 <sys_clock_cycle_get_32>
 800b6d4:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800b6d6:	4807      	ldr	r0, [pc, #28]	; (800b6f4 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800b6d8:	4a07      	ldr	r2, [pc, #28]	; (800b6f8 <z_impl_k_busy_wait+0x30>)
 800b6da:	fba4 0100 	umull	r0, r1, r4, r0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f7f5 f97c 	bl	80009dc <__aeabi_uldivmod>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	f7fc fd37 	bl	8008158 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800b6ea:	1b43      	subs	r3, r0, r5
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d3fa      	bcc.n	800b6e6 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	04c4b400 	.word	0x04c4b400
 800b6f8:	000f4240 	.word	0x000f4240

0800b6fc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	4604      	mov	r4, r0
	__asm__ volatile(
 800b700:	f04f 0310 	mov.w	r3, #16
 800b704:	f3ef 8511 	mrs	r5, BASEPRI
 800b708:	f383 8812 	msr	BASEPRI_MAX, r3
 800b70c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800b710:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
 800b714:	3301      	adds	r3, #1
 800b716:	f142 0200 	adc.w	r2, r2, #0
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	f172 0300 	sbcs.w	r3, r2, #0
 800b720:	462e      	mov	r6, r5
 800b722:	d22b      	bcs.n	800b77c <z_timer_expiration_handler+0x80>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800b724:	6b23      	ldr	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800b726:	6a22      	ldr	r2, [r4, #32]
	timer->status += 1U;
 800b728:	3301      	adds	r3, #1
 800b72a:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
 800b72c:	b172      	cbz	r2, 800b74c <z_timer_expiration_handler+0x50>
	__asm__ volatile(
 800b72e:	f385 8811 	msr	BASEPRI, r5
 800b732:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800b736:	6a23      	ldr	r3, [r4, #32]
 800b738:	4620      	mov	r0, r4
 800b73a:	4798      	blx	r3
	__asm__ volatile(
 800b73c:	f04f 0310 	mov.w	r3, #16
 800b740:	f3ef 8611 	mrs	r6, BASEPRI
 800b744:	f383 8812 	msr	BASEPRI_MAX, r3
 800b748:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800b74c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b750:	42a5      	cmp	r5, r4
 800b752:	d00e      	beq.n	800b772 <z_timer_expiration_handler+0x76>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800b754:	b16d      	cbz	r5, 800b772 <z_timer_expiration_handler+0x76>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800b756:	4628      	mov	r0, r5
 800b758:	f7ff fb3a 	bl	800add0 <z_unpend_thread_no_timeout>
 800b75c:	2300      	movs	r3, #0
 800b75e:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
 800b760:	f386 8811 	msr	BASEPRI, r6
 800b764:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800b768:	4628      	mov	r0, r5
}
 800b76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
 800b76e:	f7ff bab1 	b.w	800acd4 <z_ready_thread>
 800b772:	f386 8811 	msr	BASEPRI, r6
 800b776:	f3bf 8f6f 	isb	sy
}
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800b77c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800b780:	4901      	ldr	r1, [pc, #4]	; (800b788 <z_timer_expiration_handler+0x8c>)
 800b782:	f7ff febb 	bl	800b4fc <z_add_timeout>
 800b786:	e7cd      	b.n	800b724 <z_timer_expiration_handler+0x28>
 800b788:	0800b6fd 	.word	0x0800b6fd

0800b78c <k_timer_init>:
			 k_timer_expiry_t expiry_fn,
			 k_timer_stop_t stop_fn)
{
	timer->expiry_fn = expiry_fn;
	timer->stop_fn = stop_fn;
	timer->status = 0U;
 800b78c:	2300      	movs	r3, #0
{
 800b78e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
 800b790:	f100 0418 	add.w	r4, r0, #24
	list->tail = (sys_dnode_t *)list;
 800b794:	e9c0 4406 	strd	r4, r4, [r0, #24]
	timer->stop_fn = stop_fn;
 800b798:	e9c0 1208 	strd	r1, r2, [r0, #32]
	node->prev = NULL;
 800b79c:	e9c0 3300 	strd	r3, r3, [r0]
	SYS_PORT_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;

	z_object_init(timer);
}
 800b7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
	timer->status = 0U;
 800b7a4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
 800b7a6:	6343      	str	r3, [r0, #52]	; 0x34
}
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop

0800b7ac <z_impl_k_timer_start>:


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7b4:	bf08      	it	eq
 800b7b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800b7ba:	e9dd 1508 	ldrd	r1, r5, [sp, #32]
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800b7be:	d039      	beq.n	800b834 <z_impl_k_timer_start+0x88>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800b7c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800b7c4:	bf08      	it	eq
 800b7c6:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4617      	mov	r7, r2
 800b7ce:	461e      	mov	r6, r3
 800b7d0:	4688      	mov	r8, r1
 800b7d2:	46a9      	mov	r9, r5
 800b7d4:	d00b      	beq.n	800b7ee <z_impl_k_timer_start+0x42>
 800b7d6:	ea55 0001 	orrs.w	r0, r5, r1
 800b7da:	d008      	beq.n	800b7ee <z_impl_k_timer_start+0x42>
	    Z_TICK_ABS(period.ticks) < 0) {
 800b7dc:	f06f 0001 	mvn.w	r0, #1
 800b7e0:	1a40      	subs	r0, r0, r1
 800b7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e6:	eb60 0005 	sbc.w	r0, r0, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	db24      	blt.n	800b838 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800b7ee:	f06f 0101 	mvn.w	r1, #1
 800b7f2:	1a89      	subs	r1, r1, r2
 800b7f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b7f8:	eb61 0103 	sbc.w	r1, r1, r3
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	db0f      	blt.n	800b820 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800b800:	4620      	mov	r0, r4
 800b802:	f7ff fefd 	bl	800b600 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	e9c4 930b 	strd	r9, r3, [r4, #44]	; 0x2c
	timer->period = period;
 800b80c:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800b810:	463a      	mov	r2, r7
 800b812:	4633      	mov	r3, r6
 800b814:	4620      	mov	r0, r4
 800b816:	490e      	ldr	r1, [pc, #56]	; (800b850 <z_impl_k_timer_start+0xa4>)
		     duration);
}
 800b818:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800b81c:	f7ff be6e 	b.w	800b4fc <z_add_timeout>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800b820:	2a01      	cmp	r2, #1
 800b822:	f173 0100 	sbcs.w	r1, r3, #0
 800b826:	bfbc      	itt	lt
 800b828:	2201      	movlt	r2, #1
 800b82a:	2300      	movlt	r3, #0
 800b82c:	1e57      	subs	r7, r2, #1
 800b82e:	f143 36ff 	adc.w	r6, r3, #4294967295	; 0xffffffff
 800b832:	e7e5      	b.n	800b800 <z_impl_k_timer_start+0x54>
}
 800b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800b838:	2902      	cmp	r1, #2
 800b83a:	f175 0000 	sbcs.w	r0, r5, #0
 800b83e:	bfbc      	itt	lt
 800b840:	2102      	movlt	r1, #2
 800b842:	2500      	movlt	r5, #0
 800b844:	f111 38ff 	adds.w	r8, r1, #4294967295	; 0xffffffff
 800b848:	f145 39ff 	adc.w	r9, r5, #4294967295	; 0xffffffff
 800b84c:	e7cf      	b.n	800b7ee <z_impl_k_timer_start+0x42>
 800b84e:	bf00      	nop
 800b850:	0800b6fd 	.word	0x0800b6fd

0800b854 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800b854:	b510      	push	{r4, lr}
 800b856:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800b858:	f7ff fed2 	bl	800b600 <z_abort_timeout>

	if (inactive) {
 800b85c:	b9b0      	cbnz	r0, 800b88c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
 800b85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b860:	b10b      	cbz	r3, 800b866 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800b862:	4620      	mov	r0, r4
 800b864:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800b866:	f104 0018 	add.w	r0, r4, #24
 800b86a:	f7ff fadf 	bl	800ae2c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800b86e:	b168      	cbz	r0, 800b88c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
 800b870:	f7ff fa30 	bl	800acd4 <z_ready_thread>
	__asm__ volatile(
 800b874:	f04f 0310 	mov.w	r3, #16
 800b878:	f3ef 8011 	mrs	r0, BASEPRI
 800b87c:	f383 8812 	msr	BASEPRI_MAX, r3
 800b880:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
 800b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
 800b888:	f7ff bb96 	b.w	800afb8 <z_reschedule_irqlock>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop

0800b890 <signal_poll_event.constprop.0>:
}
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	struct z_poller *poller = event->poller;
 800b894:	6885      	ldr	r5, [r0, #8]
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
 800b896:	b082      	sub	sp, #8
 800b898:	4604      	mov	r4, r0
 800b89a:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
 800b89c:	b135      	cbz	r5, 800b8ac <signal_poll_event.constprop.0+0x1c>
		if (poller->mode == MODE_POLL) {
 800b89e:	786b      	ldrb	r3, [r5, #1]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d028      	beq.n	800b8f6 <signal_poll_event.constprop.0+0x66>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d00d      	beq.n	800b8c4 <signal_poll_event.constprop.0+0x34>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	702b      	strb	r3, [r5, #0]
	event->state |= state;
 800b8ac:	68e3      	ldr	r3, [r4, #12]
 800b8ae:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800b8b2:	430e      	orrs	r6, r1
	event->poller = NULL;
 800b8b4:	2000      	movs	r0, #0
	event->state |= state;
 800b8b6:	f366 3352 	bfi	r3, r6, #13, #6
 800b8ba:	e9c4 0302 	strd	r0, r3, [r4, #8]
		}
	}

	set_event_ready(event, state);
	return retcode;
}
 800b8be:	b002      	add	sp, #8
 800b8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800b8c4:	782b      	ldrb	r3, [r5, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0f0      	beq.n	800b8ac <signal_poll_event.constprop.0+0x1c>
 800b8ca:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800b8ce:	2f00      	cmp	r7, #0
 800b8d0:	d036      	beq.n	800b940 <signal_poll_event.constprop.0+0xb0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800b8d2:	f1a5 0114 	sub.w	r1, r5, #20
		twork->poll_result = 0;
 800b8d6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
 800b8da:	f105 0014 	add.w	r0, r5, #20
 800b8de:	9101      	str	r1, [sp, #4]
 800b8e0:	f7ff fe8e 	bl	800b600 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
 800b8e4:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
 800b8e6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f7fe ffd8 	bl	800a8a0 <k_work_submit_to_queue>
		poller->is_polling = false;
 800b8f0:	f885 8000 	strb.w	r8, [r5]
		if (retcode < 0) {
 800b8f4:	e7da      	b.n	800b8ac <signal_poll_event.constprop.0+0x1c>
	if (!z_is_thread_pending(thread)) {
 800b8f6:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 800b8fa:	f013 0302 	ands.w	r3, r3, #2
 800b8fe:	d0d4      	beq.n	800b8aa <signal_poll_event.constprop.0+0x1a>
	if (z_is_thread_timeout_expired(thread)) {
 800b900:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 800b904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b908:	bf08      	it	eq
 800b90a:	f112 0f02 	cmneq.w	r2, #2
 800b90e:	d019      	beq.n	800b944 <signal_poll_event.constprop.0+0xb4>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800b910:	f1a5 0060 	sub.w	r0, r5, #96	; 0x60
	z_unpend_thread(thread);
 800b914:	9001      	str	r0, [sp, #4]
 800b916:	f7ff fad7 	bl	800aec8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800b91a:	2e08      	cmp	r6, #8
 800b91c:	bf0c      	ite	eq
 800b91e:	f06f 0303 	mvneq.w	r3, #3
 800b922:	2300      	movne	r3, #0
 800b924:	61eb      	str	r3, [r5, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b926:	f815 3c53 	ldrb.w	r3, [r5, #-83]
 800b92a:	06db      	lsls	r3, r3, #27
 800b92c:	d1bc      	bne.n	800b8a8 <signal_poll_event.constprop.0+0x18>
 800b92e:	f855 7c48 	ldr.w	r7, [r5, #-72]
 800b932:	9801      	ldr	r0, [sp, #4]
 800b934:	2f00      	cmp	r7, #0
 800b936:	d1b7      	bne.n	800b8a8 <signal_poll_event.constprop.0+0x18>
	z_ready_thread(thread);
 800b938:	f7ff f9cc 	bl	800acd4 <z_ready_thread>
		poller->is_polling = false;
 800b93c:	702f      	strb	r7, [r5, #0]
		if (retcode < 0) {
 800b93e:	e7b5      	b.n	800b8ac <signal_poll_event.constprop.0+0x1c>
		poller->is_polling = false;
 800b940:	702f      	strb	r7, [r5, #0]
		if (retcode < 0) {
 800b942:	e7b3      	b.n	800b8ac <signal_poll_event.constprop.0+0x1c>
		poller->is_polling = false;
 800b944:	2300      	movs	r3, #0
 800b946:	702b      	strb	r3, [r5, #0]
		return -EAGAIN;
 800b948:	f06f 000a 	mvn.w	r0, #10
 800b94c:	e7b7      	b.n	800b8be <signal_poll_event.constprop.0+0x2e>
 800b94e:	bf00      	nop

0800b950 <register_events>:
{
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	ed2d 8b02 	vpush	{d8}
	for (int ii = 0; ii < num_events; ii++) {
 800b958:	1e0f      	subs	r7, r1, #0
{
 800b95a:	b085      	sub	sp, #20
	for (int ii = 0; ii < num_events; ii++) {
 800b95c:	f340 816f 	ble.w	800bc3e <register_events+0x2ee>
 800b960:	469a      	mov	sl, r3
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800b962:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
	for (int ii = 0; ii < num_events; ii++) {
 800b966:	2500      	movs	r5, #0
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800b968:	ee08 3a10 	vmov	s16, r3
 800b96c:	4690      	mov	r8, r2
 800b96e:	4604      	mov	r4, r0
	int events_registered = 0;
 800b970:	46ab      	mov	fp, r5
	event->poller = NULL;
 800b972:	46a9      	mov	r9, r5
 800b974:	f04f 0310 	mov.w	r3, #16
 800b978:	f3ef 8611 	mrs	r6, BASEPRI
 800b97c:	f383 8812 	msr	BASEPRI_MAX, r3
 800b980:	f3bf 8f6f 	isb	sy
	switch (event->type) {
 800b984:	7b63      	ldrb	r3, [r4, #13]
 800b986:	f003 031f 	and.w	r3, r3, #31
 800b98a:	3b01      	subs	r3, #1
 800b98c:	2b07      	cmp	r3, #7
 800b98e:	d809      	bhi.n	800b9a4 <register_events+0x54>
 800b990:	e8df f003 	tbb	[pc, r3]
 800b994:	23080434 	.word	0x23080434
 800b998:	1d080808 	.word	0x1d080808
		if (k_sem_count_get(event->sem) > 0U) {
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d131      	bne.n	800ba08 <register_events+0xb8>
		} else if (!just_check && poller->is_polling) {
 800b9a4:	f1ba 0f00 	cmp.w	sl, #0
 800b9a8:	d102      	bne.n	800b9b0 <register_events+0x60>
 800b9aa:	f898 3000 	ldrb.w	r3, [r8]
 800b9ae:	bb6b      	cbnz	r3, 800ba0c <register_events+0xbc>
	__asm__ volatile(
 800b9b0:	f386 8811 	msr	BASEPRI, r6
 800b9b4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800b9b8:	3501      	adds	r5, #1
 800b9ba:	42af      	cmp	r7, r5
 800b9bc:	f104 0414 	add.w	r4, r4, #20
 800b9c0:	d1d8      	bne.n	800b974 <register_events+0x24>
}
 800b9c2:	4658      	mov	r0, fp
 800b9c4:	b005      	add	sp, #20
 800b9c6:	ecbd 8b02 	vpop	{d8}
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (event->msgq->used_msgs > 0) {
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d0e6      	beq.n	800b9a4 <register_events+0x54>
 800b9d6:	2210      	movs	r2, #16
 800b9d8:	e004      	b.n	800b9e4 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0e0      	beq.n	800b9a4 <register_events+0x54>
 800b9e2:	2204      	movs	r2, #4
	event->state |= state;
 800b9e4:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
 800b9e6:	f8c4 9008 	str.w	r9, [r4, #8]
	event->state |= state;
 800b9ea:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	f362 3352 	bfi	r3, r2, #13, #6
 800b9f4:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
 800b9f6:	f888 9000 	strb.w	r9, [r8]
 800b9fa:	e7d9      	b.n	800b9b0 <register_events+0x60>
		if (event->signal->signaled != 0U) {
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0cf      	beq.n	800b9a4 <register_events+0x54>
 800ba04:	2201      	movs	r2, #1
 800ba06:	e7ed      	b.n	800b9e4 <register_events+0x94>
 800ba08:	2202      	movs	r2, #2
 800ba0a:	e7eb      	b.n	800b9e4 <register_events+0x94>
	switch (event->type) {
 800ba0c:	7b63      	ldrb	r3, [r4, #13]
 800ba0e:	f003 031f 	and.w	r3, r3, #31
 800ba12:	3b01      	subs	r3, #1
 800ba14:	2b07      	cmp	r3, #7
 800ba16:	d80f      	bhi.n	800ba38 <register_events+0xe8>
 800ba18:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba1c:	00950057 	.word	0x00950057
 800ba20:	00d6000e 	.word	0x00d6000e
 800ba24:	000e000e 	.word	0x000e000e
 800ba28:	0013000e 	.word	0x0013000e
	sys_dnode_t *const tail = list->tail;
 800ba2c:	6953      	ldr	r3, [r2, #20]
	node->next = list;
 800ba2e:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 800ba30:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800ba34:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800ba36:	6154      	str	r4, [r2, #20]
	event->poller = poller;
 800ba38:	f8c4 8008 	str.w	r8, [r4, #8]
			events_registered += 1;
 800ba3c:	f10b 0b01 	add.w	fp, fp, #1
 800ba40:	e7b6      	b.n	800b9b0 <register_events+0x60>
		add_event(&event->msgq->poll_events, event, poller);
 800ba42:	6922      	ldr	r2, [r4, #16]
 800ba44:	f102 0328 	add.w	r3, r2, #40	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800ba48:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	4288      	cmp	r0, r1
 800ba50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ba52:	f000 8104 	beq.w	800bc5e <register_events+0x30e>
	if ((pending == NULL) ||
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8101 	beq.w	800bc5e <register_events+0x30e>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ba5c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800ba5e:	b100      	cbz	r0, 800ba62 <register_events+0x112>
 800ba60:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800ba62:	ee18 1a10 	vmov	r1, s16
 800ba66:	9201      	str	r2, [sp, #4]
 800ba68:	f7ff f8d6 	bl	800ac18 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	9a01      	ldr	r2, [sp, #4]
 800ba70:	f300 80f4 	bgt.w	800bc5c <register_events+0x30c>
	return list->head == list;
 800ba74:	6a93      	ldr	r3, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ba76:	9900      	ldr	r1, [sp, #0]
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	f000 80fc 	beq.w	800bc76 <register_events+0x326>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 80f9 	beq.w	800bc76 <register_events+0x326>
 800ba84:	e9cd 4602 	strd	r4, r6, [sp, #8]
 800ba88:	9501      	str	r5, [sp, #4]
 800ba8a:	ee18 4a10 	vmov	r4, s16
 800ba8e:	4615      	mov	r5, r2
 800ba90:	461e      	mov	r6, r3
 800ba92:	e003      	b.n	800ba9c <register_events+0x14c>
	return (node == list->tail) ? NULL : node->next;
 800ba94:	6836      	ldr	r6, [r6, #0]
 800ba96:	2e00      	cmp	r6, #0
 800ba98:	f000 810c 	beq.w	800bcb4 <register_events+0x364>
		if (z_sched_prio_cmp(poller_thread(poller),
 800ba9c:	68b1      	ldr	r1, [r6, #8]
 800ba9e:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800baa0:	b101      	cbz	r1, 800baa4 <register_events+0x154>
 800baa2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800baa4:	f7ff f8b8 	bl	800ac18 <z_sched_prio_cmp>
 800baa8:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800baaa:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800baac:	f300 80eb 	bgt.w	800bc86 <register_events+0x336>
 800bab0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800bab2:	42b0      	cmp	r0, r6
 800bab4:	d1ee      	bne.n	800ba94 <register_events+0x144>
 800bab6:	462a      	mov	r2, r5
 800bab8:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800babc:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 800babe:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 800bac0:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800bac4:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800bac6:	62d4      	str	r4, [r2, #44]	; 0x2c
}
 800bac8:	e7b6      	b.n	800ba38 <register_events+0xe8>
		add_event(&event->signal->poll_events, event, poller);
 800baca:	6923      	ldr	r3, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bacc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800bad0:	428b      	cmp	r3, r1
 800bad2:	f000 80cb 	beq.w	800bc6c <register_events+0x31c>
	if ((pending == NULL) ||
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	f000 80c8 	beq.w	800bc6c <register_events+0x31c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800badc:	6890      	ldr	r0, [r2, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bade:	b100      	cbz	r0, 800bae2 <register_events+0x192>
 800bae0:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bae2:	ee18 1a10 	vmov	r1, s16
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	f7ff f896 	bl	800ac18 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800baec:	2800      	cmp	r0, #0
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	f300 80bb 	bgt.w	800bc6a <register_events+0x31a>
	return list->head == list;
 800baf4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800baf6:	4293      	cmp	r3, r2
 800baf8:	f000 80c1 	beq.w	800bc7e <register_events+0x32e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	f000 80be 	beq.w	800bc7e <register_events+0x32e>
 800bb02:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800bb06:	9500      	str	r5, [sp, #0]
 800bb08:	ee18 4a10 	vmov	r4, s16
 800bb0c:	461d      	mov	r5, r3
 800bb0e:	4616      	mov	r6, r2
 800bb10:	e003      	b.n	800bb1a <register_events+0x1ca>
	return (node == list->tail) ? NULL : node->next;
 800bb12:	6836      	ldr	r6, [r6, #0]
 800bb14:	2e00      	cmp	r6, #0
 800bb16:	f000 80d9 	beq.w	800bccc <register_events+0x37c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bb1a:	68b1      	ldr	r1, [r6, #8]
 800bb1c:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bb1e:	b101      	cbz	r1, 800bb22 <register_events+0x1d2>
 800bb20:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800bb22:	f7ff f879 	bl	800ac18 <z_sched_prio_cmp>
 800bb26:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800bb28:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800bb2a:	f300 80ba 	bgt.w	800bca2 <register_events+0x352>
 800bb2e:	6868      	ldr	r0, [r5, #4]
 800bb30:	42b0      	cmp	r0, r6
 800bb32:	d1ee      	bne.n	800bb12 <register_events+0x1c2>
 800bb34:	462b      	mov	r3, r5
 800bb36:	e9dd 5400 	ldrd	r5, r4, [sp]
 800bb3a:	9e02      	ldr	r6, [sp, #8]
	node->prev = tail;
 800bb3c:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800bb40:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800bb42:	605c      	str	r4, [r3, #4]
}
 800bb44:	e778      	b.n	800ba38 <register_events+0xe8>
		add_event(&event->sem->poll_events, event, poller);
 800bb46:	6922      	ldr	r2, [r4, #16]
 800bb48:	f102 0310 	add.w	r3, r2, #16
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bb4c:	6911      	ldr	r1, [r2, #16]
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	4288      	cmp	r0, r1
 800bb54:	6953      	ldr	r3, [r2, #20]
 800bb56:	f43f af6a 	beq.w	800ba2e <register_events+0xde>
	if ((pending == NULL) ||
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f43f af67 	beq.w	800ba2e <register_events+0xde>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bb60:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bb62:	b100      	cbz	r0, 800bb66 <register_events+0x216>
 800bb64:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bb66:	ee18 1a10 	vmov	r1, s16
 800bb6a:	9201      	str	r2, [sp, #4]
 800bb6c:	f7ff f854 	bl	800ac18 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800bb70:	2800      	cmp	r0, #0
 800bb72:	9a01      	ldr	r2, [sp, #4]
 800bb74:	f73f af5a 	bgt.w	800ba2c <register_events+0xdc>
	return list->head == list;
 800bb78:	6913      	ldr	r3, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bb7a:	9900      	ldr	r1, [sp, #0]
 800bb7c:	4299      	cmp	r1, r3
 800bb7e:	d07c      	beq.n	800bc7a <register_events+0x32a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d07a      	beq.n	800bc7a <register_events+0x32a>
 800bb84:	e9cd 4602 	strd	r4, r6, [sp, #8]
 800bb88:	9501      	str	r5, [sp, #4]
 800bb8a:	ee18 4a10 	vmov	r4, s16
 800bb8e:	4615      	mov	r5, r2
 800bb90:	461e      	mov	r6, r3
 800bb92:	e003      	b.n	800bb9c <register_events+0x24c>
	return (node == list->tail) ? NULL : node->next;
 800bb94:	6836      	ldr	r6, [r6, #0]
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	f000 8092 	beq.w	800bcc0 <register_events+0x370>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bb9c:	68b1      	ldr	r1, [r6, #8]
 800bb9e:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bba0:	b101      	cbz	r1, 800bba4 <register_events+0x254>
 800bba2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800bba4:	f7ff f838 	bl	800ac18 <z_sched_prio_cmp>
 800bba8:	2800      	cmp	r0, #0
			sys_dlist_insert(&pending->_node, &event->_node);
 800bbaa:	4631      	mov	r1, r6
		if (z_sched_prio_cmp(poller_thread(poller),
 800bbac:	dc75      	bgt.n	800bc9a <register_events+0x34a>
 800bbae:	6968      	ldr	r0, [r5, #20]
 800bbb0:	42b0      	cmp	r0, r6
 800bbb2:	d1ef      	bne.n	800bb94 <register_events+0x244>
 800bbb4:	462a      	mov	r2, r5
 800bbb6:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bbba:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 800bbbc:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 800bbbe:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800bbc2:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800bbc4:	6154      	str	r4, [r2, #20]
}
 800bbc6:	e737      	b.n	800ba38 <register_events+0xe8>
		add_event(&event->queue->poll_events, event, poller);
 800bbc8:	6922      	ldr	r2, [r4, #16]
 800bbca:	f102 0314 	add.w	r3, r2, #20
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bbce:	6951      	ldr	r1, [r2, #20]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	4288      	cmp	r0, r1
 800bbd6:	6993      	ldr	r3, [r2, #24]
 800bbd8:	d03a      	beq.n	800bc50 <register_events+0x300>
	if ((pending == NULL) ||
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d038      	beq.n	800bc50 <register_events+0x300>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bbde:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bbe0:	b100      	cbz	r0, 800bbe4 <register_events+0x294>
 800bbe2:	3860      	subs	r0, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bbe4:	ee18 1a10 	vmov	r1, s16
 800bbe8:	9201      	str	r2, [sp, #4]
 800bbea:	f7ff f815 	bl	800ac18 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	9a01      	ldr	r2, [sp, #4]
 800bbf2:	dc2c      	bgt.n	800bc4e <register_events+0x2fe>
	return list->head == list;
 800bbf4:	6953      	ldr	r3, [r2, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bbf6:	9900      	ldr	r1, [sp, #0]
 800bbf8:	4299      	cmp	r1, r3
 800bbfa:	d042      	beq.n	800bc82 <register_events+0x332>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d040      	beq.n	800bc82 <register_events+0x332>
 800bc00:	e9cd 4602 	strd	r4, r6, [sp, #8]
 800bc04:	9501      	str	r5, [sp, #4]
 800bc06:	ee18 4a10 	vmov	r4, s16
 800bc0a:	4615      	mov	r5, r2
 800bc0c:	461e      	mov	r6, r3
 800bc0e:	e001      	b.n	800bc14 <register_events+0x2c4>
	return (node == list->tail) ? NULL : node->next;
 800bc10:	6836      	ldr	r6, [r6, #0]
 800bc12:	b156      	cbz	r6, 800bc2a <register_events+0x2da>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bc14:	68b1      	ldr	r1, [r6, #8]
 800bc16:	4620      	mov	r0, r4
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800bc18:	b101      	cbz	r1, 800bc1c <register_events+0x2cc>
 800bc1a:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
 800bc1c:	f7fe fffc 	bl	800ac18 <z_sched_prio_cmp>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	dc30      	bgt.n	800bc86 <register_events+0x336>
 800bc24:	69a9      	ldr	r1, [r5, #24]
 800bc26:	428e      	cmp	r6, r1
 800bc28:	d1f2      	bne.n	800bc10 <register_events+0x2c0>
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bc30:	9e03      	ldr	r6, [sp, #12]
	node->next = list;
 800bc32:	9b00      	ldr	r3, [sp, #0]
	node->prev = tail;
 800bc34:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
 800bc38:	600c      	str	r4, [r1, #0]
	list->tail = node;
 800bc3a:	6194      	str	r4, [r2, #24]
}
 800bc3c:	e6fc      	b.n	800ba38 <register_events+0xe8>
	int events_registered = 0;
 800bc3e:	f04f 0b00 	mov.w	fp, #0
}
 800bc42:	4658      	mov	r0, fp
 800bc44:	b005      	add	sp, #20
 800bc46:	ecbd 8b02 	vpop	{d8}
 800bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sys_dnode_t *const tail = list->tail;
 800bc4e:	6993      	ldr	r3, [r2, #24]
	node->next = list;
 800bc50:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 800bc52:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800bc56:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bc58:	6194      	str	r4, [r2, #24]
		return;
 800bc5a:	e6ed      	b.n	800ba38 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 800bc5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
 800bc5e:	9900      	ldr	r1, [sp, #0]
	node->prev = tail;
 800bc60:	e9c4 1300 	strd	r1, r3, [r4]
	tail->next = node;
 800bc64:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800bc66:	62d4      	str	r4, [r2, #44]	; 0x2c
 800bc68:	e6e6      	b.n	800ba38 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 800bc6a:	685a      	ldr	r2, [r3, #4]
	node->prev = tail;
 800bc6c:	e9c4 3200 	strd	r3, r2, [r4]
	tail->next = node;
 800bc70:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800bc72:	605c      	str	r4, [r3, #4]
 800bc74:	e6e0      	b.n	800ba38 <register_events+0xe8>
	sys_dnode_t *const tail = list->tail;
 800bc76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bc78:	e721      	b.n	800babe <register_events+0x16e>
 800bc7a:	6951      	ldr	r1, [r2, #20]
 800bc7c:	e79e      	b.n	800bbbc <register_events+0x26c>
 800bc7e:	6859      	ldr	r1, [r3, #4]
 800bc80:	e75c      	b.n	800bb3c <register_events+0x1ec>
 800bc82:	6991      	ldr	r1, [r2, #24]
 800bc84:	e7d5      	b.n	800bc32 <register_events+0x2e2>
	sys_dnode_t *const prev = successor->prev;
 800bc86:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bc8a:	4633      	mov	r3, r6
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	9e03      	ldr	r6, [sp, #12]
	node->next = successor;
 800bc90:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
 800bc94:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 800bc96:	605c      	str	r4, [r3, #4]
			return;
 800bc98:	e6ce      	b.n	800ba38 <register_events+0xe8>
	sys_dnode_t *const prev = successor->prev;
 800bc9a:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bc9e:	4633      	mov	r3, r6
 800bca0:	e7f4      	b.n	800bc8c <register_events+0x33c>
 800bca2:	e9dd 5400 	ldrd	r5, r4, [sp]
 800bca6:	684b      	ldr	r3, [r1, #4]
 800bca8:	9e02      	ldr	r6, [sp, #8]
	node->next = successor;
 800bcaa:	e9c4 1300 	strd	r1, r3, [r4]
	prev->next = node;
 800bcae:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800bcb0:	604c      	str	r4, [r1, #4]
 800bcb2:	e6c1      	b.n	800ba38 <register_events+0xe8>
 800bcb4:	462a      	mov	r2, r5
 800bcb6:	9e03      	ldr	r6, [sp, #12]
 800bcb8:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	e6fe      	b.n	800babe <register_events+0x16e>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	9e03      	ldr	r6, [sp, #12]
 800bcc4:	e9dd 5401 	ldrd	r5, r4, [sp, #4]
 800bcc8:	4601      	mov	r1, r0
 800bcca:	e777      	b.n	800bbbc <register_events+0x26c>
 800bccc:	462b      	mov	r3, r5
 800bcce:	9e02      	ldr	r6, [sp, #8]
 800bcd0:	e9dd 5400 	ldrd	r5, r4, [sp]
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	e731      	b.n	800bb3c <register_events+0x1ec>

0800bcd8 <k_poll_event_init>:
	event->type = type;
 800bcd8:	04d2      	lsls	r2, r2, #19
 800bcda:	0209      	lsls	r1, r1, #8
 800bcdc:	f890 c00c 	ldrb.w	ip, [r0, #12]
	event->obj = obj;
 800bce0:	6103      	str	r3, [r0, #16]
	event->type = type;
 800bce2:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 800bce6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800bcea:	430a      	orrs	r2, r1
 800bcec:	ea42 020c 	orr.w	r2, r2, ip
	event->poller = NULL;
 800bcf0:	2100      	movs	r1, #0
	event->type = type;
 800bcf2:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 800bcf6:	4770      	bx	lr

0800bcf8 <z_impl_k_poll>:
{
 800bcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfc:	4698      	mov	r8, r3
	events_registered = register_events(events, num_events, poller,
 800bcfe:	ea52 0308 	orrs.w	r3, r2, r8
	struct z_poller *poller = &_current->poller;
 800bd02:	4b52      	ldr	r3, [pc, #328]	; (800be4c <z_impl_k_poll+0x154>)
 800bd04:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
 800bd06:	f04f 0501 	mov.w	r5, #1
{
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	4692      	mov	sl, r2
	poller->is_polling = true;
 800bd0e:	f887 5060 	strb.w	r5, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
 800bd12:	f887 5061 	strb.w	r5, [r7, #97]	; 0x61
	events_registered = register_events(events, num_events, poller,
 800bd16:	bf0c      	ite	eq
 800bd18:	462b      	moveq	r3, r5
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
 800bd20:	4681      	mov	r9, r0
	events_registered = register_events(events, num_events, poller,
 800bd22:	f7ff fe15 	bl	800b950 <register_events>
 800bd26:	4606      	mov	r6, r0
	__asm__ volatile(
 800bd28:	f04f 0310 	mov.w	r3, #16
 800bd2c:	f3ef 8111 	mrs	r1, BASEPRI
 800bd30:	f383 8812 	msr	BASEPRI_MAX, r3
 800bd34:	f3bf 8f6f 	isb	sy
	if (!poller->is_polling) {
 800bd38:	f897 0060 	ldrb.w	r0, [r7, #96]	; 0x60
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d047      	beq.n	800bdd0 <z_impl_k_poll+0xd8>
	poller->is_polling = false;
 800bd40:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800bd42:	ea5a 0308 	orrs.w	r3, sl, r8
	poller->is_polling = false;
 800bd46:	f887 4060 	strb.w	r4, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800bd4a:	d077      	beq.n	800be3c <z_impl_k_poll+0x144>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800bd4c:	e9cd a800 	strd	sl, r8, [sp]
 800bd50:	4a3f      	ldr	r2, [pc, #252]	; (800be50 <z_impl_k_poll+0x158>)
 800bd52:	4840      	ldr	r0, [pc, #256]	; (800be54 <z_impl_k_poll+0x15c>)
 800bd54:	f7ff f856 	bl	800ae04 <z_pend_curr>
 800bd58:	f04f 0310 	mov.w	r3, #16
 800bd5c:	f3ef 8811 	mrs	r8, BASEPRI
 800bd60:	f383 8812 	msr	BASEPRI_MAX, r3
 800bd64:	f3bf 8f6f 	isb	sy
	k.key = arch_irq_lock();
 800bd68:	4647      	mov	r7, r8
	while (num_events--) {
 800bd6a:	b356      	cbz	r6, 800bdc2 <z_impl_k_poll+0xca>
 800bd6c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800bd70:	4632      	mov	r2, r6
 800bd72:	eb09 0181 	add.w	r1, r9, r1, lsl #2
	__asm__ volatile(
 800bd76:	468c      	mov	ip, r1
 800bd78:	3914      	subs	r1, #20
	event->poller = NULL;
 800bd7a:	f84c 4c0c 	str.w	r4, [ip, #-12]
	switch (event->type) {
 800bd7e:	7b4b      	ldrb	r3, [r1, #13]
 800bd80:	f003 031f 	and.w	r3, r3, #31
 800bd84:	2b08      	cmp	r3, #8
 800bd86:	fa05 fe03 	lsl.w	lr, r5, r3
 800bd8a:	d80b      	bhi.n	800bda4 <z_impl_k_poll+0xac>
 800bd8c:	f41e 7f8b 	tst.w	lr, #278	; 0x116
 800bd90:	d008      	beq.n	800bda4 <z_impl_k_poll+0xac>
	return node->next != NULL;
 800bd92:	f85c 6c14 	ldr.w	r6, [ip, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800bd96:	b12e      	cbz	r6, 800bda4 <z_impl_k_poll+0xac>
	sys_dnode_t *const prev = node->prev;
 800bd98:	f85c 3c10 	ldr.w	r3, [ip, #-16]
	prev->next = next;
 800bd9c:	601e      	str	r6, [r3, #0]
	next->prev = prev;
 800bd9e:	6073      	str	r3, [r6, #4]
	node->prev = NULL;
 800bda0:	e94c 4405 	strd	r4, r4, [ip, #-20]
 800bda4:	f387 8811 	msr	BASEPRI, r7
 800bda8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800bdac:	f04f 0610 	mov.w	r6, #16
 800bdb0:	f3ef 8311 	mrs	r3, BASEPRI
 800bdb4:	f386 8812 	msr	BASEPRI_MAX, r6
 800bdb8:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800bdbc:	3a01      	subs	r2, #1
 800bdbe:	461f      	mov	r7, r3
 800bdc0:	d1d9      	bne.n	800bd76 <z_impl_k_poll+0x7e>
	__asm__ volatile(
 800bdc2:	f388 8811 	msr	BASEPRI, r8
 800bdc6:	f3bf 8f6f 	isb	sy
}
 800bdca:	b002      	add	sp, #8
 800bdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (num_events--) {
 800bdd0:	b366      	cbz	r6, 800be2c <z_impl_k_poll+0x134>
 800bdd2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 800bdde:	464f      	mov	r7, r9
 800bde0:	f1a9 0914 	sub.w	r9, r9, #20
	event->poller = NULL;
 800bde4:	f847 0c0c 	str.w	r0, [r7, #-12]
	switch (event->type) {
 800bde8:	f899 300d 	ldrb.w	r3, [r9, #13]
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	2b08      	cmp	r3, #8
 800bdf2:	fa05 f603 	lsl.w	r6, r5, r3
 800bdf6:	d80b      	bhi.n	800be10 <z_impl_k_poll+0x118>
 800bdf8:	f416 7f8b 	tst.w	r6, #278	; 0x116
 800bdfc:	d008      	beq.n	800be10 <z_impl_k_poll+0x118>
	return node->next != NULL;
 800bdfe:	f857 3c14 	ldr.w	r3, [r7, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800be02:	b12b      	cbz	r3, 800be10 <z_impl_k_poll+0x118>
	sys_dnode_t *const prev = node->prev;
 800be04:	f857 6c10 	ldr.w	r6, [r7, #-16]
	prev->next = next;
 800be08:	6033      	str	r3, [r6, #0]
	next->prev = prev;
 800be0a:	605e      	str	r6, [r3, #4]
	node->prev = NULL;
 800be0c:	e947 0005 	strd	r0, r0, [r7, #-20]
 800be10:	f384 8811 	msr	BASEPRI, r4
 800be14:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800be18:	f04f 0310 	mov.w	r3, #16
 800be1c:	f3ef 8411 	mrs	r4, BASEPRI
 800be20:	f383 8812 	msr	BASEPRI_MAX, r3
 800be24:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800be28:	3a01      	subs	r2, #1
 800be2a:	d1d8      	bne.n	800bdde <z_impl_k_poll+0xe6>
	__asm__ volatile(
 800be2c:	f381 8811 	msr	BASEPRI, r1
 800be30:	f3bf 8f6f 	isb	sy
		return 0;
 800be34:	2000      	movs	r0, #0
}
 800be36:	b002      	add	sp, #8
 800be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be3c:	f381 8811 	msr	BASEPRI, r1
 800be40:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800be44:	f06f 000a 	mvn.w	r0, #10
 800be48:	e7bf      	b.n	800bdca <z_impl_k_poll+0xd2>
 800be4a:	bf00      	nop
 800be4c:	2000144c 	.word	0x2000144c
 800be50:	20000378 	.word	0x20000378
 800be54:	20001498 	.word	0x20001498

0800be58 <z_handle_obj_poll_events>:
	return list->head == list;
 800be58:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800be5a:	4298      	cmp	r0, r3
 800be5c:	d00c      	beq.n	800be78 <z_handle_obj_poll_events+0x20>
{
 800be5e:	b410      	push	{r4}
	sys_dnode_t *const next = node->next;
 800be60:	e9d3 0400 	ldrd	r0, r4, [r3]
	node->next = NULL;
 800be64:	2200      	movs	r2, #0
	prev->next = next;
 800be66:	6020      	str	r0, [r4, #0]
	next->prev = prev;
 800be68:	6044      	str	r4, [r0, #4]
	node->prev = NULL;
 800be6a:	e9c3 2200 	strd	r2, r2, [r3]
}
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void) signal_poll_event(poll_event, state);
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff bd0c 	b.w	800b890 <signal_poll_event.constprop.0>
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop

0800be7c <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
 800be7c:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
 800be7e:	e9c0 0000 	strd	r0, r0, [r0]
 800be82:	6083      	str	r3, [r0, #8]
}
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop

0800be88 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
 800be88:	6883      	ldr	r3, [r0, #8]
 800be8a:	600b      	str	r3, [r1, #0]
	*result = sig->result;
 800be8c:	68c3      	ldr	r3, [r0, #12]
 800be8e:	6013      	str	r3, [r2, #0]
}
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop

0800be94 <z_impl_k_poll_signal_raise>:
{
 800be94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 800be96:	f04f 0310 	mov.w	r3, #16
 800be9a:	f3ef 8511 	mrs	r5, BASEPRI
 800be9e:	f383 8812 	msr	BASEPRI_MAX, r3
 800bea2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 800bea6:	6803      	ldr	r3, [r0, #0]
	sig->signaled = 1U;
 800bea8:	2201      	movs	r2, #1
	if (!sys_dlist_is_empty(list)) {
 800beaa:	4298      	cmp	r0, r3
 800beac:	e9c0 2102 	strd	r2, r1, [r0, #8]
 800beb0:	d011      	beq.n	800bed6 <z_impl_k_poll_signal_raise+0x42>
	sys_dnode_t *const next = node->next;
 800beb2:	e9d3 0400 	ldrd	r0, r4, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800beb6:	4611      	mov	r1, r2
	node->next = NULL;
 800beb8:	2200      	movs	r2, #0
	prev->next = next;
 800beba:	6020      	str	r0, [r4, #0]
	next->prev = prev;
 800bebc:	6044      	str	r4, [r0, #4]
	node->prev = NULL;
 800bebe:	e9c3 2200 	strd	r2, r2, [r3]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff fce4 	bl	800b890 <signal_poll_event.constprop.0>
	z_reschedule(&lock, key);
 800bec8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800beca:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
 800becc:	4805      	ldr	r0, [pc, #20]	; (800bee4 <z_impl_k_poll_signal_raise+0x50>)
 800bece:	f7ff f861 	bl	800af94 <z_reschedule>
}
 800bed2:	4620      	mov	r0, r4
 800bed4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800bed6:	f385 8811 	msr	BASEPRI, r5
 800beda:	f3bf 8f6f 	isb	sy
		return 0;
 800bede:	2400      	movs	r4, #0
}
 800bee0:	4620      	mov	r0, r4
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20001498 	.word	0x20001498

0800bee8 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800bee8:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800beea:	4770      	bx	lr

0800beec <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop

0800bef0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800bef0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800bef2:	4c09      	ldr	r4, [pc, #36]	; (800bf18 <statics_init+0x28>)
 800bef4:	4d09      	ldr	r5, [pc, #36]	; (800bf1c <statics_init+0x2c>)
 800bef6:	42ac      	cmp	r4, r5
 800bef8:	d20b      	bcs.n	800bf12 <statics_init+0x22>
 800befa:	f104 030c 	add.w	r3, r4, #12
	sys_heap_init(&h->heap, mem, bytes);
 800befe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
	list->tail = (sys_dnode_t *)list;
 800bf02:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800bf06:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800bf08:	3418      	adds	r4, #24
	sys_heap_init(&h->heap, mem, bytes);
 800bf0a:	f7f6 faaf 	bl	800246c <sys_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800bf0e:	42ac      	cmp	r4, r5
 800bf10:	d3f3      	bcc.n	800befa <statics_init+0xa>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
 800bf12:	2000      	movs	r0, #0
 800bf14:	bd38      	pop	{r3, r4, r5, pc}
 800bf16:	bf00      	nop
 800bf18:	20000660 	.word	0x20000660
 800bf1c:	20000660 	.word	0x20000660

0800bf20 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800bf20:	b510      	push	{r4, lr}
 800bf22:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800bf24:	2400      	movs	r4, #0
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800bf26:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
 800bf28:	4a07      	ldr	r2, [pc, #28]	; (800bf48 <k_sys_work_q_init+0x28>)
	k_work_queue_start(&k_sys_work_q,
 800bf2a:	9300      	str	r3, [sp, #0]
	struct k_work_queue_config cfg = {
 800bf2c:	9202      	str	r2, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
 800bf2e:	4907      	ldr	r1, [pc, #28]	; (800bf4c <k_sys_work_q_init+0x2c>)
 800bf30:	4807      	ldr	r0, [pc, #28]	; (800bf50 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
 800bf32:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
 800bf36:	4623      	mov	r3, r4
 800bf38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bf3c:	f7f5 f8b0 	bl	80010a0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800bf40:	4620      	mov	r0, r4
 800bf42:	b004      	add	sp, #16
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	bf00      	nop
 800bf48:	0800eb10 	.word	0x0800eb10
 800bf4c:	20003d00 	.word	0x20003d00
 800bf50:	20000c10 	.word	0x20000c10

0800bf54 <malloc>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	; (800bf60 <malloc+0xc>)
 800bf56:	4601      	mov	r1, r0
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	f000 b84f 	b.w	800bffc <_malloc_r>
 800bf5e:	bf00      	nop
 800bf60:	20000380 	.word	0x20000380

0800bf64 <_free_r>:
 800bf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d044      	beq.n	800bff4 <_free_r+0x90>
 800bf6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf6e:	9001      	str	r0, [sp, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f1a1 0404 	sub.w	r4, r1, #4
 800bf76:	bfb8      	it	lt
 800bf78:	18e4      	addlt	r4, r4, r3
 800bf7a:	f000 fc09 	bl	800c790 <__malloc_lock>
 800bf7e:	4a1e      	ldr	r2, [pc, #120]	; (800bff8 <_free_r+0x94>)
 800bf80:	9801      	ldr	r0, [sp, #4]
 800bf82:	6813      	ldr	r3, [r2, #0]
 800bf84:	b933      	cbnz	r3, 800bf94 <_free_r+0x30>
 800bf86:	6063      	str	r3, [r4, #4]
 800bf88:	6014      	str	r4, [r2, #0]
 800bf8a:	b003      	add	sp, #12
 800bf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf90:	f000 bc04 	b.w	800c79c <__malloc_unlock>
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d908      	bls.n	800bfaa <_free_r+0x46>
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	1961      	adds	r1, r4, r5
 800bf9c:	428b      	cmp	r3, r1
 800bf9e:	bf01      	itttt	eq
 800bfa0:	6819      	ldreq	r1, [r3, #0]
 800bfa2:	685b      	ldreq	r3, [r3, #4]
 800bfa4:	1949      	addeq	r1, r1, r5
 800bfa6:	6021      	streq	r1, [r4, #0]
 800bfa8:	e7ed      	b.n	800bf86 <_free_r+0x22>
 800bfaa:	461a      	mov	r2, r3
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	b10b      	cbz	r3, 800bfb4 <_free_r+0x50>
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	d9fa      	bls.n	800bfaa <_free_r+0x46>
 800bfb4:	6811      	ldr	r1, [r2, #0]
 800bfb6:	1855      	adds	r5, r2, r1
 800bfb8:	42a5      	cmp	r5, r4
 800bfba:	d10b      	bne.n	800bfd4 <_free_r+0x70>
 800bfbc:	6824      	ldr	r4, [r4, #0]
 800bfbe:	4421      	add	r1, r4
 800bfc0:	1854      	adds	r4, r2, r1
 800bfc2:	42a3      	cmp	r3, r4
 800bfc4:	6011      	str	r1, [r2, #0]
 800bfc6:	d1e0      	bne.n	800bf8a <_free_r+0x26>
 800bfc8:	681c      	ldr	r4, [r3, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	6053      	str	r3, [r2, #4]
 800bfce:	4421      	add	r1, r4
 800bfd0:	6011      	str	r1, [r2, #0]
 800bfd2:	e7da      	b.n	800bf8a <_free_r+0x26>
 800bfd4:	d902      	bls.n	800bfdc <_free_r+0x78>
 800bfd6:	230c      	movs	r3, #12
 800bfd8:	6003      	str	r3, [r0, #0]
 800bfda:	e7d6      	b.n	800bf8a <_free_r+0x26>
 800bfdc:	6825      	ldr	r5, [r4, #0]
 800bfde:	1961      	adds	r1, r4, r5
 800bfe0:	428b      	cmp	r3, r1
 800bfe2:	bf04      	itt	eq
 800bfe4:	6819      	ldreq	r1, [r3, #0]
 800bfe6:	685b      	ldreq	r3, [r3, #4]
 800bfe8:	6063      	str	r3, [r4, #4]
 800bfea:	bf04      	itt	eq
 800bfec:	1949      	addeq	r1, r1, r5
 800bfee:	6021      	streq	r1, [r4, #0]
 800bff0:	6054      	str	r4, [r2, #4]
 800bff2:	e7ca      	b.n	800bf8a <_free_r+0x26>
 800bff4:	b003      	add	sp, #12
 800bff6:	bd30      	pop	{r4, r5, pc}
 800bff8:	2000149c 	.word	0x2000149c

0800bffc <_malloc_r>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	1ccd      	adds	r5, r1, #3
 800c000:	f025 0503 	bic.w	r5, r5, #3
 800c004:	3508      	adds	r5, #8
 800c006:	2d0c      	cmp	r5, #12
 800c008:	bf38      	it	cc
 800c00a:	250c      	movcc	r5, #12
 800c00c:	2d00      	cmp	r5, #0
 800c00e:	4606      	mov	r6, r0
 800c010:	db01      	blt.n	800c016 <_malloc_r+0x1a>
 800c012:	42a9      	cmp	r1, r5
 800c014:	d903      	bls.n	800c01e <_malloc_r+0x22>
 800c016:	230c      	movs	r3, #12
 800c018:	6033      	str	r3, [r6, #0]
 800c01a:	2000      	movs	r0, #0
 800c01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c01e:	f000 fbb7 	bl	800c790 <__malloc_lock>
 800c022:	4921      	ldr	r1, [pc, #132]	; (800c0a8 <_malloc_r+0xac>)
 800c024:	680a      	ldr	r2, [r1, #0]
 800c026:	4614      	mov	r4, r2
 800c028:	b99c      	cbnz	r4, 800c052 <_malloc_r+0x56>
 800c02a:	4f20      	ldr	r7, [pc, #128]	; (800c0ac <_malloc_r+0xb0>)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	b923      	cbnz	r3, 800c03a <_malloc_r+0x3e>
 800c030:	4621      	mov	r1, r4
 800c032:	4630      	mov	r0, r6
 800c034:	f000 fb98 	bl	800c768 <_sbrk_r>
 800c038:	6038      	str	r0, [r7, #0]
 800c03a:	4629      	mov	r1, r5
 800c03c:	4630      	mov	r0, r6
 800c03e:	f000 fb93 	bl	800c768 <_sbrk_r>
 800c042:	1c43      	adds	r3, r0, #1
 800c044:	d123      	bne.n	800c08e <_malloc_r+0x92>
 800c046:	230c      	movs	r3, #12
 800c048:	6033      	str	r3, [r6, #0]
 800c04a:	4630      	mov	r0, r6
 800c04c:	f000 fba6 	bl	800c79c <__malloc_unlock>
 800c050:	e7e3      	b.n	800c01a <_malloc_r+0x1e>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	1b5b      	subs	r3, r3, r5
 800c056:	d417      	bmi.n	800c088 <_malloc_r+0x8c>
 800c058:	2b0b      	cmp	r3, #11
 800c05a:	d903      	bls.n	800c064 <_malloc_r+0x68>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	441c      	add	r4, r3
 800c060:	6025      	str	r5, [r4, #0]
 800c062:	e004      	b.n	800c06e <_malloc_r+0x72>
 800c064:	6863      	ldr	r3, [r4, #4]
 800c066:	42a2      	cmp	r2, r4
 800c068:	bf0c      	ite	eq
 800c06a:	600b      	streq	r3, [r1, #0]
 800c06c:	6053      	strne	r3, [r2, #4]
 800c06e:	4630      	mov	r0, r6
 800c070:	f000 fb94 	bl	800c79c <__malloc_unlock>
 800c074:	f104 000b 	add.w	r0, r4, #11
 800c078:	1d23      	adds	r3, r4, #4
 800c07a:	f020 0007 	bic.w	r0, r0, #7
 800c07e:	1ac2      	subs	r2, r0, r3
 800c080:	d0cc      	beq.n	800c01c <_malloc_r+0x20>
 800c082:	1a1b      	subs	r3, r3, r0
 800c084:	50a3      	str	r3, [r4, r2]
 800c086:	e7c9      	b.n	800c01c <_malloc_r+0x20>
 800c088:	4622      	mov	r2, r4
 800c08a:	6864      	ldr	r4, [r4, #4]
 800c08c:	e7cc      	b.n	800c028 <_malloc_r+0x2c>
 800c08e:	1cc4      	adds	r4, r0, #3
 800c090:	f024 0403 	bic.w	r4, r4, #3
 800c094:	42a0      	cmp	r0, r4
 800c096:	d0e3      	beq.n	800c060 <_malloc_r+0x64>
 800c098:	1a21      	subs	r1, r4, r0
 800c09a:	4630      	mov	r0, r6
 800c09c:	f000 fb64 	bl	800c768 <_sbrk_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d1dd      	bne.n	800c060 <_malloc_r+0x64>
 800c0a4:	e7cf      	b.n	800c046 <_malloc_r+0x4a>
 800c0a6:	bf00      	nop
 800c0a8:	2000149c 	.word	0x2000149c
 800c0ac:	200014a0 	.word	0x200014a0

0800c0b0 <_printf_float>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	ed2d 8b02 	vpush	{d8}
 800c0b8:	b08d      	sub	sp, #52	; 0x34
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	461f      	mov	r7, r3
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	f000 fb5f 	bl	800c788 <_localeconv_r>
 800c0ca:	f8d0 a000 	ldr.w	sl, [r0]
 800c0ce:	4650      	mov	r0, sl
 800c0d0:	f7f4 fec3 	bl	8000e5a <strlen>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c0e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c0e4:	3307      	adds	r3, #7
 800c0e6:	f023 0307 	bic.w	r3, r3, #7
 800c0ea:	f103 0208 	add.w	r2, r3, #8
 800c0ee:	f8c8 2000 	str.w	r2, [r8]
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c0fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c0fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c102:	9307      	str	r3, [sp, #28]
 800c104:	f8cd 8018 	str.w	r8, [sp, #24]
 800c108:	ee08 0a10 	vmov	s16, r0
 800c10c:	4b9f      	ldr	r3, [pc, #636]	; (800c38c <_printf_float+0x2dc>)
 800c10e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c116:	f7f4 fd03 	bl	8000b20 <__aeabi_dcmpun>
 800c11a:	bb88      	cbnz	r0, 800c180 <_printf_float+0xd0>
 800c11c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c120:	4b9a      	ldr	r3, [pc, #616]	; (800c38c <_printf_float+0x2dc>)
 800c122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c126:	f7f4 fcdd 	bl	8000ae4 <__aeabi_dcmple>
 800c12a:	bb48      	cbnz	r0, 800c180 <_printf_float+0xd0>
 800c12c:	2200      	movs	r2, #0
 800c12e:	2300      	movs	r3, #0
 800c130:	4640      	mov	r0, r8
 800c132:	4649      	mov	r1, r9
 800c134:	f7f4 fccc 	bl	8000ad0 <__aeabi_dcmplt>
 800c138:	b110      	cbz	r0, 800c140 <_printf_float+0x90>
 800c13a:	232d      	movs	r3, #45	; 0x2d
 800c13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c140:	4b93      	ldr	r3, [pc, #588]	; (800c390 <_printf_float+0x2e0>)
 800c142:	4894      	ldr	r0, [pc, #592]	; (800c394 <_printf_float+0x2e4>)
 800c144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c148:	bf94      	ite	ls
 800c14a:	4698      	movls	r8, r3
 800c14c:	4680      	movhi	r8, r0
 800c14e:	2303      	movs	r3, #3
 800c150:	6123      	str	r3, [r4, #16]
 800c152:	9b05      	ldr	r3, [sp, #20]
 800c154:	f023 0204 	bic.w	r2, r3, #4
 800c158:	6022      	str	r2, [r4, #0]
 800c15a:	f04f 0900 	mov.w	r9, #0
 800c15e:	9700      	str	r7, [sp, #0]
 800c160:	4633      	mov	r3, r6
 800c162:	aa0b      	add	r2, sp, #44	; 0x2c
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f001 fb50 	bl	800d80c <_printf_common>
 800c16c:	3001      	adds	r0, #1
 800c16e:	f040 8090 	bne.w	800c292 <_printf_float+0x1e2>
 800c172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c176:	b00d      	add	sp, #52	; 0x34
 800c178:	ecbd 8b02 	vpop	{d8}
 800c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c180:	4642      	mov	r2, r8
 800c182:	464b      	mov	r3, r9
 800c184:	4640      	mov	r0, r8
 800c186:	4649      	mov	r1, r9
 800c188:	f7f4 fcca 	bl	8000b20 <__aeabi_dcmpun>
 800c18c:	b140      	cbz	r0, 800c1a0 <_printf_float+0xf0>
 800c18e:	464b      	mov	r3, r9
 800c190:	2b00      	cmp	r3, #0
 800c192:	bfbc      	itt	lt
 800c194:	232d      	movlt	r3, #45	; 0x2d
 800c196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c19a:	487f      	ldr	r0, [pc, #508]	; (800c398 <_printf_float+0x2e8>)
 800c19c:	4b7f      	ldr	r3, [pc, #508]	; (800c39c <_printf_float+0x2ec>)
 800c19e:	e7d1      	b.n	800c144 <_printf_float+0x94>
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c1a6:	9206      	str	r2, [sp, #24]
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	d13f      	bne.n	800c22c <_printf_float+0x17c>
 800c1ac:	2306      	movs	r3, #6
 800c1ae:	6063      	str	r3, [r4, #4]
 800c1b0:	9b05      	ldr	r3, [sp, #20]
 800c1b2:	6861      	ldr	r1, [r4, #4]
 800c1b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9303      	str	r3, [sp, #12]
 800c1bc:	ab0a      	add	r3, sp, #40	; 0x28
 800c1be:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c1c2:	ab09      	add	r3, sp, #36	; 0x24
 800c1c4:	ec49 8b10 	vmov	d0, r8, r9
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f001 fa7b 	bl	800d6cc <__cvt>
 800c1d6:	9b06      	ldr	r3, [sp, #24]
 800c1d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1da:	2b47      	cmp	r3, #71	; 0x47
 800c1dc:	4680      	mov	r8, r0
 800c1de:	d108      	bne.n	800c1f2 <_printf_float+0x142>
 800c1e0:	1cc8      	adds	r0, r1, #3
 800c1e2:	db02      	blt.n	800c1ea <_printf_float+0x13a>
 800c1e4:	6863      	ldr	r3, [r4, #4]
 800c1e6:	4299      	cmp	r1, r3
 800c1e8:	dd41      	ble.n	800c26e <_printf_float+0x1be>
 800c1ea:	f1ab 0b02 	sub.w	fp, fp, #2
 800c1ee:	fa5f fb8b 	uxtb.w	fp, fp
 800c1f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1f6:	d820      	bhi.n	800c23a <_printf_float+0x18a>
 800c1f8:	3901      	subs	r1, #1
 800c1fa:	465a      	mov	r2, fp
 800c1fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c200:	9109      	str	r1, [sp, #36]	; 0x24
 800c202:	f001 fac5 	bl	800d790 <__exponent>
 800c206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c208:	1813      	adds	r3, r2, r0
 800c20a:	2a01      	cmp	r2, #1
 800c20c:	4681      	mov	r9, r0
 800c20e:	6123      	str	r3, [r4, #16]
 800c210:	dc02      	bgt.n	800c218 <_printf_float+0x168>
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	07d2      	lsls	r2, r2, #31
 800c216:	d501      	bpl.n	800c21c <_printf_float+0x16c>
 800c218:	3301      	adds	r3, #1
 800c21a:	6123      	str	r3, [r4, #16]
 800c21c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c220:	2b00      	cmp	r3, #0
 800c222:	d09c      	beq.n	800c15e <_printf_float+0xae>
 800c224:	232d      	movs	r3, #45	; 0x2d
 800c226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c22a:	e798      	b.n	800c15e <_printf_float+0xae>
 800c22c:	9a06      	ldr	r2, [sp, #24]
 800c22e:	2a47      	cmp	r2, #71	; 0x47
 800c230:	d1be      	bne.n	800c1b0 <_printf_float+0x100>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1bc      	bne.n	800c1b0 <_printf_float+0x100>
 800c236:	2301      	movs	r3, #1
 800c238:	e7b9      	b.n	800c1ae <_printf_float+0xfe>
 800c23a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c23e:	d118      	bne.n	800c272 <_printf_float+0x1c2>
 800c240:	2900      	cmp	r1, #0
 800c242:	6863      	ldr	r3, [r4, #4]
 800c244:	dd0b      	ble.n	800c25e <_printf_float+0x1ae>
 800c246:	6121      	str	r1, [r4, #16]
 800c248:	b913      	cbnz	r3, 800c250 <_printf_float+0x1a0>
 800c24a:	6822      	ldr	r2, [r4, #0]
 800c24c:	07d0      	lsls	r0, r2, #31
 800c24e:	d502      	bpl.n	800c256 <_printf_float+0x1a6>
 800c250:	3301      	adds	r3, #1
 800c252:	440b      	add	r3, r1
 800c254:	6123      	str	r3, [r4, #16]
 800c256:	65a1      	str	r1, [r4, #88]	; 0x58
 800c258:	f04f 0900 	mov.w	r9, #0
 800c25c:	e7de      	b.n	800c21c <_printf_float+0x16c>
 800c25e:	b913      	cbnz	r3, 800c266 <_printf_float+0x1b6>
 800c260:	6822      	ldr	r2, [r4, #0]
 800c262:	07d2      	lsls	r2, r2, #31
 800c264:	d501      	bpl.n	800c26a <_printf_float+0x1ba>
 800c266:	3302      	adds	r3, #2
 800c268:	e7f4      	b.n	800c254 <_printf_float+0x1a4>
 800c26a:	2301      	movs	r3, #1
 800c26c:	e7f2      	b.n	800c254 <_printf_float+0x1a4>
 800c26e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c274:	4299      	cmp	r1, r3
 800c276:	db05      	blt.n	800c284 <_printf_float+0x1d4>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	6121      	str	r1, [r4, #16]
 800c27c:	07d8      	lsls	r0, r3, #31
 800c27e:	d5ea      	bpl.n	800c256 <_printf_float+0x1a6>
 800c280:	1c4b      	adds	r3, r1, #1
 800c282:	e7e7      	b.n	800c254 <_printf_float+0x1a4>
 800c284:	2900      	cmp	r1, #0
 800c286:	bfd4      	ite	le
 800c288:	f1c1 0202 	rsble	r2, r1, #2
 800c28c:	2201      	movgt	r2, #1
 800c28e:	4413      	add	r3, r2
 800c290:	e7e0      	b.n	800c254 <_printf_float+0x1a4>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	055a      	lsls	r2, r3, #21
 800c296:	d407      	bmi.n	800c2a8 <_printf_float+0x1f8>
 800c298:	6923      	ldr	r3, [r4, #16]
 800c29a:	4642      	mov	r2, r8
 800c29c:	4631      	mov	r1, r6
 800c29e:	4628      	mov	r0, r5
 800c2a0:	47b8      	blx	r7
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	d12c      	bne.n	800c300 <_printf_float+0x250>
 800c2a6:	e764      	b.n	800c172 <_printf_float+0xc2>
 800c2a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2ac:	f240 80e0 	bls.w	800c470 <_printf_float+0x3c0>
 800c2b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f7f4 fc00 	bl	8000abc <__aeabi_dcmpeq>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d034      	beq.n	800c32a <_printf_float+0x27a>
 800c2c0:	4a37      	ldr	r2, [pc, #220]	; (800c3a0 <_printf_float+0x2f0>)
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4631      	mov	r1, r6
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	47b8      	blx	r7
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	f43f af51 	beq.w	800c172 <_printf_float+0xc2>
 800c2d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	db02      	blt.n	800c2de <_printf_float+0x22e>
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	07d8      	lsls	r0, r3, #31
 800c2dc:	d510      	bpl.n	800c300 <_printf_float+0x250>
 800c2de:	ee18 3a10 	vmov	r3, s16
 800c2e2:	4652      	mov	r2, sl
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f af41 	beq.w	800c172 <_printf_float+0xc2>
 800c2f0:	f04f 0800 	mov.w	r8, #0
 800c2f4:	f104 091a 	add.w	r9, r4, #26
 800c2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	4543      	cmp	r3, r8
 800c2fe:	dc09      	bgt.n	800c314 <_printf_float+0x264>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	079b      	lsls	r3, r3, #30
 800c304:	f100 8105 	bmi.w	800c512 <_printf_float+0x462>
 800c308:	68e0      	ldr	r0, [r4, #12]
 800c30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c30c:	4298      	cmp	r0, r3
 800c30e:	bfb8      	it	lt
 800c310:	4618      	movlt	r0, r3
 800c312:	e730      	b.n	800c176 <_printf_float+0xc6>
 800c314:	2301      	movs	r3, #1
 800c316:	464a      	mov	r2, r9
 800c318:	4631      	mov	r1, r6
 800c31a:	4628      	mov	r0, r5
 800c31c:	47b8      	blx	r7
 800c31e:	3001      	adds	r0, #1
 800c320:	f43f af27 	beq.w	800c172 <_printf_float+0xc2>
 800c324:	f108 0801 	add.w	r8, r8, #1
 800c328:	e7e6      	b.n	800c2f8 <_printf_float+0x248>
 800c32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dc39      	bgt.n	800c3a4 <_printf_float+0x2f4>
 800c330:	4a1b      	ldr	r2, [pc, #108]	; (800c3a0 <_printf_float+0x2f0>)
 800c332:	2301      	movs	r3, #1
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f af19 	beq.w	800c172 <_printf_float+0xc2>
 800c340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c344:	4313      	orrs	r3, r2
 800c346:	d102      	bne.n	800c34e <_printf_float+0x29e>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	07d9      	lsls	r1, r3, #31
 800c34c:	d5d8      	bpl.n	800c300 <_printf_float+0x250>
 800c34e:	ee18 3a10 	vmov	r3, s16
 800c352:	4652      	mov	r2, sl
 800c354:	4631      	mov	r1, r6
 800c356:	4628      	mov	r0, r5
 800c358:	47b8      	blx	r7
 800c35a:	3001      	adds	r0, #1
 800c35c:	f43f af09 	beq.w	800c172 <_printf_float+0xc2>
 800c360:	f04f 0900 	mov.w	r9, #0
 800c364:	f104 0a1a 	add.w	sl, r4, #26
 800c368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36a:	425b      	negs	r3, r3
 800c36c:	454b      	cmp	r3, r9
 800c36e:	dc01      	bgt.n	800c374 <_printf_float+0x2c4>
 800c370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c372:	e792      	b.n	800c29a <_printf_float+0x1ea>
 800c374:	2301      	movs	r3, #1
 800c376:	4652      	mov	r2, sl
 800c378:	4631      	mov	r1, r6
 800c37a:	4628      	mov	r0, r5
 800c37c:	47b8      	blx	r7
 800c37e:	3001      	adds	r0, #1
 800c380:	f43f aef7 	beq.w	800c172 <_printf_float+0xc2>
 800c384:	f109 0901 	add.w	r9, r9, #1
 800c388:	e7ee      	b.n	800c368 <_printf_float+0x2b8>
 800c38a:	bf00      	nop
 800c38c:	7fefffff 	.word	0x7fefffff
 800c390:	0800ec8d 	.word	0x0800ec8d
 800c394:	0800ec91 	.word	0x0800ec91
 800c398:	0800ec99 	.word	0x0800ec99
 800c39c:	0800ec95 	.word	0x0800ec95
 800c3a0:	0800ec9d 	.word	0x0800ec9d
 800c3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	bfa8      	it	ge
 800c3ac:	461a      	movge	r2, r3
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	4691      	mov	r9, r2
 800c3b2:	dc37      	bgt.n	800c424 <_printf_float+0x374>
 800c3b4:	f04f 0b00 	mov.w	fp, #0
 800c3b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3bc:	f104 021a 	add.w	r2, r4, #26
 800c3c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3c2:	9305      	str	r3, [sp, #20]
 800c3c4:	eba3 0309 	sub.w	r3, r3, r9
 800c3c8:	455b      	cmp	r3, fp
 800c3ca:	dc33      	bgt.n	800c434 <_printf_float+0x384>
 800c3cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	db3b      	blt.n	800c44c <_printf_float+0x39c>
 800c3d4:	6823      	ldr	r3, [r4, #0]
 800c3d6:	07da      	lsls	r2, r3, #31
 800c3d8:	d438      	bmi.n	800c44c <_printf_float+0x39c>
 800c3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3dc:	9a05      	ldr	r2, [sp, #20]
 800c3de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3e0:	1a9a      	subs	r2, r3, r2
 800c3e2:	eba3 0901 	sub.w	r9, r3, r1
 800c3e6:	4591      	cmp	r9, r2
 800c3e8:	bfa8      	it	ge
 800c3ea:	4691      	movge	r9, r2
 800c3ec:	f1b9 0f00 	cmp.w	r9, #0
 800c3f0:	dc35      	bgt.n	800c45e <_printf_float+0x3ae>
 800c3f2:	f04f 0800 	mov.w	r8, #0
 800c3f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3fa:	f104 0a1a 	add.w	sl, r4, #26
 800c3fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c402:	1a9b      	subs	r3, r3, r2
 800c404:	eba3 0309 	sub.w	r3, r3, r9
 800c408:	4543      	cmp	r3, r8
 800c40a:	f77f af79 	ble.w	800c300 <_printf_float+0x250>
 800c40e:	2301      	movs	r3, #1
 800c410:	4652      	mov	r2, sl
 800c412:	4631      	mov	r1, r6
 800c414:	4628      	mov	r0, r5
 800c416:	47b8      	blx	r7
 800c418:	3001      	adds	r0, #1
 800c41a:	f43f aeaa 	beq.w	800c172 <_printf_float+0xc2>
 800c41e:	f108 0801 	add.w	r8, r8, #1
 800c422:	e7ec      	b.n	800c3fe <_printf_float+0x34e>
 800c424:	4613      	mov	r3, r2
 800c426:	4631      	mov	r1, r6
 800c428:	4642      	mov	r2, r8
 800c42a:	4628      	mov	r0, r5
 800c42c:	47b8      	blx	r7
 800c42e:	3001      	adds	r0, #1
 800c430:	d1c0      	bne.n	800c3b4 <_printf_float+0x304>
 800c432:	e69e      	b.n	800c172 <_printf_float+0xc2>
 800c434:	2301      	movs	r3, #1
 800c436:	4631      	mov	r1, r6
 800c438:	4628      	mov	r0, r5
 800c43a:	9205      	str	r2, [sp, #20]
 800c43c:	47b8      	blx	r7
 800c43e:	3001      	adds	r0, #1
 800c440:	f43f ae97 	beq.w	800c172 <_printf_float+0xc2>
 800c444:	9a05      	ldr	r2, [sp, #20]
 800c446:	f10b 0b01 	add.w	fp, fp, #1
 800c44a:	e7b9      	b.n	800c3c0 <_printf_float+0x310>
 800c44c:	ee18 3a10 	vmov	r3, s16
 800c450:	4652      	mov	r2, sl
 800c452:	4631      	mov	r1, r6
 800c454:	4628      	mov	r0, r5
 800c456:	47b8      	blx	r7
 800c458:	3001      	adds	r0, #1
 800c45a:	d1be      	bne.n	800c3da <_printf_float+0x32a>
 800c45c:	e689      	b.n	800c172 <_printf_float+0xc2>
 800c45e:	9a05      	ldr	r2, [sp, #20]
 800c460:	464b      	mov	r3, r9
 800c462:	4442      	add	r2, r8
 800c464:	4631      	mov	r1, r6
 800c466:	4628      	mov	r0, r5
 800c468:	47b8      	blx	r7
 800c46a:	3001      	adds	r0, #1
 800c46c:	d1c1      	bne.n	800c3f2 <_printf_float+0x342>
 800c46e:	e680      	b.n	800c172 <_printf_float+0xc2>
 800c470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c472:	2a01      	cmp	r2, #1
 800c474:	dc01      	bgt.n	800c47a <_printf_float+0x3ca>
 800c476:	07db      	lsls	r3, r3, #31
 800c478:	d538      	bpl.n	800c4ec <_printf_float+0x43c>
 800c47a:	2301      	movs	r3, #1
 800c47c:	4642      	mov	r2, r8
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae74 	beq.w	800c172 <_printf_float+0xc2>
 800c48a:	ee18 3a10 	vmov	r3, s16
 800c48e:	4652      	mov	r2, sl
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f ae6b 	beq.w	800c172 <_printf_float+0xc2>
 800c49c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f7f4 fb0a 	bl	8000abc <__aeabi_dcmpeq>
 800c4a8:	b9d8      	cbnz	r0, 800c4e2 <_printf_float+0x432>
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ac:	f108 0201 	add.w	r2, r8, #1
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	4631      	mov	r1, r6
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b8      	blx	r7
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d10e      	bne.n	800c4da <_printf_float+0x42a>
 800c4bc:	e659      	b.n	800c172 <_printf_float+0xc2>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	4631      	mov	r1, r6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f43f ae52 	beq.w	800c172 <_printf_float+0xc2>
 800c4ce:	f108 0801 	add.w	r8, r8, #1
 800c4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	4543      	cmp	r3, r8
 800c4d8:	dcf1      	bgt.n	800c4be <_printf_float+0x40e>
 800c4da:	464b      	mov	r3, r9
 800c4dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4e0:	e6dc      	b.n	800c29c <_printf_float+0x1ec>
 800c4e2:	f04f 0800 	mov.w	r8, #0
 800c4e6:	f104 0a1a 	add.w	sl, r4, #26
 800c4ea:	e7f2      	b.n	800c4d2 <_printf_float+0x422>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4642      	mov	r2, r8
 800c4f0:	e7df      	b.n	800c4b2 <_printf_float+0x402>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	464a      	mov	r2, r9
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	47b8      	blx	r7
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	f43f ae38 	beq.w	800c172 <_printf_float+0xc2>
 800c502:	f108 0801 	add.w	r8, r8, #1
 800c506:	68e3      	ldr	r3, [r4, #12]
 800c508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c50a:	1a5b      	subs	r3, r3, r1
 800c50c:	4543      	cmp	r3, r8
 800c50e:	dcf0      	bgt.n	800c4f2 <_printf_float+0x442>
 800c510:	e6fa      	b.n	800c308 <_printf_float+0x258>
 800c512:	f04f 0800 	mov.w	r8, #0
 800c516:	f104 0919 	add.w	r9, r4, #25
 800c51a:	e7f4      	b.n	800c506 <_printf_float+0x456>

0800c51c <_printf_i>:
 800c51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c520:	7e0f      	ldrb	r7, [r1, #24]
 800c522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c524:	2f78      	cmp	r7, #120	; 0x78
 800c526:	4691      	mov	r9, r2
 800c528:	4680      	mov	r8, r0
 800c52a:	460c      	mov	r4, r1
 800c52c:	469a      	mov	sl, r3
 800c52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c532:	d807      	bhi.n	800c544 <_printf_i+0x28>
 800c534:	2f62      	cmp	r7, #98	; 0x62
 800c536:	d80a      	bhi.n	800c54e <_printf_i+0x32>
 800c538:	2f00      	cmp	r7, #0
 800c53a:	f000 80d8 	beq.w	800c6ee <_printf_i+0x1d2>
 800c53e:	2f58      	cmp	r7, #88	; 0x58
 800c540:	f000 80a3 	beq.w	800c68a <_printf_i+0x16e>
 800c544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c54c:	e03a      	b.n	800c5c4 <_printf_i+0xa8>
 800c54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c552:	2b15      	cmp	r3, #21
 800c554:	d8f6      	bhi.n	800c544 <_printf_i+0x28>
 800c556:	a101      	add	r1, pc, #4	; (adr r1, 800c55c <_printf_i+0x40>)
 800c558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c55c:	0800c5b5 	.word	0x0800c5b5
 800c560:	0800c5c9 	.word	0x0800c5c9
 800c564:	0800c545 	.word	0x0800c545
 800c568:	0800c545 	.word	0x0800c545
 800c56c:	0800c545 	.word	0x0800c545
 800c570:	0800c545 	.word	0x0800c545
 800c574:	0800c5c9 	.word	0x0800c5c9
 800c578:	0800c545 	.word	0x0800c545
 800c57c:	0800c545 	.word	0x0800c545
 800c580:	0800c545 	.word	0x0800c545
 800c584:	0800c545 	.word	0x0800c545
 800c588:	0800c6d5 	.word	0x0800c6d5
 800c58c:	0800c5f9 	.word	0x0800c5f9
 800c590:	0800c6b7 	.word	0x0800c6b7
 800c594:	0800c545 	.word	0x0800c545
 800c598:	0800c545 	.word	0x0800c545
 800c59c:	0800c6f7 	.word	0x0800c6f7
 800c5a0:	0800c545 	.word	0x0800c545
 800c5a4:	0800c5f9 	.word	0x0800c5f9
 800c5a8:	0800c545 	.word	0x0800c545
 800c5ac:	0800c545 	.word	0x0800c545
 800c5b0:	0800c6bf 	.word	0x0800c6bf
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	602a      	str	r2, [r5, #0]
 800c5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e0a3      	b.n	800c710 <_printf_i+0x1f4>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	6829      	ldr	r1, [r5, #0]
 800c5cc:	0606      	lsls	r6, r0, #24
 800c5ce:	f101 0304 	add.w	r3, r1, #4
 800c5d2:	d50a      	bpl.n	800c5ea <_printf_i+0xce>
 800c5d4:	680e      	ldr	r6, [r1, #0]
 800c5d6:	602b      	str	r3, [r5, #0]
 800c5d8:	2e00      	cmp	r6, #0
 800c5da:	da03      	bge.n	800c5e4 <_printf_i+0xc8>
 800c5dc:	232d      	movs	r3, #45	; 0x2d
 800c5de:	4276      	negs	r6, r6
 800c5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e4:	485e      	ldr	r0, [pc, #376]	; (800c760 <_printf_i+0x244>)
 800c5e6:	230a      	movs	r3, #10
 800c5e8:	e019      	b.n	800c61e <_printf_i+0x102>
 800c5ea:	680e      	ldr	r6, [r1, #0]
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5f2:	bf18      	it	ne
 800c5f4:	b236      	sxthne	r6, r6
 800c5f6:	e7ef      	b.n	800c5d8 <_printf_i+0xbc>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	6820      	ldr	r0, [r4, #0]
 800c5fc:	1d19      	adds	r1, r3, #4
 800c5fe:	6029      	str	r1, [r5, #0]
 800c600:	0601      	lsls	r1, r0, #24
 800c602:	d501      	bpl.n	800c608 <_printf_i+0xec>
 800c604:	681e      	ldr	r6, [r3, #0]
 800c606:	e002      	b.n	800c60e <_printf_i+0xf2>
 800c608:	0646      	lsls	r6, r0, #25
 800c60a:	d5fb      	bpl.n	800c604 <_printf_i+0xe8>
 800c60c:	881e      	ldrh	r6, [r3, #0]
 800c60e:	4854      	ldr	r0, [pc, #336]	; (800c760 <_printf_i+0x244>)
 800c610:	2f6f      	cmp	r7, #111	; 0x6f
 800c612:	bf0c      	ite	eq
 800c614:	2308      	moveq	r3, #8
 800c616:	230a      	movne	r3, #10
 800c618:	2100      	movs	r1, #0
 800c61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c61e:	6865      	ldr	r5, [r4, #4]
 800c620:	60a5      	str	r5, [r4, #8]
 800c622:	2d00      	cmp	r5, #0
 800c624:	bfa2      	ittt	ge
 800c626:	6821      	ldrge	r1, [r4, #0]
 800c628:	f021 0104 	bicge.w	r1, r1, #4
 800c62c:	6021      	strge	r1, [r4, #0]
 800c62e:	b90e      	cbnz	r6, 800c634 <_printf_i+0x118>
 800c630:	2d00      	cmp	r5, #0
 800c632:	d04d      	beq.n	800c6d0 <_printf_i+0x1b4>
 800c634:	4615      	mov	r5, r2
 800c636:	fbb6 f1f3 	udiv	r1, r6, r3
 800c63a:	fb03 6711 	mls	r7, r3, r1, r6
 800c63e:	5dc7      	ldrb	r7, [r0, r7]
 800c640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c644:	4637      	mov	r7, r6
 800c646:	42bb      	cmp	r3, r7
 800c648:	460e      	mov	r6, r1
 800c64a:	d9f4      	bls.n	800c636 <_printf_i+0x11a>
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d10b      	bne.n	800c668 <_printf_i+0x14c>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	07de      	lsls	r6, r3, #31
 800c654:	d508      	bpl.n	800c668 <_printf_i+0x14c>
 800c656:	6923      	ldr	r3, [r4, #16]
 800c658:	6861      	ldr	r1, [r4, #4]
 800c65a:	4299      	cmp	r1, r3
 800c65c:	bfde      	ittt	le
 800c65e:	2330      	movle	r3, #48	; 0x30
 800c660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c668:	1b52      	subs	r2, r2, r5
 800c66a:	6122      	str	r2, [r4, #16]
 800c66c:	f8cd a000 	str.w	sl, [sp]
 800c670:	464b      	mov	r3, r9
 800c672:	aa03      	add	r2, sp, #12
 800c674:	4621      	mov	r1, r4
 800c676:	4640      	mov	r0, r8
 800c678:	f001 f8c8 	bl	800d80c <_printf_common>
 800c67c:	3001      	adds	r0, #1
 800c67e:	d14c      	bne.n	800c71a <_printf_i+0x1fe>
 800c680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c684:	b004      	add	sp, #16
 800c686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68a:	4835      	ldr	r0, [pc, #212]	; (800c760 <_printf_i+0x244>)
 800c68c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c690:	6829      	ldr	r1, [r5, #0]
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	f851 6b04 	ldr.w	r6, [r1], #4
 800c698:	6029      	str	r1, [r5, #0]
 800c69a:	061d      	lsls	r5, r3, #24
 800c69c:	d514      	bpl.n	800c6c8 <_printf_i+0x1ac>
 800c69e:	07df      	lsls	r7, r3, #31
 800c6a0:	bf44      	itt	mi
 800c6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c6a6:	6023      	strmi	r3, [r4, #0]
 800c6a8:	b91e      	cbnz	r6, 800c6b2 <_printf_i+0x196>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	f023 0320 	bic.w	r3, r3, #32
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	2310      	movs	r3, #16
 800c6b4:	e7b0      	b.n	800c618 <_printf_i+0xfc>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	f043 0320 	orr.w	r3, r3, #32
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	2378      	movs	r3, #120	; 0x78
 800c6c0:	4828      	ldr	r0, [pc, #160]	; (800c764 <_printf_i+0x248>)
 800c6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6c6:	e7e3      	b.n	800c690 <_printf_i+0x174>
 800c6c8:	0659      	lsls	r1, r3, #25
 800c6ca:	bf48      	it	mi
 800c6cc:	b2b6      	uxthmi	r6, r6
 800c6ce:	e7e6      	b.n	800c69e <_printf_i+0x182>
 800c6d0:	4615      	mov	r5, r2
 800c6d2:	e7bb      	b.n	800c64c <_printf_i+0x130>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	6826      	ldr	r6, [r4, #0]
 800c6d8:	6961      	ldr	r1, [r4, #20]
 800c6da:	1d18      	adds	r0, r3, #4
 800c6dc:	6028      	str	r0, [r5, #0]
 800c6de:	0635      	lsls	r5, r6, #24
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	d501      	bpl.n	800c6e8 <_printf_i+0x1cc>
 800c6e4:	6019      	str	r1, [r3, #0]
 800c6e6:	e002      	b.n	800c6ee <_printf_i+0x1d2>
 800c6e8:	0670      	lsls	r0, r6, #25
 800c6ea:	d5fb      	bpl.n	800c6e4 <_printf_i+0x1c8>
 800c6ec:	8019      	strh	r1, [r3, #0]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	6123      	str	r3, [r4, #16]
 800c6f2:	4615      	mov	r5, r2
 800c6f4:	e7ba      	b.n	800c66c <_printf_i+0x150>
 800c6f6:	682b      	ldr	r3, [r5, #0]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	602a      	str	r2, [r5, #0]
 800c6fc:	681d      	ldr	r5, [r3, #0]
 800c6fe:	6862      	ldr	r2, [r4, #4]
 800c700:	2100      	movs	r1, #0
 800c702:	4628      	mov	r0, r5
 800c704:	f7f3 fd4c 	bl	80001a0 <memchr>
 800c708:	b108      	cbz	r0, 800c70e <_printf_i+0x1f2>
 800c70a:	1b40      	subs	r0, r0, r5
 800c70c:	6060      	str	r0, [r4, #4]
 800c70e:	6863      	ldr	r3, [r4, #4]
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	2300      	movs	r3, #0
 800c714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c718:	e7a8      	b.n	800c66c <_printf_i+0x150>
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4649      	mov	r1, r9
 800c720:	4640      	mov	r0, r8
 800c722:	47d0      	blx	sl
 800c724:	3001      	adds	r0, #1
 800c726:	d0ab      	beq.n	800c680 <_printf_i+0x164>
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	079b      	lsls	r3, r3, #30
 800c72c:	d413      	bmi.n	800c756 <_printf_i+0x23a>
 800c72e:	68e0      	ldr	r0, [r4, #12]
 800c730:	9b03      	ldr	r3, [sp, #12]
 800c732:	4298      	cmp	r0, r3
 800c734:	bfb8      	it	lt
 800c736:	4618      	movlt	r0, r3
 800c738:	e7a4      	b.n	800c684 <_printf_i+0x168>
 800c73a:	2301      	movs	r3, #1
 800c73c:	4632      	mov	r2, r6
 800c73e:	4649      	mov	r1, r9
 800c740:	4640      	mov	r0, r8
 800c742:	47d0      	blx	sl
 800c744:	3001      	adds	r0, #1
 800c746:	d09b      	beq.n	800c680 <_printf_i+0x164>
 800c748:	3501      	adds	r5, #1
 800c74a:	68e3      	ldr	r3, [r4, #12]
 800c74c:	9903      	ldr	r1, [sp, #12]
 800c74e:	1a5b      	subs	r3, r3, r1
 800c750:	42ab      	cmp	r3, r5
 800c752:	dcf2      	bgt.n	800c73a <_printf_i+0x21e>
 800c754:	e7eb      	b.n	800c72e <_printf_i+0x212>
 800c756:	2500      	movs	r5, #0
 800c758:	f104 0619 	add.w	r6, r4, #25
 800c75c:	e7f5      	b.n	800c74a <_printf_i+0x22e>
 800c75e:	bf00      	nop
 800c760:	0800ec9f 	.word	0x0800ec9f
 800c764:	0800ecb0 	.word	0x0800ecb0

0800c768 <_sbrk_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d06      	ldr	r5, [pc, #24]	; (800c784 <_sbrk_r+0x1c>)
 800c76c:	2300      	movs	r3, #0
 800c76e:	4604      	mov	r4, r0
 800c770:	4608      	mov	r0, r1
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	f7f6 fb66 	bl	8002e44 <_sbrk>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d102      	bne.n	800c782 <_sbrk_r+0x1a>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	b103      	cbz	r3, 800c782 <_sbrk_r+0x1a>
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	bd38      	pop	{r3, r4, r5, pc}
 800c784:	200014a4 	.word	0x200014a4

0800c788 <_localeconv_r>:
 800c788:	4800      	ldr	r0, [pc, #0]	; (800c78c <_localeconv_r+0x4>)
 800c78a:	4770      	bx	lr
 800c78c:	200004d4 	.word	0x200004d4

0800c790 <__malloc_lock>:
 800c790:	4801      	ldr	r0, [pc, #4]	; (800c798 <__malloc_lock+0x8>)
 800c792:	f7f6 bb77 	b.w	8002e84 <__retarget_lock_acquire_recursive>
 800c796:	bf00      	nop
 800c798:	20000660 	.word	0x20000660

0800c79c <__malloc_unlock>:
 800c79c:	4801      	ldr	r0, [pc, #4]	; (800c7a4 <__malloc_unlock+0x8>)
 800c79e:	f7f6 bb77 	b.w	8002e90 <__retarget_lock_release_recursive>
 800c7a2:	bf00      	nop
 800c7a4:	20000660 	.word	0x20000660

0800c7a8 <_Balloc>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	b976      	cbnz	r6, 800c7d0 <_Balloc+0x28>
 800c7b2:	2010      	movs	r0, #16
 800c7b4:	f7ff fbce 	bl	800bf54 <malloc>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	6260      	str	r0, [r4, #36]	; 0x24
 800c7bc:	b920      	cbnz	r0, 800c7c8 <_Balloc+0x20>
 800c7be:	4b18      	ldr	r3, [pc, #96]	; (800c820 <_Balloc+0x78>)
 800c7c0:	4818      	ldr	r0, [pc, #96]	; (800c824 <_Balloc+0x7c>)
 800c7c2:	2166      	movs	r1, #102	; 0x66
 800c7c4:	f000 fb08 	bl	800cdd8 <__assert_func>
 800c7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7cc:	6006      	str	r6, [r0, #0]
 800c7ce:	60c6      	str	r6, [r0, #12]
 800c7d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7d2:	68f3      	ldr	r3, [r6, #12]
 800c7d4:	b183      	cbz	r3, 800c7f8 <_Balloc+0x50>
 800c7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7de:	b9b8      	cbnz	r0, 800c810 <_Balloc+0x68>
 800c7e0:	2101      	movs	r1, #1
 800c7e2:	fa01 f605 	lsl.w	r6, r1, r5
 800c7e6:	1d72      	adds	r2, r6, #5
 800c7e8:	0092      	lsls	r2, r2, #2
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f001 f971 	bl	800dad2 <_calloc_r>
 800c7f0:	b160      	cbz	r0, 800c80c <_Balloc+0x64>
 800c7f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7f6:	e00e      	b.n	800c816 <_Balloc+0x6e>
 800c7f8:	2221      	movs	r2, #33	; 0x21
 800c7fa:	2104      	movs	r1, #4
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f001 f968 	bl	800dad2 <_calloc_r>
 800c802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c804:	60f0      	str	r0, [r6, #12]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e4      	bne.n	800c7d6 <_Balloc+0x2e>
 800c80c:	2000      	movs	r0, #0
 800c80e:	bd70      	pop	{r4, r5, r6, pc}
 800c810:	6802      	ldr	r2, [r0, #0]
 800c812:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c816:	2300      	movs	r3, #0
 800c818:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c81c:	e7f7      	b.n	800c80e <_Balloc+0x66>
 800c81e:	bf00      	nop
 800c820:	0800ecce 	.word	0x0800ecce
 800c824:	0800ed50 	.word	0x0800ed50

0800c828 <_Bfree>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b976      	cbnz	r6, 800c850 <_Bfree+0x28>
 800c832:	2010      	movs	r0, #16
 800c834:	f7ff fb8e 	bl	800bf54 <malloc>
 800c838:	4602      	mov	r2, r0
 800c83a:	6268      	str	r0, [r5, #36]	; 0x24
 800c83c:	b920      	cbnz	r0, 800c848 <_Bfree+0x20>
 800c83e:	4b09      	ldr	r3, [pc, #36]	; (800c864 <_Bfree+0x3c>)
 800c840:	4809      	ldr	r0, [pc, #36]	; (800c868 <_Bfree+0x40>)
 800c842:	218a      	movs	r1, #138	; 0x8a
 800c844:	f000 fac8 	bl	800cdd8 <__assert_func>
 800c848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c84c:	6006      	str	r6, [r0, #0]
 800c84e:	60c6      	str	r6, [r0, #12]
 800c850:	b13c      	cbz	r4, 800c862 <_Bfree+0x3a>
 800c852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c854:	6862      	ldr	r2, [r4, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c85c:	6021      	str	r1, [r4, #0]
 800c85e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	0800ecce 	.word	0x0800ecce
 800c868:	0800ed50 	.word	0x0800ed50

0800c86c <__multadd>:
 800c86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c870:	690d      	ldr	r5, [r1, #16]
 800c872:	4607      	mov	r7, r0
 800c874:	460c      	mov	r4, r1
 800c876:	461e      	mov	r6, r3
 800c878:	f101 0c14 	add.w	ip, r1, #20
 800c87c:	2000      	movs	r0, #0
 800c87e:	f8dc 3000 	ldr.w	r3, [ip]
 800c882:	b299      	uxth	r1, r3
 800c884:	fb02 6101 	mla	r1, r2, r1, r6
 800c888:	0c1e      	lsrs	r6, r3, #16
 800c88a:	0c0b      	lsrs	r3, r1, #16
 800c88c:	fb02 3306 	mla	r3, r2, r6, r3
 800c890:	b289      	uxth	r1, r1
 800c892:	3001      	adds	r0, #1
 800c894:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c898:	4285      	cmp	r5, r0
 800c89a:	f84c 1b04 	str.w	r1, [ip], #4
 800c89e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8a2:	dcec      	bgt.n	800c87e <__multadd+0x12>
 800c8a4:	b30e      	cbz	r6, 800c8ea <__multadd+0x7e>
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	dc19      	bgt.n	800c8e0 <__multadd+0x74>
 800c8ac:	6861      	ldr	r1, [r4, #4]
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	3101      	adds	r1, #1
 800c8b2:	f7ff ff79 	bl	800c7a8 <_Balloc>
 800c8b6:	4680      	mov	r8, r0
 800c8b8:	b928      	cbnz	r0, 800c8c6 <__multadd+0x5a>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <__multadd+0x84>)
 800c8be:	480d      	ldr	r0, [pc, #52]	; (800c8f4 <__multadd+0x88>)
 800c8c0:	21b5      	movs	r1, #181	; 0xb5
 800c8c2:	f000 fa89 	bl	800cdd8 <__assert_func>
 800c8c6:	6922      	ldr	r2, [r4, #16]
 800c8c8:	3202      	adds	r2, #2
 800c8ca:	f104 010c 	add.w	r1, r4, #12
 800c8ce:	0092      	lsls	r2, r2, #2
 800c8d0:	300c      	adds	r0, #12
 800c8d2:	f000 fee5 	bl	800d6a0 <memcpy>
 800c8d6:	4621      	mov	r1, r4
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff ffa5 	bl	800c828 <_Bfree>
 800c8de:	4644      	mov	r4, r8
 800c8e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	615e      	str	r6, [r3, #20]
 800c8e8:	6125      	str	r5, [r4, #16]
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f0:	0800ed3f 	.word	0x0800ed3f
 800c8f4:	0800ed50 	.word	0x0800ed50

0800c8f8 <__i2b>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	f7ff ff53 	bl	800c7a8 <_Balloc>
 800c902:	4602      	mov	r2, r0
 800c904:	b928      	cbnz	r0, 800c912 <__i2b+0x1a>
 800c906:	4b05      	ldr	r3, [pc, #20]	; (800c91c <__i2b+0x24>)
 800c908:	4805      	ldr	r0, [pc, #20]	; (800c920 <__i2b+0x28>)
 800c90a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c90e:	f000 fa63 	bl	800cdd8 <__assert_func>
 800c912:	2301      	movs	r3, #1
 800c914:	6144      	str	r4, [r0, #20]
 800c916:	6103      	str	r3, [r0, #16]
 800c918:	bd10      	pop	{r4, pc}
 800c91a:	bf00      	nop
 800c91c:	0800ed3f 	.word	0x0800ed3f
 800c920:	0800ed50 	.word	0x0800ed50

0800c924 <__multiply>:
 800c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	4691      	mov	r9, r2
 800c92a:	690a      	ldr	r2, [r1, #16]
 800c92c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c930:	429a      	cmp	r2, r3
 800c932:	bfb8      	it	lt
 800c934:	460b      	movlt	r3, r1
 800c936:	460c      	mov	r4, r1
 800c938:	bfbc      	itt	lt
 800c93a:	464c      	movlt	r4, r9
 800c93c:	4699      	movlt	r9, r3
 800c93e:	6927      	ldr	r7, [r4, #16]
 800c940:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c944:	68a3      	ldr	r3, [r4, #8]
 800c946:	6861      	ldr	r1, [r4, #4]
 800c948:	eb07 060a 	add.w	r6, r7, sl
 800c94c:	42b3      	cmp	r3, r6
 800c94e:	b085      	sub	sp, #20
 800c950:	bfb8      	it	lt
 800c952:	3101      	addlt	r1, #1
 800c954:	f7ff ff28 	bl	800c7a8 <_Balloc>
 800c958:	b930      	cbnz	r0, 800c968 <__multiply+0x44>
 800c95a:	4602      	mov	r2, r0
 800c95c:	4b44      	ldr	r3, [pc, #272]	; (800ca70 <__multiply+0x14c>)
 800c95e:	4845      	ldr	r0, [pc, #276]	; (800ca74 <__multiply+0x150>)
 800c960:	f240 115d 	movw	r1, #349	; 0x15d
 800c964:	f000 fa38 	bl	800cdd8 <__assert_func>
 800c968:	f100 0514 	add.w	r5, r0, #20
 800c96c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c970:	462b      	mov	r3, r5
 800c972:	2200      	movs	r2, #0
 800c974:	4543      	cmp	r3, r8
 800c976:	d321      	bcc.n	800c9bc <__multiply+0x98>
 800c978:	f104 0314 	add.w	r3, r4, #20
 800c97c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c980:	f109 0314 	add.w	r3, r9, #20
 800c984:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c988:	9202      	str	r2, [sp, #8]
 800c98a:	1b3a      	subs	r2, r7, r4
 800c98c:	3a15      	subs	r2, #21
 800c98e:	f022 0203 	bic.w	r2, r2, #3
 800c992:	3204      	adds	r2, #4
 800c994:	f104 0115 	add.w	r1, r4, #21
 800c998:	428f      	cmp	r7, r1
 800c99a:	bf38      	it	cc
 800c99c:	2204      	movcc	r2, #4
 800c99e:	9201      	str	r2, [sp, #4]
 800c9a0:	9a02      	ldr	r2, [sp, #8]
 800c9a2:	9303      	str	r3, [sp, #12]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d80c      	bhi.n	800c9c2 <__multiply+0x9e>
 800c9a8:	2e00      	cmp	r6, #0
 800c9aa:	dd03      	ble.n	800c9b4 <__multiply+0x90>
 800c9ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d05a      	beq.n	800ca6a <__multiply+0x146>
 800c9b4:	6106      	str	r6, [r0, #16]
 800c9b6:	b005      	add	sp, #20
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9bc:	f843 2b04 	str.w	r2, [r3], #4
 800c9c0:	e7d8      	b.n	800c974 <__multiply+0x50>
 800c9c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9c6:	f1ba 0f00 	cmp.w	sl, #0
 800c9ca:	d024      	beq.n	800ca16 <__multiply+0xf2>
 800c9cc:	f104 0e14 	add.w	lr, r4, #20
 800c9d0:	46a9      	mov	r9, r5
 800c9d2:	f04f 0c00 	mov.w	ip, #0
 800c9d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c9da:	f8d9 1000 	ldr.w	r1, [r9]
 800c9de:	fa1f fb82 	uxth.w	fp, r2
 800c9e2:	b289      	uxth	r1, r1
 800c9e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c9e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c9ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c9f0:	4461      	add	r1, ip
 800c9f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c9fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9fe:	b289      	uxth	r1, r1
 800ca00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca04:	4577      	cmp	r7, lr
 800ca06:	f849 1b04 	str.w	r1, [r9], #4
 800ca0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca0e:	d8e2      	bhi.n	800c9d6 <__multiply+0xb2>
 800ca10:	9a01      	ldr	r2, [sp, #4]
 800ca12:	f845 c002 	str.w	ip, [r5, r2]
 800ca16:	9a03      	ldr	r2, [sp, #12]
 800ca18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	f1b9 0f00 	cmp.w	r9, #0
 800ca22:	d020      	beq.n	800ca66 <__multiply+0x142>
 800ca24:	6829      	ldr	r1, [r5, #0]
 800ca26:	f104 0c14 	add.w	ip, r4, #20
 800ca2a:	46ae      	mov	lr, r5
 800ca2c:	f04f 0a00 	mov.w	sl, #0
 800ca30:	f8bc b000 	ldrh.w	fp, [ip]
 800ca34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca38:	fb09 220b 	mla	r2, r9, fp, r2
 800ca3c:	4492      	add	sl, r2
 800ca3e:	b289      	uxth	r1, r1
 800ca40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ca44:	f84e 1b04 	str.w	r1, [lr], #4
 800ca48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca4c:	f8be 1000 	ldrh.w	r1, [lr]
 800ca50:	0c12      	lsrs	r2, r2, #16
 800ca52:	fb09 1102 	mla	r1, r9, r2, r1
 800ca56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ca5a:	4567      	cmp	r7, ip
 800ca5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca60:	d8e6      	bhi.n	800ca30 <__multiply+0x10c>
 800ca62:	9a01      	ldr	r2, [sp, #4]
 800ca64:	50a9      	str	r1, [r5, r2]
 800ca66:	3504      	adds	r5, #4
 800ca68:	e79a      	b.n	800c9a0 <__multiply+0x7c>
 800ca6a:	3e01      	subs	r6, #1
 800ca6c:	e79c      	b.n	800c9a8 <__multiply+0x84>
 800ca6e:	bf00      	nop
 800ca70:	0800ed3f 	.word	0x0800ed3f
 800ca74:	0800ed50 	.word	0x0800ed50

0800ca78 <__pow5mult>:
 800ca78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca7c:	4615      	mov	r5, r2
 800ca7e:	f012 0203 	ands.w	r2, r2, #3
 800ca82:	4606      	mov	r6, r0
 800ca84:	460f      	mov	r7, r1
 800ca86:	d007      	beq.n	800ca98 <__pow5mult+0x20>
 800ca88:	4c25      	ldr	r4, [pc, #148]	; (800cb20 <__pow5mult+0xa8>)
 800ca8a:	3a01      	subs	r2, #1
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca92:	f7ff feeb 	bl	800c86c <__multadd>
 800ca96:	4607      	mov	r7, r0
 800ca98:	10ad      	asrs	r5, r5, #2
 800ca9a:	d03d      	beq.n	800cb18 <__pow5mult+0xa0>
 800ca9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca9e:	b97c      	cbnz	r4, 800cac0 <__pow5mult+0x48>
 800caa0:	2010      	movs	r0, #16
 800caa2:	f7ff fa57 	bl	800bf54 <malloc>
 800caa6:	4602      	mov	r2, r0
 800caa8:	6270      	str	r0, [r6, #36]	; 0x24
 800caaa:	b928      	cbnz	r0, 800cab8 <__pow5mult+0x40>
 800caac:	4b1d      	ldr	r3, [pc, #116]	; (800cb24 <__pow5mult+0xac>)
 800caae:	481e      	ldr	r0, [pc, #120]	; (800cb28 <__pow5mult+0xb0>)
 800cab0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cab4:	f000 f990 	bl	800cdd8 <__assert_func>
 800cab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cabc:	6004      	str	r4, [r0, #0]
 800cabe:	60c4      	str	r4, [r0, #12]
 800cac0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cac8:	b94c      	cbnz	r4, 800cade <__pow5mult+0x66>
 800caca:	f240 2171 	movw	r1, #625	; 0x271
 800cace:	4630      	mov	r0, r6
 800cad0:	f7ff ff12 	bl	800c8f8 <__i2b>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cada:	4604      	mov	r4, r0
 800cadc:	6003      	str	r3, [r0, #0]
 800cade:	f04f 0900 	mov.w	r9, #0
 800cae2:	07eb      	lsls	r3, r5, #31
 800cae4:	d50a      	bpl.n	800cafc <__pow5mult+0x84>
 800cae6:	4639      	mov	r1, r7
 800cae8:	4622      	mov	r2, r4
 800caea:	4630      	mov	r0, r6
 800caec:	f7ff ff1a 	bl	800c924 <__multiply>
 800caf0:	4639      	mov	r1, r7
 800caf2:	4680      	mov	r8, r0
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7ff fe97 	bl	800c828 <_Bfree>
 800cafa:	4647      	mov	r7, r8
 800cafc:	106d      	asrs	r5, r5, #1
 800cafe:	d00b      	beq.n	800cb18 <__pow5mult+0xa0>
 800cb00:	6820      	ldr	r0, [r4, #0]
 800cb02:	b938      	cbnz	r0, 800cb14 <__pow5mult+0x9c>
 800cb04:	4622      	mov	r2, r4
 800cb06:	4621      	mov	r1, r4
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7ff ff0b 	bl	800c924 <__multiply>
 800cb0e:	6020      	str	r0, [r4, #0]
 800cb10:	f8c0 9000 	str.w	r9, [r0]
 800cb14:	4604      	mov	r4, r0
 800cb16:	e7e4      	b.n	800cae2 <__pow5mult+0x6a>
 800cb18:	4638      	mov	r0, r7
 800cb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb1e:	bf00      	nop
 800cb20:	0800eb20 	.word	0x0800eb20
 800cb24:	0800ecce 	.word	0x0800ecce
 800cb28:	0800ed50 	.word	0x0800ed50

0800cb2c <__lshift>:
 800cb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	460c      	mov	r4, r1
 800cb32:	6849      	ldr	r1, [r1, #4]
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb3a:	68a3      	ldr	r3, [r4, #8]
 800cb3c:	4607      	mov	r7, r0
 800cb3e:	4691      	mov	r9, r2
 800cb40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb44:	f108 0601 	add.w	r6, r8, #1
 800cb48:	42b3      	cmp	r3, r6
 800cb4a:	db0b      	blt.n	800cb64 <__lshift+0x38>
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	f7ff fe2b 	bl	800c7a8 <_Balloc>
 800cb52:	4605      	mov	r5, r0
 800cb54:	b948      	cbnz	r0, 800cb6a <__lshift+0x3e>
 800cb56:	4602      	mov	r2, r0
 800cb58:	4b2a      	ldr	r3, [pc, #168]	; (800cc04 <__lshift+0xd8>)
 800cb5a:	482b      	ldr	r0, [pc, #172]	; (800cc08 <__lshift+0xdc>)
 800cb5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb60:	f000 f93a 	bl	800cdd8 <__assert_func>
 800cb64:	3101      	adds	r1, #1
 800cb66:	005b      	lsls	r3, r3, #1
 800cb68:	e7ee      	b.n	800cb48 <__lshift+0x1c>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f100 0114 	add.w	r1, r0, #20
 800cb70:	f100 0210 	add.w	r2, r0, #16
 800cb74:	4618      	mov	r0, r3
 800cb76:	4553      	cmp	r3, sl
 800cb78:	db37      	blt.n	800cbea <__lshift+0xbe>
 800cb7a:	6920      	ldr	r0, [r4, #16]
 800cb7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb80:	f104 0314 	add.w	r3, r4, #20
 800cb84:	f019 091f 	ands.w	r9, r9, #31
 800cb88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb90:	d02f      	beq.n	800cbf2 <__lshift+0xc6>
 800cb92:	f1c9 0e20 	rsb	lr, r9, #32
 800cb96:	468a      	mov	sl, r1
 800cb98:	f04f 0c00 	mov.w	ip, #0
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	fa02 f209 	lsl.w	r2, r2, r9
 800cba2:	ea42 020c 	orr.w	r2, r2, ip
 800cba6:	f84a 2b04 	str.w	r2, [sl], #4
 800cbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbae:	4298      	cmp	r0, r3
 800cbb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cbb4:	d8f2      	bhi.n	800cb9c <__lshift+0x70>
 800cbb6:	1b03      	subs	r3, r0, r4
 800cbb8:	3b15      	subs	r3, #21
 800cbba:	f023 0303 	bic.w	r3, r3, #3
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	f104 0215 	add.w	r2, r4, #21
 800cbc4:	4290      	cmp	r0, r2
 800cbc6:	bf38      	it	cc
 800cbc8:	2304      	movcc	r3, #4
 800cbca:	f841 c003 	str.w	ip, [r1, r3]
 800cbce:	f1bc 0f00 	cmp.w	ip, #0
 800cbd2:	d001      	beq.n	800cbd8 <__lshift+0xac>
 800cbd4:	f108 0602 	add.w	r6, r8, #2
 800cbd8:	3e01      	subs	r6, #1
 800cbda:	4638      	mov	r0, r7
 800cbdc:	612e      	str	r6, [r5, #16]
 800cbde:	4621      	mov	r1, r4
 800cbe0:	f7ff fe22 	bl	800c828 <_Bfree>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbea:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbee:	3301      	adds	r3, #1
 800cbf0:	e7c1      	b.n	800cb76 <__lshift+0x4a>
 800cbf2:	3904      	subs	r1, #4
 800cbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbfc:	4298      	cmp	r0, r3
 800cbfe:	d8f9      	bhi.n	800cbf4 <__lshift+0xc8>
 800cc00:	e7ea      	b.n	800cbd8 <__lshift+0xac>
 800cc02:	bf00      	nop
 800cc04:	0800ed3f 	.word	0x0800ed3f
 800cc08:	0800ed50 	.word	0x0800ed50

0800cc0c <__mdiff>:
 800cc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	460c      	mov	r4, r1
 800cc12:	4606      	mov	r6, r0
 800cc14:	4611      	mov	r1, r2
 800cc16:	4620      	mov	r0, r4
 800cc18:	4690      	mov	r8, r2
 800cc1a:	f000 ff3e 	bl	800da9a <__mcmp>
 800cc1e:	1e05      	subs	r5, r0, #0
 800cc20:	d110      	bne.n	800cc44 <__mdiff+0x38>
 800cc22:	4629      	mov	r1, r5
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7ff fdbf 	bl	800c7a8 <_Balloc>
 800cc2a:	b930      	cbnz	r0, 800cc3a <__mdiff+0x2e>
 800cc2c:	4b3a      	ldr	r3, [pc, #232]	; (800cd18 <__mdiff+0x10c>)
 800cc2e:	4602      	mov	r2, r0
 800cc30:	f240 2132 	movw	r1, #562	; 0x232
 800cc34:	4839      	ldr	r0, [pc, #228]	; (800cd1c <__mdiff+0x110>)
 800cc36:	f000 f8cf 	bl	800cdd8 <__assert_func>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc44:	bfa4      	itt	ge
 800cc46:	4643      	movge	r3, r8
 800cc48:	46a0      	movge	r8, r4
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc50:	bfa6      	itte	ge
 800cc52:	461c      	movge	r4, r3
 800cc54:	2500      	movge	r5, #0
 800cc56:	2501      	movlt	r5, #1
 800cc58:	f7ff fda6 	bl	800c7a8 <_Balloc>
 800cc5c:	b920      	cbnz	r0, 800cc68 <__mdiff+0x5c>
 800cc5e:	4b2e      	ldr	r3, [pc, #184]	; (800cd18 <__mdiff+0x10c>)
 800cc60:	4602      	mov	r2, r0
 800cc62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc66:	e7e5      	b.n	800cc34 <__mdiff+0x28>
 800cc68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc6c:	6926      	ldr	r6, [r4, #16]
 800cc6e:	60c5      	str	r5, [r0, #12]
 800cc70:	f104 0914 	add.w	r9, r4, #20
 800cc74:	f108 0514 	add.w	r5, r8, #20
 800cc78:	f100 0e14 	add.w	lr, r0, #20
 800cc7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc84:	f108 0210 	add.w	r2, r8, #16
 800cc88:	46f2      	mov	sl, lr
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc94:	fa1f f883 	uxth.w	r8, r3
 800cc98:	fa11 f18b 	uxtah	r1, r1, fp
 800cc9c:	0c1b      	lsrs	r3, r3, #16
 800cc9e:	eba1 0808 	sub.w	r8, r1, r8
 800cca2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cca6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ccaa:	fa1f f888 	uxth.w	r8, r8
 800ccae:	1419      	asrs	r1, r3, #16
 800ccb0:	454e      	cmp	r6, r9
 800ccb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ccb6:	f84a 3b04 	str.w	r3, [sl], #4
 800ccba:	d8e7      	bhi.n	800cc8c <__mdiff+0x80>
 800ccbc:	1b33      	subs	r3, r6, r4
 800ccbe:	3b15      	subs	r3, #21
 800ccc0:	f023 0303 	bic.w	r3, r3, #3
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	3415      	adds	r4, #21
 800ccc8:	42a6      	cmp	r6, r4
 800ccca:	bf38      	it	cc
 800cccc:	2304      	movcc	r3, #4
 800ccce:	441d      	add	r5, r3
 800ccd0:	4473      	add	r3, lr
 800ccd2:	469e      	mov	lr, r3
 800ccd4:	462e      	mov	r6, r5
 800ccd6:	4566      	cmp	r6, ip
 800ccd8:	d30e      	bcc.n	800ccf8 <__mdiff+0xec>
 800ccda:	f10c 0203 	add.w	r2, ip, #3
 800ccde:	1b52      	subs	r2, r2, r5
 800cce0:	f022 0203 	bic.w	r2, r2, #3
 800cce4:	3d03      	subs	r5, #3
 800cce6:	45ac      	cmp	ip, r5
 800cce8:	bf38      	it	cc
 800ccea:	2200      	movcc	r2, #0
 800ccec:	441a      	add	r2, r3
 800ccee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ccf2:	b17b      	cbz	r3, 800cd14 <__mdiff+0x108>
 800ccf4:	6107      	str	r7, [r0, #16]
 800ccf6:	e7a3      	b.n	800cc40 <__mdiff+0x34>
 800ccf8:	f856 8b04 	ldr.w	r8, [r6], #4
 800ccfc:	fa11 f288 	uxtah	r2, r1, r8
 800cd00:	1414      	asrs	r4, r2, #16
 800cd02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd06:	b292      	uxth	r2, r2
 800cd08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd0c:	f84e 2b04 	str.w	r2, [lr], #4
 800cd10:	1421      	asrs	r1, r4, #16
 800cd12:	e7e0      	b.n	800ccd6 <__mdiff+0xca>
 800cd14:	3f01      	subs	r7, #1
 800cd16:	e7ea      	b.n	800ccee <__mdiff+0xe2>
 800cd18:	0800ed3f 	.word	0x0800ed3f
 800cd1c:	0800ed50 	.word	0x0800ed50

0800cd20 <__d2b>:
 800cd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd24:	4689      	mov	r9, r1
 800cd26:	2101      	movs	r1, #1
 800cd28:	ec57 6b10 	vmov	r6, r7, d0
 800cd2c:	4690      	mov	r8, r2
 800cd2e:	f7ff fd3b 	bl	800c7a8 <_Balloc>
 800cd32:	4604      	mov	r4, r0
 800cd34:	b930      	cbnz	r0, 800cd44 <__d2b+0x24>
 800cd36:	4602      	mov	r2, r0
 800cd38:	4b25      	ldr	r3, [pc, #148]	; (800cdd0 <__d2b+0xb0>)
 800cd3a:	4826      	ldr	r0, [pc, #152]	; (800cdd4 <__d2b+0xb4>)
 800cd3c:	f240 310a 	movw	r1, #778	; 0x30a
 800cd40:	f000 f84a 	bl	800cdd8 <__assert_func>
 800cd44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd4c:	bb35      	cbnz	r5, 800cd9c <__d2b+0x7c>
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	d028      	beq.n	800cda6 <__d2b+0x86>
 800cd54:	4668      	mov	r0, sp
 800cd56:	9600      	str	r6, [sp, #0]
 800cd58:	f000 fe70 	bl	800da3c <__lo0bits>
 800cd5c:	9900      	ldr	r1, [sp, #0]
 800cd5e:	b300      	cbz	r0, 800cda2 <__d2b+0x82>
 800cd60:	9a01      	ldr	r2, [sp, #4]
 800cd62:	f1c0 0320 	rsb	r3, r0, #32
 800cd66:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6a:	430b      	orrs	r3, r1
 800cd6c:	40c2      	lsrs	r2, r0
 800cd6e:	6163      	str	r3, [r4, #20]
 800cd70:	9201      	str	r2, [sp, #4]
 800cd72:	9b01      	ldr	r3, [sp, #4]
 800cd74:	61a3      	str	r3, [r4, #24]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bf14      	ite	ne
 800cd7a:	2202      	movne	r2, #2
 800cd7c:	2201      	moveq	r2, #1
 800cd7e:	6122      	str	r2, [r4, #16]
 800cd80:	b1d5      	cbz	r5, 800cdb8 <__d2b+0x98>
 800cd82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd86:	4405      	add	r5, r0
 800cd88:	f8c9 5000 	str.w	r5, [r9]
 800cd8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd90:	f8c8 0000 	str.w	r0, [r8]
 800cd94:	4620      	mov	r0, r4
 800cd96:	b003      	add	sp, #12
 800cd98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cda0:	e7d5      	b.n	800cd4e <__d2b+0x2e>
 800cda2:	6161      	str	r1, [r4, #20]
 800cda4:	e7e5      	b.n	800cd72 <__d2b+0x52>
 800cda6:	a801      	add	r0, sp, #4
 800cda8:	f000 fe48 	bl	800da3c <__lo0bits>
 800cdac:	9b01      	ldr	r3, [sp, #4]
 800cdae:	6163      	str	r3, [r4, #20]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	6122      	str	r2, [r4, #16]
 800cdb4:	3020      	adds	r0, #32
 800cdb6:	e7e3      	b.n	800cd80 <__d2b+0x60>
 800cdb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdc0:	f8c9 0000 	str.w	r0, [r9]
 800cdc4:	6918      	ldr	r0, [r3, #16]
 800cdc6:	f000 fe19 	bl	800d9fc <__hi0bits>
 800cdca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdce:	e7df      	b.n	800cd90 <__d2b+0x70>
 800cdd0:	0800ed3f 	.word	0x0800ed3f
 800cdd4:	0800ed50 	.word	0x0800ed50

0800cdd8 <__assert_func>:
 800cdd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdda:	4614      	mov	r4, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b09      	ldr	r3, [pc, #36]	; (800ce04 <__assert_func+0x2c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4605      	mov	r5, r0
 800cde4:	68d8      	ldr	r0, [r3, #12]
 800cde6:	b14c      	cbz	r4, 800cdfc <__assert_func+0x24>
 800cde8:	4b07      	ldr	r3, [pc, #28]	; (800ce08 <__assert_func+0x30>)
 800cdea:	9100      	str	r1, [sp, #0]
 800cdec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdf0:	4906      	ldr	r1, [pc, #24]	; (800ce0c <__assert_func+0x34>)
 800cdf2:	462b      	mov	r3, r5
 800cdf4:	f000 f80e 	bl	800ce14 <fiprintf>
 800cdf8:	f000 fec2 	bl	800db80 <abort>
 800cdfc:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <__assert_func+0x38>)
 800cdfe:	461c      	mov	r4, r3
 800ce00:	e7f3      	b.n	800cdea <__assert_func+0x12>
 800ce02:	bf00      	nop
 800ce04:	20000380 	.word	0x20000380
 800ce08:	0800edab 	.word	0x0800edab
 800ce0c:	0800edb8 	.word	0x0800edb8
 800ce10:	0800ede6 	.word	0x0800ede6

0800ce14 <fiprintf>:
 800ce14:	b40e      	push	{r1, r2, r3}
 800ce16:	b503      	push	{r0, r1, lr}
 800ce18:	4601      	mov	r1, r0
 800ce1a:	ab03      	add	r3, sp, #12
 800ce1c:	4805      	ldr	r0, [pc, #20]	; (800ce34 <fiprintf+0x20>)
 800ce1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce22:	6800      	ldr	r0, [r0, #0]
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	f000 f807 	bl	800ce38 <_vfiprintf_r>
 800ce2a:	b002      	add	sp, #8
 800ce2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce30:	b003      	add	sp, #12
 800ce32:	4770      	bx	lr
 800ce34:	20000380 	.word	0x20000380

0800ce38 <_vfiprintf_r>:
 800ce38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	b09d      	sub	sp, #116	; 0x74
 800ce40:	4614      	mov	r4, r2
 800ce42:	4698      	mov	r8, r3
 800ce44:	4606      	mov	r6, r0
 800ce46:	b118      	cbz	r0, 800ce50 <_vfiprintf_r+0x18>
 800ce48:	6983      	ldr	r3, [r0, #24]
 800ce4a:	b90b      	cbnz	r3, 800ce50 <_vfiprintf_r+0x18>
 800ce4c:	f000 fae8 	bl	800d420 <__sinit>
 800ce50:	4b89      	ldr	r3, [pc, #548]	; (800d078 <_vfiprintf_r+0x240>)
 800ce52:	429d      	cmp	r5, r3
 800ce54:	d11b      	bne.n	800ce8e <_vfiprintf_r+0x56>
 800ce56:	6875      	ldr	r5, [r6, #4]
 800ce58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce5a:	07d9      	lsls	r1, r3, #31
 800ce5c:	d405      	bmi.n	800ce6a <_vfiprintf_r+0x32>
 800ce5e:	89ab      	ldrh	r3, [r5, #12]
 800ce60:	059a      	lsls	r2, r3, #22
 800ce62:	d402      	bmi.n	800ce6a <_vfiprintf_r+0x32>
 800ce64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce66:	f7f6 f80d 	bl	8002e84 <__retarget_lock_acquire_recursive>
 800ce6a:	89ab      	ldrh	r3, [r5, #12]
 800ce6c:	071b      	lsls	r3, r3, #28
 800ce6e:	d501      	bpl.n	800ce74 <_vfiprintf_r+0x3c>
 800ce70:	692b      	ldr	r3, [r5, #16]
 800ce72:	b9eb      	cbnz	r3, 800ceb0 <_vfiprintf_r+0x78>
 800ce74:	4629      	mov	r1, r5
 800ce76:	4630      	mov	r0, r6
 800ce78:	f000 f960 	bl	800d13c <__swsetup_r>
 800ce7c:	b1c0      	cbz	r0, 800ceb0 <_vfiprintf_r+0x78>
 800ce7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce80:	07dc      	lsls	r4, r3, #31
 800ce82:	d50e      	bpl.n	800cea2 <_vfiprintf_r+0x6a>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce88:	b01d      	add	sp, #116	; 0x74
 800ce8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8e:	4b7b      	ldr	r3, [pc, #492]	; (800d07c <_vfiprintf_r+0x244>)
 800ce90:	429d      	cmp	r5, r3
 800ce92:	d101      	bne.n	800ce98 <_vfiprintf_r+0x60>
 800ce94:	68b5      	ldr	r5, [r6, #8]
 800ce96:	e7df      	b.n	800ce58 <_vfiprintf_r+0x20>
 800ce98:	4b79      	ldr	r3, [pc, #484]	; (800d080 <_vfiprintf_r+0x248>)
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	bf08      	it	eq
 800ce9e:	68f5      	ldreq	r5, [r6, #12]
 800cea0:	e7da      	b.n	800ce58 <_vfiprintf_r+0x20>
 800cea2:	89ab      	ldrh	r3, [r5, #12]
 800cea4:	0598      	lsls	r0, r3, #22
 800cea6:	d4ed      	bmi.n	800ce84 <_vfiprintf_r+0x4c>
 800cea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceaa:	f7f5 fff1 	bl	8002e90 <__retarget_lock_release_recursive>
 800ceae:	e7e9      	b.n	800ce84 <_vfiprintf_r+0x4c>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb4:	2320      	movs	r3, #32
 800ceb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceba:	f8cd 800c 	str.w	r8, [sp, #12]
 800cebe:	2330      	movs	r3, #48	; 0x30
 800cec0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d084 <_vfiprintf_r+0x24c>
 800cec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cec8:	f04f 0901 	mov.w	r9, #1
 800cecc:	4623      	mov	r3, r4
 800cece:	469a      	mov	sl, r3
 800ced0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ced4:	b10a      	cbz	r2, 800ceda <_vfiprintf_r+0xa2>
 800ced6:	2a25      	cmp	r2, #37	; 0x25
 800ced8:	d1f9      	bne.n	800cece <_vfiprintf_r+0x96>
 800ceda:	ebba 0b04 	subs.w	fp, sl, r4
 800cede:	d00b      	beq.n	800cef8 <_vfiprintf_r+0xc0>
 800cee0:	465b      	mov	r3, fp
 800cee2:	4622      	mov	r2, r4
 800cee4:	4629      	mov	r1, r5
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 fe2b 	bl	800db42 <__sfputs_r>
 800ceec:	3001      	adds	r0, #1
 800ceee:	f000 80aa 	beq.w	800d046 <_vfiprintf_r+0x20e>
 800cef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cef4:	445a      	add	r2, fp
 800cef6:	9209      	str	r2, [sp, #36]	; 0x24
 800cef8:	f89a 3000 	ldrb.w	r3, [sl]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 80a2 	beq.w	800d046 <_vfiprintf_r+0x20e>
 800cf02:	2300      	movs	r3, #0
 800cf04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf0c:	f10a 0a01 	add.w	sl, sl, #1
 800cf10:	9304      	str	r3, [sp, #16]
 800cf12:	9307      	str	r3, [sp, #28]
 800cf14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf18:	931a      	str	r3, [sp, #104]	; 0x68
 800cf1a:	4654      	mov	r4, sl
 800cf1c:	2205      	movs	r2, #5
 800cf1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf22:	4858      	ldr	r0, [pc, #352]	; (800d084 <_vfiprintf_r+0x24c>)
 800cf24:	f7f3 f93c 	bl	80001a0 <memchr>
 800cf28:	9a04      	ldr	r2, [sp, #16]
 800cf2a:	b9d8      	cbnz	r0, 800cf64 <_vfiprintf_r+0x12c>
 800cf2c:	06d1      	lsls	r1, r2, #27
 800cf2e:	bf44      	itt	mi
 800cf30:	2320      	movmi	r3, #32
 800cf32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf36:	0713      	lsls	r3, r2, #28
 800cf38:	bf44      	itt	mi
 800cf3a:	232b      	movmi	r3, #43	; 0x2b
 800cf3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf40:	f89a 3000 	ldrb.w	r3, [sl]
 800cf44:	2b2a      	cmp	r3, #42	; 0x2a
 800cf46:	d015      	beq.n	800cf74 <_vfiprintf_r+0x13c>
 800cf48:	9a07      	ldr	r2, [sp, #28]
 800cf4a:	4654      	mov	r4, sl
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f04f 0c0a 	mov.w	ip, #10
 800cf52:	4621      	mov	r1, r4
 800cf54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf58:	3b30      	subs	r3, #48	; 0x30
 800cf5a:	2b09      	cmp	r3, #9
 800cf5c:	d94e      	bls.n	800cffc <_vfiprintf_r+0x1c4>
 800cf5e:	b1b0      	cbz	r0, 800cf8e <_vfiprintf_r+0x156>
 800cf60:	9207      	str	r2, [sp, #28]
 800cf62:	e014      	b.n	800cf8e <_vfiprintf_r+0x156>
 800cf64:	eba0 0308 	sub.w	r3, r0, r8
 800cf68:	fa09 f303 	lsl.w	r3, r9, r3
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	9304      	str	r3, [sp, #16]
 800cf70:	46a2      	mov	sl, r4
 800cf72:	e7d2      	b.n	800cf1a <_vfiprintf_r+0xe2>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	1d19      	adds	r1, r3, #4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	9103      	str	r1, [sp, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	bfbb      	ittet	lt
 800cf80:	425b      	neglt	r3, r3
 800cf82:	f042 0202 	orrlt.w	r2, r2, #2
 800cf86:	9307      	strge	r3, [sp, #28]
 800cf88:	9307      	strlt	r3, [sp, #28]
 800cf8a:	bfb8      	it	lt
 800cf8c:	9204      	strlt	r2, [sp, #16]
 800cf8e:	7823      	ldrb	r3, [r4, #0]
 800cf90:	2b2e      	cmp	r3, #46	; 0x2e
 800cf92:	d10c      	bne.n	800cfae <_vfiprintf_r+0x176>
 800cf94:	7863      	ldrb	r3, [r4, #1]
 800cf96:	2b2a      	cmp	r3, #42	; 0x2a
 800cf98:	d135      	bne.n	800d006 <_vfiprintf_r+0x1ce>
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	1d1a      	adds	r2, r3, #4
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	9203      	str	r2, [sp, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	bfb8      	it	lt
 800cfa6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfaa:	3402      	adds	r4, #2
 800cfac:	9305      	str	r3, [sp, #20]
 800cfae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d094 <_vfiprintf_r+0x25c>
 800cfb2:	7821      	ldrb	r1, [r4, #0]
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	4650      	mov	r0, sl
 800cfb8:	f7f3 f8f2 	bl	80001a0 <memchr>
 800cfbc:	b140      	cbz	r0, 800cfd0 <_vfiprintf_r+0x198>
 800cfbe:	2340      	movs	r3, #64	; 0x40
 800cfc0:	eba0 000a 	sub.w	r0, r0, sl
 800cfc4:	fa03 f000 	lsl.w	r0, r3, r0
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	4303      	orrs	r3, r0
 800cfcc:	3401      	adds	r4, #1
 800cfce:	9304      	str	r3, [sp, #16]
 800cfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd4:	482c      	ldr	r0, [pc, #176]	; (800d088 <_vfiprintf_r+0x250>)
 800cfd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfda:	2206      	movs	r2, #6
 800cfdc:	f7f3 f8e0 	bl	80001a0 <memchr>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d03f      	beq.n	800d064 <_vfiprintf_r+0x22c>
 800cfe4:	4b29      	ldr	r3, [pc, #164]	; (800d08c <_vfiprintf_r+0x254>)
 800cfe6:	bb1b      	cbnz	r3, 800d030 <_vfiprintf_r+0x1f8>
 800cfe8:	9b03      	ldr	r3, [sp, #12]
 800cfea:	3307      	adds	r3, #7
 800cfec:	f023 0307 	bic.w	r3, r3, #7
 800cff0:	3308      	adds	r3, #8
 800cff2:	9303      	str	r3, [sp, #12]
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	443b      	add	r3, r7
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	e767      	b.n	800cecc <_vfiprintf_r+0x94>
 800cffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d000:	460c      	mov	r4, r1
 800d002:	2001      	movs	r0, #1
 800d004:	e7a5      	b.n	800cf52 <_vfiprintf_r+0x11a>
 800d006:	2300      	movs	r3, #0
 800d008:	3401      	adds	r4, #1
 800d00a:	9305      	str	r3, [sp, #20]
 800d00c:	4619      	mov	r1, r3
 800d00e:	f04f 0c0a 	mov.w	ip, #10
 800d012:	4620      	mov	r0, r4
 800d014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d018:	3a30      	subs	r2, #48	; 0x30
 800d01a:	2a09      	cmp	r2, #9
 800d01c:	d903      	bls.n	800d026 <_vfiprintf_r+0x1ee>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0c5      	beq.n	800cfae <_vfiprintf_r+0x176>
 800d022:	9105      	str	r1, [sp, #20]
 800d024:	e7c3      	b.n	800cfae <_vfiprintf_r+0x176>
 800d026:	fb0c 2101 	mla	r1, ip, r1, r2
 800d02a:	4604      	mov	r4, r0
 800d02c:	2301      	movs	r3, #1
 800d02e:	e7f0      	b.n	800d012 <_vfiprintf_r+0x1da>
 800d030:	ab03      	add	r3, sp, #12
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	462a      	mov	r2, r5
 800d036:	4b16      	ldr	r3, [pc, #88]	; (800d090 <_vfiprintf_r+0x258>)
 800d038:	a904      	add	r1, sp, #16
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7ff f838 	bl	800c0b0 <_printf_float>
 800d040:	4607      	mov	r7, r0
 800d042:	1c78      	adds	r0, r7, #1
 800d044:	d1d6      	bne.n	800cff4 <_vfiprintf_r+0x1bc>
 800d046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d048:	07d9      	lsls	r1, r3, #31
 800d04a:	d405      	bmi.n	800d058 <_vfiprintf_r+0x220>
 800d04c:	89ab      	ldrh	r3, [r5, #12]
 800d04e:	059a      	lsls	r2, r3, #22
 800d050:	d402      	bmi.n	800d058 <_vfiprintf_r+0x220>
 800d052:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d054:	f7f5 ff1c 	bl	8002e90 <__retarget_lock_release_recursive>
 800d058:	89ab      	ldrh	r3, [r5, #12]
 800d05a:	065b      	lsls	r3, r3, #25
 800d05c:	f53f af12 	bmi.w	800ce84 <_vfiprintf_r+0x4c>
 800d060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d062:	e711      	b.n	800ce88 <_vfiprintf_r+0x50>
 800d064:	ab03      	add	r3, sp, #12
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	462a      	mov	r2, r5
 800d06a:	4b09      	ldr	r3, [pc, #36]	; (800d090 <_vfiprintf_r+0x258>)
 800d06c:	a904      	add	r1, sp, #16
 800d06e:	4630      	mov	r0, r6
 800d070:	f7ff fa54 	bl	800c51c <_printf_i>
 800d074:	e7e4      	b.n	800d040 <_vfiprintf_r+0x208>
 800d076:	bf00      	nop
 800d078:	0800eb4c 	.word	0x0800eb4c
 800d07c:	0800eb6c 	.word	0x0800eb6c
 800d080:	0800eb2c 	.word	0x0800eb2c
 800d084:	0800edf1 	.word	0x0800edf1
 800d088:	0800edfb 	.word	0x0800edfb
 800d08c:	0800c0b1 	.word	0x0800c0b1
 800d090:	0800db43 	.word	0x0800db43
 800d094:	0800edf7 	.word	0x0800edf7

0800d098 <__swbuf_r>:
 800d098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09a:	460e      	mov	r6, r1
 800d09c:	4614      	mov	r4, r2
 800d09e:	4605      	mov	r5, r0
 800d0a0:	b118      	cbz	r0, 800d0aa <__swbuf_r+0x12>
 800d0a2:	6983      	ldr	r3, [r0, #24]
 800d0a4:	b90b      	cbnz	r3, 800d0aa <__swbuf_r+0x12>
 800d0a6:	f000 f9bb 	bl	800d420 <__sinit>
 800d0aa:	4b21      	ldr	r3, [pc, #132]	; (800d130 <__swbuf_r+0x98>)
 800d0ac:	429c      	cmp	r4, r3
 800d0ae:	d12b      	bne.n	800d108 <__swbuf_r+0x70>
 800d0b0:	686c      	ldr	r4, [r5, #4]
 800d0b2:	69a3      	ldr	r3, [r4, #24]
 800d0b4:	60a3      	str	r3, [r4, #8]
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	071a      	lsls	r2, r3, #28
 800d0ba:	d52f      	bpl.n	800d11c <__swbuf_r+0x84>
 800d0bc:	6923      	ldr	r3, [r4, #16]
 800d0be:	b36b      	cbz	r3, 800d11c <__swbuf_r+0x84>
 800d0c0:	6923      	ldr	r3, [r4, #16]
 800d0c2:	6820      	ldr	r0, [r4, #0]
 800d0c4:	1ac0      	subs	r0, r0, r3
 800d0c6:	6963      	ldr	r3, [r4, #20]
 800d0c8:	b2f6      	uxtb	r6, r6
 800d0ca:	4283      	cmp	r3, r0
 800d0cc:	4637      	mov	r7, r6
 800d0ce:	dc04      	bgt.n	800d0da <__swbuf_r+0x42>
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f000 f926 	bl	800d324 <_fflush_r>
 800d0d8:	bb30      	cbnz	r0, 800d128 <__swbuf_r+0x90>
 800d0da:	68a3      	ldr	r3, [r4, #8]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	60a3      	str	r3, [r4, #8]
 800d0e0:	6823      	ldr	r3, [r4, #0]
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	6022      	str	r2, [r4, #0]
 800d0e6:	701e      	strb	r6, [r3, #0]
 800d0e8:	6963      	ldr	r3, [r4, #20]
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	4283      	cmp	r3, r0
 800d0ee:	d004      	beq.n	800d0fa <__swbuf_r+0x62>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	07db      	lsls	r3, r3, #31
 800d0f4:	d506      	bpl.n	800d104 <__swbuf_r+0x6c>
 800d0f6:	2e0a      	cmp	r6, #10
 800d0f8:	d104      	bne.n	800d104 <__swbuf_r+0x6c>
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	f000 f911 	bl	800d324 <_fflush_r>
 800d102:	b988      	cbnz	r0, 800d128 <__swbuf_r+0x90>
 800d104:	4638      	mov	r0, r7
 800d106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <__swbuf_r+0x9c>)
 800d10a:	429c      	cmp	r4, r3
 800d10c:	d101      	bne.n	800d112 <__swbuf_r+0x7a>
 800d10e:	68ac      	ldr	r4, [r5, #8]
 800d110:	e7cf      	b.n	800d0b2 <__swbuf_r+0x1a>
 800d112:	4b09      	ldr	r3, [pc, #36]	; (800d138 <__swbuf_r+0xa0>)
 800d114:	429c      	cmp	r4, r3
 800d116:	bf08      	it	eq
 800d118:	68ec      	ldreq	r4, [r5, #12]
 800d11a:	e7ca      	b.n	800d0b2 <__swbuf_r+0x1a>
 800d11c:	4621      	mov	r1, r4
 800d11e:	4628      	mov	r0, r5
 800d120:	f000 f80c 	bl	800d13c <__swsetup_r>
 800d124:	2800      	cmp	r0, #0
 800d126:	d0cb      	beq.n	800d0c0 <__swbuf_r+0x28>
 800d128:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d12c:	e7ea      	b.n	800d104 <__swbuf_r+0x6c>
 800d12e:	bf00      	nop
 800d130:	0800eb4c 	.word	0x0800eb4c
 800d134:	0800eb6c 	.word	0x0800eb6c
 800d138:	0800eb2c 	.word	0x0800eb2c

0800d13c <__swsetup_r>:
 800d13c:	4b32      	ldr	r3, [pc, #200]	; (800d208 <__swsetup_r+0xcc>)
 800d13e:	b570      	push	{r4, r5, r6, lr}
 800d140:	681d      	ldr	r5, [r3, #0]
 800d142:	4606      	mov	r6, r0
 800d144:	460c      	mov	r4, r1
 800d146:	b125      	cbz	r5, 800d152 <__swsetup_r+0x16>
 800d148:	69ab      	ldr	r3, [r5, #24]
 800d14a:	b913      	cbnz	r3, 800d152 <__swsetup_r+0x16>
 800d14c:	4628      	mov	r0, r5
 800d14e:	f000 f967 	bl	800d420 <__sinit>
 800d152:	4b2e      	ldr	r3, [pc, #184]	; (800d20c <__swsetup_r+0xd0>)
 800d154:	429c      	cmp	r4, r3
 800d156:	d10f      	bne.n	800d178 <__swsetup_r+0x3c>
 800d158:	686c      	ldr	r4, [r5, #4]
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d160:	0719      	lsls	r1, r3, #28
 800d162:	d42c      	bmi.n	800d1be <__swsetup_r+0x82>
 800d164:	06dd      	lsls	r5, r3, #27
 800d166:	d411      	bmi.n	800d18c <__swsetup_r+0x50>
 800d168:	2309      	movs	r3, #9
 800d16a:	6033      	str	r3, [r6, #0]
 800d16c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d170:	81a3      	strh	r3, [r4, #12]
 800d172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d176:	e03e      	b.n	800d1f6 <__swsetup_r+0xba>
 800d178:	4b25      	ldr	r3, [pc, #148]	; (800d210 <__swsetup_r+0xd4>)
 800d17a:	429c      	cmp	r4, r3
 800d17c:	d101      	bne.n	800d182 <__swsetup_r+0x46>
 800d17e:	68ac      	ldr	r4, [r5, #8]
 800d180:	e7eb      	b.n	800d15a <__swsetup_r+0x1e>
 800d182:	4b24      	ldr	r3, [pc, #144]	; (800d214 <__swsetup_r+0xd8>)
 800d184:	429c      	cmp	r4, r3
 800d186:	bf08      	it	eq
 800d188:	68ec      	ldreq	r4, [r5, #12]
 800d18a:	e7e6      	b.n	800d15a <__swsetup_r+0x1e>
 800d18c:	0758      	lsls	r0, r3, #29
 800d18e:	d512      	bpl.n	800d1b6 <__swsetup_r+0x7a>
 800d190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d192:	b141      	cbz	r1, 800d1a6 <__swsetup_r+0x6a>
 800d194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d198:	4299      	cmp	r1, r3
 800d19a:	d002      	beq.n	800d1a2 <__swsetup_r+0x66>
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7fe fee1 	bl	800bf64 <_free_r>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6363      	str	r3, [r4, #52]	; 0x34
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6063      	str	r3, [r4, #4]
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f043 0308 	orr.w	r3, r3, #8
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	b94b      	cbnz	r3, 800d1d6 <__swsetup_r+0x9a>
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1cc:	d003      	beq.n	800d1d6 <__swsetup_r+0x9a>
 800d1ce:	4621      	mov	r1, r4
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f000 f9a3 	bl	800d51c <__smakebuf_r>
 800d1d6:	89a0      	ldrh	r0, [r4, #12]
 800d1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1dc:	f010 0301 	ands.w	r3, r0, #1
 800d1e0:	d00a      	beq.n	800d1f8 <__swsetup_r+0xbc>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60a3      	str	r3, [r4, #8]
 800d1e6:	6963      	ldr	r3, [r4, #20]
 800d1e8:	425b      	negs	r3, r3
 800d1ea:	61a3      	str	r3, [r4, #24]
 800d1ec:	6923      	ldr	r3, [r4, #16]
 800d1ee:	b943      	cbnz	r3, 800d202 <__swsetup_r+0xc6>
 800d1f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1f4:	d1ba      	bne.n	800d16c <__swsetup_r+0x30>
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	0781      	lsls	r1, r0, #30
 800d1fa:	bf58      	it	pl
 800d1fc:	6963      	ldrpl	r3, [r4, #20]
 800d1fe:	60a3      	str	r3, [r4, #8]
 800d200:	e7f4      	b.n	800d1ec <__swsetup_r+0xb0>
 800d202:	2000      	movs	r0, #0
 800d204:	e7f7      	b.n	800d1f6 <__swsetup_r+0xba>
 800d206:	bf00      	nop
 800d208:	20000380 	.word	0x20000380
 800d20c:	0800eb4c 	.word	0x0800eb4c
 800d210:	0800eb6c 	.word	0x0800eb6c
 800d214:	0800eb2c 	.word	0x0800eb2c

0800d218 <__sflush_r>:
 800d218:	898a      	ldrh	r2, [r1, #12]
 800d21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	4605      	mov	r5, r0
 800d220:	0710      	lsls	r0, r2, #28
 800d222:	460c      	mov	r4, r1
 800d224:	d458      	bmi.n	800d2d8 <__sflush_r+0xc0>
 800d226:	684b      	ldr	r3, [r1, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	dc05      	bgt.n	800d238 <__sflush_r+0x20>
 800d22c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dc02      	bgt.n	800d238 <__sflush_r+0x20>
 800d232:	2000      	movs	r0, #0
 800d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d0f9      	beq.n	800d232 <__sflush_r+0x1a>
 800d23e:	2300      	movs	r3, #0
 800d240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d244:	682f      	ldr	r7, [r5, #0]
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	d032      	beq.n	800d2b0 <__sflush_r+0x98>
 800d24a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	075a      	lsls	r2, r3, #29
 800d250:	d505      	bpl.n	800d25e <__sflush_r+0x46>
 800d252:	6863      	ldr	r3, [r4, #4]
 800d254:	1ac0      	subs	r0, r0, r3
 800d256:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d258:	b10b      	cbz	r3, 800d25e <__sflush_r+0x46>
 800d25a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d25c:	1ac0      	subs	r0, r0, r3
 800d25e:	2300      	movs	r3, #0
 800d260:	4602      	mov	r2, r0
 800d262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d264:	6a21      	ldr	r1, [r4, #32]
 800d266:	4628      	mov	r0, r5
 800d268:	47b0      	blx	r6
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	d106      	bne.n	800d27e <__sflush_r+0x66>
 800d270:	6829      	ldr	r1, [r5, #0]
 800d272:	291d      	cmp	r1, #29
 800d274:	d82c      	bhi.n	800d2d0 <__sflush_r+0xb8>
 800d276:	4a2a      	ldr	r2, [pc, #168]	; (800d320 <__sflush_r+0x108>)
 800d278:	40ca      	lsrs	r2, r1
 800d27a:	07d6      	lsls	r6, r2, #31
 800d27c:	d528      	bpl.n	800d2d0 <__sflush_r+0xb8>
 800d27e:	2200      	movs	r2, #0
 800d280:	6062      	str	r2, [r4, #4]
 800d282:	04d9      	lsls	r1, r3, #19
 800d284:	6922      	ldr	r2, [r4, #16]
 800d286:	6022      	str	r2, [r4, #0]
 800d288:	d504      	bpl.n	800d294 <__sflush_r+0x7c>
 800d28a:	1c42      	adds	r2, r0, #1
 800d28c:	d101      	bne.n	800d292 <__sflush_r+0x7a>
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	b903      	cbnz	r3, 800d294 <__sflush_r+0x7c>
 800d292:	6560      	str	r0, [r4, #84]	; 0x54
 800d294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d296:	602f      	str	r7, [r5, #0]
 800d298:	2900      	cmp	r1, #0
 800d29a:	d0ca      	beq.n	800d232 <__sflush_r+0x1a>
 800d29c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	d002      	beq.n	800d2aa <__sflush_r+0x92>
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7fe fe5d 	bl	800bf64 <_free_r>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	6360      	str	r0, [r4, #52]	; 0x34
 800d2ae:	e7c1      	b.n	800d234 <__sflush_r+0x1c>
 800d2b0:	6a21      	ldr	r1, [r4, #32]
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	47b0      	blx	r6
 800d2b8:	1c41      	adds	r1, r0, #1
 800d2ba:	d1c7      	bne.n	800d24c <__sflush_r+0x34>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d0c4      	beq.n	800d24c <__sflush_r+0x34>
 800d2c2:	2b1d      	cmp	r3, #29
 800d2c4:	d001      	beq.n	800d2ca <__sflush_r+0xb2>
 800d2c6:	2b16      	cmp	r3, #22
 800d2c8:	d101      	bne.n	800d2ce <__sflush_r+0xb6>
 800d2ca:	602f      	str	r7, [r5, #0]
 800d2cc:	e7b1      	b.n	800d232 <__sflush_r+0x1a>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	e7ad      	b.n	800d234 <__sflush_r+0x1c>
 800d2d8:	690f      	ldr	r7, [r1, #16]
 800d2da:	2f00      	cmp	r7, #0
 800d2dc:	d0a9      	beq.n	800d232 <__sflush_r+0x1a>
 800d2de:	0793      	lsls	r3, r2, #30
 800d2e0:	680e      	ldr	r6, [r1, #0]
 800d2e2:	bf08      	it	eq
 800d2e4:	694b      	ldreq	r3, [r1, #20]
 800d2e6:	600f      	str	r7, [r1, #0]
 800d2e8:	bf18      	it	ne
 800d2ea:	2300      	movne	r3, #0
 800d2ec:	eba6 0807 	sub.w	r8, r6, r7
 800d2f0:	608b      	str	r3, [r1, #8]
 800d2f2:	f1b8 0f00 	cmp.w	r8, #0
 800d2f6:	dd9c      	ble.n	800d232 <__sflush_r+0x1a>
 800d2f8:	6a21      	ldr	r1, [r4, #32]
 800d2fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2fc:	4643      	mov	r3, r8
 800d2fe:	463a      	mov	r2, r7
 800d300:	4628      	mov	r0, r5
 800d302:	47b0      	blx	r6
 800d304:	2800      	cmp	r0, #0
 800d306:	dc06      	bgt.n	800d316 <__sflush_r+0xfe>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d30e:	81a3      	strh	r3, [r4, #12]
 800d310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d314:	e78e      	b.n	800d234 <__sflush_r+0x1c>
 800d316:	4407      	add	r7, r0
 800d318:	eba8 0800 	sub.w	r8, r8, r0
 800d31c:	e7e9      	b.n	800d2f2 <__sflush_r+0xda>
 800d31e:	bf00      	nop
 800d320:	20400001 	.word	0x20400001

0800d324 <_fflush_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	690b      	ldr	r3, [r1, #16]
 800d328:	4605      	mov	r5, r0
 800d32a:	460c      	mov	r4, r1
 800d32c:	b913      	cbnz	r3, 800d334 <_fflush_r+0x10>
 800d32e:	2500      	movs	r5, #0
 800d330:	4628      	mov	r0, r5
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	b118      	cbz	r0, 800d33e <_fflush_r+0x1a>
 800d336:	6983      	ldr	r3, [r0, #24]
 800d338:	b90b      	cbnz	r3, 800d33e <_fflush_r+0x1a>
 800d33a:	f000 f871 	bl	800d420 <__sinit>
 800d33e:	4b14      	ldr	r3, [pc, #80]	; (800d390 <_fflush_r+0x6c>)
 800d340:	429c      	cmp	r4, r3
 800d342:	d11b      	bne.n	800d37c <_fflush_r+0x58>
 800d344:	686c      	ldr	r4, [r5, #4]
 800d346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0ef      	beq.n	800d32e <_fflush_r+0xa>
 800d34e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d350:	07d0      	lsls	r0, r2, #31
 800d352:	d404      	bmi.n	800d35e <_fflush_r+0x3a>
 800d354:	0599      	lsls	r1, r3, #22
 800d356:	d402      	bmi.n	800d35e <_fflush_r+0x3a>
 800d358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d35a:	f7f5 fd93 	bl	8002e84 <__retarget_lock_acquire_recursive>
 800d35e:	4628      	mov	r0, r5
 800d360:	4621      	mov	r1, r4
 800d362:	f7ff ff59 	bl	800d218 <__sflush_r>
 800d366:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d368:	07da      	lsls	r2, r3, #31
 800d36a:	4605      	mov	r5, r0
 800d36c:	d4e0      	bmi.n	800d330 <_fflush_r+0xc>
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	059b      	lsls	r3, r3, #22
 800d372:	d4dd      	bmi.n	800d330 <_fflush_r+0xc>
 800d374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d376:	f7f5 fd8b 	bl	8002e90 <__retarget_lock_release_recursive>
 800d37a:	e7d9      	b.n	800d330 <_fflush_r+0xc>
 800d37c:	4b05      	ldr	r3, [pc, #20]	; (800d394 <_fflush_r+0x70>)
 800d37e:	429c      	cmp	r4, r3
 800d380:	d101      	bne.n	800d386 <_fflush_r+0x62>
 800d382:	68ac      	ldr	r4, [r5, #8]
 800d384:	e7df      	b.n	800d346 <_fflush_r+0x22>
 800d386:	4b04      	ldr	r3, [pc, #16]	; (800d398 <_fflush_r+0x74>)
 800d388:	429c      	cmp	r4, r3
 800d38a:	bf08      	it	eq
 800d38c:	68ec      	ldreq	r4, [r5, #12]
 800d38e:	e7da      	b.n	800d346 <_fflush_r+0x22>
 800d390:	0800eb4c 	.word	0x0800eb4c
 800d394:	0800eb6c 	.word	0x0800eb6c
 800d398:	0800eb2c 	.word	0x0800eb2c

0800d39c <std>:
 800d39c:	2300      	movs	r3, #0
 800d39e:	b510      	push	{r4, lr}
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d3a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3aa:	6083      	str	r3, [r0, #8]
 800d3ac:	8181      	strh	r1, [r0, #12]
 800d3ae:	6643      	str	r3, [r0, #100]	; 0x64
 800d3b0:	81c2      	strh	r2, [r0, #14]
 800d3b2:	6183      	str	r3, [r0, #24]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	2208      	movs	r2, #8
 800d3b8:	305c      	adds	r0, #92	; 0x5c
 800d3ba:	f000 f97f 	bl	800d6bc <memset>
 800d3be:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <std+0x38>)
 800d3c0:	6263      	str	r3, [r4, #36]	; 0x24
 800d3c2:	4b05      	ldr	r3, [pc, #20]	; (800d3d8 <std+0x3c>)
 800d3c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <std+0x40>)
 800d3c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3ca:	4b05      	ldr	r3, [pc, #20]	; (800d3e0 <std+0x44>)
 800d3cc:	6224      	str	r4, [r4, #32]
 800d3ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	bf00      	nop
 800d3d4:	0800dc97 	.word	0x0800dc97
 800d3d8:	0800dcb9 	.word	0x0800dcb9
 800d3dc:	0800dcf1 	.word	0x0800dcf1
 800d3e0:	0800dd15 	.word	0x0800dd15

0800d3e4 <_cleanup_r>:
 800d3e4:	4901      	ldr	r1, [pc, #4]	; (800d3ec <_cleanup_r+0x8>)
 800d3e6:	f000 bbe8 	b.w	800dbba <_fwalk_reent>
 800d3ea:	bf00      	nop
 800d3ec:	0800d325 	.word	0x0800d325

0800d3f0 <__sfp_lock_acquire>:
 800d3f0:	4801      	ldr	r0, [pc, #4]	; (800d3f8 <__sfp_lock_acquire+0x8>)
 800d3f2:	f7f5 bd47 	b.w	8002e84 <__retarget_lock_acquire_recursive>
 800d3f6:	bf00      	nop
 800d3f8:	20000674 	.word	0x20000674

0800d3fc <__sfp_lock_release>:
 800d3fc:	4801      	ldr	r0, [pc, #4]	; (800d404 <__sfp_lock_release+0x8>)
 800d3fe:	f7f5 bd47 	b.w	8002e90 <__retarget_lock_release_recursive>
 800d402:	bf00      	nop
 800d404:	20000674 	.word	0x20000674

0800d408 <__sinit_lock_acquire>:
 800d408:	4801      	ldr	r0, [pc, #4]	; (800d410 <__sinit_lock_acquire+0x8>)
 800d40a:	f7f5 bd3b 	b.w	8002e84 <__retarget_lock_acquire_recursive>
 800d40e:	bf00      	nop
 800d410:	20000688 	.word	0x20000688

0800d414 <__sinit_lock_release>:
 800d414:	4801      	ldr	r0, [pc, #4]	; (800d41c <__sinit_lock_release+0x8>)
 800d416:	f7f5 bd3b 	b.w	8002e90 <__retarget_lock_release_recursive>
 800d41a:	bf00      	nop
 800d41c:	20000688 	.word	0x20000688

0800d420 <__sinit>:
 800d420:	b510      	push	{r4, lr}
 800d422:	4604      	mov	r4, r0
 800d424:	f7ff fff0 	bl	800d408 <__sinit_lock_acquire>
 800d428:	69a3      	ldr	r3, [r4, #24]
 800d42a:	b11b      	cbz	r3, 800d434 <__sinit+0x14>
 800d42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d430:	f7ff bff0 	b.w	800d414 <__sinit_lock_release>
 800d434:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d438:	6523      	str	r3, [r4, #80]	; 0x50
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <__sinit+0x68>)
 800d43c:	4a13      	ldr	r2, [pc, #76]	; (800d48c <__sinit+0x6c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	62a2      	str	r2, [r4, #40]	; 0x28
 800d442:	42a3      	cmp	r3, r4
 800d444:	bf04      	itt	eq
 800d446:	2301      	moveq	r3, #1
 800d448:	61a3      	streq	r3, [r4, #24]
 800d44a:	4620      	mov	r0, r4
 800d44c:	f000 f820 	bl	800d490 <__sfp>
 800d450:	6060      	str	r0, [r4, #4]
 800d452:	4620      	mov	r0, r4
 800d454:	f000 f81c 	bl	800d490 <__sfp>
 800d458:	60a0      	str	r0, [r4, #8]
 800d45a:	4620      	mov	r0, r4
 800d45c:	f000 f818 	bl	800d490 <__sfp>
 800d460:	2200      	movs	r2, #0
 800d462:	60e0      	str	r0, [r4, #12]
 800d464:	2104      	movs	r1, #4
 800d466:	6860      	ldr	r0, [r4, #4]
 800d468:	f7ff ff98 	bl	800d39c <std>
 800d46c:	68a0      	ldr	r0, [r4, #8]
 800d46e:	2201      	movs	r2, #1
 800d470:	2109      	movs	r1, #9
 800d472:	f7ff ff93 	bl	800d39c <std>
 800d476:	68e0      	ldr	r0, [r4, #12]
 800d478:	2202      	movs	r2, #2
 800d47a:	2112      	movs	r1, #18
 800d47c:	f7ff ff8e 	bl	800d39c <std>
 800d480:	2301      	movs	r3, #1
 800d482:	61a3      	str	r3, [r4, #24]
 800d484:	e7d2      	b.n	800d42c <__sinit+0xc>
 800d486:	bf00      	nop
 800d488:	0800eb1c 	.word	0x0800eb1c
 800d48c:	0800d3e5 	.word	0x0800d3e5

0800d490 <__sfp>:
 800d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d492:	4607      	mov	r7, r0
 800d494:	f7ff ffac 	bl	800d3f0 <__sfp_lock_acquire>
 800d498:	4b1e      	ldr	r3, [pc, #120]	; (800d514 <__sfp+0x84>)
 800d49a:	681e      	ldr	r6, [r3, #0]
 800d49c:	69b3      	ldr	r3, [r6, #24]
 800d49e:	b913      	cbnz	r3, 800d4a6 <__sfp+0x16>
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7ff ffbd 	bl	800d420 <__sinit>
 800d4a6:	3648      	adds	r6, #72	; 0x48
 800d4a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	d503      	bpl.n	800d4b8 <__sfp+0x28>
 800d4b0:	6833      	ldr	r3, [r6, #0]
 800d4b2:	b30b      	cbz	r3, 800d4f8 <__sfp+0x68>
 800d4b4:	6836      	ldr	r6, [r6, #0]
 800d4b6:	e7f7      	b.n	800d4a8 <__sfp+0x18>
 800d4b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d4bc:	b9d5      	cbnz	r5, 800d4f4 <__sfp+0x64>
 800d4be:	4b16      	ldr	r3, [pc, #88]	; (800d518 <__sfp+0x88>)
 800d4c0:	60e3      	str	r3, [r4, #12]
 800d4c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d4c6:	6665      	str	r5, [r4, #100]	; 0x64
 800d4c8:	f7f5 fcd2 	bl	8002e70 <__retarget_lock_init_recursive>
 800d4cc:	f7ff ff96 	bl	800d3fc <__sfp_lock_release>
 800d4d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d4d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d4d8:	6025      	str	r5, [r4, #0]
 800d4da:	61a5      	str	r5, [r4, #24]
 800d4dc:	2208      	movs	r2, #8
 800d4de:	4629      	mov	r1, r5
 800d4e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4e4:	f000 f8ea 	bl	800d6bc <memset>
 800d4e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f4:	3468      	adds	r4, #104	; 0x68
 800d4f6:	e7d9      	b.n	800d4ac <__sfp+0x1c>
 800d4f8:	2104      	movs	r1, #4
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	f000 fb47 	bl	800db8e <__sfmoreglue>
 800d500:	4604      	mov	r4, r0
 800d502:	6030      	str	r0, [r6, #0]
 800d504:	2800      	cmp	r0, #0
 800d506:	d1d5      	bne.n	800d4b4 <__sfp+0x24>
 800d508:	f7ff ff78 	bl	800d3fc <__sfp_lock_release>
 800d50c:	230c      	movs	r3, #12
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	e7ee      	b.n	800d4f0 <__sfp+0x60>
 800d512:	bf00      	nop
 800d514:	0800eb1c 	.word	0x0800eb1c
 800d518:	ffff0001 	.word	0xffff0001

0800d51c <__smakebuf_r>:
 800d51c:	898b      	ldrh	r3, [r1, #12]
 800d51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d520:	079d      	lsls	r5, r3, #30
 800d522:	4606      	mov	r6, r0
 800d524:	460c      	mov	r4, r1
 800d526:	d507      	bpl.n	800d538 <__smakebuf_r+0x1c>
 800d528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d52c:	6023      	str	r3, [r4, #0]
 800d52e:	6123      	str	r3, [r4, #16]
 800d530:	2301      	movs	r3, #1
 800d532:	6163      	str	r3, [r4, #20]
 800d534:	b002      	add	sp, #8
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	ab01      	add	r3, sp, #4
 800d53a:	466a      	mov	r2, sp
 800d53c:	f000 fb5c 	bl	800dbf8 <__swhatbuf_r>
 800d540:	9900      	ldr	r1, [sp, #0]
 800d542:	4605      	mov	r5, r0
 800d544:	4630      	mov	r0, r6
 800d546:	f7fe fd59 	bl	800bffc <_malloc_r>
 800d54a:	b948      	cbnz	r0, 800d560 <__smakebuf_r+0x44>
 800d54c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d550:	059a      	lsls	r2, r3, #22
 800d552:	d4ef      	bmi.n	800d534 <__smakebuf_r+0x18>
 800d554:	f023 0303 	bic.w	r3, r3, #3
 800d558:	f043 0302 	orr.w	r3, r3, #2
 800d55c:	81a3      	strh	r3, [r4, #12]
 800d55e:	e7e3      	b.n	800d528 <__smakebuf_r+0xc>
 800d560:	4b0d      	ldr	r3, [pc, #52]	; (800d598 <__smakebuf_r+0x7c>)
 800d562:	62b3      	str	r3, [r6, #40]	; 0x28
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	6020      	str	r0, [r4, #0]
 800d568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	9b00      	ldr	r3, [sp, #0]
 800d570:	6163      	str	r3, [r4, #20]
 800d572:	9b01      	ldr	r3, [sp, #4]
 800d574:	6120      	str	r0, [r4, #16]
 800d576:	b15b      	cbz	r3, 800d590 <__smakebuf_r+0x74>
 800d578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f85b 	bl	800d638 <_isatty_r>
 800d582:	b128      	cbz	r0, 800d590 <__smakebuf_r+0x74>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	81a3      	strh	r3, [r4, #12]
 800d590:	89a0      	ldrh	r0, [r4, #12]
 800d592:	4305      	orrs	r5, r0
 800d594:	81a5      	strh	r5, [r4, #12]
 800d596:	e7cd      	b.n	800d534 <__smakebuf_r+0x18>
 800d598:	0800d3e5 	.word	0x0800d3e5

0800d59c <raise>:
 800d59c:	4b02      	ldr	r3, [pc, #8]	; (800d5a8 <raise+0xc>)
 800d59e:	4601      	mov	r1, r0
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	f000 bb4e 	b.w	800dc42 <_raise_r>
 800d5a6:	bf00      	nop
 800d5a8:	20000380 	.word	0x20000380

0800d5ac <_kill_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4d07      	ldr	r5, [pc, #28]	; (800d5cc <_kill_r+0x20>)
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	4608      	mov	r0, r1
 800d5b6:	4611      	mov	r1, r2
 800d5b8:	602b      	str	r3, [r5, #0]
 800d5ba:	f7f5 fc1d 	bl	8002df8 <_kill>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d102      	bne.n	800d5c8 <_kill_r+0x1c>
 800d5c2:	682b      	ldr	r3, [r5, #0]
 800d5c4:	b103      	cbz	r3, 800d5c8 <_kill_r+0x1c>
 800d5c6:	6023      	str	r3, [r4, #0]
 800d5c8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ca:	bf00      	nop
 800d5cc:	200014a4 	.word	0x200014a4

0800d5d0 <_write_r>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	4d07      	ldr	r5, [pc, #28]	; (800d5f0 <_write_r+0x20>)
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	4608      	mov	r0, r1
 800d5d8:	4611      	mov	r1, r2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	602a      	str	r2, [r5, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f7f5 fbe6 	bl	8002db0 <_write>
 800d5e4:	1c43      	adds	r3, r0, #1
 800d5e6:	d102      	bne.n	800d5ee <_write_r+0x1e>
 800d5e8:	682b      	ldr	r3, [r5, #0]
 800d5ea:	b103      	cbz	r3, 800d5ee <_write_r+0x1e>
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	200014a4 	.word	0x200014a4

0800d5f4 <_close_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4d06      	ldr	r5, [pc, #24]	; (800d610 <_close_r+0x1c>)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	f7f5 fbee 	bl	8002de0 <_close>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_close_r+0x1a>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_close_r+0x1a>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	200014a4 	.word	0x200014a4

0800d614 <_fstat_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d07      	ldr	r5, [pc, #28]	; (800d634 <_fstat_r+0x20>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	4611      	mov	r1, r2
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	f7f5 fbed 	bl	8002e00 <_fstat>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d102      	bne.n	800d630 <_fstat_r+0x1c>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	b103      	cbz	r3, 800d630 <_fstat_r+0x1c>
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	200014a4 	.word	0x200014a4

0800d638 <_isatty_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d06      	ldr	r5, [pc, #24]	; (800d654 <_isatty_r+0x1c>)
 800d63c:	2300      	movs	r3, #0
 800d63e:	4604      	mov	r4, r0
 800d640:	4608      	mov	r0, r1
 800d642:	602b      	str	r3, [r5, #0]
 800d644:	f7f5 fbd2 	bl	8002dec <_isatty>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_isatty_r+0x1a>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_isatty_r+0x1a>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	200014a4 	.word	0x200014a4

0800d658 <_lseek_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	; (800d678 <_lseek_r+0x20>)
 800d65c:	4604      	mov	r4, r0
 800d65e:	4608      	mov	r0, r1
 800d660:	4611      	mov	r1, r2
 800d662:	2200      	movs	r2, #0
 800d664:	602a      	str	r2, [r5, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	f7f5 fbbe 	bl	8002de8 <_lseek>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d102      	bne.n	800d676 <_lseek_r+0x1e>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	b103      	cbz	r3, 800d676 <_lseek_r+0x1e>
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	bd38      	pop	{r3, r4, r5, pc}
 800d678:	200014a4 	.word	0x200014a4

0800d67c <_read_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d07      	ldr	r5, [pc, #28]	; (800d69c <_read_r+0x20>)
 800d680:	4604      	mov	r4, r0
 800d682:	4608      	mov	r0, r1
 800d684:	4611      	mov	r1, r2
 800d686:	2200      	movs	r2, #0
 800d688:	602a      	str	r2, [r5, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	f7f5 fb70 	bl	8002d70 <_read>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	d102      	bne.n	800d69a <_read_r+0x1e>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	b103      	cbz	r3, 800d69a <_read_r+0x1e>
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	200014a4 	.word	0x200014a4

0800d6a0 <memcpy>:
 800d6a0:	440a      	add	r2, r1
 800d6a2:	4291      	cmp	r1, r2
 800d6a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d6a8:	d100      	bne.n	800d6ac <memcpy+0xc>
 800d6aa:	4770      	bx	lr
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6b6:	4291      	cmp	r1, r2
 800d6b8:	d1f9      	bne.n	800d6ae <memcpy+0xe>
 800d6ba:	bd10      	pop	{r4, pc}

0800d6bc <memset>:
 800d6bc:	4402      	add	r2, r0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d100      	bne.n	800d6c6 <memset+0xa>
 800d6c4:	4770      	bx	lr
 800d6c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ca:	e7f9      	b.n	800d6c0 <memset+0x4>

0800d6cc <__cvt>:
 800d6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	ec55 4b10 	vmov	r4, r5, d0
 800d6d4:	2d00      	cmp	r5, #0
 800d6d6:	460e      	mov	r6, r1
 800d6d8:	4619      	mov	r1, r3
 800d6da:	462b      	mov	r3, r5
 800d6dc:	bfbb      	ittet	lt
 800d6de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d6e2:	461d      	movlt	r5, r3
 800d6e4:	2300      	movge	r3, #0
 800d6e6:	232d      	movlt	r3, #45	; 0x2d
 800d6e8:	700b      	strb	r3, [r1, #0]
 800d6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d6f0:	4691      	mov	r9, r2
 800d6f2:	f023 0820 	bic.w	r8, r3, #32
 800d6f6:	bfbc      	itt	lt
 800d6f8:	4622      	movlt	r2, r4
 800d6fa:	4614      	movlt	r4, r2
 800d6fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d700:	d005      	beq.n	800d70e <__cvt+0x42>
 800d702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d706:	d100      	bne.n	800d70a <__cvt+0x3e>
 800d708:	3601      	adds	r6, #1
 800d70a:	2102      	movs	r1, #2
 800d70c:	e000      	b.n	800d710 <__cvt+0x44>
 800d70e:	2103      	movs	r1, #3
 800d710:	ab03      	add	r3, sp, #12
 800d712:	9301      	str	r3, [sp, #4]
 800d714:	ab02      	add	r3, sp, #8
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	ec45 4b10 	vmov	d0, r4, r5
 800d71c:	4653      	mov	r3, sl
 800d71e:	4632      	mov	r2, r6
 800d720:	f7f3 fd7a 	bl	8001218 <_dtoa_r>
 800d724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d728:	4607      	mov	r7, r0
 800d72a:	d102      	bne.n	800d732 <__cvt+0x66>
 800d72c:	f019 0f01 	tst.w	r9, #1
 800d730:	d022      	beq.n	800d778 <__cvt+0xac>
 800d732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d736:	eb07 0906 	add.w	r9, r7, r6
 800d73a:	d110      	bne.n	800d75e <__cvt+0x92>
 800d73c:	783b      	ldrb	r3, [r7, #0]
 800d73e:	2b30      	cmp	r3, #48	; 0x30
 800d740:	d10a      	bne.n	800d758 <__cvt+0x8c>
 800d742:	2200      	movs	r2, #0
 800d744:	2300      	movs	r3, #0
 800d746:	4620      	mov	r0, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	f7f3 f9b7 	bl	8000abc <__aeabi_dcmpeq>
 800d74e:	b918      	cbnz	r0, 800d758 <__cvt+0x8c>
 800d750:	f1c6 0601 	rsb	r6, r6, #1
 800d754:	f8ca 6000 	str.w	r6, [sl]
 800d758:	f8da 3000 	ldr.w	r3, [sl]
 800d75c:	4499      	add	r9, r3
 800d75e:	2200      	movs	r2, #0
 800d760:	2300      	movs	r3, #0
 800d762:	4620      	mov	r0, r4
 800d764:	4629      	mov	r1, r5
 800d766:	f7f3 f9a9 	bl	8000abc <__aeabi_dcmpeq>
 800d76a:	b108      	cbz	r0, 800d770 <__cvt+0xa4>
 800d76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d770:	2230      	movs	r2, #48	; 0x30
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	454b      	cmp	r3, r9
 800d776:	d307      	bcc.n	800d788 <__cvt+0xbc>
 800d778:	9b03      	ldr	r3, [sp, #12]
 800d77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d77c:	1bdb      	subs	r3, r3, r7
 800d77e:	4638      	mov	r0, r7
 800d780:	6013      	str	r3, [r2, #0]
 800d782:	b004      	add	sp, #16
 800d784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d788:	1c59      	adds	r1, r3, #1
 800d78a:	9103      	str	r1, [sp, #12]
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e7f0      	b.n	800d772 <__cvt+0xa6>

0800d790 <__exponent>:
 800d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d792:	4603      	mov	r3, r0
 800d794:	2900      	cmp	r1, #0
 800d796:	bfb8      	it	lt
 800d798:	4249      	neglt	r1, r1
 800d79a:	f803 2b02 	strb.w	r2, [r3], #2
 800d79e:	bfb4      	ite	lt
 800d7a0:	222d      	movlt	r2, #45	; 0x2d
 800d7a2:	222b      	movge	r2, #43	; 0x2b
 800d7a4:	2909      	cmp	r1, #9
 800d7a6:	7042      	strb	r2, [r0, #1]
 800d7a8:	dd2a      	ble.n	800d800 <__exponent+0x70>
 800d7aa:	f10d 0407 	add.w	r4, sp, #7
 800d7ae:	46a4      	mov	ip, r4
 800d7b0:	270a      	movs	r7, #10
 800d7b2:	46a6      	mov	lr, r4
 800d7b4:	460a      	mov	r2, r1
 800d7b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d7ba:	fb07 1516 	mls	r5, r7, r6, r1
 800d7be:	3530      	adds	r5, #48	; 0x30
 800d7c0:	2a63      	cmp	r2, #99	; 0x63
 800d7c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d7c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	dcf1      	bgt.n	800d7b2 <__exponent+0x22>
 800d7ce:	3130      	adds	r1, #48	; 0x30
 800d7d0:	f1ae 0502 	sub.w	r5, lr, #2
 800d7d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d7d8:	1c44      	adds	r4, r0, #1
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4561      	cmp	r1, ip
 800d7de:	d30a      	bcc.n	800d7f6 <__exponent+0x66>
 800d7e0:	f10d 0209 	add.w	r2, sp, #9
 800d7e4:	eba2 020e 	sub.w	r2, r2, lr
 800d7e8:	4565      	cmp	r5, ip
 800d7ea:	bf88      	it	hi
 800d7ec:	2200      	movhi	r2, #0
 800d7ee:	4413      	add	r3, r2
 800d7f0:	1a18      	subs	r0, r3, r0
 800d7f2:	b003      	add	sp, #12
 800d7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d7fe:	e7ed      	b.n	800d7dc <__exponent+0x4c>
 800d800:	2330      	movs	r3, #48	; 0x30
 800d802:	3130      	adds	r1, #48	; 0x30
 800d804:	7083      	strb	r3, [r0, #2]
 800d806:	70c1      	strb	r1, [r0, #3]
 800d808:	1d03      	adds	r3, r0, #4
 800d80a:	e7f1      	b.n	800d7f0 <__exponent+0x60>

0800d80c <_printf_common>:
 800d80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d810:	4616      	mov	r6, r2
 800d812:	4699      	mov	r9, r3
 800d814:	688a      	ldr	r2, [r1, #8]
 800d816:	690b      	ldr	r3, [r1, #16]
 800d818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d81c:	4293      	cmp	r3, r2
 800d81e:	bfb8      	it	lt
 800d820:	4613      	movlt	r3, r2
 800d822:	6033      	str	r3, [r6, #0]
 800d824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d828:	4607      	mov	r7, r0
 800d82a:	460c      	mov	r4, r1
 800d82c:	b10a      	cbz	r2, 800d832 <_printf_common+0x26>
 800d82e:	3301      	adds	r3, #1
 800d830:	6033      	str	r3, [r6, #0]
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	0699      	lsls	r1, r3, #26
 800d836:	bf42      	ittt	mi
 800d838:	6833      	ldrmi	r3, [r6, #0]
 800d83a:	3302      	addmi	r3, #2
 800d83c:	6033      	strmi	r3, [r6, #0]
 800d83e:	6825      	ldr	r5, [r4, #0]
 800d840:	f015 0506 	ands.w	r5, r5, #6
 800d844:	d106      	bne.n	800d854 <_printf_common+0x48>
 800d846:	f104 0a19 	add.w	sl, r4, #25
 800d84a:	68e3      	ldr	r3, [r4, #12]
 800d84c:	6832      	ldr	r2, [r6, #0]
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	42ab      	cmp	r3, r5
 800d852:	dc26      	bgt.n	800d8a2 <_printf_common+0x96>
 800d854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d858:	1e13      	subs	r3, r2, #0
 800d85a:	6822      	ldr	r2, [r4, #0]
 800d85c:	bf18      	it	ne
 800d85e:	2301      	movne	r3, #1
 800d860:	0692      	lsls	r2, r2, #26
 800d862:	d42b      	bmi.n	800d8bc <_printf_common+0xb0>
 800d864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d868:	4649      	mov	r1, r9
 800d86a:	4638      	mov	r0, r7
 800d86c:	47c0      	blx	r8
 800d86e:	3001      	adds	r0, #1
 800d870:	d01e      	beq.n	800d8b0 <_printf_common+0xa4>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	68e5      	ldr	r5, [r4, #12]
 800d876:	6832      	ldr	r2, [r6, #0]
 800d878:	f003 0306 	and.w	r3, r3, #6
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	bf08      	it	eq
 800d880:	1aad      	subeq	r5, r5, r2
 800d882:	68a3      	ldr	r3, [r4, #8]
 800d884:	6922      	ldr	r2, [r4, #16]
 800d886:	bf0c      	ite	eq
 800d888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d88c:	2500      	movne	r5, #0
 800d88e:	4293      	cmp	r3, r2
 800d890:	bfc4      	itt	gt
 800d892:	1a9b      	subgt	r3, r3, r2
 800d894:	18ed      	addgt	r5, r5, r3
 800d896:	2600      	movs	r6, #0
 800d898:	341a      	adds	r4, #26
 800d89a:	42b5      	cmp	r5, r6
 800d89c:	d11a      	bne.n	800d8d4 <_printf_common+0xc8>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e008      	b.n	800d8b4 <_printf_common+0xa8>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4652      	mov	r2, sl
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	47c0      	blx	r8
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d103      	bne.n	800d8b8 <_printf_common+0xac>
 800d8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b8:	3501      	adds	r5, #1
 800d8ba:	e7c6      	b.n	800d84a <_printf_common+0x3e>
 800d8bc:	18e1      	adds	r1, r4, r3
 800d8be:	1c5a      	adds	r2, r3, #1
 800d8c0:	2030      	movs	r0, #48	; 0x30
 800d8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8c6:	4422      	add	r2, r4
 800d8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8d0:	3302      	adds	r3, #2
 800d8d2:	e7c7      	b.n	800d864 <_printf_common+0x58>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4638      	mov	r0, r7
 800d8dc:	47c0      	blx	r8
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d0e6      	beq.n	800d8b0 <_printf_common+0xa4>
 800d8e2:	3601      	adds	r6, #1
 800d8e4:	e7d9      	b.n	800d89a <_printf_common+0x8e>

0800d8e6 <quorem>:
 800d8e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ea:	6903      	ldr	r3, [r0, #16]
 800d8ec:	690c      	ldr	r4, [r1, #16]
 800d8ee:	42a3      	cmp	r3, r4
 800d8f0:	4607      	mov	r7, r0
 800d8f2:	f2c0 8081 	blt.w	800d9f8 <quorem+0x112>
 800d8f6:	3c01      	subs	r4, #1
 800d8f8:	f101 0814 	add.w	r8, r1, #20
 800d8fc:	f100 0514 	add.w	r5, r0, #20
 800d900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d90a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d90e:	3301      	adds	r3, #1
 800d910:	429a      	cmp	r2, r3
 800d912:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d916:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d91a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d91e:	d331      	bcc.n	800d984 <quorem+0x9e>
 800d920:	f04f 0e00 	mov.w	lr, #0
 800d924:	4640      	mov	r0, r8
 800d926:	46ac      	mov	ip, r5
 800d928:	46f2      	mov	sl, lr
 800d92a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d92e:	b293      	uxth	r3, r2
 800d930:	fb06 e303 	mla	r3, r6, r3, lr
 800d934:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d938:	b29b      	uxth	r3, r3
 800d93a:	ebaa 0303 	sub.w	r3, sl, r3
 800d93e:	0c12      	lsrs	r2, r2, #16
 800d940:	f8dc a000 	ldr.w	sl, [ip]
 800d944:	fb06 e202 	mla	r2, r6, r2, lr
 800d948:	fa13 f38a 	uxtah	r3, r3, sl
 800d94c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d950:	fa1f fa82 	uxth.w	sl, r2
 800d954:	f8dc 2000 	ldr.w	r2, [ip]
 800d958:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d960:	b29b      	uxth	r3, r3
 800d962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d966:	4581      	cmp	r9, r0
 800d968:	f84c 3b04 	str.w	r3, [ip], #4
 800d96c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d970:	d2db      	bcs.n	800d92a <quorem+0x44>
 800d972:	f855 300b 	ldr.w	r3, [r5, fp]
 800d976:	b92b      	cbnz	r3, 800d984 <quorem+0x9e>
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	3b04      	subs	r3, #4
 800d97c:	429d      	cmp	r5, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	d32e      	bcc.n	800d9e0 <quorem+0xfa>
 800d982:	613c      	str	r4, [r7, #16]
 800d984:	4638      	mov	r0, r7
 800d986:	f000 f888 	bl	800da9a <__mcmp>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	db24      	blt.n	800d9d8 <quorem+0xf2>
 800d98e:	3601      	adds	r6, #1
 800d990:	4628      	mov	r0, r5
 800d992:	f04f 0c00 	mov.w	ip, #0
 800d996:	f858 2b04 	ldr.w	r2, [r8], #4
 800d99a:	f8d0 e000 	ldr.w	lr, [r0]
 800d99e:	b293      	uxth	r3, r2
 800d9a0:	ebac 0303 	sub.w	r3, ip, r3
 800d9a4:	0c12      	lsrs	r2, r2, #16
 800d9a6:	fa13 f38e 	uxtah	r3, r3, lr
 800d9aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d9ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9b8:	45c1      	cmp	r9, r8
 800d9ba:	f840 3b04 	str.w	r3, [r0], #4
 800d9be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d9c2:	d2e8      	bcs.n	800d996 <quorem+0xb0>
 800d9c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9cc:	b922      	cbnz	r2, 800d9d8 <quorem+0xf2>
 800d9ce:	3b04      	subs	r3, #4
 800d9d0:	429d      	cmp	r5, r3
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	d30a      	bcc.n	800d9ec <quorem+0x106>
 800d9d6:	613c      	str	r4, [r7, #16]
 800d9d8:	4630      	mov	r0, r6
 800d9da:	b003      	add	sp, #12
 800d9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e0:	6812      	ldr	r2, [r2, #0]
 800d9e2:	3b04      	subs	r3, #4
 800d9e4:	2a00      	cmp	r2, #0
 800d9e6:	d1cc      	bne.n	800d982 <quorem+0x9c>
 800d9e8:	3c01      	subs	r4, #1
 800d9ea:	e7c7      	b.n	800d97c <quorem+0x96>
 800d9ec:	6812      	ldr	r2, [r2, #0]
 800d9ee:	3b04      	subs	r3, #4
 800d9f0:	2a00      	cmp	r2, #0
 800d9f2:	d1f0      	bne.n	800d9d6 <quorem+0xf0>
 800d9f4:	3c01      	subs	r4, #1
 800d9f6:	e7eb      	b.n	800d9d0 <quorem+0xea>
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e7ee      	b.n	800d9da <quorem+0xf4>

0800d9fc <__hi0bits>:
 800d9fc:	0c03      	lsrs	r3, r0, #16
 800d9fe:	041b      	lsls	r3, r3, #16
 800da00:	b9d3      	cbnz	r3, 800da38 <__hi0bits+0x3c>
 800da02:	0400      	lsls	r0, r0, #16
 800da04:	2310      	movs	r3, #16
 800da06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da0a:	bf04      	itt	eq
 800da0c:	0200      	lsleq	r0, r0, #8
 800da0e:	3308      	addeq	r3, #8
 800da10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da14:	bf04      	itt	eq
 800da16:	0100      	lsleq	r0, r0, #4
 800da18:	3304      	addeq	r3, #4
 800da1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da1e:	bf04      	itt	eq
 800da20:	0080      	lsleq	r0, r0, #2
 800da22:	3302      	addeq	r3, #2
 800da24:	2800      	cmp	r0, #0
 800da26:	db05      	blt.n	800da34 <__hi0bits+0x38>
 800da28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da2c:	f103 0301 	add.w	r3, r3, #1
 800da30:	bf08      	it	eq
 800da32:	2320      	moveq	r3, #32
 800da34:	4618      	mov	r0, r3
 800da36:	4770      	bx	lr
 800da38:	2300      	movs	r3, #0
 800da3a:	e7e4      	b.n	800da06 <__hi0bits+0xa>

0800da3c <__lo0bits>:
 800da3c:	6803      	ldr	r3, [r0, #0]
 800da3e:	f013 0207 	ands.w	r2, r3, #7
 800da42:	4601      	mov	r1, r0
 800da44:	d00b      	beq.n	800da5e <__lo0bits+0x22>
 800da46:	07da      	lsls	r2, r3, #31
 800da48:	d423      	bmi.n	800da92 <__lo0bits+0x56>
 800da4a:	0798      	lsls	r0, r3, #30
 800da4c:	bf49      	itett	mi
 800da4e:	085b      	lsrmi	r3, r3, #1
 800da50:	089b      	lsrpl	r3, r3, #2
 800da52:	2001      	movmi	r0, #1
 800da54:	600b      	strmi	r3, [r1, #0]
 800da56:	bf5c      	itt	pl
 800da58:	600b      	strpl	r3, [r1, #0]
 800da5a:	2002      	movpl	r0, #2
 800da5c:	4770      	bx	lr
 800da5e:	b298      	uxth	r0, r3
 800da60:	b9a8      	cbnz	r0, 800da8e <__lo0bits+0x52>
 800da62:	0c1b      	lsrs	r3, r3, #16
 800da64:	2010      	movs	r0, #16
 800da66:	b2da      	uxtb	r2, r3
 800da68:	b90a      	cbnz	r2, 800da6e <__lo0bits+0x32>
 800da6a:	3008      	adds	r0, #8
 800da6c:	0a1b      	lsrs	r3, r3, #8
 800da6e:	071a      	lsls	r2, r3, #28
 800da70:	bf04      	itt	eq
 800da72:	091b      	lsreq	r3, r3, #4
 800da74:	3004      	addeq	r0, #4
 800da76:	079a      	lsls	r2, r3, #30
 800da78:	bf04      	itt	eq
 800da7a:	089b      	lsreq	r3, r3, #2
 800da7c:	3002      	addeq	r0, #2
 800da7e:	07da      	lsls	r2, r3, #31
 800da80:	d403      	bmi.n	800da8a <__lo0bits+0x4e>
 800da82:	085b      	lsrs	r3, r3, #1
 800da84:	f100 0001 	add.w	r0, r0, #1
 800da88:	d005      	beq.n	800da96 <__lo0bits+0x5a>
 800da8a:	600b      	str	r3, [r1, #0]
 800da8c:	4770      	bx	lr
 800da8e:	4610      	mov	r0, r2
 800da90:	e7e9      	b.n	800da66 <__lo0bits+0x2a>
 800da92:	2000      	movs	r0, #0
 800da94:	4770      	bx	lr
 800da96:	2020      	movs	r0, #32
 800da98:	4770      	bx	lr

0800da9a <__mcmp>:
 800da9a:	b530      	push	{r4, r5, lr}
 800da9c:	6902      	ldr	r2, [r0, #16]
 800da9e:	690c      	ldr	r4, [r1, #16]
 800daa0:	1b12      	subs	r2, r2, r4
 800daa2:	d10e      	bne.n	800dac2 <__mcmp+0x28>
 800daa4:	f100 0314 	add.w	r3, r0, #20
 800daa8:	3114      	adds	r1, #20
 800daaa:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800daae:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dab2:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dab6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800daba:	42a5      	cmp	r5, r4
 800dabc:	d003      	beq.n	800dac6 <__mcmp+0x2c>
 800dabe:	d305      	bcc.n	800dacc <__mcmp+0x32>
 800dac0:	2201      	movs	r2, #1
 800dac2:	4610      	mov	r0, r2
 800dac4:	bd30      	pop	{r4, r5, pc}
 800dac6:	4283      	cmp	r3, r0
 800dac8:	d3f3      	bcc.n	800dab2 <__mcmp+0x18>
 800daca:	e7fa      	b.n	800dac2 <__mcmp+0x28>
 800dacc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dad0:	e7f7      	b.n	800dac2 <__mcmp+0x28>

0800dad2 <_calloc_r>:
 800dad2:	b513      	push	{r0, r1, r4, lr}
 800dad4:	434a      	muls	r2, r1
 800dad6:	4611      	mov	r1, r2
 800dad8:	9201      	str	r2, [sp, #4]
 800dada:	f7fe fa8f 	bl	800bffc <_malloc_r>
 800dade:	4604      	mov	r4, r0
 800dae0:	b118      	cbz	r0, 800daea <_calloc_r+0x18>
 800dae2:	9a01      	ldr	r2, [sp, #4]
 800dae4:	2100      	movs	r1, #0
 800dae6:	f7ff fde9 	bl	800d6bc <memset>
 800daea:	4620      	mov	r0, r4
 800daec:	b002      	add	sp, #8
 800daee:	bd10      	pop	{r4, pc}

0800daf0 <__ascii_mbtowc>:
 800daf0:	b082      	sub	sp, #8
 800daf2:	b901      	cbnz	r1, 800daf6 <__ascii_mbtowc+0x6>
 800daf4:	a901      	add	r1, sp, #4
 800daf6:	b142      	cbz	r2, 800db0a <__ascii_mbtowc+0x1a>
 800daf8:	b14b      	cbz	r3, 800db0e <__ascii_mbtowc+0x1e>
 800dafa:	7813      	ldrb	r3, [r2, #0]
 800dafc:	600b      	str	r3, [r1, #0]
 800dafe:	7812      	ldrb	r2, [r2, #0]
 800db00:	1e10      	subs	r0, r2, #0
 800db02:	bf18      	it	ne
 800db04:	2001      	movne	r0, #1
 800db06:	b002      	add	sp, #8
 800db08:	4770      	bx	lr
 800db0a:	4610      	mov	r0, r2
 800db0c:	e7fb      	b.n	800db06 <__ascii_mbtowc+0x16>
 800db0e:	f06f 0001 	mvn.w	r0, #1
 800db12:	e7f8      	b.n	800db06 <__ascii_mbtowc+0x16>

0800db14 <__sfputc_r>:
 800db14:	6893      	ldr	r3, [r2, #8]
 800db16:	3b01      	subs	r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	b410      	push	{r4}
 800db1c:	6093      	str	r3, [r2, #8]
 800db1e:	da08      	bge.n	800db32 <__sfputc_r+0x1e>
 800db20:	6994      	ldr	r4, [r2, #24]
 800db22:	42a3      	cmp	r3, r4
 800db24:	db01      	blt.n	800db2a <__sfputc_r+0x16>
 800db26:	290a      	cmp	r1, #10
 800db28:	d103      	bne.n	800db32 <__sfputc_r+0x1e>
 800db2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db2e:	f7ff bab3 	b.w	800d098 <__swbuf_r>
 800db32:	6813      	ldr	r3, [r2, #0]
 800db34:	1c58      	adds	r0, r3, #1
 800db36:	6010      	str	r0, [r2, #0]
 800db38:	7019      	strb	r1, [r3, #0]
 800db3a:	4608      	mov	r0, r1
 800db3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <__sfputs_r>:
 800db42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db44:	4606      	mov	r6, r0
 800db46:	460f      	mov	r7, r1
 800db48:	4614      	mov	r4, r2
 800db4a:	18d5      	adds	r5, r2, r3
 800db4c:	42ac      	cmp	r4, r5
 800db4e:	d101      	bne.n	800db54 <__sfputs_r+0x12>
 800db50:	2000      	movs	r0, #0
 800db52:	e007      	b.n	800db64 <__sfputs_r+0x22>
 800db54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db58:	463a      	mov	r2, r7
 800db5a:	4630      	mov	r0, r6
 800db5c:	f7ff ffda 	bl	800db14 <__sfputc_r>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d1f3      	bne.n	800db4c <__sfputs_r+0xa>
 800db64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db66 <__ascii_wctomb>:
 800db66:	b149      	cbz	r1, 800db7c <__ascii_wctomb+0x16>
 800db68:	2aff      	cmp	r2, #255	; 0xff
 800db6a:	bf85      	ittet	hi
 800db6c:	238a      	movhi	r3, #138	; 0x8a
 800db6e:	6003      	strhi	r3, [r0, #0]
 800db70:	700a      	strbls	r2, [r1, #0]
 800db72:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800db76:	bf98      	it	ls
 800db78:	2001      	movls	r0, #1
 800db7a:	4770      	bx	lr
 800db7c:	4608      	mov	r0, r1
 800db7e:	4770      	bx	lr

0800db80 <abort>:
 800db80:	b508      	push	{r3, lr}
 800db82:	2006      	movs	r0, #6
 800db84:	f7ff fd0a 	bl	800d59c <raise>
 800db88:	2001      	movs	r0, #1
 800db8a:	f7f5 f93f 	bl	8002e0c <_exit>

0800db8e <__sfmoreglue>:
 800db8e:	b570      	push	{r4, r5, r6, lr}
 800db90:	2268      	movs	r2, #104	; 0x68
 800db92:	1e4d      	subs	r5, r1, #1
 800db94:	4355      	muls	r5, r2
 800db96:	460e      	mov	r6, r1
 800db98:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db9c:	f7fe fa2e 	bl	800bffc <_malloc_r>
 800dba0:	4604      	mov	r4, r0
 800dba2:	b140      	cbz	r0, 800dbb6 <__sfmoreglue+0x28>
 800dba4:	2100      	movs	r1, #0
 800dba6:	e9c0 1600 	strd	r1, r6, [r0]
 800dbaa:	300c      	adds	r0, #12
 800dbac:	60a0      	str	r0, [r4, #8]
 800dbae:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbb2:	f7ff fd83 	bl	800d6bc <memset>
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}

0800dbba <_fwalk_reent>:
 800dbba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	4688      	mov	r8, r1
 800dbc2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dbc6:	2700      	movs	r7, #0
 800dbc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbcc:	f1b9 0901 	subs.w	r9, r9, #1
 800dbd0:	d505      	bpl.n	800dbde <_fwalk_reent+0x24>
 800dbd2:	6824      	ldr	r4, [r4, #0]
 800dbd4:	2c00      	cmp	r4, #0
 800dbd6:	d1f7      	bne.n	800dbc8 <_fwalk_reent+0xe>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbde:	89ab      	ldrh	r3, [r5, #12]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d907      	bls.n	800dbf4 <_fwalk_reent+0x3a>
 800dbe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	d003      	beq.n	800dbf4 <_fwalk_reent+0x3a>
 800dbec:	4629      	mov	r1, r5
 800dbee:	4630      	mov	r0, r6
 800dbf0:	47c0      	blx	r8
 800dbf2:	4307      	orrs	r7, r0
 800dbf4:	3568      	adds	r5, #104	; 0x68
 800dbf6:	e7e9      	b.n	800dbcc <_fwalk_reent+0x12>

0800dbf8 <__swhatbuf_r>:
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	460e      	mov	r6, r1
 800dbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc00:	2900      	cmp	r1, #0
 800dc02:	b096      	sub	sp, #88	; 0x58
 800dc04:	4614      	mov	r4, r2
 800dc06:	461d      	mov	r5, r3
 800dc08:	da08      	bge.n	800dc1c <__swhatbuf_r+0x24>
 800dc0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	602a      	str	r2, [r5, #0]
 800dc12:	061a      	lsls	r2, r3, #24
 800dc14:	d410      	bmi.n	800dc38 <__swhatbuf_r+0x40>
 800dc16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc1a:	e00e      	b.n	800dc3a <__swhatbuf_r+0x42>
 800dc1c:	466a      	mov	r2, sp
 800dc1e:	f7ff fcf9 	bl	800d614 <_fstat_r>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	dbf1      	blt.n	800dc0a <__swhatbuf_r+0x12>
 800dc26:	9a01      	ldr	r2, [sp, #4]
 800dc28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc30:	425a      	negs	r2, r3
 800dc32:	415a      	adcs	r2, r3
 800dc34:	602a      	str	r2, [r5, #0]
 800dc36:	e7ee      	b.n	800dc16 <__swhatbuf_r+0x1e>
 800dc38:	2340      	movs	r3, #64	; 0x40
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	b016      	add	sp, #88	; 0x58
 800dc40:	bd70      	pop	{r4, r5, r6, pc}

0800dc42 <_raise_r>:
 800dc42:	291f      	cmp	r1, #31
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4604      	mov	r4, r0
 800dc48:	460d      	mov	r5, r1
 800dc4a:	d904      	bls.n	800dc56 <_raise_r+0x14>
 800dc4c:	2316      	movs	r3, #22
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc58:	b112      	cbz	r2, 800dc60 <_raise_r+0x1e>
 800dc5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc5e:	b94b      	cbnz	r3, 800dc74 <_raise_r+0x32>
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 f816 	bl	800dc92 <_getpid_r>
 800dc66:	462a      	mov	r2, r5
 800dc68:	4601      	mov	r1, r0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc70:	f7ff bc9c 	b.w	800d5ac <_kill_r>
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d00a      	beq.n	800dc8e <_raise_r+0x4c>
 800dc78:	1c59      	adds	r1, r3, #1
 800dc7a:	d103      	bne.n	800dc84 <_raise_r+0x42>
 800dc7c:	2316      	movs	r3, #22
 800dc7e:	6003      	str	r3, [r0, #0]
 800dc80:	2001      	movs	r0, #1
 800dc82:	e7e7      	b.n	800dc54 <_raise_r+0x12>
 800dc84:	2400      	movs	r4, #0
 800dc86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	4798      	blx	r3
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e7e0      	b.n	800dc54 <_raise_r+0x12>

0800dc92 <_getpid_r>:
 800dc92:	f7f5 b8b3 	b.w	8002dfc <_getpid>

0800dc96 <__sread>:
 800dc96:	b510      	push	{r4, lr}
 800dc98:	460c      	mov	r4, r1
 800dc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc9e:	f7ff fced 	bl	800d67c <_read_r>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	bfab      	itete	ge
 800dca6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dca8:	89a3      	ldrhlt	r3, [r4, #12]
 800dcaa:	181b      	addge	r3, r3, r0
 800dcac:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcb0:	bfac      	ite	ge
 800dcb2:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcb4:	81a3      	strhlt	r3, [r4, #12]
 800dcb6:	bd10      	pop	{r4, pc}

0800dcb8 <__swrite>:
 800dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbc:	461f      	mov	r7, r3
 800dcbe:	898b      	ldrh	r3, [r1, #12]
 800dcc0:	05db      	lsls	r3, r3, #23
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	460c      	mov	r4, r1
 800dcc6:	4616      	mov	r6, r2
 800dcc8:	d505      	bpl.n	800dcd6 <__swrite+0x1e>
 800dcca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcce:	2302      	movs	r3, #2
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f7ff fcc1 	bl	800d658 <_lseek_r>
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	4632      	mov	r2, r6
 800dce4:	463b      	mov	r3, r7
 800dce6:	4628      	mov	r0, r5
 800dce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcec:	f7ff bc70 	b.w	800d5d0 <_write_r>

0800dcf0 <__sseek>:
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf8:	f7ff fcae 	bl	800d658 <_lseek_r>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	89a3      	ldrh	r3, [r4, #12]
 800dd00:	bf15      	itete	ne
 800dd02:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd04:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd08:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd0c:	81a3      	strheq	r3, [r4, #12]
 800dd0e:	bf18      	it	ne
 800dd10:	81a3      	strhne	r3, [r4, #12]
 800dd12:	bd10      	pop	{r4, pc}

0800dd14 <__sclose>:
 800dd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd18:	f7ff bc6c 	b.w	800d5f4 <_close_r>


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	00 2e 00 20 4d 42 00 08 47 b7 00 08 05 42 00 08     ... MB..G....B..
 8000010:	05 42 00 08 05 42 00 08 05 42 00 08 00 00 00 00     .B...B...B......
	...
 800002c:	d5 39 00 08 05 42 00 08 00 00 00 00 81 39 00 08     .9...B.......9..
 800003c:	f9 73 00 08                                         .s..

08000040 <_irq_vector_table>:
 8000040:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000050:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000060:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000070:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000080:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000090:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000a0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000b0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000c0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000d0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000e0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 80000f0:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000100:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000110:	ad 3a 00 08 ad 3a 00 08 ad 3a 00 08 ad 3a 00 08     .:...:...:...:..
 8000120:	ad 3a 00 08                                         .:..

Disassembly of section text:

08000128 <__aeabi_drsub>:
 8000128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800012c:	e002      	b.n	8000134 <__adddf3>
 800012e:	bf00      	nop

08000130 <__aeabi_dsub>:
 8000130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000134 <__adddf3>:
 8000134:	b530      	push	{r4, r5, lr}
 8000136:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800013a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800013e:	ea94 0f05 	teq	r4, r5
 8000142:	bf08      	it	eq
 8000144:	ea90 0f02 	teqeq	r0, r2
 8000148:	bf1f      	itttt	ne
 800014a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800014e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800015a:	f000 80e2 	beq.w	8000322 <__adddf3+0x1ee>
 800015e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000166:	bfb8      	it	lt
 8000168:	426d      	neglt	r5, r5
 800016a:	dd0c      	ble.n	8000186 <__adddf3+0x52>
 800016c:	442c      	add	r4, r5
 800016e:	ea80 0202 	eor.w	r2, r0, r2
 8000172:	ea81 0303 	eor.w	r3, r1, r3
 8000176:	ea82 0000 	eor.w	r0, r2, r0
 800017a:	ea83 0101 	eor.w	r1, r3, r1
 800017e:	ea80 0202 	eor.w	r2, r0, r2
 8000182:	ea81 0303 	eor.w	r3, r1, r3
 8000186:	2d36      	cmp	r5, #54	; 0x36
 8000188:	bf88      	it	hi
 800018a:	bd30      	pophi	{r4, r5, pc}
 800018c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000190:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800019c:	d002      	beq.n	80001a4 <__adddf3+0x70>
 800019e:	4240      	negs	r0, r0
 80001a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001b0:	d002      	beq.n	80001b8 <__adddf3+0x84>
 80001b2:	4252      	negs	r2, r2
 80001b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001b8:	ea94 0f05 	teq	r4, r5
 80001bc:	f000 80a7 	beq.w	800030e <__adddf3+0x1da>
 80001c0:	f1a4 0401 	sub.w	r4, r4, #1
 80001c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80001c8:	db0d      	blt.n	80001e6 <__adddf3+0xb2>
 80001ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001ce:	fa22 f205 	lsr.w	r2, r2, r5
 80001d2:	1880      	adds	r0, r0, r2
 80001d4:	f141 0100 	adc.w	r1, r1, #0
 80001d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80001dc:	1880      	adds	r0, r0, r2
 80001de:	fa43 f305 	asr.w	r3, r3, r5
 80001e2:	4159      	adcs	r1, r3
 80001e4:	e00e      	b.n	8000204 <__adddf3+0xd0>
 80001e6:	f1a5 0520 	sub.w	r5, r5, #32
 80001ea:	f10e 0e20 	add.w	lr, lr, #32
 80001ee:	2a01      	cmp	r2, #1
 80001f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80001f4:	bf28      	it	cs
 80001f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80001fa:	fa43 f305 	asr.w	r3, r3, r5
 80001fe:	18c0      	adds	r0, r0, r3
 8000200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000208:	d507      	bpl.n	800021a <__adddf3+0xe6>
 800020a:	f04f 0e00 	mov.w	lr, #0
 800020e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000212:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000216:	eb6e 0101 	sbc.w	r1, lr, r1
 800021a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800021e:	d31b      	bcc.n	8000258 <__adddf3+0x124>
 8000220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000224:	d30c      	bcc.n	8000240 <__adddf3+0x10c>
 8000226:	0849      	lsrs	r1, r1, #1
 8000228:	ea5f 0030 	movs.w	r0, r0, rrx
 800022c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000230:	f104 0401 	add.w	r4, r4, #1
 8000234:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800023c:	f080 809a 	bcs.w	8000374 <__adddf3+0x240>
 8000240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000244:	bf08      	it	eq
 8000246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800024a:	f150 0000 	adcs.w	r0, r0, #0
 800024e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000252:	ea41 0105 	orr.w	r1, r1, r5
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800025c:	4140      	adcs	r0, r0
 800025e:	eb41 0101 	adc.w	r1, r1, r1
 8000262:	3c01      	subs	r4, #1
 8000264:	bf28      	it	cs
 8000266:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800026a:	d2e9      	bcs.n	8000240 <__adddf3+0x10c>
 800026c:	f091 0f00 	teq	r1, #0
 8000270:	bf04      	itt	eq
 8000272:	4601      	moveq	r1, r0
 8000274:	2000      	moveq	r0, #0
 8000276:	fab1 f381 	clz	r3, r1
 800027a:	bf08      	it	eq
 800027c:	3320      	addeq	r3, #32
 800027e:	f1a3 030b 	sub.w	r3, r3, #11
 8000282:	f1b3 0220 	subs.w	r2, r3, #32
 8000286:	da0c      	bge.n	80002a2 <__adddf3+0x16e>
 8000288:	320c      	adds	r2, #12
 800028a:	dd08      	ble.n	800029e <__adddf3+0x16a>
 800028c:	f102 0c14 	add.w	ip, r2, #20
 8000290:	f1c2 020c 	rsb	r2, r2, #12
 8000294:	fa01 f00c 	lsl.w	r0, r1, ip
 8000298:	fa21 f102 	lsr.w	r1, r1, r2
 800029c:	e00c      	b.n	80002b8 <__adddf3+0x184>
 800029e:	f102 0214 	add.w	r2, r2, #20
 80002a2:	bfd8      	it	le
 80002a4:	f1c2 0c20 	rsble	ip, r2, #32
 80002a8:	fa01 f102 	lsl.w	r1, r1, r2
 80002ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002b0:	bfdc      	itt	le
 80002b2:	ea41 010c 	orrle.w	r1, r1, ip
 80002b6:	4090      	lslle	r0, r2
 80002b8:	1ae4      	subs	r4, r4, r3
 80002ba:	bfa2      	ittt	ge
 80002bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002c0:	4329      	orrge	r1, r5
 80002c2:	bd30      	popge	{r4, r5, pc}
 80002c4:	ea6f 0404 	mvn.w	r4, r4
 80002c8:	3c1f      	subs	r4, #31
 80002ca:	da1c      	bge.n	8000306 <__adddf3+0x1d2>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc0e      	bgt.n	80002ee <__adddf3+0x1ba>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0220 	rsb	r2, r4, #32
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f302 	lsl.w	r3, r1, r2
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	fa21 f304 	lsr.w	r3, r1, r4
 80002e8:	ea45 0103 	orr.w	r1, r5, r3
 80002ec:	bd30      	pop	{r4, r5, pc}
 80002ee:	f1c4 040c 	rsb	r4, r4, #12
 80002f2:	f1c4 0220 	rsb	r2, r4, #32
 80002f6:	fa20 f002 	lsr.w	r0, r0, r2
 80002fa:	fa01 f304 	lsl.w	r3, r1, r4
 80002fe:	ea40 0003 	orr.w	r0, r0, r3
 8000302:	4629      	mov	r1, r5
 8000304:	bd30      	pop	{r4, r5, pc}
 8000306:	fa21 f004 	lsr.w	r0, r1, r4
 800030a:	4629      	mov	r1, r5
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	f094 0f00 	teq	r4, #0
 8000312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000316:	bf06      	itte	eq
 8000318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800031c:	3401      	addeq	r4, #1
 800031e:	3d01      	subne	r5, #1
 8000320:	e74e      	b.n	80001c0 <__adddf3+0x8c>
 8000322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000326:	bf18      	it	ne
 8000328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032c:	d029      	beq.n	8000382 <__adddf3+0x24e>
 800032e:	ea94 0f05 	teq	r4, r5
 8000332:	bf08      	it	eq
 8000334:	ea90 0f02 	teqeq	r0, r2
 8000338:	d005      	beq.n	8000346 <__adddf3+0x212>
 800033a:	ea54 0c00 	orrs.w	ip, r4, r0
 800033e:	bf04      	itt	eq
 8000340:	4619      	moveq	r1, r3
 8000342:	4610      	moveq	r0, r2
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	ea91 0f03 	teq	r1, r3
 800034a:	bf1e      	ittt	ne
 800034c:	2100      	movne	r1, #0
 800034e:	2000      	movne	r0, #0
 8000350:	bd30      	popne	{r4, r5, pc}
 8000352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000356:	d105      	bne.n	8000364 <__adddf3+0x230>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	4149      	adcs	r1, r1
 800035c:	bf28      	it	cs
 800035e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000368:	bf3c      	itt	cc
 800036a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800036e:	bd30      	popcc	{r4, r5, pc}
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800037c:	f04f 0000 	mov.w	r0, #0
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf1a      	itte	ne
 8000388:	4619      	movne	r1, r3
 800038a:	4610      	movne	r0, r2
 800038c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000390:	bf1c      	itt	ne
 8000392:	460b      	movne	r3, r1
 8000394:	4602      	movne	r2, r0
 8000396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800039a:	bf06      	itte	eq
 800039c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003a0:	ea91 0f03 	teqeq	r1, r3
 80003a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	bf00      	nop

080003ac <__aeabi_ui2d>:
 80003ac:	f090 0f00 	teq	r0, #0
 80003b0:	bf04      	itt	eq
 80003b2:	2100      	moveq	r1, #0
 80003b4:	4770      	bxeq	lr
 80003b6:	b530      	push	{r4, r5, lr}
 80003b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003c0:	f04f 0500 	mov.w	r5, #0
 80003c4:	f04f 0100 	mov.w	r1, #0
 80003c8:	e750      	b.n	800026c <__adddf3+0x138>
 80003ca:	bf00      	nop

080003cc <__aeabi_i2d>:
 80003cc:	f090 0f00 	teq	r0, #0
 80003d0:	bf04      	itt	eq
 80003d2:	2100      	moveq	r1, #0
 80003d4:	4770      	bxeq	lr
 80003d6:	b530      	push	{r4, r5, lr}
 80003d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80003e4:	bf48      	it	mi
 80003e6:	4240      	negmi	r0, r0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e73e      	b.n	800026c <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_f2d>:
 80003f0:	0042      	lsls	r2, r0, #1
 80003f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80003f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80003fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80003fe:	bf1f      	itttt	ne
 8000400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800040c:	4770      	bxne	lr
 800040e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000412:	bf08      	it	eq
 8000414:	4770      	bxeq	lr
 8000416:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800041a:	bf04      	itt	eq
 800041c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e71c      	b.n	800026c <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_ul2d>:
 8000434:	ea50 0201 	orrs.w	r2, r0, r1
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	b530      	push	{r4, r5, lr}
 800043e:	f04f 0500 	mov.w	r5, #0
 8000442:	e00a      	b.n	800045a <__aeabi_l2d+0x16>

08000444 <__aeabi_l2d>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000452:	d502      	bpl.n	800045a <__aeabi_l2d+0x16>
 8000454:	4240      	negs	r0, r0
 8000456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000462:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000466:	f43f aed8 	beq.w	800021a <__adddf3+0xe6>
 800046a:	f04f 0203 	mov.w	r2, #3
 800046e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000472:	bf18      	it	ne
 8000474:	3203      	addne	r2, #3
 8000476:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800047a:	bf18      	it	ne
 800047c:	3203      	addne	r2, #3
 800047e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	fa00 fc03 	lsl.w	ip, r0, r3
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000492:	ea40 000e 	orr.w	r0, r0, lr
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	4414      	add	r4, r2
 800049c:	e6bd      	b.n	800021a <__adddf3+0xe6>
 800049e:	bf00      	nop

080004a0 <__aeabi_dmul>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ae:	bf1d      	ittte	ne
 80004b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004b4:	ea94 0f0c 	teqne	r4, ip
 80004b8:	ea95 0f0c 	teqne	r5, ip
 80004bc:	f000 f8de 	bleq	800067c <__aeabi_dmul+0x1dc>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea81 0603 	eor.w	r6, r1, r3
 80004c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004d2:	bf18      	it	ne
 80004d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004e0:	d038      	beq.n	8000554 <__aeabi_dmul+0xb4>
 80004e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80004ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80004f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80004f6:	f04f 0600 	mov.w	r6, #0
 80004fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80004fe:	f09c 0f00 	teq	ip, #0
 8000502:	bf18      	it	ne
 8000504:	f04e 0e01 	orrne.w	lr, lr, #1
 8000508:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800050c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000510:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000514:	d204      	bcs.n	8000520 <__aeabi_dmul+0x80>
 8000516:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800051a:	416d      	adcs	r5, r5
 800051c:	eb46 0606 	adc.w	r6, r6, r6
 8000520:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000524:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000528:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800052c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000530:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000534:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000538:	bf88      	it	hi
 800053a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800053e:	d81e      	bhi.n	800057e <__aeabi_dmul+0xde>
 8000540:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000558:	ea46 0101 	orr.w	r1, r6, r1
 800055c:	ea40 0002 	orr.w	r0, r0, r2
 8000560:	ea81 0103 	eor.w	r1, r1, r3
 8000564:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000568:	bfc2      	ittt	gt
 800056a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800056e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000572:	bd70      	popgt	{r4, r5, r6, pc}
 8000574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000578:	f04f 0e00 	mov.w	lr, #0
 800057c:	3c01      	subs	r4, #1
 800057e:	f300 80ab 	bgt.w	80006d8 <__aeabi_dmul+0x238>
 8000582:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000586:	bfde      	ittt	le
 8000588:	2000      	movle	r0, #0
 800058a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800058e:	bd70      	pople	{r4, r5, r6, pc}
 8000590:	f1c4 0400 	rsb	r4, r4, #0
 8000594:	3c20      	subs	r4, #32
 8000596:	da35      	bge.n	8000604 <__aeabi_dmul+0x164>
 8000598:	340c      	adds	r4, #12
 800059a:	dc1b      	bgt.n	80005d4 <__aeabi_dmul+0x134>
 800059c:	f104 0414 	add.w	r4, r4, #20
 80005a0:	f1c4 0520 	rsb	r5, r4, #32
 80005a4:	fa00 f305 	lsl.w	r3, r0, r5
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f205 	lsl.w	r2, r1, r5
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005c0:	fa21 f604 	lsr.w	r6, r1, r4
 80005c4:	eb42 0106 	adc.w	r1, r2, r6
 80005c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005cc:	bf08      	it	eq
 80005ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005d2:	bd70      	pop	{r4, r5, r6, pc}
 80005d4:	f1c4 040c 	rsb	r4, r4, #12
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f304 	lsl.w	r3, r0, r4
 80005e0:	fa20 f005 	lsr.w	r0, r0, r5
 80005e4:	fa01 f204 	lsl.w	r2, r1, r4
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	f141 0100 	adc.w	r1, r1, #0
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f205 	lsl.w	r2, r0, r5
 800060c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000610:	fa20 f304 	lsr.w	r3, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea43 0302 	orr.w	r3, r3, r2
 800061c:	fa21 f004 	lsr.w	r0, r1, r4
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	fa21 f204 	lsr.w	r2, r1, r4
 8000628:	ea20 0002 	bic.w	r0, r0, r2
 800062c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f094 0f00 	teq	r4, #0
 8000640:	d10f      	bne.n	8000662 <__aeabi_dmul+0x1c2>
 8000642:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000646:	0040      	lsls	r0, r0, #1
 8000648:	eb41 0101 	adc.w	r1, r1, r1
 800064c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000650:	bf08      	it	eq
 8000652:	3c01      	subeq	r4, #1
 8000654:	d0f7      	beq.n	8000646 <__aeabi_dmul+0x1a6>
 8000656:	ea41 0106 	orr.w	r1, r1, r6
 800065a:	f095 0f00 	teq	r5, #0
 800065e:	bf18      	it	ne
 8000660:	4770      	bxne	lr
 8000662:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	eb43 0303 	adc.w	r3, r3, r3
 800066c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3d01      	subeq	r5, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1c6>
 8000676:	ea43 0306 	orr.w	r3, r3, r6
 800067a:	4770      	bx	lr
 800067c:	ea94 0f0c 	teq	r4, ip
 8000680:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000684:	bf18      	it	ne
 8000686:	ea95 0f0c 	teqne	r5, ip
 800068a:	d00c      	beq.n	80006a6 <__aeabi_dmul+0x206>
 800068c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000690:	bf18      	it	ne
 8000692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000696:	d1d1      	bne.n	800063c <__aeabi_dmul+0x19c>
 8000698:	ea81 0103 	eor.w	r1, r1, r3
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	f04f 0000 	mov.w	r0, #0
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006aa:	bf06      	itte	eq
 80006ac:	4610      	moveq	r0, r2
 80006ae:	4619      	moveq	r1, r3
 80006b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b4:	d019      	beq.n	80006ea <__aeabi_dmul+0x24a>
 80006b6:	ea94 0f0c 	teq	r4, ip
 80006ba:	d102      	bne.n	80006c2 <__aeabi_dmul+0x222>
 80006bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006c0:	d113      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006c2:	ea95 0f0c 	teq	r5, ip
 80006c6:	d105      	bne.n	80006d4 <__aeabi_dmul+0x234>
 80006c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006cc:	bf1c      	itt	ne
 80006ce:	4610      	movne	r0, r2
 80006d0:	4619      	movne	r1, r3
 80006d2:	d10a      	bne.n	80006ea <__aeabi_dmul+0x24a>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80006f2:	bd70      	pop	{r4, r5, r6, pc}

080006f4 <__aeabi_ddiv>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000702:	bf1d      	ittte	ne
 8000704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000708:	ea94 0f0c 	teqne	r4, ip
 800070c:	ea95 0f0c 	teqne	r5, ip
 8000710:	f000 f8a7 	bleq	8000862 <__aeabi_ddiv+0x16e>
 8000714:	eba4 0405 	sub.w	r4, r4, r5
 8000718:	ea81 0e03 	eor.w	lr, r1, r3
 800071c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000720:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000724:	f000 8088 	beq.w	8000838 <__aeabi_ddiv+0x144>
 8000728:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800072c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000730:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000734:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000738:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800073c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000740:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000744:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000748:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800074c:	429d      	cmp	r5, r3
 800074e:	bf08      	it	eq
 8000750:	4296      	cmpeq	r6, r2
 8000752:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000756:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800075a:	d202      	bcs.n	8000762 <__aeabi_ddiv+0x6e>
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000762:	1ab6      	subs	r6, r6, r2
 8000764:	eb65 0503 	sbc.w	r5, r5, r3
 8000768:	085b      	lsrs	r3, r3, #1
 800076a:	ea4f 0232 	mov.w	r2, r2, rrx
 800076e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000772:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000776:	ebb6 0e02 	subs.w	lr, r6, r2
 800077a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800077e:	bf22      	ittt	cs
 8000780:	1ab6      	subcs	r6, r6, r2
 8000782:	4675      	movcs	r5, lr
 8000784:	ea40 000c 	orrcs.w	r0, r0, ip
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000792:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000796:	bf22      	ittt	cs
 8000798:	1ab6      	subcs	r6, r6, r2
 800079a:	4675      	movcs	r5, lr
 800079c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007d4:	d018      	beq.n	8000808 <__aeabi_ddiv+0x114>
 80007d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80007e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80007ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80007ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80007f2:	d1c0      	bne.n	8000776 <__aeabi_ddiv+0x82>
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	d10b      	bne.n	8000812 <__aeabi_ddiv+0x11e>
 80007fa:	ea41 0100 	orr.w	r1, r1, r0
 80007fe:	f04f 0000 	mov.w	r0, #0
 8000802:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000806:	e7b6      	b.n	8000776 <__aeabi_ddiv+0x82>
 8000808:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800080c:	bf04      	itt	eq
 800080e:	4301      	orreq	r1, r0
 8000810:	2000      	moveq	r0, #0
 8000812:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000816:	bf88      	it	hi
 8000818:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800081c:	f63f aeaf 	bhi.w	800057e <__aeabi_dmul+0xde>
 8000820:	ebb5 0c03 	subs.w	ip, r5, r3
 8000824:	bf04      	itt	eq
 8000826:	ebb6 0c02 	subseq.w	ip, r6, r2
 800082a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800082e:	f150 0000 	adcs.w	r0, r0, #0
 8000832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800083c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000840:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000844:	bfc2      	ittt	gt
 8000846:	ebd4 050c 	rsbsgt	r5, r4, ip
 800084a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800084e:	bd70      	popgt	{r4, r5, r6, pc}
 8000850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000854:	f04f 0e00 	mov.w	lr, #0
 8000858:	3c01      	subs	r4, #1
 800085a:	e690      	b.n	800057e <__aeabi_dmul+0xde>
 800085c:	ea45 0e06 	orr.w	lr, r5, r6
 8000860:	e68d      	b.n	800057e <__aeabi_dmul+0xde>
 8000862:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	bf08      	it	eq
 800086c:	ea95 0f0c 	teqeq	r5, ip
 8000870:	f43f af3b 	beq.w	80006ea <__aeabi_dmul+0x24a>
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	d10a      	bne.n	8000890 <__aeabi_ddiv+0x19c>
 800087a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800087e:	f47f af34 	bne.w	80006ea <__aeabi_dmul+0x24a>
 8000882:	ea95 0f0c 	teq	r5, ip
 8000886:	f47f af25 	bne.w	80006d4 <__aeabi_dmul+0x234>
 800088a:	4610      	mov	r0, r2
 800088c:	4619      	mov	r1, r3
 800088e:	e72c      	b.n	80006ea <__aeabi_dmul+0x24a>
 8000890:	ea95 0f0c 	teq	r5, ip
 8000894:	d106      	bne.n	80008a4 <__aeabi_ddiv+0x1b0>
 8000896:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800089a:	f43f aefd 	beq.w	8000698 <__aeabi_dmul+0x1f8>
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	e722      	b.n	80006ea <__aeabi_dmul+0x24a>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	f47f aec5 	bne.w	800063c <__aeabi_dmul+0x19c>
 80008b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008b6:	f47f af0d 	bne.w	80006d4 <__aeabi_dmul+0x234>
 80008ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008be:	f47f aeeb 	bne.w	8000698 <__aeabi_dmul+0x1f8>
 80008c2:	e712      	b.n	80006ea <__aeabi_dmul+0x24a>

080008c4 <__aeabi_uldivmod>:
 80008c4:	b953      	cbnz	r3, 80008dc <__aeabi_uldivmod+0x18>
 80008c6:	b94a      	cbnz	r2, 80008dc <__aeabi_uldivmod+0x18>
 80008c8:	2900      	cmp	r1, #0
 80008ca:	bf08      	it	eq
 80008cc:	2800      	cmpeq	r0, #0
 80008ce:	bf1c      	itt	ne
 80008d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008d8:	f000 b80c 	b.w	80008f4 <__aeabi_idiv0>
 80008dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e4:	f000 f8ce 	bl	8000a84 <__udivmoddi4>
 80008e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f0:	b004      	add	sp, #16
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__udivmoddi4>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	4607      	mov	r7, r0
 8000a8a:	468c      	mov	ip, r1
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4615      	mov	r5, r2
 8000a90:	463c      	mov	r4, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 80c6 	bne.w	8000c28 <__udivmoddi4+0x1a4>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	fab2 f782 	clz	r7, r2
 8000aa2:	d946      	bls.n	8000b32 <__udivmoddi4+0xae>
 8000aa4:	b14f      	cbz	r7, 8000aba <__udivmoddi4+0x36>
 8000aa6:	f1c7 0e20 	rsb	lr, r7, #32
 8000aaa:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000aae:	fa00 f307 	lsl.w	r3, r0, r7
 8000ab2:	40bd      	lsls	r5, r7
 8000ab4:	ea4e 0c03 	orr.w	ip, lr, r3
 8000ab8:	40bc      	lsls	r4, r7
 8000aba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000abe:	fbbc f9f8 	udiv	r9, ip, r8
 8000ac2:	fa1f fe85 	uxth.w	lr, r5
 8000ac6:	fb08 c319 	mls	r3, r8, r9, ip
 8000aca:	fb09 fa0e 	mul.w	sl, r9, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ad4:	459a      	cmp	sl, r3
 8000ad6:	d928      	bls.n	8000b2a <__udivmoddi4+0xa6>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ade:	d204      	bcs.n	8000aea <__udivmoddi4+0x66>
 8000ae0:	459a      	cmp	sl, r3
 8000ae2:	d902      	bls.n	8000aea <__udivmoddi4+0x66>
 8000ae4:	f1a9 0002 	sub.w	r0, r9, #2
 8000ae8:	442b      	add	r3, r5
 8000aea:	eba3 030a 	sub.w	r3, r3, sl
 8000aee:	fbb3 f2f8 	udiv	r2, r3, r8
 8000af2:	fb08 3312 	mls	r3, r8, r2, r3
 8000af6:	fb02 fe0e 	mul.w	lr, r2, lr
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d914      	bls.n	8000b2e <__udivmoddi4+0xaa>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000b0a:	d203      	bcs.n	8000b14 <__udivmoddi4+0x90>
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d901      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000b10:	1e93      	subs	r3, r2, #2
 8000b12:	442c      	add	r4, r5
 8000b14:	eba4 040e 	sub.w	r4, r4, lr
 8000b18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	40fc      	lsrs	r4, r7
 8000b22:	6034      	str	r4, [r6, #0]
 8000b24:	6073      	str	r3, [r6, #4]
 8000b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	e7dd      	b.n	8000aea <__udivmoddi4+0x66>
 8000b2e:	4613      	mov	r3, r2
 8000b30:	e7f0      	b.n	8000b14 <__udivmoddi4+0x90>
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xb2>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	bb87      	cbnz	r7, 8000b9a <__udivmoddi4+0x116>
 8000b38:	2101      	movs	r1, #1
 8000b3a:	1a83      	subs	r3, r0, r2
 8000b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b40:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b44:	b2aa      	uxth	r2, r5
 8000b46:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b4a:	fb0c f802 	mul.w	r8, ip, r2
 8000b4e:	0c20      	lsrs	r0, r4, #16
 8000b50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b54:	4598      	cmp	r8, r3
 8000b56:	d963      	bls.n	8000c20 <__udivmoddi4+0x19c>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b5e:	d204      	bcs.n	8000b6a <__udivmoddi4+0xe6>
 8000b60:	4598      	cmp	r8, r3
 8000b62:	d902      	bls.n	8000b6a <__udivmoddi4+0xe6>
 8000b64:	f1ac 0002 	sub.w	r0, ip, #2
 8000b68:	442b      	add	r3, r5
 8000b6a:	eba3 0308 	sub.w	r3, r3, r8
 8000b6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b72:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b76:	fb0c f202 	mul.w	r2, ip, r2
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d94f      	bls.n	8000c24 <__udivmoddi4+0x1a0>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000b8a:	d204      	bcs.n	8000b96 <__udivmoddi4+0x112>
 8000b8c:	42a2      	cmp	r2, r4
 8000b8e:	d902      	bls.n	8000b96 <__udivmoddi4+0x112>
 8000b90:	f1ac 0302 	sub.w	r3, ip, #2
 8000b94:	442c      	add	r4, r5
 8000b96:	1aa4      	subs	r4, r4, r2
 8000b98:	e7be      	b.n	8000b18 <__udivmoddi4+0x94>
 8000b9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b9e:	40bd      	lsls	r5, r7
 8000ba0:	fa20 f80c 	lsr.w	r8, r0, ip
 8000ba4:	fa00 f307 	lsl.w	r3, r0, r7
 8000ba8:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000bac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb0:	ea4c 0203 	orr.w	r2, ip, r3
 8000bb4:	fbb8 fcfe 	udiv	ip, r8, lr
 8000bb8:	b2ab      	uxth	r3, r5
 8000bba:	fb0e 801c 	mls	r0, lr, ip, r8
 8000bbe:	fb0c f903 	mul.w	r9, ip, r3
 8000bc2:	0c11      	lsrs	r1, r2, #16
 8000bc4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000bc8:	4581      	cmp	r9, r0
 8000bca:	fa04 f407 	lsl.w	r4, r4, r7
 8000bce:	d923      	bls.n	8000c18 <__udivmoddi4+0x194>
 8000bd0:	1828      	adds	r0, r5, r0
 8000bd2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000bd6:	d204      	bcs.n	8000be2 <__udivmoddi4+0x15e>
 8000bd8:	4581      	cmp	r9, r0
 8000bda:	d902      	bls.n	8000be2 <__udivmoddi4+0x15e>
 8000bdc:	f1ac 0102 	sub.w	r1, ip, #2
 8000be0:	4428      	add	r0, r5
 8000be2:	eba0 0009 	sub.w	r0, r0, r9
 8000be6:	fbb0 fcfe 	udiv	ip, r0, lr
 8000bea:	fb0e 001c 	mls	r0, lr, ip, r0
 8000bee:	fb0c f803 	mul.w	r8, ip, r3
 8000bf2:	b292      	uxth	r2, r2
 8000bf4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000bf8:	4598      	cmp	r8, r3
 8000bfa:	d90f      	bls.n	8000c1c <__udivmoddi4+0x198>
 8000bfc:	18eb      	adds	r3, r5, r3
 8000bfe:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000c02:	d204      	bcs.n	8000c0e <__udivmoddi4+0x18a>
 8000c04:	4598      	cmp	r8, r3
 8000c06:	d902      	bls.n	8000c0e <__udivmoddi4+0x18a>
 8000c08:	f1ac 0202 	sub.w	r2, ip, #2
 8000c0c:	442b      	add	r3, r5
 8000c0e:	eba3 0308 	sub.w	r3, r3, r8
 8000c12:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000c16:	e791      	b.n	8000b3c <__udivmoddi4+0xb8>
 8000c18:	4661      	mov	r1, ip
 8000c1a:	e7e2      	b.n	8000be2 <__udivmoddi4+0x15e>
 8000c1c:	4662      	mov	r2, ip
 8000c1e:	e7f6      	b.n	8000c0e <__udivmoddi4+0x18a>
 8000c20:	4660      	mov	r0, ip
 8000c22:	e7a2      	b.n	8000b6a <__udivmoddi4+0xe6>
 8000c24:	4663      	mov	r3, ip
 8000c26:	e7b6      	b.n	8000b96 <__udivmoddi4+0x112>
 8000c28:	4283      	cmp	r3, r0
 8000c2a:	d905      	bls.n	8000c38 <__udivmoddi4+0x1b4>
 8000c2c:	b10e      	cbz	r6, 8000c32 <__udivmoddi4+0x1ae>
 8000c2e:	e9c6 7000 	strd	r7, r0, [r6]
 8000c32:	2100      	movs	r1, #0
 8000c34:	4608      	mov	r0, r1
 8000c36:	e776      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	b981      	cbnz	r1, 8000c60 <__udivmoddi4+0x1dc>
 8000c3e:	4283      	cmp	r3, r0
 8000c40:	d301      	bcc.n	8000c46 <__udivmoddi4+0x1c2>
 8000c42:	42ba      	cmp	r2, r7
 8000c44:	d80a      	bhi.n	8000c5c <__udivmoddi4+0x1d8>
 8000c46:	1abc      	subs	r4, r7, r2
 8000c48:	eb60 0303 	sbc.w	r3, r0, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	469c      	mov	ip, r3
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d068      	beq.n	8000d26 <__udivmoddi4+0x2a2>
 8000c54:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e764      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	e7f7      	b.n	8000c50 <__udivmoddi4+0x1cc>
 8000c60:	f1c1 0c20 	rsb	ip, r1, #32
 8000c64:	408b      	lsls	r3, r1
 8000c66:	fa22 f40c 	lsr.w	r4, r2, ip
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000c70:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000c74:	fbbb f8f9 	udiv	r8, fp, r9
 8000c78:	fa1f fe84 	uxth.w	lr, r4
 8000c7c:	fb09 bb18 	mls	fp, r9, r8, fp
 8000c80:	fb08 fa0e 	mul.w	sl, r8, lr
 8000c84:	fa02 f501 	lsl.w	r5, r2, r1
 8000c88:	fa00 f301 	lsl.w	r3, r0, r1
 8000c8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000c90:	4313      	orrs	r3, r2
 8000c92:	0c1a      	lsrs	r2, r3, #16
 8000c94:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000c98:	4592      	cmp	sl, r2
 8000c9a:	fa07 f701 	lsl.w	r7, r7, r1
 8000c9e:	d93e      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000ca0:	18a2      	adds	r2, r4, r2
 8000ca2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000ca6:	d204      	bcs.n	8000cb2 <__udivmoddi4+0x22e>
 8000ca8:	4592      	cmp	sl, r2
 8000caa:	d902      	bls.n	8000cb2 <__udivmoddi4+0x22e>
 8000cac:	f1a8 0002 	sub.w	r0, r8, #2
 8000cb0:	4422      	add	r2, r4
 8000cb2:	eba2 020a 	sub.w	r2, r2, sl
 8000cb6:	fbb2 f8f9 	udiv	r8, r2, r9
 8000cba:	fb09 2218 	mls	r2, r9, r8, r2
 8000cbe:	fb08 fe0e 	mul.w	lr, r8, lr
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000cc8:	4596      	cmp	lr, r2
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	18a2      	adds	r2, r4, r2
 8000cce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000cd2:	d204      	bcs.n	8000cde <__udivmoddi4+0x25a>
 8000cd4:	4596      	cmp	lr, r2
 8000cd6:	d902      	bls.n	8000cde <__udivmoddi4+0x25a>
 8000cd8:	f1a8 0302 	sub.w	r3, r8, #2
 8000cdc:	4422      	add	r2, r4
 8000cde:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ce2:	fba0 9305 	umull	r9, r3, r0, r5
 8000ce6:	eba2 020e 	sub.w	r2, r2, lr
 8000cea:	429a      	cmp	r2, r3
 8000cec:	46ce      	mov	lr, r9
 8000cee:	4698      	mov	r8, r3
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x274>
 8000cf2:	d106      	bne.n	8000d02 <__udivmoddi4+0x27e>
 8000cf4:	454f      	cmp	r7, r9
 8000cf6:	d204      	bcs.n	8000d02 <__udivmoddi4+0x27e>
 8000cf8:	ebb9 0e05 	subs.w	lr, r9, r5
 8000cfc:	eb63 0804 	sbc.w	r8, r3, r4
 8000d00:	3801      	subs	r0, #1
 8000d02:	b186      	cbz	r6, 8000d26 <__udivmoddi4+0x2a2>
 8000d04:	ebb7 030e 	subs.w	r3, r7, lr
 8000d08:	eb62 0708 	sbc.w	r7, r2, r8
 8000d0c:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d10:	40cb      	lsrs	r3, r1
 8000d12:	ea4c 0303 	orr.w	r3, ip, r3
 8000d16:	40cf      	lsrs	r7, r1
 8000d18:	e9c6 3700 	strd	r3, r7, [r6]
 8000d1c:	e79c      	b.n	8000c58 <__udivmoddi4+0x1d4>
 8000d1e:	4640      	mov	r0, r8
 8000d20:	e7c7      	b.n	8000cb2 <__udivmoddi4+0x22e>
 8000d22:	4643      	mov	r3, r8
 8000d24:	e7db      	b.n	8000cde <__udivmoddi4+0x25a>
 8000d26:	4631      	mov	r1, r6
 8000d28:	e6fd      	b.n	8000b26 <__udivmoddi4+0xa2>

08000d2a <strcmp>:
 8000d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d32:	2a01      	cmp	r2, #1
 8000d34:	bf28      	it	cs
 8000d36:	429a      	cmpcs	r2, r3
 8000d38:	d0f7      	beq.n	8000d2a <strcmp>
 8000d3a:	1ad0      	subs	r0, r2, r3
 8000d3c:	4770      	bx	lr

08000d3e <strlen>:
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d1fb      	bne.n	8000d40 <strlen+0x2>
 8000d48:	1a18      	subs	r0, r3, r0
 8000d4a:	3801      	subs	r0, #1
 8000d4c:	4770      	bx	lr
	...

08000d50 <_dtoa_r>:
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	4616      	mov	r6, r2
 8000d56:	461f      	mov	r7, r3
 8000d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000d5a:	b099      	sub	sp, #100	; 0x64
 8000d5c:	4605      	mov	r5, r0
 8000d5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000d62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000d66:	b974      	cbnz	r4, 8000d86 <_dtoa_r+0x36>
 8000d68:	2010      	movs	r0, #16
 8000d6a:	f008 fc7b 	bl	8009664 <malloc>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6268      	str	r0, [r5, #36]	; 0x24
 8000d72:	b920      	cbnz	r0, 8000d7e <_dtoa_r+0x2e>
 8000d74:	21ea      	movs	r1, #234	; 0xea
 8000d76:	4ba8      	ldr	r3, [pc, #672]	; (8001018 <_dtoa_r+0x2c8>)
 8000d78:	48a8      	ldr	r0, [pc, #672]	; (800101c <_dtoa_r+0x2cc>)
 8000d7a:	f009 fba7 	bl	800a4cc <__assert_func>
 8000d7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000d82:	6004      	str	r4, [r0, #0]
 8000d84:	60c4      	str	r4, [r0, #12]
 8000d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	b151      	cbz	r1, 8000da2 <_dtoa_r+0x52>
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4093      	lsls	r3, r2
 8000d92:	604a      	str	r2, [r1, #4]
 8000d94:	608b      	str	r3, [r1, #8]
 8000d96:	4628      	mov	r0, r5
 8000d98:	f009 f8c0 	bl	8009f1c <_Bfree>
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	1e3b      	subs	r3, r7, #0
 8000da4:	bfaf      	iteee	ge
 8000da6:	2300      	movge	r3, #0
 8000da8:	2201      	movlt	r2, #1
 8000daa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000dae:	9305      	strlt	r3, [sp, #20]
 8000db0:	bfa8      	it	ge
 8000db2:	f8c8 3000 	strge.w	r3, [r8]
 8000db6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000dba:	4b99      	ldr	r3, [pc, #612]	; (8001020 <_dtoa_r+0x2d0>)
 8000dbc:	bfb8      	it	lt
 8000dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8000dc2:	ea33 0309 	bics.w	r3, r3, r9
 8000dc6:	d119      	bne.n	8000dfc <_dtoa_r+0xac>
 8000dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8000dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000dd4:	4333      	orrs	r3, r6
 8000dd6:	f000 857f 	beq.w	80018d8 <_dtoa_r+0xb88>
 8000dda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ddc:	b953      	cbnz	r3, 8000df4 <_dtoa_r+0xa4>
 8000dde:	4b91      	ldr	r3, [pc, #580]	; (8001024 <_dtoa_r+0x2d4>)
 8000de0:	e022      	b.n	8000e28 <_dtoa_r+0xd8>
 8000de2:	4b91      	ldr	r3, [pc, #580]	; (8001028 <_dtoa_r+0x2d8>)
 8000de4:	9303      	str	r3, [sp, #12]
 8000de6:	3308      	adds	r3, #8
 8000de8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	9803      	ldr	r0, [sp, #12]
 8000dee:	b019      	add	sp, #100	; 0x64
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	4b8b      	ldr	r3, [pc, #556]	; (8001024 <_dtoa_r+0x2d4>)
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	3303      	adds	r3, #3
 8000dfa:	e7f5      	b.n	8000de8 <_dtoa_r+0x98>
 8000dfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000e00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f7ff fdca 	bl	80009a4 <__aeabi_dcmpeq>
 8000e10:	4680      	mov	r8, r0
 8000e12:	b158      	cbz	r0, 8000e2c <_dtoa_r+0xdc>
 8000e14:	2301      	movs	r3, #1
 8000e16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8558 	beq.w	80018d2 <_dtoa_r+0xb82>
 8000e22:	4882      	ldr	r0, [pc, #520]	; (800102c <_dtoa_r+0x2dc>)
 8000e24:	6018      	str	r0, [r3, #0]
 8000e26:	1e43      	subs	r3, r0, #1
 8000e28:	9303      	str	r3, [sp, #12]
 8000e2a:	e7df      	b.n	8000dec <_dtoa_r+0x9c>
 8000e2c:	ab16      	add	r3, sp, #88	; 0x58
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	ab17      	add	r3, sp, #92	; 0x5c
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	4628      	mov	r0, r5
 8000e36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000e3a:	f009 faeb 	bl	800a414 <__d2b>
 8000e3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000e42:	4683      	mov	fp, r0
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d07f      	beq.n	8000f48 <_dtoa_r+0x1f8>
 8000e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000e56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000e5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000e5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000e62:	2200      	movs	r2, #0
 8000e64:	4b72      	ldr	r3, [pc, #456]	; (8001030 <_dtoa_r+0x2e0>)
 8000e66:	f7ff f963 	bl	8000130 <__aeabi_dsub>
 8000e6a:	a365      	add	r3, pc, #404	; (adr r3, 8001000 <_dtoa_r+0x2b0>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fb16 	bl	80004a0 <__aeabi_dmul>
 8000e74:	a364      	add	r3, pc, #400	; (adr r3, 8001008 <_dtoa_r+0x2b8>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff f95b 	bl	8000134 <__adddf3>
 8000e7e:	4606      	mov	r6, r0
 8000e80:	4620      	mov	r0, r4
 8000e82:	460f      	mov	r7, r1
 8000e84:	f7ff faa2 	bl	80003cc <__aeabi_i2d>
 8000e88:	a361      	add	r3, pc, #388	; (adr r3, 8001010 <_dtoa_r+0x2c0>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff fb07 	bl	80004a0 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4630      	mov	r0, r6
 8000e98:	4639      	mov	r1, r7
 8000e9a:	f7ff f94b 	bl	8000134 <__adddf3>
 8000e9e:	4606      	mov	r6, r0
 8000ea0:	460f      	mov	r7, r1
 8000ea2:	f7ff fdc7 	bl	8000a34 <__aeabi_d2iz>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4682      	mov	sl, r0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4630      	mov	r0, r6
 8000eae:	4639      	mov	r1, r7
 8000eb0:	f7ff fd82 	bl	80009b8 <__aeabi_dcmplt>
 8000eb4:	b148      	cbz	r0, 8000eca <_dtoa_r+0x17a>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	f7ff fa88 	bl	80003cc <__aeabi_i2d>
 8000ebc:	4632      	mov	r2, r6
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	f7ff fd70 	bl	80009a4 <__aeabi_dcmpeq>
 8000ec4:	b908      	cbnz	r0, 8000eca <_dtoa_r+0x17a>
 8000ec6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eca:	f1ba 0f16 	cmp.w	sl, #22
 8000ece:	d858      	bhi.n	8000f82 <_dtoa_r+0x232>
 8000ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <_dtoa_r+0x2e4>)
 8000ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fd6b 	bl	80009b8 <__aeabi_dcmplt>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d04f      	beq.n	8000f86 <_dtoa_r+0x236>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000ef0:	1b1c      	subs	r4, r3, r4
 8000ef2:	1e63      	subs	r3, r4, #1
 8000ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ef6:	bf49      	itett	mi
 8000ef8:	f1c4 0301 	rsbmi	r3, r4, #1
 8000efc:	2300      	movpl	r3, #0
 8000efe:	9306      	strmi	r3, [sp, #24]
 8000f00:	2300      	movmi	r3, #0
 8000f02:	bf54      	ite	pl
 8000f04:	9306      	strpl	r3, [sp, #24]
 8000f06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8000f08:	f1ba 0f00 	cmp.w	sl, #0
 8000f0c:	db3d      	blt.n	8000f8a <_dtoa_r+0x23a>
 8000f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8000f14:	4453      	add	r3, sl
 8000f16:	9309      	str	r3, [sp, #36]	; 0x24
 8000f18:	2300      	movs	r3, #0
 8000f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8000f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f1e:	2b09      	cmp	r3, #9
 8000f20:	f200 808c 	bhi.w	800103c <_dtoa_r+0x2ec>
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	bfc4      	itt	gt
 8000f28:	3b04      	subgt	r3, #4
 8000f2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8000f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f2e:	bfc8      	it	gt
 8000f30:	2400      	movgt	r4, #0
 8000f32:	f1a3 0302 	sub.w	r3, r3, #2
 8000f36:	bfd8      	it	le
 8000f38:	2401      	movle	r4, #1
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	f200 808a 	bhi.w	8001054 <_dtoa_r+0x304>
 8000f40:	e8df f003 	tbb	[pc, r3]
 8000f44:	5b4d4f2d 	.word	0x5b4d4f2d
 8000f48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8000f4c:	441c      	add	r4, r3
 8000f4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	bfc3      	ittte	gt
 8000f56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8000f5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8000f5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8000f62:	f1c3 0320 	rsble	r3, r3, #32
 8000f66:	bfc6      	itte	gt
 8000f68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8000f6c:	4318      	orrgt	r0, r3
 8000f6e:	fa06 f003 	lslle.w	r0, r6, r3
 8000f72:	f7ff fa1b 	bl	80003ac <__aeabi_ui2d>
 8000f76:	2301      	movs	r3, #1
 8000f78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8000f7c:	3c01      	subs	r4, #1
 8000f7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8000f80:	e76f      	b.n	8000e62 <_dtoa_r+0x112>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e7b2      	b.n	8000eec <_dtoa_r+0x19c>
 8000f86:	900f      	str	r0, [sp, #60]	; 0x3c
 8000f88:	e7b1      	b.n	8000eee <_dtoa_r+0x19e>
 8000f8a:	9b06      	ldr	r3, [sp, #24]
 8000f8c:	eba3 030a 	sub.w	r3, r3, sl
 8000f90:	9306      	str	r3, [sp, #24]
 8000f92:	f1ca 0300 	rsb	r3, sl, #0
 8000f96:	930a      	str	r3, [sp, #40]	; 0x28
 8000f98:	2300      	movs	r3, #0
 8000f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f9c:	e7be      	b.n	8000f1c <_dtoa_r+0x1cc>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc58      	bgt.n	800105a <_dtoa_r+0x30a>
 8000fa8:	f04f 0901 	mov.w	r9, #1
 8000fac:	464b      	mov	r3, r9
 8000fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8000fb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8000fba:	6042      	str	r2, [r0, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f102 0614 	add.w	r6, r2, #20
 8000fc2:	429e      	cmp	r6, r3
 8000fc4:	6841      	ldr	r1, [r0, #4]
 8000fc6:	d94e      	bls.n	8001066 <_dtoa_r+0x316>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f008 ff67 	bl	8009e9c <_Balloc>
 8000fce:	9003      	str	r0, [sp, #12]
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d14c      	bne.n	800106e <_dtoa_r+0x31e>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <_dtoa_r+0x2e8>)
 8000fdc:	e6cc      	b.n	8000d78 <_dtoa_r+0x28>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e7de      	b.n	8000fa0 <_dtoa_r+0x250>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000fe8:	eb0a 0903 	add.w	r9, sl, r3
 8000fec:	f109 0301 	add.w	r3, r9, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	9308      	str	r3, [sp, #32]
 8000ff4:	bfb8      	it	lt
 8000ff6:	2301      	movlt	r3, #1
 8000ff8:	e7dd      	b.n	8000fb6 <_dtoa_r+0x266>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e7f2      	b.n	8000fe4 <_dtoa_r+0x294>
 8000ffe:	bf00      	nop
 8001000:	636f4361 	.word	0x636f4361
 8001004:	3fd287a7 	.word	0x3fd287a7
 8001008:	8b60c8b3 	.word	0x8b60c8b3
 800100c:	3fc68a28 	.word	0x3fc68a28
 8001010:	509f79fb 	.word	0x509f79fb
 8001014:	3fd34413 	.word	0x3fd34413
 8001018:	0800ebce 	.word	0x0800ebce
 800101c:	0800ebe5 	.word	0x0800ebe5
 8001020:	7ff00000 	.word	0x7ff00000
 8001024:	0800ebca 	.word	0x0800ebca
 8001028:	0800ebc1 	.word	0x0800ebc1
 800102c:	0800eb9e 	.word	0x0800eb9e
 8001030:	3ff80000 	.word	0x3ff80000
 8001034:	0800da70 	.word	0x0800da70
 8001038:	0800ec3f 	.word	0x0800ec3f
 800103c:	2401      	movs	r4, #1
 800103e:	2300      	movs	r3, #0
 8001040:	940b      	str	r4, [sp, #44]	; 0x2c
 8001042:	9322      	str	r3, [sp, #136]	; 0x88
 8001044:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	2312      	movs	r3, #18
 800104c:	f8cd 9020 	str.w	r9, [sp, #32]
 8001050:	9223      	str	r2, [sp, #140]	; 0x8c
 8001052:	e7b0      	b.n	8000fb6 <_dtoa_r+0x266>
 8001054:	2301      	movs	r3, #1
 8001056:	930b      	str	r3, [sp, #44]	; 0x2c
 8001058:	e7f4      	b.n	8001044 <_dtoa_r+0x2f4>
 800105a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800105e:	464b      	mov	r3, r9
 8001060:	f8cd 9020 	str.w	r9, [sp, #32]
 8001064:	e7a7      	b.n	8000fb6 <_dtoa_r+0x266>
 8001066:	3101      	adds	r1, #1
 8001068:	6041      	str	r1, [r0, #4]
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	e7a7      	b.n	8000fbe <_dtoa_r+0x26e>
 800106e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	9b08      	ldr	r3, [sp, #32]
 8001076:	2b0e      	cmp	r3, #14
 8001078:	f200 80a8 	bhi.w	80011cc <_dtoa_r+0x47c>
 800107c:	2c00      	cmp	r4, #0
 800107e:	f000 80a5 	beq.w	80011cc <_dtoa_r+0x47c>
 8001082:	f1ba 0f00 	cmp.w	sl, #0
 8001086:	dd34      	ble.n	80010f2 <_dtoa_r+0x3a2>
 8001088:	4a9a      	ldr	r2, [pc, #616]	; (80012f4 <_dtoa_r+0x5a4>)
 800108a:	f00a 030f 	and.w	r3, sl, #15
 800108e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001092:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800109a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800109e:	ea4f 142a 	mov.w	r4, sl, asr #4
 80010a2:	d016      	beq.n	80010d2 <_dtoa_r+0x382>
 80010a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010a8:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <_dtoa_r+0x5a8>)
 80010aa:	2703      	movs	r7, #3
 80010ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80010b0:	f7ff fb20 	bl	80006f4 <__aeabi_ddiv>
 80010b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010b8:	f004 040f 	and.w	r4, r4, #15
 80010bc:	4e8e      	ldr	r6, [pc, #568]	; (80012f8 <_dtoa_r+0x5a8>)
 80010be:	b954      	cbnz	r4, 80010d6 <_dtoa_r+0x386>
 80010c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80010c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80010c8:	f7ff fb14 	bl	80006f4 <__aeabi_ddiv>
 80010cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80010d0:	e029      	b.n	8001126 <_dtoa_r+0x3d6>
 80010d2:	2702      	movs	r7, #2
 80010d4:	e7f2      	b.n	80010bc <_dtoa_r+0x36c>
 80010d6:	07e1      	lsls	r1, r4, #31
 80010d8:	d508      	bpl.n	80010ec <_dtoa_r+0x39c>
 80010da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80010de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80010e2:	f7ff f9dd 	bl	80004a0 <__aeabi_dmul>
 80010e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010ea:	3701      	adds	r7, #1
 80010ec:	1064      	asrs	r4, r4, #1
 80010ee:	3608      	adds	r6, #8
 80010f0:	e7e5      	b.n	80010be <_dtoa_r+0x36e>
 80010f2:	f000 80a5 	beq.w	8001240 <_dtoa_r+0x4f0>
 80010f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010fa:	f1ca 0400 	rsb	r4, sl, #0
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <_dtoa_r+0x5a4>)
 8001100:	f004 020f 	and.w	r2, r4, #15
 8001104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff f9c8 	bl	80004a0 <__aeabi_dmul>
 8001110:	2702      	movs	r7, #2
 8001112:	2300      	movs	r3, #0
 8001114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001118:	4e77      	ldr	r6, [pc, #476]	; (80012f8 <_dtoa_r+0x5a8>)
 800111a:	1124      	asrs	r4, r4, #4
 800111c:	2c00      	cmp	r4, #0
 800111e:	f040 8084 	bne.w	800122a <_dtoa_r+0x4da>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1d2      	bne.n	80010cc <_dtoa_r+0x37c>
 8001126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 808b 	beq.w	8001244 <_dtoa_r+0x4f4>
 800112e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8001132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800113a:	2200      	movs	r2, #0
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <_dtoa_r+0x5ac>)
 800113e:	f7ff fc3b 	bl	80009b8 <__aeabi_dcmplt>
 8001142:	2800      	cmp	r0, #0
 8001144:	d07e      	beq.n	8001244 <_dtoa_r+0x4f4>
 8001146:	9b08      	ldr	r3, [sp, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d07b      	beq.n	8001244 <_dtoa_r+0x4f4>
 800114c:	f1b9 0f00 	cmp.w	r9, #0
 8001150:	dd38      	ble.n	80011c4 <_dtoa_r+0x474>
 8001152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001156:	2200      	movs	r2, #0
 8001158:	4b69      	ldr	r3, [pc, #420]	; (8001300 <_dtoa_r+0x5b0>)
 800115a:	f7ff f9a1 	bl	80004a0 <__aeabi_dmul>
 800115e:	464c      	mov	r4, r9
 8001160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001164:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8001168:	3701      	adds	r7, #1
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff f92e 	bl	80003cc <__aeabi_i2d>
 8001170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001174:	f7ff f994 	bl	80004a0 <__aeabi_dmul>
 8001178:	2200      	movs	r2, #0
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <_dtoa_r+0x5b4>)
 800117c:	f7fe ffda 	bl	8000134 <__adddf3>
 8001180:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8001184:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001188:	9611      	str	r6, [sp, #68]	; 0x44
 800118a:	2c00      	cmp	r4, #0
 800118c:	d15d      	bne.n	800124a <_dtoa_r+0x4fa>
 800118e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001192:	2200      	movs	r2, #0
 8001194:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <_dtoa_r+0x5b8>)
 8001196:	f7fe ffcb 	bl	8000130 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011a2:	4633      	mov	r3, r6
 80011a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011a6:	f7ff fc25 	bl	80009f4 <__aeabi_dcmpgt>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	f040 829c 	bne.w	80016e8 <_dtoa_r+0x998>
 80011b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80011b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80011ba:	f7ff fbfd 	bl	80009b8 <__aeabi_dcmplt>
 80011be:	2800      	cmp	r0, #0
 80011c0:	f040 8290 	bne.w	80016e4 <_dtoa_r+0x994>
 80011c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80011c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80011cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f2c0 8152 	blt.w	8001478 <_dtoa_r+0x728>
 80011d4:	f1ba 0f0e 	cmp.w	sl, #14
 80011d8:	f300 814e 	bgt.w	8001478 <_dtoa_r+0x728>
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <_dtoa_r+0x5a4>)
 80011de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80011e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80011ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f280 80db 	bge.w	80013a8 <_dtoa_r+0x658>
 80011f2:	9b08      	ldr	r3, [sp, #32]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f300 80d7 	bgt.w	80013a8 <_dtoa_r+0x658>
 80011fa:	f040 8272 	bne.w	80016e2 <_dtoa_r+0x992>
 80011fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001202:	2200      	movs	r2, #0
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <_dtoa_r+0x5b8>)
 8001206:	f7ff f94b 	bl	80004a0 <__aeabi_dmul>
 800120a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800120e:	f7ff fbe7 	bl	80009e0 <__aeabi_dcmpge>
 8001212:	9c08      	ldr	r4, [sp, #32]
 8001214:	4626      	mov	r6, r4
 8001216:	2800      	cmp	r0, #0
 8001218:	f040 8248 	bne.w	80016ac <_dtoa_r+0x95c>
 800121c:	2331      	movs	r3, #49	; 0x31
 800121e:	9f03      	ldr	r7, [sp, #12]
 8001220:	f10a 0a01 	add.w	sl, sl, #1
 8001224:	f807 3b01 	strb.w	r3, [r7], #1
 8001228:	e244      	b.n	80016b4 <_dtoa_r+0x964>
 800122a:	07e2      	lsls	r2, r4, #31
 800122c:	d505      	bpl.n	800123a <_dtoa_r+0x4ea>
 800122e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001232:	f7ff f935 	bl	80004a0 <__aeabi_dmul>
 8001236:	2301      	movs	r3, #1
 8001238:	3701      	adds	r7, #1
 800123a:	1064      	asrs	r4, r4, #1
 800123c:	3608      	adds	r6, #8
 800123e:	e76d      	b.n	800111c <_dtoa_r+0x3cc>
 8001240:	2702      	movs	r7, #2
 8001242:	e770      	b.n	8001126 <_dtoa_r+0x3d6>
 8001244:	46d0      	mov	r8, sl
 8001246:	9c08      	ldr	r4, [sp, #32]
 8001248:	e78f      	b.n	800116a <_dtoa_r+0x41a>
 800124a:	9903      	ldr	r1, [sp, #12]
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <_dtoa_r+0x5a4>)
 800124e:	4421      	add	r1, r4
 8001250:	9112      	str	r1, [sp, #72]	; 0x48
 8001252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001258:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800125c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001260:	2900      	cmp	r1, #0
 8001262:	d055      	beq.n	8001310 <_dtoa_r+0x5c0>
 8001264:	2000      	movs	r0, #0
 8001266:	4929      	ldr	r1, [pc, #164]	; (800130c <_dtoa_r+0x5bc>)
 8001268:	f7ff fa44 	bl	80006f4 <__aeabi_ddiv>
 800126c:	463b      	mov	r3, r7
 800126e:	4632      	mov	r2, r6
 8001270:	f7fe ff5e 	bl	8000130 <__aeabi_dsub>
 8001274:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001278:	9f03      	ldr	r7, [sp, #12]
 800127a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800127e:	f7ff fbd9 	bl	8000a34 <__aeabi_d2iz>
 8001282:	4604      	mov	r4, r0
 8001284:	f7ff f8a2 	bl	80003cc <__aeabi_i2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001290:	f7fe ff4e 	bl	8000130 <__aeabi_dsub>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	3430      	adds	r4, #48	; 0x30
 800129a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800129e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012a2:	f807 4b01 	strb.w	r4, [r7], #1
 80012a6:	f7ff fb87 	bl	80009b8 <__aeabi_dcmplt>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d174      	bne.n	8001398 <_dtoa_r+0x648>
 80012ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80012b2:	2000      	movs	r0, #0
 80012b4:	4911      	ldr	r1, [pc, #68]	; (80012fc <_dtoa_r+0x5ac>)
 80012b6:	f7fe ff3b 	bl	8000130 <__aeabi_dsub>
 80012ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012be:	f7ff fb7b 	bl	80009b8 <__aeabi_dcmplt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 80b7 	bne.w	8001436 <_dtoa_r+0x6e6>
 80012c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80012ca:	429f      	cmp	r7, r3
 80012cc:	f43f af7a 	beq.w	80011c4 <_dtoa_r+0x474>
 80012d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <_dtoa_r+0x5b0>)
 80012d8:	f7ff f8e2 	bl	80004a0 <__aeabi_dmul>
 80012dc:	2200      	movs	r2, #0
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <_dtoa_r+0x5b0>)
 80012e8:	f7ff f8da 	bl	80004a0 <__aeabi_dmul>
 80012ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012f0:	e7c3      	b.n	800127a <_dtoa_r+0x52a>
 80012f2:	bf00      	nop
 80012f4:	0800da70 	.word	0x0800da70
 80012f8:	0800da48 	.word	0x0800da48
 80012fc:	3ff00000 	.word	0x3ff00000
 8001300:	40240000 	.word	0x40240000
 8001304:	401c0000 	.word	0x401c0000
 8001308:	40140000 	.word	0x40140000
 800130c:	3fe00000 	.word	0x3fe00000
 8001310:	4630      	mov	r0, r6
 8001312:	4639      	mov	r1, r7
 8001314:	f7ff f8c4 	bl	80004a0 <__aeabi_dmul>
 8001318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800131a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800131e:	9c03      	ldr	r4, [sp, #12]
 8001320:	9314      	str	r3, [sp, #80]	; 0x50
 8001322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001326:	f7ff fb85 	bl	8000a34 <__aeabi_d2iz>
 800132a:	9015      	str	r0, [sp, #84]	; 0x54
 800132c:	f7ff f84e 	bl	80003cc <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001338:	f7fe fefa 	bl	8000130 <__aeabi_dsub>
 800133c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800133e:	4606      	mov	r6, r0
 8001340:	3330      	adds	r3, #48	; 0x30
 8001342:	f804 3b01 	strb.w	r3, [r4], #1
 8001346:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001348:	460f      	mov	r7, r1
 800134a:	429c      	cmp	r4, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	d124      	bne.n	800139c <_dtoa_r+0x64c>
 8001352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001356:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <_dtoa_r+0x8c8>)
 8001358:	f7fe feec 	bl	8000134 <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4630      	mov	r0, r6
 8001362:	4639      	mov	r1, r7
 8001364:	f7ff fb46 	bl	80009f4 <__aeabi_dcmpgt>
 8001368:	2800      	cmp	r0, #0
 800136a:	d163      	bne.n	8001434 <_dtoa_r+0x6e4>
 800136c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001370:	2000      	movs	r0, #0
 8001372:	49a9      	ldr	r1, [pc, #676]	; (8001618 <_dtoa_r+0x8c8>)
 8001374:	f7fe fedc 	bl	8000130 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4630      	mov	r0, r6
 800137e:	4639      	mov	r1, r7
 8001380:	f7ff fb1a 	bl	80009b8 <__aeabi_dcmplt>
 8001384:	2800      	cmp	r0, #0
 8001386:	f43f af1d 	beq.w	80011c4 <_dtoa_r+0x474>
 800138a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800138c:	1e7b      	subs	r3, r7, #1
 800138e:	9314      	str	r3, [sp, #80]	; 0x50
 8001390:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8001394:	2b30      	cmp	r3, #48	; 0x30
 8001396:	d0f8      	beq.n	800138a <_dtoa_r+0x63a>
 8001398:	46c2      	mov	sl, r8
 800139a:	e03b      	b.n	8001414 <_dtoa_r+0x6c4>
 800139c:	4b9f      	ldr	r3, [pc, #636]	; (800161c <_dtoa_r+0x8cc>)
 800139e:	f7ff f87f 	bl	80004a0 <__aeabi_dmul>
 80013a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013a6:	e7bc      	b.n	8001322 <_dtoa_r+0x5d2>
 80013a8:	9f03      	ldr	r7, [sp, #12]
 80013aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80013ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013b2:	4640      	mov	r0, r8
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7ff f99d 	bl	80006f4 <__aeabi_ddiv>
 80013ba:	f7ff fb3b 	bl	8000a34 <__aeabi_d2iz>
 80013be:	4604      	mov	r4, r0
 80013c0:	f7ff f804 	bl	80003cc <__aeabi_i2d>
 80013c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013c8:	f7ff f86a 	bl	80004a0 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe feac 	bl	8000130 <__aeabi_dsub>
 80013d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80013dc:	f807 6b01 	strb.w	r6, [r7], #1
 80013e0:	9e03      	ldr	r6, [sp, #12]
 80013e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80013e6:	1bbe      	subs	r6, r7, r6
 80013e8:	45b4      	cmp	ip, r6
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	d136      	bne.n	800145e <_dtoa_r+0x70e>
 80013f0:	f7fe fea0 	bl	8000134 <__adddf3>
 80013f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
 80013fc:	f7ff fafa 	bl	80009f4 <__aeabi_dcmpgt>
 8001400:	bb58      	cbnz	r0, 800145a <_dtoa_r+0x70a>
 8001402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001406:	4640      	mov	r0, r8
 8001408:	4649      	mov	r1, r9
 800140a:	f7ff facb 	bl	80009a4 <__aeabi_dcmpeq>
 800140e:	b108      	cbz	r0, 8001414 <_dtoa_r+0x6c4>
 8001410:	07e1      	lsls	r1, r4, #31
 8001412:	d422      	bmi.n	800145a <_dtoa_r+0x70a>
 8001414:	4628      	mov	r0, r5
 8001416:	4659      	mov	r1, fp
 8001418:	f008 fd80 	bl	8009f1c <_Bfree>
 800141c:	2300      	movs	r3, #0
 800141e:	703b      	strb	r3, [r7, #0]
 8001420:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001422:	f10a 0001 	add.w	r0, sl, #1
 8001426:	6018      	str	r0, [r3, #0]
 8001428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800142a:	2b00      	cmp	r3, #0
 800142c:	f43f acde 	beq.w	8000dec <_dtoa_r+0x9c>
 8001430:	601f      	str	r7, [r3, #0]
 8001432:	e4db      	b.n	8000dec <_dtoa_r+0x9c>
 8001434:	4627      	mov	r7, r4
 8001436:	463b      	mov	r3, r7
 8001438:	461f      	mov	r7, r3
 800143a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800143e:	2a39      	cmp	r2, #57	; 0x39
 8001440:	d107      	bne.n	8001452 <_dtoa_r+0x702>
 8001442:	9a03      	ldr	r2, [sp, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d1f7      	bne.n	8001438 <_dtoa_r+0x6e8>
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	9903      	ldr	r1, [sp, #12]
 800144c:	f108 0801 	add.w	r8, r8, #1
 8001450:	700a      	strb	r2, [r1, #0]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	3201      	adds	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e79e      	b.n	8001398 <_dtoa_r+0x648>
 800145a:	46d0      	mov	r8, sl
 800145c:	e7eb      	b.n	8001436 <_dtoa_r+0x6e6>
 800145e:	2200      	movs	r2, #0
 8001460:	4b6e      	ldr	r3, [pc, #440]	; (800161c <_dtoa_r+0x8cc>)
 8001462:	f7ff f81d 	bl	80004a0 <__aeabi_dmul>
 8001466:	2200      	movs	r2, #0
 8001468:	2300      	movs	r3, #0
 800146a:	4680      	mov	r8, r0
 800146c:	4689      	mov	r9, r1
 800146e:	f7ff fa99 	bl	80009a4 <__aeabi_dcmpeq>
 8001472:	2800      	cmp	r0, #0
 8001474:	d09b      	beq.n	80013ae <_dtoa_r+0x65e>
 8001476:	e7cd      	b.n	8001414 <_dtoa_r+0x6c4>
 8001478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800147a:	2a00      	cmp	r2, #0
 800147c:	f000 80d0 	beq.w	8001620 <_dtoa_r+0x8d0>
 8001480:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001482:	2a01      	cmp	r2, #1
 8001484:	f300 80ae 	bgt.w	80015e4 <_dtoa_r+0x894>
 8001488:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800148a:	2a00      	cmp	r2, #0
 800148c:	f000 80a6 	beq.w	80015dc <_dtoa_r+0x88c>
 8001490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001496:	9f06      	ldr	r7, [sp, #24]
 8001498:	9a06      	ldr	r2, [sp, #24]
 800149a:	2101      	movs	r1, #1
 800149c:	441a      	add	r2, r3
 800149e:	9206      	str	r2, [sp, #24]
 80014a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014a2:	4628      	mov	r0, r5
 80014a4:	441a      	add	r2, r3
 80014a6:	9209      	str	r2, [sp, #36]	; 0x24
 80014a8:	f008 fda0 	bl	8009fec <__i2b>
 80014ac:	4606      	mov	r6, r0
 80014ae:	2f00      	cmp	r7, #0
 80014b0:	dd0c      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd09      	ble.n	80014cc <_dtoa_r+0x77c>
 80014b8:	42bb      	cmp	r3, r7
 80014ba:	bfa8      	it	ge
 80014bc:	463b      	movge	r3, r7
 80014be:	9a06      	ldr	r2, [sp, #24]
 80014c0:	1aff      	subs	r7, r7, r3
 80014c2:	1ad2      	subs	r2, r2, r3
 80014c4:	9206      	str	r2, [sp, #24]
 80014c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ce:	b1f3      	cbz	r3, 800150e <_dtoa_r+0x7be>
 80014d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a8 	beq.w	8001628 <_dtoa_r+0x8d8>
 80014d8:	2c00      	cmp	r4, #0
 80014da:	dd10      	ble.n	80014fe <_dtoa_r+0x7ae>
 80014dc:	4631      	mov	r1, r6
 80014de:	4622      	mov	r2, r4
 80014e0:	4628      	mov	r0, r5
 80014e2:	f008 fe41 	bl	800a168 <__pow5mult>
 80014e6:	465a      	mov	r2, fp
 80014e8:	4601      	mov	r1, r0
 80014ea:	4606      	mov	r6, r0
 80014ec:	4628      	mov	r0, r5
 80014ee:	f008 fd93 	bl	800a018 <__multiply>
 80014f2:	4680      	mov	r8, r0
 80014f4:	4659      	mov	r1, fp
 80014f6:	4628      	mov	r0, r5
 80014f8:	f008 fd10 	bl	8009f1c <_Bfree>
 80014fc:	46c3      	mov	fp, r8
 80014fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001500:	1b1a      	subs	r2, r3, r4
 8001502:	d004      	beq.n	800150e <_dtoa_r+0x7be>
 8001504:	4659      	mov	r1, fp
 8001506:	4628      	mov	r0, r5
 8001508:	f008 fe2e 	bl	800a168 <__pow5mult>
 800150c:	4683      	mov	fp, r0
 800150e:	2101      	movs	r1, #1
 8001510:	4628      	mov	r0, r5
 8001512:	f008 fd6b 	bl	8009fec <__i2b>
 8001516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001518:	4604      	mov	r4, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f340 8086 	ble.w	800162c <_dtoa_r+0x8dc>
 8001520:	461a      	mov	r2, r3
 8001522:	4601      	mov	r1, r0
 8001524:	4628      	mov	r0, r5
 8001526:	f008 fe1f 	bl	800a168 <__pow5mult>
 800152a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800152c:	4604      	mov	r4, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	dd7f      	ble.n	8001632 <_dtoa_r+0x8e2>
 8001532:	f04f 0800 	mov.w	r8, #0
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800153c:	6918      	ldr	r0, [r3, #16]
 800153e:	f00b feb2 	bl	800d2a6 <__hi0bits>
 8001542:	f1c0 0020 	rsb	r0, r0, #32
 8001546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001548:	4418      	add	r0, r3
 800154a:	f010 001f 	ands.w	r0, r0, #31
 800154e:	f000 8092 	beq.w	8001676 <_dtoa_r+0x926>
 8001552:	f1c0 0320 	rsb	r3, r0, #32
 8001556:	2b04      	cmp	r3, #4
 8001558:	f340 808a 	ble.w	8001670 <_dtoa_r+0x920>
 800155c:	f1c0 001c 	rsb	r0, r0, #28
 8001560:	9b06      	ldr	r3, [sp, #24]
 8001562:	4407      	add	r7, r0
 8001564:	4403      	add	r3, r0
 8001566:	9306      	str	r3, [sp, #24]
 8001568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800156a:	4403      	add	r3, r0
 800156c:	9309      	str	r3, [sp, #36]	; 0x24
 800156e:	9b06      	ldr	r3, [sp, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd05      	ble.n	8001580 <_dtoa_r+0x830>
 8001574:	4659      	mov	r1, fp
 8001576:	461a      	mov	r2, r3
 8001578:	4628      	mov	r0, r5
 800157a:	f008 fe4f 	bl	800a21c <__lshift>
 800157e:	4683      	mov	fp, r0
 8001580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	dd05      	ble.n	8001592 <_dtoa_r+0x842>
 8001586:	4621      	mov	r1, r4
 8001588:	461a      	mov	r2, r3
 800158a:	4628      	mov	r0, r5
 800158c:	f008 fe46 	bl	800a21c <__lshift>
 8001590:	4604      	mov	r4, r0
 8001592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d070      	beq.n	800167a <_dtoa_r+0x92a>
 8001598:	4621      	mov	r1, r4
 800159a:	4658      	mov	r0, fp
 800159c:	f00b fed0 	bl	800d340 <__mcmp>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	da6a      	bge.n	800167a <_dtoa_r+0x92a>
 80015a4:	2300      	movs	r3, #0
 80015a6:	4659      	mov	r1, fp
 80015a8:	220a      	movs	r2, #10
 80015aa:	4628      	mov	r0, r5
 80015ac:	f008 fcd8 	bl	8009f60 <__multadd>
 80015b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015b2:	4683      	mov	fp, r0
 80015b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8194 	beq.w	80018e6 <_dtoa_r+0xb96>
 80015be:	4631      	mov	r1, r6
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	4628      	mov	r0, r5
 80015c6:	f008 fccb 	bl	8009f60 <__multadd>
 80015ca:	f1b9 0f00 	cmp.w	r9, #0
 80015ce:	4606      	mov	r6, r0
 80015d0:	f300 8093 	bgt.w	80016fa <_dtoa_r+0x9aa>
 80015d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	dc57      	bgt.n	800168a <_dtoa_r+0x93a>
 80015da:	e08e      	b.n	80016fa <_dtoa_r+0x9aa>
 80015dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80015de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80015e2:	e757      	b.n	8001494 <_dtoa_r+0x744>
 80015e4:	9b08      	ldr	r3, [sp, #32]
 80015e6:	1e5c      	subs	r4, r3, #1
 80015e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	bfb7      	itett	lt
 80015ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80015f0:	1b1c      	subge	r4, r3, r4
 80015f2:	1ae2      	sublt	r2, r4, r3
 80015f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80015f6:	bfbe      	ittt	lt
 80015f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80015fa:	189b      	addlt	r3, r3, r2
 80015fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80015fe:	9b08      	ldr	r3, [sp, #32]
 8001600:	bfb8      	it	lt
 8001602:	2400      	movlt	r4, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	bfbb      	ittet	lt
 8001608:	9b06      	ldrlt	r3, [sp, #24]
 800160a:	9a08      	ldrlt	r2, [sp, #32]
 800160c:	9f06      	ldrge	r7, [sp, #24]
 800160e:	1a9f      	sublt	r7, r3, r2
 8001610:	bfac      	ite	ge
 8001612:	9b08      	ldrge	r3, [sp, #32]
 8001614:	2300      	movlt	r3, #0
 8001616:	e73f      	b.n	8001498 <_dtoa_r+0x748>
 8001618:	3fe00000 	.word	0x3fe00000
 800161c:	40240000 	.word	0x40240000
 8001620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001622:	9f06      	ldr	r7, [sp, #24]
 8001624:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001626:	e742      	b.n	80014ae <_dtoa_r+0x75e>
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	e76b      	b.n	8001504 <_dtoa_r+0x7b4>
 800162c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800162e:	2b01      	cmp	r3, #1
 8001630:	dc19      	bgt.n	8001666 <_dtoa_r+0x916>
 8001632:	9b04      	ldr	r3, [sp, #16]
 8001634:	b9bb      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 8001636:	9b05      	ldr	r3, [sp, #20]
 8001638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800163c:	b99b      	cbnz	r3, 8001666 <_dtoa_r+0x916>
 800163e:	9b05      	ldr	r3, [sp, #20]
 8001640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001644:	0d1b      	lsrs	r3, r3, #20
 8001646:	051b      	lsls	r3, r3, #20
 8001648:	b183      	cbz	r3, 800166c <_dtoa_r+0x91c>
 800164a:	f04f 0801 	mov.w	r8, #1
 800164e:	9b06      	ldr	r3, [sp, #24]
 8001650:	3301      	adds	r3, #1
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001656:	3301      	adds	r3, #1
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
 800165a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af6a 	bne.w	8001536 <_dtoa_r+0x7e6>
 8001662:	2001      	movs	r0, #1
 8001664:	e76f      	b.n	8001546 <_dtoa_r+0x7f6>
 8001666:	f04f 0800 	mov.w	r8, #0
 800166a:	e7f6      	b.n	800165a <_dtoa_r+0x90a>
 800166c:	4698      	mov	r8, r3
 800166e:	e7f4      	b.n	800165a <_dtoa_r+0x90a>
 8001670:	f43f af7d 	beq.w	800156e <_dtoa_r+0x81e>
 8001674:	4618      	mov	r0, r3
 8001676:	301c      	adds	r0, #28
 8001678:	e772      	b.n	8001560 <_dtoa_r+0x810>
 800167a:	9b08      	ldr	r3, [sp, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dc36      	bgt.n	80016ee <_dtoa_r+0x99e>
 8001680:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001682:	2b02      	cmp	r3, #2
 8001684:	dd33      	ble.n	80016ee <_dtoa_r+0x99e>
 8001686:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800168a:	f1b9 0f00 	cmp.w	r9, #0
 800168e:	d10d      	bne.n	80016ac <_dtoa_r+0x95c>
 8001690:	4621      	mov	r1, r4
 8001692:	464b      	mov	r3, r9
 8001694:	2205      	movs	r2, #5
 8001696:	4628      	mov	r0, r5
 8001698:	f008 fc62 	bl	8009f60 <__multadd>
 800169c:	4601      	mov	r1, r0
 800169e:	4604      	mov	r4, r0
 80016a0:	4658      	mov	r0, fp
 80016a2:	f00b fe4d 	bl	800d340 <__mcmp>
 80016a6:	2800      	cmp	r0, #0
 80016a8:	f73f adb8 	bgt.w	800121c <_dtoa_r+0x4cc>
 80016ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80016ae:	9f03      	ldr	r7, [sp, #12]
 80016b0:	ea6f 0a03 	mvn.w	sl, r3
 80016b4:	f04f 0800 	mov.w	r8, #0
 80016b8:	4621      	mov	r1, r4
 80016ba:	4628      	mov	r0, r5
 80016bc:	f008 fc2e 	bl	8009f1c <_Bfree>
 80016c0:	2e00      	cmp	r6, #0
 80016c2:	f43f aea7 	beq.w	8001414 <_dtoa_r+0x6c4>
 80016c6:	f1b8 0f00 	cmp.w	r8, #0
 80016ca:	d005      	beq.n	80016d8 <_dtoa_r+0x988>
 80016cc:	45b0      	cmp	r8, r6
 80016ce:	d003      	beq.n	80016d8 <_dtoa_r+0x988>
 80016d0:	4641      	mov	r1, r8
 80016d2:	4628      	mov	r0, r5
 80016d4:	f008 fc22 	bl	8009f1c <_Bfree>
 80016d8:	4631      	mov	r1, r6
 80016da:	4628      	mov	r0, r5
 80016dc:	f008 fc1e 	bl	8009f1c <_Bfree>
 80016e0:	e698      	b.n	8001414 <_dtoa_r+0x6c4>
 80016e2:	2400      	movs	r4, #0
 80016e4:	4626      	mov	r6, r4
 80016e6:	e7e1      	b.n	80016ac <_dtoa_r+0x95c>
 80016e8:	46c2      	mov	sl, r8
 80016ea:	4626      	mov	r6, r4
 80016ec:	e596      	b.n	800121c <_dtoa_r+0x4cc>
 80016ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80fd 	beq.w	80018f4 <_dtoa_r+0xba4>
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	dd05      	ble.n	800170a <_dtoa_r+0x9ba>
 80016fe:	4631      	mov	r1, r6
 8001700:	463a      	mov	r2, r7
 8001702:	4628      	mov	r0, r5
 8001704:	f008 fd8a 	bl	800a21c <__lshift>
 8001708:	4606      	mov	r6, r0
 800170a:	f1b8 0f00 	cmp.w	r8, #0
 800170e:	d05c      	beq.n	80017ca <_dtoa_r+0xa7a>
 8001710:	4628      	mov	r0, r5
 8001712:	6871      	ldr	r1, [r6, #4]
 8001714:	f008 fbc2 	bl	8009e9c <_Balloc>
 8001718:	4607      	mov	r7, r0
 800171a:	b928      	cbnz	r0, 8001728 <_dtoa_r+0x9d8>
 800171c:	4602      	mov	r2, r0
 800171e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <_dtoa_r+0xbd0>)
 8001724:	f7ff bb28 	b.w	8000d78 <_dtoa_r+0x28>
 8001728:	6932      	ldr	r2, [r6, #16]
 800172a:	f106 010c 	add.w	r1, r6, #12
 800172e:	3202      	adds	r2, #2
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	300c      	adds	r0, #12
 8001734:	f00b fbdc 	bl	800cef0 <memcpy>
 8001738:	2201      	movs	r2, #1
 800173a:	4639      	mov	r1, r7
 800173c:	4628      	mov	r0, r5
 800173e:	f008 fd6d 	bl	800a21c <__lshift>
 8001742:	46b0      	mov	r8, r6
 8001744:	4606      	mov	r6, r0
 8001746:	9b03      	ldr	r3, [sp, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	9308      	str	r3, [sp, #32]
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	444b      	add	r3, r9
 8001750:	930a      	str	r3, [sp, #40]	; 0x28
 8001752:	9b04      	ldr	r3, [sp, #16]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	9309      	str	r3, [sp, #36]	; 0x24
 800175a:	9b08      	ldr	r3, [sp, #32]
 800175c:	4621      	mov	r1, r4
 800175e:	3b01      	subs	r3, #1
 8001760:	4658      	mov	r0, fp
 8001762:	9304      	str	r3, [sp, #16]
 8001764:	f00b fd05 	bl	800d172 <quorem>
 8001768:	4603      	mov	r3, r0
 800176a:	4641      	mov	r1, r8
 800176c:	3330      	adds	r3, #48	; 0x30
 800176e:	9006      	str	r0, [sp, #24]
 8001770:	4658      	mov	r0, fp
 8001772:	930b      	str	r3, [sp, #44]	; 0x2c
 8001774:	f00b fde4 	bl	800d340 <__mcmp>
 8001778:	4632      	mov	r2, r6
 800177a:	4681      	mov	r9, r0
 800177c:	4621      	mov	r1, r4
 800177e:	4628      	mov	r0, r5
 8001780:	f008 fdbc 	bl	800a2fc <__mdiff>
 8001784:	68c2      	ldr	r2, [r0, #12]
 8001786:	4607      	mov	r7, r0
 8001788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800178a:	bb02      	cbnz	r2, 80017ce <_dtoa_r+0xa7e>
 800178c:	4601      	mov	r1, r0
 800178e:	4658      	mov	r0, fp
 8001790:	f00b fdd6 	bl	800d340 <__mcmp>
 8001794:	4602      	mov	r2, r0
 8001796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001798:	4639      	mov	r1, r7
 800179a:	4628      	mov	r0, r5
 800179c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80017a0:	f008 fbbc 	bl	8009f1c <_Bfree>
 80017a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80017a8:	9f08      	ldr	r7, [sp, #32]
 80017aa:	ea43 0102 	orr.w	r1, r3, r2
 80017ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017b4:	d10d      	bne.n	80017d2 <_dtoa_r+0xa82>
 80017b6:	2b39      	cmp	r3, #57	; 0x39
 80017b8:	d029      	beq.n	800180e <_dtoa_r+0xabe>
 80017ba:	f1b9 0f00 	cmp.w	r9, #0
 80017be:	dd01      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017c0:	9b06      	ldr	r3, [sp, #24]
 80017c2:	3331      	adds	r3, #49	; 0x31
 80017c4:	9a04      	ldr	r2, [sp, #16]
 80017c6:	7013      	strb	r3, [r2, #0]
 80017c8:	e776      	b.n	80016b8 <_dtoa_r+0x968>
 80017ca:	4630      	mov	r0, r6
 80017cc:	e7b9      	b.n	8001742 <_dtoa_r+0x9f2>
 80017ce:	2201      	movs	r2, #1
 80017d0:	e7e2      	b.n	8001798 <_dtoa_r+0xa48>
 80017d2:	f1b9 0f00 	cmp.w	r9, #0
 80017d6:	db06      	blt.n	80017e6 <_dtoa_r+0xa96>
 80017d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80017da:	ea41 0909 	orr.w	r9, r1, r9
 80017de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80017e0:	ea59 0101 	orrs.w	r1, r9, r1
 80017e4:	d120      	bne.n	8001828 <_dtoa_r+0xad8>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	ddec      	ble.n	80017c4 <_dtoa_r+0xa74>
 80017ea:	4659      	mov	r1, fp
 80017ec:	2201      	movs	r2, #1
 80017ee:	4628      	mov	r0, r5
 80017f0:	9308      	str	r3, [sp, #32]
 80017f2:	f008 fd13 	bl	800a21c <__lshift>
 80017f6:	4621      	mov	r1, r4
 80017f8:	4683      	mov	fp, r0
 80017fa:	f00b fda1 	bl	800d340 <__mcmp>
 80017fe:	2800      	cmp	r0, #0
 8001800:	9b08      	ldr	r3, [sp, #32]
 8001802:	dc02      	bgt.n	800180a <_dtoa_r+0xaba>
 8001804:	d1de      	bne.n	80017c4 <_dtoa_r+0xa74>
 8001806:	07da      	lsls	r2, r3, #31
 8001808:	d5dc      	bpl.n	80017c4 <_dtoa_r+0xa74>
 800180a:	2b39      	cmp	r3, #57	; 0x39
 800180c:	d1d8      	bne.n	80017c0 <_dtoa_r+0xa70>
 800180e:	2339      	movs	r3, #57	; 0x39
 8001810:	9a04      	ldr	r2, [sp, #16]
 8001812:	7013      	strb	r3, [r2, #0]
 8001814:	463b      	mov	r3, r7
 8001816:	461f      	mov	r7, r3
 8001818:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800181c:	3b01      	subs	r3, #1
 800181e:	2a39      	cmp	r2, #57	; 0x39
 8001820:	d050      	beq.n	80018c4 <_dtoa_r+0xb74>
 8001822:	3201      	adds	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e747      	b.n	80016b8 <_dtoa_r+0x968>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dd03      	ble.n	8001834 <_dtoa_r+0xae4>
 800182c:	2b39      	cmp	r3, #57	; 0x39
 800182e:	d0ee      	beq.n	800180e <_dtoa_r+0xabe>
 8001830:	3301      	adds	r3, #1
 8001832:	e7c7      	b.n	80017c4 <_dtoa_r+0xa74>
 8001834:	9a08      	ldr	r2, [sp, #32]
 8001836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001838:	f802 3c01 	strb.w	r3, [r2, #-1]
 800183c:	428a      	cmp	r2, r1
 800183e:	d02a      	beq.n	8001896 <_dtoa_r+0xb46>
 8001840:	4659      	mov	r1, fp
 8001842:	2300      	movs	r3, #0
 8001844:	220a      	movs	r2, #10
 8001846:	4628      	mov	r0, r5
 8001848:	f008 fb8a 	bl	8009f60 <__multadd>
 800184c:	45b0      	cmp	r8, r6
 800184e:	4683      	mov	fp, r0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	f04f 020a 	mov.w	r2, #10
 8001858:	4641      	mov	r1, r8
 800185a:	4628      	mov	r0, r5
 800185c:	d107      	bne.n	800186e <_dtoa_r+0xb1e>
 800185e:	f008 fb7f 	bl	8009f60 <__multadd>
 8001862:	4680      	mov	r8, r0
 8001864:	4606      	mov	r6, r0
 8001866:	9b08      	ldr	r3, [sp, #32]
 8001868:	3301      	adds	r3, #1
 800186a:	9308      	str	r3, [sp, #32]
 800186c:	e775      	b.n	800175a <_dtoa_r+0xa0a>
 800186e:	f008 fb77 	bl	8009f60 <__multadd>
 8001872:	4631      	mov	r1, r6
 8001874:	4680      	mov	r8, r0
 8001876:	2300      	movs	r3, #0
 8001878:	220a      	movs	r2, #10
 800187a:	4628      	mov	r0, r5
 800187c:	f008 fb70 	bl	8009f60 <__multadd>
 8001880:	4606      	mov	r6, r0
 8001882:	e7f0      	b.n	8001866 <_dtoa_r+0xb16>
 8001884:	f1b9 0f00 	cmp.w	r9, #0
 8001888:	bfcc      	ite	gt
 800188a:	464f      	movgt	r7, r9
 800188c:	2701      	movle	r7, #1
 800188e:	f04f 0800 	mov.w	r8, #0
 8001892:	9a03      	ldr	r2, [sp, #12]
 8001894:	4417      	add	r7, r2
 8001896:	4659      	mov	r1, fp
 8001898:	2201      	movs	r2, #1
 800189a:	4628      	mov	r0, r5
 800189c:	9308      	str	r3, [sp, #32]
 800189e:	f008 fcbd 	bl	800a21c <__lshift>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4683      	mov	fp, r0
 80018a6:	f00b fd4b 	bl	800d340 <__mcmp>
 80018aa:	2800      	cmp	r0, #0
 80018ac:	dcb2      	bgt.n	8001814 <_dtoa_r+0xac4>
 80018ae:	d102      	bne.n	80018b6 <_dtoa_r+0xb66>
 80018b0:	9b08      	ldr	r3, [sp, #32]
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d4ae      	bmi.n	8001814 <_dtoa_r+0xac4>
 80018b6:	463b      	mov	r3, r7
 80018b8:	461f      	mov	r7, r3
 80018ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80018be:	2a30      	cmp	r2, #48	; 0x30
 80018c0:	d0fa      	beq.n	80018b8 <_dtoa_r+0xb68>
 80018c2:	e6f9      	b.n	80016b8 <_dtoa_r+0x968>
 80018c4:	9a03      	ldr	r2, [sp, #12]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d1a5      	bne.n	8001816 <_dtoa_r+0xac6>
 80018ca:	2331      	movs	r3, #49	; 0x31
 80018cc:	f10a 0a01 	add.w	sl, sl, #1
 80018d0:	e779      	b.n	80017c6 <_dtoa_r+0xa76>
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <_dtoa_r+0xbd4>)
 80018d4:	f7ff baa8 	b.w	8000e28 <_dtoa_r+0xd8>
 80018d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f47f aa81 	bne.w	8000de2 <_dtoa_r+0x92>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_dtoa_r+0xbd8>)
 80018e2:	f7ff baa1 	b.w	8000e28 <_dtoa_r+0xd8>
 80018e6:	f1b9 0f00 	cmp.w	r9, #0
 80018ea:	dc03      	bgt.n	80018f4 <_dtoa_r+0xba4>
 80018ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	f73f aecb 	bgt.w	800168a <_dtoa_r+0x93a>
 80018f4:	9f03      	ldr	r7, [sp, #12]
 80018f6:	4621      	mov	r1, r4
 80018f8:	4658      	mov	r0, fp
 80018fa:	f00b fc3a 	bl	800d172 <quorem>
 80018fe:	9a03      	ldr	r2, [sp, #12]
 8001900:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001904:	f807 3b01 	strb.w	r3, [r7], #1
 8001908:	1aba      	subs	r2, r7, r2
 800190a:	4591      	cmp	r9, r2
 800190c:	ddba      	ble.n	8001884 <_dtoa_r+0xb34>
 800190e:	4659      	mov	r1, fp
 8001910:	2300      	movs	r3, #0
 8001912:	220a      	movs	r2, #10
 8001914:	4628      	mov	r0, r5
 8001916:	f008 fb23 	bl	8009f60 <__multadd>
 800191a:	4683      	mov	fp, r0
 800191c:	e7eb      	b.n	80018f6 <_dtoa_r+0xba6>
 800191e:	bf00      	nop
 8001920:	0800ec3f 	.word	0x0800ec3f
 8001924:	0800eb9d 	.word	0x0800eb9d
 8001928:	0800ebc1 	.word	0x0800ebc1

0800192c <read_write_message>:
        }
        k_sleep(K_MSEC(1));
    }
}

static void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	4607      	mov	r7, r0
 8001932:	460e      	mov	r6, r1
 8001934:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001936:	2400      	movs	r4, #0
 8001938:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800193c:	e008      	b.n	8001950 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800193e:	b1dd      	cbz	r5, 8001978 <read_write_message+0x4c>
 8001940:	f10d 0307 	add.w	r3, sp, #7
 8001944:	2202      	movs	r2, #2
 8001946:	7831      	ldrb	r1, [r6, #0]
 8001948:	4638      	mov	r0, r7
 800194a:	f009 fa20 	bl	800ad8e <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800194e:	3401      	adds	r4, #1
 8001950:	2c05      	cmp	r4, #5
 8001952:	dc6e      	bgt.n	8001a32 <read_write_message+0x106>
        switch (cur_field) {
 8001954:	2c05      	cmp	r4, #5
 8001956:	d8fa      	bhi.n	800194e <read_write_message+0x22>
 8001958:	a301      	add	r3, pc, #4	; (adr r3, 8001960 <read_write_message+0x34>)
 800195a:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 800195e:	bf00      	nop
 8001960:	0800193f 	.word	0x0800193f
 8001964:	08001989 	.word	0x08001989
 8001968:	080019ab 	.word	0x080019ab
 800196c:	080019cd 	.word	0x080019cd
 8001970:	080019ef 	.word	0x080019ef
 8001974:	08001a11 	.word	0x08001a11
                    extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001978:	f10d 0307 	add.w	r3, sp, #7
 800197c:	2202      	movs	r2, #2
 800197e:	4631      	mov	r1, r6
 8001980:	4638      	mov	r0, r7
 8001982:	f009 fa21 	bl	800adc8 <extract_msg_bit_field>
 8001986:	e7e2      	b.n	800194e <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001988:	b13d      	cbz	r5, 800199a <read_write_message+0x6e>
 800198a:	f10d 0307 	add.w	r3, sp, #7
 800198e:	2203      	movs	r2, #3
 8001990:	7871      	ldrb	r1, [r6, #1]
 8001992:	4638      	mov	r0, r7
 8001994:	f009 f9fb 	bl	800ad8e <fill_msg_bit_field>
 8001998:	e7d9      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 800199a:	f10d 0307 	add.w	r3, sp, #7
 800199e:	2203      	movs	r2, #3
 80019a0:	1c71      	adds	r1, r6, #1
 80019a2:	4638      	mov	r0, r7
 80019a4:	f009 fa10 	bl	800adc8 <extract_msg_bit_field>
 80019a8:	e7d1      	b.n	800194e <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 80019aa:	b13d      	cbz	r5, 80019bc <read_write_message+0x90>
 80019ac:	f10d 0307 	add.w	r3, sp, #7
 80019b0:	2204      	movs	r2, #4
 80019b2:	78b1      	ldrb	r1, [r6, #2]
 80019b4:	4638      	mov	r0, r7
 80019b6:	f009 f9ea 	bl	800ad8e <fill_msg_bit_field>
 80019ba:	e7c8      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 80019bc:	f10d 0307 	add.w	r3, sp, #7
 80019c0:	2204      	movs	r2, #4
 80019c2:	1cb1      	adds	r1, r6, #2
 80019c4:	4638      	mov	r0, r7
 80019c6:	f009 f9ff 	bl	800adc8 <extract_msg_bit_field>
 80019ca:	e7c0      	b.n	800194e <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 80019cc:	b13d      	cbz	r5, 80019de <read_write_message+0xb2>
 80019ce:	f10d 0307 	add.w	r3, sp, #7
 80019d2:	2201      	movs	r2, #1
 80019d4:	78f1      	ldrb	r1, [r6, #3]
 80019d6:	4638      	mov	r0, r7
 80019d8:	f009 f9d9 	bl	800ad8e <fill_msg_bit_field>
 80019dc:	e7b7      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 80019de:	f10d 0307 	add.w	r3, sp, #7
 80019e2:	2201      	movs	r2, #1
 80019e4:	1cf1      	adds	r1, r6, #3
 80019e6:	4638      	mov	r0, r7
 80019e8:	f009 f9ee 	bl	800adc8 <extract_msg_bit_field>
 80019ec:	e7af      	b.n	800194e <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 80019ee:	b13d      	cbz	r5, 8001a00 <read_write_message+0xd4>
 80019f0:	f10d 0307 	add.w	r3, sp, #7
 80019f4:	2201      	movs	r2, #1
 80019f6:	7931      	ldrb	r1, [r6, #4]
 80019f8:	4638      	mov	r0, r7
 80019fa:	f009 f9c8 	bl	800ad8e <fill_msg_bit_field>
 80019fe:	e7a6      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001a00:	f10d 0307 	add.w	r3, sp, #7
 8001a04:	2201      	movs	r2, #1
 8001a06:	1d31      	adds	r1, r6, #4
 8001a08:	4638      	mov	r0, r7
 8001a0a:	f009 f9dd 	bl	800adc8 <extract_msg_bit_field>
 8001a0e:	e79e      	b.n	800194e <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001a10:	b13d      	cbz	r5, 8001a22 <read_write_message+0xf6>
 8001a12:	f10d 0307 	add.w	r3, sp, #7
 8001a16:	2208      	movs	r2, #8
 8001a18:	7971      	ldrb	r1, [r6, #5]
 8001a1a:	4638      	mov	r0, r7
 8001a1c:	f009 f9b7 	bl	800ad8e <fill_msg_bit_field>
 8001a20:	e795      	b.n	800194e <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001a22:	f10d 0307 	add.w	r3, sp, #7
 8001a26:	2208      	movs	r2, #8
 8001a28:	1d71      	adds	r1, r6, #5
 8001a2a:	4638      	mov	r0, r7
 8001a2c:	f009 f9cc 	bl	800adc8 <extract_msg_bit_field>
 8001a30:	e78d      	b.n	800194e <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 8001a32:	b003      	add	sp, #12
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	bf00      	nop

08001a38 <periodic_timer_handler>:
        return LIGHT_UP_ZERO;
    }
}


void periodic_timer_handler(struct k_timer* tim) {
 8001a38:	b570      	push	{r4, r5, r6, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001a3a:	4c2b      	ldr	r4, [pc, #172]	; (8001ae8 <periodic_timer_handler+0xb0>)
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <periodic_timer_handler+0xb4>)
 8001a3e:	1ae4      	subs	r4, r4, r3
 8001a40:	08e4      	lsrs	r4, r4, #3
    LOG_DBG("Periodic timer handler");
 8001a42:	2604      	movs	r6, #4
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f366 0202 	bfi	r2, r6, #0, #3
 8001a4c:	f36f 02c5 	bfc	r2, #3, #3
 8001a50:	f364 128f 	bfi	r2, r4, #6, #10
 8001a54:	4d26      	ldr	r5, [pc, #152]	; (8001af0 <periodic_timer_handler+0xb8>)
 8001a56:	4629      	mov	r1, r5
 8001a58:	4826      	ldr	r0, [pc, #152]	; (8001af4 <periodic_timer_handler+0xbc>)
 8001a5a:	f001 fb27 	bl	80030ac <log_1>
    LOG_DBG("Take semaphore sem_lora_busy");
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f366 0202 	bfi	r2, r6, #0, #3
 8001a66:	f36f 02c5 	bfc	r2, #3, #3
 8001a6a:	f364 128f 	bfi	r2, r4, #6, #10
 8001a6e:	4629      	mov	r1, r5
 8001a70:	4821      	ldr	r0, [pc, #132]	; (8001af8 <periodic_timer_handler+0xc0>)
 8001a72:	f001 fb1b 	bl	80030ac <log_1>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
 8001a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7e:	481f      	ldr	r0, [pc, #124]	; (8001afc <periodic_timer_handler+0xc4>)
 8001a80:	f006 fb14 	bl	80080ac <z_impl_k_sem_take>
    if ( !k_sem_take(&sem_lora_busy, K_FOREVER) ) {
 8001a84:	b300      	cbz	r0, 8001ac8 <periodic_timer_handler+0x90>
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <periodic_timer_handler+0xb0>)
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <periodic_timer_handler+0xb4>)
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	08db      	lsrs	r3, r3, #3
        k_thread_suspend(recv_task_id);
    }
    LOG_DBG("Give semaphore sem_lora_busy");
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	2104      	movs	r1, #4
 8001a94:	f361 0202 	bfi	r2, r1, #0, #3
 8001a98:	f36f 02c5 	bfc	r2, #3, #3
 8001a9c:	f363 128f 	bfi	r2, r3, #6, #10
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4817      	ldr	r0, [pc, #92]	; (8001b00 <periodic_timer_handler+0xc8>)
 8001aa4:	f001 fb02 	bl	80030ac <log_1>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <periodic_timer_handler+0xc4>)
 8001aaa:	f006 fad7 	bl	800805c <z_impl_k_sem_give>
    k_sem_give(&sem_lora_busy);
#ifdef BASE_STATION
    static uint8_t count = 0;
    if (count == 10) {
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <periodic_timer_handler+0xcc>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b0a      	cmp	r3, #10
 8001ab4:	d00d      	beq.n	8001ad2 <periodic_timer_handler+0x9a>
        k_msgq_put(&msgq_tx_msg, &sync_msg, K_NO_WAIT);
        count = 0;
    }
    count++;
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <periodic_timer_handler+0xcc>)
 8001ab8:	7813      	ldrb	r3, [r2, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	7013      	strb	r3, [r2, #0]
#endif
    k_wakeup(send_task_id);
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <periodic_timer_handler+0xd0>)
 8001ac0:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001ac2:	f00b f86b 	bl	800cb9c <z_impl_k_wakeup>
}
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
        k_thread_suspend(recv_task_id);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <periodic_timer_handler+0xd4>)
 8001aca:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
 8001acc:	f006 fed4 	bl	8008878 <z_impl_k_thread_suspend>
}
 8001ad0:	e7d9      	b.n	8001a86 <periodic_timer_handler+0x4e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	490e      	ldr	r1, [pc, #56]	; (8001b10 <periodic_timer_handler+0xd8>)
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <periodic_timer_handler+0xdc>)
 8001ada:	f006 f937 	bl	8007d4c <z_impl_k_msgq_put>
        count = 0;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <periodic_timer_handler+0xcc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e7e7      	b.n	8001ab6 <periodic_timer_handler+0x7e>
 8001ae6:	bf00      	nop
 8001ae8:	0800d95c 	.word	0x0800d95c
 8001aec:	0800d954 	.word	0x0800d954
 8001af0:	0800dc38 	.word	0x0800dc38
 8001af4:	0800db38 	.word	0x0800db38
 8001af8:	0800db54 	.word	0x0800db54
 8001afc:	200008e8 	.word	0x200008e8
 8001b00:	0800db78 	.word	0x0800db78
 8001b04:	20000e60 	.word	0x20000e60
 8001b08:	0800dca8 	.word	0x0800dca8
 8001b0c:	0800dca4 	.word	0x0800dca4
 8001b10:	20000900 	.word	0x20000900
 8001b14:	20000434 	.word	0x20000434

08001b18 <system_init>:
void system_init() {
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	b084      	sub	sp, #16
    struct message_s sync_msg = {0};
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	9202      	str	r2, [sp, #8]
 8001b20:	f8ad 200c 	strh.w	r2, [sp, #12]
    lora_cfg.frequency = 433000000;
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <system_init+0xa8>)
 8001b26:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <system_init+0xac>)
 8001b28:	6019      	str	r1, [r3, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 8001b2a:	711a      	strb	r2, [r3, #4]
    lora_cfg.datarate = SF_10;
 8001b2c:	220a      	movs	r2, #10
 8001b2e:	715a      	strb	r2, [r3, #5]
    lora_cfg.preamble_len = 8;
 8001b30:	2208      	movs	r2, #8
 8001b32:	811a      	strh	r2, [r3, #8]
    lora_cfg.coding_rate = CR_4_5;
 8001b34:	2201      	movs	r2, #1
 8001b36:	719a      	strb	r2, [r3, #6]
    lora_cfg.tx_power = 5;
 8001b38:	2105      	movs	r1, #5
 8001b3a:	7299      	strb	r1, [r3, #10]
    lora_cfg.tx = true;
 8001b3c:	72da      	strb	r2, [r3, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001b3e:	4822      	ldr	r0, [pc, #136]	; (8001bc8 <system_init+0xb0>)
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <system_init+0xb4>)
 8001b42:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001b44:	f00a fdad 	bl	800c6a2 <z_device_ready>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d036      	beq.n	8001bba <system_init+0xa2>
 8001b4c:	2300      	movs	r3, #0
    if (!device_is_ready(lora_dev_ptr)) {
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d131      	bne.n	8001bb6 <system_init+0x9e>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <system_init+0xb4>)
 8001b54:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001b56:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4919      	ldr	r1, [pc, #100]	; (8001bc0 <system_init+0xa8>)
 8001b5c:	4798      	blx	r3
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	db29      	blt.n	8001bb6 <system_init+0x9e>
    k_timer_init(&periodic_timer, periodic_timer_handler, NULL);
 8001b62:	4c1b      	ldr	r4, [pc, #108]	; (8001bd0 <system_init+0xb8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <system_init+0xbc>)
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f00b f912 	bl	800cd92 <k_timer_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4611      	mov	r1, r2
 8001b72:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <system_init+0xc0>)
 8001b74:	f00a fe70 	bl	800c858 <z_impl_k_sem_init>
    sync_msg.receiver_addr = RECV_BROADCAST;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f88d 3009 	strb.w	r3, [sp, #9]
    sync_msg.sender_addr = cur_dev_addr;
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <system_init+0xc4>)
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	f88d 2008 	strb.w	r2, [sp, #8]
    sync_msg.message_type = MESSAGE_TYPE_SYNC;
 8001b86:	2209      	movs	r2, #9
 8001b88:	f88d 200a 	strb.w	r2, [sp, #10]
    sync_msg.direction = REQUEST;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f88d 200b 	strb.w	r2, [sp, #11]
    sync_msg.workers_in_safe_zone = 0;
 8001b92:	f88d 300d 	strb.w	r3, [sp, #13]
    sync_msg.battery_level = BATTERY_LEVEL_GOOD;
 8001b96:	f88d 300c 	strb.w	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	a902      	add	r1, sp, #8
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <system_init+0xc8>)
 8001ba2:	f006 f8d3 	bl	8007d4c <z_impl_k_msgq_put>
    k_timer_start(&periodic_timer, K_MSEC(4*SLOT_TIME_MSEC), K_MSEC(4*SLOT_TIME_MSEC));
 8001ba6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001baa:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 8001bac:	e9cd 2300 	strd	r2, r3, [sp]
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f007 f9f7 	bl	8008fa4 <z_impl_k_timer_start>
}
 8001bb6:	b004      	add	sp, #16
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	f06f 0312 	mvn.w	r3, #18
 8001bbe:	e7c6      	b.n	8001b4e <system_init+0x36>
 8001bc0:	200008d0 	.word	0x200008d0
 8001bc4:	19cf0e40 	.word	0x19cf0e40
 8001bc8:	0800d76c 	.word	0x0800d76c
 8001bcc:	200008dc 	.word	0x200008dc
 8001bd0:	200004b8 	.word	0x200004b8
 8001bd4:	08001a39 	.word	0x08001a39
 8001bd8:	200008e8 	.word	0x200008e8
 8001bdc:	20000294 	.word	0x20000294
 8001be0:	20000434 	.word	0x20000434

08001be4 <send_task>:
_Noreturn void send_task(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
    uint8_t tx_buf[MESSAGE_LEN_IN_BYTES] = {0};
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <send_task+0x164>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f88d 3016 	strb.w	r3, [sp, #22]
    struct message_s tx_msg = {0};
 8001bf6:	9303      	str	r3, [sp, #12]
 8001bf8:	f8ad 3010 	strh.w	r3, [sp, #16]
    volatile int rc = 0;
 8001bfc:	9302      	str	r3, [sp, #8]
    uint32_t new_msg = 0;
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	e079      	b.n	8001cf6 <send_task+0x112>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2300      	movs	r3, #0
 8001c06:	a903      	add	r1, sp, #12
 8001c08:	4850      	ldr	r0, [pc, #320]	; (8001d4c <send_task+0x168>)
 8001c0a:	f006 f8fb 	bl	8007e04 <z_impl_k_msgq_get>
 8001c0e:	e093      	b.n	8001d38 <send_task+0x154>
            k_thread_resume(recv_task_id);
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <send_task+0x16c>)
 8001c12:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_resume(thread);
 8001c14:	f006 fd82 	bl	800871c <z_impl_k_thread_resume>
	return z_impl_k_sleep(timeout);
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c20:	f006 ff7c 	bl	8008b1c <z_impl_k_sleep>
            continue;
 8001c24:	e067      	b.n	8001cf6 <send_task+0x112>
            tx_buf[i] = (new_msg & (0x000000FF << i*8) ) >> i*8;
 8001c26:	00e3      	lsls	r3, r4, #3
 8001c28:	20ff      	movs	r0, #255	; 0xff
 8001c2a:	4098      	lsls	r0, r3
 8001c2c:	9a01      	ldr	r2, [sp, #4]
 8001c2e:	4010      	ands	r0, r2
 8001c30:	40d8      	lsrs	r0, r3
 8001c32:	b2c0      	uxtb	r0, r0
 8001c34:	ab06      	add	r3, sp, #24
 8001c36:	eb03 0a04 	add.w	sl, r3, r4
 8001c3a:	f80a 0c04 	strb.w	r0, [sl, #-4]
            tx_buf[i] = reverse(tx_buf[i]);
 8001c3e:	f009 f8e3 	bl	800ae08 <reverse>
 8001c42:	f80a 0c04 	strb.w	r0, [sl, #-4]
        for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001c46:	3401      	adds	r4, #1
 8001c48:	b2e4      	uxtb	r4, r4
 8001c4a:	2c02      	cmp	r4, #2
 8001c4c:	d9eb      	bls.n	8001c26 <send_task+0x42>
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <send_task+0x170>)
 8001c50:	4a41      	ldr	r2, [pc, #260]	; (8001d58 <send_task+0x174>)
 8001c52:	1a9b      	subs	r3, r3, r2
 8001c54:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Take semaphore sem_lora_busy");
 8001c56:	2204      	movs	r2, #4
 8001c58:	f362 0702 	bfi	r7, r2, #0, #3
 8001c5c:	f36f 07c5 	bfc	r7, #3, #3
 8001c60:	f363 178f 	bfi	r7, r3, #6, #10
 8001c64:	463a      	mov	r2, r7
 8001c66:	4629      	mov	r1, r5
 8001c68:	483c      	ldr	r0, [pc, #240]	; (8001d5c <send_task+0x178>)
 8001c6a:	f001 fa1f 	bl	80030ac <log_1>
	return z_impl_k_sem_take(sem, timeout);
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	483a      	ldr	r0, [pc, #232]	; (8001d60 <send_task+0x17c>)
 8001c78:	f006 fa18 	bl	80080ac <z_impl_k_sem_take>
        if (!lora_cfg.tx) {
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <send_task+0x180>)
 8001c7e:	7adb      	ldrb	r3, [r3, #11]
 8001c80:	b943      	cbnz	r3, 8001c94 <send_task+0xb0>
            lora_cfg.tx = true;
 8001c82:	4938      	ldr	r1, [pc, #224]	; (8001d64 <send_task+0x180>)
 8001c84:	2301      	movs	r3, #1
 8001c86:	72cb      	strb	r3, [r1, #11]
            rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <send_task+0x184>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001c8c:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4798      	blx	r3
 8001c92:	9002      	str	r0, [sp, #8]
 8001c94:	4c2f      	ldr	r4, [pc, #188]	; (8001d54 <send_task+0x170>)
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <send_task+0x174>)
 8001c98:	1ae4      	subs	r4, r4, r3
 8001c9a:	08e4      	lsrs	r4, r4, #3
        LOG_DBG("Send message");
 8001c9c:	f04f 0a04 	mov.w	sl, #4
 8001ca0:	f36a 0802 	bfi	r8, sl, #0, #3
 8001ca4:	f36f 08c5 	bfc	r8, #3, #3
 8001ca8:	f364 188f 	bfi	r8, r4, #6, #10
 8001cac:	4642      	mov	r2, r8
 8001cae:	4629      	mov	r1, r5
 8001cb0:	482e      	ldr	r0, [pc, #184]	; (8001d6c <send_task+0x188>)
 8001cb2:	f001 f9fb 	bl	80030ac <log_1>
        rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001cb6:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <send_task+0x184>)
 8001cb8:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001cba:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	a905      	add	r1, sp, #20
 8001cc2:	4798      	blx	r3
 8001cc4:	9002      	str	r0, [sp, #8]
        LOG_DBG("Give semaphore sem_lora_busy");
 8001cc6:	f36a 0902 	bfi	r9, sl, #0, #3
 8001cca:	f36f 09c5 	bfc	r9, #3, #3
 8001cce:	f364 198f 	bfi	r9, r4, #6, #10
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	4826      	ldr	r0, [pc, #152]	; (8001d70 <send_task+0x18c>)
 8001cd8:	f001 f9e8 	bl	80030ac <log_1>
	z_impl_k_sem_give(sem);
 8001cdc:	4820      	ldr	r0, [pc, #128]	; (8001d60 <send_task+0x17c>)
 8001cde:	f006 f9bd 	bl	800805c <z_impl_k_sem_give>
        k_wakeup(recv_task_id);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <send_task+0x16c>)
 8001ce4:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001ce6:	f00a ff59 	bl	800cb9c <z_impl_k_wakeup>
	return z_impl_k_sleep(timeout);
 8001cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf2:	f006 ff13 	bl	8008b1c <z_impl_k_sleep>
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <send_task+0x170>)
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <send_task+0x174>)
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Check queues");
 8001cfe:	2204      	movs	r2, #4
 8001d00:	f362 0602 	bfi	r6, r2, #0, #3
 8001d04:	f36f 06c5 	bfc	r6, #3, #3
 8001d08:	f363 168f 	bfi	r6, r3, #6, #10
 8001d0c:	4d19      	ldr	r5, [pc, #100]	; (8001d74 <send_task+0x190>)
 8001d0e:	4632      	mov	r2, r6
 8001d10:	4629      	mov	r1, r5
 8001d12:	4819      	ldr	r0, [pc, #100]	; (8001d78 <send_task+0x194>)
 8001d14:	f001 f9ca 	bl	80030ac <log_1>
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <send_task+0x168>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ( k_msgq_num_used_get(&msgq_tx_msg_prio) ) {
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f af70 	bne.w	8001c02 <send_task+0x1e>
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <send_task+0x198>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        else if ( k_msgq_num_used_get(&msgq_tx_msg) ) {
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f43f af72 	beq.w	8001c10 <send_task+0x2c>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2300      	movs	r3, #0
 8001d30:	a903      	add	r1, sp, #12
 8001d32:	4812      	ldr	r0, [pc, #72]	; (8001d7c <send_task+0x198>)
 8001d34:	f006 f866 	bl	8007e04 <z_impl_k_msgq_get>
        read_write_message(&new_msg, &tx_msg, true);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	a903      	add	r1, sp, #12
 8001d3c:	a801      	add	r0, sp, #4
 8001d3e:	f7ff fdf5 	bl	800192c <read_write_message>
        for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001d42:	2400      	movs	r4, #0
 8001d44:	e781      	b.n	8001c4a <send_task+0x66>
 8001d46:	bf00      	nop
 8001d48:	0800da18 	.word	0x0800da18
 8001d4c:	20000468 	.word	0x20000468
 8001d50:	0800dca4 	.word	0x0800dca4
 8001d54:	0800d95c 	.word	0x0800d95c
 8001d58:	0800d954 	.word	0x0800d954
 8001d5c:	0800db54 	.word	0x0800db54
 8001d60:	200008e8 	.word	0x200008e8
 8001d64:	200008d0 	.word	0x200008d0
 8001d68:	200008dc 	.word	0x200008dc
 8001d6c:	0800dbb0 	.word	0x0800dbb0
 8001d70:	0800db78 	.word	0x0800db78
 8001d74:	0800dc68 	.word	0x0800dc68
 8001d78:	0800db9c 	.word	0x0800db9c
 8001d7c:	20000434 	.word	0x20000434

08001d80 <recv_task>:
_Noreturn void recv_task(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
    system_init();
 8001d84:	f7ff fec8 	bl	8001b18 <system_init>
    volatile int rc = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9307      	str	r3, [sp, #28]
    volatile uint32_t ticks = 0;
 8001d8c:	9306      	str	r3, [sp, #24]
    uint8_t rx_msg[MESSAGE_LEN_IN_BYTES] = {0};
 8001d8e:	4a48      	ldr	r2, [pc, #288]	; (8001eb0 <recv_task+0x130>)
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	f8ad 2014 	strh.w	r2, [sp, #20]
 8001d96:	f88d 3016 	strb.w	r3, [sp, #22]
    int16_t rssi = 0;
 8001d9a:	f8ad 3012 	strh.w	r3, [sp, #18]
    int8_t snr = 0;
 8001d9e:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8_t ind = 0;
 8001da2:	e041      	b.n	8001e28 <recv_task+0xa8>
        rc = lora_recv(lora_dev_ptr, rx_msg, MESSAGE_LEN_IN_BYTES, K_MSEC(ticks), &rssi, &snr);
 8001da4:	2100      	movs	r1, #0
 8001da6:	460a      	mov	r2, r1
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001da8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001dac:	ea4c 7c91 	orr.w	ip, ip, r1, lsr #30
 8001db0:	008b      	lsls	r3, r1, #2
 8001db2:	185b      	adds	r3, r3, r1
 8001db4:	eb42 020c 	adc.w	r2, r2, ip
 8001db8:	18db      	adds	r3, r3, r3
 8001dba:	4152      	adcs	r2, r2
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001dbc:	6881      	ldr	r1, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001dbe:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001dc2:	f10d 0111 	add.w	r1, sp, #17
 8001dc6:	9103      	str	r1, [sp, #12]
 8001dc8:	f10d 0112 	add.w	r1, sp, #18
 8001dcc:	9102      	str	r1, [sp, #8]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	a905      	add	r1, sp, #20
 8001dd6:	47c0      	blx	r8
 8001dd8:	9007      	str	r0, [sp, #28]
        if (rc > 0) {
 8001dda:	9b07      	ldr	r3, [sp, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	dd10      	ble.n	8001e02 <recv_task+0x82>
            k_msgq_put(&msgq_rx_msg, &rx_msg, K_NO_WAIT);
 8001de0:	f04f 0800 	mov.w	r8, #0
 8001de4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001de8:	4642      	mov	r2, r8
 8001dea:	464b      	mov	r3, r9
 8001dec:	a905      	add	r1, sp, #20
 8001dee:	4831      	ldr	r0, [pc, #196]	; (8001eb4 <recv_task+0x134>)
 8001df0:	f005 ffac 	bl	8007d4c <z_impl_k_msgq_put>
 8001df4:	4642      	mov	r2, r8
 8001df6:	464b      	mov	r3, r9
 8001df8:	f10d 0112 	add.w	r1, sp, #18
 8001dfc:	482e      	ldr	r0, [pc, #184]	; (8001eb8 <recv_task+0x138>)
 8001dfe:	f005 ffa5 	bl	8007d4c <z_impl_k_msgq_put>
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <recv_task+0x13c>)
 8001e04:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <recv_task+0x140>)
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Give semaphore sem_lora_busy");
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	f362 0602 	bfi	r6, r2, #0, #3
 8001e10:	f36f 06c5 	bfc	r6, #3, #3
 8001e14:	f363 168f 	bfi	r6, r3, #6, #10
 8001e18:	4632      	mov	r2, r6
 8001e1a:	4639      	mov	r1, r7
 8001e1c:	4829      	ldr	r0, [pc, #164]	; (8001ec4 <recv_task+0x144>)
 8001e1e:	f001 f945 	bl	80030ac <log_1>
	z_impl_k_sem_give(sem);
 8001e22:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <recv_task+0x148>)
 8001e24:	f006 f91a 	bl	800805c <z_impl_k_sem_give>
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <recv_task+0x13c>)
 8001e2a:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <recv_task+0x140>)
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Take semaphore sem_lora_busy");
 8001e30:	2204      	movs	r2, #4
 8001e32:	f362 0402 	bfi	r4, r2, #0, #3
 8001e36:	f36f 04c5 	bfc	r4, #3, #3
 8001e3a:	f363 148f 	bfi	r4, r3, #6, #10
 8001e3e:	4f23      	ldr	r7, [pc, #140]	; (8001ecc <recv_task+0x14c>)
 8001e40:	4622      	mov	r2, r4
 8001e42:	4639      	mov	r1, r7
 8001e44:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <recv_task+0x150>)
 8001e46:	f001 f931 	bl	80030ac <log_1>
	return z_impl_k_sem_take(sem, timeout);
 8001e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <recv_task+0x148>)
 8001e54:	f006 f92a 	bl	80080ac <z_impl_k_sem_take>
        if (lora_cfg.tx) {
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <recv_task+0x154>)
 8001e5a:	7adb      	ldrb	r3, [r3, #11]
 8001e5c:	b13b      	cbz	r3, 8001e6e <recv_task+0xee>
            lora_cfg.tx = false;
 8001e5e:	491d      	ldr	r1, [pc, #116]	; (8001ed4 <recv_task+0x154>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	72cb      	strb	r3, [r1, #11]
            lora_config(lora_dev_ptr, &lora_cfg);
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <recv_task+0x158>)
 8001e66:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001e68:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4798      	blx	r3
	return z_timeout_remaining(&timer->timeout);
 8001e6e:	481b      	ldr	r0, [pc, #108]	; (8001edc <recv_task+0x15c>)
 8001e70:	f00a ff43 	bl	800ccfa <z_timeout_remaining>
			return ((uint32_t)t) / (from_hz / to_hz);
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <recv_task+0x160>)
 8001e76:	fba3 3000 	umull	r3, r0, r3, r0
 8001e7a:	08c0      	lsrs	r0, r0, #3
        ticks = k_ticks_to_ms_floor32(k_timer_remaining_ticks(&periodic_timer));
 8001e7c:	9006      	str	r0, [sp, #24]
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <recv_task+0x13c>)
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <recv_task+0x140>)
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Start receiving");
 8001e86:	2204      	movs	r2, #4
 8001e88:	f362 0502 	bfi	r5, r2, #0, #3
 8001e8c:	f36f 05c5 	bfc	r5, #3, #3
 8001e90:	f363 158f 	bfi	r5, r3, #6, #10
 8001e94:	462a      	mov	r2, r5
 8001e96:	4639      	mov	r1, r7
 8001e98:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <recv_task+0x164>)
 8001e9a:	f001 f907 	bl	80030ac <log_1>
        rc = lora_recv(lora_dev_ptr, rx_msg, MESSAGE_LEN_IN_BYTES, K_MSEC(ticks), &rssi, &snr);
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <recv_task+0x158>)
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	9b06      	ldr	r3, [sp, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f43f af7d 	beq.w	8001da4 <recv_task+0x24>
 8001eaa:	9906      	ldr	r1, [sp, #24]
 8001eac:	2200      	movs	r2, #0
 8001eae:	e77b      	b.n	8001da8 <recv_task+0x28>
 8001eb0:	0800da18 	.word	0x0800da18
 8001eb4:	20000400 	.word	0x20000400
 8001eb8:	200003cc 	.word	0x200003cc
 8001ebc:	0800d95c 	.word	0x0800d95c
 8001ec0:	0800d954 	.word	0x0800d954
 8001ec4:	0800db78 	.word	0x0800db78
 8001ec8:	200008e8 	.word	0x200008e8
 8001ecc:	0800dc5c 	.word	0x0800dc5c
 8001ed0:	0800db54 	.word	0x0800db54
 8001ed4:	200008d0 	.word	0x200008d0
 8001ed8:	200008dc 	.word	0x200008dc
 8001edc:	200004b8 	.word	0x200004b8
 8001ee0:	cccccccd 	.word	0xcccccccd
 8001ee4:	0800dbc4 	.word	0x0800dbc4

08001ee8 <proc_task>:
_Noreturn void proc_task() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
    uint8_t rx_buf[MESSAGE_LEN_IN_BYTES] = {0};
 8001eec:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <proc_task+0xf0>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f88d 3016 	strb.w	r3, [sp, #22]
    int16_t rssi = 0;
 8001efa:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint32_t cur_msg = 0;
 8001efe:	9303      	str	r3, [sp, #12]
 8001f00:	e051      	b.n	8001fa6 <proc_task+0xbe>
                rx_buf[i] = reverse(rx_buf[i]);
 8001f02:	ab06      	add	r3, sp, #24
 8001f04:	eb03 0804 	add.w	r8, r3, r4
 8001f08:	f818 0c04 	ldrb.w	r0, [r8, #-4]
 8001f0c:	f008 ff7c 	bl	800ae08 <reverse>
 8001f10:	f808 0c04 	strb.w	r0, [r8, #-4]
                cur_msg |= (rx_buf[i]) << i*8;
 8001f14:	00e3      	lsls	r3, r4, #3
 8001f16:	4098      	lsls	r0, r3
 8001f18:	9b03      	ldr	r3, [sp, #12]
 8001f1a:	4318      	orrs	r0, r3
 8001f1c:	9003      	str	r0, [sp, #12]
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001f1e:	3401      	adds	r4, #1
 8001f20:	b2e4      	uxtb	r4, r4
 8001f22:	2c02      	cmp	r4, #2
 8001f24:	d9ed      	bls.n	8001f02 <proc_task+0x1a>
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <proc_task+0xf4>)
 8001f28:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <proc_task+0xf8>)
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	08db      	lsrs	r3, r3, #3
            LOG_DBG("Incoming packet...");
 8001f2e:	2204      	movs	r2, #4
 8001f30:	f362 0502 	bfi	r5, r2, #0, #3
 8001f34:	f36f 05c5 	bfc	r5, #3, #3
 8001f38:	f363 158f 	bfi	r5, r3, #6, #10
 8001f3c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001fe4 <proc_task+0xfc>
 8001f40:	462a      	mov	r2, r5
 8001f42:	4641      	mov	r1, r8
 8001f44:	4828      	ldr	r0, [pc, #160]	; (8001fe8 <proc_task+0x100>)
 8001f46:	f001 f8b1 	bl	80030ac <log_1>
            read_write_message(&cur_msg, &rx_msg, false); // rx_msg struct is fill
 8001f4a:	4c28      	ldr	r4, [pc, #160]	; (8001fec <proc_task+0x104>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4621      	mov	r1, r4
 8001f50:	a803      	add	r0, sp, #12
 8001f52:	f7ff fceb 	bl	800192c <read_write_message>
            if ( (rx_msg.receiver_addr != RECV_BROADCAST) && (rx_msg.receiver_addr != cur_dev_addr) ) {
 8001f56:	7862      	ldrb	r2, [r4, #1]
 8001f58:	b30a      	cbz	r2, 8001f9e <proc_task+0xb6>
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <proc_task+0x108>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d01d      	beq.n	8001f9e <proc_task+0xb6>
 8001f62:	4c1e      	ldr	r4, [pc, #120]	; (8001fdc <proc_task+0xf4>)
 8001f64:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <proc_task+0xf8>)
 8001f66:	1a64      	subs	r4, r4, r1
 8001f68:	08e4      	lsrs	r4, r4, #3
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg.receiver_addr, cur_dev_addr);
 8001f6a:	f04f 0904 	mov.w	r9, #4
 8001f6e:	f369 0602 	bfi	r6, r9, #0, #3
 8001f72:	f36f 06c5 	bfc	r6, #3, #3
 8001f76:	f364 168f 	bfi	r6, r4, #6, #10
 8001f7a:	f8ad 6000 	strh.w	r6, [sp]
 8001f7e:	4641      	mov	r1, r8
 8001f80:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <proc_task+0x10c>)
 8001f82:	f001 f82f 	bl	8002fe4 <log_3>
                LOG_DBG("Packet is filtered");
 8001f86:	f369 0702 	bfi	r7, r9, #0, #3
 8001f8a:	f36f 07c5 	bfc	r7, #3, #3
 8001f8e:	f364 178f 	bfi	r7, r4, #6, #10
 8001f92:	463a      	mov	r2, r7
 8001f94:	4641      	mov	r1, r8
 8001f96:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <proc_task+0x110>)
 8001f98:	f001 f888 	bl	80030ac <log_1>
                continue;
 8001f9c:	e003      	b.n	8001fa6 <proc_task+0xbe>
	return z_impl_k_sleep(timeout);
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f006 fdbb 	bl	8008b1c <z_impl_k_sleep>
	return msgq->max_msgs - msgq->used_msgs;
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <proc_task+0x114>)
 8001fa8:	6913      	ldr	r3, [r2, #16]
 8001faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fac:	1a9b      	subs	r3, r3, r2
        if ( k_msgq_num_free_get(&msgq_rx_msg) != QUEUE_LEN_IN_ELEMENTS ) {
 8001fae:	2b0a      	cmp	r3, #10
 8001fb0:	d0f5      	beq.n	8001f9e <proc_task+0xb6>
            k_msgq_get(&msgq_rx_msg, &rx_buf, K_NO_WAIT);
 8001fb2:	f04f 0800 	mov.w	r8, #0
 8001fb6:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001fba:	4642      	mov	r2, r8
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	a905      	add	r1, sp, #20
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <proc_task+0x114>)
 8001fc2:	f005 ff1f 	bl	8007e04 <z_impl_k_msgq_get>
 8001fc6:	4642      	mov	r2, r8
 8001fc8:	464b      	mov	r3, r9
 8001fca:	f10d 0112 	add.w	r1, sp, #18
 8001fce:	480c      	ldr	r0, [pc, #48]	; (8002000 <proc_task+0x118>)
 8001fd0:	f005 ff18 	bl	8007e04 <z_impl_k_msgq_get>
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	e7a4      	b.n	8001f22 <proc_task+0x3a>
 8001fd8:	0800da18 	.word	0x0800da18
 8001fdc:	0800d95c 	.word	0x0800d95c
 8001fe0:	0800d954 	.word	0x0800d954
 8001fe4:	0800dc50 	.word	0x0800dc50
 8001fe8:	0800dbd8 	.word	0x0800dbd8
 8001fec:	200008e0 	.word	0x200008e0
 8001ff0:	20000294 	.word	0x20000294
 8001ff4:	0800dbf0 	.word	0x0800dbf0
 8001ff8:	0800dc18 	.word	0x0800dc18
 8001ffc:	20000400 	.word	0x20000400
 8002000:	200003cc 	.word	0x200003cc

08002004 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8002004:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8002006:	680b      	ldr	r3, [r1, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800200c:	4b01      	ldr	r3, [pc, #4]	; (8002014 <char_out+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4798      	blx	r3
}
 8002012:	bd08      	pop	{r3, pc}
 8002014:	20000000 	.word	0x20000000

08002018 <__printk_hook_install>:
	_char_out = fn;
 8002018:	4b01      	ldr	r3, [pc, #4]	; (8002020 <__printk_hook_install+0x8>)
 800201a:	6018      	str	r0, [r3, #0]
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000000 	.word	0x20000000

08002024 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 8002024:	b500      	push	{lr}
 8002026:	b083      	sub	sp, #12
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 800202c:	2100      	movs	r1, #0
 800202e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 8002030:	a901      	add	r1, sp, #4
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <vprintk+0x1c>)
 8002034:	f000 fa2c 	bl	8002490 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 8002038:	b003      	add	sp, #12
 800203a:	f85d fb04 	ldr.w	pc, [sp], #4
 800203e:	bf00      	nop
 8002040:	08002005 	.word	0x08002005

08002044 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 8002044:	b510      	push	{r4, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 800204a:	9001      	str	r0, [sp, #4]
 800204c:	9102      	str	r1, [sp, #8]
 800204e:	2100      	movs	r1, #0
 8002050:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 8002052:	a901      	add	r1, sp, #4
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <vsnprintk+0x28>)
 8002056:	f000 fa1b 	bl	8002490 <cbvprintf>

	if (ctx.count < ctx.max) {
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	9a02      	ldr	r2, [sp, #8]
 800205e:	4293      	cmp	r3, r2
 8002060:	da01      	bge.n	8002066 <vsnprintk+0x22>
		str[ctx.count] = '\0';
 8002062:	2200      	movs	r2, #0
 8002064:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 8002066:	9803      	ldr	r0, [sp, #12]
 8002068:	b004      	add	sp, #16
 800206a:	bd10      	pop	{r4, pc}
 800206c:	0800ae2f 	.word	0x0800ae2f

08002070 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8002070:	4684      	mov	ip, r0
	const char *sp = *str;
 8002072:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 8002074:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 8002076:	e005      	b.n	8002084 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8002078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800207c:	3201      	adds	r2, #1
 800207e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002082:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8002084:	7813      	ldrb	r3, [r2, #0]
 8002086:	4904      	ldr	r1, [pc, #16]	; (8002098 <extract_decimal+0x28>)
 8002088:	5c59      	ldrb	r1, [r3, r1]
 800208a:	f011 0f04 	tst.w	r1, #4
 800208e:	d1f3      	bne.n	8002078 <extract_decimal+0x8>
	}
	*str = sp;
 8002090:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	0800ea8d 	.word	0x0800ea8d

0800209c <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	6003      	str	r3, [r0, #0]
 80020a6:	6043      	str	r3, [r0, #4]
 80020a8:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 80020aa:	784b      	ldrb	r3, [r1, #1]
 80020ac:	2b25      	cmp	r3, #37	; 0x25
 80020ae:	d002      	beq.n	80020b6 <extract_conversion+0x1a>
 80020b0:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 80020b2:	2501      	movs	r5, #1
 80020b4:	e01f      	b.n	80020f6 <extract_conversion+0x5a>
		conv->specifier = *sp++;
 80020b6:	1c88      	adds	r0, r1, #2
 80020b8:	70e3      	strb	r3, [r4, #3]
		return sp;
 80020ba:	e145      	b.n	8002348 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 80020bc:	7823      	ldrb	r3, [r4, #0]
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	7023      	strb	r3, [r4, #0]
		if (loop) {
 80020c4:	b1b5      	cbz	r5, 80020f4 <extract_conversion+0x58>
			++sp;
 80020c6:	3601      	adds	r6, #1
 80020c8:	e014      	b.n	80020f4 <extract_conversion+0x58>
			conv->flag_plus = true;
 80020ca:	7823      	ldrb	r3, [r4, #0]
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	7023      	strb	r3, [r4, #0]
			break;
 80020d2:	e7f7      	b.n	80020c4 <extract_conversion+0x28>
			conv->flag_space = true;
 80020d4:	7823      	ldrb	r3, [r4, #0]
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	7023      	strb	r3, [r4, #0]
			break;
 80020dc:	e7f2      	b.n	80020c4 <extract_conversion+0x28>
			conv->flag_hash = true;
 80020de:	7823      	ldrb	r3, [r4, #0]
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	7023      	strb	r3, [r4, #0]
			break;
 80020e6:	e7ed      	b.n	80020c4 <extract_conversion+0x28>
			conv->flag_zero = true;
 80020e8:	7823      	ldrb	r3, [r4, #0]
 80020ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ee:	7023      	strb	r3, [r4, #0]
			break;
 80020f0:	e7e8      	b.n	80020c4 <extract_conversion+0x28>
		switch (*sp) {
 80020f2:	2500      	movs	r5, #0
	} while (loop);
 80020f4:	b345      	cbz	r5, 8002148 <extract_conversion+0xac>
		switch (*sp) {
 80020f6:	7833      	ldrb	r3, [r6, #0]
 80020f8:	3b20      	subs	r3, #32
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d8f9      	bhi.n	80020f2 <extract_conversion+0x56>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <extract_conversion+0x68>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	080020d5 	.word	0x080020d5
 8002108:	080020f3 	.word	0x080020f3
 800210c:	080020f3 	.word	0x080020f3
 8002110:	080020df 	.word	0x080020df
 8002114:	080020f3 	.word	0x080020f3
 8002118:	080020f3 	.word	0x080020f3
 800211c:	080020f3 	.word	0x080020f3
 8002120:	080020f3 	.word	0x080020f3
 8002124:	080020f3 	.word	0x080020f3
 8002128:	080020f3 	.word	0x080020f3
 800212c:	080020f3 	.word	0x080020f3
 8002130:	080020cb 	.word	0x080020cb
 8002134:	080020f3 	.word	0x080020f3
 8002138:	080020bd 	.word	0x080020bd
 800213c:	080020f3 	.word	0x080020f3
 8002140:	080020f3 	.word	0x080020f3
 8002144:	080020e9 	.word	0x080020e9
	if (conv->flag_zero && conv->flag_dash) {
 8002148:	7823      	ldrb	r3, [r4, #0]
 800214a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800214e:	2b44      	cmp	r3, #68	; 0x44
 8002150:	d05f      	beq.n	8002212 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 8002152:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 8002154:	7823      	ldrb	r3, [r4, #0]
 8002156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215a:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 800215c:	7833      	ldrb	r3, [r6, #0]
 800215e:	2b2a      	cmp	r3, #42	; 0x2a
 8002160:	d05c      	beq.n	800221c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8002162:	a801      	add	r0, sp, #4
 8002164:	f7ff ff84 	bl	8002070 <extract_decimal>
	if (sp != wp) {
 8002168:	9b01      	ldr	r3, [sp, #4]
 800216a:	429e      	cmp	r6, r3
 800216c:	d00f      	beq.n	800218e <extract_conversion+0xf2>
		conv->width_present = true;
 800216e:	7823      	ldrb	r3, [r4, #0]
 8002170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002174:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8002176:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 800217e:	2800      	cmp	r0, #0
 8002180:	db54      	blt.n	800222c <extract_conversion+0x190>
 8002182:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8002184:	4313      	orrs	r3, r2
 8002186:	7822      	ldrb	r2, [r4, #0]
 8002188:	f363 0241 	bfi	r2, r3, #1, #1
 800218c:	7022      	strb	r2, [r4, #0]
	return sp;
 800218e:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8002190:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b2e      	cmp	r3, #46	; 0x2e
 8002196:	bf14      	ite	ne
 8002198:	2300      	movne	r3, #0
 800219a:	2301      	moveq	r3, #1
 800219c:	7862      	ldrb	r2, [r4, #1]
 800219e:	f363 0241 	bfi	r2, r3, #1, #1
 80021a2:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d043      	beq.n	8002230 <extract_conversion+0x194>
	++sp;
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	2b2a      	cmp	r3, #42	; 0x2a
 80021b2:	d03f      	beq.n	8002234 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 80021b4:	a801      	add	r0, sp, #4
 80021b6:	f7ff ff5b 	bl	8002070 <extract_decimal>
	conv->prec_value = prec;
 80021ba:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 80021bc:	7823      	ldrb	r3, [r4, #0]
 80021be:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 80021c2:	2800      	cmp	r0, #0
 80021c4:	db3e      	blt.n	8002244 <extract_conversion+0x1a8>
 80021c6:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	7822      	ldrb	r2, [r4, #0]
 80021cc:	f363 0241 	bfi	r2, r3, #1, #1
 80021d0:	7022      	strb	r2, [r4, #0]
	return sp;
 80021d2:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 80021d4:	7803      	ldrb	r3, [r0, #0]
 80021d6:	3b4c      	subs	r3, #76	; 0x4c
 80021d8:	2b2e      	cmp	r3, #46	; 0x2e
 80021da:	f200 809d 	bhi.w	8002318 <extract_conversion+0x27c>
 80021de:	e8df f003 	tbb	[pc, r3]
 80021e2:	9b90      	.short	0x9b90
 80021e4:	9b9b9b9b 	.word	0x9b9b9b9b
 80021e8:	9b9b9b9b 	.word	0x9b9b9b9b
 80021ec:	9b9b9b9b 	.word	0x9b9b9b9b
 80021f0:	9b9b9b9b 	.word	0x9b9b9b9b
 80021f4:	9b9b9b9b 	.word	0x9b9b9b9b
 80021f8:	9b9b9b9b 	.word	0x9b9b9b9b
 80021fc:	9b339b9b 	.word	0x9b339b9b
 8002200:	9b459b57 	.word	0x9b459b57
 8002204:	9b9b9b9b 	.word	0x9b9b9b9b
 8002208:	9b899b9b 	.word	0x9b899b9b
 800220c:	9b9b9b9b 	.word	0x9b9b9b9b
 8002210:	82          	.byte	0x82
 8002211:	00          	.byte	0x00
		conv->flag_zero = false;
 8002212:	7823      	ldrb	r3, [r4, #0]
 8002214:	f36f 1386 	bfc	r3, #6, #1
 8002218:	7023      	strb	r3, [r4, #0]
 800221a:	e79a      	b.n	8002152 <extract_conversion+0xb6>
		conv->width_star = true;
 800221c:	7863      	ldrb	r3, [r4, #1]
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8002224:	4633      	mov	r3, r6
 8002226:	3301      	adds	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	e7b1      	b.n	8002190 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 800222c:	2201      	movs	r2, #1
 800222e:	e7a9      	b.n	8002184 <extract_conversion+0xe8>
		return sp;
 8002230:	9801      	ldr	r0, [sp, #4]
 8002232:	e7cf      	b.n	80021d4 <extract_conversion+0x138>
		conv->prec_star = true;
 8002234:	7863      	ldrb	r3, [r4, #1]
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	7063      	strb	r3, [r4, #1]
		return ++sp;
 800223c:	4610      	mov	r0, r2
 800223e:	3001      	adds	r0, #1
 8002240:	9001      	str	r0, [sp, #4]
 8002242:	e7c7      	b.n	80021d4 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8002244:	2201      	movs	r2, #1
 8002246:	e7bf      	b.n	80021c8 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8002248:	1c42      	adds	r2, r0, #1
 800224a:	7843      	ldrb	r3, [r0, #1]
 800224c:	2b68      	cmp	r3, #104	; 0x68
 800224e:	d006      	beq.n	800225e <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8002250:	7863      	ldrb	r3, [r4, #1]
 8002252:	2102      	movs	r1, #2
 8002254:	f361 03c6 	bfi	r3, r1, #3, #4
 8002258:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 800225a:	4610      	mov	r0, r2
 800225c:	e01e      	b.n	800229c <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 800225e:	7863      	ldrb	r3, [r4, #1]
 8002260:	2201      	movs	r2, #1
 8002262:	f362 03c6 	bfi	r3, r2, #3, #4
 8002266:	7063      	strb	r3, [r4, #1]
			++sp;
 8002268:	3002      	adds	r0, #2
 800226a:	e017      	b.n	800229c <extract_conversion+0x200>
		if (*++sp == 'l') {
 800226c:	1c42      	adds	r2, r0, #1
 800226e:	7843      	ldrb	r3, [r0, #1]
 8002270:	2b6c      	cmp	r3, #108	; 0x6c
 8002272:	d006      	beq.n	8002282 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8002274:	7863      	ldrb	r3, [r4, #1]
 8002276:	2103      	movs	r1, #3
 8002278:	f361 03c6 	bfi	r3, r1, #3, #4
 800227c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 800227e:	4610      	mov	r0, r2
 8002280:	e00c      	b.n	800229c <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8002282:	7863      	ldrb	r3, [r4, #1]
 8002284:	2204      	movs	r2, #4
 8002286:	f362 03c6 	bfi	r3, r2, #3, #4
 800228a:	7063      	strb	r3, [r4, #1]
			++sp;
 800228c:	3002      	adds	r0, #2
 800228e:	e005      	b.n	800229c <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8002290:	7863      	ldrb	r3, [r4, #1]
 8002292:	2205      	movs	r2, #5
 8002294:	f362 03c6 	bfi	r3, r2, #3, #4
 8002298:	7063      	strb	r3, [r4, #1]
		++sp;
 800229a:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 800229c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80022a0:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 80022a2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80022a6:	2a37      	cmp	r2, #55	; 0x37
 80022a8:	d87d      	bhi.n	80023a6 <extract_conversion+0x30a>
 80022aa:	e8df f002 	tbb	[pc, r2]
 80022ae:	7c5e      	.short	0x7c5e
 80022b0:	5e5e7c7c 	.word	0x5e5e7c7c
 80022b4:	7c7c7c5e 	.word	0x7c7c7c5e
 80022b8:	7c7c7c7c 	.word	0x7c7c7c7c
 80022bc:	7c7c7c7c 	.word	0x7c7c7c7c
 80022c0:	7c7c7c7c 	.word	0x7c7c7c7c
 80022c4:	7c7c4f7c 	.word	0x7c7c4f7c
 80022c8:	7c7c7c7c 	.word	0x7c7c7c7c
 80022cc:	7c5e7c7c 	.word	0x7c5e7c7c
 80022d0:	5e5e3a4f 	.word	0x5e5e3a4f
 80022d4:	7c3a7c5e 	.word	0x7c3a7c5e
 80022d8:	657c7c7c 	.word	0x657c7c7c
 80022dc:	7c7c714f 	.word	0x7c7c714f
 80022e0:	7c4f7c71 	.word	0x7c4f7c71
 80022e4:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 80022e6:	7863      	ldrb	r3, [r4, #1]
 80022e8:	2206      	movs	r2, #6
 80022ea:	f362 03c6 	bfi	r3, r2, #3, #4
 80022ee:	7063      	strb	r3, [r4, #1]
		++sp;
 80022f0:	3001      	adds	r0, #1
		break;
 80022f2:	e7d3      	b.n	800229c <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 80022f4:	7863      	ldrb	r3, [r4, #1]
 80022f6:	2207      	movs	r2, #7
 80022f8:	f362 03c6 	bfi	r3, r2, #3, #4
 80022fc:	7063      	strb	r3, [r4, #1]
		++sp;
 80022fe:	3001      	adds	r0, #1
		break;
 8002300:	e7cc      	b.n	800229c <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8002302:	7863      	ldrb	r3, [r4, #1]
 8002304:	2208      	movs	r2, #8
 8002306:	f362 03c6 	bfi	r3, r2, #3, #4
 800230a:	7063      	strb	r3, [r4, #1]
		++sp;
 800230c:	3001      	adds	r0, #1
		conv->unsupported = true;
 800230e:	7823      	ldrb	r3, [r4, #0]
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	7023      	strb	r3, [r4, #0]
		break;
 8002316:	e7c1      	b.n	800229c <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8002318:	7863      	ldrb	r3, [r4, #1]
 800231a:	f36f 03c6 	bfc	r3, #3, #4
 800231e:	7063      	strb	r3, [r4, #1]
		break;
 8002320:	e7bc      	b.n	800229c <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8002322:	78a2      	ldrb	r2, [r4, #2]
 8002324:	2101      	movs	r1, #1
 8002326:	f361 0202 	bfi	r2, r1, #0, #3
 800232a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800232c:	7862      	ldrb	r2, [r4, #1]
 800232e:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8002332:	2a40      	cmp	r2, #64	; 0x40
 8002334:	d010      	beq.n	8002358 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8002336:	2b63      	cmp	r3, #99	; 0x63
 8002338:	d013      	beq.n	8002362 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 800233a:	7823      	ldrb	r3, [r4, #0]
 800233c:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8002340:	4315      	orrs	r5, r2
 8002342:	f365 0341 	bfi	r3, r5, #1, #1
 8002346:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8002348:	b002      	add	sp, #8
 800234a:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 800234c:	78a2      	ldrb	r2, [r4, #2]
 800234e:	2102      	movs	r1, #2
 8002350:	f361 0202 	bfi	r2, r1, #0, #3
 8002354:	70a2      	strb	r2, [r4, #2]
 8002356:	e7e9      	b.n	800232c <extract_conversion+0x290>
			conv->invalid = true;
 8002358:	7821      	ldrb	r1, [r4, #0]
 800235a:	f041 0101 	orr.w	r1, r1, #1
 800235e:	7021      	strb	r1, [r4, #0]
 8002360:	e7e9      	b.n	8002336 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8002362:	1e15      	subs	r5, r2, #0
 8002364:	bf18      	it	ne
 8002366:	2501      	movne	r5, #1
 8002368:	e7e7      	b.n	800233a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 800236a:	78a3      	ldrb	r3, [r4, #2]
 800236c:	2204      	movs	r2, #4
 800236e:	f362 0302 	bfi	r3, r2, #0, #3
 8002372:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8002374:	2501      	movs	r5, #1
			break;
 8002376:	e7e0      	b.n	800233a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002378:	78a3      	ldrb	r3, [r4, #2]
 800237a:	2203      	movs	r2, #3
 800237c:	f362 0302 	bfi	r3, r2, #0, #3
 8002380:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002382:	7863      	ldrb	r3, [r4, #1]
 8002384:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d1d6      	bne.n	800233a <extract_conversion+0x29e>
			unsupported = true;
 800238c:	2501      	movs	r5, #1
 800238e:	e7d4      	b.n	800233a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002390:	78a3      	ldrb	r3, [r4, #2]
 8002392:	2203      	movs	r2, #3
 8002394:	f362 0302 	bfi	r3, r2, #0, #3
 8002398:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 800239a:	7863      	ldrb	r3, [r4, #1]
 800239c:	f013 0f78 	tst.w	r3, #120	; 0x78
 80023a0:	d0cb      	beq.n	800233a <extract_conversion+0x29e>
			unsupported = true;
 80023a2:	2501      	movs	r5, #1
 80023a4:	e7c9      	b.n	800233a <extract_conversion+0x29e>
		conv->invalid = true;
 80023a6:	7823      	ldrb	r3, [r4, #0]
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	7023      	strb	r3, [r4, #0]
		break;
 80023ae:	e7c4      	b.n	800233a <extract_conversion+0x29e>

080023b0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b083      	sub	sp, #12
 80023b6:	4604      	mov	r4, r0
 80023b8:	460d      	mov	r5, r1
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	469a      	mov	sl, r3
 80023be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 80023c0:	78d3      	ldrb	r3, [r2, #3]
 80023c2:	4a32      	ldr	r2, [pc, #200]	; (800248c <encode_uint+0xdc>)
 80023c4:	f813 b002 	ldrb.w	fp, [r3, r2]
 80023c8:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 80023cc:	2b6f      	cmp	r3, #111	; 0x6f
 80023ce:	d00f      	beq.n	80023f0 <encode_uint+0x40>
 80023d0:	d906      	bls.n	80023e0 <encode_uint+0x30>
 80023d2:	2b70      	cmp	r3, #112	; 0x70
 80023d4:	d00f      	beq.n	80023f6 <encode_uint+0x46>
 80023d6:	2b78      	cmp	r3, #120	; 0x78
 80023d8:	d110      	bne.n	80023fc <encode_uint+0x4c>
		return 16;
 80023da:	f04f 0910 	mov.w	r9, #16
 80023de:	e023      	b.n	8002428 <encode_uint+0x78>
	switch (specifier) {
 80023e0:	2b58      	cmp	r3, #88	; 0x58
 80023e2:	d002      	beq.n	80023ea <encode_uint+0x3a>
 80023e4:	f04f 090a 	mov.w	r9, #10
 80023e8:	e01e      	b.n	8002428 <encode_uint+0x78>
		return 16;
 80023ea:	f04f 0910 	mov.w	r9, #16
 80023ee:	e01b      	b.n	8002428 <encode_uint+0x78>
		return 8;
 80023f0:	f04f 0908 	mov.w	r9, #8
 80023f4:	e018      	b.n	8002428 <encode_uint+0x78>
		return 16;
 80023f6:	f04f 0910 	mov.w	r9, #16
 80023fa:	e015      	b.n	8002428 <encode_uint+0x78>
	switch (specifier) {
 80023fc:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002400:	e012      	b.n	8002428 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	3230      	adds	r2, #48	; 0x30
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 800240c:	463a      	mov	r2, r7
 800240e:	4643      	mov	r3, r8
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe fa56 	bl	80008c4 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8002418:	42bc      	cmp	r4, r7
 800241a:	f175 0300 	sbcs.w	r3, r5, #0
 800241e:	d319      	bcc.n	8002454 <encode_uint+0xa4>
 8002420:	4556      	cmp	r6, sl
 8002422:	d917      	bls.n	8002454 <encode_uint+0xa4>
		value /= radix;
 8002424:	4604      	mov	r4, r0
 8002426:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8002428:	f04f 0800 	mov.w	r8, #0
 800242c:	464f      	mov	r7, r9
 800242e:	464a      	mov	r2, r9
 8002430:	4643      	mov	r3, r8
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe fa45 	bl	80008c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800243a:	2a09      	cmp	r2, #9
 800243c:	d9e1      	bls.n	8002402 <encode_uint+0x52>
 800243e:	f1bb 0f01 	cmp.w	fp, #1
 8002442:	d003      	beq.n	800244c <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8002444:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002446:	3257      	adds	r2, #87	; 0x57
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	e7dd      	b.n	8002408 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 800244c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800244e:	3237      	adds	r2, #55	; 0x37
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	e7d9      	b.n	8002408 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f013 0f20 	tst.w	r3, #32
 800245c:	d005      	beq.n	800246a <encode_uint+0xba>
		if (radix == 8) {
 800245e:	f1b9 0f08 	cmp.w	r9, #8
 8002462:	d006      	beq.n	8002472 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8002464:	f1b9 0f10 	cmp.w	r9, #16
 8002468:	d009      	beq.n	800247e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 800246a:	4630      	mov	r0, r6
 800246c:	b003      	add	sp, #12
 800246e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8002472:	9a01      	ldr	r2, [sp, #4]
 8002474:	7893      	ldrb	r3, [r2, #2]
 8002476:	f043 0308 	orr.w	r3, r3, #8
 800247a:	7093      	strb	r3, [r2, #2]
 800247c:	e7f5      	b.n	800246a <encode_uint+0xba>
			conv->altform_0c = true;
 800247e:	9a01      	ldr	r2, [sp, #4]
 8002480:	7893      	ldrb	r3, [r2, #2]
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	7093      	strb	r3, [r2, #2]
 8002488:	e7ef      	b.n	800246a <encode_uint+0xba>
 800248a:	bf00      	nop
 800248c:	0800ea8d 	.word	0x0800ea8d

08002490 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002494:	b091      	sub	sp, #68	; 0x44
 8002496:	4606      	mov	r6, r0
 8002498:	460d      	mov	r5, r1
 800249a:	4691      	mov	r9, r2
 800249c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 800249e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80024a0:	f899 0000 	ldrb.w	r0, [r9]
 80024a4:	2800      	cmp	r0, #0
 80024a6:	f000 82d5 	beq.w	8002a54 <cbvprintf+0x5c4>
		if (*fp != '%') {
 80024aa:	2825      	cmp	r0, #37	; 0x25
 80024ac:	d008      	beq.n	80024c0 <cbvprintf+0x30>
			OUTC(*fp++);
 80024ae:	f109 0901 	add.w	r9, r9, #1
 80024b2:	4629      	mov	r1, r5
 80024b4:	47b0      	blx	r6
 80024b6:	2800      	cmp	r0, #0
 80024b8:	f2c0 82cd 	blt.w	8002a56 <cbvprintf+0x5c6>
 80024bc:	3401      	adds	r4, #1
			continue;
 80024be:	e7ef      	b.n	80024a0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 80024c0:	2300      	movs	r3, #0
 80024c2:	9304      	str	r3, [sp, #16]
 80024c4:	9305      	str	r3, [sp, #20]
 80024c6:	9306      	str	r3, [sp, #24]
 80024c8:	9307      	str	r3, [sp, #28]
 80024ca:	9308      	str	r3, [sp, #32]
 80024cc:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 80024ce:	4649      	mov	r1, r9
 80024d0:	a806      	add	r0, sp, #24
 80024d2:	f7ff fde3 	bl	800209c <extract_conversion>
 80024d6:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 80024d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80024dc:	f013 0f01 	tst.w	r3, #1
 80024e0:	f000 8097 	beq.w	8002612 <cbvprintf+0x182>
			width = va_arg(ap, int);
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	9203      	str	r2, [sp, #12]
 80024ea:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 80024ec:	2f00      	cmp	r7, #0
 80024ee:	f2c0 8088 	blt.w	8002602 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 80024f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80024f6:	f013 0f04 	tst.w	r3, #4
 80024fa:	f000 809c 	beq.w	8002636 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 80024fe:	9b03      	ldr	r3, [sp, #12]
 8002500:	1d1a      	adds	r2, r3, #4
 8002502:	9203      	str	r2, [sp, #12]
 8002504:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8002508:	f1ba 0f00 	cmp.w	sl, #0
 800250c:	f2c0 808a 	blt.w	8002624 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8002514:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8002516:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800251a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 800251e:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8002522:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8002526:	2b01      	cmp	r3, #1
 8002528:	f000 808e 	beq.w	8002648 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 800252c:	2b02      	cmp	r3, #2
 800252e:	f000 80d3 	beq.w	80026d8 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8002532:	2b04      	cmp	r3, #4
 8002534:	f000 8124 	beq.w	8002780 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8002538:	2b03      	cmp	r3, #3
 800253a:	f000 813b 	beq.w	80027b4 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 800253e:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8002542:	f018 0b03 	ands.w	fp, r8, #3
 8002546:	f040 813b 	bne.w	80027c0 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 800254a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800254e:	3b25      	subs	r3, #37	; 0x25
 8002550:	2b53      	cmp	r3, #83	; 0x53
 8002552:	f200 81e6 	bhi.w	8002922 <cbvprintf+0x492>
 8002556:	e8df f013 	tbh	[pc, r3, lsl #1]
 800255a:	0140      	.short	0x0140
 800255c:	01e401e4 	.word	0x01e401e4
 8002560:	01e401e4 	.word	0x01e401e4
 8002564:	01e401e4 	.word	0x01e401e4
 8002568:	01e401e4 	.word	0x01e401e4
 800256c:	01e401e4 	.word	0x01e401e4
 8002570:	01e401e4 	.word	0x01e401e4
 8002574:	01e401e4 	.word	0x01e401e4
 8002578:	01e401e4 	.word	0x01e401e4
 800257c:	01e401e4 	.word	0x01e401e4
 8002580:	01e401e4 	.word	0x01e401e4
 8002584:	01e401e4 	.word	0x01e401e4
 8002588:	01e401e4 	.word	0x01e401e4
 800258c:	01e401e4 	.word	0x01e401e4
 8002590:	01e401e4 	.word	0x01e401e4
 8002594:	01e401e4 	.word	0x01e401e4
 8002598:	01e401e4 	.word	0x01e401e4
 800259c:	01e401e4 	.word	0x01e401e4
 80025a0:	01e401e4 	.word	0x01e401e4
 80025a4:	01e401e4 	.word	0x01e401e4
 80025a8:	01e401e4 	.word	0x01e401e4
 80025ac:	01e401e4 	.word	0x01e401e4
 80025b0:	01e401e4 	.word	0x01e401e4
 80025b4:	01e401e4 	.word	0x01e401e4
 80025b8:	01e401e4 	.word	0x01e401e4
 80025bc:	01e401e4 	.word	0x01e401e4
 80025c0:	01e40181 	.word	0x01e40181
 80025c4:	01e401e4 	.word	0x01e401e4
 80025c8:	01e401e4 	.word	0x01e401e4
 80025cc:	01e401e4 	.word	0x01e401e4
 80025d0:	01e401e4 	.word	0x01e401e4
 80025d4:	015e01e4 	.word	0x015e01e4
 80025d8:	01e40167 	.word	0x01e40167
 80025dc:	01e401e4 	.word	0x01e401e4
 80025e0:	016701e4 	.word	0x016701e4
 80025e4:	01e401e4 	.word	0x01e401e4
 80025e8:	01e401e4 	.word	0x01e401e4
 80025ec:	018101be 	.word	0x018101be
 80025f0:	01e401a2 	.word	0x01e401a2
 80025f4:	014d01e4 	.word	0x014d01e4
 80025f8:	018101e4 	.word	0x018101e4
 80025fc:	01e401e4 	.word	0x01e401e4
 8002600:	0181      	.short	0x0181
				conv->flag_dash = true;
 8002602:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 800260e:	427f      	negs	r7, r7
 8002610:	e76f      	b.n	80024f2 <cbvprintf+0x62>
		} else if (conv->width_present) {
 8002612:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db02      	blt.n	8002620 <cbvprintf+0x190>
		int width = -1;
 800261a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800261e:	e768      	b.n	80024f2 <cbvprintf+0x62>
			width = conv->width_value;
 8002620:	9f07      	ldr	r7, [sp, #28]
 8002622:	e766      	b.n	80024f2 <cbvprintf+0x62>
				conv->prec_present = false;
 8002624:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002628:	f36f 0341 	bfc	r3, #1, #1
 800262c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002630:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002634:	e76c      	b.n	8002510 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8002636:	f013 0f02 	tst.w	r3, #2
 800263a:	d002      	beq.n	8002642 <cbvprintf+0x1b2>
			precision = conv->prec_value;
 800263c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002640:	e766      	b.n	8002510 <cbvprintf+0x80>
		int precision = -1;
 8002642:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002646:	e763      	b.n	8002510 <cbvprintf+0x80>
			switch (length_mod) {
 8002648:	1ecb      	subs	r3, r1, #3
 800264a:	2b04      	cmp	r3, #4
 800264c:	d804      	bhi.n	8002658 <cbvprintf+0x1c8>
 800264e:	e8df f003 	tbb	[pc, r3]
 8002652:	1d0b      	.short	0x1d0b
 8002654:	3529      	.short	0x3529
 8002656:	35          	.byte	0x35
 8002657:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002658:	9b03      	ldr	r3, [sp, #12]
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	9203      	str	r2, [sp, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	17da      	asrs	r2, r3, #31
 8002662:	9304      	str	r3, [sp, #16]
 8002664:	9205      	str	r2, [sp, #20]
				break;
 8002666:	e006      	b.n	8002676 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002668:	9b03      	ldr	r3, [sp, #12]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	9203      	str	r2, [sp, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	17da      	asrs	r2, r3, #31
 8002672:	9304      	str	r3, [sp, #16]
 8002674:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8002676:	2901      	cmp	r1, #1
 8002678:	d028      	beq.n	80026cc <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 800267a:	2902      	cmp	r1, #2
 800267c:	f47f af5f 	bne.w	800253e <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002680:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002684:	17da      	asrs	r2, r3, #31
 8002686:	9304      	str	r3, [sp, #16]
 8002688:	9205      	str	r2, [sp, #20]
 800268a:	e758      	b.n	800253e <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 800268c:	9b03      	ldr	r3, [sp, #12]
 800268e:	3307      	adds	r3, #7
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	f103 0208 	add.w	r2, r3, #8
 8002698:	9203      	str	r2, [sp, #12]
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 800269e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80026a2:	e7e8      	b.n	8002676 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 80026a4:	9b03      	ldr	r3, [sp, #12]
 80026a6:	3307      	adds	r3, #7
 80026a8:	f023 0307 	bic.w	r3, r3, #7
 80026ac:	f103 0208 	add.w	r2, r3, #8
 80026b0:	9203      	str	r2, [sp, #12]
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 80026b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 80026ba:	e7dc      	b.n	8002676 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 80026bc:	9b03      	ldr	r3, [sp, #12]
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	9203      	str	r2, [sp, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	17da      	asrs	r2, r3, #31
				value->sint =
 80026c6:	9304      	str	r3, [sp, #16]
 80026c8:	9205      	str	r2, [sp, #20]
				break;
 80026ca:	e7d4      	b.n	8002676 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 80026cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80026d0:	9304      	str	r3, [sp, #16]
 80026d2:	2300      	movs	r3, #0
 80026d4:	9305      	str	r3, [sp, #20]
 80026d6:	e732      	b.n	800253e <cbvprintf+0xae>
			switch (length_mod) {
 80026d8:	1ecb      	subs	r3, r1, #3
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d804      	bhi.n	80026e8 <cbvprintf+0x258>
 80026de:	e8df f003 	tbb	[pc, r3]
 80026e2:	1f0b      	.short	0x1f0b
 80026e4:	4135      	.short	0x4135
 80026e6:	41          	.byte	0x41
 80026e7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 80026e8:	9b03      	ldr	r3, [sp, #12]
 80026ea:	1d1a      	adds	r2, r3, #4
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	9304      	str	r3, [sp, #16]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9305      	str	r3, [sp, #20]
				break;
 80026f6:	e01e      	b.n	8002736 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 80026f8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 80026fc:	2b63      	cmp	r3, #99	; 0x63
 80026fe:	d007      	beq.n	8002710 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002700:	9b03      	ldr	r3, [sp, #12]
 8002702:	1d1a      	adds	r2, r3, #4
 8002704:	9203      	str	r2, [sp, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9304      	str	r3, [sp, #16]
 800270a:	2300      	movs	r3, #0
 800270c:	9305      	str	r3, [sp, #20]
 800270e:	e012      	b.n	8002736 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	9203      	str	r2, [sp, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	9304      	str	r3, [sp, #16]
 800271a:	2300      	movs	r3, #0
 800271c:	9305      	str	r3, [sp, #20]
 800271e:	e00a      	b.n	8002736 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	3307      	adds	r3, #7
 8002724:	f023 0307 	bic.w	r3, r3, #7
 8002728:	f103 0208 	add.w	r2, r3, #8
 800272c:	9203      	str	r2, [sp, #12]
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002732:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8002736:	2901      	cmp	r1, #1
 8002738:	d01c      	beq.n	8002774 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 800273a:	2902      	cmp	r1, #2
 800273c:	f47f aeff 	bne.w	800253e <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002740:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002744:	9304      	str	r3, [sp, #16]
 8002746:	2300      	movs	r3, #0
 8002748:	9305      	str	r3, [sp, #20]
 800274a:	e6f8      	b.n	800253e <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	3307      	adds	r3, #7
 8002750:	f023 0307 	bic.w	r3, r3, #7
 8002754:	f103 0208 	add.w	r2, r3, #8
 8002758:	9203      	str	r2, [sp, #12]
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 800275e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002762:	e7e8      	b.n	8002736 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8002764:	9b03      	ldr	r3, [sp, #12]
 8002766:	1d1a      	adds	r2, r3, #4
 8002768:	9203      	str	r2, [sp, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
				value->uint =
 800276c:	9304      	str	r3, [sp, #16]
 800276e:	2300      	movs	r3, #0
 8002770:	9305      	str	r3, [sp, #20]
				break;
 8002772:	e7e0      	b.n	8002736 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8002774:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	2300      	movs	r3, #0
 800277c:	9305      	str	r3, [sp, #20]
 800277e:	e6de      	b.n	800253e <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002780:	2908      	cmp	r1, #8
 8002782:	d00b      	beq.n	800279c <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8002784:	9b03      	ldr	r3, [sp, #12]
 8002786:	3307      	adds	r3, #7
 8002788:	f023 0307 	bic.w	r3, r3, #7
 800278c:	f103 0208 	add.w	r2, r3, #8
 8002790:	9203      	str	r2, [sp, #12]
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800279a:	e6d0      	b.n	800253e <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 800279c:	9b03      	ldr	r3, [sp, #12]
 800279e:	3307      	adds	r3, #7
 80027a0:	f023 0307 	bic.w	r3, r3, #7
 80027a4:	f103 0208 	add.w	r2, r3, #8
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027b2:	e6c4      	b.n	800253e <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 80027b4:	9b03      	ldr	r3, [sp, #12]
 80027b6:	1d1a      	adds	r2, r3, #4
 80027b8:	9203      	str	r2, [sp, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	9304      	str	r3, [sp, #16]
 80027be:	e6be      	b.n	800253e <cbvprintf+0xae>
			OUTS(sp, fp);
 80027c0:	9f02      	ldr	r7, [sp, #8]
 80027c2:	463b      	mov	r3, r7
 80027c4:	464a      	mov	r2, r9
 80027c6:	4629      	mov	r1, r5
 80027c8:	4630      	mov	r0, r6
 80027ca:	f008 fc72 	bl	800b0b2 <outs>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	f2c0 8141 	blt.w	8002a56 <cbvprintf+0x5c6>
 80027d4:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 80027d6:	46b9      	mov	r9, r7
			continue;
 80027d8:	e662      	b.n	80024a0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 80027da:	4629      	mov	r1, r5
 80027dc:	2025      	movs	r0, #37	; 0x25
 80027de:	47b0      	blx	r6
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f2c0 8138 	blt.w	8002a56 <cbvprintf+0x5c6>
 80027e6:	3401      	adds	r4, #1
		char sign = 0;
 80027e8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80027ea:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80027ee:	f04f 0900 	mov.w	r9, #0
			break;
 80027f2:	e09b      	b.n	800292c <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 80027f4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 80027f8:	f1ba 0f00 	cmp.w	sl, #0
 80027fc:	db07      	blt.n	800280e <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 80027fe:	4651      	mov	r1, sl
 8002800:	4648      	mov	r0, r9
 8002802:	f00a fcaa 	bl	800d15a <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8002806:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 800280a:	46d8      	mov	r8, fp
			precision = -1;

			break;
 800280c:	e08e      	b.n	800292c <cbvprintf+0x49c>
				len = strlen(bps);
 800280e:	4648      	mov	r0, r9
 8002810:	f7fe fa95 	bl	8000d3e <strlen>
 8002814:	e7f7      	b.n	8002806 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002816:	9b04      	ldr	r3, [sp, #16]
 8002818:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 800281c:	46d8      	mov	r8, fp
			bpe = buf + 1;
 800281e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8002822:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8002826:	e081      	b.n	800292c <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002828:	f018 0f08 	tst.w	r8, #8
 800282c:	d105      	bne.n	800283a <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 800282e:	f018 0810 	ands.w	r8, r8, #16
 8002832:	d004      	beq.n	800283e <cbvprintf+0x3ae>
				sign = ' ';
 8002834:	f04f 0820 	mov.w	r8, #32
 8002838:	e001      	b.n	800283e <cbvprintf+0x3ae>
				sign = '+';
 800283a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 800283e:	9a04      	ldr	r2, [sp, #16]
 8002840:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8002842:	2b00      	cmp	r3, #0
 8002844:	db02      	blt.n	800284c <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8002846:	9204      	str	r2, [sp, #16]
 8002848:	9305      	str	r3, [sp, #20]
 800284a:	e008      	b.n	800285e <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 800284c:	4252      	negs	r2, r2
 800284e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002852:	9204      	str	r2, [sp, #16]
 8002854:	9305      	str	r3, [sp, #20]
				sign = '-';
 8002856:	f04f 082d 	mov.w	r8, #45	; 0x2d
 800285a:	e000      	b.n	800285e <cbvprintf+0x3ce>
		switch (conv->specifier) {
 800285c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 800285e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	ab0a      	add	r3, sp, #40	; 0x28
 8002866:	aa06      	add	r2, sp, #24
 8002868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800286c:	f7ff fda0 	bl	80023b0 <encode_uint>
 8002870:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8002872:	f1ba 0f00 	cmp.w	sl, #0
 8002876:	f2c0 8088 	blt.w	800298a <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 800287a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800287e:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8002882:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002886:	f36f 1286 	bfc	r2, #6, #1
 800288a:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 800288e:	459a      	cmp	sl, r3
 8002890:	d97e      	bls.n	8002990 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8002892:	ebaa 0303 	sub.w	r3, sl, r3
 8002896:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002898:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800289c:	e046      	b.n	800292c <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 800289e:	9804      	ldr	r0, [sp, #16]
 80028a0:	b928      	cbnz	r0, 80028ae <cbvprintf+0x41e>
		char sign = 0;
 80028a2:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 80028a4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002a5c <cbvprintf+0x5cc>
			bps = "(nil)";
 80028a8:	f1aa 0905 	sub.w	r9, sl, #5
 80028ac:	e03e      	b.n	800292c <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 80028ae:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	ab0a      	add	r3, sp, #40	; 0x28
 80028b6:	aa06      	add	r2, sp, #24
 80028b8:	2100      	movs	r1, #0
 80028ba:	f7ff fd79 	bl	80023b0 <encode_uint>
 80028be:	4681      	mov	r9, r0
				conv->altform_0c = true;
 80028c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80028c4:	f043 0310 	orr.w	r3, r3, #16
 80028c8:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 80028cc:	2378      	movs	r3, #120	; 0x78
 80028ce:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 80028d2:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 80028d4:	e7cd      	b.n	8002872 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 80028d6:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 80028d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80028dc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80028e0:	2b07      	cmp	r3, #7
 80028e2:	d806      	bhi.n	80028f2 <cbvprintf+0x462>
 80028e4:	e8df f003 	tbb	[pc, r3]
 80028e8:	0f0d0b04 	.word	0x0f0d0b04
 80028ec:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 80028f0:	6014      	str	r4, [r2, #0]
		char sign = 0;
 80028f2:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 80028f4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80028f8:	f04f 0900 	mov.w	r9, #0
}
 80028fc:	e016      	b.n	800292c <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 80028fe:	7014      	strb	r4, [r2, #0]
		break;
 8002900:	e7f7      	b.n	80028f2 <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8002902:	8014      	strh	r4, [r2, #0]
		break;
 8002904:	e7f5      	b.n	80028f2 <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8002906:	6014      	str	r4, [r2, #0]
		break;
 8002908:	e7f3      	b.n	80028f2 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 800290a:	17e3      	asrs	r3, r4, #31
 800290c:	6014      	str	r4, [r2, #0]
 800290e:	6053      	str	r3, [r2, #4]
		break;
 8002910:	e7ef      	b.n	80028f2 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8002912:	17e3      	asrs	r3, r4, #31
 8002914:	6014      	str	r4, [r2, #0]
 8002916:	6053      	str	r3, [r2, #4]
		break;
 8002918:	e7eb      	b.n	80028f2 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 800291a:	6014      	str	r4, [r2, #0]
		break;
 800291c:	e7e9      	b.n	80028f2 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 800291e:	6014      	str	r4, [r2, #0]
		break;
 8002920:	e7e7      	b.n	80028f2 <cbvprintf+0x462>
		switch (conv->specifier) {
 8002922:	46d8      	mov	r8, fp
 8002924:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002928:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 800292c:	f1b9 0f00 	cmp.w	r9, #0
 8002930:	f000 808d 	beq.w	8002a4e <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8002934:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002938:	f1b8 0f00 	cmp.w	r8, #0
 800293c:	d000      	beq.n	8002940 <cbvprintf+0x4b0>
			nj_len += 1U;
 800293e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002940:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8002944:	f011 0f10 	tst.w	r1, #16
 8002948:	d025      	beq.n	8002996 <cbvprintf+0x506>
			nj_len += 2U;
 800294a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 800294c:	9b07      	ldr	r3, [sp, #28]
 800294e:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002950:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002954:	d001      	beq.n	800295a <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8002956:	9a08      	ldr	r2, [sp, #32]
 8002958:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 800295a:	2f00      	cmp	r7, #0
 800295c:	dd31      	ble.n	80029c2 <cbvprintf+0x532>
			width -= (int)nj_len;
 800295e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002960:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002964:	f013 0f04 	tst.w	r3, #4
 8002968:	d12b      	bne.n	80029c2 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 800296a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800296e:	d017      	beq.n	80029a0 <cbvprintf+0x510>
					if (sign != 0) {
 8002970:	f1b8 0f00 	cmp.w	r8, #0
 8002974:	d017      	beq.n	80029a6 <cbvprintf+0x516>
						OUTC(sign);
 8002976:	4629      	mov	r1, r5
 8002978:	4640      	mov	r0, r8
 800297a:	47b0      	blx	r6
 800297c:	2800      	cmp	r0, #0
 800297e:	db6a      	blt.n	8002a56 <cbvprintf+0x5c6>
 8002980:	3401      	adds	r4, #1
						sign = 0;
 8002982:	46d8      	mov	r8, fp
					}
					pad = '0';
 8002984:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002988:	e00f      	b.n	80029aa <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 800298a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800298e:	e7cd      	b.n	800292c <cbvprintf+0x49c>
 8002990:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002994:	e7ca      	b.n	800292c <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8002996:	f011 0f08 	tst.w	r1, #8
 800299a:	d0d7      	beq.n	800294c <cbvprintf+0x4bc>
			nj_len += 1U;
 800299c:	3201      	adds	r2, #1
 800299e:	e7d5      	b.n	800294c <cbvprintf+0x4bc>
				char pad = ' ';
 80029a0:	f04f 0b20 	mov.w	fp, #32
 80029a4:	e001      	b.n	80029aa <cbvprintf+0x51a>
					pad = '0';
 80029a6:	f04f 0b30 	mov.w	fp, #48	; 0x30
 80029aa:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 80029ac:	1e5f      	subs	r7, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dd07      	ble.n	80029c2 <cbvprintf+0x532>
					OUTC(pad);
 80029b2:	4629      	mov	r1, r5
 80029b4:	4658      	mov	r0, fp
 80029b6:	47b0      	blx	r6
 80029b8:	2800      	cmp	r0, #0
 80029ba:	db4c      	blt.n	8002a56 <cbvprintf+0x5c6>
 80029bc:	3401      	adds	r4, #1
				while (width-- > 0) {
 80029be:	463b      	mov	r3, r7
 80029c0:	e7f4      	b.n	80029ac <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 80029c2:	f1b8 0f00 	cmp.w	r8, #0
 80029c6:	d005      	beq.n	80029d4 <cbvprintf+0x544>
			OUTC(sign);
 80029c8:	4629      	mov	r1, r5
 80029ca:	4640      	mov	r0, r8
 80029cc:	47b0      	blx	r6
 80029ce:	2800      	cmp	r0, #0
 80029d0:	db41      	blt.n	8002a56 <cbvprintf+0x5c6>
 80029d2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 80029d4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80029d8:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80029dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029e0:	4313      	orrs	r3, r2
 80029e2:	d005      	beq.n	80029f0 <cbvprintf+0x560>
				OUTC('0');
 80029e4:	4629      	mov	r1, r5
 80029e6:	2030      	movs	r0, #48	; 0x30
 80029e8:	47b0      	blx	r6
 80029ea:	2800      	cmp	r0, #0
 80029ec:	db33      	blt.n	8002a56 <cbvprintf+0x5c6>
 80029ee:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 80029f0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80029f4:	f013 0f10 	tst.w	r3, #16
 80029f8:	d006      	beq.n	8002a08 <cbvprintf+0x578>
				OUTC(conv->specifier);
 80029fa:	4629      	mov	r1, r5
 80029fc:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8002a00:	47b0      	blx	r6
 8002a02:	2800      	cmp	r0, #0
 8002a04:	db27      	blt.n	8002a56 <cbvprintf+0x5c6>
 8002a06:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002a08:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002a0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dd07      	ble.n	8002a22 <cbvprintf+0x592>
				OUTC('0');
 8002a12:	4629      	mov	r1, r5
 8002a14:	2030      	movs	r0, #48	; 0x30
 8002a16:	47b0      	blx	r6
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	db1c      	blt.n	8002a56 <cbvprintf+0x5c6>
 8002a1c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002a1e:	4643      	mov	r3, r8
 8002a20:	e7f3      	b.n	8002a0a <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8002a22:	4653      	mov	r3, sl
 8002a24:	464a      	mov	r2, r9
 8002a26:	4629      	mov	r1, r5
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f008 fb42 	bl	800b0b2 <outs>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	db11      	blt.n	8002a56 <cbvprintf+0x5c6>
 8002a32:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8002a34:	2f00      	cmp	r7, #0
 8002a36:	dd07      	ble.n	8002a48 <cbvprintf+0x5b8>
			OUTC(' ');
 8002a38:	4629      	mov	r1, r5
 8002a3a:	2020      	movs	r0, #32
 8002a3c:	47b0      	blx	r6
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	db09      	blt.n	8002a56 <cbvprintf+0x5c6>
 8002a42:	3401      	adds	r4, #1
			--width;
 8002a44:	3f01      	subs	r7, #1
 8002a46:	e7f5      	b.n	8002a34 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002a48:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002a4c:	e528      	b.n	80024a0 <cbvprintf+0x10>
 8002a4e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002a52:	e525      	b.n	80024a0 <cbvprintf+0x10>
		}
	}

	return count;
 8002a54:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8002a56:	b011      	add	sp, #68	; 0x44
 8002a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5c:	0800dcb1 	.word	0x0800dcb1

08002a60 <stm32l1_init>:
 * So the init priority has to be 0 (zero).
 *
 * @return 0
 */
static int stm32l1_init(const struct device *arg)
{
 8002a60:	b082      	sub	sp, #8
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002a62:	f04f 0210 	mov.w	r2, #16
 8002a66:	f3ef 8311 	mrs	r3, BASEPRI
 8002a6a:	f382 8812 	msr	BASEPRI_MAX, r2
 8002a6e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 2.1 MHz from MSI */
	SystemCoreClock = 2097000;
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <stm32l1_init+0x48>)
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	; (8002aac <stm32l1_init+0x4c>)
 8002a7e:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <stm32l1_init+0x50>)
 8002a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002a92:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <stm32l1_init+0x54>)
 8002a96:	6813      	ldr	r3, [r2, #0]
 8002a98:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aa0:	6013      	str	r3, [r2, #0]
	 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);

	return 0;
}
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	b002      	add	sp, #8
 8002aa6:	4770      	bx	lr
 8002aa8:	200000b0 	.word	0x200000b0
 8002aac:	001fff68 	.word	0x001fff68
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <is_rodata+0x18>)
 8002aba:	4298      	cmp	r0, r3
 8002abc:	d304      	bcc.n	8002ac8 <is_rodata+0x10>
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <is_rodata+0x1c>)
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	d303      	bcc.n	8002acc <is_rodata+0x14>
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	4770      	bx	lr
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4770      	bx	lr
 8002acc:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 8002ace:	4770      	bx	lr
 8002ad0:	0800d5c4 	.word	0x0800d5c4
 8002ad4:	0800ed04 	.word	0x0800ed04

08002ad8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8002ad8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <thread_set+0x1c>)
 8002adc:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002ade:	b118      	cbz	r0, 8002ae8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <thread_set+0x20>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8002ae4:	2b09      	cmp	r3, #9
 8002ae6:	dc00      	bgt.n	8002aea <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8002ae8:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8002aea:	4804      	ldr	r0, [pc, #16]	; (8002afc <thread_set+0x24>)
 8002aec:	f005 fab6 	bl	800805c <z_impl_k_sem_give>
}
 8002af0:	e7fa      	b.n	8002ae8 <thread_set+0x10>
 8002af2:	bf00      	nop
 8002af4:	2000093c 	.word	0x2000093c
 8002af8:	20000908 	.word	0x20000908
 8002afc:	2000049c 	.word	0x2000049c

08002b00 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8002b00:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8002b02:	4802      	ldr	r0, [pc, #8]	; (8002b0c <log_process_thread_timer_expiry_fn+0xc>)
 8002b04:	f005 faaa 	bl	800805c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8002b08:	bd08      	pop	{r3, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000049c 	.word	0x2000049c

08002b10 <next_pending>:
{
 8002b10:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <next_pending+0x10>)
 8002b14:	f008 faf8 	bl	800b108 <log_list_head_peek>
}
 8002b18:	3800      	subs	r0, #0
 8002b1a:	bf18      	it	ne
 8002b1c:	2001      	movne	r0, #1
 8002b1e:	bd08      	pop	{r3, pc}
 8002b20:	20000914 	.word	0x20000914

08002b24 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002b24:	b530      	push	{r4, r5, lr}
 8002b26:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8002b28:	2200      	movs	r2, #0
 8002b2a:	490f      	ldr	r1, [pc, #60]	; (8002b68 <enable_logger+0x44>)
 8002b2c:	480f      	ldr	r0, [pc, #60]	; (8002b6c <enable_logger+0x48>)
 8002b2e:	f00a f930 	bl	800cd92 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002b32:	4d0f      	ldr	r5, [pc, #60]	; (8002b70 <enable_logger+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	2300      	movs	r3, #0
 8002b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	9404      	str	r4, [sp, #16]
 8002b40:	230e      	movs	r3, #14
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	9402      	str	r4, [sp, #8]
 8002b46:	9401      	str	r4, [sp, #4]
 8002b48:	9400      	str	r4, [sp, #0]
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <enable_logger+0x50>)
 8002b4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b50:	4909      	ldr	r1, [pc, #36]	; (8002b78 <enable_logger+0x54>)
 8002b52:	4628      	mov	r0, r5
 8002b54:	f009 fe35 	bl	800c7c2 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002b58:	4908      	ldr	r1, [pc, #32]	; (8002b7c <enable_logger+0x58>)
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	f009 fe1d 	bl	800c79a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8002b60:	4620      	mov	r0, r4
 8002b62:	b009      	add	sp, #36	; 0x24
 8002b64:	bd30      	pop	{r4, r5, pc}
 8002b66:	bf00      	nop
 8002b68:	08002b01 	.word	0x08002b01
 8002b6c:	20000670 	.word	0x20000670
 8002b70:	200006a8 	.word	0x200006a8
 8002b74:	080031d5 	.word	0x080031d5
 8002b78:	20001ae0 	.word	0x20001ae0
 8002b7c:	0800dcb4 	.word	0x0800dcb4

08002b80 <z_log_get_s_mask>:
{
 8002b80:	b530      	push	{r4, r5, lr}
 8002b82:	4603      	mov	r3, r0
	uint32_t mask = 0U;
 8002b84:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8002b86:	4684      	mov	ip, r0
	bool arm = false;
 8002b88:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 8002b8a:	e001      	b.n	8002b90 <z_log_get_s_mask+0x10>
			arm = !arm;
 8002b8c:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 8002b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b94:	b1b2      	cbz	r2, 8002bc4 <z_log_get_s_mask+0x44>
 8002b96:	458c      	cmp	ip, r1
 8002b98:	d214      	bcs.n	8002bc4 <z_log_get_s_mask+0x44>
		if (curr == '%') {
 8002b9a:	2a25      	cmp	r2, #37	; 0x25
 8002b9c:	d0f6      	beq.n	8002b8c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 8002b9e:	2c00      	cmp	r4, #0
 8002ba0:	d0f6      	beq.n	8002b90 <z_log_get_s_mask+0x10>
 8002ba2:	4d09      	ldr	r5, [pc, #36]	; (8002bc8 <z_log_get_s_mask+0x48>)
 8002ba4:	f812 e005 	ldrb.w	lr, [r2, r5]
 8002ba8:	f01e 0f03 	tst.w	lr, #3
 8002bac:	d0f0      	beq.n	8002b90 <z_log_get_s_mask+0x10>
			if (curr == 's') {
 8002bae:	2a73      	cmp	r2, #115	; 0x73
 8002bb0:	d003      	beq.n	8002bba <z_log_get_s_mask+0x3a>
			arg++;
 8002bb2:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	e7ea      	b.n	8002b90 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	fa02 f20c 	lsl.w	r2, r2, ip
 8002bc0:	4310      	orrs	r0, r2
 8002bc2:	e7f6      	b.n	8002bb2 <z_log_get_s_mask+0x32>
}
 8002bc4:	bd30      	pop	{r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800ea8d 	.word	0x0800ea8d

08002bcc <log_core_init>:
{
 8002bcc:	b508      	push	{r3, lr}
	panic_mode = false;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <log_core_init+0x34>)
 8002bd2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <log_core_init+0x38>)
 8002bd6:	6013      	str	r3, [r2, #0]
		timestamp_func = default_lf_get_timestamp;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <log_core_init+0x3c>)
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <log_core_init+0x40>)
 8002bdc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8002bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be2:	f000 fd7d 	bl	80036e0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 8002be6:	f000 fb5b 	bl	80032a0 <log_msg_pool_init>
		log_list_init(&list);
 8002bea:	4809      	ldr	r0, [pc, #36]	; (8002c10 <log_core_init+0x44>)
 8002bec:	f008 fa7e 	bl	800b0ec <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	2228      	movs	r2, #40	; 0x28
 8002bf4:	4907      	ldr	r1, [pc, #28]	; (8002c14 <log_core_init+0x48>)
 8002bf6:	4808      	ldr	r0, [pc, #32]	; (8002c18 <log_core_init+0x4c>)
 8002bf8:	f009 fd80 	bl	800c6fc <k_mem_slab_init>
}
 8002bfc:	bd08      	pop	{r3, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000e62 	.word	0x20000e62
 8002c04:	2000090c 	.word	0x2000090c
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	0800b121 	.word	0x0800b121
 8002c10:	20000914 	.word	0x20000914
 8002c14:	20003b80 	.word	0x20003b80
 8002c18:	2000091c 	.word	0x2000091c

08002c1c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <log_init+0x64>)
 8002c1e:	f3bf 8f5b 	dmb	ish
 8002c22:	e853 2f00 	ldrex	r2, [r3]
 8002c26:	1c51      	adds	r1, r2, #1
 8002c28:	e843 1000 	strex	r0, r1, [r3]
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1f8      	bne.n	8002c22 <log_init+0x6>
 8002c30:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8002c34:	bb1a      	cbnz	r2, 8002c7e <log_init+0x62>
{
 8002c36:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8002c38:	2400      	movs	r4, #0
 8002c3a:	e009      	b.n	8002c50 <log_init+0x34>
					   backend->cb->ctx,
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <log_init+0x68>)
 8002c3e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002c42:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8002c44:	2204      	movs	r2, #4
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f000 fb05 	bl	8003258 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8002c4e:	3401      	adds	r4, #1
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <log_init+0x6c>)
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <log_init+0x68>)
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002c5a:	da0f      	bge.n	8002c7c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 8002c5c:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 8002c5e:	4d09      	ldr	r5, [pc, #36]	; (8002c84 <log_init+0x68>)
 8002c60:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8002c64:	7b2b      	ldrb	r3, [r5, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f1      	beq.n	8002c4e <log_init+0x32>
			if (backend->api->init != NULL) {
 8002c6a:	0123      	lsls	r3, r4, #4
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <log_init+0x68>)
 8002c6e:	58d3      	ldr	r3, [r2, r3]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0e2      	beq.n	8002c3c <log_init+0x20>
				backend->api->init(backend);
 8002c76:	4628      	mov	r0, r5
 8002c78:	4798      	blx	r3
 8002c7a:	e7df      	b.n	8002c3c <log_init+0x20>
}
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	4770      	bx	lr
 8002c80:	20000910 	.word	0x20000910
 8002c84:	0800d994 	.word	0x0800d994
 8002c88:	0800d9a4 	.word	0x0800d9a4

08002c8c <get_msg>:
{
 8002c8c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002c8e:	f04f 0310 	mov.w	r3, #16
 8002c92:	f3ef 8411 	mrs	r4, BASEPRI
 8002c96:	f383 8812 	msr	BASEPRI_MAX, r3
 8002c9a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 8002c9e:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <get_msg+0x24>)
 8002ca0:	f008 fa34 	bl	800b10c <log_list_head_get>
	__asm__ volatile(
 8002ca4:	f384 8811 	msr	BASEPRI, r4
 8002ca8:	f3bf 8f6f 	isb	sy
}
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000914 	.word	0x20000914

08002cb4 <z_log_notify_backend_enabled>:
{
 8002cb4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <z_log_notify_backend_enabled+0x18>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b11b      	cbz	r3, 8002cc4 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <z_log_notify_backend_enabled+0x18>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
}
 8002cc2:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <z_log_notify_backend_enabled+0x1c>)
 8002cc6:	f005 f9c9 	bl	800805c <z_impl_k_sem_give>
}
 8002cca:	e7f7      	b.n	8002cbc <z_log_notify_backend_enabled+0x8>
 8002ccc:	20000e61 	.word	0x20000e61
 8002cd0:	2000049c 	.word	0x2000049c

08002cd4 <z_log_dropped>:
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <z_log_dropped+0x1c>)
 8002cd6:	f3bf 8f5b 	dmb	ish
 8002cda:	e853 2f00 	ldrex	r2, [r3]
 8002cde:	3201      	adds	r2, #1
 8002ce0:	e843 2100 	strex	r1, r2, [r3]
 8002ce4:	2900      	cmp	r1, #0
 8002ce6:	d1f8      	bne.n	8002cda <z_log_dropped+0x6>
 8002ce8:	f3bf 8f5b 	dmb	ish
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000090c 	.word	0x2000090c

08002cf4 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <z_log_dropped_read_and_clear+0x1c>)
}
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f3bf 8f5b 	dmb	ish
 8002cfe:	e853 0f00 	ldrex	r0, [r3]
 8002d02:	e843 2100 	strex	r1, r2, [r3]
 8002d06:	2900      	cmp	r1, #0
 8002d08:	d1f9      	bne.n	8002cfe <z_log_dropped_read_and_clear+0xa>
 8002d0a:	f3bf 8f5b 	dmb	ish
 8002d0e:	4770      	bx	lr
 8002d10:	2000090c 	.word	0x2000090c

08002d14 <dropped_notify>:
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 8002d16:	f7ff ffed 	bl	8002cf4 <z_log_dropped_read_and_clear>
 8002d1a:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8002d1c:	2400      	movs	r4, #0
 8002d1e:	e000      	b.n	8002d22 <dropped_notify+0xe>
 8002d20:	3401      	adds	r4, #1
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <dropped_notify+0x3c>)
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <dropped_notify+0x40>)
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002d2c:	da0f      	bge.n	8002d4e <dropped_notify+0x3a>
 8002d2e:	4809      	ldr	r0, [pc, #36]	; (8002d54 <dropped_notify+0x40>)
 8002d30:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8002d34:	6843      	ldr	r3, [r0, #4]
 8002d36:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f1      	beq.n	8002d20 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8002d3c:	0123      	lsls	r3, r4, #4
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <dropped_notify+0x40>)
 8002d40:	58d3      	ldr	r3, [r2, r3]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0eb      	beq.n	8002d20 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4798      	blx	r3
 8002d4c:	e7e8      	b.n	8002d20 <dropped_notify+0xc>
}
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	0800d9a4 	.word	0x0800d9a4
 8002d54:	0800d994 	.word	0x0800d994

08002d58 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <z_log_dropped_pending+0x10>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
}
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	bfd4      	ite	le
 8002d60:	2000      	movle	r0, #0
 8002d62:	2001      	movgt	r0, #1
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000090c 	.word	0x2000090c

08002d6c <z_log_strdup>:
{
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
 8002d72:	f7ff fea1 	bl	8002ab8 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 8002d76:	bb10      	cbnz	r0, 8002dbe <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	a901      	add	r1, sp, #4
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <z_log_strdup+0x58>)
 8002d80:	f004 ff30 	bl	8007be4 <k_mem_slab_alloc>
	if (err != 0) {
 8002d84:	b108      	cbz	r0, 8002d8a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 8002d86:	4c10      	ldr	r4, [pc, #64]	; (8002dc8 <z_log_strdup+0x5c>)
 8002d88:	e019      	b.n	8002dbe <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 8002d8a:	9b01      	ldr	r3, [sp, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f3bf 8f5b 	dmb	ish
 8002d92:	e853 1f00 	ldrex	r1, [r3]
 8002d96:	e843 2000 	strex	r0, r2, [r3]
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d1f9      	bne.n	8002d92 <z_log_strdup+0x26>
 8002d9e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 8002da2:	9d01      	ldr	r5, [sp, #4]
 8002da4:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 8002da6:	221f      	movs	r2, #31
 8002da8:	4621      	mov	r1, r4
 8002daa:	4630      	mov	r0, r6
 8002dac:	f00a f9c2 	bl	800d134 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8002db0:	237e      	movs	r3, #126	; 0x7e
 8002db2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 8002db6:	2300      	movs	r3, #0
 8002db8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
 8002dbc:	4634      	mov	r4, r6
}
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	2000091c 	.word	0x2000091c
 8002dc8:	0800dcbc 	.word	0x0800dcbc

08002dcc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8002dcc:	b138      	cbz	r0, 8002dde <log_is_strdup+0x12>
 8002dce:	4a07      	ldr	r2, [pc, #28]	; (8002dec <log_is_strdup+0x20>)
 8002dd0:	4290      	cmp	r0, r2
 8002dd2:	d306      	bcc.n	8002de2 <log_is_strdup+0x16>
 8002dd4:	32a0      	adds	r2, #160	; 0xa0
 8002dd6:	4290      	cmp	r0, r2
 8002dd8:	d305      	bcc.n	8002de6 <log_is_strdup+0x1a>
 8002dda:	2000      	movs	r0, #0
 8002ddc:	4770      	bx	lr
 8002dde:	2000      	movs	r0, #0
 8002de0:	4770      	bx	lr
 8002de2:	2000      	movs	r0, #0
 8002de4:	4770      	bx	lr
 8002de6:	2001      	movs	r0, #1
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20003b80 	.word	0x20003b80

08002df0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8002df0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 8002df2:	f013 0f01 	tst.w	r3, #1
 8002df6:	d000      	beq.n	8002dfa <detect_missed_strdup+0xa>
 8002df8:	4770      	bx	lr
{
 8002dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 8002e02:	f008 fa2a 	bl	800b25a <log_msg_str_get>
 8002e06:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f008 fa11 	bl	800b230 <log_msg_nargs_get>
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4638      	mov	r0, r7
 8002e12:	f7ff feb5 	bl	8002b80 <z_log_get_s_mask>
 8002e16:	4605      	mov	r5, r0
	while (mask) {
 8002e18:	e004      	b.n	8002e24 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f404 	lsl.w	r4, r2, r4
 8002e20:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 8002e24:	b36d      	cbz	r5, 8002e82 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 8002e26:	fab5 f485 	clz	r4, r5
 8002e2a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8002e2e:	4621      	mov	r1, r4
 8002e30:	4630      	mov	r0, r6
 8002e32:	f008 fa00 	bl	800b236 <log_msg_arg_get>
 8002e36:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8002e38:	f7ff fe3e 	bl	8002ab8 <is_rodata>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d1ec      	bne.n	8002e1a <detect_missed_strdup+0x2a>
 8002e40:	4648      	mov	r0, r9
 8002e42:	f7ff ffc3 	bl	8002dcc <log_is_strdup>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d1e7      	bne.n	8002e1a <detect_missed_strdup+0x2a>
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <detect_missed_strdup+0x98>)
 8002e4c:	4599      	cmp	r9, r3
 8002e4e:	d0e4      	beq.n	8002e1a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 8002e50:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 8002e52:	f3c1 1189 	ubfx	r1, r1, #6, #10
 8002e56:	f000 f9ef 	bl	8003238 <log_source_name_get>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <detect_missed_strdup+0x9c>)
 8002e5e:	490c      	ldr	r1, [pc, #48]	; (8002e90 <detect_missed_strdup+0xa0>)
 8002e60:	1a5b      	subs	r3, r3, r1
 8002e62:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 8002e64:	2101      	movs	r1, #1
 8002e66:	f361 0802 	bfi	r8, r1, #0, #3
 8002e6a:	f36f 08c5 	bfc	r8, #3, #3
 8002e6e:	f363 188f 	bfi	r8, r3, #6, #10
 8002e72:	f8ad 8000 	strh.w	r8, [sp]
 8002e76:	463b      	mov	r3, r7
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4806      	ldr	r0, [pc, #24]	; (8002e94 <detect_missed_strdup+0xa4>)
 8002e7c:	f000 f8b2 	bl	8002fe4 <log_3>
 8002e80:	e7cb      	b.n	8002e1a <detect_missed_strdup+0x2a>
}
 8002e82:	b003      	add	sp, #12
 8002e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e88:	0800dcbc 	.word	0x0800dcbc
 8002e8c:	0800d954 	.word	0x0800d954
 8002e90:	0800d954 	.word	0x0800d954
 8002e94:	0800dcd8 	.word	0x0800dcd8

08002e98 <msg_process>:
{
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	4606      	mov	r6, r0
	if (!bypass) {
 8002e9c:	bb19      	cbnz	r1, 8002ee6 <msg_process+0x4e>
		    !panic_mode) {
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <msg_process+0x58>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
 8002ea2:	b10b      	cbz	r3, 8002ea8 <msg_process+0x10>
{
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	e003      	b.n	8002eb0 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
 8002ea8:	f7ff ffa2 	bl	8002df0 <detect_missed_strdup>
 8002eac:	e7fa      	b.n	8002ea4 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8002eae:	3401      	adds	r4, #1
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <msg_process+0x5c>)
 8002eb2:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <msg_process+0x60>)
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8002eba:	da14      	bge.n	8002ee6 <msg_process+0x4e>
	return &__log_backends_start[idx];
 8002ebc:	4d0e      	ldr	r5, [pc, #56]	; (8002ef8 <msg_process+0x60>)
 8002ebe:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 8002ec2:	686b      	ldr	r3, [r5, #4]
 8002ec4:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f1      	beq.n	8002eae <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f008 f925 	bl	800b11c <msg_filter_check>
			if (log_backend_is_active(backend) &&
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	d0eb      	beq.n	8002eae <msg_process+0x16>
	backend->api->put(backend, msg);
 8002ed6:	0127      	lsls	r7, r4, #4
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <msg_process+0x60>)
 8002eda:	59db      	ldr	r3, [r3, r7]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4631      	mov	r1, r6
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	4798      	blx	r3
}
 8002ee4:	e7e3      	b.n	8002eae <msg_process+0x16>
			log_msg_put(msg.msg);
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f008 f9b9 	bl	800b25e <log_msg_put>
}
 8002eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000e62 	.word	0x20000e62
 8002ef4:	0800d9a4 	.word	0x0800d9a4
 8002ef8:	0800d994 	.word	0x0800d994

08002efc <z_impl_log_process>:
{
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <z_impl_log_process+0x48>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b903      	cbnz	r3, 8002f08 <z_impl_log_process+0xc>
 8002f06:	b1c8      	cbz	r0, 8002f3c <z_impl_log_process+0x40>
	msg = get_msg();
 8002f08:	f7ff fec0 	bl	8002c8c <get_msg>
	if (msg.msg) {
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	b178      	cbz	r0, 8002f30 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <z_impl_log_process+0x4c>)
 8002f12:	f3bf 8f5b 	dmb	ish
 8002f16:	e853 1f00 	ldrex	r1, [r3]
 8002f1a:	3901      	subs	r1, #1
 8002f1c:	e843 1000 	strex	r0, r1, [r3]
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d1f8      	bne.n	8002f16 <z_impl_log_process+0x1a>
 8002f24:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8002f28:	4621      	mov	r1, r4
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7ff ffb4 	bl	8002e98 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8002f30:	b914      	cbnz	r4, 8002f38 <z_impl_log_process+0x3c>
 8002f32:	f7ff ff11 	bl	8002d58 <z_log_dropped_pending>
 8002f36:	b910      	cbnz	r0, 8002f3e <z_impl_log_process+0x42>
	return next_pending();
 8002f38:	f7ff fdea 	bl	8002b10 <next_pending>
}
 8002f3c:	bd10      	pop	{r4, pc}
		dropped_notify();
 8002f3e:	f7ff fee9 	bl	8002d14 <dropped_notify>
 8002f42:	e7f9      	b.n	8002f38 <z_impl_log_process+0x3c>
 8002f44:	20000e61 	.word	0x20000e61
 8002f48:	20000908 	.word	0x20000908

08002f4c <z_log_msg_post_finalize>:
{
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <z_log_msg_post_finalize+0x84>)
 8002f52:	f3bf 8f5b 	dmb	ish
 8002f56:	e853 2f00 	ldrex	r2, [r3]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	e843 2100 	strex	r1, r2, [r3]
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d1f8      	bne.n	8002f56 <z_log_msg_post_finalize+0xa>
 8002f64:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <z_log_msg_post_finalize+0x88>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b963      	cbnz	r3, 8002f88 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <z_log_msg_post_finalize+0x8c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b11b      	cbz	r3, 8002f7c <z_log_msg_post_finalize+0x30>
 8002f74:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <z_log_msg_post_finalize+0x84>)
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	2a01      	cmp	r2, #1
 8002f7a:	d015      	beq.n	8002fa8 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8002f7c:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <z_log_msg_post_finalize+0x84>)
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	2a0a      	cmp	r2, #10
 8002f82:	d01c      	beq.n	8002fbe <z_log_msg_post_finalize+0x72>
}
 8002f84:	b002      	add	sp, #8
 8002f86:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8002f88:	f04f 0310 	mov.w	r3, #16
 8002f8c:	f3ef 8411 	mrs	r4, BASEPRI
 8002f90:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f94:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7ff ffaf 	bl	8002efc <z_impl_log_process>
	__asm__ volatile(
 8002f9e:	f384 8811 	msr	BASEPRI, r4
 8002fa2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 8002fa6:	e7ed      	b.n	8002f84 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2300      	movs	r3, #0
 8002fac:	e9cd 2300 	strd	r2, r3, [sp]
 8002fb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4809      	ldr	r0, [pc, #36]	; (8002fdc <z_log_msg_post_finalize+0x90>)
 8002fb8:	f005 fff4 	bl	8008fa4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8002fbc:	e7e2      	b.n	8002f84 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0e0      	beq.n	8002f84 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <z_log_msg_post_finalize+0x90>)
 8002fc4:	f009 fef1 	bl	800cdaa <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8002fc8:	4805      	ldr	r0, [pc, #20]	; (8002fe0 <z_log_msg_post_finalize+0x94>)
 8002fca:	f005 f847 	bl	800805c <z_impl_k_sem_give>
}
 8002fce:	e7d9      	b.n	8002f84 <z_log_msg_post_finalize+0x38>
 8002fd0:	20000908 	.word	0x20000908
 8002fd4:	20000e62 	.word	0x20000e62
 8002fd8:	2000093c 	.word	0x2000093c
 8002fdc:	20000670 	.word	0x20000670
 8002fe0:	2000049c 	.word	0x2000049c

08002fe4 <log_3>:
{
 8002fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe8:	4680      	mov	r8, r0
 8002fea:	460f      	mov	r7, r1
 8002fec:	4616      	mov	r6, r2
 8002fee:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8002ff0:	f000 f97a 	bl	80032e8 <log_msg_chunk_alloc>

	if (msg != NULL) {
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	b118      	cbz	r0, 8003000 <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 8003000:	b14c      	cbz	r4, 8003016 <log_3+0x32>
		msg->str = str;
 8003002:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 8003006:	7a60      	ldrb	r0, [r4, #9]
 8003008:	2303      	movs	r3, #3
 800300a:	f363 1007 	bfi	r0, r3, #4, #4
 800300e:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8003010:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8003012:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 8003014:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 8003016:	b1c4      	cbz	r4, 800304a <log_3+0x66>
	msg->hdr.ids = src_level;
 8003018:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800301c:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <log_3+0x6c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4798      	blx	r3
 8003024:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8003026:	f04f 0310 	mov.w	r3, #16
 800302a:	f3ef 8511 	mrs	r5, BASEPRI
 800302e:	f383 8812 	msr	BASEPRI_MAX, r3
 8003032:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8003036:	4621      	mov	r1, r4
 8003038:	4806      	ldr	r0, [pc, #24]	; (8003054 <log_3+0x70>)
 800303a:	f008 f85b 	bl	800b0f4 <log_list_add_tail>
	__asm__ volatile(
 800303e:	f385 8811 	msr	BASEPRI, r5
 8003042:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8003046:	f7ff ff81 	bl	8002f4c <z_log_msg_post_finalize>
}
 800304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800304e:	bf00      	nop
 8003050:	20000004 	.word	0x20000004
 8003054:	20000914 	.word	0x20000914

08003058 <log_0>:
{
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4605      	mov	r5, r0
 800305c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800305e:	f000 f943 	bl	80032e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003062:	4604      	mov	r4, r0
 8003064:	b118      	cbz	r0, 800306e <log_0+0x16>
		msg->hdr.ref_cnt = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800306e:	b104      	cbz	r4, 8003072 <log_0+0x1a>
		msg->str = str;
 8003070:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 8003072:	b1b4      	cbz	r4, 80030a2 <log_0+0x4a>
	msg->hdr.ids = src_level;
 8003074:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <log_0+0x4c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4798      	blx	r3
 800307c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800307e:	f04f 0310 	mov.w	r3, #16
 8003082:	f3ef 8511 	mrs	r5, BASEPRI
 8003086:	f383 8812 	msr	BASEPRI_MAX, r3
 800308a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800308e:	4621      	mov	r1, r4
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <log_0+0x50>)
 8003092:	f008 f82f 	bl	800b0f4 <log_list_add_tail>
	__asm__ volatile(
 8003096:	f385 8811 	msr	BASEPRI, r5
 800309a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800309e:	f7ff ff55 	bl	8002f4c <z_log_msg_post_finalize>
}
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	20000004 	.word	0x20000004
 80030a8:	20000914 	.word	0x20000914

080030ac <log_1>:
{
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	4607      	mov	r7, r0
 80030b0:	460e      	mov	r6, r1
 80030b2:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80030b4:	f000 f918 	bl	80032e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 80030b8:	4604      	mov	r4, r0
 80030ba:	b118      	cbz	r0, 80030c4 <log_1+0x18>
		msg->hdr.ref_cnt = 1;
 80030bc:	2301      	movs	r3, #1
 80030be:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 80030c4:	b134      	cbz	r4, 80030d4 <log_1+0x28>
		msg->str = str;
 80030c6:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 80030c8:	7a63      	ldrb	r3, [r4, #9]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f362 1307 	bfi	r3, r2, #4, #4
 80030d0:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 80030d2:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
 80030d4:	b1b4      	cbz	r4, 8003104 <log_1+0x58>
	msg->hdr.ids = src_level;
 80030d6:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <log_1+0x5c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4798      	blx	r3
 80030de:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80030e0:	f04f 0310 	mov.w	r3, #16
 80030e4:	f3ef 8511 	mrs	r5, BASEPRI
 80030e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80030ec:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80030f0:	4621      	mov	r1, r4
 80030f2:	4806      	ldr	r0, [pc, #24]	; (800310c <log_1+0x60>)
 80030f4:	f007 fffe 	bl	800b0f4 <log_list_add_tail>
	__asm__ volatile(
 80030f8:	f385 8811 	msr	BASEPRI, r5
 80030fc:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8003100:	f7ff ff24 	bl	8002f4c <z_log_msg_post_finalize>
}
 8003104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003106:	bf00      	nop
 8003108:	20000004 	.word	0x20000004
 800310c:	20000914 	.word	0x20000914

08003110 <log_2>:
{
 8003110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003114:	4680      	mov	r8, r0
 8003116:	460f      	mov	r7, r1
 8003118:	4616      	mov	r6, r2
 800311a:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800311c:	f000 f8e4 	bl	80032e8 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003120:	4604      	mov	r4, r0
 8003122:	b118      	cbz	r0, 800312c <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800312c:	b144      	cbz	r4, 8003140 <log_2+0x30>
		msg->str = str;
 800312e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 8003132:	7a60      	ldrb	r0, [r4, #9]
 8003134:	2302      	movs	r3, #2
 8003136:	f363 1007 	bfi	r0, r3, #4, #4
 800313a:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 800313c:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 800313e:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
 8003140:	b1b4      	cbz	r4, 8003170 <log_2+0x60>
	msg->hdr.ids = src_level;
 8003142:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <log_2+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4798      	blx	r3
 800314a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800314c:	f04f 0310 	mov.w	r3, #16
 8003150:	f3ef 8511 	mrs	r5, BASEPRI
 8003154:	f383 8812 	msr	BASEPRI_MAX, r3
 8003158:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800315c:	4621      	mov	r1, r4
 800315e:	4806      	ldr	r0, [pc, #24]	; (8003178 <log_2+0x68>)
 8003160:	f007 ffc8 	bl	800b0f4 <log_list_add_tail>
	__asm__ volatile(
 8003164:	f385 8811 	msr	BASEPRI, r5
 8003168:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800316c:	f7ff feee 	bl	8002f4c <z_log_msg_post_finalize>
}
 8003170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003174:	20000004 	.word	0x20000004
 8003178:	20000914 	.word	0x20000914

0800317c <z_impl_log_panic>:
	if (panic_mode) {
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <z_impl_log_panic+0x4c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b103      	cbz	r3, 8003184 <z_impl_log_panic+0x8>
 8003182:	4770      	bx	lr
{
 8003184:	b510      	push	{r4, lr}
	log_init();
 8003186:	f7ff fd49 	bl	8002c1c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 800318a:	2400      	movs	r4, #0
 800318c:	e000      	b.n	8003190 <z_impl_log_panic+0x14>
 800318e:	3401      	adds	r4, #1
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <z_impl_log_panic+0x50>)
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <z_impl_log_panic+0x54>)
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800319a:	da0c      	bge.n	80031b6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <z_impl_log_panic+0x54>)
 800319e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 80031a2:	6843      	ldr	r3, [r0, #4]
 80031a4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f1      	beq.n	800318e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 80031aa:	0123      	lsls	r3, r4, #4
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <z_impl_log_panic+0x54>)
 80031ae:	58d3      	ldr	r3, [r2, r3]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4798      	blx	r3
}
 80031b4:	e7eb      	b.n	800318e <z_impl_log_panic+0x12>
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7ff fea0 	bl	8002efc <z_impl_log_process>
		while (log_process(false) == true) {
 80031bc:	2800      	cmp	r0, #0
 80031be:	d1fa      	bne.n	80031b6 <z_impl_log_panic+0x3a>
	panic_mode = true;
 80031c0:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <z_impl_log_panic+0x4c>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
}
 80031c6:	bd10      	pop	{r4, pc}
 80031c8:	20000e62 	.word	0x20000e62
 80031cc:	0800d9a4 	.word	0x0800d9a4
 80031d0:	0800d994 	.word	0x0800d994

080031d4 <log_process_thread_func>:
{
 80031d4:	b508      	push	{r3, lr}
	log_init();
 80031d6:	f7ff fd21 	bl	8002c1c <log_init>
	return z_impl_z_current_get();
 80031da:	f005 fcb7 	bl	8008b4c <z_impl_z_current_get>
	thread_set(k_current_get());
 80031de:	f7ff fc7b 	bl	8002ad8 <thread_set>
 80031e2:	2000      	movs	r0, #0
 80031e4:	f7ff fe8a 	bl	8002efc <z_impl_log_process>
		if (log_process(false) == false) {
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d1fa      	bne.n	80031e2 <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f4:	4801      	ldr	r0, [pc, #4]	; (80031fc <log_process_thread_func+0x28>)
 80031f6:	f004 ff59 	bl	80080ac <z_impl_k_sem_take>
 80031fa:	e7f2      	b.n	80031e2 <log_process_thread_func+0xe>
 80031fc:	2000049c 	.word	0x2000049c

08003200 <log_free>:
{
 8003200:	b500      	push	{lr}
 8003202:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 8003204:	3804      	subs	r0, #4
 8003206:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003208:	f3bf 8f5b 	dmb	ish
 800320c:	e850 3f00 	ldrex	r3, [r0]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	e840 2100 	strex	r1, r2, [r0]
 8003216:	2900      	cmp	r1, #0
 8003218:	d1f8      	bne.n	800320c <log_free+0xc>
 800321a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 800321e:	2b01      	cmp	r3, #1
 8003220:	d002      	beq.n	8003228 <log_free+0x28>
}
 8003222:	b003      	add	sp, #12
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8003228:	a901      	add	r1, sp, #4
 800322a:	4802      	ldr	r0, [pc, #8]	; (8003234 <log_free+0x34>)
 800322c:	f009 fa75 	bl	800c71a <k_mem_slab_free>
}
 8003230:	e7f7      	b.n	8003222 <log_free+0x22>
 8003232:	bf00      	nop
 8003234:	2000091c 	.word	0x2000091c

08003238 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <log_source_name_get+0x18>)
 800323a:	4a06      	ldr	r2, [pc, #24]	; (8003254 <log_source_name_get+0x1c>)
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8003242:	d202      	bcs.n	800324a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8003244:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8003248:	4770      	bx	lr
 800324a:	2000      	movs	r0, #0
}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	0800d994 	.word	0x0800d994
 8003254:	0800d954 	.word	0x0800d954

08003258 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 8003258:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <log_backend_enable+0x20>)
 800325c:	1ac3      	subs	r3, r0, r3
 800325e:	111b      	asrs	r3, r3, #4
 8003260:	3301      	adds	r3, #1
	backend->cb->id = id;
 8003262:	6842      	ldr	r2, [r0, #4]
 8003264:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 8003266:	6843      	ldr	r3, [r0, #4]
 8003268:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 800326a:	6843      	ldr	r3, [r0, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 8003270:	f7ff fd20 	bl	8002cb4 <z_log_notify_backend_enabled>
}
 8003274:	bd08      	pop	{r3, pc}
 8003276:	bf00      	nop
 8003278:	0800d994 	.word	0x0800d994

0800327c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 800327c:	b510      	push	{r4, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 8003282:	e005      	b.n	8003290 <cont_free+0x14>
		next = cont->next;
 8003284:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 8003286:	a901      	add	r1, sp, #4
 8003288:	4804      	ldr	r0, [pc, #16]	; (800329c <cont_free+0x20>)
 800328a:	f009 fa46 	bl	800c71a <k_mem_slab_free>
		cont = next;
 800328e:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f6      	bne.n	8003284 <cont_free+0x8>
	}
}
 8003296:	b002      	add	sp, #8
 8003298:	bd10      	pop	{r4, pc}
 800329a:	bf00      	nop
 800329c:	20000940 	.word	0x20000940

080032a0 <log_msg_pool_init>:
{
 80032a0:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80032a2:	2320      	movs	r3, #32
 80032a4:	461a      	mov	r2, r3
 80032a6:	4902      	ldr	r1, [pc, #8]	; (80032b0 <log_msg_pool_init+0x10>)
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <log_msg_pool_init+0x14>)
 80032aa:	f009 fa27 	bl	800c6fc <k_mem_slab_init>
}
 80032ae:	bd08      	pop	{r3, pc}
 80032b0:	20003c20 	.word	0x20003c20
 80032b4:	20000940 	.word	0x20000940

080032b8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 80032b8:	b510      	push	{r4, lr}
 80032ba:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7ff fe1b 	bl	8002efc <z_impl_log_process>
 80032c6:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 80032c8:	f7ff fd04 	bl	8002cd4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 80032cc:	2200      	movs	r2, #0
 80032ce:	2300      	movs	r3, #0
 80032d0:	a901      	add	r1, sp, #4
 80032d2:	4804      	ldr	r0, [pc, #16]	; (80032e4 <log_msg_no_space_handle+0x2c>)
 80032d4:	f004 fc86 	bl	8007be4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 80032d8:	b108      	cbz	r0, 80032de <log_msg_no_space_handle+0x26>
 80032da:	2c00      	cmp	r4, #0
 80032dc:	d1f0      	bne.n	80032c0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 80032de:	9801      	ldr	r0, [sp, #4]
 80032e0:	b002      	add	sp, #8
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	20000940 	.word	0x20000940

080032e8 <log_msg_chunk_alloc>:
{
 80032e8:	b500      	push	{lr}
 80032ea:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 80032f0:	f007 ff1e 	bl	800b130 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 80032f4:	b150      	cbz	r0, 800330c <log_msg_chunk_alloc+0x24>
 80032f6:	2200      	movs	r2, #0
 80032f8:	2300      	movs	r3, #0
 80032fa:	a901      	add	r1, sp, #4
 80032fc:	4807      	ldr	r0, [pc, #28]	; (800331c <log_msg_chunk_alloc+0x34>)
 80032fe:	f004 fc71 	bl	8007be4 <k_mem_slab_alloc>
	if (err != 0) {
 8003302:	b930      	cbnz	r0, 8003312 <log_msg_chunk_alloc+0x2a>
}
 8003304:	9801      	ldr	r0, [sp, #4]
 8003306:	b003      	add	sp, #12
 8003308:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 800330c:	2200      	movs	r2, #0
 800330e:	2300      	movs	r3, #0
 8003310:	e7f3      	b.n	80032fa <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 8003312:	f7ff ffd1 	bl	80032b8 <log_msg_no_space_handle>
 8003316:	9001      	str	r0, [sp, #4]
 8003318:	e7f4      	b.n	8003304 <log_msg_chunk_alloc+0x1c>
 800331a:	bf00      	nop
 800331c:	20000940 	.word	0x20000940

08003320 <msg_free>:
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003322:	b083      	sub	sp, #12
 8003324:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 8003326:	4604      	mov	r4, r0
 8003328:	f007 ff82 	bl	800b230 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800332c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 800332e:	f013 0f01 	tst.w	r3, #1
 8003332:	d101      	bne.n	8003338 <msg_free+0x18>
 8003334:	4606      	mov	r6, r0
 8003336:	bb50      	cbnz	r0, 800338e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 8003338:	9b01      	ldr	r3, [sp, #4]
 800333a:	7a1a      	ldrb	r2, [r3, #8]
 800333c:	f012 0f02 	tst.w	r2, #2
 8003340:	d128      	bne.n	8003394 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 8003342:	a901      	add	r1, sp, #4
 8003344:	4815      	ldr	r0, [pc, #84]	; (800339c <msg_free+0x7c>)
 8003346:	f009 f9e8 	bl	800c71a <k_mem_slab_free>
}
 800334a:	b003      	add	sp, #12
 800334c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 800334e:	9801      	ldr	r0, [sp, #4]
 8003350:	f007 ff83 	bl	800b25a <log_msg_str_get>
 8003354:	4631      	mov	r1, r6
 8003356:	f7ff fc13 	bl	8002b80 <z_log_get_s_mask>
					if (smask == 0U) {
 800335a:	4607      	mov	r7, r0
 800335c:	b970      	cbnz	r0, 800337c <msg_free+0x5c>
 800335e:	e7eb      	b.n	8003338 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
 8003360:	3401      	adds	r4, #1
 8003362:	42b4      	cmp	r4, r6
 8003364:	d2e8      	bcs.n	8003338 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 8003366:	4621      	mov	r1, r4
 8003368:	9801      	ldr	r0, [sp, #4]
 800336a:	f007 ff64 	bl	800b236 <log_msg_arg_get>
 800336e:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 8003370:	f7ff fd2c 	bl	8002dcc <log_is_strdup>
 8003374:	2800      	cmp	r0, #0
 8003376:	d0f3      	beq.n	8003360 <msg_free+0x40>
				if (smask == 0U) {
 8003378:	2f00      	cmp	r7, #0
 800337a:	d0e8      	beq.n	800334e <msg_free+0x2e>
				if (smask & BIT(i)) {
 800337c:	fa27 f304 	lsr.w	r3, r7, r4
 8003380:	f013 0f01 	tst.w	r3, #1
 8003384:	d0ec      	beq.n	8003360 <msg_free+0x40>
					log_free(buf);
 8003386:	4628      	mov	r0, r5
 8003388:	f7ff ff3a 	bl	8003200 <log_free>
 800338c:	e7e8      	b.n	8003360 <msg_free+0x40>
		uint32_t smask = 0U;
 800338e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
 8003390:	463c      	mov	r4, r7
 8003392:	e7e6      	b.n	8003362 <msg_free+0x42>
		cont_free(msg->payload.ext.next);
 8003394:	6958      	ldr	r0, [r3, #20]
 8003396:	f7ff ff71 	bl	800327c <cont_free>
 800339a:	e7d2      	b.n	8003342 <msg_free+0x22>
 800339c:	20000940 	.word	0x20000940

080033a0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80033a0:	b40e      	push	{r1, r2, r3}
 80033a2:	b500      	push	{lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	4601      	mov	r1, r0
 80033a8:	ab03      	add	r3, sp, #12
 80033aa:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80033ae:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <print_formatted+0x20>)
 80033b2:	f7ff f86d 	bl	8002490 <cbvprintf>
	va_end(args);

	return length;
}
 80033b6:	b002      	add	sp, #8
 80033b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033bc:	b003      	add	sp, #12
 80033be:	4770      	bx	lr
 80033c0:	0800b5fd 	.word	0x0800b5fd

080033c4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 80033c4:	b530      	push	{r4, r5, lr}
 80033c6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 80033c8:	f011 0f44 	tst.w	r1, #68	; 0x44
 80033cc:	d005      	beq.n	80033da <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <timestamp_print+0x74>)
 80033d0:	681c      	ldr	r4, [r3, #0]
 80033d2:	b934      	cbnz	r4, 80033e2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 80033d4:	2000      	movs	r0, #0
	}

	return length;
}
 80033d6:	b005      	add	sp, #20
 80033d8:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 80033da:	4918      	ldr	r1, [pc, #96]	; (800343c <timestamp_print+0x78>)
 80033dc:	f7ff ffe0 	bl	80033a0 <print_formatted>
 80033e0:	e7f9      	b.n	80033d6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <timestamp_print+0x7c>)
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 80033ea:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <timestamp_print+0x80>)
 80033f0:	fba2 320c 	umull	r3, r2, r2, ip
 80033f4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 80033f6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 80033fa:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <timestamp_print+0x84>)
 8003400:	fba3 530e 	umull	r5, r3, r3, lr
 8003404:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8003406:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 800340a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800340e:	fb0c f101 	mul.w	r1, ip, r1
 8003412:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8003416:	fb05 1114 	mls	r1, r5, r4, r1
 800341a:	fb0c f101 	mul.w	r1, ip, r1
 800341e:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8003422:	9102      	str	r1, [sp, #8]
 8003424:	9501      	str	r5, [sp, #4]
 8003426:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800342a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 800342e:	9100      	str	r1, [sp, #0]
 8003430:	4906      	ldr	r1, [pc, #24]	; (800344c <timestamp_print+0x88>)
 8003432:	f7ff ffb5 	bl	80033a0 <print_formatted>
 8003436:	e7ce      	b.n	80033d6 <timestamp_print+0x12>
 8003438:	20000960 	.word	0x20000960
 800343c:	0800dd1c 	.word	0x0800dd1c
 8003440:	20000964 	.word	0x20000964
 8003444:	91a2b3c5 	.word	0x91a2b3c5
 8003448:	88888889 	.word	0x88888889
 800344c:	0800dd28 	.word	0x0800dd28

08003450 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8003450:	b161      	cbz	r1, 800346c <color_print+0x1c>
{
 8003452:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8003454:	b12a      	cbz	r2, 8003462 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8003456:	4a06      	ldr	r2, [pc, #24]	; (8003470 <color_print+0x20>)
 8003458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800345c:	b912      	cbnz	r2, 8003464 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <color_print+0x24>)
 8003460:	e000      	b.n	8003464 <color_print+0x14>
 8003462:	4a04      	ldr	r2, [pc, #16]	; (8003474 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8003464:	4904      	ldr	r1, [pc, #16]	; (8003478 <color_print+0x28>)
 8003466:	f7ff ff9b 	bl	80033a0 <print_formatted>
	}
}
 800346a:	bd08      	pop	{r3, pc}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	0800dda0 	.word	0x0800dda0
 8003474:	0800dd44 	.word	0x0800dd44
 8003478:	0800dd4c 	.word	0x0800dd4c

0800347c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800347c:	f011 0f10 	tst.w	r1, #16
 8003480:	d10b      	bne.n	800349a <newline_print+0x1e>
{
 8003482:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8003484:	f011 0f20 	tst.w	r1, #32
 8003488:	d003      	beq.n	8003492 <newline_print+0x16>
		print_formatted(ctx, "\n");
 800348a:	4904      	ldr	r1, [pc, #16]	; (800349c <newline_print+0x20>)
 800348c:	f7ff ff88 	bl	80033a0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 8003490:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 8003492:	4903      	ldr	r1, [pc, #12]	; (80034a0 <newline_print+0x24>)
 8003494:	f7ff ff84 	bl	80033a0 <print_formatted>
 8003498:	e7fa      	b.n	8003490 <newline_print+0x14>
 800349a:	4770      	bx	lr
 800349c:	0800e298 	.word	0x0800e298
 80034a0:	0800dd50 	.word	0x0800dd50

080034a4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80034a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a8:	4605      	mov	r5, r0
 80034aa:	460f      	mov	r7, r1
 80034ac:	4616      	mov	r6, r2
 80034ae:	4698      	mov	r8, r3
	newline_print(output, flags);
 80034b0:	9906      	ldr	r1, [sp, #24]
 80034b2:	f7ff ffe3 	bl	800347c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80034b6:	2400      	movs	r4, #0
 80034b8:	4544      	cmp	r4, r8
 80034ba:	da05      	bge.n	80034c8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 80034bc:	4924      	ldr	r1, [pc, #144]	; (8003550 <hexdump_line_print+0xac>)
 80034be:	4628      	mov	r0, r5
 80034c0:	f7ff ff6e 	bl	80033a0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80034c4:	3401      	adds	r4, #1
 80034c6:	e7f7      	b.n	80034b8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80034c8:	2400      	movs	r4, #0
 80034ca:	e009      	b.n	80034e0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80034cc:	4920      	ldr	r1, [pc, #128]	; (8003550 <hexdump_line_print+0xac>)
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7ff ff66 	bl	80033a0 <print_formatted>
 80034d4:	e00b      	b.n	80034ee <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <hexdump_line_print+0xb0>)
 80034d8:	4628      	mov	r0, r5
 80034da:	f7ff ff61 	bl	80033a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80034de:	3401      	adds	r4, #1
 80034e0:	2c0f      	cmp	r4, #15
 80034e2:	dc0c      	bgt.n	80034fe <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	dd02      	ble.n	80034ee <hexdump_line_print+0x4a>
 80034e8:	f014 0f07 	tst.w	r4, #7
 80034ec:	d0ee      	beq.n	80034cc <hexdump_line_print+0x28>
		if (i < length) {
 80034ee:	42b4      	cmp	r4, r6
 80034f0:	d2f1      	bcs.n	80034d6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 80034f2:	5d3a      	ldrb	r2, [r7, r4]
 80034f4:	4918      	ldr	r1, [pc, #96]	; (8003558 <hexdump_line_print+0xb4>)
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7ff ff52 	bl	80033a0 <print_formatted>
 80034fc:	e7ef      	b.n	80034de <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 80034fe:	4917      	ldr	r1, [pc, #92]	; (800355c <hexdump_line_print+0xb8>)
 8003500:	4628      	mov	r0, r5
 8003502:	f7ff ff4d 	bl	80033a0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003506:	2400      	movs	r4, #0
 8003508:	e009      	b.n	800351e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 800350a:	4911      	ldr	r1, [pc, #68]	; (8003550 <hexdump_line_print+0xac>)
 800350c:	4628      	mov	r0, r5
 800350e:	f7ff ff47 	bl	80033a0 <print_formatted>
 8003512:	e00b      	b.n	800352c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8003514:	4912      	ldr	r1, [pc, #72]	; (8003560 <hexdump_line_print+0xbc>)
 8003516:	4628      	mov	r0, r5
 8003518:	f7ff ff42 	bl	80033a0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800351c:	3401      	adds	r4, #1
 800351e:	2c0f      	cmp	r4, #15
 8003520:	dc13      	bgt.n	800354a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8003522:	2c00      	cmp	r4, #0
 8003524:	dd02      	ble.n	800352c <hexdump_line_print+0x88>
 8003526:	f014 0f07 	tst.w	r4, #7
 800352a:	d0ee      	beq.n	800350a <hexdump_line_print+0x66>
		if (i < length) {
 800352c:	42b4      	cmp	r4, r6
 800352e:	d207      	bcs.n	8003540 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8003530:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <hexdump_line_print+0xc0>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8003536:	f013 0f97 	tst.w	r3, #151	; 0x97
 800353a:	d1eb      	bne.n	8003514 <hexdump_line_print+0x70>
 800353c:	222e      	movs	r2, #46	; 0x2e
 800353e:	e7e9      	b.n	8003514 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <hexdump_line_print+0xac>)
 8003542:	4628      	mov	r0, r5
 8003544:	f7ff ff2c 	bl	80033a0 <print_formatted>
 8003548:	e7e8      	b.n	800351c <hexdump_line_print+0x78>
		}
	}
}
 800354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800354e:	bf00      	nop
 8003550:	0800dd78 	.word	0x0800dd78
 8003554:	0800dd5c 	.word	0x0800dd5c
 8003558:	0800dd54 	.word	0x0800dd54
 800355c:	0800dd60 	.word	0x0800dd60
 8003560:	0800dd64 	.word	0x0800dd64
 8003564:	0800ea8d 	.word	0x0800ea8d

08003568 <ids_print>:
{
 8003568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356c:	4680      	mov	r8, r0
 800356e:	4616      	mov	r6, r2
 8003570:	461d      	mov	r5, r3
 8003572:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 8003576:	b959      	cbnz	r1, 8003590 <ids_print+0x28>
	int total = 0;
 8003578:	2400      	movs	r4, #0
	if (source_id >= 0) {
 800357a:	2f00      	cmp	r7, #0
 800357c:	db1c      	blt.n	80035b8 <ids_print+0x50>
		total += print_formatted(output,
 800357e:	b186      	cbz	r6, 80035a2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8003580:	2301      	movs	r3, #1
 8003582:	9a07      	ldr	r2, [sp, #28]
 8003584:	4093      	lsls	r3, r2
				(func_on &&
 8003586:	f013 0f10 	tst.w	r3, #16
 800358a:	d118      	bne.n	80035be <ids_print+0x56>
		total += print_formatted(output,
 800358c:	4e0d      	ldr	r6, [pc, #52]	; (80035c4 <ids_print+0x5c>)
 800358e:	e009      	b.n	80035a4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <ids_print+0x60>)
 8003592:	9a07      	ldr	r2, [sp, #28]
 8003594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003598:	490c      	ldr	r1, [pc, #48]	; (80035cc <ids_print+0x64>)
 800359a:	f7ff ff01 	bl	80033a0 <print_formatted>
 800359e:	4604      	mov	r4, r0
 80035a0:	e7eb      	b.n	800357a <ids_print+0x12>
		total += print_formatted(output,
 80035a2:	4e08      	ldr	r6, [pc, #32]	; (80035c4 <ids_print+0x5c>)
 80035a4:	4639      	mov	r1, r7
 80035a6:	4628      	mov	r0, r5
 80035a8:	f7ff fe46 	bl	8003238 <log_source_name_get>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4631      	mov	r1, r6
 80035b0:	4640      	mov	r0, r8
 80035b2:	f7ff fef5 	bl	80033a0 <print_formatted>
 80035b6:	4404      	add	r4, r0
}
 80035b8:	4620      	mov	r0, r4
 80035ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 80035be:	4e04      	ldr	r6, [pc, #16]	; (80035d0 <ids_print+0x68>)
 80035c0:	e7f0      	b.n	80035a4 <ids_print+0x3c>
 80035c2:	bf00      	nop
 80035c4:	0800dd68 	.word	0x0800dd68
 80035c8:	0800dddc 	.word	0x0800dddc
 80035cc:	0800dd74 	.word	0x0800dd74
 80035d0:	0800dd70 	.word	0x0800dd70

080035d4 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
 80035d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035d8:	b089      	sub	sp, #36	; 0x24
 80035da:	4607      	mov	r7, r0
 80035dc:	460e      	mov	r6, r1
 80035de:	4691      	mov	r9, r2
 80035e0:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
 80035e2:	f007 fe3a 	bl	800b25a <log_msg_str_get>
 80035e6:	4602      	mov	r2, r0
 80035e8:	490f      	ldr	r1, [pc, #60]	; (8003628 <hexdump_print+0x54>)
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff fed8 	bl	80033a0 <print_formatted>
	uint32_t offset = 0U;
 80035f0:	2400      	movs	r4, #0
 80035f2:	e009      	b.n	8003608 <hexdump_print+0x34>
	do {
		length = sizeof(buf);
		log_msg_hexdump_data_get(msg, buf, &length, offset);

		if (length) {
			hexdump_line_print(output, buf, length,
 80035f4:	f8cd 8000 	str.w	r8, [sp]
 80035f8:	464b      	mov	r3, r9
 80035fa:	eb0d 0105 	add.w	r1, sp, r5
 80035fe:	4630      	mov	r0, r6
 8003600:	f7ff ff50 	bl	80034a4 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 8003604:	9d03      	ldr	r5, [sp, #12]
 8003606:	442c      	add	r4, r5
		length = sizeof(buf);
 8003608:	2510      	movs	r5, #16
 800360a:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 800360c:	4623      	mov	r3, r4
 800360e:	aa03      	add	r2, sp, #12
 8003610:	eb0d 0105 	add.w	r1, sp, r5
 8003614:	4638      	mov	r0, r7
 8003616:	f007 fe35 	bl	800b284 <log_msg_hexdump_data_get>
		if (length) {
 800361a:	9a03      	ldr	r2, [sp, #12]
 800361c:	2a00      	cmp	r2, #0
 800361e:	d1e9      	bne.n	80035f4 <hexdump_print+0x20>
		} else {
			break;
		}
	} while (true);
}
 8003620:	b009      	add	sp, #36	; 0x24
 8003622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003626:	bf00      	nop
 8003628:	0800dd4c 	.word	0x0800dd4c

0800362c <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b083      	sub	sp, #12
 8003630:	4606      	mov	r6, r0
 8003632:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8003634:	2700      	movs	r7, #0
	size_t offset = 0;
 8003636:	463d      	mov	r5, r7
 8003638:	e00d      	b.n	8003656 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
 800363a:	68a2      	ldr	r2, [r4, #8]
 800363c:	4413      	add	r3, r2
 800363e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8003642:	2f0a      	cmp	r7, #10
 8003644:	bf14      	ite	ne
 8003646:	2700      	movne	r7, #0
 8003648:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
 800364a:	4620      	mov	r0, r4
 800364c:	f007 ffc9 	bl	800b5e2 <log_output_flush>
		offset += length;
 8003650:	9b01      	ldr	r3, [sp, #4]
 8003652:	441d      	add	r5, r3
	} while (length > 0);
 8003654:	b173      	cbz	r3, 8003674 <raw_string_print+0x48>
		length = output->size;
 8003656:	68e3      	ldr	r3, [r4, #12]
 8003658:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 800365a:	462b      	mov	r3, r5
 800365c:	aa01      	add	r2, sp, #4
 800365e:	68a1      	ldr	r1, [r4, #8]
 8003660:	4630      	mov	r0, r6
 8003662:	f007 fe0f 	bl	800b284 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	9a01      	ldr	r2, [sp, #4]
 800366a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0eb      	beq.n	800364a <raw_string_print+0x1e>
 8003672:	e7e2      	b.n	800363a <raw_string_print+0xe>

	if (eol) {
 8003674:	b90f      	cbnz	r7, 800367a <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
 8003676:	b003      	add	sp, #12
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
 800367a:	4902      	ldr	r1, [pc, #8]	; (8003684 <raw_string_print+0x58>)
 800367c:	4620      	mov	r0, r4
 800367e:	f7ff fe8f 	bl	80033a0 <print_formatted>
}
 8003682:	e7f8      	b.n	8003676 <raw_string_print+0x4a>
 8003684:	0800dd7c 	.word	0x0800dd7c

08003688 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 800368e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003690:	f242 730f 	movw	r3, #9999	; 0x270f
 8003694:	428b      	cmp	r3, r1
 8003696:	bf28      	it	cs
 8003698:	460b      	movcs	r3, r1
 800369a:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <log_output_dropped_process+0x4c>)
 800369c:	2105      	movs	r1, #5
 800369e:	4668      	mov	r0, sp
 80036a0:	f007 fbeb 	bl	800ae7a <snprintk>
 80036a4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 80036a6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	220b      	movs	r2, #11
 80036ac:	490a      	ldr	r1, [pc, #40]	; (80036d8 <log_output_dropped_process+0x50>)
 80036ae:	4628      	mov	r0, r5
 80036b0:	f007 fdf0 	bl	800b294 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 80036b4:	6863      	ldr	r3, [r4, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4632      	mov	r2, r6
 80036ba:	4669      	mov	r1, sp
 80036bc:	4628      	mov	r0, r5
 80036be:	f007 fde9 	bl	800b294 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 80036c2:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	221b      	movs	r2, #27
 80036c8:	4904      	ldr	r1, [pc, #16]	; (80036dc <log_output_dropped_process+0x54>)
 80036ca:	4628      	mov	r0, r5
 80036cc:	f007 fde2 	bl	800b294 <buffer_write>
}
 80036d0:	b002      	add	sp, #8
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	0800e45c 	.word	0x0800e45c
 80036d8:	0800ddd0 	.word	0x0800ddd0
 80036dc:	0800ddb4 	.word	0x0800ddb4

080036e0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <log_output_timestamp_freq_set+0x20>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 80036e6:	e004      	b.n	80036f2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 80036e8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 80036ea:	4a05      	ldr	r2, [pc, #20]	; (8003700 <log_output_timestamp_freq_set+0x20>)
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <log_output_timestamp_freq_set+0x24>)
 80036f4:	4298      	cmp	r0, r3
 80036f6:	d8f7      	bhi.n	80036e8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <log_output_timestamp_freq_set+0x28>)
 80036fa:	6018      	str	r0, [r3, #0]
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000964 	.word	0x20000964
 8003704:	000f4240 	.word	0x000f4240
 8003708:	20000960 	.word	0x20000960

0800370c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	4606      	mov	r6, r0
 8003710:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8003712:	2400      	movs	r4, #0
 8003714:	e006      	b.n	8003724 <char_out+0x18>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <char_out+0x20>)
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 800371c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8003722:	3401      	adds	r4, #1
 8003724:	42ac      	cmp	r4, r5
 8003726:	d3f6      	bcc.n	8003716 <char_out+0xa>
#endif
	}

	return length;
}
 8003728:	4628      	mov	r0, r5
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	2000097c 	.word	0x2000097c

08003730 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003730:	4b01      	ldr	r3, [pc, #4]	; (8003738 <log_backend_uart_init+0x8>)
 8003732:	4a02      	ldr	r2, [pc, #8]	; (800373c <log_backend_uart_init+0xc>)
 8003734:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8003736:	4770      	bx	lr
 8003738:	2000097c 	.word	0x2000097c
 800373c:	0800d724 	.word	0x0800d724

08003740 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003740:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003742:	4802      	ldr	r0, [pc, #8]	; (800374c <panic+0xc>)
 8003744:	f007 ff4d 	bl	800b5e2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003748:	bd08      	pop	{r3, pc}
 800374a:	bf00      	nop
 800374c:	0800de20 	.word	0x0800de20

08003750 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003750:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003752:	4802      	ldr	r0, [pc, #8]	; (800375c <dropped+0xc>)
 8003754:	f7ff ff98 	bl	8003688 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003758:	bd08      	pop	{r3, pc}
 800375a:	bf00      	nop
 800375c:	0800de20 	.word	0x0800de20

08003760 <put>:
{
 8003760:	b510      	push	{r4, lr}
 8003762:	460c      	mov	r4, r1
	log_msg_get(msg);
 8003764:	4608      	mov	r0, r1
 8003766:	f007 fd56 	bl	800b216 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 800376a:	220f      	movs	r2, #15
 800376c:	4621      	mov	r1, r4
 800376e:	4803      	ldr	r0, [pc, #12]	; (800377c <put+0x1c>)
 8003770:	f007 ff60 	bl	800b634 <log_output_msg_process>
	log_msg_put(msg);
 8003774:	4620      	mov	r0, r4
 8003776:	f007 fd72 	bl	800b25e <log_msg_put>
}
 800377a:	bd10      	pop	{r4, pc}
 800377c:	0800de20 	.word	0x0800de20

08003780 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8003780:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8003782:	4c04      	ldr	r4, [pc, #16]	; (8003794 <__do_init_array_aux+0x14>)
 8003784:	e002      	b.n	800378c <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003786:	f854 3b04 	ldr.w	r3, [r4], #4
 800378a:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 800378c:	4b02      	ldr	r3, [pc, #8]	; (8003798 <__do_init_array_aux+0x18>)
 800378e:	429c      	cmp	r4, r3
 8003790:	d3f9      	bcc.n	8003786 <__do_init_array_aux+0x6>
	}
}
 8003792:	bd10      	pop	{r4, pc}
 8003794:	0800d954 	.word	0x0800d954
 8003798:	0800d954 	.word	0x0800d954

0800379c <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <__do_global_ctors_aux+0x1c>)
 800379e:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 80037a0:	b14b      	cbz	r3, 80037b6 <__do_global_ctors_aux+0x1a>
{
 80037a2:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 80037a4:	1e5c      	subs	r4, r3, #1
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <__do_global_ctors_aux+0x1c>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	4798      	blx	r3
 80037ae:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 80037b0:	2c00      	cmp	r4, #0
 80037b2:	d1f7      	bne.n	80037a4 <__do_global_ctors_aux+0x8>
	}
}
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	4770      	bx	lr
 80037b8:	0800d94c 	.word	0x0800d94c

080037bc <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 80037bc:	28af      	cmp	r0, #175	; 0xaf
 80037be:	d81d      	bhi.n	80037fc <stm32_pin_configure+0x40>
{
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	4604      	mov	r4, r0
 80037c4:	460f      	mov	r7, r1
 80037c6:	4615      	mov	r5, r2
 80037c8:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 80037ca:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <stm32_pin_configure+0x48>)
 80037cc:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 80037d0:	b18e      	cbz	r6, 80037f6 <stm32_pin_configure+0x3a>
 80037d2:	4630      	mov	r0, r6
 80037d4:	f008 ff65 	bl	800c6a2 <z_device_ready>
 80037d8:	b150      	cbz	r0, 80037f0 <stm32_pin_configure+0x34>
 80037da:	2300      	movs	r3, #0
 80037dc:	b95b      	cbnz	r3, 80037f6 <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 80037de:	462b      	mov	r3, r5
 80037e0:	463a      	mov	r2, r7
 80037e2:	f004 010f 	and.w	r1, r4, #15
 80037e6:	4630      	mov	r0, r6
 80037e8:	f008 f968 	bl	800babc <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 80037ec:	2000      	movs	r0, #0
}
 80037ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f0:	f06f 0312 	mvn.w	r3, #18
 80037f4:	e7f2      	b.n	80037dc <stm32_pin_configure+0x20>
		return -ENODEV;
 80037f6:	f06f 0012 	mvn.w	r0, #18
 80037fa:	e7f8      	b.n	80037ee <stm32_pin_configure+0x32>
		return -EINVAL;
 80037fc:	f06f 0015 	mvn.w	r0, #21
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	0800de30 	.word	0x0800de30

08003808 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003808:	4901      	ldr	r1, [pc, #4]	; (8003810 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 800380a:	2210      	movs	r2, #16
	str	r2, [r1]
 800380c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 800380e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003810:	e000ed10 	.word	0xe000ed10

08003814 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003814:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003816:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003818:	f380 8811 	msr	BASEPRI, r0
	isb
 800381c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003820:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003824:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003826:	b662      	cpsie	i
	isb
 8003828:	f3bf 8f6f 	isb	sy

	bx	lr
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop

08003830 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003836:	4d1f      	ldr	r5, [pc, #124]	; (80038b4 <esf_dump+0x84>)
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <esf_dump+0x88>)
 800383a:	1aed      	subs	r5, r5, r3
 800383c:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800383e:	2601      	movs	r6, #1
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f366 0302 	bfi	r3, r6, #0, #3
 8003848:	f36f 03c5 	bfc	r3, #3, #3
 800384c:	f365 138f 	bfi	r3, r5, #6, #10
 8003850:	f8ad 3000 	strh.w	r3, [sp]
 8003854:	6883      	ldr	r3, [r0, #8]
 8003856:	6842      	ldr	r2, [r0, #4]
 8003858:	6801      	ldr	r1, [r0, #0]
 800385a:	4818      	ldr	r0, [pc, #96]	; (80038bc <esf_dump+0x8c>)
 800385c:	f7ff fbc2 	bl	8002fe4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	f366 0302 	bfi	r3, r6, #0, #3
 8003868:	f36f 03c5 	bfc	r3, #3, #3
 800386c:	f365 138f 	bfi	r3, r5, #6, #10
 8003870:	f8ad 3000 	strh.w	r3, [sp]
 8003874:	6963      	ldr	r3, [r4, #20]
 8003876:	6922      	ldr	r2, [r4, #16]
 8003878:	68e1      	ldr	r1, [r4, #12]
 800387a:	4811      	ldr	r0, [pc, #68]	; (80038c0 <esf_dump+0x90>)
 800387c:	f7ff fbb2 	bl	8002fe4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f366 0202 	bfi	r2, r6, #0, #3
 8003888:	f36f 02c5 	bfc	r2, #3, #3
 800388c:	f365 128f 	bfi	r2, r5, #6, #10
 8003890:	69e1      	ldr	r1, [r4, #28]
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <esf_dump+0x94>)
 8003894:	f7ff fc0a 	bl	80030ac <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f366 0202 	bfi	r2, r6, #0, #3
 80038a0:	f36f 02c5 	bfc	r2, #3, #3
 80038a4:	f365 128f 	bfi	r2, r5, #6, #10
 80038a8:	69a1      	ldr	r1, [r4, #24]
 80038aa:	4807      	ldr	r0, [pc, #28]	; (80038c8 <esf_dump+0x98>)
 80038ac:	f7ff fbfe 	bl	80030ac <log_1>
		esf->basic.pc);
}
 80038b0:	b002      	add	sp, #8
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	0800d96c 	.word	0x0800d96c
 80038b8:	0800d954 	.word	0x0800d954
 80038bc:	0800de5c 	.word	0x0800de5c
 80038c0:	0800de8c 	.word	0x0800de8c
 80038c4:	0800debc 	.word	0x0800debc
 80038c8:	0800decc 	.word	0x0800decc

080038cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80038cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80038ce:	2800      	cmp	r0, #0
 80038d0:	db07      	blt.n	80038e2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	f000 021f 	and.w	r2, r0, #31
 80038d6:	0940      	lsrs	r0, r0, #5
 80038d8:	2301      	movs	r3, #1
 80038da:	4093      	lsls	r3, r2
 80038dc:	4a01      	ldr	r2, [pc, #4]	; (80038e4 <arch_irq_enable+0x18>)
 80038de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 80038e8:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80038ea:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80038ec:	2800      	cmp	r0, #0
 80038ee:	db08      	blt.n	8003902 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f0:	0109      	lsls	r1, r1, #4
 80038f2:	b2c9      	uxtb	r1, r1
 80038f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80038f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80038fc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8003900:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003902:	f000 000f 	and.w	r0, r0, #15
 8003906:	0109      	lsls	r1, r1, #4
 8003908:	b2c9      	uxtb	r1, r1
 800390a:	4b01      	ldr	r3, [pc, #4]	; (8003910 <z_arm_irq_priority_set+0x28>)
 800390c:	5419      	strb	r1, [r3, r0]
}
 800390e:	4770      	bx	lr
 8003910:	e000ed14 	.word	0xe000ed14

08003914 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003914:	bf30      	wfi
    b z_SysNmiOnReset
 8003916:	f7ff bffd 	b.w	8003914 <z_SysNmiOnReset>
 800391a:	bf00      	nop

0800391c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800391c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <z_arm_prep_c+0x28>)
 8003920:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8003924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <z_arm_prep_c+0x2c>)
 800392a:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800392c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003930:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003934:	f004 f8f6 	bl	8007b24 <z_bss_zero>
	z_data_copy();
 8003938:	f005 f95a 	bl	8008bf0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800393c:	f000 fc6c 	bl	8004218 <z_arm_interrupt_init>
	z_cstart();
 8003940:	f004 f8fc 	bl	8007b3c <z_cstart>
 8003944:	08000000 	.word	0x08000000
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <arch_swap+0x28>)
 800394e:	6893      	ldr	r3, [r2, #8]
 8003950:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8003952:	4909      	ldr	r1, [pc, #36]	; (8003978 <arch_swap+0x2c>)
 8003954:	6809      	ldr	r1, [r1, #0]
 8003956:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003958:	4908      	ldr	r1, [pc, #32]	; (800397c <arch_swap+0x30>)
 800395a:	684b      	ldr	r3, [r1, #4]
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	604b      	str	r3, [r1, #4]
 8003962:	2300      	movs	r3, #0
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 800396c:	6893      	ldr	r3, [r2, #8]
}
 800396e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000e04 	.word	0x20000e04
 8003978:	0800e8f4 	.word	0x0800e8f4
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003980:	4912      	ldr	r1, [pc, #72]	; (80039cc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003982:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003984:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003988:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800398a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800398e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003992:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003994:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003998:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800399c:	4f0c      	ldr	r7, [pc, #48]	; (80039d0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800399e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80039a2:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 80039a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80039a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80039a8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 80039aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80039ac:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80039ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80039b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80039b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80039b6:	f000 fc83 	bl	80042c0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80039ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80039be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80039c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80039c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80039ca:	4770      	bx	lr
    ldr r1, =_kernel
 80039cc:	20000e04 	.word	0x20000e04
    ldr v4, =_SCS_ICSR
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80039d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80039d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80039da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80039de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80039e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80039e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80039e8:	2902      	cmp	r1, #2
    beq _oops
 80039ea:	d0ff      	beq.n	80039ec <_oops>

080039ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80039ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80039ee:	f007 fe9e 	bl	800b72e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80039f2:	bd01      	pop	{r0, pc}

080039f4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80039f4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80039f6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <arch_new_thread+0x3c>)
 80039fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8003a00:	f021 0101 	bic.w	r1, r1, #1
 8003a04:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8003a08:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003a0c:	9b01      	ldr	r3, [sp, #4]
 8003a0e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8003a12:	9b02      	ldr	r3, [sp, #8]
 8003a14:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a22:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8003a26:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003a2c:	bc10      	pop	{r4}
 8003a2e:	4770      	bx	lr
 8003a30:	0800ae97 	.word	0x0800ae97

08003a34 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <z_check_thread_stack_fail+0x48>)
 8003a36:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8003a38:	b1ea      	cbz	r2, 8003a76 <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003a3a:	f110 0f16 	cmn.w	r0, #22
 8003a3e:	d010      	beq.n	8003a62 <z_check_thread_stack_fail+0x2e>
 8003a40:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003a42:	f1a3 0c20 	sub.w	ip, r3, #32
 8003a46:	4584      	cmp	ip, r0
 8003a48:	d805      	bhi.n	8003a56 <z_check_thread_stack_fail+0x22>
 8003a4a:	4283      	cmp	r3, r0
 8003a4c:	d905      	bls.n	8003a5a <z_check_thread_stack_fail+0x26>
 8003a4e:	428b      	cmp	r3, r1
 8003a50:	d805      	bhi.n	8003a5e <z_check_thread_stack_fail+0x2a>
 8003a52:	2100      	movs	r1, #0
 8003a54:	e00a      	b.n	8003a6c <z_check_thread_stack_fail+0x38>
 8003a56:	2100      	movs	r1, #0
 8003a58:	e008      	b.n	8003a6c <z_check_thread_stack_fail+0x38>
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	e006      	b.n	8003a6c <z_check_thread_stack_fail+0x38>
 8003a5e:	2101      	movs	r1, #1
 8003a60:	e004      	b.n	8003a6c <z_check_thread_stack_fail+0x38>
 8003a62:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf94      	ite	ls
 8003a68:	2100      	movls	r1, #0
 8003a6a:	2101      	movhi	r1, #1
 8003a6c:	b909      	cbnz	r1, 8003a72 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003a6e:	2000      	movs	r0, #0
}
 8003a70:	4770      	bx	lr
		return thread->stack_info.start;
 8003a72:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003a74:	4770      	bx	lr
		return 0;
 8003a76:	2000      	movs	r0, #0
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000e04 	.word	0x20000e04

08003a80 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003a80:	b508      	push	{r3, lr}
 8003a82:	460d      	mov	r5, r1
 8003a84:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <arch_switch_to_main_thread+0x28>)
 8003a88:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003a8a:	f000 fc19 	bl	80042c0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f385 8809 	msr	PSP, r5
 8003a94:	2100      	movs	r1, #0
 8003a96:	b663      	cpsie	if
 8003a98:	f381 8811 	msr	BASEPRI, r1
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f007 f9f7 	bl	800ae96 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003aa8:	20000e04 	.word	0x20000e04

08003aac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003aac:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003aae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003ab2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003ab6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003aba:	4904      	ldr	r1, [pc, #16]	; (8003acc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003abc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003abe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003ac0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003ac2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003ac6:	4902      	ldr	r1, [pc, #8]	; (8003ad0 <_isr_wrapper+0x24>)
	bx r1
 8003ac8:	4708      	bx	r1
 8003aca:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003acc:	0800d784 	.word	0x0800d784
	ldr r1, =z_arm_int_exit
 8003ad0:	08003ad5 	.word	0x08003ad5

08003ad4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003ad6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003ad8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003ada:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003adc:	d003      	beq.n	8003ae6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003ade:	4903      	ldr	r1, [pc, #12]	; (8003aec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003ae4:	600a      	str	r2, [r1, #0]

08003ae6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003ae6:	4770      	bx	lr
	ldr r3, =_kernel
 8003ae8:	20000e04 	.word	0x20000e04
	ldr r1, =_SCS_ICSR
 8003aec:	e000ed04 	.word	0xe000ed04

08003af0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8003af0:	b508      	push	{r3, lr}
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <usage_fault+0x13c>)
 8003af4:	4a4e      	ldr	r2, [pc, #312]	; (8003c30 <usage_fault+0x140>)
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003afa:	f04f 0100 	mov.w	r1, #0
 8003afe:	2201      	movs	r2, #1
 8003b00:	f362 0102 	bfi	r1, r2, #0, #3
 8003b04:	f36f 01c5 	bfc	r1, #3, #3
 8003b08:	f363 118f 	bfi	r1, r3, #6, #10
 8003b0c:	4849      	ldr	r0, [pc, #292]	; (8003c34 <usage_fault+0x144>)
 8003b0e:	f7ff faa3 	bl	8003058 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <usage_fault+0x148>)
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b1a:	d121      	bne.n	8003b60 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <usage_fault+0x148>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003b24:	d12d      	bne.n	8003b82 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003b26:	4b44      	ldr	r3, [pc, #272]	; (8003c38 <usage_fault+0x148>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003b2e:	d139      	bne.n	8003ba4 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003b30:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <usage_fault+0x148>)
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003b38:	d145      	bne.n	8003bc6 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <usage_fault+0x148>)
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b42:	d151      	bne.n	8003be8 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <usage_fault+0x148>)
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b4c:	d15d      	bne.n	8003c0a <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003b4e:	4a3a      	ldr	r2, [pc, #232]	; (8003c38 <usage_fault+0x148>)
 8003b50:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003b52:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003b56:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003b5a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	bd08      	pop	{r3, pc}
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <usage_fault+0x13c>)
 8003b62:	4a33      	ldr	r2, [pc, #204]	; (8003c30 <usage_fault+0x140>)
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
 8003b68:	f04f 0100 	mov.w	r1, #0
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f362 0102 	bfi	r1, r2, #0, #3
 8003b72:	f36f 01c5 	bfc	r1, #3, #3
 8003b76:	f363 118f 	bfi	r1, r3, #6, #10
 8003b7a:	4830      	ldr	r0, [pc, #192]	; (8003c3c <usage_fault+0x14c>)
 8003b7c:	f7ff fa6c 	bl	8003058 <log_0>
 8003b80:	e7cc      	b.n	8003b1c <usage_fault+0x2c>
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <usage_fault+0x13c>)
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <usage_fault+0x140>)
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f362 0102 	bfi	r1, r2, #0, #3
 8003b94:	f36f 01c5 	bfc	r1, #3, #3
 8003b98:	f363 118f 	bfi	r1, r3, #6, #10
 8003b9c:	4828      	ldr	r0, [pc, #160]	; (8003c40 <usage_fault+0x150>)
 8003b9e:	f7ff fa5b 	bl	8003058 <log_0>
 8003ba2:	e7c0      	b.n	8003b26 <usage_fault+0x36>
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <usage_fault+0x13c>)
 8003ba6:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <usage_fault+0x140>)
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f362 0102 	bfi	r1, r2, #0, #3
 8003bb6:	f36f 01c5 	bfc	r1, #3, #3
 8003bba:	f363 118f 	bfi	r1, r3, #6, #10
 8003bbe:	4821      	ldr	r0, [pc, #132]	; (8003c44 <usage_fault+0x154>)
 8003bc0:	f7ff fa4a 	bl	8003058 <log_0>
 8003bc4:	e7b4      	b.n	8003b30 <usage_fault+0x40>
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <usage_fault+0x13c>)
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <usage_fault+0x140>)
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f362 0102 	bfi	r1, r2, #0, #3
 8003bd8:	f36f 01c5 	bfc	r1, #3, #3
 8003bdc:	f363 118f 	bfi	r1, r3, #6, #10
 8003be0:	4819      	ldr	r0, [pc, #100]	; (8003c48 <usage_fault+0x158>)
 8003be2:	f7ff fa39 	bl	8003058 <log_0>
 8003be6:	e7a8      	b.n	8003b3a <usage_fault+0x4a>
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <usage_fault+0x13c>)
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <usage_fault+0x140>)
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f362 0102 	bfi	r1, r2, #0, #3
 8003bfa:	f36f 01c5 	bfc	r1, #3, #3
 8003bfe:	f363 118f 	bfi	r1, r3, #6, #10
 8003c02:	4812      	ldr	r0, [pc, #72]	; (8003c4c <usage_fault+0x15c>)
 8003c04:	f7ff fa28 	bl	8003058 <log_0>
 8003c08:	e79c      	b.n	8003b44 <usage_fault+0x54>
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <usage_fault+0x13c>)
 8003c0c:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <usage_fault+0x140>)
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	2201      	movs	r2, #1
 8003c18:	f362 0102 	bfi	r1, r2, #0, #3
 8003c1c:	f36f 01c5 	bfc	r1, #3, #3
 8003c20:	f363 118f 	bfi	r1, r3, #6, #10
 8003c24:	480a      	ldr	r0, [pc, #40]	; (8003c50 <usage_fault+0x160>)
 8003c26:	f7ff fa17 	bl	8003058 <log_0>
 8003c2a:	e790      	b.n	8003b4e <usage_fault+0x5e>
 8003c2c:	0800d96c 	.word	0x0800d96c
 8003c30:	0800d954 	.word	0x0800d954
 8003c34:	0800defc 	.word	0x0800defc
 8003c38:	e000ed00 	.word	0xe000ed00
 8003c3c:	0800df14 	.word	0x0800df14
 8003c40:	0800df28 	.word	0x0800df28
 8003c44:	0800df44 	.word	0x0800df44
 8003c48:	0800df64 	.word	0x0800df64
 8003c4c:	0800df8c 	.word	0x0800df8c
 8003c50:	0800dfa8 	.word	0x0800dfa8

08003c54 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 8003c54:	b508      	push	{r3, lr}
	*recoverable = false;
 8003c56:	2200      	movs	r2, #0
 8003c58:	700a      	strb	r2, [r1, #0]
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <debug_monitor+0x28>)
 8003c5c:	4908      	ldr	r1, [pc, #32]	; (8003c80 <debug_monitor+0x2c>)
 8003c5e:	1a5b      	subs	r3, r3, r1
 8003c60:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	2001      	movs	r0, #1
 8003c68:	f360 0102 	bfi	r1, r0, #0, #3
 8003c6c:	f362 01c5 	bfi	r1, r2, #3, #3
 8003c70:	f363 118f 	bfi	r1, r3, #6, #10
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <debug_monitor+0x30>)
 8003c76:	f7ff f9ef 	bl	8003058 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 8003c7a:	bd08      	pop	{r3, pc}
 8003c7c:	0800d96c 	.word	0x0800d96c
 8003c80:	0800d954 	.word	0x0800d954
 8003c84:	0800dfd4 	.word	0x0800dfd4

08003c88 <bus_fault>:
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	460e      	mov	r6, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <bus_fault+0x158>)
 8003c92:	4a54      	ldr	r2, [pc, #336]	; (8003de4 <bus_fault+0x15c>)
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f362 0102 	bfi	r1, r2, #0, #3
 8003ca2:	f36f 01c5 	bfc	r1, #3, #3
 8003ca6:	f363 118f 	bfi	r1, r3, #6, #10
 8003caa:	484f      	ldr	r0, [pc, #316]	; (8003de8 <bus_fault+0x160>)
 8003cac:	f7ff f9d4 	bl	8003058 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003cb0:	4b4e      	ldr	r3, [pc, #312]	; (8003dec <bus_fault+0x164>)
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003cb8:	d11f      	bne.n	8003cfa <bus_fault+0x72>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003cba:	4b4c      	ldr	r3, [pc, #304]	; (8003dec <bus_fault+0x164>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003cc2:	d12b      	bne.n	8003d1c <bus_fault+0x94>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003cc4:	4b49      	ldr	r3, [pc, #292]	; (8003dec <bus_fault+0x164>)
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003ccc:	d137      	bne.n	8003d3e <bus_fault+0xb6>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <bus_fault+0x164>)
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003cd6:	d160      	bne.n	8003d9a <bus_fault+0x112>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003cd8:	4b44      	ldr	r3, [pc, #272]	; (8003dec <bus_fault+0x164>)
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ce0:	d16c      	bne.n	8003dbc <bus_fault+0x134>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003ce2:	4a42      	ldr	r2, [pc, #264]	; (8003dec <bus_fault+0x164>)
 8003ce4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003ce6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8003cea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003cec:	2101      	movs	r1, #1
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f007 fd2f 	bl	800b752 <memory_fault_recoverable>
 8003cf4:	7020      	strb	r0, [r4, #0]
}
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <bus_fault+0x158>)
 8003cfc:	4a39      	ldr	r2, [pc, #228]	; (8003de4 <bus_fault+0x15c>)
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	2201      	movs	r2, #1
 8003d08:	f362 0102 	bfi	r1, r2, #0, #3
 8003d0c:	f36f 01c5 	bfc	r1, #3, #3
 8003d10:	f363 118f 	bfi	r1, r3, #6, #10
 8003d14:	4836      	ldr	r0, [pc, #216]	; (8003df0 <bus_fault+0x168>)
 8003d16:	f7ff f99f 	bl	8003058 <log_0>
 8003d1a:	e7ce      	b.n	8003cba <bus_fault+0x32>
 8003d1c:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <bus_fault+0x158>)
 8003d1e:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <bus_fault+0x15c>)
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f362 0102 	bfi	r1, r2, #0, #3
 8003d2e:	f36f 01c5 	bfc	r1, #3, #3
 8003d32:	f363 118f 	bfi	r1, r3, #6, #10
 8003d36:	482f      	ldr	r0, [pc, #188]	; (8003df4 <bus_fault+0x16c>)
 8003d38:	f7ff f98e 	bl	8003058 <log_0>
 8003d3c:	e7c2      	b.n	8003cc4 <bus_fault+0x3c>
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <bus_fault+0x158>)
 8003d40:	4a28      	ldr	r2, [pc, #160]	; (8003de4 <bus_fault+0x15c>)
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f362 0102 	bfi	r1, r2, #0, #3
 8003d50:	f36f 01c5 	bfc	r1, #3, #3
 8003d54:	f363 118f 	bfi	r1, r3, #6, #10
 8003d58:	4827      	ldr	r0, [pc, #156]	; (8003df8 <bus_fault+0x170>)
 8003d5a:	f7ff f97d 	bl	8003058 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <bus_fault+0x164>)
 8003d60:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d68:	d0b1      	beq.n	8003cce <bus_fault+0x46>
 8003d6a:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <bus_fault+0x158>)
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <bus_fault+0x15c>)
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	2001      	movs	r0, #1
 8003d78:	f360 0202 	bfi	r2, r0, #0, #3
 8003d7c:	f36f 02c5 	bfc	r2, #3, #3
 8003d80:	f363 128f 	bfi	r2, r3, #6, #10
 8003d84:	481d      	ldr	r0, [pc, #116]	; (8003dfc <bus_fault+0x174>)
 8003d86:	f7ff f991 	bl	80030ac <log_1>
			if (from_hard_fault != 0) {
 8003d8a:	2e00      	cmp	r6, #0
 8003d8c:	d09f      	beq.n	8003cce <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <bus_fault+0x164>)
 8003d90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d96:	6293      	str	r3, [r2, #40]	; 0x28
 8003d98:	e799      	b.n	8003cce <bus_fault+0x46>
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <bus_fault+0x158>)
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <bus_fault+0x15c>)
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	2201      	movs	r2, #1
 8003da8:	f362 0102 	bfi	r1, r2, #0, #3
 8003dac:	f36f 01c5 	bfc	r1, #3, #3
 8003db0:	f363 118f 	bfi	r1, r3, #6, #10
 8003db4:	4812      	ldr	r0, [pc, #72]	; (8003e00 <bus_fault+0x178>)
 8003db6:	f7ff f94f 	bl	8003058 <log_0>
 8003dba:	e78d      	b.n	8003cd8 <bus_fault+0x50>
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <bus_fault+0x158>)
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <bus_fault+0x15c>)
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f362 0102 	bfi	r1, r2, #0, #3
 8003dce:	f36f 01c5 	bfc	r1, #3, #3
 8003dd2:	f363 118f 	bfi	r1, r3, #6, #10
 8003dd6:	480b      	ldr	r0, [pc, #44]	; (8003e04 <bus_fault+0x17c>)
 8003dd8:	f7ff f93e 	bl	8003058 <log_0>
 8003ddc:	e781      	b.n	8003ce2 <bus_fault+0x5a>
 8003dde:	bf00      	nop
 8003de0:	0800d96c 	.word	0x0800d96c
 8003de4:	0800d954 	.word	0x0800d954
 8003de8:	0800dff8 	.word	0x0800dff8
 8003dec:	e000ed00 	.word	0xe000ed00
 8003df0:	0800e010 	.word	0x0800e010
 8003df4:	0800e024 	.word	0x0800e024
 8003df8:	0800e038 	.word	0x0800e038
 8003dfc:	0800e054 	.word	0x0800e054
 8003e00:	0800e06c 	.word	0x0800e06c
 8003e04:	0800e088 	.word	0x0800e088

08003e08 <mem_manage_fault>:
{
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	4616      	mov	r6, r2
 8003e10:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <mem_manage_fault+0x16c>)
 8003e12:	4a59      	ldr	r2, [pc, #356]	; (8003f78 <mem_manage_fault+0x170>)
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f362 0102 	bfi	r1, r2, #0, #3
 8003e22:	f36f 01c5 	bfc	r1, #3, #3
 8003e26:	f363 118f 	bfi	r1, r3, #6, #10
 8003e2a:	4854      	ldr	r0, [pc, #336]	; (8003f7c <mem_manage_fault+0x174>)
 8003e2c:	f7ff f914 	bl	8003058 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003e30:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <mem_manage_fault+0x178>)
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f013 0f10 	tst.w	r3, #16
 8003e38:	d12b      	bne.n	8003e92 <mem_manage_fault+0x8a>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003e3a:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <mem_manage_fault+0x178>)
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	f013 0f08 	tst.w	r3, #8
 8003e42:	d137      	bne.n	8003eb4 <mem_manage_fault+0xac>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <mem_manage_fault+0x178>)
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f013 0f02 	tst.w	r3, #2
 8003e4c:	d143      	bne.n	8003ed6 <mem_manage_fault+0xce>
	uint32_t mmfar = -EINVAL;
 8003e4e:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <mem_manage_fault+0x178>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f013 0f01 	tst.w	r3, #1
 8003e5a:	d16e      	bne.n	8003f3a <mem_manage_fault+0x132>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003e5c:	4b48      	ldr	r3, [pc, #288]	; (8003f80 <mem_manage_fault+0x178>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f013 0f10 	tst.w	r3, #16
 8003e64:	d104      	bne.n	8003e70 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003e66:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <mem_manage_fault+0x178>)
 8003e68:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003e6a:	f014 0402 	ands.w	r4, r4, #2
 8003e6e:	d004      	beq.n	8003e7a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <mem_manage_fault+0x178>)
 8003e72:	685c      	ldr	r4, [r3, #4]
 8003e74:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8003e78:	d170      	bne.n	8003f5c <mem_manage_fault+0x154>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003e7a:	4a41      	ldr	r2, [pc, #260]	; (8003f80 <mem_manage_fault+0x178>)
 8003e7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003e7e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003e82:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8003e84:	2101      	movs	r1, #1
 8003e86:	4628      	mov	r0, r5
 8003e88:	f007 fc63 	bl	800b752 <memory_fault_recoverable>
 8003e8c:	7030      	strb	r0, [r6, #0]
}
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e92:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <mem_manage_fault+0x16c>)
 8003e94:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <mem_manage_fault+0x170>)
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f362 0102 	bfi	r1, r2, #0, #3
 8003ea4:	f36f 01c5 	bfc	r1, #3, #3
 8003ea8:	f363 118f 	bfi	r1, r3, #6, #10
 8003eac:	4835      	ldr	r0, [pc, #212]	; (8003f84 <mem_manage_fault+0x17c>)
 8003eae:	f7ff f8d3 	bl	8003058 <log_0>
 8003eb2:	e7c2      	b.n	8003e3a <mem_manage_fault+0x32>
 8003eb4:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <mem_manage_fault+0x16c>)
 8003eb6:	4a30      	ldr	r2, [pc, #192]	; (8003f78 <mem_manage_fault+0x170>)
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f362 0102 	bfi	r1, r2, #0, #3
 8003ec6:	f36f 01c5 	bfc	r1, #3, #3
 8003eca:	f363 118f 	bfi	r1, r3, #6, #10
 8003ece:	482e      	ldr	r0, [pc, #184]	; (8003f88 <mem_manage_fault+0x180>)
 8003ed0:	f7ff f8c2 	bl	8003058 <log_0>
 8003ed4:	e7b6      	b.n	8003e44 <mem_manage_fault+0x3c>
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <mem_manage_fault+0x16c>)
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <mem_manage_fault+0x170>)
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f362 0102 	bfi	r1, r2, #0, #3
 8003ee8:	f36f 01c5 	bfc	r1, #3, #3
 8003eec:	f363 118f 	bfi	r1, r3, #6, #10
 8003ef0:	4826      	ldr	r0, [pc, #152]	; (8003f8c <mem_manage_fault+0x184>)
 8003ef2:	f7ff f8b1 	bl	8003058 <log_0>
		uint32_t temp = SCB->MMFAR;
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <mem_manage_fault+0x178>)
 8003ef8:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f00:	d102      	bne.n	8003f08 <mem_manage_fault+0x100>
	uint32_t mmfar = -EINVAL;
 8003f02:	f06f 0715 	mvn.w	r7, #21
 8003f06:	e7a4      	b.n	8003e52 <mem_manage_fault+0x4a>
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <mem_manage_fault+0x16c>)
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <mem_manage_fault+0x170>)
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	2101      	movs	r1, #1
 8003f16:	f361 0202 	bfi	r2, r1, #0, #3
 8003f1a:	f36f 02c5 	bfc	r2, #3, #3
 8003f1e:	f363 128f 	bfi	r2, r3, #6, #10
 8003f22:	4639      	mov	r1, r7
 8003f24:	481a      	ldr	r0, [pc, #104]	; (8003f90 <mem_manage_fault+0x188>)
 8003f26:	f7ff f8c1 	bl	80030ac <log_1>
			if (from_hard_fault != 0) {
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d091      	beq.n	8003e52 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003f2e:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <mem_manage_fault+0x178>)
 8003f30:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f36:	6293      	str	r3, [r2, #40]	; 0x28
 8003f38:	e78b      	b.n	8003e52 <mem_manage_fault+0x4a>
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <mem_manage_fault+0x16c>)
 8003f3c:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <mem_manage_fault+0x170>)
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	2201      	movs	r2, #1
 8003f48:	f362 0102 	bfi	r1, r2, #0, #3
 8003f4c:	f36f 01c5 	bfc	r1, #3, #3
 8003f50:	f363 118f 	bfi	r1, r3, #6, #10
 8003f54:	480f      	ldr	r0, [pc, #60]	; (8003f94 <mem_manage_fault+0x18c>)
 8003f56:	f7ff f87f 	bl	8003058 <log_0>
 8003f5a:	e77f      	b.n	8003e5c <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f7ff fd68 	bl	8003a34 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8003f64:	4604      	mov	r4, r0
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d087      	beq.n	8003e7a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003f6a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8003f6e:	2402      	movs	r4, #2
 8003f70:	e783      	b.n	8003e7a <mem_manage_fault+0x72>
 8003f72:	bf00      	nop
 8003f74:	0800d96c 	.word	0x0800d96c
 8003f78:	0800d954 	.word	0x0800d954
 8003f7c:	0800e0a0 	.word	0x0800e0a0
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	0800e0b8 	.word	0x0800e0b8
 8003f88:	0800e024 	.word	0x0800e024
 8003f8c:	0800e0ec 	.word	0x0800e0ec
 8003f90:	0800e104 	.word	0x0800e104
 8003f94:	0800e11c 	.word	0x0800e11c

08003f98 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	4b46      	ldr	r3, [pc, #280]	; (80040b8 <hard_fault+0x120>)
 8003fa0:	4a46      	ldr	r2, [pc, #280]	; (80040bc <hard_fault+0x124>)
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	2201      	movs	r2, #1
 8003fac:	f362 0102 	bfi	r1, r2, #0, #3
 8003fb0:	f36f 01c5 	bfc	r1, #3, #3
 8003fb4:	f363 118f 	bfi	r1, r3, #6, #10
 8003fb8:	4841      	ldr	r0, [pc, #260]	; (80040c0 <hard_fault+0x128>)
 8003fba:	f7ff f84d 	bl	8003058 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003fc2:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <hard_fault+0x12c>)
 8003fc4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003fc6:	f016 0602 	ands.w	r6, r6, #2
 8003fca:	d109      	bne.n	8003fe0 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8003fcc:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <hard_fault+0x12c>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db17      	blt.n	8004004 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <hard_fault+0x12c>)
 8003fd6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003fd8:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8003fdc:	d124      	bne.n	8004028 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <hard_fault+0x120>)
 8003fe2:	4a36      	ldr	r2, [pc, #216]	; (80040bc <hard_fault+0x124>)
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
 8003fe8:	f04f 0100 	mov.w	r1, #0
 8003fec:	2201      	movs	r2, #1
 8003fee:	f362 0102 	bfi	r1, r2, #0, #3
 8003ff2:	f36f 01c5 	bfc	r1, #3, #3
 8003ff6:	f363 118f 	bfi	r1, r3, #6, #10
 8003ffa:	4833      	ldr	r0, [pc, #204]	; (80040c8 <hard_fault+0x130>)
 8003ffc:	f7ff f82c 	bl	8003058 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004000:	2000      	movs	r0, #0
 8004002:	e7ec      	b.n	8003fde <hard_fault+0x46>
 8004004:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <hard_fault+0x120>)
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <hard_fault+0x124>)
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	2201      	movs	r2, #1
 8004012:	f362 0102 	bfi	r1, r2, #0, #3
 8004016:	f36f 01c5 	bfc	r1, #3, #3
 800401a:	f363 118f 	bfi	r1, r3, #6, #10
 800401e:	482b      	ldr	r0, [pc, #172]	; (80040cc <hard_fault+0x134>)
 8004020:	f7ff f81a 	bl	8003058 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004024:	4630      	mov	r0, r6
 8004026:	e7da      	b.n	8003fde <hard_fault+0x46>
 8004028:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <hard_fault+0x120>)
 800402a:	4a24      	ldr	r2, [pc, #144]	; (80040bc <hard_fault+0x124>)
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	2201      	movs	r2, #1
 8004036:	f362 0102 	bfi	r1, r2, #0, #3
 800403a:	f36f 01c5 	bfc	r1, #3, #3
 800403e:	f363 118f 	bfi	r1, r3, #6, #10
 8004042:	4823      	ldr	r0, [pc, #140]	; (80040d0 <hard_fault+0x138>)
 8004044:	f7ff f808 	bl	8003058 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8004048:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 800404a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 800404e:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8004052:	429a      	cmp	r2, r3
 8004054:	d00d      	beq.n	8004072 <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <hard_fault+0x12c>)
 8004058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405c:	b9e3      	cbnz	r3, 8004098 <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
 800405e:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <hard_fault+0x12c>)
 8004060:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004064:	b9f3      	cbnz	r3, 80040a4 <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <hard_fault+0x12c>)
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	bb03      	cbnz	r3, 80040b0 <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800406e:	4630      	mov	r0, r6
	return reason;
 8004070:	e7b5      	b.n	8003fde <hard_fault+0x46>
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <hard_fault+0x120>)
 8004074:	4a11      	ldr	r2, [pc, #68]	; (80040bc <hard_fault+0x124>)
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	2101      	movs	r1, #1
 8004080:	f361 0202 	bfi	r2, r1, #0, #3
 8004084:	f36f 02c5 	bfc	r2, #3, #3
 8004088:	f363 128f 	bfi	r2, r3, #6, #10
 800408c:	6829      	ldr	r1, [r5, #0]
 800408e:	4811      	ldr	r0, [pc, #68]	; (80040d4 <hard_fault+0x13c>)
 8004090:	f7ff f80c 	bl	80030ac <log_1>
			reason = esf->basic.r0;
 8004094:	6828      	ldr	r0, [r5, #0]
 8004096:	e7a2      	b.n	8003fde <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
 8004098:	4622      	mov	r2, r4
 800409a:	2101      	movs	r1, #1
 800409c:	4628      	mov	r0, r5
 800409e:	f7ff feb3 	bl	8003e08 <mem_manage_fault>
 80040a2:	e79c      	b.n	8003fde <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
 80040a4:	4622      	mov	r2, r4
 80040a6:	2101      	movs	r1, #1
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7ff fded 	bl	8003c88 <bus_fault>
 80040ae:	e796      	b.n	8003fde <hard_fault+0x46>
			reason = usage_fault(esf);
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7ff fd1d 	bl	8003af0 <usage_fault>
 80040b6:	e792      	b.n	8003fde <hard_fault+0x46>
 80040b8:	0800d96c 	.word	0x0800d96c
 80040bc:	0800d954 	.word	0x0800d954
 80040c0:	0800e13c 	.word	0x0800e13c
 80040c4:	e000ed00 	.word	0xe000ed00
 80040c8:	0800e154 	.word	0x0800e154
 80040cc:	0800e178 	.word	0x0800e178
 80040d0:	0800e188 	.word	0x0800e188
 80040d4:	0800e1a8 	.word	0x0800e1a8

080040d8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 80040d8:	b508      	push	{r3, lr}
 80040da:	460a      	mov	r2, r1
 80040dc:	480b      	ldr	r0, [pc, #44]	; (800410c <reserved_exception+0x34>)
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <reserved_exception+0x38>)
 80040e0:	1ac0      	subs	r0, r0, r3
 80040e2:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	2101      	movs	r1, #1
 80040ea:	f361 0302 	bfi	r3, r1, #0, #3
 80040ee:	f36f 03c5 	bfc	r3, #3, #3
 80040f2:	f360 138f 	bfi	r3, r0, #6, #10
 80040f6:	2a0f      	cmp	r2, #15
 80040f8:	dc05      	bgt.n	8004106 <reserved_exception+0x2e>
 80040fa:	4906      	ldr	r1, [pc, #24]	; (8004114 <reserved_exception+0x3c>)
 80040fc:	3a10      	subs	r2, #16
 80040fe:	4806      	ldr	r0, [pc, #24]	; (8004118 <reserved_exception+0x40>)
 8004100:	f7ff f806 	bl	8003110 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8004104:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 8004106:	4905      	ldr	r1, [pc, #20]	; (800411c <reserved_exception+0x44>)
 8004108:	e7f8      	b.n	80040fc <reserved_exception+0x24>
 800410a:	bf00      	nop
 800410c:	0800d96c 	.word	0x0800d96c
 8004110:	0800d954 	.word	0x0800d954
 8004114:	0800e1c4 	.word	0x0800e1c4
 8004118:	0800e1f8 	.word	0x0800e1f8
 800411c:	0800e1dc 	.word	0x0800e1dc

08004120 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004124:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <z_arm_fault+0xc4>)
 8004126:	685d      	ldr	r5, [r3, #4]
 8004128:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800412c:	2300      	movs	r3, #0
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8004136:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800413a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800413e:	d12a      	bne.n	8004196 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004140:	f002 030c 	and.w	r3, r2, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d010      	beq.n	800416a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8004148:	f012 0f08 	tst.w	r2, #8
 800414c:	d020      	beq.n	8004190 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
 800414e:	460c      	mov	r4, r1
	*nested_exc = false;
 8004150:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8004152:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8004156:	4629      	mov	r1, r5
 8004158:	4620      	mov	r0, r4
 800415a:	f007 fafc 	bl	800b756 <fault_handle>
 800415e:	4605      	mov	r5, r0
	if (recoverable) {
 8004160:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004164:	b1d3      	cbz	r3, 800419c <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8004166:	b00a      	add	sp, #40	; 0x28
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <z_arm_fault+0xc8>)
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <z_arm_fault+0xcc>)
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	2201      	movs	r2, #1
 8004178:	f362 0102 	bfi	r1, r2, #0, #3
 800417c:	f36f 01c5 	bfc	r1, #3, #3
 8004180:	f363 118f 	bfi	r1, r3, #6, #10
 8004184:	481a      	ldr	r0, [pc, #104]	; (80041f0 <z_arm_fault+0xd0>)
 8004186:	f7fe ff67 	bl	8003058 <log_0>
	*nested_exc = false;
 800418a:	2600      	movs	r6, #0
		return NULL;
 800418c:	4634      	mov	r4, r6
 800418e:	e7e0      	b.n	8004152 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8004190:	4604      	mov	r4, r0
			*nested_exc = true;
 8004192:	2601      	movs	r6, #1
 8004194:	e7dd      	b.n	8004152 <z_arm_fault+0x32>
	*nested_exc = false;
 8004196:	2600      	movs	r6, #0
		return NULL;
 8004198:	4634      	mov	r4, r6
 800419a:	e7da      	b.n	8004152 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800419c:	f10d 0c04 	add.w	ip, sp, #4
 80041a0:	6820      	ldr	r0, [r4, #0]
 80041a2:	6861      	ldr	r1, [r4, #4]
 80041a4:	68a2      	ldr	r2, [r4, #8]
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80041ac:	6920      	ldr	r0, [r4, #16]
 80041ae:	6961      	ldr	r1, [r4, #20]
 80041b0:	69a2      	ldr	r2, [r4, #24]
 80041b2:	69e3      	ldr	r3, [r4, #28]
 80041b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 80041b8:	b146      	cbz	r6, 80041cc <z_arm_fault+0xac>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80041ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041be:	b95a      	cbnz	r2, 80041d8 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80041c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80041c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80041c8:	9308      	str	r3, [sp, #32]
 80041ca:	e005      	b.n	80041d8 <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80041cc:	9b08      	ldr	r3, [sp, #32]
 80041ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 80041d8:	a901      	add	r1, sp, #4
 80041da:	4628      	mov	r0, r5
 80041dc:	f007 fa9b 	bl	800b716 <z_arm_fatal_error>
 80041e0:	e7c1      	b.n	8004166 <z_arm_fault+0x46>
 80041e2:	bf00      	nop
 80041e4:	e000ed00 	.word	0xe000ed00
 80041e8:	0800d96c 	.word	0x0800d96c
 80041ec:	0800d954 	.word	0x0800d954
 80041f0:	0800e20c 	.word	0x0800e20c

080041f4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80041f4:	4a02      	ldr	r2, [pc, #8]	; (8004200 <z_arm_fault_init+0xc>)
 80041f6:	6953      	ldr	r3, [r2, #20]
 80041f8:	f043 0310 	orr.w	r3, r3, #16
 80041fc:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80041fe:	4770      	bx	lr
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8004204:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8004208:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800420c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800420e:	4672      	mov	r2, lr
	bl z_arm_fault
 8004210:	f7ff ff86 	bl	8004120 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8004214:	bd01      	pop	{r0, pc}
 8004216:	bf00      	nop

08004218 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8004218:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 800421a:	e006      	b.n	800422a <z_arm_interrupt_init+0x12>
 800421c:	f002 010f 	and.w	r1, r2, #15
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <z_arm_interrupt_init+0x30>)
 8004222:	440b      	add	r3, r1
 8004224:	2110      	movs	r1, #16
 8004226:	7619      	strb	r1, [r3, #24]
 8004228:	3201      	adds	r2, #1
 800422a:	2a38      	cmp	r2, #56	; 0x38
 800422c:	dc0a      	bgt.n	8004244 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 800422e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004230:	2b00      	cmp	r3, #0
 8004232:	dbf3      	blt.n	800421c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004234:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004238:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800423c:	2110      	movs	r1, #16
 800423e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8004242:	e7f1      	b.n	8004228 <z_arm_interrupt_init+0x10>
	}
}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000ecfc 	.word	0xe000ecfc

0800424c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800424c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800424e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004252:	4808      	ldr	r0, [pc, #32]	; (8004274 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004254:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8004258:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800425a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 800425e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004262:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004264:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8004266:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800426a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800426e:	f7ff fb55 	bl	800391c <z_arm_prep_c>
 8004272:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004274:	20002f40 	.word	0x20002f40

08004278 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8004278:	b508      	push	{r3, lr}
	if (_current == thread) {
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <z_impl_k_thread_abort+0x24>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4283      	cmp	r3, r0
 8004280:	d002      	beq.n	8004288 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004282:	f004 fc79 	bl	8008b78 <z_thread_abort>
}
 8004286:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004288:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f8      	beq.n	8004282 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004290:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <z_impl_k_thread_abort+0x28>)
 8004292:	6853      	ldr	r3, [r2, #4]
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	e7f2      	b.n	8004282 <z_impl_k_thread_abort+0xa>
 800429c:	20000e04 	.word	0x20000e04
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80042a4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80042a6:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <z_arm_configure_static_mpu_regions+0x10>)
 80042a8:	4a03      	ldr	r2, [pc, #12]	; (80042b8 <z_arm_configure_static_mpu_regions+0x14>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	4803      	ldr	r0, [pc, #12]	; (80042bc <z_arm_configure_static_mpu_regions+0x18>)
 80042ae:	f007 faa7 	bl	800b800 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80042b2:	bd08      	pop	{r3, pc}
 80042b4:	20014000 	.word	0x20014000
 80042b8:	20000000 	.word	0x20000000
 80042bc:	0800e23c 	.word	0x0800e23c

080042c0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 80042c0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80042c2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80042c4:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80042c8:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 80042ca:	2320      	movs	r3, #32
 80042cc:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <z_arm_configure_dynamic_mpu_regions+0x20>)
 80042d0:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80042d2:	2101      	movs	r1, #1
 80042d4:	f007 fa98 	bl	800b808 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 80042d8:	bd08      	pop	{r3, pc}
 80042da:	bf00      	nop
 80042dc:	20000980 	.word	0x20000980
 80042e0:	150b0000 	.word	0x150b0000

080042e4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80042e4:	4a08      	ldr	r2, [pc, #32]	; (8004308 <region_init+0x24>)
 80042e6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80042ea:	680b      	ldr	r3, [r1, #0]
 80042ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80042f0:	4303      	orrs	r3, r0
 80042f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80042f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80042fa:	688b      	ldr	r3, [r1, #8]
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 800430c:	b510      	push	{r4, lr}
 800430e:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8004310:	2807      	cmp	r0, #7
 8004312:	d803      	bhi.n	800431c <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8004314:	f7ff ffe6 	bl	80042e4 <region_init>

	return index;
 8004318:	4620      	mov	r0, r4
}
 800431a:	bd10      	pop	{r4, pc}
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <region_allocate_and_init+0x38>)
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <region_allocate_and_init+0x3c>)
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	2101      	movs	r1, #1
 800432a:	f361 0202 	bfi	r2, r1, #0, #3
 800432e:	f36f 02c5 	bfc	r2, #3, #3
 8004332:	f363 128f 	bfi	r2, r3, #6, #10
 8004336:	4601      	mov	r1, r0
 8004338:	4804      	ldr	r0, [pc, #16]	; (800434c <region_allocate_and_init+0x40>)
 800433a:	f7fe feb7 	bl	80030ac <log_1>
		return -EINVAL;
 800433e:	f06f 0015 	mvn.w	r0, #21
 8004342:	e7ea      	b.n	800431a <region_allocate_and_init+0xe>
 8004344:	0800d964 	.word	0x0800d964
 8004348:	0800d954 	.word	0x0800d954
 800434c:	0800e248 	.word	0x0800e248

08004350 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	4680      	mov	r8, r0
 8004356:	460f      	mov	r7, r1
 8004358:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
 800435a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 800435c:	2400      	movs	r4, #0
 800435e:	e009      	b.n	8004374 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004360:	4629      	mov	r1, r5
 8004362:	b2f0      	uxtb	r0, r6
 8004364:	f007 fa2d 	bl	800b7c2 <mpu_configure_region>
 8004368:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 800436a:	f110 0f16 	cmn.w	r0, #22
 800436e:	d025      	beq.n	80043bc <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004370:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004372:	3401      	adds	r4, #1
 8004374:	42bc      	cmp	r4, r7
 8004376:	da21      	bge.n	80043bc <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
 8004378:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800437c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004380:	686a      	ldr	r2, [r5, #4]
 8004382:	2a00      	cmp	r2, #0
 8004384:	d0f5      	beq.n	8004372 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 8004386:	f1ba 0f00 	cmp.w	sl, #0
 800438a:	d0e9      	beq.n	8004360 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 800438c:	4628      	mov	r0, r5
 800438e:	f007 fa07 	bl	800b7a0 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004392:	2800      	cmp	r0, #0
 8004394:	d1e4      	bne.n	8004360 <mpu_configure_regions+0x10>
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <mpu_configure_regions+0x74>)
 8004398:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <mpu_configure_regions+0x78>)
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	2101      	movs	r1, #1
 80043a4:	f361 0202 	bfi	r2, r1, #0, #3
 80043a8:	f36f 02c5 	bfc	r2, #3, #3
 80043ac:	f363 128f 	bfi	r2, r3, #6, #10
 80043b0:	4621      	mov	r1, r4
 80043b2:	4806      	ldr	r0, [pc, #24]	; (80043cc <mpu_configure_regions+0x7c>)
 80043b4:	f7fe fe7a 	bl	80030ac <log_1>
			return -EINVAL;
 80043b8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 80043bc:	4630      	mov	r0, r6
 80043be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c2:	bf00      	nop
 80043c4:	0800d964 	.word	0x0800d964
 80043c8:	0800d954 	.word	0x0800d954
 80043cc:	0800e270 	.word	0x0800e270

080043d0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 80043d0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 80043d2:	4c03      	ldr	r4, [pc, #12]	; (80043e0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80043d4:	2301      	movs	r3, #1
 80043d6:	7822      	ldrb	r2, [r4, #0]
 80043d8:	f7ff ffba 	bl	8004350 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80043dc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 80043de:	bd10      	pop	{r4, pc}
 80043e0:	20000e64 	.word	0x20000e64

080043e4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80043e4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80043e6:	2300      	movs	r3, #0
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <mpu_configure_dynamic_mpu_regions+0x2c>)
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	f7ff ffb0 	bl	8004350 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80043f0:	f110 0f16 	cmn.w	r0, #22
 80043f4:	d00a      	beq.n	800440c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80043f6:	4603      	mov	r3, r0
 80043f8:	e006      	b.n	8004408 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80043fa:	4a06      	ldr	r2, [pc, #24]	; (8004414 <mpu_configure_dynamic_mpu_regions+0x30>)
 80043fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8004400:	2100      	movs	r1, #0
 8004402:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004406:	3301      	adds	r3, #1
 8004408:	2b07      	cmp	r3, #7
 800440a:	ddf6      	ble.n	80043fa <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 800440c:	bd08      	pop	{r3, pc}
 800440e:	bf00      	nop
 8004410:	20000e64 	.word	0x20000e64
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <arm_core_mpu_enable+0x14>)
 800441a:	2205      	movs	r2, #5
 800441c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8004420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004424:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004430:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <arm_core_mpu_disable+0x10>)
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8004444:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <z_arm_mpu_init+0x3c>)
 8004448:	681d      	ldr	r5, [r3, #0]
 800444a:	2d08      	cmp	r5, #8
 800444c:	d815      	bhi.n	800447a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800444e:	f7ff ffef 	bl	8004430 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004452:	2400      	movs	r4, #0
 8004454:	e009      	b.n	800446a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <z_arm_mpu_init+0x3c>)
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800445e:	0093      	lsls	r3, r2, #2
 8004460:	4419      	add	r1, r3
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff ff3e 	bl	80042e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004468:	3401      	adds	r4, #1
 800446a:	42a5      	cmp	r5, r4
 800446c:	d8f3      	bhi.n	8004456 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <z_arm_mpu_init+0x40>)
 8004470:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8004472:	f7ff ffd1 	bl	8004418 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8004476:	2000      	movs	r0, #0
}
 8004478:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800447a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800447e:	e7fb      	b.n	8004478 <z_arm_mpu_init+0x34>
 8004480:	0800e2ac 	.word	0x0800e2ac
 8004484:	20000e64 	.word	0x20000e64

08004488 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8004488:	4b01      	ldr	r3, [pc, #4]	; (8004490 <__stdout_hook_install+0x8>)
 800448a:	6018      	str	r0, [r3, #0]
}
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c

08004494 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4606      	mov	r6, r0
 8004498:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 800449a:	2400      	movs	r4, #0
 800449c:	e000      	b.n	80044a0 <z_impl_zephyr_read_stdin+0xc>
 800449e:	3401      	adds	r4, #1
 80044a0:	42ac      	cmp	r4, r5
 80044a2:	da08      	bge.n	80044b6 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <z_impl_zephyr_read_stdin+0x28>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4798      	blx	r3
 80044aa:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80044ac:	280a      	cmp	r0, #10
 80044ae:	d001      	beq.n	80044b4 <z_impl_zephyr_read_stdin+0x20>
 80044b0:	280d      	cmp	r0, #13
 80044b2:	d1f4      	bne.n	800449e <z_impl_zephyr_read_stdin+0xa>
			i++;
 80044b4:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 80044b6:	4620      	mov	r0, r4
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
 80044ba:	bf00      	nop
 80044bc:	20000008 	.word	0x20000008

080044c0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	4605      	mov	r5, r0
 80044c4:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80044c6:	2400      	movs	r4, #0
 80044c8:	e004      	b.n	80044d4 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <z_impl_zephyr_write_stdout+0x30>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	7830      	ldrb	r0, [r6, #0]
 80044d0:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80044d2:	3401      	adds	r4, #1
 80044d4:	42bc      	cmp	r4, r7
 80044d6:	da08      	bge.n	80044ea <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 80044d8:	192e      	adds	r6, r5, r4
 80044da:	5d2b      	ldrb	r3, [r5, r4]
 80044dc:	2b0a      	cmp	r3, #10
 80044de:	d1f4      	bne.n	80044ca <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <z_impl_zephyr_write_stdout+0x30>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	200d      	movs	r0, #13
 80044e6:	4798      	blx	r3
 80044e8:	e7ef      	b.n	80044ca <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 80044ea:	4638      	mov	r0, r7
 80044ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80044f4:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 80044f6:	2205      	movs	r2, #5
 80044f8:	4902      	ldr	r1, [pc, #8]	; (8004504 <_exit+0x10>)
 80044fa:	2001      	movs	r0, #1
 80044fc:	f007 f995 	bl	800b82a <_write>
	while (1) {
 8004500:	e7fe      	b.n	8004500 <_exit+0xc>
 8004502:	bf00      	nop
 8004504:	0800e294 	.word	0x0800e294

08004508 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8004508:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <_sbrk+0x24>)
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <_sbrk+0x28>)
 8004510:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8004512:	440a      	add	r2, r1
 8004514:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8004518:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
 800451c:	429a      	cmp	r2, r3
 800451e:	d202      	bcs.n	8004526 <_sbrk+0x1e>
		heap_sz += count;
 8004520:	4b02      	ldr	r3, [pc, #8]	; (800452c <_sbrk+0x24>)
 8004522:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8004524:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 8004526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 800452a:	4770      	bx	lr
 800452c:	2000098c 	.word	0x2000098c
 8004530:	200040ca 	.word	0x200040ca

08004534 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4604      	mov	r4, r0
 8004538:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 800453a:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 800453c:	e000      	b.n	8004540 <__stm32_exti_isr+0xc>
 800453e:	3401      	adds	r4, #1
 8004540:	42ac      	cmp	r4, r5
 8004542:	da14      	bge.n	800456e <__stm32_exti_isr+0x3a>
	if (line < 32) {
 8004544:	2c1f      	cmp	r4, #31
 8004546:	dcfa      	bgt.n	800453e <__stm32_exti_isr+0xa>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004548:	2301      	movs	r3, #1
 800454a:	40a3      	lsls	r3, r4
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <__stm32_exti_isr+0x3c>)
 800454e:	6952      	ldr	r2, [r2, #20]
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8004550:	ea33 0202 	bics.w	r2, r3, r2
 8004554:	d1f3      	bne.n	800453e <__stm32_exti_isr+0xa>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004556:	4a06      	ldr	r2, [pc, #24]	; (8004570 <__stm32_exti_isr+0x3c>)
 8004558:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 800455a:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0ed      	beq.n	800453e <__stm32_exti_isr+0xa>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004562:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8004566:	6851      	ldr	r1, [r2, #4]
 8004568:	4620      	mov	r0, r4
 800456a:	4798      	blx	r3
 800456c:	e7e7      	b.n	800453e <__stm32_exti_isr+0xa>
		}
	}
}
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	40010400 	.word	0x40010400

08004574 <stm32_exti_enable>:
{
 8004574:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8004576:	2301      	movs	r3, #1
 8004578:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR, ExtiLine);
 800457a:	4a04      	ldr	r2, [pc, #16]	; (800458c <stm32_exti_enable+0x18>)
 800457c:	6811      	ldr	r1, [r2, #0]
 800457e:	430b      	orrs	r3, r1
 8004580:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004582:	4b03      	ldr	r3, [pc, #12]	; (8004590 <stm32_exti_enable+0x1c>)
 8004584:	5618      	ldrsb	r0, [r3, r0]
 8004586:	f7ff f9a1 	bl	80038cc <arch_irq_enable>
}
 800458a:	bd08      	pop	{r3, pc}
 800458c:	40010400 	.word	0x40010400
 8004590:	0800e2ec 	.word	0x0800e2ec

08004594 <stm32_exti_disable>:
	if (line < 32) {
 8004594:	281f      	cmp	r0, #31
 8004596:	dc06      	bgt.n	80045a6 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8004598:	2301      	movs	r3, #1
 800459a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800459c:	4a02      	ldr	r2, [pc, #8]	; (80045a8 <stm32_exti_disable+0x14>)
 800459e:	6810      	ldr	r0, [r2, #0]
 80045a0:	ea20 0003 	bic.w	r0, r0, r3
 80045a4:	6010      	str	r0, [r2, #0]
}
 80045a6:	4770      	bx	lr
 80045a8:	40010400 	.word	0x40010400

080045ac <stm32_exti_trigger>:
	switch (trigger) {
 80045ac:	2903      	cmp	r1, #3
 80045ae:	d832      	bhi.n	8004616 <stm32_exti_trigger+0x6a>
 80045b0:	e8df f001 	tbb	[pc, r1]
 80045b4:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 80045b8:	2301      	movs	r3, #1
 80045ba:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <stm32_exti_trigger+0x6c>)
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	ea22 0200 	bic.w	r2, r2, r0
 80045c6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	ea22 0000 	bic.w	r0, r2, r0
 80045ce:	60d8      	str	r0, [r3, #12]
}
 80045d0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80045d2:	2301      	movs	r3, #1
 80045d4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <stm32_exti_trigger+0x6c>)
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4302      	orrs	r2, r0
 80045de:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	ea22 0000 	bic.w	r0, r2, r0
 80045e6:	60d8      	str	r0, [r3, #12]
}
 80045e8:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 80045ea:	2301      	movs	r3, #1
 80045ec:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <stm32_exti_trigger+0x6c>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4302      	orrs	r2, r0
 80045f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	ea22 0000 	bic.w	r0, r2, r0
 80045fe:	6098      	str	r0, [r3, #8]
}
 8004600:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004602:	2301      	movs	r3, #1
 8004604:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <stm32_exti_trigger+0x6c>)
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	4302      	orrs	r2, r0
 800460e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	4310      	orrs	r0, r2
 8004614:	60d8      	str	r0, [r3, #12]
}
 8004616:	4770      	bx	lr
 8004618:	40010400 	.word	0x40010400

0800461c <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <stm32_exti_set_callback+0x20>)
 800461e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004622:	b93b      	cbnz	r3, 8004634 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <stm32_exti_set_callback+0x20>)
 8004626:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 800462a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800462e:	6042      	str	r2, [r0, #4]

	return 0;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
		return -EBUSY;
 8004634:	f06f 000f 	mvn.w	r0, #15
}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000990 	.word	0x20000990

08004640 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <stm32_exti_unset_callback+0x10>)
 8004642:	2200      	movs	r2, #0
 8004644:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8004648:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800464c:	605a      	str	r2, [r3, #4]
}
 800464e:	4770      	bx	lr
 8004650:	20000990 	.word	0x20000990

08004654 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8004654:	b084      	sub	sp, #16
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004656:	680b      	ldr	r3, [r1, #0]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d011      	beq.n	8004680 <stm32_clock_control_on+0x2c>
 800465c:	2b03      	cmp	r3, #3
 800465e:	d01a      	beq.n	8004696 <stm32_clock_control_on+0x42>
 8004660:	b11b      	cbz	r3, 800466a <stm32_clock_control_on+0x16>
 8004662:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 8004666:	b004      	add	sp, #16
 8004668:	4770      	bx	lr
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 800466a:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800466c:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <stm32_clock_control_on+0x58>)
 800466e:	69d1      	ldr	r1, [r2, #28]
 8004670:	4319      	orrs	r1, r3
 8004672:	61d1      	str	r1, [r2, #28]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004674:	69d2      	ldr	r2, [r2, #28]
 8004676:	4013      	ands	r3, r2
 8004678:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800467a:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800467c:	2000      	movs	r0, #0
}
 800467e:	e7f2      	b.n	8004666 <stm32_clock_control_on+0x12>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004680:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <stm32_clock_control_on+0x58>)
 8004684:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004686:	4319      	orrs	r1, r3
 8004688:	6251      	str	r1, [r2, #36]	; 0x24
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800468a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800468c:	4013      	ands	r3, r2
 800468e:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004690:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8004692:	2000      	movs	r0, #0
}
 8004694:	e7e7      	b.n	8004666 <stm32_clock_control_on+0x12>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004696:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <stm32_clock_control_on+0x58>)
 800469a:	6a11      	ldr	r1, [r2, #32]
 800469c:	4319      	orrs	r1, r3
 800469e:	6211      	str	r1, [r2, #32]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80046a0:	6a12      	ldr	r2, [r2, #32]
 80046a2:	4013      	ands	r3, r2
 80046a4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80046a6:	9b03      	ldr	r3, [sp, #12]
	return 0;
 80046a8:	2000      	movs	r0, #0
}
 80046aa:	e7dc      	b.n	8004666 <stm32_clock_control_on+0x12>
 80046ac:	40023800 	.word	0x40023800

080046b0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d00d      	beq.n	80046d2 <stm32_clock_control_off+0x22>
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d013      	beq.n	80046e2 <stm32_clock_control_off+0x32>
 80046ba:	b113      	cbz	r3, 80046c2 <stm32_clock_control_off+0x12>
 80046bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
	default:
		return -ENOTSUP;
	}

	return 0;
}
 80046c0:	4770      	bx	lr
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 80046c2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHBENR, Periphs);
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <stm32_clock_control_off+0x44>)
 80046c6:	69d3      	ldr	r3, [r2, #28]
 80046c8:	ea23 0301 	bic.w	r3, r3, r1
 80046cc:	61d3      	str	r3, [r2, #28]
	return 0;
 80046ce:	2000      	movs	r0, #0
}
 80046d0:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 80046d2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <stm32_clock_control_off+0x44>)
 80046d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80046d8:	ea23 0301 	bic.w	r3, r3, r1
 80046dc:	6253      	str	r3, [r2, #36]	; 0x24
	return 0;
 80046de:	2000      	movs	r0, #0
}
 80046e0:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 80046e2:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80046e4:	4a03      	ldr	r2, [pc, #12]	; (80046f4 <stm32_clock_control_off+0x44>)
 80046e6:	6a13      	ldr	r3, [r2, #32]
 80046e8:	ea23 0301 	bic.w	r3, r3, r1
 80046ec:	6213      	str	r3, [r2, #32]
	return 0;
 80046ee:	2000      	movs	r0, #0
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <stm32_clock_control_get_subsys_rate+0x3c>)
 8004700:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8004702:	2101      	movs	r1, #1
 8004704:	4630      	mov	r0, r6
 8004706:	f007 f91e 	bl	800b946 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d80e      	bhi.n	800472e <stm32_clock_control_get_subsys_rate+0x36>
 8004710:	e8df f003 	tbb	[pc, r3]
 8004714:	0a070404 	.word	0x0a070404
 8004718:	0d0d      	.short	0x0d0d
 800471a:	04          	.byte	0x04
 800471b:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 800471c:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800471e:	2000      	movs	r0, #0
}
 8004720:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8004722:	6028      	str	r0, [r5, #0]
	return 0;
 8004724:	2000      	movs	r0, #0
		break;
 8004726:	e7fb      	b.n	8004720 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004728:	6028      	str	r0, [r5, #0]
	return 0;
 800472a:	2000      	movs	r0, #0
		break;
 800472c:	e7f8      	b.n	8004720 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 800472e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004732:	e7f5      	b.n	8004720 <stm32_clock_control_get_subsys_rate+0x28>
 8004734:	200000b0 	.word	0x200000b0

08004738 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <stm32_clock_switch_to_hsi+0x44>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f013 0f02 	tst.w	r3, #2
 8004740:	d109      	bne.n	8004756 <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <stm32_clock_switch_to_hsi+0x44>)
 8004744:	6813      	ldr	r3, [r2, #0]
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <stm32_clock_switch_to_hsi+0x44>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f013 0f02 	tst.w	r3, #2
 8004754:	d0fa      	beq.n	800474c <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <stm32_clock_switch_to_hsi+0x44>)
 8004758:	6893      	ldr	r3, [r2, #8]
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004764:	6893      	ldr	r3, [r2, #8]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	4318      	orrs	r0, r3
 800476c:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800476e:	4b03      	ldr	r3, [pc, #12]	; (800477c <stm32_clock_switch_to_hsi+0x44>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004776:	2b04      	cmp	r3, #4
 8004778:	d1f9      	bne.n	800476e <stm32_clock_switch_to_hsi+0x36>
	}
}
 800477a:	4770      	bx	lr
 800477c:	40023800 	.word	0x40023800

08004780 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8004780:	b510      	push	{r4, lr}
 8004782:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8004784:	a803      	add	r0, sp, #12
 8004786:	f007 f8d9 	bl	800b93c <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800478a:	f000 f81d 	bl	80047c8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800478e:	a801      	add	r0, sp, #4
 8004790:	f007 f8dc 	bl	800b94c <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8004794:	2000      	movs	r0, #0
 8004796:	f7ff ffcf 	bl	8004738 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800479a:	4c0a      	ldr	r4, [pc, #40]	; (80047c4 <stm32_clock_control_init+0x44>)
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047a2:	6023      	str	r3, [r4, #0]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80047a4:	a903      	add	r1, sp, #12
 80047a6:	a801      	add	r0, sp, #4
 80047a8:	f002 ffd2 	bl	8007750 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ba:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80047bc:	2000      	movs	r0, #0
 80047be:	b006      	add	sp, #24
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800

080047c8 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80047c8:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <config_enable_default_clocks+0x1c>)
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	621a      	str	r2, [r3, #32]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80047dc:	9b01      	ldr	r3, [sp, #4]
	(defined(CONFIG_SOC_SERIES_STM32L0X) &&			  \
	 defined(CONFIG_ENTROPY_STM32_RNG))
	/* Enable System Configuration Controller clock. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
#endif
}
 80047de:	b002      	add	sp, #8
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800

080047e8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80047ec:	280a      	cmp	r0, #10
 80047ee:	d007      	beq.n	8004800 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <console_out+0x28>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 80047f6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4798      	blx	r3

	return c;
}
 80047fc:	4620      	mov	r0, r4
 80047fe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <console_out+0x28>)
 8004802:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8004804:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	210d      	movs	r1, #13
 800480a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 800480c:	e7f0      	b.n	80047f0 <console_out+0x8>
 800480e:	bf00      	nop
 8004810:	20000a10 	.word	0x20000a10

08004814 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8004814:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8004816:	4c04      	ldr	r4, [pc, #16]	; (8004828 <uart_console_hook_install+0x14>)
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff fe35 	bl	8004488 <__stdout_hook_install>
	__printk_hook_install(console_out);
 800481e:	4620      	mov	r0, r4
 8004820:	f7fd fbfa 	bl	8002018 <__printk_hook_install>
}
 8004824:	bd10      	pop	{r4, pc}
 8004826:	bf00      	nop
 8004828:	080047e9 	.word	0x080047e9

0800482c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800482c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800482e:	4809      	ldr	r0, [pc, #36]	; (8004854 <uart_console_init+0x28>)
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <uart_console_init+0x2c>)
 8004832:	6018      	str	r0, [r3, #0]
 8004834:	f007 ff35 	bl	800c6a2 <z_device_ready>
 8004838:	b128      	cbz	r0, 8004846 <uart_console_init+0x1a>
 800483a:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 800483c:	b933      	cbnz	r3, 800484c <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 800483e:	f7ff ffe9 	bl	8004814 <uart_console_hook_install>

	return 0;
 8004842:	2000      	movs	r0, #0
}
 8004844:	bd08      	pop	{r3, pc}
 8004846:	f06f 0312 	mvn.w	r3, #18
 800484a:	e7f7      	b.n	800483c <uart_console_init+0x10>
		return -ENODEV;
 800484c:	f06f 0012 	mvn.w	r0, #18
 8004850:	e7f8      	b.n	8004844 <uart_console_init+0x18>
 8004852:	bf00      	nop
 8004854:	0800d724 	.word	0x0800d724
 8004858:	20000a10 	.word	0x20000a10

0800485c <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800485c:	424a      	negs	r2, r1
 800485e:	f001 0303 	and.w	r3, r1, #3
 8004862:	f002 0203 	and.w	r2, r2, #3
 8004866:	bf58      	it	pl
 8004868:	4253      	negpl	r3, r2
 800486a:	3304      	adds	r3, #4
 800486c:	009a      	lsls	r2, r3, #2
 800486e:	230f      	movs	r3, #15
 8004870:	4093      	lsls	r3, r2
 8004872:	460a      	mov	r2, r1
 8004874:	2900      	cmp	r1, #0
 8004876:	db19      	blt.n	80048ac <gpio_stm32_set_exti_source+0x50>
 8004878:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800487c:	f003 0c03 	and.w	ip, r3, #3
 8004880:	f10c 0102 	add.w	r1, ip, #2
 8004884:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <gpio_stm32_set_exti_source+0x58>)
 8004886:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800488a:	0c1a      	lsrs	r2, r3, #16
 800488c:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004894:	b162      	cbz	r2, 80048b0 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8004896:	fab2 f282 	clz	r2, r2
 800489a:	fa00 f202 	lsl.w	r2, r0, r2
 800489e:	431a      	orrs	r2, r3
 80048a0:	f10c 0c02 	add.w	ip, ip, #2
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <gpio_stm32_set_exti_source+0x58>)
 80048a6:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 80048aa:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80048ac:	1cca      	adds	r2, r1, #3
 80048ae:	e7e3      	b.n	8004878 <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 80048b0:	2220      	movs	r2, #32
 80048b2:	e7f2      	b.n	800489a <gpio_stm32_set_exti_source+0x3e>
 80048b4:	40010000 	.word	0x40010000

080048b8 <gpio_stm32_get_exti_source>:
 80048b8:	4242      	negs	r2, r0
 80048ba:	f000 0303 	and.w	r3, r0, #3
 80048be:	f002 0203 	and.w	r2, r2, #3
 80048c2:	bf58      	it	pl
 80048c4:	4253      	negpl	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	230f      	movs	r3, #15
 80048cc:	4093      	lsls	r3, r2
 80048ce:	4602      	mov	r2, r0
 80048d0:	2800      	cmp	r0, #0
 80048d2:	db11      	blt.n	80048f8 <gpio_stm32_get_exti_source+0x40>
 80048d4:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 80048d8:	f000 0303 	and.w	r3, r0, #3
 80048dc:	3302      	adds	r3, #2
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <gpio_stm32_get_exti_source+0x48>)
 80048e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048e4:	0c03      	lsrs	r3, r0, #16
 80048e6:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80048ee:	b12b      	cbz	r3, 80048fc <gpio_stm32_get_exti_source+0x44>
  return __builtin_clz(value);
 80048f0:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80048f4:	40d8      	lsrs	r0, r3
 80048f6:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80048f8:	1cc2      	adds	r2, r0, #3
 80048fa:	e7eb      	b.n	80048d4 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e7f9      	b.n	80048f4 <gpio_stm32_get_exti_source+0x3c>
 8004900:	40010000 	.word	0x40010000

08004904 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	4606      	mov	r6, r0
 800490a:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <gpio_stm32_enable_int+0x40>)
 800490e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004912:	ab02      	add	r3, sp, #8
 8004914:	e903 0003 	stmdb	r3, {r0, r1}
 8004918:	480b      	ldr	r0, [pc, #44]	; (8004948 <gpio_stm32_enable_int+0x44>)
 800491a:	f007 fec2 	bl	800c6a2 <z_device_ready>
 800491e:	b148      	cbz	r0, 8004934 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004920:	4809      	ldr	r0, [pc, #36]	; (8004948 <gpio_stm32_enable_int+0x44>)
 8004922:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4669      	mov	r1, sp
 8004928:	4798      	blx	r3
 800492a:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 800492c:	b12c      	cbz	r4, 800493a <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 800492e:	4620      	mov	r0, r4
 8004930:	b002      	add	sp, #8
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f06f 0412 	mvn.w	r4, #18
 8004938:	e7f8      	b.n	800492c <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 800493a:	4629      	mov	r1, r5
 800493c:	4630      	mov	r0, r6
 800493e:	f7ff ff8d 	bl	800485c <gpio_stm32_set_exti_source>
	return 0;
 8004942:	e7f4      	b.n	800492e <gpio_stm32_enable_int+0x2a>
 8004944:	0800da1c 	.word	0x0800da1c
 8004948:	0800d664 	.word	0x0800d664

0800494c <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	460c      	mov	r4, r1
 8004950:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8004952:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8004954:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8004956:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800495a:	d01f      	beq.n	800499c <gpio_stm32_pin_interrupt_configure+0x50>
 800495c:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 800495e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004962:	d034      	beq.n	80049ce <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8004964:	491d      	ldr	r1, [pc, #116]	; (80049dc <gpio_stm32_pin_interrupt_configure+0x90>)
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff fe58 	bl	800461c <stm32_exti_set_callback>
 800496c:	4606      	mov	r6, r0
 800496e:	bb88      	cbnz	r0, 80049d4 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8004970:	4621      	mov	r1, r4
 8004972:	68b8      	ldr	r0, [r7, #8]
 8004974:	f7ff ffc6 	bl	8004904 <gpio_stm32_enable_int>

	switch (trig) {
 8004978:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 800497c:	d023      	beq.n	80049c6 <gpio_stm32_pin_interrupt_configure+0x7a>
 800497e:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8004982:	d022      	beq.n	80049ca <gpio_stm32_pin_interrupt_configure+0x7e>
 8004984:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8004988:	d01b      	beq.n	80049c2 <gpio_stm32_pin_interrupt_configure+0x76>
 800498a:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 800498c:	4620      	mov	r0, r4
 800498e:	f7ff fe0d 	bl	80045ac <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8004992:	4620      	mov	r0, r4
 8004994:	f7ff fdee 	bl	8004574 <stm32_exti_enable>

exit:
	return err;
}
 8004998:	4630      	mov	r0, r6
 800499a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ff8b 	bl	80048b8 <gpio_stm32_get_exti_source>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4298      	cmp	r0, r3
 80049a6:	d001      	beq.n	80049ac <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 80049a8:	2600      	movs	r6, #0
		goto exit;
 80049aa:	e7f5      	b.n	8004998 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fdf1 	bl	8004594 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fe44 	bl	8004640 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80049b8:	2100      	movs	r1, #0
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fdf6 	bl	80045ac <stm32_exti_trigger>
 80049c0:	e7f2      	b.n	80049a8 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 80049c2:	2102      	movs	r1, #2
 80049c4:	e7e2      	b.n	800498c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 80049c6:	2101      	movs	r1, #1
 80049c8:	e7e0      	b.n	800498c <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 80049ca:	2103      	movs	r1, #3
 80049cc:	e7de      	b.n	800498c <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 80049ce:	f06f 0685 	mvn.w	r6, #133	; 0x85
 80049d2:	e7e1      	b.n	8004998 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 80049d4:	f06f 060f 	mvn.w	r6, #15
	return err;
 80049d8:	e7de      	b.n	8004998 <gpio_stm32_pin_interrupt_configure+0x4c>
 80049da:	bf00      	nop
 80049dc:	0800b95b 	.word	0x0800b95b

080049e0 <gpio_stm32_clock_request>:
{
 80049e0:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 80049e2:	6844      	ldr	r4, [r0, #4]
	if (on) {
 80049e4:	b169      	cbz	r1, 8004a02 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 80049e6:	340c      	adds	r4, #12
 80049e8:	480d      	ldr	r0, [pc, #52]	; (8004a20 <gpio_stm32_clock_request+0x40>)
 80049ea:	f007 fe5a 	bl	800c6a2 <z_device_ready>
 80049ee:	b128      	cbz	r0, 80049fc <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 80049f0:	480b      	ldr	r0, [pc, #44]	; (8004a20 <gpio_stm32_clock_request+0x40>)
 80049f2:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4621      	mov	r1, r4
 80049f8:	4798      	blx	r3
}
 80049fa:	bd10      	pop	{r4, pc}
 80049fc:	f06f 0012 	mvn.w	r0, #18
 8004a00:	e7fb      	b.n	80049fa <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8004a02:	340c      	adds	r4, #12
 8004a04:	4806      	ldr	r0, [pc, #24]	; (8004a20 <gpio_stm32_clock_request+0x40>)
 8004a06:	f007 fe4c 	bl	800c6a2 <z_device_ready>
 8004a0a:	b128      	cbz	r0, 8004a18 <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004a0c:	4804      	ldr	r0, [pc, #16]	; (8004a20 <gpio_stm32_clock_request+0x40>)
 8004a0e:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4621      	mov	r1, r4
 8004a14:	4798      	blx	r3
 8004a16:	e7f0      	b.n	80049fa <gpio_stm32_clock_request+0x1a>
 8004a18:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8004a1c:	e7ed      	b.n	80049fa <gpio_stm32_clock_request+0x1a>
 8004a1e:	bf00      	nop
 8004a20:	0800d664 	.word	0x0800d664

08004a24 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8004a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	b08c      	sub	sp, #48	; 0x30
 8004a2a:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8004a2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8004a30:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8004a32:	ac04      	add	r4, sp, #16
 8004a34:	4f92      	ldr	r7, [pc, #584]	; (8004c80 <spi_stm32_configure+0x25c>)
 8004a36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a3a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8004a42:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8004a46:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	f000 8113 	beq.w	8004c74 <spi_stm32_configure+0x250>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004a4e:	88ab      	ldrh	r3, [r5, #4]
 8004a50:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d002      	beq.n	8004a5e <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	f040 810d 	bne.w	8004c78 <spi_stm32_configure+0x254>
 8004a5e:	4889      	ldr	r0, [pc, #548]	; (8004c84 <spi_stm32_configure+0x260>)
 8004a60:	f007 fe1f 	bl	800c6a2 <z_device_ready>
 8004a64:	b198      	cbz	r0, 8004a8e <spi_stm32_configure+0x6a>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004a66:	4b87      	ldr	r3, [pc, #540]	; (8004c84 <spi_stm32_configure+0x260>)
 8004a68:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	b193      	cbz	r3, 8004a94 <spi_stm32_configure+0x70>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8004a6e:	aa03      	add	r2, sp, #12
 8004a70:	4641      	mov	r1, r8
 8004a72:	4884      	ldr	r0, [pc, #528]	; (8004c84 <spi_stm32_configure+0x260>)
 8004a74:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004a76:	2800      	cmp	r0, #0
 8004a78:	db0f      	blt.n	8004a9a <spi_stm32_configure+0x76>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	dc1f      	bgt.n	8004ac0 <spi_stm32_configure+0x9c>
		uint32_t clk = clock >> br;
 8004a80:	9a03      	ldr	r2, [sp, #12]
 8004a82:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8004a84:	6829      	ldr	r1, [r5, #0]
 8004a86:	4291      	cmp	r1, r2
 8004a88:	d21a      	bcs.n	8004ac0 <spi_stm32_configure+0x9c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	e7f6      	b.n	8004a7c <spi_stm32_configure+0x58>
 8004a8e:	f06f 0012 	mvn.w	r0, #18
 8004a92:	e7f0      	b.n	8004a76 <spi_stm32_configure+0x52>
		return -ENOSYS;
 8004a94:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8004a98:	e7ed      	b.n	8004a76 <spi_stm32_configure+0x52>
 8004a9a:	4b7b      	ldr	r3, [pc, #492]	; (8004c88 <spi_stm32_configure+0x264>)
 8004a9c:	4a7b      	ldr	r2, [pc, #492]	; (8004c8c <spi_stm32_configure+0x268>)
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8004aa2:	f04f 0100 	mov.w	r1, #0
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f362 0102 	bfi	r1, r2, #0, #3
 8004aac:	f36f 01c5 	bfc	r1, #3, #3
 8004ab0:	f363 118f 	bfi	r1, r3, #6, #10
 8004ab4:	4876      	ldr	r0, [pc, #472]	; (8004c90 <spi_stm32_configure+0x26c>)
 8004ab6:	f7fe facf 	bl	8003058 <log_0>
		return -EIO;
 8004aba:	f06f 0004 	mvn.w	r0, #4
 8004abe:	e0d6      	b.n	8004c6e <spi_stm32_configure+0x24a>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	dc71      	bgt.n	8004ba8 <spi_stm32_configure+0x184>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aca:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8004acc:	3b01      	subs	r3, #1
 8004ace:	aa0c      	add	r2, sp, #48	; 0x30
 8004ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ad4:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8004ae2:	88ab      	ldrh	r3, [r5, #4]
 8004ae4:	f013 0f02 	tst.w	r3, #2
 8004ae8:	d077      	beq.n	8004bda <spi_stm32_configure+0x1b6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8004af2:	88ab      	ldrh	r3, [r5, #4]
 8004af4:	f013 0f04 	tst.w	r3, #4
 8004af8:	d074      	beq.n	8004be4 <spi_stm32_configure+0x1c0>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8004b08:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8004b0a:	88ab      	ldrh	r3, [r5, #4]
 8004b0c:	f013 0f10 	tst.w	r3, #16
 8004b10:	d06d      	beq.n	8004bee <spi_stm32_configure+0x1ca>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b20:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8004b22:	68ab      	ldr	r3, [r5, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d067      	beq.n	8004bf8 <spi_stm32_configure+0x1d4>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	f023 0304 	bic.w	r3, r3, #4
 8004b36:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8004b38:	88ab      	ldrh	r3, [r5, #4]
 8004b3a:	f013 0f01 	tst.w	r3, #1
 8004b3e:	d073      	beq.n	8004c28 <spi_stm32_configure+0x204>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8004b46:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8004b48:	88ab      	ldrh	r3, [r5, #4]
 8004b4a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d06f      	beq.n	8004c32 <spi_stm32_configure+0x20e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b58:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004b5a:	6863      	ldr	r3, [r4, #4]
 8004b5c:	f023 0310 	bic.w	r3, r3, #16
 8004b60:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8004b62:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004b64:	68ab      	ldr	r3, [r5, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d070      	beq.n	8004c4c <spi_stm32_configure+0x228>
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d06d      	beq.n	8004c4c <spi_stm32_configure+0x228>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004b70:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8004b72:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8004b74:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8004b78:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8004b7a:	6904      	ldr	r4, [r0, #16]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8004b7c:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8004b80:	d004      	beq.n	8004b8c <spi_stm32_configure+0x168>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004b82:	f013 0f01 	tst.w	r3, #1
 8004b86:	d001      	beq.n	8004b8c <spi_stm32_configure+0x168>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004b88:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004b8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004b90:	f013 0f01 	tst.w	r3, #1
 8004b94:	d052      	beq.n	8004c3c <spi_stm32_configure+0x218>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004b96:	2301      	movs	r3, #1
 8004b98:	fa03 f601 	lsl.w	r6, r3, r1
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	4333      	orrs	r3, r6
 8004ba0:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	4798      	blx	r3
 8004ba6:	e061      	b.n	8004c6c <spi_stm32_configure+0x248>
 8004ba8:	4b37      	ldr	r3, [pc, #220]	; (8004c88 <spi_stm32_configure+0x264>)
 8004baa:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <spi_stm32_configure+0x268>)
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8004bb0:	f04f 0100 	mov.w	r1, #0
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f362 0102 	bfi	r1, r2, #0, #3
 8004bba:	f36f 01c5 	bfc	r1, #3, #3
 8004bbe:	f363 118f 	bfi	r1, r3, #6, #10
 8004bc2:	9a03      	ldr	r2, [sp, #12]
 8004bc4:	f8ad 1000 	strh.w	r1, [sp]
 8004bc8:	0a13      	lsrs	r3, r2, #8
 8004bca:	0852      	lsrs	r2, r2, #1
 8004bcc:	6829      	ldr	r1, [r5, #0]
 8004bce:	4831      	ldr	r0, [pc, #196]	; (8004c94 <spi_stm32_configure+0x270>)
 8004bd0:	f7fe fa08 	bl	8002fe4 <log_3>
		return -EINVAL;
 8004bd4:	f06f 0015 	mvn.w	r0, #21
 8004bd8:	e049      	b.n	8004c6e <spi_stm32_configure+0x24a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	f023 0302 	bic.w	r3, r3, #2
 8004be0:	6023      	str	r3, [r4, #0]
}
 8004be2:	e786      	b.n	8004af2 <spi_stm32_configure+0xce>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6023      	str	r3, [r4, #0]
}
 8004bec:	e789      	b.n	8004b02 <spi_stm32_configure+0xde>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf4:	6023      	str	r3, [r4, #0]
}
 8004bf6:	e790      	b.n	8004b1a <spi_stm32_configure+0xf6>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8004bf8:	88ab      	ldrh	r3, [r5, #4]
 8004bfa:	f013 0f01 	tst.w	r3, #1
 8004bfe:	d008      	beq.n	8004c12 <spi_stm32_configure+0x1ee>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c06:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	f023 0304 	bic.w	r3, r3, #4
 8004c0e:	6063      	str	r3, [r4, #4]
}
 8004c10:	e792      	b.n	8004b38 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6063      	str	r3, [r4, #4]
}
 8004c26:	e787      	b.n	8004b38 <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8004c2e:	6023      	str	r3, [r4, #0]
}
 8004c30:	e78a      	b.n	8004b48 <spi_stm32_configure+0x124>
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c38:	6023      	str	r3, [r4, #0]
}
 8004c3a:	e78e      	b.n	8004b5a <spi_stm32_configure+0x136>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	fa03 f601 	lsl.w	r6, r3, r1
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	ea23 0306 	bic.w	r3, r3, r6
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	e7aa      	b.n	8004ba2 <spi_stm32_configure+0x17e>
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <spi_stm32_configure+0x264>)
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <spi_stm32_configure+0x268>)
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	08db      	lsrs	r3, r3, #3
				   GPIO_OUTPUT_INACTIVE);
	} else {
		LOG_INF("CS control inhibited (no GPIO device)");
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f362 0102 	bfi	r1, r2, #0, #3
 8004c5e:	f36f 01c5 	bfc	r1, #3, #3
 8004c62:	f363 118f 	bfi	r1, r3, #6, #10
 8004c66:	480c      	ldr	r0, [pc, #48]	; (8004c98 <spi_stm32_configure+0x274>)
 8004c68:	f7fe f9f6 	bl	8003058 <log_0>
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8004c6c:	2000      	movs	r0, #0
}
 8004c6e:	b00c      	add	sp, #48	; 0x30
 8004c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 8004c74:	2000      	movs	r0, #0
 8004c76:	e7fa      	b.n	8004c6e <spi_stm32_configure+0x24a>
		return -ENOTSUP;
 8004c78:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004c7c:	e7f7      	b.n	8004c6e <spi_stm32_configure+0x24a>
 8004c7e:	bf00      	nop
 8004c80:	0800da24 	.word	0x0800da24
 8004c84:	0800d664 	.word	0x0800d664
 8004c88:	0800d974 	.word	0x0800d974
 8004c8c:	0800d954 	.word	0x0800d954
 8004c90:	0800e3d8 	.word	0x0800e3d8
 8004c94:	0800e3fc 	.word	0x0800e3fc
 8004c98:	0800e42c 	.word	0x0800e42c

08004c9c <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8004c9c:	6882      	ldr	r2, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 8004c9e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8004ca2:	d101      	bne.n	8004ca8 <spi_stm32_get_err+0xc>
	return 0;
 8004ca4:	2000      	movs	r0, #0
}
 8004ca6:	4770      	bx	lr
{
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	4604      	mov	r4, r0
 8004cae:	490f      	ldr	r1, [pc, #60]	; (8004cec <spi_stm32_get_err+0x50>)
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <spi_stm32_get_err+0x54>)
 8004cb2:	1ac9      	subs	r1, r1, r3
 8004cb4:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("%s: err=%d", __func__,
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f360 0302 	bfi	r3, r0, #0, #3
 8004cc0:	f36f 03c5 	bfc	r3, #3, #3
 8004cc4:	f361 138f 	bfi	r3, r1, #6, #10
 8004cc8:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <spi_stm32_get_err+0x58>)
 8004cca:	480b      	ldr	r0, [pc, #44]	; (8004cf8 <spi_stm32_get_err+0x5c>)
 8004ccc:	f7fe fa20 	bl	8003110 <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8004cd0:	68a3      	ldr	r3, [r4, #8]
 8004cd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004cd6:	d005      	beq.n	8004ce4 <spi_stm32_get_err+0x48>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8004cd8:	68e3      	ldr	r3, [r4, #12]
 8004cda:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004cdc:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004ce2:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8004ce4:	f06f 0004 	mvn.w	r0, #4
}
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd10      	pop	{r4, pc}
 8004cec:	0800d974 	.word	0x0800d974
 8004cf0:	0800d954 	.word	0x0800d954
 8004cf4:	0800e4b4 	.word	0x0800e4b4
 8004cf8:	0800e454 	.word	0x0800e454

08004cfc <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8004cfc:	b570      	push	{r4, r5, r6, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8004cfe:	6906      	ldr	r6, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8004d00:	6845      	ldr	r5, [r0, #4]
 8004d02:	4835      	ldr	r0, [pc, #212]	; (8004dd8 <spi_stm32_init+0xdc>)
 8004d04:	f007 fccd 	bl	800c6a2 <z_device_ready>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d02c      	beq.n	8004d66 <spi_stm32_init+0x6a>
	const struct clock_control_driver_api *api =
 8004d0c:	4832      	ldr	r0, [pc, #200]	; (8004dd8 <spi_stm32_init+0xdc>)
 8004d0e:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4629      	mov	r1, r5
 8004d14:	4798      	blx	r3
 8004d16:	4604      	mov	r4, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004d18:	bb44      	cbnz	r4, 8004d6c <spi_stm32_init+0x70>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8004d1a:	68aa      	ldr	r2, [r5, #8]
 8004d1c:	6929      	ldr	r1, [r5, #16]
 8004d1e:	68e8      	ldr	r0, [r5, #12]
 8004d20:	f006 fcce 	bl	800b6c0 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 8004d24:	1e05      	subs	r5, r0, #0
 8004d26:	db34      	blt.n	8004d92 <spi_stm32_init+0x96>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	b1c3      	cbz	r3, 8004d5e <spi_stm32_init+0x62>
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	b1b3      	cbz	r3, 8004d5e <spi_stm32_init+0x62>
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	b1a2      	cbz	r2, 8004d5e <spi_stm32_init+0x62>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8004d34:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 8004d36:	f004 f8cd 	bl	8008ed4 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	7a19      	ldrb	r1, [r3, #8]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
 8004d42:	6903      	ldr	r3, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2301      	movs	r3, #1
 8004d48:	408b      	lsls	r3, r1
 8004d4a:	421a      	tst	r2, r3
 8004d4c:	d134      	bne.n	8004db8 <spi_stm32_init+0xbc>
 8004d4e:	4623      	mov	r3, r4
	if (value != 0)	{
 8004d50:	b3a3      	cbz	r3, 8004dbc <spi_stm32_init+0xc0>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8004d52:	2301      	movs	r3, #1
 8004d54:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8004d58:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4798      	blx	r3
	return sem->count;
 8004d5e:	6933      	ldr	r3, [r6, #16]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8004d60:	b39b      	cbz	r3, 8004dca <spi_stm32_init+0xce>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8004d62:	4620      	mov	r0, r4
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	f06f 0412 	mvn.w	r4, #18
 8004d6a:	e7d5      	b.n	8004d18 <spi_stm32_init+0x1c>
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <spi_stm32_init+0xe0>)
 8004d6e:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <spi_stm32_init+0xe4>)
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not enable SPI clock");
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f362 0102 	bfi	r1, r2, #0, #3
 8004d7e:	f36f 01c5 	bfc	r1, #3, #3
 8004d82:	f363 118f 	bfi	r1, r3, #6, #10
 8004d86:	4817      	ldr	r0, [pc, #92]	; (8004de4 <spi_stm32_init+0xe8>)
 8004d88:	f7fe f966 	bl	8003058 <log_0>
		return -EIO;
 8004d8c:	f06f 0404 	mvn.w	r4, #4
 8004d90:	e7e7      	b.n	8004d62 <spi_stm32_init+0x66>
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <spi_stm32_init+0xe0>)
 8004d94:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <spi_stm32_init+0xe4>)
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	2101      	movs	r1, #1
 8004da0:	f361 0202 	bfi	r2, r1, #0, #3
 8004da4:	f36f 02c5 	bfc	r2, #3, #3
 8004da8:	f363 128f 	bfi	r2, r3, #6, #10
 8004dac:	4629      	mov	r1, r5
 8004dae:	480e      	ldr	r0, [pc, #56]	; (8004de8 <spi_stm32_init+0xec>)
 8004db0:	f7fe f97c 	bl	80030ac <log_1>
		return err;
 8004db4:	462c      	mov	r4, r5
 8004db6:	e7d4      	b.n	8004d62 <spi_stm32_init+0x66>
		value = (value != 0) ? 0 : 1;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e7c9      	b.n	8004d50 <spi_stm32_init+0x54>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 8004dc2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	4798      	blx	r3
	}

	return gpio_pin_set_raw(port, pin, value);
 8004dc8:	e7c9      	b.n	8004d5e <spi_stm32_init+0x62>
		ctx->owner = NULL;
 8004dca:	6073      	str	r3, [r6, #4]
		k_sem_give(&ctx->lock);
 8004dcc:	f106 0008 	add.w	r0, r6, #8
	z_impl_k_sem_give(sem);
 8004dd0:	f003 f944 	bl	800805c <z_impl_k_sem_give>
	}
}
 8004dd4:	e7c5      	b.n	8004d62 <spi_stm32_init+0x66>
 8004dd6:	bf00      	nop
 8004dd8:	0800d664 	.word	0x0800d664
 8004ddc:	0800d974 	.word	0x0800d974
 8004de0:	0800d954 	.word	0x0800d954
 8004de4:	0800e460 	.word	0x0800e460
 8004de8:	0800e47c 	.word	0x0800e47c

08004dec <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 8004dec:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 8004dee:	4802      	ldr	r0, [pc, #8]	; (8004df8 <timer_callback+0xc>)
 8004df0:	f003 faa6 	bl	8008340 <k_work_submit>
}
 8004df4:	bd08      	pop	{r3, pc}
 8004df6:	bf00      	nop
 8004df8:	20000080 	.word	0x20000080

08004dfc <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 8004dfc:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004dfe:	f007 ffc4 	bl	800cd8a <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8004e02:	220a      	movs	r2, #10
 8004e04:	2300      	movs	r3, #0
 8004e06:	f7fb fd5d 	bl	80008c4 <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8004e0a:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <RtcGetTimerElapsedTime+0x18>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
}
 8004e0e:	1ac0      	subs	r0, r0, r3
 8004e10:	bd08      	pop	{r3, pc}
 8004e12:	bf00      	nop
 8004e14:	20000a74 	.word	0x20000a74

08004e18 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8004e18:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8004e1a:	4802      	ldr	r0, [pc, #8]	; (8004e24 <RtcStopAlarm+0xc>)
 8004e1c:	f007 ffc5 	bl	800cdaa <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8004e20:	bd08      	pop	{r3, pc}
 8004e22:	bf00      	nop
 8004e24:	20000358 	.word	0x20000358

08004e28 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8004e28:	b500      	push	{lr}
 8004e2a:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8004e2c:	0f83      	lsrs	r3, r0, #30
 8004e2e:	0082      	lsls	r2, r0, #2
 8004e30:	1812      	adds	r2, r2, r0
 8004e32:	f143 0300 	adc.w	r3, r3, #0
 8004e36:	1892      	adds	r2, r2, r2
 8004e38:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e42:	4803      	ldr	r0, [pc, #12]	; (8004e50 <RtcSetAlarm+0x28>)
 8004e44:	f004 f8ae 	bl	8008fa4 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8004e48:	b003      	add	sp, #12
 8004e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e4e:	bf00      	nop
 8004e50:	20000358 	.word	0x20000358

08004e54 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8004e54:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8004e56:	f007 ff98 	bl	800cd8a <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8004e5a:	220a      	movs	r2, #10
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f7fb fd31 	bl	80008c4 <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 8004e62:	4b01      	ldr	r3, [pc, #4]	; (8004e68 <RtcSetTimerContext+0x14>)
 8004e64:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8004e66:	bd08      	pop	{r3, pc}
 8004e68:	20000a74 	.word	0x20000a74

08004e6c <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8004e6c:	4b01      	ldr	r3, [pc, #4]	; (8004e74 <RtcGetTimerContext+0x8>)
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000a74 	.word	0x20000a74

08004e78 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8004e7c:	f100 0534 	add.w	r5, r0, #52	; 0x34
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004e80:	2302      	movs	r3, #2
 8004e82:	f3bf 8f5b 	dmb	ish
 8004e86:	e855 2f00 	ldrex	r2, [r5]
 8004e8a:	2a01      	cmp	r2, #1
 8004e8c:	d103      	bne.n	8004e96 <modem_release+0x1e>
 8004e8e:	e845 3100 	strex	r1, r3, [r5]
 8004e92:	2900      	cmp	r1, #0
 8004e94:	d1f7      	bne.n	8004e86 <modem_release+0xe>
 8004e96:	f3bf 8f5b 	dmb	ish
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2601      	moveq	r6, #1
 8004e9e:	2600      	movne	r6, #0
 8004ea0:	d10e      	bne.n	8004ec0 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <modem_release+0x4c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6023      	str	r3, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004eac:	f3bf 8f5b 	dmb	ish
 8004eb0:	e855 2f00 	ldrex	r2, [r5]
 8004eb4:	e845 3100 	strex	r1, r3, [r5]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d1f9      	bne.n	8004eb0 <modem_release+0x38>
 8004ebc:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	0800e6ac 	.word	0x0800e6ac

08004ec8 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4617      	mov	r7, r2
 8004ecc:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 8004ece:	4c1d      	ldr	r4, [pc, #116]	; (8004f44 <sx12xx_ev_rx_done+0x7c>)
 8004ed0:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	f3bf 8f5b 	dmb	ish
 8004eda:	e854 2f00 	ldrex	r2, [r4]
 8004ede:	2a01      	cmp	r2, #1
 8004ee0:	d104      	bne.n	8004eec <sx12xx_ev_rx_done+0x24>
 8004ee2:	e844 3c00 	strex	ip, r3, [r4]
 8004ee6:	f1bc 0f00 	cmp.w	ip, #0
 8004eea:	d1f6      	bne.n	8004eda <sx12xx_ev_rx_done+0x12>
 8004eec:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8004ef0:	d127      	bne.n	8004f42 <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <sx12xx_ev_rx_done+0x7c>)
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	428a      	cmp	r2, r1
 8004efa:	d900      	bls.n	8004efe <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 8004efc:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 8004efe:	4c11      	ldr	r4, [pc, #68]	; (8004f44 <sx12xx_ev_rx_done+0x7c>)
 8004f00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	4601      	mov	r1, r0
 8004f06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f08:	f007 fff2 	bl	800cef0 <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 8004f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f0e:	b103      	cbz	r3, 8004f12 <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 8004f10:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 8004f12:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <sx12xx_ev_rx_done+0x7c>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	b103      	cbz	r3, 8004f1a <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 8004f18:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <sx12xx_ev_rx_done+0x80>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 8004f20:	2100      	movs	r1, #0
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <sx12xx_ev_rx_done+0x7c>)
 8004f24:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8004f28:	f3bf 8f5b 	dmb	ish
 8004f2c:	e853 2f00 	ldrex	r2, [r3]
 8004f30:	e843 1000 	strex	r0, r1, [r3]
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d1f9      	bne.n	8004f2c <sx12xx_ev_rx_done+0x64>
 8004f38:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f004 fb2d 	bl	800959c <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 8004f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f44:	20000a78 	.word	0x20000a78
 8004f48:	0800e6ac 	.word	0x0800e6ac

08004f4c <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 8004f4c:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8004f4e:	4805      	ldr	r0, [pc, #20]	; (8004f64 <sx12xx_ev_tx_done+0x18>)
 8004f50:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 8004f52:	f7ff ff91 	bl	8004e78 <modem_release>
 8004f56:	b120      	cbz	r0, 8004f62 <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 8004f58:	b11c      	cbz	r4, 8004f62 <sx12xx_ev_tx_done+0x16>
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	f004 fb1d 	bl	800959c <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	20000a78 	.word	0x20000a78

08004f68 <__sx12xx_configure_pin>:
{
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	4616      	mov	r6, r2
 8004f72:	461d      	mov	r5, r3
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8004f74:	4608      	mov	r0, r1
 8004f76:	f002 fc4b 	bl	8007810 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8004f7a:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8004f7c:	b1f8      	cbz	r0, 8004fbe <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 8004f7e:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8004f80:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8004f82:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8004f86:	d007      	beq.n	8004f98 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8004f88:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8004f8c:	d004      	beq.n	8004f98 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8004f8e:	f015 0f01 	tst.w	r5, #1
 8004f92:	d001      	beq.n	8004f98 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8004f94:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8004f98:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8004f9c:	f015 0f01 	tst.w	r5, #1
 8004fa0:	d021      	beq.n	8004fe6 <__sx12xx_configure_pin+0x7e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f506 	lsl.w	r5, r1, r6
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	4329      	orrs	r1, r5
 8004fac:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4798      	blx	r3
	if (err) {
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	b9f0      	cbnz	r0, 8004ff6 <__sx12xx_configure_pin+0x8e>
}
 8004fb8:	4620      	mov	r0, r4
 8004fba:	b003      	add	sp, #12
 8004fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <__sx12xx_configure_pin+0xbc>)
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <__sx12xx_configure_pin+0xc0>)
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device", controller);
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	2101      	movs	r1, #1
 8004fcc:	f361 0202 	bfi	r2, r1, #0, #3
 8004fd0:	f36f 02c5 	bfc	r2, #3, #3
 8004fd4:	f363 128f 	bfi	r2, r3, #6, #10
 8004fd8:	4639      	mov	r1, r7
 8004fda:	4814      	ldr	r0, [pc, #80]	; (800502c <__sx12xx_configure_pin+0xc4>)
 8004fdc:	f7fe f866 	bl	80030ac <log_1>
		return -EIO;
 8004fe0:	f06f 0404 	mvn.w	r4, #4
 8004fe4:	e7e8      	b.n	8004fb8 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f506 	lsl.w	r5, r1, r6
 8004fec:	6821      	ldr	r1, [r4, #0]
 8004fee:	ea21 0105 	bic.w	r1, r1, r5
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	e7db      	b.n	8004fae <__sx12xx_configure_pin+0x46>
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <__sx12xx_configure_pin+0xbc>)
 8004ff8:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <__sx12xx_configure_pin+0xc0>)
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	2101      	movs	r1, #1
 8005004:	f361 0202 	bfi	r2, r1, #0, #3
 8005008:	f36f 02c5 	bfc	r2, #3, #3
 800500c:	f363 128f 	bfi	r2, r3, #6, #10
 8005010:	f8ad 2000 	strh.w	r2, [sp]
 8005014:	4603      	mov	r3, r0
 8005016:	4632      	mov	r2, r6
 8005018:	4639      	mov	r1, r7
 800501a:	4805      	ldr	r0, [pc, #20]	; (8005030 <__sx12xx_configure_pin+0xc8>)
 800501c:	f7fd ffe2 	bl	8002fe4 <log_3>
		return err;
 8005020:	e7ca      	b.n	8004fb8 <__sx12xx_configure_pin+0x50>
 8005022:	bf00      	nop
 8005024:	0800d984 	.word	0x0800d984
 8005028:	0800d954 	.word	0x0800d954
 800502c:	0800e4fc 	.word	0x0800e4fc
 8005030:	0800e51c 	.word	0x0800e51c

08005034 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005038:	490f      	ldr	r1, [pc, #60]	; (8005078 <sx12xx_lora_send_async+0x44>)
 800503a:	2001      	movs	r0, #1
 800503c:	f3bf 8f5b 	dmb	ish
 8005040:	e851 4f00 	ldrex	r4, [r1]
 8005044:	2c00      	cmp	r4, #0
 8005046:	d103      	bne.n	8005050 <sx12xx_lora_send_async+0x1c>
 8005048:	e841 0600 	strex	r6, r0, [r1]
 800504c:	2e00      	cmp	r6, #0
 800504e:	d1f7      	bne.n	8005040 <sx12xx_lora_send_async+0xc>
 8005050:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005054:	d10c      	bne.n	8005070 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 8005056:	3934      	subs	r1, #52	; 0x34
 8005058:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 800505a:	4e08      	ldr	r6, [pc, #32]	; (800507c <sx12xx_lora_send_async+0x48>)
 800505c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800505e:	b2d4      	uxtb	r4, r2
 8005060:	4621      	mov	r1, r4
 8005062:	4798      	blx	r3

	Radio.Send(data, data_len);
 8005064:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	4798      	blx	r3

	return 0;
 800506c:	2000      	movs	r0, #0
}
 800506e:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005070:	f06f 000f 	mvn.w	r0, #15
 8005074:	e7fb      	b.n	800506e <sx12xx_lora_send_async+0x3a>
 8005076:	bf00      	nop
 8005078:	20000aac 	.word	0x20000aac
 800507c:	0800e6ac 	.word	0x0800e6ac

08005080 <sx12xx_lora_send>:
{
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	b08e      	sub	sp, #56	; 0x38
 8005084:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005086:	aa0a      	add	r2, sp, #40	; 0x28
 8005088:	920a      	str	r2, [sp, #40]	; 0x28
 800508a:	920b      	str	r2, [sp, #44]	; 0x2c
 800508c:	2300      	movs	r3, #0
 800508e:	930c      	str	r3, [sp, #48]	; 0x30
 8005090:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005092:	9305      	str	r3, [sp, #20]
 8005094:	9306      	str	r3, [sp, #24]
 8005096:	9307      	str	r3, [sp, #28]
 8005098:	9308      	str	r3, [sp, #32]
 800509a:	9309      	str	r3, [sp, #36]	; 0x24
 800509c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80050a0:	2501      	movs	r5, #1
 80050a2:	f365 0304 	bfi	r3, r5, #0, #5
 80050a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80050aa:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <sx12xx_lora_send+0xd0>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d049      	beq.n	8005148 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80050b4:	4613      	mov	r3, r2
 80050b6:	4622      	mov	r2, r4
 80050b8:	f7ff ffbc 	bl	8005034 <sx12xx_lora_send_async>
	if (ret < 0) {
 80050bc:	2800      	cmp	r0, #0
 80050be:	db22      	blt.n	8005106 <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80050c0:	4b24      	ldr	r3, [pc, #144]	; (8005154 <sx12xx_lora_send+0xd4>)
 80050c2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80050c4:	4922      	ldr	r1, [pc, #136]	; (8005150 <sx12xx_lora_send+0xd0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80050c6:	9503      	str	r5, [sp, #12]
 80050c8:	b2e4      	uxtb	r4, r4
 80050ca:	9402      	str	r4, [sp, #8]
 80050cc:	2300      	movs	r3, #0
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 80050d8:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 80050dc:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 80050e4:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 80050e8:	f3c0 7341 	ubfx	r3, r0, #29, #2
 80050ec:	00c2      	lsls	r2, r0, #3
 80050ee:	1852      	adds	r2, r2, r1
 80050f0:	f143 0300 	adc.w	r3, r3, #0
 80050f4:	1892      	adds	r2, r2, r2
 80050f6:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 80050f8:	4629      	mov	r1, r5
 80050fa:	a805      	add	r0, sp, #20
 80050fc:	f004 f9a2 	bl	8009444 <z_impl_k_poll>
	if (ret < 0) {
 8005100:	2800      	cmp	r0, #0
 8005102:	db02      	blt.n	800510a <sx12xx_lora_send+0x8a>
	return 0;
 8005104:	2000      	movs	r0, #0
}
 8005106:	b00e      	add	sp, #56	; 0x38
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	4b13      	ldr	r3, [pc, #76]	; (8005158 <sx12xx_lora_send+0xd8>)
 800510c:	4a13      	ldr	r2, [pc, #76]	; (800515c <sx12xx_lora_send+0xdc>)
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Packet transmission failed!");
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	f365 0102 	bfi	r1, r5, #0, #3
 800511a:	f36f 01c5 	bfc	r1, #3, #3
 800511e:	f363 118f 	bfi	r1, r3, #6, #10
 8005122:	480f      	ldr	r0, [pc, #60]	; (8005160 <sx12xx_lora_send+0xe0>)
 8005124:	f7fd ff98 	bl	8003058 <log_0>
		if (!modem_release(&dev_data)) {
 8005128:	4809      	ldr	r0, [pc, #36]	; (8005150 <sx12xx_lora_send+0xd0>)
 800512a:	f7ff fea5 	bl	8004e78 <modem_release>
 800512e:	b108      	cbz	r0, 8005134 <sx12xx_lora_send+0xb4>
	return 0;
 8005130:	2000      	movs	r0, #0
 8005132:	e7e8      	b.n	8005106 <sx12xx_lora_send+0x86>
 8005134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800513c:	4629      	mov	r1, r5
 800513e:	a805      	add	r0, sp, #20
 8005140:	f004 f980 	bl	8009444 <z_impl_k_poll>
 8005144:	2000      	movs	r0, #0
 8005146:	e7de      	b.n	8005106 <sx12xx_lora_send+0x86>
		return -EINVAL;
 8005148:	f06f 0015 	mvn.w	r0, #21
 800514c:	e7db      	b.n	8005106 <sx12xx_lora_send+0x86>
 800514e:	bf00      	nop
 8005150:	20000a78 	.word	0x20000a78
 8005154:	0800e6ac 	.word	0x0800e6ac
 8005158:	0800d984 	.word	0x0800d984
 800515c:	0800d954 	.word	0x0800d954
 8005160:	0800e53c 	.word	0x0800e53c

08005164 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 8005164:	b510      	push	{r4, lr}
 8005166:	b08c      	sub	sp, #48	; 0x30
 8005168:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800516c:	aa08      	add	r2, sp, #32
 800516e:	9208      	str	r2, [sp, #32]
 8005170:	9209      	str	r2, [sp, #36]	; 0x24
 8005172:	2300      	movs	r3, #0
 8005174:	930a      	str	r3, [sp, #40]	; 0x28
 8005176:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005178:	9303      	str	r3, [sp, #12]
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	9305      	str	r3, [sp, #20]
 800517e:	9306      	str	r3, [sp, #24]
 8005180:	9307      	str	r3, [sp, #28]
 8005182:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005186:	2001      	movs	r0, #1
 8005188:	f360 0304 	bfi	r3, r0, #0, #5
 800518c:	f88d 3019 	strb.w	r3, [sp, #25]
 8005190:	9207      	str	r2, [sp, #28]
 8005192:	4b28      	ldr	r3, [pc, #160]	; (8005234 <sx12xx_lora_recv+0xd0>)
 8005194:	f3bf 8f5b 	dmb	ish
 8005198:	e853 2f00 	ldrex	r2, [r3]
 800519c:	2a00      	cmp	r2, #0
 800519e:	d103      	bne.n	80051a8 <sx12xx_lora_recv+0x44>
 80051a0:	e843 0400 	strex	r4, r0, [r3]
 80051a4:	2c00      	cmp	r4, #0
 80051a6:	d1f7      	bne.n	8005198 <sx12xx_lora_recv+0x34>
 80051a8:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80051ac:	d13e      	bne.n	800522c <sx12xx_lora_recv+0xc8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 80051ae:	3b34      	subs	r3, #52	; 0x34
 80051b0:	aa08      	add	r2, sp, #32
 80051b2:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80051b4:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 80051b6:	f10d 0207 	add.w	r2, sp, #7
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 80051bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 80051c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80051c4:	4c1c      	ldr	r4, [pc, #112]	; (8005238 <sx12xx_lora_recv+0xd4>)
 80051c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051c8:	21ff      	movs	r1, #255	; 0xff
 80051ca:	4798      	blx	r3
	Radio.Rx(0);
 80051cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ce:	2000      	movs	r0, #0
 80051d0:	4798      	blx	r3
 80051d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80051d6:	2101      	movs	r1, #1
 80051d8:	a803      	add	r0, sp, #12
 80051da:	f004 f933 	bl	8009444 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80051de:	1e04      	subs	r4, r0, #0
 80051e0:	db04      	blt.n	80051ec <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80051e2:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80051e6:	4620      	mov	r0, r4
 80051e8:	b00c      	add	sp, #48	; 0x30
 80051ea:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 80051ec:	4813      	ldr	r0, [pc, #76]	; (800523c <sx12xx_lora_recv+0xd8>)
 80051ee:	f7ff fe43 	bl	8004e78 <modem_release>
 80051f2:	b950      	cbnz	r0, 800520a <sx12xx_lora_recv+0xa6>
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051fc:	2101      	movs	r1, #1
 80051fe:	a803      	add	r0, sp, #12
 8005200:	f004 f920 	bl	8009444 <z_impl_k_poll>
			return size;
 8005204:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005208:	e7ed      	b.n	80051e6 <sx12xx_lora_recv+0x82>
 800520a:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <sx12xx_lora_recv+0xdc>)
 800520c:	4a0d      	ldr	r2, [pc, #52]	; (8005244 <sx12xx_lora_recv+0xe0>)
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	08db      	lsrs	r3, r3, #3
		LOG_INF("Receive timeout");
 8005212:	f04f 0100 	mov.w	r1, #0
 8005216:	2203      	movs	r2, #3
 8005218:	f362 0102 	bfi	r1, r2, #0, #3
 800521c:	f36f 01c5 	bfc	r1, #3, #3
 8005220:	f363 118f 	bfi	r1, r3, #6, #10
 8005224:	4808      	ldr	r0, [pc, #32]	; (8005248 <sx12xx_lora_recv+0xe4>)
 8005226:	f7fd ff17 	bl	8003058 <log_0>
		return ret;
 800522a:	e7dc      	b.n	80051e6 <sx12xx_lora_recv+0x82>
		return -EBUSY;
 800522c:	f06f 040f 	mvn.w	r4, #15
 8005230:	e7d9      	b.n	80051e6 <sx12xx_lora_recv+0x82>
 8005232:	bf00      	nop
 8005234:	20000aac 	.word	0x20000aac
 8005238:	0800e6ac 	.word	0x0800e6ac
 800523c:	20000a78 	.word	0x20000a78
 8005240:	0800d984 	.word	0x0800d984
 8005244:	0800d954 	.word	0x0800d954
 8005248:	0800e558 	.word	0x0800e558

0800524c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	460c      	mov	r4, r1
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <sx12xx_lora_config+0xa4>)
 8005254:	2201      	movs	r2, #1
 8005256:	f3bf 8f5b 	dmb	ish
 800525a:	e853 1f00 	ldrex	r1, [r3]
 800525e:	2900      	cmp	r1, #0
 8005260:	d103      	bne.n	800526a <sx12xx_lora_config+0x1e>
 8005262:	e843 2000 	strex	r0, r2, [r3]
 8005266:	2800      	cmp	r0, #0
 8005268:	d1f7      	bne.n	800525a <sx12xx_lora_config+0xe>
 800526a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 800526e:	d13b      	bne.n	80052e8 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005270:	4b20      	ldr	r3, [pc, #128]	; (80052f4 <sx12xx_lora_config+0xa8>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	4798      	blx	r3

	if (config->tx) {
 8005278:	7ae3      	ldrb	r3, [r4, #11]
 800527a:	b9cb      	cbnz	r3, 80052b0 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 800527c:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <sx12xx_lora_config+0xa8>)
 800527e:	699d      	ldr	r5, [r3, #24]
 8005280:	2001      	movs	r0, #1
 8005282:	9009      	str	r0, [sp, #36]	; 0x24
 8005284:	2300      	movs	r3, #0
 8005286:	9308      	str	r3, [sp, #32]
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	9306      	str	r3, [sp, #24]
 800528c:	9305      	str	r3, [sp, #20]
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	9303      	str	r3, [sp, #12]
 8005292:	220a      	movs	r2, #10
 8005294:	9202      	str	r2, [sp, #8]
 8005296:	8922      	ldrh	r2, [r4, #8]
 8005298:	9201      	str	r2, [sp, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	79a3      	ldrb	r3, [r4, #6]
 800529e:	7962      	ldrb	r2, [r4, #5]
 80052a0:	7921      	ldrb	r1, [r4, #4]
 80052a2:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 80052a4:	4814      	ldr	r0, [pc, #80]	; (80052f8 <sx12xx_lora_config+0xac>)
 80052a6:	f7ff fde7 	bl	8004e78 <modem_release>
	return 0;
 80052aa:	2000      	movs	r0, #0
}
 80052ac:	b00a      	add	sp, #40	; 0x28
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <sx12xx_lora_config+0xb0>)
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	6861      	ldr	r1, [r4, #4]
 80052b6:	68a2      	ldr	r2, [r4, #8]
 80052b8:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <sx12xx_lora_config+0xa8>)
 80052bc:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 80052be:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 80052c0:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80052c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80052c6:	9208      	str	r2, [sp, #32]
 80052c8:	2200      	movs	r2, #0
 80052ca:	9207      	str	r2, [sp, #28]
 80052cc:	9206      	str	r2, [sp, #24]
 80052ce:	9205      	str	r2, [sp, #20]
 80052d0:	2001      	movs	r0, #1
 80052d2:	9004      	str	r0, [sp, #16]
 80052d4:	9203      	str	r2, [sp, #12]
 80052d6:	8926      	ldrh	r6, [r4, #8]
 80052d8:	9602      	str	r6, [sp, #8]
 80052da:	9101      	str	r1, [sp, #4]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	7923      	ldrb	r3, [r4, #4]
 80052e0:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80052e4:	47a8      	blx	r5
 80052e6:	e7dd      	b.n	80052a4 <sx12xx_lora_config+0x58>
		return -EBUSY;
 80052e8:	f06f 000f 	mvn.w	r0, #15
 80052ec:	e7de      	b.n	80052ac <sx12xx_lora_config+0x60>
 80052ee:	bf00      	nop
 80052f0:	20000aac 	.word	0x20000aac
 80052f4:	0800e6ac 	.word	0x0800e6ac
 80052f8:	20000a78 	.word	0x20000a78
 80052fc:	20000aa0 	.word	0x20000aa0

08005300 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 8005300:	b510      	push	{r4, lr}
 8005302:	4608      	mov	r0, r1
 8005304:	4611      	mov	r1, r2
 8005306:	461a      	mov	r2, r3
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <sx12xx_lora_test_cw+0x3c>)
 800530a:	f04f 0c01 	mov.w	ip, #1
 800530e:	f3bf 8f5b 	dmb	ish
 8005312:	e853 ef00 	ldrex	lr, [r3]
 8005316:	f1be 0f00 	cmp.w	lr, #0
 800531a:	d103      	bne.n	8005324 <sx12xx_lora_test_cw+0x24>
 800531c:	e843 c400 	strex	r4, ip, [r3]
 8005320:	2c00      	cmp	r4, #0
 8005322:	d1f6      	bne.n	8005312 <sx12xx_lora_test_cw+0x12>
 8005324:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005328:	d104      	bne.n	8005334 <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <sx12xx_lora_test_cw+0x40>)
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	4798      	blx	r3
	return 0;
 8005330:	2000      	movs	r0, #0
}
 8005332:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005334:	f06f 000f 	mvn.w	r0, #15
 8005338:	e7fb      	b.n	8005332 <sx12xx_lora_test_cw+0x32>
 800533a:	bf00      	nop
 800533c:	20000aac 	.word	0x20000aac
 8005340:	0800e6ac 	.word	0x0800e6ac

08005344 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8005344:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005346:	480d      	ldr	r0, [pc, #52]	; (800537c <sx12xx_init+0x38>)
 8005348:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800534c:	2400      	movs	r4, #0
 800534e:	f3bf 8f5b 	dmb	ish
 8005352:	e853 2f00 	ldrex	r2, [r3]
 8005356:	e843 4100 	strex	r1, r4, [r3]
 800535a:	2900      	cmp	r1, #0
 800535c:	d1f9      	bne.n	8005352 <sx12xx_init+0xe>
 800535e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <sx12xx_init+0x3c>)
 8005364:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <sx12xx_init+0x40>)
 8005368:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 800536a:	4d07      	ldr	r5, [pc, #28]	; (8005388 <sx12xx_init+0x44>)
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	3004      	adds	r0, #4
 8005370:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8005372:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005374:	4798      	blx	r3

	return 0;
}
 8005376:	4620      	mov	r0, r4
 8005378:	bd38      	pop	{r3, r4, r5, pc}
 800537a:	bf00      	nop
 800537c:	20000a78 	.word	0x20000a78
 8005380:	08004f4d 	.word	0x08004f4d
 8005384:	08004ec9 	.word	0x08004ec9
 8005388:	0800e6ac 	.word	0x0800e6ac

0800538c <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 800538c:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 800538e:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <sx127x_dio_work_handle+0x14>)
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <sx127x_dio_work_handle+0x18>)
 8005396:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800539a:	2000      	movs	r0, #0
 800539c:	4798      	blx	r3
}
 800539e:	bd08      	pop	{r3, pc}
 80053a0:	20000b14 	.word	0x20000b14
 80053a4:	20000090 	.word	0x20000090

080053a8 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 80053a8:	b510      	push	{r4, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 80053b0:	f10d 0007 	add.w	r0, sp, #7
 80053b4:	9006      	str	r0, [sp, #24]
 80053b6:	2001      	movs	r0, #1
 80053b8:	9007      	str	r0, [sp, #28]
 80053ba:	9208      	str	r2, [sp, #32]
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 80053be:	ab06      	add	r3, sp, #24
 80053c0:	9304      	str	r3, [sp, #16]
 80053c2:	2302      	movs	r3, #2
 80053c4:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 80053c6:	b149      	cbz	r1, 80053dc <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 80053c8:	490b      	ldr	r1, [pc, #44]	; (80053f8 <sx127x_transceive+0x50>)
 80053ca:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 80053cc:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80053ce:	681c      	ldr	r4, [r3, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	aa04      	add	r2, sp, #16
 80053d4:	3108      	adds	r1, #8
 80053d6:	47a0      	blx	r4
}
 80053d8:	b00a      	add	sp, #40	; 0x28
 80053da:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 80053dc:	ab06      	add	r3, sp, #24
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	2302      	movs	r3, #2
 80053e2:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80053e4:	4904      	ldr	r1, [pc, #16]	; (80053f8 <sx127x_transceive+0x50>)
 80053e6:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 80053e8:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80053ea:	681c      	ldr	r4, [r3, #0]
 80053ec:	ab02      	add	r3, sp, #8
 80053ee:	aa04      	add	r2, sp, #16
 80053f0:	3108      	adds	r1, #8
 80053f2:	47a0      	blx	r4
 80053f4:	e7f0      	b.n	80053d8 <sx127x_transceive+0x30>
 80053f6:	bf00      	nop
 80053f8:	20000af0 	.word	0x20000af0

080053fc <sx127x_irq_callback>:
{
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005400:	fa92 f6a2 	rbit	r6, r2
 8005404:	fab6 f686 	clz	r6, r6
 8005408:	b90a      	cbnz	r2, 800540e <sx127x_irq_callback+0x12>
 800540a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 800540e:	2400      	movs	r4, #0
 8005410:	e000      	b.n	8005414 <sx127x_irq_callback+0x18>
 8005412:	3401      	adds	r4, #1
 8005414:	2c03      	cmp	r4, #3
 8005416:	d813      	bhi.n	8005440 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8005418:	1d23      	adds	r3, r4, #4
 800541a:	4a0a      	ldr	r2, [pc, #40]	; (8005444 <sx127x_irq_callback+0x48>)
 800541c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	42ab      	cmp	r3, r5
 8005424:	d1f5      	bne.n	8005412 <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <sx127x_irq_callback+0x4c>)
 8005428:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800542c:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 800542e:	42b3      	cmp	r3, r6
 8005430:	d1ef      	bne.n	8005412 <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8005432:	1ca0      	adds	r0, r4, #2
 8005434:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8005438:	3004      	adds	r0, #4
 800543a:	f002 ff81 	bl	8008340 <k_work_submit>
 800543e:	e7e8      	b.n	8005412 <sx127x_irq_callback+0x16>
}
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	bf00      	nop
 8005444:	20000af0 	.word	0x20000af0
 8005448:	0800e718 	.word	0x0800e718

0800544c <SX1276Reset>:
{
 800544c:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <SX1276Reset+0x64>)
 8005450:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005452:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f013 0f01 	tst.w	r3, #1
 800545a:	d11b      	bne.n	8005494 <SX1276Reset+0x48>
 800545c:	2301      	movs	r3, #1
	if (value != 0)	{
 800545e:	b1db      	cbz	r3, 8005498 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8005460:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2101      	movs	r1, #1
 8005466:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8005468:	200a      	movs	r0, #10
 800546a:	2100      	movs	r1, #0
 800546c:	f003 fb56 	bl	8008b1c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <SX1276Reset+0x64>)
 8005472:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005474:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f013 0f01 	tst.w	r3, #1
 800547c:	d111      	bne.n	80054a2 <SX1276Reset+0x56>
 800547e:	2300      	movs	r3, #0
	if (value != 0)	{
 8005480:	b18b      	cbz	r3, 80054a6 <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8005482:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2101      	movs	r1, #1
 8005488:	4798      	blx	r3
 800548a:	203c      	movs	r0, #60	; 0x3c
 800548c:	2100      	movs	r1, #0
 800548e:	f003 fb45 	bl	8008b1c <z_impl_k_sleep>
}
 8005492:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8005494:	2300      	movs	r3, #0
 8005496:	e7e2      	b.n	800545e <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8005498:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2101      	movs	r1, #1
 800549e:	4798      	blx	r3
 80054a0:	e7e2      	b.n	8005468 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e7ec      	b.n	8005480 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 80054a6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2101      	movs	r1, #1
 80054ac:	4798      	blx	r3
 80054ae:	e7ec      	b.n	800548a <SX1276Reset+0x3e>
 80054b0:	20000af0 	.word	0x20000af0

080054b4 <SX1276IoIrqInit>:
{
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80054b8:	2400      	movs	r4, #0
 80054ba:	e052      	b.n	8005562 <SX1276IoIrqInit+0xae>
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <SX1276IoIrqInit+0x158>)
 80054be:	4a54      	ldr	r2, [pc, #336]	; (8005610 <SX1276IoIrqInit+0x15c>)
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot get pointer to %s device",
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	2101      	movs	r1, #1
 80054ca:	f361 0202 	bfi	r2, r1, #0, #3
 80054ce:	f36f 02c5 	bfc	r2, #3, #3
 80054d2:	f363 128f 	bfi	r2, r3, #6, #10
 80054d6:	4b4f      	ldr	r3, [pc, #316]	; (8005614 <SX1276IoIrqInit+0x160>)
 80054d8:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 80054dc:	484e      	ldr	r0, [pc, #312]	; (8005618 <SX1276IoIrqInit+0x164>)
 80054de:	f7fd fde5 	bl	80030ac <log_1>
}
 80054e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80054e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80054e8:	f013 0f01 	tst.w	r3, #1
 80054ec:	d06f      	beq.n	80055ce <SX1276IoIrqInit+0x11a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80054ee:	2301      	movs	r3, #1
 80054f0:	fa03 fc01 	lsl.w	ip, r3, r1
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	ea43 030c 	orr.w	r3, r3, ip
 80054fa:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8005500:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <SX1276IoIrqInit+0x168>)
 8005506:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <SX1276IoIrqInit+0x160>)
 800550c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005510:	791e      	ldrb	r6, [r3, #4]
 8005512:	2301      	movs	r3, #1
 8005514:	40b3      	lsls	r3, r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8005516:	4a42      	ldr	r2, [pc, #264]	; (8005620 <SX1276IoIrqInit+0x16c>)
 8005518:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 800551a:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 800551c:	1d23      	adds	r3, r4, #4
 800551e:	4a41      	ldr	r2, [pc, #260]	; (8005624 <SX1276IoIrqInit+0x170>)
 8005520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005524:	6858      	ldr	r0, [r3, #4]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8005526:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d057      	beq.n	80055de <SX1276IoIrqInit+0x12a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800552e:	2201      	movs	r2, #1
 8005530:	4798      	blx	r3
 8005532:	2800      	cmp	r0, #0
 8005534:	db56      	blt.n	80055e4 <SX1276IoIrqInit+0x130>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8005536:	1d23      	adds	r3, r4, #4
 8005538:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <SX1276IoIrqInit+0x170>)
 800553a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800553e:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8005540:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8005542:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	2301      	movs	r3, #1
 8005548:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 800554a:	421a      	tst	r2, r3
 800554c:	d15b      	bne.n	8005606 <SX1276IoIrqInit+0x152>
 800554e:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8005552:	698f      	ldr	r7, [r1, #24]
 8005554:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8005558:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 800555c:	4631      	mov	r1, r6
 800555e:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005560:	3401      	adds	r4, #1
 8005562:	2c03      	cmp	r4, #3
 8005564:	d8bd      	bhi.n	80054e2 <SX1276IoIrqInit+0x2e>
		if (!irqHandlers[i]) {
 8005566:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0f8      	beq.n	8005560 <SX1276IoIrqInit+0xac>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 800556e:	4b29      	ldr	r3, [pc, #164]	; (8005614 <SX1276IoIrqInit+0x160>)
 8005570:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8005574:	f002 f94c 	bl	8007810 <z_impl_device_get_binding>
 8005578:	1d23      	adds	r3, r4, #4
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <SX1276IoIrqInit+0x170>)
 800557c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005580:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8005582:	2800      	cmp	r0, #0
 8005584:	d09a      	beq.n	80054bc <SX1276IoIrqInit+0x8>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8005586:	4e27      	ldr	r6, [pc, #156]	; (8005624 <SX1276IoIrqInit+0x170>)
 8005588:	1ca0      	adds	r0, r4, #2
 800558a:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 800558e:	4926      	ldr	r1, [pc, #152]	; (8005628 <SX1276IoIrqInit+0x174>)
 8005590:	3004      	adds	r0, #4
 8005592:	f007 f974 	bl	800c87e <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8005596:	1d23      	adds	r3, r4, #4
 8005598:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800559c:	6870      	ldr	r0, [r6, #4]
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <SX1276IoIrqInit+0x160>)
 80055a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055a4:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 80055a6:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 80055a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 80055b0:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 80055b2:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 80055b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d093      	beq.n	80054e4 <SX1276IoIrqInit+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80055bc:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80055c0:	d090      	beq.n	80054e4 <SX1276IoIrqInit+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80055c2:	f013 0f01 	tst.w	r3, #1
 80055c6:	d08d      	beq.n	80054e4 <SX1276IoIrqInit+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80055c8:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 80055cc:	e78a      	b.n	80054e4 <SX1276IoIrqInit+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80055ce:	2301      	movs	r3, #1
 80055d0:	fa03 fc01 	lsl.w	ip, r3, r1
 80055d4:	6833      	ldr	r3, [r6, #0]
 80055d6:	ea23 030c 	bic.w	r3, r3, ip
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	e78e      	b.n	80054fc <SX1276IoIrqInit+0x48>
		return -ENOTSUP;
 80055de:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80055e2:	e7a6      	b.n	8005532 <SX1276IoIrqInit+0x7e>
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <SX1276IoIrqInit+0x158>)
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <SX1276IoIrqInit+0x15c>)
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set gpio callback.");
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	2201      	movs	r2, #1
 80055f2:	f362 0102 	bfi	r1, r2, #0, #3
 80055f6:	f36f 01c5 	bfc	r1, #3, #3
 80055fa:	f363 118f 	bfi	r1, r3, #6, #10
 80055fe:	480b      	ldr	r0, [pc, #44]	; (800562c <SX1276IoIrqInit+0x178>)
 8005600:	f7fd fd2a 	bl	8003058 <log_0>
			return;
 8005604:	e76d      	b.n	80054e2 <SX1276IoIrqInit+0x2e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8005606:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 800560a:	e7a2      	b.n	8005552 <SX1276IoIrqInit+0x9e>
 800560c:	0800d97c 	.word	0x0800d97c
 8005610:	0800d954 	.word	0x0800d954
 8005614:	0800e718 	.word	0x0800e718
 8005618:	0800e4fc 	.word	0x0800e4fc
 800561c:	20000ac0 	.word	0x20000ac0
 8005620:	080053fd 	.word	0x080053fd
 8005624:	20000af0 	.word	0x20000af0
 8005628:	0800538d 	.word	0x0800538d
 800562c:	0800e578 	.word	0x0800e578

08005630 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8005630:	b510      	push	{r4, lr}
 8005632:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8005634:	b2c0      	uxtb	r0, r0
 8005636:	f006 fdea 	bl	800c20e <sx127x_read>
	if (ret < 0) {
 800563a:	2800      	cmp	r0, #0
 800563c:	db00      	blt.n	8005640 <SX1276ReadBuffer+0x10>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 800563e:	bd10      	pop	{r4, pc}
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <SX1276ReadBuffer+0x34>)
 8005642:	4a09      	ldr	r2, [pc, #36]	; (8005668 <SX1276ReadBuffer+0x38>)
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read address: 0x%x", addr);
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	2101      	movs	r1, #1
 800564e:	f361 0202 	bfi	r2, r1, #0, #3
 8005652:	f36f 02c5 	bfc	r2, #3, #3
 8005656:	f363 128f 	bfi	r2, r3, #6, #10
 800565a:	4621      	mov	r1, r4
 800565c:	4803      	ldr	r0, [pc, #12]	; (800566c <SX1276ReadBuffer+0x3c>)
 800565e:	f7fd fd25 	bl	80030ac <log_1>
}
 8005662:	e7ec      	b.n	800563e <SX1276ReadBuffer+0xe>
 8005664:	0800d97c 	.word	0x0800d97c
 8005668:	0800d954 	.word	0x0800d954
 800566c:	0800e598 	.word	0x0800e598

08005670 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8005670:	b530      	push	{r4, r5, lr}
 8005672:	b083      	sub	sp, #12
 8005674:	4604      	mov	r4, r0
 8005676:	4864      	ldr	r0, [pc, #400]	; (8005808 <sx127x_lora_init+0x198>)
 8005678:	f002 f8ca 	bl	8007810 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 800567c:	4b63      	ldr	r3, [pc, #396]	; (800580c <sx127x_lora_init+0x19c>)
 800567e:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8005680:	b300      	cbz	r0, 80056c4 <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <sx127x_lora_init+0x19c>)
 8005684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005688:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 800568a:	4a61      	ldr	r2, [pc, #388]	; (8005810 <sx127x_lora_init+0x1a0>)
 800568c:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 800568e:	2200      	movs	r2, #0
 8005690:	81da      	strh	r2, [r3, #14]
 8005692:	4860      	ldr	r0, [pc, #384]	; (8005814 <sx127x_lora_init+0x1a4>)
 8005694:	f002 f8bc 	bl	8007810 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8005698:	4b5f      	ldr	r3, [pc, #380]	; (8005818 <sx127x_lora_init+0x1a8>)
 800569a:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 800569c:	b330      	cbz	r0, 80056ec <sx127x_lora_init+0x7c>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 800569e:	4b5e      	ldr	r3, [pc, #376]	; (8005818 <sx127x_lora_init+0x1a8>)
 80056a0:	2206      	movs	r2, #6
 80056a2:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 80056a4:	2201      	movs	r2, #1
 80056a6:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 80056ac:	4857      	ldr	r0, [pc, #348]	; (800580c <sx127x_lora_init+0x19c>)
 80056ae:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 80056b0:	f641 2307 	movw	r3, #6663	; 0x1a07
 80056b4:	4957      	ldr	r1, [pc, #348]	; (8005814 <sx127x_lora_init+0x1a4>)
 80056b6:	f7ff fc57 	bl	8004f68 <__sx12xx_configure_pin>
	if (ret) {
 80056ba:	4605      	mov	r5, r0
 80056bc:	b350      	cbz	r0, 8005714 <sx127x_lora_init+0xa4>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 80056be:	4628      	mov	r0, r5
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	4b55      	ldr	r3, [pc, #340]	; (800581c <sx127x_lora_init+0x1ac>)
 80056c6:	4a56      	ldr	r2, [pc, #344]	; (8005820 <sx127x_lora_init+0x1b0>)
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	2101      	movs	r1, #1
 80056d2:	f361 0202 	bfi	r2, r1, #0, #3
 80056d6:	f36f 02c5 	bfc	r2, #3, #3
 80056da:	f363 128f 	bfi	r2, r3, #6, #10
 80056de:	494a      	ldr	r1, [pc, #296]	; (8005808 <sx127x_lora_init+0x198>)
 80056e0:	4850      	ldr	r0, [pc, #320]	; (8005824 <sx127x_lora_init+0x1b4>)
 80056e2:	f7fd fce3 	bl	80030ac <log_1>
		return -EINVAL;
 80056e6:	f06f 0515 	mvn.w	r5, #21
 80056ea:	e7e8      	b.n	80056be <sx127x_lora_init+0x4e>
 80056ec:	4b4b      	ldr	r3, [pc, #300]	; (800581c <sx127x_lora_init+0x1ac>)
 80056ee:	4a4c      	ldr	r2, [pc, #304]	; (8005820 <sx127x_lora_init+0x1b0>)
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	2101      	movs	r1, #1
 80056fa:	f361 0202 	bfi	r2, r1, #0, #3
 80056fe:	f36f 02c5 	bfc	r2, #3, #3
 8005702:	f363 128f 	bfi	r2, r3, #6, #10
 8005706:	4943      	ldr	r1, [pc, #268]	; (8005814 <sx127x_lora_init+0x1a4>)
 8005708:	4846      	ldr	r0, [pc, #280]	; (8005824 <sx127x_lora_init+0x1b4>)
 800570a:	f7fd fccf 	bl	80030ac <log_1>
		return -EIO;
 800570e:	f06f 0504 	mvn.w	r5, #4
 8005712:	e7d4      	b.n	80056be <sx127x_lora_init+0x4e>
 8005714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005718:	2100      	movs	r1, #0
 800571a:	f003 f9ff 	bl	8008b1c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <sx127x_lora_init+0x19c>)
 8005720:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005722:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f013 0f01 	tst.w	r3, #1
 800572a:	d140      	bne.n	80057ae <sx127x_lora_init+0x13e>
 800572c:	462b      	mov	r3, r5
	if (value != 0)	{
 800572e:	2b00      	cmp	r3, #0
 8005730:	d03f      	beq.n	80057b2 <sx127x_lora_init+0x142>
	const struct gpio_driver_api *api =
 8005732:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2101      	movs	r1, #1
 8005738:	4798      	blx	r3
 800573a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800573e:	2100      	movs	r1, #0
 8005740:	f003 f9ec 	bl	8008b1c <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8005744:	2201      	movs	r2, #1
 8005746:	f10d 0107 	add.w	r1, sp, #7
 800574a:	2042      	movs	r0, #66	; 0x42
 800574c:	f006 fd5f 	bl	800c20e <sx127x_read>
	if (ret < 0) {
 8005750:	2800      	cmp	r0, #0
 8005752:	db33      	blt.n	80057bc <sx127x_lora_init+0x14c>
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <sx127x_lora_init+0x1ac>)
 8005756:	4a32      	ldr	r2, [pc, #200]	; (8005820 <sx127x_lora_init+0x1b0>)
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	08db      	lsrs	r3, r3, #3
	LOG_INF("SX127x version 0x%02x found", regval);
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	2103      	movs	r1, #3
 8005762:	f361 0202 	bfi	r2, r1, #0, #3
 8005766:	f36f 02c5 	bfc	r2, #3, #3
 800576a:	f363 128f 	bfi	r2, r3, #6, #10
 800576e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005772:	482d      	ldr	r0, [pc, #180]	; (8005828 <sx127x_lora_init+0x1b8>)
 8005774:	f7fd fc9a 	bl	80030ac <log_1>
	ret = sx127x_antenna_configure();
 8005778:	f006 fd42 	bl	800c200 <sx127x_antenna_configure>
	if (ret < 0) {
 800577c:	2800      	cmp	r0, #0
 800577e:	db30      	blt.n	80057e2 <sx127x_lora_init+0x172>
	ret = sx12xx_init(dev);
 8005780:	4620      	mov	r0, r4
 8005782:	f7ff fddf 	bl	8005344 <sx12xx_init>
	if (ret < 0) {
 8005786:	1e04      	subs	r4, r0, #0
 8005788:	da99      	bge.n	80056be <sx127x_lora_init+0x4e>
 800578a:	4b24      	ldr	r3, [pc, #144]	; (800581c <sx127x_lora_init+0x1ac>)
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <sx127x_lora_init+0x1b0>)
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize SX12xx common");
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	2201      	movs	r2, #1
 8005798:	f362 0102 	bfi	r1, r2, #0, #3
 800579c:	f36f 01c5 	bfc	r1, #3, #3
 80057a0:	f363 118f 	bfi	r1, r3, #6, #10
 80057a4:	4821      	ldr	r0, [pc, #132]	; (800582c <sx127x_lora_init+0x1bc>)
 80057a6:	f7fd fc57 	bl	8003058 <log_0>
		return ret;
 80057aa:	4625      	mov	r5, r4
 80057ac:	e787      	b.n	80056be <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e7bd      	b.n	800572e <sx127x_lora_init+0xbe>
	const struct gpio_driver_api *api =
 80057b2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2101      	movs	r1, #1
 80057b8:	4798      	blx	r3
 80057ba:	e7be      	b.n	800573a <sx127x_lora_init+0xca>
 80057bc:	4b17      	ldr	r3, [pc, #92]	; (800581c <sx127x_lora_init+0x1ac>)
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <sx127x_lora_init+0x1b0>)
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read version info");
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	2201      	movs	r2, #1
 80057ca:	f362 0102 	bfi	r1, r2, #0, #3
 80057ce:	f36f 01c5 	bfc	r1, #3, #3
 80057d2:	f363 118f 	bfi	r1, r3, #6, #10
 80057d6:	4816      	ldr	r0, [pc, #88]	; (8005830 <sx127x_lora_init+0x1c0>)
 80057d8:	f7fd fc3e 	bl	8003058 <log_0>
		return -EIO;
 80057dc:	f06f 0504 	mvn.w	r5, #4
 80057e0:	e76d      	b.n	80056be <sx127x_lora_init+0x4e>
 80057e2:	4b0e      	ldr	r3, [pc, #56]	; (800581c <sx127x_lora_init+0x1ac>)
 80057e4:	4a0e      	ldr	r2, [pc, #56]	; (8005820 <sx127x_lora_init+0x1b0>)
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to configure antenna");
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	2201      	movs	r2, #1
 80057f0:	f362 0102 	bfi	r1, r2, #0, #3
 80057f4:	f36f 01c5 	bfc	r1, #3, #3
 80057f8:	f363 118f 	bfi	r1, r3, #6, #10
 80057fc:	480d      	ldr	r0, [pc, #52]	; (8005834 <sx127x_lora_init+0x1c4>)
 80057fe:	f7fd fc2b 	bl	8003058 <log_0>
		return -EIO;
 8005802:	f06f 0504 	mvn.w	r5, #4
 8005806:	e75a      	b.n	80056be <sx127x_lora_init+0x4e>
 8005808:	0800e49c 	.word	0x0800e49c
 800580c:	20000af0 	.word	0x20000af0
 8005810:	0007a120 	.word	0x0007a120
 8005814:	0800e32c 	.word	0x0800e32c
 8005818:	20000b54 	.word	0x20000b54
 800581c:	0800d97c 	.word	0x0800d97c
 8005820:	0800d954 	.word	0x0800d954
 8005824:	0800e4fc 	.word	0x0800e4fc
 8005828:	0800e5d4 	.word	0x0800e5d4
 800582c:	0800e60c 	.word	0x0800e60c
 8005830:	0800e5b8 	.word	0x0800e5b8
 8005834:	0800e5f0 	.word	0x0800e5f0

08005838 <SX1276WriteBuffer>:
{
 8005838:	b510      	push	{r4, lr}
 800583a:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 800583c:	b2c0      	uxtb	r0, r0
 800583e:	f006 fced 	bl	800c21c <sx127x_write>
	if (ret < 0) {
 8005842:	2800      	cmp	r0, #0
 8005844:	db00      	blt.n	8005848 <SX1276WriteBuffer+0x10>
}
 8005846:	bd10      	pop	{r4, pc}
 8005848:	4b08      	ldr	r3, [pc, #32]	; (800586c <SX1276WriteBuffer+0x34>)
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <SX1276WriteBuffer+0x38>)
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write address: 0x%x", addr);
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	2101      	movs	r1, #1
 8005856:	f361 0202 	bfi	r2, r1, #0, #3
 800585a:	f36f 02c5 	bfc	r2, #3, #3
 800585e:	f363 128f 	bfi	r2, r3, #6, #10
 8005862:	4621      	mov	r1, r4
 8005864:	4803      	ldr	r0, [pc, #12]	; (8005874 <SX1276WriteBuffer+0x3c>)
 8005866:	f7fd fc21 	bl	80030ac <log_1>
}
 800586a:	e7ec      	b.n	8005846 <SX1276WriteBuffer+0xe>
 800586c:	0800d97c 	.word	0x0800d97c
 8005870:	0800d954 	.word	0x0800d954
 8005874:	0800e630 	.word	0x0800e630

08005878 <SX1276SetRfTxPower>:
{
 8005878:	b530      	push	{r4, r5, lr}
 800587a:	b083      	sub	sp, #12
 800587c:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 8005884:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8005888:	2201      	movs	r2, #1
 800588a:	f10d 0106 	add.w	r1, sp, #6
 800588e:	204d      	movs	r0, #77	; 0x4d
 8005890:	f006 fcbd 	bl	800c20e <sx127x_read>
	if (ret < 0) {
 8005894:	2800      	cmp	r0, #0
 8005896:	db2e      	blt.n	80058f6 <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8005898:	f89d 4006 	ldrb.w	r4, [sp, #6]
 800589c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80058a0:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 80058a4:	2214      	movs	r2, #20
 80058a6:	2102      	movs	r1, #2
 80058a8:	4628      	mov	r0, r5
 80058aa:	f006 fc9f 	bl	800c1ec <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 80058ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b6:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 80058ba:	2811      	cmp	r0, #17
 80058bc:	dd2c      	ble.n	8005918 <SX1276SetRfTxPower+0xa0>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 80058be:	f044 0407 	orr.w	r4, r4, #7
 80058c2:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 80058c6:	3805      	subs	r0, #5
 80058c8:	f000 000f 	and.w	r0, r0, #15
 80058cc:	4318      	orrs	r0, r3
 80058ce:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 80058d2:	2201      	movs	r2, #1
 80058d4:	f10d 0107 	add.w	r1, sp, #7
 80058d8:	2009      	movs	r0, #9
 80058da:	f006 fc9f 	bl	800c21c <sx127x_write>
	if (ret < 0) {
 80058de:	2800      	cmp	r0, #0
 80058e0:	db25      	blt.n	800592e <SX1276SetRfTxPower+0xb6>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 80058e2:	2201      	movs	r2, #1
 80058e4:	f10d 0106 	add.w	r1, sp, #6
 80058e8:	204d      	movs	r0, #77	; 0x4d
 80058ea:	f006 fc97 	bl	800c21c <sx127x_write>
	if (ret < 0) {
 80058ee:	2800      	cmp	r0, #0
 80058f0:	db2e      	blt.n	8005950 <SX1276SetRfTxPower+0xd8>
}
 80058f2:	b003      	add	sp, #12
 80058f4:	bd30      	pop	{r4, r5, pc}
 80058f6:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <SX1276SetRfTxPower+0xfc>)
 80058f8:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <SX1276SetRfTxPower+0x100>)
 80058fa:	1a9b      	subs	r3, r3, r2
 80058fc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read PA dac");
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	2201      	movs	r2, #1
 8005904:	f362 0102 	bfi	r1, r2, #0, #3
 8005908:	f36f 01c5 	bfc	r1, #3, #3
 800590c:	f363 118f 	bfi	r1, r3, #6, #10
 8005910:	481a      	ldr	r0, [pc, #104]	; (800597c <SX1276SetRfTxPower+0x104>)
 8005912:	f7fd fba1 	bl	8003058 <log_0>
		return;
 8005916:	e7ec      	b.n	80058f2 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8005918:	f044 0404 	orr.w	r4, r4, #4
 800591c:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005920:	3802      	subs	r0, #2
 8005922:	f000 000f 	and.w	r0, r0, #15
 8005926:	4318      	orrs	r0, r3
 8005928:	f88d 0007 	strb.w	r0, [sp, #7]
 800592c:	e7d1      	b.n	80058d2 <SX1276SetRfTxPower+0x5a>
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <SX1276SetRfTxPower+0xfc>)
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <SX1276SetRfTxPower+0x100>)
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA config");
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	2201      	movs	r2, #1
 800593c:	f362 0102 	bfi	r1, r2, #0, #3
 8005940:	f36f 01c5 	bfc	r1, #3, #3
 8005944:	f363 118f 	bfi	r1, r3, #6, #10
 8005948:	480d      	ldr	r0, [pc, #52]	; (8005980 <SX1276SetRfTxPower+0x108>)
 800594a:	f7fd fb85 	bl	8003058 <log_0>
		return;
 800594e:	e7d0      	b.n	80058f2 <SX1276SetRfTxPower+0x7a>
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <SX1276SetRfTxPower+0xfc>)
 8005952:	4a09      	ldr	r2, [pc, #36]	; (8005978 <SX1276SetRfTxPower+0x100>)
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA dac");
 8005958:	f04f 0100 	mov.w	r1, #0
 800595c:	2201      	movs	r2, #1
 800595e:	f362 0102 	bfi	r1, r2, #0, #3
 8005962:	f36f 01c5 	bfc	r1, #3, #3
 8005966:	f363 118f 	bfi	r1, r3, #6, #10
 800596a:	4806      	ldr	r0, [pc, #24]	; (8005984 <SX1276SetRfTxPower+0x10c>)
 800596c:	f7fd fb74 	bl	8003058 <log_0>
		return;
 8005970:	e7bf      	b.n	80058f2 <SX1276SetRfTxPower+0x7a>
 8005972:	bf00      	nop
 8005974:	0800d97c 	.word	0x0800d97c
 8005978:	0800d954 	.word	0x0800d954
 800597c:	0800e650 	.word	0x0800e650
 8005980:	0800e668 	.word	0x0800e668
 8005984:	0800e684 	.word	0x0800e684

08005988 <SX1276GetDio1PinState>:
{
 8005988:	b510      	push	{r4, lr}
 800598a:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <SX1276GetDio1PinState+0x34>)
 800598e:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8005990:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 8005992:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	a901      	add	r1, sp, #4
 8005998:	4798      	blx	r3
	if (ret == 0) {
 800599a:	4603      	mov	r3, r0
 800599c:	b918      	cbnz	r0, 80059a6 <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 800599e:	6821      	ldr	r1, [r4, #0]
 80059a0:	9a01      	ldr	r2, [sp, #4]
 80059a2:	404a      	eors	r2, r1
 80059a4:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 80059a6:	b913      	cbnz	r3, 80059ae <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	dc02      	bgt.n	80059b8 <SX1276GetDio1PinState+0x30>
	return 0U;
 80059b2:	2000      	movs	r0, #0
}
 80059b4:	b002      	add	sp, #8
 80059b6:	bd10      	pop	{r4, pc}
		return 1U;
 80059b8:	2001      	movs	r0, #1
 80059ba:	e7fb      	b.n	80059b4 <SX1276GetDio1PinState+0x2c>
 80059bc:	20000af0 	.word	0x20000af0

080059c0 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <TimerInsertTimer+0x28>)
 80059c2:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 80059c4:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 80059c6:	e001      	b.n	80059cc <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 80059c8:	461a      	mov	r2, r3
            next = next->Next;
 80059ca:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 80059cc:	6951      	ldr	r1, [r2, #20]
 80059ce:	b139      	cbz	r1, 80059e0 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	f8d0 c000 	ldr.w	ip, [r0]
 80059d6:	458c      	cmp	ip, r1
 80059d8:	d8f6      	bhi.n	80059c8 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 80059da:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 80059dc:	6143      	str	r3, [r0, #20]
            return;
 80059de:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 80059e0:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	6143      	str	r3, [r0, #20]
}
 80059e6:	4770      	bx	lr
 80059e8:	20000b60 	.word	0x20000b60

080059ec <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <TimerExists+0x18>)
 80059ee:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 80059f0:	e000      	b.n	80059f4 <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 80059f2:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 80059f4:	b11b      	cbz	r3, 80059fe <TimerExists+0x12>
        if( cur == obj )
 80059f6:	4283      	cmp	r3, r0
 80059f8:	d1fb      	bne.n	80059f2 <TimerExists+0x6>
            return true;
 80059fa:	2001      	movs	r0, #1
    }
    return false;
}
 80059fc:	4770      	bx	lr
    return false;
 80059fe:	2000      	movs	r0, #0
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000b60 	.word	0x20000b60

08005a08 <TimerInsertNewHeadTimer>:
{
 8005a08:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <TimerInsertNewHeadTimer+0x18>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8005a0e:	b10b      	cbz	r3, 8005a14 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8005a10:	2200      	movs	r2, #0
 8005a12:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8005a14:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8005a16:	4b02      	ldr	r3, [pc, #8]	; (8005a20 <TimerInsertNewHeadTimer+0x18>)
 8005a18:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8005a1a:	f006 fc13 	bl	800c244 <TimerSetTimeout>
}
 8005a1e:	bd08      	pop	{r3, pc}
 8005a20:	20000b60 	.word	0x20000b60

08005a24 <TimerStart>:
{
 8005a24:	b510      	push	{r4, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005a2a:	a801      	add	r0, sp, #4
 8005a2c:	f006 fbce 	bl	800c1cc <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8005a30:	b1f4      	cbz	r4, 8005a70 <TimerStart+0x4c>
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff ffda 	bl	80059ec <TimerExists>
 8005a38:	b9d0      	cbnz	r0, 8005a70 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8005a42:	2300      	movs	r3, #0
 8005a44:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <TimerStart+0x68>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	b1ab      	cbz	r3, 8005a78 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8005a4c:	f7ff f9d6 	bl	8004dfc <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	4418      	add	r0, r3
 8005a54:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <TimerStart+0x68>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4298      	cmp	r0, r3
 8005a5e:	d211      	bcs.n	8005a84 <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7ff ffd1 	bl	8005a08 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 8005a66:	a801      	add	r0, sp, #4
 8005a68:	f006 fbba 	bl	800c1e0 <BoardCriticalSectionEnd>
}
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8005a70:	a801      	add	r0, sp, #4
 8005a72:	f006 fbb5 	bl	800c1e0 <BoardCriticalSectionEnd>
        return;
 8005a76:	e7f9      	b.n	8005a6c <TimerStart+0x48>
        RtcSetTimerContext( );
 8005a78:	f7ff f9ec 	bl	8004e54 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff ffc3 	bl	8005a08 <TimerInsertNewHeadTimer>
 8005a82:	e7f0      	b.n	8005a66 <TimerStart+0x42>
            TimerInsertTimer( obj );
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7ff ff9b 	bl	80059c0 <TimerInsertTimer>
 8005a8a:	e7ec      	b.n	8005a66 <TimerStart+0x42>
 8005a8c:	20000b60 	.word	0x20000b60

08005a90 <TimerIrqHandler>:
{
 8005a90:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 8005a92:	f7ff f9eb 	bl	8004e6c <RtcGetTimerContext>
 8005a96:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8005a98:	f7ff f9dc 	bl	8004e54 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8005a9c:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <TimerIrqHandler+0x84>)
 8005aa2:	681e      	ldr	r6, [r3, #0]
 8005aa4:	b16e      	cbz	r6, 8005ac2 <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005aa6:	4632      	mov	r2, r6
 8005aa8:	e002      	b.n	8005ab0 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 8005aaa:	2100      	movs	r1, #0
 8005aac:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8005aae:	6952      	ldr	r2, [r2, #20]
 8005ab0:	6953      	ldr	r3, [r2, #20]
 8005ab2:	b133      	cbz	r3, 8005ac2 <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	4561      	cmp	r1, ip
 8005ab8:	d9f7      	bls.n	8005aaa <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 8005aba:	1a2c      	subs	r4, r5, r0
 8005abc:	4421      	add	r1, r4
 8005abe:	6019      	str	r1, [r3, #0]
 8005ac0:	e7f5      	b.n	8005aae <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 8005ac2:	b146      	cbz	r6, 8005ad6 <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 8005ac4:	6972      	ldr	r2, [r6, #20]
 8005ac6:	4b13      	ldr	r3, [pc, #76]	; (8005b14 <TimerIrqHandler+0x84>)
 8005ac8:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 8005aca:	2300      	movs	r3, #0
 8005acc:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005ace:	68f3      	ldr	r3, [r6, #12]
 8005ad0:	b1a3      	cbz	r3, 8005afc <TimerIrqHandler+0x6c>
 8005ad2:	6930      	ldr	r0, [r6, #16]
 8005ad4:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <TimerIrqHandler+0x84>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b18b      	cbz	r3, 8005b00 <TimerIrqHandler+0x70>
 8005adc:	681c      	ldr	r4, [r3, #0]
 8005ade:	f7ff f98d 	bl	8004dfc <RtcGetTimerElapsedTime>
 8005ae2:	4284      	cmp	r4, r0
 8005ae4:	d20c      	bcs.n	8005b00 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	; (8005b14 <TimerIrqHandler+0x84>)
 8005ae8:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8005aea:	6959      	ldr	r1, [r3, #20]
 8005aec:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8005aee:	2200      	movs	r2, #0
 8005af0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	b11a      	cbz	r2, 8005afe <TimerIrqHandler+0x6e>
 8005af6:	6918      	ldr	r0, [r3, #16]
 8005af8:	4790      	blx	r2
 8005afa:	e7ec      	b.n	8005ad6 <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005afc:	e7fe      	b.n	8005afc <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 8005afe:	e7fe      	b.n	8005afe <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8005b00:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <TimerIrqHandler+0x84>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	b108      	cbz	r0, 8005b0a <TimerIrqHandler+0x7a>
 8005b06:	7a43      	ldrb	r3, [r0, #9]
 8005b08:	b103      	cbz	r3, 8005b0c <TimerIrqHandler+0x7c>
}
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8005b0c:	f006 fb9a 	bl	800c244 <TimerSetTimeout>
}
 8005b10:	e7fb      	b.n	8005b0a <TimerIrqHandler+0x7a>
 8005b12:	bf00      	nop
 8005b14:	20000b60 	.word	0x20000b60

08005b18 <TimerStop>:
{
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8005b1e:	a801      	add	r0, sp, #4
 8005b20:	f006 fb54 	bl	800c1cc <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <TimerStop+0x7c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8005b28:	b15a      	cbz	r2, 8005b42 <TimerStop+0x2a>
 8005b2a:	b154      	cbz	r4, 8005b42 <TimerStop+0x2a>
    obj->IsStarted = false;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8005b30:	42a2      	cmp	r2, r4
 8005b32:	d00a      	beq.n	8005b4a <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 8005b34:	4613      	mov	r3, r2
        while( cur != NULL )
 8005b36:	b32b      	cbz	r3, 8005b84 <TimerStop+0x6c>
            if( cur == obj )
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d020      	beq.n	8005b7e <TimerStop+0x66>
                prev = cur;
 8005b3c:	461a      	mov	r2, r3
                cur = cur->Next;
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	e7f9      	b.n	8005b36 <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 8005b42:	a801      	add	r0, sp, #4
 8005b44:	f006 fb4c 	bl	800c1e0 <BoardCriticalSectionEnd>
        return;
 8005b48:	e01f      	b.n	8005b8a <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8005b4a:	7a53      	ldrb	r3, [r2, #9]
 8005b4c:	b173      	cbz	r3, 8005b6c <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8005b52:	6950      	ldr	r0, [r2, #20]
 8005b54:	b120      	cbz	r0, 8005b60 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <TimerStop+0x7c>)
 8005b58:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8005b5a:	f006 fb73 	bl	800c244 <TimerSetTimeout>
 8005b5e:	e011      	b.n	8005b84 <TimerStop+0x6c>
                RtcStopAlarm( );
 8005b60:	f7ff f95a 	bl	8004e18 <RtcStopAlarm>
                TimerListHead = NULL;
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <TimerStop+0x7c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e00b      	b.n	8005b84 <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8005b6c:	6953      	ldr	r3, [r2, #20]
 8005b6e:	b113      	cbz	r3, 8005b76 <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8005b70:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <TimerStop+0x7c>)
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e006      	b.n	8005b84 <TimerStop+0x6c>
                TimerListHead = NULL;
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <TimerStop+0x7c>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e002      	b.n	8005b84 <TimerStop+0x6c>
                if( cur->Next != NULL )
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	b12b      	cbz	r3, 8005b8e <TimerStop+0x76>
                    prev->Next = cur;
 8005b82:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 8005b84:	a801      	add	r0, sp, #4
 8005b86:	f006 fb2b 	bl	800c1e0 <BoardCriticalSectionEnd>
}
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6153      	str	r3, [r2, #20]
 8005b92:	e7f7      	b.n	8005b84 <TimerStop+0x6c>
 8005b94:	20000b60 	.word	0x20000b60

08005b98 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005b98:	4908      	ldr	r1, [pc, #32]	; (8005bbc <SX1276ConvertFreqInHzToPllStep+0x24>)
 8005b9a:	fba1 3200 	umull	r3, r2, r1, r0
 8005b9e:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005ba0:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005ba4:	fb03 0012 	mls	r0, r3, r2, r0
 8005ba8:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005bac:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8005bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8005bb4:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 8005bb6:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 8005bba:	4770      	bx	lr
 8005bbc:	431bde83 	.word	0x431bde83

08005bc0 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e008      	b.n	8005bd6 <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005bc4:	e7fe      	b.n	8005bc4 <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <GetFskBandwidthRegValue+0x4c>)
 8005bc8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005bcc:	7908      	ldrb	r0, [r1, #4]
}
 8005bce:	bc10      	pop	{r4}
 8005bd0:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b14      	cmp	r3, #20
 8005bd8:	d817      	bhi.n	8005c0a <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	; (8005c0c <GetFskBandwidthRegValue+0x4c>)
 8005bde:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005be2:	4282      	cmp	r2, r0
 8005be4:	d8f5      	bhi.n	8005bd2 <GetFskBandwidthRegValue+0x12>
{
 8005be6:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	4c08      	ldr	r4, [pc, #32]	; (8005c0c <GetFskBandwidthRegValue+0x4c>)
 8005bec:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8005bf0:	4282      	cmp	r2, r0
 8005bf2:	d8e8      	bhi.n	8005bc6 <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b14      	cmp	r3, #20
 8005bfa:	d8e3      	bhi.n	8005bc4 <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <GetFskBandwidthRegValue+0x4c>)
 8005c00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005c04:	4282      	cmp	r2, r0
 8005c06:	d8f5      	bhi.n	8005bf4 <GetFskBandwidthRegValue+0x34>
 8005c08:	e7ee      	b.n	8005be8 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8005c0a:	e7fe      	b.n	8005c0a <GetFskBandwidthRegValue+0x4a>
 8005c0c:	0800e74c 	.word	0x0800e74c

08005c10 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8005c10:	2801      	cmp	r0, #1
 8005c12:	d006      	beq.n	8005c22 <SX1276GetLoRaBandwidthInHz+0x12>
 8005c14:	2802      	cmp	r0, #2
 8005c16:	d006      	beq.n	8005c26 <SX1276GetLoRaBandwidthInHz+0x16>
 8005c18:	b108      	cbz	r0, 8005c1e <SX1276GetLoRaBandwidthInHz+0xe>
 8005c1a:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8005c1c:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8005c1e:	4803      	ldr	r0, [pc, #12]	; (8005c2c <SX1276GetLoRaBandwidthInHz+0x1c>)
 8005c20:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 8005c22:	4803      	ldr	r0, [pc, #12]	; (8005c30 <SX1276GetLoRaBandwidthInHz+0x20>)
 8005c24:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 8005c26:	4803      	ldr	r0, [pc, #12]	; (8005c34 <SX1276GetLoRaBandwidthInHz+0x24>)
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	0001e848 	.word	0x0001e848
 8005c30:	0003d090 	.word	0x0003d090
 8005c34:	0007a120 	.word	0x0007a120

08005c38 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <SX1276OnDio4Irq+0x1c>)
 8005c3a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005c3e:	b93b      	cbnz	r3, 8005c50 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <SX1276OnDio4Irq+0x1c>)
 8005c42:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005c46:	b91b      	cbnz	r3, 8005c50 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005c48:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <SX1276OnDio4Irq+0x1c>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20000c98 	.word	0x20000c98

08005c58 <SX1276GetStatus>:
}
 8005c58:	4b01      	ldr	r3, [pc, #4]	; (8005c60 <SX1276GetStatus+0x8>)
 8005c5a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8005c5e:	4770      	bx	lr
 8005c60:	20000c98 	.word	0x20000c98

08005c64 <SX1276SetChannel>:
{
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8005c68:	f7ff ff96 	bl	8005b98 <SX1276ConvertFreqInHzToPllStep>
 8005c6c:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <SX1276SetChannel+0x30>)
 8005c70:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8005c74:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8005c78:	2006      	movs	r0, #6
 8005c7a:	f006 fbda 	bl	800c432 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8005c7e:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8005c82:	2007      	movs	r0, #7
 8005c84:	f006 fbd5 	bl	800c432 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8005c88:	b2e1      	uxtb	r1, r4
 8005c8a:	2008      	movs	r0, #8
 8005c8c:	f006 fbd1 	bl	800c432 <SX1276Write>
}
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	bf00      	nop
 8005c94:	20000c98 	.word	0x20000c98

08005c98 <SX1276OnDio3Irq>:
{
 8005c98:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <SX1276OnDio3Irq+0x54>)
 8005c9c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d000      	beq.n	8005ca6 <SX1276OnDio3Irq+0xe>
}
 8005ca4:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005ca6:	2012      	movs	r0, #18
 8005ca8:	f006 fbcf 	bl	800c44a <SX1276Read>
 8005cac:	f010 0f01 	tst.w	r0, #1
 8005cb0:	d00d      	beq.n	8005cce <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005cb2:	2105      	movs	r1, #5
 8005cb4:	2012      	movs	r0, #18
 8005cb6:	f006 fbbc 	bl	800c432 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <SX1276OnDio3Irq+0x58>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <SX1276OnDio3Irq+0xc>
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ed      	beq.n	8005ca4 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 8005cc8:	2001      	movs	r0, #1
 8005cca:	4798      	blx	r3
 8005ccc:	e7ea      	b.n	8005ca4 <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005cce:	2104      	movs	r1, #4
 8005cd0:	2012      	movs	r0, #18
 8005cd2:	f006 fbae 	bl	800c432 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <SX1276OnDio3Irq+0x58>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0e2      	beq.n	8005ca4 <SX1276OnDio3Irq+0xc>
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0df      	beq.n	8005ca4 <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	4798      	blx	r3
}
 8005ce8:	e7dc      	b.n	8005ca4 <SX1276OnDio3Irq+0xc>
 8005cea:	bf00      	nop
 8005cec:	20000c98 	.word	0x20000c98
 8005cf0:	20000b64 	.word	0x20000b64

08005cf4 <SX1276OnDio2Irq>:
{
 8005cf4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005cf8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d002      	beq.n	8005d06 <SX1276OnDio2Irq+0x12>
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d051      	beq.n	8005da8 <SX1276OnDio2Irq+0xb4>
}
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d08:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005d0c:	b1c3      	cbz	r3, 8005d40 <SX1276OnDio2Irq+0x4c>
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d1f8      	bne.n	8005d04 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005d12:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d14:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f3      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	2012      	movs	r0, #18
 8005d20:	f006 fb87 	bl	800c432 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005d24:	4b2f      	ldr	r3, [pc, #188]	; (8005de4 <SX1276OnDio2Irq+0xf0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0eb      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
 8005d2c:	695c      	ldr	r4, [r3, #20]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d0e8      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005d32:	201c      	movs	r0, #28
 8005d34:	f006 fb89 	bl	800c44a <SX1276Read>
 8005d38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005d3c:	47a0      	blx	r4
 8005d3e:	e7e1      	b.n	8005d04 <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8005d40:	4b27      	ldr	r3, [pc, #156]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d44:	b35b      	cbz	r3, 8005d9e <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d48:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0d9      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
 8005d50:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d52:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1d4      	bne.n	8005d04 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8005d5a:	4823      	ldr	r0, [pc, #140]	; (8005de8 <SX1276OnDio2Irq+0xf4>)
 8005d5c:	f7ff fedc 	bl	8005b18 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005d60:	4c1f      	ldr	r4, [pc, #124]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005d62:	2301      	movs	r3, #1
 8005d64:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005d68:	2011      	movs	r0, #17
 8005d6a:	f006 fb6e 	bl	800c44a <SX1276Read>
 8005d6e:	0843      	lsrs	r3, r0, #1
 8005d70:	425b      	negs	r3, r3
 8005d72:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005d76:	201b      	movs	r0, #27
 8005d78:	f006 fb67 	bl	800c44a <SX1276Read>
 8005d7c:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005d7e:	201c      	movs	r0, #28
 8005d80:	f006 fb63 	bl	800c44a <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005d84:	4328      	orrs	r0, r5
 8005d86:	f006 faa7 	bl	800c2d8 <SX1276ConvertPllStepToFreqInHz>
 8005d8a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005d8e:	200c      	movs	r0, #12
 8005d90:	f006 fb5b 	bl	800c44a <SX1276Read>
 8005d94:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8005d98:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8005d9c:	e7b2      	b.n	8005d04 <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8005da6:	e7ce      	b.n	8005d46 <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 8005da8:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005daa:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d1a8      	bne.n	8005d04 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <SX1276OnDio2Irq+0xec>)
 8005db4:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0a3      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	2012      	movs	r0, #18
 8005dc0:	f006 fb37 	bl	800c432 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <SX1276OnDio2Irq+0xf0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d09b      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
 8005dcc:	695c      	ldr	r4, [r3, #20]
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	d098      	beq.n	8005d04 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005dd2:	201c      	movs	r0, #28
 8005dd4:	f006 fb39 	bl	800c44a <SX1276Read>
 8005dd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005ddc:	47a0      	blx	r4
}
 8005dde:	e791      	b.n	8005d04 <SX1276OnDio2Irq+0x10>
 8005de0:	20000c98 	.word	0x20000c98
 8005de4:	20000b64 	.word	0x20000b64
 8005de8:	20000b68 	.word	0x20000b68

08005dec <SX1276OnDio1Irq>:
{
 8005dec:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 8005dee:	4b4c      	ldr	r3, [pc, #304]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005df0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d002      	beq.n	8005dfe <SX1276OnDio1Irq+0x12>
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d063      	beq.n	8005ec4 <SX1276OnDio1Irq+0xd8>
}
 8005dfc:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 8005dfe:	4b48      	ldr	r3, [pc, #288]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e00:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005e04:	b1cb      	cbz	r3, 8005e3a <SX1276OnDio1Irq+0x4e>
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d1f8      	bne.n	8005dfc <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8005e0a:	f7ff fdbd 	bl	8005988 <SX1276GetDio1PinState>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0f4      	beq.n	8005dfc <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 8005e12:	4844      	ldr	r0, [pc, #272]	; (8005f24 <SX1276OnDio1Irq+0x138>)
 8005e14:	f7ff fe80 	bl	8005b18 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	2012      	movs	r0, #18
 8005e1c:	f006 fb09 	bl	800c432 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005e20:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005e28:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <SX1276OnDio1Irq+0x13c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0e5      	beq.n	8005dfc <SX1276OnDio1Irq+0x10>
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0e2      	beq.n	8005dfc <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 8005e36:	4798      	blx	r3
 8005e38:	e7e0      	b.n	8005dfc <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8005e3a:	f7ff fda5 	bl	8005988 <SX1276GetDio1PinState>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0dc      	beq.n	8005dfc <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 8005e42:	483a      	ldr	r0, [pc, #232]	; (8005f2c <SX1276OnDio1Irq+0x140>)
 8005e44:	f7ff fe68 	bl	8005b18 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005e48:	4b35      	ldr	r3, [pc, #212]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e4a:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8005e4e:	b95b      	cbnz	r3, 8005e68 <SX1276OnDio1Irq+0x7c>
 8005e50:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e52:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005e56:	b93b      	cbnz	r3, 8005e68 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005e58:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e5a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005e5e:	b9f3      	cbnz	r3, 8005e9e <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005e60:	2101      	movs	r1, #1
 8005e62:	4833      	ldr	r0, [pc, #204]	; (8005f30 <SX1276OnDio1Irq+0x144>)
 8005e64:	f006 faa5 	bl	800c3b2 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8005e68:	4b2d      	ldr	r3, [pc, #180]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e6a:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8005e6e:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8005e72:	1a88      	subs	r0, r1, r2
 8005e74:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	db17      	blt.n	8005eac <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	1e59      	subs	r1, r3, #1
 8005e80:	b2c9      	uxtb	r1, r1
 8005e82:	482c      	ldr	r0, [pc, #176]	; (8005f34 <SX1276OnDio1Irq+0x148>)
 8005e84:	4410      	add	r0, r2
 8005e86:	f006 fa94 	bl	800c3b2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8005e8a:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005e8c:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8005e90:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 8005e94:	440b      	add	r3, r1
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8005e9c:	e7ae      	b.n	8005dfc <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005e9e:	2032      	movs	r0, #50	; 0x32
 8005ea0:	f006 fad3 	bl	800c44a <SX1276Read>
 8005ea4:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005ea6:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8005eaa:	e7dd      	b.n	8005e68 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005eac:	1a89      	subs	r1, r1, r2
 8005eae:	b2c9      	uxtb	r1, r1
 8005eb0:	4820      	ldr	r0, [pc, #128]	; (8005f34 <SX1276OnDio1Irq+0x148>)
 8005eb2:	4410      	add	r0, r2
 8005eb4:	f006 fa7d 	bl	800c3b2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005eb8:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005eba:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8005ebe:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8005ec2:	e79b      	b.n	8005dfc <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 8005ec4:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005ec6:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d196      	bne.n	8005dfc <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 8005ece:	f7ff fd5b 	bl	8005988 <SX1276GetDio1PinState>
 8005ed2:	2801      	cmp	r0, #1
 8005ed4:	d092      	beq.n	8005dfc <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005ed6:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005ed8:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 8005edc:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 8005ee0:	eba0 0c02 	sub.w	ip, r0, r2
 8005ee4:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 8005ee8:	458c      	cmp	ip, r1
 8005eea:	dd0c      	ble.n	8005f06 <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8005eec:	4811      	ldr	r0, [pc, #68]	; (8005f34 <SX1276OnDio1Irq+0x148>)
 8005eee:	4410      	add	r0, r2
 8005ef0:	f006 fa66 	bl	800c3c0 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005ef6:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 8005efa:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 8005efe:	440a      	add	r2, r1
 8005f00:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8005f04:	e77a      	b.n	8005dfc <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005f06:	1a81      	subs	r1, r0, r2
 8005f08:	b2c9      	uxtb	r1, r1
 8005f0a:	480a      	ldr	r0, [pc, #40]	; (8005f34 <SX1276OnDio1Irq+0x148>)
 8005f0c:	4410      	add	r0, r2
 8005f0e:	f006 fa57 	bl	800c3c0 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <SX1276OnDio1Irq+0x134>)
 8005f14:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8005f18:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8005f1c:	e76e      	b.n	8005dfc <SX1276OnDio1Irq+0x10>
 8005f1e:	bf00      	nop
 8005f20:	20000c98 	.word	0x20000c98
 8005f24:	20000b80 	.word	0x20000b80
 8005f28:	20000b64 	.word	0x20000b64
 8005f2c:	20000b68 	.word	0x20000b68
 8005f30:	20000dae 	.word	0x20000dae
 8005f34:	20000b98 	.word	0x20000b98

08005f38 <SX1276OnDio0Irq>:
{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8005f42:	4bb0      	ldr	r3, [pc, #704]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005f44:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d004      	beq.n	8005f56 <SX1276OnDio0Irq+0x1e>
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f000 813c 	beq.w	80061ca <SX1276OnDio0Irq+0x292>
}
 8005f52:	b002      	add	sp, #8
 8005f54:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 8005f56:	4bab      	ldr	r3, [pc, #684]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005f58:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8005f5c:	b343      	cbz	r3, 8005fb0 <SX1276OnDio0Irq+0x78>
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d1f7      	bne.n	8005f52 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8005f62:	2140      	movs	r1, #64	; 0x40
 8005f64:	2012      	movs	r0, #18
 8005f66:	f006 fa64 	bl	800c432 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8005f6a:	2012      	movs	r0, #18
 8005f6c:	f006 fa6d 	bl	800c44a <SX1276Read>
 8005f70:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8005f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005f78:	f013 0f20 	tst.w	r3, #32
 8005f7c:	f000 80bd 	beq.w	80060fa <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8005f80:	2120      	movs	r1, #32
 8005f82:	2012      	movs	r0, #18
 8005f84:	f006 fa55 	bl	800c432 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8005f88:	4b9e      	ldr	r3, [pc, #632]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005f8a:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8005f8e:	b91b      	cbnz	r3, 8005f98 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8005f90:	4b9c      	ldr	r3, [pc, #624]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8005f98:	489b      	ldr	r0, [pc, #620]	; (8006208 <SX1276OnDio0Irq+0x2d0>)
 8005f9a:	f7ff fdbd 	bl	8005b18 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005f9e:	4b9b      	ldr	r3, [pc, #620]	; (800620c <SX1276OnDio0Irq+0x2d4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0d5      	beq.n	8005f52 <SX1276OnDio0Irq+0x1a>
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0d2      	beq.n	8005f52 <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 8005fac:	4798      	blx	r3
 8005fae:	e7d0      	b.n	8005f52 <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005fb0:	4b94      	ldr	r3, [pc, #592]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005fb2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005fb6:	bb0b      	cbnz	r3, 8005ffc <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005fb8:	4b92      	ldr	r3, [pc, #584]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005fba:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d15e      	bne.n	8006080 <SX1276OnDio0Irq+0x148>
 8005fc2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d15a      	bne.n	8006080 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005fca:	4b8e      	ldr	r3, [pc, #568]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005fcc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d14e      	bne.n	8006072 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	488e      	ldr	r0, [pc, #568]	; (8006210 <SX1276OnDio0Irq+0x2d8>)
 8005fd8:	f006 f9eb 	bl	800c3b2 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005fdc:	4c89      	ldr	r4, [pc, #548]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8005fde:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8005fe2:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8005fe6:	1ac9      	subs	r1, r1, r3
 8005fe8:	b2c9      	uxtb	r1, r1
 8005fea:	488a      	ldr	r0, [pc, #552]	; (8006214 <SX1276OnDio0Irq+0x2dc>)
 8005fec:	4418      	add	r0, r3
 8005fee:	f006 f9e0 	bl	800c3b2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005ff2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8005ff6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 8005ffa:	e04e      	b.n	800609a <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8005ffc:	203f      	movs	r0, #63	; 0x3f
 8005ffe:	f006 fa24 	bl	800c44a <SX1276Read>
 8006002:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8006006:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800600a:	f013 0f02 	tst.w	r3, #2
 800600e:	d1d3      	bne.n	8005fb8 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006010:	210b      	movs	r1, #11
 8006012:	203e      	movs	r0, #62	; 0x3e
 8006014:	f006 fa0d 	bl	800c432 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006018:	2110      	movs	r1, #16
 800601a:	203f      	movs	r0, #63	; 0x3f
 800601c:	f006 fa09 	bl	800c432 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006020:	4879      	ldr	r0, [pc, #484]	; (8006208 <SX1276OnDio0Irq+0x2d0>)
 8006022:	f7ff fd79 	bl	8005b18 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8006026:	4b77      	ldr	r3, [pc, #476]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8006028:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800602c:	b9bb      	cbnz	r3, 800605e <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 800602e:	487a      	ldr	r0, [pc, #488]	; (8006218 <SX1276OnDio0Irq+0x2e0>)
 8006030:	f7ff fd72 	bl	8005b18 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8006034:	4b73      	ldr	r3, [pc, #460]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8006036:	2200      	movs	r2, #0
 8006038:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800603c:	4b73      	ldr	r3, [pc, #460]	; (800620c <SX1276OnDio0Irq+0x2d4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	b113      	cbz	r3, 8006048 <SX1276OnDio0Irq+0x110>
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	b103      	cbz	r3, 8006048 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 8006046:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006048:	4b6e      	ldr	r3, [pc, #440]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 800604a:	2200      	movs	r2, #0
 800604c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006050:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006054:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006058:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 800605c:	e779      	b.n	8005f52 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800605e:	200d      	movs	r0, #13
 8006060:	f006 f9f3 	bl	800c44a <SX1276Read>
 8006064:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006068:	b2c9      	uxtb	r1, r1
 800606a:	200d      	movs	r0, #13
 800606c:	f006 f9e1 	bl	800c432 <SX1276Write>
 8006070:	e7e4      	b.n	800603c <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006072:	2032      	movs	r0, #50	; 0x32
 8006074:	f006 f9e9 	bl	800c44a <SX1276Read>
 8006078:	4b62      	ldr	r3, [pc, #392]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 800607a:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 800607e:	e7ad      	b.n	8005fdc <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006080:	4c60      	ldr	r4, [pc, #384]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8006082:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8006086:	1ac9      	subs	r1, r1, r3
 8006088:	b2c9      	uxtb	r1, r1
 800608a:	4862      	ldr	r0, [pc, #392]	; (8006214 <SX1276OnDio0Irq+0x2dc>)
 800608c:	4418      	add	r0, r3
 800608e:	f006 f990 	bl	800c3b2 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006092:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 8006096:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800609a:	485b      	ldr	r0, [pc, #364]	; (8006208 <SX1276OnDio0Irq+0x2d0>)
 800609c:	f7ff fd3c 	bl	8005b18 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80060a0:	4b58      	ldr	r3, [pc, #352]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80060a2:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80060a6:	b9f3      	cbnz	r3, 80060e6 <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 80060a8:	4b56      	ldr	r3, [pc, #344]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80060b0:	4859      	ldr	r0, [pc, #356]	; (8006218 <SX1276OnDio0Irq+0x2e0>)
 80060b2:	f7ff fd31 	bl	8005b18 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80060b6:	4b55      	ldr	r3, [pc, #340]	; (800620c <SX1276OnDio0Irq+0x2d4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	b14b      	cbz	r3, 80060d0 <SX1276OnDio0Irq+0x198>
 80060bc:	689c      	ldr	r4, [r3, #8]
 80060be:	b13c      	cbz	r4, 80060d0 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80060c0:	4950      	ldr	r1, [pc, #320]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80060c2:	2300      	movs	r3, #0
 80060c4:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80060c8:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80060cc:	4851      	ldr	r0, [pc, #324]	; (8006214 <SX1276OnDio0Irq+0x2dc>)
 80060ce:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80060d0:	4b4c      	ldr	r3, [pc, #304]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80060d8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80060dc:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80060e0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80060e4:	e735      	b.n	8005f52 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80060e6:	200d      	movs	r0, #13
 80060e8:	f006 f9af 	bl	800c44a <SX1276Read>
 80060ec:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80060f0:	b2c9      	uxtb	r1, r1
 80060f2:	200d      	movs	r0, #13
 80060f4:	f006 f99d 	bl	800c432 <SX1276Write>
 80060f8:	e7dd      	b.n	80060b6 <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80060fa:	2019      	movs	r0, #25
 80060fc:	f006 f9a5 	bl	800c44a <SX1276Read>
 8006100:	b243      	sxtb	r3, r0
 8006102:	3302      	adds	r3, #2
 8006104:	109b      	asrs	r3, r3, #2
 8006106:	4c3f      	ldr	r4, [pc, #252]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8006108:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800610c:	201a      	movs	r0, #26
 800610e:	f006 f99c 	bl	800c44a <SX1276Read>
 8006112:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8006114:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 8006118:	2a00      	cmp	r2, #0
 800611a:	db39      	blt.n	8006190 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800611c:	4b39      	ldr	r3, [pc, #228]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 800611e:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006122:	4b3e      	ldr	r3, [pc, #248]	; (800621c <SX1276OnDio0Irq+0x2e4>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d949      	bls.n	80061bc <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006128:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800612c:	389d      	subs	r0, #157	; 0x9d
 800612e:	4b35      	ldr	r3, [pc, #212]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 8006130:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8006134:	2013      	movs	r0, #19
 8006136:	f006 f988 	bl	800c44a <SX1276Read>
 800613a:	4c32      	ldr	r4, [pc, #200]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 800613c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006140:	2010      	movs	r0, #16
 8006142:	f006 f982 	bl	800c44a <SX1276Read>
 8006146:	4601      	mov	r1, r0
 8006148:	200d      	movs	r0, #13
 800614a:	f006 f972 	bl	800c432 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800614e:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8006152:	4830      	ldr	r0, [pc, #192]	; (8006214 <SX1276OnDio0Irq+0x2dc>)
 8006154:	f006 f92d 	bl	800c3b2 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006158:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 800615c:	b913      	cbnz	r3, 8006164 <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 800615e:	2200      	movs	r2, #0
 8006160:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8006164:	4828      	ldr	r0, [pc, #160]	; (8006208 <SX1276OnDio0Irq+0x2d0>)
 8006166:	f7ff fcd7 	bl	8005b18 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800616a:	4b28      	ldr	r3, [pc, #160]	; (800620c <SX1276OnDio0Irq+0x2d4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f43f aeef 	beq.w	8005f52 <SX1276OnDio0Irq+0x1a>
 8006174:	689c      	ldr	r4, [r3, #8]
 8006176:	2c00      	cmp	r4, #0
 8006178:	f43f aeeb 	beq.w	8005f52 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800617c:	4921      	ldr	r1, [pc, #132]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 800617e:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8006182:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 8006186:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800618a:	4822      	ldr	r0, [pc, #136]	; (8006214 <SX1276OnDio0Irq+0x2dc>)
 800618c:	47a0      	blx	r4
 800618e:	e6e0      	b.n	8005f52 <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006190:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <SX1276OnDio0Irq+0x2e4>)
 8006196:	4299      	cmp	r1, r3
 8006198:	d907      	bls.n	80061aa <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800619a:	eb00 1020 	add.w	r0, r0, r0, asr #4
 800619e:	b203      	sxth	r3, r0
 80061a0:	4413      	add	r3, r2
 80061a2:	3b9d      	subs	r3, #157	; 0x9d
 80061a4:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 80061a8:	e7c4      	b.n	8006134 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80061aa:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80061ae:	b203      	sxth	r3, r0
 80061b0:	4413      	add	r3, r2
 80061b2:	3ba4      	subs	r3, #164	; 0xa4
 80061b4:	4a13      	ldr	r2, [pc, #76]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80061b6:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80061ba:	e7bb      	b.n	8006134 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80061bc:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80061c0:	38a4      	subs	r0, #164	; 0xa4
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80061c4:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80061c8:	e7b4      	b.n	8006134 <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 80061ca:	4815      	ldr	r0, [pc, #84]	; (8006220 <SX1276OnDio0Irq+0x2e8>)
 80061cc:	f7ff fca4 	bl	8005b18 <TimerStop>
            switch( SX1276.Settings.Modem )
 80061d0:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80061d2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d00e      	beq.n	80061f8 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <SX1276OnDio0Irq+0x2cc>)
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <SX1276OnDio0Irq+0x2d4>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f43f aeb3 	beq.w	8005f52 <SX1276OnDio0Irq+0x1a>
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f43f aeaf 	beq.w	8005f52 <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 80061f4:	4798      	blx	r3
}
 80061f6:	e6ac      	b.n	8005f52 <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80061f8:	2108      	movs	r1, #8
 80061fa:	2012      	movs	r0, #18
 80061fc:	f006 f919 	bl	800c432 <SX1276Write>
 8006200:	e7eb      	b.n	80061da <SX1276OnDio0Irq+0x2a2>
 8006202:	bf00      	nop
 8006204:	20000c98 	.word	0x20000c98
 8006208:	20000b80 	.word	0x20000b80
 800620c:	20000b64 	.word	0x20000b64
 8006210:	20000dae 	.word	0x20000dae
 8006214:	20000b98 	.word	0x20000b98
 8006218:	20000b68 	.word	0x20000b68
 800621c:	1f4add40 	.word	0x1f4add40
 8006220:	20000ddc 	.word	0x20000ddc

08006224 <RxChainCalibration>:
{
 8006224:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8006226:	2009      	movs	r0, #9
 8006228:	f006 f90f 	bl	800c44a <SX1276Read>
 800622c:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800622e:	2006      	movs	r0, #6
 8006230:	f006 f90b 	bl	800c44a <SX1276Read>
 8006234:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006236:	2007      	movs	r0, #7
 8006238:	f006 f907 	bl	800c44a <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800623c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8006240:	2008      	movs	r0, #8
 8006242:	f006 f902 	bl	800c44a <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006246:	4320      	orrs	r0, r4
 8006248:	f006 f846 	bl	800c2d8 <SX1276ConvertPllStepToFreqInHz>
 800624c:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 800624e:	2100      	movs	r1, #0
 8006250:	2009      	movs	r0, #9
 8006252:	f006 f8ee 	bl	800c432 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006256:	203b      	movs	r0, #59	; 0x3b
 8006258:	f006 f8f7 	bl	800c44a <SX1276Read>
 800625c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006260:	b2c9      	uxtb	r1, r1
 8006262:	203b      	movs	r0, #59	; 0x3b
 8006264:	f006 f8e5 	bl	800c432 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006268:	203b      	movs	r0, #59	; 0x3b
 800626a:	f006 f8ee 	bl	800c44a <SX1276Read>
 800626e:	f010 0f20 	tst.w	r0, #32
 8006272:	d1f9      	bne.n	8006268 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 8006274:	480c      	ldr	r0, [pc, #48]	; (80062a8 <RxChainCalibration+0x84>)
 8006276:	f7ff fcf5 	bl	8005c64 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800627a:	203b      	movs	r0, #59	; 0x3b
 800627c:	f006 f8e5 	bl	800c44a <SX1276Read>
 8006280:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006284:	b2c9      	uxtb	r1, r1
 8006286:	203b      	movs	r0, #59	; 0x3b
 8006288:	f006 f8d3 	bl	800c432 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800628c:	203b      	movs	r0, #59	; 0x3b
 800628e:	f006 f8dc 	bl	800c44a <SX1276Read>
 8006292:	f010 0f20 	tst.w	r0, #32
 8006296:	d1f9      	bne.n	800628c <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8006298:	4629      	mov	r1, r5
 800629a:	2009      	movs	r0, #9
 800629c:	f006 f8c9 	bl	800c432 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7ff fcdf 	bl	8005c64 <SX1276SetChannel>
}
 80062a6:	bd38      	pop	{r3, r4, r5, pc}
 80062a8:	33bca100 	.word	0x33bca100

080062ac <SX1276SetSleep>:
{
 80062ac:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80062ae:	480a      	ldr	r0, [pc, #40]	; (80062d8 <SX1276SetSleep+0x2c>)
 80062b0:	f7ff fc32 	bl	8005b18 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80062b4:	4809      	ldr	r0, [pc, #36]	; (80062dc <SX1276SetSleep+0x30>)
 80062b6:	f7ff fc2f 	bl	8005b18 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80062ba:	4809      	ldr	r0, [pc, #36]	; (80062e0 <SX1276SetSleep+0x34>)
 80062bc:	f7ff fc2c 	bl	8005b18 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80062c0:	2000      	movs	r0, #0
 80062c2:	f006 f8ce 	bl	800c462 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80062c6:	2000      	movs	r0, #0
 80062c8:	f005 ff9f 	bl	800c20a <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <SX1276SetSleep+0x38>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80062d4:	bd08      	pop	{r3, pc}
 80062d6:	bf00      	nop
 80062d8:	20000b80 	.word	0x20000b80
 80062dc:	20000ddc 	.word	0x20000ddc
 80062e0:	20000b68 	.word	0x20000b68
 80062e4:	20000c98 	.word	0x20000c98

080062e8 <SX1276SetStby>:
{
 80062e8:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80062ea:	4808      	ldr	r0, [pc, #32]	; (800630c <SX1276SetStby+0x24>)
 80062ec:	f7ff fc14 	bl	8005b18 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80062f0:	4807      	ldr	r0, [pc, #28]	; (8006310 <SX1276SetStby+0x28>)
 80062f2:	f7ff fc11 	bl	8005b18 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80062f6:	4807      	ldr	r0, [pc, #28]	; (8006314 <SX1276SetStby+0x2c>)
 80062f8:	f7ff fc0e 	bl	8005b18 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80062fc:	2001      	movs	r0, #1
 80062fe:	f006 f8b0 	bl	800c462 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <SX1276SetStby+0x30>)
 8006304:	2200      	movs	r2, #0
 8006306:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800630a:	bd08      	pop	{r3, pc}
 800630c:	20000b80 	.word	0x20000b80
 8006310:	20000ddc 	.word	0x20000ddc
 8006314:	20000b68 	.word	0x20000b68
 8006318:	20000c98 	.word	0x20000c98

0800631c <SX1276SetTx>:
{
 800631c:	b510      	push	{r4, lr}
 800631e:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8006320:	4829      	ldr	r0, [pc, #164]	; (80063c8 <SX1276SetTx+0xac>)
 8006322:	f7ff fbf9 	bl	8005b18 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006326:	4621      	mov	r1, r4
 8006328:	4828      	ldr	r0, [pc, #160]	; (80063cc <SX1276SetTx+0xb0>)
 800632a:	f005 ffaa 	bl	800c282 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <SX1276SetTx+0xb4>)
 8006330:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006334:	b163      	cbz	r3, 8006350 <SX1276SetTx+0x34>
 8006336:	2b01      	cmp	r3, #1
 8006338:	d023      	beq.n	8006382 <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 800633a:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <SX1276SetTx+0xb4>)
 800633c:	2202      	movs	r2, #2
 800633e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8006342:	4822      	ldr	r0, [pc, #136]	; (80063cc <SX1276SetTx+0xb0>)
 8006344:	f7ff fb6e 	bl	8005a24 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006348:	2003      	movs	r0, #3
 800634a:	f006 f88a 	bl	800c462 <SX1276SetOpMode>
}
 800634e:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006350:	2040      	movs	r0, #64	; 0x40
 8006352:	f006 f87a 	bl	800c44a <SX1276Read>
 8006356:	f000 0103 	and.w	r1, r0, #3
 800635a:	2040      	movs	r0, #64	; 0x40
 800635c:	f006 f869 	bl	800c432 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006360:	2041      	movs	r0, #65	; 0x41
 8006362:	f006 f872 	bl	800c44a <SX1276Read>
 8006366:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 800636a:	2041      	movs	r0, #65	; 0x41
 800636c:	f006 f861 	bl	800c432 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006370:	2035      	movs	r0, #53	; 0x35
 8006372:	f006 f86a 	bl	800c44a <SX1276Read>
 8006376:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <SX1276SetTx+0xb4>)
 800637c:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8006380:	e7db      	b.n	800633a <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <SX1276SetTx+0xb4>)
 8006384:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006388:	b173      	cbz	r3, 80063a8 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800638a:	21f5      	movs	r1, #245	; 0xf5
 800638c:	2011      	movs	r0, #17
 800638e:	f006 f850 	bl	800c432 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006392:	2040      	movs	r0, #64	; 0x40
 8006394:	f006 f859 	bl	800c44a <SX1276Read>
 8006398:	f000 0133 	and.w	r1, r0, #51	; 0x33
 800639c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80063a0:	2040      	movs	r0, #64	; 0x40
 80063a2:	f006 f846 	bl	800c432 <SX1276Write>
 80063a6:	e7c8      	b.n	800633a <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80063a8:	21f7      	movs	r1, #247	; 0xf7
 80063aa:	2011      	movs	r0, #17
 80063ac:	f006 f841 	bl	800c432 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80063b0:	2040      	movs	r0, #64	; 0x40
 80063b2:	f006 f84a 	bl	800c44a <SX1276Read>
 80063b6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80063ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80063be:	2040      	movs	r0, #64	; 0x40
 80063c0:	f006 f837 	bl	800c432 <SX1276Write>
 80063c4:	e7b9      	b.n	800633a <SX1276SetTx+0x1e>
 80063c6:	bf00      	nop
 80063c8:	20000b80 	.word	0x20000b80
 80063cc:	20000ddc 	.word	0x20000ddc
 80063d0:	20000c98 	.word	0x20000c98

080063d4 <SX1276Send>:
{
 80063d4:	b530      	push	{r4, r5, lr}
 80063d6:	b083      	sub	sp, #12
 80063d8:	4604      	mov	r4, r0
 80063da:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 80063de:	4b44      	ldr	r3, [pc, #272]	; (80064f0 <SX1276Send+0x11c>)
 80063e0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80063e4:	b133      	cbz	r3, 80063f4 <SX1276Send+0x20>
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d03a      	beq.n	8006460 <SX1276Send+0x8c>
 80063ea:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 80063ec:	f7ff ff96 	bl	800631c <SX1276SetTx>
}
 80063f0:	b003      	add	sp, #12
 80063f2:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80063f4:	4b3e      	ldr	r3, [pc, #248]	; (80064f0 <SX1276Send+0x11c>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 80063fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006400:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8006404:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006408:	b9eb      	cbnz	r3, 8006446 <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800640a:	2101      	movs	r1, #1
 800640c:	f10d 0007 	add.w	r0, sp, #7
 8006410:	f005 ffd6 	bl	800c3c0 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006414:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006418:	1e53      	subs	r3, r2, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b3f      	cmp	r3, #63	; 0x3f
 800641e:	d816      	bhi.n	800644e <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <SX1276Send+0x11c>)
 8006422:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006426:	4d32      	ldr	r5, [pc, #200]	; (80064f0 <SX1276Send+0x11c>)
 8006428:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 800642c:	4620      	mov	r0, r4
 800642e:	f005 ffc7 	bl	800c3c0 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006432:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8006436:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 800643a:	4413      	add	r3, r2
 800643c:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006440:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8006444:	e7d2      	b.n	80063ec <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006446:	2032      	movs	r0, #50	; 0x32
 8006448:	f005 fff3 	bl	800c432 <SX1276Write>
 800644c:	e7e2      	b.n	8006414 <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 800644e:	4621      	mov	r1, r4
 8006450:	4828      	ldr	r0, [pc, #160]	; (80064f4 <SX1276Send+0x120>)
 8006452:	f005 feec 	bl	800c22e <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006456:	4b26      	ldr	r3, [pc, #152]	; (80064f0 <SX1276Send+0x11c>)
 8006458:	2220      	movs	r2, #32
 800645a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 800645e:	e7e2      	b.n	8006426 <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006460:	4b23      	ldr	r3, [pc, #140]	; (80064f0 <SX1276Send+0x11c>)
 8006462:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006466:	b353      	cbz	r3, 80064be <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006468:	2033      	movs	r0, #51	; 0x33
 800646a:	f005 ffee 	bl	800c44a <SX1276Read>
 800646e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8006472:	2033      	movs	r0, #51	; 0x33
 8006474:	f005 ffdd 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006478:	2119      	movs	r1, #25
 800647a:	203b      	movs	r0, #59	; 0x3b
 800647c:	f005 ffd9 	bl	800c432 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006480:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006484:	4b1a      	ldr	r3, [pc, #104]	; (80064f0 <SX1276Send+0x11c>)
 8006486:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800648a:	2022      	movs	r0, #34	; 0x22
 800648c:	f005 ffd1 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006490:	2100      	movs	r1, #0
 8006492:	200e      	movs	r0, #14
 8006494:	f005 ffcd 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006498:	2100      	movs	r1, #0
 800649a:	200d      	movs	r0, #13
 800649c:	f005 ffc9 	bl	800c432 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80064a0:	2001      	movs	r0, #1
 80064a2:	f005 ffd2 	bl	800c44a <SX1276Read>
 80064a6:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 80064aa:	d01a      	beq.n	80064e2 <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 80064ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80064b0:	4620      	mov	r0, r4
 80064b2:	f005 ff85 	bl	800c3c0 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <SX1276Send+0x11c>)
 80064b8:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 80064bc:	e796      	b.n	80063ec <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80064be:	2033      	movs	r0, #51	; 0x33
 80064c0:	f005 ffc3 	bl	800c44a <SX1276Read>
 80064c4:	b241      	sxtb	r1, r0
 80064c6:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80064ca:	f041 0101 	orr.w	r1, r1, #1
 80064ce:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 80064d2:	2033      	movs	r0, #51	; 0x33
 80064d4:	f005 ffad 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80064d8:	211d      	movs	r1, #29
 80064da:	203b      	movs	r0, #59	; 0x3b
 80064dc:	f005 ffa9 	bl	800c432 <SX1276Write>
 80064e0:	e7ce      	b.n	8006480 <SX1276Send+0xac>
                SX1276SetStby( );
 80064e2:	f7ff ff01 	bl	80062e8 <SX1276SetStby>
                DelayMs( 1 );
 80064e6:	2001      	movs	r0, #1
 80064e8:	f005 fef2 	bl	800c2d0 <DelayMs>
 80064ec:	e7de      	b.n	80064ac <SX1276Send+0xd8>
 80064ee:	bf00      	nop
 80064f0:	20000c98 	.word	0x20000c98
 80064f4:	20000b98 	.word	0x20000b98

080064f8 <SX1276SetRx>:
{
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 80064fc:	489d      	ldr	r0, [pc, #628]	; (8006774 <SX1276SetRx+0x27c>)
 80064fe:	f7ff fb0b 	bl	8005b18 <TimerStop>
    switch( SX1276.Settings.Modem )
 8006502:	4b9d      	ldr	r3, [pc, #628]	; (8006778 <SX1276SetRx+0x280>)
 8006504:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006508:	b1e3      	cbz	r3, 8006544 <SX1276SetRx+0x4c>
 800650a:	2b01      	cmp	r3, #1
 800650c:	d045      	beq.n	800659a <SX1276SetRx+0xa2>
 800650e:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8006510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006514:	2100      	movs	r1, #0
 8006516:	4899      	ldr	r0, [pc, #612]	; (800677c <SX1276SetRx+0x284>)
 8006518:	f006 fcf8 	bl	800cf0c <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800651c:	4b96      	ldr	r3, [pc, #600]	; (8006778 <SX1276SetRx+0x280>)
 800651e:	2201      	movs	r2, #1
 8006520:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8006524:	2c00      	cmp	r4, #0
 8006526:	f040 8107 	bne.w	8006738 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800652a:	4b93      	ldr	r3, [pc, #588]	; (8006778 <SX1276SetRx+0x280>)
 800652c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 810a 	beq.w	800674a <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8006536:	2e00      	cmp	r6, #0
 8006538:	f000 8118 	beq.w	800676c <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800653c:	2005      	movs	r0, #5
 800653e:	f005 ff90 	bl	800c462 <SX1276SetOpMode>
}
 8006542:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8006544:	4d8c      	ldr	r5, [pc, #560]	; (8006778 <SX1276SetRx+0x280>)
 8006546:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800654a:	2040      	movs	r0, #64	; 0x40
 800654c:	f005 ff7d 	bl	800c44a <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006550:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006554:	f041 010c 	orr.w	r1, r1, #12
 8006558:	2040      	movs	r0, #64	; 0x40
 800655a:	f005 ff6a 	bl	800c432 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800655e:	2041      	movs	r0, #65	; 0x41
 8006560:	f005 ff73 	bl	800c44a <SX1276Read>
 8006564:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8006568:	b2c9      	uxtb	r1, r1
 800656a:	2041      	movs	r0, #65	; 0x41
 800656c:	f005 ff61 	bl	800c432 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006570:	2035      	movs	r0, #53	; 0x35
 8006572:	f005 ff6a 	bl	800c44a <SX1276Read>
 8006576:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800657a:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800657e:	211e      	movs	r1, #30
 8006580:	200d      	movs	r0, #13
 8006582:	f005 ff56 	bl	800c432 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006586:	2300      	movs	r3, #0
 8006588:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800658c:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006590:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006594:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8006598:	e7ba      	b.n	8006510 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800659a:	4b77      	ldr	r3, [pc, #476]	; (8006778 <SX1276SetRx+0x280>)
 800659c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80065a0:	b353      	cbz	r3, 80065f8 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80065a2:	2033      	movs	r0, #51	; 0x33
 80065a4:	f005 ff51 	bl	800c44a <SX1276Read>
 80065a8:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 80065ac:	b2c9      	uxtb	r1, r1
 80065ae:	2033      	movs	r0, #51	; 0x33
 80065b0:	f005 ff3f 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80065b4:	2119      	movs	r1, #25
 80065b6:	203b      	movs	r0, #59	; 0x3b
 80065b8:	f005 ff3b 	bl	800c432 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80065bc:	4b6e      	ldr	r3, [pc, #440]	; (8006778 <SX1276SetRx+0x280>)
 80065be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	f200 8087 	bhi.w	80066d6 <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80065c8:	2031      	movs	r0, #49	; 0x31
 80065ca:	f005 ff3e 	bl	800c44a <SX1276Read>
 80065ce:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80065d2:	2031      	movs	r0, #49	; 0x31
 80065d4:	f005 ff2d 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80065d8:	2100      	movs	r1, #0
 80065da:	2030      	movs	r0, #48	; 0x30
 80065dc:	f005 ff29 	bl	800c432 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80065e0:	4b65      	ldr	r3, [pc, #404]	; (8006778 <SX1276SetRx+0x280>)
 80065e2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d87e      	bhi.n	80066e8 <SX1276SetRx+0x1f0>
 80065ea:	e8df f003 	tbb	[pc, r3]
 80065ee:	2417      	.short	0x2417
 80065f0:	584b3e31 	.word	0x584b3e31
 80065f4:	6a65      	.short	0x6a65
 80065f6:	6f          	.byte	0x6f
 80065f7:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80065f8:	2033      	movs	r0, #51	; 0x33
 80065fa:	f005 ff26 	bl	800c44a <SX1276Read>
 80065fe:	b241      	sxtb	r1, r0
 8006600:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8006604:	f041 0101 	orr.w	r1, r1, #1
 8006608:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 800660c:	2033      	movs	r0, #51	; 0x33
 800660e:	f005 ff10 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006612:	211d      	movs	r1, #29
 8006614:	203b      	movs	r0, #59	; 0x3b
 8006616:	f005 ff0c 	bl	800c432 <SX1276Write>
 800661a:	e7cf      	b.n	80065bc <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800661c:	2148      	movs	r1, #72	; 0x48
 800661e:	202f      	movs	r0, #47	; 0x2f
 8006620:	f005 ff07 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006624:	4b54      	ldr	r3, [pc, #336]	; (8006778 <SX1276SetRx+0x280>)
 8006626:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 800662a:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 800662e:	3002      	adds	r0, #2
 8006630:	f7ff fb18 	bl	8005c64 <SX1276SetChannel>
                    break;
 8006634:	e058      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006636:	2144      	movs	r1, #68	; 0x44
 8006638:	202f      	movs	r0, #47	; 0x2f
 800663a:	f005 fefa 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800663e:	4b4e      	ldr	r3, [pc, #312]	; (8006778 <SX1276SetRx+0x280>)
 8006640:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006644:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8006648:	3034      	adds	r0, #52	; 0x34
 800664a:	f7ff fb0b 	bl	8005c64 <SX1276SetChannel>
                    break;
 800664e:	e04b      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006650:	2144      	movs	r1, #68	; 0x44
 8006652:	202f      	movs	r0, #47	; 0x2f
 8006654:	f005 feed 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006658:	4b47      	ldr	r3, [pc, #284]	; (8006778 <SX1276SetRx+0x280>)
 800665a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 800665e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8006662:	3004      	adds	r0, #4
 8006664:	f7ff fafe 	bl	8005c64 <SX1276SetChannel>
                    break;
 8006668:	e03e      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800666a:	2144      	movs	r1, #68	; 0x44
 800666c:	202f      	movs	r0, #47	; 0x2f
 800666e:	f005 fee0 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <SX1276SetRx+0x280>)
 8006674:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006678:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 800667c:	305e      	adds	r0, #94	; 0x5e
 800667e:	f7ff faf1 	bl	8005c64 <SX1276SetChannel>
                    break;
 8006682:	e031      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006684:	2144      	movs	r1, #68	; 0x44
 8006686:	202f      	movs	r0, #47	; 0x2f
 8006688:	f005 fed3 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800668c:	4b3a      	ldr	r3, [pc, #232]	; (8006778 <SX1276SetRx+0x280>)
 800668e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006692:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8006696:	3012      	adds	r0, #18
 8006698:	f7ff fae4 	bl	8005c64 <SX1276SetChannel>
                    break;
 800669c:	e024      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800669e:	2144      	movs	r1, #68	; 0x44
 80066a0:	202f      	movs	r0, #47	; 0x2f
 80066a2:	f005 fec6 	bl	800c432 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <SX1276SetRx+0x280>)
 80066a8:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 80066ac:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 80066b0:	30c6      	adds	r0, #198	; 0xc6
 80066b2:	f7ff fad7 	bl	8005c64 <SX1276SetChannel>
                    break;
 80066b6:	e017      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80066b8:	2140      	movs	r1, #64	; 0x40
 80066ba:	202f      	movs	r0, #47	; 0x2f
 80066bc:	f005 feb9 	bl	800c432 <SX1276Write>
                    break;
 80066c0:	e012      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	202f      	movs	r0, #47	; 0x2f
 80066c6:	f005 feb4 	bl	800c432 <SX1276Write>
                    break;
 80066ca:	e00d      	b.n	80066e8 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	202f      	movs	r0, #47	; 0x2f
 80066d0:	f005 feaf 	bl	800c432 <SX1276Write>
                    break;
 80066d4:	e008      	b.n	80066e8 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80066d6:	2031      	movs	r0, #49	; 0x31
 80066d8:	f005 feb7 	bl	800c44a <SX1276Read>
 80066dc:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80066e0:	b2c9      	uxtb	r1, r1
 80066e2:	2031      	movs	r0, #49	; 0x31
 80066e4:	f005 fea5 	bl	800c432 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <SX1276SetRx+0x280>)
 80066ea:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80066ee:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80066f2:	b1a3      	cbz	r3, 800671e <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80066f4:	211d      	movs	r1, #29
 80066f6:	2011      	movs	r0, #17
 80066f8:	f005 fe9b 	bl	800c432 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80066fc:	2040      	movs	r0, #64	; 0x40
 80066fe:	f005 fea4 	bl	800c44a <SX1276Read>
 8006702:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8006706:	2040      	movs	r0, #64	; 0x40
 8006708:	f005 fe93 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800670c:	2100      	movs	r1, #0
 800670e:	200f      	movs	r0, #15
 8006710:	f005 fe8f 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006714:	2100      	movs	r1, #0
 8006716:	200d      	movs	r0, #13
 8006718:	f005 fe8b 	bl	800c432 <SX1276Write>
        break;
 800671c:	e6f8      	b.n	8006510 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800671e:	211f      	movs	r1, #31
 8006720:	2011      	movs	r0, #17
 8006722:	f005 fe86 	bl	800c432 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006726:	2040      	movs	r0, #64	; 0x40
 8006728:	f005 fe8f 	bl	800c44a <SX1276Read>
 800672c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8006730:	2040      	movs	r0, #64	; 0x40
 8006732:	f005 fe7e 	bl	800c432 <SX1276Write>
 8006736:	e7e9      	b.n	800670c <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006738:	4d11      	ldr	r5, [pc, #68]	; (8006780 <SX1276SetRx+0x288>)
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f005 fda0 	bl	800c282 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006742:	4628      	mov	r0, r5
 8006744:	f7ff f96e 	bl	8005a24 <TimerStart>
 8006748:	e6ef      	b.n	800652a <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800674a:	2005      	movs	r0, #5
 800674c:	f005 fe89 	bl	800c462 <SX1276SetOpMode>
        if( rxContinuous == false )
 8006750:	2e00      	cmp	r6, #0
 8006752:	f47f aef6 	bne.w	8006542 <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006756:	4c0b      	ldr	r4, [pc, #44]	; (8006784 <SX1276SetRx+0x28c>)
 8006758:	4b07      	ldr	r3, [pc, #28]	; (8006778 <SX1276SetRx+0x280>)
 800675a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800675e:	4620      	mov	r0, r4
 8006760:	f005 fd8f 	bl	800c282 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff f95d 	bl	8005a24 <TimerStart>
 800676a:	e6ea      	b.n	8006542 <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800676c:	2006      	movs	r0, #6
 800676e:	f005 fe78 	bl	800c462 <SX1276SetOpMode>
}
 8006772:	e6e6      	b.n	8006542 <SX1276SetRx+0x4a>
 8006774:	20000ddc 	.word	0x20000ddc
 8006778:	20000c98 	.word	0x20000c98
 800677c:	20000b98 	.word	0x20000b98
 8006780:	20000b80 	.word	0x20000b80
 8006784:	20000b68 	.word	0x20000b68

08006788 <SX1276ReadRssi>:
{
 8006788:	b508      	push	{r3, lr}
    switch( modem )
 800678a:	b120      	cbz	r0, 8006796 <SX1276ReadRssi+0xe>
 800678c:	2801      	cmp	r0, #1
 800678e:	d00a      	beq.n	80067a6 <SX1276ReadRssi+0x1e>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006794:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006796:	2011      	movs	r0, #17
 8006798:	f005 fe57 	bl	800c44a <SX1276Read>
 800679c:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80067a0:	4240      	negs	r0, r0
 80067a2:	b200      	sxth	r0, r0
        break;
 80067a4:	e7f6      	b.n	8006794 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <SX1276ReadRssi+0x48>)
 80067a8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <SX1276ReadRssi+0x4c>)
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d906      	bls.n	80067c0 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80067b2:	201b      	movs	r0, #27
 80067b4:	f005 fe49 	bl	800c44a <SX1276Read>
 80067b8:	b200      	sxth	r0, r0
 80067ba:	389d      	subs	r0, #157	; 0x9d
 80067bc:	b200      	sxth	r0, r0
 80067be:	e7e9      	b.n	8006794 <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 80067c0:	201b      	movs	r0, #27
 80067c2:	f005 fe42 	bl	800c44a <SX1276Read>
 80067c6:	b200      	sxth	r0, r0
 80067c8:	38a4      	subs	r0, #164	; 0xa4
 80067ca:	b200      	sxth	r0, r0
 80067cc:	e7e2      	b.n	8006794 <SX1276ReadRssi+0xc>
 80067ce:	bf00      	nop
 80067d0:	20000c98 	.word	0x20000c98
 80067d4:	1f4add40 	.word	0x1f4add40

080067d8 <SX1276SetModem>:
{
 80067d8:	b510      	push	{r4, lr}
 80067da:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80067dc:	2001      	movs	r0, #1
 80067de:	f005 fe34 	bl	800c44a <SX1276Read>
 80067e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80067e6:	d121      	bne.n	800682c <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <SX1276SetModem+0x88>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <SX1276SetModem+0x88>)
 80067f2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80067f6:	42a3      	cmp	r3, r4
 80067f8:	d017      	beq.n	800682a <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 80067fa:	4b19      	ldr	r3, [pc, #100]	; (8006860 <SX1276SetModem+0x88>)
 80067fc:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8006800:	2c01      	cmp	r4, #1
 8006802:	d018      	beq.n	8006836 <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006804:	2000      	movs	r0, #0
 8006806:	f005 fe2c 	bl	800c462 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800680a:	2001      	movs	r0, #1
 800680c:	f005 fe1d 	bl	800c44a <SX1276Read>
 8006810:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006814:	2001      	movs	r0, #1
 8006816:	f005 fe0c 	bl	800c432 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800681a:	2100      	movs	r1, #0
 800681c:	2040      	movs	r0, #64	; 0x40
 800681e:	f005 fe08 	bl	800c432 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006822:	2130      	movs	r1, #48	; 0x30
 8006824:	2041      	movs	r0, #65	; 0x41
 8006826:	f005 fe04 	bl	800c432 <SX1276Write>
}
 800682a:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 800682c:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <SX1276SetModem+0x88>)
 800682e:	2201      	movs	r2, #1
 8006830:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8006834:	e7dc      	b.n	80067f0 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006836:	2000      	movs	r0, #0
 8006838:	f005 fe13 	bl	800c462 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800683c:	2001      	movs	r0, #1
 800683e:	f005 fe04 	bl	800c44a <SX1276Read>
 8006842:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006846:	b2c9      	uxtb	r1, r1
 8006848:	2001      	movs	r0, #1
 800684a:	f005 fdf2 	bl	800c432 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800684e:	2100      	movs	r1, #0
 8006850:	2040      	movs	r0, #64	; 0x40
 8006852:	f005 fdee 	bl	800c432 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006856:	2100      	movs	r1, #0
 8006858:	2041      	movs	r0, #65	; 0x41
 800685a:	f005 fdea 	bl	800c432 <SX1276Write>
        break;
 800685e:	e7e4      	b.n	800682a <SX1276SetModem+0x52>
 8006860:	20000c98 	.word	0x20000c98

08006864 <SX1276Init>:
{
 8006864:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8006866:	4b19      	ldr	r3, [pc, #100]	; (80068cc <SX1276Init+0x68>)
 8006868:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800686a:	4c19      	ldr	r4, [pc, #100]	; (80068d0 <SX1276Init+0x6c>)
 800686c:	4621      	mov	r1, r4
 800686e:	4819      	ldr	r0, [pc, #100]	; (80068d4 <SX1276Init+0x70>)
 8006870:	f005 fcfe 	bl	800c270 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006874:	4621      	mov	r1, r4
 8006876:	4818      	ldr	r0, [pc, #96]	; (80068d8 <SX1276Init+0x74>)
 8006878:	f005 fcfa 	bl	800c270 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800687c:	4621      	mov	r1, r4
 800687e:	4817      	ldr	r0, [pc, #92]	; (80068dc <SX1276Init+0x78>)
 8006880:	f005 fcf6 	bl	800c270 <TimerInit>
    SX1276Reset( );
 8006884:	f7fe fde2 	bl	800544c <SX1276Reset>
    RxChainCalibration( );
 8006888:	f7ff fccc 	bl	8006224 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800688c:	2000      	movs	r0, #0
 800688e:	f005 fde8 	bl	800c462 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8006892:	4813      	ldr	r0, [pc, #76]	; (80068e0 <SX1276Init+0x7c>)
 8006894:	f7fe fe0e 	bl	80054b4 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006898:	2400      	movs	r4, #0
 800689a:	e00c      	b.n	80068b6 <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 800689c:	4a11      	ldr	r2, [pc, #68]	; (80068e4 <SX1276Init+0x80>)
 800689e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80068a2:	18d5      	adds	r5, r2, r3
 80068a4:	5cd0      	ldrb	r0, [r2, r3]
 80068a6:	f7ff ff97 	bl	80067d8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80068aa:	78a9      	ldrb	r1, [r5, #2]
 80068ac:	7868      	ldrb	r0, [r5, #1]
 80068ae:	f005 fdc0 	bl	800c432 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80068b2:	3401      	adds	r4, #1
 80068b4:	b2e4      	uxtb	r4, r4
 80068b6:	2c0f      	cmp	r4, #15
 80068b8:	d9f0      	bls.n	800689c <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 80068ba:	2000      	movs	r0, #0
 80068bc:	f7ff ff8c 	bl	80067d8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <SX1276Init+0x84>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	20000b64 	.word	0x20000b64
 80068d0:	08006ee5 	.word	0x08006ee5
 80068d4:	20000ddc 	.word	0x20000ddc
 80068d8:	20000b80 	.word	0x20000b80
 80068dc:	20000b68 	.word	0x20000b68
 80068e0:	20000090 	.word	0x20000090
 80068e4:	0800e7fc 	.word	0x0800e7fc
 80068e8:	20000c98 	.word	0x20000c98

080068ec <SX1276SetRxConfig>:
{
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	b085      	sub	sp, #20
 80068f2:	4604      	mov	r4, r0
 80068f4:	9101      	str	r1, [sp, #4]
 80068f6:	4615      	mov	r5, r2
 80068f8:	9303      	str	r3, [sp, #12]
 80068fa:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 80068fe:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8006902:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8006906:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 800690a:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 800690e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 8006912:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8006916:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8006918:	f7ff ff5e 	bl	80067d8 <SX1276SetModem>
    switch( modem )
 800691c:	b124      	cbz	r4, 8006928 <SX1276SetRxConfig+0x3c>
 800691e:	2c01      	cmp	r4, #1
 8006920:	d069      	beq.n	80069f6 <SX1276SetRxConfig+0x10a>
}
 8006922:	b005      	add	sp, #20
 8006924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006928:	4ba0      	ldr	r3, [pc, #640]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 800692a:	9c01      	ldr	r4, [sp, #4]
 800692c:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8006930:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8006934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006936:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 800693a:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800693e:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006942:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006946:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800694a:	9a02      	ldr	r2, [sp, #8]
 800694c:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006950:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8006954:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006958:	fb02 fa0a 	mul.w	sl, r2, sl
 800695c:	fbba f2f5 	udiv	r2, sl, r5
 8006960:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006964:	4b92      	ldr	r3, [pc, #584]	; (8006bb0 <SX1276SetRxConfig+0x2c4>)
 8006966:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800696a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800696e:	2002      	movs	r0, #2
 8006970:	f005 fd5f 	bl	800c432 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006974:	b2e9      	uxtb	r1, r5
 8006976:	2003      	movs	r0, #3
 8006978:	f005 fd5b 	bl	800c432 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800697c:	4620      	mov	r0, r4
 800697e:	f7ff f91f 	bl	8005bc0 <GetFskBandwidthRegValue>
 8006982:	4601      	mov	r1, r0
 8006984:	2012      	movs	r0, #18
 8006986:	f005 fd54 	bl	800c432 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800698a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800698c:	f7ff f918 	bl	8005bc0 <GetFskBandwidthRegValue>
 8006990:	4601      	mov	r1, r0
 8006992:	2013      	movs	r0, #19
 8006994:	f005 fd4d 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006998:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800699c:	2025      	movs	r0, #37	; 0x25
 800699e:	f005 fd48 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80069a2:	fa5f f188 	uxtb.w	r1, r8
 80069a6:	2026      	movs	r0, #38	; 0x26
 80069a8:	f005 fd43 	bl	800c432 <SX1276Write>
            if( fixLen == 1 )
 80069ac:	b1df      	cbz	r7, 80069e6 <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80069ae:	4649      	mov	r1, r9
 80069b0:	2032      	movs	r0, #50	; 0x32
 80069b2:	f005 fd3e 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80069b6:	2030      	movs	r0, #48	; 0x30
 80069b8:	f005 fd47 	bl	800c44a <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80069bc:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80069c0:	b1b7      	cbz	r7, 80069f0 <SX1276SetRxConfig+0x104>
 80069c2:	2300      	movs	r3, #0
 80069c4:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80069c6:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80069ca:	b2c9      	uxtb	r1, r1
 80069cc:	2030      	movs	r0, #48	; 0x30
 80069ce:	f005 fd30 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80069d2:	2031      	movs	r0, #49	; 0x31
 80069d4:	f005 fd39 	bl	800c44a <SX1276Read>
 80069d8:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80069dc:	b2c9      	uxtb	r1, r1
 80069de:	2031      	movs	r0, #49	; 0x31
 80069e0:	f005 fd27 	bl	800c432 <SX1276Write>
        break;
 80069e4:	e79d      	b.n	8006922 <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80069e6:	21ff      	movs	r1, #255	; 0xff
 80069e8:	2032      	movs	r0, #50	; 0x32
 80069ea:	f005 fd22 	bl	800c432 <SX1276Write>
 80069ee:	e7e2      	b.n	80069b6 <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80069f0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80069f4:	e7e6      	b.n	80069c4 <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d900      	bls.n	80069fe <SX1276SetRxConfig+0x112>
                while( 1 );
 80069fc:	e7fe      	b.n	80069fc <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 80069fe:	9c01      	ldr	r4, [sp, #4]
 8006a00:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006a02:	4b6a      	ldr	r3, [pc, #424]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006a04:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8006a08:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8006a0c:	9a03      	ldr	r2, [sp, #12]
 8006a0e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006a12:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006a16:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8006a1a:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006a1e:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006a22:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006a26:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006a2a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8006a2e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006a32:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006a36:	9a02      	ldr	r2, [sp, #8]
 8006a38:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	d803      	bhi.n	8006a48 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8006a40:	2d05      	cmp	r5, #5
 8006a42:	d802      	bhi.n	8006a4a <SX1276SetRxConfig+0x15e>
                datarate = 6;
 8006a44:	2506      	movs	r5, #6
 8006a46:	e000      	b.n	8006a4a <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8006a48:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006a4a:	2c07      	cmp	r4, #7
 8006a4c:	d063      	beq.n	8006b16 <SX1276SetRxConfig+0x22a>
 8006a4e:	2c08      	cmp	r4, #8
 8006a50:	d06a      	beq.n	8006b28 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006a52:	4b56      	ldr	r3, [pc, #344]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006a5a:	201d      	movs	r0, #29
 8006a5c:	f005 fcf5 	bl	800c44a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006a60:	0123      	lsls	r3, r4, #4
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	9b03      	ldr	r3, [sp, #12]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006a6c:	ea43 0107 	orr.w	r1, r3, r7
 8006a70:	201d      	movs	r0, #29
 8006a72:	f005 fcde 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006a76:	201e      	movs	r0, #30
 8006a78:	f005 fce7 	bl	800c44a <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8006a7c:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006a80:	012a      	lsls	r2, r5, #4
 8006a82:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8006a84:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006a86:	00b3      	lsls	r3, r6, #2
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8006a8c:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006a90:	4319      	orrs	r1, r3
 8006a92:	201e      	movs	r0, #30
 8006a94:	f005 fccd 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006a98:	2026      	movs	r0, #38	; 0x26
 8006a9a:	f005 fcd6 	bl	800c44a <SX1276Read>
 8006a9e:	b241      	sxtb	r1, r0
 8006aa0:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006aa4:	4b41      	ldr	r3, [pc, #260]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006aa6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006aaa:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006aae:	b2c9      	uxtb	r1, r1
 8006ab0:	2026      	movs	r0, #38	; 0x26
 8006ab2:	f005 fcbe 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8006ab6:	fa5f f18a 	uxtb.w	r1, sl
 8006aba:	201f      	movs	r0, #31
 8006abc:	f005 fcb9 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006ac0:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8006ac4:	2020      	movs	r0, #32
 8006ac6:	f005 fcb4 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006aca:	fa5f f188 	uxtb.w	r1, r8
 8006ace:	2021      	movs	r0, #33	; 0x21
 8006ad0:	f005 fcaf 	bl	800c432 <SX1276Write>
            if( fixLen == 1 )
 8006ad4:	bb5f      	cbnz	r7, 8006b2e <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006ad6:	4b35      	ldr	r3, [pc, #212]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006ad8:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006adc:	bb63      	cbnz	r3, 8006b38 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006ade:	2c09      	cmp	r4, #9
 8006ae0:	d03a      	beq.n	8006b58 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 8006ae2:	2c09      	cmp	r4, #9
 8006ae4:	d047      	beq.n	8006b76 <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	2036      	movs	r0, #54	; 0x36
 8006aea:	f005 fca2 	bl	800c432 <SX1276Write>
            if( datarate == 6 )
 8006aee:	2d06      	cmp	r5, #6
 8006af0:	d04a      	beq.n	8006b88 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006af2:	2031      	movs	r0, #49	; 0x31
 8006af4:	f005 fca9 	bl	800c44a <SX1276Read>
 8006af8:	b241      	sxtb	r1, r0
 8006afa:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006afe:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006b02:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8006b06:	2031      	movs	r0, #49	; 0x31
 8006b08:	f005 fc93 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006b0c:	210a      	movs	r1, #10
 8006b0e:	2037      	movs	r0, #55	; 0x37
 8006b10:	f005 fc8f 	bl	800c432 <SX1276Write>
}
 8006b14:	e705      	b.n	8006922 <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006b16:	f1a5 030b 	sub.w	r3, r5, #11
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d897      	bhi.n	8006a4e <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006b1e:	4b23      	ldr	r3, [pc, #140]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8006b26:	e798      	b.n	8006a5a <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006b28:	2d0c      	cmp	r5, #12
 8006b2a:	d192      	bne.n	8006a52 <SX1276SetRxConfig+0x166>
 8006b2c:	e7f7      	b.n	8006b1e <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006b2e:	4649      	mov	r1, r9
 8006b30:	2022      	movs	r0, #34	; 0x22
 8006b32:	f005 fc7e 	bl	800c432 <SX1276Write>
 8006b36:	e7ce      	b.n	8006ad6 <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006b38:	2044      	movs	r0, #68	; 0x44
 8006b3a:	f005 fc86 	bl	800c44a <SX1276Read>
 8006b3e:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006b42:	b2c9      	uxtb	r1, r1
 8006b44:	2044      	movs	r0, #68	; 0x44
 8006b46:	f005 fc74 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006b4a:	4b18      	ldr	r3, [pc, #96]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006b4c:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8006b50:	2024      	movs	r0, #36	; 0x24
 8006b52:	f005 fc6e 	bl	800c432 <SX1276Write>
 8006b56:	e7c2      	b.n	8006ade <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <SX1276SetRxConfig+0x2c0>)
 8006b5a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006b5e:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <SX1276SetRxConfig+0x2c8>)
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d9be      	bls.n	8006ae2 <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006b64:	2102      	movs	r1, #2
 8006b66:	2036      	movs	r0, #54	; 0x36
 8006b68:	f005 fc63 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006b6c:	2164      	movs	r1, #100	; 0x64
 8006b6e:	203a      	movs	r0, #58	; 0x3a
 8006b70:	f005 fc5f 	bl	800c432 <SX1276Write>
 8006b74:	e7bb      	b.n	8006aee <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006b76:	2102      	movs	r1, #2
 8006b78:	2036      	movs	r0, #54	; 0x36
 8006b7a:	f005 fc5a 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006b7e:	217f      	movs	r1, #127	; 0x7f
 8006b80:	203a      	movs	r0, #58	; 0x3a
 8006b82:	f005 fc56 	bl	800c432 <SX1276Write>
 8006b86:	e7b2      	b.n	8006aee <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006b88:	2031      	movs	r0, #49	; 0x31
 8006b8a:	f005 fc5e 	bl	800c44a <SX1276Read>
 8006b8e:	b241      	sxtb	r1, r0
 8006b90:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006b94:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006b98:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8006b9c:	2031      	movs	r0, #49	; 0x31
 8006b9e:	f005 fc48 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006ba2:	210c      	movs	r1, #12
 8006ba4:	2037      	movs	r0, #55	; 0x37
 8006ba6:	f005 fc44 	bl	800c432 <SX1276Write>
 8006baa:	e6ba      	b.n	8006922 <SX1276SetRxConfig+0x36>
 8006bac:	20000c98 	.word	0x20000c98
 8006bb0:	01e84800 	.word	0x01e84800
 8006bb4:	1f4add40 	.word	0x1f4add40

08006bb8 <SX1276SetTxConfig>:
{
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8006bca:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8006bce:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8006bd2:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8006bd6:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8006bda:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 8006bde:	f7ff fdfb 	bl	80067d8 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7fe fe48 	bl	8005878 <SX1276SetRfTxPower>
    switch( modem )
 8006be8:	b124      	cbz	r4, 8006bf4 <SX1276SetTxConfig+0x3c>
 8006bea:	2c01      	cmp	r4, #1
 8006bec:	d057      	beq.n	8006c9e <SX1276SetTxConfig+0xe6>
}
 8006bee:	b003      	add	sp, #12
 8006bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 8006bf4:	4b81      	ldr	r3, [pc, #516]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006bf6:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 8006bfa:	9801      	ldr	r0, [sp, #4]
 8006bfc:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006c00:	9a00      	ldr	r2, [sp, #0]
 8006c02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8006c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c08:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006c0c:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006c10:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006c14:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006c18:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8006c22:	f7fe ffb9 	bl	8005b98 <SX1276ConvertFreqInHzToPllStep>
 8006c26:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8006c28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8006c2c:	2004      	movs	r0, #4
 8006c2e:	f005 fc00 	bl	800c432 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8006c32:	b2e1      	uxtb	r1, r4
 8006c34:	2005      	movs	r0, #5
 8006c36:	f005 fbfc 	bl	800c432 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8006c3a:	4c71      	ldr	r4, [pc, #452]	; (8006e00 <SX1276SetTxConfig+0x248>)
 8006c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c3e:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8006c42:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8006c46:	2002      	movs	r0, #2
 8006c48:	f005 fbf3 	bl	800c432 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8006c4c:	b2e1      	uxtb	r1, r4
 8006c4e:	2003      	movs	r0, #3
 8006c50:	f005 fbef 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006c54:	0a39      	lsrs	r1, r7, #8
 8006c56:	2025      	movs	r0, #37	; 0x25
 8006c58:	f005 fbeb 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8006c5c:	b2f9      	uxtb	r1, r7
 8006c5e:	2026      	movs	r0, #38	; 0x26
 8006c60:	f005 fbe7 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006c64:	2030      	movs	r0, #48	; 0x30
 8006c66:	f005 fbf0 	bl	800c44a <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8006c6a:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006c6e:	f1b8 0f00 	cmp.w	r8, #0
 8006c72:	d011      	beq.n	8006c98 <SX1276SetTxConfig+0xe0>
 8006c74:	2300      	movs	r3, #0
 8006c76:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006c78:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8006c7c:	b2c9      	uxtb	r1, r1
 8006c7e:	2030      	movs	r0, #48	; 0x30
 8006c80:	f005 fbd7 	bl	800c432 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006c84:	2031      	movs	r0, #49	; 0x31
 8006c86:	f005 fbe0 	bl	800c44a <SX1276Read>
 8006c8a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006c8e:	b2c9      	uxtb	r1, r1
 8006c90:	2031      	movs	r0, #49	; 0x31
 8006c92:	f005 fbce 	bl	800c432 <SX1276Write>
        break;
 8006c96:	e7aa      	b.n	8006bee <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006c98:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006c9c:	e7eb      	b.n	8006c76 <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8006c9e:	4b57      	ldr	r3, [pc, #348]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006ca0:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 8006ca4:	9b00      	ldr	r3, [sp, #0]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d900      	bls.n	8006cac <SX1276SetTxConfig+0xf4>
                while( 1 );
 8006caa:	e7fe      	b.n	8006caa <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 8006cac:	9c00      	ldr	r4, [sp, #0]
 8006cae:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006cb0:	4b52      	ldr	r3, [pc, #328]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006cb2:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8006cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8006cbc:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006cc0:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006cc4:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006cc8:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006ccc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8006cd0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006cd4:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006cd8:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8006cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cde:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 8006ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d804      	bhi.n	8006cf2 <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	d804      	bhi.n	8006cf6 <SX1276SetTxConfig+0x13e>
                datarate = 6;
 8006cec:	2306      	movs	r3, #6
 8006cee:	930c      	str	r3, [sp, #48]	; 0x30
 8006cf0:	e001      	b.n	8006cf6 <SX1276SetTxConfig+0x13e>
                datarate = 12;
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006cf6:	2c07      	cmp	r4, #7
 8006cf8:	d051      	beq.n	8006d9e <SX1276SetTxConfig+0x1e6>
 8006cfa:	2c08      	cmp	r4, #8
 8006cfc:	d058      	beq.n	8006db0 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006d06:	f1bb 0f00 	cmp.w	fp, #0
 8006d0a:	d155      	bne.n	8006db8 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006d0c:	201d      	movs	r0, #29
 8006d0e:	f005 fb9c 	bl	800c44a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006d12:	0123      	lsls	r3, r4, #4
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006d1e:	ea43 0108 	orr.w	r1, r3, r8
 8006d22:	201d      	movs	r0, #29
 8006d24:	f005 fb85 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006d28:	201e      	movs	r0, #30
 8006d2a:	f005 fb8e 	bl	800c44a <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8006d2e:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8006d38:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8006d3a:	00b3      	lsls	r3, r6, #2
 8006d3c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006d3e:	4319      	orrs	r1, r3
 8006d40:	201e      	movs	r0, #30
 8006d42:	f005 fb76 	bl	800c432 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006d46:	2026      	movs	r0, #38	; 0x26
 8006d48:	f005 fb7f 	bl	800c44a <SX1276Read>
 8006d4c:	b241      	sxtb	r1, r0
 8006d4e:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006d52:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006d54:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006d58:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006d5c:	b2c9      	uxtb	r1, r1
 8006d5e:	2026      	movs	r0, #38	; 0x26
 8006d60:	f005 fb67 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006d64:	0a39      	lsrs	r1, r7, #8
 8006d66:	2020      	movs	r0, #32
 8006d68:	f005 fb63 	bl	800c432 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8006d6c:	b2f9      	uxtb	r1, r7
 8006d6e:	2021      	movs	r0, #33	; 0x21
 8006d70:	f005 fb5f 	bl	800c432 <SX1276Write>
            if( datarate == 6 )
 8006d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d02e      	beq.n	8006dd8 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006d7a:	2031      	movs	r0, #49	; 0x31
 8006d7c:	f005 fb65 	bl	800c44a <SX1276Read>
 8006d80:	b241      	sxtb	r1, r0
 8006d82:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006d86:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006d8a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8006d8e:	2031      	movs	r0, #49	; 0x31
 8006d90:	f005 fb4f 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006d94:	210a      	movs	r1, #10
 8006d96:	2037      	movs	r0, #55	; 0x37
 8006d98:	f005 fb4b 	bl	800c432 <SX1276Write>
}
 8006d9c:	e727      	b.n	8006bee <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da0:	3b0b      	subs	r3, #11
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d8a9      	bhi.n	8006cfa <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8006dae:	e7aa      	b.n	8006d06 <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db2:	2b0c      	cmp	r3, #12
 8006db4:	d1a3      	bne.n	8006cfe <SX1276SetTxConfig+0x146>
 8006db6:	e7f6      	b.n	8006da6 <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006db8:	2044      	movs	r0, #68	; 0x44
 8006dba:	f005 fb46 	bl	800c44a <SX1276Read>
 8006dbe:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006dc2:	b2c9      	uxtb	r1, r1
 8006dc4:	2044      	movs	r0, #68	; 0x44
 8006dc6:	f005 fb34 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <SX1276SetTxConfig+0x244>)
 8006dcc:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8006dd0:	2024      	movs	r0, #36	; 0x24
 8006dd2:	f005 fb2e 	bl	800c432 <SX1276Write>
 8006dd6:	e799      	b.n	8006d0c <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006dd8:	2031      	movs	r0, #49	; 0x31
 8006dda:	f005 fb36 	bl	800c44a <SX1276Read>
 8006dde:	b241      	sxtb	r1, r0
 8006de0:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006de4:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006de8:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8006dec:	2031      	movs	r0, #49	; 0x31
 8006dee:	f005 fb20 	bl	800c432 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006df2:	210c      	movs	r1, #12
 8006df4:	2037      	movs	r0, #55	; 0x37
 8006df6:	f005 fb1c 	bl	800c432 <SX1276Write>
 8006dfa:	e6f8      	b.n	8006bee <SX1276SetTxConfig+0x36>
 8006dfc:	20000c98 	.word	0x20000c98
 8006e00:	01e84800 	.word	0x01e84800

08006e04 <SX1276SetTxContinuousWave>:
{
 8006e04:	b530      	push	{r4, r5, lr}
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8006e0a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006e0e:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 8006e12:	f7fe ff27 	bl	8005c64 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006e16:	9408      	str	r4, [sp, #32]
 8006e18:	2000      	movs	r0, #0
 8006e1a:	9007      	str	r0, [sp, #28]
 8006e1c:	9006      	str	r0, [sp, #24]
 8006e1e:	9005      	str	r0, [sp, #20]
 8006e20:	9004      	str	r0, [sp, #16]
 8006e22:	9003      	str	r0, [sp, #12]
 8006e24:	2305      	movs	r3, #5
 8006e26:	9302      	str	r3, [sp, #8]
 8006e28:	9001      	str	r0, [sp, #4]
 8006e2a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4603      	mov	r3, r0
 8006e32:	4602      	mov	r2, r0
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7ff febf 	bl	8006bb8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006e3a:	2031      	movs	r0, #49	; 0x31
 8006e3c:	f005 fb05 	bl	800c44a <SX1276Read>
 8006e40:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 8006e44:	2031      	movs	r0, #49	; 0x31
 8006e46:	f005 faf4 	bl	800c432 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006e4a:	21f0      	movs	r1, #240	; 0xf0
 8006e4c:	2040      	movs	r0, #64	; 0x40
 8006e4e:	f005 faf0 	bl	800c432 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006e52:	21a0      	movs	r1, #160	; 0xa0
 8006e54:	2041      	movs	r0, #65	; 0x41
 8006e56:	f005 faec 	bl	800c432 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006e5a:	4d08      	ldr	r5, [pc, #32]	; (8006e7c <SX1276SetTxContinuousWave+0x78>)
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f005 fa0f 	bl	800c282 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <SX1276SetTxContinuousWave+0x7c>)
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7fe fdd9 	bl	8005a24 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006e72:	2003      	movs	r0, #3
 8006e74:	f005 faf5 	bl	800c462 <SX1276SetOpMode>
}
 8006e78:	b00b      	add	sp, #44	; 0x2c
 8006e7a:	bd30      	pop	{r4, r5, pc}
 8006e7c:	20000ddc 	.word	0x20000ddc
 8006e80:	20000c98 	.word	0x20000c98

08006e84 <SX1276SetMaxPayloadLength>:
{
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4604      	mov	r4, r0
 8006e88:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8006e8a:	f7ff fca5 	bl	80067d8 <SX1276SetModem>
    switch( modem )
 8006e8e:	b114      	cbz	r4, 8006e96 <SX1276SetMaxPayloadLength+0x12>
 8006e90:	2c01      	cmp	r4, #1
 8006e92:	d00a      	beq.n	8006eaa <SX1276SetMaxPayloadLength+0x26>
}
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <SX1276SetMaxPayloadLength+0x30>)
 8006e98:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f9      	bne.n	8006e94 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	2032      	movs	r0, #50	; 0x32
 8006ea4:	f005 fac5 	bl	800c432 <SX1276Write>
 8006ea8:	e7f4      	b.n	8006e94 <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8006eaa:	4629      	mov	r1, r5
 8006eac:	2023      	movs	r0, #35	; 0x23
 8006eae:	f005 fac0 	bl	800c432 <SX1276Write>
}
 8006eb2:	e7ef      	b.n	8006e94 <SX1276SetMaxPayloadLength+0x10>
 8006eb4:	20000c98 	.word	0x20000c98

08006eb8 <SX1276SetPublicNetwork>:
{
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f7ff fc8b 	bl	80067d8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8006ec2:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <SX1276SetPublicNetwork+0x28>)
 8006ec4:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 8006ec8:	b124      	cbz	r4, 8006ed4 <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8006eca:	2134      	movs	r1, #52	; 0x34
 8006ecc:	2039      	movs	r0, #57	; 0x39
 8006ece:	f005 fab0 	bl	800c432 <SX1276Write>
}
 8006ed2:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8006ed4:	2112      	movs	r1, #18
 8006ed6:	2039      	movs	r0, #57	; 0x39
 8006ed8:	f005 faab 	bl	800c432 <SX1276Write>
}
 8006edc:	e7f9      	b.n	8006ed2 <SX1276SetPublicNetwork+0x1a>
 8006ede:	bf00      	nop
 8006ee0:	20000c98 	.word	0x20000c98

08006ee4 <SX1276OnTimeoutIrq>:
{
 8006ee4:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 8006ee6:	4b33      	ldr	r3, [pc, #204]	; (8006fb4 <SX1276OnTimeoutIrq+0xd0>)
 8006ee8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d002      	beq.n	8006ef6 <SX1276OnTimeoutIrq+0x12>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d033      	beq.n	8006f5c <SX1276OnTimeoutIrq+0x78>
}
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8006ef6:	4b2f      	ldr	r3, [pc, #188]	; (8006fb4 <SX1276OnTimeoutIrq+0xd0>)
 8006ef8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006efc:	b143      	cbz	r3, 8006f10 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <SX1276OnTimeoutIrq+0xd4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f6      	beq.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f3      	beq.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8006f0c:	4798      	blx	r3
 8006f0e:	e7f1      	b.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006f10:	4c28      	ldr	r4, [pc, #160]	; (8006fb4 <SX1276OnTimeoutIrq+0xd0>)
 8006f12:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006f16:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006f1a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006f1e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006f22:	210b      	movs	r1, #11
 8006f24:	203e      	movs	r0, #62	; 0x3e
 8006f26:	f005 fa84 	bl	800c432 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006f2a:	2110      	movs	r1, #16
 8006f2c:	203f      	movs	r0, #63	; 0x3f
 8006f2e:	f005 fa80 	bl	800c432 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8006f32:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8006f36:	b14b      	cbz	r3, 8006f4c <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006f38:	200d      	movs	r0, #13
 8006f3a:	f005 fa86 	bl	800c44a <SX1276Read>
 8006f3e:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006f42:	b2c9      	uxtb	r1, r1
 8006f44:	200d      	movs	r0, #13
 8006f46:	f005 fa74 	bl	800c432 <SX1276Write>
 8006f4a:	e7d8      	b.n	8006efe <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <SX1276OnTimeoutIrq+0xd0>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 8006f54:	4819      	ldr	r0, [pc, #100]	; (8006fbc <SX1276OnTimeoutIrq+0xd8>)
 8006f56:	f7fe fddf 	bl	8005b18 <TimerStop>
 8006f5a:	e7d0      	b.n	8006efe <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8006f5c:	f7fe fa76 	bl	800544c <SX1276Reset>
        RxChainCalibration( );
 8006f60:	f7ff f960 	bl	8006224 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f64:	2000      	movs	r0, #0
 8006f66:	f005 fa7c 	bl	800c462 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f6a:	2400      	movs	r4, #0
 8006f6c:	e00c      	b.n	8006f88 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <SX1276OnTimeoutIrq+0xdc>)
 8006f70:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006f74:	18d5      	adds	r5, r2, r3
 8006f76:	5cd0      	ldrb	r0, [r2, r3]
 8006f78:	f7ff fc2e 	bl	80067d8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006f7c:	78a9      	ldrb	r1, [r5, #2]
 8006f7e:	7868      	ldrb	r0, [r5, #1]
 8006f80:	f005 fa57 	bl	800c432 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f84:	3401      	adds	r4, #1
 8006f86:	b2e4      	uxtb	r4, r4
 8006f88:	2c0f      	cmp	r4, #15
 8006f8a:	d9f0      	bls.n	8006f6e <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	f7ff fc23 	bl	80067d8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8006f92:	4c08      	ldr	r4, [pc, #32]	; (8006fb4 <SX1276OnTimeoutIrq+0xd0>)
 8006f94:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8006f98:	f7ff ff8e 	bl	8006eb8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <SX1276OnTimeoutIrq+0xd4>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0a4      	beq.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0a1      	beq.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 8006fb0:	4798      	blx	r3
}
 8006fb2:	e79f      	b.n	8006ef4 <SX1276OnTimeoutIrq+0x10>
 8006fb4:	20000c98 	.word	0x20000c98
 8006fb8:	20000b64 	.word	0x20000b64
 8006fbc:	20000b68 	.word	0x20000b68
 8006fc0:	0800e7fc 	.word	0x0800e7fc

08006fc4 <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 8006fcc:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8006fce:	6843      	ldr	r3, [r0, #4]
 8006fd0:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8006fd2:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 8006fd4:	2a01      	cmp	r2, #1
 8006fd6:	f000 8091 	beq.w	80070fc <uart_stm32_configure+0x138>
 8006fda:	2a02      	cmp	r2, #2
 8006fdc:	f040 8091 	bne.w	8007102 <uart_stm32_configure+0x13e>
		return LL_USART_PARITY_EVEN;
 8006fe0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8006fe4:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	f000 8091 	beq.w	800710e <uart_stm32_configure+0x14a>
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	f000 8090 	beq.w	8007112 <uart_stm32_configure+0x14e>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8088 	beq.w	8007108 <uart_stm32_configure+0x144>
		return LL_USART_STOPBITS_2;
 8006ff8:	f44f 5700 	mov.w	r7, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 8006ffc:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 8006ffe:	2904      	cmp	r1, #4
 8007000:	f000 808a 	beq.w	8007118 <uart_stm32_configure+0x154>
		if (p == UART_CFG_PARITY_NONE) {
 8007004:	2a00      	cmp	r2, #0
 8007006:	f040 808a 	bne.w	800711e <uart_stm32_configure+0x15a>
			return LL_USART_DATAWIDTH_8B;
 800700a:	f04f 0800 	mov.w	r8, #0
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800700e:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 8007012:	f1ba 0f01 	cmp.w	sl, #1
 8007016:	f000 8085 	beq.w	8007124 <uart_stm32_configure+0x160>
	return LL_USART_HWCONTROL_NONE;
 800701a:	f04f 0e00 	mov.w	lr, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 800701e:	f1a2 0903 	sub.w	r9, r2, #3
 8007022:	fa5f f989 	uxtb.w	r9, r9
 8007026:	f1b9 0f01 	cmp.w	r9, #1
 800702a:	f240 80d3 	bls.w	80071d4 <uart_stm32_configure+0x210>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 800702e:	b112      	cbz	r2, 8007036 <uart_stm32_configure+0x72>
 8007030:	2904      	cmp	r1, #4
 8007032:	f000 80d2 	beq.w	80071da <uart_stm32_configure+0x216>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80d2 	beq.w	80071e0 <uart_stm32_configure+0x21c>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 800703c:	2b02      	cmp	r3, #2
 800703e:	f000 80d2 	beq.w	80071e6 <uart_stm32_configure+0x222>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 8007042:	2902      	cmp	r1, #2
 8007044:	f240 80d2 	bls.w	80071ec <uart_stm32_configure+0x228>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8007048:	2904      	cmp	r1, #4
 800704a:	f000 80d2 	beq.w	80071f2 <uart_stm32_configure+0x22e>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 800704e:	f1ba 0f00 	cmp.w	sl, #0
 8007052:	d00f      	beq.n	8007074 <uart_stm32_configure+0xb0>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8007054:	4b6b      	ldr	r3, [pc, #428]	; (8007204 <uart_stm32_configure+0x240>)
 8007056:	429d      	cmp	r5, r3
 8007058:	d008      	beq.n	800706c <uart_stm32_configure+0xa8>
 800705a:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800705e:	429d      	cmp	r5, r3
 8007060:	d004      	beq.n	800706c <uart_stm32_configure+0xa8>
 8007062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007066:	429d      	cmp	r5, r3
 8007068:	f040 80c6 	bne.w	80071f8 <uart_stm32_configure+0x234>
 800706c:	f1ba 0f01 	cmp.w	sl, #1
 8007070:	f040 80c5 	bne.w	80071fe <uart_stm32_configure+0x23a>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8007074:	68eb      	ldr	r3, [r5, #12]
 8007076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800707a:	60eb      	str	r3, [r5, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800707c:	6843      	ldr	r3, [r0, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007080:	68d3      	ldr	r3, [r2, #12]
 8007082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8007086:	459c      	cmp	ip, r3
 8007088:	d005      	beq.n	8007096 <uart_stm32_configure+0xd2>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800708a:	68d3      	ldr	r3, [r2, #12]
 800708c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007090:	ea4c 0303 	orr.w	r3, ip, r3
 8007094:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007096:	6843      	ldr	r3, [r0, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800709a:	6913      	ldr	r3, [r2, #16]
 800709c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80070a0:	429f      	cmp	r7, r3
 80070a2:	d004      	beq.n	80070ae <uart_stm32_configure+0xea>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80070a4:	6913      	ldr	r3, [r2, #16]
 80070a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070aa:	431f      	orrs	r7, r3
 80070ac:	6117      	str	r7, [r2, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80070ae:	6843      	ldr	r3, [r0, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80070b2:	68d3      	ldr	r3, [r2, #12]
 80070b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80070b8:	4598      	cmp	r8, r3
 80070ba:	d005      	beq.n	80070c8 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80070bc:	68d3      	ldr	r3, [r2, #12]
 80070be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c2:	ea48 0303 	orr.w	r3, r8, r3
 80070c6:	60d3      	str	r3, [r2, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80070c8:	6843      	ldr	r3, [r0, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80070cc:	6953      	ldr	r3, [r2, #20]
 80070ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80070d2:	459e      	cmp	lr, r3
 80070d4:	d005      	beq.n	80070e2 <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80070d6:	6953      	ldr	r3, [r2, #20]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	ea4e 0303 	orr.w	r3, lr, r3
 80070e0:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 80070e2:	f8d4 8000 	ldr.w	r8, [r4]
 80070e6:	6833      	ldr	r3, [r6, #0]
 80070e8:	4598      	cmp	r8, r3
 80070ea:	d11e      	bne.n	800712a <uart_stm32_configure+0x166>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80070ec:	68eb      	ldr	r3, [r5, #12]
 80070ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070f2:	60eb      	str	r3, [r5, #12]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80070f4:	2000      	movs	r0, #0
};
 80070f6:	b002      	add	sp, #8
 80070f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (parity) {
 80070fc:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 8007100:	e770      	b.n	8006fe4 <uart_stm32_configure+0x20>
		return LL_USART_PARITY_NONE;
 8007102:	f04f 0c00 	mov.w	ip, #0
 8007106:	e76d      	b.n	8006fe4 <uart_stm32_configure+0x20>
	switch (sb) {
 8007108:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800710c:	e776      	b.n	8006ffc <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1;
 800710e:	2700      	movs	r7, #0
 8007110:	e774      	b.n	8006ffc <uart_stm32_configure+0x38>
		return LL_USART_STOPBITS_1_5;
 8007112:	f44f 5740 	mov.w	r7, #12288	; 0x3000
 8007116:	e771      	b.n	8006ffc <uart_stm32_configure+0x38>
		return LL_USART_DATAWIDTH_9B;
 8007118:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 800711c:	e777      	b.n	800700e <uart_stm32_configure+0x4a>
			return LL_USART_DATAWIDTH_9B;
 800711e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8007122:	e774      	b.n	800700e <uart_stm32_configure+0x4a>
		return LL_USART_HWCONTROL_RTS_CTS;
 8007124:	f44f 7e40 	mov.w	lr, #768	; 0x300
 8007128:	e779      	b.n	800701e <uart_stm32_configure+0x5a>
	struct uart_stm32_data *data = DEV_DATA(dev);
 800712a:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800712c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007130:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 8007134:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007138:	4650      	mov	r0, sl
 800713a:	f005 fab2 	bl	800c6a2 <z_device_ready>
 800713e:	b390      	cbz	r0, 80071a6 <uart_stm32_configure+0x1e2>
	const struct clock_control_driver_api *api =
 8007140:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	b38b      	cbz	r3, 80071ac <uart_stm32_configure+0x1e8>
	return api->get_rate(dev, sys, rate);
 8007148:	aa01      	add	r2, sp, #4
 800714a:	4649      	mov	r1, r9
 800714c:	4650      	mov	r0, sl
 800714e:	4798      	blx	r3
 8007150:	2800      	cmp	r0, #0
 8007152:	db2e      	blt.n	80071b2 <uart_stm32_configure+0x1ee>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800715a:	60fb      	str	r3, [r7, #12]
		LL_USART_SetBaudRate(UartInstance,
 800715c:	9a01      	ldr	r2, [sp, #4]
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800715e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007162:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007166:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800716a:	fbb2 f2f8 	udiv	r2, r2, r8
 800716e:	4826      	ldr	r0, [pc, #152]	; (8007208 <uart_stm32_configure+0x244>)
 8007170:	fba0 1302 	umull	r1, r3, r0, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	0119      	lsls	r1, r3, #4
 8007178:	b289      	uxth	r1, r1
 800717a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800717e:	fb0c 2313 	mls	r3, ip, r3, r2
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	3332      	adds	r3, #50	; 0x32
 8007186:	fba0 2303 	umull	r2, r3, r0, r3
 800718a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800718e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007192:	440a      	add	r2, r1
 8007194:	b292      	uxth	r2, r2
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4413      	add	r3, r2
 800719c:	b29b      	uxth	r3, r3
 800719e:	60bb      	str	r3, [r7, #8]
		data->baud_rate = cfg->baudrate;
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	e7a2      	b.n	80070ec <uart_stm32_configure+0x128>
 80071a6:	f06f 0012 	mvn.w	r0, #18
 80071aa:	e7d1      	b.n	8007150 <uart_stm32_configure+0x18c>
		return -ENOSYS;
 80071ac:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80071b0:	e7ce      	b.n	8007150 <uart_stm32_configure+0x18c>
 80071b2:	4b16      	ldr	r3, [pc, #88]	; (800720c <uart_stm32_configure+0x248>)
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <uart_stm32_configure+0x24c>)
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 80071ba:	f04f 0100 	mov.w	r1, #0
 80071be:	2201      	movs	r2, #1
 80071c0:	f362 0102 	bfi	r1, r2, #0, #3
 80071c4:	f36f 01c5 	bfc	r1, #3, #3
 80071c8:	f363 118f 	bfi	r1, r3, #6, #10
 80071cc:	4811      	ldr	r0, [pc, #68]	; (8007214 <uart_stm32_configure+0x250>)
 80071ce:	f7fb ff43 	bl	8003058 <log_0>
		return;
 80071d2:	e7e5      	b.n	80071a0 <uart_stm32_configure+0x1dc>
		return -ENOTSUP;
 80071d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071d8:	e78d      	b.n	80070f6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80071da:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071de:	e78a      	b.n	80070f6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80071e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071e4:	e787      	b.n	80070f6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80071e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071ea:	e784      	b.n	80070f6 <uart_stm32_configure+0x132>
		return -ENOTSUP;
 80071ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071f0:	e781      	b.n	80070f6 <uart_stm32_configure+0x132>
 80071f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071f6:	e77e      	b.n	80070f6 <uart_stm32_configure+0x132>
			return -ENOTSUP;
 80071f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80071fc:	e77b      	b.n	80070f6 <uart_stm32_configure+0x132>
 80071fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007202:	e778      	b.n	80070f6 <uart_stm32_configure+0x132>
 8007204:	40013800 	.word	0x40013800
 8007208:	51eb851f 	.word	0x51eb851f
 800720c:	0800d98c 	.word	0x0800d98c
 8007210:	0800d954 	.word	0x0800d954
 8007214:	0800e3d8 	.word	0x0800e3d8

08007218 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8007218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800721c:	b083      	sub	sp, #12
 800721e:	4606      	mov	r6, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8007220:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007222:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007226:	463d      	mov	r5, r7
 8007228:	f855 4b08 	ldr.w	r4, [r5], #8
	data->clock = clk;
 800722c:	485d      	ldr	r0, [pc, #372]	; (80073a4 <uart_stm32_init+0x18c>)
 800722e:	f8c8 0004 	str.w	r0, [r8, #4]
 8007232:	f005 fa36 	bl	800c6a2 <z_device_ready>
 8007236:	b310      	cbz	r0, 800727e <uart_stm32_init+0x66>
	const struct clock_control_driver_api *api =
 8007238:	485a      	ldr	r0, [pc, #360]	; (80073a4 <uart_stm32_init+0x18c>)
 800723a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4629      	mov	r1, r5
 8007240:	4798      	blx	r3
 8007242:	4605      	mov	r5, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8007244:	2d00      	cmp	r5, #0
 8007246:	f040 80a7 	bne.w	8007398 <uart_stm32_init+0x180>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 800724a:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	69b8      	ldr	r0, [r7, #24]
 8007252:	f004 fa35 	bl	800b6c0 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8007256:	2800      	cmp	r0, #0
 8007258:	f2c0 80a1 	blt.w	800739e <uart_stm32_init+0x186>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800725c:	68e3      	ldr	r3, [r4, #12]
 800725e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007262:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007264:	68e3      	ldr	r3, [r4, #12]
 8007266:	f043 030c 	orr.w	r3, r3, #12
 800726a:	60e3      	str	r3, [r4, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800726c:	6979      	ldr	r1, [r7, #20]
 800726e:	2902      	cmp	r1, #2
 8007270:	d01b      	beq.n	80072aa <uart_stm32_init+0x92>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8007272:	2901      	cmp	r1, #1
 8007274:	d074      	beq.n	8007360 <uart_stm32_init+0x148>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8007276:	b929      	cbnz	r1, 8007284 <uart_stm32_init+0x6c>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007278:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800727a:	4619      	mov	r1, r3
 800727c:	e019      	b.n	80072b2 <uart_stm32_init+0x9a>
 800727e:	f06f 0512 	mvn.w	r5, #18
 8007282:	e7df      	b.n	8007244 <uart_stm32_init+0x2c>
 8007284:	4b48      	ldr	r3, [pc, #288]	; (80073a8 <uart_stm32_init+0x190>)
 8007286:	4a49      	ldr	r2, [pc, #292]	; (80073ac <uart_stm32_init+0x194>)
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Invalid parity setting '%d'."
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	2002      	movs	r0, #2
 8007292:	f360 0202 	bfi	r2, r0, #0, #3
 8007296:	f36f 02c5 	bfc	r2, #3, #3
 800729a:	f363 128f 	bfi	r2, r3, #6, #10
 800729e:	4844      	ldr	r0, [pc, #272]	; (80073b0 <uart_stm32_init+0x198>)
 80072a0:	f7fb ff04 	bl	80030ac <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80072a4:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 80072a6:	4619      	mov	r1, r3
 80072a8:	e003      	b.n	80072b2 <uart_stm32_init+0x9a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80072aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80072ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80072b2:	68e2      	ldr	r2, [r4, #12]
 80072b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80072b8:	430b      	orrs	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072c4:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80072c6:	7c3b      	ldrb	r3, [r7, #16]
 80072c8:	b12b      	cbz	r3, 80072d6 <uart_stm32_init+0xbe>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072ca:	6873      	ldr	r3, [r6, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80072ce:	6953      	ldr	r3, [r2, #20]
 80072d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80072d4:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80072d6:	f8d8 7000 	ldr.w	r7, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80072da:	6933      	ldr	r3, [r6, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80072dc:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80072e0:	f858 6b08 	ldr.w	r6, [r8], #8
	if (clock_control_get_rate(data->clock,
 80072e4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80072e8:	4648      	mov	r0, r9
 80072ea:	f005 f9da 	bl	800c6a2 <z_device_ready>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d03b      	beq.n	800736a <uart_stm32_init+0x152>
	const struct clock_control_driver_api *api =
 80072f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d039      	beq.n	8007370 <uart_stm32_init+0x158>
	return api->get_rate(dev, sys, rate);
 80072fc:	aa01      	add	r2, sp, #4
 80072fe:	4641      	mov	r1, r8
 8007300:	4648      	mov	r0, r9
 8007302:	4798      	blx	r3
 8007304:	2800      	cmp	r0, #0
 8007306:	db36      	blt.n	8007376 <uart_stm32_init+0x15e>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8007308:	68f3      	ldr	r3, [r6, #12]
 800730a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800730e:	60f3      	str	r3, [r6, #12]
		LL_USART_SetBaudRate(UartInstance,
 8007310:	9a01      	ldr	r2, [sp, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007312:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007316:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800731a:	00bf      	lsls	r7, r7, #2
 800731c:	fbb2 f2f7 	udiv	r2, r2, r7
 8007320:	4824      	ldr	r0, [pc, #144]	; (80073b4 <uart_stm32_init+0x19c>)
 8007322:	fba0 1302 	umull	r1, r3, r0, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	0119      	lsls	r1, r3, #4
 800732a:	b289      	uxth	r1, r1
 800732c:	2764      	movs	r7, #100	; 0x64
 800732e:	fb07 2313 	mls	r3, r7, r3, r2
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	3332      	adds	r3, #50	; 0x32
 8007336:	fba0 2303 	umull	r2, r3, r0, r3
 800733a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800733e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007342:	440a      	add	r2, r1
 8007344:	b292      	uxth	r2, r2
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	4413      	add	r3, r2
 800734c:	b29b      	uxth	r3, r3
 800734e:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007350:	68e3      	ldr	r3, [r4, #12]
 8007352:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007356:	60e3      	str	r3, [r4, #12]
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8007358:	4628      	mov	r0, r5
 800735a:	b003      	add	sp, #12
 800735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8007364:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007368:	e7a3      	b.n	80072b2 <uart_stm32_init+0x9a>
 800736a:	f06f 0012 	mvn.w	r0, #18
 800736e:	e7c9      	b.n	8007304 <uart_stm32_init+0xec>
		return -ENOSYS;
 8007370:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007374:	e7c6      	b.n	8007304 <uart_stm32_init+0xec>
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <uart_stm32_init+0x190>)
 8007378:	4a0c      	ldr	r2, [pc, #48]	; (80073ac <uart_stm32_init+0x194>)
 800737a:	1a9b      	subs	r3, r3, r2
 800737c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	2201      	movs	r2, #1
 8007384:	f362 0102 	bfi	r1, r2, #0, #3
 8007388:	f36f 01c5 	bfc	r1, #3, #3
 800738c:	f363 118f 	bfi	r1, r3, #6, #10
 8007390:	4809      	ldr	r0, [pc, #36]	; (80073b8 <uart_stm32_init+0x1a0>)
 8007392:	f7fb fe61 	bl	8003058 <log_0>
		return;
 8007396:	e7db      	b.n	8007350 <uart_stm32_init+0x138>
		return -EIO;
 8007398:	f06f 0504 	mvn.w	r5, #4
 800739c:	e7dc      	b.n	8007358 <uart_stm32_init+0x140>
		return err;
 800739e:	4605      	mov	r5, r0
 80073a0:	e7da      	b.n	8007358 <uart_stm32_init+0x140>
 80073a2:	bf00      	nop
 80073a4:	0800d664 	.word	0x0800d664
 80073a8:	0800d98c 	.word	0x0800d98c
 80073ac:	0800d954 	.word	0x0800d954
 80073b0:	0800e82c 	.word	0x0800e82c
 80073b4:	51eb851f 	.word	0x51eb851f
 80073b8:	0800e3d8 	.word	0x0800e3d8

080073bc <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 80073bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073c0:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 80073c2:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 80073c4:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 80073c6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80073ca:	d101      	bne.n	80073d0 <elapsed+0x14>
	    || (val1 < val2)) {
 80073cc:	4281      	cmp	r1, r0
 80073ce:	d208      	bcs.n	80073e2 <elapsed+0x26>
		overflow_cyc += last_load;
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <elapsed+0x34>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4907      	ldr	r1, [pc, #28]	; (80073f4 <elapsed+0x38>)
 80073d6:	6809      	ldr	r1, [r1, #0]
 80073d8:	440a      	add	r2, r1
 80073da:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 80073dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073e0:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 80073e2:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <elapsed+0x38>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	1a1b      	subs	r3, r3, r0
 80073e8:	4a01      	ldr	r2, [pc, #4]	; (80073f0 <elapsed+0x34>)
 80073ea:	6810      	ldr	r0, [r2, #0]
}
 80073ec:	4418      	add	r0, r3
 80073ee:	4770      	bx	lr
 80073f0:	20000e00 	.word	0x20000e00
 80073f4:	20000dfc 	.word	0x20000dfc

080073f8 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 80073f8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80073fa:	f7ff ffdf 	bl	80073bc <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <sys_clock_isr+0x38>)
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	4a0c      	ldr	r2, [pc, #48]	; (8007434 <sys_clock_isr+0x3c>)
 8007404:	6811      	ldr	r1, [r2, #0]
 8007406:	4408      	add	r0, r1
 8007408:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <sys_clock_isr+0x40>)
 8007410:	6813      	ldr	r3, [r2, #0]
 8007412:	1ac0      	subs	r0, r0, r3
 8007414:	4909      	ldr	r1, [pc, #36]	; (800743c <sys_clock_isr+0x44>)
 8007416:	fba1 1000 	umull	r1, r0, r1, r0
 800741a:	0a80      	lsrs	r0, r0, #10
		announced_cycles += dticks * CYC_PER_TICK;
 800741c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8007420:	fb01 3300 	mla	r3, r1, r0, r3
 8007424:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8007426:	f001 fcd3 	bl	8008dd0 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 800742a:	f7fc fb53 	bl	8003ad4 <z_arm_exc_exit>
}
 800742e:	bd08      	pop	{r3, pc}
 8007430:	20000e00 	.word	0x20000e00
 8007434:	20000df8 	.word	0x20000df8
 8007438:	20000df4 	.word	0x20000df4
 800743c:	51eb851f 	.word	0x51eb851f

08007440 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <sys_clock_driver_init+0x28>)
 8007442:	2210      	movs	r2, #16
 8007444:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8007448:	f640 427f 	movw	r2, #3199	; 0xc7f
 800744c:	4b07      	ldr	r3, [pc, #28]	; (800746c <sys_clock_driver_init+0x2c>)
 800744e:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8007450:	2000      	movs	r0, #0
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <sys_clock_driver_init+0x30>)
 8007454:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8007456:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800745a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 800745c:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	f042 0207 	orr.w	r2, r2, #7
 8007464:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007466:	4770      	bx	lr
 8007468:	e000ed00 	.word	0xe000ed00
 800746c:	20000dfc 	.word	0x20000dfc
 8007470:	20000e00 	.word	0x20000e00

08007474 <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8007474:	b111      	cbz	r1, 800747c <sys_clock_set_timeout+0x8>
 8007476:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800747a:	d00f      	beq.n	800749c <sys_clock_set_timeout+0x28>
{
 800747c:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 800747e:	4b37      	ldr	r3, [pc, #220]	; (800755c <sys_clock_set_timeout+0xe8>)
 8007480:	681d      	ldr	r5, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007482:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007486:	d014      	beq.n	80074b2 <sys_clock_set_timeout+0x3e>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007488:	1e46      	subs	r6, r0, #1
 800748a:	2e00      	cmp	r6, #0
 800748c:	dd14      	ble.n	80074b8 <sys_clock_set_timeout+0x44>
 800748e:	f241 4378 	movw	r3, #5240	; 0x1478
 8007492:	429e      	cmp	r6, r3
 8007494:	dd11      	ble.n	80074ba <sys_clock_set_timeout+0x46>
 8007496:	f241 4679 	movw	r6, #5241	; 0x1479
 800749a:	e00e      	b.n	80074ba <sys_clock_set_timeout+0x46>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800749c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80074a0:	6913      	ldr	r3, [r2, #16]
 80074a2:	f023 0301 	bic.w	r3, r3, #1
 80074a6:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 80074a8:	4b2c      	ldr	r3, [pc, #176]	; (800755c <sys_clock_set_timeout+0xe8>)
 80074aa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80074ae:	601a      	str	r2, [r3, #0]
		return;
 80074b0:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80074b2:	f241 4079 	movw	r0, #5241	; 0x1479
 80074b6:	e7e7      	b.n	8007488 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80074b8:	2600      	movs	r6, #0
	__asm__ volatile(
 80074ba:	f04f 0310 	mov.w	r3, #16
 80074be:	f3ef 8411 	mrs	r4, BASEPRI
 80074c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80074c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 80074ca:	f7ff ff77 	bl	80073bc <elapsed>

	val1 = SysTick->VAL;
 80074ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074d2:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 80074d4:	4b22      	ldr	r3, [pc, #136]	; (8007560 <sys_clock_set_timeout+0xec>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4410      	add	r0, r2
 80074da:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 80074dc:	4b21      	ldr	r3, [pc, #132]	; (8007564 <sys_clock_set_timeout+0xf0>)
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <sys_clock_set_timeout+0xf4>)
 80074e4:	681b      	ldr	r3, [r3, #0]

	if ((int32_t)unannounced < 0) {
 80074e6:	1ac2      	subs	r2, r0, r3
 80074e8:	d415      	bmi.n	8007516 <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 80074ea:	f44f 6c48 	mov.w	ip, #3200	; 0xc80

		/* Round delay up to next tick boundary */
		delay += unannounced;
 80074ee:	fb0c 2206 	mla	r2, ip, r6, r2
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80074f2:	f602 427f 	addw	r2, r2, #3199	; 0xc7f
 80074f6:	4e1d      	ldr	r6, [pc, #116]	; (800756c <sys_clock_set_timeout+0xf8>)
 80074f8:	fba6 6202 	umull	r6, r2, r6, r2
 80074fc:	0a92      	lsrs	r2, r2, #10
		delay -= unannounced;
 80074fe:	1a1b      	subs	r3, r3, r0
 8007500:	fb0c 3302 	mla	r3, ip, r2, r3
		delay = MAX(delay, MIN_DELAY);
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d90a      	bls.n	8007520 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 800750a:	4a19      	ldr	r2, [pc, #100]	; (8007570 <sys_clock_set_timeout+0xfc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d909      	bls.n	8007524 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8007510:	4b12      	ldr	r3, [pc, #72]	; (800755c <sys_clock_set_timeout+0xe8>)
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e008      	b.n	8007528 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 8007516:	4b11      	ldr	r3, [pc, #68]	; (800755c <sys_clock_set_timeout+0xe8>)
 8007518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e003      	b.n	8007528 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8007520:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 8007524:	4a0d      	ldr	r2, [pc, #52]	; (800755c <sys_clock_set_timeout+0xe8>)
 8007526:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 8007528:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800752c:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 800752e:	4a0b      	ldr	r2, [pc, #44]	; (800755c <sys_clock_set_timeout+0xe8>)
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	3a01      	subs	r2, #1
 8007534:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 800753a:	42b1      	cmp	r1, r6
 800753c:	d209      	bcs.n	8007552 <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 800753e:	1bad      	subs	r5, r5, r6
 8007540:	440d      	add	r5, r1
 8007542:	4428      	add	r0, r5
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <sys_clock_set_timeout+0xec>)
 8007546:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8007548:	f384 8811 	msr	BASEPRI, r4
 800754c:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8007550:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8007552:	1b8d      	subs	r5, r1, r6
 8007554:	4428      	add	r0, r5
 8007556:	4b02      	ldr	r3, [pc, #8]	; (8007560 <sys_clock_set_timeout+0xec>)
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	e7f5      	b.n	8007548 <sys_clock_set_timeout+0xd4>
 800755c:	20000dfc 	.word	0x20000dfc
 8007560:	20000df8 	.word	0x20000df8
 8007564:	20000e00 	.word	0x20000e00
 8007568:	20000df4 	.word	0x20000df4
 800756c:	51eb851f 	.word	0x51eb851f
 8007570:	00ffe880 	.word	0x00ffe880

08007574 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8007574:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007576:	f04f 0310 	mov.w	r3, #16
 800757a:	f3ef 8411 	mrs	r4, BASEPRI
 800757e:	f383 8812 	msr	BASEPRI_MAX, r3
 8007582:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007586:	f7ff ff19 	bl	80073bc <elapsed>
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <sys_clock_elapsed+0x34>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4418      	add	r0, r3
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <sys_clock_elapsed+0x38>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8007596:	f384 8811 	msr	BASEPRI, r4
 800759a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <sys_clock_elapsed+0x3c>)
 80075a0:	fba3 3000 	umull	r3, r0, r3, r0
}
 80075a4:	0a80      	lsrs	r0, r0, #10
 80075a6:	bd10      	pop	{r4, pc}
 80075a8:	20000df8 	.word	0x20000df8
 80075ac:	20000df4 	.word	0x20000df4
 80075b0:	51eb851f 	.word	0x51eb851f

080075b4 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 80075b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80075b6:	f04f 0310 	mov.w	r3, #16
 80075ba:	f3ef 8411 	mrs	r4, BASEPRI
 80075be:	f383 8812 	msr	BASEPRI_MAX, r3
 80075c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 80075c6:	f7ff fef9 	bl	80073bc <elapsed>
 80075ca:	4b04      	ldr	r3, [pc, #16]	; (80075dc <sys_clock_cycle_get_32+0x28>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4418      	add	r0, r3
	__asm__ volatile(
 80075d0:	f384 8811 	msr	BASEPRI, r4
 80075d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	20000df8 	.word	0x20000df8

080075e0 <UTILS_GetPLLOutputFrequency>:
  /* Check different PLL parameters according to RM                          */
  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     96 MHz as PLLVCO when the product is in range 1,
     48 MHz as PLLVCO when the product is in range 2,
     24 MHz when the product is in range 3. */
  pllfreq = PLL_InputFrequency * (PLLMulTable[UTILS_PLLInitStruct->PLLMul >> RCC_CFGR_PLLMUL_Pos]);
 80075e0:	680a      	ldr	r2, [r1, #0]
 80075e2:	0c92      	lsrs	r2, r2, #18
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <UTILS_GetPLLOutputFrequency+0x18>)
 80075e6:	5c9b      	ldrb	r3, [r3, r2]
 80075e8:	fb03 f000 	mul.w	r0, r3, r0
  assert_param(IS_LL_UTILS_PLLVCO_OUTPUT(pllfreq));

  /* The application software must set correctly the PLL multiplication factor to avoid exceeding
     maximum frequency 32000000 in range 1 */
  pllfreq = pllfreq / ((UTILS_PLLInitStruct->PLLDiv >> RCC_CFGR_PLLDIV_Pos)+1U);
 80075ec:	684b      	ldr	r3, [r1, #4]
 80075ee:	0d9b      	lsrs	r3, r3, #22
 80075f0:	3301      	adds	r3, #1
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
}
 80075f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80075f6:	4770      	bx	lr
 80075f8:	0800e8d4 	.word	0x0800e8d4

080075fc <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <UTILS_PLL_IsBusy+0x14>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007604:	d001      	beq.n	800760a <UTILS_PLL_IsBusy+0xe>

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800760a:	2000      	movs	r0, #0
  }

  return status;
}
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40023800 	.word	0x40023800

08007614 <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <LL_SetSystemCoreClock+0x8>)
 8007616:	6018      	str	r0, [r3, #0]
}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	200000b0 	.word	0x200000b0

08007620 <LL_SetFlashLatency>:
  if ((Frequency == 0U) || (Frequency > UTILS_MAX_FREQUENCY_SCALE1))
 8007620:	1e42      	subs	r2, r0, #1
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <LL_SetFlashLatency+0x70>)
 8007624:	429a      	cmp	r2, r3
 8007626:	d231      	bcs.n	800768c <LL_SetFlashLatency+0x6c>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8007628:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <LL_SetFlashLatency+0x74>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007634:	d01c      	beq.n	8007670 <LL_SetFlashLatency+0x50>
 8007636:	4b17      	ldr	r3, [pc, #92]	; (8007694 <LL_SetFlashLatency+0x74>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    else if (LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	d01a      	beq.n	800767a <LL_SetFlashLatency+0x5a>
      if (Frequency > UTILS_SCALE3_LATENCY1_FREQ)
 8007644:	4b14      	ldr	r3, [pc, #80]	; (8007698 <LL_SetFlashLatency+0x78>)
 8007646:	4298      	cmp	r0, r3
 8007648:	d91c      	bls.n	8007684 <LL_SetFlashLatency+0x64>
  * @rmtoll FLASH_ACR    ACC64         LL_FLASH_Enable64bitAccess
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_Enable64bitAccess(void)
{
  SET_BIT(FLASH->ACR, FLASH_ACR_ACC64);
 800764a:	4a14      	ldr	r2, [pc, #80]	; (800769c <LL_SetFlashLatency+0x7c>)
 800764c:	6813      	ldr	r3, [r2, #0]
 800764e:	f043 0304 	orr.w	r3, r3, #4
 8007652:	6013      	str	r3, [r2, #0]
}
 8007654:	2101      	movs	r1, #1
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007656:	4a11      	ldr	r2, [pc, #68]	; (800769c <LL_SetFlashLatency+0x7c>)
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	430b      	orrs	r3, r1
 8007660:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007662:	6813      	ldr	r3, [r2, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
    if (LL_FLASH_GetLatency() != latency)
 8007668:	4299      	cmp	r1, r3
 800766a:	d00d      	beq.n	8007688 <LL_SetFlashLatency+0x68>
      status = ERROR;
 800766c:	2001      	movs	r0, #1
}
 800766e:	4770      	bx	lr
      if (Frequency > UTILS_SCALE1_LATENCY1_FREQ)
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <LL_SetFlashLatency+0x80>)
 8007672:	4298      	cmp	r0, r3
 8007674:	d8e9      	bhi.n	800764a <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007676:	2100      	movs	r1, #0
 8007678:	e7ed      	b.n	8007656 <LL_SetFlashLatency+0x36>
      if (Frequency > UTILS_SCALE2_LATENCY1_FREQ)
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <LL_SetFlashLatency+0x84>)
 800767c:	4298      	cmp	r0, r3
 800767e:	d8e4      	bhi.n	800764a <LL_SetFlashLatency+0x2a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007680:	2100      	movs	r1, #0
 8007682:	e7e8      	b.n	8007656 <LL_SetFlashLatency+0x36>
 8007684:	2100      	movs	r1, #0
 8007686:	e7e6      	b.n	8007656 <LL_SetFlashLatency+0x36>
  ErrorStatus status = SUCCESS;
 8007688:	2000      	movs	r0, #0
 800768a:	4770      	bx	lr
    status = ERROR;
 800768c:	2001      	movs	r0, #1
 800768e:	4770      	bx	lr
 8007690:	01e84800 	.word	0x01e84800
 8007694:	40007000 	.word	0x40007000
 8007698:	001e8480 	.word	0x001e8480
 800769c:	40023c00 	.word	0x40023c00
 80076a0:	00f42400 	.word	0x00f42400
 80076a4:	007a1200 	.word	0x007a1200

080076a8 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80076ac:	680b      	ldr	r3, [r1, #0]
 80076ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80076b2:	4a24      	ldr	r2, [pc, #144]	; (8007744 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 80076b4:	5cd3      	ldrb	r3, [r2, r3]
 80076b6:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if (SystemCoreClock < hclk_frequency)
 80076ba:	4b23      	ldr	r3, [pc, #140]	; (8007748 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	42ab      	cmp	r3, r5
 80076c0:	d32f      	bcc.n	8007722 <UTILS_EnablePLLAndSwitchSystem+0x7a>
  ErrorStatus status = SUCCESS;
 80076c2:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80076c4:	4a21      	ldr	r2, [pc, #132]	; (800774c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80076c6:	6813      	ldr	r3, [r2, #0]
 80076c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076cc:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80076ce:	4b1f      	ldr	r3, [pc, #124]	; (800774c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80076d6:	d0fa      	beq.n	80076ce <UTILS_EnablePLLAndSwitchSystem+0x26>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 80076d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80076da:	4b1c      	ldr	r3, [pc, #112]	; (800774c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80076e2:	430a      	orrs	r2, r1
 80076e4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	f042 0203 	orr.w	r2, r2, #3
 80076ec:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80076ee:	4b17      	ldr	r3, [pc, #92]	; (800774c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80076f6:	2b0c      	cmp	r3, #12
 80076f8:	d1f9      	bne.n	80076ee <UTILS_EnablePLLAndSwitchSystem+0x46>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 80076fa:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80076fc:	4b13      	ldr	r3, [pc, #76]	; (800774c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 80076fe:	6899      	ldr	r1, [r3, #8]
 8007700:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8007708:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800770a:	6899      	ldr	r1, [r3, #8]
 800770c:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8007710:	430a      	orrs	r2, r1
 8007712:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (SystemCoreClock > hclk_frequency)
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <UTILS_EnablePLLAndSwitchSystem+0xa0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	42ab      	cmp	r3, r5
 800771a:	d809      	bhi.n	8007730 <UTILS_EnablePLLAndSwitchSystem+0x88>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 800771c:	b16e      	cbz	r6, 800773a <UTILS_EnablePLLAndSwitchSystem+0x92>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800771e:	4630      	mov	r0, r6
 8007720:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8007722:	4628      	mov	r0, r5
 8007724:	f7ff ff7c 	bl	8007620 <LL_SetFlashLatency>
  if (status == SUCCESS)
 8007728:	4606      	mov	r6, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d1f2      	bne.n	8007714 <UTILS_EnablePLLAndSwitchSystem+0x6c>
 800772e:	e7c9      	b.n	80076c4 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8007730:	4628      	mov	r0, r5
 8007732:	f7ff ff75 	bl	8007620 <LL_SetFlashLatency>
 8007736:	4606      	mov	r6, r0
 8007738:	e7f0      	b.n	800771c <UTILS_EnablePLLAndSwitchSystem+0x74>
    LL_SetSystemCoreClock(hclk_frequency);
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff ff6a 	bl	8007614 <LL_SetSystemCoreClock>
 8007740:	e7ed      	b.n	800771e <UTILS_EnablePLLAndSwitchSystem+0x76>
 8007742:	bf00      	nop
 8007744:	0800e8c4 	.word	0x0800e8c4
 8007748:	200000b0 	.word	0x200000b0
 800774c:	40023800 	.word	0x40023800

08007750 <LL_PLL_ConfigSystemClock_HSI>:
{
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8007756:	f7ff ff51 	bl	80075fc <UTILS_PLL_IsBusy>
 800775a:	b9f8      	cbnz	r0, 800779c <LL_PLL_ConfigSystemClock_HSI+0x4c>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800775c:	4621      	mov	r1, r4
 800775e:	4810      	ldr	r0, [pc, #64]	; (80077a0 <LL_PLL_ConfigSystemClock_HSI+0x50>)
 8007760:	f7ff ff3e 	bl	80075e0 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f013 0f02 	tst.w	r3, #2
 800776c:	d109      	bne.n	8007782 <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800776e:	4a0d      	ldr	r2, [pc, #52]	; (80077a4 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007770:	6813      	ldr	r3, [r2, #0]
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f013 0f02 	tst.w	r3, #2
 8007780:	d0fa      	beq.n	8007778 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	6864      	ldr	r4, [r4, #4]
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8007786:	4907      	ldr	r1, [pc, #28]	; (80077a4 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8007788:	688b      	ldr	r3, [r1, #8]
 800778a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800778e:	4322      	orrs	r2, r4
 8007790:	4313      	orrs	r3, r2
 8007792:	608b      	str	r3, [r1, #8]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007794:	4629      	mov	r1, r5
 8007796:	f7ff ff87 	bl	80076a8 <UTILS_EnablePLLAndSwitchSystem>
}
 800779a:	bd38      	pop	{r3, r4, r5, pc}
    status = ERROR;
 800779c:	2001      	movs	r0, #1
 800779e:	e7fc      	b.n	800779a <LL_PLL_ConfigSystemClock_HSI+0x4a>
 80077a0:	00f42400 	.word	0x00f42400
 80077a4:	40023800 	.word	0x40023800

080077a8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 80077aa:	e000      	b.n	80077ae <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 80077ac:	3318      	adds	r3, #24
	while (dev < __device_end) {
 80077ae:	4a03      	ldr	r2, [pc, #12]	; (80077bc <z_device_state_init+0x14>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d3fb      	bcc.n	80077ac <z_device_state_init+0x4>
	}
}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	0800d664 	.word	0x0800d664
 80077bc:	0800d784 	.word	0x0800d784

080077c0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80077c4:	4b11      	ldr	r3, [pc, #68]	; (800780c <z_sys_init_run_level+0x4c>)
 80077c6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80077ca:	e009      	b.n	80077e0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 80077cc:	4240      	negs	r0, r0
 80077ce:	e017      	b.n	8007800 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 80077d0:	68eb      	ldr	r3, [r5, #12]
 80077d2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 80077d4:	68ea      	ldr	r2, [r5, #12]
 80077d6:	7853      	ldrb	r3, [r2, #1]
 80077d8:	f043 0301 	orr.w	r3, r3, #1
 80077dc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80077de:	3408      	adds	r4, #8
 80077e0:	1c73      	adds	r3, r6, #1
 80077e2:	4a0a      	ldr	r2, [pc, #40]	; (800780c <z_sys_init_run_level+0x4c>)
 80077e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d90d      	bls.n	8007808 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 80077ec:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4628      	mov	r0, r5
 80077f2:	4798      	blx	r3
		if (dev != NULL) {
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	d0f2      	beq.n	80077de <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d0eb      	beq.n	80077d4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
 80077fc:	2800      	cmp	r0, #0
 80077fe:	dbe5      	blt.n	80077cc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8007800:	28ff      	cmp	r0, #255	; 0xff
 8007802:	dde5      	ble.n	80077d0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8007804:	20ff      	movs	r0, #255	; 0xff
 8007806:	e7e3      	b.n	80077d0 <z_sys_init_run_level+0x10>
		}
	}
}
 8007808:	bd70      	pop	{r4, r5, r6, pc}
 800780a:	bf00      	nop
 800780c:	0800e8e0 	.word	0x0800e8e0

08007810 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8007810:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8007812:	4605      	mov	r5, r0
 8007814:	b328      	cbz	r0, 8007862 <z_impl_device_get_binding+0x52>
 8007816:	7803      	ldrb	r3, [r0, #0]
 8007818:	b32b      	cbz	r3, 8007866 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800781a:	4c14      	ldr	r4, [pc, #80]	; (800786c <z_impl_device_get_binding+0x5c>)
 800781c:	e000      	b.n	8007820 <z_impl_device_get_binding+0x10>
 800781e:	3418      	adds	r4, #24
 8007820:	4b13      	ldr	r3, [pc, #76]	; (8007870 <z_impl_device_get_binding+0x60>)
 8007822:	429c      	cmp	r4, r3
 8007824:	d008      	beq.n	8007838 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8007826:	4620      	mov	r0, r4
 8007828:	f004 ff3b 	bl	800c6a2 <z_device_ready>
 800782c:	2800      	cmp	r0, #0
 800782e:	d0f6      	beq.n	800781e <z_impl_device_get_binding+0xe>
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	42ab      	cmp	r3, r5
 8007834:	d1f3      	bne.n	800781e <z_impl_device_get_binding+0xe>
 8007836:	e012      	b.n	800785e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8007838:	4c0c      	ldr	r4, [pc, #48]	; (800786c <z_impl_device_get_binding+0x5c>)
 800783a:	e000      	b.n	800783e <z_impl_device_get_binding+0x2e>
 800783c:	3418      	adds	r4, #24
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <z_impl_device_get_binding+0x60>)
 8007840:	429c      	cmp	r4, r3
 8007842:	d00b      	beq.n	800785c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007844:	4620      	mov	r0, r4
 8007846:	f004 ff2c 	bl	800c6a2 <z_device_ready>
 800784a:	2800      	cmp	r0, #0
 800784c:	d0f6      	beq.n	800783c <z_impl_device_get_binding+0x2c>
 800784e:	6821      	ldr	r1, [r4, #0]
 8007850:	4628      	mov	r0, r5
 8007852:	f7f9 fa6a 	bl	8000d2a <strcmp>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1f0      	bne.n	800783c <z_impl_device_get_binding+0x2c>
 800785a:	e000      	b.n	800785e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800785c:	2400      	movs	r4, #0
}
 800785e:	4620      	mov	r0, r4
 8007860:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8007862:	4604      	mov	r4, r0
 8007864:	e7fb      	b.n	800785e <z_impl_device_get_binding+0x4e>
 8007866:	2400      	movs	r4, #0
 8007868:	e7f9      	b.n	800785e <z_impl_device_get_binding+0x4e>
 800786a:	bf00      	nop
 800786c:	0800d664 	.word	0x0800d664
 8007870:	0800d784 	.word	0x0800d784

08007874 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8007874:	2804      	cmp	r0, #4
 8007876:	d80c      	bhi.n	8007892 <reason_to_str+0x1e>
 8007878:	e8df f000 	tbb	[pc, r0]
 800787c:	07050d03 	.word	0x07050d03
 8007880:	09          	.byte	0x09
 8007881:	00          	.byte	0x00
 8007882:	4806      	ldr	r0, [pc, #24]	; (800789c <reason_to_str+0x28>)
 8007884:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 8007886:	4806      	ldr	r0, [pc, #24]	; (80078a0 <reason_to_str+0x2c>)
 8007888:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800788a:	4806      	ldr	r0, [pc, #24]	; (80078a4 <reason_to_str+0x30>)
 800788c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800788e:	4806      	ldr	r0, [pc, #24]	; (80078a8 <reason_to_str+0x34>)
 8007890:	4770      	bx	lr
	default:
		return "Unknown error";
 8007892:	4806      	ldr	r0, [pc, #24]	; (80078ac <reason_to_str+0x38>)
 8007894:	4770      	bx	lr
		return "Unhandled interrupt";
 8007896:	4806      	ldr	r0, [pc, #24]	; (80078b0 <reason_to_str+0x3c>)
	}
}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	0800e948 	.word	0x0800e948
 80078a0:	0800e91c 	.word	0x0800e91c
 80078a4:	0800e92c 	.word	0x0800e92c
 80078a8:	0800e938 	.word	0x0800e938
 80078ac:	0800e8f8 	.word	0x0800e8f8
 80078b0:	0800e908 	.word	0x0800e908

080078b4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80078b4:	b130      	cbz	r0, 80078c4 <thread_name_get+0x10>
{
 80078b6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80078b8:	f004 ff72 	bl	800c7a0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80078bc:	b120      	cbz	r0, 80078c8 <thread_name_get+0x14>
 80078be:	7803      	ldrb	r3, [r0, #0]
 80078c0:	b123      	cbz	r3, 80078cc <thread_name_get+0x18>
}
 80078c2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 80078c4:	4802      	ldr	r0, [pc, #8]	; (80078d0 <thread_name_get+0x1c>)
}
 80078c6:	4770      	bx	lr
		thread_name = "unknown";
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <thread_name_get+0x1c>)
 80078ca:	e7fa      	b.n	80078c2 <thread_name_get+0xe>
 80078cc:	4800      	ldr	r0, [pc, #0]	; (80078d0 <thread_name_get+0x1c>)
	return thread_name;
 80078ce:	e7f8      	b.n	80078c2 <thread_name_get+0xe>
 80078d0:	0800e958 	.word	0x0800e958

080078d4 <k_sys_fatal_error_handler>:
{
 80078d4:	b510      	push	{r4, lr}
 80078d6:	4604      	mov	r4, r0
	z_impl_log_panic();
 80078d8:	f7fb fc50 	bl	800317c <z_impl_log_panic>
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <k_sys_fatal_error_handler+0x30>)
 80078de:	4a0a      	ldr	r2, [pc, #40]	; (8007908 <k_sys_fatal_error_handler+0x34>)
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
 80078e4:	f04f 0100 	mov.w	r1, #0
 80078e8:	2201      	movs	r2, #1
 80078ea:	f362 0102 	bfi	r1, r2, #0, #3
 80078ee:	f36f 01c5 	bfc	r1, #3, #3
 80078f2:	f363 118f 	bfi	r1, r3, #6, #10
 80078f6:	4805      	ldr	r0, [pc, #20]	; (800790c <k_sys_fatal_error_handler+0x38>)
 80078f8:	f7fb fbae 	bl	8003058 <log_0>
	arch_system_halt(reason);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f004 fedd 	bl	800c6bc <arch_system_halt>
 8007902:	bf00      	nop
 8007904:	0800d96c 	.word	0x0800d96c
 8007908:	0800d954 	.word	0x0800d954
 800790c:	0800e960 	.word	0x0800e960

08007910 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	4605      	mov	r5, r0
 8007918:	460e      	mov	r6, r1
	__asm__ volatile(
 800791a:	f04f 0310 	mov.w	r3, #16
 800791e:	f3ef 8711 	mrs	r7, BASEPRI
 8007922:	f383 8812 	msr	BASEPRI_MAX, r3
 8007926:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800792a:	f001 f90f 	bl	8008b4c <z_impl_z_current_get>
 800792e:	4604      	mov	r4, r0
 8007930:	4b29      	ldr	r3, [pc, #164]	; (80079d8 <z_fatal_error+0xc8>)
 8007932:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <z_fatal_error+0xcc>)
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8007938:	f04f 0800 	mov.w	r8, #0
 800793c:	2201      	movs	r2, #1
 800793e:	f362 0802 	bfi	r8, r2, #0, #3
 8007942:	f36f 08c5 	bfc	r8, #3, #3
 8007946:	f363 188f 	bfi	r8, r3, #6, #10
 800794a:	4628      	mov	r0, r5
 800794c:	f7ff ff92 	bl	8007874 <reason_to_str>
 8007950:	4602      	mov	r2, r0
 8007952:	f8ad 8000 	strh.w	r8, [sp]
 8007956:	2300      	movs	r3, #0
 8007958:	4629      	mov	r1, r5
 800795a:	4821      	ldr	r0, [pc, #132]	; (80079e0 <z_fatal_error+0xd0>)
 800795c:	f7fb fb42 	bl	8002fe4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8007960:	b11e      	cbz	r6, 800796a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8007962:	69f3      	ldr	r3, [r6, #28]
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	bb2b      	cbnz	r3, 80079b6 <z_fatal_error+0xa6>
 800796a:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <z_fatal_error+0xc8>)
 800796c:	4a1b      	ldr	r2, [pc, #108]	; (80079dc <z_fatal_error+0xcc>)
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	2201      	movs	r2, #1
 8007978:	f362 0802 	bfi	r8, r2, #0, #3
 800797c:	f36f 08c5 	bfc	r8, #3, #3
 8007980:	f363 188f 	bfi	r8, r3, #6, #10
 8007984:	4620      	mov	r0, r4
 8007986:	f7ff ff95 	bl	80078b4 <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 800798a:	f7fb f9ef 	bl	8002d6c <z_log_strdup>
 800798e:	4602      	mov	r2, r0
 8007990:	4643      	mov	r3, r8
 8007992:	4621      	mov	r1, r4
 8007994:	4813      	ldr	r0, [pc, #76]	; (80079e4 <z_fatal_error+0xd4>)
 8007996:	f7fb fbbb 	bl	8003110 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	f7ff ff99 	bl	80078d4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80079a2:	f387 8811 	msr	BASEPRI, r7
 80079a6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7fc fc64 	bl	8004278 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80079b0:	b002      	add	sp, #8
 80079b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b6:	4b08      	ldr	r3, [pc, #32]	; (80079d8 <z_fatal_error+0xc8>)
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <z_fatal_error+0xcc>)
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
 80079be:	f04f 0100 	mov.w	r1, #0
 80079c2:	2201      	movs	r2, #1
 80079c4:	f362 0102 	bfi	r1, r2, #0, #3
 80079c8:	f36f 01c5 	bfc	r1, #3, #3
 80079cc:	f363 118f 	bfi	r1, r3, #6, #10
 80079d0:	4805      	ldr	r0, [pc, #20]	; (80079e8 <z_fatal_error+0xd8>)
 80079d2:	f7fb fb41 	bl	8003058 <log_0>
 80079d6:	e7c8      	b.n	800796a <z_fatal_error+0x5a>
 80079d8:	0800d96c 	.word	0x0800d96c
 80079dc:	0800d954 	.word	0x0800d954
 80079e0:	0800e970 	.word	0x0800e970
 80079e4:	0800e9bc 	.word	0x0800e9bc
 80079e8:	0800e998 	.word	0x0800e998

080079ec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 80079ec:	b510      	push	{r4, lr}
 80079ee:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 80079f0:	4c10      	ldr	r4, [pc, #64]	; (8007a34 <init_idle_thread+0x48>)
 80079f2:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
 80079f6:	eb00 0cc0 	add.w	ip, r0, r0, lsl #3
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80079fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80079fe:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <init_idle_thread+0x4c>)
 8007a00:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
 8007a04:	2300      	movs	r3, #0
 8007a06:	9305      	str	r3, [sp, #20]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	9204      	str	r2, [sp, #16]
 8007a0c:	220f      	movs	r2, #15
 8007a0e:	9203      	str	r2, [sp, #12]
 8007a10:	9302      	str	r3, [sp, #8]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	9000      	str	r0, [sp, #0]
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <init_idle_thread+0x50>)
 8007a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a1c:	4908      	ldr	r1, [pc, #32]	; (8007a40 <init_idle_thread+0x54>)
 8007a1e:	eb01 114c 	add.w	r1, r1, ip, lsl #5
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f920 	bl	8007c68 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8007a28:	7b63      	ldrb	r3, [r4, #13]
 8007a2a:	f023 0304 	bic.w	r3, r3, #4
 8007a2e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8007a30:	b006      	add	sp, #24
 8007a32:	bd10      	pop	{r4, pc}
 8007a34:	20000728 	.word	0x20000728
 8007a38:	20000e04 	.word	0x20000e04
 8007a3c:	0800c807 	.word	0x0800c807
 8007a40:	20002e20 	.word	0x20002e20

08007a44 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8007a48:	f000 ffca 	bl	80089e0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8007a4c:	4d1b      	ldr	r5, [pc, #108]	; (8007abc <prepare_multithreading+0x78>)
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <prepare_multithreading+0x7c>)
 8007a50:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8007a52:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <prepare_multithreading+0x80>)
 8007a54:	9305      	str	r3, [sp, #20]
 8007a56:	2301      	movs	r3, #1
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	2400      	movs	r4, #0
 8007a5c:	9403      	str	r4, [sp, #12]
 8007a5e:	9402      	str	r4, [sp, #8]
 8007a60:	9401      	str	r4, [sp, #4]
 8007a62:	9400      	str	r4, [sp, #0]
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <prepare_multithreading+0x84>)
 8007a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a6a:	4918      	ldr	r1, [pc, #96]	; (8007acc <prepare_multithreading+0x88>)
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f8fb 	bl	8007c68 <z_setup_new_thread>
 8007a72:	4606      	mov	r6, r0
 8007a74:	7b6b      	ldrb	r3, [r5, #13]
 8007a76:	f023 0304 	bic.w	r3, r3, #4
 8007a7a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f004 ff9b 	bl	800c9b8 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8007a82:	2c00      	cmp	r4, #0
 8007a84:	dd02      	ble.n	8007a8c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 8007a86:	4630      	mov	r0, r6
 8007a88:	b006      	add	sp, #24
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff ffad 	bl	80079ec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8007a92:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <prepare_multithreading+0x8c>)
 8007a94:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8007a98:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007a9c:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <prepare_multithreading+0x7c>)
 8007a9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007aa2:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 8007aa4:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 8007aa6:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 8007aaa:	4a0a      	ldr	r2, [pc, #40]	; (8007ad4 <prepare_multithreading+0x90>)
 8007aac:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 8007ab0:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 8007ab4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8007ab6:	3401      	adds	r4, #1
 8007ab8:	e7e3      	b.n	8007a82 <prepare_multithreading+0x3e>
 8007aba:	bf00      	nop
 8007abc:	200007a8 	.word	0x200007a8
 8007ac0:	20000e04 	.word	0x20000e04
 8007ac4:	0800dc30 	.word	0x0800dc30
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	20001e00 	.word	0x20001e00
 8007ad0:	20000728 	.word	0x20000728
 8007ad4:	20002f40 	.word	0x20002f40

08007ad8 <bg_thread_main>:
{
 8007ad8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <bg_thread_main+0x30>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8007ae0:	2002      	movs	r0, #2
 8007ae2:	f7ff fe6d 	bl	80077c0 <z_sys_init_run_level>
	boot_banner();
 8007ae6:	f001 fd83 	bl	80095f0 <boot_banner>
	z_cpp_init_static();
 8007aea:	f003 fde3 	bl	800b6b4 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8007aee:	2003      	movs	r0, #3
 8007af0:	f7ff fe66 	bl	80077c0 <z_sys_init_run_level>
	z_init_static_threads();
 8007af4:	f000 f8e8 	bl	8007cc8 <z_init_static_threads>
	main();
 8007af8:	f005 f9f0 	bl	800cedc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8007afc:	4a03      	ldr	r2, [pc, #12]	; (8007b0c <bg_thread_main+0x34>)
 8007afe:	7b13      	ldrb	r3, [r2, #12]
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8007b06:	bd08      	pop	{r3, pc}
 8007b08:	20000e65 	.word	0x20000e65
 8007b0c:	200007a8 	.word	0x200007a8

08007b10 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8007b10:	b508      	push	{r3, lr}
 8007b12:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8007b14:	4a01      	ldr	r2, [pc, #4]	; (8007b1c <switch_to_main_thread+0xc>)
 8007b16:	4802      	ldr	r0, [pc, #8]	; (8007b20 <switch_to_main_thread+0x10>)
 8007b18:	f7fb ffb2 	bl	8003a80 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8007b1c:	08007ad9 	.word	0x08007ad9
 8007b20:	200007a8 	.word	0x200007a8

08007b24 <z_bss_zero>:
{
 8007b24:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8007b26:	4803      	ldr	r0, [pc, #12]	; (8007b34 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8007b28:	4a03      	ldr	r2, [pc, #12]	; (8007b38 <z_bss_zero+0x14>)
 8007b2a:	1a12      	subs	r2, r2, r0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	f005 f9ed 	bl	800cf0c <memset>
}
 8007b32:	bd08      	pop	{r3, pc}
 8007b34:	200004b8 	.word	0x200004b8
 8007b38:	20000e68 	.word	0x20000e68

08007b3c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8007b3c:	b500      	push	{lr}
 8007b3e:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8007b40:	f7fb f844 	bl	8002bcc <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <z_cstart+0x78>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007b46:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8007b4a:	4c1b      	ldr	r4, [pc, #108]	; (8007bb8 <z_cstart+0x7c>)
 8007b4c:	6963      	ldr	r3, [r4, #20]
 8007b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b52:	6163      	str	r3, [r4, #20]
 8007b54:	23f0      	movs	r3, #240	; 0xf0
 8007b56:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	77e5      	strb	r5, [r4, #31]
 8007b5e:	7625      	strb	r5, [r4, #24]
 8007b60:	7665      	strb	r5, [r4, #25]
 8007b62:	76a5      	strb	r5, [r4, #26]
 8007b64:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8007b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b6a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007b6e:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8007b70:	f7fc fb40 	bl	80041f4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8007b74:	f7fb fe48 	bl	8003808 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8007b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b7c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8007b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8007b80:	f7fc fc60 	bl	8004444 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8007b84:	f7fc fb8e 	bl	80042a4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8007b88:	2401      	movs	r4, #1
 8007b8a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8007b8e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 8007b92:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 8007b94:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8007b96:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <z_cstart+0x80>)
 8007b98:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8007b9c:	f7ff fe04 	bl	80077a8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7ff fe0d 	bl	80077c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7ff fe0a 	bl	80077c0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 8007bac:	f7ff ff4a 	bl	8007a44 <prepare_multithreading>
 8007bb0:	f7ff ffae 	bl	8007b10 <switch_to_main_thread>
 8007bb4:	20003760 	.word	0x20003760
 8007bb8:	e000ed00 	.word	0xe000ed00
 8007bbc:	20000e04 	.word	0x20000e04

08007bc0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8007bc0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8007bc2:	4c06      	ldr	r4, [pc, #24]	; (8007bdc <init_mem_slab_module+0x1c>)
	int rc = 0;
 8007bc4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8007bc6:	e000      	b.n	8007bca <init_mem_slab_module+0xa>
 8007bc8:	3420      	adds	r4, #32
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <init_mem_slab_module+0x20>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d204      	bcs.n	8007bda <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f004 fd7c 	bl	800c6ce <create_free_list>
		if (rc < 0) {
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	daf6      	bge.n	8007bc8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 8007bda:	bd10      	pop	{r4, pc}
 8007bdc:	20000390 	.word	0x20000390
 8007be0:	20000390 	.word	0x20000390

08007be4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8007be4:	b530      	push	{r4, r5, lr}
 8007be6:	b083      	sub	sp, #12
 8007be8:	460d      	mov	r5, r1
	__asm__ volatile(
 8007bea:	f04f 0410 	mov.w	r4, #16
 8007bee:	f3ef 8111 	mrs	r1, BASEPRI
 8007bf2:	f384 8812 	msr	BASEPRI_MAX, r4
 8007bf6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 8007bfa:	6984      	ldr	r4, [r0, #24]
 8007bfc:	b16c      	cbz	r4, 8007c1a <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
 8007bfe:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 8007c06:	69c3      	ldr	r3, [r0, #28]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8007c0c:	2000      	movs	r0, #0
	__asm__ volatile(
 8007c0e:	f381 8811 	msr	BASEPRI, r1
 8007c12:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 8007c16:	b003      	add	sp, #12
 8007c18:	bd30      	pop	{r4, r5, pc}
 8007c1a:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8007c1e:	ea53 0402 	orrs.w	r4, r3, r2
 8007c22:	d104      	bne.n	8007c2e <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 8007c24:	2300      	movs	r3, #0
 8007c26:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
 8007c28:	f06f 000b 	mvn.w	r0, #11
 8007c2c:	e7ef      	b.n	8007c0e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8007c2e:	9200      	str	r2, [sp, #0]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	4602      	mov	r2, r0
 8007c34:	4660      	mov	r0, ip
 8007c36:	f000 fdab 	bl	8008790 <z_pend_curr>
		if (result == 0) {
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d1eb      	bne.n	8007c16 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
 8007c3e:	4b02      	ldr	r3, [pc, #8]	; (8007c48 <k_mem_slab_alloc+0x64>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	602b      	str	r3, [r5, #0]
		return result;
 8007c46:	e7e6      	b.n	8007c16 <k_mem_slab_alloc+0x32>
 8007c48:	20000e04 	.word	0x20000e04

08007c4c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8007c4c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8007c4e:	ea53 0102 	orrs.w	r1, r3, r2
 8007c52:	d102      	bne.n	8007c5a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 8007c54:	f004 fda6 	bl	800c7a4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8007c58:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8007c5a:	4902      	ldr	r1, [pc, #8]	; (8007c64 <schedule_new_thread+0x18>)
 8007c5c:	3018      	adds	r0, #24
 8007c5e:	f001 f829 	bl	8008cb4 <z_add_timeout>
 8007c62:	e7f9      	b.n	8007c58 <schedule_new_thread+0xc>
 8007c64:	0800c9f1 	.word	0x0800c9f1

08007c68 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8007c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460e      	mov	r6, r1
 8007c70:	4615      	mov	r5, r2
 8007c72:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8007c74:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8007c78:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8007c7a:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8007c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c7e:	2204      	movs	r2, #4
 8007c80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c82:	f004 fd93 	bl	800c7ac <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8007c86:	462a      	mov	r2, r5
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f004 fd70 	bl	800c770 <setup_thread_stack>
 8007c90:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8007c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c94:	9302      	str	r3, [sp, #8]
 8007c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f7fb fea5 	bl	80039f4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <z_setup_new_thread+0x5c>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	b123      	cbz	r3, 8007cbe <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb6:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 8007cb8:	4628      	mov	r0, r5
 8007cba:	b005      	add	sp, #20
 8007cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 8007cbe:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 8007cc0:	e7fa      	b.n	8007cb8 <z_setup_new_thread+0x50>
 8007cc2:	bf00      	nop
 8007cc4:	20000e04 	.word	0x20000e04

08007cc8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 8007ccc:	4c1d      	ldr	r4, [pc, #116]	; (8007d44 <z_init_static_threads+0x7c>)
 8007cce:	e014      	b.n	8007cfa <z_init_static_threads+0x32>
		z_setup_new_thread(
 8007cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	6a23      	ldr	r3, [r4, #32]
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	69a3      	ldr	r3, [r4, #24]
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	6963      	ldr	r3, [r4, #20]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	68e3      	ldr	r3, [r4, #12]
 8007cea:	68a2      	ldr	r2, [r4, #8]
 8007cec:	6861      	ldr	r1, [r4, #4]
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	f7ff ffba 	bl	8007c68 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 8007cf8:	3430      	adds	r4, #48	; 0x30
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <z_init_static_threads+0x80>)
 8007cfc:	429c      	cmp	r4, r3
 8007cfe:	d3e7      	bcc.n	8007cd0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8007d00:	f000 fbd4 	bl	80084ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8007d04:	4c0f      	ldr	r4, [pc, #60]	; (8007d44 <z_init_static_threads+0x7c>)
 8007d06:	e000      	b.n	8007d0a <z_init_static_threads+0x42>
 8007d08:	3430      	adds	r4, #48	; 0x30
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <z_init_static_threads+0x80>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	d214      	bcs.n	8007d3a <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8007d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d16:	d0f7      	beq.n	8007d08 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8007d18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d1c:	17d8      	asrs	r0, r3, #31
 8007d1e:	0082      	lsls	r2, r0, #2
 8007d20:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8007d24:	0099      	lsls	r1, r3, #2
 8007d26:	18c9      	adds	r1, r1, r3
 8007d28:	eb40 0002 	adc.w	r0, r0, r2
 8007d2c:	184a      	adds	r2, r1, r1
 8007d2e:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 8007d32:	6820      	ldr	r0, [r4, #0]
 8007d34:	f7ff ff8a 	bl	8007c4c <schedule_new_thread>
 8007d38:	e7e6      	b.n	8007d08 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8007d3a:	f000 fddf 	bl	80088fc <k_sched_unlock>
}
 8007d3e:	b006      	add	sp, #24
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	200002c8 	.word	0x200002c8
 8007d48:	20000358 	.word	0x20000358

08007d4c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8007d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	4604      	mov	r4, r0
 8007d54:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 8007d56:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 8007d5a:	f04f 0110 	mov.w	r1, #16
 8007d5e:	f3ef 8611 	mrs	r6, BASEPRI
 8007d62:	f381 8812 	msr	BASEPRI_MAX, r1
 8007d66:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8007d6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	4288      	cmp	r0, r1
 8007d70:	d30b      	bcc.n	8007d8a <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007d72:	ea53 0102 	orrs.w	r1, r3, r2
 8007d76:	d137      	bne.n	8007de8 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8007d78:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8007d7c:	f386 8811 	msr	BASEPRI, r6
 8007d80:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8007d84:	b002      	add	sp, #8
 8007d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f004 fedb 	bl	800cb46 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8007d90:	4680      	mov	r8, r0
 8007d92:	b180      	cbz	r0, 8007db6 <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007d94:	68e2      	ldr	r2, [r4, #12]
 8007d96:	4629      	mov	r1, r5
 8007d98:	6940      	ldr	r0, [r0, #20]
 8007d9a:	f005 f8a9 	bl	800cef0 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8007d9e:	2400      	movs	r4, #0
 8007da0:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 8007da4:	4640      	mov	r0, r8
 8007da6:	f004 fe07 	bl	800c9b8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8007daa:	4631      	mov	r1, r6
 8007dac:	4638      	mov	r0, r7
 8007dae:	f000 fb61 	bl	8008474 <z_reschedule>
			return 0;
 8007db2:	4620      	mov	r0, r4
 8007db4:	e7e6      	b.n	8007d84 <z_impl_k_msgq_put+0x38>
 8007db6:	68e2      	ldr	r2, [r4, #12]
 8007db8:	4629      	mov	r1, r5
 8007dba:	6a20      	ldr	r0, [r4, #32]
 8007dbc:	f005 f898 	bl	800cef0 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 8007dc0:	68e2      	ldr	r2, [r4, #12]
 8007dc2:	6a23      	ldr	r3, [r4, #32]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8007dc8:	69a2      	ldr	r2, [r4, #24]
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 8007dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 8007dd4:	2110      	movs	r1, #16
 8007dd6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007dda:	f005 f86f 	bl	800cebc <z_handle_obj_poll_events>
		result = 0;
 8007dde:	2000      	movs	r0, #0
 8007de0:	e7cc      	b.n	8007d7c <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 8007de2:	6963      	ldr	r3, [r4, #20]
 8007de4:	6223      	str	r3, [r4, #32]
 8007de6:	e7f2      	b.n	8007dce <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 8007de8:	4905      	ldr	r1, [pc, #20]	; (8007e00 <z_impl_k_msgq_put+0xb4>)
 8007dea:	6889      	ldr	r1, [r1, #8]
 8007dec:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8007dee:	9200      	str	r2, [sp, #0]
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	4622      	mov	r2, r4
 8007df4:	4631      	mov	r1, r6
 8007df6:	4638      	mov	r0, r7
 8007df8:	f000 fcca 	bl	8008790 <z_pend_curr>
		return result;
 8007dfc:	e7c2      	b.n	8007d84 <z_impl_k_msgq_put+0x38>
 8007dfe:	bf00      	nop
 8007e00:	20000e04 	.word	0x20000e04

08007e04 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	b083      	sub	sp, #12
 8007e08:	4604      	mov	r4, r0
 8007e0a:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8007e0c:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 8007e10:	f04f 0110 	mov.w	r1, #16
 8007e14:	f3ef 8511 	mrs	r5, BASEPRI
 8007e18:	f381 8812 	msr	BASEPRI_MAX, r1
 8007e1c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 8007e20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e22:	2900      	cmp	r1, #0
 8007e24:	d033      	beq.n	8007e8e <z_impl_k_msgq_get+0x8a>
 8007e26:	68e2      	ldr	r2, [r4, #12]
 8007e28:	69e1      	ldr	r1, [r4, #28]
 8007e2a:	f005 f861 	bl	800cef0 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8007e2e:	68e2      	ldr	r2, [r4, #12]
 8007e30:	69e3      	ldr	r3, [r4, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 8007e36:	69a2      	ldr	r2, [r4, #24]
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d022      	beq.n	8007e82 <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 8007e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8007e42:	4620      	mov	r0, r4
 8007e44:	f004 fe7f 	bl	800cb46 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8007e48:	4607      	mov	r7, r0
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d035      	beq.n	8007eba <z_impl_k_msgq_get+0xb6>
 8007e4e:	68e2      	ldr	r2, [r4, #12]
 8007e50:	6941      	ldr	r1, [r0, #20]
 8007e52:	6a20      	ldr	r0, [r4, #32]
 8007e54:	f005 f84c 	bl	800cef0 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8007e58:	68e2      	ldr	r2, [r4, #12]
 8007e5a:	6a23      	ldr	r3, [r4, #32]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8007e60:	69a2      	ldr	r2, [r4, #24]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d010      	beq.n	8007e88 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 8007e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e68:	3301      	adds	r3, #1
 8007e6a:	6263      	str	r3, [r4, #36]	; 0x24
 8007e6c:	2400      	movs	r4, #0
 8007e6e:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8007e70:	4638      	mov	r0, r7
 8007e72:	f004 fda1 	bl	800c9b8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 8007e76:	4629      	mov	r1, r5
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f000 fafb 	bl	8008474 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e00e      	b.n	8007ea0 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	61e3      	str	r3, [r4, #28]
 8007e86:	e7d9      	b.n	8007e3c <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 8007e88:	6963      	ldr	r3, [r4, #20]
 8007e8a:	6223      	str	r3, [r4, #32]
 8007e8c:	e7eb      	b.n	8007e66 <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8007e8e:	ea53 0102 	orrs.w	r1, r3, r2
 8007e92:	d107      	bne.n	8007ea4 <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 8007e94:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8007e98:	f385 8811 	msr	BASEPRI, r5
 8007e9c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 8007ea4:	4906      	ldr	r1, [pc, #24]	; (8007ec0 <z_impl_k_msgq_get+0xbc>)
 8007ea6:	6889      	ldr	r1, [r1, #8]
 8007ea8:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 8007eaa:	9200      	str	r2, [sp, #0]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 fc6c 	bl	8008790 <z_pend_curr>
		return result;
 8007eb8:	e7f2      	b.n	8007ea0 <z_impl_k_msgq_get+0x9c>
		result = 0;
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e7ec      	b.n	8007e98 <z_impl_k_msgq_get+0x94>
 8007ebe:	bf00      	nop
 8007ec0:	20000e04 	.word	0x20000e04

08007ec4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 8007ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	4604      	mov	r4, r0
 8007ecc:	461d      	mov	r5, r3
	__asm__ volatile(
 8007ece:	f04f 0310 	mov.w	r3, #16
 8007ed2:	f3ef 8711 	mrs	r7, BASEPRI
 8007ed6:	f383 8812 	msr	BASEPRI_MAX, r3
 8007eda:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8007ede:	68c1      	ldr	r1, [r0, #12]
 8007ee0:	b999      	cbnz	r1, 8007f0a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	d14f      	bne.n	8007f86 <z_impl_k_mutex_lock+0xc2>
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	; (8007fd0 <z_impl_k_mutex_lock+0x10c>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8007eee:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8007ef0:	3101      	adds	r1, #1
 8007ef2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 8007ef4:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <z_impl_k_mutex_lock+0x10c>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8007efa:	f387 8811 	msr	BASEPRI, r7
 8007efe:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 8007f02:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 8007f04:	b003      	add	sp, #12
 8007f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f0a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8007f0c:	6882      	ldr	r2, [r0, #8]
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <z_impl_k_mutex_lock+0x10c>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d0e5      	beq.n	8007ee2 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8007f16:	ea55 0106 	orrs.w	r1, r5, r6
 8007f1a:	bf0c      	ite	eq
 8007f1c:	f04f 0801 	moveq.w	r8, #1
 8007f20:	f04f 0800 	movne.w	r8, #0
 8007f24:	d031      	beq.n	8007f8a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 8007f26:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8007f30:	f004 fc75 	bl	800c81e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 8007f34:	4581      	cmp	r9, r0
 8007f36:	dc2f      	bgt.n	8007f98 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8007f38:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8007f3c:	9600      	str	r6, [sp, #0]
 8007f3e:	9501      	str	r5, [sp, #4]
 8007f40:	4622      	mov	r2, r4
 8007f42:	4639      	mov	r1, r7
 8007f44:	4823      	ldr	r0, [pc, #140]	; (8007fd4 <z_impl_k_mutex_lock+0x110>)
 8007f46:	f000 fc23 	bl	8008790 <z_pend_curr>
	if (got_mutex == 0) {
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d0da      	beq.n	8007f04 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8007f4e:	f04f 0310 	mov.w	r3, #16
 8007f52:	f3ef 8511 	mrs	r5, BASEPRI
 8007f56:	f383 8812 	msr	BASEPRI_MAX, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8007f5e:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	d01f      	beq.n	8007fa4 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8007f64:	b1f3      	cbz	r3, 8007fa4 <z_impl_k_mutex_lock+0xe0>
 8007f66:	6921      	ldr	r1, [r4, #16]
 8007f68:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8007f6c:	f004 fc57 	bl	800c81e <new_prio_for_inheritance>
 8007f70:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8007f72:	4620      	mov	r0, r4
 8007f74:	f004 fc5e 	bl	800c834 <adjust_owner_prio>
 8007f78:	b9b0      	cbnz	r0, 8007fa8 <z_impl_k_mutex_lock+0xe4>
 8007f7a:	f1b9 0f00 	cmp.w	r9, #0
 8007f7e:	d015      	beq.n	8007fac <z_impl_k_mutex_lock+0xe8>
 8007f80:	f04f 0801 	mov.w	r8, #1
 8007f84:	e012      	b.n	8007fac <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	e7b1      	b.n	8007eee <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8007f8a:	f387 8811 	msr	BASEPRI, r7
 8007f8e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 8007f92:	f06f 000f 	mvn.w	r0, #15
 8007f96:	e7b5      	b.n	8007f04 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f004 fc4a 	bl	800c834 <adjust_owner_prio>
 8007fa0:	4681      	mov	r9, r0
 8007fa2:	e7cb      	b.n	8007f3c <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 8007fa4:	6921      	ldr	r1, [r4, #16]
 8007fa6:	e7e4      	b.n	8007f72 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8007fa8:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8007fac:	f1b8 0f00 	cmp.w	r8, #0
 8007fb0:	d106      	bne.n	8007fc0 <z_impl_k_mutex_lock+0xfc>
 8007fb2:	f385 8811 	msr	BASEPRI, r5
 8007fb6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8007fba:	f06f 000a 	mvn.w	r0, #10
 8007fbe:	e7a1      	b.n	8007f04 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4804      	ldr	r0, [pc, #16]	; (8007fd4 <z_impl_k_mutex_lock+0x110>)
 8007fc4:	f000 fa56 	bl	8008474 <z_reschedule>
	return -EAGAIN;
 8007fc8:	f06f 000a 	mvn.w	r0, #10
 8007fcc:	e79a      	b.n	8007f04 <z_impl_k_mutex_lock+0x40>
 8007fce:	bf00      	nop
 8007fd0:	20000e04 	.word	0x20000e04
 8007fd4:	20000e28 	.word	0x20000e28

08007fd8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8007fd8:	6882      	ldr	r2, [r0, #8]
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d034      	beq.n	8008048 <z_impl_k_mutex_unlock+0x70>
{
 8007fde:	b538      	push	{r3, r4, r5, lr}
 8007fe0:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <z_impl_k_mutex_unlock+0x7c>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d131      	bne.n	800804e <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8007fea:	7bda      	ldrb	r2, [r3, #15]
 8007fec:	3a01      	subs	r2, #1
 8007fee:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8007ff0:	68c3      	ldr	r3, [r0, #12]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d905      	bls.n	8008002 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8007ffa:	f000 fc7f 	bl	80088fc <k_sched_unlock>

	return 0;
 8007ffe:	2000      	movs	r0, #0
}
 8008000:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8008002:	f04f 0310 	mov.w	r3, #16
 8008006:	f3ef 8511 	mrs	r5, BASEPRI
 800800a:	f383 8812 	msr	BASEPRI_MAX, r3
 800800e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8008012:	6901      	ldr	r1, [r0, #16]
 8008014:	f004 fc0e 	bl	800c834 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8008018:	4620      	mov	r0, r4
 800801a:	f004 fd94 	bl	800cb46 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800801e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8008020:	b158      	cbz	r0, 800803a <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 8008022:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	2300      	movs	r3, #0
 800802a:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800802c:	f004 fcc4 	bl	800c9b8 <z_ready_thread>
		z_reschedule(&lock, key);
 8008030:	4629      	mov	r1, r5
 8008032:	4809      	ldr	r0, [pc, #36]	; (8008058 <z_impl_k_mutex_unlock+0x80>)
 8008034:	f000 fa1e 	bl	8008474 <z_reschedule>
 8008038:	e7df      	b.n	8007ffa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800803e:	f385 8811 	msr	BASEPRI, r5
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	e7d8      	b.n	8007ffa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8008048:	f06f 0015 	mvn.w	r0, #21
}
 800804c:	4770      	bx	lr
		return -EPERM;
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	e7d5      	b.n	8008000 <z_impl_k_mutex_unlock+0x28>
 8008054:	20000e04 	.word	0x20000e04
 8008058:	20000e28 	.word	0x20000e28

0800805c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4604      	mov	r4, r0
	__asm__ volatile(
 8008060:	f04f 0310 	mov.w	r3, #16
 8008064:	f3ef 8511 	mrs	r5, BASEPRI
 8008068:	f383 8812 	msr	BASEPRI_MAX, r3
 800806c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8008070:	f004 fd69 	bl	800cb46 <z_unpend_first_thread>

	if (thread != NULL) {
 8008074:	b140      	cbz	r0, 8008088 <z_impl_k_sem_give+0x2c>
 8008076:	2200      	movs	r2, #0
 8008078:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800807a:	f004 fc9d 	bl	800c9b8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800807e:	4629      	mov	r1, r5
 8008080:	4809      	ldr	r0, [pc, #36]	; (80080a8 <z_impl_k_sem_give+0x4c>)
 8008082:	f000 f9f7 	bl	8008474 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8008086:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8008088:	68a3      	ldr	r3, [r4, #8]
 800808a:	68e2      	ldr	r2, [r4, #12]
 800808c:	4293      	cmp	r3, r2
 800808e:	d008      	beq.n	80080a2 <z_impl_k_sem_give+0x46>
 8008090:	2201      	movs	r2, #1
 8008092:	4413      	add	r3, r2
 8008094:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8008096:	2102      	movs	r1, #2
 8008098:	f104 0010 	add.w	r0, r4, #16
 800809c:	f004 ff0e 	bl	800cebc <z_handle_obj_poll_events>
}
 80080a0:	e7ed      	b.n	800807e <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80080a2:	2200      	movs	r2, #0
 80080a4:	e7f5      	b.n	8008092 <z_impl_k_sem_give+0x36>
 80080a6:	bf00      	nop
 80080a8:	20000e2c 	.word	0x20000e2c

080080ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80080ac:	b510      	push	{r4, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	f04f 0410 	mov.w	r4, #16
 80080b4:	f3ef 8111 	mrs	r1, BASEPRI
 80080b8:	f384 8812 	msr	BASEPRI_MAX, r4
 80080bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80080c0:	6884      	ldr	r4, [r0, #8]
 80080c2:	b144      	cbz	r4, 80080d6 <z_impl_k_sem_take+0x2a>
		sem->count--;
 80080c4:	3c01      	subs	r4, #1
 80080c6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80080c8:	f381 8811 	msr	BASEPRI, r1
 80080cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80080d0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80080d2:	b002      	add	sp, #8
 80080d4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80080d6:	ea53 0402 	orrs.w	r4, r3, r2
 80080da:	d006      	beq.n	80080ea <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80080dc:	9200      	str	r2, [sp, #0]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	4602      	mov	r2, r0
 80080e2:	4805      	ldr	r0, [pc, #20]	; (80080f8 <z_impl_k_sem_take+0x4c>)
 80080e4:	f000 fb54 	bl	8008790 <z_pend_curr>
	return ret;
 80080e8:	e7f3      	b.n	80080d2 <z_impl_k_sem_take+0x26>
 80080ea:	f381 8811 	msr	BASEPRI, r1
 80080ee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80080f2:	f06f 000f 	mvn.w	r0, #15
 80080f6:	e7ec      	b.n	80080d2 <z_impl_k_sem_take+0x26>
 80080f8:	20000e2c 	.word	0x20000e2c

080080fc <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8008100:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8008102:	f013 0f02 	tst.w	r3, #2
 8008106:	d15c      	bne.n	80081c2 <submit_to_queue_locked+0xc6>
 8008108:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800810a:	f013 0f04 	tst.w	r3, #4
 800810e:	d15d      	bne.n	80081cc <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8008110:	680b      	ldr	r3, [r1, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d038      	beq.n	8008188 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 8008116:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8008118:	f013 0f01 	tst.w	r3, #1
 800811c:	d037      	beq.n	800818e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	602b      	str	r3, [r5, #0]
			ret = 2;
 8008122:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 8008124:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 8008126:	2e00      	cmp	r6, #0
 8008128:	d03f      	beq.n	80081aa <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800812a:	4b29      	ldr	r3, [pc, #164]	; (80081d0 <submit_to_queue_locked+0xd4>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	42b3      	cmp	r3, r6
 8008130:	d02f      	beq.n	8008192 <submit_to_queue_locked+0x96>
 8008132:	2300      	movs	r3, #0
 8008134:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 8008136:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800813a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800813e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8008142:	f013 0f01 	tst.w	r3, #1
 8008146:	d033      	beq.n	80081b0 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 8008148:	b101      	cbz	r1, 800814c <submit_to_queue_locked+0x50>
 800814a:	b3a2      	cbz	r2, 80081b6 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800814c:	b100      	cbz	r0, 8008150 <submit_to_queue_locked+0x54>
 800814e:	b3a9      	cbz	r1, 80081bc <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8008150:	2300      	movs	r3, #0
 8008152:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8008154:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8008158:	b313      	cbz	r3, 80081a0 <submit_to_queue_locked+0xa4>
	parent->next = child;
 800815a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800815c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8008160:	b12e      	cbz	r6, 800816e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8008162:	2200      	movs	r2, #0
 8008164:	4611      	mov	r1, r2
 8008166:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800816a:	f004 fd3c 	bl	800cbe6 <z_sched_wake>
		ret = 1;
 800816e:	2001      	movs	r0, #1

		if (rc < 0) {
 8008170:	2800      	cmp	r0, #0
 8008172:	db06      	blt.n	8008182 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 8008174:	68e3      	ldr	r3, [r4, #12]
 8008176:	f043 0304 	orr.w	r3, r3, #4
 800817a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	60a3      	str	r3, [r4, #8]
 8008180:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 8008182:	2800      	cmp	r0, #0
 8008184:	dc21      	bgt.n	80081ca <submit_to_queue_locked+0xce>
 8008186:	e01e      	b.n	80081c6 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 8008188:	6883      	ldr	r3, [r0, #8]
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	e7c3      	b.n	8008116 <submit_to_queue_locked+0x1a>
		ret = 1;
 800818e:	2701      	movs	r7, #1
 8008190:	e7c8      	b.n	8008124 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008192:	f004 fafc 	bl	800c78e <k_is_in_isr>
 8008196:	b908      	cbnz	r0, 800819c <submit_to_queue_locked+0xa0>
 8008198:	2301      	movs	r3, #1
 800819a:	e7cb      	b.n	8008134 <submit_to_queue_locked+0x38>
 800819c:	2300      	movs	r3, #0
 800819e:	e7c9      	b.n	8008134 <submit_to_queue_locked+0x38>
 80081a0:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 80081a4:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 80081a8:	e7da      	b.n	8008160 <submit_to_queue_locked+0x64>
		return -EINVAL;
 80081aa:	f06f 0015 	mvn.w	r0, #21
 80081ae:	e7df      	b.n	8008170 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 80081b0:	f06f 0012 	mvn.w	r0, #18
 80081b4:	e7dc      	b.n	8008170 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80081b6:	f06f 000f 	mvn.w	r0, #15
 80081ba:	e7d9      	b.n	8008170 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80081bc:	f06f 000f 	mvn.w	r0, #15
 80081c0:	e7d6      	b.n	8008170 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80081c2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 80081cc:	2000      	movs	r0, #0
 80081ce:	e7fa      	b.n	80081c6 <submit_to_queue_locked+0xca>
 80081d0:	20000e04 	.word	0x20000e04

080081d4 <finalize_cancel_locked>:
{
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 80081d8:	68c3      	ldr	r3, [r0, #12]
 80081da:	f023 0302 	bic.w	r3, r3, #2
 80081de:	60c3      	str	r3, [r0, #12]
	return list->head;
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <finalize_cancel_locked+0x78>)
 80081e2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80081e4:	b1fb      	cbz	r3, 8008226 <finalize_cancel_locked+0x52>
 80081e6:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 80081e8:	b103      	cbz	r3, 80081ec <finalize_cancel_locked+0x18>
	return node->next;
 80081ea:	681c      	ldr	r4, [r3, #0]
 80081ec:	2600      	movs	r6, #0
 80081ee:	e01f      	b.n	8008230 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80081f0:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80081f2:	b166      	cbz	r6, 800820e <finalize_cancel_locked+0x3a>
	return node->next;
 80081f4:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 80081f6:	6031      	str	r1, [r6, #0]
	return list->tail;
 80081f8:	4914      	ldr	r1, [pc, #80]	; (800824c <finalize_cancel_locked+0x78>)
 80081fa:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80081fc:	428b      	cmp	r3, r1
 80081fe:	d00f      	beq.n	8008220 <finalize_cancel_locked+0x4c>
	parent->next = child;
 8008200:	2100      	movs	r1, #0
 8008202:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 8008204:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 8008208:	f7ff ff28 	bl	800805c <z_impl_k_sem_give>
}
 800820c:	e015      	b.n	800823a <finalize_cancel_locked+0x66>
	return node->next;
 800820e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8008210:	490e      	ldr	r1, [pc, #56]	; (800824c <finalize_cancel_locked+0x78>)
 8008212:	6008      	str	r0, [r1, #0]
	return list->tail;
 8008214:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008216:	428b      	cmp	r3, r1
 8008218:	d1f2      	bne.n	8008200 <finalize_cancel_locked+0x2c>
	list->tail = node;
 800821a:	490c      	ldr	r1, [pc, #48]	; (800824c <finalize_cancel_locked+0x78>)
 800821c:	6048      	str	r0, [r1, #4]
}
 800821e:	e7ef      	b.n	8008200 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8008220:	490a      	ldr	r1, [pc, #40]	; (800824c <finalize_cancel_locked+0x78>)
 8008222:	604e      	str	r6, [r1, #4]
}
 8008224:	e7ec      	b.n	8008200 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8008226:	461c      	mov	r4, r3
 8008228:	e7e0      	b.n	80081ec <finalize_cancel_locked+0x18>
 800822a:	4622      	mov	r2, r4
 800822c:	4623      	mov	r3, r4
 800822e:	4614      	mov	r4, r2
 8008230:	b153      	cbz	r3, 8008248 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	42aa      	cmp	r2, r5
 8008236:	d0db      	beq.n	80081f0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8008238:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800823a:	2c00      	cmp	r4, #0
 800823c:	d0f5      	beq.n	800822a <finalize_cancel_locked+0x56>
 800823e:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008240:	2c00      	cmp	r4, #0
 8008242:	d0f3      	beq.n	800822c <finalize_cancel_locked+0x58>
	return node->next;
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	e7f1      	b.n	800822c <finalize_cancel_locked+0x58>
}
 8008248:	bd70      	pop	{r4, r5, r6, pc}
 800824a:	bf00      	nop
 800824c:	20000e34 	.word	0x20000e34

08008250 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8008250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008252:	b085      	sub	sp, #20
 8008254:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 8008256:	e016      	b.n	8008286 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8008258:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800825c:	f023 0204 	bic.w	r2, r3, #4
 8008260:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 8008264:	f013 0f04 	tst.w	r3, #4
 8008268:	d159      	bne.n	800831e <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800826a:	2300      	movs	r3, #0
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008276:	e9cd 2300 	strd	r2, r3, [sp]
 800827a:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800827e:	4631      	mov	r1, r6
 8008280:	482e      	ldr	r0, [pc, #184]	; (800833c <work_queue_main+0xec>)
 8008282:	f000 fca1 	bl	8008bc8 <z_sched_wait>
	__asm__ volatile(
 8008286:	f04f 0310 	mov.w	r3, #16
 800828a:	f3ef 8611 	mrs	r6, BASEPRI
 800828e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008292:	f3bf 8f6f 	isb	sy
	return list->head;
 8008296:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800829a:	2c00      	cmp	r4, #0
 800829c:	d0dc      	beq.n	8008258 <work_queue_main+0x8>
	return node->next;
 800829e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 80082a0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 80082a4:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80082a8:	4294      	cmp	r4, r2
 80082aa:	d035      	beq.n	8008318 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 80082ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 80082c0:	f023 0304 	bic.w	r3, r3, #4
 80082c4:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 80082c6:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	d0ce      	beq.n	800826a <work_queue_main+0x1a>
	__asm__ volatile(
 80082cc:	f386 8811 	msr	BASEPRI, r6
 80082d0:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 80082d4:	4620      	mov	r0, r4
 80082d6:	4798      	blx	r3
	__asm__ volatile(
 80082d8:	f04f 0310 	mov.w	r3, #16
 80082dc:	f3ef 8611 	mrs	r6, BASEPRI
 80082e0:	f383 8812 	msr	BASEPRI_MAX, r3
 80082e4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80082e8:	68e3      	ldr	r3, [r4, #12]
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80082f0:	f013 0f02 	tst.w	r3, #2
 80082f4:	d11e      	bne.n	8008334 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 80082f6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80082fa:	f023 0302 	bic.w	r3, r3, #2
 80082fe:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 8008302:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 8008306:	f386 8811 	msr	BASEPRI, r6
 800830a:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1b9      	bne.n	8008286 <work_queue_main+0x36>
	z_impl_k_yield();
 8008312:	f000 fb73 	bl	80089fc <z_impl_k_yield>
}
 8008316:	e7b6      	b.n	8008286 <work_queue_main+0x36>
	list->tail = node;
 8008318:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800831c:	e7c6      	b.n	80082ac <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800831e:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8008322:	2200      	movs	r2, #0
 8008324:	2101      	movs	r1, #1
 8008326:	4638      	mov	r0, r7
 8008328:	f004 fc5d 	bl	800cbe6 <z_sched_wake>
 800832c:	2800      	cmp	r0, #0
 800832e:	d1f8      	bne.n	8008322 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 8008330:	2300      	movs	r3, #0
 8008332:	e7c9      	b.n	80082c8 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 8008334:	4620      	mov	r0, r4
 8008336:	f7ff ff4d 	bl	80081d4 <finalize_cancel_locked>
 800833a:	e7dc      	b.n	80082f6 <work_queue_main+0xa6>
 800833c:	20000e30 	.word	0x20000e30

08008340 <k_work_submit>:
{
 8008340:	b508      	push	{r3, lr}
 8008342:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <k_work_submit+0xc>)
 8008346:	f004 faa1 	bl	800c88c <k_work_submit_to_queue>
}
 800834a:	bd08      	pop	{r3, pc}
 800834c:	20000830 	.word	0x20000830

08008350 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	b089      	sub	sp, #36	; 0x24
 8008354:	4604      	mov	r4, r0
 8008356:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8008358:	2000      	movs	r0, #0
 800835a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800835e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008362:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 8008366:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800836a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800836e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 8008372:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 8008376:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800837a:	b1fd      	cbz	r5, 80083bc <k_work_queue_start+0x6c>
 800837c:	7928      	ldrb	r0, [r5, #4]
 800837e:	b9f8      	cbnz	r0, 80083c0 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8008380:	2001      	movs	r0, #1
	*flagp = flags;
 8008382:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8008386:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800838a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800838e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008392:	2000      	movs	r0, #0
 8008394:	9004      	str	r0, [sp, #16]
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	9002      	str	r0, [sp, #8]
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	9400      	str	r4, [sp, #0]
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <k_work_queue_start+0x78>)
 80083a0:	4620      	mov	r0, r4
 80083a2:	f004 fa0e 	bl	800c7c2 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 80083a6:	b125      	cbz	r5, 80083b2 <k_work_queue_start+0x62>
 80083a8:	6829      	ldr	r1, [r5, #0]
 80083aa:	b111      	cbz	r1, 80083b2 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 80083ac:	4620      	mov	r0, r4
 80083ae:	f004 f9f4 	bl	800c79a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 80083b2:	4620      	mov	r0, r4
 80083b4:	f004 f9f6 	bl	800c7a4 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 80083b8:	b009      	add	sp, #36	; 0x24
 80083ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 80083bc:	2001      	movs	r0, #1
 80083be:	e7e0      	b.n	8008382 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 80083c0:	f240 1001 	movw	r0, #257	; 0x101
 80083c4:	e7dd      	b.n	8008382 <k_work_queue_start+0x32>
 80083c6:	bf00      	nop
 80083c8:	08008251 	.word	0x08008251

080083cc <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d0:	bf08      	it	eq
 80083d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80083d6:	d100      	bne.n	80083da <add_thread_timeout+0xe>
 80083d8:	4770      	bx	lr
{
 80083da:	b508      	push	{r3, lr}
 80083dc:	4902      	ldr	r1, [pc, #8]	; (80083e8 <add_thread_timeout+0x1c>)
 80083de:	3018      	adds	r0, #24
 80083e0:	f000 fc68 	bl	8008cb4 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 80083e4:	bd08      	pop	{r3, pc}
 80083e6:	bf00      	nop
 80083e8:	0800c9f1 	.word	0x0800c9f1

080083ec <z_reset_time_slice>:
{
 80083ec:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 80083ee:	4b08      	ldr	r3, [pc, #32]	; (8008410 <z_reset_time_slice+0x24>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	b903      	cbnz	r3, 80083f6 <z_reset_time_slice+0xa>
}
 80083f4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 80083f6:	f7ff f8bd 	bl	8007574 <sys_clock_elapsed>
 80083fa:	4603      	mov	r3, r0
 80083fc:	4a04      	ldr	r2, [pc, #16]	; (8008410 <z_reset_time_slice+0x24>)
 80083fe:	6810      	ldr	r0, [r2, #0]
 8008400:	4403      	add	r3, r0
 8008402:	4a04      	ldr	r2, [pc, #16]	; (8008414 <z_reset_time_slice+0x28>)
 8008404:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8008406:	2100      	movs	r1, #0
 8008408:	f004 fc90 	bl	800cd2c <z_set_timeout_expiry>
}
 800840c:	e7f2      	b.n	80083f4 <z_reset_time_slice+0x8>
 800840e:	bf00      	nop
 8008410:	20000e48 	.word	0x20000e48
 8008414:	20000e04 	.word	0x20000e04

08008418 <k_sched_time_slice_set>:
{
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800841e:	2300      	movs	r3, #0
	__asm__ volatile(
 8008420:	f04f 0210 	mov.w	r2, #16
 8008424:	f3ef 8611 	mrs	r6, BASEPRI
 8008428:	f382 8812 	msr	BASEPRI_MAX, r2
 800842c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8008430:	e00c      	b.n	800844c <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 8008432:	2b02      	cmp	r3, #2
 8008434:	bfb8      	it	lt
 8008436:	2302      	movlt	r3, #2
 8008438:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <k_sched_time_slice_set+0x50>)
 800843c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800843e:	f7ff ffd5 	bl	80083ec <z_reset_time_slice>
	__asm__ volatile(
 8008442:	f386 8811 	msr	BASEPRI, r6
 8008446:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800844a:	2301      	movs	r3, #1
 800844c:	b953      	cbnz	r3, 8008464 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800844e:	4b07      	ldr	r3, [pc, #28]	; (800846c <k_sched_time_slice_set+0x54>)
 8008450:	2200      	movs	r2, #0
 8008452:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8008454:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008458:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <k_sched_time_slice_set+0x58>)
 800845c:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800845e:	2c00      	cmp	r4, #0
 8008460:	dce7      	bgt.n	8008432 <k_sched_time_slice_set+0x1a>
 8008462:	e7ea      	b.n	800843a <k_sched_time_slice_set+0x22>
}
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	bf00      	nop
 8008468:	20000e44 	.word	0x20000e44
 800846c:	20000e04 	.word	0x20000e04
 8008470:	20000e48 	.word	0x20000e48

08008474 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8008474:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8008476:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008478:	b921      	cbnz	r1, 8008484 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800847a:	f3ef 8305 	mrs	r3, IPSR
 800847e:	b913      	cbnz	r3, 8008486 <z_reschedule+0x12>
 8008480:	2101      	movs	r1, #1
 8008482:	e000      	b.n	8008486 <z_reschedule+0x12>
 8008484:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8008486:	f011 0f01 	tst.w	r1, #1
 800848a:	d007      	beq.n	800849c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <z_reschedule+0x34>)
 800848e:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8008490:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8008492:	429a      	cmp	r2, r3
 8008494:	d002      	beq.n	800849c <z_reschedule+0x28>
	ret = arch_swap(key);
 8008496:	f7fb fa59 	bl	800394c <arch_swap>
		z_swap(lock, key);
 800849a:	e003      	b.n	80084a4 <z_reschedule+0x30>
 800849c:	f380 8811 	msr	BASEPRI, r0
 80084a0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 80084a4:	bd08      	pop	{r3, pc}
 80084a6:	bf00      	nop
 80084a8:	20000e04 	.word	0x20000e04

080084ac <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 80084ac:	2300      	movs	r3, #0
	__asm__ volatile(
 80084ae:	f04f 0210 	mov.w	r2, #16
 80084b2:	f3ef 8111 	mrs	r1, BASEPRI
 80084b6:	f382 8812 	msr	BASEPRI_MAX, r2
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	e009      	b.n	80084d4 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 80084c0:	4b06      	ldr	r3, [pc, #24]	; (80084dc <k_sched_lock+0x30>)
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	7bd3      	ldrb	r3, [r2, #15]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80084ca:	f381 8811 	msr	BASEPRI, r1
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	2301      	movs	r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0f3      	beq.n	80084c0 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	20000e04 	.word	0x20000e04

080084e0 <update_cache>:
{
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80084e4:	480f      	ldr	r0, [pc, #60]	; (8008524 <update_cache+0x44>)
 80084e6:	f004 fa60 	bl	800c9aa <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 80084ea:	4605      	mov	r5, r0
 80084ec:	b170      	cbz	r0, 800850c <update_cache+0x2c>
	if (preempt_ok != 0) {
 80084ee:	b984      	cbnz	r4, 8008512 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 80084f0:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <update_cache+0x48>)
 80084f2:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 80084f4:	7b5a      	ldrb	r2, [r3, #13]
 80084f6:	f012 0f1f 	tst.w	r2, #31
 80084fa:	d10a      	bne.n	8008512 <update_cache+0x32>
	return node->next != NULL;
 80084fc:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80084fe:	b942      	cbnz	r2, 8008512 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8008500:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8008502:	2a7f      	cmp	r2, #127	; 0x7f
 8008504:	d905      	bls.n	8008512 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 8008506:	4a08      	ldr	r2, [pc, #32]	; (8008528 <update_cache+0x48>)
 8008508:	6193      	str	r3, [r2, #24]
 800850a:	e00a      	b.n	8008522 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800850c:	4b06      	ldr	r3, [pc, #24]	; (8008528 <update_cache+0x48>)
 800850e:	68dd      	ldr	r5, [r3, #12]
 8008510:	e7ed      	b.n	80084ee <update_cache+0xe>
		if (thread != _current) {
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <update_cache+0x48>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	42ab      	cmp	r3, r5
 8008518:	d001      	beq.n	800851e <update_cache+0x3e>
			z_reset_time_slice();
 800851a:	f7ff ff67 	bl	80083ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800851e:	4b02      	ldr	r3, [pc, #8]	; (8008528 <update_cache+0x48>)
 8008520:	619d      	str	r5, [r3, #24]
}
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20000e20 	.word	0x20000e20
 8008528:	20000e04 	.word	0x20000e04

0800852c <move_thread_to_end_of_prio_q>:
{
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8008530:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8008532:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8008536:	2b00      	cmp	r3, #0
 8008538:	db28      	blt.n	800858c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800853a:	7b6b      	ldrb	r3, [r5, #13]
 800853c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008540:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8008542:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <move_thread_to_end_of_prio_q+0x80>)
 8008544:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008548:	429c      	cmp	r4, r3
 800854a:	d02d      	beq.n	80085a8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800854c:	b16c      	cbz	r4, 800856a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800854e:	4621      	mov	r1, r4
 8008550:	4628      	mov	r0, r5
 8008552:	f004 f9bf 	bl	800c8d4 <z_sched_prio_cmp>
 8008556:	2800      	cmp	r0, #0
 8008558:	dc20      	bgt.n	800859c <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800855a:	b134      	cbz	r4, 800856a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800855c:	4b13      	ldr	r3, [pc, #76]	; (80085ac <move_thread_to_end_of_prio_q+0x80>)
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	429c      	cmp	r4, r3
 8008562:	d002      	beq.n	800856a <move_thread_to_end_of_prio_q+0x3e>
 8008564:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008566:	2c00      	cmp	r4, #0
 8008568:	d1f0      	bne.n	800854c <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800856a:	4b10      	ldr	r3, [pc, #64]	; (80085ac <move_thread_to_end_of_prio_q+0x80>)
 800856c:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800856e:	f103 011c 	add.w	r1, r3, #28
 8008572:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8008574:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8008576:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8008578:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <move_thread_to_end_of_prio_q+0x80>)
 800857c:	6898      	ldr	r0, [r3, #8]
 800857e:	42a8      	cmp	r0, r5
 8008580:	bf14      	ite	ne
 8008582:	2000      	movne	r0, #0
 8008584:	2001      	moveq	r0, #1
 8008586:	f7ff ffab 	bl	80084e0 <update_cache>
}
 800858a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800858c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008590:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8008592:	4601      	mov	r1, r0
 8008594:	4806      	ldr	r0, [pc, #24]	; (80085b0 <move_thread_to_end_of_prio_q+0x84>)
 8008596:	f004 f9dc 	bl	800c952 <z_priq_dumb_remove>
}
 800859a:	e7ce      	b.n	800853a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800859c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800859e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80085a0:	602c      	str	r4, [r5, #0]
	prev->next = node;
 80085a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80085a4:	6065      	str	r5, [r4, #4]
}
 80085a6:	e7e8      	b.n	800857a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80085a8:	2400      	movs	r4, #0
 80085aa:	e7cf      	b.n	800854c <move_thread_to_end_of_prio_q+0x20>
 80085ac:	20000e04 	.word	0x20000e04
 80085b0:	20000e20 	.word	0x20000e20

080085b4 <z_time_slice>:
{
 80085b4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80085b6:	f04f 0310 	mov.w	r3, #16
 80085ba:	f3ef 8411 	mrs	r4, BASEPRI
 80085be:	f383 8812 	msr	BASEPRI_MAX, r3
 80085c2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80085c6:	4b21      	ldr	r3, [pc, #132]	; (800864c <z_time_slice+0x98>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	4a21      	ldr	r2, [pc, #132]	; (8008650 <z_time_slice+0x9c>)
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d017      	beq.n	8008602 <z_time_slice+0x4e>
	pending_current = NULL;
 80085d2:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <z_time_slice+0x9c>)
 80085d4:	2100      	movs	r1, #0
 80085d6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80085d8:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <z_time_slice+0xa0>)
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	b372      	cbz	r2, 800863c <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 80085de:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 80085e0:	2a7f      	cmp	r2, #127	; 0x7f
 80085e2:	d815      	bhi.n	8008610 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 80085e4:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 80085e6:	f012 0f1f 	tst.w	r2, #31
 80085ea:	d11b      	bne.n	8008624 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80085ec:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80085f0:	4a19      	ldr	r2, [pc, #100]	; (8008658 <z_time_slice+0xa4>)
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	4291      	cmp	r1, r2
 80085f6:	db17      	blt.n	8008628 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 80085f8:	4a18      	ldr	r2, [pc, #96]	; (800865c <z_time_slice+0xa8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d016      	beq.n	800862c <z_time_slice+0x78>
 80085fe:	2201      	movs	r2, #1
 8008600:	e007      	b.n	8008612 <z_time_slice+0x5e>
		z_reset_time_slice();
 8008602:	f7ff fef3 	bl	80083ec <z_reset_time_slice>
	__asm__ volatile(
 8008606:	f384 8811 	msr	BASEPRI, r4
 800860a:	f3bf 8f6f 	isb	sy
		return;
 800860e:	e01c      	b.n	800864a <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 8008610:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 8008612:	b19a      	cbz	r2, 800863c <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <z_time_slice+0x98>)
 8008616:	6912      	ldr	r2, [r2, #16]
 8008618:	4282      	cmp	r2, r0
 800861a:	dd09      	ble.n	8008630 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800861c:	1a10      	subs	r0, r2, r0
 800861e:	4b0b      	ldr	r3, [pc, #44]	; (800864c <z_time_slice+0x98>)
 8008620:	6118      	str	r0, [r3, #16]
 8008622:	e00e      	b.n	8008642 <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8008624:	2200      	movs	r2, #0
 8008626:	e7f4      	b.n	8008612 <z_time_slice+0x5e>
 8008628:	2200      	movs	r2, #0
 800862a:	e7f2      	b.n	8008612 <z_time_slice+0x5e>
 800862c:	2200      	movs	r2, #0
 800862e:	e7f0      	b.n	8008612 <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff ff7b 	bl	800852c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8008636:	f7ff fed9 	bl	80083ec <z_reset_time_slice>
 800863a:	e002      	b.n	8008642 <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800863c:	4b03      	ldr	r3, [pc, #12]	; (800864c <z_time_slice+0x98>)
 800863e:	2200      	movs	r2, #0
 8008640:	611a      	str	r2, [r3, #16]
 8008642:	f384 8811 	msr	BASEPRI, r4
 8008646:	f3bf 8f6f 	isb	sy
}
 800864a:	bd10      	pop	{r4, pc}
 800864c:	20000e04 	.word	0x20000e04
 8008650:	20000e3c 	.word	0x20000e3c
 8008654:	20000e48 	.word	0x20000e48
 8008658:	20000e44 	.word	0x20000e44
 800865c:	20000728 	.word	0x20000728

08008660 <ready_thread>:
{
 8008660:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 8008662:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008664:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008668:	2a00      	cmp	r2, #0
 800866a:	db2d      	blt.n	80086c8 <ready_thread+0x68>
 800866c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800866e:	f013 0f1f 	tst.w	r3, #31
 8008672:	d105      	bne.n	8008680 <ready_thread+0x20>
	return node->next != NULL;
 8008674:	6982      	ldr	r2, [r0, #24]
 8008676:	b10a      	cbz	r2, 800867c <ready_thread+0x1c>
 8008678:	2200      	movs	r2, #0
 800867a:	e002      	b.n	8008682 <ready_thread+0x22>
 800867c:	2201      	movs	r2, #1
 800867e:	e000      	b.n	8008682 <ready_thread+0x22>
 8008680:	2200      	movs	r2, #0
 8008682:	b30a      	cbz	r2, 80086c8 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008688:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800868a:	4b14      	ldr	r3, [pc, #80]	; (80086dc <ready_thread+0x7c>)
 800868c:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008690:	429d      	cmp	r5, r3
 8008692:	d020      	beq.n	80086d6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008694:	b16d      	cbz	r5, 80086b2 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008696:	4629      	mov	r1, r5
 8008698:	4620      	mov	r0, r4
 800869a:	f004 f91b 	bl	800c8d4 <z_sched_prio_cmp>
 800869e:	2800      	cmp	r0, #0
 80086a0:	dc13      	bgt.n	80086ca <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80086a2:	b135      	cbz	r5, 80086b2 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <ready_thread+0x7c>)
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	429d      	cmp	r5, r3
 80086aa:	d002      	beq.n	80086b2 <ready_thread+0x52>
 80086ac:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	d1f0      	bne.n	8008694 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 80086b2:	4b0a      	ldr	r3, [pc, #40]	; (80086dc <ready_thread+0x7c>)
 80086b4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 80086b6:	f103 011c 	add.w	r1, r3, #28
 80086ba:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 80086bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
 80086be:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80086c0:	621c      	str	r4, [r3, #32]
		update_cache(0);
 80086c2:	2000      	movs	r0, #0
 80086c4:	f7ff ff0c 	bl	80084e0 <update_cache>
}
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 80086ca:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 80086cc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80086ce:	6025      	str	r5, [r4, #0]
	prev->next = node;
 80086d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80086d2:	606c      	str	r4, [r5, #4]
}
 80086d4:	e7f5      	b.n	80086c2 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80086d6:	2500      	movs	r5, #0
 80086d8:	e7dc      	b.n	8008694 <ready_thread+0x34>
 80086da:	bf00      	nop
 80086dc:	20000e04 	.word	0x20000e04

080086e0 <z_sched_start>:
{
 80086e0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80086e2:	f04f 0310 	mov.w	r3, #16
 80086e6:	f3ef 8411 	mrs	r4, BASEPRI
 80086ea:	f383 8812 	msr	BASEPRI_MAX, r3
 80086ee:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 80086f2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 80086f4:	f013 0f04 	tst.w	r3, #4
 80086f8:	d104      	bne.n	8008704 <z_sched_start+0x24>
	__asm__ volatile(
 80086fa:	f384 8811 	msr	BASEPRI, r4
 80086fe:	f3bf 8f6f 	isb	sy
}
 8008702:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008704:	f023 0304 	bic.w	r3, r3, #4
 8008708:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800870a:	f7ff ffa9 	bl	8008660 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800870e:	4621      	mov	r1, r4
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <z_sched_start+0x38>)
 8008712:	f7ff feaf 	bl	8008474 <z_reschedule>
 8008716:	e7f4      	b.n	8008702 <z_sched_start+0x22>
 8008718:	20000e40 	.word	0x20000e40

0800871c <z_impl_k_thread_resume>:
{
 800871c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800871e:	f04f 0310 	mov.w	r3, #16
 8008722:	f3ef 8411 	mrs	r4, BASEPRI
 8008726:	f383 8812 	msr	BASEPRI_MAX, r3
 800872a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
 800872e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_suspended(thread)) {
 8008730:	f013 0f10 	tst.w	r3, #16
 8008734:	d104      	bne.n	8008740 <z_impl_k_thread_resume+0x24>
	__asm__ volatile(
 8008736:	f384 8811 	msr	BASEPRI, r4
 800873a:	f3bf 8f6f 	isb	sy
}
 800873e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8008740:	f023 0310 	bic.w	r3, r3, #16
 8008744:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8008746:	f7ff ff8b 	bl	8008660 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800874a:	4621      	mov	r1, r4
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <z_impl_k_thread_resume+0x38>)
 800874e:	f7ff fe91 	bl	8008474 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, resume, thread);
 8008752:	e7f4      	b.n	800873e <z_impl_k_thread_resume+0x22>
 8008754:	20000e40 	.word	0x20000e40

08008758 <unready_thread>:
{
 8008758:	b510      	push	{r4, lr}
 800875a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800875c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800875e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db08      	blt.n	8008778 <unready_thread+0x20>
	update_cache(thread == _current);
 8008766:	4b08      	ldr	r3, [pc, #32]	; (8008788 <unready_thread+0x30>)
 8008768:	6898      	ldr	r0, [r3, #8]
 800876a:	42a0      	cmp	r0, r4
 800876c:	bf14      	ite	ne
 800876e:	2000      	movne	r0, #0
 8008770:	2001      	moveq	r0, #1
 8008772:	f7ff feb5 	bl	80084e0 <update_cache>
}
 8008776:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800877c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 800877e:	4601      	mov	r1, r0
 8008780:	4802      	ldr	r0, [pc, #8]	; (800878c <unready_thread+0x34>)
 8008782:	f004 f8e6 	bl	800c952 <z_priq_dumb_remove>
}
 8008786:	e7ee      	b.n	8008766 <unready_thread+0xe>
 8008788:	20000e04 	.word	0x20000e04
 800878c:	20000e20 	.word	0x20000e20

08008790 <z_pend_curr>:
{
 8008790:	b510      	push	{r4, lr}
 8008792:	460c      	mov	r4, r1
 8008794:	4611      	mov	r1, r2
	pending_current = _current;
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <z_pend_curr+0x20>)
 8008798:	6898      	ldr	r0, [r3, #8]
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <z_pend_curr+0x24>)
 800879c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800879e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087a2:	f004 f987 	bl	800cab4 <pend>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7fb f8d0 	bl	800394c <arch_swap>
}
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	20000e04 	.word	0x20000e04
 80087b4:	20000e3c 	.word	0x20000e3c

080087b8 <z_set_prio>:
{
 80087b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 80087c0:	2300      	movs	r3, #0
	__asm__ volatile(
 80087c2:	f04f 0210 	mov.w	r2, #16
 80087c6:	f3ef 8811 	mrs	r8, BASEPRI
 80087ca:	f382 8812 	msr	BASEPRI_MAX, r2
 80087ce:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 80087d2:	461f      	mov	r7, r3
 80087d4:	e008      	b.n	80087e8 <z_set_prio+0x30>
		if (need_sched) {
 80087d6:	f012 0701 	ands.w	r7, r2, #1
 80087da:	d111      	bne.n	8008800 <z_set_prio+0x48>
			thread->base.prio = prio;
 80087dc:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 80087de:	f388 8811 	msr	BASEPRI, r8
 80087e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80087e6:	2301      	movs	r3, #1
 80087e8:	461a      	mov	r2, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d13d      	bne.n	800886a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 80087ee:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80087f0:	f013 0f1f 	tst.w	r3, #31
 80087f4:	d1ef      	bne.n	80087d6 <z_set_prio+0x1e>
	return node->next != NULL;
 80087f6:	69a1      	ldr	r1, [r4, #24]
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d1ec      	bne.n	80087d6 <z_set_prio+0x1e>
 80087fc:	2201      	movs	r2, #1
 80087fe:	e7ea      	b.n	80087d6 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008804:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8008806:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008870 <z_set_prio+0xb8>
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f004 f8a0 	bl	800c952 <z_priq_dumb_remove>
				thread->base.prio = prio;
 8008812:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008814:	7b63      	ldrb	r3, [r4, #13]
 8008816:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800881a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800881c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008820:	454d      	cmp	r5, r9
 8008822:	d020      	beq.n	8008866 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008824:	b16d      	cbz	r5, 8008842 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008826:	4629      	mov	r1, r5
 8008828:	4620      	mov	r0, r4
 800882a:	f004 f853 	bl	800c8d4 <z_sched_prio_cmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	dc13      	bgt.n	800885a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008832:	b135      	cbz	r5, 8008842 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8008834:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <z_set_prio+0xbc>)
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	429d      	cmp	r5, r3
 800883a:	d002      	beq.n	8008842 <z_set_prio+0x8a>
 800883c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800883e:	2d00      	cmp	r5, #0
 8008840:	d1f0      	bne.n	8008824 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8008842:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <z_set_prio+0xbc>)
 8008844:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008846:	f103 011c 	add.w	r1, r3, #28
 800884a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800884c:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800884e:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008850:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8008852:	2001      	movs	r0, #1
 8008854:	f7ff fe44 	bl	80084e0 <update_cache>
 8008858:	e7c1      	b.n	80087de <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800885a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800885c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800885e:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8008860:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008862:	606c      	str	r4, [r5, #4]
}
 8008864:	e7f5      	b.n	8008852 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008866:	2500      	movs	r5, #0
 8008868:	e7dc      	b.n	8008824 <z_set_prio+0x6c>
}
 800886a:	4638      	mov	r0, r7
 800886c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008870:	20000e20 	.word	0x20000e20
 8008874:	20000e04 	.word	0x20000e04

08008878 <z_impl_k_thread_suspend>:
{
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800887c:	3018      	adds	r0, #24
 800887e:	f004 fa1e 	bl	800ccbe <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8008882:	2300      	movs	r3, #0
	__asm__ volatile(
 8008884:	f04f 0210 	mov.w	r2, #16
 8008888:	f3ef 8511 	mrs	r5, BASEPRI
 800888c:	f382 8812 	msr	BASEPRI_MAX, r2
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	e010      	b.n	80088b8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008896:	7b63      	ldrb	r3, [r4, #13]
 8008898:	f043 0310 	orr.w	r3, r3, #16
 800889c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <z_impl_k_thread_suspend+0x7c>)
 80088a0:	6898      	ldr	r0, [r3, #8]
 80088a2:	42a0      	cmp	r0, r4
 80088a4:	bf14      	ite	ne
 80088a6:	2000      	movne	r0, #0
 80088a8:	2001      	moveq	r0, #1
 80088aa:	f7ff fe19 	bl	80084e0 <update_cache>
	__asm__ volatile(
 80088ae:	f385 8811 	msr	BASEPRI, r5
 80088b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80088b6:	2301      	movs	r3, #1
 80088b8:	b963      	cbnz	r3, 80088d4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 80088ba:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 80088bc:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dae8      	bge.n	8008896 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80088c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088c8:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 80088ca:	4621      	mov	r1, r4
 80088cc:	480a      	ldr	r0, [pc, #40]	; (80088f8 <z_impl_k_thread_suspend+0x80>)
 80088ce:	f004 f840 	bl	800c952 <z_priq_dumb_remove>
}
 80088d2:	e7e0      	b.n	8008896 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <z_impl_k_thread_suspend+0x7c>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d000      	beq.n	80088de <z_impl_k_thread_suspend+0x66>
}
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80088de:	f04f 0310 	mov.w	r3, #16
 80088e2:	f3ef 8011 	mrs	r0, BASEPRI
 80088e6:	f383 8812 	msr	BASEPRI_MAX, r3
 80088ea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80088ee:	f004 f81b 	bl	800c928 <z_reschedule_irqlock>
 80088f2:	e7f3      	b.n	80088dc <z_impl_k_thread_suspend+0x64>
 80088f4:	20000e04 	.word	0x20000e04
 80088f8:	20000e20 	.word	0x20000e20

080088fc <k_sched_unlock>:

void k_sched_unlock(void)
{
 80088fc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 80088fe:	2300      	movs	r3, #0
 8008900:	f04f 0210 	mov.w	r2, #16
 8008904:	f3ef 8411 	mrs	r4, BASEPRI
 8008908:	f382 8812 	msr	BASEPRI_MAX, r2
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	e00c      	b.n	800892c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8008912:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <k_sched_unlock+0x4c>)
 8008914:	689a      	ldr	r2, [r3, #8]
 8008916:	7bd3      	ldrb	r3, [r2, #15]
 8008918:	3301      	adds	r3, #1
 800891a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800891c:	2000      	movs	r0, #0
 800891e:	f7ff fddf 	bl	80084e0 <update_cache>
	__asm__ volatile(
 8008922:	f384 8811 	msr	BASEPRI, r4
 8008926:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800892a:	2301      	movs	r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0f0      	beq.n	8008912 <k_sched_unlock+0x16>
	__asm__ volatile(
 8008930:	f04f 0310 	mov.w	r3, #16
 8008934:	f3ef 8011 	mrs	r0, BASEPRI
 8008938:	f383 8812 	msr	BASEPRI_MAX, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f003 fff2 	bl	800c928 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8008944:	bd10      	pop	{r4, pc}
 8008946:	bf00      	nop
 8008948:	20000e04 	.word	0x20000e04

0800894c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800894c:	7b43      	ldrb	r3, [r0, #13]
 800894e:	f013 0f08 	tst.w	r3, #8
 8008952:	d142      	bne.n	80089da <end_thread+0x8e>
{
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8008958:	f043 0308 	orr.w	r3, r3, #8
 800895c:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800895e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008962:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8008964:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008968:	d12b      	bne.n	80089c2 <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 800896a:	68ab      	ldr	r3, [r5, #8]
 800896c:	b15b      	cbz	r3, 8008986 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800896e:	4628      	mov	r0, r5
 8008970:	f003 ffae 	bl	800c8d0 <pended_on_thread>
 8008974:	4629      	mov	r1, r5
 8008976:	f003 ffec 	bl	800c952 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800897a:	7b6b      	ldrb	r3, [r5, #13]
 800897c:	f023 0302 	bic.w	r3, r3, #2
 8008980:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	60ab      	str	r3, [r5, #8]
 8008986:	f105 0018 	add.w	r0, r5, #24
 800898a:	f004 f998 	bl	800ccbe <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800898e:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 8008990:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008992:	42ac      	cmp	r4, r5
 8008994:	d01d      	beq.n	80089d2 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8008996:	b1e4      	cbz	r4, 80089d2 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8008998:	4620      	mov	r0, r4
 800899a:	f003 ff99 	bl	800c8d0 <pended_on_thread>
 800899e:	4621      	mov	r1, r4
 80089a0:	f003 ffd7 	bl	800c952 <z_priq_dumb_remove>
 80089a4:	7b63      	ldrb	r3, [r4, #13]
 80089a6:	f023 0302 	bic.w	r3, r3, #2
 80089aa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80089ac:	2600      	movs	r6, #0
 80089ae:	60a6      	str	r6, [r4, #8]
 80089b0:	f104 0018 	add.w	r0, r4, #24
 80089b4:	f004 f983 	bl	800ccbe <z_abort_timeout>
 80089b8:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7ff fe50 	bl	8008660 <ready_thread>
 80089c0:	e7e6      	b.n	8008990 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80089c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c6:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 80089c8:	4601      	mov	r1, r0
 80089ca:	4804      	ldr	r0, [pc, #16]	; (80089dc <end_thread+0x90>)
 80089cc:	f003 ffc1 	bl	800c952 <z_priq_dumb_remove>
}
 80089d0:	e7cb      	b.n	800896a <end_thread+0x1e>
		update_cache(1);
 80089d2:	2001      	movs	r0, #1
 80089d4:	f7ff fd84 	bl	80084e0 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 80089d8:	bd70      	pop	{r4, r5, r6, pc}
 80089da:	4770      	bx	lr
 80089dc:	20000e20 	.word	0x20000e20

080089e0 <z_sched_init>:
{
 80089e0:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <z_sched_init+0x18>)
 80089e4:	f103 021c 	add.w	r2, r3, #28
 80089e8:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 80089ea:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80089ec:	2100      	movs	r1, #0
 80089ee:	4608      	mov	r0, r1
 80089f0:	f7ff fd12 	bl	8008418 <k_sched_time_slice_set>
}
 80089f4:	bd08      	pop	{r3, pc}
 80089f6:	bf00      	nop
 80089f8:	20000e04 	.word	0x20000e04

080089fc <z_impl_k_yield>:
{
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	f04f 0310 	mov.w	r3, #16
 8008a02:	f3ef 8611 	mrs	r6, BASEPRI
 8008a06:	f383 8812 	msr	BASEPRI_MAX, r3
 8008a0a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 8008a0e:	4c1c      	ldr	r4, [pc, #112]	; (8008a80 <z_impl_k_yield+0x84>)
 8008a10:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008a12:	7b4b      	ldrb	r3, [r1, #13]
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 8008a1a:	f104 071c 	add.w	r7, r4, #28
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f003 ff97 	bl	800c952 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 8008a24:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008a26:	7b6b      	ldrb	r3, [r5, #13]
 8008a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a2c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8008a2e:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008a30:	42bc      	cmp	r4, r7
 8008a32:	d023      	beq.n	8008a7c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a34:	b16c      	cbz	r4, 8008a52 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f003 ff4b 	bl	800c8d4 <z_sched_prio_cmp>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	dc16      	bgt.n	8008a70 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008a42:	b134      	cbz	r4, 8008a52 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8008a44:	4b0e      	ldr	r3, [pc, #56]	; (8008a80 <z_impl_k_yield+0x84>)
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	d002      	beq.n	8008a52 <z_impl_k_yield+0x56>
 8008a4c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	d1f0      	bne.n	8008a34 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <z_impl_k_yield+0x84>)
 8008a54:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008a56:	f103 011c 	add.w	r1, r3, #28
 8008a5a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8008a5c:	606a      	str	r2, [r5, #4]
	tail->next = node;
 8008a5e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8008a60:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8008a62:	2001      	movs	r0, #1
 8008a64:	f7ff fd3c 	bl	80084e0 <update_cache>
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7fa ff6f 	bl	800394c <arch_swap>
}
 8008a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8008a70:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8008a72:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8008a74:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8008a76:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008a78:	6065      	str	r5, [r4, #4]
}
 8008a7a:	e7f2      	b.n	8008a62 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008a7c:	2400      	movs	r4, #0
 8008a7e:	e7d9      	b.n	8008a34 <z_impl_k_yield+0x38>
 8008a80:	20000e04 	.word	0x20000e04

08008a84 <z_tick_sleep>:
{
 8008a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8008a88:	ea50 0301 	orrs.w	r3, r0, r1
 8008a8c:	d038      	beq.n	8008b00 <z_tick_sleep+0x7c>
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 8008a92:	f06f 0301 	mvn.w	r3, #1
 8008a96:	1a1b      	subs	r3, r3, r0
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a9c:	eb62 0201 	sbc.w	r2, r2, r1
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	f172 0300 	sbcs.w	r3, r2, #0
 8008aa6:	db2f      	blt.n	8008b08 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8008aa8:	f06f 0501 	mvn.w	r5, #1
 8008aac:	1a2d      	subs	r5, r5, r0
 8008aae:	f04f 0310 	mov.w	r3, #16
 8008ab2:	f3ef 8811 	mrs	r8, BASEPRI
 8008ab6:	f383 8812 	msr	BASEPRI_MAX, r3
 8008aba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 8008abe:	4f14      	ldr	r7, [pc, #80]	; (8008b10 <z_tick_sleep+0x8c>)
 8008ac0:	68b8      	ldr	r0, [r7, #8]
 8008ac2:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <z_tick_sleep+0x90>)
 8008ac4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8008ac6:	f7ff fe47 	bl	8008758 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8008aca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008acc:	4622      	mov	r2, r4
 8008ace:	4633      	mov	r3, r6
 8008ad0:	4911      	ldr	r1, [pc, #68]	; (8008b18 <z_tick_sleep+0x94>)
 8008ad2:	3018      	adds	r0, #24
 8008ad4:	f000 f8ee 	bl	8008cb4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8008ad8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008ada:	7b53      	ldrb	r3, [r2, #13]
 8008adc:	f043 0310 	orr.w	r3, r3, #16
 8008ae0:	7353      	strb	r3, [r2, #13]
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f7fa ff32 	bl	800394c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 8008ae8:	f004 f94b 	bl	800cd82 <sys_clock_tick_get_32>
 8008aec:	1a28      	subs	r0, r5, r0
 8008aee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 8008af2:	2801      	cmp	r0, #1
 8008af4:	f173 0300 	sbcs.w	r3, r3, #0
 8008af8:	da00      	bge.n	8008afc <z_tick_sleep+0x78>
	return 0;
 8008afa:	2000      	movs	r0, #0
}
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8008b00:	f7ff ff7c 	bl	80089fc <z_impl_k_yield>
		return 0;
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7f9      	b.n	8008afc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 8008b08:	f004 f93b 	bl	800cd82 <sys_clock_tick_get_32>
 8008b0c:	1905      	adds	r5, r0, r4
 8008b0e:	e7ce      	b.n	8008aae <z_tick_sleep+0x2a>
 8008b10:	20000e04 	.word	0x20000e04
 8008b14:	20000e3c 	.word	0x20000e3c
 8008b18:	0800c9f1 	.word	0x0800c9f1

08008b1c <z_impl_k_sleep>:
{
 8008b1c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008b1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008b22:	bf08      	it	eq
 8008b24:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8008b28:	d007      	beq.n	8008b3a <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8008b2a:	f7ff ffab 	bl	8008a84 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8008b2e:	220a      	movs	r2, #10
 8008b30:	2300      	movs	r3, #0
 8008b32:	17c1      	asrs	r1, r0, #31
 8008b34:	f7f7 fec6 	bl	80008c4 <__aeabi_uldivmod>
}
 8008b38:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8008b3a:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <z_impl_k_sleep+0x2c>)
 8008b3c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8008b3e:	f7ff fe9b 	bl	8008878 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8008b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b46:	e7f7      	b.n	8008b38 <z_impl_k_sleep+0x1c>
 8008b48:	20000e04 	.word	0x20000e04

08008b4c <z_impl_z_current_get>:
}
 8008b4c:	4b01      	ldr	r3, [pc, #4]	; (8008b54 <z_impl_z_current_get+0x8>)
 8008b4e:	6898      	ldr	r0, [r3, #8]
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000e04 	.word	0x20000e04

08008b58 <z_impl_k_is_preempt_thread>:
 8008b58:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8008b5c:	b933      	cbnz	r3, 8008b6c <z_impl_k_is_preempt_thread+0x14>
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <z_impl_k_is_preempt_thread+0x1c>)
 8008b60:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8008b62:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8008b64:	2b7f      	cmp	r3, #127	; 0x7f
 8008b66:	d803      	bhi.n	8008b70 <z_impl_k_is_preempt_thread+0x18>
 8008b68:	2001      	movs	r0, #1
 8008b6a:	4770      	bx	lr
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	4770      	bx	lr
 8008b70:	2000      	movs	r0, #0
}
 8008b72:	4770      	bx	lr
 8008b74:	20000e04 	.word	0x20000e04

08008b78 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	f04f 0310 	mov.w	r3, #16
 8008b7e:	f3ef 8511 	mrs	r5, BASEPRI
 8008b82:	f383 8812 	msr	BASEPRI_MAX, r3
 8008b86:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8008b8a:	7b43      	ldrb	r3, [r0, #13]
 8008b8c:	f013 0f08 	tst.w	r3, #8
 8008b90:	d004      	beq.n	8008b9c <z_thread_abort+0x24>
	__asm__ volatile(
 8008b92:	f385 8811 	msr	BASEPRI, r5
 8008b96:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	4604      	mov	r4, r0
	end_thread(thread);
 8008b9e:	f7ff fed5 	bl	800894c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 8008ba2:	4b08      	ldr	r3, [pc, #32]	; (8008bc4 <z_thread_abort+0x4c>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	d004      	beq.n	8008bb4 <z_thread_abort+0x3c>
 8008baa:	f385 8811 	msr	BASEPRI, r5
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	e7f2      	b.n	8008b9a <z_thread_abort+0x22>
 8008bb4:	f3ef 8305 	mrs	r3, IPSR
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f6      	bne.n	8008baa <z_thread_abort+0x32>
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f7fa fec5 	bl	800394c <arch_swap>
	return ret;
 8008bc2:	e7f2      	b.n	8008baa <z_thread_abort+0x32>
 8008bc4:	20000e04 	.word	0x20000e04

08008bc8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8008bc8:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 8008bd0:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8008bd4:	e9cd bc00 	strd	fp, ip, [sp]
 8008bd8:	f7ff fdda 	bl	8008790 <z_pend_curr>

	if (data != NULL) {
 8008bdc:	b11c      	cbz	r4, 8008be6 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 8008bde:	4b03      	ldr	r3, [pc, #12]	; (8008bec <z_sched_wait+0x24>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 8008be6:	b003      	add	sp, #12
 8008be8:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 8008bec:	20000e04 	.word	0x20000e04

08008bf0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8008bf0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 8008bf2:	4806      	ldr	r0, [pc, #24]	; (8008c0c <z_data_copy+0x1c>)
 8008bf4:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <z_data_copy+0x20>)
 8008bf6:	1a12      	subs	r2, r2, r0
 8008bf8:	4906      	ldr	r1, [pc, #24]	; (8008c14 <z_data_copy+0x24>)
 8008bfa:	f004 f979 	bl	800cef0 <memcpy>
 8008bfe:	4a06      	ldr	r2, [pc, #24]	; (8008c18 <z_data_copy+0x28>)
 8008c00:	4906      	ldr	r1, [pc, #24]	; (8008c1c <z_data_copy+0x2c>)
 8008c02:	4807      	ldr	r0, [pc, #28]	; (8008c20 <z_data_copy+0x30>)
 8008c04:	f004 f974 	bl	800cef0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8008c08:	bd08      	pop	{r3, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000000 	.word	0x20000000
 8008c10:	200004b4 	.word	0x200004b4
 8008c14:	0800ed04 	.word	0x0800ed04
 8008c18:	00000000 	.word	0x00000000
 8008c1c:	0800ed04 	.word	0x0800ed04
 8008c20:	20000000 	.word	0x20000000

08008c24 <first>:
	return list->head == list;
 8008c24:	4b03      	ldr	r3, [pc, #12]	; (8008c34 <first+0x10>)
 8008c26:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008c28:	4298      	cmp	r0, r3
 8008c2a:	d000      	beq.n	8008c2e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8008c2c:	4770      	bx	lr
 8008c2e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8008c30:	e7fc      	b.n	8008c2c <first+0x8>
 8008c32:	bf00      	nop
 8008c34:	200000b4 	.word	0x200000b4

08008c38 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008c38:	b130      	cbz	r0, 8008c48 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 8008c3a:	4a04      	ldr	r2, [pc, #16]	; (8008c4c <next+0x14>)
 8008c3c:	6852      	ldr	r2, [r2, #4]
 8008c3e:	4290      	cmp	r0, r2
 8008c40:	d001      	beq.n	8008c46 <next+0xe>
 8008c42:	6800      	ldr	r0, [r0, #0]
 8008c44:	4770      	bx	lr
 8008c46:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	200000b4 	.word	0x200000b4

08008c50 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8008c50:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <elapsed+0x14>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	b10b      	cbz	r3, 8008c5c <elapsed+0xc>
 8008c58:	2000      	movs	r0, #0
}
 8008c5a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8008c5c:	f7fe fc8a 	bl	8007574 <sys_clock_elapsed>
 8008c60:	e7fb      	b.n	8008c5a <elapsed+0xa>
 8008c62:	bf00      	nop
 8008c64:	20000e4c 	.word	0x20000e4c

08008c68 <next_timeout>:

static int32_t next_timeout(void)
{
 8008c68:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8008c6a:	f7ff ffdb 	bl	8008c24 <first>
 8008c6e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8008c70:	f7ff ffee 	bl	8008c50 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8008c74:	b18c      	cbz	r4, 8008c9a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	6962      	ldr	r2, [r4, #20]
 8008c7a:	1a1b      	subs	r3, r3, r0
 8008c7c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	f172 0100 	sbcs.w	r1, r2, #0
 8008c86:	db11      	blt.n	8008cac <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c8e:	f172 0300 	sbcs.w	r3, r2, #0
 8008c92:	db04      	blt.n	8008c9e <next_timeout+0x36>
 8008c94:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008c98:	e001      	b.n	8008c9e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 8008c9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8008c9e:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <next_timeout+0x48>)
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	b113      	cbz	r3, 8008caa <next_timeout+0x42>
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	da00      	bge.n	8008caa <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 8008ca8:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8008caa:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8008cac:	2000      	movs	r0, #0
 8008cae:	e7f6      	b.n	8008c9e <next_timeout+0x36>
 8008cb0:	20000e04 	.word	0x20000e04

08008cb4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cb8:	bf08      	it	eq
 8008cba:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008cbe:	d07f      	beq.n	8008dc0 <z_add_timeout+0x10c>
{
 8008cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	4691      	mov	r9, r2
 8008cc8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8008cca:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8008ccc:	2300      	movs	r3, #0
	__asm__ volatile(
 8008cce:	f04f 0210 	mov.w	r2, #16
 8008cd2:	f3ef 8711 	mrs	r7, BASEPRI
 8008cd6:	f382 8812 	msr	BASEPRI_MAX, r2
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	e021      	b.n	8008d24 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 8008ce0:	f7ff ffb6 	bl	8008c50 <elapsed>
 8008ce4:	eb19 0800 	adds.w	r8, r9, r0
 8008ce8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 8008cec:	f118 0301 	adds.w	r3, r8, #1
 8008cf0:	f140 0000 	adc.w	r0, r0, #0
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	6160      	str	r0, [r4, #20]
 8008cf8:	e038      	b.n	8008d6c <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8008cfa:	1a51      	subs	r1, r2, r1
 8008cfc:	eb66 0303 	sbc.w	r3, r6, r3
 8008d00:	6101      	str	r1, [r0, #16]
 8008d02:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 8008d04:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 8008d06:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8008d08:	6020      	str	r0, [r4, #0]
	prev->next = node;
 8008d0a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008d0c:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d040      	beq.n	8008d94 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8008d12:	f7ff ff87 	bl	8008c24 <first>
 8008d16:	4284      	cmp	r4, r0
 8008d18:	d043      	beq.n	8008da2 <z_add_timeout+0xee>
	__asm__ volatile(
 8008d1a:	f387 8811 	msr	BASEPRI, r7
 8008d1e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8008d22:	2301      	movs	r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d149      	bne.n	8008dbc <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8008d28:	f06f 0201 	mvn.w	r2, #1
 8008d2c:	ebb2 0209 	subs.w	r2, r2, r9
 8008d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d34:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dbd1      	blt.n	8008ce0 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8008d3c:	4b21      	ldr	r3, [pc, #132]	; (8008dc4 <z_add_timeout+0x110>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	eb19 0202 	adds.w	r2, r9, r2
 8008d46:	eb43 0305 	adc.w	r3, r3, r5
 8008d4a:	f06f 0801 	mvn.w	r8, #1
 8008d4e:	ebb8 0802 	subs.w	r8, r8, r2
 8008d52:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 8008d56:	4641      	mov	r1, r8
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f1b8 0f01 	cmp.w	r8, #1
 8008d5e:	f173 0300 	sbcs.w	r3, r3, #0
 8008d62:	da01      	bge.n	8008d68 <z_add_timeout+0xb4>
 8008d64:	2101      	movs	r1, #1
 8008d66:	2200      	movs	r2, #0
 8008d68:	6121      	str	r1, [r4, #16]
 8008d6a:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8008d6c:	f7ff ff5a 	bl	8008c24 <first>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d0cc      	beq.n	8008d0e <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8008d74:	6902      	ldr	r2, [r0, #16]
 8008d76:	6946      	ldr	r6, [r0, #20]
 8008d78:	6921      	ldr	r1, [r4, #16]
 8008d7a:	6963      	ldr	r3, [r4, #20]
 8008d7c:	4291      	cmp	r1, r2
 8008d7e:	eb73 0c06 	sbcs.w	ip, r3, r6
 8008d82:	dbba      	blt.n	8008cfa <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8008d84:	1a89      	subs	r1, r1, r2
 8008d86:	eb63 0306 	sbc.w	r3, r3, r6
 8008d8a:	6121      	str	r1, [r4, #16]
 8008d8c:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8008d8e:	f7ff ff53 	bl	8008c38 <next>
 8008d92:	e7ed      	b.n	8008d70 <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <z_add_timeout+0x114>)
 8008d96:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8008d98:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8008d9a:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8008d9c:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008d9e:	605c      	str	r4, [r3, #4]
}
 8008da0:	e7b7      	b.n	8008d12 <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8008da2:	f7ff ff61 	bl	8008c68 <next_timeout>

			if (next_time == 0 ||
 8008da6:	4603      	mov	r3, r0
 8008da8:	b118      	cbz	r0, 8008db2 <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 8008daa:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <z_add_timeout+0x118>)
 8008dac:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8008dae:	4282      	cmp	r2, r0
 8008db0:	d0b3      	beq.n	8008d1a <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fb5d 	bl	8007474 <sys_clock_set_timeout>
 8008dba:	e7ae      	b.n	8008d1a <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000828 	.word	0x20000828
 8008dc8:	200000b4 	.word	0x200000b4
 8008dcc:	20000e04 	.word	0x20000e04

08008dd0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8008dd4:	f7ff fbee 	bl	80085b4 <z_time_slice>
	__asm__ volatile(
 8008dd8:	f04f 0310 	mov.w	r3, #16
 8008ddc:	f3ef 8511 	mrs	r5, BASEPRI
 8008de0:	f383 8812 	msr	BASEPRI_MAX, r3
 8008de4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8008de8:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <sys_clock_announce+0xbc>)
 8008dea:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8008dec:	e020      	b.n	8008e30 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8008dee:	4828      	ldr	r0, [pc, #160]	; (8008e90 <sys_clock_announce+0xc0>)
 8008df0:	6801      	ldr	r1, [r0, #0]
 8008df2:	6846      	ldr	r6, [r0, #4]
 8008df4:	1889      	adds	r1, r1, r2
 8008df6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 8008dfa:	6001      	str	r1, [r0, #0]
 8008dfc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	4a22      	ldr	r2, [pc, #136]	; (8008e8c <sys_clock_announce+0xbc>)
 8008e02:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 8008e04:	2200      	movs	r2, #0
 8008e06:	2300      	movs	r3, #0
 8008e08:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f003 ff21 	bl	800cc54 <remove_timeout>
	__asm__ volatile(
 8008e12:	f385 8811 	msr	BASEPRI, r5
 8008e16:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4798      	blx	r3
	__asm__ volatile(
 8008e20:	f04f 0310 	mov.w	r3, #16
 8008e24:	f3ef 8511 	mrs	r5, BASEPRI
 8008e28:	f383 8812 	msr	BASEPRI_MAX, r3
 8008e2c:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 8008e30:	f7ff fef8 	bl	8008c24 <first>
 8008e34:	4604      	mov	r4, r0
 8008e36:	b140      	cbz	r0, 8008e4a <sys_clock_announce+0x7a>
 8008e38:	6902      	ldr	r2, [r0, #16]
 8008e3a:	6941      	ldr	r1, [r0, #20]
 8008e3c:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <sys_clock_announce+0xbc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	17d8      	asrs	r0, r3, #31
 8008e42:	4293      	cmp	r3, r2
 8008e44:	eb70 0101 	sbcs.w	r1, r0, r1
 8008e48:	dad1      	bge.n	8008dee <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8008e4a:	b144      	cbz	r4, 8008e5e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <sys_clock_announce+0xbc>)
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	6962      	ldr	r2, [r4, #20]
 8008e54:	1a5b      	subs	r3, r3, r1
 8008e56:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 8008e5e:	4a0c      	ldr	r2, [pc, #48]	; (8008e90 <sys_clock_announce+0xc0>)
 8008e60:	4e0a      	ldr	r6, [pc, #40]	; (8008e8c <sys_clock_announce+0xbc>)
 8008e62:	6830      	ldr	r0, [r6, #0]
 8008e64:	6813      	ldr	r3, [r2, #0]
 8008e66:	6851      	ldr	r1, [r2, #4]
 8008e68:	181b      	adds	r3, r3, r0
 8008e6a:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 8008e72:	2400      	movs	r4, #0
 8008e74:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8008e76:	f7ff fef7 	bl	8008c68 <next_timeout>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	f7fe fafa 	bl	8007474 <sys_clock_set_timeout>
	__asm__ volatile(
 8008e80:	f385 8811 	msr	BASEPRI, r5
 8008e84:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000e4c 	.word	0x20000e4c
 8008e90:	20000828 	.word	0x20000828

08008e94 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8008e94:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8008e96:	2300      	movs	r3, #0
	__asm__ volatile(
 8008e98:	f04f 0210 	mov.w	r2, #16
 8008e9c:	f3ef 8411 	mrs	r4, BASEPRI
 8008ea0:	f382 8812 	msr	BASEPRI_MAX, r2
 8008ea4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	4619      	mov	r1, r3
 8008eac:	e00c      	b.n	8008ec8 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 8008eae:	f7fe fb61 	bl	8007574 <sys_clock_elapsed>
 8008eb2:	4a07      	ldr	r2, [pc, #28]	; (8008ed0 <sys_clock_tick_get+0x3c>)
 8008eb4:	6813      	ldr	r3, [r2, #0]
 8008eb6:	6851      	ldr	r1, [r2, #4]
 8008eb8:	18c0      	adds	r0, r0, r3
 8008eba:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 8008ebe:	f384 8811 	msr	BASEPRI, r4
 8008ec2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0f0      	beq.n	8008eae <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000828 	.word	0x20000828

08008ed4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8008ed4:	b900      	cbnz	r0, 8008ed8 <z_impl_k_busy_wait+0x4>
 8008ed6:	4770      	bx	lr
{
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4605      	mov	r5, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8008edc:	f7fe fb6a 	bl	80075b4 <sys_clock_cycle_get_32>
 8008ee0:	4604      	mov	r4, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 8008ee2:	0eeb      	lsrs	r3, r5, #27
 8008ee4:	0169      	lsls	r1, r5, #5
 8008ee6:	1b4a      	subs	r2, r1, r5
 8008ee8:	f163 0000 	sbc.w	r0, r3, #0
 8008eec:	0183      	lsls	r3, r0, #6
 8008eee:	ea43 6392 	orr.w	r3, r3, r2, lsr #26
 8008ef2:	0191      	lsls	r1, r2, #6
 8008ef4:	1a89      	subs	r1, r1, r2
 8008ef6:	eb63 0300 	sbc.w	r3, r3, r0
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f00:	00c9      	lsls	r1, r1, #3
 8008f02:	194d      	adds	r5, r1, r5
 8008f04:	f143 0300 	adc.w	r3, r3, #0
 8008f08:	02d9      	lsls	r1, r3, #11
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <z_impl_k_busy_wait+0x54>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	02e8      	lsls	r0, r5, #11
 8008f10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008f14:	f7f7 fcd6 	bl	80008c4 <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 8008f18:	4605      	mov	r5, r0
 8008f1a:	f7fe fb4b 	bl	80075b4 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8008f1e:	1b00      	subs	r0, r0, r4
 8008f20:	42a8      	cmp	r0, r5
 8008f22:	d3fa      	bcc.n	8008f1a <z_impl_k_busy_wait+0x46>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	bf00      	nop
 8008f28:	000f4240 	.word	0x000f4240

08008f2c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4604      	mov	r4, r0
	__asm__ volatile(
 8008f30:	f04f 0310 	mov.w	r3, #16
 8008f34:	f3ef 8511 	mrs	r5, BASEPRI
 8008f38:	f383 8812 	msr	BASEPRI_MAX, r3
 8008f3c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8008f40:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008f42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008f44:	ea52 0103 	orrs.w	r1, r2, r3
 8008f48:	d005      	beq.n	8008f56 <z_timer_expiration_handler+0x2a>
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f4e:	bf08      	it	eq
 8008f50:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008f54:	d119      	bne.n	8008f8a <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8008f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008f58:	3301      	adds	r3, #1
 8008f5a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8008f5c:	6a23      	ldr	r3, [r4, #32]
 8008f5e:	b10b      	cbz	r3, 8008f64 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 8008f60:	4620      	mov	r0, r4
 8008f62:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8008f64:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8008f68:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	d013      	beq.n	8008f96 <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8008f6e:	b194      	cbz	r4, 8008f96 <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 8008f70:	4620      	mov	r0, r4
 8008f72:	f003 fcb9 	bl	800c8e8 <z_unpend_thread_no_timeout>
 8008f76:	2300      	movs	r3, #0
 8008f78:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 8008f7a:	f385 8811 	msr	BASEPRI, r5
 8008f7e:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 8008f82:	4620      	mov	r0, r4
 8008f84:	f003 fd18 	bl	800c9b8 <z_ready_thread>
}
 8008f88:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8008f8a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8008f8e:	4904      	ldr	r1, [pc, #16]	; (8008fa0 <z_timer_expiration_handler+0x74>)
 8008f90:	f7ff fe90 	bl	8008cb4 <z_add_timeout>
 8008f94:	e7df      	b.n	8008f56 <z_timer_expiration_handler+0x2a>
 8008f96:	f385 8811 	msr	BASEPRI, r5
 8008f9a:	f3bf 8f6f 	isb	sy
		return;
 8008f9e:	e7f3      	b.n	8008f88 <z_timer_expiration_handler+0x5c>
 8008fa0:	08008f2d 	.word	0x08008f2d

08008fa4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8008fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa8:	461d      	mov	r5, r3
 8008faa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008fae:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb4:	bf08      	it	eq
 8008fb6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008fba:	d02f      	beq.n	800901c <z_impl_k_timer_start+0x78>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	4616      	mov	r6, r2
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8008fca:	bf08      	it	eq
 8008fcc:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8008fd0:	d00d      	beq.n	8008fee <z_impl_k_timer_start+0x4a>
 8008fd2:	ea58 0c07 	orrs.w	ip, r8, r7
 8008fd6:	d00a      	beq.n	8008fee <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 8008fd8:	f06f 0c01 	mvn.w	ip, #1
 8008fdc:	ebbc 0c08 	subs.w	ip, ip, r8
 8008fe0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008fe4:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8008fe8:	f1bc 0f00 	cmp.w	ip, #0
 8008fec:	db18      	blt.n	8009020 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8008fee:	f06f 0201 	mvn.w	r2, #1
 8008ff2:	1ad2      	subs	r2, r2, r3
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ff8:	eb62 0201 	sbc.w	r2, r2, r1
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	db1c      	blt.n	800903a <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8009000:	4620      	mov	r0, r4
 8009002:	f003 fe5c 	bl	800ccbe <z_abort_timeout>
	timer->period = period;
 8009006:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 800900a:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009010:	4632      	mov	r2, r6
 8009012:	462b      	mov	r3, r5
 8009014:	490d      	ldr	r1, [pc, #52]	; (800904c <z_impl_k_timer_start+0xa8>)
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff fe4c 	bl	8008cb4 <z_add_timeout>
		     duration);
}
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8009020:	3a01      	subs	r2, #1
 8009022:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 8009026:	4690      	mov	r8, r2
 8009028:	4607      	mov	r7, r0
 800902a:	2a01      	cmp	r2, #1
 800902c:	f170 0200 	sbcs.w	r2, r0, #0
 8009030:	dadd      	bge.n	8008fee <z_impl_k_timer_start+0x4a>
 8009032:	f04f 0801 	mov.w	r8, #1
 8009036:	2700      	movs	r7, #0
 8009038:	e7d9      	b.n	8008fee <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800903a:	1e5e      	subs	r6, r3, #1
 800903c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8009040:	460d      	mov	r5, r1
 8009042:	2900      	cmp	r1, #0
 8009044:	dadc      	bge.n	8009000 <z_impl_k_timer_start+0x5c>
 8009046:	2600      	movs	r6, #0
 8009048:	4635      	mov	r5, r6
 800904a:	e7d9      	b.n	8009000 <z_impl_k_timer_start+0x5c>
 800904c:	08008f2d 	.word	0x08008f2d

08009050 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b087      	sub	sp, #28
 8009056:	4682      	mov	sl, r0
 8009058:	460f      	mov	r7, r1
 800905a:	4693      	mov	fp, r2
 800905c:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800905e:	2500      	movs	r5, #0
	int events_registered = 0;
 8009060:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 8009062:	e02f      	b.n	80090c4 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	b1cb      	cbz	r3, 800909e <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800906a:	f04f 0902 	mov.w	r9, #2
			return true;
 800906e:	2301      	movs	r3, #1
 8009070:	e015      	b.n	800909e <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 8009072:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	b193      	cbz	r3, 800909e <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8009078:	f04f 0904 	mov.w	r9, #4
			return true;
 800907c:	2301      	movs	r3, #1
 800907e:	e00e      	b.n	800909e <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	b15b      	cbz	r3, 800909e <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 8009086:	f04f 0901 	mov.w	r9, #1
			return true;
 800908a:	464b      	mov	r3, r9
 800908c:	e007      	b.n	800909e <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	b123      	cbz	r3, 800909e <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 8009094:	f04f 0910 	mov.w	r9, #16
			return true;
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <register_events+0x4e>
	switch (event->type) {
 800909c:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d03a      	beq.n	8009118 <register_events+0xc8>
	event->poller = NULL;
 80090a2:	2100      	movs	r1, #0
 80090a4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	f3c3 3245 	ubfx	r2, r3, #13, #6
 80090ac:	ea49 0202 	orr.w	r2, r9, r2
 80090b0:	f362 3352 	bfi	r3, r2, #13, #6
 80090b4:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 80090b6:	f88b 1000 	strb.w	r1, [fp]
 80090ba:	f386 8811 	msr	BASEPRI, r6
 80090be:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 80090c2:	3501      	adds	r5, #1
 80090c4:	42bd      	cmp	r5, r7
 80090c6:	f280 81b9 	bge.w	800943c <register_events+0x3ec>
	__asm__ volatile(
 80090ca:	f04f 0310 	mov.w	r3, #16
 80090ce:	f3ef 8611 	mrs	r6, BASEPRI
 80090d2:	f383 8812 	msr	BASEPRI_MAX, r3
 80090d6:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 80090da:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 80090de:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80090e2:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 80090e6:	7b63      	ldrb	r3, [r4, #13]
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	3b01      	subs	r3, #1
 80090ee:	2b07      	cmp	r3, #7
 80090f0:	d8d4      	bhi.n	800909c <register_events+0x4c>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <register_events+0xa8>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009081 	.word	0x08009081
 80090fc:	08009065 	.word	0x08009065
 8009100:	0800909d 	.word	0x0800909d
 8009104:	08009073 	.word	0x08009073
 8009108:	0800909d 	.word	0x0800909d
 800910c:	0800909d 	.word	0x0800909d
 8009110:	0800909d 	.word	0x0800909d
 8009114:	0800908f 	.word	0x0800908f
		} else if (!just_check && poller->is_polling) {
 8009118:	9b00      	ldr	r3, [sp, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1cd      	bne.n	80090ba <register_events+0x6a>
 800911e:	f89b 3000 	ldrb.w	r3, [fp]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0c9      	beq.n	80090ba <register_events+0x6a>
	switch (event->type) {
 8009126:	7b63      	ldrb	r3, [r4, #13]
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	3b01      	subs	r3, #1
 800912e:	2b07      	cmp	r3, #7
 8009130:	d848      	bhi.n	80091c4 <register_events+0x174>
 8009132:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009136:	00cb      	.short	0x00cb
 8009138:	00470008 	.word	0x00470008
 800913c:	0047006d 	.word	0x0047006d
 8009140:	00470047 	.word	0x00470047
 8009144:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	f103 0210 	add.w	r2, r3, #16
 800914e:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8009150:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009152:	429a      	cmp	r2, r3
 8009154:	d02f      	beq.n	80091b6 <register_events+0x166>
 8009156:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009158:	2b00      	cmp	r3, #0
 800915a:	d02c      	beq.n	80091b6 <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800915c:	6898      	ldr	r0, [r3, #8]
 800915e:	f003 fe3f 	bl	800cde0 <poller_thread>
 8009162:	9005      	str	r0, [sp, #20]
 8009164:	4658      	mov	r0, fp
 8009166:	f003 fe3b 	bl	800cde0 <poller_thread>
 800916a:	4601      	mov	r1, r0
 800916c:	9003      	str	r0, [sp, #12]
 800916e:	9805      	ldr	r0, [sp, #20]
 8009170:	f003 fbb0 	bl	800c8d4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009174:	2800      	cmp	r0, #0
 8009176:	dc1e      	bgt.n	80091b6 <register_events+0x166>
	return list->head == list;
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800917c:	9a02      	ldr	r2, [sp, #8]
 800917e:	429a      	cmp	r2, r3
 8009180:	d030      	beq.n	80091e4 <register_events+0x194>
 8009182:	9404      	str	r4, [sp, #16]
 8009184:	9505      	str	r5, [sp, #20]
 8009186:	9d02      	ldr	r5, [sp, #8]
 8009188:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800918a:	2c00      	cmp	r4, #0
 800918c:	d030      	beq.n	80091f0 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800918e:	68a0      	ldr	r0, [r4, #8]
 8009190:	f003 fe26 	bl	800cde0 <poller_thread>
 8009194:	4601      	mov	r1, r0
 8009196:	9803      	ldr	r0, [sp, #12]
 8009198:	f003 fb9c 	bl	800c8d4 <z_sched_prio_cmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	dc17      	bgt.n	80091d0 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80091a0:	2c00      	cmp	r4, #0
 80091a2:	d028      	beq.n	80091f6 <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 80091a4:	686b      	ldr	r3, [r5, #4]
 80091a6:	429c      	cmp	r4, r3
 80091a8:	d02f      	beq.n	800920a <register_events+0x1ba>
 80091aa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80091ac:	2c00      	cmp	r4, #0
 80091ae:	d1ec      	bne.n	800918a <register_events+0x13a>
 80091b0:	9c04      	ldr	r4, [sp, #16]
 80091b2:	9d05      	ldr	r5, [sp, #20]
 80091b4:	e021      	b.n	80091fa <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 80091b6:	9a02      	ldr	r2, [sp, #8]
 80091b8:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80091ba:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80091be:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80091c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80091c2:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 80091c4:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 80091c8:	9b01      	ldr	r3, [sp, #4]
 80091ca:	3301      	adds	r3, #1
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	e774      	b.n	80090ba <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 80091d0:	9d05      	ldr	r5, [sp, #20]
 80091d2:	4622      	mov	r2, r4
 80091d4:	9c04      	ldr	r4, [sp, #16]
 80091d6:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80091d8:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80091da:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80091de:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80091e0:	6054      	str	r4, [r2, #4]
			return;
 80091e2:	e7ef      	b.n	80091c4 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80091e4:	2300      	movs	r3, #0
 80091e6:	9404      	str	r4, [sp, #16]
 80091e8:	9505      	str	r5, [sp, #20]
 80091ea:	9d02      	ldr	r5, [sp, #8]
 80091ec:	461c      	mov	r4, r3
 80091ee:	e7cc      	b.n	800918a <register_events+0x13a>
 80091f0:	9c04      	ldr	r4, [sp, #16]
 80091f2:	9d05      	ldr	r5, [sp, #20]
 80091f4:	e001      	b.n	80091fa <register_events+0x1aa>
 80091f6:	9c04      	ldr	r4, [sp, #16]
 80091f8:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80091fa:	9a02      	ldr	r2, [sp, #8]
 80091fc:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80091fe:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009202:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009204:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009206:	6054      	str	r4, [r2, #4]
}
 8009208:	e7dc      	b.n	80091c4 <register_events+0x174>
 800920a:	9c04      	ldr	r4, [sp, #16]
 800920c:	9d05      	ldr	r5, [sp, #20]
 800920e:	e7f4      	b.n	80091fa <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	f103 0214 	add.w	r2, r3, #20
 8009218:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800921a:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800921c:	429a      	cmp	r2, r3
 800921e:	d02d      	beq.n	800927c <register_events+0x22c>
 8009220:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009222:	b35b      	cbz	r3, 800927c <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009224:	6898      	ldr	r0, [r3, #8]
 8009226:	f003 fddb 	bl	800cde0 <poller_thread>
 800922a:	9005      	str	r0, [sp, #20]
 800922c:	4658      	mov	r0, fp
 800922e:	f003 fdd7 	bl	800cde0 <poller_thread>
 8009232:	4601      	mov	r1, r0
 8009234:	9003      	str	r0, [sp, #12]
 8009236:	9805      	ldr	r0, [sp, #20]
 8009238:	f003 fb4c 	bl	800c8d4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800923c:	2800      	cmp	r0, #0
 800923e:	dc1d      	bgt.n	800927c <register_events+0x22c>
	return list->head == list;
 8009240:	9b04      	ldr	r3, [sp, #16]
 8009242:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009244:	9a02      	ldr	r2, [sp, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	d02a      	beq.n	80092a0 <register_events+0x250>
 800924a:	9404      	str	r4, [sp, #16]
 800924c:	9505      	str	r5, [sp, #20]
 800924e:	9d02      	ldr	r5, [sp, #8]
 8009250:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009252:	2c00      	cmp	r4, #0
 8009254:	d02a      	beq.n	80092ac <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009256:	68a0      	ldr	r0, [r4, #8]
 8009258:	f003 fdc2 	bl	800cde0 <poller_thread>
 800925c:	4601      	mov	r1, r0
 800925e:	9803      	ldr	r0, [sp, #12]
 8009260:	f003 fb38 	bl	800c8d4 <z_sched_prio_cmp>
 8009264:	2800      	cmp	r0, #0
 8009266:	dc11      	bgt.n	800928c <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009268:	b31c      	cbz	r4, 80092b2 <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800926a:	686b      	ldr	r3, [r5, #4]
 800926c:	429c      	cmp	r4, r3
 800926e:	d02a      	beq.n	80092c6 <register_events+0x276>
 8009270:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009272:	2c00      	cmp	r4, #0
 8009274:	d1ed      	bne.n	8009252 <register_events+0x202>
 8009276:	9c04      	ldr	r4, [sp, #16]
 8009278:	9d05      	ldr	r5, [sp, #20]
 800927a:	e01c      	b.n	80092b6 <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800927c:	9a02      	ldr	r2, [sp, #8]
 800927e:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009280:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009284:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009286:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009288:	6054      	str	r4, [r2, #4]
		return;
 800928a:	e79b      	b.n	80091c4 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800928c:	9d05      	ldr	r5, [sp, #20]
 800928e:	4622      	mov	r2, r4
 8009290:	9c04      	ldr	r4, [sp, #16]
 8009292:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009294:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009296:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800929a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800929c:	6054      	str	r4, [r2, #4]
			return;
 800929e:	e791      	b.n	80091c4 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80092a0:	2300      	movs	r3, #0
 80092a2:	9404      	str	r4, [sp, #16]
 80092a4:	9505      	str	r5, [sp, #20]
 80092a6:	9d02      	ldr	r5, [sp, #8]
 80092a8:	461c      	mov	r4, r3
 80092aa:	e7d2      	b.n	8009252 <register_events+0x202>
 80092ac:	9c04      	ldr	r4, [sp, #16]
 80092ae:	9d05      	ldr	r5, [sp, #20]
 80092b0:	e001      	b.n	80092b6 <register_events+0x266>
 80092b2:	9c04      	ldr	r4, [sp, #16]
 80092b4:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 80092b6:	9a02      	ldr	r2, [sp, #8]
 80092b8:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80092ba:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80092be:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80092c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80092c2:	6054      	str	r4, [r2, #4]
}
 80092c4:	e77e      	b.n	80091c4 <register_events+0x174>
 80092c6:	9c04      	ldr	r4, [sp, #16]
 80092c8:	9d05      	ldr	r5, [sp, #20]
 80092ca:	e7f4      	b.n	80092b6 <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80092d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d02c      	beq.n	8009330 <register_events+0x2e0>
 80092d6:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80092d8:	b353      	cbz	r3, 8009330 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80092da:	6898      	ldr	r0, [r3, #8]
 80092dc:	f003 fd80 	bl	800cde0 <poller_thread>
 80092e0:	9004      	str	r0, [sp, #16]
 80092e2:	4658      	mov	r0, fp
 80092e4:	f003 fd7c 	bl	800cde0 <poller_thread>
 80092e8:	4601      	mov	r1, r0
 80092ea:	9003      	str	r0, [sp, #12]
 80092ec:	9804      	ldr	r0, [sp, #16]
 80092ee:	f003 faf1 	bl	800c8d4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80092f2:	2800      	cmp	r0, #0
 80092f4:	dc1c      	bgt.n	8009330 <register_events+0x2e0>
	return list->head == list;
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d02a      	beq.n	8009354 <register_events+0x304>
 80092fe:	9404      	str	r4, [sp, #16]
 8009300:	9505      	str	r5, [sp, #20]
 8009302:	9d02      	ldr	r5, [sp, #8]
 8009304:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009306:	2c00      	cmp	r4, #0
 8009308:	d02a      	beq.n	8009360 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800930a:	68a0      	ldr	r0, [r4, #8]
 800930c:	f003 fd68 	bl	800cde0 <poller_thread>
 8009310:	4601      	mov	r1, r0
 8009312:	9803      	ldr	r0, [sp, #12]
 8009314:	f003 fade 	bl	800c8d4 <z_sched_prio_cmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	dc11      	bgt.n	8009340 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800931c:	b31c      	cbz	r4, 8009366 <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800931e:	686b      	ldr	r3, [r5, #4]
 8009320:	429c      	cmp	r4, r3
 8009322:	d02a      	beq.n	800937a <register_events+0x32a>
 8009324:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009326:	2c00      	cmp	r4, #0
 8009328:	d1ed      	bne.n	8009306 <register_events+0x2b6>
 800932a:	9c04      	ldr	r4, [sp, #16]
 800932c:	9d05      	ldr	r5, [sp, #20]
 800932e:	e01c      	b.n	800936a <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 8009330:	9a02      	ldr	r2, [sp, #8]
 8009332:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009334:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009338:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800933a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800933c:	6054      	str	r4, [r2, #4]
		return;
 800933e:	e741      	b.n	80091c4 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8009340:	9d05      	ldr	r5, [sp, #20]
 8009342:	4622      	mov	r2, r4
 8009344:	9c04      	ldr	r4, [sp, #16]
 8009346:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009348:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800934a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800934e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009350:	6054      	str	r4, [r2, #4]
			return;
 8009352:	e737      	b.n	80091c4 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009354:	2300      	movs	r3, #0
 8009356:	9404      	str	r4, [sp, #16]
 8009358:	9505      	str	r5, [sp, #20]
 800935a:	9d02      	ldr	r5, [sp, #8]
 800935c:	461c      	mov	r4, r3
 800935e:	e7d2      	b.n	8009306 <register_events+0x2b6>
 8009360:	9c04      	ldr	r4, [sp, #16]
 8009362:	9d05      	ldr	r5, [sp, #20]
 8009364:	e001      	b.n	800936a <register_events+0x31a>
 8009366:	9c04      	ldr	r4, [sp, #16]
 8009368:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800936a:	9a02      	ldr	r2, [sp, #8]
 800936c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800936e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009372:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009374:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009376:	6054      	str	r4, [r2, #4]
}
 8009378:	e724      	b.n	80091c4 <register_events+0x174>
 800937a:	9c04      	ldr	r4, [sp, #16]
 800937c:	9d05      	ldr	r5, [sp, #20]
 800937e:	e7f4      	b.n	800936a <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 8009380:	6923      	ldr	r3, [r4, #16]
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009388:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800938c:	429a      	cmp	r2, r3
 800938e:	d02d      	beq.n	80093ec <register_events+0x39c>
 8009390:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009392:	b35b      	cbz	r3, 80093ec <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009394:	6898      	ldr	r0, [r3, #8]
 8009396:	f003 fd23 	bl	800cde0 <poller_thread>
 800939a:	9005      	str	r0, [sp, #20]
 800939c:	4658      	mov	r0, fp
 800939e:	f003 fd1f 	bl	800cde0 <poller_thread>
 80093a2:	4601      	mov	r1, r0
 80093a4:	9003      	str	r0, [sp, #12]
 80093a6:	9805      	ldr	r0, [sp, #20]
 80093a8:	f003 fa94 	bl	800c8d4 <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dc1d      	bgt.n	80093ec <register_events+0x39c>
	return list->head == list;
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80093b4:	9a02      	ldr	r2, [sp, #8]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d02a      	beq.n	8009410 <register_events+0x3c0>
 80093ba:	9404      	str	r4, [sp, #16]
 80093bc:	9505      	str	r5, [sp, #20]
 80093be:	9d02      	ldr	r5, [sp, #8]
 80093c0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80093c2:	2c00      	cmp	r4, #0
 80093c4:	d02a      	beq.n	800941c <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 80093c6:	68a0      	ldr	r0, [r4, #8]
 80093c8:	f003 fd0a 	bl	800cde0 <poller_thread>
 80093cc:	4601      	mov	r1, r0
 80093ce:	9803      	ldr	r0, [sp, #12]
 80093d0:	f003 fa80 	bl	800c8d4 <z_sched_prio_cmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	dc11      	bgt.n	80093fc <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80093d8:	b31c      	cbz	r4, 8009422 <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 80093da:	686b      	ldr	r3, [r5, #4]
 80093dc:	429c      	cmp	r4, r3
 80093de:	d02a      	beq.n	8009436 <register_events+0x3e6>
 80093e0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80093e2:	2c00      	cmp	r4, #0
 80093e4:	d1ed      	bne.n	80093c2 <register_events+0x372>
 80093e6:	9c04      	ldr	r4, [sp, #16]
 80093e8:	9d05      	ldr	r5, [sp, #20]
 80093ea:	e01c      	b.n	8009426 <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 80093ec:	9a02      	ldr	r2, [sp, #8]
 80093ee:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80093f0:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80093f4:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80093f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80093f8:	6054      	str	r4, [r2, #4]
		return;
 80093fa:	e6e3      	b.n	80091c4 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80093fc:	9d05      	ldr	r5, [sp, #20]
 80093fe:	4622      	mov	r2, r4
 8009400:	9c04      	ldr	r4, [sp, #16]
 8009402:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009404:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009406:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800940a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800940c:	6054      	str	r4, [r2, #4]
			return;
 800940e:	e6d9      	b.n	80091c4 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009410:	2300      	movs	r3, #0
 8009412:	9404      	str	r4, [sp, #16]
 8009414:	9505      	str	r5, [sp, #20]
 8009416:	9d02      	ldr	r5, [sp, #8]
 8009418:	461c      	mov	r4, r3
 800941a:	e7d2      	b.n	80093c2 <register_events+0x372>
 800941c:	9c04      	ldr	r4, [sp, #16]
 800941e:	9d05      	ldr	r5, [sp, #20]
 8009420:	e001      	b.n	8009426 <register_events+0x3d6>
 8009422:	9c04      	ldr	r4, [sp, #16]
 8009424:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8009426:	9a02      	ldr	r2, [sp, #8]
 8009428:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800942a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800942e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009430:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009432:	6054      	str	r4, [r2, #4]
}
 8009434:	e6c6      	b.n	80091c4 <register_events+0x174>
 8009436:	9c04      	ldr	r4, [sp, #16]
 8009438:	9d05      	ldr	r5, [sp, #20]
 800943a:	e7f4      	b.n	8009426 <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800943c:	9801      	ldr	r0, [sp, #4]
 800943e:	b007      	add	sp, #28
 8009440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009444 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	4605      	mov	r5, r0
 800944c:	4690      	mov	r8, r2
 800944e:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8009450:	4b4f      	ldr	r3, [pc, #316]	; (8009590 <z_impl_k_poll+0x14c>)
 8009452:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 8009454:	2301      	movs	r3, #1
 8009456:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800945a:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800945e:	ea57 0302 	orrs.w	r3, r7, r2
 8009462:	bf0c      	ite	eq
 8009464:	2301      	moveq	r3, #1
 8009466:	2300      	movne	r3, #0
 8009468:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800946c:	f7ff fdf0 	bl	8009050 <register_events>
 8009470:	4604      	mov	r4, r0
 8009472:	f04f 0310 	mov.w	r3, #16
 8009476:	f3ef 8111 	mrs	r1, BASEPRI
 800947a:	f383 8812 	msr	BASEPRI_MAX, r3
 800947e:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8009482:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8009486:	b1b3      	cbz	r3, 80094b6 <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 8009488:	2300      	movs	r3, #0
 800948a:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800948e:	ea57 0308 	orrs.w	r3, r7, r8
 8009492:	d043      	beq.n	800951c <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8009494:	f8cd 8000 	str.w	r8, [sp]
 8009498:	9701      	str	r7, [sp, #4]
 800949a:	4a3e      	ldr	r2, [pc, #248]	; (8009594 <z_impl_k_poll+0x150>)
 800949c:	483e      	ldr	r0, [pc, #248]	; (8009598 <z_impl_k_poll+0x154>)
 800949e:	f7ff f977 	bl	8008790 <z_pend_curr>
 80094a2:	f04f 0310 	mov.w	r3, #16
 80094a6:	f3ef 8611 	mrs	r6, BASEPRI
 80094aa:	f383 8812 	msr	BASEPRI_MAX, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	46b4      	mov	ip, r6
	while (num_events--) {
 80094b4:	e04c      	b.n	8009550 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 80094b6:	460e      	mov	r6, r1
	while (num_events--) {
 80094b8:	e00c      	b.n	80094d4 <z_impl_k_poll+0x90>
	__asm__ volatile(
 80094ba:	f386 8811 	msr	BASEPRI, r6
 80094be:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80094c2:	f04f 0310 	mov.w	r3, #16
 80094c6:	f3ef 8611 	mrs	r6, BASEPRI
 80094ca:	f383 8812 	msr	BASEPRI_MAX, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	4604      	mov	r4, r0
 80094d4:	1e60      	subs	r0, r4, #1
 80094d6:	b1dc      	cbz	r4, 8009510 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 80094d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80094dc:	009f      	lsls	r7, r3, #2
 80094de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 80094e2:	2200      	movs	r2, #0
 80094e4:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 80094e6:	7b5a      	ldrb	r2, [r3, #13]
 80094e8:	f002 021f 	and.w	r2, r2, #31
 80094ec:	2a08      	cmp	r2, #8
 80094ee:	d8e4      	bhi.n	80094ba <z_impl_k_poll+0x76>
 80094f0:	2401      	movs	r4, #1
 80094f2:	fa04 f202 	lsl.w	r2, r4, r2
 80094f6:	f412 7f8b 	tst.w	r2, #278	; 0x116
 80094fa:	d0de      	beq.n	80094ba <z_impl_k_poll+0x76>
	return node->next != NULL;
 80094fc:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d0db      	beq.n	80094ba <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8009502:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8009504:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 8009506:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 8009508:	2200      	movs	r2, #0
 800950a:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800950c:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800950e:	e7d4      	b.n	80094ba <z_impl_k_poll+0x76>
	__asm__ volatile(
 8009510:	f381 8811 	msr	BASEPRI, r1
 8009514:	f3bf 8f6f 	isb	sy
		return 0;
 8009518:	4620      	mov	r0, r4
 800951a:	e036      	b.n	800958a <z_impl_k_poll+0x146>
 800951c:	f381 8811 	msr	BASEPRI, r1
 8009520:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8009524:	f06f 000a 	mvn.w	r0, #10
 8009528:	e02f      	b.n	800958a <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800952a:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800952c:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800952e:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8009530:	2200      	movs	r2, #0
 8009532:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	f38c 8811 	msr	BASEPRI, ip
 800953a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800953e:	f04f 0310 	mov.w	r3, #16
 8009542:	f3ef 8c11 	mrs	ip, BASEPRI
 8009546:	f383 8812 	msr	BASEPRI_MAX, r3
 800954a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800954e:	4674      	mov	r4, lr
 8009550:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8009554:	b1ac      	cbz	r4, 8009582 <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 8009556:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800955a:	009c      	lsls	r4, r3, #2
 800955c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8009560:	2200      	movs	r2, #0
 8009562:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8009564:	7b5a      	ldrb	r2, [r3, #13]
 8009566:	f002 021f 	and.w	r2, r2, #31
 800956a:	2a08      	cmp	r2, #8
 800956c:	d8e3      	bhi.n	8009536 <z_impl_k_poll+0xf2>
 800956e:	2101      	movs	r1, #1
 8009570:	fa01 f202 	lsl.w	r2, r1, r2
 8009574:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8009578:	d0dd      	beq.n	8009536 <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800957a:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800957c:	2a00      	cmp	r2, #0
 800957e:	d1d4      	bne.n	800952a <z_impl_k_poll+0xe6>
 8009580:	e7d9      	b.n	8009536 <z_impl_k_poll+0xf2>
	__asm__ volatile(
 8009582:	f386 8811 	msr	BASEPRI, r6
 8009586:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800958a:	b002      	add	sp, #8
 800958c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009590:	20000e04 	.word	0x20000e04
 8009594:	200000bc 	.word	0x200000bc
 8009598:	20000e50 	.word	0x20000e50

0800959c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4603      	mov	r3, r0
	__asm__ volatile(
 80095a0:	f04f 0210 	mov.w	r2, #16
 80095a4:	f3ef 8511 	mrs	r5, BASEPRI
 80095a8:	f382 8812 	msr	BASEPRI_MAX, r2
 80095ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 80095b0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 80095b2:	2201      	movs	r2, #1
 80095b4:	6082      	str	r2, [r0, #8]
	return list->head == list;
 80095b6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 80095b8:	4283      	cmp	r3, r0
 80095ba:	d011      	beq.n	80095e0 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 80095bc:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 80095be:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 80095c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 80095c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 80095c8:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 80095ca:	b148      	cbz	r0, 80095e0 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 80095cc:	2101      	movs	r1, #1
 80095ce:	f003 fc53 	bl	800ce78 <signal_poll_event>
 80095d2:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 80095d4:	4629      	mov	r1, r5
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <z_impl_k_poll_signal_raise+0x50>)
 80095d8:	f7fe ff4c 	bl	8008474 <z_reschedule>
	return rc;
}
 80095dc:	4620      	mov	r0, r4
 80095de:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80095e0:	f385 8811 	msr	BASEPRI, r5
 80095e4:	f3bf 8f6f 	isb	sy
		return 0;
 80095e8:	2400      	movs	r4, #0
 80095ea:	e7f7      	b.n	80095dc <z_impl_k_poll_signal_raise+0x40>
 80095ec:	20000e50 	.word	0x20000e50

080095f0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 80095f0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80095f2:	4a03      	ldr	r2, [pc, #12]	; (8009600 <boot_banner+0x10>)
 80095f4:	4903      	ldr	r1, [pc, #12]	; (8009604 <boot_banner+0x14>)
 80095f6:	4804      	ldr	r0, [pc, #16]	; (8009608 <boot_banner+0x18>)
 80095f8:	f001 fc31 	bl	800ae5e <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 80095fc:	bd08      	pop	{r3, pc}
 80095fe:	bf00      	nop
 8009600:	0800e9b8 	.word	0x0800e9b8
 8009604:	0800e9d8 	.word	0x0800e9d8
 8009608:	0800e9e8 	.word	0x0800e9e8

0800960c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800960c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800960e:	4c06      	ldr	r4, [pc, #24]	; (8009628 <statics_init+0x1c>)
 8009610:	e005      	b.n	800961e <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8009612:	68a2      	ldr	r2, [r4, #8]
 8009614:	6861      	ldr	r1, [r4, #4]
 8009616:	4620      	mov	r0, r4
 8009618:	f003 fc62 	bl	800cee0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800961c:	3418      	adds	r4, #24
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <statics_init+0x20>)
 8009620:	429c      	cmp	r4, r3
 8009622:	d3f6      	bcc.n	8009612 <statics_init+0x6>
		}
	}
	return 0;
}
 8009624:	2000      	movs	r0, #0
 8009626:	bd10      	pop	{r4, pc}
 8009628:	20000390 	.word	0x20000390
 800962c:	20000390 	.word	0x20000390

08009630 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8009630:	b510      	push	{r4, lr}
 8009632:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8009634:	4b08      	ldr	r3, [pc, #32]	; (8009658 <k_sys_work_q_init+0x28>)
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	2400      	movs	r4, #0
 800963a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800963e:	ab02      	add	r3, sp, #8
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800964a:	4904      	ldr	r1, [pc, #16]	; (800965c <k_sys_work_q_init+0x2c>)
 800964c:	4804      	ldr	r0, [pc, #16]	; (8009660 <k_sys_work_q_init+0x30>)
 800964e:	f7fe fe7f 	bl	8008350 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8009652:	4620      	mov	r0, r4
 8009654:	b004      	add	sp, #16
 8009656:	bd10      	pop	{r4, pc}
 8009658:	0800ea10 	.word	0x0800ea10
 800965c:	20003760 	.word	0x20003760
 8009660:	20000830 	.word	0x20000830

08009664 <malloc>:
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <malloc+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f000 b84b 	b.w	8009704 <_malloc_r>
 800966e:	bf00      	nop
 8009670:	200000c4 	.word	0x200000c4

08009674 <_free_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4605      	mov	r5, r0
 8009678:	2900      	cmp	r1, #0
 800967a:	d040      	beq.n	80096fe <_free_r+0x8a>
 800967c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009680:	1f0c      	subs	r4, r1, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfb8      	it	lt
 8009686:	18e4      	addlt	r4, r4, r3
 8009688:	f000 fbfc 	bl	8009e84 <__malloc_lock>
 800968c:	4a1c      	ldr	r2, [pc, #112]	; (8009700 <_free_r+0x8c>)
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	b933      	cbnz	r3, 80096a0 <_free_r+0x2c>
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	6014      	str	r4, [r2, #0]
 8009696:	4628      	mov	r0, r5
 8009698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969c:	f000 bbf8 	b.w	8009e90 <__malloc_unlock>
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	d908      	bls.n	80096b6 <_free_r+0x42>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	1821      	adds	r1, r4, r0
 80096a8:	428b      	cmp	r3, r1
 80096aa:	bf01      	itttt	eq
 80096ac:	6819      	ldreq	r1, [r3, #0]
 80096ae:	685b      	ldreq	r3, [r3, #4]
 80096b0:	1809      	addeq	r1, r1, r0
 80096b2:	6021      	streq	r1, [r4, #0]
 80096b4:	e7ed      	b.n	8009692 <_free_r+0x1e>
 80096b6:	461a      	mov	r2, r3
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	b10b      	cbz	r3, 80096c0 <_free_r+0x4c>
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d9fa      	bls.n	80096b6 <_free_r+0x42>
 80096c0:	6811      	ldr	r1, [r2, #0]
 80096c2:	1850      	adds	r0, r2, r1
 80096c4:	42a0      	cmp	r0, r4
 80096c6:	d10b      	bne.n	80096e0 <_free_r+0x6c>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	4401      	add	r1, r0
 80096cc:	1850      	adds	r0, r2, r1
 80096ce:	4283      	cmp	r3, r0
 80096d0:	6011      	str	r1, [r2, #0]
 80096d2:	d1e0      	bne.n	8009696 <_free_r+0x22>
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4401      	add	r1, r0
 80096da:	6011      	str	r1, [r2, #0]
 80096dc:	6053      	str	r3, [r2, #4]
 80096de:	e7da      	b.n	8009696 <_free_r+0x22>
 80096e0:	d902      	bls.n	80096e8 <_free_r+0x74>
 80096e2:	230c      	movs	r3, #12
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	e7d6      	b.n	8009696 <_free_r+0x22>
 80096e8:	6820      	ldr	r0, [r4, #0]
 80096ea:	1821      	adds	r1, r4, r0
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf01      	itttt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	1809      	addeq	r1, r1, r0
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	6063      	str	r3, [r4, #4]
 80096fa:	6054      	str	r4, [r2, #4]
 80096fc:	e7cb      	b.n	8009696 <_free_r+0x22>
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20000e54 	.word	0x20000e54

08009704 <_malloc_r>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	1ccd      	adds	r5, r1, #3
 8009708:	f025 0503 	bic.w	r5, r5, #3
 800970c:	3508      	adds	r5, #8
 800970e:	2d0c      	cmp	r5, #12
 8009710:	bf38      	it	cc
 8009712:	250c      	movcc	r5, #12
 8009714:	2d00      	cmp	r5, #0
 8009716:	4606      	mov	r6, r0
 8009718:	db01      	blt.n	800971e <_malloc_r+0x1a>
 800971a:	42a9      	cmp	r1, r5
 800971c:	d903      	bls.n	8009726 <_malloc_r+0x22>
 800971e:	230c      	movs	r3, #12
 8009720:	6033      	str	r3, [r6, #0]
 8009722:	2000      	movs	r0, #0
 8009724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009726:	f000 fbad 	bl	8009e84 <__malloc_lock>
 800972a:	4921      	ldr	r1, [pc, #132]	; (80097b0 <_malloc_r+0xac>)
 800972c:	680a      	ldr	r2, [r1, #0]
 800972e:	4614      	mov	r4, r2
 8009730:	b99c      	cbnz	r4, 800975a <_malloc_r+0x56>
 8009732:	4f20      	ldr	r7, [pc, #128]	; (80097b4 <_malloc_r+0xb0>)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	b923      	cbnz	r3, 8009742 <_malloc_r+0x3e>
 8009738:	4621      	mov	r1, r4
 800973a:	4630      	mov	r0, r6
 800973c:	f000 fb8e 	bl	8009e5c <_sbrk_r>
 8009740:	6038      	str	r0, [r7, #0]
 8009742:	4629      	mov	r1, r5
 8009744:	4630      	mov	r0, r6
 8009746:	f000 fb89 	bl	8009e5c <_sbrk_r>
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	d123      	bne.n	8009796 <_malloc_r+0x92>
 800974e:	230c      	movs	r3, #12
 8009750:	4630      	mov	r0, r6
 8009752:	6033      	str	r3, [r6, #0]
 8009754:	f000 fb9c 	bl	8009e90 <__malloc_unlock>
 8009758:	e7e3      	b.n	8009722 <_malloc_r+0x1e>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	1b5b      	subs	r3, r3, r5
 800975e:	d417      	bmi.n	8009790 <_malloc_r+0x8c>
 8009760:	2b0b      	cmp	r3, #11
 8009762:	d903      	bls.n	800976c <_malloc_r+0x68>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	441c      	add	r4, r3
 8009768:	6025      	str	r5, [r4, #0]
 800976a:	e004      	b.n	8009776 <_malloc_r+0x72>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	42a2      	cmp	r2, r4
 8009770:	bf0c      	ite	eq
 8009772:	600b      	streq	r3, [r1, #0]
 8009774:	6053      	strne	r3, [r2, #4]
 8009776:	4630      	mov	r0, r6
 8009778:	f000 fb8a 	bl	8009e90 <__malloc_unlock>
 800977c:	f104 000b 	add.w	r0, r4, #11
 8009780:	1d23      	adds	r3, r4, #4
 8009782:	f020 0007 	bic.w	r0, r0, #7
 8009786:	1ac2      	subs	r2, r0, r3
 8009788:	d0cc      	beq.n	8009724 <_malloc_r+0x20>
 800978a:	1a1b      	subs	r3, r3, r0
 800978c:	50a3      	str	r3, [r4, r2]
 800978e:	e7c9      	b.n	8009724 <_malloc_r+0x20>
 8009790:	4622      	mov	r2, r4
 8009792:	6864      	ldr	r4, [r4, #4]
 8009794:	e7cc      	b.n	8009730 <_malloc_r+0x2c>
 8009796:	1cc4      	adds	r4, r0, #3
 8009798:	f024 0403 	bic.w	r4, r4, #3
 800979c:	42a0      	cmp	r0, r4
 800979e:	d0e3      	beq.n	8009768 <_malloc_r+0x64>
 80097a0:	1a21      	subs	r1, r4, r0
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 fb5a 	bl	8009e5c <_sbrk_r>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d1dd      	bne.n	8009768 <_malloc_r+0x64>
 80097ac:	e7cf      	b.n	800974e <_malloc_r+0x4a>
 80097ae:	bf00      	nop
 80097b0:	20000e54 	.word	0x20000e54
 80097b4:	20000e58 	.word	0x20000e58

080097b8 <_printf_float>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	b091      	sub	sp, #68	; 0x44
 80097be:	460c      	mov	r4, r1
 80097c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80097c4:	4616      	mov	r6, r2
 80097c6:	461f      	mov	r7, r3
 80097c8:	4605      	mov	r5, r0
 80097ca:	f000 fb57 	bl	8009e7c <_localeconv_r>
 80097ce:	6803      	ldr	r3, [r0, #0]
 80097d0:	4618      	mov	r0, r3
 80097d2:	9309      	str	r3, [sp, #36]	; 0x24
 80097d4:	f7f7 fab3 	bl	8000d3e <strlen>
 80097d8:	2300      	movs	r3, #0
 80097da:	930e      	str	r3, [sp, #56]	; 0x38
 80097dc:	f8d8 3000 	ldr.w	r3, [r8]
 80097e0:	900a      	str	r0, [sp, #40]	; 0x28
 80097e2:	3307      	adds	r3, #7
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	f103 0208 	add.w	r2, r3, #8
 80097ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80097f0:	f8d4 b000 	ldr.w	fp, [r4]
 80097f4:	f8c8 2000 	str.w	r2, [r8]
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009800:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009804:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009808:	930b      	str	r3, [sp, #44]	; 0x2c
 800980a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800980e:	4640      	mov	r0, r8
 8009810:	4b9c      	ldr	r3, [pc, #624]	; (8009a84 <_printf_float+0x2cc>)
 8009812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009814:	f7f7 f8f8 	bl	8000a08 <__aeabi_dcmpun>
 8009818:	bb70      	cbnz	r0, 8009878 <_printf_float+0xc0>
 800981a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800981e:	4640      	mov	r0, r8
 8009820:	4b98      	ldr	r3, [pc, #608]	; (8009a84 <_printf_float+0x2cc>)
 8009822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009824:	f7f7 f8d2 	bl	80009cc <__aeabi_dcmple>
 8009828:	bb30      	cbnz	r0, 8009878 <_printf_float+0xc0>
 800982a:	2200      	movs	r2, #0
 800982c:	2300      	movs	r3, #0
 800982e:	4640      	mov	r0, r8
 8009830:	4651      	mov	r1, sl
 8009832:	f7f7 f8c1 	bl	80009b8 <__aeabi_dcmplt>
 8009836:	b110      	cbz	r0, 800983e <_printf_float+0x86>
 8009838:	232d      	movs	r3, #45	; 0x2d
 800983a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983e:	4b92      	ldr	r3, [pc, #584]	; (8009a88 <_printf_float+0x2d0>)
 8009840:	4892      	ldr	r0, [pc, #584]	; (8009a8c <_printf_float+0x2d4>)
 8009842:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009846:	bf94      	ite	ls
 8009848:	4698      	movls	r8, r3
 800984a:	4680      	movhi	r8, r0
 800984c:	2303      	movs	r3, #3
 800984e:	f04f 0a00 	mov.w	sl, #0
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	f02b 0304 	bic.w	r3, fp, #4
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	4633      	mov	r3, r6
 800985c:	4621      	mov	r1, r4
 800985e:	4628      	mov	r0, r5
 8009860:	9700      	str	r7, [sp, #0]
 8009862:	aa0f      	add	r2, sp, #60	; 0x3c
 8009864:	f003 fbf7 	bl	800d056 <_printf_common>
 8009868:	3001      	adds	r0, #1
 800986a:	f040 8090 	bne.w	800998e <_printf_float+0x1d6>
 800986e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009872:	b011      	add	sp, #68	; 0x44
 8009874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009878:	4642      	mov	r2, r8
 800987a:	4653      	mov	r3, sl
 800987c:	4640      	mov	r0, r8
 800987e:	4651      	mov	r1, sl
 8009880:	f7f7 f8c2 	bl	8000a08 <__aeabi_dcmpun>
 8009884:	b148      	cbz	r0, 800989a <_printf_float+0xe2>
 8009886:	f1ba 0f00 	cmp.w	sl, #0
 800988a:	bfb8      	it	lt
 800988c:	232d      	movlt	r3, #45	; 0x2d
 800988e:	4880      	ldr	r0, [pc, #512]	; (8009a90 <_printf_float+0x2d8>)
 8009890:	bfb8      	it	lt
 8009892:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009896:	4b7f      	ldr	r3, [pc, #508]	; (8009a94 <_printf_float+0x2dc>)
 8009898:	e7d3      	b.n	8009842 <_printf_float+0x8a>
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	d142      	bne.n	800992a <_printf_float+0x172>
 80098a4:	2306      	movs	r3, #6
 80098a6:	6063      	str	r3, [r4, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	9206      	str	r2, [sp, #24]
 80098ac:	aa0e      	add	r2, sp, #56	; 0x38
 80098ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80098b2:	aa0d      	add	r2, sp, #52	; 0x34
 80098b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80098b8:	9203      	str	r2, [sp, #12]
 80098ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80098be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	4642      	mov	r2, r8
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	4628      	mov	r0, r5
 80098cc:	4653      	mov	r3, sl
 80098ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80098d0:	f003 fb24 	bl	800cf1c <__cvt>
 80098d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098d6:	4680      	mov	r8, r0
 80098d8:	2947      	cmp	r1, #71	; 0x47
 80098da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80098dc:	d108      	bne.n	80098f0 <_printf_float+0x138>
 80098de:	1cc8      	adds	r0, r1, #3
 80098e0:	db02      	blt.n	80098e8 <_printf_float+0x130>
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	4299      	cmp	r1, r3
 80098e6:	dd40      	ble.n	800996a <_printf_float+0x1b2>
 80098e8:	f1a9 0902 	sub.w	r9, r9, #2
 80098ec:	fa5f f989 	uxtb.w	r9, r9
 80098f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098f4:	d81f      	bhi.n	8009936 <_printf_float+0x17e>
 80098f6:	464a      	mov	r2, r9
 80098f8:	3901      	subs	r1, #1
 80098fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098fe:	910d      	str	r1, [sp, #52]	; 0x34
 8009900:	f003 fb6b 	bl	800cfda <__exponent>
 8009904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009906:	4682      	mov	sl, r0
 8009908:	1813      	adds	r3, r2, r0
 800990a:	2a01      	cmp	r2, #1
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	dc02      	bgt.n	8009916 <_printf_float+0x15e>
 8009910:	6822      	ldr	r2, [r4, #0]
 8009912:	07d2      	lsls	r2, r2, #31
 8009914:	d501      	bpl.n	800991a <_printf_float+0x162>
 8009916:	3301      	adds	r3, #1
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800991e:	2b00      	cmp	r3, #0
 8009920:	d09b      	beq.n	800985a <_printf_float+0xa2>
 8009922:	232d      	movs	r3, #45	; 0x2d
 8009924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009928:	e797      	b.n	800985a <_printf_float+0xa2>
 800992a:	2947      	cmp	r1, #71	; 0x47
 800992c:	d1bc      	bne.n	80098a8 <_printf_float+0xf0>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1ba      	bne.n	80098a8 <_printf_float+0xf0>
 8009932:	2301      	movs	r3, #1
 8009934:	e7b7      	b.n	80098a6 <_printf_float+0xee>
 8009936:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800993a:	d118      	bne.n	800996e <_printf_float+0x1b6>
 800993c:	2900      	cmp	r1, #0
 800993e:	6863      	ldr	r3, [r4, #4]
 8009940:	dd0b      	ble.n	800995a <_printf_float+0x1a2>
 8009942:	6121      	str	r1, [r4, #16]
 8009944:	b913      	cbnz	r3, 800994c <_printf_float+0x194>
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	07d0      	lsls	r0, r2, #31
 800994a:	d502      	bpl.n	8009952 <_printf_float+0x19a>
 800994c:	3301      	adds	r3, #1
 800994e:	440b      	add	r3, r1
 8009950:	6123      	str	r3, [r4, #16]
 8009952:	f04f 0a00 	mov.w	sl, #0
 8009956:	65a1      	str	r1, [r4, #88]	; 0x58
 8009958:	e7df      	b.n	800991a <_printf_float+0x162>
 800995a:	b913      	cbnz	r3, 8009962 <_printf_float+0x1aa>
 800995c:	6822      	ldr	r2, [r4, #0]
 800995e:	07d2      	lsls	r2, r2, #31
 8009960:	d501      	bpl.n	8009966 <_printf_float+0x1ae>
 8009962:	3302      	adds	r3, #2
 8009964:	e7f4      	b.n	8009950 <_printf_float+0x198>
 8009966:	2301      	movs	r3, #1
 8009968:	e7f2      	b.n	8009950 <_printf_float+0x198>
 800996a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800996e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009970:	4299      	cmp	r1, r3
 8009972:	db05      	blt.n	8009980 <_printf_float+0x1c8>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	6121      	str	r1, [r4, #16]
 8009978:	07d8      	lsls	r0, r3, #31
 800997a:	d5ea      	bpl.n	8009952 <_printf_float+0x19a>
 800997c:	1c4b      	adds	r3, r1, #1
 800997e:	e7e7      	b.n	8009950 <_printf_float+0x198>
 8009980:	2900      	cmp	r1, #0
 8009982:	bfcc      	ite	gt
 8009984:	2201      	movgt	r2, #1
 8009986:	f1c1 0202 	rsble	r2, r1, #2
 800998a:	4413      	add	r3, r2
 800998c:	e7e0      	b.n	8009950 <_printf_float+0x198>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	055a      	lsls	r2, r3, #21
 8009992:	d407      	bmi.n	80099a4 <_printf_float+0x1ec>
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	4642      	mov	r2, r8
 8009998:	4631      	mov	r1, r6
 800999a:	4628      	mov	r0, r5
 800999c:	47b8      	blx	r7
 800999e:	3001      	adds	r0, #1
 80099a0:	d12b      	bne.n	80099fa <_printf_float+0x242>
 80099a2:	e764      	b.n	800986e <_printf_float+0xb6>
 80099a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80099a8:	f240 80dd 	bls.w	8009b66 <_printf_float+0x3ae>
 80099ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099b0:	2200      	movs	r2, #0
 80099b2:	2300      	movs	r3, #0
 80099b4:	f7f6 fff6 	bl	80009a4 <__aeabi_dcmpeq>
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d033      	beq.n	8009a24 <_printf_float+0x26c>
 80099bc:	2301      	movs	r3, #1
 80099be:	4631      	mov	r1, r6
 80099c0:	4628      	mov	r0, r5
 80099c2:	4a35      	ldr	r2, [pc, #212]	; (8009a98 <_printf_float+0x2e0>)
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f af51 	beq.w	800986e <_printf_float+0xb6>
 80099cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099d0:	429a      	cmp	r2, r3
 80099d2:	db02      	blt.n	80099da <_printf_float+0x222>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	07d8      	lsls	r0, r3, #31
 80099d8:	d50f      	bpl.n	80099fa <_printf_float+0x242>
 80099da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099de:	4631      	mov	r1, r6
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b8      	blx	r7
 80099e4:	3001      	adds	r0, #1
 80099e6:	f43f af42 	beq.w	800986e <_printf_float+0xb6>
 80099ea:	f04f 0800 	mov.w	r8, #0
 80099ee:	f104 091a 	add.w	r9, r4, #26
 80099f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f4:	3b01      	subs	r3, #1
 80099f6:	4543      	cmp	r3, r8
 80099f8:	dc09      	bgt.n	8009a0e <_printf_float+0x256>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	079b      	lsls	r3, r3, #30
 80099fe:	f100 8102 	bmi.w	8009c06 <_printf_float+0x44e>
 8009a02:	68e0      	ldr	r0, [r4, #12]
 8009a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a06:	4298      	cmp	r0, r3
 8009a08:	bfb8      	it	lt
 8009a0a:	4618      	movlt	r0, r3
 8009a0c:	e731      	b.n	8009872 <_printf_float+0xba>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	464a      	mov	r2, r9
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f af28 	beq.w	800986e <_printf_float+0xb6>
 8009a1e:	f108 0801 	add.w	r8, r8, #1
 8009a22:	e7e6      	b.n	80099f2 <_printf_float+0x23a>
 8009a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	dc38      	bgt.n	8009a9c <_printf_float+0x2e4>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	4a19      	ldr	r2, [pc, #100]	; (8009a98 <_printf_float+0x2e0>)
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f af1a 	beq.w	800986e <_printf_float+0xb6>
 8009a3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	d102      	bne.n	8009a48 <_printf_float+0x290>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	07d9      	lsls	r1, r3, #31
 8009a46:	d5d8      	bpl.n	80099fa <_printf_float+0x242>
 8009a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4628      	mov	r0, r5
 8009a50:	47b8      	blx	r7
 8009a52:	3001      	adds	r0, #1
 8009a54:	f43f af0b 	beq.w	800986e <_printf_float+0xb6>
 8009a58:	f04f 0900 	mov.w	r9, #0
 8009a5c:	f104 0a1a 	add.w	sl, r4, #26
 8009a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a62:	425b      	negs	r3, r3
 8009a64:	454b      	cmp	r3, r9
 8009a66:	dc01      	bgt.n	8009a6c <_printf_float+0x2b4>
 8009a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a6a:	e794      	b.n	8009996 <_printf_float+0x1de>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4652      	mov	r2, sl
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	f43f aef9 	beq.w	800986e <_printf_float+0xb6>
 8009a7c:	f109 0901 	add.w	r9, r9, #1
 8009a80:	e7ee      	b.n	8009a60 <_printf_float+0x2a8>
 8009a82:	bf00      	nop
 8009a84:	7fefffff 	.word	0x7fefffff
 8009a88:	0800eb8d 	.word	0x0800eb8d
 8009a8c:	0800eb91 	.word	0x0800eb91
 8009a90:	0800eb99 	.word	0x0800eb99
 8009a94:	0800eb95 	.word	0x0800eb95
 8009a98:	0800eb9d 	.word	0x0800eb9d
 8009a9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	bfa8      	it	ge
 8009aa4:	461a      	movge	r2, r3
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	4691      	mov	r9, r2
 8009aaa:	dc37      	bgt.n	8009b1c <_printf_float+0x364>
 8009aac:	f04f 0b00 	mov.w	fp, #0
 8009ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab4:	f104 021a 	add.w	r2, r4, #26
 8009ab8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009abc:	ebaa 0309 	sub.w	r3, sl, r9
 8009ac0:	455b      	cmp	r3, fp
 8009ac2:	dc33      	bgt.n	8009b2c <_printf_float+0x374>
 8009ac4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	db3b      	blt.n	8009b44 <_printf_float+0x38c>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	07da      	lsls	r2, r3, #31
 8009ad0:	d438      	bmi.n	8009b44 <_printf_float+0x38c>
 8009ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ad4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ad6:	eba3 020a 	sub.w	r2, r3, sl
 8009ada:	eba3 0901 	sub.w	r9, r3, r1
 8009ade:	4591      	cmp	r9, r2
 8009ae0:	bfa8      	it	ge
 8009ae2:	4691      	movge	r9, r2
 8009ae4:	f1b9 0f00 	cmp.w	r9, #0
 8009ae8:	dc34      	bgt.n	8009b54 <_printf_float+0x39c>
 8009aea:	f04f 0800 	mov.w	r8, #0
 8009aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af2:	f104 0a1a 	add.w	sl, r4, #26
 8009af6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	eba3 0309 	sub.w	r3, r3, r9
 8009b00:	4543      	cmp	r3, r8
 8009b02:	f77f af7a 	ble.w	80099fa <_printf_float+0x242>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	f43f aeac 	beq.w	800986e <_printf_float+0xb6>
 8009b16:	f108 0801 	add.w	r8, r8, #1
 8009b1a:	e7ec      	b.n	8009af6 <_printf_float+0x33e>
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4642      	mov	r2, r8
 8009b22:	4628      	mov	r0, r5
 8009b24:	47b8      	blx	r7
 8009b26:	3001      	adds	r0, #1
 8009b28:	d1c0      	bne.n	8009aac <_printf_float+0x2f4>
 8009b2a:	e6a0      	b.n	800986e <_printf_float+0xb6>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	f43f ae99 	beq.w	800986e <_printf_float+0xb6>
 8009b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b3e:	f10b 0b01 	add.w	fp, fp, #1
 8009b42:	e7b9      	b.n	8009ab8 <_printf_float+0x300>
 8009b44:	4631      	mov	r1, r6
 8009b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d1bf      	bne.n	8009ad2 <_printf_float+0x31a>
 8009b52:	e68c      	b.n	800986e <_printf_float+0xb6>
 8009b54:	464b      	mov	r3, r9
 8009b56:	4631      	mov	r1, r6
 8009b58:	4628      	mov	r0, r5
 8009b5a:	eb08 020a 	add.w	r2, r8, sl
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1c2      	bne.n	8009aea <_printf_float+0x332>
 8009b64:	e683      	b.n	800986e <_printf_float+0xb6>
 8009b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b68:	2a01      	cmp	r2, #1
 8009b6a:	dc01      	bgt.n	8009b70 <_printf_float+0x3b8>
 8009b6c:	07db      	lsls	r3, r3, #31
 8009b6e:	d537      	bpl.n	8009be0 <_printf_float+0x428>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4642      	mov	r2, r8
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f ae77 	beq.w	800986e <_printf_float+0xb6>
 8009b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f ae6f 	beq.w	800986e <_printf_float+0xb6>
 8009b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	f7f6 ff04 	bl	80009a4 <__aeabi_dcmpeq>
 8009b9c:	b9d8      	cbnz	r0, 8009bd6 <_printf_float+0x41e>
 8009b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba0:	f108 0201 	add.w	r2, r8, #1
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	d10e      	bne.n	8009bce <_printf_float+0x416>
 8009bb0:	e65d      	b.n	800986e <_printf_float+0xb6>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	464a      	mov	r2, r9
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f ae56 	beq.w	800986e <_printf_float+0xb6>
 8009bc2:	f108 0801 	add.w	r8, r8, #1
 8009bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	4543      	cmp	r3, r8
 8009bcc:	dcf1      	bgt.n	8009bb2 <_printf_float+0x3fa>
 8009bce:	4653      	mov	r3, sl
 8009bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd4:	e6e0      	b.n	8009998 <_printf_float+0x1e0>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f104 091a 	add.w	r9, r4, #26
 8009bde:	e7f2      	b.n	8009bc6 <_printf_float+0x40e>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4642      	mov	r2, r8
 8009be4:	e7df      	b.n	8009ba6 <_printf_float+0x3ee>
 8009be6:	2301      	movs	r3, #1
 8009be8:	464a      	mov	r2, r9
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae3c 	beq.w	800986e <_printf_float+0xb6>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	4543      	cmp	r3, r8
 8009c02:	dcf0      	bgt.n	8009be6 <_printf_float+0x42e>
 8009c04:	e6fd      	b.n	8009a02 <_printf_float+0x24a>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	f104 0919 	add.w	r9, r4, #25
 8009c0e:	e7f4      	b.n	8009bfa <_printf_float+0x442>

08009c10 <_printf_i>:
 8009c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	7e0f      	ldrb	r7, [r1, #24]
 8009c16:	4691      	mov	r9, r2
 8009c18:	2f78      	cmp	r7, #120	; 0x78
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	469a      	mov	sl, r3
 8009c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c26:	d807      	bhi.n	8009c38 <_printf_i+0x28>
 8009c28:	2f62      	cmp	r7, #98	; 0x62
 8009c2a:	d80a      	bhi.n	8009c42 <_printf_i+0x32>
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	f000 80d9 	beq.w	8009de4 <_printf_i+0x1d4>
 8009c32:	2f58      	cmp	r7, #88	; 0x58
 8009c34:	f000 80a4 	beq.w	8009d80 <_printf_i+0x170>
 8009c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c40:	e03a      	b.n	8009cb8 <_printf_i+0xa8>
 8009c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c46:	2b15      	cmp	r3, #21
 8009c48:	d8f6      	bhi.n	8009c38 <_printf_i+0x28>
 8009c4a:	a101      	add	r1, pc, #4	; (adr r1, 8009c50 <_printf_i+0x40>)
 8009c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009c39 	.word	0x08009c39
 8009c5c:	08009c39 	.word	0x08009c39
 8009c60:	08009c39 	.word	0x08009c39
 8009c64:	08009c39 	.word	0x08009c39
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009c39 	.word	0x08009c39
 8009c70:	08009c39 	.word	0x08009c39
 8009c74:	08009c39 	.word	0x08009c39
 8009c78:	08009c39 	.word	0x08009c39
 8009c7c:	08009dcb 	.word	0x08009dcb
 8009c80:	08009ced 	.word	0x08009ced
 8009c84:	08009dad 	.word	0x08009dad
 8009c88:	08009c39 	.word	0x08009c39
 8009c8c:	08009c39 	.word	0x08009c39
 8009c90:	08009ded 	.word	0x08009ded
 8009c94:	08009c39 	.word	0x08009c39
 8009c98:	08009ced 	.word	0x08009ced
 8009c9c:	08009c39 	.word	0x08009c39
 8009ca0:	08009c39 	.word	0x08009c39
 8009ca4:	08009db5 	.word	0x08009db5
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e0a4      	b.n	8009e06 <_printf_i+0x1f6>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	6829      	ldr	r1, [r5, #0]
 8009cc0:	0606      	lsls	r6, r0, #24
 8009cc2:	f101 0304 	add.w	r3, r1, #4
 8009cc6:	d50a      	bpl.n	8009cde <_printf_i+0xce>
 8009cc8:	680e      	ldr	r6, [r1, #0]
 8009cca:	602b      	str	r3, [r5, #0]
 8009ccc:	2e00      	cmp	r6, #0
 8009cce:	da03      	bge.n	8009cd8 <_printf_i+0xc8>
 8009cd0:	232d      	movs	r3, #45	; 0x2d
 8009cd2:	4276      	negs	r6, r6
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	230a      	movs	r3, #10
 8009cda:	485e      	ldr	r0, [pc, #376]	; (8009e54 <_printf_i+0x244>)
 8009cdc:	e019      	b.n	8009d12 <_printf_i+0x102>
 8009cde:	680e      	ldr	r6, [r1, #0]
 8009ce0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ce4:	602b      	str	r3, [r5, #0]
 8009ce6:	bf18      	it	ne
 8009ce8:	b236      	sxthne	r6, r6
 8009cea:	e7ef      	b.n	8009ccc <_printf_i+0xbc>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	1d19      	adds	r1, r3, #4
 8009cf2:	6029      	str	r1, [r5, #0]
 8009cf4:	0601      	lsls	r1, r0, #24
 8009cf6:	d501      	bpl.n	8009cfc <_printf_i+0xec>
 8009cf8:	681e      	ldr	r6, [r3, #0]
 8009cfa:	e002      	b.n	8009d02 <_printf_i+0xf2>
 8009cfc:	0646      	lsls	r6, r0, #25
 8009cfe:	d5fb      	bpl.n	8009cf8 <_printf_i+0xe8>
 8009d00:	881e      	ldrh	r6, [r3, #0]
 8009d02:	2f6f      	cmp	r7, #111	; 0x6f
 8009d04:	bf0c      	ite	eq
 8009d06:	2308      	moveq	r3, #8
 8009d08:	230a      	movne	r3, #10
 8009d0a:	4852      	ldr	r0, [pc, #328]	; (8009e54 <_printf_i+0x244>)
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d12:	6865      	ldr	r5, [r4, #4]
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	bfa8      	it	ge
 8009d18:	6821      	ldrge	r1, [r4, #0]
 8009d1a:	60a5      	str	r5, [r4, #8]
 8009d1c:	bfa4      	itt	ge
 8009d1e:	f021 0104 	bicge.w	r1, r1, #4
 8009d22:	6021      	strge	r1, [r4, #0]
 8009d24:	b90e      	cbnz	r6, 8009d2a <_printf_i+0x11a>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	d04d      	beq.n	8009dc6 <_printf_i+0x1b6>
 8009d2a:	4615      	mov	r5, r2
 8009d2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d30:	fb03 6711 	mls	r7, r3, r1, r6
 8009d34:	5dc7      	ldrb	r7, [r0, r7]
 8009d36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d3a:	4637      	mov	r7, r6
 8009d3c:	42bb      	cmp	r3, r7
 8009d3e:	460e      	mov	r6, r1
 8009d40:	d9f4      	bls.n	8009d2c <_printf_i+0x11c>
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d10b      	bne.n	8009d5e <_printf_i+0x14e>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	07de      	lsls	r6, r3, #31
 8009d4a:	d508      	bpl.n	8009d5e <_printf_i+0x14e>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6861      	ldr	r1, [r4, #4]
 8009d50:	4299      	cmp	r1, r3
 8009d52:	bfde      	ittt	le
 8009d54:	2330      	movle	r3, #48	; 0x30
 8009d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d5e:	1b52      	subs	r2, r2, r5
 8009d60:	6122      	str	r2, [r4, #16]
 8009d62:	464b      	mov	r3, r9
 8009d64:	4621      	mov	r1, r4
 8009d66:	4640      	mov	r0, r8
 8009d68:	f8cd a000 	str.w	sl, [sp]
 8009d6c:	aa03      	add	r2, sp, #12
 8009d6e:	f003 f972 	bl	800d056 <_printf_common>
 8009d72:	3001      	adds	r0, #1
 8009d74:	d14c      	bne.n	8009e10 <_printf_i+0x200>
 8009d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d7a:	b004      	add	sp, #16
 8009d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d80:	4834      	ldr	r0, [pc, #208]	; (8009e54 <_printf_i+0x244>)
 8009d82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d86:	6829      	ldr	r1, [r5, #0]
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d8e:	6029      	str	r1, [r5, #0]
 8009d90:	061d      	lsls	r5, r3, #24
 8009d92:	d514      	bpl.n	8009dbe <_printf_i+0x1ae>
 8009d94:	07df      	lsls	r7, r3, #31
 8009d96:	bf44      	itt	mi
 8009d98:	f043 0320 	orrmi.w	r3, r3, #32
 8009d9c:	6023      	strmi	r3, [r4, #0]
 8009d9e:	b91e      	cbnz	r6, 8009da8 <_printf_i+0x198>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	f023 0320 	bic.w	r3, r3, #32
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	2310      	movs	r3, #16
 8009daa:	e7af      	b.n	8009d0c <_printf_i+0xfc>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	f043 0320 	orr.w	r3, r3, #32
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	2378      	movs	r3, #120	; 0x78
 8009db6:	4828      	ldr	r0, [pc, #160]	; (8009e58 <_printf_i+0x248>)
 8009db8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dbc:	e7e3      	b.n	8009d86 <_printf_i+0x176>
 8009dbe:	0659      	lsls	r1, r3, #25
 8009dc0:	bf48      	it	mi
 8009dc2:	b2b6      	uxthmi	r6, r6
 8009dc4:	e7e6      	b.n	8009d94 <_printf_i+0x184>
 8009dc6:	4615      	mov	r5, r2
 8009dc8:	e7bb      	b.n	8009d42 <_printf_i+0x132>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	6826      	ldr	r6, [r4, #0]
 8009dce:	1d18      	adds	r0, r3, #4
 8009dd0:	6961      	ldr	r1, [r4, #20]
 8009dd2:	6028      	str	r0, [r5, #0]
 8009dd4:	0635      	lsls	r5, r6, #24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	d501      	bpl.n	8009dde <_printf_i+0x1ce>
 8009dda:	6019      	str	r1, [r3, #0]
 8009ddc:	e002      	b.n	8009de4 <_printf_i+0x1d4>
 8009dde:	0670      	lsls	r0, r6, #25
 8009de0:	d5fb      	bpl.n	8009dda <_printf_i+0x1ca>
 8009de2:	8019      	strh	r1, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	4615      	mov	r5, r2
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	e7ba      	b.n	8009d62 <_printf_i+0x152>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	2100      	movs	r1, #0
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	602a      	str	r2, [r5, #0]
 8009df4:	681d      	ldr	r5, [r3, #0]
 8009df6:	6862      	ldr	r2, [r4, #4]
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f003 fa46 	bl	800d28a <memchr>
 8009dfe:	b108      	cbz	r0, 8009e04 <_printf_i+0x1f4>
 8009e00:	1b40      	subs	r0, r0, r5
 8009e02:	6060      	str	r0, [r4, #4]
 8009e04:	6863      	ldr	r3, [r4, #4]
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0e:	e7a8      	b.n	8009d62 <_printf_i+0x152>
 8009e10:	462a      	mov	r2, r5
 8009e12:	4649      	mov	r1, r9
 8009e14:	4640      	mov	r0, r8
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	47d0      	blx	sl
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d0ab      	beq.n	8009d76 <_printf_i+0x166>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	079b      	lsls	r3, r3, #30
 8009e22:	d413      	bmi.n	8009e4c <_printf_i+0x23c>
 8009e24:	68e0      	ldr	r0, [r4, #12]
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	4298      	cmp	r0, r3
 8009e2a:	bfb8      	it	lt
 8009e2c:	4618      	movlt	r0, r3
 8009e2e:	e7a4      	b.n	8009d7a <_printf_i+0x16a>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4632      	mov	r2, r6
 8009e34:	4649      	mov	r1, r9
 8009e36:	4640      	mov	r0, r8
 8009e38:	47d0      	blx	sl
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d09b      	beq.n	8009d76 <_printf_i+0x166>
 8009e3e:	3501      	adds	r5, #1
 8009e40:	68e3      	ldr	r3, [r4, #12]
 8009e42:	9903      	ldr	r1, [sp, #12]
 8009e44:	1a5b      	subs	r3, r3, r1
 8009e46:	42ab      	cmp	r3, r5
 8009e48:	dcf2      	bgt.n	8009e30 <_printf_i+0x220>
 8009e4a:	e7eb      	b.n	8009e24 <_printf_i+0x214>
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	f104 0619 	add.w	r6, r4, #25
 8009e52:	e7f5      	b.n	8009e40 <_printf_i+0x230>
 8009e54:	0800eb9f 	.word	0x0800eb9f
 8009e58:	0800ebb0 	.word	0x0800ebb0

08009e5c <_sbrk_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4d05      	ldr	r5, [pc, #20]	; (8009e78 <_sbrk_r+0x1c>)
 8009e62:	4604      	mov	r4, r0
 8009e64:	4608      	mov	r0, r1
 8009e66:	602b      	str	r3, [r5, #0]
 8009e68:	f7fa fb4e 	bl	8004508 <_sbrk>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_sbrk_r+0x1a>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_sbrk_r+0x1a>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20000e5c 	.word	0x20000e5c

08009e7c <_localeconv_r>:
 8009e7c:	4800      	ldr	r0, [pc, #0]	; (8009e80 <_localeconv_r+0x4>)
 8009e7e:	4770      	bx	lr
 8009e80:	20000218 	.word	0x20000218

08009e84 <__malloc_lock>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__malloc_lock+0x8>)
 8009e86:	f001 bcf2 	b.w	800b86e <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20000390 	.word	0x20000390

08009e90 <__malloc_unlock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_unlock+0x8>)
 8009e92:	f001 bcf4 	b.w	800b87e <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	20000390 	.word	0x20000390

08009e9c <_Balloc>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	b976      	cbnz	r6, 8009ec4 <_Balloc+0x28>
 8009ea6:	2010      	movs	r0, #16
 8009ea8:	f7ff fbdc 	bl	8009664 <malloc>
 8009eac:	4602      	mov	r2, r0
 8009eae:	6260      	str	r0, [r4, #36]	; 0x24
 8009eb0:	b920      	cbnz	r0, 8009ebc <_Balloc+0x20>
 8009eb2:	2166      	movs	r1, #102	; 0x66
 8009eb4:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <_Balloc+0x78>)
 8009eb6:	4818      	ldr	r0, [pc, #96]	; (8009f18 <_Balloc+0x7c>)
 8009eb8:	f000 fb08 	bl	800a4cc <__assert_func>
 8009ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec0:	6006      	str	r6, [r0, #0]
 8009ec2:	60c6      	str	r6, [r0, #12]
 8009ec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ec6:	68f3      	ldr	r3, [r6, #12]
 8009ec8:	b183      	cbz	r3, 8009eec <_Balloc+0x50>
 8009eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ed2:	b9b8      	cbnz	r0, 8009f04 <_Balloc+0x68>
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eda:	1d72      	adds	r2, r6, #5
 8009edc:	4620      	mov	r0, r4
 8009ede:	0092      	lsls	r2, r2, #2
 8009ee0:	f003 fa49 	bl	800d376 <_calloc_r>
 8009ee4:	b160      	cbz	r0, 8009f00 <_Balloc+0x64>
 8009ee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eea:	e00e      	b.n	8009f0a <_Balloc+0x6e>
 8009eec:	2221      	movs	r2, #33	; 0x21
 8009eee:	2104      	movs	r1, #4
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f003 fa40 	bl	800d376 <_calloc_r>
 8009ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ef8:	60f0      	str	r0, [r6, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e4      	bne.n	8009eca <_Balloc+0x2e>
 8009f00:	2000      	movs	r0, #0
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	6802      	ldr	r2, [r0, #0]
 8009f06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f10:	e7f7      	b.n	8009f02 <_Balloc+0x66>
 8009f12:	bf00      	nop
 8009f14:	0800ebce 	.word	0x0800ebce
 8009f18:	0800ec50 	.word	0x0800ec50

08009f1c <_Bfree>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f20:	4605      	mov	r5, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	b976      	cbnz	r6, 8009f44 <_Bfree+0x28>
 8009f26:	2010      	movs	r0, #16
 8009f28:	f7ff fb9c 	bl	8009664 <malloc>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	6268      	str	r0, [r5, #36]	; 0x24
 8009f30:	b920      	cbnz	r0, 8009f3c <_Bfree+0x20>
 8009f32:	218a      	movs	r1, #138	; 0x8a
 8009f34:	4b08      	ldr	r3, [pc, #32]	; (8009f58 <_Bfree+0x3c>)
 8009f36:	4809      	ldr	r0, [pc, #36]	; (8009f5c <_Bfree+0x40>)
 8009f38:	f000 fac8 	bl	800a4cc <__assert_func>
 8009f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f40:	6006      	str	r6, [r0, #0]
 8009f42:	60c6      	str	r6, [r0, #12]
 8009f44:	b13c      	cbz	r4, 8009f56 <_Bfree+0x3a>
 8009f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f48:	6862      	ldr	r2, [r4, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f50:	6021      	str	r1, [r4, #0]
 8009f52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	0800ebce 	.word	0x0800ebce
 8009f5c:	0800ec50 	.word	0x0800ec50

08009f60 <__multadd>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	461e      	mov	r6, r3
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	690d      	ldr	r5, [r1, #16]
 8009f6e:	f101 0c14 	add.w	ip, r1, #20
 8009f72:	f8dc 3000 	ldr.w	r3, [ip]
 8009f76:	3001      	adds	r0, #1
 8009f78:	b299      	uxth	r1, r3
 8009f7a:	fb02 6101 	mla	r1, r2, r1, r6
 8009f7e:	0c1e      	lsrs	r6, r3, #16
 8009f80:	0c0b      	lsrs	r3, r1, #16
 8009f82:	fb02 3306 	mla	r3, r2, r6, r3
 8009f86:	b289      	uxth	r1, r1
 8009f88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f8c:	4285      	cmp	r5, r0
 8009f8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f92:	f84c 1b04 	str.w	r1, [ip], #4
 8009f96:	dcec      	bgt.n	8009f72 <__multadd+0x12>
 8009f98:	b30e      	cbz	r6, 8009fde <__multadd+0x7e>
 8009f9a:	68a3      	ldr	r3, [r4, #8]
 8009f9c:	42ab      	cmp	r3, r5
 8009f9e:	dc19      	bgt.n	8009fd4 <__multadd+0x74>
 8009fa0:	6861      	ldr	r1, [r4, #4]
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	3101      	adds	r1, #1
 8009fa6:	f7ff ff79 	bl	8009e9c <_Balloc>
 8009faa:	4680      	mov	r8, r0
 8009fac:	b928      	cbnz	r0, 8009fba <__multadd+0x5a>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	21b5      	movs	r1, #181	; 0xb5
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <__multadd+0x84>)
 8009fb4:	480c      	ldr	r0, [pc, #48]	; (8009fe8 <__multadd+0x88>)
 8009fb6:	f000 fa89 	bl	800a4cc <__assert_func>
 8009fba:	6922      	ldr	r2, [r4, #16]
 8009fbc:	f104 010c 	add.w	r1, r4, #12
 8009fc0:	3202      	adds	r2, #2
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f002 ff93 	bl	800cef0 <memcpy>
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ffa5 	bl	8009f1c <_Bfree>
 8009fd2:	4644      	mov	r4, r8
 8009fd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fd8:	3501      	adds	r5, #1
 8009fda:	615e      	str	r6, [r3, #20]
 8009fdc:	6125      	str	r5, [r4, #16]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe4:	0800ec3f 	.word	0x0800ec3f
 8009fe8:	0800ec50 	.word	0x0800ec50

08009fec <__i2b>:
 8009fec:	b510      	push	{r4, lr}
 8009fee:	460c      	mov	r4, r1
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	f7ff ff53 	bl	8009e9c <_Balloc>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	b928      	cbnz	r0, 800a006 <__i2b+0x1a>
 8009ffa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ffe:	4b04      	ldr	r3, [pc, #16]	; (800a010 <__i2b+0x24>)
 800a000:	4804      	ldr	r0, [pc, #16]	; (800a014 <__i2b+0x28>)
 800a002:	f000 fa63 	bl	800a4cc <__assert_func>
 800a006:	2301      	movs	r3, #1
 800a008:	6144      	str	r4, [r0, #20]
 800a00a:	6103      	str	r3, [r0, #16]
 800a00c:	bd10      	pop	{r4, pc}
 800a00e:	bf00      	nop
 800a010:	0800ec3f 	.word	0x0800ec3f
 800a014:	0800ec50 	.word	0x0800ec50

0800a018 <__multiply>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	4691      	mov	r9, r2
 800a01e:	690a      	ldr	r2, [r1, #16]
 800a020:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a024:	460c      	mov	r4, r1
 800a026:	429a      	cmp	r2, r3
 800a028:	bfbe      	ittt	lt
 800a02a:	460b      	movlt	r3, r1
 800a02c:	464c      	movlt	r4, r9
 800a02e:	4699      	movlt	r9, r3
 800a030:	6927      	ldr	r7, [r4, #16]
 800a032:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	6861      	ldr	r1, [r4, #4]
 800a03a:	eb07 060a 	add.w	r6, r7, sl
 800a03e:	42b3      	cmp	r3, r6
 800a040:	b085      	sub	sp, #20
 800a042:	bfb8      	it	lt
 800a044:	3101      	addlt	r1, #1
 800a046:	f7ff ff29 	bl	8009e9c <_Balloc>
 800a04a:	b930      	cbnz	r0, 800a05a <__multiply+0x42>
 800a04c:	4602      	mov	r2, r0
 800a04e:	f240 115d 	movw	r1, #349	; 0x15d
 800a052:	4b43      	ldr	r3, [pc, #268]	; (800a160 <__multiply+0x148>)
 800a054:	4843      	ldr	r0, [pc, #268]	; (800a164 <__multiply+0x14c>)
 800a056:	f000 fa39 	bl	800a4cc <__assert_func>
 800a05a:	f100 0514 	add.w	r5, r0, #20
 800a05e:	462b      	mov	r3, r5
 800a060:	2200      	movs	r2, #0
 800a062:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a066:	4543      	cmp	r3, r8
 800a068:	d321      	bcc.n	800a0ae <__multiply+0x96>
 800a06a:	f104 0314 	add.w	r3, r4, #20
 800a06e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a072:	f109 0314 	add.w	r3, r9, #20
 800a076:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a07a:	9202      	str	r2, [sp, #8]
 800a07c:	1b3a      	subs	r2, r7, r4
 800a07e:	3a15      	subs	r2, #21
 800a080:	f022 0203 	bic.w	r2, r2, #3
 800a084:	3204      	adds	r2, #4
 800a086:	f104 0115 	add.w	r1, r4, #21
 800a08a:	428f      	cmp	r7, r1
 800a08c:	bf38      	it	cc
 800a08e:	2204      	movcc	r2, #4
 800a090:	9201      	str	r2, [sp, #4]
 800a092:	9a02      	ldr	r2, [sp, #8]
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	429a      	cmp	r2, r3
 800a098:	d80c      	bhi.n	800a0b4 <__multiply+0x9c>
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	dd03      	ble.n	800a0a6 <__multiply+0x8e>
 800a09e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d059      	beq.n	800a15a <__multiply+0x142>
 800a0a6:	6106      	str	r6, [r0, #16]
 800a0a8:	b005      	add	sp, #20
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	f843 2b04 	str.w	r2, [r3], #4
 800a0b2:	e7d8      	b.n	800a066 <__multiply+0x4e>
 800a0b4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	d023      	beq.n	800a106 <__multiply+0xee>
 800a0be:	46a9      	mov	r9, r5
 800a0c0:	f04f 0c00 	mov.w	ip, #0
 800a0c4:	f104 0e14 	add.w	lr, r4, #20
 800a0c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0cc:	f8d9 1000 	ldr.w	r1, [r9]
 800a0d0:	fa1f fb82 	uxth.w	fp, r2
 800a0d4:	b289      	uxth	r1, r1
 800a0d6:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0da:	4461      	add	r1, ip
 800a0dc:	f8d9 c000 	ldr.w	ip, [r9]
 800a0e0:	0c12      	lsrs	r2, r2, #16
 800a0e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a0e6:	fb0a c202 	mla	r2, sl, r2, ip
 800a0ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0ee:	b289      	uxth	r1, r1
 800a0f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0f4:	4577      	cmp	r7, lr
 800a0f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0fa:	f849 1b04 	str.w	r1, [r9], #4
 800a0fe:	d8e3      	bhi.n	800a0c8 <__multiply+0xb0>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	f845 c002 	str.w	ip, [r5, r2]
 800a106:	9a03      	ldr	r2, [sp, #12]
 800a108:	3304      	adds	r3, #4
 800a10a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	d020      	beq.n	800a156 <__multiply+0x13e>
 800a114:	46ae      	mov	lr, r5
 800a116:	f04f 0a00 	mov.w	sl, #0
 800a11a:	6829      	ldr	r1, [r5, #0]
 800a11c:	f104 0c14 	add.w	ip, r4, #20
 800a120:	f8bc b000 	ldrh.w	fp, [ip]
 800a124:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a128:	b289      	uxth	r1, r1
 800a12a:	fb09 220b 	mla	r2, r9, fp, r2
 800a12e:	4492      	add	sl, r2
 800a130:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a134:	f84e 1b04 	str.w	r1, [lr], #4
 800a138:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a13c:	f8be 1000 	ldrh.w	r1, [lr]
 800a140:	0c12      	lsrs	r2, r2, #16
 800a142:	fb09 1102 	mla	r1, r9, r2, r1
 800a146:	4567      	cmp	r7, ip
 800a148:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a14c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a150:	d8e6      	bhi.n	800a120 <__multiply+0x108>
 800a152:	9a01      	ldr	r2, [sp, #4]
 800a154:	50a9      	str	r1, [r5, r2]
 800a156:	3504      	adds	r5, #4
 800a158:	e79b      	b.n	800a092 <__multiply+0x7a>
 800a15a:	3e01      	subs	r6, #1
 800a15c:	e79d      	b.n	800a09a <__multiply+0x82>
 800a15e:	bf00      	nop
 800a160:	0800ec3f 	.word	0x0800ec3f
 800a164:	0800ec50 	.word	0x0800ec50

0800a168 <__pow5mult>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	4615      	mov	r5, r2
 800a16e:	f012 0203 	ands.w	r2, r2, #3
 800a172:	4606      	mov	r6, r0
 800a174:	460f      	mov	r7, r1
 800a176:	d007      	beq.n	800a188 <__pow5mult+0x20>
 800a178:	4c25      	ldr	r4, [pc, #148]	; (800a210 <__pow5mult+0xa8>)
 800a17a:	3a01      	subs	r2, #1
 800a17c:	2300      	movs	r3, #0
 800a17e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a182:	f7ff feed 	bl	8009f60 <__multadd>
 800a186:	4607      	mov	r7, r0
 800a188:	10ad      	asrs	r5, r5, #2
 800a18a:	d03d      	beq.n	800a208 <__pow5mult+0xa0>
 800a18c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a18e:	b97c      	cbnz	r4, 800a1b0 <__pow5mult+0x48>
 800a190:	2010      	movs	r0, #16
 800a192:	f7ff fa67 	bl	8009664 <malloc>
 800a196:	4602      	mov	r2, r0
 800a198:	6270      	str	r0, [r6, #36]	; 0x24
 800a19a:	b928      	cbnz	r0, 800a1a8 <__pow5mult+0x40>
 800a19c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1a0:	4b1c      	ldr	r3, [pc, #112]	; (800a214 <__pow5mult+0xac>)
 800a1a2:	481d      	ldr	r0, [pc, #116]	; (800a218 <__pow5mult+0xb0>)
 800a1a4:	f000 f992 	bl	800a4cc <__assert_func>
 800a1a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1ac:	6004      	str	r4, [r0, #0]
 800a1ae:	60c4      	str	r4, [r0, #12]
 800a1b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1b8:	b94c      	cbnz	r4, 800a1ce <__pow5mult+0x66>
 800a1ba:	f240 2171 	movw	r1, #625	; 0x271
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7ff ff14 	bl	8009fec <__i2b>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1cc:	6003      	str	r3, [r0, #0]
 800a1ce:	f04f 0900 	mov.w	r9, #0
 800a1d2:	07eb      	lsls	r3, r5, #31
 800a1d4:	d50a      	bpl.n	800a1ec <__pow5mult+0x84>
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	4622      	mov	r2, r4
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff1c 	bl	800a018 <__multiply>
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff fe99 	bl	8009f1c <_Bfree>
 800a1ea:	4647      	mov	r7, r8
 800a1ec:	106d      	asrs	r5, r5, #1
 800a1ee:	d00b      	beq.n	800a208 <__pow5mult+0xa0>
 800a1f0:	6820      	ldr	r0, [r4, #0]
 800a1f2:	b938      	cbnz	r0, 800a204 <__pow5mult+0x9c>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f7ff ff0d 	bl	800a018 <__multiply>
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	f8c0 9000 	str.w	r9, [r0]
 800a204:	4604      	mov	r4, r0
 800a206:	e7e4      	b.n	800a1d2 <__pow5mult+0x6a>
 800a208:	4638      	mov	r0, r7
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	bf00      	nop
 800a210:	0800ea20 	.word	0x0800ea20
 800a214:	0800ebce 	.word	0x0800ebce
 800a218:	0800ec50 	.word	0x0800ec50

0800a21c <__lshift>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	4607      	mov	r7, r0
 800a224:	4691      	mov	r9, r2
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	6849      	ldr	r1, [r1, #4]
 800a22a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a22e:	68a3      	ldr	r3, [r4, #8]
 800a230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a234:	f108 0601 	add.w	r6, r8, #1
 800a238:	42b3      	cmp	r3, r6
 800a23a:	db0b      	blt.n	800a254 <__lshift+0x38>
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff fe2d 	bl	8009e9c <_Balloc>
 800a242:	4605      	mov	r5, r0
 800a244:	b948      	cbnz	r0, 800a25a <__lshift+0x3e>
 800a246:	4602      	mov	r2, r0
 800a248:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a24c:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <__lshift+0xd8>)
 800a24e:	482a      	ldr	r0, [pc, #168]	; (800a2f8 <__lshift+0xdc>)
 800a250:	f000 f93c 	bl	800a4cc <__assert_func>
 800a254:	3101      	adds	r1, #1
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	e7ee      	b.n	800a238 <__lshift+0x1c>
 800a25a:	2300      	movs	r3, #0
 800a25c:	f100 0114 	add.w	r1, r0, #20
 800a260:	f100 0210 	add.w	r2, r0, #16
 800a264:	4618      	mov	r0, r3
 800a266:	4553      	cmp	r3, sl
 800a268:	db37      	blt.n	800a2da <__lshift+0xbe>
 800a26a:	6920      	ldr	r0, [r4, #16]
 800a26c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a270:	f104 0314 	add.w	r3, r4, #20
 800a274:	f019 091f 	ands.w	r9, r9, #31
 800a278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a27c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a280:	d02f      	beq.n	800a2e2 <__lshift+0xc6>
 800a282:	468a      	mov	sl, r1
 800a284:	f04f 0c00 	mov.w	ip, #0
 800a288:	f1c9 0e20 	rsb	lr, r9, #32
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	fa02 f209 	lsl.w	r2, r2, r9
 800a292:	ea42 020c 	orr.w	r2, r2, ip
 800a296:	f84a 2b04 	str.w	r2, [sl], #4
 800a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29e:	4298      	cmp	r0, r3
 800a2a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2a4:	d8f2      	bhi.n	800a28c <__lshift+0x70>
 800a2a6:	1b03      	subs	r3, r0, r4
 800a2a8:	3b15      	subs	r3, #21
 800a2aa:	f023 0303 	bic.w	r3, r3, #3
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	f104 0215 	add.w	r2, r4, #21
 800a2b4:	4290      	cmp	r0, r2
 800a2b6:	bf38      	it	cc
 800a2b8:	2304      	movcc	r3, #4
 800a2ba:	f841 c003 	str.w	ip, [r1, r3]
 800a2be:	f1bc 0f00 	cmp.w	ip, #0
 800a2c2:	d001      	beq.n	800a2c8 <__lshift+0xac>
 800a2c4:	f108 0602 	add.w	r6, r8, #2
 800a2c8:	3e01      	subs	r6, #1
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	612e      	str	r6, [r5, #16]
 800a2d0:	f7ff fe24 	bl	8009f1c <_Bfree>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2de:	3301      	adds	r3, #1
 800a2e0:	e7c1      	b.n	800a266 <__lshift+0x4a>
 800a2e2:	3904      	subs	r1, #4
 800a2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e8:	4298      	cmp	r0, r3
 800a2ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2ee:	d8f9      	bhi.n	800a2e4 <__lshift+0xc8>
 800a2f0:	e7ea      	b.n	800a2c8 <__lshift+0xac>
 800a2f2:	bf00      	nop
 800a2f4:	0800ec3f 	.word	0x0800ec3f
 800a2f8:	0800ec50 	.word	0x0800ec50

0800a2fc <__mdiff>:
 800a2fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	460d      	mov	r5, r1
 800a302:	4607      	mov	r7, r0
 800a304:	4611      	mov	r1, r2
 800a306:	4628      	mov	r0, r5
 800a308:	4614      	mov	r4, r2
 800a30a:	f003 f819 	bl	800d340 <__mcmp>
 800a30e:	1e06      	subs	r6, r0, #0
 800a310:	d111      	bne.n	800a336 <__mdiff+0x3a>
 800a312:	4631      	mov	r1, r6
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff fdc1 	bl	8009e9c <_Balloc>
 800a31a:	4602      	mov	r2, r0
 800a31c:	b928      	cbnz	r0, 800a32a <__mdiff+0x2e>
 800a31e:	f240 2132 	movw	r1, #562	; 0x232
 800a322:	4b3a      	ldr	r3, [pc, #232]	; (800a40c <__mdiff+0x110>)
 800a324:	483a      	ldr	r0, [pc, #232]	; (800a410 <__mdiff+0x114>)
 800a326:	f000 f8d1 	bl	800a4cc <__assert_func>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a330:	4610      	mov	r0, r2
 800a332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	bfa4      	itt	ge
 800a338:	4623      	movge	r3, r4
 800a33a:	462c      	movge	r4, r5
 800a33c:	4638      	mov	r0, r7
 800a33e:	6861      	ldr	r1, [r4, #4]
 800a340:	bfa6      	itte	ge
 800a342:	461d      	movge	r5, r3
 800a344:	2600      	movge	r6, #0
 800a346:	2601      	movlt	r6, #1
 800a348:	f7ff fda8 	bl	8009e9c <_Balloc>
 800a34c:	4602      	mov	r2, r0
 800a34e:	b918      	cbnz	r0, 800a358 <__mdiff+0x5c>
 800a350:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a354:	4b2d      	ldr	r3, [pc, #180]	; (800a40c <__mdiff+0x110>)
 800a356:	e7e5      	b.n	800a324 <__mdiff+0x28>
 800a358:	f102 0814 	add.w	r8, r2, #20
 800a35c:	46c2      	mov	sl, r8
 800a35e:	f04f 0c00 	mov.w	ip, #0
 800a362:	6927      	ldr	r7, [r4, #16]
 800a364:	60c6      	str	r6, [r0, #12]
 800a366:	692e      	ldr	r6, [r5, #16]
 800a368:	f104 0014 	add.w	r0, r4, #20
 800a36c:	f105 0914 	add.w	r9, r5, #20
 800a370:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a378:	3410      	adds	r4, #16
 800a37a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a37e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a382:	fa1f f18b 	uxth.w	r1, fp
 800a386:	448c      	add	ip, r1
 800a388:	b299      	uxth	r1, r3
 800a38a:	0c1b      	lsrs	r3, r3, #16
 800a38c:	ebac 0101 	sub.w	r1, ip, r1
 800a390:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a394:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a398:	b289      	uxth	r1, r1
 800a39a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a39e:	454e      	cmp	r6, r9
 800a3a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a3a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a3a8:	d8e7      	bhi.n	800a37a <__mdiff+0x7e>
 800a3aa:	1b73      	subs	r3, r6, r5
 800a3ac:	3b15      	subs	r3, #21
 800a3ae:	f023 0303 	bic.w	r3, r3, #3
 800a3b2:	3515      	adds	r5, #21
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	42ae      	cmp	r6, r5
 800a3b8:	bf38      	it	cc
 800a3ba:	2304      	movcc	r3, #4
 800a3bc:	4418      	add	r0, r3
 800a3be:	4443      	add	r3, r8
 800a3c0:	461e      	mov	r6, r3
 800a3c2:	4605      	mov	r5, r0
 800a3c4:	4575      	cmp	r5, lr
 800a3c6:	d30e      	bcc.n	800a3e6 <__mdiff+0xea>
 800a3c8:	f10e 0103 	add.w	r1, lr, #3
 800a3cc:	1a09      	subs	r1, r1, r0
 800a3ce:	f021 0103 	bic.w	r1, r1, #3
 800a3d2:	3803      	subs	r0, #3
 800a3d4:	4586      	cmp	lr, r0
 800a3d6:	bf38      	it	cc
 800a3d8:	2100      	movcc	r1, #0
 800a3da:	4419      	add	r1, r3
 800a3dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a3e0:	b18b      	cbz	r3, 800a406 <__mdiff+0x10a>
 800a3e2:	6117      	str	r7, [r2, #16]
 800a3e4:	e7a4      	b.n	800a330 <__mdiff+0x34>
 800a3e6:	f855 8b04 	ldr.w	r8, [r5], #4
 800a3ea:	fa1f f188 	uxth.w	r1, r8
 800a3ee:	4461      	add	r1, ip
 800a3f0:	140c      	asrs	r4, r1, #16
 800a3f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3f6:	b289      	uxth	r1, r1
 800a3f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a400:	f846 1b04 	str.w	r1, [r6], #4
 800a404:	e7de      	b.n	800a3c4 <__mdiff+0xc8>
 800a406:	3f01      	subs	r7, #1
 800a408:	e7e8      	b.n	800a3dc <__mdiff+0xe0>
 800a40a:	bf00      	nop
 800a40c:	0800ec3f 	.word	0x0800ec3f
 800a410:	0800ec50 	.word	0x0800ec50

0800a414 <__d2b>:
 800a414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a418:	2101      	movs	r1, #1
 800a41a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a41e:	4690      	mov	r8, r2
 800a420:	461d      	mov	r5, r3
 800a422:	f7ff fd3b 	bl	8009e9c <_Balloc>
 800a426:	4604      	mov	r4, r0
 800a428:	b930      	cbnz	r0, 800a438 <__d2b+0x24>
 800a42a:	4602      	mov	r2, r0
 800a42c:	f240 310a 	movw	r1, #778	; 0x30a
 800a430:	4b24      	ldr	r3, [pc, #144]	; (800a4c4 <__d2b+0xb0>)
 800a432:	4825      	ldr	r0, [pc, #148]	; (800a4c8 <__d2b+0xb4>)
 800a434:	f000 f84a 	bl	800a4cc <__assert_func>
 800a438:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a43c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a440:	bb2d      	cbnz	r5, 800a48e <__d2b+0x7a>
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	f1b8 0300 	subs.w	r3, r8, #0
 800a448:	d026      	beq.n	800a498 <__d2b+0x84>
 800a44a:	4668      	mov	r0, sp
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	f002 ff4a 	bl	800d2e6 <__lo0bits>
 800a452:	9900      	ldr	r1, [sp, #0]
 800a454:	b1f0      	cbz	r0, 800a494 <__d2b+0x80>
 800a456:	9a01      	ldr	r2, [sp, #4]
 800a458:	f1c0 0320 	rsb	r3, r0, #32
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	430b      	orrs	r3, r1
 800a462:	40c2      	lsrs	r2, r0
 800a464:	6163      	str	r3, [r4, #20]
 800a466:	9201      	str	r2, [sp, #4]
 800a468:	9b01      	ldr	r3, [sp, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bf14      	ite	ne
 800a46e:	2102      	movne	r1, #2
 800a470:	2101      	moveq	r1, #1
 800a472:	61a3      	str	r3, [r4, #24]
 800a474:	6121      	str	r1, [r4, #16]
 800a476:	b1c5      	cbz	r5, 800a4aa <__d2b+0x96>
 800a478:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a47c:	4405      	add	r5, r0
 800a47e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a482:	603d      	str	r5, [r7, #0]
 800a484:	6030      	str	r0, [r6, #0]
 800a486:	4620      	mov	r0, r4
 800a488:	b002      	add	sp, #8
 800a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a492:	e7d6      	b.n	800a442 <__d2b+0x2e>
 800a494:	6161      	str	r1, [r4, #20]
 800a496:	e7e7      	b.n	800a468 <__d2b+0x54>
 800a498:	a801      	add	r0, sp, #4
 800a49a:	f002 ff24 	bl	800d2e6 <__lo0bits>
 800a49e:	2101      	movs	r1, #1
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	6121      	str	r1, [r4, #16]
 800a4a4:	6163      	str	r3, [r4, #20]
 800a4a6:	3020      	adds	r0, #32
 800a4a8:	e7e5      	b.n	800a476 <__d2b+0x62>
 800a4aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a4ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4b2:	6038      	str	r0, [r7, #0]
 800a4b4:	6918      	ldr	r0, [r3, #16]
 800a4b6:	f002 fef6 	bl	800d2a6 <__hi0bits>
 800a4ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a4be:	6031      	str	r1, [r6, #0]
 800a4c0:	e7e1      	b.n	800a486 <__d2b+0x72>
 800a4c2:	bf00      	nop
 800a4c4:	0800ec3f 	.word	0x0800ec3f
 800a4c8:	0800ec50 	.word	0x0800ec50

0800a4cc <__assert_func>:
 800a4cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ce:	4614      	mov	r4, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <__assert_func+0x2c>)
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68d8      	ldr	r0, [r3, #12]
 800a4da:	b14c      	cbz	r4, 800a4f0 <__assert_func+0x24>
 800a4dc:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <__assert_func+0x30>)
 800a4de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4e2:	9100      	str	r1, [sp, #0]
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	4906      	ldr	r1, [pc, #24]	; (800a500 <__assert_func+0x34>)
 800a4e8:	f000 f80e 	bl	800a508 <fiprintf>
 800a4ec:	f002 ff97 	bl	800d41e <abort>
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <__assert_func+0x38>)
 800a4f2:	461c      	mov	r4, r3
 800a4f4:	e7f3      	b.n	800a4de <__assert_func+0x12>
 800a4f6:	bf00      	nop
 800a4f8:	200000c4 	.word	0x200000c4
 800a4fc:	0800ecab 	.word	0x0800ecab
 800a500:	0800ecb8 	.word	0x0800ecb8
 800a504:	0800ece6 	.word	0x0800ece6

0800a508 <fiprintf>:
 800a508:	b40e      	push	{r1, r2, r3}
 800a50a:	b503      	push	{r0, r1, lr}
 800a50c:	4601      	mov	r1, r0
 800a50e:	ab03      	add	r3, sp, #12
 800a510:	4805      	ldr	r0, [pc, #20]	; (800a528 <fiprintf+0x20>)
 800a512:	f853 2b04 	ldr.w	r2, [r3], #4
 800a516:	6800      	ldr	r0, [r0, #0]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	f000 f807 	bl	800a52c <_vfiprintf_r>
 800a51e:	b002      	add	sp, #8
 800a520:	f85d eb04 	ldr.w	lr, [sp], #4
 800a524:	b003      	add	sp, #12
 800a526:	4770      	bx	lr
 800a528:	200000c4 	.word	0x200000c4

0800a52c <_vfiprintf_r>:
 800a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	460d      	mov	r5, r1
 800a532:	4614      	mov	r4, r2
 800a534:	4698      	mov	r8, r3
 800a536:	4606      	mov	r6, r0
 800a538:	b09d      	sub	sp, #116	; 0x74
 800a53a:	b118      	cbz	r0, 800a544 <_vfiprintf_r+0x18>
 800a53c:	6983      	ldr	r3, [r0, #24]
 800a53e:	b90b      	cbnz	r3, 800a544 <_vfiprintf_r+0x18>
 800a540:	f000 fae4 	bl	800ab0c <__sinit>
 800a544:	4b89      	ldr	r3, [pc, #548]	; (800a76c <_vfiprintf_r+0x240>)
 800a546:	429d      	cmp	r5, r3
 800a548:	d11b      	bne.n	800a582 <_vfiprintf_r+0x56>
 800a54a:	6875      	ldr	r5, [r6, #4]
 800a54c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54e:	07d9      	lsls	r1, r3, #31
 800a550:	d405      	bmi.n	800a55e <_vfiprintf_r+0x32>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	059a      	lsls	r2, r3, #22
 800a556:	d402      	bmi.n	800a55e <_vfiprintf_r+0x32>
 800a558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55a:	f001 f988 	bl	800b86e <__retarget_lock_acquire_recursive>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	071b      	lsls	r3, r3, #28
 800a562:	d501      	bpl.n	800a568 <_vfiprintf_r+0x3c>
 800a564:	692b      	ldr	r3, [r5, #16]
 800a566:	b9eb      	cbnz	r3, 800a5a4 <_vfiprintf_r+0x78>
 800a568:	4629      	mov	r1, r5
 800a56a:	4630      	mov	r0, r6
 800a56c:	f000 f960 	bl	800a830 <__swsetup_r>
 800a570:	b1c0      	cbz	r0, 800a5a4 <_vfiprintf_r+0x78>
 800a572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a574:	07dc      	lsls	r4, r3, #31
 800a576:	d50e      	bpl.n	800a596 <_vfiprintf_r+0x6a>
 800a578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a57c:	b01d      	add	sp, #116	; 0x74
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	4b7b      	ldr	r3, [pc, #492]	; (800a770 <_vfiprintf_r+0x244>)
 800a584:	429d      	cmp	r5, r3
 800a586:	d101      	bne.n	800a58c <_vfiprintf_r+0x60>
 800a588:	68b5      	ldr	r5, [r6, #8]
 800a58a:	e7df      	b.n	800a54c <_vfiprintf_r+0x20>
 800a58c:	4b79      	ldr	r3, [pc, #484]	; (800a774 <_vfiprintf_r+0x248>)
 800a58e:	429d      	cmp	r5, r3
 800a590:	bf08      	it	eq
 800a592:	68f5      	ldreq	r5, [r6, #12]
 800a594:	e7da      	b.n	800a54c <_vfiprintf_r+0x20>
 800a596:	89ab      	ldrh	r3, [r5, #12]
 800a598:	0598      	lsls	r0, r3, #22
 800a59a:	d4ed      	bmi.n	800a578 <_vfiprintf_r+0x4c>
 800a59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a59e:	f001 f96e 	bl	800b87e <__retarget_lock_release_recursive>
 800a5a2:	e7e9      	b.n	800a578 <_vfiprintf_r+0x4c>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ae:	2330      	movs	r3, #48	; 0x30
 800a5b0:	f04f 0901 	mov.w	r9, #1
 800a5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a778 <_vfiprintf_r+0x24c>
 800a5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	469a      	mov	sl, r3
 800a5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c8:	b10a      	cbz	r2, 800a5ce <_vfiprintf_r+0xa2>
 800a5ca:	2a25      	cmp	r2, #37	; 0x25
 800a5cc:	d1f9      	bne.n	800a5c2 <_vfiprintf_r+0x96>
 800a5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d2:	d00b      	beq.n	800a5ec <_vfiprintf_r+0xc0>
 800a5d4:	465b      	mov	r3, fp
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f002 ff00 	bl	800d3e0 <__sfputs_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	f000 80aa 	beq.w	800a73a <_vfiprintf_r+0x20e>
 800a5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e8:	445a      	add	r2, fp
 800a5ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 80a2 	beq.w	800a73a <_vfiprintf_r+0x20e>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a600:	f10a 0a01 	add.w	sl, sl, #1
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a60c:	931a      	str	r3, [sp, #104]	; 0x68
 800a60e:	4654      	mov	r4, sl
 800a610:	2205      	movs	r2, #5
 800a612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a616:	4858      	ldr	r0, [pc, #352]	; (800a778 <_vfiprintf_r+0x24c>)
 800a618:	f002 fe37 	bl	800d28a <memchr>
 800a61c:	9a04      	ldr	r2, [sp, #16]
 800a61e:	b9d8      	cbnz	r0, 800a658 <_vfiprintf_r+0x12c>
 800a620:	06d1      	lsls	r1, r2, #27
 800a622:	bf44      	itt	mi
 800a624:	2320      	movmi	r3, #32
 800a626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a62a:	0713      	lsls	r3, r2, #28
 800a62c:	bf44      	itt	mi
 800a62e:	232b      	movmi	r3, #43	; 0x2b
 800a630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a634:	f89a 3000 	ldrb.w	r3, [sl]
 800a638:	2b2a      	cmp	r3, #42	; 0x2a
 800a63a:	d015      	beq.n	800a668 <_vfiprintf_r+0x13c>
 800a63c:	4654      	mov	r4, sl
 800a63e:	2000      	movs	r0, #0
 800a640:	f04f 0c0a 	mov.w	ip, #10
 800a644:	9a07      	ldr	r2, [sp, #28]
 800a646:	4621      	mov	r1, r4
 800a648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a64c:	3b30      	subs	r3, #48	; 0x30
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d94e      	bls.n	800a6f0 <_vfiprintf_r+0x1c4>
 800a652:	b1b0      	cbz	r0, 800a682 <_vfiprintf_r+0x156>
 800a654:	9207      	str	r2, [sp, #28]
 800a656:	e014      	b.n	800a682 <_vfiprintf_r+0x156>
 800a658:	eba0 0308 	sub.w	r3, r0, r8
 800a65c:	fa09 f303 	lsl.w	r3, r9, r3
 800a660:	4313      	orrs	r3, r2
 800a662:	46a2      	mov	sl, r4
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	e7d2      	b.n	800a60e <_vfiprintf_r+0xe2>
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	1d19      	adds	r1, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9103      	str	r1, [sp, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfbb      	ittet	lt
 800a674:	425b      	neglt	r3, r3
 800a676:	f042 0202 	orrlt.w	r2, r2, #2
 800a67a:	9307      	strge	r3, [sp, #28]
 800a67c:	9307      	strlt	r3, [sp, #28]
 800a67e:	bfb8      	it	lt
 800a680:	9204      	strlt	r2, [sp, #16]
 800a682:	7823      	ldrb	r3, [r4, #0]
 800a684:	2b2e      	cmp	r3, #46	; 0x2e
 800a686:	d10c      	bne.n	800a6a2 <_vfiprintf_r+0x176>
 800a688:	7863      	ldrb	r3, [r4, #1]
 800a68a:	2b2a      	cmp	r3, #42	; 0x2a
 800a68c:	d135      	bne.n	800a6fa <_vfiprintf_r+0x1ce>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	3402      	adds	r4, #2
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	9203      	str	r2, [sp, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfb8      	it	lt
 800a69c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6a0:	9305      	str	r3, [sp, #20]
 800a6a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a77c <_vfiprintf_r+0x250>
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	7821      	ldrb	r1, [r4, #0]
 800a6ac:	f002 fded 	bl	800d28a <memchr>
 800a6b0:	b140      	cbz	r0, 800a6c4 <_vfiprintf_r+0x198>
 800a6b2:	2340      	movs	r3, #64	; 0x40
 800a6b4:	eba0 000a 	sub.w	r0, r0, sl
 800a6b8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6bc:	9b04      	ldr	r3, [sp, #16]
 800a6be:	3401      	adds	r4, #1
 800a6c0:	4303      	orrs	r3, r0
 800a6c2:	9304      	str	r3, [sp, #16]
 800a6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c8:	2206      	movs	r2, #6
 800a6ca:	482d      	ldr	r0, [pc, #180]	; (800a780 <_vfiprintf_r+0x254>)
 800a6cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6d0:	f002 fddb 	bl	800d28a <memchr>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d03f      	beq.n	800a758 <_vfiprintf_r+0x22c>
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <_vfiprintf_r+0x258>)
 800a6da:	bb1b      	cbnz	r3, 800a724 <_vfiprintf_r+0x1f8>
 800a6dc:	9b03      	ldr	r3, [sp, #12]
 800a6de:	3307      	adds	r3, #7
 800a6e0:	f023 0307 	bic.w	r3, r3, #7
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	9303      	str	r3, [sp, #12]
 800a6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ea:	443b      	add	r3, r7
 800a6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ee:	e767      	b.n	800a5c0 <_vfiprintf_r+0x94>
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f8:	e7a5      	b.n	800a646 <_vfiprintf_r+0x11a>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f04f 0c0a 	mov.w	ip, #10
 800a700:	4619      	mov	r1, r3
 800a702:	3401      	adds	r4, #1
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	4620      	mov	r0, r4
 800a708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70c:	3a30      	subs	r2, #48	; 0x30
 800a70e:	2a09      	cmp	r2, #9
 800a710:	d903      	bls.n	800a71a <_vfiprintf_r+0x1ee>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0c5      	beq.n	800a6a2 <_vfiprintf_r+0x176>
 800a716:	9105      	str	r1, [sp, #20]
 800a718:	e7c3      	b.n	800a6a2 <_vfiprintf_r+0x176>
 800a71a:	4604      	mov	r4, r0
 800a71c:	2301      	movs	r3, #1
 800a71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a722:	e7f0      	b.n	800a706 <_vfiprintf_r+0x1da>
 800a724:	ab03      	add	r3, sp, #12
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	462a      	mov	r2, r5
 800a72a:	4630      	mov	r0, r6
 800a72c:	4b16      	ldr	r3, [pc, #88]	; (800a788 <_vfiprintf_r+0x25c>)
 800a72e:	a904      	add	r1, sp, #16
 800a730:	f7ff f842 	bl	80097b8 <_printf_float>
 800a734:	4607      	mov	r7, r0
 800a736:	1c78      	adds	r0, r7, #1
 800a738:	d1d6      	bne.n	800a6e8 <_vfiprintf_r+0x1bc>
 800a73a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a73c:	07d9      	lsls	r1, r3, #31
 800a73e:	d405      	bmi.n	800a74c <_vfiprintf_r+0x220>
 800a740:	89ab      	ldrh	r3, [r5, #12]
 800a742:	059a      	lsls	r2, r3, #22
 800a744:	d402      	bmi.n	800a74c <_vfiprintf_r+0x220>
 800a746:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a748:	f001 f899 	bl	800b87e <__retarget_lock_release_recursive>
 800a74c:	89ab      	ldrh	r3, [r5, #12]
 800a74e:	065b      	lsls	r3, r3, #25
 800a750:	f53f af12 	bmi.w	800a578 <_vfiprintf_r+0x4c>
 800a754:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a756:	e711      	b.n	800a57c <_vfiprintf_r+0x50>
 800a758:	ab03      	add	r3, sp, #12
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	462a      	mov	r2, r5
 800a75e:	4630      	mov	r0, r6
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <_vfiprintf_r+0x25c>)
 800a762:	a904      	add	r1, sp, #16
 800a764:	f7ff fa54 	bl	8009c10 <_printf_i>
 800a768:	e7e4      	b.n	800a734 <_vfiprintf_r+0x208>
 800a76a:	bf00      	nop
 800a76c:	0800ea4c 	.word	0x0800ea4c
 800a770:	0800ea6c 	.word	0x0800ea6c
 800a774:	0800ea2c 	.word	0x0800ea2c
 800a778:	0800ecf1 	.word	0x0800ecf1
 800a77c:	0800ecf7 	.word	0x0800ecf7
 800a780:	0800ecfb 	.word	0x0800ecfb
 800a784:	080097b9 	.word	0x080097b9
 800a788:	0800d3e1 	.word	0x0800d3e1

0800a78c <__swbuf_r>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	460e      	mov	r6, r1
 800a790:	4614      	mov	r4, r2
 800a792:	4605      	mov	r5, r0
 800a794:	b118      	cbz	r0, 800a79e <__swbuf_r+0x12>
 800a796:	6983      	ldr	r3, [r0, #24]
 800a798:	b90b      	cbnz	r3, 800a79e <__swbuf_r+0x12>
 800a79a:	f000 f9b7 	bl	800ab0c <__sinit>
 800a79e:	4b21      	ldr	r3, [pc, #132]	; (800a824 <__swbuf_r+0x98>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	d12b      	bne.n	800a7fc <__swbuf_r+0x70>
 800a7a4:	686c      	ldr	r4, [r5, #4]
 800a7a6:	69a3      	ldr	r3, [r4, #24]
 800a7a8:	60a3      	str	r3, [r4, #8]
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	071a      	lsls	r2, r3, #28
 800a7ae:	d52f      	bpl.n	800a810 <__swbuf_r+0x84>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	b36b      	cbz	r3, 800a810 <__swbuf_r+0x84>
 800a7b4:	6923      	ldr	r3, [r4, #16]
 800a7b6:	6820      	ldr	r0, [r4, #0]
 800a7b8:	b2f6      	uxtb	r6, r6
 800a7ba:	1ac0      	subs	r0, r0, r3
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	4637      	mov	r7, r6
 800a7c0:	4283      	cmp	r3, r0
 800a7c2:	dc04      	bgt.n	800a7ce <__swbuf_r+0x42>
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 f922 	bl	800aa10 <_fflush_r>
 800a7cc:	bb30      	cbnz	r0, 800a81c <__swbuf_r+0x90>
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	60a3      	str	r3, [r4, #8]
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	6022      	str	r2, [r4, #0]
 800a7dc:	701e      	strb	r6, [r3, #0]
 800a7de:	6963      	ldr	r3, [r4, #20]
 800a7e0:	4283      	cmp	r3, r0
 800a7e2:	d004      	beq.n	800a7ee <__swbuf_r+0x62>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	07db      	lsls	r3, r3, #31
 800a7e8:	d506      	bpl.n	800a7f8 <__swbuf_r+0x6c>
 800a7ea:	2e0a      	cmp	r6, #10
 800a7ec:	d104      	bne.n	800a7f8 <__swbuf_r+0x6c>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 f90d 	bl	800aa10 <_fflush_r>
 800a7f6:	b988      	cbnz	r0, 800a81c <__swbuf_r+0x90>
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	; (800a828 <__swbuf_r+0x9c>)
 800a7fe:	429c      	cmp	r4, r3
 800a800:	d101      	bne.n	800a806 <__swbuf_r+0x7a>
 800a802:	68ac      	ldr	r4, [r5, #8]
 800a804:	e7cf      	b.n	800a7a6 <__swbuf_r+0x1a>
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <__swbuf_r+0xa0>)
 800a808:	429c      	cmp	r4, r3
 800a80a:	bf08      	it	eq
 800a80c:	68ec      	ldreq	r4, [r5, #12]
 800a80e:	e7ca      	b.n	800a7a6 <__swbuf_r+0x1a>
 800a810:	4621      	mov	r1, r4
 800a812:	4628      	mov	r0, r5
 800a814:	f000 f80c 	bl	800a830 <__swsetup_r>
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0cb      	beq.n	800a7b4 <__swbuf_r+0x28>
 800a81c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a820:	e7ea      	b.n	800a7f8 <__swbuf_r+0x6c>
 800a822:	bf00      	nop
 800a824:	0800ea4c 	.word	0x0800ea4c
 800a828:	0800ea6c 	.word	0x0800ea6c
 800a82c:	0800ea2c 	.word	0x0800ea2c

0800a830 <__swsetup_r>:
 800a830:	4b32      	ldr	r3, [pc, #200]	; (800a8fc <__swsetup_r+0xcc>)
 800a832:	b570      	push	{r4, r5, r6, lr}
 800a834:	681d      	ldr	r5, [r3, #0]
 800a836:	4606      	mov	r6, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	b125      	cbz	r5, 800a846 <__swsetup_r+0x16>
 800a83c:	69ab      	ldr	r3, [r5, #24]
 800a83e:	b913      	cbnz	r3, 800a846 <__swsetup_r+0x16>
 800a840:	4628      	mov	r0, r5
 800a842:	f000 f963 	bl	800ab0c <__sinit>
 800a846:	4b2e      	ldr	r3, [pc, #184]	; (800a900 <__swsetup_r+0xd0>)
 800a848:	429c      	cmp	r4, r3
 800a84a:	d10f      	bne.n	800a86c <__swsetup_r+0x3c>
 800a84c:	686c      	ldr	r4, [r5, #4]
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a854:	0719      	lsls	r1, r3, #28
 800a856:	d42c      	bmi.n	800a8b2 <__swsetup_r+0x82>
 800a858:	06dd      	lsls	r5, r3, #27
 800a85a:	d411      	bmi.n	800a880 <__swsetup_r+0x50>
 800a85c:	2309      	movs	r3, #9
 800a85e:	6033      	str	r3, [r6, #0]
 800a860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a868:	81a3      	strh	r3, [r4, #12]
 800a86a:	e03e      	b.n	800a8ea <__swsetup_r+0xba>
 800a86c:	4b25      	ldr	r3, [pc, #148]	; (800a904 <__swsetup_r+0xd4>)
 800a86e:	429c      	cmp	r4, r3
 800a870:	d101      	bne.n	800a876 <__swsetup_r+0x46>
 800a872:	68ac      	ldr	r4, [r5, #8]
 800a874:	e7eb      	b.n	800a84e <__swsetup_r+0x1e>
 800a876:	4b24      	ldr	r3, [pc, #144]	; (800a908 <__swsetup_r+0xd8>)
 800a878:	429c      	cmp	r4, r3
 800a87a:	bf08      	it	eq
 800a87c:	68ec      	ldreq	r4, [r5, #12]
 800a87e:	e7e6      	b.n	800a84e <__swsetup_r+0x1e>
 800a880:	0758      	lsls	r0, r3, #29
 800a882:	d512      	bpl.n	800a8aa <__swsetup_r+0x7a>
 800a884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a886:	b141      	cbz	r1, 800a89a <__swsetup_r+0x6a>
 800a888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a88c:	4299      	cmp	r1, r3
 800a88e:	d002      	beq.n	800a896 <__swsetup_r+0x66>
 800a890:	4630      	mov	r0, r6
 800a892:	f7fe feef 	bl	8009674 <_free_r>
 800a896:	2300      	movs	r3, #0
 800a898:	6363      	str	r3, [r4, #52]	; 0x34
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	6063      	str	r3, [r4, #4]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f043 0308 	orr.w	r3, r3, #8
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	6923      	ldr	r3, [r4, #16]
 800a8b4:	b94b      	cbnz	r3, 800a8ca <__swsetup_r+0x9a>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8c0:	d003      	beq.n	800a8ca <__swsetup_r+0x9a>
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f99f 	bl	800ac08 <__smakebuf_r>
 800a8ca:	89a0      	ldrh	r0, [r4, #12]
 800a8cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8d0:	f010 0301 	ands.w	r3, r0, #1
 800a8d4:	d00a      	beq.n	800a8ec <__swsetup_r+0xbc>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60a3      	str	r3, [r4, #8]
 800a8da:	6963      	ldr	r3, [r4, #20]
 800a8dc:	425b      	negs	r3, r3
 800a8de:	61a3      	str	r3, [r4, #24]
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	b943      	cbnz	r3, 800a8f6 <__swsetup_r+0xc6>
 800a8e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8e8:	d1ba      	bne.n	800a860 <__swsetup_r+0x30>
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
 800a8ec:	0781      	lsls	r1, r0, #30
 800a8ee:	bf58      	it	pl
 800a8f0:	6963      	ldrpl	r3, [r4, #20]
 800a8f2:	60a3      	str	r3, [r4, #8]
 800a8f4:	e7f4      	b.n	800a8e0 <__swsetup_r+0xb0>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	e7f7      	b.n	800a8ea <__swsetup_r+0xba>
 800a8fa:	bf00      	nop
 800a8fc:	200000c4 	.word	0x200000c4
 800a900:	0800ea4c 	.word	0x0800ea4c
 800a904:	0800ea6c 	.word	0x0800ea6c
 800a908:	0800ea2c 	.word	0x0800ea2c

0800a90c <__sflush_r>:
 800a90c:	898a      	ldrh	r2, [r1, #12]
 800a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a910:	4605      	mov	r5, r0
 800a912:	0710      	lsls	r0, r2, #28
 800a914:	460c      	mov	r4, r1
 800a916:	d457      	bmi.n	800a9c8 <__sflush_r+0xbc>
 800a918:	684b      	ldr	r3, [r1, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dc04      	bgt.n	800a928 <__sflush_r+0x1c>
 800a91e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc01      	bgt.n	800a928 <__sflush_r+0x1c>
 800a924:	2000      	movs	r0, #0
 800a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	d0fa      	beq.n	800a924 <__sflush_r+0x18>
 800a92e:	2300      	movs	r3, #0
 800a930:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a934:	682f      	ldr	r7, [r5, #0]
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	d032      	beq.n	800a9a0 <__sflush_r+0x94>
 800a93a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	075a      	lsls	r2, r3, #29
 800a940:	d505      	bpl.n	800a94e <__sflush_r+0x42>
 800a942:	6863      	ldr	r3, [r4, #4]
 800a944:	1ac0      	subs	r0, r0, r3
 800a946:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a948:	b10b      	cbz	r3, 800a94e <__sflush_r+0x42>
 800a94a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a94c:	1ac0      	subs	r0, r0, r3
 800a94e:	2300      	movs	r3, #0
 800a950:	4602      	mov	r2, r0
 800a952:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a954:	4628      	mov	r0, r5
 800a956:	6a21      	ldr	r1, [r4, #32]
 800a958:	47b0      	blx	r6
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	d106      	bne.n	800a96e <__sflush_r+0x62>
 800a960:	6829      	ldr	r1, [r5, #0]
 800a962:	291d      	cmp	r1, #29
 800a964:	d82c      	bhi.n	800a9c0 <__sflush_r+0xb4>
 800a966:	4a29      	ldr	r2, [pc, #164]	; (800aa0c <__sflush_r+0x100>)
 800a968:	40ca      	lsrs	r2, r1
 800a96a:	07d6      	lsls	r6, r2, #31
 800a96c:	d528      	bpl.n	800a9c0 <__sflush_r+0xb4>
 800a96e:	2200      	movs	r2, #0
 800a970:	6062      	str	r2, [r4, #4]
 800a972:	6922      	ldr	r2, [r4, #16]
 800a974:	04d9      	lsls	r1, r3, #19
 800a976:	6022      	str	r2, [r4, #0]
 800a978:	d504      	bpl.n	800a984 <__sflush_r+0x78>
 800a97a:	1c42      	adds	r2, r0, #1
 800a97c:	d101      	bne.n	800a982 <__sflush_r+0x76>
 800a97e:	682b      	ldr	r3, [r5, #0]
 800a980:	b903      	cbnz	r3, 800a984 <__sflush_r+0x78>
 800a982:	6560      	str	r0, [r4, #84]	; 0x54
 800a984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a986:	602f      	str	r7, [r5, #0]
 800a988:	2900      	cmp	r1, #0
 800a98a:	d0cb      	beq.n	800a924 <__sflush_r+0x18>
 800a98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a990:	4299      	cmp	r1, r3
 800a992:	d002      	beq.n	800a99a <__sflush_r+0x8e>
 800a994:	4628      	mov	r0, r5
 800a996:	f7fe fe6d 	bl	8009674 <_free_r>
 800a99a:	2000      	movs	r0, #0
 800a99c:	6360      	str	r0, [r4, #52]	; 0x34
 800a99e:	e7c2      	b.n	800a926 <__sflush_r+0x1a>
 800a9a0:	6a21      	ldr	r1, [r4, #32]
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b0      	blx	r6
 800a9a8:	1c41      	adds	r1, r0, #1
 800a9aa:	d1c7      	bne.n	800a93c <__sflush_r+0x30>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0c4      	beq.n	800a93c <__sflush_r+0x30>
 800a9b2:	2b1d      	cmp	r3, #29
 800a9b4:	d001      	beq.n	800a9ba <__sflush_r+0xae>
 800a9b6:	2b16      	cmp	r3, #22
 800a9b8:	d101      	bne.n	800a9be <__sflush_r+0xb2>
 800a9ba:	602f      	str	r7, [r5, #0]
 800a9bc:	e7b2      	b.n	800a924 <__sflush_r+0x18>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	e7ae      	b.n	800a926 <__sflush_r+0x1a>
 800a9c8:	690f      	ldr	r7, [r1, #16]
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	d0aa      	beq.n	800a924 <__sflush_r+0x18>
 800a9ce:	0793      	lsls	r3, r2, #30
 800a9d0:	bf18      	it	ne
 800a9d2:	2300      	movne	r3, #0
 800a9d4:	680e      	ldr	r6, [r1, #0]
 800a9d6:	bf08      	it	eq
 800a9d8:	694b      	ldreq	r3, [r1, #20]
 800a9da:	1bf6      	subs	r6, r6, r7
 800a9dc:	600f      	str	r7, [r1, #0]
 800a9de:	608b      	str	r3, [r1, #8]
 800a9e0:	2e00      	cmp	r6, #0
 800a9e2:	dd9f      	ble.n	800a924 <__sflush_r+0x18>
 800a9e4:	4633      	mov	r3, r6
 800a9e6:	463a      	mov	r2, r7
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	6a21      	ldr	r1, [r4, #32]
 800a9ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a9f0:	47e0      	blx	ip
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	dc06      	bgt.n	800aa04 <__sflush_r+0xf8>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	e790      	b.n	800a926 <__sflush_r+0x1a>
 800aa04:	4407      	add	r7, r0
 800aa06:	1a36      	subs	r6, r6, r0
 800aa08:	e7ea      	b.n	800a9e0 <__sflush_r+0xd4>
 800aa0a:	bf00      	nop
 800aa0c:	20400001 	.word	0x20400001

0800aa10 <_fflush_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	690b      	ldr	r3, [r1, #16]
 800aa14:	4605      	mov	r5, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	b913      	cbnz	r3, 800aa20 <_fflush_r+0x10>
 800aa1a:	2500      	movs	r5, #0
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	bd38      	pop	{r3, r4, r5, pc}
 800aa20:	b118      	cbz	r0, 800aa2a <_fflush_r+0x1a>
 800aa22:	6983      	ldr	r3, [r0, #24]
 800aa24:	b90b      	cbnz	r3, 800aa2a <_fflush_r+0x1a>
 800aa26:	f000 f871 	bl	800ab0c <__sinit>
 800aa2a:	4b14      	ldr	r3, [pc, #80]	; (800aa7c <_fflush_r+0x6c>)
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	d11b      	bne.n	800aa68 <_fflush_r+0x58>
 800aa30:	686c      	ldr	r4, [r5, #4]
 800aa32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0ef      	beq.n	800aa1a <_fflush_r+0xa>
 800aa3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa3c:	07d0      	lsls	r0, r2, #31
 800aa3e:	d404      	bmi.n	800aa4a <_fflush_r+0x3a>
 800aa40:	0599      	lsls	r1, r3, #22
 800aa42:	d402      	bmi.n	800aa4a <_fflush_r+0x3a>
 800aa44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa46:	f000 ff12 	bl	800b86e <__retarget_lock_acquire_recursive>
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	f7ff ff5d 	bl	800a90c <__sflush_r>
 800aa52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa54:	4605      	mov	r5, r0
 800aa56:	07da      	lsls	r2, r3, #31
 800aa58:	d4e0      	bmi.n	800aa1c <_fflush_r+0xc>
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	059b      	lsls	r3, r3, #22
 800aa5e:	d4dd      	bmi.n	800aa1c <_fflush_r+0xc>
 800aa60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa62:	f000 ff0c 	bl	800b87e <__retarget_lock_release_recursive>
 800aa66:	e7d9      	b.n	800aa1c <_fflush_r+0xc>
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <_fflush_r+0x70>)
 800aa6a:	429c      	cmp	r4, r3
 800aa6c:	d101      	bne.n	800aa72 <_fflush_r+0x62>
 800aa6e:	68ac      	ldr	r4, [r5, #8]
 800aa70:	e7df      	b.n	800aa32 <_fflush_r+0x22>
 800aa72:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <_fflush_r+0x74>)
 800aa74:	429c      	cmp	r4, r3
 800aa76:	bf08      	it	eq
 800aa78:	68ec      	ldreq	r4, [r5, #12]
 800aa7a:	e7da      	b.n	800aa32 <_fflush_r+0x22>
 800aa7c:	0800ea4c 	.word	0x0800ea4c
 800aa80:	0800ea6c 	.word	0x0800ea6c
 800aa84:	0800ea2c 	.word	0x0800ea2c

0800aa88 <std>:
 800aa88:	2300      	movs	r3, #0
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa96:	6083      	str	r3, [r0, #8]
 800aa98:	8181      	strh	r1, [r0, #12]
 800aa9a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa9c:	81c2      	strh	r2, [r0, #14]
 800aa9e:	6183      	str	r3, [r0, #24]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	2208      	movs	r2, #8
 800aaa4:	305c      	adds	r0, #92	; 0x5c
 800aaa6:	f002 fa31 	bl	800cf0c <memset>
 800aaaa:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <std+0x38>)
 800aaac:	6224      	str	r4, [r4, #32]
 800aaae:	6263      	str	r3, [r4, #36]	; 0x24
 800aab0:	4b04      	ldr	r3, [pc, #16]	; (800aac4 <std+0x3c>)
 800aab2:	62a3      	str	r3, [r4, #40]	; 0x28
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <std+0x40>)
 800aab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aab8:	4b04      	ldr	r3, [pc, #16]	; (800aacc <std+0x44>)
 800aaba:	6323      	str	r3, [r4, #48]	; 0x30
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	bf00      	nop
 800aac0:	0800d535 	.word	0x0800d535
 800aac4:	0800d557 	.word	0x0800d557
 800aac8:	0800d58f 	.word	0x0800d58f
 800aacc:	0800d5b3 	.word	0x0800d5b3

0800aad0 <_cleanup_r>:
 800aad0:	4901      	ldr	r1, [pc, #4]	; (800aad8 <_cleanup_r+0x8>)
 800aad2:	f002 bcc1 	b.w	800d458 <_fwalk_reent>
 800aad6:	bf00      	nop
 800aad8:	0800aa11 	.word	0x0800aa11

0800aadc <__sfp_lock_acquire>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sfp_lock_acquire+0x8>)
 800aade:	f000 bec6 	b.w	800b86e <__retarget_lock_acquire_recursive>
 800aae2:	bf00      	nop
 800aae4:	200003a4 	.word	0x200003a4

0800aae8 <__sfp_lock_release>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sfp_lock_release+0x8>)
 800aaea:	f000 bec8 	b.w	800b87e <__retarget_lock_release_recursive>
 800aaee:	bf00      	nop
 800aaf0:	200003a4 	.word	0x200003a4

0800aaf4 <__sinit_lock_acquire>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__sinit_lock_acquire+0x8>)
 800aaf6:	f000 beba 	b.w	800b86e <__retarget_lock_acquire_recursive>
 800aafa:	bf00      	nop
 800aafc:	200003b8 	.word	0x200003b8

0800ab00 <__sinit_lock_release>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sinit_lock_release+0x8>)
 800ab02:	f000 bebc 	b.w	800b87e <__retarget_lock_release_recursive>
 800ab06:	bf00      	nop
 800ab08:	200003b8 	.word	0x200003b8

0800ab0c <__sinit>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	f7ff fff0 	bl	800aaf4 <__sinit_lock_acquire>
 800ab14:	69a3      	ldr	r3, [r4, #24]
 800ab16:	b11b      	cbz	r3, 800ab20 <__sinit+0x14>
 800ab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1c:	f7ff bff0 	b.w	800ab00 <__sinit_lock_release>
 800ab20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab24:	6523      	str	r3, [r4, #80]	; 0x50
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <__sinit+0x68>)
 800ab28:	4a13      	ldr	r2, [pc, #76]	; (800ab78 <__sinit+0x6c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	bf08      	it	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	4620      	mov	r0, r4
 800ab36:	bf08      	it	eq
 800ab38:	61a3      	streq	r3, [r4, #24]
 800ab3a:	f000 f81f 	bl	800ab7c <__sfp>
 800ab3e:	6060      	str	r0, [r4, #4]
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 f81b 	bl	800ab7c <__sfp>
 800ab46:	60a0      	str	r0, [r4, #8]
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 f817 	bl	800ab7c <__sfp>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2104      	movs	r1, #4
 800ab52:	60e0      	str	r0, [r4, #12]
 800ab54:	6860      	ldr	r0, [r4, #4]
 800ab56:	f7ff ff97 	bl	800aa88 <std>
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	2109      	movs	r1, #9
 800ab5e:	68a0      	ldr	r0, [r4, #8]
 800ab60:	f7ff ff92 	bl	800aa88 <std>
 800ab64:	2202      	movs	r2, #2
 800ab66:	2112      	movs	r1, #18
 800ab68:	68e0      	ldr	r0, [r4, #12]
 800ab6a:	f7ff ff8d 	bl	800aa88 <std>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	61a3      	str	r3, [r4, #24]
 800ab72:	e7d1      	b.n	800ab18 <__sinit+0xc>
 800ab74:	0800ea1c 	.word	0x0800ea1c
 800ab78:	0800aad1 	.word	0x0800aad1

0800ab7c <__sfp>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	4607      	mov	r7, r0
 800ab80:	f7ff ffac 	bl	800aadc <__sfp_lock_acquire>
 800ab84:	4b1e      	ldr	r3, [pc, #120]	; (800ac00 <__sfp+0x84>)
 800ab86:	681e      	ldr	r6, [r3, #0]
 800ab88:	69b3      	ldr	r3, [r6, #24]
 800ab8a:	b913      	cbnz	r3, 800ab92 <__sfp+0x16>
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff ffbd 	bl	800ab0c <__sinit>
 800ab92:	3648      	adds	r6, #72	; 0x48
 800ab94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	d503      	bpl.n	800aba4 <__sfp+0x28>
 800ab9c:	6833      	ldr	r3, [r6, #0]
 800ab9e:	b30b      	cbz	r3, 800abe4 <__sfp+0x68>
 800aba0:	6836      	ldr	r6, [r6, #0]
 800aba2:	e7f7      	b.n	800ab94 <__sfp+0x18>
 800aba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aba8:	b9d5      	cbnz	r5, 800abe0 <__sfp+0x64>
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <__sfp+0x88>)
 800abac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abb0:	60e3      	str	r3, [r4, #12]
 800abb2:	6665      	str	r5, [r4, #100]	; 0x64
 800abb4:	f000 fe52 	bl	800b85c <__retarget_lock_init_recursive>
 800abb8:	f7ff ff96 	bl	800aae8 <__sfp_lock_release>
 800abbc:	2208      	movs	r2, #8
 800abbe:	4629      	mov	r1, r5
 800abc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abc8:	6025      	str	r5, [r4, #0]
 800abca:	61a5      	str	r5, [r4, #24]
 800abcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abd0:	f002 f99c 	bl	800cf0c <memset>
 800abd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abdc:	4620      	mov	r0, r4
 800abde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe0:	3468      	adds	r4, #104	; 0x68
 800abe2:	e7d9      	b.n	800ab98 <__sfp+0x1c>
 800abe4:	2104      	movs	r1, #4
 800abe6:	4638      	mov	r0, r7
 800abe8:	f002 fc20 	bl	800d42c <__sfmoreglue>
 800abec:	4604      	mov	r4, r0
 800abee:	6030      	str	r0, [r6, #0]
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d1d5      	bne.n	800aba0 <__sfp+0x24>
 800abf4:	f7ff ff78 	bl	800aae8 <__sfp_lock_release>
 800abf8:	230c      	movs	r3, #12
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	e7ee      	b.n	800abdc <__sfp+0x60>
 800abfe:	bf00      	nop
 800ac00:	0800ea1c 	.word	0x0800ea1c
 800ac04:	ffff0001 	.word	0xffff0001

0800ac08 <__smakebuf_r>:
 800ac08:	898b      	ldrh	r3, [r1, #12]
 800ac0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac0c:	079d      	lsls	r5, r3, #30
 800ac0e:	4606      	mov	r6, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	d507      	bpl.n	800ac24 <__smakebuf_r+0x1c>
 800ac14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	6123      	str	r3, [r4, #16]
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	6163      	str	r3, [r4, #20]
 800ac20:	b002      	add	sp, #8
 800ac22:	bd70      	pop	{r4, r5, r6, pc}
 800ac24:	466a      	mov	r2, sp
 800ac26:	ab01      	add	r3, sp, #4
 800ac28:	f002 fc35 	bl	800d496 <__swhatbuf_r>
 800ac2c:	9900      	ldr	r1, [sp, #0]
 800ac2e:	4605      	mov	r5, r0
 800ac30:	4630      	mov	r0, r6
 800ac32:	f7fe fd67 	bl	8009704 <_malloc_r>
 800ac36:	b948      	cbnz	r0, 800ac4c <__smakebuf_r+0x44>
 800ac38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3c:	059a      	lsls	r2, r3, #22
 800ac3e:	d4ef      	bmi.n	800ac20 <__smakebuf_r+0x18>
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	f043 0302 	orr.w	r3, r3, #2
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e7e3      	b.n	800ac14 <__smakebuf_r+0xc>
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <__smakebuf_r+0x7c>)
 800ac4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	6020      	str	r0, [r4, #0]
 800ac54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	9b00      	ldr	r3, [sp, #0]
 800ac5c:	6120      	str	r0, [r4, #16]
 800ac5e:	6163      	str	r3, [r4, #20]
 800ac60:	9b01      	ldr	r3, [sp, #4]
 800ac62:	b15b      	cbz	r3, 800ac7c <__smakebuf_r+0x74>
 800ac64:	4630      	mov	r0, r6
 800ac66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac6a:	f000 f85b 	bl	800ad24 <_isatty_r>
 800ac6e:	b128      	cbz	r0, 800ac7c <__smakebuf_r+0x74>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	89a0      	ldrh	r0, [r4, #12]
 800ac7e:	4305      	orrs	r5, r0
 800ac80:	81a5      	strh	r5, [r4, #12]
 800ac82:	e7cd      	b.n	800ac20 <__smakebuf_r+0x18>
 800ac84:	0800aad1 	.word	0x0800aad1

0800ac88 <raise>:
 800ac88:	4b02      	ldr	r3, [pc, #8]	; (800ac94 <raise+0xc>)
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	6818      	ldr	r0, [r3, #0]
 800ac8e:	f002 bc27 	b.w	800d4e0 <_raise_r>
 800ac92:	bf00      	nop
 800ac94:	200000c4 	.word	0x200000c4

0800ac98 <_kill_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4d06      	ldr	r5, [pc, #24]	; (800acb8 <_kill_r+0x20>)
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	f000 fdd0 	bl	800b84a <_kill>
 800acaa:	1c43      	adds	r3, r0, #1
 800acac:	d102      	bne.n	800acb4 <_kill_r+0x1c>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	b103      	cbz	r3, 800acb4 <_kill_r+0x1c>
 800acb2:	6023      	str	r3, [r4, #0]
 800acb4:	bd38      	pop	{r3, r4, r5, pc}
 800acb6:	bf00      	nop
 800acb8:	20000e5c 	.word	0x20000e5c

0800acbc <_write_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4604      	mov	r4, r0
 800acc0:	4608      	mov	r0, r1
 800acc2:	4611      	mov	r1, r2
 800acc4:	2200      	movs	r2, #0
 800acc6:	4d05      	ldr	r5, [pc, #20]	; (800acdc <_write_r+0x20>)
 800acc8:	602a      	str	r2, [r5, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	f000 fdad 	bl	800b82a <_write>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d102      	bne.n	800acda <_write_r+0x1e>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	b103      	cbz	r3, 800acda <_write_r+0x1e>
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	20000e5c 	.word	0x20000e5c

0800ace0 <_close_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	2300      	movs	r3, #0
 800ace4:	4d05      	ldr	r5, [pc, #20]	; (800acfc <_close_r+0x1c>)
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f000 fda3 	bl	800b836 <_close>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_close_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_close_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	20000e5c 	.word	0x20000e5c

0800ad00 <_fstat_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	2300      	movs	r3, #0
 800ad04:	4d06      	ldr	r5, [pc, #24]	; (800ad20 <_fstat_r+0x20>)
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	602b      	str	r3, [r5, #0]
 800ad0e:	f000 fda0 	bl	800b852 <_fstat>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d102      	bne.n	800ad1c <_fstat_r+0x1c>
 800ad16:	682b      	ldr	r3, [r5, #0]
 800ad18:	b103      	cbz	r3, 800ad1c <_fstat_r+0x1c>
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000e5c 	.word	0x20000e5c

0800ad24 <_isatty_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4d05      	ldr	r5, [pc, #20]	; (800ad40 <_isatty_r+0x1c>)
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f000 fd86 	bl	800b840 <_isatty>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_isatty_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_isatty_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000e5c 	.word	0x20000e5c

0800ad44 <_lseek_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4d05      	ldr	r5, [pc, #20]	; (800ad64 <_lseek_r+0x20>)
 800ad50:	602a      	str	r2, [r5, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f000 fd72 	bl	800b83c <_lseek>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_lseek_r+0x1e>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_lseek_r+0x1e>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	20000e5c 	.word	0x20000e5c

0800ad68 <_read_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4611      	mov	r1, r2
 800ad70:	2200      	movs	r2, #0
 800ad72:	4d05      	ldr	r5, [pc, #20]	; (800ad88 <_read_r+0x20>)
 800ad74:	602a      	str	r2, [r5, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f000 fd51 	bl	800b81e <_read>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_read_r+0x1e>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_read_r+0x1e>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	20000e5c 	.word	0x20000e5c

0800ad8c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800ad8c:	4770      	bx	lr

0800ad8e <fill_msg_bit_field>:
static void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 800ad8e:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800ad90:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800ad92:	e013      	b.n	800adbc <fill_msg_bit_field+0x2e>
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800ad94:	ebac 0e04 	sub.w	lr, ip, r4
 800ad98:	f04f 0c01 	mov.w	ip, #1
 800ad9c:	fa0c fc0e 	lsl.w	ip, ip, lr
 800ada0:	ea01 0c0c 	and.w	ip, r1, ip
 800ada4:	fa0c fc04 	lsl.w	ip, ip, r4
 800ada8:	6805      	ldr	r5, [r0, #0]
 800adaa:	ea45 050c 	orr.w	r5, r5, ip
 800adae:	6005      	str	r5, [r0, #0]
        (*pos)++;
 800adb0:	f893 c000 	ldrb.w	ip, [r3]
 800adb4:	f10c 0c01 	add.w	ip, ip, #1
 800adb8:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 800adbc:	f893 c000 	ldrb.w	ip, [r3]
 800adc0:	1915      	adds	r5, r2, r4
 800adc2:	45ac      	cmp	ip, r5
 800adc4:	dbe6      	blt.n	800ad94 <fill_msg_bit_field+0x6>
}
 800adc6:	bd30      	pop	{r4, r5, pc}

0800adc8 <extract_msg_bit_field>:
static void extract_msg_bit_field(const uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 800adc8:	b510      	push	{r4, lr}
    uint8_t start_pos = *pos;
 800adca:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800adcc:	e015      	b.n	800adfa <extract_msg_bit_field+0x32>
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800adce:	f04f 0c01 	mov.w	ip, #1
 800add2:	fa0c fc0e 	lsl.w	ip, ip, lr
 800add6:	f8d0 e000 	ldr.w	lr, [r0]
 800adda:	ea0e 0c0c 	and.w	ip, lr, ip
 800adde:	fa2c fc04 	lsr.w	ip, ip, r4
 800ade2:	f891 e000 	ldrb.w	lr, [r1]
 800ade6:	ea4e 0c0c 	orr.w	ip, lr, ip
 800adea:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 800adee:	f893 c000 	ldrb.w	ip, [r3]
 800adf2:	f10c 0c01 	add.w	ip, ip, #1
 800adf6:	f883 c000 	strb.w	ip, [r3]
    while ( *pos < start_pos + field_len ) {
 800adfa:	f893 e000 	ldrb.w	lr, [r3]
 800adfe:	eb02 0c04 	add.w	ip, r2, r4
 800ae02:	45e6      	cmp	lr, ip
 800ae04:	dbe3      	blt.n	800adce <extract_msg_bit_field+0x6>
}
 800ae06:	bd10      	pop	{r4, pc}

0800ae08 <reverse>:
static uint8_t reverse(uint8_t input) {
 800ae08:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800ae0a:	461a      	mov	r2, r3
    while( pos < 7 ) {
 800ae0c:	e007      	b.n	800ae1e <reverse+0x16>
        bit = input & BIT(0);
 800ae0e:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800ae12:	430b      	orrs	r3, r1
        output = output << 1;
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800ae18:	0840      	lsrs	r0, r0, #1
        pos++;
 800ae1a:	3201      	adds	r2, #1
 800ae1c:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 800ae1e:	2a06      	cmp	r2, #6
 800ae20:	d9f5      	bls.n	800ae0e <reverse+0x6>
    bit = input & BIT(0);
 800ae22:	f000 0001 	and.w	r0, r0, #1
}
 800ae26:	4318      	orrs	r0, r3
 800ae28:	4770      	bx	lr

0800ae2a <arch_printk_char_out>:
}
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	4770      	bx	lr

0800ae2e <str_out>:
{
 800ae2e:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800ae30:	680c      	ldr	r4, [r1, #0]
 800ae32:	b154      	cbz	r4, 800ae4a <str_out+0x1c>
 800ae34:	688a      	ldr	r2, [r1, #8]
 800ae36:	684b      	ldr	r3, [r1, #4]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	da06      	bge.n	800ae4a <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d008      	beq.n	800ae54 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800ae42:	1c53      	adds	r3, r2, #1
 800ae44:	608b      	str	r3, [r1, #8]
 800ae46:	54a0      	strb	r0, [r4, r2]
 800ae48:	e002      	b.n	800ae50 <str_out+0x22>
		ctx->count++;
 800ae4a:	688b      	ldr	r3, [r1, #8]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	608b      	str	r3, [r1, #8]
}
 800ae50:	bc10      	pop	{r4}
 800ae52:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800ae54:	1c53      	adds	r3, r2, #1
 800ae56:	608b      	str	r3, [r1, #8]
 800ae58:	2300      	movs	r3, #0
 800ae5a:	54a3      	strb	r3, [r4, r2]
 800ae5c:	e7f8      	b.n	800ae50 <str_out+0x22>

0800ae5e <printk>:
{
 800ae5e:	b40f      	push	{r0, r1, r2, r3}
 800ae60:	b500      	push	{lr}
 800ae62:	b083      	sub	sp, #12
 800ae64:	a904      	add	r1, sp, #16
 800ae66:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800ae6a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800ae6c:	f7f7 f8da 	bl	8002024 <vprintk>
}
 800ae70:	b003      	add	sp, #12
 800ae72:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae76:	b004      	add	sp, #16
 800ae78:	4770      	bx	lr

0800ae7a <snprintk>:
{
 800ae7a:	b40c      	push	{r2, r3}
 800ae7c:	b500      	push	{lr}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	ab04      	add	r3, sp, #16
 800ae82:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800ae86:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800ae88:	f7f7 f8dc 	bl	8002044 <vsnprintk>
}
 800ae8c:	b003      	add	sp, #12
 800ae8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae92:	b002      	add	sp, #8
 800ae94:	4770      	bx	lr

0800ae96 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800ae96:	b508      	push	{r3, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	4608      	mov	r0, r1
 800ae9c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800ae9e:	461a      	mov	r2, r3
 800aea0:	47a0      	blx	r4
	return z_impl_z_current_get();
 800aea2:	f7fd fe53 	bl	8008b4c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800aea6:	f7f9 f9e7 	bl	8004278 <z_impl_k_thread_abort>

0800aeaa <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800aeaa:	1d13      	adds	r3, r2, #4
 800aeac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aeb0:	b9d3      	cbnz	r3, 800aee8 <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	fa03 fc02 	lsl.w	ip, r3, r2
 800aeb8:	68c3      	ldr	r3, [r0, #12]
 800aeba:	ea43 030c 	orr.w	r3, r3, ip
 800aebe:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800aec0:	3204      	adds	r2, #4
 800aec2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800aec6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800aeca:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
 800aecc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800aed0:	d306      	bcc.n	800aee0 <free_list_add_bidx+0x36>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 800aed2:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 800aed4:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800aed6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800aeda:	d303      	bcc.n	800aee4 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800aedc:	60d9      	str	r1, [r3, #12]
 800aede:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800aee0:	8099      	strh	r1, [r3, #4]
 800aee2:	e7f7      	b.n	800aed4 <free_list_add_bidx+0x2a>
 800aee4:	80d9      	strh	r1, [r3, #6]
 800aee6:	4770      	bx	lr
{
 800aee8:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 800aeea:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 800aeee:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800aef0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800aef4:	d31c      	bcc.n	800af30 <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 800aef6:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 800aefa:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 800aefe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800af02:	d318      	bcc.n	800af36 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 800af04:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 800af08:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800af0a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800af0e:	d315      	bcc.n	800af3c <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 800af10:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 800af14:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 800af18:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800af1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af1e:	d310      	bcc.n	800af42 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 800af20:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 800af22:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800af24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af28:	d30d      	bcc.n	800af46 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 800af2a:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 800af2e:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 800af30:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800af34:	e7e1      	b.n	800aefa <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 800af36:	f8ae 2004 	strh.w	r2, [lr, #4]
 800af3a:	e7e5      	b.n	800af08 <free_list_add_bidx+0x5e>
 800af3c:	f8ae 3006 	strh.w	r3, [lr, #6]
 800af40:	e7e8      	b.n	800af14 <free_list_add_bidx+0x6a>
 800af42:	80d1      	strh	r1, [r2, #6]
 800af44:	e7ed      	b.n	800af22 <free_list_add_bidx+0x78>
 800af46:	f8ac 1004 	strh.w	r1, [ip, #4]
 800af4a:	e7f0      	b.n	800af2e <free_list_add_bidx+0x84>

0800af4c <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800af4c:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 800af4e:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
 800af50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af54:	d307      	bcc.n	800af66 <free_list_add+0x1a>
	void *cmem = &buf[c];
 800af56:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 800af5a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800af5c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 800af5e:	2a01      	cmp	r2, #1
 800af60:	d002      	beq.n	800af68 <free_list_add+0x1c>
 800af62:	2200      	movs	r2, #0
 800af64:	e000      	b.n	800af68 <free_list_add+0x1c>
 800af66:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800af68:	b9a2      	cbnz	r2, 800af94 <free_list_add+0x48>
	void *cmem = &buf[c];
 800af6a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 800af6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af72:	d310      	bcc.n	800af96 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800af74:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800af76:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800af78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af7c:	d30d      	bcc.n	800af9a <free_list_add+0x4e>
 800af7e:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800af80:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800af82:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800af86:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800af88:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800af8c:	f1c2 021f 	rsb	r2, r2, #31
 800af90:	f7ff ff8b 	bl	800aeaa <free_list_add_bidx>
	}
}
 800af94:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 800af96:	8852      	ldrh	r2, [r2, #2]
 800af98:	e7ed      	b.n	800af76 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 800af9a:	2304      	movs	r3, #4
 800af9c:	e7f0      	b.n	800af80 <free_list_add+0x34>

0800af9e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 800afa2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800afa6:	d324      	bcc.n	800aff2 <sys_heap_init+0x54>
 800afa8:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800afac:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800afb0:	1dc8      	adds	r0, r1, #7
 800afb2:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800afb6:	448c      	add	ip, r1
 800afb8:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800afbc:	ebac 0c00 	sub.w	ip, ip, r0
 800afc0:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800afc4:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800afc6:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 800afcc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800afd0:	d312      	bcc.n	800aff8 <sys_heap_init+0x5a>
 800afd2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800afd4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800afd6:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 800afda:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800afdc:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800afe0:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800afe4:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800afe8:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800afea:	1dde      	adds	r6, r3, #7
 800afec:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800afee:	2300      	movs	r3, #0
 800aff0:	e009      	b.n	800b006 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 800aff2:	f04f 0c04 	mov.w	ip, #4
 800aff6:	e7d9      	b.n	800afac <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 800aff8:	2304      	movs	r3, #4
 800affa:	e7eb      	b.n	800afd4 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	2400      	movs	r4, #0
 800b000:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800b004:	3301      	adds	r3, #1
 800b006:	4573      	cmp	r3, lr
 800b008:	dbf8      	blt.n	800affc <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b00a:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 800b00c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b010:	d336      	bcc.n	800b080 <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 800b012:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 800b014:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b018:	d334      	bcc.n	800b084 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 800b01a:	2300      	movs	r3, #0
 800b01c:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 800b01e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b022:	d332      	bcc.n	800b08a <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b024:	6843      	ldr	r3, [r0, #4]
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800b02c:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b02e:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 800b030:	f026 0307 	bic.w	r3, r6, #7
 800b034:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 800b036:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b03a:	d32b      	bcc.n	800b094 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 800b03c:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 800b03e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b040:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b044:	d328      	bcc.n	800b098 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 800b046:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 800b048:	f02c 0307 	bic.w	r3, ip, #7
 800b04c:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 800b04e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b050:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b054:	d322      	bcc.n	800b09c <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 800b056:	2400      	movs	r4, #0
 800b058:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 800b05c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b05e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b062:	d31f      	bcc.n	800b0a4 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 800b064:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 800b066:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b06a:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800b06c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b070:	d31a      	bcc.n	800b0a8 <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	f042 0201 	orr.w	r2, r2, #1
 800b078:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800b07a:	f7ff ff67 	bl	800af4c <free_list_add>
}
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 800b080:	8043      	strh	r3, [r0, #2]
 800b082:	e7c7      	b.n	800b014 <sys_heap_init+0x76>
 800b084:	2300      	movs	r3, #0
 800b086:	8003      	strh	r3, [r0, #0]
 800b088:	e7c9      	b.n	800b01e <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b08a:	8843      	ldrh	r3, [r0, #2]
 800b08c:	f043 0301 	orr.w	r3, r3, #1
 800b090:	8043      	strh	r3, [r0, #2]
 800b092:	e7cb      	b.n	800b02c <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 800b094:	8067      	strh	r7, [r4, #2]
 800b096:	e7d2      	b.n	800b03e <sys_heap_init+0xa0>
 800b098:	52c1      	strh	r1, [r0, r3]
 800b09a:	e7d5      	b.n	800b048 <sys_heap_init+0xaa>
 800b09c:	2400      	movs	r4, #0
 800b09e:	f8ac 4002 	strh.w	r4, [ip, #2]
 800b0a2:	e7db      	b.n	800b05c <sys_heap_init+0xbe>
 800b0a4:	52c2      	strh	r2, [r0, r3]
 800b0a6:	e7de      	b.n	800b066 <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b0a8:	885a      	ldrh	r2, [r3, #2]
 800b0aa:	f042 0201 	orr.w	r2, r2, #1
 800b0ae:	805a      	strh	r2, [r3, #2]
 800b0b0:	e7e3      	b.n	800b07a <sys_heap_init+0xdc>

0800b0b2 <outs>:
{
 800b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	460e      	mov	r6, r1
 800b0ba:	4614      	mov	r4, r2
 800b0bc:	4698      	mov	r8, r3
	size_t count = 0;
 800b0be:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b0c0:	e006      	b.n	800b0d0 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0c8:	47b8      	blx	r7
		if (rc < 0) {
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	db09      	blt.n	800b0e2 <outs+0x30>
		++count;
 800b0ce:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b0d0:	4544      	cmp	r4, r8
 800b0d2:	d3f6      	bcc.n	800b0c2 <outs+0x10>
 800b0d4:	f1b8 0f00 	cmp.w	r8, #0
 800b0d8:	d102      	bne.n	800b0e0 <outs+0x2e>
 800b0da:	7823      	ldrb	r3, [r4, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f0      	bne.n	800b0c2 <outs+0x10>
	return (int)count;
 800b0e0:	4628      	mov	r0, r5
}
 800b0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0e6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800b0e6:	4770      	bx	lr

0800b0e8 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	4770      	bx	lr

0800b0ec <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 800b0f0:	6003      	str	r3, [r0, #0]
}
 800b0f2:	4770      	bx	lr

0800b0f4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 800b0f4:	6803      	ldr	r3, [r0, #0]
 800b0f6:	b12b      	cbz	r3, 800b104 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 800b0f8:	6843      	ldr	r3, [r0, #4]
 800b0fa:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 800b0fc:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	600b      	str	r3, [r1, #0]
}
 800b102:	4770      	bx	lr
		list->head = msg;
 800b104:	6001      	str	r1, [r0, #0]
 800b106:	e7f9      	b.n	800b0fc <log_list_add_tail+0x8>

0800b108 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 800b108:	6800      	ldr	r0, [r0, #0]
 800b10a:	4770      	bx	lr

0800b10c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 800b10c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 800b10e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 800b110:	b108      	cbz	r0, 800b116 <log_list_head_get+0xa>
		list->head = list->head->next;
 800b112:	6802      	ldr	r2, [r0, #0]
 800b114:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 800b116:	4770      	bx	lr

0800b118 <dummy_timestamp>:
}
 800b118:	2000      	movs	r0, #0
 800b11a:	4770      	bx	lr

0800b11c <msg_filter_check>:
}
 800b11c:	2001      	movs	r0, #1
 800b11e:	4770      	bx	lr

0800b120 <default_lf_get_timestamp>:
{
 800b120:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800b122:	f001 fe32 	bl	800cd8a <z_impl_k_uptime_ticks>
 800b126:	220a      	movs	r2, #10
 800b128:	2300      	movs	r3, #0
 800b12a:	f7f5 fbcb 	bl	80008c4 <__aeabi_uldivmod>
}
 800b12e:	bd08      	pop	{r3, pc}

0800b130 <block_on_alloc>:
}
 800b130:	2000      	movs	r0, #0
 800b132:	4770      	bx	lr

0800b134 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 800b134:	2901      	cmp	r1, #1
 800b136:	d902      	bls.n	800b13e <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 800b138:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 800b13a:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 800b13c:	e006      	b.n	800b14c <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
 800b13e:	3104      	adds	r1, #4
 800b140:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b144:	6888      	ldr	r0, [r1, #8]
 800b146:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 800b148:	3907      	subs	r1, #7
		cont = cont->next;
 800b14a:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
 800b14c:	2906      	cmp	r1, #6
 800b14e:	d8fb      	bhi.n	800b148 <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
 800b150:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b154:	6848      	ldr	r0, [r1, #4]
}
 800b156:	4770      	bx	lr

0800b158 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	461c      	mov	r4, r3
 800b15e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800b162:	8903      	ldrh	r3, [r0, #8]
 800b164:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 800b168:	42a3      	cmp	r3, r4
 800b16a:	d91f      	bls.n	800b1ac <log_msg_hexdump_data_op+0x54>
 800b16c:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 800b16e:	6811      	ldr	r1, [r2, #0]
 800b170:	4421      	add	r1, r4
 800b172:	4299      	cmp	r1, r3
 800b174:	d901      	bls.n	800b17a <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 800b176:	1b19      	subs	r1, r3, r4
 800b178:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 800b17a:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800b17c:	2b0c      	cmp	r3, #12
 800b17e:	d919      	bls.n	800b1b4 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 800b180:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 800b184:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 800b186:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 800b188:	42a3      	cmp	r3, r4
 800b18a:	d91e      	bls.n	800b1ca <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b18c:	42bb      	cmp	r3, r7
 800b18e:	bf28      	it	cs
 800b190:	463b      	movcs	r3, r7
 800b192:	461d      	mov	r5, r3

		if (put_op) {
 800b194:	f1b9 0f00 	cmp.w	r9, #0
 800b198:	d010      	beq.n	800b1bc <log_msg_hexdump_data_op+0x64>
 800b19a:	461a      	mov	r2, r3
 800b19c:	4641      	mov	r1, r8
 800b19e:	eb0c 0004 	add.w	r0, ip, r4
 800b1a2:	f001 fea5 	bl	800cef0 <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 800b1a6:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b1a8:	44a8      	add	r8, r5
 800b1aa:	e021      	b.n	800b1f0 <log_msg_hexdump_data_op+0x98>
		*length = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 800b1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 800b1b4:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 800b1b8:	2600      	movs	r6, #0
 800b1ba:	e7e5      	b.n	800b188 <log_msg_hexdump_data_op+0x30>
 800b1bc:	461a      	mov	r2, r3
 800b1be:	eb0c 0104 	add.w	r1, ip, r4
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	f001 fe94 	bl	800cef0 <memcpy>
 800b1c8:	e7ed      	b.n	800b1a6 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 800b1ca:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 800b1cc:	b91e      	cbnz	r6, 800b1d6 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 800b1ce:	6946      	ldr	r6, [r0, #20]
 800b1d0:	e001      	b.n	800b1d6 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 800b1d2:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 800b1d4:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 800b1d6:	2c1b      	cmp	r4, #27
 800b1d8:	d8fb      	bhi.n	800b1d2 <log_msg_hexdump_data_op+0x7a>
 800b1da:	e009      	b.n	800b1f0 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 800b1dc:	1931      	adds	r1, r6, r4
 800b1de:	462a      	mov	r2, r5
 800b1e0:	3104      	adds	r1, #4
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	f001 fe84 	bl	800cef0 <memcpy>
		cont = cont->next;
 800b1e8:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 800b1ea:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b1ec:	44a8      	add	r8, r5
		offset = 0;
 800b1ee:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 800b1f0:	2f00      	cmp	r7, #0
 800b1f2:	d0dd      	beq.n	800b1b0 <log_msg_hexdump_data_op+0x58>
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	d0db      	beq.n	800b1b0 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 800b1f8:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b1fc:	42bd      	cmp	r5, r7
 800b1fe:	bf28      	it	cs
 800b200:	463d      	movcs	r5, r7
		if (put_op) {
 800b202:	f1b9 0f00 	cmp.w	r9, #0
 800b206:	d0e9      	beq.n	800b1dc <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 800b208:	1930      	adds	r0, r6, r4
 800b20a:	462a      	mov	r2, r5
 800b20c:	4641      	mov	r1, r8
 800b20e:	3004      	adds	r0, #4
 800b210:	f001 fe6e 	bl	800cef0 <memcpy>
 800b214:	e7e8      	b.n	800b1e8 <log_msg_hexdump_data_op+0x90>

0800b216 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 800b216:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b218:	f3bf 8f5b 	dmb	ish
 800b21c:	e850 3f00 	ldrex	r3, [r0]
 800b220:	3301      	adds	r3, #1
 800b222:	e840 3200 	strex	r2, r3, [r0]
 800b226:	2a00      	cmp	r2, #0
 800b228:	d1f8      	bne.n	800b21c <log_msg_get+0x6>
 800b22a:	f3bf 8f5b 	dmb	ish
}
 800b22e:	4770      	bx	lr

0800b230 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 800b230:	7a40      	ldrb	r0, [r0, #9]
}
 800b232:	0900      	lsrs	r0, r0, #4
 800b234:	4770      	bx	lr

0800b236 <log_msg_arg_get>:
{
 800b236:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800b238:	7a43      	ldrb	r3, [r0, #9]
 800b23a:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 800b23e:	d20a      	bcs.n	800b256 <log_msg_arg_get+0x20>
 800b240:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800b242:	2a03      	cmp	r2, #3
 800b244:	d804      	bhi.n	800b250 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 800b246:	3104      	adds	r1, #4
 800b248:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b24c:	6840      	ldr	r0, [r0, #4]
 800b24e:	e003      	b.n	800b258 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 800b250:	f7ff ff70 	bl	800b134 <cont_arg_get>
 800b254:	e000      	b.n	800b258 <log_msg_arg_get+0x22>
		return 0;
 800b256:	2000      	movs	r0, #0
}
 800b258:	bd08      	pop	{r3, pc}

0800b25a <log_msg_str_get>:
}
 800b25a:	6900      	ldr	r0, [r0, #16]
 800b25c:	4770      	bx	lr

0800b25e <log_msg_put>:
{
 800b25e:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 800b260:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800b262:	f3bf 8f5b 	dmb	ish
 800b266:	e853 2f00 	ldrex	r2, [r3]
 800b26a:	3a01      	subs	r2, #1
 800b26c:	e843 2100 	strex	r1, r2, [r3]
 800b270:	2900      	cmp	r1, #0
 800b272:	d1f8      	bne.n	800b266 <log_msg_put+0x8>
 800b274:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 800b278:	6843      	ldr	r3, [r0, #4]
 800b27a:	b103      	cbz	r3, 800b27e <log_msg_put+0x20>
}
 800b27c:	bd08      	pop	{r3, pc}
		msg_free(msg);
 800b27e:	f7f8 f84f 	bl	8003320 <msg_free>
}
 800b282:	e7fb      	b.n	800b27c <log_msg_put+0x1e>

0800b284 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 800b284:	b510      	push	{r4, lr}
 800b286:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800b288:	2400      	movs	r4, #0
 800b28a:	9400      	str	r4, [sp, #0]
 800b28c:	f7ff ff64 	bl	800b158 <log_msg_hexdump_data_op>
}
 800b290:	b002      	add	sp, #8
 800b292:	bd10      	pop	{r4, pc}

0800b294 <buffer_write>:
{
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	4607      	mov	r7, r0
 800b298:	460d      	mov	r5, r1
 800b29a:	4614      	mov	r4, r2
 800b29c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800b29e:	4632      	mov	r2, r6
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
		buf += processed;
 800b2a6:	4405      	add	r5, r0
	} while (len != 0);
 800b2a8:	1a24      	subs	r4, r4, r0
 800b2aa:	d1f8      	bne.n	800b29e <buffer_write+0xa>
}
 800b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2ae <color_prefix>:
{
 800b2ae:	b508      	push	{r3, lr}
 800b2b0:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f7f8 f8cc 	bl	8003450 <color_print>
}
 800b2b8:	bd08      	pop	{r3, pc}

0800b2ba <color_postfix>:
{
 800b2ba:	b508      	push	{r3, lr}
 800b2bc:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f7f8 f8c6 	bl	8003450 <color_print>
}
 800b2c4:	bd08      	pop	{r3, pc}

0800b2c6 <postfix_print>:
{
 800b2c6:	b538      	push	{r3, r4, r5, lr}
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800b2cc:	f001 0101 	and.w	r1, r1, #1
 800b2d0:	f7ff fff3 	bl	800b2ba <color_postfix>
	newline_print(output, flags);
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f7f8 f8d0 	bl	800347c <newline_print>
}
 800b2dc:	bd38      	pop	{r3, r4, r5, pc}

0800b2de <prefix_print>:
{
 800b2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	4604      	mov	r4, r0
 800b2e6:	4615      	mov	r5, r2
 800b2e8:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800b2ec:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800b2f0:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 800b2f4:	f011 0702 	ands.w	r7, r1, #2
 800b2f8:	d113      	bne.n	800b322 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff ffd5 	bl	800b2ae <color_prefix>
	length += ids_print(output, level_on, func_on,
 800b304:	9601      	str	r6, [sp, #4]
 800b306:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b310:	462a      	mov	r2, r5
 800b312:	4641      	mov	r1, r8
 800b314:	4620      	mov	r0, r4
 800b316:	f7f8 f927 	bl	8003568 <ids_print>
}
 800b31a:	4438      	add	r0, r7
 800b31c:	b003      	add	sp, #12
 800b31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
 800b322:	461a      	mov	r2, r3
 800b324:	f7f8 f84e 	bl	80033c4 <timestamp_print>
 800b328:	4607      	mov	r7, r0
 800b32a:	e7e6      	b.n	800b2fa <prefix_print+0x1c>

0800b32c <std_print>:
{
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	b08e      	sub	sp, #56	; 0x38
 800b332:	af0e      	add	r7, sp, #56	; 0x38
 800b334:	4606      	mov	r6, r0
 800b336:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 800b338:	f7ff ff8f 	bl	800b25a <log_msg_str_get>
 800b33c:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 800b33e:	4630      	mov	r0, r6
 800b340:	f7ff ff76 	bl	800b230 <log_msg_nargs_get>
 800b344:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800b346:	0083      	lsls	r3, r0, #2
 800b348:	3307      	adds	r3, #7
 800b34a:	f023 0307 	bic.w	r3, r3, #7
 800b34e:	ebad 0d03 	sub.w	sp, sp, r3
 800b352:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800b354:	2400      	movs	r4, #0
 800b356:	e006      	b.n	800b366 <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
 800b358:	4621      	mov	r1, r4
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff ff6b 	bl	800b236 <log_msg_arg_get>
 800b360:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 800b364:	3401      	adds	r4, #1
 800b366:	4544      	cmp	r4, r8
 800b368:	d3f6      	bcc.n	800b358 <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ff60 	bl	800b230 <log_msg_nargs_get>
 800b370:	280f      	cmp	r0, #15
 800b372:	d815      	bhi.n	800b3a0 <std_print+0x74>
 800b374:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b378:	00170010 	.word	0x00170010
 800b37c:	0024001d 	.word	0x0024001d
 800b380:	0038002d 	.word	0x0038002d
 800b384:	00540045 	.word	0x00540045
 800b388:	00780065 	.word	0x00780065
 800b38c:	00a4008d 	.word	0x00a4008d
 800b390:	00d800bd 	.word	0x00d800bd
 800b394:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
 800b398:	4651      	mov	r1, sl
 800b39a:	4648      	mov	r0, r9
 800b39c:	f7f8 f800 	bl	80033a0 <print_formatted>
}
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 800b3a6:	682a      	ldr	r2, [r5, #0]
 800b3a8:	4651      	mov	r1, sl
 800b3aa:	4648      	mov	r0, r9
 800b3ac:	f7f7 fff8 	bl	80033a0 <print_formatted>
		break;
 800b3b0:	e7f6      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
 800b3b2:	686b      	ldr	r3, [r5, #4]
 800b3b4:	682a      	ldr	r2, [r5, #0]
 800b3b6:	4651      	mov	r1, sl
 800b3b8:	4648      	mov	r0, r9
 800b3ba:	f7f7 fff1 	bl	80033a0 <print_formatted>
		break;
 800b3be:	e7ef      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
 800b3c0:	686b      	ldr	r3, [r5, #4]
 800b3c2:	682a      	ldr	r2, [r5, #0]
 800b3c4:	68a9      	ldr	r1, [r5, #8]
 800b3c6:	9100      	str	r1, [sp, #0]
 800b3c8:	4651      	mov	r1, sl
 800b3ca:	4648      	mov	r0, r9
 800b3cc:	f7f7 ffe8 	bl	80033a0 <print_formatted>
		break;
 800b3d0:	e7e6      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b3d2:	686b      	ldr	r3, [r5, #4]
 800b3d4:	682a      	ldr	r2, [r5, #0]
 800b3d6:	68e9      	ldr	r1, [r5, #12]
 800b3d8:	9101      	str	r1, [sp, #4]
 800b3da:	68a9      	ldr	r1, [r5, #8]
 800b3dc:	9100      	str	r1, [sp, #0]
 800b3de:	4651      	mov	r1, sl
 800b3e0:	4648      	mov	r0, r9
 800b3e2:	f7f7 ffdd 	bl	80033a0 <print_formatted>
		break;
 800b3e6:	e7db      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b3e8:	686b      	ldr	r3, [r5, #4]
 800b3ea:	682a      	ldr	r2, [r5, #0]
 800b3ec:	6929      	ldr	r1, [r5, #16]
 800b3ee:	9102      	str	r1, [sp, #8]
 800b3f0:	68e9      	ldr	r1, [r5, #12]
 800b3f2:	9101      	str	r1, [sp, #4]
 800b3f4:	68a9      	ldr	r1, [r5, #8]
 800b3f6:	9100      	str	r1, [sp, #0]
 800b3f8:	4651      	mov	r1, sl
 800b3fa:	4648      	mov	r0, r9
 800b3fc:	f7f7 ffd0 	bl	80033a0 <print_formatted>
		break;
 800b400:	e7ce      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b402:	686b      	ldr	r3, [r5, #4]
 800b404:	682a      	ldr	r2, [r5, #0]
 800b406:	6969      	ldr	r1, [r5, #20]
 800b408:	9103      	str	r1, [sp, #12]
 800b40a:	6929      	ldr	r1, [r5, #16]
 800b40c:	9102      	str	r1, [sp, #8]
 800b40e:	68e9      	ldr	r1, [r5, #12]
 800b410:	9101      	str	r1, [sp, #4]
 800b412:	68a9      	ldr	r1, [r5, #8]
 800b414:	9100      	str	r1, [sp, #0]
 800b416:	4651      	mov	r1, sl
 800b418:	4648      	mov	r0, r9
 800b41a:	f7f7 ffc1 	bl	80033a0 <print_formatted>
		break;
 800b41e:	e7bf      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b420:	686b      	ldr	r3, [r5, #4]
 800b422:	682a      	ldr	r2, [r5, #0]
 800b424:	69a9      	ldr	r1, [r5, #24]
 800b426:	9104      	str	r1, [sp, #16]
 800b428:	6969      	ldr	r1, [r5, #20]
 800b42a:	9103      	str	r1, [sp, #12]
 800b42c:	6929      	ldr	r1, [r5, #16]
 800b42e:	9102      	str	r1, [sp, #8]
 800b430:	68e9      	ldr	r1, [r5, #12]
 800b432:	9101      	str	r1, [sp, #4]
 800b434:	68a9      	ldr	r1, [r5, #8]
 800b436:	9100      	str	r1, [sp, #0]
 800b438:	4651      	mov	r1, sl
 800b43a:	4648      	mov	r0, r9
 800b43c:	f7f7 ffb0 	bl	80033a0 <print_formatted>
		break;
 800b440:	e7ae      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b442:	686b      	ldr	r3, [r5, #4]
 800b444:	682a      	ldr	r2, [r5, #0]
 800b446:	69e9      	ldr	r1, [r5, #28]
 800b448:	9105      	str	r1, [sp, #20]
 800b44a:	69a9      	ldr	r1, [r5, #24]
 800b44c:	9104      	str	r1, [sp, #16]
 800b44e:	6969      	ldr	r1, [r5, #20]
 800b450:	9103      	str	r1, [sp, #12]
 800b452:	6929      	ldr	r1, [r5, #16]
 800b454:	9102      	str	r1, [sp, #8]
 800b456:	68e9      	ldr	r1, [r5, #12]
 800b458:	9101      	str	r1, [sp, #4]
 800b45a:	68a9      	ldr	r1, [r5, #8]
 800b45c:	9100      	str	r1, [sp, #0]
 800b45e:	4651      	mov	r1, sl
 800b460:	4648      	mov	r0, r9
 800b462:	f7f7 ff9d 	bl	80033a0 <print_formatted>
		break;
 800b466:	e79b      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b468:	686b      	ldr	r3, [r5, #4]
 800b46a:	682a      	ldr	r2, [r5, #0]
 800b46c:	6a29      	ldr	r1, [r5, #32]
 800b46e:	9106      	str	r1, [sp, #24]
 800b470:	69e9      	ldr	r1, [r5, #28]
 800b472:	9105      	str	r1, [sp, #20]
 800b474:	69a9      	ldr	r1, [r5, #24]
 800b476:	9104      	str	r1, [sp, #16]
 800b478:	6969      	ldr	r1, [r5, #20]
 800b47a:	9103      	str	r1, [sp, #12]
 800b47c:	6929      	ldr	r1, [r5, #16]
 800b47e:	9102      	str	r1, [sp, #8]
 800b480:	68e9      	ldr	r1, [r5, #12]
 800b482:	9101      	str	r1, [sp, #4]
 800b484:	68a9      	ldr	r1, [r5, #8]
 800b486:	9100      	str	r1, [sp, #0]
 800b488:	4651      	mov	r1, sl
 800b48a:	4648      	mov	r0, r9
 800b48c:	f7f7 ff88 	bl	80033a0 <print_formatted>
		break;
 800b490:	e786      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b492:	686b      	ldr	r3, [r5, #4]
 800b494:	682a      	ldr	r2, [r5, #0]
 800b496:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b498:	9107      	str	r1, [sp, #28]
 800b49a:	6a29      	ldr	r1, [r5, #32]
 800b49c:	9106      	str	r1, [sp, #24]
 800b49e:	69e9      	ldr	r1, [r5, #28]
 800b4a0:	9105      	str	r1, [sp, #20]
 800b4a2:	69a9      	ldr	r1, [r5, #24]
 800b4a4:	9104      	str	r1, [sp, #16]
 800b4a6:	6969      	ldr	r1, [r5, #20]
 800b4a8:	9103      	str	r1, [sp, #12]
 800b4aa:	6929      	ldr	r1, [r5, #16]
 800b4ac:	9102      	str	r1, [sp, #8]
 800b4ae:	68e9      	ldr	r1, [r5, #12]
 800b4b0:	9101      	str	r1, [sp, #4]
 800b4b2:	68a9      	ldr	r1, [r5, #8]
 800b4b4:	9100      	str	r1, [sp, #0]
 800b4b6:	4651      	mov	r1, sl
 800b4b8:	4648      	mov	r0, r9
 800b4ba:	f7f7 ff71 	bl	80033a0 <print_formatted>
		break;
 800b4be:	e76f      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b4c0:	686b      	ldr	r3, [r5, #4]
 800b4c2:	682a      	ldr	r2, [r5, #0]
 800b4c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b4c6:	9108      	str	r1, [sp, #32]
 800b4c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b4ca:	9107      	str	r1, [sp, #28]
 800b4cc:	6a29      	ldr	r1, [r5, #32]
 800b4ce:	9106      	str	r1, [sp, #24]
 800b4d0:	69e9      	ldr	r1, [r5, #28]
 800b4d2:	9105      	str	r1, [sp, #20]
 800b4d4:	69a9      	ldr	r1, [r5, #24]
 800b4d6:	9104      	str	r1, [sp, #16]
 800b4d8:	6969      	ldr	r1, [r5, #20]
 800b4da:	9103      	str	r1, [sp, #12]
 800b4dc:	6929      	ldr	r1, [r5, #16]
 800b4de:	9102      	str	r1, [sp, #8]
 800b4e0:	68e9      	ldr	r1, [r5, #12]
 800b4e2:	9101      	str	r1, [sp, #4]
 800b4e4:	68a9      	ldr	r1, [r5, #8]
 800b4e6:	9100      	str	r1, [sp, #0]
 800b4e8:	4651      	mov	r1, sl
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	f7f7 ff58 	bl	80033a0 <print_formatted>
		break;
 800b4f0:	e756      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b4f2:	686b      	ldr	r3, [r5, #4]
 800b4f4:	682a      	ldr	r2, [r5, #0]
 800b4f6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b4f8:	9109      	str	r1, [sp, #36]	; 0x24
 800b4fa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b4fc:	9108      	str	r1, [sp, #32]
 800b4fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b500:	9107      	str	r1, [sp, #28]
 800b502:	6a29      	ldr	r1, [r5, #32]
 800b504:	9106      	str	r1, [sp, #24]
 800b506:	69e9      	ldr	r1, [r5, #28]
 800b508:	9105      	str	r1, [sp, #20]
 800b50a:	69a9      	ldr	r1, [r5, #24]
 800b50c:	9104      	str	r1, [sp, #16]
 800b50e:	6969      	ldr	r1, [r5, #20]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	6929      	ldr	r1, [r5, #16]
 800b514:	9102      	str	r1, [sp, #8]
 800b516:	68e9      	ldr	r1, [r5, #12]
 800b518:	9101      	str	r1, [sp, #4]
 800b51a:	68a9      	ldr	r1, [r5, #8]
 800b51c:	9100      	str	r1, [sp, #0]
 800b51e:	4651      	mov	r1, sl
 800b520:	4648      	mov	r0, r9
 800b522:	f7f7 ff3d 	bl	80033a0 <print_formatted>
		break;
 800b526:	e73b      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b528:	686b      	ldr	r3, [r5, #4]
 800b52a:	682a      	ldr	r2, [r5, #0]
 800b52c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b52e:	910a      	str	r1, [sp, #40]	; 0x28
 800b530:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b532:	9109      	str	r1, [sp, #36]	; 0x24
 800b534:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b536:	9108      	str	r1, [sp, #32]
 800b538:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b53a:	9107      	str	r1, [sp, #28]
 800b53c:	6a29      	ldr	r1, [r5, #32]
 800b53e:	9106      	str	r1, [sp, #24]
 800b540:	69e9      	ldr	r1, [r5, #28]
 800b542:	9105      	str	r1, [sp, #20]
 800b544:	69a9      	ldr	r1, [r5, #24]
 800b546:	9104      	str	r1, [sp, #16]
 800b548:	6969      	ldr	r1, [r5, #20]
 800b54a:	9103      	str	r1, [sp, #12]
 800b54c:	6929      	ldr	r1, [r5, #16]
 800b54e:	9102      	str	r1, [sp, #8]
 800b550:	68e9      	ldr	r1, [r5, #12]
 800b552:	9101      	str	r1, [sp, #4]
 800b554:	68a9      	ldr	r1, [r5, #8]
 800b556:	9100      	str	r1, [sp, #0]
 800b558:	4651      	mov	r1, sl
 800b55a:	4648      	mov	r0, r9
 800b55c:	f7f7 ff20 	bl	80033a0 <print_formatted>
		break;
 800b560:	e71e      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b562:	686b      	ldr	r3, [r5, #4]
 800b564:	682a      	ldr	r2, [r5, #0]
 800b566:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b568:	910b      	str	r1, [sp, #44]	; 0x2c
 800b56a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b56c:	910a      	str	r1, [sp, #40]	; 0x28
 800b56e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b570:	9109      	str	r1, [sp, #36]	; 0x24
 800b572:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b574:	9108      	str	r1, [sp, #32]
 800b576:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b578:	9107      	str	r1, [sp, #28]
 800b57a:	6a29      	ldr	r1, [r5, #32]
 800b57c:	9106      	str	r1, [sp, #24]
 800b57e:	69e9      	ldr	r1, [r5, #28]
 800b580:	9105      	str	r1, [sp, #20]
 800b582:	69a9      	ldr	r1, [r5, #24]
 800b584:	9104      	str	r1, [sp, #16]
 800b586:	6969      	ldr	r1, [r5, #20]
 800b588:	9103      	str	r1, [sp, #12]
 800b58a:	6929      	ldr	r1, [r5, #16]
 800b58c:	9102      	str	r1, [sp, #8]
 800b58e:	68e9      	ldr	r1, [r5, #12]
 800b590:	9101      	str	r1, [sp, #4]
 800b592:	68a9      	ldr	r1, [r5, #8]
 800b594:	9100      	str	r1, [sp, #0]
 800b596:	4651      	mov	r1, sl
 800b598:	4648      	mov	r0, r9
 800b59a:	f7f7 ff01 	bl	80033a0 <print_formatted>
		break;
 800b59e:	e6ff      	b.n	800b3a0 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800b5a0:	686b      	ldr	r3, [r5, #4]
 800b5a2:	682a      	ldr	r2, [r5, #0]
 800b5a4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800b5a6:	910c      	str	r1, [sp, #48]	; 0x30
 800b5a8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b5aa:	910b      	str	r1, [sp, #44]	; 0x2c
 800b5ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800b5ae:	910a      	str	r1, [sp, #40]	; 0x28
 800b5b0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800b5b2:	9109      	str	r1, [sp, #36]	; 0x24
 800b5b4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b5b6:	9108      	str	r1, [sp, #32]
 800b5b8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800b5ba:	9107      	str	r1, [sp, #28]
 800b5bc:	6a29      	ldr	r1, [r5, #32]
 800b5be:	9106      	str	r1, [sp, #24]
 800b5c0:	69e9      	ldr	r1, [r5, #28]
 800b5c2:	9105      	str	r1, [sp, #20]
 800b5c4:	69a9      	ldr	r1, [r5, #24]
 800b5c6:	9104      	str	r1, [sp, #16]
 800b5c8:	6969      	ldr	r1, [r5, #20]
 800b5ca:	9103      	str	r1, [sp, #12]
 800b5cc:	6929      	ldr	r1, [r5, #16]
 800b5ce:	9102      	str	r1, [sp, #8]
 800b5d0:	68e9      	ldr	r1, [r5, #12]
 800b5d2:	9101      	str	r1, [sp, #4]
 800b5d4:	68a9      	ldr	r1, [r5, #8]
 800b5d6:	9100      	str	r1, [sp, #0]
 800b5d8:	4651      	mov	r1, sl
 800b5da:	4648      	mov	r0, r9
 800b5dc:	f7f7 fee0 	bl	80033a0 <print_formatted>
}
 800b5e0:	e6de      	b.n	800b3a0 <std_print+0x74>

0800b5e2 <log_output_flush>:
{
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	4604      	mov	r4, r0
		     output->control_block->offset,
 800b5e6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800b5e8:	6853      	ldr	r3, [r2, #4]
 800b5ea:	6812      	ldr	r2, [r2, #0]
 800b5ec:	6881      	ldr	r1, [r0, #8]
 800b5ee:	6800      	ldr	r0, [r0, #0]
 800b5f0:	f7ff fe50 	bl	800b294 <buffer_write>
	output->control_block->offset = 0;
 800b5f4:	6863      	ldr	r3, [r4, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
}
 800b5fa:	bd10      	pop	{r4, pc}

0800b5fc <out_func>:
{
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4605      	mov	r5, r0
 800b600:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800b602:	684b      	ldr	r3, [r1, #4]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	68cb      	ldr	r3, [r1, #12]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d00f      	beq.n	800b62c <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800b60c:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b60e:	f3bf 8f5b 	dmb	ish
 800b612:	e853 2f00 	ldrex	r2, [r3]
 800b616:	1c51      	adds	r1, r2, #1
 800b618:	e843 1000 	strex	r0, r1, [r3]
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1f8      	bne.n	800b612 <out_func+0x16>
 800b620:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	549d      	strb	r5, [r3, r2]
}
 800b628:	2000      	movs	r0, #0
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800b62c:	4608      	mov	r0, r1
 800b62e:	f7ff ffd8 	bl	800b5e2 <log_output_flush>
 800b632:	e7eb      	b.n	800b60c <out_func+0x10>

0800b634 <log_output_msg_process>:
{
 800b634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b636:	b085      	sub	sp, #20
 800b638:	4606      	mov	r6, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	4617      	mov	r7, r2
 800b63e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b642:	f08c 0c01 	eor.w	ip, ip, #1
 800b646:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
 800b64a:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 800b64c:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
 800b650:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
 800b654:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
 800b656:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
 800b65a:	f01c 0507 	ands.w	r5, ip, #7
 800b65e:	d10f      	bne.n	800b680 <log_output_msg_process+0x4c>
 800b660:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800b662:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 800b664:	f013 0f01 	tst.w	r3, #1
 800b668:	d013      	beq.n	800b692 <log_output_msg_process+0x5e>
	} else if (raw_string) {
 800b66a:	b9bd      	cbnz	r5, 800b69c <log_output_msg_process+0x68>
		raw_string_print(msg, output);
 800b66c:	4631      	mov	r1, r6
 800b66e:	4620      	mov	r0, r4
 800b670:	f7f7 ffdc 	bl	800362c <raw_string_print>
	if (!raw_string) {
 800b674:	b9c5      	cbnz	r5, 800b6a8 <log_output_msg_process+0x74>
	log_output_flush(output);
 800b676:	4630      	mov	r0, r6
 800b678:	f7ff ffb3 	bl	800b5e2 <log_output_flush>
}
 800b67c:	b005      	add	sp, #20
 800b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
 800b680:	9102      	str	r1, [sp, #8]
 800b682:	9001      	str	r0, [sp, #4]
 800b684:	9500      	str	r5, [sp, #0]
 800b686:	4639      	mov	r1, r7
 800b688:	4630      	mov	r0, r6
 800b68a:	f7ff fe28 	bl	800b2de <prefix_print>
 800b68e:	4602      	mov	r2, r0
 800b690:	e7e7      	b.n	800b662 <log_output_msg_process+0x2e>
		std_print(msg, output);
 800b692:	4631      	mov	r1, r6
 800b694:	4620      	mov	r0, r4
 800b696:	f7ff fe49 	bl	800b32c <std_print>
 800b69a:	e7eb      	b.n	800b674 <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
 800b69c:	463b      	mov	r3, r7
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7f7 ff97 	bl	80035d4 <hexdump_print>
 800b6a6:	e7e5      	b.n	800b674 <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
 800b6a8:	462a      	mov	r2, r5
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff fe0a 	bl	800b2c6 <postfix_print>
 800b6b2:	e7e0      	b.n	800b676 <log_output_msg_process+0x42>

0800b6b4 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800b6b4:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800b6b6:	f7f8 f871 	bl	800379c <__do_global_ctors_aux>
	__do_init_array_aux();
 800b6ba:	f7f8 f861 	bl	8003780 <__do_init_array_aux>
}
 800b6be:	bd08      	pop	{r3, pc}

0800b6c0 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 800b6c2:	b329      	cbz	r1, 800b710 <stm32_dt_pinctrl_configure+0x50>
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 800b6c8:	2400      	movs	r4, #0
	uint32_t func = 0;
 800b6ca:	4625      	mov	r5, r4
 800b6cc:	e00f      	b.n	800b6ee <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800b6ce:	b2d3      	uxtb	r3, r2
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d019      	beq.n	800b708 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800b6d4:	0b13      	lsrs	r3, r2, #12
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4318      	orrs	r0, r3
 800b6e4:	f7f8 f86a 	bl	80037bc <stm32_pin_configure>
		if (ret != 0) {
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	b990      	cbnz	r0, 800b712 <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 800b6ec:	3401      	adds	r4, #1
 800b6ee:	42bc      	cmp	r4, r7
 800b6f0:	d20c      	bcs.n	800b70c <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 800b6f2:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800b6f6:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800b6fa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800b6fe:	d1e6      	bne.n	800b6ce <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800b700:	685d      	ldr	r5, [r3, #4]
 800b702:	f045 0520 	orr.w	r5, r5, #32
 800b706:	e7e5      	b.n	800b6d4 <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800b708:	2530      	movs	r5, #48	; 0x30
 800b70a:	e7e3      	b.n	800b6d4 <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	e000      	b.n	800b712 <stm32_dt_pinctrl_configure+0x52>
		return 0;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b716 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800b716:	b538      	push	{r3, r4, r5, lr}
 800b718:	4604      	mov	r4, r0

	if (esf != NULL) {
 800b71a:	460d      	mov	r5, r1
 800b71c:	b111      	cbz	r1, 800b724 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800b71e:	4608      	mov	r0, r1
 800b720:	f7f8 f886 	bl	8003830 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	f7fc f8f2 	bl	8007910 <z_fatal_error>
}
 800b72c:	bd38      	pop	{r3, r4, r5, pc}

0800b72e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800b72e:	b508      	push	{r3, lr}
 800b730:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800b732:	6800      	ldr	r0, [r0, #0]
 800b734:	f7ff ffef 	bl	800b716 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800b738:	bd08      	pop	{r3, pc}

0800b73a <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 800b73a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800b73c:	2100      	movs	r1, #0
 800b73e:	2001      	movs	r0, #1
 800b740:	f7ff ffe9 	bl	800b716 <z_arm_fatal_error>
}
 800b744:	bd08      	pop	{r3, pc}

0800b746 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800b746:	b508      	push	{r3, lr}
	handler();
 800b748:	f7f8 f8e4 	bl	8003914 <z_SysNmiOnReset>
	z_arm_int_exit();
 800b74c:	f7f8 f9c2 	bl	8003ad4 <z_arm_exc_exit>
}
 800b750:	bd08      	pop	{r3, pc}

0800b752 <memory_fault_recoverable>:
}
 800b752:	2000      	movs	r0, #0
 800b754:	4770      	bx	lr

0800b756 <fault_handle>:
{
 800b756:	b508      	push	{r3, lr}
	*recoverable = false;
 800b758:	2300      	movs	r3, #0
 800b75a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800b75c:	1ecb      	subs	r3, r1, #3
 800b75e:	2b09      	cmp	r3, #9
 800b760:	d81a      	bhi.n	800b798 <fault_handle+0x42>
 800b762:	e8df f003 	tbb	[pc, r3]
 800b766:	0905      	.short	0x0905
 800b768:	1919110d 	.word	0x1919110d
 800b76c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800b770:	4611      	mov	r1, r2
 800b772:	f7f8 fc11 	bl	8003f98 <hard_fault>
}
 800b776:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800b778:	2100      	movs	r1, #0
 800b77a:	f7f8 fb45 	bl	8003e08 <mem_manage_fault>
		break;
 800b77e:	e7fa      	b.n	800b776 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800b780:	2100      	movs	r1, #0
 800b782:	f7f8 fa81 	bl	8003c88 <bus_fault>
		break;
 800b786:	e7f6      	b.n	800b776 <fault_handle+0x20>
		reason = usage_fault(esf);
 800b788:	f7f8 f9b2 	bl	8003af0 <usage_fault>
		break;
 800b78c:	e7f3      	b.n	800b776 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800b78e:	4611      	mov	r1, r2
 800b790:	f7f8 fa60 	bl	8003c54 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b794:	2000      	movs	r0, #0
		break;
 800b796:	e7ee      	b.n	800b776 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800b798:	f7f8 fc9e 	bl	80040d8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800b79c:	2000      	movs	r0, #0
	return reason;
 800b79e:	e7ea      	b.n	800b776 <fault_handle+0x20>

0800b7a0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800b7a0:	6843      	ldr	r3, [r0, #4]
 800b7a2:	1e5a      	subs	r2, r3, #1
		&&
 800b7a4:	4213      	tst	r3, r2
 800b7a6:	d106      	bne.n	800b7b6 <mpu_partition_is_valid+0x16>
		&&
 800b7a8:	2b1f      	cmp	r3, #31
 800b7aa:	d906      	bls.n	800b7ba <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800b7ac:	6803      	ldr	r3, [r0, #0]
		&&
 800b7ae:	421a      	tst	r2, r3
 800b7b0:	d005      	beq.n	800b7be <mpu_partition_is_valid+0x1e>
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	4770      	bx	lr
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	4770      	bx	lr
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	4770      	bx	lr
 800b7be:	2001      	movs	r0, #1
}
 800b7c0:	4770      	bx	lr

0800b7c2 <mpu_configure_region>:
{
 800b7c2:	b500      	push	{lr}
 800b7c4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800b7c6:	680b      	ldr	r3, [r1, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800b7ca:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800b7cc:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d912      	bls.n	800b7f8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800b7d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d6:	d811      	bhi.n	800b7fc <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	fab3 f383 	clz	r3, r3
 800b7de:	f1c3 031f 	rsb	r3, r3, #31
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800b7ec:	a901      	add	r1, sp, #4
 800b7ee:	f7f8 fd8d 	bl	800430c <region_allocate_and_init>
}
 800b7f2:	b005      	add	sp, #20
 800b7f4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	e7f5      	b.n	800b7e8 <mpu_configure_region+0x26>
		return REGION_4G;
 800b7fc:	233e      	movs	r3, #62	; 0x3e
 800b7fe:	e7f3      	b.n	800b7e8 <mpu_configure_region+0x26>

0800b800 <arm_core_mpu_configure_static_mpu_regions>:
{
 800b800:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800b802:	f7f8 fde5 	bl	80043d0 <mpu_configure_static_mpu_regions>
}
 800b806:	bd08      	pop	{r3, pc}

0800b808 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800b808:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800b80a:	f7f8 fdeb 	bl	80043e4 <mpu_configure_dynamic_mpu_regions>
}
 800b80e:	bd08      	pop	{r3, pc}

0800b810 <malloc_prepare>:
}
 800b810:	2000      	movs	r0, #0
 800b812:	4770      	bx	lr

0800b814 <_stdout_hook_default>:
}
 800b814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b818:	4770      	bx	lr

0800b81a <_stdin_hook_default>:
}
 800b81a:	2000      	movs	r0, #0
 800b81c:	4770      	bx	lr

0800b81e <_read>:
{
 800b81e:	b508      	push	{r3, lr}
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800b824:	f7f8 fe36 	bl	8004494 <z_impl_zephyr_read_stdin>
}
 800b828:	bd08      	pop	{r3, pc}

0800b82a <_write>:
{
 800b82a:	b508      	push	{r3, lr}
 800b82c:	4608      	mov	r0, r1
 800b82e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800b830:	f7f8 fe46 	bl	80044c0 <z_impl_zephyr_write_stdout>
}
 800b834:	bd08      	pop	{r3, pc}

0800b836 <_close>:
}
 800b836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b83a:	4770      	bx	lr

0800b83c <_lseek>:
}
 800b83c:	2000      	movs	r0, #0
 800b83e:	4770      	bx	lr

0800b840 <_isatty>:
}
 800b840:	2802      	cmp	r0, #2
 800b842:	bfcc      	ite	gt
 800b844:	2000      	movgt	r0, #0
 800b846:	2001      	movle	r0, #1
 800b848:	4770      	bx	lr

0800b84a <_kill>:
}
 800b84a:	2000      	movs	r0, #0
 800b84c:	4770      	bx	lr

0800b84e <_getpid>:
}
 800b84e:	2000      	movs	r0, #0
 800b850:	4770      	bx	lr

0800b852 <_fstat>:
	st->st_mode = S_IFCHR;
 800b852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b856:	604b      	str	r3, [r1, #4]
}
 800b858:	2000      	movs	r0, #0
 800b85a:	4770      	bx	lr

0800b85c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800b85c:	b510      	push	{r4, lr}
 800b85e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800b860:	2014      	movs	r0, #20
 800b862:	f7fd feff 	bl	8009664 <malloc>
 800b866:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800b868:	f000 ffef 	bl	800c84a <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800b86c:	bd10      	pop	{r4, pc}

0800b86e <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800b86e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800b870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b878:	f7fc fb24 	bl	8007ec4 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800b87c:	bd08      	pop	{r3, pc}

0800b87e <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800b87e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800b880:	f7fc fbaa 	bl	8007fd8 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800b884:	bd08      	pop	{r3, pc}

0800b886 <__stm32_exti_isr_0>:
{
 800b886:	b508      	push	{r3, lr}
 800b888:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800b88a:	2101      	movs	r1, #1
 800b88c:	2000      	movs	r0, #0
 800b88e:	f7f8 fe51 	bl	8004534 <__stm32_exti_isr>
}
 800b892:	bd08      	pop	{r3, pc}

0800b894 <__stm32_exti_isr_1>:
{
 800b894:	b508      	push	{r3, lr}
 800b896:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800b898:	2102      	movs	r1, #2
 800b89a:	2001      	movs	r0, #1
 800b89c:	f7f8 fe4a 	bl	8004534 <__stm32_exti_isr>
}
 800b8a0:	bd08      	pop	{r3, pc}

0800b8a2 <__stm32_exti_isr_2>:
{
 800b8a2:	b508      	push	{r3, lr}
 800b8a4:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800b8a6:	2103      	movs	r1, #3
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f7f8 fe43 	bl	8004534 <__stm32_exti_isr>
}
 800b8ae:	bd08      	pop	{r3, pc}

0800b8b0 <__stm32_exti_isr_3>:
{
 800b8b0:	b508      	push	{r3, lr}
 800b8b2:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800b8b4:	2104      	movs	r1, #4
 800b8b6:	2003      	movs	r0, #3
 800b8b8:	f7f8 fe3c 	bl	8004534 <__stm32_exti_isr>
}
 800b8bc:	bd08      	pop	{r3, pc}

0800b8be <__stm32_exti_isr_4>:
{
 800b8be:	b508      	push	{r3, lr}
 800b8c0:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800b8c2:	2105      	movs	r1, #5
 800b8c4:	2004      	movs	r0, #4
 800b8c6:	f7f8 fe35 	bl	8004534 <__stm32_exti_isr>
}
 800b8ca:	bd08      	pop	{r3, pc}

0800b8cc <__stm32_exti_isr_9_5>:
{
 800b8cc:	b508      	push	{r3, lr}
 800b8ce:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800b8d0:	210a      	movs	r1, #10
 800b8d2:	2005      	movs	r0, #5
 800b8d4:	f7f8 fe2e 	bl	8004534 <__stm32_exti_isr>
}
 800b8d8:	bd08      	pop	{r3, pc}

0800b8da <__stm32_exti_isr_15_10>:
{
 800b8da:	b508      	push	{r3, lr}
 800b8dc:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800b8de:	2110      	movs	r1, #16
 800b8e0:	200a      	movs	r0, #10
 800b8e2:	f7f8 fe27 	bl	8004534 <__stm32_exti_isr>
}
 800b8e6:	bd08      	pop	{r3, pc}

0800b8e8 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800b8e8:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	2006      	movs	r0, #6
 800b8f0:	f7f7 fffa 	bl	80038e8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	2007      	movs	r0, #7
 800b8fa:	f7f7 fff5 	bl	80038e8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800b8fe:	2200      	movs	r2, #0
 800b900:	4611      	mov	r1, r2
 800b902:	2008      	movs	r0, #8
 800b904:	f7f7 fff0 	bl	80038e8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800b908:	2200      	movs	r2, #0
 800b90a:	4611      	mov	r1, r2
 800b90c:	2009      	movs	r0, #9
 800b90e:	f7f7 ffeb 	bl	80038e8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800b912:	2200      	movs	r2, #0
 800b914:	4611      	mov	r1, r2
 800b916:	200a      	movs	r0, #10
 800b918:	f7f7 ffe6 	bl	80038e8 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800b91c:	2200      	movs	r2, #0
 800b91e:	4611      	mov	r1, r2
 800b920:	2017      	movs	r0, #23
 800b922:	f7f7 ffe1 	bl	80038e8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800b926:	2200      	movs	r2, #0
 800b928:	4611      	mov	r1, r2
 800b92a:	2028      	movs	r0, #40	; 0x28
 800b92c:	f7f7 ffdc 	bl	80038e8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800b930:	bd08      	pop	{r3, pc}

0800b932 <stm32_exti_init>:
{
 800b932:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800b934:	f7ff ffd8 	bl	800b8e8 <__stm32_exti_connect_irqs>
}
 800b938:	2000      	movs	r0, #0
 800b93a:	bd08      	pop	{r3, pc}

0800b93c <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800b93c:	2300      	movs	r3, #0
 800b93e:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800b940:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800b942:	6083      	str	r3, [r0, #8]
}
 800b944:	4770      	bx	lr

0800b946 <get_bus_clock>:
}
 800b946:	fbb0 f0f1 	udiv	r0, r0, r1
 800b94a:	4770      	bx	lr

0800b94c <config_pll_init>:
	pllinit->PLLMul = pll_mul(STM32_PLL_MULTIPLIER);
 800b94c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b950:	6003      	str	r3, [r0, #0]
	pllinit->PLLDiv = pll_div(STM32_PLL_DIVISOR);
 800b952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b956:	6043      	str	r3, [r0, #4]
}
 800b958:	4770      	bx	lr

0800b95a <gpio_stm32_isr>:
{
 800b95a:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800b95c:	684e      	ldr	r6, [r1, #4]
 800b95e:	2501      	movs	r5, #1
 800b960:	4085      	lsls	r5, r0
	return list->head;
 800b962:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800b964:	b119      	cbz	r1, 800b96e <gpio_stm32_isr+0x14>
 800b966:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b968:	b149      	cbz	r1, 800b97e <gpio_stm32_isr+0x24>
	return node->next;
 800b96a:	680c      	ldr	r4, [r1, #0]
 800b96c:	e007      	b.n	800b97e <gpio_stm32_isr+0x24>
 800b96e:	460c      	mov	r4, r1
 800b970:	e005      	b.n	800b97e <gpio_stm32_isr+0x24>
 800b972:	b164      	cbz	r4, 800b98e <gpio_stm32_isr+0x34>
 800b974:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b976:	b104      	cbz	r4, 800b97a <gpio_stm32_isr+0x20>
	return node->next;
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	4621      	mov	r1, r4
 800b97c:	461c      	mov	r4, r3
 800b97e:	b141      	cbz	r1, 800b992 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800b980:	688a      	ldr	r2, [r1, #8]
 800b982:	402a      	ands	r2, r5
 800b984:	d0f5      	beq.n	800b972 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800b986:	684b      	ldr	r3, [r1, #4]
 800b988:	4630      	mov	r0, r6
 800b98a:	4798      	blx	r3
 800b98c:	e7f1      	b.n	800b972 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800b98e:	4623      	mov	r3, r4
 800b990:	e7f3      	b.n	800b97a <gpio_stm32_isr+0x20>
}
 800b992:	bd70      	pop	{r4, r5, r6, pc}

0800b994 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800b994:	f410 7f00 	tst.w	r0, #512	; 0x200
 800b998:	d01b      	beq.n	800b9d2 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800b99a:	2310      	movs	r3, #16
 800b99c:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800b99e:	f010 0f02 	tst.w	r0, #2
 800b9a2:	d004      	beq.n	800b9ae <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800b9a4:	f010 0f04 	tst.w	r0, #4
 800b9a8:	d02c      	beq.n	800ba04 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800b9aa:	2350      	movs	r3, #80	; 0x50
 800b9ac:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800b9ae:	f010 0310 	ands.w	r3, r0, #16
 800b9b2:	d005      	beq.n	800b9c0 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800b9b4:	680b      	ldr	r3, [r1, #0]
 800b9b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9ba:	600b      	str	r3, [r1, #0]
	return 0;
 800b9bc:	2000      	movs	r0, #0
 800b9be:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800b9c0:	f010 0020 	ands.w	r0, r0, #32
 800b9c4:	d020      	beq.n	800ba08 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800b9c6:	680a      	ldr	r2, [r1, #0]
 800b9c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9cc:	600a      	str	r2, [r1, #0]
	return 0;
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800b9d2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b9d6:	d011      	beq.n	800b9fc <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800b9dc:	f010 0310 	ands.w	r3, r0, #16
 800b9e0:	d004      	beq.n	800b9ec <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800b9e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9e6:	600b      	str	r3, [r1, #0]
	return 0;
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800b9ec:	f010 0020 	ands.w	r0, r0, #32
 800b9f0:	d00a      	beq.n	800ba08 <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800b9f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b9f6:	600a      	str	r2, [r1, #0]
	return 0;
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800b9fc:	2330      	movs	r3, #48	; 0x30
 800b9fe:	600b      	str	r3, [r1, #0]
	return 0;
 800ba00:	2000      	movs	r0, #0
 800ba02:	4770      	bx	lr
				return -ENOTSUP;
 800ba04:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800ba08:	4770      	bx	lr

0800ba0a <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ba0a:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba0c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800ba0e:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800ba10:	600b      	str	r3, [r1, #0]
}
 800ba12:	2000      	movs	r0, #0
 800ba14:	4770      	bx	lr

0800ba16 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ba16:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba18:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800ba1a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800ba1c:	4042      	eors	r2, r0
 800ba1e:	400a      	ands	r2, r1
 800ba20:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800ba22:	615a      	str	r2, [r3, #20]
}
 800ba24:	2000      	movs	r0, #0
 800ba26:	4770      	bx	lr

0800ba28 <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ba28:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba2a:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800ba2c:	6199      	str	r1, [r3, #24]
}
 800ba2e:	2000      	movs	r0, #0
 800ba30:	4770      	bx	lr

0800ba32 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ba32:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba34:	685b      	ldr	r3, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 800ba36:	6299      	str	r1, [r3, #40]	; 0x28
}
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4770      	bx	lr

0800ba3c <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800ba3c:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800ba3e:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800ba40:	6953      	ldr	r3, [r2, #20]
 800ba42:	404b      	eors	r3, r1
 800ba44:	6153      	str	r3, [r2, #20]
}
 800ba46:	2000      	movs	r0, #0
 800ba48:	4770      	bx	lr

0800ba4a <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800ba4a:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800ba4c:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800ba4e:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800ba52:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800ba54:	b1fb      	cbz	r3, 800ba96 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ba56:	2000      	movs	r0, #0
 800ba58:	e00d      	b.n	800ba76 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800ba5a:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800ba5c:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800ba5e:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800ba62:	4281      	cmp	r1, r0
 800ba64:	d112      	bne.n	800ba8c <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800ba66:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800ba6a:	e00f      	b.n	800ba8c <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800ba6c:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800ba70:	e00c      	b.n	800ba8c <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ba72:	4618      	mov	r0, r3
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	b163      	cbz	r3, 800ba92 <gpio_stm32_manage_callback+0x48>
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	d1fa      	bne.n	800ba72 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0ec      	beq.n	800ba5a <gpio_stm32_manage_callback+0x10>
	return node->next;
 800ba80:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800ba82:	6003      	str	r3, [r0, #0]
	return list->tail;
 800ba84:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800ba88:	4299      	cmp	r1, r3
 800ba8a:	d0ef      	beq.n	800ba6c <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ba90:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800ba92:	b903      	cbnz	r3, 800ba96 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800ba94:	b162      	cbz	r2, 800bab0 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800ba96:	b172      	cbz	r2, 800bab6 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800ba98:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800ba9a:	600b      	str	r3, [r1, #0]
	list->head = node;
 800ba9c:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800ba9e:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800baa2:	b10b      	cbz	r3, 800baa8 <gpio_stm32_manage_callback+0x5e>
	return 0;
 800baa4:	2000      	movs	r0, #0
 800baa6:	e007      	b.n	800bab8 <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800baa8:	f8cc 1004 	str.w	r1, [ip, #4]
 800baac:	2000      	movs	r0, #0
}
 800baae:	e003      	b.n	800bab8 <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800bab0:	f06f 0015 	mvn.w	r0, #21
 800bab4:	e000      	b.n	800bab8 <gpio_stm32_manage_callback+0x6e>
	return 0;
 800bab6:	2000      	movs	r0, #0
}
 800bab8:	bc10      	pop	{r4}
 800baba:	4770      	bx	lr

0800babc <gpio_stm32_configure>:
{
 800babc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800babe:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800bac0:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800bac2:	2001      	movs	r0, #1
 800bac4:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800bac6:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800baca:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bace:	6865      	ldr	r5, [r4, #4]
 800bad0:	ea25 0500 	bic.w	r5, r5, r0
 800bad4:	408e      	lsls	r6, r1
 800bad6:	4335      	orrs	r5, r6
 800bad8:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800bada:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800bade:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bae0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bae4:	2d00      	cmp	r5, #0
 800bae6:	d04a      	beq.n	800bb7e <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 800bae8:	fab5 f585 	clz	r5, r5
 800baec:	006d      	lsls	r5, r5, #1
 800baee:	2703      	movs	r7, #3
 800baf0:	fa07 f505 	lsl.w	r5, r7, r5
 800baf4:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baf8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	d040      	beq.n	800bb82 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 800bb00:	fab5 f585 	clz	r5, r5
 800bb04:	006d      	lsls	r5, r5, #1
 800bb06:	fa0e f505 	lsl.w	r5, lr, r5
 800bb0a:	4335      	orrs	r5, r6
 800bb0c:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800bb0e:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800bb12:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb14:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bb18:	b3ad      	cbz	r5, 800bb86 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 800bb1a:	fab5 f585 	clz	r5, r5
 800bb1e:	006d      	lsls	r5, r5, #1
 800bb20:	f04f 0e03 	mov.w	lr, #3
 800bb24:	fa0e f505 	lsl.w	r5, lr, r5
 800bb28:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb2c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800bb30:	b35d      	cbz	r5, 800bb8a <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 800bb32:	fab5 f585 	clz	r5, r5
 800bb36:	006d      	lsls	r5, r5, #1
 800bb38:	fa02 f505 	lsl.w	r5, r2, r5
 800bb3c:	ea4e 0505 	orr.w	r5, lr, r5
 800bb40:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800bb42:	f1bc 0f20 	cmp.w	ip, #32
 800bb46:	d022      	beq.n	800bb8e <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800bb48:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bb4c:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb4e:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d052      	beq.n	800bbfc <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 800bb56:	fab3 f383 	clz	r3, r3
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	2103      	movs	r1, #3
 800bb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb62:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb66:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d048      	beq.n	800bc00 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 800bb6e:	fab0 f080 	clz	r0, r0
 800bb72:	0040      	lsls	r0, r0, #1
 800bb74:	fa0c f000 	lsl.w	r0, ip, r0
 800bb78:	4318      	orrs	r0, r3
 800bb7a:	6020      	str	r0, [r4, #0]
}
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800bb7e:	2520      	movs	r5, #32
 800bb80:	e7b4      	b.n	800baec <gpio_stm32_configure+0x30>
 800bb82:	2520      	movs	r5, #32
 800bb84:	e7be      	b.n	800bb04 <gpio_stm32_configure+0x48>
 800bb86:	2520      	movs	r5, #32
 800bb88:	e7c9      	b.n	800bb1e <gpio_stm32_configure+0x62>
 800bb8a:	2520      	movs	r5, #32
 800bb8c:	e7d3      	b.n	800bb36 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 800bb8e:	2907      	cmp	r1, #7
 800bb90:	dc19      	bgt.n	800bbc6 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800bb92:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb94:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800bb98:	b18a      	cbz	r2, 800bbbe <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 800bb9a:	fab2 f282 	clz	r2, r2
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	250f      	movs	r5, #15
 800bba2:	fa05 f202 	lsl.w	r2, r5, r2
 800bba6:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbaa:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800bbae:	b142      	cbz	r2, 800bbc2 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 800bbb0:	fab2 f282 	clz	r2, r2
 800bbb4:	0092      	lsls	r2, r2, #2
 800bbb6:	4093      	lsls	r3, r2
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6223      	str	r3, [r4, #32]
}
 800bbbc:	e7c4      	b.n	800bb48 <gpio_stm32_configure+0x8c>
    return 32U;
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	e7ed      	b.n	800bb9e <gpio_stm32_configure+0xe2>
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	e7f6      	b.n	800bbb4 <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800bbc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bbc8:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbca:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800bbce:	b189      	cbz	r1, 800bbf4 <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 800bbd0:	fab1 f181 	clz	r1, r1
 800bbd4:	0089      	lsls	r1, r1, #2
 800bbd6:	260f      	movs	r6, #15
 800bbd8:	fa06 f101 	lsl.w	r1, r6, r1
 800bbdc:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbe0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800bbe4:	b142      	cbz	r2, 800bbf8 <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 800bbe6:	fab2 f282 	clz	r2, r2
 800bbea:	0092      	lsls	r2, r2, #2
 800bbec:	4093      	lsls	r3, r2
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	6263      	str	r3, [r4, #36]	; 0x24
}
 800bbf2:	e7a9      	b.n	800bb48 <gpio_stm32_configure+0x8c>
    return 32U;
 800bbf4:	2120      	movs	r1, #32
 800bbf6:	e7ed      	b.n	800bbd4 <gpio_stm32_configure+0x118>
 800bbf8:	2220      	movs	r2, #32
 800bbfa:	e7f6      	b.n	800bbea <gpio_stm32_configure+0x12e>
 800bbfc:	2320      	movs	r3, #32
 800bbfe:	e7ac      	b.n	800bb5a <gpio_stm32_configure+0x9e>
 800bc00:	2020      	movs	r0, #32
 800bc02:	e7b6      	b.n	800bb72 <gpio_stm32_configure+0xb6>

0800bc04 <gpio_stm32_config>:
{
 800bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc06:	b083      	sub	sp, #12
 800bc08:	4607      	mov	r7, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800bc0e:	a901      	add	r1, sp, #4
 800bc10:	4610      	mov	r0, r2
 800bc12:	f7ff febf 	bl	800b994 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800bc16:	4606      	mov	r6, r0
 800bc18:	b970      	cbnz	r0, 800bc38 <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800bc1a:	f414 7f00 	tst.w	r4, #512	; 0x200
 800bc1e:	d005      	beq.n	800bc2c <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800bc20:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800bc24:	d10b      	bne.n	800bc3e <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800bc26:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800bc2a:	d10e      	bne.n	800bc4a <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	9a01      	ldr	r2, [sp, #4]
 800bc30:	4629      	mov	r1, r5
 800bc32:	4638      	mov	r0, r7
 800bc34:	f7ff ff42 	bl	800babc <gpio_stm32_configure>
}
 800bc38:	4630      	mov	r0, r6
 800bc3a:	b003      	add	sp, #12
 800bc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800bc3e:	2101      	movs	r1, #1
 800bc40:	40a9      	lsls	r1, r5
 800bc42:	4638      	mov	r0, r7
 800bc44:	f7ff fef0 	bl	800ba28 <gpio_stm32_port_set_bits_raw>
 800bc48:	e7f0      	b.n	800bc2c <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	40a9      	lsls	r1, r5
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7ff feef 	bl	800ba32 <gpio_stm32_port_clear_bits_raw>
 800bc54:	e7ea      	b.n	800bc2c <gpio_stm32_config+0x28>

0800bc56 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800bc56:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800bc58:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 800bc5a:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	f7f8 febf 	bl	80049e0 <gpio_stm32_clock_request>
#endif
}
 800bc62:	bd08      	pop	{r3, pc}

0800bc64 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800bc64:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800bc66:	b91b      	cbnz	r3, 800bc70 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800bc68:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800bc6a:	b91b      	cbnz	r3, 800bc74 <spi_stm32_transfer_ongoing+0x10>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4770      	bx	lr
 800bc70:	2001      	movs	r0, #1
 800bc72:	4770      	bx	lr
 800bc74:	2001      	movs	r0, #1
}
 800bc76:	4770      	bx	lr

0800bc78 <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800bc78:	6883      	ldr	r3, [r0, #8]
 800bc7a:	f013 0f02 	tst.w	r3, #2
 800bc7e:	d0fb      	beq.n	800bc78 <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bc80:	680b      	ldr	r3, [r1, #0]
 800bc82:	889b      	ldrh	r3, [r3, #4]
 800bc84:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800bc88:	2b08      	cmp	r3, #8
 800bc8a:	d01f      	beq.n	800bccc <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 800bc8c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d044      	beq.n	800bd1c <spi_stm32_shift_m+0xa4>
 800bc92:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d143      	bne.n	800bd20 <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	d043      	beq.n	800bd24 <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800bc9c:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800bc9e:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800bca0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d047      	beq.n	800bd36 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800bca6:	3b01      	subs	r3, #1
 800bca8:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d13f      	bne.n	800bd2e <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 800bcae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d037      	beq.n	800bd28 <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 800bcb8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800bcba:	f103 0208 	add.w	r2, r3, #8
 800bcbe:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800bcc0:	689a      	ldr	r2, [r3, #8]
 800bcc2:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	650b      	str	r3, [r1, #80]	; 0x50
 800bcca:	e034      	b.n	800bd36 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800bccc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800bcce:	b1bb      	cbz	r3, 800bd00 <spi_stm32_shift_m+0x88>
 800bcd0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800bcd2:	b9ba      	cbnz	r2, 800bd04 <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800bcd4:	b1c2      	cbz	r2, 800bd08 <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800bcd6:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800bcd8:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 800bcda:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800bcdc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800bcde:	b353      	cbz	r3, 800bd36 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800bce0:	3b01      	subs	r3, #1
 800bce2:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800bce4:	b9ab      	cbnz	r3, 800bd12 <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 800bce6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bce8:	3b01      	subs	r3, #1
 800bcea:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800bcec:	b173      	cbz	r3, 800bd0c <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 800bcee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800bcf0:	f103 0208 	add.w	r2, r3, #8
 800bcf4:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800bcf6:	689a      	ldr	r2, [r3, #8]
 800bcf8:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	650b      	str	r3, [r1, #80]	; 0x50
 800bcfe:	e01a      	b.n	800bd36 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800bd00:	2200      	movs	r2, #0
 800bd02:	e7e7      	b.n	800bcd4 <spi_stm32_shift_m+0x5c>
 800bd04:	2201      	movs	r2, #1
 800bd06:	e7e5      	b.n	800bcd4 <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e7e5      	b.n	800bcd8 <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd10:	e011      	b.n	800bd36 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800bd12:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800bd14:	b17b      	cbz	r3, 800bd36 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800bd16:	3301      	adds	r3, #1
 800bd18:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd1a:	e00c      	b.n	800bd36 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	e7bb      	b.n	800bc98 <spi_stm32_shift_m+0x20>
 800bd20:	2201      	movs	r2, #1
 800bd22:	e7b9      	b.n	800bc98 <spi_stm32_shift_m+0x20>
 800bd24:	2300      	movs	r3, #0
 800bd26:	e7ba      	b.n	800bc9e <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bd2c:	e003      	b.n	800bd36 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800bd2e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800bd30:	b10b      	cbz	r3, 800bd36 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800bd32:	3302      	adds	r3, #2
 800bd34:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800bd36:	6883      	ldr	r3, [r0, #8]
 800bd38:	f013 0f01 	tst.w	r3, #1
 800bd3c:	d0fb      	beq.n	800bd36 <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bd3e:	680b      	ldr	r3, [r1, #0]
 800bd40:	889b      	ldrh	r3, [r3, #4]
 800bd42:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800bd46:	2b08      	cmp	r3, #8
 800bd48:	d01f      	beq.n	800bd8a <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 800bd4a:	68c3      	ldr	r3, [r0, #12]
 800bd4c:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800bd4e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800bd50:	2a00      	cmp	r2, #0
 800bd52:	d040      	beq.n	800bdd6 <spi_stm32_shift_m+0x15e>
 800bd54:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d13f      	bne.n	800bdda <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800bd5a:	b100      	cbz	r0, 800bd5e <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800bd5c:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800bd5e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d043      	beq.n	800bdec <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800bd64:	3b01      	subs	r3, #1
 800bd66:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d13b      	bne.n	800bde4 <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 800bd6c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d033      	beq.n	800bdde <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 800bd76:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800bd78:	f103 0208 	add.w	r2, r3, #8
 800bd7c:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	658b      	str	r3, [r1, #88]	; 0x58
 800bd88:	4770      	bx	lr
  return (*((__IO uint8_t *)&SPIx->DR));
 800bd8a:	7b03      	ldrb	r3, [r0, #12]
 800bd8c:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800bd8e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800bd90:	b1aa      	cbz	r2, 800bdbe <spi_stm32_shift_m+0x146>
 800bd92:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800bd94:	b9a8      	cbnz	r0, 800bdc2 <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800bd96:	b100      	cbz	r0, 800bd9a <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800bd98:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800bd9a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800bd9c:	b333      	cbz	r3, 800bdec <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800bda2:	b99b      	cbnz	r3, 800bdcc <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 800bda4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800bda6:	3b01      	subs	r3, #1
 800bda8:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800bdaa:	b163      	cbz	r3, 800bdc6 <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 800bdac:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800bdae:	f103 0208 	add.w	r2, r3, #8
 800bdb2:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	658b      	str	r3, [r1, #88]	; 0x58
 800bdbc:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	e7e9      	b.n	800bd96 <spi_stm32_shift_m+0x11e>
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	e7e7      	b.n	800bd96 <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	654b      	str	r3, [r1, #84]	; 0x54
 800bdca:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800bdcc:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bdce:	b16b      	cbz	r3, 800bdec <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	654b      	str	r3, [r1, #84]	; 0x54
 800bdd4:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e7bf      	b.n	800bd5a <spi_stm32_shift_m+0xe2>
 800bdda:	2001      	movs	r0, #1
 800bddc:	e7bd      	b.n	800bd5a <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	654b      	str	r3, [r1, #84]	; 0x54
 800bde2:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800bde4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bde6:	b10b      	cbz	r3, 800bdec <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800bde8:	3302      	adds	r3, #2
 800bdea:	654b      	str	r3, [r1, #84]	; 0x54
}
 800bdec:	4770      	bx	lr

0800bdee <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800bdee:	6883      	ldr	r3, [r0, #8]
 800bdf0:	f013 0f02 	tst.w	r3, #2
 800bdf4:	d045      	beq.n	800be82 <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 800bdf6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d042      	beq.n	800be82 <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800bdfc:	680b      	ldr	r3, [r1, #0]
 800bdfe:	889b      	ldrh	r3, [r3, #4]
 800be00:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800be04:	2b08      	cmp	r3, #8
 800be06:	d017      	beq.n	800be38 <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800be08:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800be0a:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800be0c:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800be0e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800be10:	2b00      	cmp	r3, #0
 800be12:	d03a      	beq.n	800be8a <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800be14:	3b01      	subs	r3, #1
 800be16:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d12d      	bne.n	800be78 <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 800be1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be1e:	3b01      	subs	r3, #1
 800be20:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800be22:	b333      	cbz	r3, 800be72 <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 800be24:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800be26:	f103 0208 	add.w	r2, r3, #8
 800be2a:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800be2c:	689a      	ldr	r2, [r3, #8]
 800be2e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	650b      	str	r3, [r1, #80]	; 0x50
 800be36:	e028      	b.n	800be8a <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800be38:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800be3a:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800be3c:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800be3e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800be40:	b31b      	cbz	r3, 800be8a <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800be42:	3b01      	subs	r3, #1
 800be44:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800be46:	b97b      	cbnz	r3, 800be68 <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 800be48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be4a:	3b01      	subs	r3, #1
 800be4c:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800be4e:	b143      	cbz	r3, 800be62 <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 800be50:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800be52:	f103 0208 	add.w	r2, r3, #8
 800be56:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800be58:	689a      	ldr	r2, [r3, #8]
 800be5a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	650b      	str	r3, [r1, #80]	; 0x50
 800be60:	e013      	b.n	800be8a <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be66:	e010      	b.n	800be8a <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800be68:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800be6a:	b173      	cbz	r3, 800be8a <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800be6c:	3301      	adds	r3, #1
 800be6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be70:	e00b      	b.n	800be8a <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be76:	e008      	b.n	800be8a <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800be78:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800be7a:	b133      	cbz	r3, 800be8a <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800be7c:	3302      	adds	r3, #2
 800be7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be80:	e003      	b.n	800be8a <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800be82:	6843      	ldr	r3, [r0, #4]
 800be84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be88:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800be8a:	6883      	ldr	r3, [r0, #8]
 800be8c:	f013 0f01 	tst.w	r3, #1
 800be90:	d04a      	beq.n	800bf28 <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800be92:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800be94:	b30b      	cbz	r3, 800beda <spi_stm32_shift_s+0xec>
 800be96:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800be98:	bb0a      	cbnz	r2, 800bede <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	d044      	beq.n	800bf28 <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800be9e:	680a      	ldr	r2, [r1, #0]
 800bea0:	8892      	ldrh	r2, [r2, #4]
 800bea2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800bea6:	2a08      	cmp	r2, #8
 800bea8:	d01b      	beq.n	800bee2 <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 800beaa:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800beac:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800beae:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d039      	beq.n	800bf28 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800beb4:	3b01      	subs	r3, #1
 800beb6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d131      	bne.n	800bf20 <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 800bebc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800bebe:	3b01      	subs	r3, #1
 800bec0:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d029      	beq.n	800bf1a <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 800bec6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800bec8:	f103 0208 	add.w	r2, r3, #8
 800becc:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	085b      	lsrs	r3, r3, #1
 800bed6:	658b      	str	r3, [r1, #88]	; 0x58
 800bed8:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800beda:	2200      	movs	r2, #0
 800bedc:	e7dd      	b.n	800be9a <spi_stm32_shift_s+0xac>
 800bede:	2201      	movs	r2, #1
 800bee0:	e7db      	b.n	800be9a <spi_stm32_shift_s+0xac>
  return (*((__IO uint8_t *)&SPIx->DR));
 800bee2:	7b02      	ldrb	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800bee4:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800bee6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800bee8:	b1f3      	cbz	r3, 800bf28 <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800beea:	3b01      	subs	r3, #1
 800beec:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800beee:	b97b      	cbnz	r3, 800bf10 <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 800bef0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800bef2:	3b01      	subs	r3, #1
 800bef4:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800bef6:	b143      	cbz	r3, 800bf0a <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 800bef8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800befa:	f103 0208 	add.w	r2, r3, #8
 800befe:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800bf00:	689a      	ldr	r2, [r3, #8]
 800bf02:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	658b      	str	r3, [r1, #88]	; 0x58
 800bf08:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	654b      	str	r3, [r1, #84]	; 0x54
 800bf0e:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800bf10:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bf12:	b14b      	cbz	r3, 800bf28 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800bf14:	3301      	adds	r3, #1
 800bf16:	654b      	str	r3, [r1, #84]	; 0x54
 800bf18:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	654b      	str	r3, [r1, #84]	; 0x54
 800bf1e:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800bf20:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bf22:	b10b      	cbz	r3, 800bf28 <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800bf24:	3302      	adds	r3, #2
 800bf26:	654b      	str	r3, [r1, #84]	; 0x54
}
 800bf28:	4770      	bx	lr

0800bf2a <spi_stm32_shift_frames>:
{
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800bf2e:	680b      	ldr	r3, [r1, #0]
 800bf30:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800bf32:	f013 0f01 	tst.w	r3, #1
 800bf36:	d105      	bne.n	800bf44 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800bf38:	f7ff fe9e 	bl	800bc78 <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f7f8 fead 	bl	8004c9c <spi_stm32_get_err>
}
 800bf42:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800bf44:	f7ff ff53 	bl	800bdee <spi_stm32_shift_s>
 800bf48:	e7f8      	b.n	800bf3c <spi_stm32_shift_frames+0x12>

0800bf4a <spi_stm32_cs_control>:
{
 800bf4a:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800bf4c:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d034      	beq.n	800bfbe <spi_stm32_cs_control+0x74>
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d031      	beq.n	800bfbe <spi_stm32_cs_control+0x74>
 800bf5a:	6810      	ldr	r0, [r2, #0]
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d02e      	beq.n	800bfbe <spi_stm32_cs_control+0x74>
		if (on) {
 800bf60:	b9c9      	cbnz	r1, 800bf96 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800bf62:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800bf64:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800bf68:	d129      	bne.n	800bfbe <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800bf6a:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800bf6c:	f7fc ffb2 	bl	8008ed4 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800bf78:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	408b      	lsls	r3, r1
 800bf80:	421a      	tst	r2, r3
 800bf82:	d126      	bne.n	800bfd2 <spi_stm32_cs_control+0x88>
 800bf84:	2300      	movs	r3, #0
	if (value != 0)	{
 800bf86:	b333      	cbz	r3, 800bfd6 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800bf88:	2301      	movs	r3, #1
 800bf8a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800bf8e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	4798      	blx	r3
 800bf94:	e013      	b.n	800bfbe <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800bf96:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 800bf98:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	408b      	lsls	r3, r1
 800bfa0:	421a      	tst	r2, r3
 800bfa2:	d10d      	bne.n	800bfc0 <spi_stm32_cs_control+0x76>
 800bfa4:	2301      	movs	r3, #1
	if (value != 0)	{
 800bfa6:	b16b      	cbz	r3, 800bfc4 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800bfae:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	6858      	ldr	r0, [r3, #4]
 800bfba:	f7fc ff8b 	bl	8008ed4 <z_impl_k_busy_wait>
}
 800bfbe:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e7f0      	b.n	800bfa6 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800bfca:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	4798      	blx	r3
 800bfd0:	e7f0      	b.n	800bfb4 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e7d7      	b.n	800bf86 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800bfdc:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	4798      	blx	r3
 800bfe2:	e7ec      	b.n	800bfbe <spi_stm32_cs_control+0x74>

0800bfe4 <spi_stm32_complete>:
{
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	b082      	sub	sp, #8
	const struct spi_stm32_config *cfg = dev->config;
 800bfe8:	6843      	ldr	r3, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800bfea:	689c      	ldr	r4, [r3, #8]
	spi_stm32_cs_control(dev, false);
 800bfec:	2100      	movs	r1, #0
 800bfee:	f7ff ffac 	bl	800bf4a <spi_stm32_cs_control>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800bff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bffc:	d010      	beq.n	800c020 <spi_stm32_complete+0x3c>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	f013 0f20 	tst.w	r3, #32
 800c004:	d006      	beq.n	800c014 <spi_stm32_complete+0x30>
  tmpreg_sr = SPIx->SR;
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800c00a:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c012:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c01a:	6023      	str	r3, [r4, #0]
}
 800c01c:	b002      	add	sp, #8
 800c01e:	bd10      	pop	{r4, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c026:	d1fb      	bne.n	800c020 <spi_stm32_complete+0x3c>
 800c028:	e7e9      	b.n	800bffe <spi_stm32_complete+0x1a>

0800c02a <transceive>:
{
 800c02a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02e:	4605      	mov	r5, r0
 800c030:	460e      	mov	r6, r1
 800c032:	4698      	mov	r8, r3
 800c034:	f89d 1020 	ldrb.w	r1, [sp, #32]
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 800c038:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 800c03a:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800c03c:	689f      	ldr	r7, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 800c03e:	4691      	mov	r9, r2
 800c040:	b30a      	cbz	r2, 800c086 <transceive+0x5c>
	if (asynchronous) {
 800c042:	2900      	cmp	r1, #0
 800c044:	d16b      	bne.n	800c11e <transceive+0xf4>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 800c046:	88b3      	ldrh	r3, [r6, #4]
 800c048:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c04c:	d004      	beq.n	800c058 <transceive+0x2e>
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	b913      	cbnz	r3, 800c058 <transceive+0x2e>
		(ctx->owner == spi_cfg)) {
 800c052:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800c054:	429e      	cmp	r6, r3
 800c056:	d008      	beq.n	800c06a <transceive+0x40>
	k_sem_take(&ctx->lock, K_FOREVER);
 800c058:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
 800c05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c064:	f7fc f822 	bl	80080ac <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 800c068:	6066      	str	r6, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 800c06a:	4631      	mov	r1, r6
 800c06c:	4628      	mov	r0, r5
 800c06e:	f7f8 fcd9 	bl	8004a24 <spi_stm32_configure>
	if (ret) {
 800c072:	4606      	mov	r6, r0
 800c074:	b160      	cbz	r0, 800c090 <transceive+0x66>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	889b      	ldrh	r3, [r3, #4]
 800c07a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800c07e:	d047      	beq.n	800c110 <transceive+0xe6>
}
 800c080:	4630      	mov	r0, r6
 800c082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	d1da      	bne.n	800c042 <transceive+0x18>
		return 0;
 800c08c:	2600      	movs	r6, #0
 800c08e:	e7f7      	b.n	800c080 <transceive+0x56>
	if (tx_bufs) {
 800c090:	f1b9 0f00 	cmp.w	r9, #0
 800c094:	d030      	beq.n	800c0f8 <transceive+0xce>
		ctx->current_tx = tx_bufs->buffers;
 800c096:	f8d9 3000 	ldr.w	r3, [r9]
 800c09a:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 800c09c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c0a0:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
 800c0aa:	f1b8 0f00 	cmp.w	r8, #0
 800c0ae:	d029      	beq.n	800c104 <transceive+0xda>
		ctx->current_rx = rx_bufs->buffers;
 800c0b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b4:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 800c0b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c0ba:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	63a3      	str	r3, [r4, #56]	; 0x38
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ce:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f7ff ff39 	bl	800bf4a <spi_stm32_cs_control>
		ret = spi_stm32_shift_frames(spi, data);
 800c0d8:	4621      	mov	r1, r4
 800c0da:	4638      	mov	r0, r7
 800c0dc:	f7ff ff25 	bl	800bf2a <spi_stm32_shift_frames>
	} while (!ret && spi_stm32_transfer_ongoing(data));
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	b920      	cbnz	r0, 800c0ee <transceive+0xc4>
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f7ff fdbd 	bl	800bc64 <spi_stm32_transfer_ongoing>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d1f4      	bne.n	800c0d8 <transceive+0xae>
	spi_stm32_complete(dev, ret);
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7ff ff77 	bl	800bfe4 <spi_stm32_complete>
 800c0f6:	e7be      	b.n	800c076 <transceive+0x4c>
		ctx->current_tx = NULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 800c0fc:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 800c0fe:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 800c100:	6523      	str	r3, [r4, #80]	; 0x50
 800c102:	e7d2      	b.n	800c0aa <transceive+0x80>
		ctx->current_rx = NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800c108:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 800c10a:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 800c10c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c10e:	e7d9      	b.n	800c0c4 <transceive+0x9a>
		ctx->owner = NULL;
 800c110:	2300      	movs	r3, #0
 800c112:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800c114:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800c118:	f7fb ffa0 	bl	800805c <z_impl_k_sem_give>
}
 800c11c:	e7b0      	b.n	800c080 <transceive+0x56>
		return -ENOTSUP;
 800c11e:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800c122:	e7ad      	b.n	800c080 <transceive+0x56>

0800c124 <spi_stm32_transceive>:
{
 800c124:	b510      	push	{r4, lr}
 800c126:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800c128:	2400      	movs	r4, #0
 800c12a:	9401      	str	r4, [sp, #4]
 800c12c:	9400      	str	r4, [sp, #0]
 800c12e:	f7ff ff7c 	bl	800c02a <transceive>
}
 800c132:	b002      	add	sp, #8
 800c134:	bd10      	pop	{r4, pc}

0800c136 <spi_stm32_release>:
{
 800c136:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800c138:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	b1c3      	cbz	r3, 800c170 <spi_stm32_release+0x3a>
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	b1b3      	cbz	r3, 800c170 <spi_stm32_release+0x3a>
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	b1a2      	cbz	r2, 800c170 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800c146:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800c148:	f7fc fec4 	bl	8008ed4 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	6818      	ldr	r0, [r3, #0]
 800c152:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800c154:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	2301      	movs	r3, #1
 800c15a:	408b      	lsls	r3, r1
 800c15c:	421a      	tst	r2, r3
 800c15e:	d10b      	bne.n	800c178 <spi_stm32_release+0x42>
 800c160:	2300      	movs	r3, #0
	if (value != 0)	{
 800c162:	b15b      	cbz	r3, 800c17c <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c164:	2301      	movs	r3, #1
 800c166:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c16a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	4798      	blx	r3
 800c170:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800c172:	b153      	cbz	r3, 800c18a <spi_stm32_release+0x54>
}
 800c174:	2000      	movs	r0, #0
 800c176:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800c178:	2301      	movs	r3, #1
 800c17a:	e7f2      	b.n	800c162 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c17c:	2301      	movs	r3, #1
 800c17e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c182:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800c188:	e7f2      	b.n	800c170 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800c18a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800c18c:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800c190:	f7fb ff64 	bl	800805c <z_impl_k_sem_give>
}
 800c194:	e7ee      	b.n	800c174 <spi_stm32_release+0x3e>

0800c196 <timer_work_handler>:
{
 800c196:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800c198:	f7f9 fc7a 	bl	8005a90 <TimerIrqHandler>
}
 800c19c:	bd08      	pop	{r3, pc}

0800c19e <RtcGetTimerValue>:
{
 800c19e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800c1a0:	f000 fdf3 	bl	800cd8a <z_impl_k_uptime_ticks>
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f7f4 fb8c 	bl	80008c4 <__aeabi_uldivmod>
}
 800c1ac:	bd08      	pop	{r3, pc}

0800c1ae <RtcGetMinimumTimeout>:
}
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	4770      	bx	lr

0800c1b2 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800c1b2:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800c1b4:	0f81      	lsrs	r1, r0, #30
 800c1b6:	0083      	lsls	r3, r0, #2
 800c1b8:	1818      	adds	r0, r3, r0
 800c1ba:	f141 0100 	adc.w	r1, r1, #0
 800c1be:	1800      	adds	r0, r0, r0
 800c1c0:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800c1c2:	f7fc fcab 	bl	8008b1c <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800c1c6:	bd08      	pop	{r3, pc}

0800c1c8 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800c1c8:	4770      	bx	lr

0800c1ca <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800c1ca:	4770      	bx	lr

0800c1cc <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800c1cc:	f04f 0210 	mov.w	r2, #16
 800c1d0:	f3ef 8311 	mrs	r3, BASEPRI
 800c1d4:	f382 8812 	msr	BASEPRI_MAX, r2
 800c1d8:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800c1dc:	6003      	str	r3, [r0, #0]
}
 800c1de:	4770      	bx	lr

0800c1e0 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800c1e0:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
}
 800c1ea:	4770      	bx	lr

0800c1ec <clamp_int8>:
	if (x < min) {
 800c1ec:	4288      	cmp	r0, r1
 800c1ee:	db03      	blt.n	800c1f8 <clamp_int8+0xc>
	} else if (x > max) {
 800c1f0:	4290      	cmp	r0, r2
 800c1f2:	dd02      	ble.n	800c1fa <clamp_int8+0xe>
		return max;
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4770      	bx	lr
		return min;
 800c1f8:	4608      	mov	r0, r1
}
 800c1fa:	4770      	bx	lr

0800c1fc <SX1276CheckRfFrequency>:
}
 800c1fc:	2001      	movs	r0, #1
 800c1fe:	4770      	bx	lr

0800c200 <sx127x_antenna_configure>:
}
 800c200:	2000      	movs	r0, #0
 800c202:	4770      	bx	lr

0800c204 <SX1276GetBoardTcxoWakeupTime>:
}
 800c204:	2000      	movs	r0, #0
 800c206:	4770      	bx	lr

0800c208 <SX1276SetAntSwLowPower>:
}
 800c208:	4770      	bx	lr

0800c20a <SX1276SetBoardTcxo>:
}
 800c20a:	4770      	bx	lr

0800c20c <SX1276SetAntSw>:
}
 800c20c:	4770      	bx	lr

0800c20e <sx127x_read>:
{
 800c20e:	b508      	push	{r3, lr}
 800c210:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800c212:	460a      	mov	r2, r1
 800c214:	2100      	movs	r1, #0
 800c216:	f7f9 f8c7 	bl	80053a8 <sx127x_transceive>
}
 800c21a:	bd08      	pop	{r3, pc}

0800c21c <sx127x_write>:
{
 800c21c:	b508      	push	{r3, lr}
 800c21e:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800c220:	460a      	mov	r2, r1
 800c222:	2101      	movs	r1, #1
 800c224:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800c228:	f7f9 f8be 	bl	80053a8 <sx127x_transceive>
}
 800c22c:	bd08      	pop	{r3, pc}

0800c22e <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c22e:	e004      	b.n	800c23a <memcpy1+0xc>
    {
        *dst++ = *src++;
 800c230:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c234:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800c238:	461a      	mov	r2, r3
 800c23a:	1e53      	subs	r3, r2, #1
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	2a00      	cmp	r2, #0
 800c240:	d1f6      	bne.n	800c230 <memcpy1+0x2>
    }
}
 800c242:	4770      	bx	lr

0800c244 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800c248:	f7ff ffb1 	bl	800c1ae <RtcGetMinimumTimeout>
 800c24c:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800c24e:	2301      	movs	r3, #1
 800c250:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800c252:	6826      	ldr	r6, [r4, #0]
 800c254:	f7f8 fdd2 	bl	8004dfc <RtcGetTimerElapsedTime>
 800c258:	4428      	add	r0, r5
 800c25a:	4286      	cmp	r6, r0
 800c25c:	d303      	bcc.n	800c266 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800c25e:	6820      	ldr	r0, [r4, #0]
 800c260:	f7f8 fde2 	bl	8004e28 <RtcSetAlarm>
}
 800c264:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800c266:	f7f8 fdc9 	bl	8004dfc <RtcGetTimerElapsedTime>
 800c26a:	4405      	add	r5, r0
 800c26c:	6025      	str	r5, [r4, #0]
 800c26e:	e7f6      	b.n	800c25e <TimerSetTimeout+0x1a>

0800c270 <TimerInit>:
    obj->Timestamp = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800c274:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800c276:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800c278:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800c27a:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800c27c:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800c27e:	6143      	str	r3, [r0, #20]
}
 800c280:	4770      	bx	lr

0800c282 <TimerSetValue>:
{
 800c282:	b538      	push	{r3, r4, r5, lr}
 800c284:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800c286:	4608      	mov	r0, r1
 800c288:	f7ff ff9e 	bl	800c1c8 <RtcMs2Tick>
 800c28c:	4605      	mov	r5, r0
    TimerStop( obj );
 800c28e:	4620      	mov	r0, r4
 800c290:	f7f9 fc42 	bl	8005b18 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800c294:	f7ff ff8b 	bl	800c1ae <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800c298:	4285      	cmp	r5, r0
 800c29a:	d300      	bcc.n	800c29e <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800c29c:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800c29e:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800c2a0:	6060      	str	r0, [r4, #4]
}
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}

0800c2a4 <TimerGetCurrentTime>:
{
 800c2a4:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800c2a6:	f7ff ff7a 	bl	800c19e <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800c2aa:	f7ff ff8e 	bl	800c1ca <RtcTick2Ms>
}
 800c2ae:	bd08      	pop	{r3, pc}

0800c2b0 <TimerGetElapsedTime>:
{
 800c2b0:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	b908      	cbnz	r0, 800c2ba <TimerGetElapsedTime+0xa>
}
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800c2ba:	f7ff ff70 	bl	800c19e <RtcGetTimerValue>
 800c2be:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f7ff ff81 	bl	800c1c8 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800c2c6:	1a28      	subs	r0, r5, r0
 800c2c8:	f7ff ff7f 	bl	800c1ca <RtcTick2Ms>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e7f2      	b.n	800c2b6 <TimerGetElapsedTime+0x6>

0800c2d0 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800c2d0:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800c2d2:	f7ff ff6e 	bl	800c1b2 <DelayMsMcu>
}
 800c2d6:	bd08      	pop	{r3, pc}

0800c2d8 <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c2d8:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c2da:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c2de:	b2c3      	uxtb	r3, r0
 800c2e0:	fb02 f303 	mul.w	r3, r2, r3
 800c2e4:	3380      	adds	r3, #128	; 0x80
 800c2e6:	0a1b      	lsrs	r3, r3, #8
}
 800c2e8:	fb02 3001 	mla	r0, r2, r1, r3
 800c2ec:	4770      	bx	lr

0800c2ee <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800c2ee:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c2f0:	b941      	cbnz	r1, 800c304 <SX1276GetGfskTimeOnAirNumerator+0x16>
 800c2f2:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800c2f4:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c2f6:	b13b      	cbz	r3, 800c308 <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800c2f8:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800c2fa:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800c2fc:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800c300:	3018      	adds	r0, #24
 800c302:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c304:	2100      	movs	r1, #0
 800c306:	e7f5      	b.n	800c2f4 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c308:	2300      	movs	r3, #0
 800c30a:	e7f6      	b.n	800c2fa <SX1276GetGfskTimeOnAirNumerator+0xc>

0800c30c <SX1276GetLoRaTimeOnAirNumerator>:
{
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800c312:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800c316:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c318:	f1a1 0c05 	sub.w	ip, r1, #5
 800c31c:	f1bc 0f01 	cmp.w	ip, #1
 800c320:	d932      	bls.n	800c388 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c322:	b918      	cbnz	r0, 800c32c <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800c324:	f1a1 060b 	sub.w	r6, r1, #11
 800c328:	2e01      	cmp	r6, #1
 800c32a:	d935      	bls.n	800c398 <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800c32c:	2801      	cmp	r0, #1
 800c32e:	d02f      	beq.n	800c390 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800c330:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c332:	f89d e014 	ldrb.w	lr, [sp, #20]
 800c336:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800c33a:	b38d      	cbz	r5, 800c3a0 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800c33c:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c340:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800c342:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800c344:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800c348:	b36c      	cbz	r4, 800c3a6 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800c34a:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800c34e:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800c350:	2906      	cmp	r1, #6
 800c352:	d904      	bls.n	800c35e <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800c354:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800c358:	b10e      	cbz	r6, 800c35e <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800c35a:	1e88      	subs	r0, r1, #2
 800c35c:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800c35e:	f1bc 0f00 	cmp.w	ip, #0
 800c362:	db23      	blt.n	800c3ac <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c364:	4484      	add	ip, r0
 800c366:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c36a:	fb9c fcf0 	sdiv	ip, ip, r0
 800c36e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800c372:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800c376:	2906      	cmp	r1, #6
 800c378:	d801      	bhi.n	800c37e <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800c37a:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c37e:	0080      	lsls	r0, r0, #2
 800c380:	3001      	adds	r0, #1
 800c382:	3902      	subs	r1, #2
}
 800c384:	4088      	lsls	r0, r1
 800c386:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800c388:	2b0b      	cmp	r3, #11
 800c38a:	d8ca      	bhi.n	800c322 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800c38c:	230c      	movs	r3, #12
 800c38e:	e7c8      	b.n	800c322 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c390:	290c      	cmp	r1, #12
 800c392:	d003      	beq.n	800c39c <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800c394:	2600      	movs	r6, #0
 800c396:	e7cc      	b.n	800c332 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800c398:	2601      	movs	r6, #1
 800c39a:	e7ca      	b.n	800c332 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800c39c:	2601      	movs	r6, #1
 800c39e:	e7c8      	b.n	800c332 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800c3a0:	f04f 0c00 	mov.w	ip, #0
 800c3a4:	e7cc      	b.n	800c340 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800c3a6:	f04f 0c14 	mov.w	ip, #20
 800c3aa:	e7d0      	b.n	800c34e <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800c3ac:	f04f 0c00 	mov.w	ip, #0
 800c3b0:	e7d8      	b.n	800c364 <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800c3b2 <SX1276ReadFifo>:
{
 800c3b2:	b508      	push	{r3, lr}
 800c3b4:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	f7f9 f939 	bl	8005630 <SX1276ReadBuffer>
}
 800c3be:	bd08      	pop	{r3, pc}

0800c3c0 <SX1276WriteFifo>:
{
 800c3c0:	b508      	push	{r3, lr}
 800c3c2:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800c3c4:	4601      	mov	r1, r0
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	f7f9 fa36 	bl	8005838 <SX1276WriteBuffer>
}
 800c3cc:	bd08      	pop	{r3, pc}

0800c3ce <SX1276GetTimeOnAir>:
{
 800c3ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	460e      	mov	r6, r1
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800c3dc:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800c3e0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800c3e4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800c3e8:	b148      	cbz	r0, 800c3fe <SX1276GetTimeOnAir+0x30>
 800c3ea:	2801      	cmp	r0, #1
 800c3ec:	d010      	beq.n	800c410 <SX1276GetTimeOnAir+0x42>
 800c3ee:	2501      	movs	r5, #1
 800c3f0:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c3f2:	1960      	adds	r0, r4, r5
 800c3f4:	3801      	subs	r0, #1
}
 800c3f6:	fbb0 f0f5 	udiv	r0, r0, r5
 800c3fa:	b005      	add	sp, #20
 800c3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c3fe:	463a      	mov	r2, r7
 800c400:	4660      	mov	r0, ip
 800c402:	f7ff ff74 	bl	800c2ee <SX1276GetGfskTimeOnAirNumerator>
 800c406:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c40a:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800c40e:	e7f0      	b.n	800c3f2 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c410:	9302      	str	r3, [sp, #8]
 800c412:	9701      	str	r7, [sp, #4]
 800c414:	9100      	str	r1, [sp, #0]
 800c416:	4663      	mov	r3, ip
 800c418:	4629      	mov	r1, r5
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7ff ff76 	bl	800c30c <SX1276GetLoRaTimeOnAirNumerator>
 800c420:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800c424:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800c428:	4630      	mov	r0, r6
 800c42a:	f7f9 fbf1 	bl	8005c10 <SX1276GetLoRaBandwidthInHz>
 800c42e:	4605      	mov	r5, r0
        break;
 800c430:	e7df      	b.n	800c3f2 <SX1276GetTimeOnAir+0x24>

0800c432 <SX1276Write>:
{
 800c432:	b500      	push	{lr}
 800c434:	b083      	sub	sp, #12
 800c436:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800c43a:	2201      	movs	r2, #1
 800c43c:	f10d 0107 	add.w	r1, sp, #7
 800c440:	f7f9 f9fa 	bl	8005838 <SX1276WriteBuffer>
}
 800c444:	b003      	add	sp, #12
 800c446:	f85d fb04 	ldr.w	pc, [sp], #4

0800c44a <SX1276Read>:
{
 800c44a:	b500      	push	{lr}
 800c44c:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800c44e:	2201      	movs	r2, #1
 800c450:	f10d 0107 	add.w	r1, sp, #7
 800c454:	f7f9 f8ec 	bl	8005630 <SX1276ReadBuffer>
}
 800c458:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c45c:	b003      	add	sp, #12
 800c45e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c462 <SX1276SetOpMode>:
{
 800c462:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800c464:	4604      	mov	r4, r0
 800c466:	b970      	cbnz	r0, 800c486 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800c468:	2001      	movs	r0, #1
 800c46a:	f7ff fecd 	bl	800c208 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c46e:	2001      	movs	r0, #1
 800c470:	f7ff ffeb 	bl	800c44a <SX1276Read>
 800c474:	b241      	sxtb	r1, r0
 800c476:	f021 0107 	bic.w	r1, r1, #7
 800c47a:	4321      	orrs	r1, r4
 800c47c:	b2c9      	uxtb	r1, r1
 800c47e:	2001      	movs	r0, #1
 800c480:	f7ff ffd7 	bl	800c432 <SX1276Write>
}
 800c484:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800c486:	2001      	movs	r0, #1
 800c488:	f7ff febf 	bl	800c20a <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800c48c:	2000      	movs	r0, #0
 800c48e:	f7ff febb 	bl	800c208 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800c492:	4620      	mov	r0, r4
 800c494:	f7ff feba 	bl	800c20c <SX1276SetAntSw>
 800c498:	e7e9      	b.n	800c46e <SX1276SetOpMode+0xc>

0800c49a <SX1276IsChannelFree>:
{
 800c49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49c:	4607      	mov	r7, r0
 800c49e:	460c      	mov	r4, r1
 800c4a0:	4616      	mov	r6, r2
 800c4a2:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800c4a4:	f7f9 ff02 	bl	80062ac <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f7fa f995 	bl	80067d8 <SX1276SetModem>
    SX1276SetChannel( freq );
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f7f9 fbd8 	bl	8005c64 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7f9 fb83 	bl	8005bc0 <GetFskBandwidthRegValue>
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4601      	mov	r1, r0
 800c4be:	2012      	movs	r0, #18
 800c4c0:	f7ff ffb7 	bl	800c432 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	2013      	movs	r0, #19
 800c4c8:	f7ff ffb3 	bl	800c432 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800c4cc:	2005      	movs	r0, #5
 800c4ce:	f7ff ffc8 	bl	800c462 <SX1276SetOpMode>
    DelayMs( 1 );
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	f7ff fefc 	bl	800c2d0 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800c4d8:	f7ff fee4 	bl	800c2a4 <TimerGetCurrentTime>
 800c4dc:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7ff fee6 	bl	800c2b0 <TimerGetElapsedTime>
 800c4e4:	42a8      	cmp	r0, r5
 800c4e6:	d206      	bcs.n	800c4f6 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	f7fa f94d 	bl	8006788 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800c4ee:	42b0      	cmp	r0, r6
 800c4f0:	ddf5      	ble.n	800c4de <SX1276IsChannelFree+0x44>
            status = false;
 800c4f2:	2400      	movs	r4, #0
 800c4f4:	e000      	b.n	800c4f8 <SX1276IsChannelFree+0x5e>
    bool status = true;
 800c4f6:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800c4f8:	f7f9 fed8 	bl	80062ac <SX1276SetSleep>
}
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c500 <SX1276Random>:
{
 800c500:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800c502:	2001      	movs	r0, #1
 800c504:	f7fa f968 	bl	80067d8 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800c508:	21ff      	movs	r1, #255	; 0xff
 800c50a:	2011      	movs	r0, #17
 800c50c:	f7ff ff91 	bl	800c432 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800c510:	2005      	movs	r0, #5
 800c512:	f7ff ffa6 	bl	800c462 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800c516:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800c518:	462c      	mov	r4, r5
 800c51a:	e00b      	b.n	800c534 <SX1276Random+0x34>
        DelayMs( 1 );
 800c51c:	2001      	movs	r0, #1
 800c51e:	f7ff fed7 	bl	800c2d0 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800c522:	202c      	movs	r0, #44	; 0x2c
 800c524:	f7ff ff91 	bl	800c44a <SX1276Read>
 800c528:	f000 0001 	and.w	r0, r0, #1
 800c52c:	40a0      	lsls	r0, r4
 800c52e:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800c530:	3401      	adds	r4, #1
 800c532:	b2e4      	uxtb	r4, r4
 800c534:	2c1f      	cmp	r4, #31
 800c536:	d9f1      	bls.n	800c51c <SX1276Random+0x1c>
    SX1276SetSleep( );
 800c538:	f7f9 feb8 	bl	80062ac <SX1276SetSleep>
}
 800c53c:	4628      	mov	r0, r5
 800c53e:	bd38      	pop	{r3, r4, r5, pc}

0800c540 <SX1276GetWakeupTime>:
{
 800c540:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800c542:	f7ff fe5f 	bl	800c204 <SX1276GetBoardTcxoWakeupTime>
}
 800c546:	3001      	adds	r0, #1
 800c548:	bd08      	pop	{r3, pc}

0800c54a <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800c54a:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c550:	6843      	ldr	r3, [r0, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800c55a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c55e:	d02a      	beq.n	800c5b6 <uart_stm32_config_get+0x6c>
 800c560:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c564:	d129      	bne.n	800c5ba <uart_stm32_config_get+0x70>
 800c566:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800c568:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c56a:	6843      	ldr	r3, [r0, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800c574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c578:	d023      	beq.n	800c5c2 <uart_stm32_config_get+0x78>
 800c57a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c57e:	d022      	beq.n	800c5c6 <uart_stm32_config_get+0x7c>
 800c580:	b1eb      	cbz	r3, 800c5be <uart_stm32_config_get+0x74>
		return UART_CFG_STOP_BITS_2;
 800c582:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800c584:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c586:	6843      	ldr	r3, [r0, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800c58a:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (db) {
 800c592:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800c596:	d118      	bne.n	800c5ca <uart_stm32_config_get+0x80>
		if (p == LL_USART_PARITY_NONE) {
 800c598:	b9e3      	cbnz	r3, 800c5d4 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_8;
 800c59a:	2303      	movs	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800c59c:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c59e:	6843      	ldr	r3, [r0, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800c5a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ac:	d014      	beq.n	800c5d8 <uart_stm32_config_get+0x8e>
	return UART_CFG_FLOW_CTRL_NONE;
 800c5ae:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800c5b0:	71cb      	strb	r3, [r1, #7]
}
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	e7d6      	b.n	800c568 <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e7d4      	b.n	800c568 <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e7e0      	b.n	800c584 <uart_stm32_config_get+0x3a>
	switch (sb) {
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e7de      	b.n	800c584 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	e7dc      	b.n	800c584 <uart_stm32_config_get+0x3a>
		if (p == LL_USART_PARITY_NONE) {
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <uart_stm32_config_get+0x86>
			return UART_CFG_DATA_BITS_9;
 800c5cc:	2304      	movs	r3, #4
 800c5ce:	e7e5      	b.n	800c59c <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_8;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e7e3      	b.n	800c59c <uart_stm32_config_get+0x52>
			return UART_CFG_DATA_BITS_7;
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	e7e1      	b.n	800c59c <uart_stm32_config_get+0x52>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e7e9      	b.n	800c5b0 <uart_stm32_config_get+0x66>

0800c5dc <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c5dc:	6843      	ldr	r3, [r0, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800c5e0:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800c5e2:	f012 0f08 	tst.w	r2, #8
 800c5e6:	d012      	beq.n	800c60e <uart_stm32_poll_in+0x32>
{
 800c5e8:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c5ee:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c5f4:	9a01      	ldr	r2, [sp, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800c5f6:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800c5f8:	f012 0f20 	tst.w	r2, #32
 800c5fc:	d004      	beq.n	800c608 <uart_stm32_poll_in+0x2c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800c5fe:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800c600:	700b      	strb	r3, [r1, #0]
	return 0;
 800c602:	2000      	movs	r0, #0
}
 800c604:	b002      	add	sp, #8
 800c606:	4770      	bx	lr
		return -1;
 800c608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c60c:	e7fa      	b.n	800c604 <uart_stm32_poll_in+0x28>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800c60e:	681a      	ldr	r2, [r3, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800c610:	f012 0f20 	tst.w	r2, #32
 800c614:	d003      	beq.n	800c61e <uart_stm32_poll_in+0x42>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800c616:	685b      	ldr	r3, [r3, #4]
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800c618:	700b      	strb	r3, [r1, #0]
	return 0;
 800c61a:	2000      	movs	r0, #0
 800c61c:	4770      	bx	lr
		return -1;
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c622:	4770      	bx	lr

0800c624 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c624:	6843      	ldr	r3, [r0, #4]
 800c626:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800c628:	6813      	ldr	r3, [r2, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 800c62a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c62e:	d0fb      	beq.n	800c628 <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800c630:	6051      	str	r1, [r2, #4]
}
 800c632:	4770      	bx	lr

0800c634 <uart_stm32_err_check>:
{
 800c634:	b084      	sub	sp, #16
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800c636:	6843      	ldr	r3, [r0, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800c63a:	6818      	ldr	r0, [r3, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800c63c:	f010 0008 	ands.w	r0, r0, #8
 800c640:	d000      	beq.n	800c644 <uart_stm32_err_check+0x10>
		err |= UART_ERROR_OVERRUN;
 800c642:	2001      	movs	r0, #1
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800c644:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800c646:	f012 0f01 	tst.w	r2, #1
 800c64a:	d001      	beq.n	800c650 <uart_stm32_err_check+0x1c>
		err |= UART_ERROR_PARITY;
 800c64c:	f040 0002 	orr.w	r0, r0, #2
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800c650:	681a      	ldr	r2, [r3, #0]
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800c652:	f012 0f02 	tst.w	r2, #2
 800c656:	d001      	beq.n	800c65c <uart_stm32_err_check+0x28>
		err |= UART_ERROR_FRAMING;
 800c658:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800c65c:	f010 0f01 	tst.w	r0, #1
 800c660:	d005      	beq.n	800c66e <uart_stm32_err_check+0x3a>
  tmpreg = USARTx->SR;
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800c666:	9a00      	ldr	r2, [sp, #0]
  tmpreg = USARTx->DR;
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 800c66c:	9a00      	ldr	r2, [sp, #0]
	if (err & UART_ERROR_PARITY) {
 800c66e:	f010 0f02 	tst.w	r0, #2
 800c672:	d005      	beq.n	800c680 <uart_stm32_err_check+0x4c>
  tmpreg = USARTx->SR;
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c678:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800c67e:	9a01      	ldr	r2, [sp, #4]
	if (err & UART_ERROR_FRAMING) {
 800c680:	f010 0f04 	tst.w	r0, #4
 800c684:	d005      	beq.n	800c692 <uart_stm32_err_check+0x5e>
  tmpreg = USARTx->SR;
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800c68a:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800c690:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 800c696:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	9303      	str	r3, [sp, #12]
  (void) tmpreg;
 800c69c:	9b03      	ldr	r3, [sp, #12]
}
 800c69e:	b004      	add	sp, #16
 800c6a0:	4770      	bx	lr

0800c6a2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800c6a2:	b148      	cbz	r0, 800c6b8 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800c6a4:	68c3      	ldr	r3, [r0, #12]
 800c6a6:	8818      	ldrh	r0, [r3, #0]
 800c6a8:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800c6ac:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c6b0:	bf14      	ite	ne
 800c6b2:	2000      	movne	r0, #0
 800c6b4:	2001      	moveq	r0, #1
 800c6b6:	4770      	bx	lr
		return false;
 800c6b8:	2000      	movs	r0, #0
}
 800c6ba:	4770      	bx	lr

0800c6bc <arch_system_halt>:
	__asm__ volatile(
 800c6bc:	f04f 0210 	mov.w	r2, #16
 800c6c0:	f3ef 8311 	mrs	r3, BASEPRI
 800c6c4:	f382 8812 	msr	BASEPRI_MAX, r2
 800c6c8:	f3bf 8f6f 	isb	sy
	for (;;) {
 800c6cc:	e7fe      	b.n	800c6cc <arch_system_halt+0x10>

0800c6ce <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800c6ce:	6902      	ldr	r2, [r0, #16]
 800c6d0:	6943      	ldr	r3, [r0, #20]
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	f012 0203 	ands.w	r2, r2, #3
 800c6d8:	d10d      	bne.n	800c6f6 <create_free_list+0x28>
	slab->free_list = NULL;
 800c6da:	2100      	movs	r1, #0
 800c6dc:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800c6de:	e005      	b.n	800c6ec <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800c6e0:	6981      	ldr	r1, [r0, #24]
 800c6e2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800c6e4:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800c6e6:	6901      	ldr	r1, [r0, #16]
 800c6e8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800c6ea:	3201      	adds	r2, #1
 800c6ec:	68c1      	ldr	r1, [r0, #12]
 800c6ee:	4291      	cmp	r1, r2
 800c6f0:	d8f6      	bhi.n	800c6e0 <create_free_list+0x12>
	return 0;
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	4770      	bx	lr
		return -EINVAL;
 800c6f6:	f06f 0015 	mvn.w	r0, #21
}
 800c6fa:	4770      	bx	lr

0800c6fc <k_mem_slab_init>:
{
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 800c700:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
 800c702:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
 800c704:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 800c706:	2300      	movs	r3, #0
 800c708:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 800c70a:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
 800c70c:	f7ff ffdf 	bl	800c6ce <create_free_list>
	if (rc < 0) {
 800c710:	2800      	cmp	r0, #0
 800c712:	db01      	blt.n	800c718 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
 800c714:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 800c716:	6064      	str	r4, [r4, #4]
}
 800c718:	bd10      	pop	{r4, pc}

0800c71a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800c71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71c:	4604      	mov	r4, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	f04f 0310 	mov.w	r3, #16
 800c724:	f3ef 8611 	mrs	r6, BASEPRI
 800c728:	f383 8812 	msr	BASEPRI_MAX, r3
 800c72c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800c730:	6983      	ldr	r3, [r0, #24]
 800c732:	b163      	cbz	r3, 800c74e <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	69a2      	ldr	r2, [r4, #24]
 800c738:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800c73a:	682b      	ldr	r3, [r5, #0]
 800c73c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800c73e:	69e3      	ldr	r3, [r4, #28]
 800c740:	3b01      	subs	r3, #1
 800c742:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800c744:	f386 8811 	msr	BASEPRI, r6
 800c748:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c74e:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800c752:	f000 f9f8 	bl	800cb46 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800c756:	2800      	cmp	r0, #0
 800c758:	d0ec      	beq.n	800c734 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800c75a:	682a      	ldr	r2, [r5, #0]
 800c75c:	2100      	movs	r1, #0
 800c75e:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800c760:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 800c762:	f000 f929 	bl	800c9b8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800c766:	4631      	mov	r1, r6
 800c768:	4638      	mov	r0, r7
 800c76a:	f7fb fe83 	bl	8008474 <z_reschedule>
			return;
 800c76e:	e7ed      	b.n	800c74c <k_mem_slab_free+0x32>

0800c770 <setup_thread_stack>:
{
 800c770:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800c772:	3207      	adds	r2, #7
 800c774:	f022 0207 	bic.w	r2, r2, #7
 800c778:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800c77c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800c780:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800c782:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800c784:	2200      	movs	r2, #0
 800c786:	6702      	str	r2, [r0, #112]	; 0x70
}
 800c788:	18c8      	adds	r0, r1, r3
 800c78a:	bc10      	pop	{r4}
 800c78c:	4770      	bx	lr

0800c78e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c78e:	f3ef 8005 	mrs	r0, IPSR
}
 800c792:	3800      	subs	r0, #0
 800c794:	bf18      	it	ne
 800c796:	2001      	movne	r0, #1
 800c798:	4770      	bx	lr

0800c79a <z_impl_k_thread_name_set>:
}
 800c79a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800c79e:	4770      	bx	lr

0800c7a0 <k_thread_name_get>:
}
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	4770      	bx	lr

0800c7a4 <z_impl_k_thread_start>:
{
 800c7a4:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800c7a6:	f7fb ff9b 	bl	80086e0 <z_sched_start>
}
 800c7aa:	bd08      	pop	{r3, pc}

0800c7ac <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800c7ac:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800c7ae:	2400      	movs	r4, #0
 800c7b0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800c7b2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800c7b4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800c7b6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800c7b8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800c7ba:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800c7bc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800c7be:	bc10      	pop	{r4}
 800c7c0:	4770      	bx	lr

0800c7c2 <z_impl_k_thread_create>:
{
 800c7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7c4:	b087      	sub	sp, #28
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c7ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800c7cc:	2700      	movs	r7, #0
 800c7ce:	9705      	str	r7, [sp, #20]
 800c7d0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c7d2:	9704      	str	r7, [sp, #16]
 800c7d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800c7d6:	9703      	str	r7, [sp, #12]
 800c7d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c7da:	9702      	str	r7, [sp, #8]
 800c7dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c7de:	9701      	str	r7, [sp, #4]
 800c7e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c7e2:	9700      	str	r7, [sp, #0]
 800c7e4:	f7fb fa40 	bl	8007c68 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800c7e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c7ec:	bf08      	it	eq
 800c7ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800c7f2:	d102      	bne.n	800c7fa <z_impl_k_thread_create+0x38>
}
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	b007      	add	sp, #28
 800c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800c7fa:	4632      	mov	r2, r6
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7fb fa24 	bl	8007c4c <schedule_new_thread>
 800c804:	e7f6      	b.n	800c7f4 <z_impl_k_thread_create+0x32>

0800c806 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800c806:	b508      	push	{r3, lr}
	__asm__ volatile(
 800c808:	f04f 0210 	mov.w	r2, #16
 800c80c:	f3ef 8311 	mrs	r3, BASEPRI
 800c810:	f382 8812 	msr	BASEPRI_MAX, r2
 800c814:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800c818:	f7f6 fffc 	bl	8003814 <arch_cpu_idle>
 800c81c:	e7f4      	b.n	800c808 <idle+0x2>

0800c81e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800c81e:	4288      	cmp	r0, r1
 800c820:	da00      	bge.n	800c824 <new_prio_for_inheritance+0x6>
 800c822:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800c824:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800c828:	db01      	blt.n	800c82e <new_prio_for_inheritance+0x10>
 800c82a:	4608      	mov	r0, r1
 800c82c:	4770      	bx	lr
 800c82e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800c832:	4770      	bx	lr

0800c834 <adjust_owner_prio>:
{
 800c834:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800c836:	6880      	ldr	r0, [r0, #8]
 800c838:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800c83c:	428b      	cmp	r3, r1
 800c83e:	d101      	bne.n	800c844 <adjust_owner_prio+0x10>
	return false;
 800c840:	2000      	movs	r0, #0
}
 800c842:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800c844:	f7fb ffb8 	bl	80087b8 <z_set_prio>
 800c848:	e7fb      	b.n	800c842 <adjust_owner_prio+0xe>

0800c84a <z_impl_k_mutex_init>:
{
 800c84a:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800c84c:	2000      	movs	r0, #0
 800c84e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800c850:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800c852:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800c854:	605b      	str	r3, [r3, #4]
}
 800c856:	4770      	bx	lr

0800c858 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800c858:	b15a      	cbz	r2, 800c872 <z_impl_k_sem_init+0x1a>
 800c85a:	428a      	cmp	r2, r1
 800c85c:	d30c      	bcc.n	800c878 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800c85e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800c860:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800c862:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800c864:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800c866:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800c86a:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800c86c:	6143      	str	r3, [r0, #20]
	return 0;
 800c86e:	2000      	movs	r0, #0
 800c870:	4770      	bx	lr
		return -EINVAL;
 800c872:	f06f 0015 	mvn.w	r0, #21
 800c876:	4770      	bx	lr
 800c878:	f06f 0015 	mvn.w	r0, #21
}
 800c87c:	4770      	bx	lr

0800c87e <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800c87e:	2300      	movs	r3, #0
 800c880:	6003      	str	r3, [r0, #0]
 800c882:	6043      	str	r3, [r0, #4]
 800c884:	6083      	str	r3, [r0, #8]
 800c886:	60c3      	str	r3, [r0, #12]
 800c888:	6041      	str	r1, [r0, #4]
}
 800c88a:	4770      	bx	lr

0800c88c <k_work_submit_to_queue>:
{
 800c88c:	b530      	push	{r4, r5, lr}
 800c88e:	b083      	sub	sp, #12
 800c890:	9001      	str	r0, [sp, #4]
 800c892:	4608      	mov	r0, r1
 800c894:	f04f 0310 	mov.w	r3, #16
 800c898:	f3ef 8511 	mrs	r5, BASEPRI
 800c89c:	f383 8812 	msr	BASEPRI_MAX, r3
 800c8a0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800c8a4:	a901      	add	r1, sp, #4
 800c8a6:	f7fb fc29 	bl	80080fc <submit_to_queue_locked>
 800c8aa:	4604      	mov	r4, r0
	__asm__ volatile(
 800c8ac:	f385 8811 	msr	BASEPRI, r5
 800c8b0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	dc02      	bgt.n	800c8be <k_work_submit_to_queue+0x32>
}
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	b003      	add	sp, #12
 800c8bc:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800c8be:	f7fc f94b 	bl	8008b58 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d0f8      	beq.n	800c8b8 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800c8c6:	f7fc f899 	bl	80089fc <z_impl_k_yield>
	return ret;
 800c8ca:	e7f5      	b.n	800c8b8 <k_work_submit_to_queue+0x2c>

0800c8cc <thread_active_elsewhere>:
}
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	4770      	bx	lr

0800c8d0 <pended_on_thread>:
}
 800c8d0:	6880      	ldr	r0, [r0, #8]
 800c8d2:	4770      	bx	lr

0800c8d4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800c8d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800c8d8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800c8dc:	4283      	cmp	r3, r0
 800c8de:	d001      	beq.n	800c8e4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800c8e0:	1ac0      	subs	r0, r0, r3
 800c8e2:	4770      	bx	lr
	return 0;
 800c8e4:	2000      	movs	r0, #0
}
 800c8e6:	4770      	bx	lr

0800c8e8 <z_unpend_thread_no_timeout>:
{
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800c8ec:	2300      	movs	r3, #0
	__asm__ volatile(
 800c8ee:	f04f 0210 	mov.w	r2, #16
 800c8f2:	f3ef 8511 	mrs	r5, BASEPRI
 800c8f6:	f382 8812 	msr	BASEPRI_MAX, r2
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	e010      	b.n	800c922 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800c900:	4620      	mov	r0, r4
 800c902:	f7ff ffe5 	bl	800c8d0 <pended_on_thread>
 800c906:	4621      	mov	r1, r4
 800c908:	f000 f823 	bl	800c952 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800c90c:	7b63      	ldrb	r3, [r4, #13]
 800c90e:	f023 0302 	bic.w	r3, r3, #2
 800c912:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800c918:	f385 8811 	msr	BASEPRI, r5
 800c91c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c920:	2301      	movs	r3, #1
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0ec      	beq.n	800c900 <z_unpend_thread_no_timeout+0x18>
}
 800c926:	bd38      	pop	{r3, r4, r5, pc}

0800c928 <z_reschedule_irqlock>:
{
 800c928:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800c92a:	4603      	mov	r3, r0
 800c92c:	b920      	cbnz	r0, 800c938 <z_reschedule_irqlock+0x10>
 800c92e:	f3ef 8205 	mrs	r2, IPSR
 800c932:	b942      	cbnz	r2, 800c946 <z_reschedule_irqlock+0x1e>
 800c934:	2201      	movs	r2, #1
 800c936:	e000      	b.n	800c93a <z_reschedule_irqlock+0x12>
 800c938:	2200      	movs	r2, #0
	if (resched(key)) {
 800c93a:	b932      	cbnz	r2, 800c94a <z_reschedule_irqlock+0x22>
 800c93c:	f383 8811 	msr	BASEPRI, r3
 800c940:	f3bf 8f6f 	isb	sy
}
 800c944:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800c946:	2200      	movs	r2, #0
 800c948:	e7f7      	b.n	800c93a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f6 fffe 	bl	800394c <arch_swap>
	return ret;
 800c950:	e7f8      	b.n	800c944 <z_reschedule_irqlock+0x1c>

0800c952 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800c952:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800c954:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800c956:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800c958:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800c95e:	604b      	str	r3, [r1, #4]
}
 800c960:	4770      	bx	lr

0800c962 <z_unpend_thread>:
{
 800c962:	b538      	push	{r3, r4, r5, lr}
 800c964:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800c966:	2300      	movs	r3, #0
	__asm__ volatile(
 800c968:	f04f 0210 	mov.w	r2, #16
 800c96c:	f3ef 8511 	mrs	r5, BASEPRI
 800c970:	f382 8812 	msr	BASEPRI_MAX, r2
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	e010      	b.n	800c99c <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff ffa8 	bl	800c8d0 <pended_on_thread>
 800c980:	4621      	mov	r1, r4
 800c982:	f7ff ffe6 	bl	800c952 <z_priq_dumb_remove>
 800c986:	7b63      	ldrb	r3, [r4, #13]
 800c988:	f023 0302 	bic.w	r3, r3, #2
 800c98c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800c992:	f385 8811 	msr	BASEPRI, r5
 800c996:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800c99a:	2301      	movs	r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0ec      	beq.n	800c97a <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800c9a0:	f104 0018 	add.w	r0, r4, #24
 800c9a4:	f000 f98b 	bl	800ccbe <z_abort_timeout>
}
 800c9a8:	bd38      	pop	{r3, r4, r5, pc}

0800c9aa <z_priq_dumb_best>:
{
 800c9aa:	4603      	mov	r3, r0
	return list->head == list;
 800c9ac:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c9ae:	4283      	cmp	r3, r0
 800c9b0:	d000      	beq.n	800c9b4 <z_priq_dumb_best+0xa>
}
 800c9b2:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800c9b4:	2000      	movs	r0, #0
	return thread;
 800c9b6:	e7fc      	b.n	800c9b2 <z_priq_dumb_best+0x8>

0800c9b8 <z_ready_thread>:
{
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800c9bc:	2300      	movs	r3, #0
	__asm__ volatile(
 800c9be:	f04f 0210 	mov.w	r2, #16
 800c9c2:	f3ef 8511 	mrs	r5, BASEPRI
 800c9c6:	f382 8812 	msr	BASEPRI_MAX, r2
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	e004      	b.n	800c9da <z_ready_thread+0x22>
	__asm__ volatile(
 800c9d0:	f385 8811 	msr	BASEPRI, r5
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	2301      	movs	r3, #1
 800c9da:	b943      	cbnz	r3, 800c9ee <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f7ff ff75 	bl	800c8cc <thread_active_elsewhere>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d1f4      	bne.n	800c9d0 <z_ready_thread+0x18>
			ready_thread(thread);
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f7fb fe3a 	bl	8008660 <ready_thread>
 800c9ec:	e7f0      	b.n	800c9d0 <z_ready_thread+0x18>
}
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}

0800c9f0 <z_thread_timeout>:
{
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800c9f4:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800c9f8:	2300      	movs	r3, #0
	__asm__ volatile(
 800c9fa:	f04f 0210 	mov.w	r2, #16
 800c9fe:	f3ef 8611 	mrs	r6, BASEPRI
 800ca02:	f382 8812 	msr	BASEPRI_MAX, r2
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	e011      	b.n	800ca30 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800ca0c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800ca10:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800ca14:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800ca18:	f023 0310 	bic.w	r3, r3, #16
 800ca1c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7fb fe1d 	bl	8008660 <ready_thread>
	__asm__ volatile(
 800ca26:	f386 8811 	msr	BASEPRI, r6
 800ca2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800ca2e:	2301      	movs	r3, #1
 800ca30:	b9ab      	cbnz	r3, 800ca5e <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800ca32:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800ca36:	f013 0f28 	tst.w	r3, #40	; 0x28
 800ca3a:	d1f4      	bne.n	800ca26 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800ca3c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0e3      	beq.n	800ca0c <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800ca44:	4628      	mov	r0, r5
 800ca46:	f7ff ff43 	bl	800c8d0 <pended_on_thread>
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	f7ff ff81 	bl	800c952 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800ca50:	7b6b      	ldrb	r3, [r5, #13]
 800ca52:	f023 0302 	bic.w	r3, r3, #2
 800ca56:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60ab      	str	r3, [r5, #8]
}
 800ca5c:	e7d6      	b.n	800ca0c <z_thread_timeout+0x1c>
}
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}

0800ca60 <add_to_waitq_locked>:
{
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	4605      	mov	r5, r0
 800ca64:	460e      	mov	r6, r1
	unready_thread(thread);
 800ca66:	f7fb fe77 	bl	8008758 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800ca6a:	7b6b      	ldrb	r3, [r5, #13]
 800ca6c:	f043 0302 	orr.w	r3, r3, #2
 800ca70:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800ca72:	b1b6      	cbz	r6, 800caa2 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800ca74:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800ca76:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ca78:	42a6      	cmp	r6, r4
 800ca7a:	d019      	beq.n	800cab0 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ca7c:	b164      	cbz	r4, 800ca98 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4628      	mov	r0, r5
 800ca82:	f7ff ff27 	bl	800c8d4 <z_sched_prio_cmp>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	dc0c      	bgt.n	800caa4 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ca8a:	b12c      	cbz	r4, 800ca98 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800ca8c:	6873      	ldr	r3, [r6, #4]
 800ca8e:	429c      	cmp	r4, r3
 800ca90:	d002      	beq.n	800ca98 <add_to_waitq_locked+0x38>
 800ca92:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800ca94:	2c00      	cmp	r4, #0
 800ca96:	d1f1      	bne.n	800ca7c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800ca98:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800ca9a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800ca9c:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800ca9e:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800caa0:	6075      	str	r5, [r6, #4]
}
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800caa4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800caa6:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800caa8:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800caaa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800caac:	6065      	str	r5, [r4, #4]
}
 800caae:	e7f8      	b.n	800caa2 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800cab0:	2400      	movs	r4, #0
 800cab2:	e7e3      	b.n	800ca7c <add_to_waitq_locked+0x1c>

0800cab4 <pend>:
{
 800cab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab8:	4605      	mov	r5, r0
 800caba:	460e      	mov	r6, r1
 800cabc:	4691      	mov	r9, r2
 800cabe:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800cac0:	2400      	movs	r4, #0
	__asm__ volatile(
 800cac2:	f04f 0310 	mov.w	r3, #16
 800cac6:	f3ef 8711 	mrs	r7, BASEPRI
 800caca:	f383 8812 	msr	BASEPRI_MAX, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	e008      	b.n	800cae6 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800cad4:	4631      	mov	r1, r6
 800cad6:	4628      	mov	r0, r5
 800cad8:	f7ff ffc2 	bl	800ca60 <add_to_waitq_locked>
	__asm__ volatile(
 800cadc:	f387 8811 	msr	BASEPRI, r7
 800cae0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cae4:	2401      	movs	r4, #1
 800cae6:	2c00      	cmp	r4, #0
 800cae8:	d0f4      	beq.n	800cad4 <pend+0x20>
	add_thread_timeout(thread, timeout);
 800caea:	464a      	mov	r2, r9
 800caec:	4643      	mov	r3, r8
 800caee:	4628      	mov	r0, r5
 800caf0:	f7fb fc6c 	bl	80083cc <add_thread_timeout>
}
 800caf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800caf8 <z_unpend1_no_timeout>:
{
 800caf8:	b570      	push	{r4, r5, r6, lr}
 800cafa:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800cafc:	2300      	movs	r3, #0
	__asm__ volatile(
 800cafe:	f04f 0210 	mov.w	r2, #16
 800cb02:	f3ef 8611 	mrs	r6, BASEPRI
 800cb06:	f382 8812 	msr	BASEPRI_MAX, r2
 800cb0a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800cb0e:	461c      	mov	r4, r3
 800cb10:	e004      	b.n	800cb1c <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800cb12:	f386 8811 	msr	BASEPRI, r6
 800cb16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	b98b      	cbnz	r3, 800cb42 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f7ff ff43 	bl	800c9aa <z_priq_dumb_best>
		if (thread != NULL) {
 800cb24:	4604      	mov	r4, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d0f3      	beq.n	800cb12 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cb2a:	f7ff fed1 	bl	800c8d0 <pended_on_thread>
 800cb2e:	4621      	mov	r1, r4
 800cb30:	f7ff ff0f 	bl	800c952 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cb34:	7b63      	ldrb	r3, [r4, #13]
 800cb36:	f023 0302 	bic.w	r3, r3, #2
 800cb3a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60a3      	str	r3, [r4, #8]
}
 800cb40:	e7e7      	b.n	800cb12 <z_unpend1_no_timeout+0x1a>
}
 800cb42:	4620      	mov	r0, r4
 800cb44:	bd70      	pop	{r4, r5, r6, pc}

0800cb46 <z_unpend_first_thread>:
{
 800cb46:	b570      	push	{r4, r5, r6, lr}
 800cb48:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800cb4a:	2300      	movs	r3, #0
	__asm__ volatile(
 800cb4c:	f04f 0210 	mov.w	r2, #16
 800cb50:	f3ef 8611 	mrs	r6, BASEPRI
 800cb54:	f382 8812 	msr	BASEPRI_MAX, r2
 800cb58:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800cb5c:	461c      	mov	r4, r3
 800cb5e:	e004      	b.n	800cb6a <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800cb60:	f386 8811 	msr	BASEPRI, r6
 800cb64:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cb68:	2301      	movs	r3, #1
 800cb6a:	b9ab      	cbnz	r3, 800cb98 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	f7ff ff1c 	bl	800c9aa <z_priq_dumb_best>
		if (thread != NULL) {
 800cb72:	4604      	mov	r4, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d0f3      	beq.n	800cb60 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cb78:	f7ff feaa 	bl	800c8d0 <pended_on_thread>
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	f7ff fee8 	bl	800c952 <z_priq_dumb_remove>
 800cb82:	7b63      	ldrb	r3, [r4, #13]
 800cb84:	f023 0302 	bic.w	r3, r3, #2
 800cb88:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60a3      	str	r3, [r4, #8]
 800cb8e:	f104 0018 	add.w	r0, r4, #24
 800cb92:	f000 f894 	bl	800ccbe <z_abort_timeout>
 800cb96:	e7e3      	b.n	800cb60 <z_unpend_first_thread+0x1a>
}
 800cb98:	4620      	mov	r0, r4
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}

0800cb9c <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800cb9c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800cb9e:	f013 0f02 	tst.w	r3, #2
 800cba2:	d000      	beq.n	800cba6 <z_impl_k_wakeup+0xa>
 800cba4:	4770      	bx	lr
{
 800cba6:	b510      	push	{r4, lr}
 800cba8:	4604      	mov	r4, r0
 800cbaa:	3018      	adds	r0, #24
 800cbac:	f000 f887 	bl	800ccbe <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	da02      	bge.n	800cbba <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800cbb4:	7b63      	ldrb	r3, [r4, #13]
 800cbb6:	2b10      	cmp	r3, #16
 800cbb8:	d109      	bne.n	800cbce <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800cbba:	7b63      	ldrb	r3, [r4, #13]
 800cbbc:	f023 0310 	bic.w	r3, r3, #16
 800cbc0:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f7ff fef8 	bl	800c9b8 <z_ready_thread>
 800cbc8:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800cbcc:	b103      	cbz	r3, 800cbd0 <z_impl_k_wakeup+0x34>
}
 800cbce:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800cbd0:	f04f 0310 	mov.w	r3, #16
 800cbd4:	f3ef 8011 	mrs	r0, BASEPRI
 800cbd8:	f383 8812 	msr	BASEPRI_MAX, r3
 800cbdc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800cbe0:	f7ff fea2 	bl	800c928 <z_reschedule_irqlock>
}
 800cbe4:	e7f3      	b.n	800cbce <z_impl_k_wakeup+0x32>

0800cbe6 <z_sched_wake>:
{
 800cbe6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbea:	4605      	mov	r5, r0
 800cbec:	4688      	mov	r8, r1
 800cbee:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f04f 0210 	mov.w	r2, #16
 800cbf6:	f3ef 8611 	mrs	r6, BASEPRI
 800cbfa:	f382 8812 	msr	BASEPRI_MAX, r2
 800cbfe:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800cc02:	4699      	mov	r9, r3
 800cc04:	e004      	b.n	800cc10 <z_sched_wake+0x2a>
	__asm__ volatile(
 800cc06:	f386 8811 	msr	BASEPRI, r6
 800cc0a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cc0e:	2301      	movs	r3, #1
 800cc10:	b9eb      	cbnz	r3, 800cc4e <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800cc12:	4628      	mov	r0, r5
 800cc14:	f7ff fec9 	bl	800c9aa <z_priq_dumb_best>
		if (thread != NULL) {
 800cc18:	4604      	mov	r4, r0
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d0f3      	beq.n	800cc06 <z_sched_wake+0x20>
 800cc1e:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
 800cc22:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cc24:	f7ff fe54 	bl	800c8d0 <pended_on_thread>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f7ff fe92 	bl	800c952 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cc2e:	7b63      	ldrb	r3, [r4, #13]
 800cc30:	f023 0302 	bic.w	r3, r3, #2
 800cc34:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60a3      	str	r3, [r4, #8]
 800cc3a:	f104 0018 	add.w	r0, r4, #24
 800cc3e:	f000 f83e 	bl	800ccbe <z_abort_timeout>
			ready_thread(thread);
 800cc42:	4620      	mov	r0, r4
 800cc44:	f7fb fd0c 	bl	8008660 <ready_thread>
			ret = true;
 800cc48:	f04f 0901 	mov.w	r9, #1
 800cc4c:	e7db      	b.n	800cc06 <z_sched_wake+0x20>
}
 800cc4e:	4648      	mov	r0, r9
 800cc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cc54 <remove_timeout>:
{
 800cc54:	b510      	push	{r4, lr}
 800cc56:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800cc58:	f7fb ffee 	bl	8008c38 <next>
 800cc5c:	b148      	cbz	r0, 800cc72 <remove_timeout+0x1e>
 800cc5e:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800cc60:	6920      	ldr	r0, [r4, #16]
 800cc62:	6961      	ldr	r1, [r4, #20]
 800cc64:	6913      	ldr	r3, [r2, #16]
 800cc66:	181b      	adds	r3, r3, r0
 800cc68:	6950      	ldr	r0, [r2, #20]
 800cc6a:	eb41 0100 	adc.w	r1, r1, r0
 800cc6e:	6113      	str	r3, [r2, #16]
 800cc70:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800cc72:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800cc74:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800cc76:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800cc78:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800cc7e:	6063      	str	r3, [r4, #4]
}
 800cc80:	bd10      	pop	{r4, pc}

0800cc82 <timeout_rem>:
	return node->next != NULL;
 800cc82:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
 800cc84:	b1c3      	cbz	r3, 800ccb8 <timeout_rem+0x36>
{
 800cc86:	b570      	push	{r4, r5, r6, lr}
 800cc88:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800cc8a:	f7fb ffcb 	bl	8008c24 <first>
	k_ticks_t ticks = 0;
 800cc8e:	2400      	movs	r4, #0
 800cc90:	4625      	mov	r5, r4
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800cc92:	b150      	cbz	r0, 800ccaa <timeout_rem+0x28>
		ticks += t->dticks;
 800cc94:	6903      	ldr	r3, [r0, #16]
 800cc96:	6942      	ldr	r2, [r0, #20]
 800cc98:	191b      	adds	r3, r3, r4
 800cc9a:	461c      	mov	r4, r3
 800cc9c:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
 800cca0:	42b0      	cmp	r0, r6
 800cca2:	d002      	beq.n	800ccaa <timeout_rem+0x28>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 800cca4:	f7fb ffc8 	bl	8008c38 <next>
 800cca8:	e7f3      	b.n	800cc92 <timeout_rem+0x10>
	return ticks - elapsed();
 800ccaa:	f7fb ffd1 	bl	8008c50 <elapsed>
 800ccae:	4601      	mov	r1, r0
 800ccb0:	1a20      	subs	r0, r4, r0
 800ccb2:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800ccb8:	2000      	movs	r0, #0
 800ccba:	4601      	mov	r1, r0
}
 800ccbc:	4770      	bx	lr

0800ccbe <z_abort_timeout>:
{
 800ccbe:	b570      	push	{r4, r5, r6, lr}
 800ccc0:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800ccc2:	2300      	movs	r3, #0
	__asm__ volatile(
 800ccc4:	f04f 0210 	mov.w	r2, #16
 800ccc8:	f3ef 8611 	mrs	r6, BASEPRI
 800cccc:	f382 8812 	msr	BASEPRI_MAX, r2
 800ccd0:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800ccd4:	f06f 0015 	mvn.w	r0, #21
 800ccd8:	e004      	b.n	800cce4 <z_abort_timeout+0x26>
	__asm__ volatile(
 800ccda:	f386 8811 	msr	BASEPRI, r6
 800ccde:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800cce2:	2301      	movs	r3, #1
 800cce4:	461d      	mov	r5, r3
 800cce6:	b93b      	cbnz	r3, 800ccf8 <z_abort_timeout+0x3a>
 800cce8:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0f5      	beq.n	800ccda <z_abort_timeout+0x1c>
			remove_timeout(to);
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7ff ffb0 	bl	800cc54 <remove_timeout>
			ret = 0;
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	e7f0      	b.n	800ccda <z_abort_timeout+0x1c>
}
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}

0800ccfa <z_timeout_remaining>:
{
 800ccfa:	b538      	push	{r3, r4, r5, lr}
 800ccfc:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800ccfe:	2300      	movs	r3, #0
	__asm__ volatile(
 800cd00:	f04f 0210 	mov.w	r2, #16
 800cd04:	f3ef 8511 	mrs	r5, BASEPRI
 800cd08:	f382 8812 	msr	BASEPRI_MAX, r2
 800cd0c:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
 800cd10:	4618      	mov	r0, r3
 800cd12:	4619      	mov	r1, r3
 800cd14:	e007      	b.n	800cd26 <z_timeout_remaining+0x2c>
		ticks = timeout_rem(timeout);
 800cd16:	4620      	mov	r0, r4
 800cd18:	f7ff ffb3 	bl	800cc82 <timeout_rem>
	__asm__ volatile(
 800cd1c:	f385 8811 	msr	BASEPRI, r5
 800cd20:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800cd24:	2301      	movs	r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0f5      	beq.n	800cd16 <z_timeout_remaining+0x1c>
}
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}

0800cd2c <z_set_timeout_expiry>:
{
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4605      	mov	r5, r0
 800cd30:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800cd32:	2300      	movs	r3, #0
	__asm__ volatile(
 800cd34:	f04f 0210 	mov.w	r2, #16
 800cd38:	f3ef 8611 	mrs	r6, BASEPRI
 800cd3c:	f382 8812 	msr	BASEPRI_MAX, r2
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	e00a      	b.n	800cd5c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800cd46:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800cd48:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800cd4c:	2801      	cmp	r0, #1
 800cd4e:	dd00      	ble.n	800cd52 <z_set_timeout_expiry+0x26>
 800cd50:	b97c      	cbnz	r4, 800cd72 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800cd52:	f386 8811 	msr	BASEPRI, r6
 800cd56:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	461c      	mov	r4, r3
 800cd5e:	b97b      	cbnz	r3, 800cd80 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800cd60:	f7fb ff82 	bl	8008c68 <next_timeout>
			      || (ticks <= next_to);
 800cd64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cd68:	d0ed      	beq.n	800cd46 <z_set_timeout_expiry+0x1a>
 800cd6a:	42a8      	cmp	r0, r5
 800cd6c:	dbec      	blt.n	800cd48 <z_set_timeout_expiry+0x1c>
 800cd6e:	2401      	movs	r4, #1
 800cd70:	e7ea      	b.n	800cd48 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800cd72:	4639      	mov	r1, r7
 800cd74:	42a8      	cmp	r0, r5
 800cd76:	bfa8      	it	ge
 800cd78:	4628      	movge	r0, r5
 800cd7a:	f7fa fb7b 	bl	8007474 <sys_clock_set_timeout>
 800cd7e:	e7e8      	b.n	800cd52 <z_set_timeout_expiry+0x26>
}
 800cd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd82 <sys_clock_tick_get_32>:
{
 800cd82:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800cd84:	f7fc f886 	bl	8008e94 <sys_clock_tick_get>
}
 800cd88:	bd08      	pop	{r3, pc}

0800cd8a <z_impl_k_uptime_ticks>:
{
 800cd8a:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800cd8c:	f7fc f882 	bl	8008e94 <sys_clock_tick_get>
}
 800cd90:	bd08      	pop	{r3, pc}

0800cd92 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800cd92:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800cd94:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800cd9a:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800cd9e:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800cda0:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800cda2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800cda4:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800cda6:	6343      	str	r3, [r0, #52]	; 0x34
}
 800cda8:	4770      	bx	lr

0800cdaa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800cdae:	f7ff ff86 	bl	800ccbe <z_abort_timeout>

	if (inactive) {
 800cdb2:	b9a0      	cbnz	r0, 800cdde <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800cdb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdb6:	b10b      	cbz	r3, 800cdbc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800cdbc:	f104 0018 	add.w	r0, r4, #24
 800cdc0:	f7ff fe9a 	bl	800caf8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800cdc4:	b158      	cbz	r0, 800cdde <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800cdc6:	f7ff fdf7 	bl	800c9b8 <z_ready_thread>
	__asm__ volatile(
 800cdca:	f04f 0310 	mov.w	r3, #16
 800cdce:	f3ef 8011 	mrs	r0, BASEPRI
 800cdd2:	f383 8812 	msr	BASEPRI_MAX, r3
 800cdd6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800cdda:	f7ff fda5 	bl	800c928 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800cdde:	bd10      	pop	{r4, pc}

0800cde0 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800cde0:	b108      	cbz	r0, 800cde6 <poller_thread+0x6>
 800cde2:	3860      	subs	r0, #96	; 0x60
 800cde4:	4770      	bx	lr
}
 800cde6:	4770      	bx	lr

0800cde8 <signal_poller>:
{
 800cde8:	b538      	push	{r3, r4, r5, lr}
 800cdea:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800cdec:	6880      	ldr	r0, [r0, #8]
 800cdee:	f7ff fff7 	bl	800cde0 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800cdf2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800cdf4:	f013 0f02 	tst.w	r3, #2
 800cdf8:	d024      	beq.n	800ce44 <signal_poller+0x5c>
 800cdfa:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800cdfc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800cdfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce04:	bf08      	it	eq
 800ce06:	f112 0f02 	cmneq.w	r2, #2
 800ce0a:	d01d      	beq.n	800ce48 <signal_poller+0x60>
	z_unpend_thread(thread);
 800ce0c:	f7ff fda9 	bl	800c962 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800ce10:	2d08      	cmp	r5, #8
 800ce12:	d009      	beq.n	800ce28 <signal_poller+0x40>
 800ce14:	2300      	movs	r3, #0
 800ce16:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800ce18:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800ce1a:	f013 0f1f 	tst.w	r3, #31
 800ce1e:	d108      	bne.n	800ce32 <signal_poller+0x4a>
	return node->next != NULL;
 800ce20:	69a3      	ldr	r3, [r4, #24]
 800ce22:	b123      	cbz	r3, 800ce2e <signal_poller+0x46>
 800ce24:	2300      	movs	r3, #0
 800ce26:	e005      	b.n	800ce34 <signal_poller+0x4c>
 800ce28:	f06f 0303 	mvn.w	r3, #3
 800ce2c:	e7f3      	b.n	800ce16 <signal_poller+0x2e>
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e000      	b.n	800ce34 <signal_poller+0x4c>
 800ce32:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800ce34:	b90b      	cbnz	r3, 800ce3a <signal_poller+0x52>
		return 0;
 800ce36:	2000      	movs	r0, #0
 800ce38:	e005      	b.n	800ce46 <signal_poller+0x5e>
	z_ready_thread(thread);
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f7ff fdbc 	bl	800c9b8 <z_ready_thread>
	return 0;
 800ce40:	2000      	movs	r0, #0
 800ce42:	e000      	b.n	800ce46 <signal_poller+0x5e>
		return 0;
 800ce44:	2000      	movs	r0, #0
}
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800ce48:	f06f 000a 	mvn.w	r0, #10
 800ce4c:	e7fb      	b.n	800ce46 <signal_poller+0x5e>

0800ce4e <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800ce4e:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800ce50:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800ce52:	7823      	ldrb	r3, [r4, #0]
 800ce54:	b173      	cbz	r3, 800ce74 <signal_triggered_work+0x26>
 800ce56:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ce5a:	b15d      	cbz	r5, 800ce74 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800ce5c:	f1a4 0614 	sub.w	r6, r4, #20
 800ce60:	f104 0014 	add.w	r0, r4, #20
 800ce64:	f7ff ff2b 	bl	800ccbe <z_abort_timeout>
		twork->poll_result = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7ff fd0c 	bl	800c88c <k_work_submit_to_queue>
	}

	return 0;
}
 800ce74:	2000      	movs	r0, #0
 800ce76:	bd70      	pop	{r4, r5, r6, pc}

0800ce78 <signal_poll_event>:
{
 800ce78:	b570      	push	{r4, r5, r6, lr}
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800ce7e:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800ce80:	b1d6      	cbz	r6, 800ceb8 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800ce82:	7873      	ldrb	r3, [r6, #1]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d00d      	beq.n	800cea4 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d012      	beq.n	800ceb2 <signal_poll_event+0x3a>
		poller->is_polling = false;
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800ce90:	2300      	movs	r3, #0
 800ce92:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800ce94:	68e3      	ldr	r3, [r4, #12]
 800ce96:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800ce9a:	430d      	orrs	r5, r1
 800ce9c:	f365 3352 	bfi	r3, r5, #13, #6
 800cea0:	60e3      	str	r3, [r4, #12]
}
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800cea4:	f7ff ffa0 	bl	800cde8 <signal_poller>
		poller->is_polling = false;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800ceac:	4298      	cmp	r0, r3
 800ceae:	daef      	bge.n	800ce90 <signal_poll_event+0x18>
 800ceb0:	e7f7      	b.n	800cea2 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800ceb2:	f7ff ffcc 	bl	800ce4e <signal_triggered_work>
 800ceb6:	e7f7      	b.n	800cea8 <signal_poll_event+0x30>
	int retcode = 0;
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e7e9      	b.n	800ce90 <signal_poll_event+0x18>

0800cebc <z_handle_obj_poll_events>:
{
 800cebc:	b508      	push	{r3, lr}
 800cebe:	4603      	mov	r3, r0
	return list->head == list;
 800cec0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800cec2:	4283      	cmp	r3, r0
 800cec4:	d009      	beq.n	800ceda <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800cec6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800cec8:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800ceca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800cecc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800ced2:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800ced4:	b108      	cbz	r0, 800ceda <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800ced6:	f7ff ffcf 	bl	800ce78 <signal_poll_event>
}
 800ceda:	bd08      	pop	{r3, pc}

0800cedc <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800cedc:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800cede:	4770      	bx	lr

0800cee0 <k_heap_init>:
{
 800cee0:	b510      	push	{r4, lr}
 800cee2:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800cee6:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800cee8:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800ceea:	f7fe f858 	bl	800af9e <sys_heap_init>
}
 800ceee:	bd10      	pop	{r4, pc}

0800cef0 <memcpy>:
 800cef0:	440a      	add	r2, r1
 800cef2:	4291      	cmp	r1, r2
 800cef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cef8:	d100      	bne.n	800cefc <memcpy+0xc>
 800cefa:	4770      	bx	lr
 800cefc:	b510      	push	{r4, lr}
 800cefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf02:	4291      	cmp	r1, r2
 800cf04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf08:	d1f9      	bne.n	800cefe <memcpy+0xe>
 800cf0a:	bd10      	pop	{r4, pc}

0800cf0c <memset>:
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	4402      	add	r2, r0
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d100      	bne.n	800cf16 <memset+0xa>
 800cf14:	4770      	bx	lr
 800cf16:	f803 1b01 	strb.w	r1, [r3], #1
 800cf1a:	e7f9      	b.n	800cf10 <memset+0x4>

0800cf1c <__cvt>:
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf22:	461f      	mov	r7, r3
 800cf24:	bfbb      	ittet	lt
 800cf26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cf2a:	461f      	movlt	r7, r3
 800cf2c:	2300      	movge	r3, #0
 800cf2e:	232d      	movlt	r3, #45	; 0x2d
 800cf30:	b088      	sub	sp, #32
 800cf32:	4614      	mov	r4, r2
 800cf34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800cf38:	7013      	strb	r3, [r2, #0]
 800cf3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800cf40:	f023 0820 	bic.w	r8, r3, #32
 800cf44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf48:	d005      	beq.n	800cf56 <__cvt+0x3a>
 800cf4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf4e:	d100      	bne.n	800cf52 <__cvt+0x36>
 800cf50:	3501      	adds	r5, #1
 800cf52:	2302      	movs	r3, #2
 800cf54:	e000      	b.n	800cf58 <__cvt+0x3c>
 800cf56:	2303      	movs	r3, #3
 800cf58:	aa07      	add	r2, sp, #28
 800cf5a:	9204      	str	r2, [sp, #16]
 800cf5c:	aa06      	add	r2, sp, #24
 800cf5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cf62:	e9cd 3500 	strd	r3, r5, [sp]
 800cf66:	4622      	mov	r2, r4
 800cf68:	463b      	mov	r3, r7
 800cf6a:	f7f3 fef1 	bl	8000d50 <_dtoa_r>
 800cf6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf72:	4606      	mov	r6, r0
 800cf74:	d102      	bne.n	800cf7c <__cvt+0x60>
 800cf76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf78:	07db      	lsls	r3, r3, #31
 800cf7a:	d522      	bpl.n	800cfc2 <__cvt+0xa6>
 800cf7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf80:	eb06 0905 	add.w	r9, r6, r5
 800cf84:	d110      	bne.n	800cfa8 <__cvt+0x8c>
 800cf86:	7833      	ldrb	r3, [r6, #0]
 800cf88:	2b30      	cmp	r3, #48	; 0x30
 800cf8a:	d10a      	bne.n	800cfa2 <__cvt+0x86>
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2300      	movs	r3, #0
 800cf90:	4620      	mov	r0, r4
 800cf92:	4639      	mov	r1, r7
 800cf94:	f7f3 fd06 	bl	80009a4 <__aeabi_dcmpeq>
 800cf98:	b918      	cbnz	r0, 800cfa2 <__cvt+0x86>
 800cf9a:	f1c5 0501 	rsb	r5, r5, #1
 800cf9e:	f8ca 5000 	str.w	r5, [sl]
 800cfa2:	f8da 3000 	ldr.w	r3, [sl]
 800cfa6:	4499      	add	r9, r3
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4620      	mov	r0, r4
 800cfae:	4639      	mov	r1, r7
 800cfb0:	f7f3 fcf8 	bl	80009a4 <__aeabi_dcmpeq>
 800cfb4:	b108      	cbz	r0, 800cfba <__cvt+0x9e>
 800cfb6:	f8cd 901c 	str.w	r9, [sp, #28]
 800cfba:	2230      	movs	r2, #48	; 0x30
 800cfbc:	9b07      	ldr	r3, [sp, #28]
 800cfbe:	454b      	cmp	r3, r9
 800cfc0:	d307      	bcc.n	800cfd2 <__cvt+0xb6>
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	9b07      	ldr	r3, [sp, #28]
 800cfc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cfc8:	1b9b      	subs	r3, r3, r6
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	b008      	add	sp, #32
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	1c59      	adds	r1, r3, #1
 800cfd4:	9107      	str	r1, [sp, #28]
 800cfd6:	701a      	strb	r2, [r3, #0]
 800cfd8:	e7f0      	b.n	800cfbc <__cvt+0xa0>

0800cfda <__exponent>:
 800cfda:	4603      	mov	r3, r0
 800cfdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfde:	2900      	cmp	r1, #0
 800cfe0:	f803 2b02 	strb.w	r2, [r3], #2
 800cfe4:	bfb6      	itet	lt
 800cfe6:	222d      	movlt	r2, #45	; 0x2d
 800cfe8:	222b      	movge	r2, #43	; 0x2b
 800cfea:	4249      	neglt	r1, r1
 800cfec:	2909      	cmp	r1, #9
 800cfee:	7042      	strb	r2, [r0, #1]
 800cff0:	dd2b      	ble.n	800d04a <__exponent+0x70>
 800cff2:	f10d 0407 	add.w	r4, sp, #7
 800cff6:	46a4      	mov	ip, r4
 800cff8:	270a      	movs	r7, #10
 800cffa:	fb91 f6f7 	sdiv	r6, r1, r7
 800cffe:	460a      	mov	r2, r1
 800d000:	46a6      	mov	lr, r4
 800d002:	fb07 1516 	mls	r5, r7, r6, r1
 800d006:	2a63      	cmp	r2, #99	; 0x63
 800d008:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d00c:	4631      	mov	r1, r6
 800d00e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d016:	dcf0      	bgt.n	800cffa <__exponent+0x20>
 800d018:	3130      	adds	r1, #48	; 0x30
 800d01a:	f1ae 0502 	sub.w	r5, lr, #2
 800d01e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d022:	4629      	mov	r1, r5
 800d024:	1c44      	adds	r4, r0, #1
 800d026:	4561      	cmp	r1, ip
 800d028:	d30a      	bcc.n	800d040 <__exponent+0x66>
 800d02a:	f10d 0209 	add.w	r2, sp, #9
 800d02e:	eba2 020e 	sub.w	r2, r2, lr
 800d032:	4565      	cmp	r5, ip
 800d034:	bf88      	it	hi
 800d036:	2200      	movhi	r2, #0
 800d038:	4413      	add	r3, r2
 800d03a:	1a18      	subs	r0, r3, r0
 800d03c:	b003      	add	sp, #12
 800d03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d040:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d044:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d048:	e7ed      	b.n	800d026 <__exponent+0x4c>
 800d04a:	2330      	movs	r3, #48	; 0x30
 800d04c:	3130      	adds	r1, #48	; 0x30
 800d04e:	7083      	strb	r3, [r0, #2]
 800d050:	70c1      	strb	r1, [r0, #3]
 800d052:	1d03      	adds	r3, r0, #4
 800d054:	e7f1      	b.n	800d03a <__exponent+0x60>

0800d056 <_printf_common>:
 800d056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d05a:	4616      	mov	r6, r2
 800d05c:	4699      	mov	r9, r3
 800d05e:	688a      	ldr	r2, [r1, #8]
 800d060:	690b      	ldr	r3, [r1, #16]
 800d062:	4607      	mov	r7, r0
 800d064:	4293      	cmp	r3, r2
 800d066:	bfb8      	it	lt
 800d068:	4613      	movlt	r3, r2
 800d06a:	6033      	str	r3, [r6, #0]
 800d06c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d070:	460c      	mov	r4, r1
 800d072:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d076:	b10a      	cbz	r2, 800d07c <_printf_common+0x26>
 800d078:	3301      	adds	r3, #1
 800d07a:	6033      	str	r3, [r6, #0]
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	0699      	lsls	r1, r3, #26
 800d080:	bf42      	ittt	mi
 800d082:	6833      	ldrmi	r3, [r6, #0]
 800d084:	3302      	addmi	r3, #2
 800d086:	6033      	strmi	r3, [r6, #0]
 800d088:	6825      	ldr	r5, [r4, #0]
 800d08a:	f015 0506 	ands.w	r5, r5, #6
 800d08e:	d106      	bne.n	800d09e <_printf_common+0x48>
 800d090:	f104 0a19 	add.w	sl, r4, #25
 800d094:	68e3      	ldr	r3, [r4, #12]
 800d096:	6832      	ldr	r2, [r6, #0]
 800d098:	1a9b      	subs	r3, r3, r2
 800d09a:	42ab      	cmp	r3, r5
 800d09c:	dc28      	bgt.n	800d0f0 <_printf_common+0x9a>
 800d09e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0a2:	1e13      	subs	r3, r2, #0
 800d0a4:	6822      	ldr	r2, [r4, #0]
 800d0a6:	bf18      	it	ne
 800d0a8:	2301      	movne	r3, #1
 800d0aa:	0692      	lsls	r2, r2, #26
 800d0ac:	d42d      	bmi.n	800d10a <_printf_common+0xb4>
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0b6:	47c0      	blx	r8
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d020      	beq.n	800d0fe <_printf_common+0xa8>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	68e5      	ldr	r5, [r4, #12]
 800d0c0:	f003 0306 	and.w	r3, r3, #6
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	bf18      	it	ne
 800d0c8:	2500      	movne	r5, #0
 800d0ca:	6832      	ldr	r2, [r6, #0]
 800d0cc:	f04f 0600 	mov.w	r6, #0
 800d0d0:	68a3      	ldr	r3, [r4, #8]
 800d0d2:	bf08      	it	eq
 800d0d4:	1aad      	subeq	r5, r5, r2
 800d0d6:	6922      	ldr	r2, [r4, #16]
 800d0d8:	bf08      	it	eq
 800d0da:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	bfc4      	itt	gt
 800d0e2:	1a9b      	subgt	r3, r3, r2
 800d0e4:	18ed      	addgt	r5, r5, r3
 800d0e6:	341a      	adds	r4, #26
 800d0e8:	42b5      	cmp	r5, r6
 800d0ea:	d11a      	bne.n	800d122 <_printf_common+0xcc>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e008      	b.n	800d102 <_printf_common+0xac>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	47c0      	blx	r8
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d103      	bne.n	800d106 <_printf_common+0xb0>
 800d0fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d106:	3501      	adds	r5, #1
 800d108:	e7c4      	b.n	800d094 <_printf_common+0x3e>
 800d10a:	2030      	movs	r0, #48	; 0x30
 800d10c:	18e1      	adds	r1, r4, r3
 800d10e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d118:	4422      	add	r2, r4
 800d11a:	3302      	adds	r3, #2
 800d11c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d120:	e7c5      	b.n	800d0ae <_printf_common+0x58>
 800d122:	2301      	movs	r3, #1
 800d124:	4622      	mov	r2, r4
 800d126:	4649      	mov	r1, r9
 800d128:	4638      	mov	r0, r7
 800d12a:	47c0      	blx	r8
 800d12c:	3001      	adds	r0, #1
 800d12e:	d0e6      	beq.n	800d0fe <_printf_common+0xa8>
 800d130:	3601      	adds	r6, #1
 800d132:	e7d9      	b.n	800d0e8 <_printf_common+0x92>

0800d134 <strncpy>:
 800d134:	4603      	mov	r3, r0
 800d136:	b510      	push	{r4, lr}
 800d138:	3901      	subs	r1, #1
 800d13a:	b132      	cbz	r2, 800d14a <strncpy+0x16>
 800d13c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d140:	3a01      	subs	r2, #1
 800d142:	f803 4b01 	strb.w	r4, [r3], #1
 800d146:	2c00      	cmp	r4, #0
 800d148:	d1f7      	bne.n	800d13a <strncpy+0x6>
 800d14a:	2100      	movs	r1, #0
 800d14c:	441a      	add	r2, r3
 800d14e:	4293      	cmp	r3, r2
 800d150:	d100      	bne.n	800d154 <strncpy+0x20>
 800d152:	bd10      	pop	{r4, pc}
 800d154:	f803 1b01 	strb.w	r1, [r3], #1
 800d158:	e7f9      	b.n	800d14e <strncpy+0x1a>

0800d15a <strnlen>:
 800d15a:	4602      	mov	r2, r0
 800d15c:	b510      	push	{r4, lr}
 800d15e:	4401      	add	r1, r0
 800d160:	428a      	cmp	r2, r1
 800d162:	4613      	mov	r3, r2
 800d164:	d003      	beq.n	800d16e <strnlen+0x14>
 800d166:	781c      	ldrb	r4, [r3, #0]
 800d168:	3201      	adds	r2, #1
 800d16a:	2c00      	cmp	r4, #0
 800d16c:	d1f8      	bne.n	800d160 <strnlen+0x6>
 800d16e:	1a18      	subs	r0, r3, r0
 800d170:	bd10      	pop	{r4, pc}

0800d172 <quorem>:
 800d172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d176:	6903      	ldr	r3, [r0, #16]
 800d178:	690c      	ldr	r4, [r1, #16]
 800d17a:	4607      	mov	r7, r0
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	f2c0 8082 	blt.w	800d286 <quorem+0x114>
 800d182:	3c01      	subs	r4, #1
 800d184:	f100 0514 	add.w	r5, r0, #20
 800d188:	f101 0814 	add.w	r8, r1, #20
 800d18c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d190:	9301      	str	r3, [sp, #4]
 800d192:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d19a:	3301      	adds	r3, #1
 800d19c:	429a      	cmp	r2, r3
 800d19e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1aa:	d331      	bcc.n	800d210 <quorem+0x9e>
 800d1ac:	f04f 0e00 	mov.w	lr, #0
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	46ac      	mov	ip, r5
 800d1b4:	46f2      	mov	sl, lr
 800d1b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1ba:	b293      	uxth	r3, r2
 800d1bc:	fb06 e303 	mla	r3, r6, r3, lr
 800d1c0:	0c12      	lsrs	r2, r2, #16
 800d1c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	fb06 e202 	mla	r2, r6, r2, lr
 800d1cc:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d0:	f8dc a000 	ldr.w	sl, [ip]
 800d1d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1d8:	fa1f fa8a 	uxth.w	sl, sl
 800d1dc:	4453      	add	r3, sl
 800d1de:	f8dc a000 	ldr.w	sl, [ip]
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1f2:	4581      	cmp	r9, r0
 800d1f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1f8:	f84c 3b04 	str.w	r3, [ip], #4
 800d1fc:	d2db      	bcs.n	800d1b6 <quorem+0x44>
 800d1fe:	f855 300b 	ldr.w	r3, [r5, fp]
 800d202:	b92b      	cbnz	r3, 800d210 <quorem+0x9e>
 800d204:	9b01      	ldr	r3, [sp, #4]
 800d206:	3b04      	subs	r3, #4
 800d208:	429d      	cmp	r5, r3
 800d20a:	461a      	mov	r2, r3
 800d20c:	d32f      	bcc.n	800d26e <quorem+0xfc>
 800d20e:	613c      	str	r4, [r7, #16]
 800d210:	4638      	mov	r0, r7
 800d212:	f000 f895 	bl	800d340 <__mcmp>
 800d216:	2800      	cmp	r0, #0
 800d218:	db25      	blt.n	800d266 <quorem+0xf4>
 800d21a:	4628      	mov	r0, r5
 800d21c:	f04f 0c00 	mov.w	ip, #0
 800d220:	3601      	adds	r6, #1
 800d222:	f858 1b04 	ldr.w	r1, [r8], #4
 800d226:	f8d0 e000 	ldr.w	lr, [r0]
 800d22a:	b28b      	uxth	r3, r1
 800d22c:	ebac 0303 	sub.w	r3, ip, r3
 800d230:	fa1f f28e 	uxth.w	r2, lr
 800d234:	4413      	add	r3, r2
 800d236:	0c0a      	lsrs	r2, r1, #16
 800d238:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d23c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d240:	b29b      	uxth	r3, r3
 800d242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d246:	45c1      	cmp	r9, r8
 800d248:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d24c:	f840 3b04 	str.w	r3, [r0], #4
 800d250:	d2e7      	bcs.n	800d222 <quorem+0xb0>
 800d252:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d25a:	b922      	cbnz	r2, 800d266 <quorem+0xf4>
 800d25c:	3b04      	subs	r3, #4
 800d25e:	429d      	cmp	r5, r3
 800d260:	461a      	mov	r2, r3
 800d262:	d30a      	bcc.n	800d27a <quorem+0x108>
 800d264:	613c      	str	r4, [r7, #16]
 800d266:	4630      	mov	r0, r6
 800d268:	b003      	add	sp, #12
 800d26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26e:	6812      	ldr	r2, [r2, #0]
 800d270:	3b04      	subs	r3, #4
 800d272:	2a00      	cmp	r2, #0
 800d274:	d1cb      	bne.n	800d20e <quorem+0x9c>
 800d276:	3c01      	subs	r4, #1
 800d278:	e7c6      	b.n	800d208 <quorem+0x96>
 800d27a:	6812      	ldr	r2, [r2, #0]
 800d27c:	3b04      	subs	r3, #4
 800d27e:	2a00      	cmp	r2, #0
 800d280:	d1f0      	bne.n	800d264 <quorem+0xf2>
 800d282:	3c01      	subs	r4, #1
 800d284:	e7eb      	b.n	800d25e <quorem+0xec>
 800d286:	2000      	movs	r0, #0
 800d288:	e7ee      	b.n	800d268 <quorem+0xf6>

0800d28a <memchr>:
 800d28a:	4603      	mov	r3, r0
 800d28c:	b510      	push	{r4, lr}
 800d28e:	b2c9      	uxtb	r1, r1
 800d290:	4402      	add	r2, r0
 800d292:	4293      	cmp	r3, r2
 800d294:	4618      	mov	r0, r3
 800d296:	d101      	bne.n	800d29c <memchr+0x12>
 800d298:	2000      	movs	r0, #0
 800d29a:	e003      	b.n	800d2a4 <memchr+0x1a>
 800d29c:	7804      	ldrb	r4, [r0, #0]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	428c      	cmp	r4, r1
 800d2a2:	d1f6      	bne.n	800d292 <memchr+0x8>
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__hi0bits>:
 800d2a6:	0c02      	lsrs	r2, r0, #16
 800d2a8:	0412      	lsls	r2, r2, #16
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	b9ca      	cbnz	r2, 800d2e2 <__hi0bits+0x3c>
 800d2ae:	0403      	lsls	r3, r0, #16
 800d2b0:	2010      	movs	r0, #16
 800d2b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d2b6:	bf04      	itt	eq
 800d2b8:	021b      	lsleq	r3, r3, #8
 800d2ba:	3008      	addeq	r0, #8
 800d2bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2c0:	bf04      	itt	eq
 800d2c2:	011b      	lsleq	r3, r3, #4
 800d2c4:	3004      	addeq	r0, #4
 800d2c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2ca:	bf04      	itt	eq
 800d2cc:	009b      	lsleq	r3, r3, #2
 800d2ce:	3002      	addeq	r0, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	db05      	blt.n	800d2e0 <__hi0bits+0x3a>
 800d2d4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d2d8:	f100 0001 	add.w	r0, r0, #1
 800d2dc:	bf08      	it	eq
 800d2de:	2020      	moveq	r0, #32
 800d2e0:	4770      	bx	lr
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	e7e5      	b.n	800d2b2 <__hi0bits+0xc>

0800d2e6 <__lo0bits>:
 800d2e6:	6803      	ldr	r3, [r0, #0]
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f013 0007 	ands.w	r0, r3, #7
 800d2ee:	d00b      	beq.n	800d308 <__lo0bits+0x22>
 800d2f0:	07d9      	lsls	r1, r3, #31
 800d2f2:	d421      	bmi.n	800d338 <__lo0bits+0x52>
 800d2f4:	0798      	lsls	r0, r3, #30
 800d2f6:	bf49      	itett	mi
 800d2f8:	085b      	lsrmi	r3, r3, #1
 800d2fa:	089b      	lsrpl	r3, r3, #2
 800d2fc:	2001      	movmi	r0, #1
 800d2fe:	6013      	strmi	r3, [r2, #0]
 800d300:	bf5c      	itt	pl
 800d302:	2002      	movpl	r0, #2
 800d304:	6013      	strpl	r3, [r2, #0]
 800d306:	4770      	bx	lr
 800d308:	b299      	uxth	r1, r3
 800d30a:	b909      	cbnz	r1, 800d310 <__lo0bits+0x2a>
 800d30c:	2010      	movs	r0, #16
 800d30e:	0c1b      	lsrs	r3, r3, #16
 800d310:	b2d9      	uxtb	r1, r3
 800d312:	b909      	cbnz	r1, 800d318 <__lo0bits+0x32>
 800d314:	3008      	adds	r0, #8
 800d316:	0a1b      	lsrs	r3, r3, #8
 800d318:	0719      	lsls	r1, r3, #28
 800d31a:	bf04      	itt	eq
 800d31c:	091b      	lsreq	r3, r3, #4
 800d31e:	3004      	addeq	r0, #4
 800d320:	0799      	lsls	r1, r3, #30
 800d322:	bf04      	itt	eq
 800d324:	089b      	lsreq	r3, r3, #2
 800d326:	3002      	addeq	r0, #2
 800d328:	07d9      	lsls	r1, r3, #31
 800d32a:	d403      	bmi.n	800d334 <__lo0bits+0x4e>
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	f100 0001 	add.w	r0, r0, #1
 800d332:	d003      	beq.n	800d33c <__lo0bits+0x56>
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	4770      	bx	lr
 800d338:	2000      	movs	r0, #0
 800d33a:	4770      	bx	lr
 800d33c:	2020      	movs	r0, #32
 800d33e:	4770      	bx	lr

0800d340 <__mcmp>:
 800d340:	4603      	mov	r3, r0
 800d342:	690a      	ldr	r2, [r1, #16]
 800d344:	6900      	ldr	r0, [r0, #16]
 800d346:	b530      	push	{r4, r5, lr}
 800d348:	1a80      	subs	r0, r0, r2
 800d34a:	d10d      	bne.n	800d368 <__mcmp+0x28>
 800d34c:	3314      	adds	r3, #20
 800d34e:	3114      	adds	r1, #20
 800d350:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d35c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d360:	4295      	cmp	r5, r2
 800d362:	d002      	beq.n	800d36a <__mcmp+0x2a>
 800d364:	d304      	bcc.n	800d370 <__mcmp+0x30>
 800d366:	2001      	movs	r0, #1
 800d368:	bd30      	pop	{r4, r5, pc}
 800d36a:	42a3      	cmp	r3, r4
 800d36c:	d3f4      	bcc.n	800d358 <__mcmp+0x18>
 800d36e:	e7fb      	b.n	800d368 <__mcmp+0x28>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d374:	e7f8      	b.n	800d368 <__mcmp+0x28>

0800d376 <_calloc_r>:
 800d376:	b538      	push	{r3, r4, r5, lr}
 800d378:	fb02 f501 	mul.w	r5, r2, r1
 800d37c:	4629      	mov	r1, r5
 800d37e:	f7fc f9c1 	bl	8009704 <_malloc_r>
 800d382:	4604      	mov	r4, r0
 800d384:	b118      	cbz	r0, 800d38e <_calloc_r+0x18>
 800d386:	462a      	mov	r2, r5
 800d388:	2100      	movs	r1, #0
 800d38a:	f7ff fdbf 	bl	800cf0c <memset>
 800d38e:	4620      	mov	r0, r4
 800d390:	bd38      	pop	{r3, r4, r5, pc}

0800d392 <__ascii_mbtowc>:
 800d392:	b082      	sub	sp, #8
 800d394:	b901      	cbnz	r1, 800d398 <__ascii_mbtowc+0x6>
 800d396:	a901      	add	r1, sp, #4
 800d398:	b142      	cbz	r2, 800d3ac <__ascii_mbtowc+0x1a>
 800d39a:	b14b      	cbz	r3, 800d3b0 <__ascii_mbtowc+0x1e>
 800d39c:	7813      	ldrb	r3, [r2, #0]
 800d39e:	600b      	str	r3, [r1, #0]
 800d3a0:	7812      	ldrb	r2, [r2, #0]
 800d3a2:	1e10      	subs	r0, r2, #0
 800d3a4:	bf18      	it	ne
 800d3a6:	2001      	movne	r0, #1
 800d3a8:	b002      	add	sp, #8
 800d3aa:	4770      	bx	lr
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	e7fb      	b.n	800d3a8 <__ascii_mbtowc+0x16>
 800d3b0:	f06f 0001 	mvn.w	r0, #1
 800d3b4:	e7f8      	b.n	800d3a8 <__ascii_mbtowc+0x16>

0800d3b6 <__sfputc_r>:
 800d3b6:	6893      	ldr	r3, [r2, #8]
 800d3b8:	b410      	push	{r4}
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	6093      	str	r3, [r2, #8]
 800d3c0:	da07      	bge.n	800d3d2 <__sfputc_r+0x1c>
 800d3c2:	6994      	ldr	r4, [r2, #24]
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	db01      	blt.n	800d3cc <__sfputc_r+0x16>
 800d3c8:	290a      	cmp	r1, #10
 800d3ca:	d102      	bne.n	800d3d2 <__sfputc_r+0x1c>
 800d3cc:	bc10      	pop	{r4}
 800d3ce:	f7fd b9dd 	b.w	800a78c <__swbuf_r>
 800d3d2:	6813      	ldr	r3, [r2, #0]
 800d3d4:	1c58      	adds	r0, r3, #1
 800d3d6:	6010      	str	r0, [r2, #0]
 800d3d8:	7019      	strb	r1, [r3, #0]
 800d3da:	4608      	mov	r0, r1
 800d3dc:	bc10      	pop	{r4}
 800d3de:	4770      	bx	lr

0800d3e0 <__sfputs_r>:
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	4606      	mov	r6, r0
 800d3e4:	460f      	mov	r7, r1
 800d3e6:	4614      	mov	r4, r2
 800d3e8:	18d5      	adds	r5, r2, r3
 800d3ea:	42ac      	cmp	r4, r5
 800d3ec:	d101      	bne.n	800d3f2 <__sfputs_r+0x12>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	e007      	b.n	800d402 <__sfputs_r+0x22>
 800d3f2:	463a      	mov	r2, r7
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fa:	f7ff ffdc 	bl	800d3b6 <__sfputc_r>
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	d1f3      	bne.n	800d3ea <__sfputs_r+0xa>
 800d402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d404 <__ascii_wctomb>:
 800d404:	4603      	mov	r3, r0
 800d406:	4608      	mov	r0, r1
 800d408:	b141      	cbz	r1, 800d41c <__ascii_wctomb+0x18>
 800d40a:	2aff      	cmp	r2, #255	; 0xff
 800d40c:	d904      	bls.n	800d418 <__ascii_wctomb+0x14>
 800d40e:	228a      	movs	r2, #138	; 0x8a
 800d410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	4770      	bx	lr
 800d418:	2001      	movs	r0, #1
 800d41a:	700a      	strb	r2, [r1, #0]
 800d41c:	4770      	bx	lr

0800d41e <abort>:
 800d41e:	2006      	movs	r0, #6
 800d420:	b508      	push	{r3, lr}
 800d422:	f7fd fc31 	bl	800ac88 <raise>
 800d426:	2001      	movs	r0, #1
 800d428:	f7f7 f864 	bl	80044f4 <_exit>

0800d42c <__sfmoreglue>:
 800d42c:	2268      	movs	r2, #104	; 0x68
 800d42e:	b570      	push	{r4, r5, r6, lr}
 800d430:	1e4d      	subs	r5, r1, #1
 800d432:	4355      	muls	r5, r2
 800d434:	460e      	mov	r6, r1
 800d436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d43a:	f7fc f963 	bl	8009704 <_malloc_r>
 800d43e:	4604      	mov	r4, r0
 800d440:	b140      	cbz	r0, 800d454 <__sfmoreglue+0x28>
 800d442:	2100      	movs	r1, #0
 800d444:	e9c0 1600 	strd	r1, r6, [r0]
 800d448:	300c      	adds	r0, #12
 800d44a:	60a0      	str	r0, [r4, #8]
 800d44c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d450:	f7ff fd5c 	bl	800cf0c <memset>
 800d454:	4620      	mov	r0, r4
 800d456:	bd70      	pop	{r4, r5, r6, pc}

0800d458 <_fwalk_reent>:
 800d458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d45c:	4606      	mov	r6, r0
 800d45e:	4688      	mov	r8, r1
 800d460:	2700      	movs	r7, #0
 800d462:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d46a:	f1b9 0901 	subs.w	r9, r9, #1
 800d46e:	d505      	bpl.n	800d47c <_fwalk_reent+0x24>
 800d470:	6824      	ldr	r4, [r4, #0]
 800d472:	2c00      	cmp	r4, #0
 800d474:	d1f7      	bne.n	800d466 <_fwalk_reent+0xe>
 800d476:	4638      	mov	r0, r7
 800d478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d47c:	89ab      	ldrh	r3, [r5, #12]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d907      	bls.n	800d492 <_fwalk_reent+0x3a>
 800d482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d486:	3301      	adds	r3, #1
 800d488:	d003      	beq.n	800d492 <_fwalk_reent+0x3a>
 800d48a:	4629      	mov	r1, r5
 800d48c:	4630      	mov	r0, r6
 800d48e:	47c0      	blx	r8
 800d490:	4307      	orrs	r7, r0
 800d492:	3568      	adds	r5, #104	; 0x68
 800d494:	e7e9      	b.n	800d46a <_fwalk_reent+0x12>

0800d496 <__swhatbuf_r>:
 800d496:	b570      	push	{r4, r5, r6, lr}
 800d498:	460e      	mov	r6, r1
 800d49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d49e:	4614      	mov	r4, r2
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	461d      	mov	r5, r3
 800d4a4:	b096      	sub	sp, #88	; 0x58
 800d4a6:	da08      	bge.n	800d4ba <__swhatbuf_r+0x24>
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4ae:	602a      	str	r2, [r5, #0]
 800d4b0:	061a      	lsls	r2, r3, #24
 800d4b2:	d410      	bmi.n	800d4d6 <__swhatbuf_r+0x40>
 800d4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4b8:	e00e      	b.n	800d4d8 <__swhatbuf_r+0x42>
 800d4ba:	466a      	mov	r2, sp
 800d4bc:	f7fd fc20 	bl	800ad00 <_fstat_r>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	dbf1      	blt.n	800d4a8 <__swhatbuf_r+0x12>
 800d4c4:	9a01      	ldr	r2, [sp, #4]
 800d4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d4ce:	425a      	negs	r2, r3
 800d4d0:	415a      	adcs	r2, r3
 800d4d2:	602a      	str	r2, [r5, #0]
 800d4d4:	e7ee      	b.n	800d4b4 <__swhatbuf_r+0x1e>
 800d4d6:	2340      	movs	r3, #64	; 0x40
 800d4d8:	2000      	movs	r0, #0
 800d4da:	6023      	str	r3, [r4, #0]
 800d4dc:	b016      	add	sp, #88	; 0x58
 800d4de:	bd70      	pop	{r4, r5, r6, pc}

0800d4e0 <_raise_r>:
 800d4e0:	291f      	cmp	r1, #31
 800d4e2:	b538      	push	{r3, r4, r5, lr}
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	d904      	bls.n	800d4f4 <_raise_r+0x14>
 800d4ea:	2316      	movs	r3, #22
 800d4ec:	6003      	str	r3, [r0, #0]
 800d4ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4f2:	bd38      	pop	{r3, r4, r5, pc}
 800d4f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4f6:	b112      	cbz	r2, 800d4fe <_raise_r+0x1e>
 800d4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4fc:	b94b      	cbnz	r3, 800d512 <_raise_r+0x32>
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 f816 	bl	800d530 <_getpid_r>
 800d504:	462a      	mov	r2, r5
 800d506:	4601      	mov	r1, r0
 800d508:	4620      	mov	r0, r4
 800d50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d50e:	f7fd bbc3 	b.w	800ac98 <_kill_r>
 800d512:	2b01      	cmp	r3, #1
 800d514:	d00a      	beq.n	800d52c <_raise_r+0x4c>
 800d516:	1c59      	adds	r1, r3, #1
 800d518:	d103      	bne.n	800d522 <_raise_r+0x42>
 800d51a:	2316      	movs	r3, #22
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	2001      	movs	r0, #1
 800d520:	e7e7      	b.n	800d4f2 <_raise_r+0x12>
 800d522:	2400      	movs	r4, #0
 800d524:	4628      	mov	r0, r5
 800d526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d52a:	4798      	blx	r3
 800d52c:	2000      	movs	r0, #0
 800d52e:	e7e0      	b.n	800d4f2 <_raise_r+0x12>

0800d530 <_getpid_r>:
 800d530:	f7fe b98d 	b.w	800b84e <_getpid>

0800d534 <__sread>:
 800d534:	b510      	push	{r4, lr}
 800d536:	460c      	mov	r4, r1
 800d538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d53c:	f7fd fc14 	bl	800ad68 <_read_r>
 800d540:	2800      	cmp	r0, #0
 800d542:	bfab      	itete	ge
 800d544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d546:	89a3      	ldrhlt	r3, [r4, #12]
 800d548:	181b      	addge	r3, r3, r0
 800d54a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d54e:	bfac      	ite	ge
 800d550:	6563      	strge	r3, [r4, #84]	; 0x54
 800d552:	81a3      	strhlt	r3, [r4, #12]
 800d554:	bd10      	pop	{r4, pc}

0800d556 <__swrite>:
 800d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55a:	461f      	mov	r7, r3
 800d55c:	898b      	ldrh	r3, [r1, #12]
 800d55e:	4605      	mov	r5, r0
 800d560:	05db      	lsls	r3, r3, #23
 800d562:	460c      	mov	r4, r1
 800d564:	4616      	mov	r6, r2
 800d566:	d505      	bpl.n	800d574 <__swrite+0x1e>
 800d568:	2302      	movs	r3, #2
 800d56a:	2200      	movs	r2, #0
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	f7fd fbe8 	bl	800ad44 <_lseek_r>
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	4632      	mov	r2, r6
 800d578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d57c:	81a3      	strh	r3, [r4, #12]
 800d57e:	4628      	mov	r0, r5
 800d580:	463b      	mov	r3, r7
 800d582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58a:	f7fd bb97 	b.w	800acbc <_write_r>

0800d58e <__sseek>:
 800d58e:	b510      	push	{r4, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d596:	f7fd fbd5 	bl	800ad44 <_lseek_r>
 800d59a:	1c43      	adds	r3, r0, #1
 800d59c:	89a3      	ldrh	r3, [r4, #12]
 800d59e:	bf15      	itete	ne
 800d5a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5aa:	81a3      	strheq	r3, [r4, #12]
 800d5ac:	bf18      	it	ne
 800d5ae:	81a3      	strhne	r3, [r4, #12]
 800d5b0:	bd10      	pop	{r4, pc}

0800d5b2 <__sclose>:
 800d5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b6:	f7fd bb93 	b.w	800ace0 <_close_r>

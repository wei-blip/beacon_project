
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	80 33 00 20 81 5c 00 08 1d e5 00 08 39 5c 00 08     .3. .\......9\..
 8000010:	39 5c 00 08 39 5c 00 08 39 5c 00 08 00 00 00 00     9\..9\..9\......
	...
 800002c:	85 4f 00 08 39 5c 00 08 00 00 00 00 31 4f 00 08     .O..9\......1O..
 800003c:	61 9b 00 08                                         a...

08000040 <_irq_vector_table>:
 8000040:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000050:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000060:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000070:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000080:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000090:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000a0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000b0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000c0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000d0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000e0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 80000f0:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000100:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000110:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000120:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000130:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000140:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000150:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000160:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000170:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000180:	5d 50 00 08 5d 50 00 08 5d 50 00 08 5d 50 00 08     ]P..]P..]P..]P..
 8000190:	5d 50 00 08                                         ]P..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <ws2812_pwm_init>:
                                        size_t num_channels) {
    LOG_ERR("update_channels not implemented");
    return -ENOTSUP;
}

static int ws2812_pwm_init(const struct device *dev) {
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	4605      	mov	r5, r0
    const struct ws2812_pwm_cfg *cfg = dev->config;
 8000e6e:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 8000e70:	6906      	ldr	r6, [r0, #16]
    uint8_t i;

    if (!device_is_ready(cfg->pwm.dev)) {
 8000e72:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
 8000e74:	f00e fc8d 	bl	800f792 <z_device_is_ready>
 8000e78:	b150      	cbz	r0, 8000e90 <ws2812_pwm_init+0x28>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
        return -ENODEV;
    }

    for (i = 0; i < cfg->num_colors; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	7e22      	ldrb	r2, [r4, #24]
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d222      	bcs.n	8000ec8 <ws2812_pwm_init+0x60>
        switch (cfg->color_mapping[i]) {
 8000e82:	69e2      	ldr	r2, [r4, #28]
 8000e84:	5cd2      	ldrb	r2, [r2, r3]
 8000e86:	2a03      	cmp	r2, #3
 8000e88:	d810      	bhi.n	8000eac <ws2812_pwm_init+0x44>
    for (i = 0; i < cfg->num_colors; i++) {
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e7f5      	b.n	8000e7c <ws2812_pwm_init+0x14>
        LOG_ERR("%s: pwm device not ready", cfg->pwm.dev->name);
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <ws2812_pwm_init+0xd0>)
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9000      	str	r0, [sp, #0]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ea2:	f00e fc69 	bl	800f778 <z_log_msg2_runtime_create>
        return -ENODEV;
 8000ea6:	f06f 0012 	mvn.w	r0, #18
 8000eaa:	e03d      	b.n	8000f28 <ws2812_pwm_init+0xc0>
            case LED_COLOR_ID_RED:
            case LED_COLOR_ID_GREEN:
            case LED_COLOR_ID_BLUE:
                break;
            default:
                LOG_ERR("%s: invalid channel to color mapping."
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <ws2812_pwm_init+0xd8>)
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	9000      	str	r0, [sp, #0]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2201      	movs	r2, #1
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ws2812_pwm_init+0xd4>)
 8000ebe:	f00e fc5b 	bl	800f778 <z_log_msg2_runtime_create>
                            "Check the color-mapping DT property",
                            dev->name);
                return -EINVAL;
 8000ec2:	f06f 0015 	mvn.w	r0, #21
 8000ec6:	e02f      	b.n	8000f28 <ws2812_pwm_init+0xc0>
        }
    }

    uint64_t cycles_per_sec;
    pwm_get_cycles_per_sec(cfg->pwm.dev, cfg->pwm.channel, &cycles_per_sec);
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	6861      	ldr	r1, [r4, #4]
						uint32_t pwm,
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
 8000ecc:	6883      	ldr	r3, [r0, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	aa04      	add	r2, sp, #16
 8000ed2:	4798      	blx	r3

    ctx->pwm_period_cycles = (uint32_t)
        ((cfg->period_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ed4:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
 8000ed6:	9804      	ldr	r0, [sp, #16]
 8000ed8:	fba0 0105 	umull	r0, r1, r0, r5
 8000edc:	a314      	add	r3, pc, #80	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000ee6:	fb05 110c 	mla	r1, r5, ip, r1
 8000eea:	f7ff fd77 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_period_cycles = (uint32_t)
 8000eee:	6030      	str	r0, [r6, #0]
    ctx->pwm_t0h_cycles = (uint32_t)
        ((cfg->t0h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000ef0:	8c25      	ldrh	r5, [r4, #32]
 8000ef2:	9804      	ldr	r0, [sp, #16]
 8000ef4:	fba0 0105 	umull	r0, r1, r0, r5
 8000ef8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8000f02:	fb05 110c 	mla	r1, r5, ip, r1
 8000f06:	f7ff fd69 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t0h_cycles = (uint32_t)
 8000f0a:	6070      	str	r0, [r6, #4]
    ctx->pwm_t1h_cycles = (uint32_t)
        ((cfg->t1h_ns * cycles_per_sec) / NSEC_PER_SEC);
 8000f0c:	8c64      	ldrh	r4, [r4, #34]	; 0x22
 8000f0e:	9804      	ldr	r0, [sp, #16]
 8000f10:	fba0 0104 	umull	r0, r1, r0, r4
 8000f14:	a306      	add	r3, pc, #24	; (adr r3, 8000f30 <ws2812_pwm_init+0xc8>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	9d05      	ldr	r5, [sp, #20]
 8000f1c:	fb04 1105 	mla	r1, r4, r5, r1
 8000f20:	f7ff fd5c 	bl	80009dc <__aeabi_uldivmod>
    ctx->pwm_t1h_cycles = (uint32_t)
 8000f24:	60b0      	str	r0, [r6, #8]

    return 0;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f3af 8000 	nop.w
 8000f30:	3b9aca00 	.word	0x3b9aca00
 8000f34:	00000000 	.word	0x00000000
 8000f38:	08011e54 	.word	0x08011e54
 8000f3c:	08010b10 	.word	0x08010b10
 8000f40:	08011e70 	.word	0x08011e70
 8000f44:	00000000 	.word	0x00000000

08000f48 <_dtoa_r>:
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f4e:	b099      	sub	sp, #100	; 0x64
 8000f50:	4616      	mov	r6, r2
 8000f52:	461f      	mov	r7, r3
 8000f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000f58:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	b974      	cbnz	r4, 8000f7e <_dtoa_r+0x36>
 8000f60:	2010      	movs	r0, #16
 8000f62:	f00b faa7 	bl	800c4b4 <malloc>
 8000f66:	4602      	mov	r2, r0
 8000f68:	6268      	str	r0, [r5, #36]	; 0x24
 8000f6a:	b920      	cbnz	r0, 8000f76 <_dtoa_r+0x2e>
 8000f6c:	4ba8      	ldr	r3, [pc, #672]	; (8001210 <_dtoa_r+0x2c8>)
 8000f6e:	21ea      	movs	r1, #234	; 0xea
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <_dtoa_r+0x2cc>)
 8000f72:	f00c f9cf 	bl	800d314 <__assert_func>
 8000f76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000f7a:	6004      	str	r4, [r0, #0]
 8000f7c:	60c4      	str	r4, [r0, #12]
 8000f7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	b151      	cbz	r1, 8000f9a <_dtoa_r+0x52>
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	604a      	str	r2, [r1, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	4093      	lsls	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f00b feec 	bl	800cd6c <_Bfree>
 8000f94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	1e3b      	subs	r3, r7, #0
 8000f9c:	bfb9      	ittee	lt
 8000f9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	9305      	strlt	r3, [sp, #20]
 8000fa4:	2300      	movge	r3, #0
 8000fa6:	f8c8 3000 	strge.w	r3, [r8]
 8000faa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000fae:	4b9a      	ldr	r3, [pc, #616]	; (8001218 <_dtoa_r+0x2d0>)
 8000fb0:	bfbc      	itt	lt
 8000fb2:	2201      	movlt	r2, #1
 8000fb4:	f8c8 2000 	strlt.w	r2, [r8]
 8000fb8:	ea33 0309 	bics.w	r3, r3, r9
 8000fbc:	d119      	bne.n	8000ff2 <_dtoa_r+0xaa>
 8000fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000fc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000fca:	4333      	orrs	r3, r6
 8000fcc:	f000 8580 	beq.w	8001ad0 <_dtoa_r+0xb88>
 8000fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000fd2:	b953      	cbnz	r3, 8000fea <_dtoa_r+0xa2>
 8000fd4:	4b91      	ldr	r3, [pc, #580]	; (800121c <_dtoa_r+0x2d4>)
 8000fd6:	e022      	b.n	800101e <_dtoa_r+0xd6>
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <_dtoa_r+0x2d8>)
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	9803      	ldr	r0, [sp, #12]
 8000fe4:	b019      	add	sp, #100	; 0x64
 8000fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fea:	4b8c      	ldr	r3, [pc, #560]	; (800121c <_dtoa_r+0x2d4>)
 8000fec:	9303      	str	r3, [sp, #12]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	e7f5      	b.n	8000fde <_dtoa_r+0x96>
 8000ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000ff6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000ffa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	2300      	movs	r3, #0
 8001002:	f7ff fd5b 	bl	8000abc <__aeabi_dcmpeq>
 8001006:	4680      	mov	r8, r0
 8001008:	b158      	cbz	r0, 8001022 <_dtoa_r+0xda>
 800100a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800100c:	2301      	movs	r3, #1
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8559 	beq.w	8001aca <_dtoa_r+0xb82>
 8001018:	4882      	ldr	r0, [pc, #520]	; (8001224 <_dtoa_r+0x2dc>)
 800101a:	6018      	str	r0, [r3, #0]
 800101c:	1e43      	subs	r3, r0, #1
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e7df      	b.n	8000fe2 <_dtoa_r+0x9a>
 8001022:	ab16      	add	r3, sp, #88	; 0x58
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	ab17      	add	r3, sp, #92	; 0x5c
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4628      	mov	r0, r5
 800102c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001030:	f00c f914 	bl	800d25c <__d2b>
 8001034:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8001038:	4683      	mov	fp, r0
 800103a:	2c00      	cmp	r4, #0
 800103c:	d07e      	beq.n	800113c <_dtoa_r+0x1f4>
 800103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001040:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8001044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800104c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001050:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001054:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8001058:	4b73      	ldr	r3, [pc, #460]	; (8001228 <_dtoa_r+0x2e0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f7ff f8f4 	bl	8000248 <__aeabi_dsub>
 8001060:	a365      	add	r3, pc, #404	; (adr r3, 80011f8 <_dtoa_r+0x2b0>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff faa7 	bl	80005b8 <__aeabi_dmul>
 800106a:	a365      	add	r3, pc, #404	; (adr r3, 8001200 <_dtoa_r+0x2b8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff f8ec 	bl	800024c <__adddf3>
 8001074:	4606      	mov	r6, r0
 8001076:	4620      	mov	r0, r4
 8001078:	460f      	mov	r7, r1
 800107a:	f7ff fa33 	bl	80004e4 <__aeabi_i2d>
 800107e:	a362      	add	r3, pc, #392	; (adr r3, 8001208 <_dtoa_r+0x2c0>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa98 	bl	80005b8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f8dc 	bl	800024c <__adddf3>
 8001094:	4606      	mov	r6, r0
 8001096:	460f      	mov	r7, r1
 8001098:	f7ff fd58 	bl	8000b4c <__aeabi_d2iz>
 800109c:	2200      	movs	r2, #0
 800109e:	4682      	mov	sl, r0
 80010a0:	2300      	movs	r3, #0
 80010a2:	4630      	mov	r0, r6
 80010a4:	4639      	mov	r1, r7
 80010a6:	f7ff fd13 	bl	8000ad0 <__aeabi_dcmplt>
 80010aa:	b148      	cbz	r0, 80010c0 <_dtoa_r+0x178>
 80010ac:	4650      	mov	r0, sl
 80010ae:	f7ff fa19 	bl	80004e4 <__aeabi_i2d>
 80010b2:	4632      	mov	r2, r6
 80010b4:	463b      	mov	r3, r7
 80010b6:	f7ff fd01 	bl	8000abc <__aeabi_dcmpeq>
 80010ba:	b908      	cbnz	r0, 80010c0 <_dtoa_r+0x178>
 80010bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010c0:	f1ba 0f16 	cmp.w	sl, #22
 80010c4:	d857      	bhi.n	8001176 <_dtoa_r+0x22e>
 80010c6:	4b59      	ldr	r3, [pc, #356]	; (800122c <_dtoa_r+0x2e4>)
 80010c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80010d4:	f7ff fcfc 	bl	8000ad0 <__aeabi_dcmplt>
 80010d8:	2800      	cmp	r0, #0
 80010da:	d04e      	beq.n	800117a <_dtoa_r+0x232>
 80010dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80010e0:	2300      	movs	r3, #0
 80010e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80010e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80010e6:	1b1c      	subs	r4, r3, r4
 80010e8:	1e63      	subs	r3, r4, #1
 80010ea:	9309      	str	r3, [sp, #36]	; 0x24
 80010ec:	bf45      	ittet	mi
 80010ee:	f1c4 0301 	rsbmi	r3, r4, #1
 80010f2:	9306      	strmi	r3, [sp, #24]
 80010f4:	2300      	movpl	r3, #0
 80010f6:	2300      	movmi	r3, #0
 80010f8:	bf4c      	ite	mi
 80010fa:	9309      	strmi	r3, [sp, #36]	; 0x24
 80010fc:	9306      	strpl	r3, [sp, #24]
 80010fe:	f1ba 0f00 	cmp.w	sl, #0
 8001102:	db3c      	blt.n	800117e <_dtoa_r+0x236>
 8001104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001106:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800110a:	4453      	add	r3, sl
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
 800110e:	2300      	movs	r3, #0
 8001110:	930a      	str	r3, [sp, #40]	; 0x28
 8001112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001114:	2b09      	cmp	r3, #9
 8001116:	f200 808d 	bhi.w	8001234 <_dtoa_r+0x2ec>
 800111a:	2b05      	cmp	r3, #5
 800111c:	bfc4      	itt	gt
 800111e:	3b04      	subgt	r3, #4
 8001120:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001122:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001124:	f1a3 0302 	sub.w	r3, r3, #2
 8001128:	bfcc      	ite	gt
 800112a:	2400      	movgt	r4, #0
 800112c:	2401      	movle	r4, #1
 800112e:	2b03      	cmp	r3, #3
 8001130:	f200 808c 	bhi.w	800124c <_dtoa_r+0x304>
 8001134:	e8df f003 	tbb	[pc, r3]
 8001138:	5b4d4f2d 	.word	0x5b4d4f2d
 800113c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001140:	441c      	add	r4, r3
 8001142:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001146:	2b20      	cmp	r3, #32
 8001148:	bfc3      	ittte	gt
 800114a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800114e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001152:	fa09 f303 	lslgt.w	r3, r9, r3
 8001156:	f1c3 0320 	rsble	r3, r3, #32
 800115a:	bfc6      	itte	gt
 800115c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001160:	4318      	orrgt	r0, r3
 8001162:	fa06 f003 	lslle.w	r0, r6, r3
 8001166:	f7ff f9ad 	bl	80004c4 <__aeabi_ui2d>
 800116a:	2301      	movs	r3, #1
 800116c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001170:	3c01      	subs	r4, #1
 8001172:	9313      	str	r3, [sp, #76]	; 0x4c
 8001174:	e770      	b.n	8001058 <_dtoa_r+0x110>
 8001176:	2301      	movs	r3, #1
 8001178:	e7b3      	b.n	80010e2 <_dtoa_r+0x19a>
 800117a:	900f      	str	r0, [sp, #60]	; 0x3c
 800117c:	e7b2      	b.n	80010e4 <_dtoa_r+0x19c>
 800117e:	9b06      	ldr	r3, [sp, #24]
 8001180:	eba3 030a 	sub.w	r3, r3, sl
 8001184:	9306      	str	r3, [sp, #24]
 8001186:	f1ca 0300 	rsb	r3, sl, #0
 800118a:	930a      	str	r3, [sp, #40]	; 0x28
 800118c:	2300      	movs	r3, #0
 800118e:	930e      	str	r3, [sp, #56]	; 0x38
 8001190:	e7bf      	b.n	8001112 <_dtoa_r+0x1ca>
 8001192:	2300      	movs	r3, #0
 8001194:	930b      	str	r3, [sp, #44]	; 0x2c
 8001196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc5a      	bgt.n	8001252 <_dtoa_r+0x30a>
 800119c:	f04f 0901 	mov.w	r9, #1
 80011a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80011a4:	464b      	mov	r3, r9
 80011a6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80011aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	6042      	str	r2, [r0, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	f102 0614 	add.w	r6, r2, #20
 80011b6:	429e      	cmp	r6, r3
 80011b8:	6841      	ldr	r1, [r0, #4]
 80011ba:	d950      	bls.n	800125e <_dtoa_r+0x316>
 80011bc:	4628      	mov	r0, r5
 80011be:	f00b fd95 	bl	800ccec <_Balloc>
 80011c2:	9003      	str	r0, [sp, #12]
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d14e      	bne.n	8001266 <_dtoa_r+0x31e>
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <_dtoa_r+0x2e8>)
 80011ca:	4602      	mov	r2, r0
 80011cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011d0:	e6ce      	b.n	8000f70 <_dtoa_r+0x28>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e7de      	b.n	8001194 <_dtoa_r+0x24c>
 80011d6:	2300      	movs	r3, #0
 80011d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80011da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80011dc:	eb0a 0903 	add.w	r9, sl, r3
 80011e0:	f109 0301 	add.w	r3, r9, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	9308      	str	r3, [sp, #32]
 80011e8:	bfb8      	it	lt
 80011ea:	2301      	movlt	r3, #1
 80011ec:	e7dd      	b.n	80011aa <_dtoa_r+0x262>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e7f2      	b.n	80011d8 <_dtoa_r+0x290>
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	636f4361 	.word	0x636f4361
 80011fc:	3fd287a7 	.word	0x3fd287a7
 8001200:	8b60c8b3 	.word	0x8b60c8b3
 8001204:	3fc68a28 	.word	0x3fc68a28
 8001208:	509f79fb 	.word	0x509f79fb
 800120c:	3fd34413 	.word	0x3fd34413
 8001210:	0801229a 	.word	0x0801229a
 8001214:	080122b1 	.word	0x080122b1
 8001218:	7ff00000 	.word	0x7ff00000
 800121c:	08012296 	.word	0x08012296
 8001220:	0801228d 	.word	0x0801228d
 8001224:	0801226a 	.word	0x0801226a
 8001228:	3ff80000 	.word	0x3ff80000
 800122c:	08010c00 	.word	0x08010c00
 8001230:	0801230b 	.word	0x0801230b
 8001234:	2401      	movs	r4, #1
 8001236:	2300      	movs	r3, #0
 8001238:	9322      	str	r3, [sp, #136]	; 0x88
 800123a:	940b      	str	r4, [sp, #44]	; 0x2c
 800123c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001240:	2200      	movs	r2, #0
 8001242:	f8cd 9020 	str.w	r9, [sp, #32]
 8001246:	2312      	movs	r3, #18
 8001248:	9223      	str	r2, [sp, #140]	; 0x8c
 800124a:	e7ae      	b.n	80011aa <_dtoa_r+0x262>
 800124c:	2301      	movs	r3, #1
 800124e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001250:	e7f4      	b.n	800123c <_dtoa_r+0x2f4>
 8001252:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001256:	f8cd 9020 	str.w	r9, [sp, #32]
 800125a:	464b      	mov	r3, r9
 800125c:	e7a5      	b.n	80011aa <_dtoa_r+0x262>
 800125e:	3101      	adds	r1, #1
 8001260:	6041      	str	r1, [r0, #4]
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	e7a5      	b.n	80011b2 <_dtoa_r+0x26a>
 8001266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001268:	9a03      	ldr	r2, [sp, #12]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	9b08      	ldr	r3, [sp, #32]
 800126e:	2b0e      	cmp	r3, #14
 8001270:	f200 80a8 	bhi.w	80013c4 <_dtoa_r+0x47c>
 8001274:	2c00      	cmp	r4, #0
 8001276:	f000 80a5 	beq.w	80013c4 <_dtoa_r+0x47c>
 800127a:	f1ba 0f00 	cmp.w	sl, #0
 800127e:	dd34      	ble.n	80012ea <_dtoa_r+0x3a2>
 8001280:	4a9a      	ldr	r2, [pc, #616]	; (80014ec <_dtoa_r+0x5a4>)
 8001282:	f00a 030f 	and.w	r3, sl, #15
 8001286:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800128a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800128e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8001292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8001296:	ea4f 142a 	mov.w	r4, sl, asr #4
 800129a:	d016      	beq.n	80012ca <_dtoa_r+0x382>
 800129c:	4b94      	ldr	r3, [pc, #592]	; (80014f0 <_dtoa_r+0x5a8>)
 800129e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80012a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012a6:	f7ff fab1 	bl	800080c <__aeabi_ddiv>
 80012aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012ae:	f004 040f 	and.w	r4, r4, #15
 80012b2:	2703      	movs	r7, #3
 80012b4:	4e8e      	ldr	r6, [pc, #568]	; (80014f0 <_dtoa_r+0x5a8>)
 80012b6:	b954      	cbnz	r4, 80012ce <_dtoa_r+0x386>
 80012b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80012bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012c0:	f7ff faa4 	bl	800080c <__aeabi_ddiv>
 80012c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80012c8:	e029      	b.n	800131e <_dtoa_r+0x3d6>
 80012ca:	2702      	movs	r7, #2
 80012cc:	e7f2      	b.n	80012b4 <_dtoa_r+0x36c>
 80012ce:	07e1      	lsls	r1, r4, #31
 80012d0:	d508      	bpl.n	80012e4 <_dtoa_r+0x39c>
 80012d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80012d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80012da:	f7ff f96d 	bl	80005b8 <__aeabi_dmul>
 80012de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012e2:	3701      	adds	r7, #1
 80012e4:	1064      	asrs	r4, r4, #1
 80012e6:	3608      	adds	r6, #8
 80012e8:	e7e5      	b.n	80012b6 <_dtoa_r+0x36e>
 80012ea:	f000 80a5 	beq.w	8001438 <_dtoa_r+0x4f0>
 80012ee:	f1ca 0400 	rsb	r4, sl, #0
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <_dtoa_r+0x5a4>)
 80012f4:	4e7e      	ldr	r6, [pc, #504]	; (80014f0 <_dtoa_r+0x5a8>)
 80012f6:	f004 020f 	and.w	r2, r4, #15
 80012fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001306:	f7ff f957 	bl	80005b8 <__aeabi_dmul>
 800130a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800130e:	1124      	asrs	r4, r4, #4
 8001310:	2300      	movs	r3, #0
 8001312:	2702      	movs	r7, #2
 8001314:	2c00      	cmp	r4, #0
 8001316:	f040 8084 	bne.w	8001422 <_dtoa_r+0x4da>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1d2      	bne.n	80012c4 <_dtoa_r+0x37c>
 800131e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808b 	beq.w	800143c <_dtoa_r+0x4f4>
 8001326:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800132a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800132e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001332:	4b70      	ldr	r3, [pc, #448]	; (80014f4 <_dtoa_r+0x5ac>)
 8001334:	2200      	movs	r2, #0
 8001336:	f7ff fbcb 	bl	8000ad0 <__aeabi_dcmplt>
 800133a:	2800      	cmp	r0, #0
 800133c:	d07e      	beq.n	800143c <_dtoa_r+0x4f4>
 800133e:	9b08      	ldr	r3, [sp, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07b      	beq.n	800143c <_dtoa_r+0x4f4>
 8001344:	f1b9 0f00 	cmp.w	r9, #0
 8001348:	dd38      	ble.n	80013bc <_dtoa_r+0x474>
 800134a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800134e:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <_dtoa_r+0x5b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	f7ff f931 	bl	80005b8 <__aeabi_dmul>
 8001356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800135a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800135e:	3701      	adds	r7, #1
 8001360:	464c      	mov	r4, r9
 8001362:	4638      	mov	r0, r7
 8001364:	f7ff f8be 	bl	80004e4 <__aeabi_i2d>
 8001368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800136c:	f7ff f924 	bl	80005b8 <__aeabi_dmul>
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <_dtoa_r+0x5b4>)
 8001372:	2200      	movs	r2, #0
 8001374:	f7fe ff6a 	bl	800024c <__adddf3>
 8001378:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001380:	9611      	str	r6, [sp, #68]	; 0x44
 8001382:	2c00      	cmp	r4, #0
 8001384:	d15d      	bne.n	8001442 <_dtoa_r+0x4fa>
 8001386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800138a:	4b5d      	ldr	r3, [pc, #372]	; (8001500 <_dtoa_r+0x5b8>)
 800138c:	2200      	movs	r2, #0
 800138e:	f7fe ff5b 	bl	8000248 <__aeabi_dsub>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800139c:	4633      	mov	r3, r6
 800139e:	f7ff fbb5 	bl	8000b0c <__aeabi_dcmpgt>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	f040 829c 	bne.w	80018e0 <_dtoa_r+0x998>
 80013a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80013ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80013b2:	f7ff fb8d 	bl	8000ad0 <__aeabi_dcmplt>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f040 8290 	bne.w	80018dc <_dtoa_r+0x994>
 80013bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80013c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80013c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f2c0 8152 	blt.w	8001670 <_dtoa_r+0x728>
 80013cc:	f1ba 0f0e 	cmp.w	sl, #14
 80013d0:	f300 814e 	bgt.w	8001670 <_dtoa_r+0x728>
 80013d4:	4b45      	ldr	r3, [pc, #276]	; (80014ec <_dtoa_r+0x5a4>)
 80013d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80013da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80013e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f280 80db 	bge.w	80015a0 <_dtoa_r+0x658>
 80013ea:	9b08      	ldr	r3, [sp, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f300 80d7 	bgt.w	80015a0 <_dtoa_r+0x658>
 80013f2:	f040 8272 	bne.w	80018da <_dtoa_r+0x992>
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <_dtoa_r+0x5b8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80013fe:	f7ff f8db 	bl	80005b8 <__aeabi_dmul>
 8001402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001406:	f7ff fb77 	bl	8000af8 <__aeabi_dcmpge>
 800140a:	9c08      	ldr	r4, [sp, #32]
 800140c:	4626      	mov	r6, r4
 800140e:	2800      	cmp	r0, #0
 8001410:	f040 8248 	bne.w	80018a4 <_dtoa_r+0x95c>
 8001414:	9f03      	ldr	r7, [sp, #12]
 8001416:	2331      	movs	r3, #49	; 0x31
 8001418:	f807 3b01 	strb.w	r3, [r7], #1
 800141c:	f10a 0a01 	add.w	sl, sl, #1
 8001420:	e244      	b.n	80018ac <_dtoa_r+0x964>
 8001422:	07e2      	lsls	r2, r4, #31
 8001424:	d505      	bpl.n	8001432 <_dtoa_r+0x4ea>
 8001426:	e9d6 2300 	ldrd	r2, r3, [r6]
 800142a:	f7ff f8c5 	bl	80005b8 <__aeabi_dmul>
 800142e:	3701      	adds	r7, #1
 8001430:	2301      	movs	r3, #1
 8001432:	1064      	asrs	r4, r4, #1
 8001434:	3608      	adds	r6, #8
 8001436:	e76d      	b.n	8001314 <_dtoa_r+0x3cc>
 8001438:	2702      	movs	r7, #2
 800143a:	e770      	b.n	800131e <_dtoa_r+0x3d6>
 800143c:	9c08      	ldr	r4, [sp, #32]
 800143e:	46d0      	mov	r8, sl
 8001440:	e78f      	b.n	8001362 <_dtoa_r+0x41a>
 8001442:	9903      	ldr	r1, [sp, #12]
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_dtoa_r+0x5a4>)
 8001446:	4421      	add	r1, r4
 8001448:	9112      	str	r1, [sp, #72]	; 0x48
 800144a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800144c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001450:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001454:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001458:	2900      	cmp	r1, #0
 800145a:	d055      	beq.n	8001508 <_dtoa_r+0x5c0>
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <_dtoa_r+0x5bc>)
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff f9d4 	bl	800080c <__aeabi_ddiv>
 8001464:	463b      	mov	r3, r7
 8001466:	4632      	mov	r2, r6
 8001468:	f7fe feee 	bl	8000248 <__aeabi_dsub>
 800146c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001470:	9f03      	ldr	r7, [sp, #12]
 8001472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001476:	f7ff fb69 	bl	8000b4c <__aeabi_d2iz>
 800147a:	4604      	mov	r4, r0
 800147c:	f7ff f832 	bl	80004e4 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001488:	f7fe fede 	bl	8000248 <__aeabi_dsub>
 800148c:	3430      	adds	r4, #48	; 0x30
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001496:	f807 4b01 	strb.w	r4, [r7], #1
 800149a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800149e:	f7ff fb17 	bl	8000ad0 <__aeabi_dcmplt>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d174      	bne.n	8001590 <_dtoa_r+0x648>
 80014a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <_dtoa_r+0x5ac>)
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7fe fecb 	bl	8000248 <__aeabi_dsub>
 80014b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80014b6:	f7ff fb0b 	bl	8000ad0 <__aeabi_dcmplt>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	f040 80b7 	bne.w	800162e <_dtoa_r+0x6e6>
 80014c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014c2:	429f      	cmp	r7, r3
 80014c4:	f43f af7a 	beq.w	80013bc <_dtoa_r+0x474>
 80014c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <_dtoa_r+0x5b0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f7ff f872 	bl	80005b8 <__aeabi_dmul>
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_dtoa_r+0x5b0>)
 80014d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014e8:	e7c3      	b.n	8001472 <_dtoa_r+0x52a>
 80014ea:	bf00      	nop
 80014ec:	08010c00 	.word	0x08010c00
 80014f0:	08010bd8 	.word	0x08010bd8
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40240000 	.word	0x40240000
 80014fc:	401c0000 	.word	0x401c0000
 8001500:	40140000 	.word	0x40140000
 8001504:	3fe00000 	.word	0x3fe00000
 8001508:	4630      	mov	r0, r6
 800150a:	4639      	mov	r1, r7
 800150c:	f7ff f854 	bl	80005b8 <__aeabi_dmul>
 8001510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001514:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001516:	9c03      	ldr	r4, [sp, #12]
 8001518:	9314      	str	r3, [sp, #80]	; 0x50
 800151a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800151e:	f7ff fb15 	bl	8000b4c <__aeabi_d2iz>
 8001522:	9015      	str	r0, [sp, #84]	; 0x54
 8001524:	f7fe ffde 	bl	80004e4 <__aeabi_i2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001530:	f7fe fe8a 	bl	8000248 <__aeabi_dsub>
 8001534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001536:	3330      	adds	r3, #48	; 0x30
 8001538:	f804 3b01 	strb.w	r3, [r4], #1
 800153c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800153e:	429c      	cmp	r4, r3
 8001540:	4606      	mov	r6, r0
 8001542:	460f      	mov	r7, r1
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	d124      	bne.n	8001594 <_dtoa_r+0x64c>
 800154a:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <_dtoa_r+0x894>)
 800154c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001550:	f7fe fe7c 	bl	800024c <__adddf3>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4630      	mov	r0, r6
 800155a:	4639      	mov	r1, r7
 800155c:	f7ff fad6 	bl	8000b0c <__aeabi_dcmpgt>
 8001560:	2800      	cmp	r0, #0
 8001562:	d163      	bne.n	800162c <_dtoa_r+0x6e4>
 8001564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001568:	499c      	ldr	r1, [pc, #624]	; (80017dc <_dtoa_r+0x894>)
 800156a:	2000      	movs	r0, #0
 800156c:	f7fe fe6c 	bl	8000248 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4630      	mov	r0, r6
 8001576:	4639      	mov	r1, r7
 8001578:	f7ff faaa 	bl	8000ad0 <__aeabi_dcmplt>
 800157c:	2800      	cmp	r0, #0
 800157e:	f43f af1d 	beq.w	80013bc <_dtoa_r+0x474>
 8001582:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001584:	1e7b      	subs	r3, r7, #1
 8001586:	9314      	str	r3, [sp, #80]	; 0x50
 8001588:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d0f8      	beq.n	8001582 <_dtoa_r+0x63a>
 8001590:	46c2      	mov	sl, r8
 8001592:	e03b      	b.n	800160c <_dtoa_r+0x6c4>
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <_dtoa_r+0x898>)
 8001596:	f7ff f80f 	bl	80005b8 <__aeabi_dmul>
 800159a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800159e:	e7bc      	b.n	800151a <_dtoa_r+0x5d2>
 80015a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80015a4:	9f03      	ldr	r7, [sp, #12]
 80015a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015aa:	4640      	mov	r0, r8
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7ff f92d 	bl	800080c <__aeabi_ddiv>
 80015b2:	f7ff facb 	bl	8000b4c <__aeabi_d2iz>
 80015b6:	4604      	mov	r4, r0
 80015b8:	f7fe ff94 	bl	80004e4 <__aeabi_i2d>
 80015bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015c0:	f7fe fffa 	bl	80005b8 <__aeabi_dmul>
 80015c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4640      	mov	r0, r8
 80015ce:	4649      	mov	r1, r9
 80015d0:	f7fe fe3a 	bl	8000248 <__aeabi_dsub>
 80015d4:	f807 6b01 	strb.w	r6, [r7], #1
 80015d8:	9e03      	ldr	r6, [sp, #12]
 80015da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80015de:	1bbe      	subs	r6, r7, r6
 80015e0:	45b4      	cmp	ip, r6
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	d136      	bne.n	8001656 <_dtoa_r+0x70e>
 80015e8:	f7fe fe30 	bl	800024c <__adddf3>
 80015ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015f0:	4680      	mov	r8, r0
 80015f2:	4689      	mov	r9, r1
 80015f4:	f7ff fa8a 	bl	8000b0c <__aeabi_dcmpgt>
 80015f8:	bb58      	cbnz	r0, 8001652 <_dtoa_r+0x70a>
 80015fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7ff fa5b 	bl	8000abc <__aeabi_dcmpeq>
 8001606:	b108      	cbz	r0, 800160c <_dtoa_r+0x6c4>
 8001608:	07e1      	lsls	r1, r4, #31
 800160a:	d422      	bmi.n	8001652 <_dtoa_r+0x70a>
 800160c:	4628      	mov	r0, r5
 800160e:	4659      	mov	r1, fp
 8001610:	f00b fbac 	bl	800cd6c <_Bfree>
 8001614:	2300      	movs	r3, #0
 8001616:	703b      	strb	r3, [r7, #0]
 8001618:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800161a:	f10a 0001 	add.w	r0, sl, #1
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001622:	2b00      	cmp	r3, #0
 8001624:	f43f acdd 	beq.w	8000fe2 <_dtoa_r+0x9a>
 8001628:	601f      	str	r7, [r3, #0]
 800162a:	e4da      	b.n	8000fe2 <_dtoa_r+0x9a>
 800162c:	4627      	mov	r7, r4
 800162e:	463b      	mov	r3, r7
 8001630:	461f      	mov	r7, r3
 8001632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001636:	2a39      	cmp	r2, #57	; 0x39
 8001638:	d107      	bne.n	800164a <_dtoa_r+0x702>
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d1f7      	bne.n	8001630 <_dtoa_r+0x6e8>
 8001640:	9903      	ldr	r1, [sp, #12]
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	f108 0801 	add.w	r8, r8, #1
 8001648:	700a      	strb	r2, [r1, #0]
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	3201      	adds	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e79e      	b.n	8001590 <_dtoa_r+0x648>
 8001652:	46d0      	mov	r8, sl
 8001654:	e7eb      	b.n	800162e <_dtoa_r+0x6e6>
 8001656:	4b62      	ldr	r3, [pc, #392]	; (80017e0 <_dtoa_r+0x898>)
 8001658:	2200      	movs	r2, #0
 800165a:	f7fe ffad 	bl	80005b8 <__aeabi_dmul>
 800165e:	2200      	movs	r2, #0
 8001660:	2300      	movs	r3, #0
 8001662:	4680      	mov	r8, r0
 8001664:	4689      	mov	r9, r1
 8001666:	f7ff fa29 	bl	8000abc <__aeabi_dcmpeq>
 800166a:	2800      	cmp	r0, #0
 800166c:	d09b      	beq.n	80015a6 <_dtoa_r+0x65e>
 800166e:	e7cd      	b.n	800160c <_dtoa_r+0x6c4>
 8001670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001672:	2a00      	cmp	r2, #0
 8001674:	f000 80d0 	beq.w	8001818 <_dtoa_r+0x8d0>
 8001678:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800167a:	2a01      	cmp	r2, #1
 800167c:	f300 80b2 	bgt.w	80017e4 <_dtoa_r+0x89c>
 8001680:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001682:	2a00      	cmp	r2, #0
 8001684:	f000 80a6 	beq.w	80017d4 <_dtoa_r+0x88c>
 8001688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800168c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800168e:	9f06      	ldr	r7, [sp, #24]
 8001690:	9a06      	ldr	r2, [sp, #24]
 8001692:	441a      	add	r2, r3
 8001694:	9206      	str	r2, [sp, #24]
 8001696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001698:	2101      	movs	r1, #1
 800169a:	441a      	add	r2, r3
 800169c:	4628      	mov	r0, r5
 800169e:	9209      	str	r2, [sp, #36]	; 0x24
 80016a0:	f00b fbcc 	bl	800ce3c <__i2b>
 80016a4:	4606      	mov	r6, r0
 80016a6:	2f00      	cmp	r7, #0
 80016a8:	dd0c      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd09      	ble.n	80016c4 <_dtoa_r+0x77c>
 80016b0:	42bb      	cmp	r3, r7
 80016b2:	9a06      	ldr	r2, [sp, #24]
 80016b4:	bfa8      	it	ge
 80016b6:	463b      	movge	r3, r7
 80016b8:	1ad2      	subs	r2, r2, r3
 80016ba:	9206      	str	r2, [sp, #24]
 80016bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016be:	1aff      	subs	r7, r7, r3
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
 80016c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016c6:	b1f3      	cbz	r3, 8001706 <_dtoa_r+0x7be>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a8 	beq.w	8001820 <_dtoa_r+0x8d8>
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	dd10      	ble.n	80016f6 <_dtoa_r+0x7ae>
 80016d4:	4631      	mov	r1, r6
 80016d6:	4622      	mov	r2, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f00b fc6d 	bl	800cfb8 <__pow5mult>
 80016de:	465a      	mov	r2, fp
 80016e0:	4601      	mov	r1, r0
 80016e2:	4606      	mov	r6, r0
 80016e4:	4628      	mov	r0, r5
 80016e6:	f00b fbbf 	bl	800ce68 <__multiply>
 80016ea:	4659      	mov	r1, fp
 80016ec:	4680      	mov	r8, r0
 80016ee:	4628      	mov	r0, r5
 80016f0:	f00b fb3c 	bl	800cd6c <_Bfree>
 80016f4:	46c3      	mov	fp, r8
 80016f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f8:	1b1a      	subs	r2, r3, r4
 80016fa:	d004      	beq.n	8001706 <_dtoa_r+0x7be>
 80016fc:	4659      	mov	r1, fp
 80016fe:	4628      	mov	r0, r5
 8001700:	f00b fc5a 	bl	800cfb8 <__pow5mult>
 8001704:	4683      	mov	fp, r0
 8001706:	2101      	movs	r1, #1
 8001708:	4628      	mov	r0, r5
 800170a:	f00b fb97 	bl	800ce3c <__i2b>
 800170e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	f340 8086 	ble.w	8001824 <_dtoa_r+0x8dc>
 8001718:	461a      	mov	r2, r3
 800171a:	4601      	mov	r1, r0
 800171c:	4628      	mov	r0, r5
 800171e:	f00b fc4b 	bl	800cfb8 <__pow5mult>
 8001722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001724:	2b01      	cmp	r3, #1
 8001726:	4604      	mov	r4, r0
 8001728:	dd7f      	ble.n	800182a <_dtoa_r+0x8e2>
 800172a:	f04f 0800 	mov.w	r8, #0
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001734:	6918      	ldr	r0, [r3, #16]
 8001736:	f00e fdd8 	bl	80102ea <__hi0bits>
 800173a:	f1c0 0020 	rsb	r0, r0, #32
 800173e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001740:	4418      	add	r0, r3
 8001742:	f010 001f 	ands.w	r0, r0, #31
 8001746:	f000 8092 	beq.w	800186e <_dtoa_r+0x926>
 800174a:	f1c0 0320 	rsb	r3, r0, #32
 800174e:	2b04      	cmp	r3, #4
 8001750:	f340 808a 	ble.w	8001868 <_dtoa_r+0x920>
 8001754:	f1c0 001c 	rsb	r0, r0, #28
 8001758:	9b06      	ldr	r3, [sp, #24]
 800175a:	4403      	add	r3, r0
 800175c:	9306      	str	r3, [sp, #24]
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	4403      	add	r3, r0
 8001762:	4407      	add	r7, r0
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
 8001766:	9b06      	ldr	r3, [sp, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd05      	ble.n	8001778 <_dtoa_r+0x830>
 800176c:	4659      	mov	r1, fp
 800176e:	461a      	mov	r2, r3
 8001770:	4628      	mov	r0, r5
 8001772:	f00b fc7b 	bl	800d06c <__lshift>
 8001776:	4683      	mov	fp, r0
 8001778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd05      	ble.n	800178a <_dtoa_r+0x842>
 800177e:	4621      	mov	r1, r4
 8001780:	461a      	mov	r2, r3
 8001782:	4628      	mov	r0, r5
 8001784:	f00b fc72 	bl	800d06c <__lshift>
 8001788:	4604      	mov	r4, r0
 800178a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d070      	beq.n	8001872 <_dtoa_r+0x92a>
 8001790:	4621      	mov	r1, r4
 8001792:	4658      	mov	r0, fp
 8001794:	f00e fdf6 	bl	8010384 <__mcmp>
 8001798:	2800      	cmp	r0, #0
 800179a:	da6a      	bge.n	8001872 <_dtoa_r+0x92a>
 800179c:	2300      	movs	r3, #0
 800179e:	4659      	mov	r1, fp
 80017a0:	220a      	movs	r2, #10
 80017a2:	4628      	mov	r0, r5
 80017a4:	f00b fb04 	bl	800cdb0 <__multadd>
 80017a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80017ae:	4683      	mov	fp, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8194 	beq.w	8001ade <_dtoa_r+0xb96>
 80017b6:	4631      	mov	r1, r6
 80017b8:	2300      	movs	r3, #0
 80017ba:	220a      	movs	r2, #10
 80017bc:	4628      	mov	r0, r5
 80017be:	f00b faf7 	bl	800cdb0 <__multadd>
 80017c2:	f1b9 0f00 	cmp.w	r9, #0
 80017c6:	4606      	mov	r6, r0
 80017c8:	f300 8093 	bgt.w	80018f2 <_dtoa_r+0x9aa>
 80017cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc57      	bgt.n	8001882 <_dtoa_r+0x93a>
 80017d2:	e08e      	b.n	80018f2 <_dtoa_r+0x9aa>
 80017d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80017d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80017da:	e757      	b.n	800168c <_dtoa_r+0x744>
 80017dc:	3fe00000 	.word	0x3fe00000
 80017e0:	40240000 	.word	0x40240000
 80017e4:	9b08      	ldr	r3, [sp, #32]
 80017e6:	1e5c      	subs	r4, r3, #1
 80017e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017ea:	42a3      	cmp	r3, r4
 80017ec:	bfbf      	itttt	lt
 80017ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80017f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80017f2:	1ae2      	sublt	r2, r4, r3
 80017f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80017f6:	bfb6      	itet	lt
 80017f8:	189b      	addlt	r3, r3, r2
 80017fa:	1b1c      	subge	r4, r3, r4
 80017fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80017fe:	9b08      	ldr	r3, [sp, #32]
 8001800:	bfb8      	it	lt
 8001802:	2400      	movlt	r4, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb9      	ittee	lt
 8001808:	9b06      	ldrlt	r3, [sp, #24]
 800180a:	9a08      	ldrlt	r2, [sp, #32]
 800180c:	9f06      	ldrge	r7, [sp, #24]
 800180e:	9b08      	ldrge	r3, [sp, #32]
 8001810:	bfbc      	itt	lt
 8001812:	1a9f      	sublt	r7, r3, r2
 8001814:	2300      	movlt	r3, #0
 8001816:	e73b      	b.n	8001690 <_dtoa_r+0x748>
 8001818:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800181a:	9f06      	ldr	r7, [sp, #24]
 800181c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800181e:	e742      	b.n	80016a6 <_dtoa_r+0x75e>
 8001820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001822:	e76b      	b.n	80016fc <_dtoa_r+0x7b4>
 8001824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001826:	2b01      	cmp	r3, #1
 8001828:	dc19      	bgt.n	800185e <_dtoa_r+0x916>
 800182a:	9b04      	ldr	r3, [sp, #16]
 800182c:	b9bb      	cbnz	r3, 800185e <_dtoa_r+0x916>
 800182e:	9b05      	ldr	r3, [sp, #20]
 8001830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001834:	b99b      	cbnz	r3, 800185e <_dtoa_r+0x916>
 8001836:	9b05      	ldr	r3, [sp, #20]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183c:	0d1b      	lsrs	r3, r3, #20
 800183e:	051b      	lsls	r3, r3, #20
 8001840:	b183      	cbz	r3, 8001864 <_dtoa_r+0x91c>
 8001842:	9b06      	ldr	r3, [sp, #24]
 8001844:	3301      	adds	r3, #1
 8001846:	9306      	str	r3, [sp, #24]
 8001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	9309      	str	r3, [sp, #36]	; 0x24
 800184e:	f04f 0801 	mov.w	r8, #1
 8001852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001854:	2b00      	cmp	r3, #0
 8001856:	f47f af6a 	bne.w	800172e <_dtoa_r+0x7e6>
 800185a:	2001      	movs	r0, #1
 800185c:	e76f      	b.n	800173e <_dtoa_r+0x7f6>
 800185e:	f04f 0800 	mov.w	r8, #0
 8001862:	e7f6      	b.n	8001852 <_dtoa_r+0x90a>
 8001864:	4698      	mov	r8, r3
 8001866:	e7f4      	b.n	8001852 <_dtoa_r+0x90a>
 8001868:	f43f af7d 	beq.w	8001766 <_dtoa_r+0x81e>
 800186c:	4618      	mov	r0, r3
 800186e:	301c      	adds	r0, #28
 8001870:	e772      	b.n	8001758 <_dtoa_r+0x810>
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	2b00      	cmp	r3, #0
 8001876:	dc36      	bgt.n	80018e6 <_dtoa_r+0x99e>
 8001878:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800187a:	2b02      	cmp	r3, #2
 800187c:	dd33      	ble.n	80018e6 <_dtoa_r+0x99e>
 800187e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001882:	f1b9 0f00 	cmp.w	r9, #0
 8001886:	d10d      	bne.n	80018a4 <_dtoa_r+0x95c>
 8001888:	4621      	mov	r1, r4
 800188a:	464b      	mov	r3, r9
 800188c:	2205      	movs	r2, #5
 800188e:	4628      	mov	r0, r5
 8001890:	f00b fa8e 	bl	800cdb0 <__multadd>
 8001894:	4601      	mov	r1, r0
 8001896:	4604      	mov	r4, r0
 8001898:	4658      	mov	r0, fp
 800189a:	f00e fd73 	bl	8010384 <__mcmp>
 800189e:	2800      	cmp	r0, #0
 80018a0:	f73f adb8 	bgt.w	8001414 <_dtoa_r+0x4cc>
 80018a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80018a6:	9f03      	ldr	r7, [sp, #12]
 80018a8:	ea6f 0a03 	mvn.w	sl, r3
 80018ac:	f04f 0800 	mov.w	r8, #0
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f00b fa5a 	bl	800cd6c <_Bfree>
 80018b8:	2e00      	cmp	r6, #0
 80018ba:	f43f aea7 	beq.w	800160c <_dtoa_r+0x6c4>
 80018be:	f1b8 0f00 	cmp.w	r8, #0
 80018c2:	d005      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c4:	45b0      	cmp	r8, r6
 80018c6:	d003      	beq.n	80018d0 <_dtoa_r+0x988>
 80018c8:	4641      	mov	r1, r8
 80018ca:	4628      	mov	r0, r5
 80018cc:	f00b fa4e 	bl	800cd6c <_Bfree>
 80018d0:	4631      	mov	r1, r6
 80018d2:	4628      	mov	r0, r5
 80018d4:	f00b fa4a 	bl	800cd6c <_Bfree>
 80018d8:	e698      	b.n	800160c <_dtoa_r+0x6c4>
 80018da:	2400      	movs	r4, #0
 80018dc:	4626      	mov	r6, r4
 80018de:	e7e1      	b.n	80018a4 <_dtoa_r+0x95c>
 80018e0:	46c2      	mov	sl, r8
 80018e2:	4626      	mov	r6, r4
 80018e4:	e596      	b.n	8001414 <_dtoa_r+0x4cc>
 80018e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80fd 	beq.w	8001aec <_dtoa_r+0xba4>
 80018f2:	2f00      	cmp	r7, #0
 80018f4:	dd05      	ble.n	8001902 <_dtoa_r+0x9ba>
 80018f6:	4631      	mov	r1, r6
 80018f8:	463a      	mov	r2, r7
 80018fa:	4628      	mov	r0, r5
 80018fc:	f00b fbb6 	bl	800d06c <__lshift>
 8001900:	4606      	mov	r6, r0
 8001902:	f1b8 0f00 	cmp.w	r8, #0
 8001906:	d05c      	beq.n	80019c2 <_dtoa_r+0xa7a>
 8001908:	6871      	ldr	r1, [r6, #4]
 800190a:	4628      	mov	r0, r5
 800190c:	f00b f9ee 	bl	800ccec <_Balloc>
 8001910:	4607      	mov	r7, r0
 8001912:	b928      	cbnz	r0, 8001920 <_dtoa_r+0x9d8>
 8001914:	4b80      	ldr	r3, [pc, #512]	; (8001b18 <_dtoa_r+0xbd0>)
 8001916:	4602      	mov	r2, r0
 8001918:	f240 21ea 	movw	r1, #746	; 0x2ea
 800191c:	f7ff bb28 	b.w	8000f70 <_dtoa_r+0x28>
 8001920:	6932      	ldr	r2, [r6, #16]
 8001922:	3202      	adds	r2, #2
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	f106 010c 	add.w	r1, r6, #12
 800192a:	300c      	adds	r0, #12
 800192c:	f00e fb29 	bl	800ff82 <memcpy>
 8001930:	2201      	movs	r2, #1
 8001932:	4639      	mov	r1, r7
 8001934:	4628      	mov	r0, r5
 8001936:	f00b fb99 	bl	800d06c <__lshift>
 800193a:	9b03      	ldr	r3, [sp, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	9308      	str	r3, [sp, #32]
 8001940:	9b03      	ldr	r3, [sp, #12]
 8001942:	444b      	add	r3, r9
 8001944:	930a      	str	r3, [sp, #40]	; 0x28
 8001946:	9b04      	ldr	r3, [sp, #16]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	46b0      	mov	r8, r6
 800194e:	9309      	str	r3, [sp, #36]	; 0x24
 8001950:	4606      	mov	r6, r0
 8001952:	9b08      	ldr	r3, [sp, #32]
 8001954:	4621      	mov	r1, r4
 8001956:	3b01      	subs	r3, #1
 8001958:	4658      	mov	r0, fp
 800195a:	9304      	str	r3, [sp, #16]
 800195c:	f00e fc3e 	bl	80101dc <quorem>
 8001960:	4603      	mov	r3, r0
 8001962:	3330      	adds	r3, #48	; 0x30
 8001964:	9006      	str	r0, [sp, #24]
 8001966:	4641      	mov	r1, r8
 8001968:	4658      	mov	r0, fp
 800196a:	930b      	str	r3, [sp, #44]	; 0x2c
 800196c:	f00e fd0a 	bl	8010384 <__mcmp>
 8001970:	4632      	mov	r2, r6
 8001972:	4681      	mov	r9, r0
 8001974:	4621      	mov	r1, r4
 8001976:	4628      	mov	r0, r5
 8001978:	f00b fbe8 	bl	800d14c <__mdiff>
 800197c:	68c2      	ldr	r2, [r0, #12]
 800197e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001980:	4607      	mov	r7, r0
 8001982:	bb02      	cbnz	r2, 80019c6 <_dtoa_r+0xa7e>
 8001984:	4601      	mov	r1, r0
 8001986:	4658      	mov	r0, fp
 8001988:	f00e fcfc 	bl	8010384 <__mcmp>
 800198c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800198e:	4602      	mov	r2, r0
 8001990:	4639      	mov	r1, r7
 8001992:	4628      	mov	r0, r5
 8001994:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8001998:	f00b f9e8 	bl	800cd6c <_Bfree>
 800199c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800199e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019a0:	9f08      	ldr	r7, [sp, #32]
 80019a2:	ea43 0102 	orr.w	r1, r3, r2
 80019a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019ac:	d10d      	bne.n	80019ca <_dtoa_r+0xa82>
 80019ae:	2b39      	cmp	r3, #57	; 0x39
 80019b0:	d029      	beq.n	8001a06 <_dtoa_r+0xabe>
 80019b2:	f1b9 0f00 	cmp.w	r9, #0
 80019b6:	dd01      	ble.n	80019bc <_dtoa_r+0xa74>
 80019b8:	9b06      	ldr	r3, [sp, #24]
 80019ba:	3331      	adds	r3, #49	; 0x31
 80019bc:	9a04      	ldr	r2, [sp, #16]
 80019be:	7013      	strb	r3, [r2, #0]
 80019c0:	e776      	b.n	80018b0 <_dtoa_r+0x968>
 80019c2:	4630      	mov	r0, r6
 80019c4:	e7b9      	b.n	800193a <_dtoa_r+0x9f2>
 80019c6:	2201      	movs	r2, #1
 80019c8:	e7e2      	b.n	8001990 <_dtoa_r+0xa48>
 80019ca:	f1b9 0f00 	cmp.w	r9, #0
 80019ce:	db06      	blt.n	80019de <_dtoa_r+0xa96>
 80019d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80019d2:	ea41 0909 	orr.w	r9, r1, r9
 80019d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019d8:	ea59 0101 	orrs.w	r1, r9, r1
 80019dc:	d120      	bne.n	8001a20 <_dtoa_r+0xad8>
 80019de:	2a00      	cmp	r2, #0
 80019e0:	ddec      	ble.n	80019bc <_dtoa_r+0xa74>
 80019e2:	4659      	mov	r1, fp
 80019e4:	2201      	movs	r2, #1
 80019e6:	4628      	mov	r0, r5
 80019e8:	9308      	str	r3, [sp, #32]
 80019ea:	f00b fb3f 	bl	800d06c <__lshift>
 80019ee:	4621      	mov	r1, r4
 80019f0:	4683      	mov	fp, r0
 80019f2:	f00e fcc7 	bl	8010384 <__mcmp>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	9b08      	ldr	r3, [sp, #32]
 80019fa:	dc02      	bgt.n	8001a02 <_dtoa_r+0xaba>
 80019fc:	d1de      	bne.n	80019bc <_dtoa_r+0xa74>
 80019fe:	07da      	lsls	r2, r3, #31
 8001a00:	d5dc      	bpl.n	80019bc <_dtoa_r+0xa74>
 8001a02:	2b39      	cmp	r3, #57	; 0x39
 8001a04:	d1d8      	bne.n	80019b8 <_dtoa_r+0xa70>
 8001a06:	9a04      	ldr	r2, [sp, #16]
 8001a08:	2339      	movs	r3, #57	; 0x39
 8001a0a:	7013      	strb	r3, [r2, #0]
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	461f      	mov	r7, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001a16:	2a39      	cmp	r2, #57	; 0x39
 8001a18:	d050      	beq.n	8001abc <_dtoa_r+0xb74>
 8001a1a:	3201      	adds	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e747      	b.n	80018b0 <_dtoa_r+0x968>
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dd03      	ble.n	8001a2c <_dtoa_r+0xae4>
 8001a24:	2b39      	cmp	r3, #57	; 0x39
 8001a26:	d0ee      	beq.n	8001a06 <_dtoa_r+0xabe>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	e7c7      	b.n	80019bc <_dtoa_r+0xa74>
 8001a2c:	9a08      	ldr	r2, [sp, #32]
 8001a2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d02a      	beq.n	8001a8e <_dtoa_r+0xb46>
 8001a38:	4659      	mov	r1, fp
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f00b f9b6 	bl	800cdb0 <__multadd>
 8001a44:	45b0      	cmp	r8, r6
 8001a46:	4683      	mov	fp, r0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f04f 020a 	mov.w	r2, #10
 8001a50:	4641      	mov	r1, r8
 8001a52:	4628      	mov	r0, r5
 8001a54:	d107      	bne.n	8001a66 <_dtoa_r+0xb1e>
 8001a56:	f00b f9ab 	bl	800cdb0 <__multadd>
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	9b08      	ldr	r3, [sp, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	9308      	str	r3, [sp, #32]
 8001a64:	e775      	b.n	8001952 <_dtoa_r+0xa0a>
 8001a66:	f00b f9a3 	bl	800cdb0 <__multadd>
 8001a6a:	4631      	mov	r1, r6
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	2300      	movs	r3, #0
 8001a70:	220a      	movs	r2, #10
 8001a72:	4628      	mov	r0, r5
 8001a74:	f00b f99c 	bl	800cdb0 <__multadd>
 8001a78:	4606      	mov	r6, r0
 8001a7a:	e7f0      	b.n	8001a5e <_dtoa_r+0xb16>
 8001a7c:	f1b9 0f00 	cmp.w	r9, #0
 8001a80:	9a03      	ldr	r2, [sp, #12]
 8001a82:	bfcc      	ite	gt
 8001a84:	464f      	movgt	r7, r9
 8001a86:	2701      	movle	r7, #1
 8001a88:	4417      	add	r7, r2
 8001a8a:	f04f 0800 	mov.w	r8, #0
 8001a8e:	4659      	mov	r1, fp
 8001a90:	2201      	movs	r2, #1
 8001a92:	4628      	mov	r0, r5
 8001a94:	9308      	str	r3, [sp, #32]
 8001a96:	f00b fae9 	bl	800d06c <__lshift>
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4683      	mov	fp, r0
 8001a9e:	f00e fc71 	bl	8010384 <__mcmp>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	dcb2      	bgt.n	8001a0c <_dtoa_r+0xac4>
 8001aa6:	d102      	bne.n	8001aae <_dtoa_r+0xb66>
 8001aa8:	9b08      	ldr	r3, [sp, #32]
 8001aaa:	07db      	lsls	r3, r3, #31
 8001aac:	d4ae      	bmi.n	8001a0c <_dtoa_r+0xac4>
 8001aae:	463b      	mov	r3, r7
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001ab6:	2a30      	cmp	r2, #48	; 0x30
 8001ab8:	d0fa      	beq.n	8001ab0 <_dtoa_r+0xb68>
 8001aba:	e6f9      	b.n	80018b0 <_dtoa_r+0x968>
 8001abc:	9a03      	ldr	r2, [sp, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d1a5      	bne.n	8001a0e <_dtoa_r+0xac6>
 8001ac2:	f10a 0a01 	add.w	sl, sl, #1
 8001ac6:	2331      	movs	r3, #49	; 0x31
 8001ac8:	e779      	b.n	80019be <_dtoa_r+0xa76>
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <_dtoa_r+0xbd4>)
 8001acc:	f7ff baa7 	b.w	800101e <_dtoa_r+0xd6>
 8001ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f aa80 	bne.w	8000fd8 <_dtoa_r+0x90>
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_dtoa_r+0xbd8>)
 8001ada:	f7ff baa0 	b.w	800101e <_dtoa_r+0xd6>
 8001ade:	f1b9 0f00 	cmp.w	r9, #0
 8001ae2:	dc03      	bgt.n	8001aec <_dtoa_r+0xba4>
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f73f aecb 	bgt.w	8001882 <_dtoa_r+0x93a>
 8001aec:	9f03      	ldr	r7, [sp, #12]
 8001aee:	4621      	mov	r1, r4
 8001af0:	4658      	mov	r0, fp
 8001af2:	f00e fb73 	bl	80101dc <quorem>
 8001af6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001afa:	f807 3b01 	strb.w	r3, [r7], #1
 8001afe:	9a03      	ldr	r2, [sp, #12]
 8001b00:	1aba      	subs	r2, r7, r2
 8001b02:	4591      	cmp	r9, r2
 8001b04:	ddba      	ble.n	8001a7c <_dtoa_r+0xb34>
 8001b06:	4659      	mov	r1, fp
 8001b08:	2300      	movs	r3, #0
 8001b0a:	220a      	movs	r2, #10
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f00b f94f 	bl	800cdb0 <__multadd>
 8001b12:	4683      	mov	fp, r0
 8001b14:	e7eb      	b.n	8001aee <_dtoa_r+0xba6>
 8001b16:	bf00      	nop
 8001b18:	0801230b 	.word	0x0801230b
 8001b1c:	08012269 	.word	0x08012269
 8001b20:	0801228d 	.word	0x0801228d

08001b24 <update_indication_task>:
    }
}


_Noreturn void update_indication_task(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b094      	sub	sp, #80	; 0x50
    uint8_t cnt = 0;
    uint8_t start_led_pos = 0;
    uint8_t end_led_pos = 0;
    uint8_t indication_type = 0;
    struct led_hsv color_hsv = {0};
 8001b28:	2400      	movs	r4, #0
 8001b2a:	9413      	str	r4, [sp, #76]	; 0x4c
    struct led_rgb color_rgb[STRIP_NUM_PIXELS] = {0};
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4621      	mov	r1, r4
 8001b30:	a803      	add	r0, sp, #12
 8001b32:	f00e fa34 	bl	800ff9e <memset>
    struct led_strip_indicate_s *strip_indicate = {0};
 8001b36:	9402      	str	r4, [sp, #8]
    union led_strip_state_u led_strip_state = {0};
 8001b38:	9400      	str	r4, [sp, #0]
 8001b3a:	9401      	str	r4, [sp, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
 8001b3c:	4d7e      	ldr	r5, [pc, #504]	; (8001d38 <update_indication_task+0x214>)
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f00e fa10 	bl	800ff64 <z_impl_k_poll_signal_init>

    k_poll_signal_init(&signal_indicate);
    k_poll_event_init(&event_indicate,_POLL_TYPE_SIGNAL,
 8001b44:	462b      	mov	r3, r5
 8001b46:	4622      	mov	r2, r4
 8001b48:	2101      	movs	r1, #1
 8001b4a:	487c      	ldr	r0, [pc, #496]	; (8001d3c <update_indication_task+0x218>)
 8001b4c:	f00e f9e2 	bl	800ff14 <k_poll_event_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8001b50:	2101      	movs	r1, #1
 8001b52:	4628      	mov	r0, r5
 8001b54:	f00a fc4a 	bl	800c3ec <z_impl_k_poll_signal_raise>
 8001b58:	e0c1      	b.n	8001cde <update_indication_task+0x1ba>
            /* If "blink" set -> we blinked
             * Esle -> set on strip connection quality and people number */
            switch (indication_type) {
                case INDICATION_TYPE_STATUS_INFO:
                    cnt = start_led_pos;
                    set_con_status_pixels(led_strip_state.status.con_status, &cnt);
 8001b5a:	f89d 6000 	ldrb.w	r6, [sp]
                    cnt = start_led_pos;
 8001b5e:	4625      	mov	r5, r4
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001b60:	e007      	b.n	8001b72 <update_indication_task+0x4e>
                led_hsv2rgb(&green_hsv, &pixels_rgb[(*pos)]);
 8001b62:	4b77      	ldr	r3, [pc, #476]	; (8001d40 <update_indication_task+0x21c>)
 8001b64:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001b68:	4876      	ldr	r0, [pc, #472]	; (8001d44 <update_indication_task+0x220>)
 8001b6a:	f008 fd17 	bl	800a59c <led_hsv2rgb>
        (*pos)++;
 8001b6e:	3501      	adds	r5, #1
 8001b70:	b2ed      	uxtb	r5, r5
    while (*pos < start_pos + RSSI_LED_LEN) {
 8001b72:	4622      	mov	r2, r4
 8001b74:	1de3      	adds	r3, r4, #7
 8001b76:	4629      	mov	r1, r5
 8001b78:	429d      	cmp	r5, r3
 8001b7a:	dc13      	bgt.n	8001ba4 <update_indication_task+0x80>
        if (*pos < start_pos + con_status) {
 8001b7c:	1933      	adds	r3, r6, r4
 8001b7e:	42ab      	cmp	r3, r5
 8001b80:	dd09      	ble.n	8001b96 <update_indication_task+0x72>
            if (*pos < start_pos + NUM_OF_RED_LEDS)
 8001b82:	3201      	adds	r2, #1
 8001b84:	4291      	cmp	r1, r2
 8001b86:	dcec      	bgt.n	8001b62 <update_indication_task+0x3e>
                led_hsv2rgb(&red_hsv, &pixels_rgb[(*pos)]);
 8001b88:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <update_indication_task+0x21c>)
 8001b8a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001b8e:	486e      	ldr	r0, [pc, #440]	; (8001d48 <update_indication_task+0x224>)
 8001b90:	f008 fd04 	bl	800a59c <led_hsv2rgb>
 8001b94:	e7eb      	b.n	8001b6e <update_indication_task+0x4a>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[(*pos)]);
 8001b96:	4b6a      	ldr	r3, [pc, #424]	; (8001d40 <update_indication_task+0x21c>)
 8001b98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001b9c:	486b      	ldr	r0, [pc, #428]	; (8001d4c <update_indication_task+0x228>)
 8001b9e:	f008 fcfd 	bl	800a59c <led_hsv2rgb>
 8001ba2:	e7e4      	b.n	8001b6e <update_indication_task+0x4a>
                    set_people_num_pixels(led_strip_state.status.people_num, &cnt);
 8001ba4:	f89d 6004 	ldrb.w	r6, [sp, #4]
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001ba8:	462c      	mov	r4, r5
 8001baa:	e007      	b.n	8001bbc <update_indication_task+0x98>
            led_hsv2rgb(&empty_hsv, &pixels_rgb[*pos]);
 8001bac:	4964      	ldr	r1, [pc, #400]	; (8001d40 <update_indication_task+0x21c>)
 8001bae:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001bb2:	4866      	ldr	r0, [pc, #408]	; (8001d4c <update_indication_task+0x228>)
 8001bb4:	f008 fcf2 	bl	800a59c <led_hsv2rgb>
        (*pos)++;
 8001bb8:	3401      	adds	r4, #1
 8001bba:	b2e4      	uxtb	r4, r4
    while (*pos < start_pos + WORKERS_LED_LEN) {
 8001bbc:	1d6b      	adds	r3, r5, #5
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	dc09      	bgt.n	8001bd8 <update_indication_task+0xb4>
        if (((*pos) - start_pos) < people_num)
 8001bc4:	1b63      	subs	r3, r4, r5
 8001bc6:	42b3      	cmp	r3, r6
 8001bc8:	daf0      	bge.n	8001bac <update_indication_task+0x88>
            led_hsv2rgb(&blue_hsv, &pixels_rgb[*pos]);
 8001bca:	495d      	ldr	r1, [pc, #372]	; (8001d40 <update_indication_task+0x21c>)
 8001bcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001bd0:	485f      	ldr	r0, [pc, #380]	; (8001d50 <update_indication_task+0x22c>)
 8001bd2:	f008 fce3 	bl	800a59c <led_hsv2rgb>
 8001bd6:	e7ef      	b.n	8001bb8 <update_indication_task+0x94>
                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001bd8:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <update_indication_task+0x230>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 * @warning May overwrite @a pixels
 */
static inline int led_strip_update_rgb(const struct device *dev,
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
 8001bdc:	6883      	ldr	r3, [r0, #8]
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	4957      	ldr	r1, [pc, #348]	; (8001d40 <update_indication_task+0x21c>)
 8001be4:	4798      	blx	r3
 8001be6:	e07a      	b.n	8001cde <update_indication_task+0x1ba>
                    break;
                case INDICATION_TYPE_BLINK:
                    switch (led_strip_state.strip_param.color) {
 8001be8:	f89d 3000 	ldrb.w	r3, [sp]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d821      	bhi.n	8001c34 <update_indication_task+0x110>
 8001bf0:	e8df f003 	tbb	[pc, r3]
 8001bf4:	0f0b0703 	.word	0x0f0b0703
 8001bf8:	13          	.byte	0x13
 8001bf9:	00          	.byte	0x00
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <update_indication_task+0x224>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c00:	e018      	b.n	8001c34 <update_indication_task+0x110>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 8001c02:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <update_indication_task+0x220>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c08:	e014      	b.n	8001c34 <update_indication_task+0x110>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <update_indication_task+0x22c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c10:	e010      	b.n	8001c34 <update_indication_task+0x110>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 8001c12:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <update_indication_task+0x234>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c18:	e00c      	b.n	8001c34 <update_indication_task+0x110>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 8001c1a:	4b50      	ldr	r3, [pc, #320]	; (8001d5c <update_indication_task+0x238>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 8001c20:	e008      	b.n	8001c34 <update_indication_task+0x110>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8001c22:	1c65      	adds	r5, r4, #1
 8001c24:	b2ed      	uxtb	r5, r5
 8001c26:	ab03      	add	r3, sp, #12
 8001c28:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8001c2c:	a813      	add	r0, sp, #76	; 0x4c
 8001c2e:	f008 fcb5 	bl	800a59c <led_hsv2rgb>
 8001c32:	462c      	mov	r4, r5
                    while (cnt < end_led_pos) {
 8001c34:	42a6      	cmp	r6, r4
 8001c36:	d8f4      	bhi.n	8001c22 <update_indication_task+0xfe>
                    }

                    cnt = 0;
 8001c38:	2400      	movs	r4, #0
 8001c3a:	e019      	b.n	8001c70 <update_indication_task+0x14c>
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
                        led_strip_update_rgb(strip_dev, color_rgb, STRIP_NUM_PIXELS);
 8001c3c:	4d45      	ldr	r5, [pc, #276]	; (8001d54 <update_indication_task+0x230>)
 8001c3e:	6828      	ldr	r0, [r5, #0]
	const struct led_strip_driver_api *api =
 8001c40:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2210      	movs	r2, #16
 8001c46:	a903      	add	r1, sp, #12
 8001c48:	4798      	blx	r3
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
 8001c4a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001c4e:	2700      	movs	r7, #0
	return z_impl_k_sleep(timeout);
 8001c50:	4630      	mov	r0, r6
 8001c52:	4639      	mov	r1, r7
 8001c54:	f009 fe90 	bl	800b978 <z_impl_k_sleep>
                        led_strip_update_rgb(strip_dev, empty_rgb, STRIP_NUM_PIXELS);
 8001c58:	6828      	ldr	r0, [r5, #0]
	const struct led_strip_driver_api *api =
 8001c5a:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	493f      	ldr	r1, [pc, #252]	; (8001d60 <update_indication_task+0x23c>)
 8001c62:	4798      	blx	r3
 8001c64:	4630      	mov	r0, r6
 8001c66:	4639      	mov	r1, r7
 8001c68:	f009 fe86 	bl	800b978 <z_impl_k_sleep>
                        k_sleep(K_MSEC(BLINK_PERIOD_MS));
                        cnt++;
 8001c6c:	3401      	adds	r4, #1
 8001c6e:	b2e4      	uxtb	r4, r4
                    while (cnt < led_strip_state.strip_param.blink_cnt) {
 8001c70:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	d8e1      	bhi.n	8001c3c <update_indication_task+0x118>
                    }
                    led_strip_update_rgb(strip_dev, pixels_rgb, STRIP_NUM_PIXELS);
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <update_indication_task+0x230>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001c7c:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	492f      	ldr	r1, [pc, #188]	; (8001d40 <update_indication_task+0x21c>)
 8001c84:	4798      	blx	r3
 8001c86:	e02a      	b.n	8001cde <update_indication_task+0x1ba>
                    break;
                case INDICATION_TYPE_STATIC_COLOR:
                    switch (led_strip_state.strip_param.color) {
                        case COMMON_STRIP_COLOR_RED:
                            color_hsv = red_hsv;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <update_indication_task+0x224>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c8e:	e018      	b.n	8001cc2 <update_indication_task+0x19e>
                        case COMMON_STRIP_COLOR_GREEN:
                            color_hsv = green_hsv;
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <update_indication_task+0x220>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c96:	e014      	b.n	8001cc2 <update_indication_task+0x19e>
                        case COMMON_STRIP_COLOR_BLUE:
                            color_hsv = blue_hsv;
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <update_indication_task+0x22c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001c9e:	e010      	b.n	8001cc2 <update_indication_task+0x19e>
                        case COMMON_STRIP_COLOR_PURPLE:
                            color_hsv = purple_hsv;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <update_indication_task+0x234>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	9313      	str	r3, [sp, #76]	; 0x4c
                            break;
 8001ca6:	e00c      	b.n	8001cc2 <update_indication_task+0x19e>
                        case COMMON_STRIP_COLOR_YELLOW:
                            color_hsv = yellow_hsv;
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <update_indication_task+0x238>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	9313      	str	r3, [sp, #76]	; 0x4c
                        default:
                            break;
                    }

                    cnt = start_led_pos;
                    while (cnt < end_led_pos) {
 8001cae:	e008      	b.n	8001cc2 <update_indication_task+0x19e>
                        led_hsv2rgb(&color_hsv, &color_rgb[cnt++]);
 8001cb0:	1c65      	adds	r5, r4, #1
 8001cb2:	b2ed      	uxtb	r5, r5
 8001cb4:	ab03      	add	r3, sp, #12
 8001cb6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8001cba:	a813      	add	r0, sp, #76	; 0x4c
 8001cbc:	f008 fc6e 	bl	800a59c <led_hsv2rgb>
 8001cc0:	462c      	mov	r4, r5
                    while (cnt < end_led_pos) {
 8001cc2:	42a6      	cmp	r6, r4
 8001cc4:	d8f4      	bhi.n	8001cb0 <update_indication_task+0x18c>
                    }

                    led_strip_update_rgb(strip_dev, color_rgb, STRIP_NUM_PIXELS);
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <update_indication_task+0x230>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
	const struct led_strip_driver_api *api =
 8001cca:	6883      	ldr	r3, [r0, #8]
	return api->update_rgb(dev, pixels, num_pixels);
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2210      	movs	r2, #16
 8001cd0:	a903      	add	r1, sp, #12
 8001cd2:	4798      	blx	r3
 8001cd4:	e003      	b.n	8001cde <update_indication_task+0x1ba>
 8001cd6:	2064      	movs	r0, #100	; 0x64
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f009 fe4d 	bl	800b978 <z_impl_k_sleep>
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <update_indication_task+0x240>)
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_led_strip)) {
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f7      	beq.n	8001cd6 <update_indication_task+0x1b2>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2300      	movs	r3, #0
 8001cea:	a902      	add	r1, sp, #8
 8001cec:	481d      	ldr	r0, [pc, #116]	; (8001d64 <update_indication_task+0x240>)
 8001cee:	f008 ffd7 	bl	800aca0 <z_impl_k_msgq_get>
            led_strip_state = strip_indicate->led_strip_state;
 8001cf2:	9b02      	ldr	r3, [sp, #8]
 8001cf4:	466a      	mov	r2, sp
 8001cf6:	1d19      	adds	r1, r3, #4
 8001cf8:	c903      	ldmia	r1, {r0, r1}
 8001cfa:	e882 0003 	stmia.w	r2, {r0, r1}
            start_led_pos = strip_indicate->start_led_pos;
 8001cfe:	785c      	ldrb	r4, [r3, #1]
            end_led_pos = strip_indicate->end_led_pos;
 8001d00:	789e      	ldrb	r6, [r3, #2]
            indication_type = strip_indicate->indication_type;
 8001d02:	781b      	ldrb	r3, [r3, #0]
            switch (indication_type) {
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	f43f af28 	beq.w	8001b5a <update_indication_task+0x36>
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	f43f af6c 	beq.w	8001be8 <update_indication_task+0xc4>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e4      	bne.n	8001cde <update_indication_task+0x1ba>
                    switch (led_strip_state.strip_param.color) {
 8001d14:	f89d 3000 	ldrb.w	r3, [sp]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d8d2      	bhi.n	8001cc2 <update_indication_task+0x19e>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <update_indication_task+0x200>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001c89 	.word	0x08001c89
 8001d28:	08001c91 	.word	0x08001c91
 8001d2c:	08001c99 	.word	0x08001c99
 8001d30:	08001ca1 	.word	0x08001ca1
 8001d34:	08001ca9 	.word	0x08001ca9
 8001d38:	20000dec 	.word	0x20000dec
 8001d3c:	20000d98 	.word	0x20000d98
 8001d40:	20000dac 	.word	0x20000dac
 8001d44:	08010cec 	.word	0x08010cec
 8001d48:	08010cf4 	.word	0x08010cf4
 8001d4c:	08010ce8 	.word	0x08010ce8
 8001d50:	08010ce4 	.word	0x08010ce4
 8001d54:	20000000 	.word	0x20000000
 8001d58:	08010cf0 	.word	0x08010cf0
 8001d5c:	08010cf8 	.word	0x08010cf8
 8001d60:	20000d58 	.word	0x20000d58
 8001d64:	20000424 	.word	0x20000424

08001d68 <button_homeward_pressed_cb>:
    }
}


void button_homeward_pressed_cb(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
 8001d68:	b500      	push	{lr}
 8001d6a:	b091      	sub	sp, #68	; 0x44
    LOG_DBG("Button homeward pressed");
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <button_homeward_pressed_cb+0x5c>)
 8001d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <button_homeward_pressed_cb+0x60>)
 8001d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	f88d 2004 	strb.w	r2, [sp, #4]
 8001d8a:	9a01      	ldr	r2, [sp, #4]
 8001d8c:	920d      	str	r2, [sp, #52]	; 0x34
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f363 0100 	bfi	r1, r3, #0, #1
 8001d94:	f363 0141 	bfi	r1, r3, #1, #1
 8001d98:	f363 0182 	bfi	r1, r3, #2, #1
 8001d9c:	f363 01c5 	bfi	r1, r3, #3, #3
 8001da0:	2204      	movs	r2, #4
 8001da2:	f362 1188 	bfi	r1, r2, #6, #3
 8001da6:	220c      	movs	r2, #12
 8001da8:	f362 2152 	bfi	r1, r2, #9, #10
 8001dac:	f363 41de 	bfi	r1, r3, #19, #12
 8001db0:	f363 71df 	bfi	r1, r3, #31, #1
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
 8001db4:	aa0d      	add	r2, sp, #52	; 0x34
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <button_homeward_pressed_cb+0x64>)
 8001db8:	f00c fb2b 	bl	800e412 <z_impl_z_log_msg2_static_create>
}
 8001dbc:	b011      	add	sp, #68	; 0x44
 8001dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc2:	bf00      	nop
 8001dc4:	08010cfc 	.word	0x08010cfc
 8001dc8:	08010f0c 	.word	0x08010f0c
 8001dcc:	08010aa0 	.word	0x08010aa0

08001dd0 <periodic_timer_handler>:


static void periodic_timer_handler(struct k_timer* tim)
{
 8001dd0:	b500      	push	{lr}
 8001dd2:	b091      	sub	sp, #68	; 0x44
    LOG_DBG("Periodic timer handler");
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <periodic_timer_handler+0x94>)
 8001de2:	930e      	str	r3, [sp, #56]	; 0x38
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <periodic_timer_handler+0x98>)
 8001de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001de8:	2300      	movs	r3, #0
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f88d 2004 	strb.w	r2, [sp, #4]
 8001df2:	9a01      	ldr	r2, [sp, #4]
 8001df4:	920d      	str	r2, [sp, #52]	; 0x34
 8001df6:	4619      	mov	r1, r3
 8001df8:	f363 0100 	bfi	r1, r3, #0, #1
 8001dfc:	f363 0141 	bfi	r1, r3, #1, #1
 8001e00:	f363 0182 	bfi	r1, r3, #2, #1
 8001e04:	f363 01c5 	bfi	r1, r3, #3, #3
 8001e08:	2204      	movs	r2, #4
 8001e0a:	f362 1188 	bfi	r1, r2, #6, #3
 8001e0e:	220c      	movs	r2, #12
 8001e10:	f362 2152 	bfi	r1, r2, #9, #10
 8001e14:	f363 41de 	bfi	r1, r3, #19, #12
 8001e18:	f363 71df 	bfi	r1, r3, #31, #1
 8001e1c:	aa0d      	add	r2, sp, #52	; 0x34
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <periodic_timer_handler+0x9c>)
 8001e20:	f00c faf7 	bl	800e412 <z_impl_z_log_msg2_static_create>
    static uint8_t count = 10;

    current_state = transmit_state;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <periodic_timer_handler+0xa0>)
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <periodic_timer_handler+0xa4>)
 8001e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2c:	e883 0003 	stmia.w	r3, {r0, r1}

    if (count == (SYNC_COUNT + CURRENT_DEVICE_NUM)) {
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <periodic_timer_handler+0xa8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b0a      	cmp	r3, #10
 8001e36:	d00a      	beq.n	8001e4e <periodic_timer_handler+0x7e>
        k_msgq_put(&msgq_tx_msg, &sync_msg, K_NO_WAIT);
        count = 0;
    }
    count++;
 8001e38:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <periodic_timer_handler+0xa8>)
 8001e3a:	7813      	ldrb	r3, [r2, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	7013      	strb	r3, [r2, #0]
    k_wakeup(modem_task_id);
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <periodic_timer_handler+0xac>)
 8001e42:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001e44:	f00d ff0d 	bl	800fc62 <z_impl_k_wakeup>
}
 8001e48:	b011      	add	sp, #68	; 0x44
 8001e4a:	f85d fb04 	ldr.w	pc, [sp], #4
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2300      	movs	r3, #0
 8001e52:	490b      	ldr	r1, [pc, #44]	; (8001e80 <periodic_timer_handler+0xb0>)
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <periodic_timer_handler+0xb4>)
 8001e56:	f008 fec7 	bl	800abe8 <z_impl_k_msgq_put>
        count = 0;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <periodic_timer_handler+0xa8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	e7ea      	b.n	8001e38 <periodic_timer_handler+0x68>
 8001e62:	bf00      	nop
 8001e64:	08010d18 	.word	0x08010d18
 8001e68:	08010f28 	.word	0x08010f28
 8001e6c:	08010aa0 	.word	0x08010aa0
 8001e70:	20000e24 	.word	0x20000e24
 8001e74:	08010fa4 	.word	0x08010fa4
 8001e78:	200002e4 	.word	0x200002e4
 8001e7c:	08010fd8 	.word	0x08010fd8
 8001e80:	20000e18 	.word	0x20000e18
 8001e84:	200004c0 	.word	0x200004c0

08001e88 <system_init>:
{
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	b087      	sub	sp, #28
    struct led_strip_indicate_s *strip_ind = &status_ind;
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <system_init+0x12c>)
 8001e8e:	9305      	str	r3, [sp, #20]
    buzzer_dev_ptr = DEVICE_DT_GET(PWM_CTLR);
 8001e90:	4849      	ldr	r0, [pc, #292]	; (8001fb8 <system_init+0x130>)
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <system_init+0x134>)
 8001e94:	6018      	str	r0, [r3, #0]
 8001e96:	f00d fc7c 	bl	800f792 <z_device_is_ready>
    if (!device_is_ready(buzzer_dev_ptr)) {
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d071      	beq.n	8001f82 <system_init+0xfa>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001e9e:	4848      	ldr	r0, [pc, #288]	; (8001fc0 <system_init+0x138>)
 8001ea0:	f008 fc2a 	bl	800a6f8 <z_impl_device_get_binding>
    button_homeward_gpio_dev_ptr = device_get_binding(BUTTON_HOMEWARD_GPIO_PORT);
 8001ea4:	4c47      	ldr	r4, [pc, #284]	; (8001fc4 <system_init+0x13c>)
 8001ea6:	6020      	str	r0, [r4, #0]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8001ea8:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8001eaa:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001eac:	6813      	ldr	r3, [r2, #0]
 8001eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eb2:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8001eb4:	680b      	ldr	r3, [r1, #0]
 8001eb6:	f240 1201 	movw	r2, #257	; 0x101
 8001eba:	210d      	movs	r1, #13
 8001ebc:	4798      	blx	r3
    gpio_pin_interrupt_configure(button_homeward_gpio_dev_ptr, BUTTON_HOMEWARD_GPIO_PIN,
 8001ebe:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 8001ec0:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8001ec2:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8001ec4:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8001ec6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001eca:	d16f      	bne.n	8001fac <system_init+0x124>
 8001ecc:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8001ed0:	699c      	ldr	r4, [r3, #24]
 8001ed2:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8001ed6:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8001eda:	210d      	movs	r1, #13
 8001edc:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001ede:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <system_init+0x140>)
 8001ee0:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <system_init+0x144>)
 8001ee2:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 8001ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee8:	609a      	str	r2, [r3, #8]
    gpio_add_callback(button_homeward_gpio_dev_ptr, &button_homeward_cb);
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <system_init+0x13c>)
 8001eec:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8001eee:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	b113      	cbz	r3, 8001efa <system_init+0x72>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4934      	ldr	r1, [pc, #208]	; (8001fc8 <system_init+0x140>)
 8001ef8:	4798      	blx	r3
    k_work_init(&work_buzzer, work_buzzer_handler);
 8001efa:	4f35      	ldr	r7, [pc, #212]	; (8001fd0 <system_init+0x148>)
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <system_init+0x14c>)
 8001efe:	4638      	mov	r0, r7
 8001f00:	f00d fd08 	bl	800f914 <k_work_init>
    k_timer_init(&periodic_timer, periodic_timer_handler, NULL);
 8001f04:	4e34      	ldr	r6, [pc, #208]	; (8001fd8 <system_init+0x150>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	4934      	ldr	r1, [pc, #208]	; (8001fdc <system_init+0x154>)
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f00d ff6d 	bl	800fdea <k_timer_init>
    k_msgq_put(&msgq_led_strip, &strip_ind, K_NO_WAIT);
 8001f10:	2400      	movs	r4, #0
 8001f12:	2500      	movs	r5, #0
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	a905      	add	r1, sp, #20
 8001f1a:	4831      	ldr	r0, [pc, #196]	; (8001fe0 <system_init+0x158>)
 8001f1c:	f008 fe64 	bl	800abe8 <z_impl_k_msgq_put>
    current_state = recv_state;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <system_init+0x15c>)
 8001f22:	4a31      	ldr	r2, [pc, #196]	; (8001fe8 <system_init+0x160>)
 8001f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f28:	e883 0003 	stmia.w	r3, {r0, r1}
    sync_msg.receiver_addr = BROADCAST_ADDR;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <system_init+0x164>)
 8001f2e:	f04f 0c04 	mov.w	ip, #4
 8001f32:	f883 c001 	strb.w	ip, [r3, #1]
    sync_msg.sender_addr = cur_dev_addr;
 8001f36:	2100      	movs	r1, #0
 8001f38:	7019      	strb	r1, [r3, #0]
    sync_msg.message_type = MESSAGE_TYPE_SYNC;
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	709a      	strb	r2, [r3, #2]
    sync_msg.direction = REQUEST;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	70d8      	strb	r0, [r3, #3]
    sync_msg.workers_in_safe_zone = cur_workers_in_safe_zone;
 8001f42:	2203      	movs	r2, #3
 8001f44:	715a      	strb	r2, [r3, #5]
    sync_msg.battery_level = BATTERY_LEVEL_GOOD;
 8001f46:	7119      	strb	r1, [r3, #4]
    home_msg.receiver_addr = BROADCAST_ADDR;
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <system_init+0x168>)
 8001f4a:	f883 c001 	strb.w	ip, [r3, #1]
    home_msg.sender_addr = cur_dev_addr;
 8001f4e:	7019      	strb	r1, [r3, #0]
    home_msg.message_type = MESSAGE_TYPE_HOMEWARD;
 8001f50:	f04f 0c02 	mov.w	ip, #2
 8001f54:	f883 c002 	strb.w	ip, [r3, #2]
    home_msg.direction = REQUEST;
 8001f58:	70d8      	strb	r0, [r3, #3]
    home_msg.workers_in_safe_zone = cur_workers_in_safe_zone;
 8001f5a:	715a      	strb	r2, [r3, #5]
    home_msg.battery_level = BATTERY_LEVEL_GOOD;
 8001f5c:	7119      	strb	r1, [r3, #4]
	return z_impl_k_poll_signal_raise(sig, result);
 8001f5e:	4825      	ldr	r0, [pc, #148]	; (8001ff4 <system_init+0x16c>)
 8001f60:	f00a fa44 	bl	800c3ec <z_impl_k_poll_signal_raise>
    k_work_submit(&work_buzzer);
 8001f64:	4638      	mov	r0, r7
 8001f66:	f009 f939 	bl	800b1dc <k_work_submit>
	z_impl_k_timer_start(timer, duration, period);
 8001f6a:	f247 7288 	movw	r2, #30600	; 0x7788
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e9cd 2300 	strd	r2, r3, [sp]
 8001f74:	4622      	mov	r2, r4
 8001f76:	462b      	mov	r3, r5
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f009 ff3b 	bl	800bdf4 <z_impl_k_timer_start>
}
 8001f7e:	b007      	add	sp, #28
 8001f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_DBG("Error: PWM device %s is not ready\n", buzzer_dev_ptr->name);
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <system_init+0x134>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	9303      	str	r3, [sp, #12]
 8001f8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <system_init+0x170>)
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <system_init+0x174>)
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	9000      	str	r0, [sp, #0]
 8001f94:	4603      	mov	r3, r0
 8001f96:	2204      	movs	r2, #4
 8001f98:	4919      	ldr	r1, [pc, #100]	; (8002000 <system_init+0x178>)
 8001f9a:	f00b fe1c 	bl	800dbd6 <z_log_msg2_runtime_create>
	return z_impl_k_sleep(timeout);
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa6:	f009 fce7 	bl	800b978 <z_impl_k_sleep>
 8001faa:	e778      	b.n	8001e9e <system_init+0x16>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8001fac:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8001fb0:	e78e      	b.n	8001ed0 <system_init+0x48>
 8001fb2:	bf00      	nop
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	08010790 	.word	0x08010790
 8001fbc:	20000e20 	.word	0x20000e20
 8001fc0:	08010d5c 	.word	0x08010d5c
 8001fc4:	20000e08 	.word	0x20000e08
 8001fc8:	20000dfc 	.word	0x20000dfc
 8001fcc:	08001d69 	.word	0x08001d69
 8001fd0:	20000e40 	.word	0x20000e40
 8001fd4:	08003051 	.word	0x08003051
 8001fd8:	200005c0 	.word	0x200005c0
 8001fdc:	08001dd1 	.word	0x08001dd1
 8001fe0:	20000424 	.word	0x20000424
 8001fe4:	20000e24 	.word	0x20000e24
 8001fe8:	08010f9c 	.word	0x08010f9c
 8001fec:	20000e18 	.word	0x20000e18
 8001ff0:	20000e0c 	.word	0x20000e0c
 8001ff4:	20000028 	.word	0x20000028
 8001ff8:	08010f40 	.word	0x08010f40
 8001ffc:	08010d34 	.word	0x08010d34
 8002000:	08010aa0 	.word	0x08010aa0

08002004 <modem_fun>:
    }
}


static inline int32_t modem_fun(void)
{
 8002004:	b570      	push	{r4, r5, r6, lr}
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    /* Check messages into queue
     * Beginning check priority queue, after check standard queue
     * If queue's is not empty receiving will be stopped */
    if (current_state.state == TRANSMIT) {
 8002006:	4ba2      	ldr	r3, [pc, #648]	; (8002290 <modem_fun+0x28c>)
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d002      	beq.n	8002014 <modem_fun+0x10>
    int32_t rc = 1;
 800200e:	2501      	movs	r5, #1

    /*
     * Return 1 if current_state.state != TRANSMIT_STATE
     * */
    return rc;
}
 8002010:	4628      	mov	r0, r5
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	2500      	movs	r5, #0
 8002016:	4b9f      	ldr	r3, [pc, #636]	; (8002294 <modem_fun+0x290>)
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_tx_msg_prio)) {
 800201a:	b923      	cbnz	r3, 8002026 <modem_fun+0x22>
 800201c:	4b9e      	ldr	r3, [pc, #632]	; (8002298 <modem_fun+0x294>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        } else if (k_msgq_num_used_get(&msgq_tx_msg)) {
 8002020:	b9e3      	cbnz	r3, 800205c <modem_fun+0x58>
            return rc;
 8002022:	2501      	movs	r5, #1
 8002024:	e7f4      	b.n	8002010 <modem_fun+0xc>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8002026:	4c9b      	ldr	r4, [pc, #620]	; (8002294 <modem_fun+0x290>)
 8002028:	2200      	movs	r2, #0
 800202a:	2300      	movs	r3, #0
 800202c:	499b      	ldr	r1, [pc, #620]	; (800229c <modem_fun+0x298>)
 800202e:	4620      	mov	r0, r4
 8002030:	f008 fe36 	bl	800aca0 <z_impl_k_msgq_get>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002034:	f04f 0310 	mov.w	r3, #16
 8002038:	f3ef 8211 	mrs	r2, BASEPRI
 800203c:	f383 8812 	msr	BASEPRI_MAX, r3
 8002040:	f3bf 8f6f 	isb	sy
        key = k_spin_lock(&spin);
 8002044:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <modem_fun+0x29c>)
 8002046:	601a      	str	r2, [r3, #0]
        lora_recv_async(lora_dev_ptr, NULL);
 8002048:	4b96      	ldr	r3, [pc, #600]	; (80022a4 <modem_fun+0x2a0>)
 800204a:	6818      	ldr	r0, [r3, #0]
 *	     asynchronous receptions will be cancelled.
 * @return 0 when reception successfully setup, negative on error
 */
static inline int lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
	const struct lora_driver_api *api =
 800204c:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv_async(dev, cb);
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2100      	movs	r1, #0
 8002052:	4798      	blx	r3
    uint8_t pos = 0;
 8002054:	2300      	movs	r3, #0
    uint32_t new_msg = 0;
 8002056:	461a      	mov	r2, r3
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8002058:	4618      	mov	r0, r3
 800205a:	e020      	b.n	800209e <modem_fun+0x9a>
 800205c:	4c8e      	ldr	r4, [pc, #568]	; (8002298 <modem_fun+0x294>)
 800205e:	2200      	movs	r2, #0
 8002060:	2300      	movs	r3, #0
 8002062:	498e      	ldr	r1, [pc, #568]	; (800229c <modem_fun+0x298>)
 8002064:	4620      	mov	r0, r4
 8002066:	f008 fe1b 	bl	800aca0 <z_impl_k_msgq_get>
            cur_queue = &msgq_tx_msg;
 800206a:	e7e3      	b.n	8002034 <modem_fun+0x30>
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 800206c:	498b      	ldr	r1, [pc, #556]	; (800229c <modem_fun+0x298>)
 800206e:	780e      	ldrb	r6, [r1, #0]
    while ( *pos < start_pos + field_len ) {
 8002070:	469c      	mov	ip, r3
 8002072:	e00f      	b.n	8002094 <modem_fun+0x90>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 fe0c 	lsl.w	lr, r1, ip
 800207a:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800207e:	ebac 0203 	sub.w	r2, ip, r3
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4032      	ands	r2, r6
 8002088:	409a      	lsls	r2, r3
 800208a:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800208e:	448c      	add	ip, r1
 8002090:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 8002094:	1c99      	adds	r1, r3, #2
 8002096:	458c      	cmp	ip, r1
 8002098:	dbec      	blt.n	8002074 <modem_fun+0x70>
 800209a:	4663      	mov	r3, ip
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 800209c:	3001      	adds	r0, #1
 800209e:	2805      	cmp	r0, #5
 80020a0:	f300 808f 	bgt.w	80021c2 <modem_fun+0x1be>
        switch (cur_field) {
 80020a4:	2805      	cmp	r0, #5
 80020a6:	d8f9      	bhi.n	800209c <modem_fun+0x98>
 80020a8:	a101      	add	r1, pc, #4	; (adr r1, 80020b0 <modem_fun+0xac>)
 80020aa:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	0800206d 	.word	0x0800206d
 80020b4:	080020c9 	.word	0x080020c9
 80020b8:	080020fb 	.word	0x080020fb
 80020bc:	0800212d 	.word	0x0800212d
 80020c0:	0800215f 	.word	0x0800215f
 80020c4:	08002191 	.word	0x08002191
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 80020c8:	4974      	ldr	r1, [pc, #464]	; (800229c <modem_fun+0x298>)
 80020ca:	784e      	ldrb	r6, [r1, #1]
    while ( *pos < start_pos + field_len ) {
 80020cc:	469c      	mov	ip, r3
 80020ce:	e00f      	b.n	80020f0 <modem_fun+0xec>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 fe0c 	lsl.w	lr, r1, ip
 80020d6:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80020da:	ebac 0203 	sub.w	r2, ip, r3
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4032      	ands	r2, r6
 80020e4:	409a      	lsls	r2, r3
 80020e6:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 80020ea:	448c      	add	ip, r1
 80020ec:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 80020f0:	1cd9      	adds	r1, r3, #3
 80020f2:	458c      	cmp	ip, r1
 80020f4:	dbec      	blt.n	80020d0 <modem_fun+0xcc>
 80020f6:	4663      	mov	r3, ip
 80020f8:	e7d0      	b.n	800209c <modem_fun+0x98>
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 80020fa:	4968      	ldr	r1, [pc, #416]	; (800229c <modem_fun+0x298>)
 80020fc:	788e      	ldrb	r6, [r1, #2]
    while ( *pos < start_pos + field_len ) {
 80020fe:	469c      	mov	ip, r3
 8002100:	e00f      	b.n	8002122 <modem_fun+0x11e>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002102:	2101      	movs	r1, #1
 8002104:	fa01 fe0c 	lsl.w	lr, r1, ip
 8002108:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800210c:	ebac 0203 	sub.w	r2, ip, r3
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	4032      	ands	r2, r6
 8002116:	409a      	lsls	r2, r3
 8002118:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800211c:	448c      	add	ip, r1
 800211e:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 8002122:	1d19      	adds	r1, r3, #4
 8002124:	458c      	cmp	ip, r1
 8002126:	dbec      	blt.n	8002102 <modem_fun+0xfe>
 8002128:	4663      	mov	r3, ip
 800212a:	e7b7      	b.n	800209c <modem_fun+0x98>
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 800212c:	495b      	ldr	r1, [pc, #364]	; (800229c <modem_fun+0x298>)
 800212e:	78ce      	ldrb	r6, [r1, #3]
    while ( *pos < start_pos + field_len ) {
 8002130:	469c      	mov	ip, r3
 8002132:	e00f      	b.n	8002154 <modem_fun+0x150>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 fe0c 	lsl.w	lr, r1, ip
 800213a:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800213e:	ebac 0203 	sub.w	r2, ip, r3
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4032      	ands	r2, r6
 8002148:	409a      	lsls	r2, r3
 800214a:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 800214e:	448c      	add	ip, r1
 8002150:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 8002154:	1c59      	adds	r1, r3, #1
 8002156:	458c      	cmp	ip, r1
 8002158:	dbec      	blt.n	8002134 <modem_fun+0x130>
 800215a:	4663      	mov	r3, ip
 800215c:	e79e      	b.n	800209c <modem_fun+0x98>
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 800215e:	494f      	ldr	r1, [pc, #316]	; (800229c <modem_fun+0x298>)
 8002160:	790e      	ldrb	r6, [r1, #4]
    while ( *pos < start_pos + field_len ) {
 8002162:	469c      	mov	ip, r3
 8002164:	e00f      	b.n	8002186 <modem_fun+0x182>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 fe0c 	lsl.w	lr, r1, ip
 800216c:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 8002170:	ebac 0203 	sub.w	r2, ip, r3
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4032      	ands	r2, r6
 800217a:	409a      	lsls	r2, r3
 800217c:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 8002180:	448c      	add	ip, r1
 8002182:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 8002186:	1c59      	adds	r1, r3, #1
 8002188:	458c      	cmp	ip, r1
 800218a:	dbec      	blt.n	8002166 <modem_fun+0x162>
 800218c:	4663      	mov	r3, ip
 800218e:	e785      	b.n	800209c <modem_fun+0x98>
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8002190:	4942      	ldr	r1, [pc, #264]	; (800229c <modem_fun+0x298>)
 8002192:	794e      	ldrb	r6, [r1, #5]
    while ( *pos < start_pos + field_len ) {
 8002194:	469c      	mov	ip, r3
 8002196:	e00f      	b.n	80021b8 <modem_fun+0x1b4>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 fe0c 	lsl.w	lr, r1, ip
 800219e:	ea22 0e0e 	bic.w	lr, r2, lr
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 80021a2:	ebac 0203 	sub.w	r2, ip, r3
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4032      	ands	r2, r6
 80021ac:	409a      	lsls	r2, r3
 80021ae:	ea4e 0202 	orr.w	r2, lr, r2
        (*pos)++;
 80021b2:	448c      	add	ip, r1
 80021b4:	fa5f fc8c 	uxtb.w	ip, ip
    while ( *pos < start_pos + field_len ) {
 80021b8:	1cd9      	adds	r1, r3, #3
 80021ba:	458c      	cmp	ip, r1
 80021bc:	dbec      	blt.n	8002198 <modem_fun+0x194>
 80021be:	4663      	mov	r3, ip
 80021c0:	e76c      	b.n	800209c <modem_fun+0x98>
        for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 80021c2:	f04f 0c00 	mov.w	ip, #0
 80021c6:	e013      	b.n	80021f0 <modem_fun+0x1ec>
        bit = input & BIT(0);
 80021c8:	f000 0301 	and.w	r3, r0, #1
        output |= bit;
 80021cc:	432b      	orrs	r3, r5
        output = output << 1;
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	b2dd      	uxtb	r5, r3
        input = input >> 1;
 80021d2:	0840      	lsrs	r0, r0, #1
        pos++;
 80021d4:	3101      	adds	r1, #1
 80021d6:	b2c9      	uxtb	r1, r1
    while( pos < 7 ) {
 80021d8:	2906      	cmp	r1, #6
 80021da:	d9f5      	bls.n	80021c8 <modem_fun+0x1c4>
    bit = input & BIT(0);
 80021dc:	f000 0001 	and.w	r0, r0, #1
    output |= bit;
 80021e0:	4328      	orrs	r0, r5
            tx_buf[i] = reverse(tx_buf[i]);
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <modem_fun+0x2a4>)
 80021e4:	f803 000e 	strb.w	r0, [r3, lr]
        for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 80021e8:	f10c 0c01 	add.w	ip, ip, #1
 80021ec:	fa5f fc8c 	uxtb.w	ip, ip
 80021f0:	f1bc 0f01 	cmp.w	ip, #1
 80021f4:	d80c      	bhi.n	8002210 <modem_fun+0x20c>
            tx_buf[i] = (new_msg & (0x000000FF << i * 8) ) >> i * 8;
 80021f6:	46e6      	mov	lr, ip
 80021f8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80021fc:	20ff      	movs	r0, #255	; 0xff
 80021fe:	4098      	lsls	r0, r3
 8002200:	4010      	ands	r0, r2
 8002202:	40d8      	lsrs	r0, r3
 8002204:	b2c0      	uxtb	r0, r0
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <modem_fun+0x2a4>)
 8002208:	f803 000c 	strb.w	r0, [r3, ip]
    uint8_t pos = 0;
 800220c:	2100      	movs	r1, #0
    while( pos < 7 ) {
 800220e:	e7e3      	b.n	80021d8 <modem_fun+0x1d4>
        lora_cfg.tx = true;
 8002210:	4926      	ldr	r1, [pc, #152]	; (80022ac <modem_fun+0x2a8>)
 8002212:	2301      	movs	r3, #1
 8002214:	734b      	strb	r3, [r1, #13]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <modem_fun+0x2a0>)
 8002218:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 800221a:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4798      	blx	r3
        if (rc < 0) {
 8002220:	1e05      	subs	r5, r0, #0
 8002222:	db24      	blt.n	800226e <modem_fun+0x26a>
        rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <modem_fun+0x2a0>)
 8002226:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8002228:	6883      	ldr	r3, [r0, #8]
	return api->send(dev, data, data_len);
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2202      	movs	r2, #2
 800222e:	491e      	ldr	r1, [pc, #120]	; (80022a8 <modem_fun+0x2a4>)
 8002230:	4798      	blx	r3
        if (!rc) {
 8002232:	4605      	mov	r5, r0
 8002234:	bb10      	cbnz	r0, 800227c <modem_fun+0x278>
            lora_cfg.tx = false;
 8002236:	491d      	ldr	r1, [pc, #116]	; (80022ac <modem_fun+0x2a8>)
 8002238:	2300      	movs	r3, #0
 800223a:	734b      	strb	r3, [r1, #13]
            rc = lora_config(lora_dev_ptr, &lora_cfg);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <modem_fun+0x2a0>)
 800223e:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8002240:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4798      	blx	r3
            if (rc < 0) {
 8002246:	1e05      	subs	r5, r0, #0
 8002248:	f6ff aee2 	blt.w	8002010 <modem_fun+0xc>
                lora_recv_async(lora_dev_ptr, lora_receive_cb);
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <modem_fun+0x2a0>)
 800224e:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8002250:	6883      	ldr	r3, [r0, #8]
	return api->recv_async(dev, cb);
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <modem_fun+0x2ac>)
 8002256:	4798      	blx	r3
        if (tx_msg.message_type == MESSAGE_TYPE_SYNC)
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <modem_fun+0x298>)
 800225a:	789b      	ldrb	r3, [r3, #2]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d014      	beq.n	800228a <modem_fun+0x286>
        k_spin_unlock(&spin, key);
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <modem_fun+0x29c>)
 8002262:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	e6d0      	b.n	8002010 <modem_fun+0xc>
	return z_impl_k_msgq_put(msgq, data, timeout);
 800226e:	2200      	movs	r2, #0
 8002270:	2300      	movs	r3, #0
 8002272:	490a      	ldr	r1, [pc, #40]	; (800229c <modem_fun+0x298>)
 8002274:	4620      	mov	r0, r4
 8002276:	f008 fcb7 	bl	800abe8 <z_impl_k_msgq_put>
            return rc;
 800227a:	e6c9      	b.n	8002010 <modem_fun+0xc>
 800227c:	2200      	movs	r2, #0
 800227e:	2300      	movs	r3, #0
 8002280:	4906      	ldr	r1, [pc, #24]	; (800229c <modem_fun+0x298>)
 8002282:	4620      	mov	r0, r4
 8002284:	f008 fcb0 	bl	800abe8 <z_impl_k_msgq_put>
 8002288:	e7e6      	b.n	8002258 <modem_fun+0x254>
            rc = 1;
 800228a:	2501      	movs	r5, #1
 800228c:	e7e8      	b.n	8002260 <modem_fun+0x25c>
 800228e:	bf00      	nop
 8002290:	20000e24 	.word	0x20000e24
 8002294:	200004f4 	.word	0x200004f4
 8002298:	200004c0 	.word	0x200004c0
 800229c:	20000e38 	.word	0x20000e38
 80022a0:	20000e14 	.word	0x20000e14
 80022a4:	20000e30 	.word	0x20000e30
 80022a8:	20000e34 	.word	0x20000e34
 80022ac:	20000018 	.word	0x20000018
 80022b0:	08002f0d 	.word	0x08002f0d

080022b4 <base_station_proc_task>:
{
 80022b4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80022b8:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	f04f 0900 	mov.w	r9, #0
 80022c2:	f8c7 9034 	str.w	r9, [r7, #52]	; 0x34
    int16_t rssi = 0;
 80022c6:	f8a7 908e 	strh.w	r9, [r7, #142]	; 0x8e
    struct message_s tx_msg_proc = {0};
 80022ca:	f8c7 9084 	str.w	r9, [r7, #132]	; 0x84
 80022ce:	f8a7 9088 	strh.w	r9, [r7, #136]	; 0x88
    struct message_s rx_msg_proc = {0};
 80022d2:	f8c7 907c 	str.w	r9, [r7, #124]	; 0x7c
 80022d6:	f8a7 9080 	strh.w	r9, [r7, #128]	; 0x80
    struct led_strip_indicate_s *strip_ind = NULL;
 80022da:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
    struct k_msgq* msgq_cur_msg_tx_ptr = &msgq_tx_msg; /* Default queue */
 80022de:	4b85      	ldr	r3, [pc, #532]	; (80024f4 <base_station_proc_task+0x240>)
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e2:	4643      	mov	r3, r8
 80022e4:	46d0      	mov	r8, sl
 80022e6:	46da      	mov	sl, fp
 80022e8:	469b      	mov	fp, r3
 80022ea:	f000 bdab 	b.w	8002e44 <base_station_proc_task+0xb90>
    uint8_t cnt = 0;
    while(i < len) {
        if (!(*(buf + i))) {
            cnt++;
        }
        i++;
 80022ee:	3301      	adds	r3, #1
 80022f0:	b2db      	uxtb	r3, r3
    while(i < len) {
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d807      	bhi.n	8002306 <base_station_proc_task+0x52>
        if (!(*(buf + i))) {
 80022f6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80022fa:	5cc9      	ldrb	r1, [r1, r3]
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d1f6      	bne.n	80022ee <base_station_proc_task+0x3a>
            cnt++;
 8002300:	3201      	adds	r2, #1
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	e7f3      	b.n	80022ee <base_station_proc_task+0x3a>
            if (is_empty_msg(rx_buf_proc, MESSAGE_LEN_IN_BYTES)) {
 8002306:	2a02      	cmp	r2, #2
 8002308:	d002      	beq.n	8002310 <base_station_proc_task+0x5c>
            cur_msg = 0;
 800230a:	2100      	movs	r1, #0
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 800230c:	4608      	mov	r0, r1
 800230e:	e046      	b.n	800239e <base_station_proc_task+0xea>
                LOG_DBG("Empty message");
 8002310:	2301      	movs	r3, #1
 8002312:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002316:	2302      	movs	r3, #2
 8002318:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800231c:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <base_station_proc_task+0x244>)
 800231e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <base_station_proc_task+0x248>)
 8002324:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8002328:	2300      	movs	r3, #0
 800232a:	657b      	str	r3, [r7, #84]	; 0x54
 800232c:	2203      	movs	r2, #3
 800232e:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8002332:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002334:	f8c7 224c 	str.w	r2, [r7, #588]	; 0x24c
 8002338:	f363 0800 	bfi	r8, r3, #0, #1
 800233c:	f363 0841 	bfi	r8, r3, #1, #1
 8002340:	f363 0882 	bfi	r8, r3, #2, #1
 8002344:	f363 08c5 	bfi	r8, r3, #3, #3
 8002348:	2204      	movs	r2, #4
 800234a:	f362 1888 	bfi	r8, r2, #6, #3
 800234e:	220c      	movs	r2, #12
 8002350:	f362 2852 	bfi	r8, r2, #9, #10
 8002354:	f363 48de 	bfi	r8, r3, #19, #12
 8002358:	f363 78df 	bfi	r8, r3, #31, #1
 800235c:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8002360:	4641      	mov	r1, r8
 8002362:	4867      	ldr	r0, [pc, #412]	; (8002500 <base_station_proc_task+0x24c>)
 8002364:	f00c f855 	bl	800e412 <z_impl_z_log_msg2_static_create>
                continue;
 8002368:	f000 bd6c 	b.w	8002e44 <base_station_proc_task+0xb90>
        bit = input & BIT(0);
 800236c:	f004 0301 	and.w	r3, r4, #1
        output |= bit;
 8002370:	ea49 0903 	orr.w	r9, r9, r3
        output = output << 1;
 8002374:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002378:	fa5f f989 	uxtb.w	r9, r9
        input = input >> 1;
 800237c:	0864      	lsrs	r4, r4, #1
        pos++;
 800237e:	3201      	adds	r2, #1
 8002380:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 8002382:	2a06      	cmp	r2, #6
 8002384:	d9f2      	bls.n	800236c <base_station_proc_task+0xb8>
    bit = input & BIT(0);
 8002386:	f004 0401 	and.w	r4, r4, #1
    output |= bit;
 800238a:	ea49 0404 	orr.w	r4, r9, r4
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 800238e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002392:	555c      	strb	r4, [r3, r5]
                cur_msg |= (rx_buf_proc[i]) << i*8;
 8002394:	00ed      	lsls	r5, r5, #3
 8002396:	40ac      	lsls	r4, r5
 8002398:	4321      	orrs	r1, r4
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 800239a:	3001      	adds	r0, #1
 800239c:	b2c0      	uxtb	r0, r0
 800239e:	2801      	cmp	r0, #1
 80023a0:	d805      	bhi.n	80023ae <base_station_proc_task+0xfa>
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 80023a2:	4605      	mov	r5, r0
 80023a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80023a8:	5c1c      	ldrb	r4, [r3, r0]
    uint8_t pos = 0;
 80023aa:	2200      	movs	r2, #0
    while( pos < 7 ) {
 80023ac:	e7e9      	b.n	8002382 <base_station_proc_task+0xce>
    uint8_t pos = 0;
 80023ae:	2300      	movs	r3, #0
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 80023b0:	4618      	mov	r0, r3
 80023b2:	e016      	b.n	80023e2 <base_station_proc_task+0x12e>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80023b4:	1ae5      	subs	r5, r4, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	fa02 f605 	lsl.w	r6, r2, r5
 80023bc:	f897 507c 	ldrb.w	r5, [r7, #124]	; 0x7c
 80023c0:	ea25 0506 	bic.w	r5, r5, r6
 80023c4:	f887 507c 	strb.w	r5, [r7, #124]	; 0x7c
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80023c8:	40a2      	lsls	r2, r4
 80023ca:	400a      	ands	r2, r1
 80023cc:	40da      	lsrs	r2, r3
 80023ce:	432a      	orrs	r2, r5
 80023d0:	f887 207c 	strb.w	r2, [r7, #124]	; 0x7c
        (*pos)++;
 80023d4:	3401      	adds	r4, #1
 80023d6:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 80023d8:	1c9a      	adds	r2, r3, #2
 80023da:	4294      	cmp	r4, r2
 80023dc:	dbea      	blt.n	80023b4 <base_station_proc_task+0x100>
 80023de:	4623      	mov	r3, r4
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 80023e0:	3001      	adds	r0, #1
 80023e2:	2805      	cmp	r0, #5
 80023e4:	f300 808e 	bgt.w	8002504 <base_station_proc_task+0x250>
        switch (cur_field) {
 80023e8:	2805      	cmp	r0, #5
 80023ea:	d8f9      	bhi.n	80023e0 <base_station_proc_task+0x12c>
 80023ec:	e8df f000 	tbb	[pc, r0]
 80023f0:	4e351c03 	.word	0x4e351c03
 80023f4:	8067      	.short	0x8067
 80023f6:	461c      	mov	r4, r3
 80023f8:	e7ee      	b.n	80023d8 <base_station_proc_task+0x124>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80023fa:	1ae5      	subs	r5, r4, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	fa02 f605 	lsl.w	r6, r2, r5
 8002402:	f897 507d 	ldrb.w	r5, [r7, #125]	; 0x7d
 8002406:	ea25 0506 	bic.w	r5, r5, r6
 800240a:	f887 507d 	strb.w	r5, [r7, #125]	; 0x7d
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800240e:	40a2      	lsls	r2, r4
 8002410:	400a      	ands	r2, r1
 8002412:	40da      	lsrs	r2, r3
 8002414:	432a      	orrs	r2, r5
 8002416:	f887 207d 	strb.w	r2, [r7, #125]	; 0x7d
        (*pos)++;
 800241a:	3401      	adds	r4, #1
 800241c:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 800241e:	1cda      	adds	r2, r3, #3
 8002420:	4294      	cmp	r4, r2
 8002422:	dbea      	blt.n	80023fa <base_station_proc_task+0x146>
 8002424:	4623      	mov	r3, r4
 8002426:	e7db      	b.n	80023e0 <base_station_proc_task+0x12c>
        switch (cur_field) {
 8002428:	461c      	mov	r4, r3
 800242a:	e7f8      	b.n	800241e <base_station_proc_task+0x16a>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800242c:	1ae5      	subs	r5, r4, r3
 800242e:	2201      	movs	r2, #1
 8002430:	fa02 f605 	lsl.w	r6, r2, r5
 8002434:	f897 507e 	ldrb.w	r5, [r7, #126]	; 0x7e
 8002438:	ea25 0506 	bic.w	r5, r5, r6
 800243c:	f887 507e 	strb.w	r5, [r7, #126]	; 0x7e
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002440:	40a2      	lsls	r2, r4
 8002442:	400a      	ands	r2, r1
 8002444:	40da      	lsrs	r2, r3
 8002446:	432a      	orrs	r2, r5
 8002448:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
        (*pos)++;
 800244c:	3401      	adds	r4, #1
 800244e:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 8002450:	1d1a      	adds	r2, r3, #4
 8002452:	4294      	cmp	r4, r2
 8002454:	dbea      	blt.n	800242c <base_station_proc_task+0x178>
 8002456:	4623      	mov	r3, r4
 8002458:	e7c2      	b.n	80023e0 <base_station_proc_task+0x12c>
        switch (cur_field) {
 800245a:	461c      	mov	r4, r3
 800245c:	e7f8      	b.n	8002450 <base_station_proc_task+0x19c>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800245e:	1ae5      	subs	r5, r4, r3
 8002460:	2201      	movs	r2, #1
 8002462:	fa02 f605 	lsl.w	r6, r2, r5
 8002466:	f897 507f 	ldrb.w	r5, [r7, #127]	; 0x7f
 800246a:	ea25 0506 	bic.w	r5, r5, r6
 800246e:	f887 507f 	strb.w	r5, [r7, #127]	; 0x7f
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 8002472:	40a2      	lsls	r2, r4
 8002474:	400a      	ands	r2, r1
 8002476:	40da      	lsrs	r2, r3
 8002478:	432a      	orrs	r2, r5
 800247a:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
        (*pos)++;
 800247e:	3401      	adds	r4, #1
 8002480:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	4294      	cmp	r4, r2
 8002486:	dbea      	blt.n	800245e <base_station_proc_task+0x1aa>
 8002488:	4623      	mov	r3, r4
 800248a:	e7a9      	b.n	80023e0 <base_station_proc_task+0x12c>
        switch (cur_field) {
 800248c:	461c      	mov	r4, r3
 800248e:	e7f8      	b.n	8002482 <base_station_proc_task+0x1ce>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 8002490:	1ae5      	subs	r5, r4, r3
 8002492:	2201      	movs	r2, #1
 8002494:	fa02 f605 	lsl.w	r6, r2, r5
 8002498:	f897 5080 	ldrb.w	r5, [r7, #128]	; 0x80
 800249c:	ea25 0506 	bic.w	r5, r5, r6
 80024a0:	f887 5080 	strb.w	r5, [r7, #128]	; 0x80
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80024a4:	40a2      	lsls	r2, r4
 80024a6:	400a      	ands	r2, r1
 80024a8:	40da      	lsrs	r2, r3
 80024aa:	432a      	orrs	r2, r5
 80024ac:	f887 2080 	strb.w	r2, [r7, #128]	; 0x80
        (*pos)++;
 80024b0:	3401      	adds	r4, #1
 80024b2:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	4294      	cmp	r4, r2
 80024b8:	dbea      	blt.n	8002490 <base_station_proc_task+0x1dc>
 80024ba:	4623      	mov	r3, r4
 80024bc:	e790      	b.n	80023e0 <base_station_proc_task+0x12c>
        switch (cur_field) {
 80024be:	461c      	mov	r4, r3
 80024c0:	e7f8      	b.n	80024b4 <base_station_proc_task+0x200>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 80024c2:	1ae5      	subs	r5, r4, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	fa02 f605 	lsl.w	r6, r2, r5
 80024ca:	f897 5081 	ldrb.w	r5, [r7, #129]	; 0x81
 80024ce:	ea25 0506 	bic.w	r5, r5, r6
 80024d2:	f887 5081 	strb.w	r5, [r7, #129]	; 0x81
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 80024d6:	40a2      	lsls	r2, r4
 80024d8:	400a      	ands	r2, r1
 80024da:	40da      	lsrs	r2, r3
 80024dc:	432a      	orrs	r2, r5
 80024de:	f887 2081 	strb.w	r2, [r7, #129]	; 0x81
        (*pos)++;
 80024e2:	3401      	adds	r4, #1
 80024e4:	b2e4      	uxtb	r4, r4
    while ( *pos < start_pos + field_len ) {
 80024e6:	1cda      	adds	r2, r3, #3
 80024e8:	4294      	cmp	r4, r2
 80024ea:	dbea      	blt.n	80024c2 <base_station_proc_task+0x20e>
 80024ec:	4623      	mov	r3, r4
 80024ee:	e777      	b.n	80023e0 <base_station_proc_task+0x12c>
        switch (cur_field) {
 80024f0:	461c      	mov	r4, r3
 80024f2:	e7f8      	b.n	80024e6 <base_station_proc_task+0x232>
 80024f4:	200004c0 	.word	0x200004c0
 80024f8:	08010d64 	.word	0x08010d64
 80024fc:	08010f4c 	.word	0x08010f4c
 8002500:	08010aa0 	.word	0x08010aa0
            if ( (rx_msg_proc.receiver_addr != BROADCAST_ADDR) &&
 8002504:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002508:	2b04      	cmp	r3, #4
 800250a:	d002      	beq.n	8002512 <base_station_proc_task+0x25e>
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 8089 	bne.w	8002624 <base_station_proc_task+0x370>
            switch (rx_msg_proc.direction) {
 8002512:	f897 607f 	ldrb.w	r6, [r7, #127]	; 0x7f
 8002516:	2e00      	cmp	r6, #0
 8002518:	f000 82bb 	beq.w	8002a92 <base_station_proc_task+0x7de>
 800251c:	2e01      	cmp	r6, #1
 800251e:	f040 8437 	bne.w	8002d90 <base_station_proc_task+0xadc>
                    LOG_DBG(" REQUEST");
 8002522:	f04f 0301 	mov.w	r3, #1
 8002526:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800252a:	f04f 0102 	mov.w	r1, #2
 800252e:	f8a7 105a 	strh.w	r1, [r7, #90]	; 0x5a
 8002532:	4bc8      	ldr	r3, [pc, #800]	; (8002854 <base_station_proc_task+0x5a0>)
 8002534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002538:	48c7      	ldr	r0, [pc, #796]	; (8002858 <base_station_proc_task+0x5a4>)
 800253a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800253e:	2400      	movs	r4, #0
 8002540:	657c      	str	r4, [r7, #84]	; 0x54
 8002542:	f04f 0303 	mov.w	r3, #3
 8002546:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002552:	f364 0300 	bfi	r3, r4, #0, #1
 8002556:	f364 0341 	bfi	r3, r4, #1, #1
 800255a:	f364 0382 	bfi	r3, r4, #2, #1
 800255e:	f364 03c5 	bfi	r3, r4, #3, #3
 8002562:	2504      	movs	r5, #4
 8002564:	f365 1388 	bfi	r3, r5, #6, #3
 8002568:	f04f 0c0c 	mov.w	ip, #12
 800256c:	f36c 2352 	bfi	r3, ip, #9, #10
 8002570:	f364 43de 	bfi	r3, r4, #19, #12
 8002574:	f364 73df 	bfi	r3, r4, #31, #1
 8002578:	4619      	mov	r1, r3
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
 800257c:	4623      	mov	r3, r4
 800257e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002582:	48b6      	ldr	r0, [pc, #728]	; (800285c <base_station_proc_task+0x5a8>)
 8002584:	f00b ff45 	bl	800e412 <z_impl_z_log_msg2_static_create>
                    LOG_DBG("Message type:");
 8002588:	f04f 0201 	mov.w	r2, #1
 800258c:	f8a7 2058 	strh.w	r2, [r7, #88]	; 0x58
 8002590:	f04f 0102 	mov.w	r1, #2
 8002594:	f8a7 105a 	strh.w	r1, [r7, #90]	; 0x5a
 8002598:	4bb1      	ldr	r3, [pc, #708]	; (8002860 <base_station_proc_task+0x5ac>)
 800259a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800259e:	48ae      	ldr	r0, [pc, #696]	; (8002858 <base_station_proc_task+0x5a4>)
 80025a0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 80025a4:	657c      	str	r4, [r7, #84]	; 0x54
 80025a6:	f04f 0303 	mov.w	r3, #3
 80025aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	f364 0300 	bfi	r3, r4, #0, #1
 80025ba:	f364 0341 	bfi	r3, r4, #1, #1
 80025be:	f364 0382 	bfi	r3, r4, #2, #1
 80025c2:	f364 03c5 	bfi	r3, r4, #3, #3
 80025c6:	f365 1388 	bfi	r3, r5, #6, #3
 80025ca:	f04f 0c0c 	mov.w	ip, #12
 80025ce:	f36c 2352 	bfi	r3, ip, #9, #10
 80025d2:	f364 43de 	bfi	r3, r4, #19, #12
 80025d6:	f364 73df 	bfi	r3, r4, #31, #1
 80025da:	4619      	mov	r1, r3
 80025dc:	647b      	str	r3, [r7, #68]	; 0x44
 80025de:	4623      	mov	r3, r4
 80025e0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80025e4:	489d      	ldr	r0, [pc, #628]	; (800285c <base_station_proc_task+0x5a8>)
 80025e6:	f00b ff14 	bl	800e412 <z_impl_z_log_msg2_static_create>
                    tx_msg_proc.sender_addr = rx_msg_proc.sender_addr;
 80025ea:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80025ee:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                    tx_msg_proc.receiver_addr = BROADCAST_ADDR;
 80025f2:	f887 5085 	strb.w	r5, [r7, #133]	; 0x85
                    tx_msg_proc.message_type = rx_msg_proc.message_type;
 80025f6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80025fa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
                    tx_msg_proc.workers_in_safe_zone = cur_workers_in_safe_zone;
 80025fe:	f04f 0203 	mov.w	r2, #3
 8002602:	f887 2089 	strb.w	r2, [r7, #137]	; 0x89
                    tx_msg_proc.battery_level = BATTERY_LEVEL_GOOD;
 8002606:	f887 4088 	strb.w	r4, [r7, #136]	; 0x88
                    tx_msg_proc.direction = RESPONSE;
 800260a:	f887 4087 	strb.w	r4, [r7, #135]	; 0x87
                    switch (rx_msg_proc.message_type) {
 800260e:	2b05      	cmp	r3, #5
 8002610:	f200 820d 	bhi.w	8002a2e <base_station_proc_task+0x77a>
 8002614:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002618:	00830136 	.word	0x00830136
 800261c:	01ac01dd 	.word	0x01ac01dd
 8002620:	016d01ac 	.word	0x016d01ac
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, cur_dev_addr);
 8002624:	2201      	movs	r2, #1
 8002626:	f8a7 2058 	strh.w	r2, [r7, #88]	; 0x58
 800262a:	2202      	movs	r2, #2
 800262c:	f8a7 205a 	strh.w	r2, [r7, #90]	; 0x5a
 8002630:	466e      	mov	r6, sp
 8002632:	b088      	sub	sp, #32
 8002634:	4669      	mov	r1, sp
 8002636:	f111 020c 	adds.w	r2, r1, #12
 800263a:	d06a      	beq.n	8002712 <base_station_proc_task+0x45e>
 800263c:	2014      	movs	r0, #20
 800263e:	2401      	movs	r4, #1
 8002640:	f8a7 4058 	strh.w	r4, [r7, #88]	; 0x58
 8002644:	b11a      	cbz	r2, 800264e <base_station_proc_task+0x39a>
 8002646:	2804      	cmp	r0, #4
 8002648:	dd01      	ble.n	800264e <base_station_proc_task+0x39a>
 800264a:	4c86      	ldr	r4, [pc, #536]	; (8002864 <base_station_proc_task+0x5b0>)
 800264c:	610c      	str	r4, [r1, #16]
 800264e:	2402      	movs	r4, #2
 8002650:	f8a7 405a 	strh.w	r4, [r7, #90]	; 0x5a
 8002654:	b11a      	cbz	r2, 800265e <base_station_proc_task+0x3aa>
 8002656:	2808      	cmp	r0, #8
 8002658:	dd01      	ble.n	800265e <base_station_proc_task+0x3aa>
 800265a:	4c7f      	ldr	r4, [pc, #508]	; (8002858 <base_station_proc_task+0x5a4>)
 800265c:	614c      	str	r4, [r1, #20]
 800265e:	b112      	cbz	r2, 8002666 <base_station_proc_task+0x3b2>
 8002660:	280c      	cmp	r0, #12
 8002662:	dd00      	ble.n	8002666 <base_station_proc_task+0x3b2>
 8002664:	618b      	str	r3, [r1, #24]
 8002666:	b11a      	cbz	r2, 8002670 <base_station_proc_task+0x3bc>
 8002668:	2810      	cmp	r0, #16
 800266a:	dd01      	ble.n	8002670 <base_station_proc_task+0x3bc>
 800266c:	2300      	movs	r3, #0
 800266e:	61cb      	str	r3, [r1, #28]
 8002670:	2813      	cmp	r0, #19
 8002672:	dd51      	ble.n	8002718 <base_station_proc_task+0x464>
 8002674:	2314      	movs	r3, #20
 8002676:	b132      	cbz	r2, 8002686 <base_station_proc_task+0x3d2>
 8002678:	2000      	movs	r0, #0
 800267a:	6578      	str	r0, [r7, #84]	; 0x54
 800267c:	2005      	movs	r0, #5
 800267e:	f887 0054 	strb.w	r0, [r7, #84]	; 0x54
 8002682:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002684:	60c8      	str	r0, [r1, #12]
 8002686:	f36f 0a00 	bfc	sl, #0, #1
 800268a:	f36f 0a41 	bfc	sl, #1, #1
 800268e:	f36f 0a82 	bfc	sl, #2, #1
 8002692:	f36f 0ac5 	bfc	sl, #3, #3
 8002696:	2504      	movs	r5, #4
 8002698:	f365 1a88 	bfi	sl, r5, #6, #3
 800269c:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 80026a0:	f363 2a52 	bfi	sl, r3, #9, #10
 80026a4:	f36f 4ade 	bfc	sl, #19, #12
 80026a8:	f36f 7adf 	bfc	sl, #31, #1
 80026ac:	4c6b      	ldr	r4, [pc, #428]	; (800285c <base_station_proc_task+0x5a8>)
 80026ae:	2300      	movs	r3, #0
 80026b0:	4651      	mov	r1, sl
 80026b2:	4620      	mov	r0, r4
 80026b4:	f00b fead 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80026b8:	46b5      	mov	sp, r6
                LOG_DBG("Packet is filtered");
 80026ba:	2301      	movs	r3, #1
 80026bc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80026c6:	4b68      	ldr	r3, [pc, #416]	; (8002868 <base_station_proc_task+0x5b4>)
 80026c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026cc:	4b62      	ldr	r3, [pc, #392]	; (8002858 <base_station_proc_task+0x5a4>)
 80026ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026d2:	2300      	movs	r3, #0
 80026d4:	657b      	str	r3, [r7, #84]	; 0x54
 80026d6:	2203      	movs	r2, #3
 80026d8:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80026dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026de:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80026e2:	f363 0b00 	bfi	fp, r3, #0, #1
 80026e6:	f363 0b41 	bfi	fp, r3, #1, #1
 80026ea:	f363 0b82 	bfi	fp, r3, #2, #1
 80026ee:	f363 0bc5 	bfi	fp, r3, #3, #3
 80026f2:	f365 1b88 	bfi	fp, r5, #6, #3
 80026f6:	220c      	movs	r2, #12
 80026f8:	f362 2b52 	bfi	fp, r2, #9, #10
 80026fc:	f363 4bde 	bfi	fp, r3, #19, #12
 8002700:	f363 7bdf 	bfi	fp, r3, #31, #1
 8002704:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002708:	4659      	mov	r1, fp
 800270a:	4620      	mov	r0, r4
 800270c:	f00b fe81 	bl	800e412 <z_impl_z_log_msg2_static_create>
                continue;
 8002710:	e398      	b.n	8002e44 <base_station_proc_task+0xb90>
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, cur_dev_addr);
 8002712:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002716:	e792      	b.n	800263e <base_station_proc_task+0x38a>
 8002718:	f06f 031b 	mvn.w	r3, #27
 800271c:	e7ab      	b.n	8002676 <base_station_proc_task+0x3c2>
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 800271e:	2301      	movs	r3, #1
 8002720:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002724:	2302      	movs	r3, #2
 8002726:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <base_station_proc_task+0x5b8>)
 800272c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <base_station_proc_task+0x5a4>)
 8002732:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002736:	2300      	movs	r3, #0
 8002738:	657b      	str	r3, [r7, #84]	; 0x54
 800273a:	2203      	movs	r2, #3
 800273c:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8002740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002742:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8002746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002748:	f363 0200 	bfi	r2, r3, #0, #1
 800274c:	f363 0241 	bfi	r2, r3, #1, #1
 8002750:	f363 0282 	bfi	r2, r3, #2, #1
 8002754:	f363 02c5 	bfi	r2, r3, #3, #3
 8002758:	4611      	mov	r1, r2
 800275a:	2204      	movs	r2, #4
 800275c:	f362 1188 	bfi	r1, r2, #6, #3
 8002760:	220c      	movs	r2, #12
 8002762:	f362 2152 	bfi	r1, r2, #9, #10
 8002766:	f363 41de 	bfi	r1, r3, #19, #12
 800276a:	f363 71df 	bfi	r1, r3, #31, #1
 800276e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002770:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002774:	4839      	ldr	r0, [pc, #228]	; (800285c <base_station_proc_task+0x5a8>)
 8002776:	f00b fe4c 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            switch (rx_msg_proc.sender_addr) {
 800277a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800277e:	2b03      	cmp	r3, #3
 8002780:	d030      	beq.n	80027e4 <base_station_proc_task+0x530>
                                    LOG_DBG("Undefined sender address for this message type");
 8002782:	2301      	movs	r3, #1
 8002784:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002788:	2302      	movs	r3, #2
 800278a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800278e:	4b38      	ldr	r3, [pc, #224]	; (8002870 <base_station_proc_task+0x5bc>)
 8002790:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <base_station_proc_task+0x5a4>)
 8002796:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800279a:	2300      	movs	r3, #0
 800279c:	657b      	str	r3, [r7, #84]	; 0x54
 800279e:	2203      	movs	r2, #3
 80027a0:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80027a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f363 0200 	bfi	r2, r3, #0, #1
 80027b0:	f363 0241 	bfi	r2, r3, #1, #1
 80027b4:	f363 0282 	bfi	r2, r3, #2, #1
 80027b8:	f363 02c5 	bfi	r2, r3, #3, #3
 80027bc:	4611      	mov	r1, r2
 80027be:	2204      	movs	r2, #4
 80027c0:	f362 1188 	bfi	r1, r2, #6, #3
 80027c4:	220c      	movs	r2, #12
 80027c6:	f362 2152 	bfi	r1, r2, #9, #10
 80027ca:	f363 41de 	bfi	r1, r3, #19, #12
 80027ce:	f363 71df 	bfi	r1, r3, #31, #1
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 80027d8:	4820      	ldr	r0, [pc, #128]	; (800285c <base_station_proc_task+0x5a8>)
 80027da:	f00b fe1a 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <base_station_proc_task+0x5c0>)
 80027e0:	64fb      	str	r3, [r7, #76]	; 0x4c
                                    break;
 80027e2:	e086      	b.n	80028f2 <base_station_proc_task+0x63e>
                                    LOG_DBG("Brigade chief disabled alarm");
 80027e4:	2301      	movs	r3, #1
 80027e6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80027ea:	2302      	movs	r3, #2
 80027ec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <base_station_proc_task+0x5c4>)
 80027f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <base_station_proc_task+0x5a4>)
 80027f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80027fc:	2300      	movs	r3, #0
 80027fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002800:	2403      	movs	r4, #3
 8002802:	f887 4054 	strb.w	r4, [r7, #84]	; 0x54
 8002806:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002808:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	f363 0200 	bfi	r2, r3, #0, #1
 8002812:	f363 0241 	bfi	r2, r3, #1, #1
 8002816:	f363 0282 	bfi	r2, r3, #2, #1
 800281a:	f363 02c5 	bfi	r2, r3, #3, #3
 800281e:	4611      	mov	r1, r2
 8002820:	2204      	movs	r2, #4
 8002822:	f362 1188 	bfi	r1, r2, #6, #3
 8002826:	220c      	movs	r2, #12
 8002828:	f362 2152 	bfi	r1, r2, #9, #10
 800282c:	f363 41de 	bfi	r1, r3, #19, #12
 8002830:	f363 71df 	bfi	r1, r3, #31, #1
 8002834:	60f9      	str	r1, [r7, #12]
 8002836:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800283a:	4808      	ldr	r0, [pc, #32]	; (800285c <base_station_proc_task+0x5a8>)
 800283c:	f00b fde9 	bl	800e412 <z_impl_z_log_msg2_static_create>
                                    k_work_submit(&work_buzzer);
 8002840:	480e      	ldr	r0, [pc, #56]	; (800287c <base_station_proc_task+0x5c8>)
 8002842:	f008 fccb 	bl	800b1dc <k_work_submit>
	return z_impl_k_poll_signal_raise(sig, result);
 8002846:	4621      	mov	r1, r4
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <base_station_proc_task+0x5cc>)
 800284a:	f009 fdcf 	bl	800c3ec <z_impl_k_poll_signal_raise>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <base_station_proc_task+0x5c0>)
 8002850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002852:	e04e      	b.n	80028f2 <base_station_proc_task+0x63e>
 8002854:	08010db8 	.word	0x08010db8
 8002858:	08010f4c 	.word	0x08010f4c
 800285c:	08010aa0 	.word	0x08010aa0
 8002860:	08010dc8 	.word	0x08010dc8
 8002864:	08010d78 	.word	0x08010d78
 8002868:	08010da0 	.word	0x08010da0
 800286c:	08010ddc 	.word	0x08010ddc
 8002870:	08010e20 	.word	0x08010e20
 8002874:	200004c0 	.word	0x200004c0
 8002878:	08010dfc 	.word	0x08010dfc
 800287c:	20000e40 	.word	0x20000e40
 8002880:	20000028 	.word	0x20000028
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002884:	2401      	movs	r4, #1
 8002886:	f8a7 4058 	strh.w	r4, [r7, #88]	; 0x58
 800288a:	2302      	movs	r3, #2
 800288c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002890:	4bce      	ldr	r3, [pc, #824]	; (8002bcc <base_station_proc_task+0x918>)
 8002892:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002896:	4bce      	ldr	r3, [pc, #824]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002898:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800289c:	2300      	movs	r3, #0
 800289e:	657b      	str	r3, [r7, #84]	; 0x54
 80028a0:	2203      	movs	r2, #3
 80028a2:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80028a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a8:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80028ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ae:	f363 0200 	bfi	r2, r3, #0, #1
 80028b2:	f363 0241 	bfi	r2, r3, #1, #1
 80028b6:	f363 0282 	bfi	r2, r3, #2, #1
 80028ba:	f363 02c5 	bfi	r2, r3, #3, #3
 80028be:	4611      	mov	r1, r2
 80028c0:	2204      	movs	r2, #4
 80028c2:	f362 1188 	bfi	r1, r2, #6, #3
 80028c6:	220c      	movs	r2, #12
 80028c8:	f362 2152 	bfi	r1, r2, #9, #10
 80028cc:	f363 41de 	bfi	r1, r3, #19, #12
 80028d0:	f363 71df 	bfi	r1, r3, #31, #1
 80028d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80028d6:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80028da:	48be      	ldr	r0, [pc, #760]	; (8002bd4 <base_station_proc_task+0x920>)
 80028dc:	f00b fd99 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            k_work_submit(&work_buzzer);
 80028e0:	48bd      	ldr	r0, [pc, #756]	; (8002bd8 <base_station_proc_task+0x924>)
 80028e2:	f008 fc7b 	bl	800b1dc <k_work_submit>
 80028e6:	4621      	mov	r1, r4
 80028e8:	48bc      	ldr	r0, [pc, #752]	; (8002bdc <base_station_proc_task+0x928>)
 80028ea:	f009 fd7f 	bl	800c3ec <z_impl_k_poll_signal_raise>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg_prio;
 80028ee:	4bbc      	ldr	r3, [pc, #752]	; (8002be0 <base_station_proc_task+0x92c>)
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (msgq_cur_msg_tx_ptr)
 80028f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80028f4:	b128      	cbz	r0, 8002902 <base_station_proc_task+0x64e>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2300      	movs	r3, #0
 80028fa:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80028fe:	f008 f973 	bl	800abe8 <z_impl_k_msgq_put>
            rssi_num = check_rssi(rssi);
 8002902:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
    if ( rssi >= CONNECTION_QUALITY_RSSI_1 ) {
 8002906:	f112 0f46 	cmn.w	r2, #70	; 0x46
 800290a:	f280 8273 	bge.w	8002df4 <base_station_proc_task+0xb40>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_1) && (rssi >= CONNECTION_QUALITY_RSSI_2) ) {
 800290e:	b293      	uxth	r3, r2
 8002910:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002914:	b289      	uxth	r1, r1
 8002916:	2909      	cmp	r1, #9
 8002918:	f240 82ac 	bls.w	8002e74 <base_station_proc_task+0xbc0>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_2) && (rssi >= CONNECTION_QUALITY_RSSI_3) ) {
 800291c:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8002920:	b289      	uxth	r1, r1
 8002922:	2909      	cmp	r1, #9
 8002924:	f240 82a9 	bls.w	8002e7a <base_station_proc_task+0xbc6>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_3) && (rssi >= CONNECTION_QUALITY_RSSI_4) ) {
 8002928:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800292c:	b289      	uxth	r1, r1
 800292e:	2909      	cmp	r1, #9
 8002930:	f240 82a6 	bls.w	8002e80 <base_station_proc_task+0xbcc>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_4) && (rssi >= CONNECTION_QUALITY_RSSI_5) ) {
 8002934:	f103 0169 	add.w	r1, r3, #105	; 0x69
 8002938:	b289      	uxth	r1, r1
 800293a:	2904      	cmp	r1, #4
 800293c:	f240 82a3 	bls.w	8002e86 <base_station_proc_task+0xbd2>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_5) && (rssi >= CONNECTION_QUALITY_RSSI_6) ) {
 8002940:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8002944:	b289      	uxth	r1, r1
 8002946:	2913      	cmp	r1, #19
 8002948:	f240 82a0 	bls.w	8002e8c <base_station_proc_task+0xbd8>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_6) && (rssi >= CONNECTION_QUALITY_RSSI_7) ) {
 800294c:	f103 017f 	add.w	r1, r3, #127	; 0x7f
 8002950:	b289      	uxth	r1, r1
 8002952:	2901      	cmp	r1, #1
 8002954:	f240 829d 	bls.w	8002e92 <base_station_proc_task+0xbde>
    else if ( (rssi < CONNECTION_QUALITY_RSSI_7) && (rssi >= CONNECTION_QUALITY_RSSI_8) ) {
 8002958:	3382      	adds	r3, #130	; 0x82
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	f240 829b 	bls.w	8002e98 <base_station_proc_task+0xbe4>
    else if ( rssi < CONNECTION_QUALITY_RSSI_8 ) {
 8002962:	f112 0f82 	cmn.w	r2, #130	; 0x82
 8002966:	f280 8247 	bge.w	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_ZERO;
 800296a:	2300      	movs	r3, #0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	e243      	b.n	8002df8 <base_station_proc_task+0xb44>
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 8002970:	2301      	movs	r3, #1
 8002972:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002976:	2302      	movs	r3, #2
 8002978:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800297c:	4b99      	ldr	r3, [pc, #612]	; (8002be4 <base_station_proc_task+0x930>)
 800297e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002982:	4b93      	ldr	r3, [pc, #588]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002984:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002988:	2300      	movs	r3, #0
 800298a:	657b      	str	r3, [r7, #84]	; 0x54
 800298c:	2203      	movs	r2, #3
 800298e:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8002992:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002994:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	f363 0200 	bfi	r2, r3, #0, #1
 800299e:	f363 0241 	bfi	r2, r3, #1, #1
 80029a2:	f363 0282 	bfi	r2, r3, #2, #1
 80029a6:	f363 02c5 	bfi	r2, r3, #3, #3
 80029aa:	4611      	mov	r1, r2
 80029ac:	2204      	movs	r2, #4
 80029ae:	f362 1188 	bfi	r1, r2, #6, #3
 80029b2:	220c      	movs	r2, #12
 80029b4:	f362 2152 	bfi	r1, r2, #9, #10
 80029b8:	f363 41de 	bfi	r1, r3, #19, #12
 80029bc:	f363 71df 	bfi	r1, r3, #31, #1
 80029c0:	6279      	str	r1, [r7, #36]	; 0x24
 80029c2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80029c6:	4883      	ldr	r0, [pc, #524]	; (8002bd4 <base_station_proc_task+0x920>)
 80029c8:	f00b fd23 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 80029cc:	4b86      	ldr	r3, [pc, #536]	; (8002be8 <base_station_proc_task+0x934>)
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                            break;
 80029d0:	e78f      	b.n	80028f2 <base_station_proc_task+0x63e>
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 80029d2:	2301      	movs	r3, #1
 80029d4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80029d8:	2302      	movs	r3, #2
 80029da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80029de:	4b83      	ldr	r3, [pc, #524]	; (8002bec <base_station_proc_task+0x938>)
 80029e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80029e4:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <base_station_proc_task+0x91c>)
 80029e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80029ea:	2300      	movs	r3, #0
 80029ec:	657b      	str	r3, [r7, #84]	; 0x54
 80029ee:	2203      	movs	r2, #3
 80029f0:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80029f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029f6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	f363 0200 	bfi	r2, r3, #0, #1
 8002a00:	f363 0241 	bfi	r2, r3, #1, #1
 8002a04:	f363 0282 	bfi	r2, r3, #2, #1
 8002a08:	f363 02c5 	bfi	r2, r3, #3, #3
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	2204      	movs	r2, #4
 8002a10:	f362 1188 	bfi	r1, r2, #6, #3
 8002a14:	220c      	movs	r2, #12
 8002a16:	f362 2152 	bfi	r1, r2, #9, #10
 8002a1a:	f363 41de 	bfi	r1, r3, #19, #12
 8002a1e:	f363 71df 	bfi	r1, r3, #31, #1
 8002a22:	6239      	str	r1, [r7, #32]
 8002a24:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8002a28:	486a      	ldr	r0, [pc, #424]	; (8002bd4 <base_station_proc_task+0x920>)
 8002a2a:	f00b fcf2 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            LOG_DBG("Not correct message type");
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002a34:	2302      	movs	r3, #2
 8002a36:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <base_station_proc_task+0x93c>)
 8002a3c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8002a40:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002a42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a46:	2400      	movs	r4, #0
 8002a48:	657c      	str	r4, [r7, #84]	; 0x54
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a52:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	f364 0300 	bfi	r3, r4, #0, #1
 8002a5c:	f364 0341 	bfi	r3, r4, #1, #1
 8002a60:	f364 0382 	bfi	r3, r4, #2, #1
 8002a64:	f364 03c5 	bfi	r3, r4, #3, #3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	f363 1288 	bfi	r2, r3, #6, #3
 8002a70:	230c      	movs	r3, #12
 8002a72:	f363 2252 	bfi	r2, r3, #9, #10
 8002a76:	f364 42de 	bfi	r2, r4, #19, #12
 8002a7a:	f364 72df 	bfi	r2, r4, #31, #1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	633a      	str	r2, [r7, #48]	; 0x30
 8002a82:	4623      	mov	r3, r4
 8002a84:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8002a88:	4852      	ldr	r0, [pc, #328]	; (8002bd4 <base_station_proc_task+0x920>)
 8002a8a:	f00b fcc2 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002a8e:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002a90:	e1d8      	b.n	8002e44 <base_station_proc_task+0xb90>
                    LOG_DBG(" RESPONSE");
 8002a92:	f04f 0301 	mov.w	r3, #1
 8002a96:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002a9a:	f04f 0202 	mov.w	r2, #2
 8002a9e:	f8a7 205a 	strh.w	r2, [r7, #90]	; 0x5a
 8002aa2:	4b54      	ldr	r3, [pc, #336]	; (8002bf4 <base_station_proc_task+0x940>)
 8002aa4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002aa8:	4949      	ldr	r1, [pc, #292]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002aaa:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8002aae:	2400      	movs	r4, #0
 8002ab0:	657c      	str	r4, [r7, #84]	; 0x54
 8002ab2:	f04f 0003 	mov.w	r0, #3
 8002ab6:	f887 0054 	strb.w	r0, [r7, #84]	; 0x54
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac2:	f364 0300 	bfi	r3, r4, #0, #1
 8002ac6:	f364 0341 	bfi	r3, r4, #1, #1
 8002aca:	f364 0382 	bfi	r3, r4, #2, #1
 8002ace:	f364 03c5 	bfi	r3, r4, #3, #3
 8002ad2:	2604      	movs	r6, #4
 8002ad4:	f366 1388 	bfi	r3, r6, #6, #3
 8002ad8:	250c      	movs	r5, #12
 8002ada:	f365 2352 	bfi	r3, r5, #9, #10
 8002ade:	f364 43de 	bfi	r3, r4, #19, #12
 8002ae2:	f364 73df 	bfi	r3, r4, #31, #1
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aea:	4623      	mov	r3, r4
 8002aec:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8002af0:	4838      	ldr	r0, [pc, #224]	; (8002bd4 <base_station_proc_task+0x920>)
 8002af2:	f00b fc8e 	bl	800e412 <z_impl_z_log_msg2_static_create>
                    LOG_DBG("Message type:");
 8002af6:	f04f 0301 	mov.w	r3, #1
 8002afa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002afe:	f04f 0202 	mov.w	r2, #2
 8002b02:	f8a7 205a 	strh.w	r2, [r7, #90]	; 0x5a
 8002b06:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <base_station_proc_task+0x944>)
 8002b08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b0c:	4930      	ldr	r1, [pc, #192]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002b0e:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8002b12:	657c      	str	r4, [r7, #84]	; 0x54
 8002b14:	f04f 0003 	mov.w	r0, #3
 8002b18:	f887 0054 	strb.w	r0, [r7, #84]	; 0x54
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b24:	f364 0300 	bfi	r3, r4, #0, #1
 8002b28:	f364 0341 	bfi	r3, r4, #1, #1
 8002b2c:	f364 0382 	bfi	r3, r4, #2, #1
 8002b30:	f364 03c5 	bfi	r3, r4, #3, #3
 8002b34:	f366 1388 	bfi	r3, r6, #6, #3
 8002b38:	f365 2352 	bfi	r3, r5, #9, #10
 8002b3c:	f364 43de 	bfi	r3, r4, #19, #12
 8002b40:	f364 73df 	bfi	r3, r4, #31, #1
 8002b44:	4619      	mov	r1, r3
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	4623      	mov	r3, r4
 8002b4a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002b4e:	4821      	ldr	r0, [pc, #132]	; (8002bd4 <base_station_proc_task+0x920>)
 8002b50:	f00b fc5f 	bl	800e412 <z_impl_z_log_msg2_static_create>
                    switch (rx_msg_proc.message_type) {
 8002b54:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002b58:	42b3      	cmp	r3, r6
 8002b5a:	f200 80e7 	bhi.w	8002d2c <base_station_proc_task+0xa78>
 8002b5e:	e8df f003 	tbb	[pc, r3]
 8002b62:	034f      	.short	0x034f
 8002b64:	81b3      	.short	0x81b3
 8002b66:	81          	.byte	0x81
 8002b67:	00          	.byte	0x00
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <base_station_proc_task+0x948>)
 8002b76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <base_station_proc_task+0x91c>)
 8002b7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002b80:	2400      	movs	r4, #0
 8002b82:	657c      	str	r4, [r7, #84]	; 0x54
 8002b84:	2303      	movs	r3, #3
 8002b86:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f364 0300 	bfi	r3, r4, #0, #1
 8002b96:	f364 0341 	bfi	r3, r4, #1, #1
 8002b9a:	f364 0382 	bfi	r3, r4, #2, #1
 8002b9e:	f364 03c5 	bfi	r3, r4, #3, #3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	f363 1288 	bfi	r2, r3, #6, #3
 8002baa:	230c      	movs	r3, #12
 8002bac:	f363 2252 	bfi	r2, r3, #9, #10
 8002bb0:	f364 42de 	bfi	r2, r4, #19, #12
 8002bb4:	f364 72df 	bfi	r2, r4, #31, #1
 8002bb8:	4611      	mov	r1, r2
 8002bba:	61fa      	str	r2, [r7, #28]
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8002bc2:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <base_station_proc_task+0x920>)
 8002bc4:	f00b fc25 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002bc8:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002bca:	e13b      	b.n	8002e44 <base_station_proc_task+0xb90>
 8002bcc:	08010e54 	.word	0x08010e54
 8002bd0:	08010f4c 	.word	0x08010f4c
 8002bd4:	08010aa0 	.word	0x08010aa0
 8002bd8:	20000e40 	.word	0x20000e40
 8002bdc:	20000028 	.word	0x20000028
 8002be0:	200004f4 	.word	0x200004f4
 8002be4:	08010e6c 	.word	0x08010e6c
 8002be8:	200004c0 	.word	0x200004c0
 8002bec:	08010e8c 	.word	0x08010e8c
 8002bf0:	08010ea8 	.word	0x08010ea8
 8002bf4:	08010ec8 	.word	0x08010ec8
 8002bf8:	08010dc8 	.word	0x08010dc8
 8002bfc:	08010ddc 	.word	0x08010ddc
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002c00:	2301      	movs	r3, #1
 8002c02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002c06:	2302      	movs	r3, #2
 8002c08:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002c0c:	4ba3      	ldr	r3, [pc, #652]	; (8002e9c <base_station_proc_task+0xbe8>)
 8002c0e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8002c12:	4ba3      	ldr	r3, [pc, #652]	; (8002ea0 <base_station_proc_task+0xbec>)
 8002c14:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002c18:	2400      	movs	r4, #0
 8002c1a:	657c      	str	r4, [r7, #84]	; 0x54
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f364 0300 	bfi	r3, r4, #0, #1
 8002c2e:	f364 0341 	bfi	r3, r4, #1, #1
 8002c32:	f364 0382 	bfi	r3, r4, #2, #1
 8002c36:	f364 03c5 	bfi	r3, r4, #3, #3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	f363 1288 	bfi	r2, r3, #6, #3
 8002c42:	230c      	movs	r3, #12
 8002c44:	f363 2252 	bfi	r2, r3, #9, #10
 8002c48:	f364 42de 	bfi	r2, r4, #19, #12
 8002c4c:	f364 72df 	bfi	r2, r4, #31, #1
 8002c50:	4611      	mov	r1, r2
 8002c52:	61ba      	str	r2, [r7, #24]
 8002c54:	4623      	mov	r3, r4
 8002c56:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8002c5a:	4892      	ldr	r0, [pc, #584]	; (8002ea4 <base_station_proc_task+0xbf0>)
 8002c5c:	f00b fbd9 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002c60:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002c62:	e0ef      	b.n	8002e44 <base_station_proc_task+0xb90>
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 8002c64:	2301      	movs	r3, #1
 8002c66:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002c70:	4b8d      	ldr	r3, [pc, #564]	; (8002ea8 <base_station_proc_task+0xbf4>)
 8002c72:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c76:	4b8a      	ldr	r3, [pc, #552]	; (8002ea0 <base_station_proc_task+0xbec>)
 8002c78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c7c:	2400      	movs	r4, #0
 8002c7e:	657c      	str	r4, [r7, #84]	; 0x54
 8002c80:	2303      	movs	r3, #3
 8002c82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f364 0300 	bfi	r3, r4, #0, #1
 8002c92:	f364 0341 	bfi	r3, r4, #1, #1
 8002c96:	f364 0382 	bfi	r3, r4, #2, #1
 8002c9a:	f364 03c5 	bfi	r3, r4, #3, #3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	f363 1288 	bfi	r2, r3, #6, #3
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	f363 2252 	bfi	r2, r3, #9, #10
 8002cac:	f364 42de 	bfi	r2, r4, #19, #12
 8002cb0:	f364 72df 	bfi	r2, r4, #31, #1
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	617a      	str	r2, [r7, #20]
 8002cb8:	4623      	mov	r3, r4
 8002cba:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8002cbe:	4879      	ldr	r0, [pc, #484]	; (8002ea4 <base_station_proc_task+0xbf0>)
 8002cc0:	f00b fba7 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002cc4:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002cc6:	e0bd      	b.n	8002e44 <base_station_proc_task+0xb90>
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002cd4:	4b75      	ldr	r3, [pc, #468]	; (8002eac <base_station_proc_task+0xbf8>)
 8002cd6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002cda:	4b71      	ldr	r3, [pc, #452]	; (8002ea0 <base_station_proc_task+0xbec>)
 8002cdc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	657c      	str	r4, [r7, #84]	; 0x54
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f364 0300 	bfi	r3, r4, #0, #1
 8002cf6:	f364 0341 	bfi	r3, r4, #1, #1
 8002cfa:	f364 0382 	bfi	r3, r4, #2, #1
 8002cfe:	f364 03c5 	bfi	r3, r4, #3, #3
 8002d02:	461a      	mov	r2, r3
 8002d04:	2304      	movs	r3, #4
 8002d06:	f363 1288 	bfi	r2, r3, #6, #3
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	f363 2252 	bfi	r2, r3, #9, #10
 8002d10:	f364 42de 	bfi	r2, r4, #19, #12
 8002d14:	f364 72df 	bfi	r2, r4, #31, #1
 8002d18:	4611      	mov	r1, r2
 8002d1a:	613a      	str	r2, [r7, #16]
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8002d22:	4860      	ldr	r0, [pc, #384]	; (8002ea4 <base_station_proc_task+0xbf0>)
 8002d24:	f00b fb75 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002d28:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002d2a:	e08b      	b.n	8002e44 <base_station_proc_task+0xb90>
                            LOG_DBG("Not correct message type");
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002d32:	2302      	movs	r3, #2
 8002d34:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <base_station_proc_task+0xbfc>)
 8002d3a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <base_station_proc_task+0xbec>)
 8002d40:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002d44:	2400      	movs	r4, #0
 8002d46:	657c      	str	r4, [r7, #84]	; 0x54
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f364 0300 	bfi	r3, r4, #0, #1
 8002d5a:	f364 0341 	bfi	r3, r4, #1, #1
 8002d5e:	f364 0382 	bfi	r3, r4, #2, #1
 8002d62:	f364 03c5 	bfi	r3, r4, #3, #3
 8002d66:	461a      	mov	r2, r3
 8002d68:	2304      	movs	r3, #4
 8002d6a:	f363 1288 	bfi	r2, r3, #6, #3
 8002d6e:	230c      	movs	r3, #12
 8002d70:	f363 2252 	bfi	r2, r3, #9, #10
 8002d74:	f364 42de 	bfi	r2, r4, #19, #12
 8002d78:	f364 72df 	bfi	r2, r4, #31, #1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	4623      	mov	r3, r4
 8002d82:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8002d86:	4847      	ldr	r0, [pc, #284]	; (8002ea4 <base_station_proc_task+0xbf0>)
 8002d88:	f00b fb43 	bl	800e412 <z_impl_z_log_msg2_static_create>
                            msgq_cur_msg_tx_ptr = NULL;
 8002d8c:	64fc      	str	r4, [r7, #76]	; 0x4c
                            continue;
 8002d8e:	e059      	b.n	8002e44 <base_station_proc_task+0xb90>
                    LOG_DBG("Not correct message direction");
 8002d90:	2301      	movs	r3, #1
 8002d92:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <base_station_proc_task+0xc00>)
 8002d9e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <base_station_proc_task+0xbec>)
 8002da4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002da8:	2400      	movs	r4, #0
 8002daa:	657c      	str	r4, [r7, #84]	; 0x54
 8002dac:	2303      	movs	r3, #3
 8002dae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	f364 0300 	bfi	r3, r4, #0, #1
 8002dbe:	f364 0341 	bfi	r3, r4, #1, #1
 8002dc2:	f364 0382 	bfi	r3, r4, #2, #1
 8002dc6:	f364 03c5 	bfi	r3, r4, #3, #3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2304      	movs	r3, #4
 8002dce:	f363 1288 	bfi	r2, r3, #6, #3
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	f363 2252 	bfi	r2, r3, #9, #10
 8002dd8:	f364 42de 	bfi	r2, r4, #19, #12
 8002ddc:	f364 72df 	bfi	r2, r4, #31, #1
 8002de0:	4611      	mov	r1, r2
 8002de2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002de4:	4623      	mov	r3, r4
 8002de6:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8002dea:	482e      	ldr	r0, [pc, #184]	; (8002ea4 <base_station_proc_task+0xbf0>)
 8002dec:	f00b fb11 	bl	800e412 <z_impl_z_log_msg2_static_create>
                    msgq_cur_msg_tx_ptr = NULL;
 8002df0:	64fc      	str	r4, [r7, #76]	; 0x4c
                    continue;
 8002df2:	e027      	b.n	8002e44 <base_station_proc_task+0xb90>
        return LIGHT_UP_EIGHT;
 8002df4:	2308      	movs	r3, #8
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <base_station_proc_task+0xc04>)
 8002dfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dfc:	f3bf 8f5b 	dmb	ish
 8002e00:	e853 2f00 	ldrex	r2, [r3]
 8002e04:	e843 1000 	strex	r0, r1, [r3]
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d1f9      	bne.n	8002e00 <base_station_proc_task+0xb4c>
 8002e0c:	f3bf 8f5b 	dmb	ish
            atomic_set(&status_ind.led_strip_state.status.people_num, rx_msg_proc.workers_in_safe_zone);
 8002e10:	f897 1081 	ldrb.w	r1, [r7, #129]	; 0x81
 8002e14:	1d1a      	adds	r2, r3, #4
 8002e16:	f3bf 8f5b 	dmb	ish
 8002e1a:	e852 0f00 	ldrex	r0, [r2]
 8002e1e:	e842 1400 	strex	r4, r1, [r2]
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d1f9      	bne.n	8002e1a <base_station_proc_task+0xb66>
 8002e26:	f3bf 8f5b 	dmb	ish
            strip_ind = &status_ind;
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2300      	movs	r3, #0
 8002e32:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002e36:	4821      	ldr	r0, [pc, #132]	; (8002ebc <base_station_proc_task+0xc08>)
 8002e38:	f007 fed6 	bl	800abe8 <z_impl_k_msgq_put>
	return z_impl_k_sleep(timeout);
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f008 fd9a 	bl	800b978 <z_impl_k_sleep>
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <base_station_proc_task+0xc0c>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_rx_msg)) {
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f7      	beq.n	8002e3c <base_station_proc_task+0xb88>
            k_msgq_get(&msgq_rx_msg, &rx_buf_proc, K_NO_WAIT);
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	2500      	movs	r5, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002e58:	4819      	ldr	r0, [pc, #100]	; (8002ec0 <base_station_proc_task+0xc0c>)
 8002e5a:	f007 ff21 	bl	800aca0 <z_impl_k_msgq_get>
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	f107 018e 	add.w	r1, r7, #142	; 0x8e
 8002e66:	4817      	ldr	r0, [pc, #92]	; (8002ec4 <base_station_proc_task+0xc10>)
 8002e68:	f007 ff1a 	bl	800aca0 <z_impl_k_msgq_get>
    uint8_t cnt = 0;
 8002e6c:	2200      	movs	r2, #0
    uint8_t i = 0;
 8002e6e:	4613      	mov	r3, r2
 8002e70:	f7ff ba3f 	b.w	80022f2 <base_station_proc_task+0x3e>
        return LIGHT_UP_SEVEN;
 8002e74:	2307      	movs	r3, #7
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
 8002e78:	e7be      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_SIX;
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7e:	e7bb      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_FIVE;
 8002e80:	2305      	movs	r3, #5
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
 8002e84:	e7b8      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_FOUR;
 8002e86:	2304      	movs	r3, #4
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8a:	e7b5      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_THREE;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e90:	e7b2      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_TWO;
 8002e92:	2302      	movs	r3, #2
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
 8002e96:	e7af      	b.n	8002df8 <base_station_proc_task+0xb44>
        return LIGHT_UP_ONE;
 8002e98:	637e      	str	r6, [r7, #52]	; 0x34
 8002e9a:	e7ad      	b.n	8002df8 <base_station_proc_task+0xb44>
 8002e9c:	08010e54 	.word	0x08010e54
 8002ea0:	08010f4c 	.word	0x08010f4c
 8002ea4:	08010aa0 	.word	0x08010aa0
 8002ea8:	08010e6c 	.word	0x08010e6c
 8002eac:	08010e8c 	.word	0x08010e8c
 8002eb0:	08010ea8 	.word	0x08010ea8
 8002eb4:	08010ed8 	.word	0x08010ed8
 8002eb8:	2000003c 	.word	0x2000003c
 8002ebc:	20000424 	.word	0x20000424
 8002ec0:	2000048c 	.word	0x2000048c
 8002ec4:	20000458 	.word	0x20000458

08002ec8 <base_station_modem_task>:
{
 8002ec8:	b508      	push	{r3, lr}
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8002eca:	480e      	ldr	r0, [pc, #56]	; (8002f04 <base_station_modem_task+0x3c>)
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <base_station_modem_task+0x40>)
 8002ece:	6018      	str	r0, [r3, #0]
 8002ed0:	f00c fc5f 	bl	800f792 <z_device_is_ready>
    if (!device_is_ready(lora_dev_ptr)) {
 8002ed4:	b170      	cbz	r0, 8002ef4 <base_station_modem_task+0x2c>
    system_init();
 8002ed6:	f7fe ffd7 	bl	8001e88 <system_init>
	return z_impl_k_sleep(timeout);
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ee2:	f008 fd49 	bl	800b978 <z_impl_k_sleep>
        modem_fun();
 8002ee6:	f7ff f88d 	bl	8002004 <modem_fun>
 8002eea:	2001      	movs	r0, #1
 8002eec:	2100      	movs	r1, #0
 8002eee:	f008 fd43 	bl	800b978 <z_impl_k_sleep>
    while(1) {
 8002ef2:	e7f8      	b.n	8002ee6 <base_station_modem_task+0x1e>
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002efc:	f008 fd3c 	bl	800b978 <z_impl_k_sleep>
 8002f00:	e7e9      	b.n	8002ed6 <base_station_modem_task+0xe>
 8002f02:	bf00      	nop
 8002f04:	080107c0 	.word	0x080107c0
 8002f08:	20000e30 	.word	0x20000e30

08002f0c <lora_receive_cb>:
    }
}


void lora_receive_cb(const struct device *dev, uint8_t *data, uint16_t size, int16_t rssi, int8_t snr)
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b09b      	sub	sp, #108	; 0x6c
 8002f12:	460c      	mov	r4, r1
 8002f14:	f8ad 300e 	strh.w	r3, [sp, #14]
	__asm__ volatile(
 8002f18:	f04f 0310 	mov.w	r3, #16
 8002f1c:	f3ef 8211 	mrs	r2, BASEPRI
 8002f20:	f383 8812 	msr	BASEPRI_MAX, r3
 8002f24:	f3bf 8f6f 	isb	sy
     * Compare first byte in receive message and 13
     * 13 means thar received message has the following parameters:
     * SENDER_ADDR = BASE_STATION, RECV_ADDR = BROADCAST, MESSAGE_TYPE = SYNC  */
    static struct k_spinlock spin;
    static k_spinlock_key_t key;
    key = k_spin_lock(&spin);
 8002f28:	4b40      	ldr	r3, [pc, #256]	; (800302c <lora_receive_cb+0x120>)
 8002f2a:	601a      	str	r2, [r3, #0]
    if ((*data) == 13) {
 8002f2c:	780b      	ldrb	r3, [r1, #0]
 8002f2e:	2b0d      	cmp	r3, #13
 8002f30:	d017      	beq.n	8002f62 <lora_receive_cb+0x56>
        k_timer_stop(&periodic_timer);
        // little delay to account execution time
        k_sleep(K_MSEC(DELAY_TIME_MSEC));
        k_timer_start(&periodic_timer, K_MSEC(DURATION_TIME_MSEC), K_MSEC(PERIOD_TIME_MSEC));
    }
    k_msgq_put(&msgq_rx_msg, data, K_NO_WAIT);
 8002f32:	2600      	movs	r6, #0
 8002f34:	2700      	movs	r7, #0
	return z_impl_k_msgq_put(msgq, data, timeout);
 8002f36:	4632      	mov	r2, r6
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	483c      	ldr	r0, [pc, #240]	; (8003030 <lora_receive_cb+0x124>)
 8002f3e:	f007 fe53 	bl	800abe8 <z_impl_k_msgq_put>
 8002f42:	4632      	mov	r2, r6
 8002f44:	463b      	mov	r3, r7
 8002f46:	f10d 010e 	add.w	r1, sp, #14
 8002f4a:	483a      	ldr	r0, [pc, #232]	; (8003034 <lora_receive_cb+0x128>)
 8002f4c:	f007 fe4c 	bl	800abe8 <z_impl_k_msgq_put>
    k_msgq_put(&msgq_rssi, &rssi, K_NO_WAIT);
    k_spin_unlock(&spin, key);
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <lora_receive_cb+0x120>)
 8002f52:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
}
 8002f5c:	b01b      	add	sp, #108	; 0x6c
 8002f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LOG_DBG(" REQUEST");
 8002f62:	f04f 0b01 	mov.w	fp, #1
 8002f66:	f8ad b018 	strh.w	fp, [sp, #24]
 8002f6a:	f04f 0a02 	mov.w	sl, #2
 8002f6e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <lora_receive_cb+0x12c>)
 8002f74:	9312      	str	r3, [sp, #72]	; 0x48
 8002f76:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800303c <lora_receive_cb+0x130>
 8002f7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8002f7e:	2500      	movs	r5, #0
 8002f80:	9505      	str	r5, [sp, #20]
 8002f82:	f04f 0803 	mov.w	r8, #3
 8002f86:	f88d 8014 	strb.w	r8, [sp, #20]
 8002f8a:	9b05      	ldr	r3, [sp, #20]
 8002f8c:	9311      	str	r3, [sp, #68]	; 0x44
 8002f8e:	4629      	mov	r1, r5
 8002f90:	f365 0100 	bfi	r1, r5, #0, #1
 8002f94:	f365 0141 	bfi	r1, r5, #1, #1
 8002f98:	f365 0182 	bfi	r1, r5, #2, #1
 8002f9c:	f365 01c5 	bfi	r1, r5, #3, #3
 8002fa0:	2704      	movs	r7, #4
 8002fa2:	f367 1188 	bfi	r1, r7, #6, #3
 8002fa6:	260c      	movs	r6, #12
 8002fa8:	f366 2152 	bfi	r1, r6, #9, #10
 8002fac:	f365 41de 	bfi	r1, r5, #19, #12
 8002fb0:	f365 71df 	bfi	r1, r5, #31, #1
 8002fb4:	462b      	mov	r3, r5
 8002fb6:	aa11      	add	r2, sp, #68	; 0x44
 8002fb8:	4821      	ldr	r0, [pc, #132]	; (8003040 <lora_receive_cb+0x134>)
 8002fba:	f00b fa2a 	bl	800e412 <z_impl_z_log_msg2_static_create>
        LOG_DBG(" MESSAGE_TYPE_SYNC");
 8002fbe:	f8ad b018 	strh.w	fp, [sp, #24]
 8002fc2:	f8ad a01a 	strh.w	sl, [sp, #26]
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <lora_receive_cb+0x138>)
 8002fc8:	9318      	str	r3, [sp, #96]	; 0x60
 8002fca:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
 8002fce:	9505      	str	r5, [sp, #20]
 8002fd0:	f88d 8014 	strb.w	r8, [sp, #20]
 8002fd4:	9b05      	ldr	r3, [sp, #20]
 8002fd6:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fd8:	4629      	mov	r1, r5
 8002fda:	f365 0100 	bfi	r1, r5, #0, #1
 8002fde:	f365 0141 	bfi	r1, r5, #1, #1
 8002fe2:	f365 0182 	bfi	r1, r5, #2, #1
 8002fe6:	f365 01c5 	bfi	r1, r5, #3, #3
 8002fea:	f367 1188 	bfi	r1, r7, #6, #3
 8002fee:	f366 2152 	bfi	r1, r6, #9, #10
 8002ff2:	f365 41de 	bfi	r1, r5, #19, #12
 8002ff6:	f365 71df 	bfi	r1, r5, #31, #1
 8002ffa:	462b      	mov	r3, r5
 8002ffc:	aa17      	add	r2, sp, #92	; 0x5c
 8002ffe:	4810      	ldr	r0, [pc, #64]	; (8003040 <lora_receive_cb+0x134>)
 8003000:	f00b fa07 	bl	800e412 <z_impl_z_log_msg2_static_create>
	z_impl_k_timer_stop(timer);
 8003004:	4d10      	ldr	r5, [pc, #64]	; (8003048 <lora_receive_cb+0x13c>)
 8003006:	4628      	mov	r0, r5
 8003008:	f00c fefb 	bl	800fe02 <z_impl_k_timer_stop>
	return z_impl_k_sleep(timeout);
 800300c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003010:	2100      	movs	r1, #0
 8003012:	f008 fcb1 	bl	800b978 <z_impl_k_sleep>
	z_impl_k_timer_start(timer, duration, period);
 8003016:	f247 7288 	movw	r2, #30600	; 0x7788
 800301a:	2300      	movs	r3, #0
 800301c:	e9cd 2300 	strd	r2, r3, [sp]
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <lora_receive_cb+0x140>)
 8003022:	2309      	movs	r3, #9
 8003024:	4628      	mov	r0, r5
 8003026:	f008 fee5 	bl	800bdf4 <z_impl_k_timer_start>
 800302a:	e782      	b.n	8002f32 <lora_receive_cb+0x26>
 800302c:	20000e2c 	.word	0x20000e2c
 8003030:	2000048c 	.word	0x2000048c
 8003034:	20000458 	.word	0x20000458
 8003038:	08010db8 	.word	0x08010db8
 800303c:	08010f8c 	.word	0x08010f8c
 8003040:	08010ab0 	.word	0x08010ab0
 8003044:	08010f74 	.word	0x08010f74
 8003048:	200005c0 	.word	0x200005c0
 800304c:	ffffe21e 	.word	0xffffe21e

08003050 <work_buzzer_handler>:


void work_buzzer_handler(struct k_work *item)
{
 8003050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	b084      	sub	sp, #16
    uint8_t i = 0;
//    k_mutex_lock(&mut_buzzer_mode, K_FOREVER);
    /* Wait while signal will be raised */
    while(k_poll(&event_buzzer, 1, K_MSEC(1))) {
 8003056:	e003      	b.n	8003060 <work_buzzer_handler+0x10>
	return z_impl_k_sleep(timeout);
 8003058:	2032      	movs	r0, #50	; 0x32
 800305a:	2100      	movs	r1, #0
 800305c:	f008 fc8c 	bl	800b978 <z_impl_k_sleep>
	return z_impl_k_poll(events, num_events, timeout);
 8003060:	220a      	movs	r2, #10
 8003062:	2300      	movs	r3, #0
 8003064:	2101      	movs	r1, #1
 8003066:	48b9      	ldr	r0, [pc, #740]	; (800334c <work_buzzer_handler+0x2fc>)
 8003068:	f009 f914 	bl	800c294 <z_impl_k_poll>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1f3      	bne.n	8003058 <work_buzzer_handler+0x8>
        k_sleep(K_MSEC(5));
    }

    switch (event_buzzer.signal->result) {
 8003070:	4bb6      	ldr	r3, [pc, #728]	; (800334c <work_buzzer_handler+0x2fc>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d048      	beq.n	800310c <work_buzzer_handler+0xbc>
 800307a:	2b02      	cmp	r3, #2
 800307c:	f000 8163 	beq.w	8003346 <work_buzzer_handler+0x2f6>
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 816b 	beq.w	800335c <work_buzzer_handler+0x30c>
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
                             BUTTON_PRESSED_PERIOD_TIME_USEC/2U, PWM_FLAGS);
            k_sleep(K_USEC(BUTTON_PRESSED_PERIOD_TIME_USEC));
        case BUZZER_MODE_IDLE:
        default:
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 8003086:	4bb2      	ldr	r3, [pc, #712]	; (8003350 <work_buzzer_handler+0x300>)
 8003088:	681d      	ldr	r5, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 800308a:	68ab      	ldr	r3, [r5, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	aa02      	add	r2, sp, #8
 8003090:	2102      	movs	r1, #2
 8003092:	4628      	mov	r0, r5
 8003094:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8003096:	bb70      	cbnz	r0, 80030f6 <work_buzzer_handler+0xa6>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8003098:	9c02      	ldr	r4, [sp, #8]
 800309a:	9e03      	ldr	r6, [sp, #12]
 800309c:	00b2      	lsls	r2, r6, #2
 800309e:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 80030a2:	00a3      	lsls	r3, r4, #2
 80030a4:	191b      	adds	r3, r3, r4
 80030a6:	eb46 0202 	adc.w	r2, r6, r2
 80030aa:	00d2      	lsls	r2, r2, #3
 80030ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	1b1b      	subs	r3, r3, r4
 80030b4:	eb62 0206 	sbc.w	r2, r2, r6
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	191b      	adds	r3, r3, r4
 80030c2:	eb46 0602 	adc.w	r6, r6, r2
 80030c6:	01b6      	lsls	r6, r6, #6
 80030c8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80030cc:	019c      	lsls	r4, r3, #6
 80030ce:	4aa1      	ldr	r2, [pc, #644]	; (8003354 <work_buzzer_handler+0x304>)
 80030d0:	2300      	movs	r3, #0
 80030d2:	4620      	mov	r0, r4
 80030d4:	4631      	mov	r1, r6
 80030d6:	f7fd fc81 	bl	80009dc <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80030dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e0:	42a3      	cmp	r3, r4
 80030e2:	4b9d      	ldr	r3, [pc, #628]	; (8003358 <work_buzzer_handler+0x308>)
 80030e4:	41b3      	sbcs	r3, r6
 80030e6:	d306      	bcc.n	80030f6 <work_buzzer_handler+0xa6>
	api = (struct pwm_driver_api *)dev->api;
 80030e8:	68ab      	ldr	r3, [r5, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2102      	movs	r1, #2
 80030f2:	4628      	mov	r0, r5
 80030f4:	47a0      	blx	r4
                             0, PWM_FLAGS);
            break;
    }
    event_buzzer.signal->signaled = 0;
 80030f6:	4b95      	ldr	r3, [pc, #596]	; (800334c <work_buzzer_handler+0x2fc>)
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	2100      	movs	r1, #0
 80030fc:	6091      	str	r1, [r2, #8]
    event_buzzer.state = K_POLL_STATE_NOT_READY;
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	f361 3252 	bfi	r2, r1, #13, #6
 8003104:	60da      	str	r2, [r3, #12]
}
 8003106:	b004      	add	sp, #16
 8003108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800310c:	4b90      	ldr	r3, [pc, #576]	; (8003350 <work_buzzer_handler+0x300>)
 800310e:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 8003112:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	aa02      	add	r2, sp, #8
 800311a:	2102      	movs	r1, #2
 800311c:	4640      	mov	r0, r8
 800311e:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8003120:	2800      	cmp	r0, #0
 8003122:	d1e8      	bne.n	80030f6 <work_buzzer_handler+0xa6>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8003124:	9e02      	ldr	r6, [sp, #8]
 8003126:	9f03      	ldr	r7, [sp, #12]
 8003128:	00bc      	lsls	r4, r7, #2
 800312a:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800312e:	00b3      	lsls	r3, r6, #2
 8003130:	199b      	adds	r3, r3, r6
 8003132:	eb47 0404 	adc.w	r4, r7, r4
 8003136:	00e4      	lsls	r4, r4, #3
 8003138:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	1b9b      	subs	r3, r3, r6
 8003140:	eb64 0407 	sbc.w	r4, r4, r7
 8003144:	0124      	lsls	r4, r4, #4
 8003146:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	199b      	adds	r3, r3, r6
 800314e:	eb47 0404 	adc.w	r4, r7, r4
 8003152:	01a4      	lsls	r4, r4, #6
 8003154:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 8003158:	019d      	lsls	r5, r3, #6
 800315a:	4a7e      	ldr	r2, [pc, #504]	; (8003354 <work_buzzer_handler+0x304>)
 800315c:	2300      	movs	r3, #0
 800315e:	4628      	mov	r0, r5
 8003160:	4621      	mov	r1, r4
 8003162:	f7fd fc3b 	bl	80009dc <__aeabi_uldivmod>
 8003166:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8003168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800316c:	42ab      	cmp	r3, r5
 800316e:	4b7a      	ldr	r3, [pc, #488]	; (8003358 <work_buzzer_handler+0x308>)
 8003170:	41a3      	sbcs	r3, r4
 8003172:	d3c0      	bcc.n	80030f6 <work_buzzer_handler+0xa6>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8003174:	00ba      	lsls	r2, r7, #2
 8003176:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 800317a:	00b3      	lsls	r3, r6, #2
 800317c:	199b      	adds	r3, r3, r6
 800317e:	eb47 0202 	adc.w	r2, r7, r2
 8003182:	00d2      	lsls	r2, r2, #3
 8003184:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1b9b      	subs	r3, r3, r6
 800318c:	eb62 0207 	sbc.w	r2, r2, r7
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	199e      	adds	r6, r3, r6
 800319a:	eb47 0702 	adc.w	r7, r7, r2
 800319e:	017f      	lsls	r7, r7, #5
 80031a0:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 80031a4:	0176      	lsls	r6, r6, #5
 80031a6:	4a6b      	ldr	r2, [pc, #428]	; (8003354 <work_buzzer_handler+0x304>)
 80031a8:	2300      	movs	r3, #0
 80031aa:	4630      	mov	r0, r6
 80031ac:	4639      	mov	r1, r7
 80031ae:	f7fd fc15 	bl	80009dc <__aeabi_uldivmod>
 80031b2:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b8:	42b2      	cmp	r2, r6
 80031ba:	4a67      	ldr	r2, [pc, #412]	; (8003358 <work_buzzer_handler+0x308>)
 80031bc:	41ba      	sbcs	r2, r7
 80031be:	d39a      	bcc.n	80030f6 <work_buzzer_handler+0xa6>
	api = (struct pwm_driver_api *)dev->api;
 80031c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80031c4:	6814      	ldr	r4, [r2, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	9200      	str	r2, [sp, #0]
 80031ca:	464a      	mov	r2, r9
 80031cc:	2102      	movs	r1, #2
 80031ce:	4640      	mov	r0, r8
 80031d0:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
 80031d2:	e790      	b.n	80030f6 <work_buzzer_handler+0xa6>
	return z_impl_k_sleep(timeout);
 80031d4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80031d8:	2100      	movs	r1, #0
 80031da:	f008 fbcd 	bl	800b978 <z_impl_k_sleep>
                i++;
 80031de:	3501      	adds	r5, #1
 80031e0:	b2ed      	uxtb	r5, r5
            while (i < 2) {
 80031e2:	2d01      	cmp	r5, #1
 80031e4:	d887      	bhi.n	80030f6 <work_buzzer_handler+0xa6>
                pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80031e6:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <work_buzzer_handler+0x300>)
 80031e8:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 80031ea:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	aa02      	add	r2, sp, #8
 80031f0:	2102      	movs	r1, #2
 80031f2:	4630      	mov	r0, r6
 80031f4:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d164      	bne.n	80032c4 <work_buzzer_handler+0x274>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80031fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80031fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003202:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8003206:	ea44 7499 	orr.w	r4, r4, r9, lsr #30
 800320a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800320e:	eb13 0309 	adds.w	r3, r3, r9
 8003212:	eb48 0404 	adc.w	r4, r8, r4
 8003216:	00e4      	lsls	r4, r4, #3
 8003218:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	ebb3 0309 	subs.w	r3, r3, r9
 8003222:	eb64 0408 	sbc.w	r4, r4, r8
 8003226:	0124      	lsls	r4, r4, #4
 8003228:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	eb13 0309 	adds.w	r3, r3, r9
 8003232:	eb48 0404 	adc.w	r4, r8, r4
 8003236:	01a4      	lsls	r4, r4, #6
 8003238:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 800323c:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8003240:	4a44      	ldr	r2, [pc, #272]	; (8003354 <work_buzzer_handler+0x304>)
 8003242:	2300      	movs	r3, #0
 8003244:	4650      	mov	r0, sl
 8003246:	4621      	mov	r1, r4
 8003248:	f7fd fbc8 	bl	80009dc <__aeabi_uldivmod>
 800324c:	4607      	mov	r7, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003252:	4553      	cmp	r3, sl
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <work_buzzer_handler+0x308>)
 8003256:	41a3      	sbcs	r3, r4
 8003258:	d334      	bcc.n	80032c4 <work_buzzer_handler+0x274>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800325a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800325e:	ea42 7299 	orr.w	r2, r2, r9, lsr #30
 8003262:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8003266:	eb13 0309 	adds.w	r3, r3, r9
 800326a:	eb48 0202 	adc.w	r2, r8, r2
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	ebb3 0309 	subs.w	r3, r3, r9
 800327a:	eb62 0208 	sbc.w	r2, r2, r8
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	eb13 0309 	adds.w	r3, r3, r9
 800328a:	eb48 0802 	adc.w	r8, r8, r2
 800328e:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8003292:	ea48 68d3 	orr.w	r8, r8, r3, lsr #27
 8003296:	015c      	lsls	r4, r3, #5
 8003298:	4a2e      	ldr	r2, [pc, #184]	; (8003354 <work_buzzer_handler+0x304>)
 800329a:	2300      	movs	r3, #0
 800329c:	4620      	mov	r0, r4
 800329e:	4641      	mov	r1, r8
 80032a0:	f7fd fb9c 	bl	80009dc <__aeabi_uldivmod>
 80032a4:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032aa:	42a2      	cmp	r2, r4
 80032ac:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <work_buzzer_handler+0x308>)
 80032ae:	eb72 0208 	sbcs.w	r2, r2, r8
 80032b2:	d307      	bcc.n	80032c4 <work_buzzer_handler+0x274>
	api = (struct pwm_driver_api *)dev->api;
 80032b4:	68b2      	ldr	r2, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 80032b6:	6814      	ldr	r4, [r2, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	9200      	str	r2, [sp, #0]
 80032bc:	463a      	mov	r2, r7
 80032be:	2102      	movs	r1, #2
 80032c0:	4630      	mov	r0, r6
 80032c2:	47a0      	blx	r4
 80032c4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80032c8:	2100      	movs	r1, #0
 80032ca:	f008 fb55 	bl	800b978 <z_impl_k_sleep>
                pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <work_buzzer_handler+0x300>)
 80032d0:	681e      	ldr	r6, [r3, #0]
	api = (struct pwm_driver_api *)dev->api;
 80032d2:	68b3      	ldr	r3, [r6, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	aa02      	add	r2, sp, #8
 80032d8:	2102      	movs	r1, #2
 80032da:	4630      	mov	r0, r6
 80032dc:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 80032de:	2800      	cmp	r0, #0
 80032e0:	f47f af78 	bne.w	80031d4 <work_buzzer_handler+0x184>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 80032e4:	9c02      	ldr	r4, [sp, #8]
 80032e6:	9f03      	ldr	r7, [sp, #12]
 80032e8:	00ba      	lsls	r2, r7, #2
 80032ea:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 80032ee:	00a3      	lsls	r3, r4, #2
 80032f0:	191b      	adds	r3, r3, r4
 80032f2:	eb47 0202 	adc.w	r2, r7, r2
 80032f6:	00d2      	lsls	r2, r2, #3
 80032f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1b1b      	subs	r3, r3, r4
 8003300:	eb62 0207 	sbc.w	r2, r2, r7
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	191b      	adds	r3, r3, r4
 800330e:	eb47 0702 	adc.w	r7, r7, r2
 8003312:	01bf      	lsls	r7, r7, #6
 8003314:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 8003318:	019c      	lsls	r4, r3, #6
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <work_buzzer_handler+0x304>)
 800331c:	2300      	movs	r3, #0
 800331e:	4620      	mov	r0, r4
 8003320:	4639      	mov	r1, r7
 8003322:	f7fd fb5b 	bl	80009dc <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 8003328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800332c:	42a3      	cmp	r3, r4
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <work_buzzer_handler+0x308>)
 8003330:	41bb      	sbcs	r3, r7
 8003332:	f4ff af4f 	bcc.w	80031d4 <work_buzzer_handler+0x184>
	api = (struct pwm_driver_api *)dev->api;
 8003336:	68b3      	ldr	r3, [r6, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2102      	movs	r1, #2
 8003340:	4630      	mov	r0, r6
 8003342:	47a0      	blx	r4
	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
 8003344:	e746      	b.n	80031d4 <work_buzzer_handler+0x184>
    switch (event_buzzer.signal->result) {
 8003346:	2500      	movs	r5, #0
 8003348:	e74b      	b.n	80031e2 <work_buzzer_handler+0x192>
 800334a:	bf00      	nop
 800334c:	20000004 	.word	0x20000004
 8003350:	20000e20 	.word	0x20000e20
 8003354:	000f4240 	.word	0x000f4240
 8003358:	000f423f 	.word	0x000f423f
            pwm_pin_set_usec(buzzer_dev_ptr, PWM_CHANNEL, BUTTON_PRESSED_PERIOD_TIME_USEC,
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <work_buzzer_handler+0x3e0>)
 800335e:	f8d3 8000 	ldr.w	r8, [r3]
	api = (struct pwm_driver_api *)dev->api;
 8003362:	f8d8 3008 	ldr.w	r3, [r8, #8]
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	aa02      	add	r2, sp, #8
 800336a:	2102      	movs	r1, #2
 800336c:	4640      	mov	r0, r8
 800336e:	4798      	blx	r3
	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8003370:	2800      	cmp	r0, #0
 8003372:	d156      	bne.n	8003422 <work_buzzer_handler+0x3d2>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8003374:	9e02      	ldr	r6, [sp, #8]
 8003376:	9f03      	ldr	r7, [sp, #12]
 8003378:	00bc      	lsls	r4, r7, #2
 800337a:	ea44 7496 	orr.w	r4, r4, r6, lsr #30
 800337e:	00b3      	lsls	r3, r6, #2
 8003380:	199b      	adds	r3, r3, r6
 8003382:	eb47 0404 	adc.w	r4, r7, r4
 8003386:	00e4      	lsls	r4, r4, #3
 8003388:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1b9b      	subs	r3, r3, r6
 8003390:	eb64 0407 	sbc.w	r4, r4, r7
 8003394:	0124      	lsls	r4, r4, #4
 8003396:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	199b      	adds	r3, r3, r6
 800339e:	eb47 0404 	adc.w	r4, r7, r4
 80033a2:	01a4      	lsls	r4, r4, #6
 80033a4:	ea44 6493 	orr.w	r4, r4, r3, lsr #26
 80033a8:	019d      	lsls	r5, r3, #6
 80033aa:	4a22      	ldr	r2, [pc, #136]	; (8003434 <work_buzzer_handler+0x3e4>)
 80033ac:	2300      	movs	r3, #0
 80033ae:	4628      	mov	r0, r5
 80033b0:	4621      	mov	r1, r4
 80033b2:	f7fd fb13 	bl	80009dc <__aeabi_uldivmod>
 80033b6:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033bc:	42ab      	cmp	r3, r5
 80033be:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <work_buzzer_handler+0x3e8>)
 80033c0:	41a3      	sbcs	r3, r4
 80033c2:	d32e      	bcc.n	8003422 <work_buzzer_handler+0x3d2>
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 80033c4:	00ba      	lsls	r2, r7, #2
 80033c6:	ea42 7296 	orr.w	r2, r2, r6, lsr #30
 80033ca:	00b3      	lsls	r3, r6, #2
 80033cc:	199b      	adds	r3, r3, r6
 80033ce:	eb47 0202 	adc.w	r2, r7, r2
 80033d2:	00d2      	lsls	r2, r2, #3
 80033d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1b9b      	subs	r3, r3, r6
 80033dc:	eb62 0207 	sbc.w	r2, r2, r7
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	199e      	adds	r6, r3, r6
 80033ea:	eb47 0702 	adc.w	r7, r7, r2
 80033ee:	017f      	lsls	r7, r7, #5
 80033f0:	ea47 67d6 	orr.w	r7, r7, r6, lsr #27
 80033f4:	0176      	lsls	r6, r6, #5
 80033f6:	4a0f      	ldr	r2, [pc, #60]	; (8003434 <work_buzzer_handler+0x3e4>)
 80033f8:	2300      	movs	r3, #0
 80033fa:	4630      	mov	r0, r6
 80033fc:	4639      	mov	r1, r7
 80033fe:	f7fd faed 	bl	80009dc <__aeabi_uldivmod>
 8003402:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8003404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003408:	42b2      	cmp	r2, r6
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <work_buzzer_handler+0x3e8>)
 800340c:	41ba      	sbcs	r2, r7
 800340e:	d308      	bcc.n	8003422 <work_buzzer_handler+0x3d2>
	api = (struct pwm_driver_api *)dev->api;
 8003410:	f8d8 2008 	ldr.w	r2, [r8, #8]
	return api->pin_set(dev, pwm, period, pulse, flags);
 8003414:	6814      	ldr	r4, [r2, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	9200      	str	r2, [sp, #0]
 800341a:	464a      	mov	r2, r9
 800341c:	2102      	movs	r1, #2
 800341e:	4640      	mov	r0, r8
 8003420:	47a0      	blx	r4
 8003422:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003426:	2100      	movs	r1, #0
 8003428:	f008 faa6 	bl	800b978 <z_impl_k_sleep>
 800342c:	e62b      	b.n	8003086 <work_buzzer_handler+0x36>
 800342e:	bf00      	nop
 8003430:	20000e20 	.word	0x20000e20
 8003434:	000f4240 	.word	0x000f4240
 8003438:	000f423f 	.word	0x000f423f

0800343c <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 800343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003440:	b089      	sub	sp, #36	; 0x24
 8003442:	9202      	str	r2, [sp, #8]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8003444:	f010 0a03 	ands.w	sl, r0, #3
 8003448:	f040 8215 	bne.w	8003876 <cbvprintf_package+0x43a>
 800344c:	4607      	mov	r7, r0
 800344e:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8003450:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8003452:	b1e0      	cbz	r0, 800348e <cbvprintf_package+0x52>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8003454:	b127      	cbz	r7, 8003460 <cbvprintf_package+0x24>
 8003456:	1be2      	subs	r2, r4, r7
 8003458:	3204      	adds	r2, #4
 800345a:	455a      	cmp	r2, fp
 800345c:	f200 820e 	bhi.w	800387c <cbvprintf_package+0x440>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 8003460:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8003462:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8003466:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 800346a:	f8cd a004 	str.w	sl, [sp, #4]
	bool parsing = false;
 800346e:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
 8003470:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
 8003474:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8003476:	b107      	cbz	r7, 800347a <cbvprintf_package+0x3e>
				*(const char **)buf = s;
 8003478:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 800347a:	4ac6      	ldr	r2, [pc, #792]	; (8003794 <cbvprintf_package+0x358>)
 800347c:	4293      	cmp	r3, r2
 800347e:	f0c0 815a 	bcc.w	8003736 <cbvprintf_package+0x2fa>
 8003482:	4ac5      	ldr	r2, [pc, #788]	; (8003798 <cbvprintf_package+0x35c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	f0c0 817f 	bcc.w	8003788 <cbvprintf_package+0x34c>
 800348a:	2200      	movs	r2, #0
 800348c:	e154      	b.n	8003738 <cbvprintf_package+0x2fc>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 800348e:	f001 0b07 	and.w	fp, r1, #7
 8003492:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8003494:	f1cb 0b08 	rsb	fp, fp, #8
 8003498:	e7dc      	b.n	8003454 <cbvprintf_package+0x18>
			if (*fmt == '%') {
 800349a:	2b25      	cmp	r3, #37	; 0x25
 800349c:	d105      	bne.n	80034aa <cbvprintf_package+0x6e>
				parsing = true;
 800349e:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
 80034a0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
 80034a4:	46c1      	mov	r9, r8
			continue;
 80034a6:	e000      	b.n	80034aa <cbvprintf_package+0x6e>
		switch (*fmt) {
 80034a8:	2600      	movs	r6, #0
 80034aa:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
 80034ac:	f105 0c01 	add.w	ip, r5, #1
 80034b0:	786b      	ldrb	r3, [r5, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8184 	beq.w	80037c0 <cbvprintf_package+0x384>
		if (!parsing) {
 80034b8:	2e00      	cmp	r6, #0
 80034ba:	d0ee      	beq.n	800349a <cbvprintf_package+0x5e>
		switch (*fmt) {
 80034bc:	f1a3 0120 	sub.w	r1, r3, #32
 80034c0:	295a      	cmp	r1, #90	; 0x5a
 80034c2:	d8f1      	bhi.n	80034a8 <cbvprintf_package+0x6c>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <cbvprintf_package+0x90>)
 80034c6:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034ab 	.word	0x080034ab
 80034d0:	080034a9 	.word	0x080034a9
 80034d4:	080034a9 	.word	0x080034a9
 80034d8:	080034ab 	.word	0x080034ab
 80034dc:	080034a9 	.word	0x080034a9
 80034e0:	080034a9 	.word	0x080034a9
 80034e4:	080034a9 	.word	0x080034a9
 80034e8:	080034a9 	.word	0x080034a9
 80034ec:	080034a9 	.word	0x080034a9
 80034f0:	080034a9 	.word	0x080034a9
 80034f4:	08003659 	.word	0x08003659
 80034f8:	080034ab 	.word	0x080034ab
 80034fc:	080034a9 	.word	0x080034a9
 8003500:	080034ab 	.word	0x080034ab
 8003504:	080034ab 	.word	0x080034ab
 8003508:	080034a9 	.word	0x080034a9
 800350c:	080034ab 	.word	0x080034ab
 8003510:	080034ab 	.word	0x080034ab
 8003514:	080034ab 	.word	0x080034ab
 8003518:	080034ab 	.word	0x080034ab
 800351c:	080034ab 	.word	0x080034ab
 8003520:	080034ab 	.word	0x080034ab
 8003524:	080034ab 	.word	0x080034ab
 8003528:	080034ab 	.word	0x080034ab
 800352c:	080034ab 	.word	0x080034ab
 8003530:	080034ab 	.word	0x080034ab
 8003534:	080034a9 	.word	0x080034a9
 8003538:	080034a9 	.word	0x080034a9
 800353c:	080034a9 	.word	0x080034a9
 8003540:	080034a9 	.word	0x080034a9
 8003544:	080034a9 	.word	0x080034a9
 8003548:	080034a9 	.word	0x080034a9
 800354c:	080034a9 	.word	0x080034a9
 8003550:	080036c1 	.word	0x080036c1
 8003554:	080034a9 	.word	0x080034a9
 8003558:	080034a9 	.word	0x080034a9
 800355c:	080034a9 	.word	0x080034a9
 8003560:	080036c1 	.word	0x080036c1
 8003564:	080036c1 	.word	0x080036c1
 8003568:	080036c1 	.word	0x080036c1
 800356c:	080034a9 	.word	0x080034a9
 8003570:	080034a9 	.word	0x080034a9
 8003574:	080034a9 	.word	0x080034a9
 8003578:	080034a9 	.word	0x080034a9
 800357c:	080034ab 	.word	0x080034ab
 8003580:	080034a9 	.word	0x080034a9
 8003584:	080034a9 	.word	0x080034a9
 8003588:	080034a9 	.word	0x080034a9
 800358c:	080034a9 	.word	0x080034a9
 8003590:	080034a9 	.word	0x080034a9
 8003594:	080034a9 	.word	0x080034a9
 8003598:	080034a9 	.word	0x080034a9
 800359c:	080034a9 	.word	0x080034a9
 80035a0:	080034a9 	.word	0x080034a9
 80035a4:	080034a9 	.word	0x080034a9
 80035a8:	080034a9 	.word	0x080034a9
 80035ac:	08003651 	.word	0x08003651
 80035b0:	080034a9 	.word	0x080034a9
 80035b4:	080034a9 	.word	0x080034a9
 80035b8:	080034a9 	.word	0x080034a9
 80035bc:	080034a9 	.word	0x080034a9
 80035c0:	080034a9 	.word	0x080034a9
 80035c4:	080034a9 	.word	0x080034a9
 80035c8:	080034a9 	.word	0x080034a9
 80035cc:	080034a9 	.word	0x080034a9
 80035d0:	080036c1 	.word	0x080036c1
 80035d4:	080034a9 	.word	0x080034a9
 80035d8:	08003651 	.word	0x08003651
 80035dc:	08003651 	.word	0x08003651
 80035e0:	080036c1 	.word	0x080036c1
 80035e4:	080036c1 	.word	0x080036c1
 80035e8:	080036c1 	.word	0x080036c1
 80035ec:	080034ab 	.word	0x080034ab
 80035f0:	08003651 	.word	0x08003651
 80035f4:	08003639 	.word	0x08003639
 80035f8:	080034a9 	.word	0x080034a9
 80035fc:	080034ab 	.word	0x080034ab
 8003600:	080034a9 	.word	0x080034a9
 8003604:	08003721 	.word	0x08003721
 8003608:	08003651 	.word	0x08003651
 800360c:	08003721 	.word	0x08003721
 8003610:	080034a9 	.word	0x080034a9
 8003614:	080034a9 	.word	0x080034a9
 8003618:	08003721 	.word	0x08003721
 800361c:	08003649 	.word	0x08003649
 8003620:	08003651 	.word	0x08003651
 8003624:	080034a9 	.word	0x080034a9
 8003628:	080034a9 	.word	0x080034a9
 800362c:	08003651 	.word	0x08003651
 8003630:	080034a9 	.word	0x080034a9
 8003634:	08003641 	.word	0x08003641
			align = VA_STACK_ALIGN(intmax_t);
 8003638:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
 800363c:	46c1      	mov	r9, r8
			continue;
 800363e:	e734      	b.n	80034aa <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(size_t);
 8003640:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
 8003644:	46c1      	mov	r9, r8
			continue;
 8003646:	e730      	b.n	80034aa <cbvprintf_package+0x6e>
			align = VA_STACK_ALIGN(ptrdiff_t);
 8003648:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
 800364c:	46c1      	mov	r9, r8
			continue;
 800364e:	e72c      	b.n	80034aa <cbvprintf_package+0x6e>
			if (fmt[-1] == 'l') {
 8003650:	782a      	ldrb	r2, [r5, #0]
 8003652:	2a6c      	cmp	r2, #108	; 0x6c
 8003654:	d026      	beq.n	80036a4 <cbvprintf_package+0x268>
			parsing = false;
 8003656:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
 8003658:	eb04 0208 	add.w	r2, r4, r8
 800365c:	3a01      	subs	r2, #1
 800365e:	f1c8 0100 	rsb	r1, r8, #0
 8003662:	400a      	ands	r2, r1
 8003664:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8003666:	b127      	cbz	r7, 8003672 <cbvprintf_package+0x236>
 8003668:	1bd1      	subs	r1, r2, r7
 800366a:	4449      	add	r1, r9
 800366c:	458b      	cmp	fp, r1
 800366e:	f0c0 8108 	bcc.w	8003882 <cbvprintf_package+0x446>
		if (*fmt == 's') {
 8003672:	2b73      	cmp	r3, #115	; 0x73
 8003674:	d059      	beq.n	800372a <cbvprintf_package+0x2ee>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 8003676:	f1b9 0f04 	cmp.w	r9, #4
 800367a:	f000 8099 	beq.w	80037b0 <cbvprintf_package+0x374>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 800367e:	f1b9 0f08 	cmp.w	r9, #8
 8003682:	f040 8107 	bne.w	8003894 <cbvprintf_package+0x458>
			long long v = va_arg(ap, long long);
 8003686:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003688:	3307      	adds	r3, #7
 800368a:	f023 0307 	bic.w	r3, r3, #7
 800368e:	f103 0108 	add.w	r1, r3, #8
 8003692:	9112      	str	r1, [sp, #72]	; 0x48
 8003694:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 8003698:	b10f      	cbz	r7, 800369e <cbvprintf_package+0x262>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 800369a:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 800369e:	f102 0408 	add.w	r4, r2, #8
 80036a2:	e702      	b.n	80034aa <cbvprintf_package+0x6e>
				if (fmt[-2] == 'l') {
 80036a4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80036a8:	2a6c      	cmp	r2, #108	; 0x6c
 80036aa:	d004      	beq.n	80036b6 <cbvprintf_package+0x27a>
			parsing = false;
 80036ac:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
 80036ae:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
 80036b2:	46c1      	mov	r9, r8
 80036b4:	e7d0      	b.n	8003658 <cbvprintf_package+0x21c>
			parsing = false;
 80036b6:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
 80036b8:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
 80036bc:	46c1      	mov	r9, r8
 80036be:	e7cb      	b.n	8003658 <cbvprintf_package+0x21c>
			if (fmt[-1] == 'L') {
 80036c0:	782b      	ldrb	r3, [r5, #0]
 80036c2:	2b4c      	cmp	r3, #76	; 0x4c
 80036c4:	d01c      	beq.n	8003700 <cbvprintf_package+0x2c4>
				v.d = va_arg(ap, double);
 80036c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036c8:	3307      	adds	r3, #7
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	f103 0208 	add.w	r2, r3, #8
 80036d2:	9212      	str	r2, [sp, #72]	; 0x48
 80036d4:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 80036d8:	1de2      	adds	r2, r4, #7
 80036da:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 80036de:	b147      	cbz	r7, 80036f2 <cbvprintf_package+0x2b6>
				if (BUF_OFFSET + size > len) {
 80036e0:	1bd3      	subs	r3, r2, r7
 80036e2:	3308      	adds	r3, #8
 80036e4:	455b      	cmp	r3, fp
 80036e6:	d815      	bhi.n	8003714 <cbvprintf_package+0x2d8>
				} else if (fmt[-1] == 'L') {
 80036e8:	782b      	ldrb	r3, [r5, #0]
 80036ea:	2b4c      	cmp	r3, #76	; 0x4c
 80036ec:	d015      	beq.n	800371a <cbvprintf_package+0x2de>
					*(double *)buf = v.d;
 80036ee:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 80036f2:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
 80036f6:	2600      	movs	r6, #0
			continue;
 80036f8:	f04f 0808 	mov.w	r8, #8
 80036fc:	46c1      	mov	r9, r8
 80036fe:	e6d4      	b.n	80034aa <cbvprintf_package+0x6e>
				v.ld = va_arg(ap, long double);
 8003700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003702:	3307      	adds	r3, #7
 8003704:	f023 0307 	bic.w	r3, r3, #7
 8003708:	f103 0208 	add.w	r2, r3, #8
 800370c:	9212      	str	r2, [sp, #72]	; 0x48
 800370e:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 8003712:	e7e1      	b.n	80036d8 <cbvprintf_package+0x29c>
					return -ENOSPC;
 8003714:	f06f 001b 	mvn.w	r0, #27
 8003718:	e0aa      	b.n	8003870 <cbvprintf_package+0x434>
					*(long double *)buf = v.ld;
 800371a:	e9c2 0100 	strd	r0, r1, [r2]
 800371e:	e7e8      	b.n	80036f2 <cbvprintf_package+0x2b6>
			parsing = false;
 8003720:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
 8003722:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
 8003726:	46c1      	mov	r9, r8
 8003728:	e796      	b.n	8003658 <cbvprintf_package+0x21c>
			s = va_arg(ap, char *);
 800372a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800372c:	1d1a      	adds	r2, r3, #4
 800372e:	9212      	str	r2, [sp, #72]	; 0x48
 8003730:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8003732:	4665      	mov	r5, ip
 8003734:	e69f      	b.n	8003476 <cbvprintf_package+0x3a>
	return ((addr >= (const char *)RO_START) &&
 8003736:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 8003738:	9902      	ldr	r1, [sp, #8]
 800373a:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 800373e:	4610      	mov	r0, r2
 8003740:	b102      	cbz	r2, 8003744 <cbvprintf_package+0x308>
 8003742:	b1f9      	cbz	r1, 8003784 <cbvprintf_package+0x348>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 8003744:	eba4 0c07 	sub.w	ip, r4, r7
 8003748:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 800374c:	b119      	cbz	r1, 8003756 <cbvprintf_package+0x31a>
 800374e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003752:	f080 8099 	bcs.w	8003888 <cbvprintf_package+0x44c>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 8003756:	9901      	ldr	r1, [sp, #4]
 8003758:	290f      	cmp	r1, #15
 800375a:	f200 8098 	bhi.w	800388e <cbvprintf_package+0x452>
				if (buf0 != NULL) {
 800375e:	b1ef      	cbz	r7, 800379c <cbvprintf_package+0x360>
					str_ptr_pos[s_idx] = s_ptr_idx;
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	ab08      	add	r3, sp, #32
 8003764:	440b      	add	r3, r1
 8003766:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 800376a:	b178      	cbz	r0, 800378c <cbvprintf_package+0x350>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 800376c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003770:	ab08      	add	r3, sp, #32
 8003772:	440b      	add	r3, r1
 8003774:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 8003778:	9b00      	ldr	r3, [sp, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	9300      	str	r3, [sp, #0]
				s_idx++;
 800377e:	9b01      	ldr	r3, [sp, #4]
 8003780:	3301      	adds	r3, #1
 8003782:	9301      	str	r3, [sp, #4]
			buf += sizeof(char *);
 8003784:	3404      	adds	r4, #4
 8003786:	e691      	b.n	80034ac <cbvprintf_package+0x70>
	return ((addr >= (const char *)RO_START) &&
 8003788:	2201      	movs	r2, #1
 800378a:	e7d5      	b.n	8003738 <cbvprintf_package+0x2fc>
						s_rw_cnt++;
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	e7f4      	b.n	800377e <cbvprintf_package+0x342>
 8003794:	08010608 	.word	0x08010608
 8003798:	080123d0 	.word	0x080123d0
				} else if (is_ro) {
 800379c:	b110      	cbz	r0, 80037a4 <cbvprintf_package+0x368>
					len += 1;
 800379e:	f10b 0b01 	add.w	fp, fp, #1
 80037a2:	e7ec      	b.n	800377e <cbvprintf_package+0x342>
					len += strlen(s) + 1 + 1;
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fb56 	bl	8000e56 <strlen>
 80037aa:	1c83      	adds	r3, r0, #2
 80037ac:	449b      	add	fp, r3
 80037ae:	e7e6      	b.n	800377e <cbvprintf_package+0x342>
			int v = va_arg(ap, int);
 80037b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037b2:	1d19      	adds	r1, r3, #4
 80037b4:	9112      	str	r1, [sp, #72]	; 0x48
 80037b6:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 80037b8:	b107      	cbz	r7, 80037bc <cbvprintf_package+0x380>
				*(int *)buf = v;
 80037ba:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 80037bc:	1d14      	adds	r4, r2, #4
 80037be:	e674      	b.n	80034aa <cbvprintf_package+0x6e>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 80037c0:	1be3      	subs	r3, r4, r7
 80037c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c6:	d268      	bcs.n	800389a <cbvprintf_package+0x45e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 80037c8:	b15f      	cbz	r7, 80037e2 <cbvprintf_package+0x3a6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 80037ca:	2200      	movs	r2, #0
 80037cc:	603a      	str	r2, [r7, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	703b      	strb	r3, [r7, #0]
	buf0[1] = s_rw_cnt;
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	707b      	strb	r3, [r7, #1]
	buf0[2] = s_ro_cnt;
 80037d6:	9b00      	ldr	r3, [sp, #0]
 80037d8:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 80037da:	b9d3      	cbnz	r3, 8003812 <cbvprintf_package+0x3d6>
 80037dc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80037e0:	e039      	b.n	8003856 <cbvprintf_package+0x41a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 80037e2:	445b      	add	r3, fp
 80037e4:	f1a3 0008 	sub.w	r0, r3, #8
 80037e8:	e042      	b.n	8003870 <cbvprintf_package+0x434>
		for (i = 0; i < s_idx; i++) {
 80037ea:	3301      	adds	r3, #1
 80037ec:	4298      	cmp	r0, r3
 80037ee:	d913      	bls.n	8003818 <cbvprintf_package+0x3dc>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 80037f0:	aa08      	add	r2, sp, #32
 80037f2:	441a      	add	r2, r3
 80037f4:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80037f8:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 80037fc:	2a00      	cmp	r2, #0
 80037fe:	daf4      	bge.n	80037ea <cbvprintf_package+0x3ae>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8003800:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 8003804:	1be2      	subs	r2, r4, r7
 8003806:	3201      	adds	r2, #1
 8003808:	4593      	cmp	fp, r2
 800380a:	d349      	bcc.n	80038a0 <cbvprintf_package+0x464>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 800380c:	f804 1b01 	strb.w	r1, [r4], #1
 8003810:	e7eb      	b.n	80037ea <cbvprintf_package+0x3ae>
		for (i = 0; i < s_idx; i++) {
 8003812:	4653      	mov	r3, sl
 8003814:	9801      	ldr	r0, [sp, #4]
 8003816:	e7e9      	b.n	80037ec <cbvprintf_package+0x3b0>
 8003818:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800381c:	e01b      	b.n	8003856 <cbvprintf_package+0x41a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 800381e:	ab08      	add	r3, sp, #32
 8003820:	4453      	add	r3, sl
 8003822:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 8003826:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 8003830:	4640      	mov	r0, r8
 8003832:	f7fd fb10 	bl	8000e56 <strlen>
 8003836:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 8003838:	1be3      	subs	r3, r4, r7
 800383a:	442b      	add	r3, r5
 800383c:	3301      	adds	r3, #1
 800383e:	459b      	cmp	fp, r3
 8003840:	d331      	bcc.n	80038a6 <cbvprintf_package+0x46a>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 8003842:	f804 6b01 	strb.w	r6, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8003846:	462a      	mov	r2, r5
 8003848:	4641      	mov	r1, r8
 800384a:	4620      	mov	r0, r4
 800384c:	f00c fb99 	bl	800ff82 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 8003850:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 8003852:	f10a 0a01 	add.w	sl, sl, #1
 8003856:	45d1      	cmp	r9, sl
 8003858:	d909      	bls.n	800386e <cbvprintf_package+0x432>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 800385a:	9b00      	ldr	r3, [sp, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0de      	beq.n	800381e <cbvprintf_package+0x3e2>
 8003860:	ab08      	add	r3, sp, #32
 8003862:	4453      	add	r3, sl
 8003864:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dad8      	bge.n	800381e <cbvprintf_package+0x3e2>
 800386c:	e7f1      	b.n	8003852 <cbvprintf_package+0x416>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 800386e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 8003870:	b009      	add	sp, #36	; 0x24
 8003872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 8003876:	f06f 000d 	mvn.w	r0, #13
 800387a:	e7f9      	b.n	8003870 <cbvprintf_package+0x434>
		return -ENOSPC;
 800387c:	f06f 001b 	mvn.w	r0, #27
 8003880:	e7f6      	b.n	8003870 <cbvprintf_package+0x434>
			return -ENOSPC;
 8003882:	f06f 001b 	mvn.w	r0, #27
 8003886:	e7f3      	b.n	8003870 <cbvprintf_package+0x434>
					return -EINVAL;
 8003888:	f06f 0015 	mvn.w	r0, #21
 800388c:	e7f0      	b.n	8003870 <cbvprintf_package+0x434>
					return -EINVAL;
 800388e:	f06f 0015 	mvn.w	r0, #21
 8003892:	e7ed      	b.n	8003870 <cbvprintf_package+0x434>
			return -EINVAL;
 8003894:	f06f 0015 	mvn.w	r0, #21
 8003898:	e7ea      	b.n	8003870 <cbvprintf_package+0x434>
		return -EINVAL;
 800389a:	f06f 0015 	mvn.w	r0, #21
 800389e:	e7e7      	b.n	8003870 <cbvprintf_package+0x434>
				return -ENOSPC;
 80038a0:	f06f 001b 	mvn.w	r0, #27
 80038a4:	e7e4      	b.n	8003870 <cbvprintf_package+0x434>
			return -ENOSPC;
 80038a6:	f06f 001b 	mvn.w	r0, #27
 80038aa:	e7e1      	b.n	8003870 <cbvprintf_package+0x434>

080038ac <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 80038ac:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80038ae:	680b      	ldr	r3, [r1, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80038b4:	4b01      	ldr	r3, [pc, #4]	; (80038bc <char_out+0x10>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4798      	blx	r3
}
 80038ba:	bd08      	pop	{r3, pc}
 80038bc:	20000044 	.word	0x20000044

080038c0 <__printk_hook_install>:
	_char_out = fn;
 80038c0:	4b01      	ldr	r3, [pc, #4]	; (80038c8 <__printk_hook_install+0x8>)
 80038c2:	6018      	str	r0, [r3, #0]
}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000044 	.word	0x20000044

080038cc <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
 80038cc:	b500      	push	{lr}
 80038ce:	b083      	sub	sp, #12
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
 80038d4:	2100      	movs	r1, #0
 80038d6:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
 80038d8:	a901      	add	r1, sp, #4
 80038da:	4803      	ldr	r0, [pc, #12]	; (80038e8 <vprintk+0x1c>)
 80038dc:	f000 fa2c 	bl	8003d38 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
 80038e0:	b003      	add	sp, #12
 80038e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038e6:	bf00      	nop
 80038e8:	080038ad 	.word	0x080038ad

080038ec <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80038ec:	b510      	push	{r4, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80038f2:	9001      	str	r0, [sp, #4]
 80038f4:	9102      	str	r1, [sp, #8]
 80038f6:	2100      	movs	r1, #0
 80038f8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 80038fa:	a901      	add	r1, sp, #4
 80038fc:	4805      	ldr	r0, [pc, #20]	; (8003914 <vsnprintk+0x28>)
 80038fe:	f000 fa1b 	bl	8003d38 <cbvprintf>

	if (ctx.count < ctx.max) {
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	9a02      	ldr	r2, [sp, #8]
 8003906:	4293      	cmp	r3, r2
 8003908:	da01      	bge.n	800390e <vsnprintk+0x22>
		str[ctx.count] = '\0';
 800390a:	2200      	movs	r2, #0
 800390c:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 800390e:	9803      	ldr	r0, [sp, #12]
 8003910:	b004      	add	sp, #16
 8003912:	bd10      	pop	{r4, pc}
 8003914:	0800dc5d 	.word	0x0800dc5d

08003918 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8003918:	4684      	mov	ip, r0
	const char *sp = *str;
 800391a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 800391c:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 800391e:	e005      	b.n	800392c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 8003920:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003924:	3201      	adds	r2, #1
 8003926:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800392a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 800392c:	7813      	ldrb	r3, [r2, #0]
 800392e:	4904      	ldr	r1, [pc, #16]	; (8003940 <extract_decimal+0x28>)
 8003930:	5c59      	ldrb	r1, [r3, r1]
 8003932:	f011 0f04 	tst.w	r1, #4
 8003936:	d1f3      	bne.n	8003920 <extract_decimal+0x8>
	}
	*str = sp;
 8003938:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	08012159 	.word	0x08012159

08003944 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 800394a:	2300      	movs	r3, #0
 800394c:	6003      	str	r3, [r0, #0]
 800394e:	6043      	str	r3, [r0, #4]
 8003950:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 8003952:	784b      	ldrb	r3, [r1, #1]
 8003954:	2b25      	cmp	r3, #37	; 0x25
 8003956:	d002      	beq.n	800395e <extract_conversion+0x1a>
 8003958:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 800395a:	2501      	movs	r5, #1
 800395c:	e01f      	b.n	800399e <extract_conversion+0x5a>
		conv->specifier = *sp++;
 800395e:	1c88      	adds	r0, r1, #2
 8003960:	70e3      	strb	r3, [r4, #3]
		return sp;
 8003962:	e145      	b.n	8003bf0 <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8003964:	7823      	ldrb	r3, [r4, #0]
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	7023      	strb	r3, [r4, #0]
		if (loop) {
 800396c:	b1b5      	cbz	r5, 800399c <extract_conversion+0x58>
			++sp;
 800396e:	3601      	adds	r6, #1
 8003970:	e014      	b.n	800399c <extract_conversion+0x58>
			conv->flag_plus = true;
 8003972:	7823      	ldrb	r3, [r4, #0]
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	7023      	strb	r3, [r4, #0]
			break;
 800397a:	e7f7      	b.n	800396c <extract_conversion+0x28>
			conv->flag_space = true;
 800397c:	7823      	ldrb	r3, [r4, #0]
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	7023      	strb	r3, [r4, #0]
			break;
 8003984:	e7f2      	b.n	800396c <extract_conversion+0x28>
			conv->flag_hash = true;
 8003986:	7823      	ldrb	r3, [r4, #0]
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	7023      	strb	r3, [r4, #0]
			break;
 800398e:	e7ed      	b.n	800396c <extract_conversion+0x28>
			conv->flag_zero = true;
 8003990:	7823      	ldrb	r3, [r4, #0]
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	7023      	strb	r3, [r4, #0]
			break;
 8003998:	e7e8      	b.n	800396c <extract_conversion+0x28>
		switch (*sp) {
 800399a:	2500      	movs	r5, #0
	} while (loop);
 800399c:	b345      	cbz	r5, 80039f0 <extract_conversion+0xac>
		switch (*sp) {
 800399e:	7833      	ldrb	r3, [r6, #0]
 80039a0:	3b20      	subs	r3, #32
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d8f9      	bhi.n	800399a <extract_conversion+0x56>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <extract_conversion+0x68>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	0800397d 	.word	0x0800397d
 80039b0:	0800399b 	.word	0x0800399b
 80039b4:	0800399b 	.word	0x0800399b
 80039b8:	08003987 	.word	0x08003987
 80039bc:	0800399b 	.word	0x0800399b
 80039c0:	0800399b 	.word	0x0800399b
 80039c4:	0800399b 	.word	0x0800399b
 80039c8:	0800399b 	.word	0x0800399b
 80039cc:	0800399b 	.word	0x0800399b
 80039d0:	0800399b 	.word	0x0800399b
 80039d4:	0800399b 	.word	0x0800399b
 80039d8:	08003973 	.word	0x08003973
 80039dc:	0800399b 	.word	0x0800399b
 80039e0:	08003965 	.word	0x08003965
 80039e4:	0800399b 	.word	0x0800399b
 80039e8:	0800399b 	.word	0x0800399b
 80039ec:	08003991 	.word	0x08003991
	if (conv->flag_zero && conv->flag_dash) {
 80039f0:	7823      	ldrb	r3, [r4, #0]
 80039f2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80039f6:	2b44      	cmp	r3, #68	; 0x44
 80039f8:	d05f      	beq.n	8003aba <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 80039fa:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 80039fc:	7823      	ldrb	r3, [r4, #0]
 80039fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a02:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 8003a04:	7833      	ldrb	r3, [r6, #0]
 8003a06:	2b2a      	cmp	r3, #42	; 0x2a
 8003a08:	d05c      	beq.n	8003ac4 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 8003a0a:	a801      	add	r0, sp, #4
 8003a0c:	f7ff ff84 	bl	8003918 <extract_decimal>
	if (sp != wp) {
 8003a10:	9b01      	ldr	r3, [sp, #4]
 8003a12:	429e      	cmp	r6, r3
 8003a14:	d00f      	beq.n	8003a36 <extract_conversion+0xf2>
		conv->width_present = true;
 8003a16:	7823      	ldrb	r3, [r4, #0]
 8003a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 8003a1e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8003a26:	2800      	cmp	r0, #0
 8003a28:	db54      	blt.n	8003ad4 <extract_conversion+0x190>
 8003a2a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	7822      	ldrb	r2, [r4, #0]
 8003a30:	f363 0241 	bfi	r2, r3, #1, #1
 8003a34:	7022      	strb	r2, [r4, #0]
	return sp;
 8003a36:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8003a38:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a3e:	bf14      	ite	ne
 8003a40:	2300      	movne	r3, #0
 8003a42:	2301      	moveq	r3, #1
 8003a44:	7862      	ldrb	r2, [r4, #1]
 8003a46:	f363 0241 	bfi	r2, r3, #1, #1
 8003a4a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d043      	beq.n	8003ad8 <extract_conversion+0x194>
	++sp;
 8003a50:	9b01      	ldr	r3, [sp, #4]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5a:	d03f      	beq.n	8003adc <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8003a5c:	a801      	add	r0, sp, #4
 8003a5e:	f7ff ff5b 	bl	8003918 <extract_decimal>
	conv->prec_value = prec;
 8003a62:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8003a64:	7823      	ldrb	r3, [r4, #0]
 8003a66:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	db3e      	blt.n	8003aec <extract_conversion+0x1a8>
 8003a6e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	7822      	ldrb	r2, [r4, #0]
 8003a74:	f363 0241 	bfi	r2, r3, #1, #1
 8003a78:	7022      	strb	r2, [r4, #0]
	return sp;
 8003a7a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8003a7c:	7803      	ldrb	r3, [r0, #0]
 8003a7e:	3b4c      	subs	r3, #76	; 0x4c
 8003a80:	2b2e      	cmp	r3, #46	; 0x2e
 8003a82:	f200 809d 	bhi.w	8003bc0 <extract_conversion+0x27c>
 8003a86:	e8df f003 	tbb	[pc, r3]
 8003a8a:	9b90      	.short	0x9b90
 8003a8c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003a90:	9b9b9b9b 	.word	0x9b9b9b9b
 8003a94:	9b9b9b9b 	.word	0x9b9b9b9b
 8003a98:	9b9b9b9b 	.word	0x9b9b9b9b
 8003a9c:	9b9b9b9b 	.word	0x9b9b9b9b
 8003aa0:	9b9b9b9b 	.word	0x9b9b9b9b
 8003aa4:	9b339b9b 	.word	0x9b339b9b
 8003aa8:	9b459b57 	.word	0x9b459b57
 8003aac:	9b9b9b9b 	.word	0x9b9b9b9b
 8003ab0:	9b899b9b 	.word	0x9b899b9b
 8003ab4:	9b9b9b9b 	.word	0x9b9b9b9b
 8003ab8:	82          	.byte	0x82
 8003ab9:	00          	.byte	0x00
		conv->flag_zero = false;
 8003aba:	7823      	ldrb	r3, [r4, #0]
 8003abc:	f36f 1386 	bfc	r3, #6, #1
 8003ac0:	7023      	strb	r3, [r4, #0]
 8003ac2:	e79a      	b.n	80039fa <extract_conversion+0xb6>
		conv->width_star = true;
 8003ac4:	7863      	ldrb	r3, [r4, #1]
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003acc:	4633      	mov	r3, r6
 8003ace:	3301      	adds	r3, #1
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	e7b1      	b.n	8003a38 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	e7a9      	b.n	8003a2c <extract_conversion+0xe8>
		return sp;
 8003ad8:	9801      	ldr	r0, [sp, #4]
 8003ada:	e7cf      	b.n	8003a7c <extract_conversion+0x138>
		conv->prec_star = true;
 8003adc:	7863      	ldrb	r3, [r4, #1]
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	7063      	strb	r3, [r4, #1]
		return ++sp;
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	9001      	str	r0, [sp, #4]
 8003aea:	e7c7      	b.n	8003a7c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 8003aec:	2201      	movs	r2, #1
 8003aee:	e7bf      	b.n	8003a70 <extract_conversion+0x12c>
		if (*++sp == 'h') {
 8003af0:	1c42      	adds	r2, r0, #1
 8003af2:	7843      	ldrb	r3, [r0, #1]
 8003af4:	2b68      	cmp	r3, #104	; 0x68
 8003af6:	d006      	beq.n	8003b06 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 8003af8:	7863      	ldrb	r3, [r4, #1]
 8003afa:	2102      	movs	r1, #2
 8003afc:	f361 03c6 	bfi	r3, r1, #3, #4
 8003b00:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 8003b02:	4610      	mov	r0, r2
 8003b04:	e01e      	b.n	8003b44 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 8003b06:	7863      	ldrb	r3, [r4, #1]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f362 03c6 	bfi	r3, r2, #3, #4
 8003b0e:	7063      	strb	r3, [r4, #1]
			++sp;
 8003b10:	3002      	adds	r0, #2
 8003b12:	e017      	b.n	8003b44 <extract_conversion+0x200>
		if (*++sp == 'l') {
 8003b14:	1c42      	adds	r2, r0, #1
 8003b16:	7843      	ldrb	r3, [r0, #1]
 8003b18:	2b6c      	cmp	r3, #108	; 0x6c
 8003b1a:	d006      	beq.n	8003b2a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 8003b1c:	7863      	ldrb	r3, [r4, #1]
 8003b1e:	2103      	movs	r1, #3
 8003b20:	f361 03c6 	bfi	r3, r1, #3, #4
 8003b24:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8003b26:	4610      	mov	r0, r2
 8003b28:	e00c      	b.n	8003b44 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8003b2a:	7863      	ldrb	r3, [r4, #1]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	f362 03c6 	bfi	r3, r2, #3, #4
 8003b32:	7063      	strb	r3, [r4, #1]
			++sp;
 8003b34:	3002      	adds	r0, #2
 8003b36:	e005      	b.n	8003b44 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8003b38:	7863      	ldrb	r3, [r4, #1]
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	f362 03c6 	bfi	r3, r2, #3, #4
 8003b40:	7063      	strb	r3, [r4, #1]
		++sp;
 8003b42:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8003b44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b48:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8003b4a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003b4e:	2a37      	cmp	r2, #55	; 0x37
 8003b50:	d87d      	bhi.n	8003c4e <extract_conversion+0x30a>
 8003b52:	e8df f002 	tbb	[pc, r2]
 8003b56:	7c5e      	.short	0x7c5e
 8003b58:	5e5e7c7c 	.word	0x5e5e7c7c
 8003b5c:	7c7c7c5e 	.word	0x7c7c7c5e
 8003b60:	7c7c7c7c 	.word	0x7c7c7c7c
 8003b64:	7c7c7c7c 	.word	0x7c7c7c7c
 8003b68:	7c7c7c7c 	.word	0x7c7c7c7c
 8003b6c:	7c7c4f7c 	.word	0x7c7c4f7c
 8003b70:	7c7c7c7c 	.word	0x7c7c7c7c
 8003b74:	7c5e7c7c 	.word	0x7c5e7c7c
 8003b78:	5e5e3a4f 	.word	0x5e5e3a4f
 8003b7c:	7c3a7c5e 	.word	0x7c3a7c5e
 8003b80:	657c7c7c 	.word	0x657c7c7c
 8003b84:	7c7c714f 	.word	0x7c7c714f
 8003b88:	7c4f7c71 	.word	0x7c4f7c71
 8003b8c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 8003b8e:	7863      	ldrb	r3, [r4, #1]
 8003b90:	2206      	movs	r2, #6
 8003b92:	f362 03c6 	bfi	r3, r2, #3, #4
 8003b96:	7063      	strb	r3, [r4, #1]
		++sp;
 8003b98:	3001      	adds	r0, #1
		break;
 8003b9a:	e7d3      	b.n	8003b44 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8003b9c:	7863      	ldrb	r3, [r4, #1]
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	f362 03c6 	bfi	r3, r2, #3, #4
 8003ba4:	7063      	strb	r3, [r4, #1]
		++sp;
 8003ba6:	3001      	adds	r0, #1
		break;
 8003ba8:	e7cc      	b.n	8003b44 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8003baa:	7863      	ldrb	r3, [r4, #1]
 8003bac:	2208      	movs	r2, #8
 8003bae:	f362 03c6 	bfi	r3, r2, #3, #4
 8003bb2:	7063      	strb	r3, [r4, #1]
		++sp;
 8003bb4:	3001      	adds	r0, #1
		conv->unsupported = true;
 8003bb6:	7823      	ldrb	r3, [r4, #0]
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	7023      	strb	r3, [r4, #0]
		break;
 8003bbe:	e7c1      	b.n	8003b44 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 8003bc0:	7863      	ldrb	r3, [r4, #1]
 8003bc2:	f36f 03c6 	bfc	r3, #3, #4
 8003bc6:	7063      	strb	r3, [r4, #1]
		break;
 8003bc8:	e7bc      	b.n	8003b44 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 8003bca:	78a2      	ldrb	r2, [r4, #2]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	f361 0202 	bfi	r2, r1, #0, #3
 8003bd2:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003bd4:	7862      	ldrb	r2, [r4, #1]
 8003bd6:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8003bda:	2a40      	cmp	r2, #64	; 0x40
 8003bdc:	d010      	beq.n	8003c00 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 8003bde:	2b63      	cmp	r3, #99	; 0x63
 8003be0:	d013      	beq.n	8003c0a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 8003be2:	7823      	ldrb	r3, [r4, #0]
 8003be4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8003be8:	4315      	orrs	r5, r2
 8003bea:	f365 0341 	bfi	r3, r5, #1, #1
 8003bee:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 8003bf4:	78a2      	ldrb	r2, [r4, #2]
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f361 0202 	bfi	r2, r1, #0, #3
 8003bfc:	70a2      	strb	r2, [r4, #2]
 8003bfe:	e7e9      	b.n	8003bd4 <extract_conversion+0x290>
			conv->invalid = true;
 8003c00:	7821      	ldrb	r1, [r4, #0]
 8003c02:	f041 0101 	orr.w	r1, r1, #1
 8003c06:	7021      	strb	r1, [r4, #0]
 8003c08:	e7e9      	b.n	8003bde <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8003c0a:	1e15      	subs	r5, r2, #0
 8003c0c:	bf18      	it	ne
 8003c0e:	2501      	movne	r5, #1
 8003c10:	e7e7      	b.n	8003be2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 8003c12:	78a3      	ldrb	r3, [r4, #2]
 8003c14:	2204      	movs	r2, #4
 8003c16:	f362 0302 	bfi	r3, r2, #0, #3
 8003c1a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 8003c1c:	2501      	movs	r5, #1
			break;
 8003c1e:	e7e0      	b.n	8003be2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003c20:	78a3      	ldrb	r3, [r4, #2]
 8003c22:	2203      	movs	r2, #3
 8003c24:	f362 0302 	bfi	r3, r2, #0, #3
 8003c28:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8003c2a:	7863      	ldrb	r3, [r4, #1]
 8003c2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d1d6      	bne.n	8003be2 <extract_conversion+0x29e>
			unsupported = true;
 8003c34:	2501      	movs	r5, #1
 8003c36:	e7d4      	b.n	8003be2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8003c38:	78a3      	ldrb	r3, [r4, #2]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	f362 0302 	bfi	r3, r2, #0, #3
 8003c40:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8003c42:	7863      	ldrb	r3, [r4, #1]
 8003c44:	f013 0f78 	tst.w	r3, #120	; 0x78
 8003c48:	d0cb      	beq.n	8003be2 <extract_conversion+0x29e>
			unsupported = true;
 8003c4a:	2501      	movs	r5, #1
 8003c4c:	e7c9      	b.n	8003be2 <extract_conversion+0x29e>
		conv->invalid = true;
 8003c4e:	7823      	ldrb	r3, [r4, #0]
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	7023      	strb	r3, [r4, #0]
		break;
 8003c56:	e7c4      	b.n	8003be2 <extract_conversion+0x29e>

08003c58 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	4604      	mov	r4, r0
 8003c60:	460d      	mov	r5, r1
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	469a      	mov	sl, r3
 8003c66:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8003c68:	78d3      	ldrb	r3, [r2, #3]
 8003c6a:	4a32      	ldr	r2, [pc, #200]	; (8003d34 <encode_uint+0xdc>)
 8003c6c:	f813 b002 	ldrb.w	fp, [r3, r2]
 8003c70:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8003c74:	2b6f      	cmp	r3, #111	; 0x6f
 8003c76:	d00f      	beq.n	8003c98 <encode_uint+0x40>
 8003c78:	d906      	bls.n	8003c88 <encode_uint+0x30>
 8003c7a:	2b70      	cmp	r3, #112	; 0x70
 8003c7c:	d00f      	beq.n	8003c9e <encode_uint+0x46>
 8003c7e:	2b78      	cmp	r3, #120	; 0x78
 8003c80:	d110      	bne.n	8003ca4 <encode_uint+0x4c>
		return 16;
 8003c82:	f04f 0910 	mov.w	r9, #16
 8003c86:	e023      	b.n	8003cd0 <encode_uint+0x78>
	switch (specifier) {
 8003c88:	2b58      	cmp	r3, #88	; 0x58
 8003c8a:	d002      	beq.n	8003c92 <encode_uint+0x3a>
 8003c8c:	f04f 090a 	mov.w	r9, #10
 8003c90:	e01e      	b.n	8003cd0 <encode_uint+0x78>
		return 16;
 8003c92:	f04f 0910 	mov.w	r9, #16
 8003c96:	e01b      	b.n	8003cd0 <encode_uint+0x78>
		return 8;
 8003c98:	f04f 0908 	mov.w	r9, #8
 8003c9c:	e018      	b.n	8003cd0 <encode_uint+0x78>
		return 16;
 8003c9e:	f04f 0910 	mov.w	r9, #16
 8003ca2:	e015      	b.n	8003cd0 <encode_uint+0x78>
	switch (specifier) {
 8003ca4:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8003ca8:	e012      	b.n	8003cd0 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	3230      	adds	r2, #48	; 0x30
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8003cb4:	463a      	mov	r2, r7
 8003cb6:	4643      	mov	r3, r8
 8003cb8:	4620      	mov	r0, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	f7fc fe8e 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 8003cc0:	42bc      	cmp	r4, r7
 8003cc2:	f175 0300 	sbcs.w	r3, r5, #0
 8003cc6:	d319      	bcc.n	8003cfc <encode_uint+0xa4>
 8003cc8:	4556      	cmp	r6, sl
 8003cca:	d917      	bls.n	8003cfc <encode_uint+0xa4>
		value /= radix;
 8003ccc:	4604      	mov	r4, r0
 8003cce:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 8003cd0:	f04f 0800 	mov.w	r8, #0
 8003cd4:	464f      	mov	r7, r9
 8003cd6:	464a      	mov	r2, r9
 8003cd8:	4643      	mov	r3, r8
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fe7d 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003ce2:	2a09      	cmp	r2, #9
 8003ce4:	d9e1      	bls.n	8003caa <encode_uint+0x52>
 8003ce6:	f1bb 0f01 	cmp.w	fp, #1
 8003cea:	d003      	beq.n	8003cf4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003cec:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003cee:	3257      	adds	r2, #87	; 0x57
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	e7dd      	b.n	8003cb0 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 8003cf4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003cf6:	3237      	adds	r2, #55	; 0x37
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	e7d9      	b.n	8003cb0 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 8003cfc:	9b01      	ldr	r3, [sp, #4]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	f013 0f20 	tst.w	r3, #32
 8003d04:	d005      	beq.n	8003d12 <encode_uint+0xba>
		if (radix == 8) {
 8003d06:	f1b9 0f08 	cmp.w	r9, #8
 8003d0a:	d006      	beq.n	8003d1a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 8003d0c:	f1b9 0f10 	cmp.w	r9, #16
 8003d10:	d009      	beq.n	8003d26 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 8003d12:	4630      	mov	r0, r6
 8003d14:	b003      	add	sp, #12
 8003d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 8003d1a:	9a01      	ldr	r2, [sp, #4]
 8003d1c:	7893      	ldrb	r3, [r2, #2]
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	7093      	strb	r3, [r2, #2]
 8003d24:	e7f5      	b.n	8003d12 <encode_uint+0xba>
			conv->altform_0c = true;
 8003d26:	9a01      	ldr	r2, [sp, #4]
 8003d28:	7893      	ldrb	r3, [r2, #2]
 8003d2a:	f043 0310 	orr.w	r3, r3, #16
 8003d2e:	7093      	strb	r3, [r2, #2]
 8003d30:	e7ef      	b.n	8003d12 <encode_uint+0xba>
 8003d32:	bf00      	nop
 8003d34:	08012159 	.word	0x08012159

08003d38 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	b091      	sub	sp, #68	; 0x44
 8003d3e:	4606      	mov	r6, r0
 8003d40:	460d      	mov	r5, r1
 8003d42:	4691      	mov	r9, r2
 8003d44:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8003d46:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8003d48:	f899 0000 	ldrb.w	r0, [r9]
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	f000 82d5 	beq.w	80042fc <cbvprintf+0x5c4>
		if (*fp != '%') {
 8003d52:	2825      	cmp	r0, #37	; 0x25
 8003d54:	d008      	beq.n	8003d68 <cbvprintf+0x30>
			OUTC(*fp++);
 8003d56:	f109 0901 	add.w	r9, r9, #1
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	47b0      	blx	r6
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	f2c0 82cd 	blt.w	80042fe <cbvprintf+0x5c6>
 8003d64:	3401      	adds	r4, #1
			continue;
 8003d66:	e7ef      	b.n	8003d48 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8003d68:	2300      	movs	r3, #0
 8003d6a:	9304      	str	r3, [sp, #16]
 8003d6c:	9305      	str	r3, [sp, #20]
 8003d6e:	9306      	str	r3, [sp, #24]
 8003d70:	9307      	str	r3, [sp, #28]
 8003d72:	9308      	str	r3, [sp, #32]
 8003d74:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8003d76:	4649      	mov	r1, r9
 8003d78:	a806      	add	r0, sp, #24
 8003d7a:	f7ff fde3 	bl	8003944 <extract_conversion>
 8003d7e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 8003d80:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003d84:	f013 0f01 	tst.w	r3, #1
 8003d88:	f000 8097 	beq.w	8003eba <cbvprintf+0x182>
			width = va_arg(ap, int);
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	1d1a      	adds	r2, r3, #4
 8003d90:	9203      	str	r2, [sp, #12]
 8003d92:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8003d94:	2f00      	cmp	r7, #0
 8003d96:	f2c0 8088 	blt.w	8003eaa <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8003d9a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003d9e:	f013 0f04 	tst.w	r3, #4
 8003da2:	f000 809c 	beq.w	8003ede <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	1d1a      	adds	r2, r3, #4
 8003daa:	9203      	str	r2, [sp, #12]
 8003dac:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 8003db0:	f1ba 0f00 	cmp.w	sl, #0
 8003db4:	f2c0 808a 	blt.w	8003ecc <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8003dbc:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 8003dbe:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 8003dc6:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003dca:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	f000 808e 	beq.w	8003ef0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f000 80d3 	beq.w	8003f80 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	f000 8124 	beq.w	8004028 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	f000 813b 	beq.w	800405c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 8003de6:	f89d 8018 	ldrb.w	r8, [sp, #24]
 8003dea:	f018 0b03 	ands.w	fp, r8, #3
 8003dee:	f040 813b 	bne.w	8004068 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 8003df2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003df6:	3b25      	subs	r3, #37	; 0x25
 8003df8:	2b53      	cmp	r3, #83	; 0x53
 8003dfa:	f200 81e6 	bhi.w	80041ca <cbvprintf+0x492>
 8003dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003e02:	0140      	.short	0x0140
 8003e04:	01e401e4 	.word	0x01e401e4
 8003e08:	01e401e4 	.word	0x01e401e4
 8003e0c:	01e401e4 	.word	0x01e401e4
 8003e10:	01e401e4 	.word	0x01e401e4
 8003e14:	01e401e4 	.word	0x01e401e4
 8003e18:	01e401e4 	.word	0x01e401e4
 8003e1c:	01e401e4 	.word	0x01e401e4
 8003e20:	01e401e4 	.word	0x01e401e4
 8003e24:	01e401e4 	.word	0x01e401e4
 8003e28:	01e401e4 	.word	0x01e401e4
 8003e2c:	01e401e4 	.word	0x01e401e4
 8003e30:	01e401e4 	.word	0x01e401e4
 8003e34:	01e401e4 	.word	0x01e401e4
 8003e38:	01e401e4 	.word	0x01e401e4
 8003e3c:	01e401e4 	.word	0x01e401e4
 8003e40:	01e401e4 	.word	0x01e401e4
 8003e44:	01e401e4 	.word	0x01e401e4
 8003e48:	01e401e4 	.word	0x01e401e4
 8003e4c:	01e401e4 	.word	0x01e401e4
 8003e50:	01e401e4 	.word	0x01e401e4
 8003e54:	01e401e4 	.word	0x01e401e4
 8003e58:	01e401e4 	.word	0x01e401e4
 8003e5c:	01e401e4 	.word	0x01e401e4
 8003e60:	01e401e4 	.word	0x01e401e4
 8003e64:	01e401e4 	.word	0x01e401e4
 8003e68:	01e40181 	.word	0x01e40181
 8003e6c:	01e401e4 	.word	0x01e401e4
 8003e70:	01e401e4 	.word	0x01e401e4
 8003e74:	01e401e4 	.word	0x01e401e4
 8003e78:	01e401e4 	.word	0x01e401e4
 8003e7c:	015e01e4 	.word	0x015e01e4
 8003e80:	01e40167 	.word	0x01e40167
 8003e84:	01e401e4 	.word	0x01e401e4
 8003e88:	016701e4 	.word	0x016701e4
 8003e8c:	01e401e4 	.word	0x01e401e4
 8003e90:	01e401e4 	.word	0x01e401e4
 8003e94:	018101be 	.word	0x018101be
 8003e98:	01e401a2 	.word	0x01e401a2
 8003e9c:	014d01e4 	.word	0x014d01e4
 8003ea0:	018101e4 	.word	0x018101e4
 8003ea4:	01e401e4 	.word	0x01e401e4
 8003ea8:	0181      	.short	0x0181
				conv->flag_dash = true;
 8003eaa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8003eb6:	427f      	negs	r7, r7
 8003eb8:	e76f      	b.n	8003d9a <cbvprintf+0x62>
		} else if (conv->width_present) {
 8003eba:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	db02      	blt.n	8003ec8 <cbvprintf+0x190>
		int width = -1;
 8003ec2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ec6:	e768      	b.n	8003d9a <cbvprintf+0x62>
			width = conv->width_value;
 8003ec8:	9f07      	ldr	r7, [sp, #28]
 8003eca:	e766      	b.n	8003d9a <cbvprintf+0x62>
				conv->prec_present = false;
 8003ecc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003ed0:	f36f 0341 	bfc	r3, #1, #1
 8003ed4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8003ed8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003edc:	e76c      	b.n	8003db8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8003ede:	f013 0f02 	tst.w	r3, #2
 8003ee2:	d002      	beq.n	8003eea <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8003ee4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003ee8:	e766      	b.n	8003db8 <cbvprintf+0x80>
		int precision = -1;
 8003eea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003eee:	e763      	b.n	8003db8 <cbvprintf+0x80>
			switch (length_mod) {
 8003ef0:	1ecb      	subs	r3, r1, #3
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d804      	bhi.n	8003f00 <cbvprintf+0x1c8>
 8003ef6:	e8df f003 	tbb	[pc, r3]
 8003efa:	1d0b      	.short	0x1d0b
 8003efc:	3529      	.short	0x3529
 8003efe:	35          	.byte	0x35
 8003eff:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8003f00:	9b03      	ldr	r3, [sp, #12]
 8003f02:	1d1a      	adds	r2, r3, #4
 8003f04:	9203      	str	r2, [sp, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	17da      	asrs	r2, r3, #31
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9205      	str	r2, [sp, #20]
				break;
 8003f0e:	e006      	b.n	8003f1e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	9203      	str	r2, [sp, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	17da      	asrs	r2, r3, #31
 8003f1a:	9304      	str	r3, [sp, #16]
 8003f1c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8003f1e:	2901      	cmp	r1, #1
 8003f20:	d028      	beq.n	8003f74 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8003f22:	2902      	cmp	r1, #2
 8003f24:	f47f af5f 	bne.w	8003de6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8003f28:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8003f2c:	17da      	asrs	r2, r3, #31
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	9205      	str	r2, [sp, #20]
 8003f32:	e758      	b.n	8003de6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8003f34:	9b03      	ldr	r3, [sp, #12]
 8003f36:	3307      	adds	r3, #7
 8003f38:	f023 0307 	bic.w	r3, r3, #7
 8003f3c:	f103 0208 	add.w	r2, r3, #8
 8003f40:	9203      	str	r2, [sp, #12]
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8003f46:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8003f4a:	e7e8      	b.n	8003f1e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	3307      	adds	r3, #7
 8003f50:	f023 0307 	bic.w	r3, r3, #7
 8003f54:	f103 0208 	add.w	r2, r3, #8
 8003f58:	9203      	str	r2, [sp, #12]
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8003f5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8003f62:	e7dc      	b.n	8003f1e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	9203      	str	r2, [sp, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	17da      	asrs	r2, r3, #31
				value->sint =
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9205      	str	r2, [sp, #20]
				break;
 8003f72:	e7d4      	b.n	8003f1e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8003f74:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	e732      	b.n	8003de6 <cbvprintf+0xae>
			switch (length_mod) {
 8003f80:	1ecb      	subs	r3, r1, #3
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d804      	bhi.n	8003f90 <cbvprintf+0x258>
 8003f86:	e8df f003 	tbb	[pc, r3]
 8003f8a:	1f0b      	.short	0x1f0b
 8003f8c:	4135      	.short	0x4135
 8003f8e:	41          	.byte	0x41
 8003f8f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	9203      	str	r2, [sp, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	9304      	str	r3, [sp, #16]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9305      	str	r3, [sp, #20]
				break;
 8003f9e:	e01e      	b.n	8003fde <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8003fa0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8003fa4:	2b63      	cmp	r3, #99	; 0x63
 8003fa6:	d007      	beq.n	8003fb8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	1d1a      	adds	r2, r3, #4
 8003fac:	9203      	str	r2, [sp, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	9304      	str	r3, [sp, #16]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9305      	str	r3, [sp, #20]
 8003fb6:	e012      	b.n	8003fde <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8003fb8:	9b03      	ldr	r3, [sp, #12]
 8003fba:	1d1a      	adds	r2, r3, #4
 8003fbc:	9203      	str	r2, [sp, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9305      	str	r3, [sp, #20]
 8003fc6:	e00a      	b.n	8003fde <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	3307      	adds	r3, #7
 8003fcc:	f023 0307 	bic.w	r3, r3, #7
 8003fd0:	f103 0208 	add.w	r2, r3, #8
 8003fd4:	9203      	str	r2, [sp, #12]
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8003fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8003fde:	2901      	cmp	r1, #1
 8003fe0:	d01c      	beq.n	800401c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8003fe2:	2902      	cmp	r1, #2
 8003fe4:	f47f aeff 	bne.w	8003de6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8003fe8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8003fec:	9304      	str	r3, [sp, #16]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9305      	str	r3, [sp, #20]
 8003ff2:	e6f8      	b.n	8003de6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8003ff4:	9b03      	ldr	r3, [sp, #12]
 8003ff6:	3307      	adds	r3, #7
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	f103 0208 	add.w	r2, r3, #8
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8004006:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 800400a:	e7e8      	b.n	8003fde <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	9203      	str	r2, [sp, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	2300      	movs	r3, #0
 8004018:	9305      	str	r3, [sp, #20]
				break;
 800401a:	e7e0      	b.n	8003fde <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 800401c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	2300      	movs	r3, #0
 8004024:	9305      	str	r3, [sp, #20]
 8004026:	e6de      	b.n	8003de6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8004028:	2908      	cmp	r1, #8
 800402a:	d00b      	beq.n	8004044 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 800402c:	9b03      	ldr	r3, [sp, #12]
 800402e:	3307      	adds	r3, #7
 8004030:	f023 0307 	bic.w	r3, r3, #7
 8004034:	f103 0208 	add.w	r2, r3, #8
 8004038:	9203      	str	r2, [sp, #12]
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004042:	e6d0      	b.n	8003de6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	3307      	adds	r3, #7
 8004048:	f023 0307 	bic.w	r3, r3, #7
 800404c:	f103 0208 	add.w	r2, r3, #8
 8004050:	9203      	str	r2, [sp, #12]
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800405a:	e6c4      	b.n	8003de6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 800405c:	9b03      	ldr	r3, [sp, #12]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	9203      	str	r2, [sp, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	9304      	str	r3, [sp, #16]
 8004066:	e6be      	b.n	8003de6 <cbvprintf+0xae>
			OUTS(sp, fp);
 8004068:	9f02      	ldr	r7, [sp, #8]
 800406a:	463b      	mov	r3, r7
 800406c:	464a      	mov	r2, r9
 800406e:	4629      	mov	r1, r5
 8004070:	4630      	mov	r0, r6
 8004072:	f009 fea7 	bl	800ddc4 <outs>
 8004076:	2800      	cmp	r0, #0
 8004078:	f2c0 8141 	blt.w	80042fe <cbvprintf+0x5c6>
 800407c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 800407e:	46b9      	mov	r9, r7
			continue;
 8004080:	e662      	b.n	8003d48 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8004082:	4629      	mov	r1, r5
 8004084:	2025      	movs	r0, #37	; 0x25
 8004086:	47b0      	blx	r6
 8004088:	2800      	cmp	r0, #0
 800408a:	f2c0 8138 	blt.w	80042fe <cbvprintf+0x5c6>
 800408e:	3401      	adds	r4, #1
		char sign = 0;
 8004090:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8004092:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8004096:	f04f 0900 	mov.w	r9, #0
			break;
 800409a:	e09b      	b.n	80041d4 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 800409c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 80040a0:	f1ba 0f00 	cmp.w	sl, #0
 80040a4:	db07      	blt.n	80040b6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 80040a6:	4651      	mov	r1, sl
 80040a8:	4648      	mov	r0, r9
 80040aa:	f00c f88b 	bl	80101c4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 80040ae:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 80040b2:	46d8      	mov	r8, fp
			precision = -1;

			break;
 80040b4:	e08e      	b.n	80041d4 <cbvprintf+0x49c>
				len = strlen(bps);
 80040b6:	4648      	mov	r0, r9
 80040b8:	f7fc fecd 	bl	8000e56 <strlen>
 80040bc:	e7f7      	b.n	80040ae <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 80040c4:	46d8      	mov	r8, fp
			bpe = buf + 1;
 80040c6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 80040ca:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 80040ce:	e081      	b.n	80041d4 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 80040d0:	f018 0f08 	tst.w	r8, #8
 80040d4:	d105      	bne.n	80040e2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 80040d6:	f018 0810 	ands.w	r8, r8, #16
 80040da:	d004      	beq.n	80040e6 <cbvprintf+0x3ae>
				sign = ' ';
 80040dc:	f04f 0820 	mov.w	r8, #32
 80040e0:	e001      	b.n	80040e6 <cbvprintf+0x3ae>
				sign = '+';
 80040e2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 80040e6:	9a04      	ldr	r2, [sp, #16]
 80040e8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	db02      	blt.n	80040f4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 80040ee:	9204      	str	r2, [sp, #16]
 80040f0:	9305      	str	r3, [sp, #20]
 80040f2:	e008      	b.n	8004106 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 80040f4:	4252      	negs	r2, r2
 80040f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80040fa:	9204      	str	r2, [sp, #16]
 80040fc:	9305      	str	r3, [sp, #20]
				sign = '-';
 80040fe:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8004102:	e000      	b.n	8004106 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8004104:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8004106:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	ab0a      	add	r3, sp, #40	; 0x28
 800410e:	aa06      	add	r2, sp, #24
 8004110:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004114:	f7ff fda0 	bl	8003c58 <encode_uint>
 8004118:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 800411a:	f1ba 0f00 	cmp.w	sl, #0
 800411e:	f2c0 8088 	blt.w	8004232 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8004122:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8004126:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 800412a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800412e:	f36f 1286 	bfc	r2, #6, #1
 8004132:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8004136:	459a      	cmp	sl, r3
 8004138:	d97e      	bls.n	8004238 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 800413a:	ebaa 0303 	sub.w	r3, sl, r3
 800413e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8004140:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8004144:	e046      	b.n	80041d4 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8004146:	9804      	ldr	r0, [sp, #16]
 8004148:	b928      	cbnz	r0, 8004156 <cbvprintf+0x41e>
		char sign = 0;
 800414a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 800414c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8004304 <cbvprintf+0x5cc>
			bps = "(nil)";
 8004150:	f1aa 0905 	sub.w	r9, sl, #5
 8004154:	e03e      	b.n	80041d4 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8004156:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	ab0a      	add	r3, sp, #40	; 0x28
 800415e:	aa06      	add	r2, sp, #24
 8004160:	2100      	movs	r1, #0
 8004162:	f7ff fd79 	bl	8003c58 <encode_uint>
 8004166:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8004168:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800416c:	f043 0310 	orr.w	r3, r3, #16
 8004170:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8004174:	2378      	movs	r3, #120	; 0x78
 8004176:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 800417a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 800417c:	e7cd      	b.n	800411a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 800417e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8004180:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004184:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8004188:	2b07      	cmp	r3, #7
 800418a:	d806      	bhi.n	800419a <cbvprintf+0x462>
 800418c:	e8df f003 	tbb	[pc, r3]
 8004190:	0f0d0b04 	.word	0x0f0d0b04
 8004194:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8004198:	6014      	str	r4, [r2, #0]
		char sign = 0;
 800419a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 800419c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 80041a0:	f04f 0900 	mov.w	r9, #0
}
 80041a4:	e016      	b.n	80041d4 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 80041a6:	7014      	strb	r4, [r2, #0]
		break;
 80041a8:	e7f7      	b.n	800419a <cbvprintf+0x462>
		*(short *)dp = (short)count;
 80041aa:	8014      	strh	r4, [r2, #0]
		break;
 80041ac:	e7f5      	b.n	800419a <cbvprintf+0x462>
		*(long *)dp = (long)count;
 80041ae:	6014      	str	r4, [r2, #0]
		break;
 80041b0:	e7f3      	b.n	800419a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 80041b2:	17e3      	asrs	r3, r4, #31
 80041b4:	6014      	str	r4, [r2, #0]
 80041b6:	6053      	str	r3, [r2, #4]
		break;
 80041b8:	e7ef      	b.n	800419a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 80041ba:	17e3      	asrs	r3, r4, #31
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	6053      	str	r3, [r2, #4]
		break;
 80041c0:	e7eb      	b.n	800419a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 80041c2:	6014      	str	r4, [r2, #0]
		break;
 80041c4:	e7e9      	b.n	800419a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80041c6:	6014      	str	r4, [r2, #0]
		break;
 80041c8:	e7e7      	b.n	800419a <cbvprintf+0x462>
		switch (conv->specifier) {
 80041ca:	46d8      	mov	r8, fp
 80041cc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 80041d0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 80041d4:	f1b9 0f00 	cmp.w	r9, #0
 80041d8:	f000 808d 	beq.w	80042f6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 80041dc:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 80041e0:	f1b8 0f00 	cmp.w	r8, #0
 80041e4:	d000      	beq.n	80041e8 <cbvprintf+0x4b0>
			nj_len += 1U;
 80041e6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 80041e8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 80041ec:	f011 0f10 	tst.w	r1, #16
 80041f0:	d025      	beq.n	800423e <cbvprintf+0x506>
			nj_len += 2U;
 80041f2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 80041f4:	9b07      	ldr	r3, [sp, #28]
 80041f6:	4413      	add	r3, r2
		if (conv->pad_fp) {
 80041f8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80041fc:	d001      	beq.n	8004202 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 80041fe:	9a08      	ldr	r2, [sp, #32]
 8004200:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8004202:	2f00      	cmp	r7, #0
 8004204:	dd31      	ble.n	800426a <cbvprintf+0x532>
			width -= (int)nj_len;
 8004206:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8004208:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800420c:	f013 0f04 	tst.w	r3, #4
 8004210:	d12b      	bne.n	800426a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8004212:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004216:	d017      	beq.n	8004248 <cbvprintf+0x510>
					if (sign != 0) {
 8004218:	f1b8 0f00 	cmp.w	r8, #0
 800421c:	d017      	beq.n	800424e <cbvprintf+0x516>
						OUTC(sign);
 800421e:	4629      	mov	r1, r5
 8004220:	4640      	mov	r0, r8
 8004222:	47b0      	blx	r6
 8004224:	2800      	cmp	r0, #0
 8004226:	db6a      	blt.n	80042fe <cbvprintf+0x5c6>
 8004228:	3401      	adds	r4, #1
						sign = 0;
 800422a:	46d8      	mov	r8, fp
					}
					pad = '0';
 800422c:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8004230:	e00f      	b.n	8004252 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8004232:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8004236:	e7cd      	b.n	80041d4 <cbvprintf+0x49c>
 8004238:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 800423c:	e7ca      	b.n	80041d4 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 800423e:	f011 0f08 	tst.w	r1, #8
 8004242:	d0d7      	beq.n	80041f4 <cbvprintf+0x4bc>
			nj_len += 1U;
 8004244:	3201      	adds	r2, #1
 8004246:	e7d5      	b.n	80041f4 <cbvprintf+0x4bc>
				char pad = ' ';
 8004248:	f04f 0b20 	mov.w	fp, #32
 800424c:	e001      	b.n	8004252 <cbvprintf+0x51a>
					pad = '0';
 800424e:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8004252:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8004254:	1e5f      	subs	r7, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	dd07      	ble.n	800426a <cbvprintf+0x532>
					OUTC(pad);
 800425a:	4629      	mov	r1, r5
 800425c:	4658      	mov	r0, fp
 800425e:	47b0      	blx	r6
 8004260:	2800      	cmp	r0, #0
 8004262:	db4c      	blt.n	80042fe <cbvprintf+0x5c6>
 8004264:	3401      	adds	r4, #1
				while (width-- > 0) {
 8004266:	463b      	mov	r3, r7
 8004268:	e7f4      	b.n	8004254 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d005      	beq.n	800427c <cbvprintf+0x544>
			OUTC(sign);
 8004270:	4629      	mov	r1, r5
 8004272:	4640      	mov	r0, r8
 8004274:	47b0      	blx	r6
 8004276:	2800      	cmp	r0, #0
 8004278:	db41      	blt.n	80042fe <cbvprintf+0x5c6>
 800427a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 800427c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8004280:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8004284:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004288:	4313      	orrs	r3, r2
 800428a:	d005      	beq.n	8004298 <cbvprintf+0x560>
				OUTC('0');
 800428c:	4629      	mov	r1, r5
 800428e:	2030      	movs	r0, #48	; 0x30
 8004290:	47b0      	blx	r6
 8004292:	2800      	cmp	r0, #0
 8004294:	db33      	blt.n	80042fe <cbvprintf+0x5c6>
 8004296:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8004298:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800429c:	f013 0f10 	tst.w	r3, #16
 80042a0:	d006      	beq.n	80042b0 <cbvprintf+0x578>
				OUTC(conv->specifier);
 80042a2:	4629      	mov	r1, r5
 80042a4:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80042a8:	47b0      	blx	r6
 80042aa:	2800      	cmp	r0, #0
 80042ac:	db27      	blt.n	80042fe <cbvprintf+0x5c6>
 80042ae:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 80042b0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 80042b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dd07      	ble.n	80042ca <cbvprintf+0x592>
				OUTC('0');
 80042ba:	4629      	mov	r1, r5
 80042bc:	2030      	movs	r0, #48	; 0x30
 80042be:	47b0      	blx	r6
 80042c0:	2800      	cmp	r0, #0
 80042c2:	db1c      	blt.n	80042fe <cbvprintf+0x5c6>
 80042c4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 80042c6:	4643      	mov	r3, r8
 80042c8:	e7f3      	b.n	80042b2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 80042ca:	4653      	mov	r3, sl
 80042cc:	464a      	mov	r2, r9
 80042ce:	4629      	mov	r1, r5
 80042d0:	4630      	mov	r0, r6
 80042d2:	f009 fd77 	bl	800ddc4 <outs>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	db11      	blt.n	80042fe <cbvprintf+0x5c6>
 80042da:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 80042dc:	2f00      	cmp	r7, #0
 80042de:	dd07      	ble.n	80042f0 <cbvprintf+0x5b8>
			OUTC(' ');
 80042e0:	4629      	mov	r1, r5
 80042e2:	2020      	movs	r0, #32
 80042e4:	47b0      	blx	r6
 80042e6:	2800      	cmp	r0, #0
 80042e8:	db09      	blt.n	80042fe <cbvprintf+0x5c6>
 80042ea:	3401      	adds	r4, #1
			--width;
 80042ec:	3f01      	subs	r7, #1
 80042ee:	e7f5      	b.n	80042dc <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 80042f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80042f4:	e528      	b.n	8003d48 <cbvprintf+0x10>
 80042f6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80042fa:	e525      	b.n	8003d48 <cbvprintf+0x10>
		}
	}

	return count;
 80042fc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 80042fe:	b011      	add	sp, #68	; 0x44
 8004300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004304:	08010fe1 	.word	0x08010fe1

08004308 <stm32l4_init>:
	__asm__ volatile(
 8004308:	f04f 0210 	mov.w	r2, #16
 800430c:	f3ef 8311 	mrs	r3, BASEPRI
 8004310:	f382 8812 	msr	BASEPRI_MAX, r2
 8004314:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <stm32l4_init+0x24>)
 8004322:	4a03      	ldr	r2, [pc, #12]	; (8004330 <stm32l4_init+0x28>)
 8004324:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004326:	2000      	movs	r0, #0
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000100 	.word	0x20000100
 8004330:	003d0900 	.word	0x003d0900

08004334 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8004334:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <thread_set+0x1c>)
 8004338:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 800433a:	b118      	cbz	r0, 8004344 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <thread_set+0x20>)
 800433e:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8004340:	2b09      	cmp	r3, #9
 8004342:	dc00      	bgt.n	8004346 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8004344:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8004346:	4804      	ldr	r0, [pc, #16]	; (8004358 <thread_set+0x24>)
 8004348:	f006 fdd6 	bl	800aef8 <z_impl_k_sem_give>
}
 800434c:	e7fa      	b.n	8004344 <thread_set+0x10>
 800434e:	bf00      	nop
 8004350:	20000e9c 	.word	0x20000e9c
 8004354:	20000e50 	.word	0x20000e50
 8004358:	20000528 	.word	0x20000528

0800435c <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 800435c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 800435e:	4802      	ldr	r0, [pc, #8]	; (8004368 <log_process_thread_timer_expiry_fn+0xc>)
 8004360:	f006 fdca 	bl	800aef8 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8004364:	bd08      	pop	{r3, pc}
 8004366:	bf00      	nop
 8004368:	20000528 	.word	0x20000528

0800436c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8004370:	2200      	movs	r2, #0
 8004372:	490f      	ldr	r1, [pc, #60]	; (80043b0 <enable_logger+0x44>)
 8004374:	480f      	ldr	r0, [pc, #60]	; (80043b4 <enable_logger+0x48>)
 8004376:	f00b fd38 	bl	800fdea <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800437a:	4d0f      	ldr	r5, [pc, #60]	; (80043b8 <enable_logger+0x4c>)
 800437c:	2200      	movs	r2, #0
 800437e:	2300      	movs	r3, #0
 8004380:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004384:	2400      	movs	r4, #0
 8004386:	9404      	str	r4, [sp, #16]
 8004388:	230e      	movs	r3, #14
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	9402      	str	r4, [sp, #8]
 800438e:	9401      	str	r4, [sp, #4]
 8004390:	9400      	str	r4, [sp, #0]
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <enable_logger+0x50>)
 8004394:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004398:	4909      	ldr	r1, [pc, #36]	; (80043c0 <enable_logger+0x54>)
 800439a:	4628      	mov	r0, r5
 800439c:	f00b fa5c 	bl	800f858 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 80043a0:	4908      	ldr	r1, [pc, #32]	; (80043c4 <enable_logger+0x58>)
 80043a2:	4628      	mov	r0, r5
 80043a4:	f00b fa44 	bl	800f830 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 80043a8:	4620      	mov	r0, r4
 80043aa:	b009      	add	sp, #36	; 0x24
 80043ac:	bd30      	pop	{r4, r5, pc}
 80043ae:	bf00      	nop
 80043b0:	0800435d 	.word	0x0800435d
 80043b4:	20000af8 	.word	0x20000af8
 80043b8:	20000b30 	.word	0x20000b30
 80043bc:	08004761 	.word	0x08004761
 80043c0:	20002060 	.word	0x20002060
 80043c4:	08010fe8 	.word	0x08010fe8

080043c8 <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <log_init+0x64>)
 80043ca:	f3bf 8f5b 	dmb	ish
 80043ce:	e853 2f00 	ldrex	r2, [r3]
 80043d2:	1c51      	adds	r1, r2, #1
 80043d4:	e843 1000 	strex	r0, r1, [r3]
 80043d8:	2800      	cmp	r0, #0
 80043da:	d1f8      	bne.n	80043ce <log_init+0x6>
 80043dc:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 80043e0:	bb1a      	cbnz	r2, 800442a <log_init+0x62>
{
 80043e2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 80043e4:	2400      	movs	r4, #0
 80043e6:	e009      	b.n	80043fc <log_init+0x34>
					   backend->cb->ctx,
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <log_init+0x68>)
 80043ea:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80043ee:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 80043f0:	2204      	movs	r2, #4
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	4628      	mov	r0, r5
 80043f6:	f000 f9d9 	bl	80047ac <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 80043fa:	3401      	adds	r4, #1
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <log_init+0x6c>)
 80043fe:	4a0c      	ldr	r2, [pc, #48]	; (8004430 <log_init+0x68>)
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004406:	da0f      	bge.n	8004428 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 8004408:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 800440a:	4d09      	ldr	r5, [pc, #36]	; (8004430 <log_init+0x68>)
 800440c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8004410:	7b2b      	ldrb	r3, [r5, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f1      	beq.n	80043fa <log_init+0x32>
			if (backend->api->init != NULL) {
 8004416:	0123      	lsls	r3, r4, #4
 8004418:	4a05      	ldr	r2, [pc, #20]	; (8004430 <log_init+0x68>)
 800441a:	58d3      	ldr	r3, [r2, r3]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0e2      	beq.n	80043e8 <log_init+0x20>
				backend->api->init(backend);
 8004422:	4628      	mov	r0, r5
 8004424:	4798      	blx	r3
 8004426:	e7df      	b.n	80043e8 <log_init+0x20>
}
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	4770      	bx	lr
 800442c:	20000e58 	.word	0x20000e58
 8004430:	08010b18 	.word	0x08010b18
 8004434:	08010b28 	.word	0x08010b28

08004438 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 8004438:	b138      	cbz	r0, 800444a <log_set_timestamp_func+0x12>
{
 800443a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <log_set_timestamp_func+0x18>)
 800443e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8004440:	4608      	mov	r0, r1
 8004442:	f000 fba3 	bl	8004b8c <log_output_timestamp_freq_set>
	return 0;
 8004446:	2000      	movs	r0, #0
}
 8004448:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800444a:	f06f 0015 	mvn.w	r0, #21
}
 800444e:	4770      	bx	lr
 8004450:	20000048 	.word	0x20000048

08004454 <z_log_notify_backend_enabled>:
{
 8004454:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <z_log_notify_backend_enabled+0x18>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b11b      	cbz	r3, 8004464 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <z_log_notify_backend_enabled+0x18>)
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]
}
 8004462:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8004464:	4802      	ldr	r0, [pc, #8]	; (8004470 <z_log_notify_backend_enabled+0x1c>)
 8004466:	f006 fd47 	bl	800aef8 <z_impl_k_sem_give>
}
 800446a:	e7f7      	b.n	800445c <z_log_notify_backend_enabled+0x8>
 800446c:	200013f0 	.word	0x200013f0
 8004470:	20000528 	.word	0x20000528

08004474 <z_log_dropped>:
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <z_log_dropped+0x38>)
 8004476:	f3bf 8f5b 	dmb	ish
 800447a:	e853 2f00 	ldrex	r2, [r3]
 800447e:	3201      	adds	r2, #1
 8004480:	e843 2100 	strex	r1, r2, [r3]
 8004484:	2900      	cmp	r1, #0
 8004486:	d1f8      	bne.n	800447a <z_log_dropped+0x6>
 8004488:	f3bf 8f5b 	dmb	ish
	if (buffered) {
 800448c:	b900      	cbnz	r0, 8004490 <z_log_dropped+0x1c>
}
 800448e:	4770      	bx	lr
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <z_log_dropped+0x3c>)
 8004492:	f3bf 8f5b 	dmb	ish
 8004496:	e853 2f00 	ldrex	r2, [r3]
 800449a:	3a01      	subs	r2, #1
 800449c:	e843 2100 	strex	r1, r2, [r3]
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d1f8      	bne.n	8004496 <z_log_dropped+0x22>
 80044a4:	f3bf 8f5b 	dmb	ish
 80044a8:	e7f1      	b.n	800448e <z_log_dropped+0x1a>
 80044aa:	bf00      	nop
 80044ac:	20000e54 	.word	0x20000e54
 80044b0:	20000e50 	.word	0x20000e50

080044b4 <z_log_dropped_read_and_clear>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <z_log_dropped_read_and_clear+0x1c>)
}
 80044b6:	2000      	movs	r0, #0
 80044b8:	4602      	mov	r2, r0
 80044ba:	f3bf 8f5b 	dmb	ish
 80044be:	e853 0f00 	ldrex	r0, [r3]
 80044c2:	e843 2100 	strex	r1, r2, [r3]
 80044c6:	2900      	cmp	r1, #0
 80044c8:	d1f9      	bne.n	80044be <z_log_dropped_read_and_clear+0xa>
 80044ca:	f3bf 8f5b 	dmb	ish
 80044ce:	4770      	bx	lr
 80044d0:	20000e54 	.word	0x20000e54

080044d4 <dropped_notify>:
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 80044d6:	f7ff ffed 	bl	80044b4 <z_log_dropped_read_and_clear>
 80044da:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 80044dc:	2400      	movs	r4, #0
 80044de:	e000      	b.n	80044e2 <dropped_notify+0xe>
 80044e0:	3401      	adds	r4, #1
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <dropped_notify+0x3c>)
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <dropped_notify+0x40>)
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80044ec:	da0f      	bge.n	800450e <dropped_notify+0x3a>
 80044ee:	4809      	ldr	r0, [pc, #36]	; (8004514 <dropped_notify+0x40>)
 80044f0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80044f4:	6843      	ldr	r3, [r0, #4]
 80044f6:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f1      	beq.n	80044e0 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 80044fc:	0123      	lsls	r3, r4, #4
 80044fe:	4a05      	ldr	r2, [pc, #20]	; (8004514 <dropped_notify+0x40>)
 8004500:	58d3      	ldr	r3, [r2, r3]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0eb      	beq.n	80044e0 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 8004508:	4629      	mov	r1, r5
 800450a:	4798      	blx	r3
 800450c:	e7e8      	b.n	80044e0 <dropped_notify+0xc>
}
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	08010b28 	.word	0x08010b28
 8004514:	08010b18 	.word	0x08010b18

08004518 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <z_log_dropped_pending+0x10>)
 800451a:	6818      	ldr	r0, [r3, #0]
}
 800451c:	2800      	cmp	r0, #0
 800451e:	bfd4      	ite	le
 8004520:	2000      	movle	r0, #0
 8004522:	2001      	movgt	r0, #1
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000e54 	.word	0x20000e54

0800452c <z_log_msg2_init>:
{
 800452c:	b508      	push	{r3, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
 800452e:	4902      	ldr	r1, [pc, #8]	; (8004538 <z_log_msg2_init+0xc>)
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <z_log_msg2_init+0x10>)
 8004532:	f009 fd13 	bl	800df5c <mpsc_pbuf_init>
}
 8004536:	bd08      	pop	{r3, pc}
 8004538:	08010ff4 	.word	0x08010ff4
 800453c:	20000e5c 	.word	0x20000e5c

08004540 <log_core_init>:
{
 8004540:	b508      	push	{r3, lr}
	panic_mode = false;
 8004542:	2300      	movs	r3, #0
 8004544:	4a05      	ldr	r2, [pc, #20]	; (800455c <log_core_init+0x1c>)
 8004546:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 8004548:	4a05      	ldr	r2, [pc, #20]	; (8004560 <log_core_init+0x20>)
 800454a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 800454c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004550:	4804      	ldr	r0, [pc, #16]	; (8004564 <log_core_init+0x24>)
 8004552:	f7ff ff71 	bl	8004438 <log_set_timestamp_func>
		z_log_msg2_init();
 8004556:	f7ff ffe9 	bl	800452c <z_log_msg2_init>
}
 800455a:	bd08      	pop	{r3, pc}
 800455c:	200013f1 	.word	0x200013f1
 8004560:	20000e54 	.word	0x20000e54
 8004564:	0800e2c5 	.word	0x0800e2c5

08004568 <z_log_msg2_alloc>:
{
 8004568:	b508      	push	{r3, lr}
 800456a:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
 800456c:	2200      	movs	r2, #0
 800456e:	2300      	movs	r3, #0
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <z_log_msg2_alloc+0x10>)
 8004572:	f009 fd18 	bl	800dfa6 <mpsc_pbuf_alloc>
}
 8004576:	bd08      	pop	{r3, pc}
 8004578:	20000e5c 	.word	0x20000e5c

0800457c <z_log_msg2_claim>:
{
 800457c:	b508      	push	{r3, lr}
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <z_log_msg2_claim+0xc>)
 8004580:	f009 fdce 	bl	800e120 <mpsc_pbuf_claim>
}
 8004584:	bd08      	pop	{r3, pc}
 8004586:	bf00      	nop
 8004588:	20000e5c 	.word	0x20000e5c

0800458c <z_log_msg2_free>:
{
 800458c:	b508      	push	{r3, lr}
 800458e:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <z_log_msg2_free+0xc>)
 8004592:	f009 fe36 	bl	800e202 <mpsc_pbuf_free>
}
 8004596:	bd08      	pop	{r3, pc}
 8004598:	20000e5c 	.word	0x20000e5c

0800459c <msg_process>:
{
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	4606      	mov	r6, r0
	if (!bypass) {
 80045a0:	b9e9      	cbnz	r1, 80045de <msg_process+0x42>
		for (int i = 0; i < log_backend_count_get(); i++) {
 80045a2:	2400      	movs	r4, #0
 80045a4:	e000      	b.n	80045a8 <msg_process+0xc>
 80045a6:	3401      	adds	r4, #1
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <msg_process+0x4c>)
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <msg_process+0x50>)
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80045b2:	da14      	bge.n	80045de <msg_process+0x42>
	return &__log_backends_start[idx];
 80045b4:	4d0d      	ldr	r5, [pc, #52]	; (80045ec <msg_process+0x50>)
 80045b6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 80045ba:	686b      	ldr	r3, [r5, #4]
 80045bc:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f1      	beq.n	80045a6 <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	f009 fe7b 	bl	800e2c0 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0eb      	beq.n	80045a6 <msg_process+0xa>
	backend->api->process(backend, msg);
 80045ce:	0127      	lsls	r7, r4, #4
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <msg_process+0x50>)
 80045d2:	59db      	ldr	r3, [r3, r7]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	4798      	blx	r3
}
 80045dc:	e7e3      	b.n	80045a6 <msg_process+0xa>
		z_log_msg2_free(msg.msg2);
 80045de:	4630      	mov	r0, r6
 80045e0:	f7ff ffd4 	bl	800458c <z_log_msg2_free>
}
 80045e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08010b28 	.word	0x08010b28
 80045ec:	08010b18 	.word	0x08010b18

080045f0 <z_log_msg2_pending>:
{
 80045f0:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(&log_buffer);
 80045f2:	4802      	ldr	r0, [pc, #8]	; (80045fc <z_log_msg2_pending+0xc>)
 80045f4:	f009 fe42 	bl	800e27c <mpsc_pbuf_is_pending>
}
 80045f8:	bd08      	pop	{r3, pc}
 80045fa:	bf00      	nop
 80045fc:	20000e5c 	.word	0x20000e5c

08004600 <z_impl_log_process>:
{
 8004600:	b510      	push	{r4, lr}
 8004602:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <z_impl_log_process+0x4c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b903      	cbnz	r3, 800460c <z_impl_log_process+0xc>
 800460a:	b1d0      	cbz	r0, 8004642 <z_impl_log_process+0x42>
	msg = get_msg();
 800460c:	f009 fe67 	bl	800e2de <get_msg>
	if (msg.msg) {
 8004610:	4603      	mov	r3, r0
 8004612:	b180      	cbz	r0, 8004636 <z_impl_log_process+0x36>
		if (!bypass) {
 8004614:	b95c      	cbnz	r4, 800462e <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <z_impl_log_process+0x50>)
 8004618:	f3bf 8f5b 	dmb	ish
 800461c:	e852 1f00 	ldrex	r1, [r2]
 8004620:	3901      	subs	r1, #1
 8004622:	e842 1000 	strex	r0, r1, [r2]
 8004626:	2800      	cmp	r0, #0
 8004628:	d1f8      	bne.n	800461c <z_impl_log_process+0x1c>
 800462a:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 800462e:	4621      	mov	r1, r4
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ffb3 	bl	800459c <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8004636:	b914      	cbnz	r4, 800463e <z_impl_log_process+0x3e>
 8004638:	f7ff ff6e 	bl	8004518 <z_log_dropped_pending>
 800463c:	b910      	cbnz	r0, 8004644 <z_impl_log_process+0x44>
	return next_pending();
 800463e:	f009 fe52 	bl	800e2e6 <next_pending>
}
 8004642:	bd10      	pop	{r4, pc}
		dropped_notify();
 8004644:	f7ff ff46 	bl	80044d4 <dropped_notify>
 8004648:	e7f9      	b.n	800463e <z_impl_log_process+0x3e>
 800464a:	bf00      	nop
 800464c:	200013f0 	.word	0x200013f0
 8004650:	20000e50 	.word	0x20000e50

08004654 <z_log_msg_post_finalize>:
{
 8004654:	b510      	push	{r4, lr}
 8004656:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8004658:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <z_log_msg_post_finalize+0x7c>)
 800465a:	f3bf 8f5b 	dmb	ish
 800465e:	e853 2f00 	ldrex	r2, [r3]
 8004662:	1c51      	adds	r1, r2, #1
 8004664:	e843 1000 	strex	r0, r1, [r3]
 8004668:	2800      	cmp	r0, #0
 800466a:	d1f8      	bne.n	800465e <z_log_msg_post_finalize+0xa>
 800466c:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 8004670:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <z_log_msg_post_finalize+0x80>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	b93b      	cbnz	r3, 8004686 <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
 8004676:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <z_log_msg_post_finalize+0x84>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b103      	cbz	r3, 800467e <z_log_msg_post_finalize+0x2a>
 800467c:	b19a      	cbz	r2, 80046a6 <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 800467e:	2a0a      	cmp	r2, #10
 8004680:	d01c      	beq.n	80046bc <z_log_msg_post_finalize+0x68>
}
 8004682:	b002      	add	sp, #8
 8004684:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 8004686:	f04f 0310 	mov.w	r3, #16
 800468a:	f3ef 8411 	mrs	r4, BASEPRI
 800468e:	f383 8812 	msr	BASEPRI_MAX, r3
 8004692:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 8004696:	2000      	movs	r0, #0
 8004698:	f7ff ffb2 	bl	8004600 <z_impl_log_process>
	__asm__ volatile(
 800469c:	f384 8811 	msr	BASEPRI, r4
 80046a0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80046a4:	e7ed      	b.n	8004682 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2300      	movs	r3, #0
 80046aa:	e9cd 2300 	strd	r2, r3, [sp]
 80046ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80046b2:	2300      	movs	r3, #0
 80046b4:	4809      	ldr	r0, [pc, #36]	; (80046dc <z_log_msg_post_finalize+0x88>)
 80046b6:	f007 fb9d 	bl	800bdf4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
 80046ba:	e7e2      	b.n	8004682 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0e0      	beq.n	8004682 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
 80046c0:	4806      	ldr	r0, [pc, #24]	; (80046dc <z_log_msg_post_finalize+0x88>)
 80046c2:	f00b fb9e 	bl	800fe02 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 80046c6:	4806      	ldr	r0, [pc, #24]	; (80046e0 <z_log_msg_post_finalize+0x8c>)
 80046c8:	f006 fc16 	bl	800aef8 <z_impl_k_sem_give>
}
 80046cc:	e7d9      	b.n	8004682 <z_log_msg_post_finalize+0x2e>
 80046ce:	bf00      	nop
 80046d0:	20000e50 	.word	0x20000e50
 80046d4:	200013f1 	.word	0x200013f1
 80046d8:	20000e9c 	.word	0x20000e9c
 80046dc:	20000af8 	.word	0x20000af8
 80046e0:	20000528 	.word	0x20000528

080046e4 <z_log_msg2_commit>:
{
 80046e4:	b510      	push	{r4, lr}
 80046e6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <z_log_msg2_commit+0x1c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4798      	blx	r3
 80046ee:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
 80046f0:	4621      	mov	r1, r4
 80046f2:	4804      	ldr	r0, [pc, #16]	; (8004704 <z_log_msg2_commit+0x20>)
 80046f4:	f009 fcee 	bl	800e0d4 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
 80046f8:	f7ff ffac 	bl	8004654 <z_log_msg_post_finalize>
}
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	20000048 	.word	0x20000048
 8004704:	20000e5c 	.word	0x20000e5c

08004708 <z_impl_log_panic>:
	if (panic_mode) {
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <z_impl_log_panic+0x4c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b103      	cbz	r3, 8004710 <z_impl_log_panic+0x8>
 800470e:	4770      	bx	lr
{
 8004710:	b510      	push	{r4, lr}
	log_init();
 8004712:	f7ff fe59 	bl	80043c8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 8004716:	2400      	movs	r4, #0
 8004718:	e000      	b.n	800471c <z_impl_log_panic+0x14>
 800471a:	3401      	adds	r4, #1
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <z_impl_log_panic+0x50>)
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <z_impl_log_panic+0x54>)
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8004726:	da0c      	bge.n	8004742 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 8004728:	480c      	ldr	r0, [pc, #48]	; (800475c <z_impl_log_panic+0x54>)
 800472a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 800472e:	6843      	ldr	r3, [r0, #4]
 8004730:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f1      	beq.n	800471a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8004736:	0123      	lsls	r3, r4, #4
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <z_impl_log_panic+0x54>)
 800473a:	58d3      	ldr	r3, [r2, r3]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4798      	blx	r3
}
 8004740:	e7eb      	b.n	800471a <z_impl_log_panic+0x12>
 8004742:	2000      	movs	r0, #0
 8004744:	f7ff ff5c 	bl	8004600 <z_impl_log_process>
		while (log_process(false) == true) {
 8004748:	2800      	cmp	r0, #0
 800474a:	d1fa      	bne.n	8004742 <z_impl_log_panic+0x3a>
	panic_mode = true;
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <z_impl_log_panic+0x4c>)
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
}
 8004752:	bd10      	pop	{r4, pc}
 8004754:	200013f1 	.word	0x200013f1
 8004758:	08010b28 	.word	0x08010b28
 800475c:	08010b18 	.word	0x08010b18

08004760 <log_process_thread_func>:
{
 8004760:	b508      	push	{r3, lr}
	log_init();
 8004762:	f7ff fe31 	bl	80043c8 <log_init>
	return z_impl_z_current_get();
 8004766:	f007 f91f 	bl	800b9a8 <z_impl_z_current_get>
	thread_set(k_current_get());
 800476a:	f7ff fde3 	bl	8004334 <thread_set>
 800476e:	2000      	movs	r0, #0
 8004770:	f7ff ff46 	bl	8004600 <z_impl_log_process>
		if (log_process(false) == false) {
 8004774:	2800      	cmp	r0, #0
 8004776:	d1fa      	bne.n	800476e <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 8004778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800477c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004780:	4801      	ldr	r0, [pc, #4]	; (8004788 <log_process_thread_func+0x28>)
 8004782:	f006 fbe1 	bl	800af48 <z_impl_k_sem_take>
 8004786:	e7f2      	b.n	800476e <log_process_thread_func+0xe>
 8004788:	20000528 	.word	0x20000528

0800478c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <log_source_name_get+0x18>)
 800478e:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <log_source_name_get+0x1c>)
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 8004796:	d202      	bcs.n	800479e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8004798:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 800479c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 800479e:	2000      	movs	r0, #0
}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	08010b18 	.word	0x08010b18
 80047a8:	08010aa0 	.word	0x08010aa0

080047ac <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 80047ac:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 80047ae:	4b07      	ldr	r3, [pc, #28]	; (80047cc <log_backend_enable+0x20>)
 80047b0:	1ac3      	subs	r3, r0, r3
 80047b2:	111b      	asrs	r3, r3, #4
 80047b4:	3301      	adds	r3, #1
	backend->cb->id = id;
 80047b6:	6842      	ldr	r2, [r0, #4]
 80047b8:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 80047ba:	6843      	ldr	r3, [r0, #4]
 80047bc:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80047be:	6843      	ldr	r3, [r0, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80047c4:	f7ff fe46 	bl	8004454 <z_log_notify_backend_enabled>
}
 80047c8:	bd08      	pop	{r3, pc}
 80047ca:	bf00      	nop
 80047cc:	08010b18 	.word	0x08010b18

080047d0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	b500      	push	{lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	4601      	mov	r1, r0
 80047d8:	ab03      	add	r3, sp, #12
 80047da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80047de:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80047e0:	4803      	ldr	r0, [pc, #12]	; (80047f0 <print_formatted+0x20>)
 80047e2:	f7ff faa9 	bl	8003d38 <cbvprintf>
	va_end(args);

	return length;
}
 80047e6:	b002      	add	sp, #8
 80047e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr
 80047f0:	0800e38d 	.word	0x0800e38d

080047f4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 80047f4:	b530      	push	{r4, r5, lr}
 80047f6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 80047f8:	f011 0f44 	tst.w	r1, #68	; 0x44
 80047fc:	d005      	beq.n	800480a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <timestamp_print+0x74>)
 8004800:	681c      	ldr	r4, [r3, #0]
 8004802:	b934      	cbnz	r4, 8004812 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 8004804:	2000      	movs	r0, #0
	}

	return length;
}
 8004806:	b005      	add	sp, #20
 8004808:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 800480a:	4918      	ldr	r1, [pc, #96]	; (800486c <timestamp_print+0x78>)
 800480c:	f7ff ffe0 	bl	80047d0 <print_formatted>
 8004810:	e7f9      	b.n	8004806 <timestamp_print+0x12>
		timestamp /= timestamp_div;
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <timestamp_print+0x7c>)
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 800481a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 800481e:	4a15      	ldr	r2, [pc, #84]	; (8004874 <timestamp_print+0x80>)
 8004820:	fba2 320c 	umull	r3, r2, r2, ip
 8004824:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 8004826:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 800482a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <timestamp_print+0x84>)
 8004830:	fba3 530e 	umull	r5, r3, r3, lr
 8004834:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 8004836:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 800483a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 800483e:	fb0c f101 	mul.w	r1, ip, r1
 8004842:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 8004846:	fb05 1114 	mls	r1, r5, r4, r1
 800484a:	fb0c f101 	mul.w	r1, ip, r1
 800484e:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 8004852:	9102      	str	r1, [sp, #8]
 8004854:	9501      	str	r5, [sp, #4]
 8004856:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800485a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 800485e:	9100      	str	r1, [sp, #0]
 8004860:	4906      	ldr	r1, [pc, #24]	; (800487c <timestamp_print+0x88>)
 8004862:	f7ff ffb5 	bl	80047d0 <print_formatted>
 8004866:	e7ce      	b.n	8004806 <timestamp_print+0x12>
 8004868:	20000ea0 	.word	0x20000ea0
 800486c:	08011008 	.word	0x08011008
 8004870:	20000ea4 	.word	0x20000ea4
 8004874:	91a2b3c5 	.word	0x91a2b3c5
 8004878:	88888889 	.word	0x88888889
 800487c:	08011014 	.word	0x08011014

08004880 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8004880:	b161      	cbz	r1, 800489c <color_print+0x1c>
{
 8004882:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8004884:	b12a      	cbz	r2, 8004892 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 8004886:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <color_print+0x20>)
 8004888:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800488c:	b912      	cbnz	r2, 8004894 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800488e:	4a05      	ldr	r2, [pc, #20]	; (80048a4 <color_print+0x24>)
 8004890:	e000      	b.n	8004894 <color_print+0x14>
 8004892:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 8004894:	4904      	ldr	r1, [pc, #16]	; (80048a8 <color_print+0x28>)
 8004896:	f7ff ff9b 	bl	80047d0 <print_formatted>
	}
}
 800489a:	bd08      	pop	{r3, pc}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	0801108c 	.word	0x0801108c
 80048a4:	08011030 	.word	0x08011030
 80048a8:	08011038 	.word	0x08011038

080048ac <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80048ac:	f011 0f10 	tst.w	r1, #16
 80048b0:	d10b      	bne.n	80048ca <newline_print+0x1e>
{
 80048b2:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80048b4:	f011 0f20 	tst.w	r1, #32
 80048b8:	d003      	beq.n	80048c2 <newline_print+0x16>
		print_formatted(ctx, "\n");
 80048ba:	4904      	ldr	r1, [pc, #16]	; (80048cc <newline_print+0x20>)
 80048bc:	f7ff ff88 	bl	80047d0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 80048c0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 80048c2:	4903      	ldr	r1, [pc, #12]	; (80048d0 <newline_print+0x24>)
 80048c4:	f7ff ff84 	bl	80047d0 <print_formatted>
 80048c8:	e7fa      	b.n	80048c0 <newline_print+0x14>
 80048ca:	4770      	bx	lr
 80048cc:	08011594 	.word	0x08011594
 80048d0:	0801103c 	.word	0x0801103c

080048d4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	4605      	mov	r5, r0
 80048da:	460f      	mov	r7, r1
 80048dc:	4616      	mov	r6, r2
 80048de:	4698      	mov	r8, r3
	newline_print(output, flags);
 80048e0:	9906      	ldr	r1, [sp, #24]
 80048e2:	f7ff ffe3 	bl	80048ac <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80048e6:	2400      	movs	r4, #0
 80048e8:	4544      	cmp	r4, r8
 80048ea:	da05      	bge.n	80048f8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 80048ec:	4924      	ldr	r1, [pc, #144]	; (8004980 <hexdump_line_print+0xac>)
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7ff ff6e 	bl	80047d0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80048f4:	3401      	adds	r4, #1
 80048f6:	e7f7      	b.n	80048e8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80048f8:	2400      	movs	r4, #0
 80048fa:	e009      	b.n	8004910 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80048fc:	4920      	ldr	r1, [pc, #128]	; (8004980 <hexdump_line_print+0xac>)
 80048fe:	4628      	mov	r0, r5
 8004900:	f7ff ff66 	bl	80047d0 <print_formatted>
 8004904:	e00b      	b.n	800491e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 8004906:	491f      	ldr	r1, [pc, #124]	; (8004984 <hexdump_line_print+0xb0>)
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff ff61 	bl	80047d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800490e:	3401      	adds	r4, #1
 8004910:	2c0f      	cmp	r4, #15
 8004912:	dc0c      	bgt.n	800492e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 8004914:	2c00      	cmp	r4, #0
 8004916:	dd02      	ble.n	800491e <hexdump_line_print+0x4a>
 8004918:	f014 0f07 	tst.w	r4, #7
 800491c:	d0ee      	beq.n	80048fc <hexdump_line_print+0x28>
		if (i < length) {
 800491e:	42b4      	cmp	r4, r6
 8004920:	d2f1      	bcs.n	8004906 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 8004922:	5d3a      	ldrb	r2, [r7, r4]
 8004924:	4918      	ldr	r1, [pc, #96]	; (8004988 <hexdump_line_print+0xb4>)
 8004926:	4628      	mov	r0, r5
 8004928:	f7ff ff52 	bl	80047d0 <print_formatted>
 800492c:	e7ef      	b.n	800490e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 800492e:	4917      	ldr	r1, [pc, #92]	; (800498c <hexdump_line_print+0xb8>)
 8004930:	4628      	mov	r0, r5
 8004932:	f7ff ff4d 	bl	80047d0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8004936:	2400      	movs	r4, #0
 8004938:	e009      	b.n	800494e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 800493a:	4911      	ldr	r1, [pc, #68]	; (8004980 <hexdump_line_print+0xac>)
 800493c:	4628      	mov	r0, r5
 800493e:	f7ff ff47 	bl	80047d0 <print_formatted>
 8004942:	e00b      	b.n	800495c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 8004944:	4912      	ldr	r1, [pc, #72]	; (8004990 <hexdump_line_print+0xbc>)
 8004946:	4628      	mov	r0, r5
 8004948:	f7ff ff42 	bl	80047d0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800494c:	3401      	adds	r4, #1
 800494e:	2c0f      	cmp	r4, #15
 8004950:	dc13      	bgt.n	800497a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 8004952:	2c00      	cmp	r4, #0
 8004954:	dd02      	ble.n	800495c <hexdump_line_print+0x88>
 8004956:	f014 0f07 	tst.w	r4, #7
 800495a:	d0ee      	beq.n	800493a <hexdump_line_print+0x66>
		if (i < length) {
 800495c:	42b4      	cmp	r4, r6
 800495e:	d207      	bcs.n	8004970 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8004960:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <hexdump_line_print+0xc0>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 8004966:	f013 0f97 	tst.w	r3, #151	; 0x97
 800496a:	d1eb      	bne.n	8004944 <hexdump_line_print+0x70>
 800496c:	222e      	movs	r2, #46	; 0x2e
 800496e:	e7e9      	b.n	8004944 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <hexdump_line_print+0xac>)
 8004972:	4628      	mov	r0, r5
 8004974:	f7ff ff2c 	bl	80047d0 <print_formatted>
 8004978:	e7e8      	b.n	800494c <hexdump_line_print+0x78>
		}
	}
}
 800497a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497e:	bf00      	nop
 8004980:	08011064 	.word	0x08011064
 8004984:	08011048 	.word	0x08011048
 8004988:	08011040 	.word	0x08011040
 800498c:	0801104c 	.word	0x0801104c
 8004990:	08011050 	.word	0x08011050
 8004994:	08012159 	.word	0x08012159

08004998 <ids_print>:
{
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4680      	mov	r8, r0
 800499e:	4616      	mov	r6, r2
 80049a0:	461d      	mov	r5, r3
 80049a2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 80049a6:	b959      	cbnz	r1, 80049c0 <ids_print+0x28>
	int total = 0;
 80049a8:	2400      	movs	r4, #0
	if (source_id >= 0) {
 80049aa:	2f00      	cmp	r7, #0
 80049ac:	db1c      	blt.n	80049e8 <ids_print+0x50>
		total += print_formatted(output,
 80049ae:	b186      	cbz	r6, 80049d2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80049b0:	2301      	movs	r3, #1
 80049b2:	9a07      	ldr	r2, [sp, #28]
 80049b4:	4093      	lsls	r3, r2
				(func_on &&
 80049b6:	f013 0f10 	tst.w	r3, #16
 80049ba:	d118      	bne.n	80049ee <ids_print+0x56>
		total += print_formatted(output,
 80049bc:	4e0d      	ldr	r6, [pc, #52]	; (80049f4 <ids_print+0x5c>)
 80049be:	e009      	b.n	80049d4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <ids_print+0x60>)
 80049c2:	9a07      	ldr	r2, [sp, #28]
 80049c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049c8:	490c      	ldr	r1, [pc, #48]	; (80049fc <ids_print+0x64>)
 80049ca:	f7ff ff01 	bl	80047d0 <print_formatted>
 80049ce:	4604      	mov	r4, r0
 80049d0:	e7eb      	b.n	80049aa <ids_print+0x12>
		total += print_formatted(output,
 80049d2:	4e08      	ldr	r6, [pc, #32]	; (80049f4 <ids_print+0x5c>)
 80049d4:	4639      	mov	r1, r7
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7ff fed8 	bl	800478c <log_source_name_get>
 80049dc:	4602      	mov	r2, r0
 80049de:	4631      	mov	r1, r6
 80049e0:	4640      	mov	r0, r8
 80049e2:	f7ff fef5 	bl	80047d0 <print_formatted>
 80049e6:	4404      	add	r4, r0
}
 80049e8:	4620      	mov	r0, r4
 80049ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 80049ee:	4e04      	ldr	r6, [pc, #16]	; (8004a00 <ids_print+0x68>)
 80049f0:	e7f0      	b.n	80049d4 <ids_print+0x3c>
 80049f2:	bf00      	nop
 80049f4:	08011054 	.word	0x08011054
 80049f8:	080110c8 	.word	0x080110c8
 80049fc:	08011060 	.word	0x08011060
 8004a00:	0801105c 	.word	0x0801105c

08004a04 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4616      	mov	r6, r2
 8004a10:	9303      	str	r3, [sp, #12]
 8004a12:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 8004a16:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8004a1a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8004a1e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 8004a22:	f009 fc64 	bl	800e2ee <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 8004a26:	b1e8      	cbz	r0, 8004a64 <prefix_print+0x60>
 8004a28:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 8004a2a:	4913      	ldr	r1, [pc, #76]	; (8004a78 <prefix_print+0x74>)
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff fecf 	bl	80047d0 <print_formatted>
 8004a32:	4607      	mov	r7, r0
	}

	if (stamp) {
 8004a34:	f1bb 0f00 	cmp.w	fp, #0
 8004a38:	d116      	bne.n	8004a68 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f009 fc64 	bl	800e30c <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 8004a44:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a48:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004a52:	4632      	mov	r2, r6
 8004a54:	4649      	mov	r1, r9
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7ff ff9e 	bl	8004998 <ids_print>
			domain_id, source_id, level);


	return length;
}
 8004a5c:	4438      	add	r0, r7
 8004a5e:	b005      	add	sp, #20
 8004a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 8004a64:	2700      	movs	r7, #0
 8004a66:	e7e5      	b.n	8004a34 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 8004a68:	9a03      	ldr	r2, [sp, #12]
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7ff fec1 	bl	80047f4 <timestamp_print>
 8004a72:	4407      	add	r7, r0
 8004a74:	e7e1      	b.n	8004a3a <prefix_print+0x36>
 8004a76:	bf00      	nop
 8004a78:	08011068 	.word	0x08011068

08004a7c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8004a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a80:	b085      	sub	sp, #20
 8004a82:	4606      	mov	r6, r0
 8004a84:	460c      	mov	r4, r1
 8004a86:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 8004a88:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 8004a8a:	880a      	ldrh	r2, [r1, #0]
 8004a8c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8004a90:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 8004a94:	d035      	beq.n	8004b02 <log_output_msg2_process+0x86>
	return msg->hdr.source;
 8004a96:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 8004a98:	7809      	ldrb	r1, [r1, #0]
 8004a9a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8004a9e:	b36a      	cbz	r2, 8004afc <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8004aa0:	4820      	ldr	r0, [pc, #128]	; (8004b24 <log_output_msg2_process+0xa8>)
 8004aa2:	1a12      	subs	r2, r2, r0
 8004aa4:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 8004aa8:	9202      	str	r2, [sp, #8]
 8004aaa:	9101      	str	r1, [sp, #4]
 8004aac:	f8cd 8000 	str.w	r8, [sp]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff ffa5 	bl	8004a04 <prefix_print>
 8004aba:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 8004abc:	4625      	mov	r5, r4
 8004abe:	f855 3b0c 	ldr.w	r3, [r5], #12
 8004ac2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 8004ac6:	b143      	cbz	r3, 8004ada <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8004ac8:	f1b8 0f00 	cmp.w	r8, #0
 8004acc:	d11c      	bne.n	8004b08 <log_output_msg2_process+0x8c>
 8004ace:	4816      	ldr	r0, [pc, #88]	; (8004b28 <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4915      	ldr	r1, [pc, #84]	; (8004b2c <log_output_msg2_process+0xb0>)
 8004ad6:	f009 f892 	bl	800dbfe <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 8004ada:	8862      	ldrh	r2, [r4, #2]
 8004adc:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	f3c1 2149 	ubfx	r1, r1, #9, #10
 8004ae6:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 8004ae8:	b982      	cbnz	r2, 8004b0c <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 8004aea:	f1b8 0f00 	cmp.w	r8, #0
 8004aee:	d113      	bne.n	8004b18 <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 8004af0:	4630      	mov	r0, r6
 8004af2:	f009 fc3e 	bl	800e372 <log_output_flush>
}
 8004af6:	b005      	add	sp, #20
 8004af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 8004afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b00:	e7d2      	b.n	8004aa8 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 8004b02:	f04f 0900 	mov.w	r9, #0
 8004b06:	e7d9      	b.n	8004abc <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8004b08:	4809      	ldr	r0, [pc, #36]	; (8004b30 <log_output_msg2_process+0xb4>)
 8004b0a:	e7e1      	b.n	8004ad0 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8004b0c:	9700      	str	r7, [sp, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	4630      	mov	r0, r6
 8004b12:	f009 fc13 	bl	800e33c <log_msg2_hexdump>
 8004b16:	e7e8      	b.n	8004aea <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 8004b18:	4642      	mov	r2, r8
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f009 fc01 	bl	800e324 <postfix_print>
 8004b22:	e7e5      	b.n	8004af0 <log_output_msg2_process+0x74>
 8004b24:	08010aa0 	.word	0x08010aa0
 8004b28:	0800e3c5 	.word	0x0800e3c5
 8004b2c:	08003d39 	.word	0x08003d39
 8004b30:	0800e38d 	.word	0x0800e38d

08004b34 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8004b3a:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8004b3c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf28      	it	cs
 8004b44:	460b      	movcs	r3, r1
 8004b46:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <log_output_dropped_process+0x4c>)
 8004b48:	2105      	movs	r1, #5
 8004b4a:	4668      	mov	r0, sp
 8004b4c:	f009 f8ac 	bl	800dca8 <snprintk>
 8004b50:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8004b52:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	220b      	movs	r2, #11
 8004b58:	490a      	ldr	r1, [pc, #40]	; (8004b84 <log_output_dropped_process+0x50>)
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f009 fbc9 	bl	800e2f2 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4632      	mov	r2, r6
 8004b66:	4669      	mov	r1, sp
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f009 fbc2 	bl	800e2f2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8004b6e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	221b      	movs	r2, #27
 8004b74:	4904      	ldr	r1, [pc, #16]	; (8004b88 <log_output_dropped_process+0x54>)
 8004b76:	4628      	mov	r0, r5
 8004b78:	f009 fbbb 	bl	800e2f2 <buffer_write>
}
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	0801186c 	.word	0x0801186c
 8004b84:	080110bc 	.word	0x080110bc
 8004b88:	080110a0 	.word	0x080110a0

08004b8c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <log_output_timestamp_freq_set+0x20>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8004b92:	e004      	b.n	8004b9e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8004b94:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8004b96:	4a05      	ldr	r2, [pc, #20]	; (8004bac <log_output_timestamp_freq_set+0x20>)
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <log_output_timestamp_freq_set+0x24>)
 8004ba0:	4298      	cmp	r0, r3
 8004ba2:	d8f7      	bhi.n	8004b94 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <log_output_timestamp_freq_set+0x28>)
 8004ba6:	6018      	str	r0, [r3, #0]
}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000ea4 	.word	0x20000ea4
 8004bb0:	000f4240 	.word	0x000f4240
 8004bb4:	20000ea0 	.word	0x20000ea0

08004bb8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
 8004bbe:	2400      	movs	r4, #0
 8004bc0:	e006      	b.n	8004bd0 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <char_out+0x20>)
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
 8004bc8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
 8004bce:	3401      	adds	r4, #1
 8004bd0:	42ac      	cmp	r4, r5
 8004bd2:	d3f6      	bcc.n	8004bc2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	20000ebc 	.word	0x20000ebc

08004bdc <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004bdc:	4b01      	ldr	r3, [pc, #4]	; (8004be4 <log_backend_uart_init+0x8>)
 8004bde:	4a02      	ldr	r2, [pc, #8]	; (8004be8 <log_backend_uart_init+0xc>)
 8004be0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
 8004be2:	4770      	bx	lr
 8004be4:	20000ebc 	.word	0x20000ebc
 8004be8:	08010778 	.word	0x08010778

08004bec <panic>:

static void panic(struct log_backend const *const backend)
{
 8004bec:	b508      	push	{r3, lr}
	in_panic = true;
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <panic+0x10>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8004bf4:	4802      	ldr	r0, [pc, #8]	; (8004c00 <panic+0x14>)
 8004bf6:	f009 fbbc 	bl	800e372 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8004bfa:	bd08      	pop	{r3, pc}
 8004bfc:	200013f2 	.word	0x200013f2
 8004c00:	08011118 	.word	0x08011118

08004c04 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8004c04:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8004c06:	4802      	ldr	r0, [pc, #8]	; (8004c10 <dropped+0xc>)
 8004c08:	f7ff ff94 	bl	8004b34 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8004c0c:	bd08      	pop	{r3, pc}
 8004c0e:	bf00      	nop
 8004c10:	08011118 	.word	0x08011118

08004c14 <process>:
{
 8004c14:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
 8004c16:	220f      	movs	r2, #15
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <process+0xc>)
 8004c1a:	f7ff ff2f 	bl	8004a7c <log_output_msg2_process>
}
 8004c1e:	bd08      	pop	{r3, pc}
 8004c20:	08011118 	.word	0x08011118

08004c24 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 8004c24:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8004c26:	4c04      	ldr	r4, [pc, #16]	; (8004c38 <__do_init_array_aux+0x14>)
 8004c28:	e002      	b.n	8004c30 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8004c2a:	f854 3b04 	ldr.w	r3, [r4], #4
 8004c2e:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8004c30:	4b02      	ldr	r3, [pc, #8]	; (8004c3c <__do_init_array_aux+0x18>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d3f9      	bcc.n	8004c2a <__do_init_array_aux+0x6>
	}
}
 8004c36:	bd10      	pop	{r4, pc}
 8004c38:	08010aa0 	.word	0x08010aa0
 8004c3c:	08010aa0 	.word	0x08010aa0

08004c40 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <__do_global_ctors_aux+0x1c>)
 8004c42:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8004c44:	b14b      	cbz	r3, 8004c5a <__do_global_ctors_aux+0x1a>
{
 8004c46:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8004c48:	1e5c      	subs	r4, r3, #1
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <__do_global_ctors_aux+0x1c>)
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	4798      	blx	r3
 8004c52:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	d1f7      	bne.n	8004c48 <__do_global_ctors_aux+0x8>
	}
}
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	4770      	bx	lr
 8004c5c:	08010a98 	.word	0x08010a98

08004c60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8004c60:	4901      	ldr	r1, [pc, #4]	; (8004c68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8004c62:	2210      	movs	r2, #16
	str	r2, [r1]
 8004c64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8004c66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8004c68:	e000ed10 	.word	0xe000ed10

08004c6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8004c6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8004c6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8004c70:	f380 8811 	msr	BASEPRI, r0
	isb
 8004c74:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8004c78:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8004c7c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8004c7e:	b662      	cpsie	i
	isb
 8004c80:	f3bf 8f6f 	isb	sy

	bx	lr
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop

08004c88 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	b096      	sub	sp, #88	; 0x58
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004c92:	2301      	movs	r3, #1
 8004c94:	813b      	strh	r3, [r7, #8]
 8004c96:	466c      	mov	r4, sp
 8004c98:	b088      	sub	sp, #32
 8004c9a:	466b      	mov	r3, sp
 8004c9c:	f113 020c 	adds.w	r2, r3, #12
 8004ca0:	f000 80ca 	beq.w	8004e38 <esf_dump+0x1b0>
 8004ca4:	2114      	movs	r1, #20
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	8138      	strh	r0, [r7, #8]
 8004caa:	b11a      	cbz	r2, 8004cb4 <esf_dump+0x2c>
 8004cac:	2904      	cmp	r1, #4
 8004cae:	dd01      	ble.n	8004cb4 <esf_dump+0x2c>
 8004cb0:	4867      	ldr	r0, [pc, #412]	; (8004e50 <esf_dump+0x1c8>)
 8004cb2:	6118      	str	r0, [r3, #16]
 8004cb4:	6828      	ldr	r0, [r5, #0]
 8004cb6:	b112      	cbz	r2, 8004cbe <esf_dump+0x36>
 8004cb8:	2908      	cmp	r1, #8
 8004cba:	dd00      	ble.n	8004cbe <esf_dump+0x36>
 8004cbc:	6158      	str	r0, [r3, #20]
 8004cbe:	6868      	ldr	r0, [r5, #4]
 8004cc0:	b112      	cbz	r2, 8004cc8 <esf_dump+0x40>
 8004cc2:	290c      	cmp	r1, #12
 8004cc4:	dd00      	ble.n	8004cc8 <esf_dump+0x40>
 8004cc6:	6198      	str	r0, [r3, #24]
 8004cc8:	68a8      	ldr	r0, [r5, #8]
 8004cca:	b112      	cbz	r2, 8004cd2 <esf_dump+0x4a>
 8004ccc:	2910      	cmp	r1, #16
 8004cce:	dd00      	ble.n	8004cd2 <esf_dump+0x4a>
 8004cd0:	61d8      	str	r0, [r3, #28]
 8004cd2:	2913      	cmp	r1, #19
 8004cd4:	f340 80b3 	ble.w	8004e3e <esf_dump+0x1b6>
 8004cd8:	2014      	movs	r0, #20
 8004cda:	b12a      	cbz	r2, 8004ce8 <esf_dump+0x60>
 8004cdc:	2100      	movs	r1, #0
 8004cde:	6079      	str	r1, [r7, #4]
 8004ce0:	2105      	movs	r1, #5
 8004ce2:	7139      	strb	r1, [r7, #4]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	60d9      	str	r1, [r3, #12]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	f36f 0100 	bfc	r1, #0, #1
 8004cee:	f36f 0141 	bfc	r1, #1, #1
 8004cf2:	f36f 0182 	bfc	r1, #2, #1
 8004cf6:	f36f 01c5 	bfc	r1, #3, #3
 8004cfa:	2601      	movs	r6, #1
 8004cfc:	f366 1188 	bfi	r1, r6, #6, #3
 8004d00:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004d04:	f363 2152 	bfi	r1, r3, #9, #10
 8004d08:	f36f 41de 	bfc	r1, #19, #12
 8004d0c:	f36f 71df 	bfc	r1, #31, #1
 8004d10:	2300      	movs	r3, #0
 8004d12:	4850      	ldr	r0, [pc, #320]	; (8004e54 <esf_dump+0x1cc>)
 8004d14:	f009 fb7d 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8004d18:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004d1a:	813e      	strh	r6, [r7, #8]
 8004d1c:	466c      	mov	r4, sp
 8004d1e:	b088      	sub	sp, #32
 8004d20:	466b      	mov	r3, sp
 8004d22:	f113 020c 	adds.w	r2, r3, #12
 8004d26:	f000 808d 	beq.w	8004e44 <esf_dump+0x1bc>
 8004d2a:	2114      	movs	r1, #20
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	8138      	strh	r0, [r7, #8]
 8004d30:	b11a      	cbz	r2, 8004d3a <esf_dump+0xb2>
 8004d32:	2904      	cmp	r1, #4
 8004d34:	dd01      	ble.n	8004d3a <esf_dump+0xb2>
 8004d36:	4848      	ldr	r0, [pc, #288]	; (8004e58 <esf_dump+0x1d0>)
 8004d38:	6118      	str	r0, [r3, #16]
 8004d3a:	68e8      	ldr	r0, [r5, #12]
 8004d3c:	b112      	cbz	r2, 8004d44 <esf_dump+0xbc>
 8004d3e:	2908      	cmp	r1, #8
 8004d40:	dd00      	ble.n	8004d44 <esf_dump+0xbc>
 8004d42:	6158      	str	r0, [r3, #20]
 8004d44:	6928      	ldr	r0, [r5, #16]
 8004d46:	b112      	cbz	r2, 8004d4e <esf_dump+0xc6>
 8004d48:	290c      	cmp	r1, #12
 8004d4a:	dd00      	ble.n	8004d4e <esf_dump+0xc6>
 8004d4c:	6198      	str	r0, [r3, #24]
 8004d4e:	6968      	ldr	r0, [r5, #20]
 8004d50:	b112      	cbz	r2, 8004d58 <esf_dump+0xd0>
 8004d52:	2910      	cmp	r1, #16
 8004d54:	dd00      	ble.n	8004d58 <esf_dump+0xd0>
 8004d56:	61d8      	str	r0, [r3, #28]
 8004d58:	2913      	cmp	r1, #19
 8004d5a:	dd76      	ble.n	8004e4a <esf_dump+0x1c2>
 8004d5c:	2014      	movs	r0, #20
 8004d5e:	b12a      	cbz	r2, 8004d6c <esf_dump+0xe4>
 8004d60:	2100      	movs	r1, #0
 8004d62:	6079      	str	r1, [r7, #4]
 8004d64:	2105      	movs	r1, #5
 8004d66:	7139      	strb	r1, [r7, #4]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	60d9      	str	r1, [r3, #12]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f36f 0100 	bfc	r1, #0, #1
 8004d72:	f36f 0141 	bfc	r1, #1, #1
 8004d76:	f36f 0182 	bfc	r1, #2, #1
 8004d7a:	f36f 01c5 	bfc	r1, #3, #3
 8004d7e:	2601      	movs	r6, #1
 8004d80:	f366 1188 	bfi	r1, r6, #6, #3
 8004d84:	f400 737d 	and.w	r3, r0, #1012	; 0x3f4
 8004d88:	f363 2152 	bfi	r1, r3, #9, #10
 8004d8c:	f36f 41de 	bfc	r1, #19, #12
 8004d90:	f36f 71df 	bfc	r1, #31, #1
 8004d94:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004e54 <esf_dump+0x1cc>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	f009 fb39 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8004da0:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8004da2:	813e      	strh	r6, [r7, #8]
 8004da4:	69eb      	ldr	r3, [r5, #28]
 8004da6:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <esf_dump+0x1d4>)
 8004da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	2400      	movs	r4, #0
 8004dae:	607c      	str	r4, [r7, #4]
 8004db0:	f04f 0a03 	mov.w	sl, #3
 8004db4:	f887 a004 	strb.w	sl, [r7, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	f364 0100 	bfi	r1, r4, #0, #1
 8004dc2:	f364 0141 	bfi	r1, r4, #1, #1
 8004dc6:	f364 0182 	bfi	r1, r4, #2, #1
 8004dca:	f364 01c5 	bfi	r1, r4, #3, #3
 8004dce:	f366 1188 	bfi	r1, r6, #6, #3
 8004dd2:	f04f 090c 	mov.w	r9, #12
 8004dd6:	f369 2152 	bfi	r1, r9, #9, #10
 8004dda:	f364 41de 	bfi	r1, r4, #19, #12
 8004dde:	f364 71df 	bfi	r1, r4, #31, #1
 8004de2:	4623      	mov	r3, r4
 8004de4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004de8:	4640      	mov	r0, r8
 8004dea:	f009 fb12 	bl	800e412 <z_impl_z_log_msg2_static_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8004dee:	813e      	strh	r6, [r7, #8]
 8004df0:	69ab      	ldr	r3, [r5, #24]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <esf_dump+0x1d8>)
 8004df4:	653a      	str	r2, [r7, #80]	; 0x50
 8004df6:	657b      	str	r3, [r7, #84]	; 0x54
 8004df8:	607c      	str	r4, [r7, #4]
 8004dfa:	f887 a004 	strb.w	sl, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e02:	4621      	mov	r1, r4
 8004e04:	f364 0100 	bfi	r1, r4, #0, #1
 8004e08:	f364 0141 	bfi	r1, r4, #1, #1
 8004e0c:	f364 0182 	bfi	r1, r4, #2, #1
 8004e10:	f364 01c5 	bfi	r1, r4, #3, #3
 8004e14:	f366 1188 	bfi	r1, r6, #6, #3
 8004e18:	f369 2152 	bfi	r1, r9, #9, #10
 8004e1c:	f364 41de 	bfi	r1, r4, #19, #12
 8004e20:	f364 71df 	bfi	r1, r4, #31, #1
 8004e24:	4623      	mov	r3, r4
 8004e26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f009 faf1 	bl	800e412 <z_impl_z_log_msg2_static_create>
		esf->basic.pc);
}
 8004e30:	3758      	adds	r7, #88	; 0x58
 8004e32:	46bd      	mov	sp, r7
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8004e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e3c:	e733      	b.n	8004ca6 <esf_dump+0x1e>
 8004e3e:	f06f 001b 	mvn.w	r0, #27
 8004e42:	e74a      	b.n	8004cda <esf_dump+0x52>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8004e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e48:	e770      	b.n	8004d2c <esf_dump+0xa4>
 8004e4a:	f06f 001b 	mvn.w	r0, #27
 8004e4e:	e786      	b.n	8004d5e <esf_dump+0xd6>
 8004e50:	08011128 	.word	0x08011128
 8004e54:	08010ad0 	.word	0x08010ad0
 8004e58:	08011158 	.word	0x08011158
 8004e5c:	08011188 	.word	0x08011188
 8004e60:	08011198 	.word	0x08011198

08004e64 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8004e64:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004e66:	2800      	cmp	r0, #0
 8004e68:	db07      	blt.n	8004e7a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6a:	f000 021f 	and.w	r2, r0, #31
 8004e6e:	0940      	lsrs	r0, r0, #5
 8004e70:	2301      	movs	r3, #1
 8004e72:	4093      	lsls	r3, r2
 8004e74:	4a01      	ldr	r2, [pc, #4]	; (8004e7c <arch_irq_enable+0x18>)
 8004e76:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e100 	.word	0xe000e100

08004e80 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8004e80:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8004e82:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004e84:	2800      	cmp	r0, #0
 8004e86:	db08      	blt.n	8004e9a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e88:	0109      	lsls	r1, r1, #4
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004e90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004e94:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8004e98:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e9a:	f000 000f 	and.w	r0, r0, #15
 8004e9e:	0109      	lsls	r1, r1, #4
 8004ea0:	b2c9      	uxtb	r1, r1
 8004ea2:	4b01      	ldr	r3, [pc, #4]	; (8004ea8 <z_arm_irq_priority_set+0x28>)
 8004ea4:	5419      	strb	r1, [r3, r0]
}
 8004ea6:	4770      	bx	lr
 8004ea8:	e000ed14 	.word	0xe000ed14

08004eac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8004eac:	bf30      	wfi
    b z_SysNmiOnReset
 8004eae:	f7ff bffd 	b.w	8004eac <z_SysNmiOnReset>
 8004eb2:	bf00      	nop

08004eb4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8004eb4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <z_arm_prep_c+0x40>)
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <z_arm_prep_c+0x44>)
 8004eba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004ebe:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ec4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8004ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ecc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8004ed4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8004edc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8004ee0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8004ee4:	f005 fd9e 	bl	800aa24 <z_bss_zero>
	z_data_copy();
 8004ee8:	f006 fdb0 	bl	800ba4c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8004eec:	f000 feae 	bl	8005c4c <z_arm_interrupt_init>
	z_cstart();
 8004ef0:	f005 fda4 	bl	800aa3c <z_cstart>
 8004ef4:	e000ed00 	.word	0xe000ed00
 8004ef8:	08000000 	.word	0x08000000

08004efc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <arch_swap+0x28>)
 8004efe:	6893      	ldr	r3, [r2, #8]
 8004f00:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8004f02:	4909      	ldr	r1, [pc, #36]	; (8004f28 <arch_swap+0x2c>)
 8004f04:	6809      	ldr	r1, [r1, #0]
 8004f06:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004f08:	4908      	ldr	r1, [pc, #32]	; (8004f2c <arch_swap+0x30>)
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f10:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
 8004f12:	2300      	movs	r3, #0
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8004f1c:	6893      	ldr	r3, [r2, #8]
}
 8004f1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20001394 	.word	0x20001394
 8004f28:	08011fa8 	.word	0x08011fa8
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8004f30:	4912      	ldr	r1, [pc, #72]	; (8004f7c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8004f32:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8004f34:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8004f38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8004f3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8004f3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004f42:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8004f44:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8004f48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8004f4c:	4f0c      	ldr	r7, [pc, #48]	; (8004f80 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8004f4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8004f52:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8004f54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8004f56:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8004f58:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8004f5a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8004f5c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8004f5e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8004f62:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8004f64:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8004f66:	f000 fec5 	bl	8005cf4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8004f6a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8004f6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8004f72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8004f76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8004f7a:	4770      	bx	lr
    ldr r1, =_kernel
 8004f7c:	20001394 	.word	0x20001394
    ldr v4, =_SCS_ICSR
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8004f84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8004f88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8004f8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8004f8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8004f92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8004f94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8004f98:	2902      	cmp	r1, #2
    beq _oops
 8004f9a:	d0ff      	beq.n	8004f9c <_oops>

08004f9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8004f9c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8004f9e:	f009 fab1 	bl	800e504 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8004fa2:	bd01      	pop	{r0, pc}

08004fa4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8004fa4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8004fa6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8004faa:	490d      	ldr	r1, [pc, #52]	; (8004fe0 <arch_new_thread+0x3c>)
 8004fac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8004fb0:	f021 0101 	bic.w	r1, r1, #1
 8004fb4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8004fb8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8004fbc:	9b01      	ldr	r3, [sp, #4]
 8004fbe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8004fc8:	9b03      	ldr	r3, [sp, #12]
 8004fca:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8004fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8004fd6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8004fdc:	bc10      	pop	{r4}
 8004fde:	4770      	bx	lr
 8004fe0:	0800dcc5 	.word	0x0800dcc5

08004fe4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <z_check_thread_stack_fail+0x48>)
 8004fe6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8004fe8:	b1ea      	cbz	r2, 8005026 <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8004fea:	f110 0f16 	cmn.w	r0, #22
 8004fee:	d010      	beq.n	8005012 <z_check_thread_stack_fail+0x2e>
 8004ff0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004ff2:	f1a3 0c20 	sub.w	ip, r3, #32
 8004ff6:	4584      	cmp	ip, r0
 8004ff8:	d805      	bhi.n	8005006 <z_check_thread_stack_fail+0x22>
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	d905      	bls.n	800500a <z_check_thread_stack_fail+0x26>
 8004ffe:	428b      	cmp	r3, r1
 8005000:	d805      	bhi.n	800500e <z_check_thread_stack_fail+0x2a>
 8005002:	2100      	movs	r1, #0
 8005004:	e00a      	b.n	800501c <z_check_thread_stack_fail+0x38>
 8005006:	2100      	movs	r1, #0
 8005008:	e008      	b.n	800501c <z_check_thread_stack_fail+0x38>
 800500a:	2100      	movs	r1, #0
 800500c:	e006      	b.n	800501c <z_check_thread_stack_fail+0x38>
 800500e:	2101      	movs	r1, #1
 8005010:	e004      	b.n	800501c <z_check_thread_stack_fail+0x38>
 8005012:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005014:	428b      	cmp	r3, r1
 8005016:	bf94      	ite	ls
 8005018:	2100      	movls	r1, #0
 800501a:	2101      	movhi	r1, #1
 800501c:	b909      	cbnz	r1, 8005022 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800501e:	2000      	movs	r0, #0
}
 8005020:	4770      	bx	lr
		return thread->stack_info.start;
 8005022:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005024:	4770      	bx	lr
		return 0;
 8005026:	2000      	movs	r0, #0
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20001394 	.word	0x20001394

08005030 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8005030:	b508      	push	{r3, lr}
 8005032:	460d      	mov	r5, r1
 8005034:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <arch_switch_to_main_thread+0x28>)
 8005038:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800503a:	f000 fe5b 	bl	8005cf4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800503e:	4620      	mov	r0, r4
 8005040:	f385 8809 	msr	PSP, r5
 8005044:	2100      	movs	r1, #0
 8005046:	b663      	cpsie	if
 8005048:	f381 8811 	msr	BASEPRI, r1
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	f008 fe36 	bl	800dcc4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8005058:	20001394 	.word	0x20001394

0800505c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800505c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800505e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8005062:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8005066:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800506a:	4904      	ldr	r1, [pc, #16]	; (800507c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800506c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800506e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8005070:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8005072:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8005076:	4902      	ldr	r1, [pc, #8]	; (8005080 <_isr_wrapper+0x24>)
	bx r1
 8005078:	4708      	bx	r1
 800507a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800507c:	080107f0 	.word	0x080107f0
	ldr r1, =z_arm_int_exit
 8005080:	08005085 	.word	0x08005085

08005084 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8005086:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8005088:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 800508a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800508c:	d003      	beq.n	8005096 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800508e:	4903      	ldr	r1, [pc, #12]	; (800509c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8005090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8005094:	600a      	str	r2, [r1, #0]

08005096 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8005096:	4770      	bx	lr
	ldr r3, =_kernel
 8005098:	20001394 	.word	0x20001394
	ldr r1, =_SCS_ICSR
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 80050a0:	b500      	push	{lr}
 80050a2:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 80050a4:	290f      	cmp	r1, #15
 80050a6:	dc0f      	bgt.n	80050c8 <reserved_exception+0x28>
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <reserved_exception+0x2c>)
 80050aa:	3910      	subs	r1, #16
 80050ac:	9103      	str	r1, [sp, #12]
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <reserved_exception+0x30>)
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2000      	movs	r0, #0
 80050b6:	9000      	str	r0, [sp, #0]
 80050b8:	4603      	mov	r3, r0
 80050ba:	2201      	movs	r2, #1
 80050bc:	4905      	ldr	r1, [pc, #20]	; (80050d4 <reserved_exception+0x34>)
 80050be:	f009 fa35 	bl	800e52c <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 80050c2:	b005      	add	sp, #20
 80050c4:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <reserved_exception+0x38>)
 80050ca:	e7ee      	b.n	80050aa <reserved_exception+0xa>
 80050cc:	080111e4 	.word	0x080111e4
 80050d0:	080111fc 	.word	0x080111fc
 80050d4:	08010ad0 	.word	0x08010ad0
 80050d8:	080111c8 	.word	0x080111c8

080050dc <bus_fault>:
{
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	b0ba      	sub	sp, #232	; 0xe8
 80050e0:	4605      	mov	r5, r0
 80050e2:	460e      	mov	r6, r1
 80050e4:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
 80050e6:	2201      	movs	r2, #1
 80050e8:	f8ad 2008 	strh.w	r2, [sp, #8]
 80050ec:	4ba8      	ldr	r3, [pc, #672]	; (8005390 <bus_fault+0x2b4>)
 80050ee:	930e      	str	r3, [sp, #56]	; 0x38
 80050f0:	2300      	movs	r3, #0
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	2102      	movs	r1, #2
 80050f6:	f88d 1004 	strb.w	r1, [sp, #4]
 80050fa:	9901      	ldr	r1, [sp, #4]
 80050fc:	910d      	str	r1, [sp, #52]	; 0x34
 80050fe:	4619      	mov	r1, r3
 8005100:	f363 0100 	bfi	r1, r3, #0, #1
 8005104:	f363 0141 	bfi	r1, r3, #1, #1
 8005108:	f363 0182 	bfi	r1, r3, #2, #1
 800510c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005110:	f362 1188 	bfi	r1, r2, #6, #3
 8005114:	2208      	movs	r2, #8
 8005116:	f362 2152 	bfi	r1, r2, #9, #10
 800511a:	f363 41de 	bfi	r1, r3, #19, #12
 800511e:	f363 71df 	bfi	r1, r3, #31, #1
 8005122:	aa0d      	add	r2, sp, #52	; 0x34
 8005124:	489b      	ldr	r0, [pc, #620]	; (8005394 <bus_fault+0x2b8>)
 8005126:	f009 f974 	bl	800e412 <z_impl_z_log_msg2_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800512a:	4b9b      	ldr	r3, [pc, #620]	; (8005398 <bus_fault+0x2bc>)
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005132:	d128      	bne.n	8005186 <bus_fault+0xaa>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8005134:	4b98      	ldr	r3, [pc, #608]	; (8005398 <bus_fault+0x2bc>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800513c:	d146      	bne.n	80051cc <bus_fault+0xf0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800513e:	4b96      	ldr	r3, [pc, #600]	; (8005398 <bus_fault+0x2bc>)
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005146:	d164      	bne.n	8005212 <bus_fault+0x136>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8005148:	4b93      	ldr	r3, [pc, #588]	; (8005398 <bus_fault+0x2bc>)
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005150:	f040 80b4 	bne.w	80052bc <bus_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8005154:	4b90      	ldr	r3, [pc, #576]	; (8005398 <bus_fault+0x2bc>)
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	f413 7f80 	tst.w	r3, #256	; 0x100
 800515c:	f040 80d1 	bne.w	8005302 <bus_fault+0x226>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8005160:	4b8d      	ldr	r3, [pc, #564]	; (8005398 <bus_fault+0x2bc>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005168:	f040 80ee 	bne.w	8005348 <bus_fault+0x26c>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800516c:	4a8a      	ldr	r2, [pc, #552]	; (8005398 <bus_fault+0x2bc>)
 800516e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005170:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8005174:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8005176:	2101      	movs	r1, #1
 8005178:	4628      	mov	r0, r5
 800517a:	f009 f9d5 	bl	800e528 <memory_fault_recoverable>
 800517e:	7020      	strb	r0, [r4, #0]
}
 8005180:	2000      	movs	r0, #0
 8005182:	b03a      	add	sp, #232	; 0xe8
 8005184:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
 8005186:	2201      	movs	r2, #1
 8005188:	f8ad 2008 	strh.w	r2, [sp, #8]
 800518c:	4b83      	ldr	r3, [pc, #524]	; (800539c <bus_fault+0x2c0>)
 800518e:	9314      	str	r3, [sp, #80]	; 0x50
 8005190:	2300      	movs	r3, #0
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	2102      	movs	r1, #2
 8005196:	f88d 1004 	strb.w	r1, [sp, #4]
 800519a:	9901      	ldr	r1, [sp, #4]
 800519c:	9113      	str	r1, [sp, #76]	; 0x4c
 800519e:	4619      	mov	r1, r3
 80051a0:	f363 0100 	bfi	r1, r3, #0, #1
 80051a4:	f363 0141 	bfi	r1, r3, #1, #1
 80051a8:	f363 0182 	bfi	r1, r3, #2, #1
 80051ac:	f363 01c5 	bfi	r1, r3, #3, #3
 80051b0:	f362 1188 	bfi	r1, r2, #6, #3
 80051b4:	2208      	movs	r2, #8
 80051b6:	f362 2152 	bfi	r1, r2, #9, #10
 80051ba:	f363 41de 	bfi	r1, r3, #19, #12
 80051be:	f363 71df 	bfi	r1, r3, #31, #1
 80051c2:	aa13      	add	r2, sp, #76	; 0x4c
 80051c4:	4873      	ldr	r0, [pc, #460]	; (8005394 <bus_fault+0x2b8>)
 80051c6:	f009 f924 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80051ca:	e7b3      	b.n	8005134 <bus_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 80051cc:	2201      	movs	r2, #1
 80051ce:	f8ad 2008 	strh.w	r2, [sp, #8]
 80051d2:	4b73      	ldr	r3, [pc, #460]	; (80053a0 <bus_fault+0x2c4>)
 80051d4:	931a      	str	r3, [sp, #104]	; 0x68
 80051d6:	2300      	movs	r3, #0
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	2102      	movs	r1, #2
 80051dc:	f88d 1004 	strb.w	r1, [sp, #4]
 80051e0:	9901      	ldr	r1, [sp, #4]
 80051e2:	9119      	str	r1, [sp, #100]	; 0x64
 80051e4:	4619      	mov	r1, r3
 80051e6:	f363 0100 	bfi	r1, r3, #0, #1
 80051ea:	f363 0141 	bfi	r1, r3, #1, #1
 80051ee:	f363 0182 	bfi	r1, r3, #2, #1
 80051f2:	f363 01c5 	bfi	r1, r3, #3, #3
 80051f6:	f362 1188 	bfi	r1, r2, #6, #3
 80051fa:	2208      	movs	r2, #8
 80051fc:	f362 2152 	bfi	r1, r2, #9, #10
 8005200:	f363 41de 	bfi	r1, r3, #19, #12
 8005204:	f363 71df 	bfi	r1, r3, #31, #1
 8005208:	aa19      	add	r2, sp, #100	; 0x64
 800520a:	4862      	ldr	r0, [pc, #392]	; (8005394 <bus_fault+0x2b8>)
 800520c:	f009 f901 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8005210:	e795      	b.n	800513e <bus_fault+0x62>
		PR_FAULT_INFO("  Precise data bus error");
 8005212:	2201      	movs	r2, #1
 8005214:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005218:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <bus_fault+0x2c8>)
 800521a:	9320      	str	r3, [sp, #128]	; 0x80
 800521c:	2300      	movs	r3, #0
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	2102      	movs	r1, #2
 8005222:	f88d 1004 	strb.w	r1, [sp, #4]
 8005226:	9901      	ldr	r1, [sp, #4]
 8005228:	911f      	str	r1, [sp, #124]	; 0x7c
 800522a:	4619      	mov	r1, r3
 800522c:	f363 0100 	bfi	r1, r3, #0, #1
 8005230:	f363 0141 	bfi	r1, r3, #1, #1
 8005234:	f363 0182 	bfi	r1, r3, #2, #1
 8005238:	f363 01c5 	bfi	r1, r3, #3, #3
 800523c:	f362 1188 	bfi	r1, r2, #6, #3
 8005240:	2208      	movs	r2, #8
 8005242:	f362 2152 	bfi	r1, r2, #9, #10
 8005246:	f363 41de 	bfi	r1, r3, #19, #12
 800524a:	f363 71df 	bfi	r1, r3, #31, #1
 800524e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005250:	4850      	ldr	r0, [pc, #320]	; (8005394 <bus_fault+0x2b8>)
 8005252:	f009 f8de 	bl	800e412 <z_impl_z_log_msg2_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
 8005256:	4b50      	ldr	r3, [pc, #320]	; (8005398 <bus_fault+0x2bc>)
 8005258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005260:	f43f af72 	beq.w	8005148 <bus_fault+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8005264:	2001      	movs	r0, #1
 8005266:	f8ad 0008 	strh.w	r0, [sp, #8]
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <bus_fault+0x2cc>)
 800526c:	9326      	str	r3, [sp, #152]	; 0x98
 800526e:	9227      	str	r2, [sp, #156]	; 0x9c
 8005270:	2300      	movs	r3, #0
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2203      	movs	r2, #3
 8005276:	f88d 2004 	strb.w	r2, [sp, #4]
 800527a:	9a01      	ldr	r2, [sp, #4]
 800527c:	9225      	str	r2, [sp, #148]	; 0x94
 800527e:	4619      	mov	r1, r3
 8005280:	f363 0100 	bfi	r1, r3, #0, #1
 8005284:	f363 0141 	bfi	r1, r3, #1, #1
 8005288:	f363 0182 	bfi	r1, r3, #2, #1
 800528c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005290:	f360 1188 	bfi	r1, r0, #6, #3
 8005294:	220c      	movs	r2, #12
 8005296:	f362 2152 	bfi	r1, r2, #9, #10
 800529a:	f363 41de 	bfi	r1, r3, #19, #12
 800529e:	f363 71df 	bfi	r1, r3, #31, #1
 80052a2:	aa25      	add	r2, sp, #148	; 0x94
 80052a4:	483b      	ldr	r0, [pc, #236]	; (8005394 <bus_fault+0x2b8>)
 80052a6:	f009 f8b4 	bl	800e412 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	f43f af4c 	beq.w	8005148 <bus_fault+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 80052b0:	4a39      	ldr	r2, [pc, #228]	; (8005398 <bus_fault+0x2bc>)
 80052b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80052b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052b8:	6293      	str	r3, [r2, #40]	; 0x28
 80052ba:	e745      	b.n	8005148 <bus_fault+0x6c>
		PR_FAULT_INFO("  Imprecise data bus error");
 80052bc:	2201      	movs	r2, #1
 80052be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80052c2:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <bus_fault+0x2d0>)
 80052c4:	932c      	str	r3, [sp, #176]	; 0xb0
 80052c6:	2300      	movs	r3, #0
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	2102      	movs	r1, #2
 80052cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80052d0:	9901      	ldr	r1, [sp, #4]
 80052d2:	912b      	str	r1, [sp, #172]	; 0xac
 80052d4:	4619      	mov	r1, r3
 80052d6:	f363 0100 	bfi	r1, r3, #0, #1
 80052da:	f363 0141 	bfi	r1, r3, #1, #1
 80052de:	f363 0182 	bfi	r1, r3, #2, #1
 80052e2:	f363 01c5 	bfi	r1, r3, #3, #3
 80052e6:	f362 1188 	bfi	r1, r2, #6, #3
 80052ea:	2208      	movs	r2, #8
 80052ec:	f362 2152 	bfi	r1, r2, #9, #10
 80052f0:	f363 41de 	bfi	r1, r3, #19, #12
 80052f4:	f363 71df 	bfi	r1, r3, #31, #1
 80052f8:	aa2b      	add	r2, sp, #172	; 0xac
 80052fa:	4826      	ldr	r0, [pc, #152]	; (8005394 <bus_fault+0x2b8>)
 80052fc:	f009 f889 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8005300:	e728      	b.n	8005154 <bus_fault+0x78>
		PR_FAULT_INFO("  Instruction bus error");
 8005302:	2201      	movs	r2, #1
 8005304:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005308:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <bus_fault+0x2d4>)
 800530a:	9338      	str	r3, [sp, #224]	; 0xe0
 800530c:	2300      	movs	r3, #0
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	2102      	movs	r1, #2
 8005312:	f88d 1004 	strb.w	r1, [sp, #4]
 8005316:	9901      	ldr	r1, [sp, #4]
 8005318:	9137      	str	r1, [sp, #220]	; 0xdc
 800531a:	4619      	mov	r1, r3
 800531c:	f363 0100 	bfi	r1, r3, #0, #1
 8005320:	f363 0141 	bfi	r1, r3, #1, #1
 8005324:	f363 0182 	bfi	r1, r3, #2, #1
 8005328:	f363 01c5 	bfi	r1, r3, #3, #3
 800532c:	f362 1188 	bfi	r1, r2, #6, #3
 8005330:	2208      	movs	r2, #8
 8005332:	f362 2152 	bfi	r1, r2, #9, #10
 8005336:	f363 41de 	bfi	r1, r3, #19, #12
 800533a:	f363 71df 	bfi	r1, r3, #31, #1
 800533e:	aa37      	add	r2, sp, #220	; 0xdc
 8005340:	4814      	ldr	r0, [pc, #80]	; (8005394 <bus_fault+0x2b8>)
 8005342:	f009 f866 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8005346:	e711      	b.n	800516c <bus_fault+0x90>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8005348:	2201      	movs	r2, #1
 800534a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <bus_fault+0x2d8>)
 8005350:	9332      	str	r3, [sp, #200]	; 0xc8
 8005352:	2300      	movs	r3, #0
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	2102      	movs	r1, #2
 8005358:	f88d 1004 	strb.w	r1, [sp, #4]
 800535c:	9901      	ldr	r1, [sp, #4]
 800535e:	9131      	str	r1, [sp, #196]	; 0xc4
 8005360:	4619      	mov	r1, r3
 8005362:	f363 0100 	bfi	r1, r3, #0, #1
 8005366:	f363 0141 	bfi	r1, r3, #1, #1
 800536a:	f363 0182 	bfi	r1, r3, #2, #1
 800536e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005372:	f362 1188 	bfi	r1, r2, #6, #3
 8005376:	2208      	movs	r2, #8
 8005378:	f362 2152 	bfi	r1, r2, #9, #10
 800537c:	f363 41de 	bfi	r1, r3, #19, #12
 8005380:	f363 71df 	bfi	r1, r3, #31, #1
 8005384:	aa31      	add	r2, sp, #196	; 0xc4
 8005386:	4803      	ldr	r0, [pc, #12]	; (8005394 <bus_fault+0x2b8>)
 8005388:	f009 f843 	bl	800e412 <z_impl_z_log_msg2_static_create>
 800538c:	e6ee      	b.n	800516c <bus_fault+0x90>
 800538e:	bf00      	nop
 8005390:	08011210 	.word	0x08011210
 8005394:	08010ad0 	.word	0x08010ad0
 8005398:	e000ed00 	.word	0xe000ed00
 800539c:	08011228 	.word	0x08011228
 80053a0:	0801123c 	.word	0x0801123c
 80053a4:	08011250 	.word	0x08011250
 80053a8:	0801126c 	.word	0x0801126c
 80053ac:	08011284 	.word	0x08011284
 80053b0:	080112a0 	.word	0x080112a0
 80053b4:	080112b8 	.word	0x080112b8

080053b8 <usage_fault>:
{
 80053b8:	b500      	push	{lr}
 80053ba:	b0b5      	sub	sp, #212	; 0xd4
	PR_FAULT_INFO("***** USAGE FAULT *****");
 80053bc:	2201      	movs	r2, #1
 80053be:	f8ad 2008 	strh.w	r2, [sp, #8]
 80053c2:	4b8e      	ldr	r3, [pc, #568]	; (80055fc <usage_fault+0x244>)
 80053c4:	930e      	str	r3, [sp, #56]	; 0x38
 80053c6:	2300      	movs	r3, #0
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	2102      	movs	r1, #2
 80053cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80053d0:	9901      	ldr	r1, [sp, #4]
 80053d2:	910d      	str	r1, [sp, #52]	; 0x34
 80053d4:	4619      	mov	r1, r3
 80053d6:	f363 0100 	bfi	r1, r3, #0, #1
 80053da:	f363 0141 	bfi	r1, r3, #1, #1
 80053de:	f363 0182 	bfi	r1, r3, #2, #1
 80053e2:	f363 01c5 	bfi	r1, r3, #3, #3
 80053e6:	f362 1188 	bfi	r1, r2, #6, #3
 80053ea:	2208      	movs	r2, #8
 80053ec:	f362 2152 	bfi	r1, r2, #9, #10
 80053f0:	f363 41de 	bfi	r1, r3, #19, #12
 80053f4:	f363 71df 	bfi	r1, r3, #31, #1
 80053f8:	aa0d      	add	r2, sp, #52	; 0x34
 80053fa:	4881      	ldr	r0, [pc, #516]	; (8005600 <usage_fault+0x248>)
 80053fc:	f009 f809 	bl	800e412 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8005400:	4b80      	ldr	r3, [pc, #512]	; (8005604 <usage_fault+0x24c>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005408:	d125      	bne.n	8005456 <usage_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800540a:	4b7e      	ldr	r3, [pc, #504]	; (8005604 <usage_fault+0x24c>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005412:	d143      	bne.n	800549c <usage_fault+0xe4>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8005414:	4b7b      	ldr	r3, [pc, #492]	; (8005604 <usage_fault+0x24c>)
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800541c:	d161      	bne.n	80054e2 <usage_fault+0x12a>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800541e:	4b79      	ldr	r3, [pc, #484]	; (8005604 <usage_fault+0x24c>)
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005426:	d17f      	bne.n	8005528 <usage_fault+0x170>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <usage_fault+0x24c>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005430:	f040 809d 	bne.w	800556e <usage_fault+0x1b6>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8005434:	4b73      	ldr	r3, [pc, #460]	; (8005604 <usage_fault+0x24c>)
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800543c:	f040 80ba 	bne.w	80055b4 <usage_fault+0x1fc>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005440:	4a70      	ldr	r2, [pc, #448]	; (8005604 <usage_fault+0x24c>)
 8005442:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005444:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005448:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800544c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800544e:	2000      	movs	r0, #0
 8005450:	b035      	add	sp, #212	; 0xd4
 8005452:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 8005456:	2201      	movs	r2, #1
 8005458:	f8ad 2008 	strh.w	r2, [sp, #8]
 800545c:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <usage_fault+0x250>)
 800545e:	9314      	str	r3, [sp, #80]	; 0x50
 8005460:	2300      	movs	r3, #0
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	2102      	movs	r1, #2
 8005466:	f88d 1004 	strb.w	r1, [sp, #4]
 800546a:	9901      	ldr	r1, [sp, #4]
 800546c:	9113      	str	r1, [sp, #76]	; 0x4c
 800546e:	4619      	mov	r1, r3
 8005470:	f363 0100 	bfi	r1, r3, #0, #1
 8005474:	f363 0141 	bfi	r1, r3, #1, #1
 8005478:	f363 0182 	bfi	r1, r3, #2, #1
 800547c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005480:	f362 1188 	bfi	r1, r2, #6, #3
 8005484:	2208      	movs	r2, #8
 8005486:	f362 2152 	bfi	r1, r2, #9, #10
 800548a:	f363 41de 	bfi	r1, r3, #19, #12
 800548e:	f363 71df 	bfi	r1, r3, #31, #1
 8005492:	aa13      	add	r2, sp, #76	; 0x4c
 8005494:	485a      	ldr	r0, [pc, #360]	; (8005600 <usage_fault+0x248>)
 8005496:	f008 ffbc 	bl	800e412 <z_impl_z_log_msg2_static_create>
 800549a:	e7b6      	b.n	800540a <usage_fault+0x52>
		PR_FAULT_INFO("  Unaligned memory access");
 800549c:	2201      	movs	r2, #1
 800549e:	f8ad 2008 	strh.w	r2, [sp, #8]
 80054a2:	4b5a      	ldr	r3, [pc, #360]	; (800560c <usage_fault+0x254>)
 80054a4:	931a      	str	r3, [sp, #104]	; 0x68
 80054a6:	2300      	movs	r3, #0
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	2102      	movs	r1, #2
 80054ac:	f88d 1004 	strb.w	r1, [sp, #4]
 80054b0:	9901      	ldr	r1, [sp, #4]
 80054b2:	9119      	str	r1, [sp, #100]	; 0x64
 80054b4:	4619      	mov	r1, r3
 80054b6:	f363 0100 	bfi	r1, r3, #0, #1
 80054ba:	f363 0141 	bfi	r1, r3, #1, #1
 80054be:	f363 0182 	bfi	r1, r3, #2, #1
 80054c2:	f363 01c5 	bfi	r1, r3, #3, #3
 80054c6:	f362 1188 	bfi	r1, r2, #6, #3
 80054ca:	2208      	movs	r2, #8
 80054cc:	f362 2152 	bfi	r1, r2, #9, #10
 80054d0:	f363 41de 	bfi	r1, r3, #19, #12
 80054d4:	f363 71df 	bfi	r1, r3, #31, #1
 80054d8:	aa19      	add	r2, sp, #100	; 0x64
 80054da:	4849      	ldr	r0, [pc, #292]	; (8005600 <usage_fault+0x248>)
 80054dc:	f008 ff99 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80054e0:	e798      	b.n	8005414 <usage_fault+0x5c>
		PR_FAULT_INFO("  No coprocessor instructions");
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8ad 2008 	strh.w	r2, [sp, #8]
 80054e8:	4b49      	ldr	r3, [pc, #292]	; (8005610 <usage_fault+0x258>)
 80054ea:	9320      	str	r3, [sp, #128]	; 0x80
 80054ec:	2300      	movs	r3, #0
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2102      	movs	r1, #2
 80054f2:	f88d 1004 	strb.w	r1, [sp, #4]
 80054f6:	9901      	ldr	r1, [sp, #4]
 80054f8:	911f      	str	r1, [sp, #124]	; 0x7c
 80054fa:	4619      	mov	r1, r3
 80054fc:	f363 0100 	bfi	r1, r3, #0, #1
 8005500:	f363 0141 	bfi	r1, r3, #1, #1
 8005504:	f363 0182 	bfi	r1, r3, #2, #1
 8005508:	f363 01c5 	bfi	r1, r3, #3, #3
 800550c:	f362 1188 	bfi	r1, r2, #6, #3
 8005510:	2208      	movs	r2, #8
 8005512:	f362 2152 	bfi	r1, r2, #9, #10
 8005516:	f363 41de 	bfi	r1, r3, #19, #12
 800551a:	f363 71df 	bfi	r1, r3, #31, #1
 800551e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005520:	4837      	ldr	r0, [pc, #220]	; (8005600 <usage_fault+0x248>)
 8005522:	f008 ff76 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8005526:	e77a      	b.n	800541e <usage_fault+0x66>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8005528:	2201      	movs	r2, #1
 800552a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800552e:	4b39      	ldr	r3, [pc, #228]	; (8005614 <usage_fault+0x25c>)
 8005530:	9326      	str	r3, [sp, #152]	; 0x98
 8005532:	2300      	movs	r3, #0
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	2102      	movs	r1, #2
 8005538:	f88d 1004 	strb.w	r1, [sp, #4]
 800553c:	9901      	ldr	r1, [sp, #4]
 800553e:	9125      	str	r1, [sp, #148]	; 0x94
 8005540:	4619      	mov	r1, r3
 8005542:	f363 0100 	bfi	r1, r3, #0, #1
 8005546:	f363 0141 	bfi	r1, r3, #1, #1
 800554a:	f363 0182 	bfi	r1, r3, #2, #1
 800554e:	f363 01c5 	bfi	r1, r3, #3, #3
 8005552:	f362 1188 	bfi	r1, r2, #6, #3
 8005556:	2208      	movs	r2, #8
 8005558:	f362 2152 	bfi	r1, r2, #9, #10
 800555c:	f363 41de 	bfi	r1, r3, #19, #12
 8005560:	f363 71df 	bfi	r1, r3, #31, #1
 8005564:	aa25      	add	r2, sp, #148	; 0x94
 8005566:	4826      	ldr	r0, [pc, #152]	; (8005600 <usage_fault+0x248>)
 8005568:	f008 ff53 	bl	800e412 <z_impl_z_log_msg2_static_create>
 800556c:	e75c      	b.n	8005428 <usage_fault+0x70>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800556e:	2201      	movs	r2, #1
 8005570:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <usage_fault+0x260>)
 8005576:	932c      	str	r3, [sp, #176]	; 0xb0
 8005578:	2300      	movs	r3, #0
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	2102      	movs	r1, #2
 800557e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005582:	9901      	ldr	r1, [sp, #4]
 8005584:	912b      	str	r1, [sp, #172]	; 0xac
 8005586:	4619      	mov	r1, r3
 8005588:	f363 0100 	bfi	r1, r3, #0, #1
 800558c:	f363 0141 	bfi	r1, r3, #1, #1
 8005590:	f363 0182 	bfi	r1, r3, #2, #1
 8005594:	f363 01c5 	bfi	r1, r3, #3, #3
 8005598:	f362 1188 	bfi	r1, r2, #6, #3
 800559c:	2208      	movs	r2, #8
 800559e:	f362 2152 	bfi	r1, r2, #9, #10
 80055a2:	f363 41de 	bfi	r1, r3, #19, #12
 80055a6:	f363 71df 	bfi	r1, r3, #31, #1
 80055aa:	aa2b      	add	r2, sp, #172	; 0xac
 80055ac:	4814      	ldr	r0, [pc, #80]	; (8005600 <usage_fault+0x248>)
 80055ae:	f008 ff30 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80055b2:	e73f      	b.n	8005434 <usage_fault+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 80055b4:	2201      	movs	r2, #1
 80055b6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80055ba:	4b18      	ldr	r3, [pc, #96]	; (800561c <usage_fault+0x264>)
 80055bc:	9332      	str	r3, [sp, #200]	; 0xc8
 80055be:	2300      	movs	r3, #0
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	2102      	movs	r1, #2
 80055c4:	f88d 1004 	strb.w	r1, [sp, #4]
 80055c8:	9901      	ldr	r1, [sp, #4]
 80055ca:	9131      	str	r1, [sp, #196]	; 0xc4
 80055cc:	4619      	mov	r1, r3
 80055ce:	f363 0100 	bfi	r1, r3, #0, #1
 80055d2:	f363 0141 	bfi	r1, r3, #1, #1
 80055d6:	f363 0182 	bfi	r1, r3, #2, #1
 80055da:	f363 01c5 	bfi	r1, r3, #3, #3
 80055de:	f362 1188 	bfi	r1, r2, #6, #3
 80055e2:	2208      	movs	r2, #8
 80055e4:	f362 2152 	bfi	r1, r2, #9, #10
 80055e8:	f363 41de 	bfi	r1, r3, #19, #12
 80055ec:	f363 71df 	bfi	r1, r3, #31, #1
 80055f0:	aa31      	add	r2, sp, #196	; 0xc4
 80055f2:	4803      	ldr	r0, [pc, #12]	; (8005600 <usage_fault+0x248>)
 80055f4:	f008 ff0d 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80055f8:	e722      	b.n	8005440 <usage_fault+0x88>
 80055fa:	bf00      	nop
 80055fc:	080112e8 	.word	0x080112e8
 8005600:	08010ad0 	.word	0x08010ad0
 8005604:	e000ed00 	.word	0xe000ed00
 8005608:	08011300 	.word	0x08011300
 800560c:	08011314 	.word	0x08011314
 8005610:	08011330 	.word	0x08011330
 8005614:	08011350 	.word	0x08011350
 8005618:	08011378 	.word	0x08011378
 800561c:	08011394 	.word	0x08011394

08005620 <debug_monitor>:
{
 8005620:	b500      	push	{lr}
 8005622:	b091      	sub	sp, #68	; 0x44
	*recoverable = false;
 8005624:	2300      	movs	r3, #0
 8005626:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
 8005628:	2201      	movs	r2, #1
 800562a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800562e:	4910      	ldr	r1, [pc, #64]	; (8005670 <debug_monitor+0x50>)
 8005630:	910e      	str	r1, [sp, #56]	; 0x38
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	2102      	movs	r1, #2
 8005636:	f88d 1004 	strb.w	r1, [sp, #4]
 800563a:	9901      	ldr	r1, [sp, #4]
 800563c:	910d      	str	r1, [sp, #52]	; 0x34
 800563e:	4619      	mov	r1, r3
 8005640:	f363 0100 	bfi	r1, r3, #0, #1
 8005644:	f363 0141 	bfi	r1, r3, #1, #1
 8005648:	f363 0182 	bfi	r1, r3, #2, #1
 800564c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005650:	f362 1188 	bfi	r1, r2, #6, #3
 8005654:	2208      	movs	r2, #8
 8005656:	f362 2152 	bfi	r1, r2, #9, #10
 800565a:	f363 41de 	bfi	r1, r3, #19, #12
 800565e:	f363 71df 	bfi	r1, r3, #31, #1
 8005662:	aa0d      	add	r2, sp, #52	; 0x34
 8005664:	4803      	ldr	r0, [pc, #12]	; (8005674 <debug_monitor+0x54>)
 8005666:	f008 fed4 	bl	800e412 <z_impl_z_log_msg2_static_create>
}
 800566a:	b011      	add	sp, #68	; 0x44
 800566c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005670:	080113c0 	.word	0x080113c0
 8005674:	08010ad0 	.word	0x08010ad0

08005678 <mem_manage_fault>:
{
 8005678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567a:	b0b5      	sub	sp, #212	; 0xd4
 800567c:	4605      	mov	r5, r0
 800567e:	460c      	mov	r4, r1
 8005680:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8005682:	2201      	movs	r2, #1
 8005684:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005688:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <mem_manage_fault+0x2a0>)
 800568a:	930e      	str	r3, [sp, #56]	; 0x38
 800568c:	2300      	movs	r3, #0
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	2102      	movs	r1, #2
 8005692:	f88d 1004 	strb.w	r1, [sp, #4]
 8005696:	9901      	ldr	r1, [sp, #4]
 8005698:	910d      	str	r1, [sp, #52]	; 0x34
 800569a:	4619      	mov	r1, r3
 800569c:	f363 0100 	bfi	r1, r3, #0, #1
 80056a0:	f363 0141 	bfi	r1, r3, #1, #1
 80056a4:	f363 0182 	bfi	r1, r3, #2, #1
 80056a8:	f363 01c5 	bfi	r1, r3, #3, #3
 80056ac:	f362 1188 	bfi	r1, r2, #6, #3
 80056b0:	2208      	movs	r2, #8
 80056b2:	f362 2152 	bfi	r1, r2, #9, #10
 80056b6:	f363 41de 	bfi	r1, r3, #19, #12
 80056ba:	f363 71df 	bfi	r1, r3, #31, #1
 80056be:	aa0d      	add	r2, sp, #52	; 0x34
 80056c0:	4896      	ldr	r0, [pc, #600]	; (800591c <mem_manage_fault+0x2a4>)
 80056c2:	f008 fea6 	bl	800e412 <z_impl_z_log_msg2_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80056c6:	4b96      	ldr	r3, [pc, #600]	; (8005920 <mem_manage_fault+0x2a8>)
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f013 0f10 	tst.w	r3, #16
 80056ce:	d134      	bne.n	800573a <mem_manage_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80056d0:	4b93      	ldr	r3, [pc, #588]	; (8005920 <mem_manage_fault+0x2a8>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f013 0f08 	tst.w	r3, #8
 80056d8:	d152      	bne.n	8005780 <mem_manage_fault+0x108>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80056da:	4b91      	ldr	r3, [pc, #580]	; (8005920 <mem_manage_fault+0x2a8>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f013 0f02 	tst.w	r3, #2
 80056e2:	d170      	bne.n	80057c6 <mem_manage_fault+0x14e>
	uint32_t mmfar = -EINVAL;
 80056e4:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80056e8:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <mem_manage_fault+0x2a8>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f013 0f01 	tst.w	r3, #1
 80056f0:	f040 80c0 	bne.w	8005874 <mem_manage_fault+0x1fc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80056f4:	4b8a      	ldr	r3, [pc, #552]	; (8005920 <mem_manage_fault+0x2a8>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f013 0f20 	tst.w	r3, #32
 80056fc:	f040 80dd 	bne.w	80058ba <mem_manage_fault+0x242>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8005700:	4b87      	ldr	r3, [pc, #540]	; (8005920 <mem_manage_fault+0x2a8>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f013 0f10 	tst.w	r3, #16
 8005708:	d104      	bne.n	8005714 <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 800570a:	4b85      	ldr	r3, [pc, #532]	; (8005920 <mem_manage_fault+0x2a8>)
 800570c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 800570e:	f014 0402 	ands.w	r4, r4, #2
 8005712:	d005      	beq.n	8005720 <mem_manage_fault+0xa8>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8005714:	4b82      	ldr	r3, [pc, #520]	; (8005920 <mem_manage_fault+0x2a8>)
 8005716:	685c      	ldr	r4, [r3, #4]
 8005718:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 800571c:	f040 80f0 	bne.w	8005900 <mem_manage_fault+0x288>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8005720:	4a7f      	ldr	r2, [pc, #508]	; (8005920 <mem_manage_fault+0x2a8>)
 8005722:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005724:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8005728:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 800572a:	2101      	movs	r1, #1
 800572c:	4628      	mov	r0, r5
 800572e:	f008 fefb 	bl	800e528 <memory_fault_recoverable>
 8005732:	7030      	strb	r0, [r6, #0]
}
 8005734:	4620      	mov	r0, r4
 8005736:	b035      	add	sp, #212	; 0xd4
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 800573a:	2201      	movs	r2, #1
 800573c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005740:	4b78      	ldr	r3, [pc, #480]	; (8005924 <mem_manage_fault+0x2ac>)
 8005742:	9314      	str	r3, [sp, #80]	; 0x50
 8005744:	2300      	movs	r3, #0
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	2102      	movs	r1, #2
 800574a:	f88d 1004 	strb.w	r1, [sp, #4]
 800574e:	9901      	ldr	r1, [sp, #4]
 8005750:	9113      	str	r1, [sp, #76]	; 0x4c
 8005752:	4619      	mov	r1, r3
 8005754:	f363 0100 	bfi	r1, r3, #0, #1
 8005758:	f363 0141 	bfi	r1, r3, #1, #1
 800575c:	f363 0182 	bfi	r1, r3, #2, #1
 8005760:	f363 01c5 	bfi	r1, r3, #3, #3
 8005764:	f362 1188 	bfi	r1, r2, #6, #3
 8005768:	2208      	movs	r2, #8
 800576a:	f362 2152 	bfi	r1, r2, #9, #10
 800576e:	f363 41de 	bfi	r1, r3, #19, #12
 8005772:	f363 71df 	bfi	r1, r3, #31, #1
 8005776:	aa13      	add	r2, sp, #76	; 0x4c
 8005778:	4868      	ldr	r0, [pc, #416]	; (800591c <mem_manage_fault+0x2a4>)
 800577a:	f008 fe4a 	bl	800e412 <z_impl_z_log_msg2_static_create>
 800577e:	e7a7      	b.n	80056d0 <mem_manage_fault+0x58>
		PR_FAULT_INFO("  Unstacking error");
 8005780:	2201      	movs	r2, #1
 8005782:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005786:	4b68      	ldr	r3, [pc, #416]	; (8005928 <mem_manage_fault+0x2b0>)
 8005788:	931a      	str	r3, [sp, #104]	; 0x68
 800578a:	2300      	movs	r3, #0
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	2102      	movs	r1, #2
 8005790:	f88d 1004 	strb.w	r1, [sp, #4]
 8005794:	9901      	ldr	r1, [sp, #4]
 8005796:	9119      	str	r1, [sp, #100]	; 0x64
 8005798:	4619      	mov	r1, r3
 800579a:	f363 0100 	bfi	r1, r3, #0, #1
 800579e:	f363 0141 	bfi	r1, r3, #1, #1
 80057a2:	f363 0182 	bfi	r1, r3, #2, #1
 80057a6:	f363 01c5 	bfi	r1, r3, #3, #3
 80057aa:	f362 1188 	bfi	r1, r2, #6, #3
 80057ae:	2208      	movs	r2, #8
 80057b0:	f362 2152 	bfi	r1, r2, #9, #10
 80057b4:	f363 41de 	bfi	r1, r3, #19, #12
 80057b8:	f363 71df 	bfi	r1, r3, #31, #1
 80057bc:	aa19      	add	r2, sp, #100	; 0x64
 80057be:	4857      	ldr	r0, [pc, #348]	; (800591c <mem_manage_fault+0x2a4>)
 80057c0:	f008 fe27 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80057c4:	e789      	b.n	80056da <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Data Access Violation");
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8ad 2008 	strh.w	r2, [sp, #8]
 80057cc:	4b57      	ldr	r3, [pc, #348]	; (800592c <mem_manage_fault+0x2b4>)
 80057ce:	9320      	str	r3, [sp, #128]	; 0x80
 80057d0:	2300      	movs	r3, #0
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	2102      	movs	r1, #2
 80057d6:	f88d 1004 	strb.w	r1, [sp, #4]
 80057da:	9901      	ldr	r1, [sp, #4]
 80057dc:	911f      	str	r1, [sp, #124]	; 0x7c
 80057de:	4619      	mov	r1, r3
 80057e0:	f363 0100 	bfi	r1, r3, #0, #1
 80057e4:	f363 0141 	bfi	r1, r3, #1, #1
 80057e8:	f363 0182 	bfi	r1, r3, #2, #1
 80057ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80057f0:	f362 1188 	bfi	r1, r2, #6, #3
 80057f4:	2208      	movs	r2, #8
 80057f6:	f362 2152 	bfi	r1, r2, #9, #10
 80057fa:	f363 41de 	bfi	r1, r3, #19, #12
 80057fe:	f363 71df 	bfi	r1, r3, #31, #1
 8005802:	aa1f      	add	r2, sp, #124	; 0x7c
 8005804:	4845      	ldr	r0, [pc, #276]	; (800591c <mem_manage_fault+0x2a4>)
 8005806:	f008 fe04 	bl	800e412 <z_impl_z_log_msg2_static_create>
		uint32_t temp = SCB->MMFAR;
 800580a:	4b45      	ldr	r3, [pc, #276]	; (8005920 <mem_manage_fault+0x2a8>)
 800580c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005814:	d102      	bne.n	800581c <mem_manage_fault+0x1a4>
	uint32_t mmfar = -EINVAL;
 8005816:	f06f 0715 	mvn.w	r7, #21
 800581a:	e765      	b.n	80056e8 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800581c:	2201      	movs	r2, #1
 800581e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005822:	4b43      	ldr	r3, [pc, #268]	; (8005930 <mem_manage_fault+0x2b8>)
 8005824:	9326      	str	r3, [sp, #152]	; 0x98
 8005826:	9727      	str	r7, [sp, #156]	; 0x9c
 8005828:	2300      	movs	r3, #0
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	2103      	movs	r1, #3
 800582e:	f88d 1004 	strb.w	r1, [sp, #4]
 8005832:	9901      	ldr	r1, [sp, #4]
 8005834:	9125      	str	r1, [sp, #148]	; 0x94
 8005836:	4619      	mov	r1, r3
 8005838:	f363 0100 	bfi	r1, r3, #0, #1
 800583c:	f363 0141 	bfi	r1, r3, #1, #1
 8005840:	f363 0182 	bfi	r1, r3, #2, #1
 8005844:	f363 01c5 	bfi	r1, r3, #3, #3
 8005848:	f362 1188 	bfi	r1, r2, #6, #3
 800584c:	220c      	movs	r2, #12
 800584e:	f362 2152 	bfi	r1, r2, #9, #10
 8005852:	f363 41de 	bfi	r1, r3, #19, #12
 8005856:	f363 71df 	bfi	r1, r3, #31, #1
 800585a:	aa25      	add	r2, sp, #148	; 0x94
 800585c:	482f      	ldr	r0, [pc, #188]	; (800591c <mem_manage_fault+0x2a4>)
 800585e:	f008 fdd8 	bl	800e412 <z_impl_z_log_msg2_static_create>
			if (from_hard_fault != 0) {
 8005862:	2c00      	cmp	r4, #0
 8005864:	f43f af40 	beq.w	80056e8 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8005868:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <mem_manage_fault+0x2a8>)
 800586a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800586c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005870:	6293      	str	r3, [r2, #40]	; 0x28
 8005872:	e739      	b.n	80056e8 <mem_manage_fault+0x70>
		PR_FAULT_INFO("  Instruction Access Violation");
 8005874:	2201      	movs	r2, #1
 8005876:	f8ad 2008 	strh.w	r2, [sp, #8]
 800587a:	4b2e      	ldr	r3, [pc, #184]	; (8005934 <mem_manage_fault+0x2bc>)
 800587c:	932c      	str	r3, [sp, #176]	; 0xb0
 800587e:	2300      	movs	r3, #0
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	2102      	movs	r1, #2
 8005884:	f88d 1004 	strb.w	r1, [sp, #4]
 8005888:	9901      	ldr	r1, [sp, #4]
 800588a:	912b      	str	r1, [sp, #172]	; 0xac
 800588c:	4619      	mov	r1, r3
 800588e:	f363 0100 	bfi	r1, r3, #0, #1
 8005892:	f363 0141 	bfi	r1, r3, #1, #1
 8005896:	f363 0182 	bfi	r1, r3, #2, #1
 800589a:	f363 01c5 	bfi	r1, r3, #3, #3
 800589e:	f362 1188 	bfi	r1, r2, #6, #3
 80058a2:	2208      	movs	r2, #8
 80058a4:	f362 2152 	bfi	r1, r2, #9, #10
 80058a8:	f363 41de 	bfi	r1, r3, #19, #12
 80058ac:	f363 71df 	bfi	r1, r3, #31, #1
 80058b0:	aa2b      	add	r2, sp, #172	; 0xac
 80058b2:	481a      	ldr	r0, [pc, #104]	; (800591c <mem_manage_fault+0x2a4>)
 80058b4:	f008 fdad 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80058b8:	e71c      	b.n	80056f4 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8ad 2008 	strh.w	r2, [sp, #8]
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <mem_manage_fault+0x2c0>)
 80058c2:	9332      	str	r3, [sp, #200]	; 0xc8
 80058c4:	2300      	movs	r3, #0
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2102      	movs	r1, #2
 80058ca:	f88d 1004 	strb.w	r1, [sp, #4]
 80058ce:	9901      	ldr	r1, [sp, #4]
 80058d0:	9131      	str	r1, [sp, #196]	; 0xc4
 80058d2:	4619      	mov	r1, r3
 80058d4:	f363 0100 	bfi	r1, r3, #0, #1
 80058d8:	f363 0141 	bfi	r1, r3, #1, #1
 80058dc:	f363 0182 	bfi	r1, r3, #2, #1
 80058e0:	f363 01c5 	bfi	r1, r3, #3, #3
 80058e4:	f362 1188 	bfi	r1, r2, #6, #3
 80058e8:	2208      	movs	r2, #8
 80058ea:	f362 2152 	bfi	r1, r2, #9, #10
 80058ee:	f363 41de 	bfi	r1, r3, #19, #12
 80058f2:	f363 71df 	bfi	r1, r3, #31, #1
 80058f6:	aa31      	add	r2, sp, #196	; 0xc4
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <mem_manage_fault+0x2a4>)
 80058fa:	f008 fd8a 	bl	800e412 <z_impl_z_log_msg2_static_create>
 80058fe:	e6ff      	b.n	8005700 <mem_manage_fault+0x88>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8005900:	4629      	mov	r1, r5
 8005902:	4638      	mov	r0, r7
 8005904:	f7ff fb6e 	bl	8004fe4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8005908:	4604      	mov	r4, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	f43f af08 	beq.w	8005720 <mem_manage_fault+0xa8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005910:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8005914:	2402      	movs	r4, #2
 8005916:	e703      	b.n	8005720 <mem_manage_fault+0xa8>
 8005918:	080113e4 	.word	0x080113e4
 800591c:	08010ad0 	.word	0x08010ad0
 8005920:	e000ed00 	.word	0xe000ed00
 8005924:	080113fc 	.word	0x080113fc
 8005928:	0801123c 	.word	0x0801123c
 800592c:	08011430 	.word	0x08011430
 8005930:	08011448 	.word	0x08011448
 8005934:	08011460 	.word	0x08011460
 8005938:	080112b8 	.word	0x080112b8

0800593c <hard_fault>:
{
 800593c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593e:	b0a9      	sub	sp, #164	; 0xa4
 8005940:	4607      	mov	r7, r0
 8005942:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 8005944:	2301      	movs	r3, #1
 8005946:	f8ad 3008 	strh.w	r3, [sp, #8]
 800594a:	4a73      	ldr	r2, [pc, #460]	; (8005b18 <hard_fault+0x1dc>)
 800594c:	920e      	str	r2, [sp, #56]	; 0x38
 800594e:	2400      	movs	r4, #0
 8005950:	9401      	str	r4, [sp, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f88d 2004 	strb.w	r2, [sp, #4]
 8005958:	9a01      	ldr	r2, [sp, #4]
 800595a:	920d      	str	r2, [sp, #52]	; 0x34
 800595c:	4621      	mov	r1, r4
 800595e:	f364 0100 	bfi	r1, r4, #0, #1
 8005962:	f364 0141 	bfi	r1, r4, #1, #1
 8005966:	f364 0182 	bfi	r1, r4, #2, #1
 800596a:	f364 01c5 	bfi	r1, r4, #3, #3
 800596e:	f363 1188 	bfi	r1, r3, #6, #3
 8005972:	2308      	movs	r3, #8
 8005974:	f363 2152 	bfi	r1, r3, #9, #10
 8005978:	f364 41de 	bfi	r1, r4, #19, #12
 800597c:	f364 71df 	bfi	r1, r4, #31, #1
 8005980:	4623      	mov	r3, r4
 8005982:	aa0d      	add	r2, sp, #52	; 0x34
 8005984:	4865      	ldr	r0, [pc, #404]	; (8005b1c <hard_fault+0x1e0>)
 8005986:	f008 fd44 	bl	800e412 <z_impl_z_log_msg2_static_create>
	*recoverable = false;
 800598a:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 800598c:	4b64      	ldr	r3, [pc, #400]	; (8005b20 <hard_fault+0x1e4>)
 800598e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005990:	f015 0502 	ands.w	r5, r5, #2
 8005994:	d10a      	bne.n	80059ac <hard_fault+0x70>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8005996:	4b62      	ldr	r3, [pc, #392]	; (8005b20 <hard_fault+0x1e4>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	db2a      	blt.n	80059f4 <hard_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800599e:	4b60      	ldr	r3, [pc, #384]	; (8005b20 <hard_fault+0x1e4>)
 80059a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80059a2:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80059a6:	d149      	bne.n	8005a3c <hard_fault+0x100>
}
 80059a8:	b029      	add	sp, #164	; 0xa4
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 80059ac:	2301      	movs	r3, #1
 80059ae:	f8ad 3008 	strh.w	r3, [sp, #8]
 80059b2:	4a5c      	ldr	r2, [pc, #368]	; (8005b24 <hard_fault+0x1e8>)
 80059b4:	9226      	str	r2, [sp, #152]	; 0x98
 80059b6:	9401      	str	r4, [sp, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f88d 2004 	strb.w	r2, [sp, #4]
 80059be:	9a01      	ldr	r2, [sp, #4]
 80059c0:	9225      	str	r2, [sp, #148]	; 0x94
 80059c2:	4621      	mov	r1, r4
 80059c4:	f364 0100 	bfi	r1, r4, #0, #1
 80059c8:	f364 0141 	bfi	r1, r4, #1, #1
 80059cc:	f364 0182 	bfi	r1, r4, #2, #1
 80059d0:	f364 01c5 	bfi	r1, r4, #3, #3
 80059d4:	f363 1188 	bfi	r1, r3, #6, #3
 80059d8:	2308      	movs	r3, #8
 80059da:	f363 2152 	bfi	r1, r3, #9, #10
 80059de:	f364 41de 	bfi	r1, r4, #19, #12
 80059e2:	f364 71df 	bfi	r1, r4, #31, #1
 80059e6:	4623      	mov	r3, r4
 80059e8:	aa25      	add	r2, sp, #148	; 0x94
 80059ea:	484c      	ldr	r0, [pc, #304]	; (8005b1c <hard_fault+0x1e0>)
 80059ec:	f008 fd11 	bl	800e412 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80059f0:	4620      	mov	r0, r4
 80059f2:	e7d9      	b.n	80059a8 <hard_fault+0x6c>
		PR_EXC("  Debug event");
 80059f4:	2201      	movs	r2, #1
 80059f6:	f8ad 2008 	strh.w	r2, [sp, #8]
 80059fa:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <hard_fault+0x1ec>)
 80059fc:	9320      	str	r3, [sp, #128]	; 0x80
 80059fe:	2300      	movs	r3, #0
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	2102      	movs	r1, #2
 8005a04:	f88d 1004 	strb.w	r1, [sp, #4]
 8005a08:	9901      	ldr	r1, [sp, #4]
 8005a0a:	911f      	str	r1, [sp, #124]	; 0x7c
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	f363 0100 	bfi	r1, r3, #0, #1
 8005a12:	f363 0141 	bfi	r1, r3, #1, #1
 8005a16:	f363 0182 	bfi	r1, r3, #2, #1
 8005a1a:	f363 01c5 	bfi	r1, r3, #3, #3
 8005a1e:	f362 1188 	bfi	r1, r2, #6, #3
 8005a22:	2208      	movs	r2, #8
 8005a24:	f362 2152 	bfi	r1, r2, #9, #10
 8005a28:	f363 41de 	bfi	r1, r3, #19, #12
 8005a2c:	f363 71df 	bfi	r1, r3, #31, #1
 8005a30:	aa1f      	add	r2, sp, #124	; 0x7c
 8005a32:	483a      	ldr	r0, [pc, #232]	; (8005b1c <hard_fault+0x1e0>)
 8005a34:	f008 fced 	bl	800e412 <z_impl_z_log_msg2_static_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005a38:	4628      	mov	r0, r5
 8005a3a:	e7b5      	b.n	80059a8 <hard_fault+0x6c>
		PR_EXC("  Fault escalation (see below)");
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005a42:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <hard_fault+0x1f0>)
 8005a44:	9314      	str	r3, [sp, #80]	; 0x50
 8005a46:	2300      	movs	r3, #0
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	f88d 1004 	strb.w	r1, [sp, #4]
 8005a50:	9901      	ldr	r1, [sp, #4]
 8005a52:	9113      	str	r1, [sp, #76]	; 0x4c
 8005a54:	4619      	mov	r1, r3
 8005a56:	f363 0100 	bfi	r1, r3, #0, #1
 8005a5a:	f363 0141 	bfi	r1, r3, #1, #1
 8005a5e:	f363 0182 	bfi	r1, r3, #2, #1
 8005a62:	f363 01c5 	bfi	r1, r3, #3, #3
 8005a66:	f362 1188 	bfi	r1, r2, #6, #3
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	f362 2152 	bfi	r1, r2, #9, #10
 8005a70:	f363 41de 	bfi	r1, r3, #19, #12
 8005a74:	f363 71df 	bfi	r1, r3, #31, #1
 8005a78:	aa13      	add	r2, sp, #76	; 0x4c
 8005a7a:	4828      	ldr	r0, [pc, #160]	; (8005b1c <hard_fault+0x1e0>)
 8005a7c:	f008 fcc9 	bl	800e412 <z_impl_z_log_msg2_static_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 8005a80:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 8005a82:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8005a86:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d00d      	beq.n	8005aaa <hard_fault+0x16e>
		} else if (SCB_MMFSR != 0) {
 8005a8e:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <hard_fault+0x1e4>)
 8005a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a94:	bb7b      	cbnz	r3, 8005af6 <hard_fault+0x1ba>
		} else if (SCB_BFSR != 0) {
 8005a96:	4b22      	ldr	r3, [pc, #136]	; (8005b20 <hard_fault+0x1e4>)
 8005a98:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a9c:	bb8b      	cbnz	r3, 8005b02 <hard_fault+0x1c6>
		} else if (SCB_UFSR != 0) {
 8005a9e:	4b20      	ldr	r3, [pc, #128]	; (8005b20 <hard_fault+0x1e4>)
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	bb9b      	cbnz	r3, 8005b0e <hard_fault+0x1d2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8005aa6:	4628      	mov	r0, r5
	return reason;
 8005aa8:	e77e      	b.n	80059a8 <hard_fault+0x6c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005ab0:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <hard_fault+0x1f4>)
 8005ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	2103      	movs	r1, #3
 8005abe:	f88d 1004 	strb.w	r1, [sp, #4]
 8005ac2:	9901      	ldr	r1, [sp, #4]
 8005ac4:	9119      	str	r1, [sp, #100]	; 0x64
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	f363 0100 	bfi	r1, r3, #0, #1
 8005acc:	f363 0141 	bfi	r1, r3, #1, #1
 8005ad0:	f363 0182 	bfi	r1, r3, #2, #1
 8005ad4:	f363 01c5 	bfi	r1, r3, #3, #3
 8005ad8:	f362 1188 	bfi	r1, r2, #6, #3
 8005adc:	220c      	movs	r2, #12
 8005ade:	f362 2152 	bfi	r1, r2, #9, #10
 8005ae2:	f363 41de 	bfi	r1, r3, #19, #12
 8005ae6:	f363 71df 	bfi	r1, r3, #31, #1
 8005aea:	aa19      	add	r2, sp, #100	; 0x64
 8005aec:	480b      	ldr	r0, [pc, #44]	; (8005b1c <hard_fault+0x1e0>)
 8005aee:	f008 fc90 	bl	800e412 <z_impl_z_log_msg2_static_create>
			reason = esf->basic.r0;
 8005af2:	6838      	ldr	r0, [r7, #0]
 8005af4:	e758      	b.n	80059a8 <hard_fault+0x6c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8005af6:	4632      	mov	r2, r6
 8005af8:	2101      	movs	r1, #1
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7ff fdbc 	bl	8005678 <mem_manage_fault>
 8005b00:	e752      	b.n	80059a8 <hard_fault+0x6c>
			reason = bus_fault(esf, 1, recoverable);
 8005b02:	4632      	mov	r2, r6
 8005b04:	2101      	movs	r1, #1
 8005b06:	4638      	mov	r0, r7
 8005b08:	f7ff fae8 	bl	80050dc <bus_fault>
 8005b0c:	e74c      	b.n	80059a8 <hard_fault+0x6c>
			reason = usage_fault(esf);
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f7ff fc52 	bl	80053b8 <usage_fault>
 8005b14:	e748      	b.n	80059a8 <hard_fault+0x6c>
 8005b16:	bf00      	nop
 8005b18:	08011480 	.word	0x08011480
 8005b1c:	08010ad0 	.word	0x08010ad0
 8005b20:	e000ed00 	.word	0xe000ed00
 8005b24:	08011498 	.word	0x08011498
 8005b28:	080114bc 	.word	0x080114bc
 8005b2c:	080114cc 	.word	0x080114cc
 8005b30:	080114ec 	.word	0x080114ec

08005b34 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	b098      	sub	sp, #96	; 0x60
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <z_arm_fault+0xe8>)
 8005b3a:	685d      	ldr	r5, [r3, #4]
 8005b3c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005b40:	2300      	movs	r3, #0
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8005b4a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8005b4e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005b52:	d13c      	bne.n	8005bce <z_arm_fault+0x9a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8005b54:	f002 030c 	and.w	r3, r2, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d010      	beq.n	8005b7e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8005b5c:	f012 0f08 	tst.w	r2, #8
 8005b60:	d032      	beq.n	8005bc8 <z_arm_fault+0x94>
			ptr_esf =  (z_arch_esf_t *)psp;
 8005b62:	460c      	mov	r4, r1
	*nested_exc = false;
 8005b64:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8005b66:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f008 fcea 	bl	800e546 <fault_handle>
 8005b72:	4605      	mov	r5, r0
	if (recoverable) {
 8005b74:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8005b78:	b363      	cbz	r3, 8005bd4 <z_arm_fault+0xa0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 8005b7a:	b018      	add	sp, #96	; 0x60
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <z_arm_fault+0xec>)
 8005b86:	9216      	str	r2, [sp, #88]	; 0x58
 8005b88:	2400      	movs	r4, #0
 8005b8a:	9400      	str	r4, [sp, #0]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f88d 2000 	strb.w	r2, [sp]
 8005b92:	9a00      	ldr	r2, [sp, #0]
 8005b94:	9215      	str	r2, [sp, #84]	; 0x54
 8005b96:	4621      	mov	r1, r4
 8005b98:	f364 0100 	bfi	r1, r4, #0, #1
 8005b9c:	f364 0141 	bfi	r1, r4, #1, #1
 8005ba0:	f364 0182 	bfi	r1, r4, #2, #1
 8005ba4:	f364 01c5 	bfi	r1, r4, #3, #3
 8005ba8:	f363 1188 	bfi	r1, r3, #6, #3
 8005bac:	2308      	movs	r3, #8
 8005bae:	f363 2152 	bfi	r1, r3, #9, #10
 8005bb2:	f364 41de 	bfi	r1, r4, #19, #12
 8005bb6:	f364 71df 	bfi	r1, r4, #31, #1
 8005bba:	4623      	mov	r3, r4
 8005bbc:	aa15      	add	r2, sp, #84	; 0x54
 8005bbe:	4819      	ldr	r0, [pc, #100]	; (8005c24 <z_arm_fault+0xf0>)
 8005bc0:	f008 fc27 	bl	800e412 <z_impl_z_log_msg2_static_create>
	*nested_exc = false;
 8005bc4:	4626      	mov	r6, r4
		return NULL;
 8005bc6:	e7ce      	b.n	8005b66 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8005bc8:	4604      	mov	r4, r0
			*nested_exc = true;
 8005bca:	2601      	movs	r6, #1
 8005bcc:	e7cb      	b.n	8005b66 <z_arm_fault+0x32>
	*nested_exc = false;
 8005bce:	2600      	movs	r6, #0
		return NULL;
 8005bd0:	4634      	mov	r4, r6
 8005bd2:	e7c8      	b.n	8005b66 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8005bd4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	6861      	ldr	r1, [r4, #4]
 8005bdc:	68a2      	ldr	r2, [r4, #8]
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005be4:	6920      	ldr	r0, [r4, #16]
 8005be6:	6961      	ldr	r1, [r4, #20]
 8005be8:	69a2      	ldr	r2, [r4, #24]
 8005bea:	69e3      	ldr	r3, [r4, #28]
 8005bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 8005bf0:	b146      	cbz	r6, 8005c04 <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf6:	b95a      	cbnz	r2, 8005c10 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8005bf8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8005bfc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8005c00:	9310      	str	r3, [sp, #64]	; 0x40
 8005c02:	e005      	b.n	8005c10 <z_arm_fault+0xdc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005c0a:	f023 0301 	bic.w	r3, r3, #1
 8005c0e:	9310      	str	r3, [sp, #64]	; 0x40
	z_arm_fatal_error(reason, &esf_copy);
 8005c10:	a909      	add	r1, sp, #36	; 0x24
 8005c12:	4628      	mov	r0, r5
 8005c14:	f008 fc6a 	bl	800e4ec <z_arm_fatal_error>
 8005c18:	e7af      	b.n	8005b7a <z_arm_fault+0x46>
 8005c1a:	bf00      	nop
 8005c1c:	e000ed00 	.word	0xe000ed00
 8005c20:	08011508 	.word	0x08011508
 8005c24:	08010ad0 	.word	0x08010ad0

08005c28 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005c28:	4a02      	ldr	r2, [pc, #8]	; (8005c34 <z_arm_fault_init+0xc>)
 8005c2a:	6953      	ldr	r3, [r2, #20]
 8005c2c:	f043 0310 	orr.w	r3, r3, #16
 8005c30:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8005c32:	4770      	bx	lr
 8005c34:	e000ed00 	.word	0xe000ed00

08005c38 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8005c38:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8005c3c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8005c40:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8005c42:	4672      	mov	r2, lr
	bl z_arm_fault
 8005c44:	f7ff ff76 	bl	8005b34 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8005c48:	bd01      	pop	{r0, pc}
 8005c4a:	bf00      	nop

08005c4c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8005c4c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8005c4e:	e006      	b.n	8005c5e <z_arm_interrupt_init+0x12>
 8005c50:	f002 010f 	and.w	r1, r2, #15
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <z_arm_interrupt_init+0x30>)
 8005c56:	440b      	add	r3, r1
 8005c58:	2110      	movs	r1, #16
 8005c5a:	7619      	strb	r1, [r3, #24]
 8005c5c:	3201      	adds	r2, #1
 8005c5e:	2a54      	cmp	r2, #84	; 0x54
 8005c60:	dc0a      	bgt.n	8005c78 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8005c62:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dbf3      	blt.n	8005c50 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c68:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005c6c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005c70:	2110      	movs	r1, #16
 8005c72:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8005c76:	e7f1      	b.n	8005c5c <z_arm_interrupt_init+0x10>
	}
}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000ecfc 	.word	0xe000ecfc

08005c80 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8005c80:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8005c82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8005c86:	4808      	ldr	r0, [pc, #32]	; (8005ca8 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8005c88:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8005c8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8005c8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8005c92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8005c96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8005c98:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8005c9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8005c9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8005ca2:	f7ff f907 	bl	8004eb4 <z_arm_prep_c>
 8005ca6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8005ca8:	20003500 	.word	0x20003500

08005cac <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8005cac:	b508      	push	{r3, lr}
	if (_current == thread) {
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <z_impl_k_thread_abort+0x24>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4283      	cmp	r3, r0
 8005cb4:	d002      	beq.n	8005cbc <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8005cb6:	f005 fe8d 	bl	800b9d4 <z_thread_abort>
}
 8005cba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f8      	beq.n	8005cb6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005cc4:	4a03      	ldr	r2, [pc, #12]	; (8005cd4 <z_impl_k_thread_abort+0x28>)
 8005cc6:	6853      	ldr	r3, [r2, #4]
 8005cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	e7f2      	b.n	8005cb6 <z_impl_k_thread_abort+0xa>
 8005cd0:	20001394 	.word	0x20001394
 8005cd4:	e000ed00 	.word	0xe000ed00

08005cd8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8005cd8:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005cda:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <z_arm_configure_static_mpu_regions+0x10>)
 8005cdc:	4a03      	ldr	r2, [pc, #12]	; (8005cec <z_arm_configure_static_mpu_regions+0x14>)
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4803      	ldr	r0, [pc, #12]	; (8005cf0 <z_arm_configure_static_mpu_regions+0x18>)
 8005ce2:	f008 fc85 	bl	800e5f0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8005ce6:	bd08      	pop	{r3, pc}
 8005ce8:	20028000 	.word	0x20028000
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	08011538 	.word	0x08011538

08005cf4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8005cf4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8005cf6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005cf8:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8005cfa:	4805      	ldr	r0, [pc, #20]	; (8005d10 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8005cfc:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8005cfe:	2320      	movs	r3, #32
 8005d00:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <z_arm_configure_dynamic_mpu_regions+0x20>)
 8005d04:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8005d06:	2101      	movs	r1, #1
 8005d08:	f008 fc76 	bl	800e5f8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8005d0c:	bd08      	pop	{r3, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000ec4 	.word	0x20000ec4
 8005d14:	150b0000 	.word	0x150b0000

08005d18 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <region_init+0x24>)
 8005d1a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005d1e:	680b      	ldr	r3, [r1, #0]
 8005d20:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8005d24:	4303      	orrs	r3, r0
 8005d26:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005d2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005d2e:	688b      	ldr	r3, [r1, #8]
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 8005d40:	b510      	push	{r4, lr}
 8005d42:	b090      	sub	sp, #64	; 0x40
 8005d44:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 8005d46:	2807      	cmp	r0, #7
 8005d48:	d804      	bhi.n	8005d54 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 8005d4a:	f7ff ffe5 	bl	8005d18 <region_init>

	return index;
 8005d4e:	4620      	mov	r0, r4
}
 8005d50:	b010      	add	sp, #64	; 0x40
 8005d52:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8005d54:	2201      	movs	r2, #1
 8005d56:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <region_allocate_and_init+0x60>)
 8005d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d60:	2300      	movs	r3, #0
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	2103      	movs	r1, #3
 8005d66:	f88d 1004 	strb.w	r1, [sp, #4]
 8005d6a:	9901      	ldr	r1, [sp, #4]
 8005d6c:	910d      	str	r1, [sp, #52]	; 0x34
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f363 0100 	bfi	r1, r3, #0, #1
 8005d74:	f363 0141 	bfi	r1, r3, #1, #1
 8005d78:	f363 0182 	bfi	r1, r3, #2, #1
 8005d7c:	f363 01c5 	bfi	r1, r3, #3, #3
 8005d80:	f362 1188 	bfi	r1, r2, #6, #3
 8005d84:	220c      	movs	r2, #12
 8005d86:	f362 2152 	bfi	r1, r2, #9, #10
 8005d8a:	f363 41de 	bfi	r1, r3, #19, #12
 8005d8e:	f363 71df 	bfi	r1, r3, #31, #1
 8005d92:	aa0d      	add	r2, sp, #52	; 0x34
 8005d94:	4803      	ldr	r0, [pc, #12]	; (8005da4 <region_allocate_and_init+0x64>)
 8005d96:	f008 fb3c 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8005d9a:	f06f 0015 	mvn.w	r0, #21
 8005d9e:	e7d7      	b.n	8005d50 <region_allocate_and_init+0x10>
 8005da0:	08011544 	.word	0x08011544
 8005da4:	08010ac8 	.word	0x08010ac8

08005da8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8005da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dac:	b091      	sub	sp, #68	; 0x44
 8005dae:	4680      	mov	r8, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8005db4:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8005db6:	2500      	movs	r5, #0
 8005db8:	e009      	b.n	8005dce <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8005dba:	4621      	mov	r1, r4
 8005dbc:	b2f0      	uxtb	r0, r6
 8005dbe:	f008 fbf8 	bl	800e5b2 <mpu_configure_region>
 8005dc2:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8005dc4:	f110 0f16 	cmn.w	r0, #22
 8005dc8:	d037      	beq.n	8005e3a <mpu_configure_regions+0x92>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8005dca:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8005dcc:	3501      	adds	r5, #1
 8005dce:	42bd      	cmp	r5, r7
 8005dd0:	da33      	bge.n	8005e3a <mpu_configure_regions+0x92>
		if (regions[i].size == 0U) {
 8005dd2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8005dd6:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8005dda:	6862      	ldr	r2, [r4, #4]
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	d0f5      	beq.n	8005dcc <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8005de0:	f1b9 0f00 	cmp.w	r9, #0
 8005de4:	d0e9      	beq.n	8005dba <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 8005de6:	4620      	mov	r0, r4
 8005de8:	f008 fbd2 	bl	800e590 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d1e4      	bne.n	8005dba <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8005df0:	2201      	movs	r2, #1
 8005df2:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <mpu_configure_regions+0x9c>)
 8005df8:	930e      	str	r3, [sp, #56]	; 0x38
 8005dfa:	950f      	str	r5, [sp, #60]	; 0x3c
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	2103      	movs	r1, #3
 8005e02:	f88d 1004 	strb.w	r1, [sp, #4]
 8005e06:	9901      	ldr	r1, [sp, #4]
 8005e08:	910d      	str	r1, [sp, #52]	; 0x34
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	f363 0100 	bfi	r1, r3, #0, #1
 8005e10:	f363 0141 	bfi	r1, r3, #1, #1
 8005e14:	f363 0182 	bfi	r1, r3, #2, #1
 8005e18:	f363 01c5 	bfi	r1, r3, #3, #3
 8005e1c:	f362 1188 	bfi	r1, r2, #6, #3
 8005e20:	220c      	movs	r2, #12
 8005e22:	f362 2152 	bfi	r1, r2, #9, #10
 8005e26:	f363 41de 	bfi	r1, r3, #19, #12
 8005e2a:	f363 71df 	bfi	r1, r3, #31, #1
 8005e2e:	aa0d      	add	r2, sp, #52	; 0x34
 8005e30:	4805      	ldr	r0, [pc, #20]	; (8005e48 <mpu_configure_regions+0xa0>)
 8005e32:	f008 faee 	bl	800e412 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
 8005e36:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	b011      	add	sp, #68	; 0x44
 8005e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e42:	bf00      	nop
 8005e44:	0801156c 	.word	0x0801156c
 8005e48:	08010ac8 	.word	0x08010ac8

08005e4c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 8005e4c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 8005e4e:	4c03      	ldr	r4, [pc, #12]	; (8005e5c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005e50:	2301      	movs	r3, #1
 8005e52:	7822      	ldrb	r2, [r4, #0]
 8005e54:	f7ff ffa8 	bl	8005da8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005e58:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	200013f3 	.word	0x200013f3

08005e60 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 8005e60:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8005e62:	2300      	movs	r3, #0
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <mpu_configure_dynamic_mpu_regions+0x2c>)
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	f7ff ff9e 	bl	8005da8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005e6c:	f110 0f16 	cmn.w	r0, #22
 8005e70:	d00a      	beq.n	8005e88 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8005e72:	4603      	mov	r3, r0
 8005e74:	e006      	b.n	8005e84 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8005e76:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <mpu_configure_dynamic_mpu_regions+0x30>)
 8005e78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8005e82:	3301      	adds	r3, #1
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	ddf6      	ble.n	8005e76 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200013f3 	.word	0x200013f3
 8005e90:	e000ed00 	.word	0xe000ed00

08005e94 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <arm_core_mpu_enable+0x14>)
 8005e96:	2205      	movs	r2, #5
 8005e98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 8005e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ea0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	e000ed00 	.word	0xe000ed00

08005eac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8005eac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <arm_core_mpu_disable+0x10>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8005ec0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <z_arm_mpu_init+0x3c>)
 8005ec4:	681d      	ldr	r5, [r3, #0]
 8005ec6:	2d08      	cmp	r5, #8
 8005ec8:	d815      	bhi.n	8005ef6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8005eca:	f7ff ffef 	bl	8005eac <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005ece:	2400      	movs	r4, #0
 8005ed0:	e009      	b.n	8005ee6 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <z_arm_mpu_init+0x3c>)
 8005ed4:	6859      	ldr	r1, [r3, #4]
 8005ed6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005eda:	0093      	lsls	r3, r2, #2
 8005edc:	4419      	add	r1, r3
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7ff ff1a 	bl	8005d18 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8005ee4:	3401      	adds	r4, #1
 8005ee6:	42a5      	cmp	r5, r4
 8005ee8:	d8f3      	bhi.n	8005ed2 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <z_arm_mpu_init+0x40>)
 8005eec:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8005eee:	f7ff ffd1 	bl	8005e94 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 8005ef2:	2000      	movs	r0, #0
}
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005efa:	e7fb      	b.n	8005ef4 <z_arm_mpu_init+0x34>
 8005efc:	080115a8 	.word	0x080115a8
 8005f00:	200013f3 	.word	0x200013f3

08005f04 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8005f04:	4b01      	ldr	r3, [pc, #4]	; (8005f0c <__stdout_hook_install+0x8>)
 8005f06:	6018      	str	r0, [r3, #0]
}
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000050 	.word	0x20000050

08005f10 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4606      	mov	r6, r0
 8005f14:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 8005f16:	2400      	movs	r4, #0
 8005f18:	e000      	b.n	8005f1c <z_impl_zephyr_read_stdin+0xc>
 8005f1a:	3401      	adds	r4, #1
 8005f1c:	42ac      	cmp	r4, r5
 8005f1e:	da08      	bge.n	8005f32 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <z_impl_zephyr_read_stdin+0x28>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4798      	blx	r3
 8005f26:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8005f28:	280a      	cmp	r0, #10
 8005f2a:	d001      	beq.n	8005f30 <z_impl_zephyr_read_stdin+0x20>
 8005f2c:	280d      	cmp	r0, #13
 8005f2e:	d1f4      	bne.n	8005f1a <z_impl_zephyr_read_stdin+0xa>
			i++;
 8005f30:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 8005f32:	4620      	mov	r0, r4
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
 8005f36:	bf00      	nop
 8005f38:	2000004c 	.word	0x2000004c

08005f3c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8005f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3e:	4605      	mov	r5, r0
 8005f40:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 8005f42:	2400      	movs	r4, #0
 8005f44:	e004      	b.n	8005f50 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <z_impl_zephyr_write_stdout+0x30>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	7830      	ldrb	r0, [r6, #0]
 8005f4c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 8005f4e:	3401      	adds	r4, #1
 8005f50:	42bc      	cmp	r4, r7
 8005f52:	da08      	bge.n	8005f66 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 8005f54:	192e      	adds	r6, r5, r4
 8005f56:	5d2b      	ldrb	r3, [r5, r4]
 8005f58:	2b0a      	cmp	r3, #10
 8005f5a:	d1f4      	bne.n	8005f46 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 8005f5c:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <z_impl_zephyr_write_stdout+0x30>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	200d      	movs	r0, #13
 8005f62:	4798      	blx	r3
 8005f64:	e7ef      	b.n	8005f46 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 8005f66:	4638      	mov	r0, r7
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000050 	.word	0x20000050

08005f70 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 8005f70:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 8005f72:	2205      	movs	r2, #5
 8005f74:	4902      	ldr	r1, [pc, #8]	; (8005f80 <_exit+0x10>)
 8005f76:	2001      	movs	r0, #1
 8005f78:	f008 fb4f 	bl	800e61a <_write>
	while (1) {
 8005f7c:	e7fe      	b.n	8005f7c <_exit+0xc>
 8005f7e:	bf00      	nop
 8005f80:	08011590 	.word	0x08011590

08005f84 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 8005f84:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <_sbrk+0x24>)
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	4b08      	ldr	r3, [pc, #32]	; (8005fac <_sbrk+0x28>)
 8005f8c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 8005f8e:	440a      	add	r2, r1
 8005f90:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 8005f94:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d202      	bcs.n	8005fa2 <_sbrk+0x1e>
		heap_sz += count;
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <_sbrk+0x24>)
 8005f9e:	601a      	str	r2, [r3, #0]
		ret = ptr;
 8005fa0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 8005fa6:	4770      	bx	lr
 8005fa8:	20000ed0 	.word	0x20000ed0
 8005fac:	20004208 	.word	0x20004208

08005fb0 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8005fb6:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8005fb8:	e002      	b.n	8005fc0 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005fba:	2201      	movs	r2, #1
 8005fbc:	e00c      	b.n	8005fd8 <__stm32_exti_isr+0x28>
 8005fbe:	3401      	adds	r4, #1
 8005fc0:	42ac      	cmp	r4, r5
 8005fc2:	da17      	bge.n	8005ff4 <__stm32_exti_isr+0x44>
	if (line < 32) {
 8005fc4:	2c1f      	cmp	r4, #31
 8005fc6:	dcfa      	bgt.n	8005fbe <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8005fc8:	2301      	movs	r3, #1
 8005fca:	40a3      	lsls	r3, r4
 8005fcc:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <__stm32_exti_isr+0x48>)
 8005fce:	6952      	ldr	r2, [r2, #20]
 8005fd0:	ea33 0202 	bics.w	r2, r3, r2
 8005fd4:	d0f1      	beq.n	8005fba <__stm32_exti_isr+0xa>
 8005fd6:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	d0f0      	beq.n	8005fbe <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005fdc:	4a06      	ldr	r2, [pc, #24]	; (8005ff8 <__stm32_exti_isr+0x48>)
 8005fde:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8005fe0:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ea      	beq.n	8005fbe <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8005fe8:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8005fec:	6851      	ldr	r1, [r2, #4]
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4798      	blx	r3
 8005ff2:	e7e4      	b.n	8005fbe <__stm32_exti_isr+0xe>
		}
	}
}
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40010400 	.word	0x40010400

08005ffc <stm32_exti_enable>:
{
 8005ffc:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8005ffe:	2301      	movs	r3, #1
 8006000:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006002:	4a04      	ldr	r2, [pc, #16]	; (8006014 <stm32_exti_enable+0x18>)
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	430b      	orrs	r3, r1
 8006008:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800600a:	4b03      	ldr	r3, [pc, #12]	; (8006018 <stm32_exti_enable+0x1c>)
 800600c:	5618      	ldrsb	r0, [r3, r0]
 800600e:	f7fe ff29 	bl	8004e64 <arch_irq_enable>
}
 8006012:	bd08      	pop	{r3, pc}
 8006014:	40010400 	.word	0x40010400
 8006018:	080115e8 	.word	0x080115e8

0800601c <stm32_exti_disable>:
	if (line < 32) {
 800601c:	281f      	cmp	r0, #31
 800601e:	dc06      	bgt.n	800602e <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8006020:	2301      	movs	r3, #1
 8006022:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006024:	4a02      	ldr	r2, [pc, #8]	; (8006030 <stm32_exti_disable+0x14>)
 8006026:	6810      	ldr	r0, [r2, #0]
 8006028:	ea20 0003 	bic.w	r0, r0, r3
 800602c:	6010      	str	r0, [r2, #0]
}
 800602e:	4770      	bx	lr
 8006030:	40010400 	.word	0x40010400

08006034 <stm32_exti_trigger>:
	switch (trigger) {
 8006034:	2903      	cmp	r1, #3
 8006036:	d832      	bhi.n	800609e <stm32_exti_trigger+0x6a>
 8006038:	e8df f001 	tbb	[pc, r1]
 800603c:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8006040:	2301      	movs	r3, #1
 8006042:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <stm32_exti_trigger+0x6c>)
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	ea22 0200 	bic.w	r2, r2, r0
 800604e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	ea22 0000 	bic.w	r0, r2, r0
 8006056:	60d8      	str	r0, [r3, #12]
}
 8006058:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800605a:	2301      	movs	r3, #1
 800605c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <stm32_exti_trigger+0x6c>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	4302      	orrs	r2, r0
 8006066:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	ea22 0000 	bic.w	r0, r2, r0
 800606e:	60d8      	str	r0, [r3, #12]
}
 8006070:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8006072:	2301      	movs	r3, #1
 8006074:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <stm32_exti_trigger+0x6c>)
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	4302      	orrs	r2, r0
 800607e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	ea22 0000 	bic.w	r0, r2, r0
 8006086:	6098      	str	r0, [r3, #8]
}
 8006088:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800608a:	2301      	movs	r3, #1
 800608c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <stm32_exti_trigger+0x6c>)
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	4302      	orrs	r2, r0
 8006096:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	4310      	orrs	r0, r2
 800609c:	60d8      	str	r0, [r3, #12]
}
 800609e:	4770      	bx	lr
 80060a0:	40010400 	.word	0x40010400

080060a4 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <stm32_exti_set_callback+0x20>)
 80060a6:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80060aa:	b93b      	cbnz	r3, 80060bc <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <stm32_exti_set_callback+0x20>)
 80060ae:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 80060b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80060b6:	6042      	str	r2, [r0, #4]

	return 0;
 80060b8:	2000      	movs	r0, #0
 80060ba:	4770      	bx	lr
		return -EBUSY;
 80060bc:	f06f 000f 	mvn.w	r0, #15
}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000ed4 	.word	0x20000ed4

080060c8 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80060c8:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <stm32_exti_unset_callback+0x10>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80060d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80060d4:	605a      	str	r2, [r3, #4]
}
 80060d6:	4770      	bx	lr
 80060d8:	20000ed4 	.word	0x20000ed4

080060dc <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 80060dc:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80060de:	680b      	ldr	r3, [r1, #0]
 80060e0:	2b06      	cmp	r3, #6
 80060e2:	d848      	bhi.n	8006176 <stm32_clock_control_on+0x9a>
 80060e4:	e8df f003 	tbb	[pc, r3]
 80060e8:	3c261004 	.word	0x3c261004
 80060ec:	4731      	.short	0x4731
 80060ee:	1b          	.byte	0x1b
 80060ef:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80060f0:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80060f2:	4a22      	ldr	r2, [pc, #136]	; (800617c <stm32_clock_control_on+0xa0>)
 80060f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80060f6:	4319      	orrs	r1, r3
 80060f8:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80060fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060fc:	4013      	ands	r3, r2
 80060fe:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8006100:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8006102:	2000      	movs	r0, #0
}
 8006104:	b006      	add	sp, #24
 8006106:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8006108:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <stm32_clock_control_on+0xa0>)
 800610c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800610e:	4319      	orrs	r1, r3
 8006110:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006112:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006114:	4013      	ands	r3, r2
 8006116:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8006118:	9b01      	ldr	r3, [sp, #4]
	return 0;
 800611a:	2000      	movs	r0, #0
}
 800611c:	e7f2      	b.n	8006104 <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800611e:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <stm32_clock_control_on+0xa0>)
 8006122:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8006124:	4319      	orrs	r1, r3
 8006126:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006128:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800612a:	4013      	ands	r3, r2
 800612c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800612e:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8006130:	2000      	movs	r0, #0
}
 8006132:	e7e7      	b.n	8006104 <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8006134:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006136:	4a11      	ldr	r2, [pc, #68]	; (800617c <stm32_clock_control_on+0xa0>)
 8006138:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800613a:	4319      	orrs	r1, r3
 800613c:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800613e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006140:	4013      	ands	r3, r2
 8006142:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8006144:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8006146:	2000      	movs	r0, #0
}
 8006148:	e7dc      	b.n	8006104 <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 800614a:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800614c:	4a0b      	ldr	r2, [pc, #44]	; (800617c <stm32_clock_control_on+0xa0>)
 800614e:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8006150:	4319      	orrs	r1, r3
 8006152:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006154:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006156:	4013      	ands	r3, r2
 8006158:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800615a:	9b04      	ldr	r3, [sp, #16]
	return 0;
 800615c:	2000      	movs	r0, #0
}
 800615e:	e7d1      	b.n	8006104 <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8006160:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006162:	4a06      	ldr	r2, [pc, #24]	; (800617c <stm32_clock_control_on+0xa0>)
 8006164:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8006166:	4319      	orrs	r1, r3
 8006168:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800616a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800616c:	4013      	ands	r3, r2
 800616e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8006170:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8006172:	2000      	movs	r0, #0
}
 8006174:	e7c6      	b.n	8006104 <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8006176:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800617a:	e7c3      	b.n	8006104 <stm32_clock_control_on+0x28>
 800617c:	40021000 	.word	0x40021000

08006180 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8006180:	680b      	ldr	r3, [r1, #0]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d835      	bhi.n	80061f2 <stm32_clock_control_off+0x72>
 8006186:	e8df f003 	tbb	[pc, r3]
 800618a:	0c04      	.short	0x0c04
 800618c:	34242c1c 	.word	0x34242c1c
 8006190:	14          	.byte	0x14
 8006191:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8006192:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8006194:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <stm32_clock_control_off+0x78>)
 8006196:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8006198:	ea23 0301 	bic.w	r3, r3, r1
 800619c:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800619e:	2000      	movs	r0, #0
}
 80061a0:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 80061a2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <stm32_clock_control_off+0x78>)
 80061a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80061a8:	ea23 0301 	bic.w	r3, r3, r1
 80061ac:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 80061ae:	2000      	movs	r0, #0
}
 80061b0:	4770      	bx	lr
		LL_AHB3_GRP1_DisableClock(pclken->enr);
 80061b2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 80061b4:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <stm32_clock_control_off+0x78>)
 80061b6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80061b8:	ea23 0301 	bic.w	r3, r3, r1
 80061bc:	6513      	str	r3, [r2, #80]	; 0x50
	return 0;
 80061be:	2000      	movs	r0, #0
}
 80061c0:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 80061c2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80061c4:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <stm32_clock_control_off+0x78>)
 80061c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80061c8:	ea23 0301 	bic.w	r3, r3, r1
 80061cc:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 80061ce:	2000      	movs	r0, #0
}
 80061d0:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 80061d2:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80061d4:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <stm32_clock_control_off+0x78>)
 80061d6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80061d8:	ea23 0301 	bic.w	r3, r3, r1
 80061dc:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 80061de:	2000      	movs	r0, #0
}
 80061e0:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 80061e2:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <stm32_clock_control_off+0x78>)
 80061e6:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80061e8:	ea23 0301 	bic.w	r3, r3, r1
 80061ec:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 80061ee:	2000      	movs	r0, #0
}
 80061f0:	4770      	bx	lr
	switch (pclken->bus) {
 80061f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80061f6:	4770      	bx	lr
 80061f8:	40021000 	.word	0x40021000

080061fc <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	460c      	mov	r4, r1
 8006200:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <stm32_clock_control_get_subsys_rate+0x3c>)
 8006204:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8006206:	2101      	movs	r1, #1
 8006208:	4630      	mov	r0, r6
 800620a:	f008 fa94 	bl	800e736 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	2b06      	cmp	r3, #6
 8006212:	d80e      	bhi.n	8006232 <stm32_clock_control_get_subsys_rate+0x36>
 8006214:	e8df f003 	tbb	[pc, r3]
 8006218:	0a070404 	.word	0x0a070404
 800621c:	0d07      	.short	0x0d07
 800621e:	04          	.byte	0x04
 800621f:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8006220:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8006222:	2000      	movs	r0, #0
}
 8006224:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8006226:	6028      	str	r0, [r5, #0]
	return 0;
 8006228:	2000      	movs	r0, #0
		break;
 800622a:	e7fb      	b.n	8006224 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 800622c:	6028      	str	r0, [r5, #0]
	return 0;
 800622e:	2000      	movs	r0, #0
		break;
 8006230:	e7f8      	b.n	8006224 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8006232:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006236:	e7f5      	b.n	8006224 <stm32_clock_control_get_subsys_rate+0x28>
 8006238:	20000100 	.word	0x20000100

0800623c <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <stm32_clock_switch_to_hsi+0x44>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006244:	d109      	bne.n	800625a <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006246:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <stm32_clock_switch_to_hsi+0x44>)
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <stm32_clock_switch_to_hsi+0x44>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006258:	d0fa      	beq.n	8006250 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <stm32_clock_switch_to_hsi+0x44>)
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006268:	6893      	ldr	r3, [r2, #8]
 800626a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800626e:	4318      	orrs	r0, r3
 8006270:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <stm32_clock_switch_to_hsi+0x44>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800627a:	2b04      	cmp	r3, #4
 800627c:	d1f9      	bne.n	8006272 <stm32_clock_switch_to_hsi+0x36>
	}
}
 800627e:	4770      	bx	lr
 8006280:	40021000 	.word	0x40021000

08006284 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8006284:	b510      	push	{r4, lr}
 8006286:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8006288:	a803      	add	r0, sp, #12
 800628a:	f008 fa4f 	bl	800e72c <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800628e:	f000 f823 	bl	80062d8 <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8006292:	4668      	mov	r0, sp
 8006294:	f008 fa52 	bl	800e73c <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8006298:	2000      	movs	r0, #0
 800629a:	f7ff ffcf 	bl	800623c <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800629e:	4c0d      	ldr	r4, [pc, #52]	; (80062d4 <stm32_clock_control_init+0x50>)
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a6:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80062ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062b2:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80062b4:	a903      	add	r1, sp, #12
 80062b6:	4668      	mov	r0, sp
 80062b8:	f003 ffc6 	bl	800a248 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062c2:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80062cc:	2000      	movs	r0, #0
 80062ce:	b006      	add	sp, #24
 80062d0:	bd10      	pop	{r4, pc}
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000

080062d8 <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80062d8:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <config_enable_default_clocks+0x1c>)
 80062dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80062e2:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80062ec:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 80062ee:	b002      	add	sp, #8
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40021000 	.word	0x40021000

080062f8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 80062f8:	b510      	push	{r4, lr}
 80062fa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 80062fc:	280a      	cmp	r0, #10
 80062fe:	d007      	beq.n	8006310 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <console_out+0x28>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8006306:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4798      	blx	r3

	return c;
}
 800630c:	4620      	mov	r0, r4
 800630e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <console_out+0x28>)
 8006312:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8006314:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	210d      	movs	r1, #13
 800631a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 800631c:	e7f0      	b.n	8006300 <console_out+0x8>
 800631e:	bf00      	nop
 8006320:	20000f54 	.word	0x20000f54

08006324 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
 8006324:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
 8006326:	4c04      	ldr	r4, [pc, #16]	; (8006338 <uart_console_hook_install+0x14>)
 8006328:	4620      	mov	r0, r4
 800632a:	f7ff fdeb 	bl	8005f04 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
 800632e:	4620      	mov	r0, r4
 8006330:	f7fd fac6 	bl	80038c0 <__printk_hook_install>
#endif
}
 8006334:	bd10      	pop	{r4, pc}
 8006336:	bf00      	nop
 8006338:	080062f9 	.word	0x080062f9

0800633c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 800633c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 800633e:	4806      	ldr	r0, [pc, #24]	; (8006358 <uart_console_init+0x1c>)
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <uart_console_init+0x20>)
 8006342:	6018      	str	r0, [r3, #0]
 8006344:	f009 fa25 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
 8006348:	b118      	cbz	r0, 8006352 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
 800634a:	f7ff ffeb 	bl	8006324 <uart_console_hook_install>

	return 0;
 800634e:	2000      	movs	r0, #0
}
 8006350:	bd08      	pop	{r3, pc}
		return -ENODEV;
 8006352:	f06f 0012 	mvn.w	r0, #18
 8006356:	e7fb      	b.n	8006350 <uart_console_init+0x14>
 8006358:	08010778 	.word	0x08010778
 800635c:	20000f54 	.word	0x20000f54

08006360 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8006360:	424a      	negs	r2, r1
 8006362:	f001 0303 	and.w	r3, r1, #3
 8006366:	f002 0203 	and.w	r2, r2, #3
 800636a:	bf58      	it	pl
 800636c:	4253      	negpl	r3, r2
 800636e:	3304      	adds	r3, #4
 8006370:	009a      	lsls	r2, r3, #2
 8006372:	230f      	movs	r3, #15
 8006374:	4093      	lsls	r3, r2
 8006376:	460a      	mov	r2, r1
 8006378:	2900      	cmp	r1, #0
 800637a:	db19      	blt.n	80063b0 <gpio_stm32_set_exti_source+0x50>
 800637c:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8006380:	fa5f fc83 	uxtb.w	ip, r3
 8006384:	f10c 0102 	add.w	r1, ip, #2
 8006388:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <gpio_stm32_set_exti_source+0x58>)
 800638a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800638e:	0c1a      	lsrs	r2, r3, #16
 8006390:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8006398:	b162      	cbz	r2, 80063b4 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 800639a:	fab2 f282 	clz	r2, r2
 800639e:	fa00 f202 	lsl.w	r2, r0, r2
 80063a2:	431a      	orrs	r2, r3
 80063a4:	f10c 0c02 	add.w	ip, ip, #2
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <gpio_stm32_set_exti_source+0x58>)
 80063aa:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 80063ae:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80063b0:	1cca      	adds	r2, r1, #3
 80063b2:	e7e3      	b.n	800637c <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 80063b4:	2220      	movs	r2, #32
 80063b6:	e7f2      	b.n	800639e <gpio_stm32_set_exti_source+0x3e>
 80063b8:	40010000 	.word	0x40010000

080063bc <gpio_stm32_get_exti_source>:
 80063bc:	4242      	negs	r2, r0
 80063be:	f000 0303 	and.w	r3, r0, #3
 80063c2:	f002 0203 	and.w	r2, r2, #3
 80063c6:	bf58      	it	pl
 80063c8:	4253      	negpl	r3, r2
 80063ca:	3304      	adds	r3, #4
 80063cc:	009a      	lsls	r2, r3, #2
 80063ce:	230f      	movs	r3, #15
 80063d0:	4093      	lsls	r3, r2
 80063d2:	4602      	mov	r2, r0
 80063d4:	2800      	cmp	r0, #0
 80063d6:	db10      	blt.n	80063fa <gpio_stm32_get_exti_source+0x3e>
 80063d8:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80063dc:	b2c3      	uxtb	r3, r0
 80063de:	3302      	adds	r3, #2
 80063e0:	4a08      	ldr	r2, [pc, #32]	; (8006404 <gpio_stm32_get_exti_source+0x48>)
 80063e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80063e6:	0c03      	lsrs	r3, r0, #16
 80063e8:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80063f0:	b12b      	cbz	r3, 80063fe <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 80063f2:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 80063f6:	40d8      	lsrs	r0, r3
 80063f8:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80063fa:	1cc2      	adds	r2, r0, #3
 80063fc:	e7ec      	b.n	80063d8 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e7f9      	b.n	80063f6 <gpio_stm32_get_exti_source+0x3a>
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000

08006408 <gpio_stm32_clock_request>:
{
 8006408:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800640a:	6844      	ldr	r4, [r0, #4]
	if (on) {
 800640c:	b169      	cbz	r1, 800642a <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 800640e:	340c      	adds	r4, #12
 8006410:	480d      	ldr	r0, [pc, #52]	; (8006448 <gpio_stm32_clock_request+0x40>)
 8006412:	f009 f9be 	bl	800f792 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_on(const struct device *dev,
				   clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8006416:	b128      	cbz	r0, 8006424 <gpio_stm32_clock_request+0x1c>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006418:	480b      	ldr	r0, [pc, #44]	; (8006448 <gpio_stm32_clock_request+0x40>)
 800641a:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4621      	mov	r1, r4
 8006420:	4798      	blx	r3
}
 8006422:	bd10      	pop	{r4, pc}
		return -ENODEV;
 8006424:	f06f 0012 	mvn.w	r0, #18
 8006428:	e7fb      	b.n	8006422 <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 800642a:	340c      	adds	r4, #12
 800642c:	4806      	ldr	r0, [pc, #24]	; (8006448 <gpio_stm32_clock_request+0x40>)
 800642e:	f009 f9b0 	bl	800f792 <z_device_is_ready>
 * @return 0 on success, negative errno on failure.
 */
static inline int clock_control_off(const struct device *dev,
				    clock_control_subsys_t sys)
{
	if (!device_is_ready(dev)) {
 8006432:	b128      	cbz	r0, 8006440 <gpio_stm32_clock_request+0x38>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 8006434:	4804      	ldr	r0, [pc, #16]	; (8006448 <gpio_stm32_clock_request+0x40>)
 8006436:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	4621      	mov	r1, r4
 800643c:	4798      	blx	r3
 800643e:	e7f0      	b.n	8006422 <gpio_stm32_clock_request+0x1a>
		return -ENODEV;
 8006440:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8006444:	e7ed      	b.n	8006422 <gpio_stm32_clock_request+0x1a>
 8006446:	bf00      	nop
 8006448:	080106b8 	.word	0x080106b8

0800644c <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	4606      	mov	r6, r0
 8006452:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8006454:	4b0d      	ldr	r3, [pc, #52]	; (800648c <gpio_stm32_enable_int+0x40>)
 8006456:	e893 0003 	ldmia.w	r3, {r0, r1}
 800645a:	ab02      	add	r3, sp, #8
 800645c:	e903 0003 	stmdb	r3, {r0, r1}
 8006460:	480b      	ldr	r0, [pc, #44]	; (8006490 <gpio_stm32_enable_int+0x44>)
 8006462:	f009 f996 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006466:	b148      	cbz	r0, 800647c <gpio_stm32_enable_int+0x30>
	const struct clock_control_driver_api *api =
 8006468:	4809      	ldr	r0, [pc, #36]	; (8006490 <gpio_stm32_enable_int+0x44>)
 800646a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4669      	mov	r1, sp
 8006470:	4798      	blx	r3
 8006472:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8006474:	b12c      	cbz	r4, 8006482 <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8006476:	4620      	mov	r0, r4
 8006478:	b002      	add	sp, #8
 800647a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
 800647c:	f06f 0412 	mvn.w	r4, #18
 8006480:	e7f8      	b.n	8006474 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8006482:	4629      	mov	r1, r5
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ff6b 	bl	8006360 <gpio_stm32_set_exti_source>
	return 0;
 800648a:	e7f4      	b.n	8006476 <gpio_stm32_enable_int+0x2a>
 800648c:	08010bb0 	.word	0x08010bb0
 8006490:	080106b8 	.word	0x080106b8

08006494 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 800649a:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 800649c:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800649e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80064a2:	d01f      	beq.n	80064e4 <gpio_stm32_pin_interrupt_configure+0x50>
 80064a4:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 80064a6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80064aa:	d034      	beq.n	8006516 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 80064ac:	491d      	ldr	r1, [pc, #116]	; (8006524 <gpio_stm32_pin_interrupt_configure+0x90>)
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff fdf8 	bl	80060a4 <stm32_exti_set_callback>
 80064b4:	4606      	mov	r6, r0
 80064b6:	bb88      	cbnz	r0, 800651c <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 80064b8:	4621      	mov	r1, r4
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f7ff ffc6 	bl	800644c <gpio_stm32_enable_int>

	switch (trig) {
 80064c0:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 80064c4:	d023      	beq.n	800650e <gpio_stm32_pin_interrupt_configure+0x7a>
 80064c6:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 80064ca:	d022      	beq.n	8006512 <gpio_stm32_pin_interrupt_configure+0x7e>
 80064cc:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 80064d0:	d01b      	beq.n	800650a <gpio_stm32_pin_interrupt_configure+0x76>
 80064d2:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fdad 	bl	8006034 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80064da:	4620      	mov	r0, r4
 80064dc:	f7ff fd8e 	bl	8005ffc <stm32_exti_enable>

exit:
	return err;
}
 80064e0:	4630      	mov	r0, r6
 80064e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7ff ff69 	bl	80063bc <gpio_stm32_get_exti_source>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4298      	cmp	r0, r3
 80064ee:	d001      	beq.n	80064f4 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 80064f0:	2600      	movs	r6, #0
		goto exit;
 80064f2:	e7f5      	b.n	80064e0 <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff fd91 	bl	800601c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80064fa:	4620      	mov	r0, r4
 80064fc:	f7ff fde4 	bl	80060c8 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8006500:	2100      	movs	r1, #0
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff fd96 	bl	8006034 <stm32_exti_trigger>
 8006508:	e7f2      	b.n	80064f0 <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 800650a:	2102      	movs	r1, #2
 800650c:	e7e2      	b.n	80064d4 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 800650e:	2101      	movs	r1, #1
 8006510:	e7e0      	b.n	80064d4 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8006512:	2103      	movs	r1, #3
 8006514:	e7de      	b.n	80064d4 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8006516:	f06f 0685 	mvn.w	r6, #133	; 0x85
 800651a:	e7e1      	b.n	80064e0 <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 800651c:	f06f 060f 	mvn.w	r6, #15
	return err;
 8006520:	e7de      	b.n	80064e0 <gpio_stm32_pin_interrupt_configure+0x4c>
 8006522:	bf00      	nop
 8006524:	0800e74d 	.word	0x0800e74d

08006528 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	b0a4      	sub	sp, #144	; 0x90
 800652e:	f89d a0b0 	ldrb.w	sl, [sp, #176]	; 0xb0
	const struct pwm_stm32_config *cfg = dev->config;
 8006532:	6846      	ldr	r6, [r0, #4]

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8006534:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
 8006538:	f1b9 0f05 	cmp.w	r9, #5
 800653c:	d851      	bhi.n	80065e2 <pwm_stm32_pin_set+0xba>
 800653e:	4614      	mov	r4, r2
 8006540:	461d      	mov	r5, r3
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 8006542:	429a      	cmp	r2, r3
 8006544:	d373      	bcc.n	800662e <pwm_stm32_pin_set+0x106>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8006546:	f8d6 8000 	ldr.w	r8, [r6]
 800654a:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 800654e:	d003      	beq.n	8006558 <pwm_stm32_pin_set+0x30>
 8006550:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006554:	f200 811f 	bhi.w	8006796 <pwm_stm32_pin_set+0x26e>
			return -EBUSY;
		}
	}
#endif /* CONFIG_PWM_CAPTURE */

	channel = ch2ll[pwm - 1u];
 8006558:	4b90      	ldr	r3, [pc, #576]	; (800679c <pwm_stm32_pin_set+0x274>)
 800655a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]

	if (period_cycles == 0u) {
 800655e:	2c00      	cmp	r4, #0
 8006560:	f000 808a 	beq.w	8006678 <pwm_stm32_pin_set+0x150>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006564:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006568:	ea37 0303 	bics.w	r3, r7, r3
 800656c:	f000 808c 	beq.w	8006688 <pwm_stm32_pin_set+0x160>
	}

	if (!LL_TIM_CC_IsEnabledChannel(cfg->timer, channel)) {
		LL_TIM_OC_InitTypeDef oc_init;

		LL_TIM_OC_StructInit(&oc_init);
 8006570:	a802      	add	r0, sp, #8
 8006572:	f009 f86d 	bl	800f650 <LL_TIM_OC_StructInit>

		oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 8006576:	2360      	movs	r3, #96	; 0x60
 8006578:	9302      	str	r3, [sp, #8]
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800657a:	2301      	movs	r3, #1
 800657c:	9303      	str	r3, [sp, #12]
		oc_init.CompareValue = pulse_cycles;
 800657e:	9505      	str	r5, [sp, #20]
		oc_init.OCPolarity = get_polarity(flags);
 8006580:	4650      	mov	r0, sl
 8006582:	f008 fa7d 	bl	800ea80 <get_polarity>
 8006586:	9006      	str	r0, [sp, #24]
			LL_TIM_SetTriggerInput(cfg->timer, LL_TIM_TS_ITR0);
			LL_TIM_DisableMasterSlaveMode(cfg->timer);
		}
#endif /* CONFIG_PWM_CAPTURE */

		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8006588:	aa02      	add	r2, sp, #8
 800658a:	4639      	mov	r1, r7
 800658c:	6830      	ldr	r0, [r6, #0]
 800658e:	f009 f869 	bl	800f664 <LL_TIM_OC_Init>
 8006592:	4601      	mov	r1, r0
 8006594:	2800      	cmp	r0, #0
 8006596:	f040 80b6 	bne.w	8006706 <pwm_stm32_pin_set+0x1de>
			LOG_ERR("Could not initialize timer channel output");
			return -EIO;
		}

		LL_TIM_EnableARRPreload(cfg->timer);
 800659a:	6832      	ldr	r2, [r6, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	6013      	str	r3, [r2, #0]
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 80065a4:	6833      	ldr	r3, [r6, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80065a6:	2f01      	cmp	r7, #1
 80065a8:	f000 80d5 	beq.w	8006756 <pwm_stm32_pin_set+0x22e>
 80065ac:	2f04      	cmp	r7, #4
 80065ae:	f000 80d1 	beq.w	8006754 <pwm_stm32_pin_set+0x22c>
 80065b2:	2f10      	cmp	r7, #16
 80065b4:	f000 80e5 	beq.w	8006782 <pwm_stm32_pin_set+0x25a>
 80065b8:	2f40      	cmp	r7, #64	; 0x40
 80065ba:	f000 80e4 	beq.w	8006786 <pwm_stm32_pin_set+0x25e>
 80065be:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80065c2:	f000 80e2 	beq.w	800678a <pwm_stm32_pin_set+0x262>
 80065c6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80065ca:	f000 80e0 	beq.w	800678e <pwm_stm32_pin_set+0x266>
 80065ce:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80065d2:	f000 80de 	beq.w	8006792 <pwm_stm32_pin_set+0x26a>
 80065d6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80065da:	f000 80b9 	beq.w	8006750 <pwm_stm32_pin_set+0x228>
 80065de:	2108      	movs	r1, #8
 80065e0:	e0b9      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
		LOG_ERR("Invalid channel (%d)", pwm);
 80065e2:	2201      	movs	r2, #1
 80065e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80065e8:	4b6d      	ldr	r3, [pc, #436]	; (80067a0 <pwm_stm32_pin_set+0x278>)
 80065ea:	9322      	str	r3, [sp, #136]	; 0x88
 80065ec:	9123      	str	r1, [sp, #140]	; 0x8c
 80065ee:	2300      	movs	r3, #0
 80065f0:	9302      	str	r3, [sp, #8]
 80065f2:	2103      	movs	r1, #3
 80065f4:	f88d 1008 	strb.w	r1, [sp, #8]
 80065f8:	9902      	ldr	r1, [sp, #8]
 80065fa:	9121      	str	r1, [sp, #132]	; 0x84
 80065fc:	4619      	mov	r1, r3
 80065fe:	f363 0100 	bfi	r1, r3, #0, #1
 8006602:	f363 0141 	bfi	r1, r3, #1, #1
 8006606:	f363 0182 	bfi	r1, r3, #2, #1
 800660a:	f363 01c5 	bfi	r1, r3, #3, #3
 800660e:	f362 1188 	bfi	r1, r2, #6, #3
 8006612:	220c      	movs	r2, #12
 8006614:	f362 2152 	bfi	r1, r2, #9, #10
 8006618:	f363 41de 	bfi	r1, r3, #19, #12
 800661c:	f363 71df 	bfi	r1, r3, #31, #1
 8006620:	aa21      	add	r2, sp, #132	; 0x84
 8006622:	4860      	ldr	r0, [pc, #384]	; (80067a4 <pwm_stm32_pin_set+0x27c>)
 8006624:	f007 fef5 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006628:	f06f 0015 	mvn.w	r0, #21
 800662c:	e0a6      	b.n	800677c <pwm_stm32_pin_set+0x254>
		LOG_ERR("Invalid combination of pulse and period cycles");
 800662e:	2201      	movs	r2, #1
 8006630:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8006634:	4b5c      	ldr	r3, [pc, #368]	; (80067a8 <pwm_stm32_pin_set+0x280>)
 8006636:	931c      	str	r3, [sp, #112]	; 0x70
 8006638:	2300      	movs	r3, #0
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	2102      	movs	r1, #2
 800663e:	f88d 1008 	strb.w	r1, [sp, #8]
 8006642:	9902      	ldr	r1, [sp, #8]
 8006644:	911b      	str	r1, [sp, #108]	; 0x6c
 8006646:	4619      	mov	r1, r3
 8006648:	f363 0100 	bfi	r1, r3, #0, #1
 800664c:	f363 0141 	bfi	r1, r3, #1, #1
 8006650:	f363 0182 	bfi	r1, r3, #2, #1
 8006654:	f363 01c5 	bfi	r1, r3, #3, #3
 8006658:	f362 1188 	bfi	r1, r2, #6, #3
 800665c:	2208      	movs	r2, #8
 800665e:	f362 2152 	bfi	r1, r2, #9, #10
 8006662:	f363 41de 	bfi	r1, r3, #19, #12
 8006666:	f363 71df 	bfi	r1, r3, #31, #1
 800666a:	aa1b      	add	r2, sp, #108	; 0x6c
 800666c:	484d      	ldr	r0, [pc, #308]	; (80067a4 <pwm_stm32_pin_set+0x27c>)
 800666e:	f007 fed0 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
 8006672:	f06f 0015 	mvn.w	r0, #21
 8006676:	e081      	b.n	800677c <pwm_stm32_pin_set+0x254>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006678:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800667c:	ea23 0707 	bic.w	r7, r3, r7
 8006680:	f8c8 7020 	str.w	r7, [r8, #32]
		return 0;
 8006684:	2000      	movs	r0, #0
 8006686:	e079      	b.n	800677c <pwm_stm32_pin_set+0x254>
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
	} else {
		LL_TIM_OC_SetPolarity(cfg->timer, channel, get_polarity(flags));
 8006688:	4650      	mov	r0, sl
 800668a:	f008 f9f9 	bl	800ea80 <get_polarity>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800668e:	2f01      	cmp	r7, #1
 8006690:	d015      	beq.n	80066be <pwm_stm32_pin_set+0x196>
 8006692:	2f04      	cmp	r7, #4
 8006694:	d02b      	beq.n	80066ee <pwm_stm32_pin_set+0x1c6>
 8006696:	2f10      	cmp	r7, #16
 8006698:	d02b      	beq.n	80066f2 <pwm_stm32_pin_set+0x1ca>
 800669a:	2f40      	cmp	r7, #64	; 0x40
 800669c:	d02b      	beq.n	80066f6 <pwm_stm32_pin_set+0x1ce>
 800669e:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80066a2:	d02a      	beq.n	80066fa <pwm_stm32_pin_set+0x1d2>
 80066a4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80066a8:	d029      	beq.n	80066fe <pwm_stm32_pin_set+0x1d6>
 80066aa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80066ae:	d028      	beq.n	8006702 <pwm_stm32_pin_set+0x1da>
 80066b0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80066b4:	d001      	beq.n	80066ba <pwm_stm32_pin_set+0x192>
 80066b6:	2108      	movs	r1, #8
 80066b8:	e002      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066ba:	2107      	movs	r1, #7
 80066bc:	e000      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066be:	2100      	movs	r1, #0
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80066c0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80066c4:	4a39      	ldr	r2, [pc, #228]	; (80067ac <pwm_stm32_pin_set+0x284>)
 80066c6:	5c51      	ldrb	r1, [r2, r1]
 80066c8:	2202      	movs	r2, #2
 80066ca:	408a      	lsls	r2, r1
 80066cc:	ea23 0302 	bic.w	r3, r3, r2
 80066d0:	4088      	lsls	r0, r1
 80066d2:	4303      	orrs	r3, r0
 80066d4:	f8c8 3020 	str.w	r3, [r8, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 80066d8:	4b35      	ldr	r3, [pc, #212]	; (80067b0 <pwm_stm32_pin_set+0x288>)
 80066da:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80066de:	4629      	mov	r1, r5
 80066e0:	6830      	ldr	r0, [r6, #0]
 80066e2:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80066e8:	62dc      	str	r4, [r3, #44]	; 0x2c
	}

	return 0;
 80066ea:	2000      	movs	r0, #0
}
 80066ec:	e046      	b.n	800677c <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80066ee:	2101      	movs	r1, #1
 80066f0:	e7e6      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066f2:	2102      	movs	r1, #2
 80066f4:	e7e4      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066f6:	2103      	movs	r1, #3
 80066f8:	e7e2      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066fa:	2104      	movs	r1, #4
 80066fc:	e7e0      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 80066fe:	2105      	movs	r1, #5
 8006700:	e7de      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
 8006702:	2106      	movs	r1, #6
 8006704:	e7dc      	b.n	80066c0 <pwm_stm32_pin_set+0x198>
			LOG_ERR("Could not initialize timer channel output");
 8006706:	2201      	movs	r2, #1
 8006708:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800670c:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <pwm_stm32_pin_set+0x28c>)
 800670e:	9316      	str	r3, [sp, #88]	; 0x58
 8006710:	2300      	movs	r3, #0
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	2102      	movs	r1, #2
 8006716:	f88d 1004 	strb.w	r1, [sp, #4]
 800671a:	9901      	ldr	r1, [sp, #4]
 800671c:	9115      	str	r1, [sp, #84]	; 0x54
 800671e:	4619      	mov	r1, r3
 8006720:	f363 0100 	bfi	r1, r3, #0, #1
 8006724:	f363 0141 	bfi	r1, r3, #1, #1
 8006728:	f363 0182 	bfi	r1, r3, #2, #1
 800672c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006730:	f362 1188 	bfi	r1, r2, #6, #3
 8006734:	2208      	movs	r2, #8
 8006736:	f362 2152 	bfi	r1, r2, #9, #10
 800673a:	f363 41de 	bfi	r1, r3, #19, #12
 800673e:	f363 71df 	bfi	r1, r3, #31, #1
 8006742:	aa15      	add	r2, sp, #84	; 0x54
 8006744:	4817      	ldr	r0, [pc, #92]	; (80067a4 <pwm_stm32_pin_set+0x27c>)
 8006746:	f007 fe64 	bl	800e412 <z_impl_z_log_msg2_static_create>
			return -EIO;
 800674a:	f06f 0004 	mvn.w	r0, #4
 800674e:	e015      	b.n	800677c <pwm_stm32_pin_set+0x254>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006750:	2107      	movs	r1, #7
 8006752:	e000      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
 8006754:	2101      	movs	r1, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006756:	3318      	adds	r3, #24
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <pwm_stm32_pin_set+0x290>)
 800675a:	5c50      	ldrb	r0, [r2, r1]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800675c:	581a      	ldr	r2, [r3, r0]
 800675e:	4d17      	ldr	r5, [pc, #92]	; (80067bc <pwm_stm32_pin_set+0x294>)
 8006760:	5c6d      	ldrb	r5, [r5, r1]
 8006762:	2108      	movs	r1, #8
 8006764:	40a9      	lsls	r1, r5
 8006766:	430a      	orrs	r2, r1
 8006768:	501a      	str	r2, [r3, r0]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800676a:	6833      	ldr	r3, [r6, #0]
 800676c:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800676e:	62dc      	str	r4, [r3, #44]	; 0x2c
		LL_TIM_GenerateEvent_UPDATE(cfg->timer);
 8006770:	6832      	ldr	r2, [r6, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006772:	6953      	ldr	r3, [r2, #20]
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6153      	str	r3, [r2, #20]
	return 0;
 800677a:	2000      	movs	r0, #0
}
 800677c:	b024      	add	sp, #144	; 0x90
 800677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8006782:	2102      	movs	r1, #2
 8006784:	e7e7      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
 8006786:	2103      	movs	r1, #3
 8006788:	e7e5      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
 800678a:	2104      	movs	r1, #4
 800678c:	e7e3      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
 800678e:	2105      	movs	r1, #5
 8006790:	e7e1      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
 8006792:	2106      	movs	r1, #6
 8006794:	e7df      	b.n	8006756 <pwm_stm32_pin_set+0x22e>
		return -ENOTSUP;
 8006796:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800679a:	e7ef      	b.n	800677c <pwm_stm32_pin_set+0x254>
 800679c:	08011818 	.word	0x08011818
 80067a0:	080116cc 	.word	0x080116cc
 80067a4:	08010ad8 	.word	0x08010ad8
 80067a8:	080116e4 	.word	0x080116e4
 80067ac:	080117e0 	.word	0x080117e0
 80067b0:	0801184c 	.word	0x0801184c
 80067b4:	08011714 	.word	0x08011714
 80067b8:	080117d4 	.word	0x080117d4
 80067bc:	080117ec 	.word	0x080117ec

080067c0 <get_tim_clk>:
{
 80067c0:	b530      	push	{r4, r5, lr}
 80067c2:	b083      	sub	sp, #12
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	480c      	ldr	r0, [pc, #48]	; (80067fc <get_tim_clk+0x3c>)
 80067ca:	f008 ffe2 	bl	800f792 <z_device_is_ready>
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	if (!device_is_ready(dev)) {
 80067ce:	b170      	cbz	r0, 80067ee <get_tim_clk+0x2e>
		return -ENODEV;
	}

	const struct clock_control_driver_api *api =
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <get_tim_clk+0x3c>)
 80067d2:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	b16b      	cbz	r3, 80067f4 <get_tim_clk+0x34>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 80067d8:	aa01      	add	r2, sp, #4
 80067da:	4621      	mov	r1, r4
 80067dc:	4807      	ldr	r0, [pc, #28]	; (80067fc <get_tim_clk+0x3c>)
 80067de:	4798      	blx	r3
	if (r < 0) {
 80067e0:	2800      	cmp	r0, #0
 80067e2:	db02      	blt.n	80067ea <get_tim_clk+0x2a>
		*tim_clk = bus_clk;
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	602b      	str	r3, [r5, #0]
	return 0;
 80067e8:	2000      	movs	r0, #0
}
 80067ea:	b003      	add	sp, #12
 80067ec:	bd30      	pop	{r4, r5, pc}
		return -ENODEV;
 80067ee:	f06f 0012 	mvn.w	r0, #18
 80067f2:	e7f5      	b.n	80067e0 <get_tim_clk+0x20>
		return -ENOSYS;
 80067f4:	f06f 0057 	mvn.w	r0, #87	; 0x57
 80067f8:	e7f2      	b.n	80067e0 <get_tim_clk+0x20>
 80067fa:	bf00      	nop
 80067fc:	080106b8 	.word	0x080106b8

08006800 <pwm_stm32_init>:
	.pin_disable_capture = pwm_stm32_pin_disable_capture,
#endif /* CONFIG_PWM_CAPTURE */
};

static int pwm_stm32_init(const struct device *dev)
{
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	b0a7      	sub	sp, #156	; 0x9c
	struct pwm_stm32_data *data = dev->data;
 8006804:	6907      	ldr	r7, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 8006806:	6845      	ldr	r5, [r0, #4]
	LL_TIM_InitTypeDef init;

	/* enable clock and store its speed */
	clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 8006808:	f105 0608 	add.w	r6, r5, #8
 800680c:	4870      	ldr	r0, [pc, #448]	; (80069d0 <pwm_stm32_init+0x1d0>)
 800680e:	f008 ffc0 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006812:	2800      	cmp	r0, #0
 8006814:	d047      	beq.n	80068a6 <pwm_stm32_init+0xa6>
	const struct clock_control_driver_api *api =
 8006816:	486e      	ldr	r0, [pc, #440]	; (80069d0 <pwm_stm32_init+0x1d0>)
 8006818:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4631      	mov	r1, r6
 800681e:	4798      	blx	r3
 8006820:	4604      	mov	r4, r0
	if (r < 0) {
 8006822:	2c00      	cmp	r4, #0
 8006824:	db42      	blt.n	80068ac <pwm_stm32_init+0xac>
		LOG_ERR("Could not initialize clock (%d)", r);
		return r;
	}

	r = get_tim_clk(&cfg->pclken, &data->tim_clk);
 8006826:	4639      	mov	r1, r7
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff ffc9 	bl	80067c0 <get_tim_clk>
	if (r < 0) {
 800682e:	1e04      	subs	r4, r0, #0
 8006830:	db60      	blt.n	80068f4 <pwm_stm32_init+0xf4>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
 8006832:	aa01      	add	r2, sp, #4
 8006834:	2100      	movs	r1, #0
 8006836:	6928      	ldr	r0, [r5, #16]
 8006838:	f008 febd 	bl	800f5b6 <pinctrl_lookup_state>
	if (ret < 0) {
 800683c:	1e04      	subs	r4, r0, #0
 800683e:	db06      	blt.n	800684e <pwm_stm32_init+0x4e>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
 8006840:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006842:	2200      	movs	r2, #0
 8006844:	7919      	ldrb	r1, [r3, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	f008 fecf 	bl	800f5ea <pinctrl_configure_pins>
 800684c:	4604      	mov	r4, r0
		return r;
	}

	/* configure pinmux */
	r = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (r < 0) {
 800684e:	2c00      	cmp	r4, #0
 8006850:	db74      	blt.n	800693c <pwm_stm32_init+0x13c>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 8006852:	a809      	add	r0, sp, #36	; 0x24
 8006854:	f008 fef3 	bl	800f63e <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 8006858:	686b      	ldr	r3, [r5, #4]
 800685a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 800685e:	2300      	movs	r3, #0
 8006860:	930a      	str	r3, [sp, #40]	; 0x28
	init.Autoreload = 0u;
 8006862:	930b      	str	r3, [sp, #44]	; 0x2c
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8006864:	930c      	str	r3, [sp, #48]	; 0x30

	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8006866:	a909      	add	r1, sp, #36	; 0x24
 8006868:	6828      	ldr	r0, [r5, #0]
 800686a:	f003 fbd5 	bl	800a018 <LL_TIM_Init>
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8088 	bne.w	8006984 <pwm_stm32_init+0x184>
		return -EIO;
	}

#if !defined(CONFIG_SOC_SERIES_STM32L0X) && !defined(CONFIG_SOC_SERIES_STM32L1X)
	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	4a57      	ldr	r2, [pc, #348]	; (80069d4 <pwm_stm32_init+0x1d4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d007      	beq.n	800688c <pwm_stm32_init+0x8c>
 800687c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8006880:	4293      	cmp	r3, r2
 8006882:	d003      	beq.n	800688c <pwm_stm32_init+0x8c>
 8006884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006888:	4293      	cmp	r3, r2
 800688a:	d103      	bne.n	8006894 <pwm_stm32_init+0x94>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800688c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
		LL_TIM_EnableAllOutputs(cfg->timer);
	}
#endif

	LL_TIM_EnableCounter(cfg->timer);
 8006894:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006896:	6813      	ldr	r3, [r2, #0]
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6013      	str	r3, [r2, #0]

#ifdef CONFIG_PWM_CAPTURE
	cfg->irq_config_func(dev);
#endif /* CONFIG_PWM_CAPTURE */

	return 0;
 800689e:	2400      	movs	r4, #0
}
 80068a0:	4620      	mov	r0, r4
 80068a2:	b027      	add	sp, #156	; 0x9c
 80068a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENODEV;
 80068a6:	f06f 0412 	mvn.w	r4, #18
 80068aa:	e7ba      	b.n	8006822 <pwm_stm32_init+0x22>
		LOG_ERR("Could not initialize clock (%d)", r);
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 80068b2:	4b49      	ldr	r3, [pc, #292]	; (80069d8 <pwm_stm32_init+0x1d8>)
 80068b4:	9324      	str	r3, [sp, #144]	; 0x90
 80068b6:	9425      	str	r4, [sp, #148]	; 0x94
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2103      	movs	r1, #3
 80068be:	f88d 1000 	strb.w	r1, [sp]
 80068c2:	9900      	ldr	r1, [sp, #0]
 80068c4:	9123      	str	r1, [sp, #140]	; 0x8c
 80068c6:	4619      	mov	r1, r3
 80068c8:	f363 0100 	bfi	r1, r3, #0, #1
 80068cc:	f363 0141 	bfi	r1, r3, #1, #1
 80068d0:	f363 0182 	bfi	r1, r3, #2, #1
 80068d4:	f363 01c5 	bfi	r1, r3, #3, #3
 80068d8:	f362 1188 	bfi	r1, r2, #6, #3
 80068dc:	220c      	movs	r2, #12
 80068de:	f362 2152 	bfi	r1, r2, #9, #10
 80068e2:	f363 41de 	bfi	r1, r3, #19, #12
 80068e6:	f363 71df 	bfi	r1, r3, #31, #1
 80068ea:	aa23      	add	r2, sp, #140	; 0x8c
 80068ec:	483b      	ldr	r0, [pc, #236]	; (80069dc <pwm_stm32_init+0x1dc>)
 80068ee:	f007 fd90 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return r;
 80068f2:	e7d5      	b.n	80068a0 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not obtain timer clock (%d)", r);
 80068f4:	2201      	movs	r2, #1
 80068f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80068fa:	4b39      	ldr	r3, [pc, #228]	; (80069e0 <pwm_stm32_init+0x1e0>)
 80068fc:	931e      	str	r3, [sp, #120]	; 0x78
 80068fe:	941f      	str	r4, [sp, #124]	; 0x7c
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2103      	movs	r1, #3
 8006906:	f88d 1000 	strb.w	r1, [sp]
 800690a:	9900      	ldr	r1, [sp, #0]
 800690c:	911d      	str	r1, [sp, #116]	; 0x74
 800690e:	4619      	mov	r1, r3
 8006910:	f363 0100 	bfi	r1, r3, #0, #1
 8006914:	f363 0141 	bfi	r1, r3, #1, #1
 8006918:	f363 0182 	bfi	r1, r3, #2, #1
 800691c:	f363 01c5 	bfi	r1, r3, #3, #3
 8006920:	f362 1188 	bfi	r1, r2, #6, #3
 8006924:	220c      	movs	r2, #12
 8006926:	f362 2152 	bfi	r1, r2, #9, #10
 800692a:	f363 41de 	bfi	r1, r3, #19, #12
 800692e:	f363 71df 	bfi	r1, r3, #31, #1
 8006932:	aa1d      	add	r2, sp, #116	; 0x74
 8006934:	4829      	ldr	r0, [pc, #164]	; (80069dc <pwm_stm32_init+0x1dc>)
 8006936:	f007 fd6c 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return r;
 800693a:	e7b1      	b.n	80068a0 <pwm_stm32_init+0xa0>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 800693c:	2201      	movs	r2, #1
 800693e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006942:	4b28      	ldr	r3, [pc, #160]	; (80069e4 <pwm_stm32_init+0x1e4>)
 8006944:	9318      	str	r3, [sp, #96]	; 0x60
 8006946:	9419      	str	r4, [sp, #100]	; 0x64
 8006948:	2300      	movs	r3, #0
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2103      	movs	r1, #3
 800694e:	f88d 1000 	strb.w	r1, [sp]
 8006952:	9900      	ldr	r1, [sp, #0]
 8006954:	9117      	str	r1, [sp, #92]	; 0x5c
 8006956:	4619      	mov	r1, r3
 8006958:	f363 0100 	bfi	r1, r3, #0, #1
 800695c:	f363 0141 	bfi	r1, r3, #1, #1
 8006960:	f363 0182 	bfi	r1, r3, #2, #1
 8006964:	f363 01c5 	bfi	r1, r3, #3, #3
 8006968:	f362 1188 	bfi	r1, r2, #6, #3
 800696c:	220c      	movs	r2, #12
 800696e:	f362 2152 	bfi	r1, r2, #9, #10
 8006972:	f363 41de 	bfi	r1, r3, #19, #12
 8006976:	f363 71df 	bfi	r1, r3, #31, #1
 800697a:	aa17      	add	r2, sp, #92	; 0x5c
 800697c:	4817      	ldr	r0, [pc, #92]	; (80069dc <pwm_stm32_init+0x1dc>)
 800697e:	f007 fd48 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return r;
 8006982:	e78d      	b.n	80068a0 <pwm_stm32_init+0xa0>
		LOG_ERR("Could not initialize timer");
 8006984:	2201      	movs	r2, #1
 8006986:	f8ad 2004 	strh.w	r2, [sp, #4]
 800698a:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <pwm_stm32_init+0x1e8>)
 800698c:	9312      	str	r3, [sp, #72]	; 0x48
 800698e:	2300      	movs	r3, #0
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	2102      	movs	r1, #2
 8006994:	f88d 1000 	strb.w	r1, [sp]
 8006998:	9900      	ldr	r1, [sp, #0]
 800699a:	9111      	str	r1, [sp, #68]	; 0x44
 800699c:	4619      	mov	r1, r3
 800699e:	f363 0100 	bfi	r1, r3, #0, #1
 80069a2:	f363 0141 	bfi	r1, r3, #1, #1
 80069a6:	f363 0182 	bfi	r1, r3, #2, #1
 80069aa:	f363 01c5 	bfi	r1, r3, #3, #3
 80069ae:	f362 1188 	bfi	r1, r2, #6, #3
 80069b2:	2208      	movs	r2, #8
 80069b4:	f362 2152 	bfi	r1, r2, #9, #10
 80069b8:	f363 41de 	bfi	r1, r3, #19, #12
 80069bc:	f363 71df 	bfi	r1, r3, #31, #1
 80069c0:	aa11      	add	r2, sp, #68	; 0x44
 80069c2:	4806      	ldr	r0, [pc, #24]	; (80069dc <pwm_stm32_init+0x1dc>)
 80069c4:	f007 fd25 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EIO;
 80069c8:	f06f 0404 	mvn.w	r4, #4
 80069cc:	e768      	b.n	80068a0 <pwm_stm32_init+0xa0>
 80069ce:	bf00      	nop
 80069d0:	080106b8 	.word	0x080106b8
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	08011740 	.word	0x08011740
 80069dc:	08010ad8 	.word	0x08010ad8
 80069e0:	08011760 	.word	0x08011760
 80069e4:	08011784 	.word	0x08011784
 80069e8:	080117a4 	.word	0x080117a4

080069ec <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 80069ec:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 80069ee:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
 80069f2:	d101      	bne.n	80069f8 <spi_stm32_get_err+0xc>
		}

		return -EIO;
	}

	return 0;
 80069f4:	2000      	movs	r0, #0
}
 80069f6:	4770      	bx	lr
{
 80069f8:	b510      	push	{r4, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	4604      	mov	r4, r0
		LOG_ERR("%s: err=%d", __func__,
 80069fe:	9303      	str	r3, [sp, #12]
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <spi_stm32_get_err+0x48>)
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <spi_stm32_get_err+0x4c>)
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	9000      	str	r0, [sp, #0]
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2201      	movs	r2, #1
 8006a10:	490a      	ldr	r1, [pc, #40]	; (8006a3c <spi_stm32_get_err+0x50>)
 8006a12:	f008 f851 	bl	800eab8 <z_log_msg2_runtime_create>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8006a16:	68a3      	ldr	r3, [r4, #8]
 8006a18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a1c:	d005      	beq.n	8006a2a <spi_stm32_get_err+0x3e>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006a22:	9b05      	ldr	r3, [sp, #20]
  tmpreg = SPIx->SR;
 8006a24:	68a3      	ldr	r3, [r4, #8]
 8006a26:	9305      	str	r3, [sp, #20]
  (void) tmpreg;
 8006a28:	9b05      	ldr	r3, [sp, #20]
		return -EIO;
 8006a2a:	f06f 0004 	mvn.w	r0, #4
}
 8006a2e:	b006      	add	sp, #24
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	0801196c 	.word	0x0801196c
 8006a38:	08011864 	.word	0x08011864
 8006a3c:	08010af0 	.word	0x08010af0

08006a40 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8006a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a44:	b098      	sub	sp, #96	; 0x60
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = dev->config;
 8006a4a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006a4e:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8006a50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006a54:	f8df c298 	ldr.w	ip, [pc, #664]	; 8006cf0 <spi_stm32_configure+0x2b0>
 8006a58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8006a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8006a66:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8006a6a:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8006a6c:	42ab      	cmp	r3, r5
 8006a6e:	f000 8139 	beq.w	8006ce4 <spi_stm32_configure+0x2a4>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8006a72:	88ab      	ldrh	r3, [r5, #4]
 8006a74:	f3c3 1245 	ubfx	r2, r3, #5, #6
 8006a78:	2a08      	cmp	r2, #8
 8006a7a:	d002      	beq.n	8006a82 <spi_stm32_configure+0x42>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8006a7c:	2a10      	cmp	r2, #16
 8006a7e:	f040 8133 	bne.w	8006ce8 <spi_stm32_configure+0x2a8>
		return -ENOTSUP;
	}

	/* configure the frame format Motorola (default) or TI */
	if ((config->operation & SPI_FRAME_FORMAT_TI) == SPI_FRAME_FORMAT_TI) {
 8006a82:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006a86:	d11c      	bne.n	8006ac2 <spi_stm32_configure+0x82>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	6063      	str	r3, [r4, #4]
 8006a90:	4898      	ldr	r0, [pc, #608]	; (8006cf4 <spi_stm32_configure+0x2b4>)
 8006a92:	f008 fe7e 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006a96:	b1c8      	cbz	r0, 8006acc <spi_stm32_configure+0x8c>
	const struct clock_control_driver_api *api =
 8006a98:	4b96      	ldr	r3, [pc, #600]	; (8006cf4 <spi_stm32_configure+0x2b4>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
	if (api->get_rate == NULL) {
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	b1c3      	cbz	r3, 8006ad2 <spi_stm32_configure+0x92>
	return api->get_rate(dev, sys, rate);
 8006aa0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	4893      	ldr	r0, [pc, #588]	; (8006cf4 <spi_stm32_configure+0x2b4>)
 8006aa8:	4798      	blx	r3
	} else {
		LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif
}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	db14      	blt.n	8006ad8 <spi_stm32_configure+0x98>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006aae:	2301      	movs	r3, #1
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	dc35      	bgt.n	8006b20 <spi_stm32_configure+0xe0>
		uint32_t clk = clock >> br;
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab6:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8006ab8:	6829      	ldr	r1, [r5, #0]
 8006aba:	4291      	cmp	r1, r2
 8006abc:	d230      	bcs.n	8006b20 <spi_stm32_configure+0xe0>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8006abe:	3301      	adds	r3, #1
 8006ac0:	e7f6      	b.n	8006ab0 <spi_stm32_configure+0x70>
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	f043 0310 	orr.w	r3, r3, #16
 8006ac8:	6063      	str	r3, [r4, #4]
}
 8006aca:	e7e1      	b.n	8006a90 <spi_stm32_configure+0x50>
		return -ENODEV;
 8006acc:	f06f 0012 	mvn.w	r0, #18
 8006ad0:	e7eb      	b.n	8006aaa <spi_stm32_configure+0x6a>
		return -ENOSYS;
 8006ad2:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8006ad6:	e7e8      	b.n	8006aaa <spi_stm32_configure+0x6a>
		LOG_ERR("Failed call clock_control_get_rate");
 8006ad8:	2201      	movs	r2, #1
 8006ada:	80ba      	strh	r2, [r7, #4]
 8006adc:	4b86      	ldr	r3, [pc, #536]	; (8006cf8 <spi_stm32_configure+0x2b8>)
 8006ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	7039      	strb	r1, [r7, #0]
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6579      	str	r1, [r7, #84]	; 0x54
 8006aec:	4619      	mov	r1, r3
 8006aee:	f363 0100 	bfi	r1, r3, #0, #1
 8006af2:	f363 0141 	bfi	r1, r3, #1, #1
 8006af6:	f363 0182 	bfi	r1, r3, #2, #1
 8006afa:	f363 01c5 	bfi	r1, r3, #3, #3
 8006afe:	f362 1188 	bfi	r1, r2, #6, #3
 8006b02:	2208      	movs	r2, #8
 8006b04:	f362 2152 	bfi	r1, r2, #9, #10
 8006b08:	f363 41de 	bfi	r1, r3, #19, #12
 8006b0c:	f363 71df 	bfi	r1, r3, #31, #1
 8006b10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8006b14:	4879      	ldr	r0, [pc, #484]	; (8006cfc <spi_stm32_configure+0x2bc>)
 8006b16:	f007 fc7c 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006b1a:	f06f 0004 	mvn.w	r0, #4
 8006b1e:	e059      	b.n	8006bd4 <spi_stm32_configure+0x194>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	dc5b      	bgt.n	8006bdc <spi_stm32_configure+0x19c>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2a:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b36:	f853 3c38 	ldr.w	r3, [r3, #-56]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006b40:	4313      	orrs	r3, r2
 8006b42:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8006b44:	88ab      	ldrh	r3, [r5, #4]
 8006b46:	f013 0f02 	tst.w	r3, #2
 8006b4a:	f000 8098 	beq.w	8006c7e <spi_stm32_configure+0x23e>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f043 0302 	orr.w	r3, r3, #2
 8006b54:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8006b56:	88ab      	ldrh	r3, [r5, #4]
 8006b58:	f013 0f04 	tst.w	r3, #4
 8006b5c:	f000 8094 	beq.w	8006c88 <spi_stm32_configure+0x248>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 8006b6e:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 8006b70:	88ab      	ldrh	r3, [r5, #4]
 8006b72:	f013 0f10 	tst.w	r3, #16
 8006b76:	f000 808c 	beq.w	8006c92 <spi_stm32_configure+0x252>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b80:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b88:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8006b8a:	68ab      	ldr	r3, [r5, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8085 	beq.w	8006c9c <spi_stm32_configure+0x25c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b98:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	f023 0304 	bic.w	r3, r3, #4
 8006ba0:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 8006ba2:	88ab      	ldrh	r3, [r5, #4]
 8006ba4:	f013 0f01 	tst.w	r3, #1
 8006ba8:	f000 8090 	beq.w	8006ccc <spi_stm32_configure+0x28c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 8006bb2:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8006bb4:	88ab      	ldrh	r3, [r5, #4]
 8006bb6:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	f000 808b 	beq.w	8006cd6 <spi_stm32_configure+0x296>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8006bc6:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bce:	6063      	str	r3, [r4, #4]
#if DT_HAS_COMPAT_STATUS_OKAY(st_stm32_spi_fifo)
	ll_func_set_fifo_threshold_8bit(spi);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 8006bd0:	6035      	str	r5, [r6, #0]
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 8006bd2:	2000      	movs	r0, #0
}
 8006bd4:	3760      	adds	r7, #96	; 0x60
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006bdc:	2301      	movs	r3, #1
 8006bde:	80bb      	strh	r3, [r7, #4]
 8006be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be2:	fa20 f603 	lsr.w	r6, r0, r3
 8006be6:	0a00      	lsrs	r0, r0, #8
 8006be8:	466c      	mov	r4, sp
 8006bea:	b088      	sub	sp, #32
 8006bec:	466b      	mov	r3, sp
 8006bee:	f113 020c 	adds.w	r2, r3, #12
 8006bf2:	d03e      	beq.n	8006c72 <spi_stm32_configure+0x232>
 8006bf4:	2114      	movs	r1, #20
 8006bf6:	f04f 0c01 	mov.w	ip, #1
 8006bfa:	f8a7 c004 	strh.w	ip, [r7, #4]
 8006bfe:	b12a      	cbz	r2, 8006c0c <spi_stm32_configure+0x1cc>
 8006c00:	2904      	cmp	r1, #4
 8006c02:	dd03      	ble.n	8006c0c <spi_stm32_configure+0x1cc>
 8006c04:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006d00 <spi_stm32_configure+0x2c0>
 8006c08:	f8c3 c010 	str.w	ip, [r3, #16]
 8006c0c:	682d      	ldr	r5, [r5, #0]
 8006c0e:	b112      	cbz	r2, 8006c16 <spi_stm32_configure+0x1d6>
 8006c10:	2908      	cmp	r1, #8
 8006c12:	dd00      	ble.n	8006c16 <spi_stm32_configure+0x1d6>
 8006c14:	615d      	str	r5, [r3, #20]
 8006c16:	b112      	cbz	r2, 8006c1e <spi_stm32_configure+0x1de>
 8006c18:	290c      	cmp	r1, #12
 8006c1a:	dd00      	ble.n	8006c1e <spi_stm32_configure+0x1de>
 8006c1c:	619e      	str	r6, [r3, #24]
 8006c1e:	b112      	cbz	r2, 8006c26 <spi_stm32_configure+0x1e6>
 8006c20:	2910      	cmp	r1, #16
 8006c22:	dd00      	ble.n	8006c26 <spi_stm32_configure+0x1e6>
 8006c24:	61d8      	str	r0, [r3, #28]
 8006c26:	2913      	cmp	r1, #19
 8006c28:	dd26      	ble.n	8006c78 <spi_stm32_configure+0x238>
 8006c2a:	2014      	movs	r0, #20
 8006c2c:	b12a      	cbz	r2, 8006c3a <spi_stm32_configure+0x1fa>
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	2105      	movs	r1, #5
 8006c34:	7039      	strb	r1, [r7, #0]
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	60d9      	str	r1, [r3, #12]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f36f 0100 	bfc	r1, #0, #1
 8006c40:	f36f 0141 	bfc	r1, #1, #1
 8006c44:	f36f 0182 	bfc	r1, #2, #1
 8006c48:	f36f 01c5 	bfc	r1, #3, #3
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f363 1188 	bfi	r1, r3, #6, #3
 8006c52:	f400 707d 	and.w	r0, r0, #1012	; 0x3f4
 8006c56:	f360 2152 	bfi	r1, r0, #9, #10
 8006c5a:	f36f 41de 	bfc	r1, #19, #12
 8006c5e:	f36f 71df 	bfc	r1, #31, #1
 8006c62:	2300      	movs	r3, #0
 8006c64:	4825      	ldr	r0, [pc, #148]	; (8006cfc <spi_stm32_configure+0x2bc>)
 8006c66:	f007 fbd4 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8006c6a:	46a5      	mov	sp, r4
		return -EINVAL;
 8006c6c:	f06f 0015 	mvn.w	r0, #21
 8006c70:	e7b0      	b.n	8006bd4 <spi_stm32_configure+0x194>
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8006c72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c76:	e7be      	b.n	8006bf6 <spi_stm32_configure+0x1b6>
 8006c78:	f06f 001b 	mvn.w	r0, #27
 8006c7c:	e7d6      	b.n	8006c2c <spi_stm32_configure+0x1ec>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f023 0302 	bic.w	r3, r3, #2
 8006c84:	6023      	str	r3, [r4, #0]
}
 8006c86:	e766      	b.n	8006b56 <spi_stm32_configure+0x116>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	6023      	str	r3, [r4, #0]
}
 8006c90:	e76a      	b.n	8006b68 <spi_stm32_configure+0x128>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c98:	6023      	str	r3, [r4, #0]
}
 8006c9a:	e772      	b.n	8006b82 <spi_stm32_configure+0x142>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8006c9c:	88ab      	ldrh	r3, [r5, #4]
 8006c9e:	f013 0f01 	tst.w	r3, #1
 8006ca2:	d008      	beq.n	8006cb6 <spi_stm32_configure+0x276>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006caa:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	f023 0304 	bic.w	r3, r3, #4
 8006cb2:	6063      	str	r3, [r4, #4]
}
 8006cb4:	e775      	b.n	8006ba2 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc0:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	6063      	str	r3, [r4, #4]
}
 8006cca:	e76a      	b.n	8006ba2 <spi_stm32_configure+0x162>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 8006cd2:	6023      	str	r3, [r4, #0]
}
 8006cd4:	e76e      	b.n	8006bb4 <spi_stm32_configure+0x174>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cdc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ce0:	6063      	str	r3, [r4, #4]
}
 8006ce2:	e771      	b.n	8006bc8 <spi_stm32_configure+0x188>
		return 0;
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e775      	b.n	8006bd4 <spi_stm32_configure+0x194>
		return -ENOTSUP;
 8006ce8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8006cec:	e772      	b.n	8006bd4 <spi_stm32_configure+0x194>
 8006cee:	bf00      	nop
 8006cf0:	08010bb8 	.word	0x08010bb8
 8006cf4:	080106b8 	.word	0x080106b8
 8006cf8:	08011870 	.word	0x08011870
 8006cfc:	08010af0 	.word	0x08010af0
 8006d00:	08011894 	.word	0x08011894

08006d04 <spi_stm32_init>:
	return false;
#endif
}

static int spi_stm32_init(const struct device *dev)
{
 8006d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d08:	b09b      	sub	sp, #108	; 0x6c
 8006d0a:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8006d0c:	6905      	ldr	r5, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 8006d0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006d12:	4873      	ldr	r0, [pc, #460]	; (8006ee0 <spi_stm32_init+0x1dc>)
 8006d14:	f008 fd3d 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8006d18:	b1f8      	cbz	r0, 8006d5a <spi_stm32_init+0x56>
	const struct clock_control_driver_api *api =
 8006d1a:	4871      	ldr	r0, [pc, #452]	; (8006ee0 <spi_stm32_init+0x1dc>)
 8006d1c:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4641      	mov	r1, r8
 8006d22:	4798      	blx	r3
 8006d24:	4681      	mov	r9, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	d119      	bne.n	8006d60 <spi_stm32_init+0x5c>
	ret = pinctrl_lookup_state(config, id, &state);
 8006d2c:	aa06      	add	r2, sp, #24
 8006d2e:	2100      	movs	r1, #0
 8006d30:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006d34:	f008 fc3f 	bl	800f5b6 <pinctrl_lookup_state>
	if (ret < 0) {
 8006d38:	1e07      	subs	r7, r0, #0
 8006d3a:	db06      	blt.n	8006d4a <spi_stm32_init+0x46>
	return pinctrl_apply_state_direct(config, state);
 8006d3c:	9b06      	ldr	r3, [sp, #24]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	7919      	ldrb	r1, [r3, #4]
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	f008 fc51 	bl	800f5ea <pinctrl_configure_pins>
 8006d48:	4607      	mov	r7, r0
	}

	if (!spi_stm32_is_subghzspi(dev)) {
		/* Configure dt provided device signals when available */
		err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
		if (err < 0) {
 8006d4a:	2f00      	cmp	r7, #0
 8006d4c:	db2d      	blt.n	8006daa <spi_stm32_init+0xa6>
			return err;
		}
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8006d4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006d52:	4620      	mov	r0, r4
 8006d54:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006d56:	68ac      	ldr	r4, [r5, #8]
 8006d58:	e06c      	b.n	8006e34 <spi_stm32_init+0x130>
		return -ENODEV;
 8006d5a:	f06f 0912 	mvn.w	r9, #18
 8006d5e:	e7e2      	b.n	8006d26 <spi_stm32_init+0x22>
		LOG_ERR("Could not enable SPI clock");
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006d66:	4b5f      	ldr	r3, [pc, #380]	; (8006ee4 <spi_stm32_init+0x1e0>)
 8006d68:	9318      	str	r3, [sp, #96]	; 0x60
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9305      	str	r3, [sp, #20]
 8006d6e:	2102      	movs	r1, #2
 8006d70:	f88d 1014 	strb.w	r1, [sp, #20]
 8006d74:	9905      	ldr	r1, [sp, #20]
 8006d76:	9117      	str	r1, [sp, #92]	; 0x5c
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f363 0100 	bfi	r1, r3, #0, #1
 8006d7e:	f363 0141 	bfi	r1, r3, #1, #1
 8006d82:	f363 0182 	bfi	r1, r3, #2, #1
 8006d86:	f363 01c5 	bfi	r1, r3, #3, #3
 8006d8a:	f362 1188 	bfi	r1, r2, #6, #3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	f362 2152 	bfi	r1, r2, #9, #10
 8006d94:	f363 41de 	bfi	r1, r3, #19, #12
 8006d98:	f363 71df 	bfi	r1, r3, #31, #1
 8006d9c:	aa17      	add	r2, sp, #92	; 0x5c
 8006d9e:	4852      	ldr	r0, [pc, #328]	; (8006ee8 <spi_stm32_init+0x1e4>)
 8006da0:	f007 fb37 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8006da4:	f06f 0704 	mvn.w	r7, #4
 8006da8:	e087      	b.n	8006eba <spi_stm32_init+0x1b6>
			LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8006daa:	2201      	movs	r2, #1
 8006dac:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006db0:	4b4e      	ldr	r3, [pc, #312]	; (8006eec <spi_stm32_init+0x1e8>)
 8006db2:	9312      	str	r3, [sp, #72]	; 0x48
 8006db4:	9713      	str	r7, [sp, #76]	; 0x4c
 8006db6:	2300      	movs	r3, #0
 8006db8:	9305      	str	r3, [sp, #20]
 8006dba:	2103      	movs	r1, #3
 8006dbc:	f88d 1014 	strb.w	r1, [sp, #20]
 8006dc0:	9905      	ldr	r1, [sp, #20]
 8006dc2:	9111      	str	r1, [sp, #68]	; 0x44
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	f363 0100 	bfi	r1, r3, #0, #1
 8006dca:	f363 0141 	bfi	r1, r3, #1, #1
 8006dce:	f363 0182 	bfi	r1, r3, #2, #1
 8006dd2:	f363 01c5 	bfi	r1, r3, #3, #3
 8006dd6:	f362 1188 	bfi	r1, r2, #6, #3
 8006dda:	220c      	movs	r2, #12
 8006ddc:	f362 2152 	bfi	r1, r2, #9, #10
 8006de0:	f363 41de 	bfi	r1, r3, #19, #12
 8006de4:	f363 71df 	bfi	r1, r3, #31, #1
 8006de8:	aa11      	add	r2, sp, #68	; 0x44
 8006dea:	483f      	ldr	r0, [pc, #252]	; (8006ee8 <spi_stm32_init+0x1e4>)
 8006dec:	f007 fb11 	bl	800e412 <z_impl_z_log_msg2_static_create>
			return err;
 8006df0:	e063      	b.n	8006eba <spi_stm32_init+0x1b6>
		if (!device_is_ready(cs_gpio->port)) {
			LOG_ERR("CS GPIO port %s pin %d is not ready",
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	7922      	ldrb	r2, [r4, #4]
 8006df6:	9203      	str	r2, [sp, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	9302      	str	r3, [sp, #8]
 8006dfc:	4b3c      	ldr	r3, [pc, #240]	; (8006ef0 <spi_stm32_init+0x1ec>)
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	9000      	str	r0, [sp, #0]
 8006e02:	4603      	mov	r3, r0
 8006e04:	2201      	movs	r2, #1
 8006e06:	4938      	ldr	r1, [pc, #224]	; (8006ee8 <spi_stm32_init+0x1e4>)
 8006e08:	f007 fe56 	bl	800eab8 <z_log_msg2_runtime_create>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
 8006e0c:	f06f 0712 	mvn.w	r7, #18
 8006e10:	e034      	b.n	8006e7c <spi_stm32_init+0x178>
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8006e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8006e16:	f013 0f01 	tst.w	r3, #1
 8006e1a:	d026      	beq.n	8006e6a <spi_stm32_init+0x166>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	fa03 fe01 	lsl.w	lr, r3, r1
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	ea43 030e 	orr.w	r3, r3, lr
 8006e28:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
 8006e2a:	6833      	ldr	r3, [r6, #0]
 8006e2c:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
 8006e2e:	1e07      	subs	r7, r0, #0
 8006e30:	db24      	blt.n	8006e7c <spi_stm32_init+0x178>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
 8006e32:	3408      	adds	r4, #8
 8006e34:	68ab      	ldr	r3, [r5, #8]
 8006e36:	68ea      	ldr	r2, [r5, #12]
 8006e38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d21c      	bcs.n	8006e7a <spi_stm32_init+0x176>
		if (!device_is_ready(cs_gpio->port)) {
 8006e40:	6820      	ldr	r0, [r4, #0]
 8006e42:	f008 fca6 	bl	800f792 <z_device_is_ready>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0d3      	beq.n	8006df2 <spi_stm32_init+0xee>
	return gpio_pin_configure(spec->port,
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
 8006e4e:	7963      	ldrb	r3, [r4, #5]
	return gpio_pin_configure(spec->port,
 8006e50:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 8006e54:	6886      	ldr	r6, [r0, #8]
	struct gpio_driver_data *data =
 8006e56:	6907      	ldr	r7, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8006e58:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8006e5c:	d0d9      	beq.n	8006e12 <spi_stm32_init+0x10e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8006e5e:	f013 0f01 	tst.w	r3, #1
 8006e62:	d0d6      	beq.n	8006e12 <spi_stm32_init+0x10e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8006e64:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8006e68:	e7d3      	b.n	8006e12 <spi_stm32_init+0x10e>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	fa03 fe01 	lsl.w	lr, r3, r1
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	ea23 030e 	bic.w	r3, r3, lr
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	e7d7      	b.n	8006e2a <spi_stm32_init+0x126>
			return ret;
		}
	}

	return 0;
 8006e7a:	464f      	mov	r7, r9
		return -ENODEV;
	}
#endif /* CONFIG_SPI_STM32_DMA */

	err = spi_context_cs_configure_all(&data->ctx);
	if (err < 0) {
 8006e7c:	2f00      	cmp	r7, #0
 8006e7e:	db1c      	blt.n	8006eba <spi_stm32_init+0x1b6>
}

static inline void _spi_context_cs_control(struct spi_context *ctx,
					   bool on, bool force_off)
{
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b1bb      	cbz	r3, 8006eb4 <spi_stm32_init+0x1b0>
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	b1ab      	cbz	r3, 8006eb4 <spi_stm32_init+0x1b0>
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	b19a      	cbz	r2, 8006eb4 <spi_stm32_init+0x1b0>
			if (!force_off &&
			    ctx->config->operation & SPI_HOLD_ON_CS) {
				return;
			}

			k_busy_wait(ctx->config->cs->delay);
 8006e8c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 8006e8e:	f004 ff4d 	bl	800bd2c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 8006e92:	682b      	ldr	r3, [r5, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_data *const data =
 8006e9a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4093      	lsls	r3, r2
 8006ea2:	4219      	tst	r1, r3
 8006ea4:	d10d      	bne.n	8006ec2 <spi_stm32_init+0x1be>
 8006ea6:	464b      	mov	r3, r9
	if (value != 0)	{
 8006ea8:	b16b      	cbz	r3, 8006ec6 <spi_stm32_init+0x1c2>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006eaa:	2101      	movs	r1, #1
 8006eac:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006eae:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4798      	blx	r3
	return sem->count;
 8006eb4:	69ab      	ldr	r3, [r5, #24]
static inline void spi_context_unlock_unconditionally(struct spi_context *ctx)
{
	/* Forcing CS to go to inactive status */
	_spi_context_cs_control(ctx, false, true);

	if (!k_sem_count_get(&ctx->lock)) {
 8006eb6:	b163      	cbz	r3, 8006ed2 <spi_stm32_init+0x1ce>
		return err;
	}

	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
 8006eb8:	464f      	mov	r7, r9
}
 8006eba:	4638      	mov	r0, r7
 8006ebc:	b01b      	add	sp, #108	; 0x6c
 8006ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = (value != 0) ? 0 : 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e7f0      	b.n	8006ea8 <spi_stm32_init+0x1a4>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4091      	lsls	r1, r2
	const struct gpio_driver_api *api =
 8006eca:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 8006ed0:	e7f0      	b.n	8006eb4 <spi_stm32_init+0x1b0>
		ctx->owner = NULL;
 8006ed2:	606b      	str	r3, [r5, #4]
		k_sem_give(&ctx->lock);
 8006ed4:	f105 0010 	add.w	r0, r5, #16
	z_impl_k_sem_give(sem);
 8006ed8:	f004 f80e 	bl	800aef8 <z_impl_k_sem_give>
}
 8006edc:	e7ec      	b.n	8006eb8 <spi_stm32_init+0x1b4>
 8006ede:	bf00      	nop
 8006ee0:	080106b8 	.word	0x080106b8
 8006ee4:	080118c4 	.word	0x080118c4
 8006ee8:	08010af0 	.word	0x08010af0
 8006eec:	080118e0 	.word	0x080118e0
 8006ef0:	08011900 	.word	0x08011900

08006ef4 <transceive>:
{
 8006ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ef8:	b091      	sub	sp, #68	; 0x44
 8006efa:	4605      	mov	r5, r0
 8006efc:	4688      	mov	r8, r1
 8006efe:	461f      	mov	r7, r3
	const struct spi_stm32_config *cfg = dev->config;
 8006f00:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 8006f02:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 8006f04:	689e      	ldr	r6, [r3, #8]
	if (!tx_bufs && !rx_bufs) {
 8006f06:	4691      	mov	r9, r2
 8006f08:	b31a      	cbz	r2, 8006f52 <transceive+0x5e>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8006f0a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006f0e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006f12:	d004      	beq.n	8006f1e <transceive+0x2a>
 8006f14:	69a3      	ldr	r3, [r4, #24]
 8006f16:	b913      	cbnz	r3, 8006f1e <transceive+0x2a>
		(ctx->owner == spi_cfg)) {
 8006f18:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 8006f1a:	4598      	cmp	r8, r3
 8006f1c:	d009      	beq.n	8006f32 <transceive+0x3e>
	k_sem_take(&ctx->lock, K_FOREVER);
 8006f1e:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
 8006f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f2a:	f004 f80d 	bl	800af48 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 8006f2e:	f8c4 8004 	str.w	r8, [r4, #4]
	ret = spi_stm32_configure(dev, config);
 8006f32:	4641      	mov	r1, r8
 8006f34:	4628      	mov	r0, r5
 8006f36:	f7ff fd83 	bl	8006a40 <spi_stm32_configure>
	if (ret) {
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	b170      	cbz	r0, 8006f5c <transceive+0x68>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	889b      	ldrh	r3, [r3, #4]
 8006f42:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006f46:	f000 80ab 	beq.w	80070a0 <transceive+0x1ac>
}
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	b011      	add	sp, #68	; 0x44
 8006f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 8006f52:	2f00      	cmp	r7, #0
 8006f54:	d1d9      	bne.n	8006f0a <transceive+0x16>
		return 0;
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	e7f6      	b.n	8006f4a <transceive+0x56>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	d00b      	beq.n	8006f7a <transceive+0x86>
 8006f62:	f8d9 3000 	ldr.w	r3, [r9]
 8006f66:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006f68:	b14b      	cbz	r3, 8006f7e <transceive+0x8a>
 8006f6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006f6e:	64a3      	str	r3, [r4, #72]	; 0x48
	ctx->tx_buf = (const uint8_t *)
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
 8006f70:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8006f74:	f104 0148 	add.w	r1, r4, #72	; 0x48
	while (*count) {
 8006f78:	e008      	b.n	8006f8c <transceive+0x98>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	e7f3      	b.n	8006f66 <transceive+0x72>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e7f5      	b.n	8006f6e <transceive+0x7a>
		++(*current);
 8006f82:	3208      	adds	r2, #8
 8006f84:	6002      	str	r2, [r0, #0]
		--(*count);
 8006f86:	680b      	ldr	r3, [r1, #0]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	600b      	str	r3, [r1, #0]
	while (*count) {
 8006f8c:	680b      	ldr	r3, [r1, #0]
 8006f8e:	b13b      	cbz	r3, 8006fa0 <transceive+0xac>
		if (((*current)->len / dfs) != 0) {
 8006f90:	6802      	ldr	r2, [r0, #0]
 8006f92:	6853      	ldr	r3, [r2, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f4      	beq.n	8006f82 <transceive+0x8e>
			*buf_len = (*current)->len / dfs;
 8006f98:	65a3      	str	r3, [r4, #88]	; 0x58
			return (*current)->buf;
 8006f9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	e000      	b.n	8006fa2 <transceive+0xae>
	*buf_len = 0;
 8006fa0:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->tx_buf = (const uint8_t *)
 8006fa2:	6563      	str	r3, [r4, #84]	; 0x54
					 &ctx->tx_len, dfs);

	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006fa4:	b19f      	cbz	r7, 8006fce <transceive+0xda>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006faa:	b193      	cbz	r3, 8006fd2 <transceive+0xde>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->rx_buf = (uint8_t *)
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
 8006fb0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8006fb4:	f104 0150 	add.w	r1, r4, #80	; 0x50
	while (*count) {
 8006fb8:	680b      	ldr	r3, [r1, #0]
 8006fba:	b183      	cbz	r3, 8006fde <transceive+0xea>
		if (((*current)->len / dfs) != 0) {
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	6853      	ldr	r3, [r2, #4]
 8006fc0:	b94b      	cbnz	r3, 8006fd6 <transceive+0xe2>
		++(*current);
 8006fc2:	3208      	adds	r2, #8
 8006fc4:	6002      	str	r2, [r0, #0]
		--(*count);
 8006fc6:	680b      	ldr	r3, [r1, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	600b      	str	r3, [r1, #0]
 8006fcc:	e7f4      	b.n	8006fb8 <transceive+0xc4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
 8006fce:	463b      	mov	r3, r7
 8006fd0:	e7ea      	b.n	8006fa8 <transceive+0xb4>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e7eb      	b.n	8006fae <transceive+0xba>
			*buf_len = (*current)->len / dfs;
 8006fd6:	6623      	str	r3, [r4, #96]	; 0x60
			return (*current)->buf;
 8006fd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	e000      	b.n	8006fe0 <transceive+0xec>
	*buf_len = 0;
 8006fde:	6623      	str	r3, [r4, #96]	; 0x60
	ctx->rx_buf = (uint8_t *)
 8006fe0:	65e3      	str	r3, [r4, #92]	; 0x5c
					 &ctx->rx_len, dfs);

	ctx->sync_status = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006fe6:	68b3      	ldr	r3, [r6, #8]
 8006fe8:	f013 0f01 	tst.w	r3, #1
 8006fec:	d001      	beq.n	8006ff2 <transceive+0xfe>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8006fee:	68f3      	ldr	r3, [r6, #12]
 8006ff0:	e7f9      	b.n	8006fe6 <transceive+0xf2>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff8:	6033      	str	r3, [r6, #0]
	spi_stm32_cs_control(dev, true);
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f007 fda2 	bl	800eb46 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8007002:	6873      	ldr	r3, [r6, #4]
 8007004:	f043 0320 	orr.w	r3, r3, #32
 8007008:	6073      	str	r3, [r6, #4]
	if (rx_bufs) {
 800700a:	b11f      	cbz	r7, 8007014 <transceive+0x120>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800700c:	6873      	ldr	r3, [r6, #4]
 800700e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007012:	6073      	str	r3, [r6, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8007014:	6873      	ldr	r3, [r6, #4]
 8007016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701a:	6073      	str	r3, [r6, #4]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800701c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800701e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007020:	429a      	cmp	r2, r3
 8007022:	bf38      	it	cc
 8007024:	461a      	movcc	r2, r3
 8007026:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800702a:	fb03 f202 	mul.w	r2, r3, r2
			     ctx->config->frequency;
 800702e:	4620      	mov	r0, r4
 8007030:	f850 3b28 	ldr.w	r3, [r0], #40
 8007034:	681b      	ldr	r3, [r3, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8007036:	fbb2 f2f3 	udiv	r2, r2, r3
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 800703a:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 800703c:	0f91      	lsrs	r1, r2, #30
 800703e:	0093      	lsls	r3, r2, #2
 8007040:	189a      	adds	r2, r3, r2
 8007042:	f141 0300 	adc.w	r3, r1, #0
 8007046:	1892      	adds	r2, r2, r2
 8007048:	415b      	adcs	r3, r3
 800704a:	f003 ff7d 	bl	800af48 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
 800704e:	b910      	cbnz	r0, 8007056 <transceive+0x162>
	status = ctx->sync_status;
 8007050:	f8d4 8040 	ldr.w	r8, [r4, #64]	; 0x40
	return status;
 8007054:	e773      	b.n	8006f3e <transceive+0x4a>
		LOG_ERR("Timeout waiting for transfer complete");
 8007056:	2201      	movs	r2, #1
 8007058:	f8ad 2008 	strh.w	r2, [sp, #8]
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <transceive+0x1bc>)
 800705e:	930e      	str	r3, [sp, #56]	; 0x38
 8007060:	2300      	movs	r3, #0
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	2102      	movs	r1, #2
 8007066:	f88d 1004 	strb.w	r1, [sp, #4]
 800706a:	9901      	ldr	r1, [sp, #4]
 800706c:	910d      	str	r1, [sp, #52]	; 0x34
 800706e:	4619      	mov	r1, r3
 8007070:	f363 0100 	bfi	r1, r3, #0, #1
 8007074:	f363 0141 	bfi	r1, r3, #1, #1
 8007078:	f363 0182 	bfi	r1, r3, #2, #1
 800707c:	f363 01c5 	bfi	r1, r3, #3, #3
 8007080:	f362 1188 	bfi	r1, r2, #6, #3
 8007084:	2208      	movs	r2, #8
 8007086:	f362 2152 	bfi	r1, r2, #9, #10
 800708a:	f363 41de 	bfi	r1, r3, #19, #12
 800708e:	f363 71df 	bfi	r1, r3, #31, #1
 8007092:	aa0d      	add	r2, sp, #52	; 0x34
 8007094:	4807      	ldr	r0, [pc, #28]	; (80070b4 <transceive+0x1c0>)
 8007096:	f007 f9bc 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -ETIMEDOUT;
 800709a:	f06f 0873 	mvn.w	r8, #115	; 0x73
 800709e:	e74e      	b.n	8006f3e <transceive+0x4a>
		ctx->owner = NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 80070a4:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 80070a8:	f003 ff26 	bl	800aef8 <z_impl_k_sem_give>
}
 80070ac:	e74d      	b.n	8006f4a <transceive+0x56>
 80070ae:	bf00      	nop
 80070b0:	08011924 	.word	0x08011924
 80070b4:	08010af0 	.word	0x08010af0

080070b8 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 80070b8:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 80070ba:	4802      	ldr	r0, [pc, #8]	; (80070c4 <timer_callback+0xc>)
 80070bc:	f004 f88e 	bl	800b1dc <k_work_submit>
}
 80070c0:	bd08      	pop	{r3, pc}
 80070c2:	bf00      	nop
 80070c4:	200000d0 	.word	0x200000d0

080070c8 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80070c8:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80070ca:	f008 fe8a 	bl	800fde2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80070ce:	220a      	movs	r2, #10
 80070d0:	2300      	movs	r3, #0
 80070d2:	f7f9 fc83 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 80070d6:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <RtcGetTimerElapsedTime+0x18>)
 80070d8:	681b      	ldr	r3, [r3, #0]
}
 80070da:	1ac0      	subs	r0, r0, r3
 80070dc:	bd08      	pop	{r3, pc}
 80070de:	bf00      	nop
 80070e0:	20000fbc 	.word	0x20000fbc

080070e4 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 80070e4:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 80070e6:	4802      	ldr	r0, [pc, #8]	; (80070f0 <RtcStopAlarm+0xc>)
 80070e8:	f008 fe8b 	bl	800fe02 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 80070ec:	bd08      	pop	{r3, pc}
 80070ee:	bf00      	nop
 80070f0:	200003b0 	.word	0x200003b0

080070f4 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 80070f4:	b500      	push	{lr}
 80070f6:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 80070f8:	0f83      	lsrs	r3, r0, #30
 80070fa:	0082      	lsls	r2, r0, #2
 80070fc:	1812      	adds	r2, r2, r0
 80070fe:	f143 0300 	adc.w	r3, r3, #0
 8007102:	1892      	adds	r2, r2, r2
 8007104:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8007106:	2000      	movs	r0, #0
 8007108:	2100      	movs	r1, #0
 800710a:	e9cd 0100 	strd	r0, r1, [sp]
 800710e:	4803      	ldr	r0, [pc, #12]	; (800711c <RtcSetAlarm+0x28>)
 8007110:	f004 fe70 	bl	800bdf4 <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8007114:	b003      	add	sp, #12
 8007116:	f85d fb04 	ldr.w	pc, [sp], #4
 800711a:	bf00      	nop
 800711c:	200003b0 	.word	0x200003b0

08007120 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 8007120:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8007122:	f008 fe5e 	bl	800fde2 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007126:	220a      	movs	r2, #10
 8007128:	2300      	movs	r3, #0
 800712a:	f7f9 fc57 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 800712e:	4b01      	ldr	r3, [pc, #4]	; (8007134 <RtcSetTimerContext+0x14>)
 8007130:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 8007132:	bd08      	pop	{r3, pc}
 8007134:	20000fbc 	.word	0x20000fbc

08007138 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8007138:	4b01      	ldr	r3, [pc, #4]	; (8007140 <RtcGetTimerContext+0x8>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000fbc 	.word	0x20000fbc

08007144 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007148:	f100 0540 	add.w	r5, r0, #64	; 0x40
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 800714c:	2302      	movs	r3, #2
 800714e:	f3bf 8f5b 	dmb	ish
 8007152:	e855 2f00 	ldrex	r2, [r5]
 8007156:	2a01      	cmp	r2, #1
 8007158:	d103      	bne.n	8007162 <modem_release+0x1e>
 800715a:	e845 3100 	strex	r1, r3, [r5]
 800715e:	2900      	cmp	r1, #0
 8007160:	d1f7      	bne.n	8007152 <modem_release+0xe>
 8007162:	f3bf 8f5b 	dmb	ish
 8007166:	bf0c      	ite	eq
 8007168:	2601      	moveq	r6, #1
 800716a:	2600      	movne	r6, #0
 800716c:	d10e      	bne.n	800718c <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <modem_release+0x4c>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	6063      	str	r3, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8007178:	f3bf 8f5b 	dmb	ish
 800717c:	e855 2f00 	ldrex	r2, [r5]
 8007180:	e845 3100 	strex	r1, r3, [r5]
 8007184:	2900      	cmp	r1, #0
 8007186:	d1f9      	bne.n	800717c <modem_release+0x38>
 8007188:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 800718c:	4630      	mov	r0, r6
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	08011bd0 	.word	0x08011bd0

08007194 <sx12xx_ev_tx_timed_out>:
		}
	}
}

static void sx12xx_ev_tx_timed_out(void)
{
 8007194:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8007196:	4806      	ldr	r0, [pc, #24]	; (80071b0 <sx12xx_ev_tx_timed_out+0x1c>)
 8007198:	6844      	ldr	r4, [r0, #4]

    /* Clean up TX timeout event callback */
    dev_data.events.TxTimeout = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	6103      	str	r3, [r0, #16]

    if (modem_release(&dev_data)) {
 800719e:	f7ff ffd1 	bl	8007144 <modem_release>
 80071a2:	b120      	cbz	r0, 80071ae <sx12xx_ev_tx_timed_out+0x1a>
		/* Raise signal if provided */
		if (sig) {
 80071a4:	b11c      	cbz	r4, 80071ae <sx12xx_ev_tx_timed_out+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
 80071a6:	2100      	movs	r1, #0
 80071a8:	4620      	mov	r0, r4
 80071aa:	f005 f91f 	bl	800c3ec <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	20000fc0 	.word	0x20000fc0

080071b4 <sx12xx_ev_tx_done>:
{
 80071b4:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 80071b6:	4805      	ldr	r0, [pc, #20]	; (80071cc <sx12xx_ev_tx_done+0x18>)
 80071b8:	6844      	ldr	r4, [r0, #4]
	if (modem_release(&dev_data)) {
 80071ba:	f7ff ffc3 	bl	8007144 <modem_release>
 80071be:	b120      	cbz	r0, 80071ca <sx12xx_ev_tx_done+0x16>
		if (sig) {
 80071c0:	b11c      	cbz	r4, 80071ca <sx12xx_ev_tx_done+0x16>
 80071c2:	2100      	movs	r1, #0
 80071c4:	4620      	mov	r0, r4
 80071c6:	f005 f911 	bl	800c3ec <z_impl_k_poll_signal_raise>
}
 80071ca:	bd10      	pop	{r4, pc}
 80071cc:	20000fc0 	.word	0x20000fc0

080071d0 <sx12xx_ev_rx_done>:
{
 80071d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d2:	b083      	sub	sp, #12
 80071d4:	4617      	mov	r7, r2
 80071d6:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 80071d8:	4c24      	ldr	r4, [pc, #144]	; (800726c <sx12xx_ev_rx_done+0x9c>)
 80071da:	6866      	ldr	r6, [r4, #4]
	if (dev_data.async_rx_cb) {
 80071dc:	68a4      	ldr	r4, [r4, #8]
 80071de:	b15c      	cbz	r4, 80071f8 <sx12xx_ev_rx_done+0x28>
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	4613      	mov	r3, r2
 80071e4:	460a      	mov	r2, r1
 80071e6:	4601      	mov	r1, r0
 80071e8:	4820      	ldr	r0, [pc, #128]	; (800726c <sx12xx_ev_rx_done+0x9c>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	47a0      	blx	r4
		Radio.Rx(0);
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <sx12xx_ev_rx_done+0xa0>)
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	2000      	movs	r0, #0
 80071f4:	4798      	blx	r3
		return;
 80071f6:	e037      	b.n	8007268 <sx12xx_ev_rx_done+0x98>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <sx12xx_ev_rx_done+0xa4>)
 80071fa:	2202      	movs	r2, #2
 80071fc:	f3bf 8f5b 	dmb	ish
 8007200:	e853 4f00 	ldrex	r4, [r3]
 8007204:	2c01      	cmp	r4, #1
 8007206:	d104      	bne.n	8007212 <sx12xx_ev_rx_done+0x42>
 8007208:	e843 2c00 	strex	ip, r2, [r3]
 800720c:	f1bc 0f00 	cmp.w	ip, #0
 8007210:	d1f6      	bne.n	8007200 <sx12xx_ev_rx_done+0x30>
 8007212:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8007216:	d127      	bne.n	8007268 <sx12xx_ev_rx_done+0x98>
	if (size < *dev_data.rx_params.size) {
 8007218:	3b40      	subs	r3, #64	; 0x40
 800721a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	428a      	cmp	r2, r1
 8007220:	d900      	bls.n	8007224 <sx12xx_ev_rx_done+0x54>
		*dev_data.rx_params.size = size;
 8007222:	7019      	strb	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
 8007224:	4c11      	ldr	r4, [pc, #68]	; (800726c <sx12xx_ev_rx_done+0x9c>)
 8007226:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	4601      	mov	r1, r0
 800722c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800722e:	f008 fea8 	bl	800ff82 <memcpy>
	if (dev_data.rx_params.rssi) {
 8007232:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007234:	b103      	cbz	r3, 8007238 <sx12xx_ev_rx_done+0x68>
		*dev_data.rx_params.rssi = rssi;
 8007236:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
 8007238:	4b0c      	ldr	r3, [pc, #48]	; (800726c <sx12xx_ev_rx_done+0x9c>)
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	b103      	cbz	r3, 8007240 <sx12xx_ev_rx_done+0x70>
		*dev_data.rx_params.snr = snr;
 800723e:	701d      	strb	r5, [r3, #0]
	Radio.Sleep();
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <sx12xx_ev_rx_done+0xa0>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4798      	blx	r3
	dev_data.operation_done = NULL;
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <sx12xx_ev_rx_done+0x9c>)
 8007248:	2100      	movs	r1, #0
 800724a:	6059      	str	r1, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800724c:	3340      	adds	r3, #64	; 0x40
 800724e:	f3bf 8f5b 	dmb	ish
 8007252:	e853 2f00 	ldrex	r2, [r3]
 8007256:	e843 1000 	strex	r0, r1, [r3]
 800725a:	2800      	cmp	r0, #0
 800725c:	d1f9      	bne.n	8007252 <sx12xx_ev_rx_done+0x82>
 800725e:	f3bf 8f5b 	dmb	ish
 8007262:	4630      	mov	r0, r6
 8007264:	f005 f8c2 	bl	800c3ec <z_impl_k_poll_signal_raise>
}
 8007268:	b003      	add	sp, #12
 800726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726c:	20000fc0 	.word	0x20000fc0
 8007270:	08011bd0 	.word	0x08011bd0
 8007274:	20001000 	.word	0x20001000

08007278 <__sx12xx_configure_pin>:
{
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727a:	b087      	sub	sp, #28
 800727c:	4604      	mov	r4, r0
 800727e:	460f      	mov	r7, r1
 8007280:	4616      	mov	r6, r2
 8007282:	461d      	mov	r5, r3
 8007284:	4608      	mov	r0, r1
 8007286:	f003 fa37 	bl	800a6f8 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 800728a:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 800728c:	b1f8      	cbz	r0, 80072ce <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 800728e:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8007290:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8007292:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 8007296:	d007      	beq.n	80072a8 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007298:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 800729c:	d004      	beq.n	80072a8 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 800729e:	f015 0f01 	tst.w	r5, #1
 80072a2:	d001      	beq.n	80072a8 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 80072a4:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 80072a8:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 80072ac:	f015 0f01 	tst.w	r5, #1
 80072b0:	d019      	beq.n	80072e6 <__sx12xx_configure_pin+0x6e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 80072b2:	2101      	movs	r1, #1
 80072b4:	fa01 f506 	lsl.w	r5, r1, r6
 80072b8:	6821      	ldr	r1, [r4, #0]
 80072ba:	4329      	orrs	r1, r5
 80072bc:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4631      	mov	r1, r6
 80072c2:	4798      	blx	r3
	if (err) {
 80072c4:	4604      	mov	r4, r0
 80072c6:	b9b0      	cbnz	r0, 80072f6 <__sx12xx_configure_pin+0x7e>
}
 80072c8:	4620      	mov	r0, r4
 80072ca:	b007      	add	sp, #28
 80072cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot get pointer to %s device", controller);
 80072ce:	9702      	str	r7, [sp, #8]
 80072d0:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <__sx12xx_configure_pin+0x98>)
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	9000      	str	r0, [sp, #0]
 80072d6:	4603      	mov	r3, r0
 80072d8:	2201      	movs	r2, #1
 80072da:	490e      	ldr	r1, [pc, #56]	; (8007314 <__sx12xx_configure_pin+0x9c>)
 80072dc:	f007 feed 	bl	800f0ba <z_log_msg2_runtime_create>
		return -EIO;
 80072e0:	f06f 0404 	mvn.w	r4, #4
 80072e4:	e7f0      	b.n	80072c8 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80072e6:	2101      	movs	r1, #1
 80072e8:	fa01 f506 	lsl.w	r5, r1, r6
 80072ec:	6821      	ldr	r1, [r4, #0]
 80072ee:	ea21 0105 	bic.w	r1, r1, r5
 80072f2:	6021      	str	r1, [r4, #0]
 80072f4:	e7e3      	b.n	80072be <__sx12xx_configure_pin+0x46>
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 80072f6:	9004      	str	r0, [sp, #16]
 80072f8:	9603      	str	r6, [sp, #12]
 80072fa:	9702      	str	r7, [sp, #8]
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <__sx12xx_configure_pin+0xa0>)
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	2000      	movs	r0, #0
 8007302:	9000      	str	r0, [sp, #0]
 8007304:	4603      	mov	r3, r0
 8007306:	2201      	movs	r2, #1
 8007308:	4902      	ldr	r1, [pc, #8]	; (8007314 <__sx12xx_configure_pin+0x9c>)
 800730a:	f007 fed6 	bl	800f0ba <z_log_msg2_runtime_create>
		return err;
 800730e:	e7db      	b.n	80072c8 <__sx12xx_configure_pin+0x50>
 8007310:	080119c4 	.word	0x080119c4
 8007314:	08010b00 	.word	0x08010b00
 8007318:	080119e4 	.word	0x080119e4

0800731c <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8007320:	490f      	ldr	r1, [pc, #60]	; (8007360 <sx12xx_lora_send_async+0x44>)
 8007322:	2001      	movs	r0, #1
 8007324:	f3bf 8f5b 	dmb	ish
 8007328:	e851 4f00 	ldrex	r4, [r1]
 800732c:	2c00      	cmp	r4, #0
 800732e:	d103      	bne.n	8007338 <sx12xx_lora_send_async+0x1c>
 8007330:	e841 0600 	strex	r6, r0, [r1]
 8007334:	2e00      	cmp	r6, #0
 8007336:	d1f7      	bne.n	8007328 <sx12xx_lora_send_async+0xc>
 8007338:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 800733c:	d10c      	bne.n	8007358 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 800733e:	3940      	subs	r1, #64	; 0x40
 8007340:	604b      	str	r3, [r1, #4]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8007342:	4e08      	ldr	r6, [pc, #32]	; (8007364 <sx12xx_lora_send_async+0x48>)
 8007344:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8007346:	b2d4      	uxtb	r4, r2
 8007348:	4621      	mov	r1, r4
 800734a:	4798      	blx	r3

	Radio.Send(data, data_len);
 800734c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	4798      	blx	r3

	return 0;
 8007354:	2000      	movs	r0, #0
}
 8007356:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8007358:	f06f 000f 	mvn.w	r0, #15
 800735c:	e7fb      	b.n	8007356 <sx12xx_lora_send_async+0x3a>
 800735e:	bf00      	nop
 8007360:	20001000 	.word	0x20001000
 8007364:	08011bd0 	.word	0x08011bd0

08007368 <sx12xx_lora_send>:
{
 8007368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736a:	b09d      	sub	sp, #116	; 0x74
 800736c:	af04      	add	r7, sp, #16
 800736e:	4615      	mov	r5, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007370:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007374:	63ba      	str	r2, [r7, #56]	; 0x38
 8007376:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007378:	2300      	movs	r3, #0
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
 800737c:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
 8007388:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800738c:	2401      	movs	r4, #1
 800738e:	f364 0304 	bfi	r3, r4, #0, #5
 8007392:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8007396:	637a      	str	r2, [r7, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
 8007398:	4b5a      	ldr	r3, [pc, #360]	; (8007504 <sx12xx_lora_send+0x19c>)
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80ae 	beq.w	80074fe <sx12xx_lora_send+0x196>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80073a2:	4613      	mov	r3, r2
 80073a4:	462a      	mov	r2, r5
 80073a6:	f7ff ffb9 	bl	800731c <sx12xx_lora_send_async>
	if (ret < 0) {
 80073aa:	2800      	cmp	r0, #0
 80073ac:	db6c      	blt.n	8007488 <sx12xx_lora_send+0x120>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80073ae:	4b56      	ldr	r3, [pc, #344]	; (8007508 <sx12xx_lora_send+0x1a0>)
 80073b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80073b2:	4854      	ldr	r0, [pc, #336]	; (8007504 <sx12xx_lora_send+0x19c>)
 80073b4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
				   dev_data.tx_cfg.datarate,
 80073b8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
				   dev_data.tx_cfg.coding_rate,
 80073bc:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80073c0:	2601      	movs	r6, #1
 80073c2:	9603      	str	r6, [sp, #12]
 80073c4:	fa5f fc85 	uxtb.w	ip, r5
 80073c8:	f8cd c008 	str.w	ip, [sp, #8]
 80073cc:	f890 c03b 	ldrb.w	ip, [r0, #59]	; 0x3b
 80073d0:	f8cd c004 	str.w	ip, [sp, #4]
 80073d4:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 80073d6:	9000      	str	r0, [sp, #0]
 80073d8:	4630      	mov	r0, r6
 80073da:	47a0      	blx	r4
 80073dc:	4604      	mov	r4, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 80073de:	80be      	strh	r6, [r7, #4]
 80073e0:	2302      	movs	r3, #2
 80073e2:	80fb      	strh	r3, [r7, #6]
 80073e4:	466e      	mov	r6, sp
 80073e6:	b088      	sub	sp, #32
 80073e8:	a904      	add	r1, sp, #16
 80073ea:	466b      	mov	r3, sp
 80073ec:	f113 021c 	adds.w	r2, r3, #28
 80073f0:	d04d      	beq.n	800748e <sx12xx_lora_send+0x126>
 80073f2:	2314      	movs	r3, #20
 80073f4:	2001      	movs	r0, #1
 80073f6:	80b8      	strh	r0, [r7, #4]
 80073f8:	b11a      	cbz	r2, 8007402 <sx12xx_lora_send+0x9a>
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	dd01      	ble.n	8007402 <sx12xx_lora_send+0x9a>
 80073fe:	4843      	ldr	r0, [pc, #268]	; (800750c <sx12xx_lora_send+0x1a4>)
 8007400:	6108      	str	r0, [r1, #16]
 8007402:	2002      	movs	r0, #2
 8007404:	80f8      	strh	r0, [r7, #6]
 8007406:	b11a      	cbz	r2, 8007410 <sx12xx_lora_send+0xa8>
 8007408:	2b08      	cmp	r3, #8
 800740a:	dd01      	ble.n	8007410 <sx12xx_lora_send+0xa8>
 800740c:	4840      	ldr	r0, [pc, #256]	; (8007510 <sx12xx_lora_send+0x1a8>)
 800740e:	6148      	str	r0, [r1, #20]
 8007410:	b112      	cbz	r2, 8007418 <sx12xx_lora_send+0xb0>
 8007412:	2b0c      	cmp	r3, #12
 8007414:	dd00      	ble.n	8007418 <sx12xx_lora_send+0xb0>
 8007416:	618d      	str	r5, [r1, #24]
 8007418:	b112      	cbz	r2, 8007420 <sx12xx_lora_send+0xb8>
 800741a:	2b10      	cmp	r3, #16
 800741c:	dd00      	ble.n	8007420 <sx12xx_lora_send+0xb8>
 800741e:	61cc      	str	r4, [r1, #28]
 8007420:	2b13      	cmp	r3, #19
 8007422:	dd37      	ble.n	8007494 <sx12xx_lora_send+0x12c>
 8007424:	2314      	movs	r3, #20
 8007426:	b12a      	cbz	r2, 8007434 <sx12xx_lora_send+0xcc>
 8007428:	2000      	movs	r0, #0
 800742a:	6038      	str	r0, [r7, #0]
 800742c:	2005      	movs	r0, #5
 800742e:	7038      	strb	r0, [r7, #0]
 8007430:	6838      	ldr	r0, [r7, #0]
 8007432:	60c8      	str	r0, [r1, #12]
 8007434:	2100      	movs	r1, #0
 8007436:	f36f 0100 	bfc	r1, #0, #1
 800743a:	f36f 0141 	bfc	r1, #1, #1
 800743e:	f36f 0182 	bfc	r1, #2, #1
 8007442:	f36f 01c5 	bfc	r1, #3, #3
 8007446:	2004      	movs	r0, #4
 8007448:	f360 1188 	bfi	r1, r0, #6, #3
 800744c:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8007450:	f363 2152 	bfi	r1, r3, #9, #10
 8007454:	f36f 41de 	bfc	r1, #19, #12
 8007458:	f36f 71df 	bfc	r1, #31, #1
 800745c:	2300      	movs	r3, #0
 800745e:	482d      	ldr	r0, [pc, #180]	; (8007514 <sx12xx_lora_send+0x1ac>)
 8007460:	f006 ffd7 	bl	800e412 <z_impl_z_log_msg2_static_create>
 8007464:	46b5      	mov	sp, r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 8007466:	0060      	lsls	r0, r4, #1
			return t * ((uint64_t)to_hz / from_hz);
 8007468:	f3c4 7341 	ubfx	r3, r4, #29, #2
 800746c:	00e2      	lsls	r2, r4, #3
 800746e:	1812      	adds	r2, r2, r0
 8007470:	f143 0300 	adc.w	r3, r3, #0
 8007474:	1892      	adds	r2, r2, r2
 8007476:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 8007478:	2101      	movs	r1, #1
 800747a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800747e:	f004 ff09 	bl	800c294 <z_impl_k_poll>
	if (ret < 0) {
 8007482:	2800      	cmp	r0, #0
 8007484:	db09      	blt.n	800749a <sx12xx_lora_send+0x132>
	return 0;
 8007486:	2000      	movs	r0, #0
}
 8007488:	3764      	adds	r7, #100	; 0x64
 800748a:	46bd      	mov	sp, r7
 800748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
 800748e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007492:	e7af      	b.n	80073f4 <sx12xx_lora_send+0x8c>
 8007494:	f06f 031b 	mvn.w	r3, #27
 8007498:	e7c5      	b.n	8007426 <sx12xx_lora_send+0xbe>
		LOG_ERR("Packet transmission failed!");
 800749a:	2201      	movs	r2, #1
 800749c:	80ba      	strh	r2, [r7, #4]
 800749e:	4b1e      	ldr	r3, [pc, #120]	; (8007518 <sx12xx_lora_send+0x1b0>)
 80074a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80074a2:	2300      	movs	r3, #0
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	2102      	movs	r1, #2
 80074a8:	7039      	strb	r1, [r7, #0]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6579      	str	r1, [r7, #84]	; 0x54
 80074ae:	4619      	mov	r1, r3
 80074b0:	f363 0100 	bfi	r1, r3, #0, #1
 80074b4:	f363 0141 	bfi	r1, r3, #1, #1
 80074b8:	f363 0182 	bfi	r1, r3, #2, #1
 80074bc:	f363 01c5 	bfi	r1, r3, #3, #3
 80074c0:	f362 1188 	bfi	r1, r2, #6, #3
 80074c4:	2208      	movs	r2, #8
 80074c6:	f362 2152 	bfi	r1, r2, #9, #10
 80074ca:	f363 41de 	bfi	r1, r3, #19, #12
 80074ce:	f363 71df 	bfi	r1, r3, #31, #1
 80074d2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80074d6:	480f      	ldr	r0, [pc, #60]	; (8007514 <sx12xx_lora_send+0x1ac>)
 80074d8:	f006 ff9b 	bl	800e412 <z_impl_z_log_msg2_static_create>
		if (!modem_release(&dev_data)) {
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <sx12xx_lora_send+0x19c>)
 80074de:	f7ff fe31 	bl	8007144 <modem_release>
 80074e2:	b108      	cbz	r0, 80074e8 <sx12xx_lora_send+0x180>
	return 0;
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7cf      	b.n	8007488 <sx12xx_lora_send+0x120>
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074f0:	2101      	movs	r1, #1
 80074f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074f6:	f004 fecd 	bl	800c294 <z_impl_k_poll>
 80074fa:	2000      	movs	r0, #0
 80074fc:	e7c4      	b.n	8007488 <sx12xx_lora_send+0x120>
		return -EINVAL;
 80074fe:	f06f 0015 	mvn.w	r0, #21
 8007502:	e7c1      	b.n	8007488 <sx12xx_lora_send+0x120>
 8007504:	20000fc0 	.word	0x20000fc0
 8007508:	08011bd0 	.word	0x08011bd0
 800750c:	08011a04 	.word	0x08011a04
 8007510:	08011a7c 	.word	0x08011a7c
 8007514:	08010b00 	.word	0x08010b00
 8007518:	08011a30 	.word	0x08011a30

0800751c <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 800751c:	b530      	push	{r4, r5, lr}
 800751e:	b09b      	sub	sp, #108	; 0x6c
 8007520:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007524:	aa10      	add	r2, sp, #64	; 0x40
 8007526:	9210      	str	r2, [sp, #64]	; 0x40
 8007528:	9211      	str	r2, [sp, #68]	; 0x44
 800752a:	2300      	movs	r3, #0
 800752c:	9312      	str	r3, [sp, #72]	; 0x48
 800752e:	9313      	str	r3, [sp, #76]	; 0x4c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8007530:	930b      	str	r3, [sp, #44]	; 0x2c
 8007532:	930c      	str	r3, [sp, #48]	; 0x30
 8007534:	930d      	str	r3, [sp, #52]	; 0x34
 8007536:	930e      	str	r3, [sp, #56]	; 0x38
 8007538:	930f      	str	r3, [sp, #60]	; 0x3c
 800753a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800753e:	2001      	movs	r0, #1
 8007540:	f360 0304 	bfi	r3, r0, #0, #5
 8007544:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8007548:	920f      	str	r2, [sp, #60]	; 0x3c
 800754a:	4b32      	ldr	r3, [pc, #200]	; (8007614 <sx12xx_lora_recv+0xf8>)
 800754c:	f3bf 8f5b 	dmb	ish
 8007550:	e853 2f00 	ldrex	r2, [r3]
 8007554:	2a00      	cmp	r2, #0
 8007556:	d103      	bne.n	8007560 <sx12xx_lora_recv+0x44>
 8007558:	e843 0400 	strex	r4, r0, [r3]
 800755c:	2c00      	cmp	r4, #0
 800755e:	d1f7      	bne.n	8007550 <sx12xx_lora_recv+0x34>
 8007560:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 8007564:	d153      	bne.n	800760e <sx12xx_lora_recv+0xf2>
		return -EBUSY;
	}

	dev_data.async_rx_cb = NULL;
 8007566:	3b40      	subs	r3, #64	; 0x40
 8007568:	2400      	movs	r4, #0
 800756a:	609c      	str	r4, [r3, #8]
	/* Store operation signal */
	dev_data.operation_done = &done;
 800756c:	aa10      	add	r2, sp, #64	; 0x40
 800756e:	605a      	str	r2, [r3, #4]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 8007570:	6459      	str	r1, [r3, #68]	; 0x44
	dev_data.rx_params.size = &size;
 8007572:	f10d 0207 	add.w	r2, sp, #7
 8007576:	649a      	str	r2, [r3, #72]	; 0x48
	dev_data.rx_params.rssi = rssi;
 8007578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800757a:	64da      	str	r2, [r3, #76]	; 0x4c
	dev_data.rx_params.snr = snr;
 800757c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800757e:	651a      	str	r2, [r3, #80]	; 0x50

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8007580:	4d25      	ldr	r5, [pc, #148]	; (8007618 <sx12xx_lora_recv+0xfc>)
 8007582:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007584:	21ff      	movs	r1, #255	; 0xff
 8007586:	4798      	blx	r3
	Radio.Rx(0);
 8007588:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800758a:	4620      	mov	r0, r4
 800758c:	4798      	blx	r3
 800758e:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8007592:	2101      	movs	r1, #1
 8007594:	a80b      	add	r0, sp, #44	; 0x2c
 8007596:	f004 fe7d 	bl	800c294 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 800759a:	1e04      	subs	r4, r0, #0
 800759c:	db04      	blt.n	80075a8 <sx12xx_lora_recv+0x8c>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 800759e:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80075a2:	4620      	mov	r0, r4
 80075a4:	b01b      	add	sp, #108	; 0x6c
 80075a6:	bd30      	pop	{r4, r5, pc}
		if (!modem_release(&dev_data)) {
 80075a8:	481c      	ldr	r0, [pc, #112]	; (800761c <sx12xx_lora_recv+0x100>)
 80075aa:	f7ff fdcb 	bl	8007144 <modem_release>
 80075ae:	b950      	cbnz	r0, 80075c6 <sx12xx_lora_recv+0xaa>
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075b8:	2101      	movs	r1, #1
 80075ba:	a80b      	add	r0, sp, #44	; 0x2c
 80075bc:	f004 fe6a 	bl	800c294 <z_impl_k_poll>
			return size;
 80075c0:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80075c4:	e7ed      	b.n	80075a2 <sx12xx_lora_recv+0x86>
		LOG_INF("Receive timeout");
 80075c6:	2301      	movs	r3, #1
 80075c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80075cc:	4b14      	ldr	r3, [pc, #80]	; (8007620 <sx12xx_lora_recv+0x104>)
 80075ce:	9318      	str	r3, [sp, #96]	; 0x60
 80075d0:	2300      	movs	r3, #0
 80075d2:	9302      	str	r3, [sp, #8]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f88d 2008 	strb.w	r2, [sp, #8]
 80075da:	9a02      	ldr	r2, [sp, #8]
 80075dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80075de:	4619      	mov	r1, r3
 80075e0:	f363 0100 	bfi	r1, r3, #0, #1
 80075e4:	f363 0141 	bfi	r1, r3, #1, #1
 80075e8:	f363 0182 	bfi	r1, r3, #2, #1
 80075ec:	f363 01c5 	bfi	r1, r3, #3, #3
 80075f0:	2203      	movs	r2, #3
 80075f2:	f362 1188 	bfi	r1, r2, #6, #3
 80075f6:	2208      	movs	r2, #8
 80075f8:	f362 2152 	bfi	r1, r2, #9, #10
 80075fc:	f363 41de 	bfi	r1, r3, #19, #12
 8007600:	f363 71df 	bfi	r1, r3, #31, #1
 8007604:	aa17      	add	r2, sp, #92	; 0x5c
 8007606:	4807      	ldr	r0, [pc, #28]	; (8007624 <sx12xx_lora_recv+0x108>)
 8007608:	f006 ff03 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return ret;
 800760c:	e7c9      	b.n	80075a2 <sx12xx_lora_recv+0x86>
		return -EBUSY;
 800760e:	f06f 040f 	mvn.w	r4, #15
 8007612:	e7c6      	b.n	80075a2 <sx12xx_lora_recv+0x86>
 8007614:	20001000 	.word	0x20001000
 8007618:	08011bd0 	.word	0x08011bd0
 800761c:	20000fc0 	.word	0x20000fc0
 8007620:	08011a4c 	.word	0x08011a4c
 8007624:	08010b00 	.word	0x08010b00

08007628 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
 8007628:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
 800762a:	b1d9      	cbz	r1, 8007664 <sx12xx_lora_recv_async+0x3c>
 800762c:	460a      	mov	r2, r1
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <sx12xx_lora_recv_async+0x54>)
 8007630:	2101      	movs	r1, #1
 8007632:	f3bf 8f5b 	dmb	ish
 8007636:	e853 0f00 	ldrex	r0, [r3]
 800763a:	2800      	cmp	r0, #0
 800763c:	d103      	bne.n	8007646 <sx12xx_lora_recv_async+0x1e>
 800763e:	e843 1400 	strex	r4, r1, [r3]
 8007642:	2c00      	cmp	r4, #0
 8007644:	d1f7      	bne.n	8007636 <sx12xx_lora_recv_async+0xe>
 8007646:	f3bf 8f5b 	dmb	ish
		}
		return 0;
	}

	/* Ensure available */
	if (!modem_acquire(&dev_data)) {
 800764a:	d114      	bne.n	8007676 <sx12xx_lora_recv_async+0x4e>
		return -EBUSY;
	}

	/* Store parameters */
	dev_data.async_rx_cb = cb;
 800764c:	3b40      	subs	r3, #64	; 0x40
 800764e:	609a      	str	r2, [r3, #8]

	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 8007650:	4c0b      	ldr	r4, [pc, #44]	; (8007680 <sx12xx_lora_recv_async+0x58>)
 8007652:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007654:	21ff      	movs	r1, #255	; 0xff
 8007656:	2001      	movs	r0, #1
 8007658:	4798      	blx	r3
	Radio.Rx(0);
 800765a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800765c:	2000      	movs	r0, #0
 800765e:	4798      	blx	r3

	return 0;
 8007660:	2000      	movs	r0, #0
}
 8007662:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 8007664:	4807      	ldr	r0, [pc, #28]	; (8007684 <sx12xx_lora_recv_async+0x5c>)
 8007666:	f7ff fd6d 	bl	8007144 <modem_release>
 800766a:	b108      	cbz	r0, 8007670 <sx12xx_lora_recv_async+0x48>
		return 0;
 800766c:	2000      	movs	r0, #0
 800766e:	e7f8      	b.n	8007662 <sx12xx_lora_recv_async+0x3a>
			return -EINVAL;
 8007670:	f06f 0015 	mvn.w	r0, #21
 8007674:	e7f5      	b.n	8007662 <sx12xx_lora_recv_async+0x3a>
		return -EBUSY;
 8007676:	f06f 000f 	mvn.w	r0, #15
 800767a:	e7f2      	b.n	8007662 <sx12xx_lora_recv_async+0x3a>
 800767c:	20001000 	.word	0x20001000
 8007680:	08011bd0 	.word	0x08011bd0
 8007684:	20000fc0 	.word	0x20000fc0

08007688 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	460c      	mov	r4, r1
 800768e:	4b2b      	ldr	r3, [pc, #172]	; (800773c <sx12xx_lora_config+0xb4>)
 8007690:	2201      	movs	r2, #1
 8007692:	f3bf 8f5b 	dmb	ish
 8007696:	e853 1f00 	ldrex	r1, [r3]
 800769a:	2900      	cmp	r1, #0
 800769c:	d103      	bne.n	80076a6 <sx12xx_lora_config+0x1e>
 800769e:	e843 2000 	strex	r0, r2, [r3]
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d1f7      	bne.n	8007696 <sx12xx_lora_config+0xe>
 80076a6:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 80076aa:	d143      	bne.n	8007734 <sx12xx_lora_config+0xac>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 80076ac:	4b24      	ldr	r3, [pc, #144]	; (8007740 <sx12xx_lora_config+0xb8>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	4798      	blx	r3

	if (config->tx) {
 80076b4:	7b63      	ldrb	r3, [r4, #13]
 80076b6:	b9eb      	cbnz	r3, 80076f4 <sx12xx_lora_config+0x6c>
				  config->coding_rate, config->preamble_len,
				  config->fixed_len, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */

        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 80076b8:	7ae2      	ldrb	r2, [r4, #11]
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d038      	beq.n	8007730 <sx12xx_lora_config+0xa8>
 80076be:	7aa1      	ldrb	r1, [r4, #10]

		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 80076c0:	4b1f      	ldr	r3, [pc, #124]	; (8007740 <sx12xx_lora_config+0xb8>)
 80076c2:	699d      	ldr	r5, [r3, #24]
 80076c4:	2001      	movs	r0, #1
 80076c6:	9009      	str	r0, [sp, #36]	; 0x24
 80076c8:	2300      	movs	r3, #0
 80076ca:	9308      	str	r3, [sp, #32]
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	9306      	str	r3, [sp, #24]
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	9104      	str	r1, [sp, #16]
 80076d4:	9203      	str	r2, [sp, #12]
 80076d6:	220a      	movs	r2, #10
 80076d8:	9202      	str	r2, [sp, #8]
 80076da:	8922      	ldrh	r2, [r4, #8]
 80076dc:	9201      	str	r2, [sp, #4]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	79a3      	ldrb	r3, [r4, #6]
 80076e2:	7962      	ldrb	r2, [r4, #5]
 80076e4:	7921      	ldrb	r1, [r4, #4]
 80076e6:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, config->fixed_len, payload_len,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 80076e8:	4816      	ldr	r0, [pc, #88]	; (8007744 <sx12xx_lora_config+0xbc>)
 80076ea:	f7ff fd2b 	bl	8007144 <modem_release>
	return 0;
 80076ee:	2000      	movs	r0, #0
}
 80076f0:	b00a      	add	sp, #40	; 0x28
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80076f4:	4d14      	ldr	r5, [pc, #80]	; (8007748 <sx12xx_lora_config+0xc0>)
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	6861      	ldr	r1, [r4, #4]
 80076fa:	68a2      	ldr	r2, [r4, #8]
 80076fc:	68e3      	ldr	r3, [r4, #12]
 80076fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8007700:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <sx12xx_lora_config+0xb8>)
 8007702:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 8007704:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 8007706:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 8007708:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800770c:	9208      	str	r2, [sp, #32]
 800770e:	2200      	movs	r2, #0
 8007710:	9207      	str	r2, [sp, #28]
 8007712:	9206      	str	r2, [sp, #24]
 8007714:	9205      	str	r2, [sp, #20]
 8007716:	2001      	movs	r0, #1
 8007718:	9004      	str	r0, [sp, #16]
 800771a:	7ae6      	ldrb	r6, [r4, #11]
 800771c:	9603      	str	r6, [sp, #12]
 800771e:	8926      	ldrh	r6, [r4, #8]
 8007720:	9602      	str	r6, [sp, #8]
 8007722:	9101      	str	r1, [sp, #4]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	7923      	ldrb	r3, [r4, #4]
 8007728:	f994 100c 	ldrsb.w	r1, [r4, #12]
 800772c:	47a8      	blx	r5
 800772e:	e7db      	b.n	80076e8 <sx12xx_lora_config+0x60>
        uint8_t payload_len = config->fixed_len ? config->payload_len : 0;
 8007730:	2100      	movs	r1, #0
 8007732:	e7c5      	b.n	80076c0 <sx12xx_lora_config+0x38>
		return -EBUSY;
 8007734:	f06f 000f 	mvn.w	r0, #15
 8007738:	e7da      	b.n	80076f0 <sx12xx_lora_config+0x68>
 800773a:	bf00      	nop
 800773c:	20001000 	.word	0x20001000
 8007740:	08011bd0 	.word	0x08011bd0
 8007744:	20000fc0 	.word	0x20000fc0
 8007748:	20000ff0 	.word	0x20000ff0

0800774c <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 800774c:	b530      	push	{r4, r5, lr}
 800774e:	b099      	sub	sp, #100	; 0x64
 8007750:	4608      	mov	r0, r1
 8007752:	4611      	mov	r1, r2
 8007754:	461d      	mov	r5, r3
    struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8007756:	ab0e      	add	r3, sp, #56	; 0x38
 8007758:	930e      	str	r3, [sp, #56]	; 0x38
 800775a:	930f      	str	r3, [sp, #60]	; 0x3c
 800775c:	2400      	movs	r4, #0
 800775e:	9410      	str	r4, [sp, #64]	; 0x40
 8007760:	9411      	str	r4, [sp, #68]	; 0x44
    struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8007762:	9409      	str	r4, [sp, #36]	; 0x24
 8007764:	940a      	str	r4, [sp, #40]	; 0x28
 8007766:	940b      	str	r4, [sp, #44]	; 0x2c
 8007768:	940c      	str	r4, [sp, #48]	; 0x30
 800776a:	940d      	str	r4, [sp, #52]	; 0x34
 800776c:	f89d c031 	ldrb.w	ip, [sp, #49]	; 0x31
 8007770:	2401      	movs	r4, #1
 8007772:	f364 0c04 	bfi	ip, r4, #0, #5
 8007776:	f88d c031 	strb.w	ip, [sp, #49]	; 0x31
 800777a:	930d      	str	r3, [sp, #52]	; 0x34
 800777c:	4b32      	ldr	r3, [pc, #200]	; (8007848 <sx12xx_lora_test_cw+0xfc>)
 800777e:	f3bf 8f5b 	dmb	ish
 8007782:	e853 2f00 	ldrex	r2, [r3]
 8007786:	2a00      	cmp	r2, #0
 8007788:	d104      	bne.n	8007794 <sx12xx_lora_test_cw+0x48>
 800778a:	e843 4c00 	strex	ip, r4, [r3]
 800778e:	f1bc 0f00 	cmp.w	ip, #0
 8007792:	d1f6      	bne.n	8007782 <sx12xx_lora_test_cw+0x36>
 8007794:	f3bf 8f5b 	dmb	ish
        K_POLL_TYPE_SIGNAL,
        K_POLL_MODE_NOTIFY_ONLY,
        &done);
    int ret;
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8007798:	d153      	bne.n	8007842 <sx12xx_lora_test_cw+0xf6>
		return -EBUSY;
	}

    /* Store signal */
    dev_data.operation_done = &done;
 800779a:	3b40      	subs	r3, #64	; 0x40
 800779c:	aa0e      	add	r2, sp, #56	; 0x38
 800779e:	605a      	str	r2, [r3, #4]

    /* Act TX timeout event as successfully end of CW transmission */
    dev_data.events.TxTimeout = sx12xx_ev_tx_timed_out;
 80077a0:	4a2a      	ldr	r2, [pc, #168]	; (800784c <sx12xx_lora_test_cw+0x100>)
 80077a2:	611a      	str	r2, [r3, #16]

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 80077a4:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <sx12xx_lora_test_cw+0x104>)
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	462a      	mov	r2, r5
 80077aa:	4798      	blx	r3

    ret = k_poll(&evt, 1, K_MSEC(2000 * duration));
 80077ac:	b12d      	cbz	r5, 80077ba <sx12xx_lora_test_cw+0x6e>
 80077ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80077b2:	fb02 f105 	mul.w	r1, r2, r5
 80077b6:	2300      	movs	r3, #0
 80077b8:	e001      	b.n	80077be <sx12xx_lora_test_cw+0x72>
 80077ba:	2100      	movs	r1, #0
 80077bc:	460b      	mov	r3, r1
 80077be:	008a      	lsls	r2, r1, #2
 80077c0:	1852      	adds	r2, r2, r1
 80077c2:	eb43 0383 	adc.w	r3, r3, r3, lsl #2
 80077c6:	1892      	adds	r2, r2, r2
 80077c8:	415b      	adcs	r3, r3
 80077ca:	2101      	movs	r1, #1
 80077cc:	a809      	add	r0, sp, #36	; 0x24
 80077ce:	f004 fd61 	bl	800c294 <z_impl_k_poll>
    if (ret < 0) {
 80077d2:	2800      	cmp	r0, #0
 80077d4:	db02      	blt.n	80077dc <sx12xx_lora_test_cw+0x90>
            k_poll(&evt, 1, K_FOREVER);
        }
        /* Clean up TX timeout event callback */
        dev_data.events.TxTimeout = NULL;
    }
	return 0;
 80077d6:	2000      	movs	r0, #0
}
 80077d8:	b019      	add	sp, #100	; 0x64
 80077da:	bd30      	pop	{r4, r5, pc}
        LOG_ERR("CW test failed!");
 80077dc:	2201      	movs	r2, #1
 80077de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80077e2:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <sx12xx_lora_test_cw+0x108>)
 80077e4:	9316      	str	r3, [sp, #88]	; 0x58
 80077e6:	2300      	movs	r3, #0
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	2102      	movs	r1, #2
 80077ec:	f88d 1000 	strb.w	r1, [sp]
 80077f0:	9900      	ldr	r1, [sp, #0]
 80077f2:	9115      	str	r1, [sp, #84]	; 0x54
 80077f4:	4619      	mov	r1, r3
 80077f6:	f363 0100 	bfi	r1, r3, #0, #1
 80077fa:	f363 0141 	bfi	r1, r3, #1, #1
 80077fe:	f363 0182 	bfi	r1, r3, #2, #1
 8007802:	f363 01c5 	bfi	r1, r3, #3, #3
 8007806:	f362 1188 	bfi	r1, r2, #6, #3
 800780a:	2208      	movs	r2, #8
 800780c:	f362 2152 	bfi	r1, r2, #9, #10
 8007810:	f363 41de 	bfi	r1, r3, #19, #12
 8007814:	f363 71df 	bfi	r1, r3, #31, #1
 8007818:	aa15      	add	r2, sp, #84	; 0x54
 800781a:	480f      	ldr	r0, [pc, #60]	; (8007858 <sx12xx_lora_test_cw+0x10c>)
 800781c:	f006 fdf9 	bl	800e412 <z_impl_z_log_msg2_static_create>
        if (!modem_release(&dev_data)) {
 8007820:	480e      	ldr	r0, [pc, #56]	; (800785c <sx12xx_lora_test_cw+0x110>)
 8007822:	f7ff fc8f 	bl	8007144 <modem_release>
 8007826:	b118      	cbz	r0, 8007830 <sx12xx_lora_test_cw+0xe4>
        dev_data.events.TxTimeout = NULL;
 8007828:	2000      	movs	r0, #0
 800782a:	4b0c      	ldr	r3, [pc, #48]	; (800785c <sx12xx_lora_test_cw+0x110>)
 800782c:	6118      	str	r0, [r3, #16]
 800782e:	e7d3      	b.n	80077d8 <sx12xx_lora_test_cw+0x8c>
 8007830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007838:	2101      	movs	r1, #1
 800783a:	a809      	add	r0, sp, #36	; 0x24
 800783c:	f004 fd2a 	bl	800c294 <z_impl_k_poll>
 8007840:	e7f2      	b.n	8007828 <sx12xx_lora_test_cw+0xdc>
		return -EBUSY;
 8007842:	f06f 000f 	mvn.w	r0, #15
 8007846:	e7c7      	b.n	80077d8 <sx12xx_lora_test_cw+0x8c>
 8007848:	20001000 	.word	0x20001000
 800784c:	08007195 	.word	0x08007195
 8007850:	08011bd0 	.word	0x08011bd0
 8007854:	08011a5c 	.word	0x08011a5c
 8007858:	08010b00 	.word	0x08010b00
 800785c:	20000fc0 	.word	0x20000fc0

08007860 <sx12xx_lora_time_on_air>:

int sx12xx_lora_time_on_air(const struct device *dev,
            const struct lora_modem_config *config,
            uint32_t data_len)
{
    if(config == NULL) {
 8007860:	b189      	cbz	r1, 8007886 <sx12xx_lora_time_on_air+0x26>
{
 8007862:	b510      	push	{r4, lr}
 8007864:	b084      	sub	sp, #16
        return -EINVAL;
    }
    return (int) Radio.TimeOnAir(MODEM_LORA, config->bandwidth,
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <sx12xx_lora_time_on_air+0x2c>)
 8007868:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800786a:	2001      	movs	r0, #1
 800786c:	9003      	str	r0, [sp, #12]
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	7acb      	ldrb	r3, [r1, #11]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	890b      	ldrh	r3, [r1, #8]
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	798b      	ldrb	r3, [r1, #6]
 800787c:	794a      	ldrb	r2, [r1, #5]
 800787e:	7909      	ldrb	r1, [r1, #4]
 8007880:	47a0      	blx	r4
                                 config->datarate, config->coding_rate,
                                 config->preamble_len,
                                 config->fixed_len, (uint8_t) data_len, true);
}
 8007882:	b004      	add	sp, #16
 8007884:	bd10      	pop	{r4, pc}
        return -EINVAL;
 8007886:	f06f 0015 	mvn.w	r0, #21
}
 800788a:	4770      	bx	lr
 800788c:	08011bd0 	.word	0x08011bd0

08007890 <sx12xx_lora_is_channel_free>:
int sx12xx_lora_is_channel_free(const struct device *dev,
            const struct lora_modem_config *config,
            int16_t rssi_theshold, uint32_t timeout)
{
    bool is_free;
    if(config == NULL) {
 8007890:	b311      	cbz	r1, 80078d8 <sx12xx_lora_is_channel_free+0x48>
{
 8007892:	b510      	push	{r4, lr}
 8007894:	4608      	mov	r0, r1
 8007896:	4915      	ldr	r1, [pc, #84]	; (80078ec <sx12xx_lora_is_channel_free+0x5c>)
 8007898:	2401      	movs	r4, #1
 800789a:	f3bf 8f5b 	dmb	ish
 800789e:	e851 cf00 	ldrex	ip, [r1]
 80078a2:	f1bc 0f00 	cmp.w	ip, #0
 80078a6:	d104      	bne.n	80078b2 <sx12xx_lora_is_channel_free+0x22>
 80078a8:	e841 4e00 	strex	lr, r4, [r1]
 80078ac:	f1be 0f00 	cmp.w	lr, #0
 80078b0:	d1f5      	bne.n	800789e <sx12xx_lora_is_channel_free+0xe>
 80078b2:	f3bf 8f5b 	dmb	ish
        return -EINVAL;
    }
    if (!modem_acquire(&dev_data)) {
 80078b6:	d112      	bne.n	80078de <sx12xx_lora_is_channel_free+0x4e>
        125000, /* BW_125_KHZ = 0 */
        250000, /* BW_250_KHZ */
        500000, /* BW_500_KHZ */
    };

    is_free = Radio.IsChannelFree(config->frequency, rx_bw[config->bandwidth],
 80078b8:	490d      	ldr	r1, [pc, #52]	; (80078f0 <sx12xx_lora_is_channel_free+0x60>)
 80078ba:	690c      	ldr	r4, [r1, #16]
 80078bc:	f890 c004 	ldrb.w	ip, [r0, #4]
 80078c0:	490c      	ldr	r1, [pc, #48]	; (80078f4 <sx12xx_lora_is_channel_free+0x64>)
 80078c2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	47a0      	blx	r4
 80078ca:	4604      	mov	r4, r0
                            rssi_theshold, timeout);
    if (!modem_release(&dev_data)) {
 80078cc:	480a      	ldr	r0, [pc, #40]	; (80078f8 <sx12xx_lora_is_channel_free+0x68>)
 80078ce:	f7ff fc39 	bl	8007144 <modem_release>
 80078d2:	b138      	cbz	r0, 80078e4 <sx12xx_lora_is_channel_free+0x54>
        /* Not receiving or already being stopped */
        return -EINVAL;
    }
    return is_free ? 1 : 0;
 80078d4:	4620      	mov	r0, r4
}
 80078d6:	bd10      	pop	{r4, pc}
        return -EINVAL;
 80078d8:	f06f 0015 	mvn.w	r0, #21
}
 80078dc:	4770      	bx	lr
        return -EBUSY;
 80078de:	f06f 000f 	mvn.w	r0, #15
 80078e2:	e7f8      	b.n	80078d6 <sx12xx_lora_is_channel_free+0x46>
        return -EINVAL;
 80078e4:	f06f 0015 	mvn.w	r0, #21
 80078e8:	e7f5      	b.n	80078d6 <sx12xx_lora_is_channel_free+0x46>
 80078ea:	bf00      	nop
 80078ec:	20001000 	.word	0x20001000
 80078f0:	08011bd0 	.word	0x08011bd0
 80078f4:	08011a90 	.word	0x08011a90
 80078f8:	20000fc0 	.word	0x20000fc0

080078fc <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 80078fc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80078fe:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <sx12xx_init+0x3c>)
 8007900:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007904:	2400      	movs	r4, #0
 8007906:	f3bf 8f5b 	dmb	ish
 800790a:	e852 1f00 	ldrex	r1, [r2]
 800790e:	e842 4500 	strex	r5, r4, [r2]
 8007912:	2d00      	cmp	r5, #0
 8007914:	d1f9      	bne.n	800790a <sx12xx_init+0xe>
 8007916:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
 800791a:	6018      	str	r0, [r3, #0]
	dev_data.events.TxDone = sx12xx_ev_tx_done;
 800791c:	4a07      	ldr	r2, [pc, #28]	; (800793c <sx12xx_init+0x40>)
 800791e:	60da      	str	r2, [r3, #12]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8007920:	4a07      	ldr	r2, [pc, #28]	; (8007940 <sx12xx_init+0x44>)
 8007922:	615a      	str	r2, [r3, #20]
	Radio.Init(&dev_data.events);
 8007924:	4d07      	ldr	r5, [pc, #28]	; (8007944 <sx12xx_init+0x48>)
 8007926:	682a      	ldr	r2, [r5, #0]
 8007928:	f103 000c 	add.w	r0, r3, #12
 800792c:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 800792e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007930:	4798      	blx	r3

	return 0;
}
 8007932:	4620      	mov	r0, r4
 8007934:	bd38      	pop	{r3, r4, r5, pc}
 8007936:	bf00      	nop
 8007938:	20000fc0 	.word	0x20000fc0
 800793c:	080071b5 	.word	0x080071b5
 8007940:	080071d1 	.word	0x080071d1
 8007944:	08011bd0 	.word	0x08011bd0

08007948 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8007948:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <sx127x_dio_work_handle+0x14>)
 800794c:	1ac0      	subs	r0, r0, r3
 800794e:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8007950:	4b03      	ldr	r3, [pc, #12]	; (8007960 <sx127x_dio_work_handle+0x18>)
 8007952:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007956:	2000      	movs	r0, #0
 8007958:	4798      	blx	r3
}
 800795a:	bd08      	pop	{r3, pc}
 800795c:	20001068 	.word	0x20001068
 8007960:	200000e0 	.word	0x200000e0

08007964 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8007964:	b510      	push	{r4, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 800796c:	f10d 0007 	add.w	r0, sp, #7
 8007970:	9006      	str	r0, [sp, #24]
 8007972:	2001      	movs	r0, #1
 8007974:	9007      	str	r0, [sp, #28]
 8007976:	9208      	str	r2, [sp, #32]
 8007978:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 800797a:	ab06      	add	r3, sp, #24
 800797c:	9304      	str	r3, [sp, #16]
 800797e:	2302      	movs	r3, #2
 8007980:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8007982:	b149      	cbz	r1, 8007998 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8007984:	490b      	ldr	r1, [pc, #44]	; (80079b4 <sx127x_transceive+0x50>)
 8007986:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8007988:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800798a:	681c      	ldr	r4, [r3, #0]
 800798c:	2300      	movs	r3, #0
 800798e:	aa04      	add	r2, sp, #16
 8007990:	3108      	adds	r1, #8
 8007992:	47a0      	blx	r4
}
 8007994:	b00a      	add	sp, #40	; 0x28
 8007996:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8007998:	ab06      	add	r3, sp, #24
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	2302      	movs	r3, #2
 800799e:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 80079a0:	4904      	ldr	r1, [pc, #16]	; (80079b4 <sx127x_transceive+0x50>)
 80079a2:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 80079a4:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 80079a6:	681c      	ldr	r4, [r3, #0]
 80079a8:	ab02      	add	r3, sp, #8
 80079aa:	aa04      	add	r2, sp, #16
 80079ac:	3108      	adds	r1, #8
 80079ae:	47a0      	blx	r4
 80079b0:	e7f0      	b.n	8007994 <sx127x_transceive+0x30>
 80079b2:	bf00      	nop
 80079b4:	20001044 	.word	0x20001044

080079b8 <sx127x_irq_callback>:
{
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 80079bc:	fa92 f6a2 	rbit	r6, r2
 80079c0:	fab6 f686 	clz	r6, r6
 80079c4:	b90a      	cbnz	r2, 80079ca <sx127x_irq_callback+0x12>
 80079c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 80079ca:	2400      	movs	r4, #0
 80079cc:	e000      	b.n	80079d0 <sx127x_irq_callback+0x18>
 80079ce:	3401      	adds	r4, #1
 80079d0:	2c03      	cmp	r4, #3
 80079d2:	d813      	bhi.n	80079fc <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 80079d4:	1d23      	adds	r3, r4, #4
 80079d6:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <sx127x_irq_callback+0x48>)
 80079d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	42ab      	cmp	r3, r5
 80079e0:	d1f5      	bne.n	80079ce <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <sx127x_irq_callback+0x4c>)
 80079e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079e8:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 80079ea:	42b3      	cmp	r3, r6
 80079ec:	d1ef      	bne.n	80079ce <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 80079ee:	1ca0      	adds	r0, r4, #2
 80079f0:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80079f4:	3004      	adds	r0, #4
 80079f6:	f003 fbf1 	bl	800b1dc <k_work_submit>
 80079fa:	e7e8      	b.n	80079ce <sx127x_irq_callback+0x16>
}
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	bf00      	nop
 8007a00:	20001044 	.word	0x20001044
 8007a04:	08011c3c 	.word	0x08011c3c

08007a08 <SX1276Reset>:
{
 8007a08:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <SX1276Reset+0x64>)
 8007a0c:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007a0e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f013 0f01 	tst.w	r3, #1
 8007a16:	d11b      	bne.n	8007a50 <SX1276Reset+0x48>
 8007a18:	2301      	movs	r3, #1
	if (value != 0)	{
 8007a1a:	b1db      	cbz	r3, 8007a54 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8007a1c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2101      	movs	r1, #1
 8007a22:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8007a24:	200a      	movs	r0, #10
 8007a26:	2100      	movs	r1, #0
 8007a28:	f003 ffa6 	bl	800b978 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007a2c:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <SX1276Reset+0x64>)
 8007a2e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007a30:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f013 0f01 	tst.w	r3, #1
 8007a38:	d111      	bne.n	8007a5e <SX1276Reset+0x56>
 8007a3a:	2300      	movs	r3, #0
	if (value != 0)	{
 8007a3c:	b18b      	cbz	r3, 8007a62 <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8007a3e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	2101      	movs	r1, #1
 8007a44:	4798      	blx	r3
 8007a46:	203c      	movs	r0, #60	; 0x3c
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f003 ff95 	bl	800b978 <z_impl_k_sleep>
}
 8007a4e:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e7e2      	b.n	8007a1a <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8007a54:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2101      	movs	r1, #1
 8007a5a:	4798      	blx	r3
 8007a5c:	e7e2      	b.n	8007a24 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7ec      	b.n	8007a3c <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8007a62:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2101      	movs	r1, #1
 8007a68:	4798      	blx	r3
 8007a6a:	e7ec      	b.n	8007a46 <SX1276Reset+0x3e>
 8007a6c:	20001044 	.word	0x20001044

08007a70 <SX1276IoIrqInit>:
{
 8007a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a72:	b095      	sub	sp, #84	; 0x54
 8007a74:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007a76:	2400      	movs	r4, #0
 8007a78:	e04c      	b.n	8007b14 <SX1276IoIrqInit+0xa4>
			LOG_ERR("Cannot get pointer to %s device",
 8007a7a:	4b5a      	ldr	r3, [pc, #360]	; (8007be4 <SX1276IoIrqInit+0x174>)
 8007a7c:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 8007a80:	9302      	str	r3, [sp, #8]
 8007a82:	4b59      	ldr	r3, [pc, #356]	; (8007be8 <SX1276IoIrqInit+0x178>)
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	9000      	str	r0, [sp, #0]
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4957      	ldr	r1, [pc, #348]	; (8007bec <SX1276IoIrqInit+0x17c>)
 8007a8e:	f007 fb2d 	bl	800f0ec <z_log_msg2_runtime_create>
}
 8007a92:	b015      	add	sp, #84	; 0x54
 8007a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8007a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8007a9a:	f013 0f01 	tst.w	r3, #1
 8007a9e:	d06f      	beq.n	8007b80 <SX1276IoIrqInit+0x110>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	fa03 fc01 	lsl.w	ip, r3, r1
 8007aa6:	6833      	ldr	r3, [r6, #0]
 8007aa8:	ea43 030c 	orr.w	r3, r3, ip
 8007aac:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8007ab2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8007ab6:	4b4e      	ldr	r3, [pc, #312]	; (8007bf0 <SX1276IoIrqInit+0x180>)
 8007ab8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8007abc:	4b49      	ldr	r3, [pc, #292]	; (8007be4 <SX1276IoIrqInit+0x174>)
 8007abe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ac2:	791e      	ldrb	r6, [r3, #4]
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	40b3      	lsls	r3, r6
	callback->handler = handler;
 8007ac8:	4a4a      	ldr	r2, [pc, #296]	; (8007bf4 <SX1276IoIrqInit+0x184>)
 8007aca:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8007acc:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8007ace:	1d23      	adds	r3, r4, #4
 8007ad0:	4a49      	ldr	r2, [pc, #292]	; (8007bf8 <SX1276IoIrqInit+0x188>)
 8007ad2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ad6:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007ad8:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d057      	beq.n	8007b90 <SX1276IoIrqInit+0x120>
	return api->manage_callback(port, callback, true);
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4798      	blx	r3
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	db56      	blt.n	8007b96 <SX1276IoIrqInit+0x126>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8007ae8:	1d23      	adds	r3, r4, #4
 8007aea:	4a43      	ldr	r2, [pc, #268]	; (8007bf8 <SX1276IoIrqInit+0x188>)
 8007aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007af0:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8007af2:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8007af4:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	2301      	movs	r3, #1
 8007afa:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8007afc:	421a      	tst	r2, r3
 8007afe:	d16d      	bne.n	8007bdc <SX1276IoIrqInit+0x16c>
 8007b00:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8007b04:	698f      	ldr	r7, [r1, #24]
 8007b06:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8007b0a:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8007b0e:	4631      	mov	r1, r6
 8007b10:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8007b12:	3401      	adds	r4, #1
 8007b14:	2c03      	cmp	r4, #3
 8007b16:	d8bc      	bhi.n	8007a92 <SX1276IoIrqInit+0x22>
		if (!irqHandlers[i]) {
 8007b18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0f8      	beq.n	8007b12 <SX1276IoIrqInit+0xa2>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8007b20:	4b30      	ldr	r3, [pc, #192]	; (8007be4 <SX1276IoIrqInit+0x174>)
 8007b22:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8007b26:	f002 fde7 	bl	800a6f8 <z_impl_device_get_binding>
 8007b2a:	1d23      	adds	r3, r4, #4
 8007b2c:	4a32      	ldr	r2, [pc, #200]	; (8007bf8 <SX1276IoIrqInit+0x188>)
 8007b2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b32:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0a0      	beq.n	8007a7a <SX1276IoIrqInit+0xa>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8007b38:	4e2f      	ldr	r6, [pc, #188]	; (8007bf8 <SX1276IoIrqInit+0x188>)
 8007b3a:	1ca0      	adds	r0, r4, #2
 8007b3c:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8007b40:	492e      	ldr	r1, [pc, #184]	; (8007bfc <SX1276IoIrqInit+0x18c>)
 8007b42:	3004      	adds	r0, #4
 8007b44:	f007 fee6 	bl	800f914 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007b48:	1d23      	adds	r3, r4, #4
 8007b4a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007b4e:	6870      	ldr	r0, [r6, #4]
 8007b50:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <SX1276IoIrqInit+0x174>)
 8007b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b56:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8007b58:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8007b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8007b62:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8007b64:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8007b66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	d093      	beq.n	8007a96 <SX1276IoIrqInit+0x26>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8007b6e:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8007b72:	d090      	beq.n	8007a96 <SX1276IoIrqInit+0x26>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8007b74:	f013 0f01 	tst.w	r3, #1
 8007b78:	d08d      	beq.n	8007a96 <SX1276IoIrqInit+0x26>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8007b7a:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8007b7e:	e78a      	b.n	8007a96 <SX1276IoIrqInit+0x26>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8007b80:	2301      	movs	r3, #1
 8007b82:	fa03 fc01 	lsl.w	ip, r3, r1
 8007b86:	6833      	ldr	r3, [r6, #0]
 8007b88:	ea23 030c 	bic.w	r3, r3, ip
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	e78e      	b.n	8007aae <SX1276IoIrqInit+0x3e>
		return -ENOTSUP;
 8007b90:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8007b94:	e7a6      	b.n	8007ae4 <SX1276IoIrqInit+0x74>
			LOG_ERR("Could not set gpio callback.");
 8007b96:	2201      	movs	r2, #1
 8007b98:	f8ad 2018 	strh.w	r2, [sp, #24]
 8007b9c:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <SX1276IoIrqInit+0x190>)
 8007b9e:	9312      	str	r3, [sp, #72]	; 0x48
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	f88d 1014 	strb.w	r1, [sp, #20]
 8007baa:	9905      	ldr	r1, [sp, #20]
 8007bac:	9111      	str	r1, [sp, #68]	; 0x44
 8007bae:	4619      	mov	r1, r3
 8007bb0:	f363 0100 	bfi	r1, r3, #0, #1
 8007bb4:	f363 0141 	bfi	r1, r3, #1, #1
 8007bb8:	f363 0182 	bfi	r1, r3, #2, #1
 8007bbc:	f363 01c5 	bfi	r1, r3, #3, #3
 8007bc0:	f362 1188 	bfi	r1, r2, #6, #3
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	f362 2152 	bfi	r1, r2, #9, #10
 8007bca:	f363 41de 	bfi	r1, r3, #19, #12
 8007bce:	f363 71df 	bfi	r1, r3, #31, #1
 8007bd2:	aa11      	add	r2, sp, #68	; 0x44
 8007bd4:	4805      	ldr	r0, [pc, #20]	; (8007bec <SX1276IoIrqInit+0x17c>)
 8007bd6:	f006 fc1c 	bl	800e412 <z_impl_z_log_msg2_static_create>
			return;
 8007bda:	e75a      	b.n	8007a92 <SX1276IoIrqInit+0x22>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8007bdc:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8007be0:	e790      	b.n	8007b04 <SX1276IoIrqInit+0x94>
 8007be2:	bf00      	nop
 8007be4:	08011c3c 	.word	0x08011c3c
 8007be8:	080119c4 	.word	0x080119c4
 8007bec:	08010af8 	.word	0x08010af8
 8007bf0:	20001014 	.word	0x20001014
 8007bf4:	080079b9 	.word	0x080079b9
 8007bf8:	20001044 	.word	0x20001044
 8007bfc:	08007949 	.word	0x08007949
 8007c00:	08011a9c 	.word	0x08011a9c

08007c04 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8007c04:	b510      	push	{r4, lr}
 8007c06:	b090      	sub	sp, #64	; 0x40
 8007c08:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8007c0a:	b2c0      	uxtb	r0, r0
 8007c0c:	f007 fa80 	bl	800f110 <sx127x_read>
	if (ret < 0) {
 8007c10:	2800      	cmp	r0, #0
 8007c12:	db01      	blt.n	8007c18 <SX1276ReadBuffer+0x14>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8007c14:	b010      	add	sp, #64	; 0x40
 8007c16:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to read address: 0x%x", addr);
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <SX1276ReadBuffer+0x5c>)
 8007c20:	930e      	str	r3, [sp, #56]	; 0x38
 8007c22:	940f      	str	r4, [sp, #60]	; 0x3c
 8007c24:	2300      	movs	r3, #0
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	2103      	movs	r1, #3
 8007c2a:	f88d 1004 	strb.w	r1, [sp, #4]
 8007c2e:	9901      	ldr	r1, [sp, #4]
 8007c30:	910d      	str	r1, [sp, #52]	; 0x34
 8007c32:	4619      	mov	r1, r3
 8007c34:	f363 0100 	bfi	r1, r3, #0, #1
 8007c38:	f363 0141 	bfi	r1, r3, #1, #1
 8007c3c:	f363 0182 	bfi	r1, r3, #2, #1
 8007c40:	f363 01c5 	bfi	r1, r3, #3, #3
 8007c44:	f362 1188 	bfi	r1, r2, #6, #3
 8007c48:	220c      	movs	r2, #12
 8007c4a:	f362 2152 	bfi	r1, r2, #9, #10
 8007c4e:	f363 41de 	bfi	r1, r3, #19, #12
 8007c52:	f363 71df 	bfi	r1, r3, #31, #1
 8007c56:	aa0d      	add	r2, sp, #52	; 0x34
 8007c58:	4802      	ldr	r0, [pc, #8]	; (8007c64 <SX1276ReadBuffer+0x60>)
 8007c5a:	f006 fbda 	bl	800e412 <z_impl_z_log_msg2_static_create>
}
 8007c5e:	e7d9      	b.n	8007c14 <SX1276ReadBuffer+0x10>
 8007c60:	08011abc 	.word	0x08011abc
 8007c64:	08010af8 	.word	0x08010af8

08007c68 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8007c68:	b530      	push	{r4, r5, lr}
 8007c6a:	b0a7      	sub	sp, #156	; 0x9c
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4882      	ldr	r0, [pc, #520]	; (8007e78 <sx127x_lora_init+0x210>)
 8007c70:	f002 fd42 	bl	800a6f8 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8007c74:	4b81      	ldr	r3, [pc, #516]	; (8007e7c <sx127x_lora_init+0x214>)
 8007c76:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8007c78:	b300      	cbz	r0, 8007cbc <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8007c7a:	4b80      	ldr	r3, [pc, #512]	; (8007e7c <sx127x_lora_init+0x214>)
 8007c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c80:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8007c82:	4a7f      	ldr	r2, [pc, #508]	; (8007e80 <sx127x_lora_init+0x218>)
 8007c84:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8007c86:	2200      	movs	r2, #0
 8007c88:	81da      	strh	r2, [r3, #14]
 8007c8a:	487e      	ldr	r0, [pc, #504]	; (8007e84 <sx127x_lora_init+0x21c>)
 8007c8c:	f002 fd34 	bl	800a6f8 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8007c90:	4b7d      	ldr	r3, [pc, #500]	; (8007e88 <sx127x_lora_init+0x220>)
 8007c92:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8007c94:	b1f8      	cbz	r0, 8007cd6 <sx127x_lora_init+0x6e>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8007c96:	4b7c      	ldr	r3, [pc, #496]	; (8007e88 <sx127x_lora_init+0x220>)
 8007c98:	2206      	movs	r2, #6
 8007c9a:	711a      	strb	r2, [r3, #4]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	715a      	strb	r2, [r3, #5]
	spi_cs.delay = 0U;
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	609a      	str	r2, [r3, #8]

	dev_data.spi_cfg.cs = &spi_cs;
 8007ca4:	4875      	ldr	r0, [pc, #468]	; (8007e7c <sx127x_lora_init+0x214>)
 8007ca6:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8007ca8:	f641 2307 	movw	r3, #6663	; 0x1a07
 8007cac:	4975      	ldr	r1, [pc, #468]	; (8007e84 <sx127x_lora_init+0x21c>)
 8007cae:	f7ff fae3 	bl	8007278 <__sx12xx_configure_pin>
	if (ret) {
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b1e0      	cbz	r0, 8007cf0 <sx127x_lora_init+0x88>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	b027      	add	sp, #156	; 0x9c
 8007cba:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Cannot get pointer to %s device",
 8007cbc:	4b6e      	ldr	r3, [pc, #440]	; (8007e78 <sx127x_lora_init+0x210>)
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	4b72      	ldr	r3, [pc, #456]	; (8007e8c <sx127x_lora_init+0x224>)
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	9000      	str	r0, [sp, #0]
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4971      	ldr	r1, [pc, #452]	; (8007e90 <sx127x_lora_init+0x228>)
 8007ccc:	f007 fa0e 	bl	800f0ec <z_log_msg2_runtime_create>
		return -EINVAL;
 8007cd0:	f06f 0515 	mvn.w	r5, #21
 8007cd4:	e7ef      	b.n	8007cb6 <sx127x_lora_init+0x4e>
		LOG_ERR("Cannot get pointer to %s device",
 8007cd6:	4b6b      	ldr	r3, [pc, #428]	; (8007e84 <sx127x_lora_init+0x21c>)
 8007cd8:	9302      	str	r3, [sp, #8]
 8007cda:	4b6c      	ldr	r3, [pc, #432]	; (8007e8c <sx127x_lora_init+0x224>)
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	9000      	str	r0, [sp, #0]
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	496a      	ldr	r1, [pc, #424]	; (8007e90 <sx127x_lora_init+0x228>)
 8007ce6:	f007 fa01 	bl	800f0ec <z_log_msg2_runtime_create>
		return -EIO;
 8007cea:	f06f 0504 	mvn.w	r5, #4
 8007cee:	e7e2      	b.n	8007cb6 <sx127x_lora_init+0x4e>
 8007cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	f003 fe3f 	bl	800b978 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8007cfa:	4b60      	ldr	r3, [pc, #384]	; (8007e7c <sx127x_lora_init+0x214>)
 8007cfc:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8007cfe:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f013 0f01 	tst.w	r3, #1
 8007d06:	d165      	bne.n	8007dd4 <sx127x_lora_init+0x16c>
 8007d08:	462b      	mov	r3, r5
	if (value != 0)	{
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d064      	beq.n	8007dd8 <sx127x_lora_init+0x170>
	const struct gpio_driver_api *api =
 8007d0e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2101      	movs	r1, #1
 8007d14:	4798      	blx	r3
 8007d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	f003 fe2c 	bl	800b978 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8007d20:	2201      	movs	r2, #1
 8007d22:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8007d26:	2042      	movs	r0, #66	; 0x42
 8007d28:	f007 f9f2 	bl	800f110 <sx127x_read>
	if (ret < 0) {
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	db58      	blt.n	8007de2 <sx127x_lora_init+0x17a>
	LOG_INF("SX127x version 0x%02x found", regval);
 8007d30:	2301      	movs	r3, #1
 8007d32:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d36:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8007d3a:	4a56      	ldr	r2, [pc, #344]	; (8007e94 <sx127x_lora_init+0x22c>)
 8007d3c:	9212      	str	r2, [sp, #72]	; 0x48
 8007d3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d40:	2300      	movs	r3, #0
 8007d42:	9304      	str	r3, [sp, #16]
 8007d44:	2203      	movs	r2, #3
 8007d46:	f88d 2010 	strb.w	r2, [sp, #16]
 8007d4a:	9904      	ldr	r1, [sp, #16]
 8007d4c:	9111      	str	r1, [sp, #68]	; 0x44
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f363 0100 	bfi	r1, r3, #0, #1
 8007d54:	f363 0141 	bfi	r1, r3, #1, #1
 8007d58:	f363 0182 	bfi	r1, r3, #2, #1
 8007d5c:	f363 01c5 	bfi	r1, r3, #3, #3
 8007d60:	f362 1188 	bfi	r1, r2, #6, #3
 8007d64:	220c      	movs	r2, #12
 8007d66:	f362 2152 	bfi	r1, r2, #9, #10
 8007d6a:	f363 41de 	bfi	r1, r3, #19, #12
 8007d6e:	f363 71df 	bfi	r1, r3, #31, #1
 8007d72:	aa11      	add	r2, sp, #68	; 0x44
 8007d74:	4846      	ldr	r0, [pc, #280]	; (8007e90 <sx127x_lora_init+0x228>)
 8007d76:	f006 fb4c 	bl	800e412 <z_impl_z_log_msg2_static_create>
	ret = sx127x_antenna_configure();
 8007d7a:	f007 f9b5 	bl	800f0e8 <sx127x_antenna_configure>
	if (ret < 0) {
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	db54      	blt.n	8007e2c <sx127x_lora_init+0x1c4>
	ret = sx12xx_init(dev);
 8007d82:	4620      	mov	r0, r4
 8007d84:	f7ff fdba 	bl	80078fc <sx12xx_init>
	if (ret < 0) {
 8007d88:	1e04      	subs	r4, r0, #0
 8007d8a:	da94      	bge.n	8007cb6 <sx127x_lora_init+0x4e>
		LOG_ERR("Failed to initialize SX12xx common");
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007d92:	4b41      	ldr	r3, [pc, #260]	; (8007e98 <sx127x_lora_init+0x230>)
 8007d94:	9318      	str	r3, [sp, #96]	; 0x60
 8007d96:	2300      	movs	r3, #0
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	f88d 1010 	strb.w	r1, [sp, #16]
 8007da0:	9904      	ldr	r1, [sp, #16]
 8007da2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007da4:	4619      	mov	r1, r3
 8007da6:	f363 0100 	bfi	r1, r3, #0, #1
 8007daa:	f363 0141 	bfi	r1, r3, #1, #1
 8007dae:	f363 0182 	bfi	r1, r3, #2, #1
 8007db2:	f363 01c5 	bfi	r1, r3, #3, #3
 8007db6:	f362 1188 	bfi	r1, r2, #6, #3
 8007dba:	2208      	movs	r2, #8
 8007dbc:	f362 2152 	bfi	r1, r2, #9, #10
 8007dc0:	f363 41de 	bfi	r1, r3, #19, #12
 8007dc4:	f363 71df 	bfi	r1, r3, #31, #1
 8007dc8:	aa17      	add	r2, sp, #92	; 0x5c
 8007dca:	4831      	ldr	r0, [pc, #196]	; (8007e90 <sx127x_lora_init+0x228>)
 8007dcc:	f006 fb21 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return ret;
 8007dd0:	4625      	mov	r5, r4
 8007dd2:	e770      	b.n	8007cb6 <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e798      	b.n	8007d0a <sx127x_lora_init+0xa2>
	const struct gpio_driver_api *api =
 8007dd8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	2101      	movs	r1, #1
 8007dde:	4798      	blx	r3
 8007de0:	e799      	b.n	8007d16 <sx127x_lora_init+0xae>
		LOG_ERR("Unable to read version info");
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007de8:	4b2c      	ldr	r3, [pc, #176]	; (8007e9c <sx127x_lora_init+0x234>)
 8007dea:	9324      	str	r3, [sp, #144]	; 0x90
 8007dec:	2300      	movs	r3, #0
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	2102      	movs	r1, #2
 8007df2:	f88d 1010 	strb.w	r1, [sp, #16]
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	9123      	str	r1, [sp, #140]	; 0x8c
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f363 0100 	bfi	r1, r3, #0, #1
 8007e00:	f363 0141 	bfi	r1, r3, #1, #1
 8007e04:	f363 0182 	bfi	r1, r3, #2, #1
 8007e08:	f363 01c5 	bfi	r1, r3, #3, #3
 8007e0c:	f362 1188 	bfi	r1, r2, #6, #3
 8007e10:	2208      	movs	r2, #8
 8007e12:	f362 2152 	bfi	r1, r2, #9, #10
 8007e16:	f363 41de 	bfi	r1, r3, #19, #12
 8007e1a:	f363 71df 	bfi	r1, r3, #31, #1
 8007e1e:	aa23      	add	r2, sp, #140	; 0x8c
 8007e20:	481b      	ldr	r0, [pc, #108]	; (8007e90 <sx127x_lora_init+0x228>)
 8007e22:	f006 faf6 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007e26:	f06f 0504 	mvn.w	r5, #4
 8007e2a:	e744      	b.n	8007cb6 <sx127x_lora_init+0x4e>
		LOG_ERR("Unable to configure antenna");
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e32:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <sx127x_lora_init+0x238>)
 8007e34:	931e      	str	r3, [sp, #120]	; 0x78
 8007e36:	2300      	movs	r3, #0
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	f88d 1010 	strb.w	r1, [sp, #16]
 8007e40:	9904      	ldr	r1, [sp, #16]
 8007e42:	911d      	str	r1, [sp, #116]	; 0x74
 8007e44:	4619      	mov	r1, r3
 8007e46:	f363 0100 	bfi	r1, r3, #0, #1
 8007e4a:	f363 0141 	bfi	r1, r3, #1, #1
 8007e4e:	f363 0182 	bfi	r1, r3, #2, #1
 8007e52:	f363 01c5 	bfi	r1, r3, #3, #3
 8007e56:	f362 1188 	bfi	r1, r2, #6, #3
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	f362 2152 	bfi	r1, r2, #9, #10
 8007e60:	f363 41de 	bfi	r1, r3, #19, #12
 8007e64:	f363 71df 	bfi	r1, r3, #31, #1
 8007e68:	aa1d      	add	r2, sp, #116	; 0x74
 8007e6a:	4809      	ldr	r0, [pc, #36]	; (8007e90 <sx127x_lora_init+0x228>)
 8007e6c:	f006 fad1 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return -EIO;
 8007e70:	f06f 0504 	mvn.w	r5, #4
 8007e74:	e71f      	b.n	8007cb6 <sx127x_lora_init+0x4e>
 8007e76:	bf00      	nop
 8007e78:	0801194c 	.word	0x0801194c
 8007e7c:	20001044 	.word	0x20001044
 8007e80:	0007a120 	.word	0x0007a120
 8007e84:	08011620 	.word	0x08011620
 8007e88:	200010a8 	.word	0x200010a8
 8007e8c:	080119c4 	.word	0x080119c4
 8007e90:	08010af8 	.word	0x08010af8
 8007e94:	08011af8 	.word	0x08011af8
 8007e98:	08011b30 	.word	0x08011b30
 8007e9c:	08011adc 	.word	0x08011adc
 8007ea0:	08011b14 	.word	0x08011b14

08007ea4 <SX1276WriteBuffer>:
{
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	b090      	sub	sp, #64	; 0x40
 8007ea8:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8007eaa:	b2c0      	uxtb	r0, r0
 8007eac:	f007 f937 	bl	800f11e <sx127x_write>
	if (ret < 0) {
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	db01      	blt.n	8007eb8 <SX1276WriteBuffer+0x14>
}
 8007eb4:	b010      	add	sp, #64	; 0x40
 8007eb6:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to write address: 0x%x", addr);
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f8ad 2008 	strh.w	r2, [sp, #8]
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <SX1276WriteBuffer+0x5c>)
 8007ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ec2:	940f      	str	r4, [sp, #60]	; 0x3c
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	2103      	movs	r1, #3
 8007eca:	f88d 1004 	strb.w	r1, [sp, #4]
 8007ece:	9901      	ldr	r1, [sp, #4]
 8007ed0:	910d      	str	r1, [sp, #52]	; 0x34
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	f363 0100 	bfi	r1, r3, #0, #1
 8007ed8:	f363 0141 	bfi	r1, r3, #1, #1
 8007edc:	f363 0182 	bfi	r1, r3, #2, #1
 8007ee0:	f363 01c5 	bfi	r1, r3, #3, #3
 8007ee4:	f362 1188 	bfi	r1, r2, #6, #3
 8007ee8:	220c      	movs	r2, #12
 8007eea:	f362 2152 	bfi	r1, r2, #9, #10
 8007eee:	f363 41de 	bfi	r1, r3, #19, #12
 8007ef2:	f363 71df 	bfi	r1, r3, #31, #1
 8007ef6:	aa0d      	add	r2, sp, #52	; 0x34
 8007ef8:	4802      	ldr	r0, [pc, #8]	; (8007f04 <SX1276WriteBuffer+0x60>)
 8007efa:	f006 fa8a 	bl	800e412 <z_impl_z_log_msg2_static_create>
}
 8007efe:	e7d9      	b.n	8007eb4 <SX1276WriteBuffer+0x10>
 8007f00:	08011b54 	.word	0x08011b54
 8007f04:	08010af8 	.word	0x08010af8

08007f08 <SX1276SetRfTxPower>:
{
 8007f08:	b530      	push	{r4, r5, lr}
 8007f0a:	b09d      	sub	sp, #116	; 0x74
 8007f0c:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	uint8_t pa_dac = 0;
 8007f14:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007f1e:	204d      	movs	r0, #77	; 0x4d
 8007f20:	f007 f8f6 	bl	800f110 <sx127x_read>
	if (ret < 0) {
 8007f24:	2800      	cmp	r0, #0
 8007f26:	db2e      	blt.n	8007f86 <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8007f28:	f89d 4026 	ldrb.w	r4, [sp, #38]	; 0x26
 8007f2c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8007f30:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
		power = clamp_int8(power, 2, 20);
 8007f34:	2214      	movs	r2, #20
 8007f36:	2102      	movs	r1, #2
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f007 f8cb 	bl	800f0d4 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8007f3e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8007f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f46:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		if (power > 17) {
 8007f4a:	2811      	cmp	r0, #17
 8007f4c:	dd3e      	ble.n	8007fcc <SX1276SetRfTxPower+0xc4>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8007f4e:	f044 0407 	orr.w	r4, r4, #7
 8007f52:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007f56:	3805      	subs	r0, #5
 8007f58:	f000 000f 	and.w	r0, r0, #15
 8007f5c:	4318      	orrs	r0, r3
 8007f5e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8007f62:	2201      	movs	r2, #1
 8007f64:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8007f68:	2009      	movs	r0, #9
 8007f6a:	f007 f8d8 	bl	800f11e <sx127x_write>
	if (ret < 0) {
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	db37      	blt.n	8007fe2 <SX1276SetRfTxPower+0xda>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8007f78:	204d      	movs	r0, #77	; 0x4d
 8007f7a:	f007 f8d0 	bl	800f11e <sx127x_write>
	if (ret < 0) {
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	db52      	blt.n	8008028 <SX1276SetRfTxPower+0x120>
}
 8007f82:	b01d      	add	sp, #116	; 0x74
 8007f84:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to read PA dac");
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007f8c:	4b38      	ldr	r3, [pc, #224]	; (8008070 <SX1276SetRfTxPower+0x168>)
 8007f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8007f90:	2300      	movs	r3, #0
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	2102      	movs	r1, #2
 8007f96:	f88d 1000 	strb.w	r1, [sp]
 8007f9a:	9900      	ldr	r1, [sp, #0]
 8007f9c:	9119      	str	r1, [sp, #100]	; 0x64
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f363 0100 	bfi	r1, r3, #0, #1
 8007fa4:	f363 0141 	bfi	r1, r3, #1, #1
 8007fa8:	f363 0182 	bfi	r1, r3, #2, #1
 8007fac:	f363 01c5 	bfi	r1, r3, #3, #3
 8007fb0:	f362 1188 	bfi	r1, r2, #6, #3
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	f362 2152 	bfi	r1, r2, #9, #10
 8007fba:	f363 41de 	bfi	r1, r3, #19, #12
 8007fbe:	f363 71df 	bfi	r1, r3, #31, #1
 8007fc2:	aa19      	add	r2, sp, #100	; 0x64
 8007fc4:	482b      	ldr	r0, [pc, #172]	; (8008074 <SX1276SetRfTxPower+0x16c>)
 8007fc6:	f006 fa24 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return;
 8007fca:	e7da      	b.n	8007f82 <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8007fcc:	f044 0404 	orr.w	r4, r4, #4
 8007fd0:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8007fd4:	3802      	subs	r0, #2
 8007fd6:	f000 000f 	and.w	r0, r0, #15
 8007fda:	4318      	orrs	r0, r3
 8007fdc:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
 8007fe0:	e7bf      	b.n	8007f62 <SX1276SetRfTxPower+0x5a>
		LOG_ERR("Unable to write PA config");
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8007fe8:	4b23      	ldr	r3, [pc, #140]	; (8008078 <SX1276SetRfTxPower+0x170>)
 8007fea:	9314      	str	r3, [sp, #80]	; 0x50
 8007fec:	2300      	movs	r3, #0
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	f88d 1000 	strb.w	r1, [sp]
 8007ff6:	9900      	ldr	r1, [sp, #0]
 8007ff8:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	f363 0100 	bfi	r1, r3, #0, #1
 8008000:	f363 0141 	bfi	r1, r3, #1, #1
 8008004:	f363 0182 	bfi	r1, r3, #2, #1
 8008008:	f363 01c5 	bfi	r1, r3, #3, #3
 800800c:	f362 1188 	bfi	r1, r2, #6, #3
 8008010:	2208      	movs	r2, #8
 8008012:	f362 2152 	bfi	r1, r2, #9, #10
 8008016:	f363 41de 	bfi	r1, r3, #19, #12
 800801a:	f363 71df 	bfi	r1, r3, #31, #1
 800801e:	aa13      	add	r2, sp, #76	; 0x4c
 8008020:	4814      	ldr	r0, [pc, #80]	; (8008074 <SX1276SetRfTxPower+0x16c>)
 8008022:	f006 f9f6 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return;
 8008026:	e7ac      	b.n	8007f82 <SX1276SetRfTxPower+0x7a>
		LOG_ERR("Unable to write PA dac");
 8008028:	2201      	movs	r2, #1
 800802a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <SX1276SetRfTxPower+0x174>)
 8008030:	930e      	str	r3, [sp, #56]	; 0x38
 8008032:	2300      	movs	r3, #0
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2102      	movs	r1, #2
 8008038:	f88d 1000 	strb.w	r1, [sp]
 800803c:	9900      	ldr	r1, [sp, #0]
 800803e:	910d      	str	r1, [sp, #52]	; 0x34
 8008040:	4619      	mov	r1, r3
 8008042:	f363 0100 	bfi	r1, r3, #0, #1
 8008046:	f363 0141 	bfi	r1, r3, #1, #1
 800804a:	f363 0182 	bfi	r1, r3, #2, #1
 800804e:	f363 01c5 	bfi	r1, r3, #3, #3
 8008052:	f362 1188 	bfi	r1, r2, #6, #3
 8008056:	2208      	movs	r2, #8
 8008058:	f362 2152 	bfi	r1, r2, #9, #10
 800805c:	f363 41de 	bfi	r1, r3, #19, #12
 8008060:	f363 71df 	bfi	r1, r3, #31, #1
 8008064:	aa0d      	add	r2, sp, #52	; 0x34
 8008066:	4803      	ldr	r0, [pc, #12]	; (8008074 <SX1276SetRfTxPower+0x16c>)
 8008068:	f006 f9d3 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return;
 800806c:	e789      	b.n	8007f82 <SX1276SetRfTxPower+0x7a>
 800806e:	bf00      	nop
 8008070:	08011b74 	.word	0x08011b74
 8008074:	08010af8 	.word	0x08010af8
 8008078:	08011b8c 	.word	0x08011b8c
 800807c:	08011ba8 	.word	0x08011ba8

08008080 <SX1276GetDio1PinState>:
{
 8008080:	b510      	push	{r4, lr}
 8008082:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8008084:	4b0b      	ldr	r3, [pc, #44]	; (80080b4 <SX1276GetDio1PinState+0x34>)
 8008086:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8008088:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 800808a:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	a901      	add	r1, sp, #4
 8008090:	4798      	blx	r3
	if (ret == 0) {
 8008092:	4603      	mov	r3, r0
 8008094:	b918      	cbnz	r0, 800809e <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8008096:	6821      	ldr	r1, [r4, #0]
 8008098:	9a01      	ldr	r2, [sp, #4]
 800809a:	404a      	eors	r2, r1
 800809c:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 800809e:	b913      	cbnz	r3, 80080a6 <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	dc02      	bgt.n	80080b0 <SX1276GetDio1PinState+0x30>
	return 0U;
 80080aa:	2000      	movs	r0, #0
}
 80080ac:	b002      	add	sp, #8
 80080ae:	bd10      	pop	{r4, pc}
		return 1U;
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7fb      	b.n	80080ac <SX1276GetDio1PinState+0x2c>
 80080b4:	20001044 	.word	0x20001044

080080b8 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <TimerInsertTimer+0x28>)
 80080ba:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 80080bc:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 80080be:	e001      	b.n	80080c4 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 80080c0:	461a      	mov	r2, r3
            next = next->Next;
 80080c2:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 80080c4:	6951      	ldr	r1, [r2, #20]
 80080c6:	b139      	cbz	r1, 80080d8 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	f8d0 c000 	ldr.w	ip, [r0]
 80080ce:	458c      	cmp	ip, r1
 80080d0:	d8f6      	bhi.n	80080c0 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 80080d2:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 80080d4:	6143      	str	r3, [r0, #20]
            return;
 80080d6:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 80080d8:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	6143      	str	r3, [r0, #20]
}
 80080de:	4770      	bx	lr
 80080e0:	200010b4 	.word	0x200010b4

080080e4 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <TimerExists+0x18>)
 80080e6:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 80080e8:	e000      	b.n	80080ec <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 80080ea:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 80080ec:	b11b      	cbz	r3, 80080f6 <TimerExists+0x12>
        if( cur == obj )
 80080ee:	4283      	cmp	r3, r0
 80080f0:	d1fb      	bne.n	80080ea <TimerExists+0x6>
            return true;
 80080f2:	2001      	movs	r0, #1
    }
    return false;
}
 80080f4:	4770      	bx	lr
    return false;
 80080f6:	2000      	movs	r0, #0
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	200010b4 	.word	0x200010b4

08008100 <TimerInsertNewHeadTimer>:
{
 8008100:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <TimerInsertNewHeadTimer+0x18>)
 8008104:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8008106:	b10b      	cbz	r3, 800810c <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8008108:	2200      	movs	r2, #0
 800810a:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 800810c:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 800810e:	4b02      	ldr	r3, [pc, #8]	; (8008118 <TimerInsertNewHeadTimer+0x18>)
 8008110:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8008112:	f007 f818 	bl	800f146 <TimerSetTimeout>
}
 8008116:	bd08      	pop	{r3, pc}
 8008118:	200010b4 	.word	0x200010b4

0800811c <TimerStart>:
{
 800811c:	b510      	push	{r4, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8008122:	a801      	add	r0, sp, #4
 8008124:	f006 ffb9 	bl	800f09a <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8008128:	b1f4      	cbz	r4, 8008168 <TimerStart+0x4c>
 800812a:	4620      	mov	r0, r4
 800812c:	f7ff ffda 	bl	80080e4 <TimerExists>
 8008130:	b9d0      	cbnz	r0, 8008168 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8008136:	2301      	movs	r3, #1
 8008138:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 800813a:	2300      	movs	r3, #0
 800813c:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <TimerStart+0x68>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	b1ab      	cbz	r3, 8008170 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8008144:	f7fe ffc0 	bl	80070c8 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	4418      	add	r0, r3
 800814c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800814e:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <TimerStart+0x68>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4298      	cmp	r0, r3
 8008156:	d211      	bcs.n	800817c <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff ffd1 	bl	8008100 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 800815e:	a801      	add	r0, sp, #4
 8008160:	f006 ffa5 	bl	800f0ae <BoardCriticalSectionEnd>
}
 8008164:	b002      	add	sp, #8
 8008166:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8008168:	a801      	add	r0, sp, #4
 800816a:	f006 ffa0 	bl	800f0ae <BoardCriticalSectionEnd>
        return;
 800816e:	e7f9      	b.n	8008164 <TimerStart+0x48>
        RtcSetTimerContext( );
 8008170:	f7fe ffd6 	bl	8007120 <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8008174:	4620      	mov	r0, r4
 8008176:	f7ff ffc3 	bl	8008100 <TimerInsertNewHeadTimer>
 800817a:	e7f0      	b.n	800815e <TimerStart+0x42>
            TimerInsertTimer( obj );
 800817c:	4620      	mov	r0, r4
 800817e:	f7ff ff9b 	bl	80080b8 <TimerInsertTimer>
 8008182:	e7ec      	b.n	800815e <TimerStart+0x42>
 8008184:	200010b4 	.word	0x200010b4

08008188 <TimerIrqHandler>:
{
 8008188:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 800818a:	f7fe ffd5 	bl	8007138 <RtcGetTimerContext>
 800818e:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8008190:	f7fe ffc6 	bl	8007120 <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8008194:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8008198:	4b1c      	ldr	r3, [pc, #112]	; (800820c <TimerIrqHandler+0x84>)
 800819a:	681e      	ldr	r6, [r3, #0]
 800819c:	b16e      	cbz	r6, 80081ba <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800819e:	4632      	mov	r2, r6
 80081a0:	e002      	b.n	80081a8 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 80081a2:	2100      	movs	r1, #0
 80081a4:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80081a6:	6952      	ldr	r2, [r2, #20]
 80081a8:	6953      	ldr	r3, [r2, #20]
 80081aa:	b133      	cbz	r3, 80081ba <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	4561      	cmp	r1, ip
 80081b0:	d9f7      	bls.n	80081a2 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 80081b2:	1a2c      	subs	r4, r5, r0
 80081b4:	4421      	add	r1, r4
 80081b6:	6019      	str	r1, [r3, #0]
 80081b8:	e7f5      	b.n	80081a6 <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 80081ba:	b146      	cbz	r6, 80081ce <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 80081bc:	6972      	ldr	r2, [r6, #20]
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <TimerIrqHandler+0x84>)
 80081c0:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 80081c2:	2300      	movs	r3, #0
 80081c4:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80081c6:	68f3      	ldr	r3, [r6, #12]
 80081c8:	b1a3      	cbz	r3, 80081f4 <TimerIrqHandler+0x6c>
 80081ca:	6930      	ldr	r0, [r6, #16]
 80081cc:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80081ce:	4b0f      	ldr	r3, [pc, #60]	; (800820c <TimerIrqHandler+0x84>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	b18b      	cbz	r3, 80081f8 <TimerIrqHandler+0x70>
 80081d4:	681c      	ldr	r4, [r3, #0]
 80081d6:	f7fe ff77 	bl	80070c8 <RtcGetTimerElapsedTime>
 80081da:	4284      	cmp	r4, r0
 80081dc:	d20c      	bcs.n	80081f8 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 80081de:	4a0b      	ldr	r2, [pc, #44]	; (800820c <TimerIrqHandler+0x84>)
 80081e0:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 80081e2:	6959      	ldr	r1, [r3, #20]
 80081e4:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 80081e6:	2200      	movs	r2, #0
 80081e8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	b11a      	cbz	r2, 80081f6 <TimerIrqHandler+0x6e>
 80081ee:	6918      	ldr	r0, [r3, #16]
 80081f0:	4790      	blx	r2
 80081f2:	e7ec      	b.n	80081ce <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 80081f4:	e7fe      	b.n	80081f4 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 80081f6:	e7fe      	b.n	80081f6 <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80081f8:	4b04      	ldr	r3, [pc, #16]	; (800820c <TimerIrqHandler+0x84>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	b108      	cbz	r0, 8008202 <TimerIrqHandler+0x7a>
 80081fe:	7a43      	ldrb	r3, [r0, #9]
 8008200:	b103      	cbz	r3, 8008204 <TimerIrqHandler+0x7c>
}
 8008202:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8008204:	f006 ff9f 	bl	800f146 <TimerSetTimeout>
}
 8008208:	e7fb      	b.n	8008202 <TimerIrqHandler+0x7a>
 800820a:	bf00      	nop
 800820c:	200010b4 	.word	0x200010b4

08008210 <TimerStop>:
{
 8008210:	b510      	push	{r4, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8008216:	a801      	add	r0, sp, #4
 8008218:	f006 ff3f 	bl	800f09a <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800821c:	4b1b      	ldr	r3, [pc, #108]	; (800828c <TimerStop+0x7c>)
 800821e:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8008220:	b15a      	cbz	r2, 800823a <TimerStop+0x2a>
 8008222:	b154      	cbz	r4, 800823a <TimerStop+0x2a>
    obj->IsStarted = false;
 8008224:	2300      	movs	r3, #0
 8008226:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8008228:	42a2      	cmp	r2, r4
 800822a:	d00a      	beq.n	8008242 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 800822c:	4613      	mov	r3, r2
        while( cur != NULL )
 800822e:	b32b      	cbz	r3, 800827c <TimerStop+0x6c>
            if( cur == obj )
 8008230:	42a3      	cmp	r3, r4
 8008232:	d020      	beq.n	8008276 <TimerStop+0x66>
                prev = cur;
 8008234:	461a      	mov	r2, r3
                cur = cur->Next;
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	e7f9      	b.n	800822e <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800823a:	a801      	add	r0, sp, #4
 800823c:	f006 ff37 	bl	800f0ae <BoardCriticalSectionEnd>
        return;
 8008240:	e01f      	b.n	8008282 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8008242:	7a53      	ldrb	r3, [r2, #9]
 8008244:	b173      	cbz	r3, 8008264 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8008246:	2300      	movs	r3, #0
 8008248:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 800824a:	6950      	ldr	r0, [r2, #20]
 800824c:	b120      	cbz	r0, 8008258 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <TimerStop+0x7c>)
 8008250:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8008252:	f006 ff78 	bl	800f146 <TimerSetTimeout>
 8008256:	e011      	b.n	800827c <TimerStop+0x6c>
                RtcStopAlarm( );
 8008258:	f7fe ff44 	bl	80070e4 <RtcStopAlarm>
                TimerListHead = NULL;
 800825c:	4b0b      	ldr	r3, [pc, #44]	; (800828c <TimerStop+0x7c>)
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e00b      	b.n	800827c <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8008264:	6953      	ldr	r3, [r2, #20]
 8008266:	b113      	cbz	r3, 800826e <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <TimerStop+0x7c>)
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e006      	b.n	800827c <TimerStop+0x6c>
                TimerListHead = NULL;
 800826e:	4b07      	ldr	r3, [pc, #28]	; (800828c <TimerStop+0x7c>)
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e002      	b.n	800827c <TimerStop+0x6c>
                if( cur->Next != NULL )
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	b12b      	cbz	r3, 8008286 <TimerStop+0x76>
                    prev->Next = cur;
 800827a:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 800827c:	a801      	add	r0, sp, #4
 800827e:	f006 ff16 	bl	800f0ae <BoardCriticalSectionEnd>
}
 8008282:	b002      	add	sp, #8
 8008284:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8008286:	2300      	movs	r3, #0
 8008288:	6153      	str	r3, [r2, #20]
 800828a:	e7f7      	b.n	800827c <TimerStop+0x6c>
 800828c:	200010b4 	.word	0x200010b4

08008290 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8008290:	4908      	ldr	r1, [pc, #32]	; (80082b4 <SX1276ConvertFreqInHzToPllStep+0x24>)
 8008292:	fba1 3200 	umull	r3, r2, r1, r0
 8008296:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8008298:	f643 5309 	movw	r3, #15625	; 0x3d09
 800829c:	fb03 0012 	mls	r0, r3, r2, r0
 80082a0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80082a4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80082a8:	fba1 1303 	umull	r1, r3, r1, r3
 80082ac:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 80082ae:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 80082b2:	4770      	bx	lr
 80082b4:	431bde83 	.word	0x431bde83

080082b8 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80082b8:	2300      	movs	r3, #0
 80082ba:	e008      	b.n	80082ce <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 80082bc:	e7fe      	b.n	80082bc <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 80082be:	4b11      	ldr	r3, [pc, #68]	; (8008304 <GetFskBandwidthRegValue+0x4c>)
 80082c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80082c4:	7908      	ldrb	r0, [r1, #4]
}
 80082c6:	bc10      	pop	{r4}
 80082c8:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80082ca:	3301      	adds	r3, #1
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b14      	cmp	r3, #20
 80082d0:	d817      	bhi.n	8008302 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082d2:	4619      	mov	r1, r3
 80082d4:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <GetFskBandwidthRegValue+0x4c>)
 80082d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082da:	4282      	cmp	r2, r0
 80082dc:	d8f5      	bhi.n	80082ca <GetFskBandwidthRegValue+0x12>
{
 80082de:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	4c08      	ldr	r4, [pc, #32]	; (8008304 <GetFskBandwidthRegValue+0x4c>)
 80082e4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80082e8:	4282      	cmp	r2, r0
 80082ea:	d8e8      	bhi.n	80082be <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80082ec:	3301      	adds	r3, #1
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b14      	cmp	r3, #20
 80082f2:	d8e3      	bhi.n	80082bc <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80082f4:	4619      	mov	r1, r3
 80082f6:	4a03      	ldr	r2, [pc, #12]	; (8008304 <GetFskBandwidthRegValue+0x4c>)
 80082f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082fc:	4282      	cmp	r2, r0
 80082fe:	d8f5      	bhi.n	80082ec <GetFskBandwidthRegValue+0x34>
 8008300:	e7ee      	b.n	80082e0 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8008302:	e7fe      	b.n	8008302 <GetFskBandwidthRegValue+0x4a>
 8008304:	08011c7c 	.word	0x08011c7c

08008308 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8008308:	2801      	cmp	r0, #1
 800830a:	d006      	beq.n	800831a <SX1276GetLoRaBandwidthInHz+0x12>
 800830c:	2802      	cmp	r0, #2
 800830e:	d006      	beq.n	800831e <SX1276GetLoRaBandwidthInHz+0x16>
 8008310:	b108      	cbz	r0, 8008316 <SX1276GetLoRaBandwidthInHz+0xe>
 8008312:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8008314:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8008316:	4803      	ldr	r0, [pc, #12]	; (8008324 <SX1276GetLoRaBandwidthInHz+0x1c>)
 8008318:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800831a:	4803      	ldr	r0, [pc, #12]	; (8008328 <SX1276GetLoRaBandwidthInHz+0x20>)
 800831c:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 800831e:	4803      	ldr	r0, [pc, #12]	; (800832c <SX1276GetLoRaBandwidthInHz+0x24>)
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	0001e848 	.word	0x0001e848
 8008328:	0003d090 	.word	0x0003d090
 800832c:	0007a120 	.word	0x0007a120

08008330 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8008330:	4b06      	ldr	r3, [pc, #24]	; (800834c <SX1276OnDio4Irq+0x1c>)
 8008332:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008336:	b93b      	cbnz	r3, 8008348 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008338:	4b04      	ldr	r3, [pc, #16]	; (800834c <SX1276OnDio4Irq+0x1c>)
 800833a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800833e:	b91b      	cbnz	r3, 8008348 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <SX1276OnDio4Irq+0x1c>)
 8008342:	2201      	movs	r2, #1
 8008344:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	200011ec 	.word	0x200011ec

08008350 <SX1276GetStatus>:
}
 8008350:	4b01      	ldr	r3, [pc, #4]	; (8008358 <SX1276GetStatus+0x8>)
 8008352:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8008356:	4770      	bx	lr
 8008358:	200011ec 	.word	0x200011ec

0800835c <SX1276SetChannel>:
{
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8008360:	f7ff ff96 	bl	8008290 <SX1276ConvertFreqInHzToPllStep>
 8008364:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <SX1276SetChannel+0x30>)
 8008368:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800836c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8008370:	2006      	movs	r0, #6
 8008372:	f006 ffdf 	bl	800f334 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8008376:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800837a:	2007      	movs	r0, #7
 800837c:	f006 ffda 	bl	800f334 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8008380:	b2e1      	uxtb	r1, r4
 8008382:	2008      	movs	r0, #8
 8008384:	f006 ffd6 	bl	800f334 <SX1276Write>
}
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	200011ec 	.word	0x200011ec

08008390 <SX1276OnDio3Irq>:
{
 8008390:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <SX1276OnDio3Irq+0x54>)
 8008394:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008398:	2b01      	cmp	r3, #1
 800839a:	d000      	beq.n	800839e <SX1276OnDio3Irq+0xe>
}
 800839c:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800839e:	2012      	movs	r0, #18
 80083a0:	f006 ffd4 	bl	800f34c <SX1276Read>
 80083a4:	f010 0f01 	tst.w	r0, #1
 80083a8:	d00d      	beq.n	80083c6 <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80083aa:	2105      	movs	r1, #5
 80083ac:	2012      	movs	r0, #18
 80083ae:	f006 ffc1 	bl	800f334 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80083b2:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <SX1276OnDio3Irq+0x58>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <SX1276OnDio3Irq+0xc>
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0ed      	beq.n	800839c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 80083c0:	2001      	movs	r0, #1
 80083c2:	4798      	blx	r3
 80083c4:	e7ea      	b.n	800839c <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80083c6:	2104      	movs	r1, #4
 80083c8:	2012      	movs	r0, #18
 80083ca:	f006 ffb3 	bl	800f334 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <SX1276OnDio3Irq+0x58>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0e2      	beq.n	800839c <SX1276OnDio3Irq+0xc>
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0df      	beq.n	800839c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80083dc:	2000      	movs	r0, #0
 80083de:	4798      	blx	r3
}
 80083e0:	e7dc      	b.n	800839c <SX1276OnDio3Irq+0xc>
 80083e2:	bf00      	nop
 80083e4:	200011ec 	.word	0x200011ec
 80083e8:	200010b8 	.word	0x200010b8

080083ec <SX1276OnDio2Irq>:
{
 80083ec:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80083ee:	4b3a      	ldr	r3, [pc, #232]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 80083f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d002      	beq.n	80083fe <SX1276OnDio2Irq+0x12>
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d051      	beq.n	80084a0 <SX1276OnDio2Irq+0xb4>
}
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80083fe:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 8008400:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008404:	b1c3      	cbz	r3, 8008438 <SX1276OnDio2Irq+0x4c>
 8008406:	2b01      	cmp	r3, #1
 8008408:	d1f8      	bne.n	80083fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800840a:	4b33      	ldr	r3, [pc, #204]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 800840c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0f3      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008414:	2102      	movs	r1, #2
 8008416:	2012      	movs	r0, #18
 8008418:	f006 ff8c 	bl	800f334 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800841c:	4b2f      	ldr	r3, [pc, #188]	; (80084dc <SX1276OnDio2Irq+0xf0>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0eb      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
 8008424:	695c      	ldr	r4, [r3, #20]
 8008426:	2c00      	cmp	r4, #0
 8008428:	d0e8      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800842a:	201c      	movs	r0, #28
 800842c:	f006 ff8e 	bl	800f34c <SX1276Read>
 8008430:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008434:	47a0      	blx	r4
 8008436:	e7e1      	b.n	80083fc <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8008438:	4b27      	ldr	r3, [pc, #156]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 800843a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843c:	b35b      	cbz	r3, 8008496 <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 8008440:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0d9      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
 8008448:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 800844a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1d4      	bne.n	80083fc <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8008452:	4823      	ldr	r0, [pc, #140]	; (80084e0 <SX1276OnDio2Irq+0xf4>)
 8008454:	f7ff fedc 	bl	8008210 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008458:	4c1f      	ldr	r4, [pc, #124]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 800845a:	2301      	movs	r3, #1
 800845c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008460:	2011      	movs	r0, #17
 8008462:	f006 ff73 	bl	800f34c <SX1276Read>
 8008466:	0843      	lsrs	r3, r0, #1
 8008468:	425b      	negs	r3, r3
 800846a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800846e:	201b      	movs	r0, #27
 8008470:	f006 ff6c 	bl	800f34c <SX1276Read>
 8008474:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8008476:	201c      	movs	r0, #28
 8008478:	f006 ff68 	bl	800f34c <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800847c:	4328      	orrs	r0, r5
 800847e:	f006 feac 	bl	800f1da <SX1276ConvertPllStepToFreqInHz>
 8008482:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8008486:	200c      	movs	r0, #12
 8008488:	f006 ff60 	bl	800f34c <SX1276Read>
 800848c:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8008490:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8008494:	e7b2      	b.n	80083fc <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008496:	4b10      	ldr	r3, [pc, #64]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 8008498:	2201      	movs	r2, #1
 800849a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 800849e:	e7ce      	b.n	800843e <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 80084a0:	4b0d      	ldr	r3, [pc, #52]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 80084a2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d1a8      	bne.n	80083fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80084aa:	4b0b      	ldr	r3, [pc, #44]	; (80084d8 <SX1276OnDio2Irq+0xec>)
 80084ac:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0a3      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80084b4:	2102      	movs	r1, #2
 80084b6:	2012      	movs	r0, #18
 80084b8:	f006 ff3c 	bl	800f334 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <SX1276OnDio2Irq+0xf0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d09b      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
 80084c4:	695c      	ldr	r4, [r3, #20]
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d098      	beq.n	80083fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80084ca:	201c      	movs	r0, #28
 80084cc:	f006 ff3e 	bl	800f34c <SX1276Read>
 80084d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80084d4:	47a0      	blx	r4
}
 80084d6:	e791      	b.n	80083fc <SX1276OnDio2Irq+0x10>
 80084d8:	200011ec 	.word	0x200011ec
 80084dc:	200010b8 	.word	0x200010b8
 80084e0:	200010bc 	.word	0x200010bc

080084e4 <SX1276OnDio1Irq>:
{
 80084e4:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 80084e6:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80084e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d002      	beq.n	80084f6 <SX1276OnDio1Irq+0x12>
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d062      	beq.n	80085ba <SX1276OnDio1Irq+0xd6>
}
 80084f4:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80084f6:	4b47      	ldr	r3, [pc, #284]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80084f8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80084fc:	b1cb      	cbz	r3, 8008532 <SX1276OnDio1Irq+0x4e>
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d1f8      	bne.n	80084f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8008502:	f7ff fdbd 	bl	8008080 <SX1276GetDio1PinState>
 8008506:	2800      	cmp	r0, #0
 8008508:	d0f4      	beq.n	80084f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 800850a:	4843      	ldr	r0, [pc, #268]	; (8008618 <SX1276OnDio1Irq+0x134>)
 800850c:	f7ff fe80 	bl	8008210 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8008510:	2180      	movs	r1, #128	; 0x80
 8008512:	2012      	movs	r0, #18
 8008514:	f006 ff0e 	bl	800f334 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008518:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <SX1276OnDio1Irq+0x130>)
 800851a:	2200      	movs	r2, #0
 800851c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008520:	4b3e      	ldr	r3, [pc, #248]	; (800861c <SX1276OnDio1Irq+0x138>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0e5      	beq.n	80084f4 <SX1276OnDio1Irq+0x10>
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0e2      	beq.n	80084f4 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 800852e:	4798      	blx	r3
 8008530:	e7e0      	b.n	80084f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8008532:	f7ff fda5 	bl	8008080 <SX1276GetDio1PinState>
 8008536:	2800      	cmp	r0, #0
 8008538:	d0dc      	beq.n	80084f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 800853a:	4839      	ldr	r0, [pc, #228]	; (8008620 <SX1276OnDio1Irq+0x13c>)
 800853c:	f7ff fe68 	bl	8008210 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008540:	4b34      	ldr	r3, [pc, #208]	; (8008614 <SX1276OnDio1Irq+0x130>)
 8008542:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8008546:	b95b      	cbnz	r3, 8008560 <SX1276OnDio1Irq+0x7c>
 8008548:	4b32      	ldr	r3, [pc, #200]	; (8008614 <SX1276OnDio1Irq+0x130>)
 800854a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800854e:	b93b      	cbnz	r3, 8008560 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008550:	4b30      	ldr	r3, [pc, #192]	; (8008614 <SX1276OnDio1Irq+0x130>)
 8008552:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008556:	b9eb      	cbnz	r3, 8008594 <SX1276OnDio1Irq+0xb0>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8008558:	2101      	movs	r1, #1
 800855a:	4832      	ldr	r0, [pc, #200]	; (8008624 <SX1276OnDio1Irq+0x140>)
 800855c:	f006 feaa 	bl	800f2b4 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008560:	4b2c      	ldr	r3, [pc, #176]	; (8008614 <SX1276OnDio1Irq+0x130>)
 8008562:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8008566:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800856a:	1a88      	subs	r0, r1, r2
 800856c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008570:	4298      	cmp	r0, r3
 8008572:	db16      	blt.n	80085a2 <SX1276OnDio1Irq+0xbe>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008574:	1e59      	subs	r1, r3, #1
 8008576:	b2c9      	uxtb	r1, r1
 8008578:	482b      	ldr	r0, [pc, #172]	; (8008628 <SX1276OnDio1Irq+0x144>)
 800857a:	4410      	add	r0, r2
 800857c:	f006 fe9a 	bl	800f2b4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008580:	4a24      	ldr	r2, [pc, #144]	; (8008614 <SX1276OnDio1Irq+0x130>)
 8008582:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8008586:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800858a:	440b      	add	r3, r1
 800858c:	3b01      	subs	r3, #1
 800858e:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8008592:	e7af      	b.n	80084f4 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008594:	2032      	movs	r0, #50	; 0x32
 8008596:	f006 fed9 	bl	800f34c <SX1276Read>
 800859a:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <SX1276OnDio1Irq+0x130>)
 800859c:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80085a0:	e7de      	b.n	8008560 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085a2:	1a89      	subs	r1, r1, r2
 80085a4:	b2c9      	uxtb	r1, r1
 80085a6:	4820      	ldr	r0, [pc, #128]	; (8008628 <SX1276OnDio1Irq+0x144>)
 80085a8:	4410      	add	r0, r2
 80085aa:	f006 fe83 	bl	800f2b4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80085b0:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80085b4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80085b8:	e79c      	b.n	80084f4 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 80085ba:	4b16      	ldr	r3, [pc, #88]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80085bc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d197      	bne.n	80084f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 80085c4:	f7ff fd5c 	bl	8008080 <SX1276GetDio1PinState>
 80085c8:	2801      	cmp	r0, #1
 80085ca:	d093      	beq.n	80084f4 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80085ce:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80085d2:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80085d6:	eba0 0c02 	sub.w	ip, r0, r2
 80085da:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80085de:	458c      	cmp	ip, r1
 80085e0:	dd0c      	ble.n	80085fc <SX1276OnDio1Irq+0x118>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80085e2:	4811      	ldr	r0, [pc, #68]	; (8008628 <SX1276OnDio1Irq+0x144>)
 80085e4:	4410      	add	r0, r2
 80085e6:	f006 fe6c 	bl	800f2c2 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <SX1276OnDio1Irq+0x130>)
 80085ec:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80085f0:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80085f4:	440a      	add	r2, r1
 80085f6:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80085fa:	e77b      	b.n	80084f4 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80085fc:	1a81      	subs	r1, r0, r2
 80085fe:	b2c9      	uxtb	r1, r1
 8008600:	4809      	ldr	r0, [pc, #36]	; (8008628 <SX1276OnDio1Irq+0x144>)
 8008602:	4410      	add	r0, r2
 8008604:	f006 fe5d 	bl	800f2c2 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8008608:	4b02      	ldr	r3, [pc, #8]	; (8008614 <SX1276OnDio1Irq+0x130>)
 800860a:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 800860e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8008612:	e76f      	b.n	80084f4 <SX1276OnDio1Irq+0x10>
 8008614:	200011ec 	.word	0x200011ec
 8008618:	200010d4 	.word	0x200010d4
 800861c:	200010b8 	.word	0x200010b8
 8008620:	200010bc 	.word	0x200010bc
 8008624:	20001302 	.word	0x20001302
 8008628:	200010ec 	.word	0x200010ec

0800862c <SX1276OnDio0Irq>:
{
 800862c:	b510      	push	{r4, lr}
 800862e:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 8008636:	4bb1      	ldr	r3, [pc, #708]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008638:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d004      	beq.n	800864a <SX1276OnDio0Irq+0x1e>
 8008640:	2b02      	cmp	r3, #2
 8008642:	f000 813f 	beq.w	80088c4 <SX1276OnDio0Irq+0x298>
}
 8008646:	b002      	add	sp, #8
 8008648:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800864a:	4bac      	ldr	r3, [pc, #688]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800864c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008650:	b343      	cbz	r3, 80086a4 <SX1276OnDio0Irq+0x78>
 8008652:	2b01      	cmp	r3, #1
 8008654:	d1f7      	bne.n	8008646 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8008656:	2140      	movs	r1, #64	; 0x40
 8008658:	2012      	movs	r0, #18
 800865a:	f006 fe6b 	bl	800f334 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800865e:	2012      	movs	r0, #18
 8008660:	f006 fe74 	bl	800f34c <SX1276Read>
 8008664:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008668:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800866c:	f013 0f20 	tst.w	r3, #32
 8008670:	f000 80bd 	beq.w	80087ee <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008674:	2120      	movs	r1, #32
 8008676:	2012      	movs	r0, #18
 8008678:	f006 fe5c 	bl	800f334 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800867c:	4b9f      	ldr	r3, [pc, #636]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800867e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8008682:	b91b      	cbnz	r3, 800868c <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8008684:	4b9d      	ldr	r3, [pc, #628]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008686:	2200      	movs	r2, #0
 8008688:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 800868c:	489c      	ldr	r0, [pc, #624]	; (8008900 <SX1276OnDio0Irq+0x2d4>)
 800868e:	f7ff fdbf 	bl	8008210 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008692:	4b9c      	ldr	r3, [pc, #624]	; (8008904 <SX1276OnDio0Irq+0x2d8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0d5      	beq.n	8008646 <SX1276OnDio0Irq+0x1a>
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0d2      	beq.n	8008646 <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 80086a0:	4798      	blx	r3
 80086a2:	e7d0      	b.n	8008646 <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80086a4:	4b95      	ldr	r3, [pc, #596]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80086a6:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80086aa:	bb0b      	cbnz	r3, 80086f0 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80086ac:	4b93      	ldr	r3, [pc, #588]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80086ae:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80086b2:	2900      	cmp	r1, #0
 80086b4:	d15e      	bne.n	8008774 <SX1276OnDio0Irq+0x148>
 80086b6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d15a      	bne.n	8008774 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80086be:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80086c0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d14e      	bne.n	8008766 <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80086c8:	2101      	movs	r1, #1
 80086ca:	488f      	ldr	r0, [pc, #572]	; (8008908 <SX1276OnDio0Irq+0x2dc>)
 80086cc:	f006 fdf2 	bl	800f2b4 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80086d0:	4c8a      	ldr	r4, [pc, #552]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80086d2:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80086d6:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80086da:	1ac9      	subs	r1, r1, r3
 80086dc:	b2c9      	uxtb	r1, r1
 80086de:	488b      	ldr	r0, [pc, #556]	; (800890c <SX1276OnDio0Irq+0x2e0>)
 80086e0:	4418      	add	r0, r3
 80086e2:	f006 fde7 	bl	800f2b4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80086e6:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80086ea:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80086ee:	e04e      	b.n	800878e <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80086f0:	203f      	movs	r0, #63	; 0x3f
 80086f2:	f006 fe2b 	bl	800f34c <SX1276Read>
 80086f6:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80086fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086fe:	f013 0f02 	tst.w	r3, #2
 8008702:	d1d3      	bne.n	80086ac <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8008704:	210b      	movs	r1, #11
 8008706:	203e      	movs	r0, #62	; 0x3e
 8008708:	f006 fe14 	bl	800f334 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800870c:	2110      	movs	r1, #16
 800870e:	203f      	movs	r0, #63	; 0x3f
 8008710:	f006 fe10 	bl	800f334 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8008714:	487a      	ldr	r0, [pc, #488]	; (8008900 <SX1276OnDio0Irq+0x2d4>)
 8008716:	f7ff fd7b 	bl	8008210 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800871a:	4b78      	ldr	r3, [pc, #480]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800871c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008720:	b9bb      	cbnz	r3, 8008752 <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 8008722:	487b      	ldr	r0, [pc, #492]	; (8008910 <SX1276OnDio0Irq+0x2e4>)
 8008724:	f7ff fd74 	bl	8008210 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8008728:	4b74      	ldr	r3, [pc, #464]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800872a:	2200      	movs	r2, #0
 800872c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008730:	4b74      	ldr	r3, [pc, #464]	; (8008904 <SX1276OnDio0Irq+0x2d8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	b113      	cbz	r3, 800873c <SX1276OnDio0Irq+0x110>
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	b103      	cbz	r3, 800873c <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 800873a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800873c:	4b6f      	ldr	r3, [pc, #444]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800873e:	2200      	movs	r2, #0
 8008740:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008744:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008748:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800874c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8008750:	e779      	b.n	8008646 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008752:	200d      	movs	r0, #13
 8008754:	f006 fdfa 	bl	800f34c <SX1276Read>
 8008758:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800875c:	b2c9      	uxtb	r1, r1
 800875e:	200d      	movs	r0, #13
 8008760:	f006 fde8 	bl	800f334 <SX1276Write>
 8008764:	e7e4      	b.n	8008730 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8008766:	2032      	movs	r0, #50	; 0x32
 8008768:	f006 fdf0 	bl	800f34c <SX1276Read>
 800876c:	4b63      	ldr	r3, [pc, #396]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800876e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8008772:	e7ad      	b.n	80086d0 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008774:	4c61      	ldr	r4, [pc, #388]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008776:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800877a:	1ac9      	subs	r1, r1, r3
 800877c:	b2c9      	uxtb	r1, r1
 800877e:	4863      	ldr	r0, [pc, #396]	; (800890c <SX1276OnDio0Irq+0x2e0>)
 8008780:	4418      	add	r0, r3
 8008782:	f006 fd97 	bl	800f2b4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008786:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800878a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 800878e:	485c      	ldr	r0, [pc, #368]	; (8008900 <SX1276OnDio0Irq+0x2d4>)
 8008790:	f7ff fd3e 	bl	8008210 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8008794:	4b59      	ldr	r3, [pc, #356]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008796:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800879a:	b9f3      	cbnz	r3, 80087da <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 800879c:	4b57      	ldr	r3, [pc, #348]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80087a4:	485a      	ldr	r0, [pc, #360]	; (8008910 <SX1276OnDio0Irq+0x2e4>)
 80087a6:	f7ff fd33 	bl	8008210 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80087aa:	4b56      	ldr	r3, [pc, #344]	; (8008904 <SX1276OnDio0Irq+0x2d8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	b14b      	cbz	r3, 80087c4 <SX1276OnDio0Irq+0x198>
 80087b0:	689c      	ldr	r4, [r3, #8]
 80087b2:	b13c      	cbz	r4, 80087c4 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80087b4:	4951      	ldr	r1, [pc, #324]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80087b6:	2300      	movs	r3, #0
 80087b8:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80087bc:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80087c0:	4852      	ldr	r0, [pc, #328]	; (800890c <SX1276OnDio0Irq+0x2e0>)
 80087c2:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80087c4:	4b4d      	ldr	r3, [pc, #308]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80087cc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80087d0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80087d4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80087d8:	e735      	b.n	8008646 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80087da:	200d      	movs	r0, #13
 80087dc:	f006 fdb6 	bl	800f34c <SX1276Read>
 80087e0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80087e4:	b2c9      	uxtb	r1, r1
 80087e6:	200d      	movs	r0, #13
 80087e8:	f006 fda4 	bl	800f334 <SX1276Write>
 80087ec:	e7dd      	b.n	80087aa <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80087ee:	2019      	movs	r0, #25
 80087f0:	f006 fdac 	bl	800f34c <SX1276Read>
 80087f4:	b243      	sxtb	r3, r0
 80087f6:	3302      	adds	r3, #2
 80087f8:	109b      	asrs	r3, r3, #2
 80087fa:	4c40      	ldr	r4, [pc, #256]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80087fc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8008800:	201a      	movs	r0, #26
 8008802:	f006 fda3 	bl	800f34c <SX1276Read>
 8008806:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8008808:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
 800880c:	2a00      	cmp	r2, #0
 800880e:	db39      	blt.n	8008884 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008810:	4a3a      	ldr	r2, [pc, #232]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008812:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
 8008816:	4a3f      	ldr	r2, [pc, #252]	; (8008914 <SX1276OnDio0Irq+0x2e8>)
 8008818:	4291      	cmp	r1, r2
 800881a:	d94c      	bls.n	80088b6 <SX1276OnDio0Irq+0x28a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800881c:	eb00 1023 	add.w	r0, r0, r3, asr #4
 8008820:	389d      	subs	r0, #157	; 0x9d
 8008822:	4b36      	ldr	r3, [pc, #216]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008824:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8008828:	2013      	movs	r0, #19
 800882a:	f006 fd8f 	bl	800f34c <SX1276Read>
 800882e:	4c33      	ldr	r4, [pc, #204]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008830:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8008834:	2010      	movs	r0, #16
 8008836:	f006 fd89 	bl	800f34c <SX1276Read>
 800883a:	4601      	mov	r1, r0
 800883c:	200d      	movs	r0, #13
 800883e:	f006 fd79 	bl	800f334 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8008842:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8008846:	4831      	ldr	r0, [pc, #196]	; (800890c <SX1276OnDio0Irq+0x2e0>)
 8008848:	f006 fd34 	bl	800f2b4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800884c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8008850:	b913      	cbnz	r3, 8008858 <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 8008852:	2200      	movs	r2, #0
 8008854:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 8008858:	4829      	ldr	r0, [pc, #164]	; (8008900 <SX1276OnDio0Irq+0x2d4>)
 800885a:	f7ff fcd9 	bl	8008210 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800885e:	4b29      	ldr	r3, [pc, #164]	; (8008904 <SX1276OnDio0Irq+0x2d8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f43f aeef 	beq.w	8008646 <SX1276OnDio0Irq+0x1a>
 8008868:	689c      	ldr	r4, [r3, #8]
 800886a:	2c00      	cmp	r4, #0
 800886c:	f43f aeeb 	beq.w	8008646 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008870:	4922      	ldr	r1, [pc, #136]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 8008872:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 8008876:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 800887a:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800887e:	4823      	ldr	r0, [pc, #140]	; (800890c <SX1276OnDio0Irq+0x2e0>)
 8008880:	47a0      	blx	r4
 8008882:	e6e0      	b.n	8008646 <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008884:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8008888:	4922      	ldr	r1, [pc, #136]	; (8008914 <SX1276OnDio0Irq+0x2e8>)
 800888a:	428c      	cmp	r4, r1
 800888c:	d909      	bls.n	80088a2 <SX1276OnDio0Irq+0x276>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800888e:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008892:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008894:	fa12 f383 	uxtah	r3, r2, r3
 8008898:	3b9d      	subs	r3, #157	; 0x9d
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 800889c:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80088a0:	e7c2      	b.n	8008828 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80088a2:	eb00 1323 	add.w	r3, r0, r3, asr #4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80088a6:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80088a8:	fa12 f383 	uxtah	r3, r2, r3
 80088ac:	3ba4      	subs	r3, #164	; 0xa4
 80088ae:	4a13      	ldr	r2, [pc, #76]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80088b0:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80088b4:	e7b8      	b.n	8008828 <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80088b6:	eb00 1023 	add.w	r0, r0, r3, asr #4
 80088ba:	38a4      	subs	r0, #164	; 0xa4
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80088be:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80088c2:	e7b1      	b.n	8008828 <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 80088c4:	4814      	ldr	r0, [pc, #80]	; (8008918 <SX1276OnDio0Irq+0x2ec>)
 80088c6:	f7ff fca3 	bl	8008210 <TimerStop>
            switch( SX1276.Settings.Modem )
 80088ca:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80088cc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d00e      	beq.n	80088f2 <SX1276OnDio0Irq+0x2c6>
                SX1276.Settings.State = RF_IDLE;
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <SX1276OnDio0Irq+0x2d0>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <SX1276OnDio0Irq+0x2d8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f43f aeb0 	beq.w	8008646 <SX1276OnDio0Irq+0x1a>
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f43f aeac 	beq.w	8008646 <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 80088ee:	4798      	blx	r3
}
 80088f0:	e6a9      	b.n	8008646 <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80088f2:	2108      	movs	r1, #8
 80088f4:	2012      	movs	r0, #18
 80088f6:	f006 fd1d 	bl	800f334 <SX1276Write>
 80088fa:	e7eb      	b.n	80088d4 <SX1276OnDio0Irq+0x2a8>
 80088fc:	200011ec 	.word	0x200011ec
 8008900:	200010d4 	.word	0x200010d4
 8008904:	200010b8 	.word	0x200010b8
 8008908:	20001302 	.word	0x20001302
 800890c:	200010ec 	.word	0x200010ec
 8008910:	200010bc 	.word	0x200010bc
 8008914:	1f4add40 	.word	0x1f4add40
 8008918:	20001330 	.word	0x20001330

0800891c <RxChainCalibration>:
{
 800891c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800891e:	2009      	movs	r0, #9
 8008920:	f006 fd14 	bl	800f34c <SX1276Read>
 8008924:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008926:	2006      	movs	r0, #6
 8008928:	f006 fd10 	bl	800f34c <SX1276Read>
 800892c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800892e:	2007      	movs	r0, #7
 8008930:	f006 fd0c 	bl	800f34c <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8008934:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8008938:	2008      	movs	r0, #8
 800893a:	f006 fd07 	bl	800f34c <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800893e:	4320      	orrs	r0, r4
 8008940:	f006 fc4b 	bl	800f1da <SX1276ConvertPllStepToFreqInHz>
 8008944:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8008946:	2100      	movs	r1, #0
 8008948:	2009      	movs	r0, #9
 800894a:	f006 fcf3 	bl	800f334 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800894e:	203b      	movs	r0, #59	; 0x3b
 8008950:	f006 fcfc 	bl	800f34c <SX1276Read>
 8008954:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8008958:	b2c9      	uxtb	r1, r1
 800895a:	203b      	movs	r0, #59	; 0x3b
 800895c:	f006 fcea 	bl	800f334 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008960:	203b      	movs	r0, #59	; 0x3b
 8008962:	f006 fcf3 	bl	800f34c <SX1276Read>
 8008966:	f010 0f20 	tst.w	r0, #32
 800896a:	d1f9      	bne.n	8008960 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 800896c:	480c      	ldr	r0, [pc, #48]	; (80089a0 <RxChainCalibration+0x84>)
 800896e:	f7ff fcf5 	bl	800835c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8008972:	203b      	movs	r0, #59	; 0x3b
 8008974:	f006 fcea 	bl	800f34c <SX1276Read>
 8008978:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800897c:	b2c9      	uxtb	r1, r1
 800897e:	203b      	movs	r0, #59	; 0x3b
 8008980:	f006 fcd8 	bl	800f334 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8008984:	203b      	movs	r0, #59	; 0x3b
 8008986:	f006 fce1 	bl	800f34c <SX1276Read>
 800898a:	f010 0f20 	tst.w	r0, #32
 800898e:	d1f9      	bne.n	8008984 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8008990:	4629      	mov	r1, r5
 8008992:	2009      	movs	r0, #9
 8008994:	f006 fcce 	bl	800f334 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8008998:	4620      	mov	r0, r4
 800899a:	f7ff fcdf 	bl	800835c <SX1276SetChannel>
}
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	33bca100 	.word	0x33bca100

080089a4 <SX1276SetSleep>:
{
 80089a4:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80089a6:	480a      	ldr	r0, [pc, #40]	; (80089d0 <SX1276SetSleep+0x2c>)
 80089a8:	f7ff fc32 	bl	8008210 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80089ac:	4809      	ldr	r0, [pc, #36]	; (80089d4 <SX1276SetSleep+0x30>)
 80089ae:	f7ff fc2f 	bl	8008210 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80089b2:	4809      	ldr	r0, [pc, #36]	; (80089d8 <SX1276SetSleep+0x34>)
 80089b4:	f7ff fc2c 	bl	8008210 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80089b8:	2000      	movs	r0, #0
 80089ba:	f006 fcd3 	bl	800f364 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80089be:	2000      	movs	r0, #0
 80089c0:	f006 fba4 	bl	800f10c <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <SX1276SetSleep+0x38>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80089cc:	bd08      	pop	{r3, pc}
 80089ce:	bf00      	nop
 80089d0:	200010d4 	.word	0x200010d4
 80089d4:	20001330 	.word	0x20001330
 80089d8:	200010bc 	.word	0x200010bc
 80089dc:	200011ec 	.word	0x200011ec

080089e0 <SX1276SetStby>:
{
 80089e0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80089e2:	4808      	ldr	r0, [pc, #32]	; (8008a04 <SX1276SetStby+0x24>)
 80089e4:	f7ff fc14 	bl	8008210 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80089e8:	4807      	ldr	r0, [pc, #28]	; (8008a08 <SX1276SetStby+0x28>)
 80089ea:	f7ff fc11 	bl	8008210 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80089ee:	4807      	ldr	r0, [pc, #28]	; (8008a0c <SX1276SetStby+0x2c>)
 80089f0:	f7ff fc0e 	bl	8008210 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80089f4:	2001      	movs	r0, #1
 80089f6:	f006 fcb5 	bl	800f364 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <SX1276SetStby+0x30>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008a02:	bd08      	pop	{r3, pc}
 8008a04:	200010d4 	.word	0x200010d4
 8008a08:	20001330 	.word	0x20001330
 8008a0c:	200010bc 	.word	0x200010bc
 8008a10:	200011ec 	.word	0x200011ec

08008a14 <SX1276SetTx>:
{
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8008a18:	4829      	ldr	r0, [pc, #164]	; (8008ac0 <SX1276SetTx+0xac>)
 8008a1a:	f7ff fbf9 	bl	8008210 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4828      	ldr	r0, [pc, #160]	; (8008ac4 <SX1276SetTx+0xb0>)
 8008a22:	f006 fbaf 	bl	800f184 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8008a26:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <SX1276SetTx+0xb4>)
 8008a28:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008a2c:	b163      	cbz	r3, 8008a48 <SX1276SetTx+0x34>
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d023      	beq.n	8008a7a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8008a32:	4b25      	ldr	r3, [pc, #148]	; (8008ac8 <SX1276SetTx+0xb4>)
 8008a34:	2202      	movs	r2, #2
 8008a36:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8008a3a:	4822      	ldr	r0, [pc, #136]	; (8008ac4 <SX1276SetTx+0xb0>)
 8008a3c:	f7ff fb6e 	bl	800811c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8008a40:	2003      	movs	r0, #3
 8008a42:	f006 fc8f 	bl	800f364 <SX1276SetOpMode>
}
 8008a46:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008a48:	2040      	movs	r0, #64	; 0x40
 8008a4a:	f006 fc7f 	bl	800f34c <SX1276Read>
 8008a4e:	f000 0103 	and.w	r1, r0, #3
 8008a52:	2040      	movs	r0, #64	; 0x40
 8008a54:	f006 fc6e 	bl	800f334 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008a58:	2041      	movs	r0, #65	; 0x41
 8008a5a:	f006 fc77 	bl	800f34c <SX1276Read>
 8008a5e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8008a62:	2041      	movs	r0, #65	; 0x41
 8008a64:	f006 fc66 	bl	800f334 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008a68:	2035      	movs	r0, #53	; 0x35
 8008a6a:	f006 fc6f 	bl	800f34c <SX1276Read>
 8008a6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <SX1276SetTx+0xb4>)
 8008a74:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8008a78:	e7db      	b.n	8008a32 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008a7a:	4b13      	ldr	r3, [pc, #76]	; (8008ac8 <SX1276SetTx+0xb4>)
 8008a7c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008a80:	b173      	cbz	r3, 8008aa0 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008a82:	21f5      	movs	r1, #245	; 0xf5
 8008a84:	2011      	movs	r0, #17
 8008a86:	f006 fc55 	bl	800f334 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8008a8a:	2040      	movs	r0, #64	; 0x40
 8008a8c:	f006 fc5e 	bl	800f34c <SX1276Read>
 8008a90:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008a94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008a98:	2040      	movs	r0, #64	; 0x40
 8008a9a:	f006 fc4b 	bl	800f334 <SX1276Write>
 8008a9e:	e7c8      	b.n	8008a32 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8008aa0:	21f7      	movs	r1, #247	; 0xf7
 8008aa2:	2011      	movs	r0, #17
 8008aa4:	f006 fc46 	bl	800f334 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8008aa8:	2040      	movs	r0, #64	; 0x40
 8008aaa:	f006 fc4f 	bl	800f34c <SX1276Read>
 8008aae:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008ab2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008ab6:	2040      	movs	r0, #64	; 0x40
 8008ab8:	f006 fc3c 	bl	800f334 <SX1276Write>
 8008abc:	e7b9      	b.n	8008a32 <SX1276SetTx+0x1e>
 8008abe:	bf00      	nop
 8008ac0:	200010d4 	.word	0x200010d4
 8008ac4:	20001330 	.word	0x20001330
 8008ac8:	200011ec 	.word	0x200011ec

08008acc <SX1276Send>:
{
 8008acc:	b530      	push	{r4, r5, lr}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8008ad6:	4b44      	ldr	r3, [pc, #272]	; (8008be8 <SX1276Send+0x11c>)
 8008ad8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008adc:	b133      	cbz	r3, 8008aec <SX1276Send+0x20>
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d03a      	beq.n	8008b58 <SX1276Send+0x8c>
 8008ae2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8008ae4:	f7ff ff96 	bl	8008a14 <SX1276SetTx>
}
 8008ae8:	b003      	add	sp, #12
 8008aea:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008aec:	4b3e      	ldr	r3, [pc, #248]	; (8008be8 <SX1276Send+0x11c>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8008af4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008af8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8008afc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8008b00:	b9eb      	cbnz	r3, 8008b3e <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8008b02:	2101      	movs	r1, #1
 8008b04:	f10d 0007 	add.w	r0, sp, #7
 8008b08:	f006 fbdb 	bl	800f2c2 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8008b0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008b10:	1e53      	subs	r3, r2, #1
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b3f      	cmp	r3, #63	; 0x3f
 8008b16:	d816      	bhi.n	8008b46 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8008b18:	4b33      	ldr	r3, [pc, #204]	; (8008be8 <SX1276Send+0x11c>)
 8008b1a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8008b1e:	4d32      	ldr	r5, [pc, #200]	; (8008be8 <SX1276Send+0x11c>)
 8008b20:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8008b24:	4620      	mov	r0, r4
 8008b26:	f006 fbcc 	bl	800f2c2 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8008b2a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8008b2e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8008b32:	4413      	add	r3, r2
 8008b34:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8008b38:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8008b3c:	e7d2      	b.n	8008ae4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8008b3e:	2032      	movs	r0, #50	; 0x32
 8008b40:	f006 fbf8 	bl	800f334 <SX1276Write>
 8008b44:	e7e2      	b.n	8008b0c <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8008b46:	4621      	mov	r1, r4
 8008b48:	4828      	ldr	r0, [pc, #160]	; (8008bec <SX1276Send+0x120>)
 8008b4a:	f006 faf1 	bl	800f130 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8008b4e:	4b26      	ldr	r3, [pc, #152]	; (8008be8 <SX1276Send+0x11c>)
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8008b56:	e7e2      	b.n	8008b1e <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008b58:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <SX1276Send+0x11c>)
 8008b5a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008b5e:	b353      	cbz	r3, 8008bb6 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8008b60:	2033      	movs	r0, #51	; 0x33
 8008b62:	f006 fbf3 	bl	800f34c <SX1276Read>
 8008b66:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8008b6a:	2033      	movs	r0, #51	; 0x33
 8008b6c:	f006 fbe2 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008b70:	2119      	movs	r1, #25
 8008b72:	203b      	movs	r0, #59	; 0x3b
 8008b74:	f006 fbde 	bl	800f334 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8008b78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <SX1276Send+0x11c>)
 8008b7e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8008b82:	2022      	movs	r0, #34	; 0x22
 8008b84:	f006 fbd6 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8008b88:	2100      	movs	r1, #0
 8008b8a:	200e      	movs	r0, #14
 8008b8c:	f006 fbd2 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008b90:	2100      	movs	r1, #0
 8008b92:	200d      	movs	r0, #13
 8008b94:	f006 fbce 	bl	800f334 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8008b98:	2001      	movs	r0, #1
 8008b9a:	f006 fbd7 	bl	800f34c <SX1276Read>
 8008b9e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8008ba2:	d01a      	beq.n	8008bda <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8008ba4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f006 fb8a 	bl	800f2c2 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8008bae:	4b0e      	ldr	r3, [pc, #56]	; (8008be8 <SX1276Send+0x11c>)
 8008bb0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8008bb4:	e796      	b.n	8008ae4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008bb6:	2033      	movs	r0, #51	; 0x33
 8008bb8:	f006 fbc8 	bl	800f34c <SX1276Read>
 8008bbc:	b241      	sxtb	r1, r0
 8008bbe:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008bc2:	f041 0101 	orr.w	r1, r1, #1
 8008bc6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008bca:	2033      	movs	r0, #51	; 0x33
 8008bcc:	f006 fbb2 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008bd0:	211d      	movs	r1, #29
 8008bd2:	203b      	movs	r0, #59	; 0x3b
 8008bd4:	f006 fbae 	bl	800f334 <SX1276Write>
 8008bd8:	e7ce      	b.n	8008b78 <SX1276Send+0xac>
                SX1276SetStby( );
 8008bda:	f7ff ff01 	bl	80089e0 <SX1276SetStby>
                DelayMs( 1 );
 8008bde:	2001      	movs	r0, #1
 8008be0:	f006 faf7 	bl	800f1d2 <DelayMs>
 8008be4:	e7de      	b.n	8008ba4 <SX1276Send+0xd8>
 8008be6:	bf00      	nop
 8008be8:	200011ec 	.word	0x200011ec
 8008bec:	200010ec 	.word	0x200010ec

08008bf0 <SX1276SetRx>:
{
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8008bf4:	489d      	ldr	r0, [pc, #628]	; (8008e6c <SX1276SetRx+0x27c>)
 8008bf6:	f7ff fb0b 	bl	8008210 <TimerStop>
    switch( SX1276.Settings.Modem )
 8008bfa:	4b9d      	ldr	r3, [pc, #628]	; (8008e70 <SX1276SetRx+0x280>)
 8008bfc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008c00:	b1e3      	cbz	r3, 8008c3c <SX1276SetRx+0x4c>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d045      	beq.n	8008c92 <SX1276SetRx+0xa2>
 8008c06:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8008c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4899      	ldr	r0, [pc, #612]	; (8008e74 <SX1276SetRx+0x284>)
 8008c10:	f007 f9c5 	bl	800ff9e <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8008c14:	4b96      	ldr	r3, [pc, #600]	; (8008e70 <SX1276SetRx+0x280>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8008c1c:	2c00      	cmp	r4, #0
 8008c1e:	f040 8107 	bne.w	8008e30 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8008c22:	4b93      	ldr	r3, [pc, #588]	; (8008e70 <SX1276SetRx+0x280>)
 8008c24:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 810a 	beq.w	8008e42 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	f000 8118 	beq.w	8008e64 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8008c34:	2005      	movs	r0, #5
 8008c36:	f006 fb95 	bl	800f364 <SX1276SetOpMode>
}
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8008c3c:	4d8c      	ldr	r5, [pc, #560]	; (8008e70 <SX1276SetRx+0x280>)
 8008c3e:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c42:	2040      	movs	r0, #64	; 0x40
 8008c44:	f006 fb82 	bl	800f34c <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8008c48:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8008c4c:	f041 010c 	orr.w	r1, r1, #12
 8008c50:	2040      	movs	r0, #64	; 0x40
 8008c52:	f006 fb6f 	bl	800f334 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8008c56:	2041      	movs	r0, #65	; 0x41
 8008c58:	f006 fb78 	bl	800f34c <SX1276Read>
 8008c5c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8008c60:	b2c9      	uxtb	r1, r1
 8008c62:	2041      	movs	r0, #65	; 0x41
 8008c64:	f006 fb66 	bl	800f334 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8008c68:	2035      	movs	r0, #53	; 0x35
 8008c6a:	f006 fb6f 	bl	800f34c <SX1276Read>
 8008c6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008c72:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8008c76:	211e      	movs	r1, #30
 8008c78:	200d      	movs	r0, #13
 8008c7a:	f006 fb5b 	bl	800f334 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008c84:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008c88:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008c8c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8008c90:	e7ba      	b.n	8008c08 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8008c92:	4b77      	ldr	r3, [pc, #476]	; (8008e70 <SX1276SetRx+0x280>)
 8008c94:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008c98:	b353      	cbz	r3, 8008cf0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8008c9a:	2033      	movs	r0, #51	; 0x33
 8008c9c:	f006 fb56 	bl	800f34c <SX1276Read>
 8008ca0:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8008ca4:	b2c9      	uxtb	r1, r1
 8008ca6:	2033      	movs	r0, #51	; 0x33
 8008ca8:	f006 fb44 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8008cac:	2119      	movs	r1, #25
 8008cae:	203b      	movs	r0, #59	; 0x3b
 8008cb0:	f006 fb40 	bl	800f334 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8008cb4:	4b6e      	ldr	r3, [pc, #440]	; (8008e70 <SX1276SetRx+0x280>)
 8008cb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	f200 8087 	bhi.w	8008dce <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8008cc0:	2031      	movs	r0, #49	; 0x31
 8008cc2:	f006 fb43 	bl	800f34c <SX1276Read>
 8008cc6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008cca:	2031      	movs	r0, #49	; 0x31
 8008ccc:	f006 fb32 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	2030      	movs	r0, #48	; 0x30
 8008cd4:	f006 fb2e 	bl	800f334 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8008cd8:	4b65      	ldr	r3, [pc, #404]	; (8008e70 <SX1276SetRx+0x280>)
 8008cda:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8008cde:	2b08      	cmp	r3, #8
 8008ce0:	d87e      	bhi.n	8008de0 <SX1276SetRx+0x1f0>
 8008ce2:	e8df f003 	tbb	[pc, r3]
 8008ce6:	2417      	.short	0x2417
 8008ce8:	584b3e31 	.word	0x584b3e31
 8008cec:	6a65      	.short	0x6a65
 8008cee:	6f          	.byte	0x6f
 8008cef:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8008cf0:	2033      	movs	r0, #51	; 0x33
 8008cf2:	f006 fb2b 	bl	800f34c <SX1276Read>
 8008cf6:	b241      	sxtb	r1, r0
 8008cf8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8008cfc:	f041 0101 	orr.w	r1, r1, #1
 8008d00:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8008d04:	2033      	movs	r0, #51	; 0x33
 8008d06:	f006 fb15 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8008d0a:	211d      	movs	r1, #29
 8008d0c:	203b      	movs	r0, #59	; 0x3b
 8008d0e:	f006 fb11 	bl	800f334 <SX1276Write>
 8008d12:	e7cf      	b.n	8008cb4 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8008d14:	2148      	movs	r1, #72	; 0x48
 8008d16:	202f      	movs	r0, #47	; 0x2f
 8008d18:	f006 fb0c 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8008d1c:	4b54      	ldr	r3, [pc, #336]	; (8008e70 <SX1276SetRx+0x280>)
 8008d1e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d22:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8008d26:	3002      	adds	r0, #2
 8008d28:	f7ff fb18 	bl	800835c <SX1276SetChannel>
                    break;
 8008d2c:	e058      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d2e:	2144      	movs	r1, #68	; 0x44
 8008d30:	202f      	movs	r0, #47	; 0x2f
 8008d32:	f006 faff 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8008d36:	4b4e      	ldr	r3, [pc, #312]	; (8008e70 <SX1276SetRx+0x280>)
 8008d38:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d3c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8008d40:	3034      	adds	r0, #52	; 0x34
 8008d42:	f7ff fb0b 	bl	800835c <SX1276SetChannel>
                    break;
 8008d46:	e04b      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d48:	2144      	movs	r1, #68	; 0x44
 8008d4a:	202f      	movs	r0, #47	; 0x2f
 8008d4c:	f006 faf2 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8008d50:	4b47      	ldr	r3, [pc, #284]	; (8008e70 <SX1276SetRx+0x280>)
 8008d52:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d56:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8008d5a:	3004      	adds	r0, #4
 8008d5c:	f7ff fafe 	bl	800835c <SX1276SetChannel>
                    break;
 8008d60:	e03e      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d62:	2144      	movs	r1, #68	; 0x44
 8008d64:	202f      	movs	r0, #47	; 0x2f
 8008d66:	f006 fae5 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8008d6a:	4b41      	ldr	r3, [pc, #260]	; (8008e70 <SX1276SetRx+0x280>)
 8008d6c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d70:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8008d74:	305e      	adds	r0, #94	; 0x5e
 8008d76:	f7ff faf1 	bl	800835c <SX1276SetChannel>
                    break;
 8008d7a:	e031      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d7c:	2144      	movs	r1, #68	; 0x44
 8008d7e:	202f      	movs	r0, #47	; 0x2f
 8008d80:	f006 fad8 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8008d84:	4b3a      	ldr	r3, [pc, #232]	; (8008e70 <SX1276SetRx+0x280>)
 8008d86:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008d8a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8008d8e:	3012      	adds	r0, #18
 8008d90:	f7ff fae4 	bl	800835c <SX1276SetChannel>
                    break;
 8008d94:	e024      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8008d96:	2144      	movs	r1, #68	; 0x44
 8008d98:	202f      	movs	r0, #47	; 0x2f
 8008d9a:	f006 facb 	bl	800f334 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8008d9e:	4b34      	ldr	r3, [pc, #208]	; (8008e70 <SX1276SetRx+0x280>)
 8008da0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8008da4:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8008da8:	30c6      	adds	r0, #198	; 0xc6
 8008daa:	f7ff fad7 	bl	800835c <SX1276SetChannel>
                    break;
 8008dae:	e017      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008db0:	2140      	movs	r1, #64	; 0x40
 8008db2:	202f      	movs	r0, #47	; 0x2f
 8008db4:	f006 fabe 	bl	800f334 <SX1276Write>
                    break;
 8008db8:	e012      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008dba:	2140      	movs	r1, #64	; 0x40
 8008dbc:	202f      	movs	r0, #47	; 0x2f
 8008dbe:	f006 fab9 	bl	800f334 <SX1276Write>
                    break;
 8008dc2:	e00d      	b.n	8008de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8008dc4:	2140      	movs	r1, #64	; 0x40
 8008dc6:	202f      	movs	r0, #47	; 0x2f
 8008dc8:	f006 fab4 	bl	800f334 <SX1276Write>
                    break;
 8008dcc:	e008      	b.n	8008de0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8008dce:	2031      	movs	r0, #49	; 0x31
 8008dd0:	f006 fabc 	bl	800f34c <SX1276Read>
 8008dd4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008dd8:	b2c9      	uxtb	r1, r1
 8008dda:	2031      	movs	r0, #49	; 0x31
 8008ddc:	f006 faaa 	bl	800f334 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8008de0:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <SX1276SetRx+0x280>)
 8008de2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008de6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8008dea:	b1a3      	cbz	r3, 8008e16 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008dec:	211d      	movs	r1, #29
 8008dee:	2011      	movs	r0, #17
 8008df0:	f006 faa0 	bl	800f334 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8008df4:	2040      	movs	r0, #64	; 0x40
 8008df6:	f006 faa9 	bl	800f34c <SX1276Read>
 8008dfa:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8008dfe:	2040      	movs	r0, #64	; 0x40
 8008e00:	f006 fa98 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8008e04:	2100      	movs	r1, #0
 8008e06:	200f      	movs	r0, #15
 8008e08:	f006 fa94 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	200d      	movs	r0, #13
 8008e10:	f006 fa90 	bl	800f334 <SX1276Write>
        break;
 8008e14:	e6f8      	b.n	8008c08 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8008e16:	211f      	movs	r1, #31
 8008e18:	2011      	movs	r0, #17
 8008e1a:	f006 fa8b 	bl	800f334 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8008e1e:	2040      	movs	r0, #64	; 0x40
 8008e20:	f006 fa94 	bl	800f34c <SX1276Read>
 8008e24:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8008e28:	2040      	movs	r0, #64	; 0x40
 8008e2a:	f006 fa83 	bl	800f334 <SX1276Write>
 8008e2e:	e7e9      	b.n	8008e04 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008e30:	4d11      	ldr	r5, [pc, #68]	; (8008e78 <SX1276SetRx+0x288>)
 8008e32:	4621      	mov	r1, r4
 8008e34:	4628      	mov	r0, r5
 8008e36:	f006 f9a5 	bl	800f184 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f7ff f96e 	bl	800811c <TimerStart>
 8008e40:	e6ef      	b.n	8008c22 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8008e42:	2005      	movs	r0, #5
 8008e44:	f006 fa8e 	bl	800f364 <SX1276SetOpMode>
        if( rxContinuous == false )
 8008e48:	2e00      	cmp	r6, #0
 8008e4a:	f47f aef6 	bne.w	8008c3a <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8008e4e:	4c0b      	ldr	r4, [pc, #44]	; (8008e7c <SX1276SetRx+0x28c>)
 8008e50:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <SX1276SetRx+0x280>)
 8008e52:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8008e56:	4620      	mov	r0, r4
 8008e58:	f006 f994 	bl	800f184 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f7ff f95d 	bl	800811c <TimerStart>
 8008e62:	e6ea      	b.n	8008c3a <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8008e64:	2006      	movs	r0, #6
 8008e66:	f006 fa7d 	bl	800f364 <SX1276SetOpMode>
}
 8008e6a:	e6e6      	b.n	8008c3a <SX1276SetRx+0x4a>
 8008e6c:	20001330 	.word	0x20001330
 8008e70:	200011ec 	.word	0x200011ec
 8008e74:	200010ec 	.word	0x200010ec
 8008e78:	200010d4 	.word	0x200010d4
 8008e7c:	200010bc 	.word	0x200010bc

08008e80 <SX1276ReadRssi>:
{
 8008e80:	b508      	push	{r3, lr}
    switch( modem )
 8008e82:	b120      	cbz	r0, 8008e8e <SX1276ReadRssi+0xe>
 8008e84:	2801      	cmp	r0, #1
 8008e86:	d00a      	beq.n	8008e9e <SX1276ReadRssi+0x1e>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008e8c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008e8e:	2011      	movs	r0, #17
 8008e90:	f006 fa5c 	bl	800f34c <SX1276Read>
 8008e94:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8008e98:	4240      	negs	r0, r0
 8008e9a:	b200      	sxth	r0, r0
        break;
 8008e9c:	e7f6      	b.n	8008e8c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <SX1276ReadRssi+0x48>)
 8008ea0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <SX1276ReadRssi+0x4c>)
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d906      	bls.n	8008eb8 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8008eaa:	201b      	movs	r0, #27
 8008eac:	f006 fa4e 	bl	800f34c <SX1276Read>
 8008eb0:	b280      	uxth	r0, r0
 8008eb2:	389d      	subs	r0, #157	; 0x9d
 8008eb4:	b200      	sxth	r0, r0
 8008eb6:	e7e9      	b.n	8008e8c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8008eb8:	201b      	movs	r0, #27
 8008eba:	f006 fa47 	bl	800f34c <SX1276Read>
 8008ebe:	b280      	uxth	r0, r0
 8008ec0:	38a4      	subs	r0, #164	; 0xa4
 8008ec2:	b200      	sxth	r0, r0
 8008ec4:	e7e2      	b.n	8008e8c <SX1276ReadRssi+0xc>
 8008ec6:	bf00      	nop
 8008ec8:	200011ec 	.word	0x200011ec
 8008ecc:	1f4add40 	.word	0x1f4add40

08008ed0 <SX1276SetModem>:
{
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	f006 fa39 	bl	800f34c <SX1276Read>
 8008eda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008ede:	d121      	bne.n	8008f24 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8008ee0:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <SX1276SetModem+0x88>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8008ee8:	4b1b      	ldr	r3, [pc, #108]	; (8008f58 <SX1276SetModem+0x88>)
 8008eea:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8008eee:	42a3      	cmp	r3, r4
 8008ef0:	d017      	beq.n	8008f22 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8008ef2:	4b19      	ldr	r3, [pc, #100]	; (8008f58 <SX1276SetModem+0x88>)
 8008ef4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8008ef8:	2c01      	cmp	r4, #1
 8008efa:	d018      	beq.n	8008f2e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008efc:	2000      	movs	r0, #0
 8008efe:	f006 fa31 	bl	800f364 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8008f02:	2001      	movs	r0, #1
 8008f04:	f006 fa22 	bl	800f34c <SX1276Read>
 8008f08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	f006 fa11 	bl	800f334 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008f12:	2100      	movs	r1, #0
 8008f14:	2040      	movs	r0, #64	; 0x40
 8008f16:	f006 fa0d 	bl	800f334 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008f1a:	2130      	movs	r1, #48	; 0x30
 8008f1c:	2041      	movs	r0, #65	; 0x41
 8008f1e:	f006 fa09 	bl	800f334 <SX1276Write>
}
 8008f22:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <SX1276SetModem+0x88>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8008f2c:	e7dc      	b.n	8008ee8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f006 fa18 	bl	800f364 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008f34:	2001      	movs	r0, #1
 8008f36:	f006 fa09 	bl	800f34c <SX1276Read>
 8008f3a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8008f3e:	b2c9      	uxtb	r1, r1
 8008f40:	2001      	movs	r0, #1
 8008f42:	f006 f9f7 	bl	800f334 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008f46:	2100      	movs	r1, #0
 8008f48:	2040      	movs	r0, #64	; 0x40
 8008f4a:	f006 f9f3 	bl	800f334 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008f4e:	2100      	movs	r1, #0
 8008f50:	2041      	movs	r0, #65	; 0x41
 8008f52:	f006 f9ef 	bl	800f334 <SX1276Write>
        break;
 8008f56:	e7e4      	b.n	8008f22 <SX1276SetModem+0x52>
 8008f58:	200011ec 	.word	0x200011ec

08008f5c <SX1276Init>:
{
 8008f5c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <SX1276Init+0x68>)
 8008f60:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8008f62:	4c19      	ldr	r4, [pc, #100]	; (8008fc8 <SX1276Init+0x6c>)
 8008f64:	4621      	mov	r1, r4
 8008f66:	4819      	ldr	r0, [pc, #100]	; (8008fcc <SX1276Init+0x70>)
 8008f68:	f006 f903 	bl	800f172 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4818      	ldr	r0, [pc, #96]	; (8008fd0 <SX1276Init+0x74>)
 8008f70:	f006 f8ff 	bl	800f172 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8008f74:	4621      	mov	r1, r4
 8008f76:	4817      	ldr	r0, [pc, #92]	; (8008fd4 <SX1276Init+0x78>)
 8008f78:	f006 f8fb 	bl	800f172 <TimerInit>
    SX1276Reset( );
 8008f7c:	f7fe fd44 	bl	8007a08 <SX1276Reset>
    RxChainCalibration( );
 8008f80:	f7ff fccc 	bl	800891c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008f84:	2000      	movs	r0, #0
 8008f86:	f006 f9ed 	bl	800f364 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8008f8a:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <SX1276Init+0x7c>)
 8008f8c:	f7fe fd70 	bl	8007a70 <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008f90:	2400      	movs	r4, #0
 8008f92:	e00c      	b.n	8008fae <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8008f94:	4a11      	ldr	r2, [pc, #68]	; (8008fdc <SX1276Init+0x80>)
 8008f96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008f9a:	18d5      	adds	r5, r2, r3
 8008f9c:	5cd0      	ldrb	r0, [r2, r3]
 8008f9e:	f7ff ff97 	bl	8008ed0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008fa2:	78a9      	ldrb	r1, [r5, #2]
 8008fa4:	7868      	ldrb	r0, [r5, #1]
 8008fa6:	f006 f9c5 	bl	800f334 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008faa:	3401      	adds	r4, #1
 8008fac:	b2e4      	uxtb	r4, r4
 8008fae:	2c0f      	cmp	r4, #15
 8008fb0:	d9f0      	bls.n	8008f94 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	f7ff ff8c 	bl	8008ed0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8008fb8:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <SX1276Init+0x84>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	bf00      	nop
 8008fc4:	200010b8 	.word	0x200010b8
 8008fc8:	080095dd 	.word	0x080095dd
 8008fcc:	20001330 	.word	0x20001330
 8008fd0:	200010d4 	.word	0x200010d4
 8008fd4:	200010bc 	.word	0x200010bc
 8008fd8:	200000e0 	.word	0x200000e0
 8008fdc:	08011d2c 	.word	0x08011d2c
 8008fe0:	200011ec 	.word	0x200011ec

08008fe4 <SX1276SetRxConfig>:
{
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	4604      	mov	r4, r0
 8008fec:	9101      	str	r1, [sp, #4]
 8008fee:	4615      	mov	r5, r2
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8008ff6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8008ffa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8008ffe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8009002:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8009006:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 800900a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800900e:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8009010:	f7ff ff5e 	bl	8008ed0 <SX1276SetModem>
    switch( modem )
 8009014:	b124      	cbz	r4, 8009020 <SX1276SetRxConfig+0x3c>
 8009016:	2c01      	cmp	r4, #1
 8009018:	d069      	beq.n	80090ee <SX1276SetRxConfig+0x10a>
}
 800901a:	b005      	add	sp, #20
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8009020:	4ba0      	ldr	r3, [pc, #640]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 8009022:	9c01      	ldr	r4, [sp, #4]
 8009024:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8009028:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800902c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800902e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8009032:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8009036:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800903a:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800903e:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8009042:	9a02      	ldr	r2, [sp, #8]
 8009044:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8009048:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800904c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009050:	fb02 fa0a 	mul.w	sl, r2, sl
 8009054:	fbba f2f5 	udiv	r2, sl, r5
 8009058:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800905c:	4b92      	ldr	r3, [pc, #584]	; (80092a8 <SX1276SetRxConfig+0x2c4>)
 800905e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8009062:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8009066:	2002      	movs	r0, #2
 8009068:	f006 f964 	bl	800f334 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800906c:	b2e9      	uxtb	r1, r5
 800906e:	2003      	movs	r0, #3
 8009070:	f006 f960 	bl	800f334 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8009074:	4620      	mov	r0, r4
 8009076:	f7ff f91f 	bl	80082b8 <GetFskBandwidthRegValue>
 800907a:	4601      	mov	r1, r0
 800907c:	2012      	movs	r0, #18
 800907e:	f006 f959 	bl	800f334 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8009082:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009084:	f7ff f918 	bl	80082b8 <GetFskBandwidthRegValue>
 8009088:	4601      	mov	r1, r0
 800908a:	2013      	movs	r0, #19
 800908c:	f006 f952 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8009090:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8009094:	2025      	movs	r0, #37	; 0x25
 8009096:	f006 f94d 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800909a:	fa5f f188 	uxtb.w	r1, r8
 800909e:	2026      	movs	r0, #38	; 0x26
 80090a0:	f006 f948 	bl	800f334 <SX1276Write>
            if( fixLen == 1 )
 80090a4:	b1df      	cbz	r7, 80090de <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80090a6:	4649      	mov	r1, r9
 80090a8:	2032      	movs	r0, #50	; 0x32
 80090aa:	f006 f943 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80090ae:	2030      	movs	r0, #48	; 0x30
 80090b0:	f006 f94c 	bl	800f34c <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80090b4:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80090b8:	b1b7      	cbz	r7, 80090e8 <SX1276SetRxConfig+0x104>
 80090ba:	2300      	movs	r3, #0
 80090bc:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80090be:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80090c2:	b2c9      	uxtb	r1, r1
 80090c4:	2030      	movs	r0, #48	; 0x30
 80090c6:	f006 f935 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80090ca:	2031      	movs	r0, #49	; 0x31
 80090cc:	f006 f93e 	bl	800f34c <SX1276Read>
 80090d0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80090d4:	b2c9      	uxtb	r1, r1
 80090d6:	2031      	movs	r0, #49	; 0x31
 80090d8:	f006 f92c 	bl	800f334 <SX1276Write>
        break;
 80090dc:	e79d      	b.n	800901a <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80090de:	21ff      	movs	r1, #255	; 0xff
 80090e0:	2032      	movs	r0, #50	; 0x32
 80090e2:	f006 f927 	bl	800f334 <SX1276Write>
 80090e6:	e7e2      	b.n	80090ae <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80090e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80090ec:	e7e6      	b.n	80090bc <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d900      	bls.n	80090f6 <SX1276SetRxConfig+0x112>
                while( 1 );
 80090f4:	e7fe      	b.n	80090f4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 80090f6:	9c01      	ldr	r4, [sp, #4]
 80090f8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80090fa:	4b6a      	ldr	r3, [pc, #424]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 80090fc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8009100:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8009104:	9a03      	ldr	r2, [sp, #12]
 8009106:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800910a:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800910e:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8009112:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8009116:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800911a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800911e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8009122:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009126:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800912a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800912e:	9a02      	ldr	r2, [sp, #8]
 8009130:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8009134:	2d0c      	cmp	r5, #12
 8009136:	d803      	bhi.n	8009140 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8009138:	2d05      	cmp	r5, #5
 800913a:	d802      	bhi.n	8009142 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 800913c:	2506      	movs	r5, #6
 800913e:	e000      	b.n	8009142 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8009140:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009142:	2c07      	cmp	r4, #7
 8009144:	d063      	beq.n	800920e <SX1276SetRxConfig+0x22a>
 8009146:	2c08      	cmp	r4, #8
 8009148:	d06a      	beq.n	8009220 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800914a:	4b56      	ldr	r3, [pc, #344]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8009152:	201d      	movs	r0, #29
 8009154:	f006 f8fa 	bl	800f34c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8009158:	0123      	lsls	r3, r4, #4
 800915a:	b2da      	uxtb	r2, r3
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8009164:	ea43 0107 	orr.w	r1, r3, r7
 8009168:	201d      	movs	r0, #29
 800916a:	f006 f8e3 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800916e:	201e      	movs	r0, #30
 8009170:	f006 f8ec 	bl	800f34c <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8009174:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8009178:	012a      	lsls	r2, r5, #4
 800917a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800917c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800917e:	00b3      	lsls	r3, r6, #2
 8009180:	b2db      	uxtb	r3, r3
 8009182:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8009184:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009188:	4319      	orrs	r1, r3
 800918a:	201e      	movs	r0, #30
 800918c:	f006 f8d2 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8009190:	2026      	movs	r0, #38	; 0x26
 8009192:	f006 f8db 	bl	800f34c <SX1276Read>
 8009196:	b241      	sxtb	r1, r0
 8009198:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800919c:	4b41      	ldr	r3, [pc, #260]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 800919e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80091a2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80091a6:	b2c9      	uxtb	r1, r1
 80091a8:	2026      	movs	r0, #38	; 0x26
 80091aa:	f006 f8c3 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80091ae:	fa5f f18a 	uxtb.w	r1, sl
 80091b2:	201f      	movs	r0, #31
 80091b4:	f006 f8be 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80091b8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80091bc:	2020      	movs	r0, #32
 80091be:	f006 f8b9 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80091c2:	fa5f f188 	uxtb.w	r1, r8
 80091c6:	2021      	movs	r0, #33	; 0x21
 80091c8:	f006 f8b4 	bl	800f334 <SX1276Write>
            if( fixLen == 1 )
 80091cc:	bb5f      	cbnz	r7, 8009226 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80091ce:	4b35      	ldr	r3, [pc, #212]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 80091d0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80091d4:	bb63      	cbnz	r3, 8009230 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80091d6:	2c09      	cmp	r4, #9
 80091d8:	d03a      	beq.n	8009250 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 80091da:	2c09      	cmp	r4, #9
 80091dc:	d047      	beq.n	800926e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80091de:	2103      	movs	r1, #3
 80091e0:	2036      	movs	r0, #54	; 0x36
 80091e2:	f006 f8a7 	bl	800f334 <SX1276Write>
            if( datarate == 6 )
 80091e6:	2d06      	cmp	r5, #6
 80091e8:	d04a      	beq.n	8009280 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80091ea:	2031      	movs	r0, #49	; 0x31
 80091ec:	f006 f8ae 	bl	800f34c <SX1276Read>
 80091f0:	b241      	sxtb	r1, r0
 80091f2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80091f6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80091fa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80091fe:	2031      	movs	r0, #49	; 0x31
 8009200:	f006 f898 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8009204:	210a      	movs	r1, #10
 8009206:	2037      	movs	r0, #55	; 0x37
 8009208:	f006 f894 	bl	800f334 <SX1276Write>
}
 800920c:	e705      	b.n	800901a <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800920e:	f1a5 030b 	sub.w	r3, r5, #11
 8009212:	2b01      	cmp	r3, #1
 8009214:	d897      	bhi.n	8009146 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8009216:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800921e:	e798      	b.n	8009152 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8009220:	2d0c      	cmp	r5, #12
 8009222:	d192      	bne.n	800914a <SX1276SetRxConfig+0x166>
 8009224:	e7f7      	b.n	8009216 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8009226:	4649      	mov	r1, r9
 8009228:	2022      	movs	r0, #34	; 0x22
 800922a:	f006 f883 	bl	800f334 <SX1276Write>
 800922e:	e7ce      	b.n	80091ce <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8009230:	2044      	movs	r0, #68	; 0x44
 8009232:	f006 f88b 	bl	800f34c <SX1276Read>
 8009236:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800923a:	b2c9      	uxtb	r1, r1
 800923c:	2044      	movs	r0, #68	; 0x44
 800923e:	f006 f879 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 8009244:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8009248:	2024      	movs	r0, #36	; 0x24
 800924a:	f006 f873 	bl	800f334 <SX1276Write>
 800924e:	e7c2      	b.n	80091d6 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8009250:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <SX1276SetRxConfig+0x2c0>)
 8009252:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <SX1276SetRxConfig+0x2c8>)
 8009258:	429a      	cmp	r2, r3
 800925a:	d9be      	bls.n	80091da <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800925c:	2102      	movs	r1, #2
 800925e:	2036      	movs	r0, #54	; 0x36
 8009260:	f006 f868 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8009264:	2164      	movs	r1, #100	; 0x64
 8009266:	203a      	movs	r0, #58	; 0x3a
 8009268:	f006 f864 	bl	800f334 <SX1276Write>
 800926c:	e7bb      	b.n	80091e6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800926e:	2102      	movs	r1, #2
 8009270:	2036      	movs	r0, #54	; 0x36
 8009272:	f006 f85f 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8009276:	217f      	movs	r1, #127	; 0x7f
 8009278:	203a      	movs	r0, #58	; 0x3a
 800927a:	f006 f85b 	bl	800f334 <SX1276Write>
 800927e:	e7b2      	b.n	80091e6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009280:	2031      	movs	r0, #49	; 0x31
 8009282:	f006 f863 	bl	800f34c <SX1276Read>
 8009286:	b241      	sxtb	r1, r0
 8009288:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800928c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009290:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8009294:	2031      	movs	r0, #49	; 0x31
 8009296:	f006 f84d 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800929a:	210c      	movs	r1, #12
 800929c:	2037      	movs	r0, #55	; 0x37
 800929e:	f006 f849 	bl	800f334 <SX1276Write>
 80092a2:	e6ba      	b.n	800901a <SX1276SetRxConfig+0x36>
 80092a4:	200011ec 	.word	0x200011ec
 80092a8:	01e84800 	.word	0x01e84800
 80092ac:	1f4add40 	.word	0x1f4add40

080092b0 <SX1276SetTxConfig>:
{
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b083      	sub	sp, #12
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	9201      	str	r2, [sp, #4]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80092c2:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80092c6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80092ca:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80092ce:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80092d2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80092d6:	f7ff fdfb 	bl	8008ed0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80092da:	4628      	mov	r0, r5
 80092dc:	f7fe fe14 	bl	8007f08 <SX1276SetRfTxPower>
    switch( modem )
 80092e0:	b124      	cbz	r4, 80092ec <SX1276SetTxConfig+0x3c>
 80092e2:	2c01      	cmp	r4, #1
 80092e4:	d057      	beq.n	8009396 <SX1276SetTxConfig+0xe6>
}
 80092e6:	b003      	add	sp, #12
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 80092ec:	4b81      	ldr	r3, [pc, #516]	; (80094f4 <SX1276SetTxConfig+0x244>)
 80092ee:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 80092f2:	9801      	ldr	r0, [sp, #4]
 80092f4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80092f8:	9a00      	ldr	r2, [sp, #0]
 80092fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 80092fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009300:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8009304:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8009308:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800930c:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8009310:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8009314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009316:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800931a:	f7fe ffb9 	bl	8008290 <SX1276ConvertFreqInHzToPllStep>
 800931e:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8009320:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009324:	2004      	movs	r0, #4
 8009326:	f006 f805 	bl	800f334 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800932a:	b2e1      	uxtb	r1, r4
 800932c:	2005      	movs	r0, #5
 800932e:	f006 f801 	bl	800f334 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8009332:	4c71      	ldr	r4, [pc, #452]	; (80094f8 <SX1276SetTxConfig+0x248>)
 8009334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009336:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800933a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800933e:	2002      	movs	r0, #2
 8009340:	f005 fff8 	bl	800f334 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8009344:	b2e1      	uxtb	r1, r4
 8009346:	2003      	movs	r0, #3
 8009348:	f005 fff4 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800934c:	0a39      	lsrs	r1, r7, #8
 800934e:	2025      	movs	r0, #37	; 0x25
 8009350:	f005 fff0 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8009354:	b2f9      	uxtb	r1, r7
 8009356:	2026      	movs	r0, #38	; 0x26
 8009358:	f005 ffec 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800935c:	2030      	movs	r0, #48	; 0x30
 800935e:	f005 fff5 	bl	800f34c <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8009362:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	d011      	beq.n	8009390 <SX1276SetTxConfig+0xe0>
 800936c:	2300      	movs	r3, #0
 800936e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8009370:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8009374:	b2c9      	uxtb	r1, r1
 8009376:	2030      	movs	r0, #48	; 0x30
 8009378:	f005 ffdc 	bl	800f334 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800937c:	2031      	movs	r0, #49	; 0x31
 800937e:	f005 ffe5 	bl	800f34c <SX1276Read>
 8009382:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8009386:	b2c9      	uxtb	r1, r1
 8009388:	2031      	movs	r0, #49	; 0x31
 800938a:	f005 ffd3 	bl	800f334 <SX1276Write>
        break;
 800938e:	e7aa      	b.n	80092e6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8009390:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009394:	e7eb      	b.n	800936e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8009396:	4b57      	ldr	r3, [pc, #348]	; (80094f4 <SX1276SetTxConfig+0x244>)
 8009398:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800939c:	9b00      	ldr	r3, [sp, #0]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d900      	bls.n	80093a4 <SX1276SetTxConfig+0xf4>
                while( 1 );
 80093a2:	e7fe      	b.n	80093a2 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 80093a4:	9c00      	ldr	r4, [sp, #0]
 80093a6:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80093a8:	4b52      	ldr	r3, [pc, #328]	; (80094f4 <SX1276SetTxConfig+0x244>)
 80093aa:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80093ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80093b4:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80093b8:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80093bc:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80093c0:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80093c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80093c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80093cc:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80093d0:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80093d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80093da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093dc:	2b0c      	cmp	r3, #12
 80093de:	d804      	bhi.n	80093ea <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80093e0:	2b05      	cmp	r3, #5
 80093e2:	d804      	bhi.n	80093ee <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80093e4:	2306      	movs	r3, #6
 80093e6:	930c      	str	r3, [sp, #48]	; 0x30
 80093e8:	e001      	b.n	80093ee <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80093ea:	230c      	movs	r3, #12
 80093ec:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80093ee:	2c07      	cmp	r4, #7
 80093f0:	d051      	beq.n	8009496 <SX1276SetTxConfig+0x1e6>
 80093f2:	2c08      	cmp	r4, #8
 80093f4:	d058      	beq.n	80094a8 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80093f6:	4b3f      	ldr	r3, [pc, #252]	; (80094f4 <SX1276SetTxConfig+0x244>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80093fe:	f1bb 0f00 	cmp.w	fp, #0
 8009402:	d155      	bne.n	80094b0 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8009404:	201d      	movs	r0, #29
 8009406:	f005 ffa1 	bl	800f34c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800940a:	0123      	lsls	r3, r4, #4
 800940c:	b2da      	uxtb	r2, r3
 800940e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009412:	b2db      	uxtb	r3, r3
 8009414:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8009416:	ea43 0108 	orr.w	r1, r3, r8
 800941a:	201d      	movs	r0, #29
 800941c:	f005 ff8a 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8009420:	201e      	movs	r0, #30
 8009422:	f005 ff93 	bl	800f34c <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8009426:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800942a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8009430:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8009432:	00b3      	lsls	r3, r6, #2
 8009434:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8009436:	4319      	orrs	r1, r3
 8009438:	201e      	movs	r0, #30
 800943a:	f005 ff7b 	bl	800f334 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800943e:	2026      	movs	r0, #38	; 0x26
 8009440:	f005 ff84 	bl	800f34c <SX1276Read>
 8009444:	b241      	sxtb	r1, r0
 8009446:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800944a:	4b2a      	ldr	r3, [pc, #168]	; (80094f4 <SX1276SetTxConfig+0x244>)
 800944c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8009450:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8009454:	b2c9      	uxtb	r1, r1
 8009456:	2026      	movs	r0, #38	; 0x26
 8009458:	f005 ff6c 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800945c:	0a39      	lsrs	r1, r7, #8
 800945e:	2020      	movs	r0, #32
 8009460:	f005 ff68 	bl	800f334 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8009464:	b2f9      	uxtb	r1, r7
 8009466:	2021      	movs	r0, #33	; 0x21
 8009468:	f005 ff64 	bl	800f334 <SX1276Write>
            if( datarate == 6 )
 800946c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946e:	2b06      	cmp	r3, #6
 8009470:	d02e      	beq.n	80094d0 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8009472:	2031      	movs	r0, #49	; 0x31
 8009474:	f005 ff6a 	bl	800f34c <SX1276Read>
 8009478:	b241      	sxtb	r1, r0
 800947a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800947e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8009482:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8009486:	2031      	movs	r0, #49	; 0x31
 8009488:	f005 ff54 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800948c:	210a      	movs	r1, #10
 800948e:	2037      	movs	r0, #55	; 0x37
 8009490:	f005 ff50 	bl	800f334 <SX1276Write>
}
 8009494:	e727      	b.n	80092e6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009498:	3b0b      	subs	r3, #11
 800949a:	2b01      	cmp	r3, #1
 800949c:	d8a9      	bhi.n	80093f2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800949e:	4b15      	ldr	r3, [pc, #84]	; (80094f4 <SX1276SetTxConfig+0x244>)
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80094a6:	e7aa      	b.n	80093fe <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80094a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094aa:	2b0c      	cmp	r3, #12
 80094ac:	d1a3      	bne.n	80093f6 <SX1276SetTxConfig+0x146>
 80094ae:	e7f6      	b.n	800949e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80094b0:	2044      	movs	r0, #68	; 0x44
 80094b2:	f005 ff4b 	bl	800f34c <SX1276Read>
 80094b6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80094ba:	b2c9      	uxtb	r1, r1
 80094bc:	2044      	movs	r0, #68	; 0x44
 80094be:	f005 ff39 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80094c2:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <SX1276SetTxConfig+0x244>)
 80094c4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80094c8:	2024      	movs	r0, #36	; 0x24
 80094ca:	f005 ff33 	bl	800f334 <SX1276Write>
 80094ce:	e799      	b.n	8009404 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80094d0:	2031      	movs	r0, #49	; 0x31
 80094d2:	f005 ff3b 	bl	800f34c <SX1276Read>
 80094d6:	b241      	sxtb	r1, r0
 80094d8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80094dc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80094e0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80094e4:	2031      	movs	r0, #49	; 0x31
 80094e6:	f005 ff25 	bl	800f334 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80094ea:	210c      	movs	r1, #12
 80094ec:	2037      	movs	r0, #55	; 0x37
 80094ee:	f005 ff21 	bl	800f334 <SX1276Write>
 80094f2:	e6f8      	b.n	80092e6 <SX1276SetTxConfig+0x36>
 80094f4:	200011ec 	.word	0x200011ec
 80094f8:	01e84800 	.word	0x01e84800

080094fc <SX1276SetTxContinuousWave>:
{
 80094fc:	b530      	push	{r4, r5, lr}
 80094fe:	b08b      	sub	sp, #44	; 0x2c
 8009500:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8009502:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009506:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 800950a:	f7fe ff27 	bl	800835c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800950e:	9408      	str	r4, [sp, #32]
 8009510:	2000      	movs	r0, #0
 8009512:	9007      	str	r0, [sp, #28]
 8009514:	9006      	str	r0, [sp, #24]
 8009516:	9005      	str	r0, [sp, #20]
 8009518:	9004      	str	r0, [sp, #16]
 800951a:	9003      	str	r0, [sp, #12]
 800951c:	2305      	movs	r3, #5
 800951e:	9302      	str	r3, [sp, #8]
 8009520:	9001      	str	r0, [sp, #4]
 8009522:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	4603      	mov	r3, r0
 800952a:	4602      	mov	r2, r0
 800952c:	4629      	mov	r1, r5
 800952e:	f7ff febf 	bl	80092b0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8009532:	2031      	movs	r0, #49	; 0x31
 8009534:	f005 ff0a 	bl	800f34c <SX1276Read>
 8009538:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800953c:	2031      	movs	r0, #49	; 0x31
 800953e:	f005 fef9 	bl	800f334 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8009542:	21f0      	movs	r1, #240	; 0xf0
 8009544:	2040      	movs	r0, #64	; 0x40
 8009546:	f005 fef5 	bl	800f334 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800954a:	21a0      	movs	r1, #160	; 0xa0
 800954c:	2041      	movs	r0, #65	; 0x41
 800954e:	f005 fef1 	bl	800f334 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8009552:	4d08      	ldr	r5, [pc, #32]	; (8009574 <SX1276SetTxContinuousWave+0x78>)
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f005 fe14 	bl	800f184 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <SX1276SetTxContinuousWave+0x7c>)
 800955e:	2202      	movs	r2, #2
 8009560:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8009564:	4628      	mov	r0, r5
 8009566:	f7fe fdd9 	bl	800811c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800956a:	2003      	movs	r0, #3
 800956c:	f005 fefa 	bl	800f364 <SX1276SetOpMode>
}
 8009570:	b00b      	add	sp, #44	; 0x2c
 8009572:	bd30      	pop	{r4, r5, pc}
 8009574:	20001330 	.word	0x20001330
 8009578:	200011ec 	.word	0x200011ec

0800957c <SX1276SetMaxPayloadLength>:
{
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4604      	mov	r4, r0
 8009580:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8009582:	f7ff fca5 	bl	8008ed0 <SX1276SetModem>
    switch( modem )
 8009586:	b114      	cbz	r4, 800958e <SX1276SetMaxPayloadLength+0x12>
 8009588:	2c01      	cmp	r4, #1
 800958a:	d00a      	beq.n	80095a2 <SX1276SetMaxPayloadLength+0x26>
}
 800958c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <SX1276SetMaxPayloadLength+0x30>)
 8009590:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f9      	bne.n	800958c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8009598:	4629      	mov	r1, r5
 800959a:	2032      	movs	r0, #50	; 0x32
 800959c:	f005 feca 	bl	800f334 <SX1276Write>
 80095a0:	e7f4      	b.n	800958c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80095a2:	4629      	mov	r1, r5
 80095a4:	2023      	movs	r0, #35	; 0x23
 80095a6:	f005 fec5 	bl	800f334 <SX1276Write>
}
 80095aa:	e7ef      	b.n	800958c <SX1276SetMaxPayloadLength+0x10>
 80095ac:	200011ec 	.word	0x200011ec

080095b0 <SX1276SetPublicNetwork>:
{
 80095b0:	b510      	push	{r4, lr}
 80095b2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7ff fc8b 	bl	8008ed0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80095ba:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <SX1276SetPublicNetwork+0x28>)
 80095bc:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80095c0:	b124      	cbz	r4, 80095cc <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80095c2:	2134      	movs	r1, #52	; 0x34
 80095c4:	2039      	movs	r0, #57	; 0x39
 80095c6:	f005 feb5 	bl	800f334 <SX1276Write>
}
 80095ca:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80095cc:	2112      	movs	r1, #18
 80095ce:	2039      	movs	r0, #57	; 0x39
 80095d0:	f005 feb0 	bl	800f334 <SX1276Write>
}
 80095d4:	e7f9      	b.n	80095ca <SX1276SetPublicNetwork+0x1a>
 80095d6:	bf00      	nop
 80095d8:	200011ec 	.word	0x200011ec

080095dc <SX1276OnTimeoutIrq>:
{
 80095dc:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80095de:	4b33      	ldr	r3, [pc, #204]	; (80096ac <SX1276OnTimeoutIrq+0xd0>)
 80095e0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d002      	beq.n	80095ee <SX1276OnTimeoutIrq+0x12>
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d033      	beq.n	8009654 <SX1276OnTimeoutIrq+0x78>
}
 80095ec:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80095ee:	4b2f      	ldr	r3, [pc, #188]	; (80096ac <SX1276OnTimeoutIrq+0xd0>)
 80095f0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80095f4:	b143      	cbz	r3, 8009608 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095f6:	4b2e      	ldr	r3, [pc, #184]	; (80096b0 <SX1276OnTimeoutIrq+0xd4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0f6      	beq.n	80095ec <SX1276OnTimeoutIrq+0x10>
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0f3      	beq.n	80095ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8009604:	4798      	blx	r3
 8009606:	e7f1      	b.n	80095ec <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8009608:	4c28      	ldr	r4, [pc, #160]	; (80096ac <SX1276OnTimeoutIrq+0xd0>)
 800960a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800960e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8009612:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8009616:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800961a:	210b      	movs	r1, #11
 800961c:	203e      	movs	r0, #62	; 0x3e
 800961e:	f005 fe89 	bl	800f334 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8009622:	2110      	movs	r1, #16
 8009624:	203f      	movs	r0, #63	; 0x3f
 8009626:	f005 fe85 	bl	800f334 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800962a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800962e:	b14b      	cbz	r3, 8009644 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8009630:	200d      	movs	r0, #13
 8009632:	f005 fe8b 	bl	800f34c <SX1276Read>
 8009636:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800963a:	b2c9      	uxtb	r1, r1
 800963c:	200d      	movs	r0, #13
 800963e:	f005 fe79 	bl	800f334 <SX1276Write>
 8009642:	e7d8      	b.n	80095f6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8009644:	4b19      	ldr	r3, [pc, #100]	; (80096ac <SX1276OnTimeoutIrq+0xd0>)
 8009646:	2200      	movs	r2, #0
 8009648:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800964c:	4819      	ldr	r0, [pc, #100]	; (80096b4 <SX1276OnTimeoutIrq+0xd8>)
 800964e:	f7fe fddf 	bl	8008210 <TimerStop>
 8009652:	e7d0      	b.n	80095f6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8009654:	f7fe f9d8 	bl	8007a08 <SX1276Reset>
        RxChainCalibration( );
 8009658:	f7ff f960 	bl	800891c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800965c:	2000      	movs	r0, #0
 800965e:	f005 fe81 	bl	800f364 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8009662:	2400      	movs	r4, #0
 8009664:	e00c      	b.n	8009680 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8009666:	4a14      	ldr	r2, [pc, #80]	; (80096b8 <SX1276OnTimeoutIrq+0xdc>)
 8009668:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800966c:	18d5      	adds	r5, r2, r3
 800966e:	5cd0      	ldrb	r0, [r2, r3]
 8009670:	f7ff fc2e 	bl	8008ed0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8009674:	78a9      	ldrb	r1, [r5, #2]
 8009676:	7868      	ldrb	r0, [r5, #1]
 8009678:	f005 fe5c 	bl	800f334 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800967c:	3401      	adds	r4, #1
 800967e:	b2e4      	uxtb	r4, r4
 8009680:	2c0f      	cmp	r4, #15
 8009682:	d9f0      	bls.n	8009666 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8009684:	2000      	movs	r0, #0
 8009686:	f7ff fc23 	bl	8008ed0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800968a:	4c08      	ldr	r4, [pc, #32]	; (80096ac <SX1276OnTimeoutIrq+0xd0>)
 800968c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8009690:	f7ff ff8e 	bl	80095b0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8009694:	2300      	movs	r3, #0
 8009696:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800969a:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <SX1276OnTimeoutIrq+0xd4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d0a4      	beq.n	80095ec <SX1276OnTimeoutIrq+0x10>
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0a1      	beq.n	80095ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 80096a8:	4798      	blx	r3
}
 80096aa:	e79f      	b.n	80095ec <SX1276OnTimeoutIrq+0x10>
 80096ac:	200011ec 	.word	0x200011ec
 80096b0:	200010b8 	.word	0x200010b8
 80096b4:	200010bc 	.word	0x200010bc
 80096b8:	08011d2c 	.word	0x08011d2c

080096bc <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80096bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	b090      	sub	sp, #64	; 0x40
 80096c2:	460c      	mov	r4, r1
	struct uart_stm32_data *data = dev->data;
 80096c4:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80096c6:	6843      	ldr	r3, [r0, #4]
 80096c8:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80096ca:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 80096cc:	2a01      	cmp	r2, #1
 80096ce:	d015      	beq.n	80096fc <uart_stm32_configure+0x40>
 80096d0:	2a02      	cmp	r2, #2
 80096d2:	d116      	bne.n	8009702 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 80096d4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80096d8:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d017      	beq.n	800970e <uart_stm32_configure+0x52>
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d018      	beq.n	8009714 <uart_stm32_configure+0x58>
 80096e2:	b18b      	cbz	r3, 8009708 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 80096e4:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80096e8:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 80096ea:	2902      	cmp	r1, #2
 80096ec:	d015      	beq.n	800971a <uart_stm32_configure+0x5e>
 80096ee:	2904      	cmp	r1, #4
 80096f0:	d019      	beq.n	8009726 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	f040 8097 	bne.w	8009826 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 80096f8:	2700      	movs	r7, #0
 80096fa:	e016      	b.n	800972a <uart_stm32_configure+0x6e>
	switch (parity) {
 80096fc:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8009700:	e7ea      	b.n	80096d8 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8009702:	f04f 0e00 	mov.w	lr, #0
 8009706:	e7e7      	b.n	80096d8 <uart_stm32_configure+0x1c>
	switch (sb) {
 8009708:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800970c:	e7ec      	b.n	80096e8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 800970e:	f04f 0c00 	mov.w	ip, #0
 8009712:	e7e9      	b.n	80096e8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8009714:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8009718:	e7e6      	b.n	80096e8 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800971a:	b10a      	cbz	r2, 8009720 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 800971c:	2700      	movs	r7, #0
 800971e:	e004      	b.n	800972a <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8009720:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8009724:	e001      	b.n	800972a <uart_stm32_configure+0x6e>
	switch (db) {
 8009726:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800972a:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800972e:	f1ba 0f01 	cmp.w	sl, #1
 8009732:	d07b      	beq.n	800982c <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8009734:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8009738:	f1a2 0903 	sub.w	r9, r2, #3
 800973c:	fa5f f989 	uxtb.w	r9, r9
 8009740:	f1b9 0f01 	cmp.w	r9, #1
 8009744:	f240 80c1 	bls.w	80098ca <uart_stm32_configure+0x20e>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8009748:	b112      	cbz	r2, 8009750 <uart_stm32_configure+0x94>
 800974a:	2904      	cmp	r1, #4
 800974c:	f000 80c0 	beq.w	80098d0 <uart_stm32_configure+0x214>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 80c0 	beq.w	80098d6 <uart_stm32_configure+0x21a>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8009756:	2b02      	cmp	r3, #2
 8009758:	f000 80c0 	beq.w	80098dc <uart_stm32_configure+0x220>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800975c:	2901      	cmp	r1, #1
 800975e:	f240 80c0 	bls.w	80098e2 <uart_stm32_configure+0x226>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8009762:	2904      	cmp	r1, #4
 8009764:	f000 80c0 	beq.w	80098e8 <uart_stm32_configure+0x22c>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8009768:	f1ba 0f00 	cmp.w	sl, #0
 800976c:	d017      	beq.n	800979e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800976e:	4b63      	ldr	r3, [pc, #396]	; (80098fc <uart_stm32_configure+0x240>)
 8009770:	429d      	cmp	r5, r3
 8009772:	d010      	beq.n	8009796 <uart_stm32_configure+0xda>
 8009774:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8009778:	429d      	cmp	r5, r3
 800977a:	d00c      	beq.n	8009796 <uart_stm32_configure+0xda>
 800977c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009780:	429d      	cmp	r5, r3
 8009782:	d008      	beq.n	8009796 <uart_stm32_configure+0xda>
 8009784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009788:	429d      	cmp	r5, r3
 800978a:	d004      	beq.n	8009796 <uart_stm32_configure+0xda>
 800978c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8009790:	429d      	cmp	r5, r3
 8009792:	f040 80ac 	bne.w	80098ee <uart_stm32_configure+0x232>
 8009796:	f1ba 0f01 	cmp.w	sl, #1
 800979a:	f040 80ab 	bne.w	80098f4 <uart_stm32_configure+0x238>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097a6:	6843      	ldr	r3, [r0, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80097aa:	6813      	ldr	r3, [r2, #0]
 80097ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 80097b0:	459e      	cmp	lr, r3
 80097b2:	d005      	beq.n	80097c0 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80097b4:	6813      	ldr	r3, [r2, #0]
 80097b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097ba:	ea4e 0303 	orr.w	r3, lr, r3
 80097be:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097c0:	6843      	ldr	r3, [r0, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80097c4:	6853      	ldr	r3, [r2, #4]
 80097c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80097ca:	459c      	cmp	ip, r3
 80097cc:	d005      	beq.n	80097da <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80097ce:	6853      	ldr	r3, [r2, #4]
 80097d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80097d4:	ea4c 0303 	orr.w	r3, ip, r3
 80097d8:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097da:	6843      	ldr	r3, [r0, #4]
 80097dc:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80097e4:	429f      	cmp	r7, r3
 80097e6:	d004      	beq.n	80097f2 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80097e8:	6813      	ldr	r3, [r2, #0]
 80097ea:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80097ee:	431f      	orrs	r7, r3
 80097f0:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80097f2:	6843      	ldr	r3, [r0, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80097f6:	6893      	ldr	r3, [r2, #8]
 80097f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80097fc:	4598      	cmp	r8, r3
 80097fe:	d005      	beq.n	800980c <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009800:	6893      	ldr	r3, [r2, #8]
 8009802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009806:	ea48 0303 	orr.w	r3, r8, r3
 800980a:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800980c:	f8d4 8000 	ldr.w	r8, [r4]
 8009810:	6833      	ldr	r3, [r6, #0]
 8009812:	4598      	cmp	r8, r3
 8009814:	d10d      	bne.n	8009832 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	f043 0301 	orr.w	r3, r3, #1
 800981c:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800981e:	2000      	movs	r0, #0
};
 8009820:	b010      	add	sp, #64	; 0x40
 8009822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8009826:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800982a:	e77e      	b.n	800972a <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 800982c:	f44f 7840 	mov.w	r8, #768	; 0x300
 8009830:	e782      	b.n	8009738 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = dev->data;
 8009832:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009834:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009838:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 800983c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009840:	4650      	mov	r0, sl
 8009842:	f005 ffa6 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009846:	b1b8      	cbz	r0, 8009878 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8009848:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	b1b3      	cbz	r3, 800987e <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8009850:	466a      	mov	r2, sp
 8009852:	4649      	mov	r1, r9
 8009854:	4650      	mov	r0, sl
 8009856:	4798      	blx	r3
 8009858:	2800      	cmp	r0, #0
 800985a:	db13      	blt.n	8009884 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009862:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009864:	9b00      	ldr	r3, [sp, #0]
 8009866:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800986a:	fbb3 f3f8 	udiv	r3, r3, r8
 800986e:	b29b      	uxth	r3, r3
 8009870:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	6033      	str	r3, [r6, #0]
 8009876:	e7ce      	b.n	8009816 <uart_stm32_configure+0x15a>
		return -ENODEV;
 8009878:	f06f 0012 	mvn.w	r0, #18
 800987c:	e7ec      	b.n	8009858 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 800987e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009882:	e7e9      	b.n	8009858 <uart_stm32_configure+0x19c>
		LOG_ERR("Failed call clock_control_get_rate");
 8009884:	2201      	movs	r2, #1
 8009886:	f8ad 2008 	strh.w	r2, [sp, #8]
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <uart_stm32_configure+0x244>)
 800988c:	930e      	str	r3, [sp, #56]	; 0x38
 800988e:	2300      	movs	r3, #0
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	2102      	movs	r1, #2
 8009894:	f88d 1004 	strb.w	r1, [sp, #4]
 8009898:	9901      	ldr	r1, [sp, #4]
 800989a:	910d      	str	r1, [sp, #52]	; 0x34
 800989c:	4619      	mov	r1, r3
 800989e:	f363 0100 	bfi	r1, r3, #0, #1
 80098a2:	f363 0141 	bfi	r1, r3, #1, #1
 80098a6:	f363 0182 	bfi	r1, r3, #2, #1
 80098aa:	f363 01c5 	bfi	r1, r3, #3, #3
 80098ae:	f362 1188 	bfi	r1, r2, #6, #3
 80098b2:	2208      	movs	r2, #8
 80098b4:	f362 2152 	bfi	r1, r2, #9, #10
 80098b8:	f363 41de 	bfi	r1, r3, #19, #12
 80098bc:	f363 71df 	bfi	r1, r3, #31, #1
 80098c0:	aa0d      	add	r2, sp, #52	; 0x34
 80098c2:	4810      	ldr	r0, [pc, #64]	; (8009904 <uart_stm32_configure+0x248>)
 80098c4:	f004 fda5 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return;
 80098c8:	e7d3      	b.n	8009872 <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 80098ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098ce:	e7a7      	b.n	8009820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80098d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098d4:	e7a4      	b.n	8009820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80098d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098da:	e7a1      	b.n	8009820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80098dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098e0:	e79e      	b.n	8009820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80098e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098e6:	e79b      	b.n	8009820 <uart_stm32_configure+0x164>
 80098e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098ec:	e798      	b.n	8009820 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 80098ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098f2:	e795      	b.n	8009820 <uart_stm32_configure+0x164>
 80098f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80098f8:	e792      	b.n	8009820 <uart_stm32_configure+0x164>
 80098fa:	bf00      	nop
 80098fc:	40013800 	.word	0x40013800
 8009900:	08011870 	.word	0x08011870
 8009904:	08010b08 	.word	0x08010b08

08009908 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	b096      	sub	sp, #88	; 0x58
 800990e:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = dev->config;
 8009910:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = dev->data;
 8009912:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009916:	463e      	mov	r6, r7
 8009918:	f856 4b08 	ldr.w	r4, [r6], #8
	data->clock = clk;
 800991c:	4870      	ldr	r0, [pc, #448]	; (8009ae0 <uart_stm32_init+0x1d8>)
 800991e:	f8c8 0004 	str.w	r0, [r8, #4]
 8009922:	f005 ff36 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009926:	b358      	cbz	r0, 8009980 <uart_stm32_init+0x78>
	const struct clock_control_driver_api *api =
 8009928:	486d      	ldr	r0, [pc, #436]	; (8009ae0 <uart_stm32_init+0x1d8>)
 800992a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4631      	mov	r1, r6
 8009930:	4798      	blx	r3
 8009932:	4606      	mov	r6, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8009934:	2e00      	cmp	r6, #0
 8009936:	f040 80ce 	bne.w	8009ad6 <uart_stm32_init+0x1ce>
	ret = pinctrl_lookup_state(config, id, &state);
 800993a:	aa02      	add	r2, sp, #8
 800993c:	2100      	movs	r1, #0
 800993e:	69f8      	ldr	r0, [r7, #28]
 8009940:	f005 fe39 	bl	800f5b6 <pinctrl_lookup_state>
	if (ret < 0) {
 8009944:	1e03      	subs	r3, r0, #0
 8009946:	db06      	blt.n	8009956 <uart_stm32_init+0x4e>
	return pinctrl_apply_state_direct(config, state);
 8009948:	9b02      	ldr	r3, [sp, #8]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
 800994a:	2200      	movs	r2, #0
 800994c:	7919      	ldrb	r1, [r3, #4]
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	f005 fe4b 	bl	800f5ea <pinctrl_configure_pins>
 8009954:	4603      	mov	r3, r0
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = pinctrl_apply_state(config->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
 8009956:	2b00      	cmp	r3, #0
 8009958:	f2c0 80c0 	blt.w	8009adc <uart_stm32_init+0x1d4>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	f023 0301 	bic.w	r3, r3, #1
 8009962:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	f043 030c 	orr.w	r3, r3, #12
 800996a:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b02      	cmp	r3, #2
 8009970:	d033      	beq.n	80099da <uart_stm32_init+0xd2>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8009972:	2b01      	cmp	r3, #1
 8009974:	f000 8081 	beq.w	8009a7a <uart_stm32_init+0x172>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8009978:	b92b      	cbnz	r3, 8009986 <uart_stm32_init+0x7e>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800997a:	2100      	movs	r1, #0
		ll_parity = LL_USART_PARITY_NONE;
 800997c:	460b      	mov	r3, r1
 800997e:	e030      	b.n	80099e2 <uart_stm32_init+0xda>
		return -ENODEV;
 8009980:	f06f 0612 	mvn.w	r6, #18
 8009984:	e7d6      	b.n	8009934 <uart_stm32_init+0x2c>
			LOG_WRN("Invalid parity setting '%d'."
 8009986:	2201      	movs	r2, #1
 8009988:	f8ad 2008 	strh.w	r2, [sp, #8]
 800998c:	4a55      	ldr	r2, [pc, #340]	; (8009ae4 <uart_stm32_init+0x1dc>)
 800998e:	920e      	str	r2, [sp, #56]	; 0x38
 8009990:	930f      	str	r3, [sp, #60]	; 0x3c
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	f8cd 9004 	str.w	r9, [sp, #4]
 800999a:	2303      	movs	r3, #3
 800999c:	f88d 3004 	strb.w	r3, [sp, #4]
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	930d      	str	r3, [sp, #52]	; 0x34
 80099a4:	4649      	mov	r1, r9
 80099a6:	f369 0100 	bfi	r1, r9, #0, #1
 80099aa:	f369 0141 	bfi	r1, r9, #1, #1
 80099ae:	f369 0182 	bfi	r1, r9, #2, #1
 80099b2:	f369 01c5 	bfi	r1, r9, #3, #3
 80099b6:	2302      	movs	r3, #2
 80099b8:	f363 1188 	bfi	r1, r3, #6, #3
 80099bc:	230c      	movs	r3, #12
 80099be:	f363 2152 	bfi	r1, r3, #9, #10
 80099c2:	f369 41de 	bfi	r1, r9, #19, #12
 80099c6:	f369 71df 	bfi	r1, r9, #31, #1
 80099ca:	464b      	mov	r3, r9
 80099cc:	aa0d      	add	r2, sp, #52	; 0x34
 80099ce:	4846      	ldr	r0, [pc, #280]	; (8009ae8 <uart_stm32_init+0x1e0>)
 80099d0:	f004 fd1f 	bl	800e412 <z_impl_z_log_msg2_static_create>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 80099d4:	4649      	mov	r1, r9
		ll_parity = LL_USART_PARITY_NONE;
 80099d6:	464b      	mov	r3, r9
 80099d8:	e003      	b.n	80099e2 <uart_stm32_init+0xda>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80099da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80099de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80099e8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80099ec:	4319      	orrs	r1, r3
 80099ee:	430a      	orrs	r2, r1
 80099f0:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80099f8:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80099fa:	7c3b      	ldrb	r3, [r7, #16]
 80099fc:	b12b      	cbz	r3, 8009a0a <uart_stm32_init+0x102>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80099fe:	686b      	ldr	r3, [r5, #4]
 8009a00:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009a02:	6893      	ldr	r3, [r2, #8]
 8009a04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a08:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8009a0a:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = dev->data;
 8009a0e:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8009a10:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8009a14:	f859 5b08 	ldr.w	r5, [r9], #8
	if (clock_control_get_rate(data->clock,
 8009a18:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	f005 feb8 	bl	800f792 <z_device_is_ready>
	if (!device_is_ready(dev)) {
 8009a22:	b378      	cbz	r0, 8009a84 <uart_stm32_init+0x17c>
	const struct clock_control_driver_api *api =
 8009a24:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	b373      	cbz	r3, 8009a8a <uart_stm32_init+0x182>
	return api->get_rate(dev, sys, rate);
 8009a2c:	466a      	mov	r2, sp
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4650      	mov	r0, sl
 8009a32:	4798      	blx	r3
 8009a34:	2800      	cmp	r0, #0
 8009a36:	db2b      	blt.n	8009a90 <uart_stm32_init+0x188>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a3e:	602b      	str	r3, [r5, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009a40:	9b00      	ldr	r3, [sp, #0]
 8009a42:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 8009a46:	fbb3 f3f8 	udiv	r3, r3, r8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	60eb      	str	r3, [r5, #12]

	/* Enable the single wire / half-duplex mode */
	if (config->single_wire) {
 8009a4e:	7e3b      	ldrb	r3, [r7, #24]
 8009a50:	b11b      	cbz	r3, 8009a5a <uart_stm32_init+0x152>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8009a52:	68a3      	ldr	r3, [r4, #8]
 8009a54:	f043 0308 	orr.w	r3, r3, #8
 8009a58:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	f043 0301 	orr.w	r3, r3, #1
 8009a60:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8009a62:	69e3      	ldr	r3, [r4, #28]
 8009a64:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8009a68:	d0fb      	beq.n	8009a62 <uart_stm32_init+0x15a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8009a6a:	69e3      	ldr	r3, [r4, #28]
 8009a6c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8009a70:	d0fb      	beq.n	8009a6a <uart_stm32_init+0x162>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8009a72:	4630      	mov	r0, r6
 8009a74:	b016      	add	sp, #88	; 0x58
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8009a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8009a7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009a82:	e7ae      	b.n	80099e2 <uart_stm32_init+0xda>
		return -ENODEV;
 8009a84:	f06f 0012 	mvn.w	r0, #18
 8009a88:	e7d4      	b.n	8009a34 <uart_stm32_init+0x12c>
		return -ENOSYS;
 8009a8a:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8009a8e:	e7d1      	b.n	8009a34 <uart_stm32_init+0x12c>
		LOG_ERR("Failed call clock_control_get_rate");
 8009a90:	2201      	movs	r2, #1
 8009a92:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009a96:	4b15      	ldr	r3, [pc, #84]	; (8009aec <uart_stm32_init+0x1e4>)
 8009a98:	9314      	str	r3, [sp, #80]	; 0x50
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	2102      	movs	r1, #2
 8009aa0:	f88d 1004 	strb.w	r1, [sp, #4]
 8009aa4:	9901      	ldr	r1, [sp, #4]
 8009aa6:	9113      	str	r1, [sp, #76]	; 0x4c
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f363 0100 	bfi	r1, r3, #0, #1
 8009aae:	f363 0141 	bfi	r1, r3, #1, #1
 8009ab2:	f363 0182 	bfi	r1, r3, #2, #1
 8009ab6:	f363 01c5 	bfi	r1, r3, #3, #3
 8009aba:	f362 1188 	bfi	r1, r2, #6, #3
 8009abe:	2208      	movs	r2, #8
 8009ac0:	f362 2152 	bfi	r1, r2, #9, #10
 8009ac4:	f363 41de 	bfi	r1, r3, #19, #12
 8009ac8:	f363 71df 	bfi	r1, r3, #31, #1
 8009acc:	aa13      	add	r2, sp, #76	; 0x4c
 8009ace:	4806      	ldr	r0, [pc, #24]	; (8009ae8 <uart_stm32_init+0x1e0>)
 8009ad0:	f004 fc9f 	bl	800e412 <z_impl_z_log_msg2_static_create>
		return;
 8009ad4:	e7bb      	b.n	8009a4e <uart_stm32_init+0x146>
		return -EIO;
 8009ad6:	f06f 0604 	mvn.w	r6, #4
 8009ada:	e7ca      	b.n	8009a72 <uart_stm32_init+0x16a>
		return err;
 8009adc:	461e      	mov	r6, r3
 8009ade:	e7c8      	b.n	8009a72 <uart_stm32_init+0x16a>
 8009ae0:	080106b8 	.word	0x080106b8
 8009ae4:	08011d5c 	.word	0x08011d5c
 8009ae8:	08010b08 	.word	0x08010b08
 8009aec:	08011870 	.word	0x08011870

08009af0 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8009af0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009af4:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8009af6:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8009af8:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8009afa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009afe:	d101      	bne.n	8009b04 <elapsed+0x14>
	    || (val1 < val2)) {
 8009b00:	4281      	cmp	r1, r0
 8009b02:	d208      	bcs.n	8009b16 <elapsed+0x26>
		overflow_cyc += last_load;
 8009b04:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <elapsed+0x34>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4907      	ldr	r1, [pc, #28]	; (8009b28 <elapsed+0x38>)
 8009b0a:	6809      	ldr	r1, [r1, #0]
 8009b0c:	440a      	add	r2, r1
 8009b0e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8009b10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b14:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8009b16:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <elapsed+0x38>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	1a1b      	subs	r3, r3, r0
 8009b1c:	4a01      	ldr	r2, [pc, #4]	; (8009b24 <elapsed+0x34>)
 8009b1e:	6810      	ldr	r0, [r2, #0]
}
 8009b20:	4418      	add	r0, r3
 8009b22:	4770      	bx	lr
 8009b24:	20001354 	.word	0x20001354
 8009b28:	20001350 	.word	0x20001350

08009b2c <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b2c:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <sys_clock_driver_init+0x28>)
 8009b2e:	2210      	movs	r2, #16
 8009b30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8009b34:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <sys_clock_driver_init+0x2c>)
 8009b3a:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	4b07      	ldr	r3, [pc, #28]	; (8009b5c <sys_clock_driver_init+0x30>)
 8009b40:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8009b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b46:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009b48:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	f042 0207 	orr.w	r2, r2, #7
 8009b50:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8009b52:	4770      	bx	lr
 8009b54:	e000ed00 	.word	0xe000ed00
 8009b58:	20001350 	.word	0x20001350
 8009b5c:	20001354 	.word	0x20001354

08009b60 <sys_clock_isr>:
{
 8009b60:	b508      	push	{r3, lr}
	elapsed();
 8009b62:	f7ff ffc5 	bl	8009af0 <elapsed>
	cycle_count += overflow_cyc;
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <sys_clock_isr+0x38>)
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <sys_clock_isr+0x3c>)
 8009b6c:	6811      	ldr	r1, [r2, #0]
 8009b6e:	4408      	add	r0, r1
 8009b70:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8009b76:	4a0a      	ldr	r2, [pc, #40]	; (8009ba0 <sys_clock_isr+0x40>)
 8009b78:	6813      	ldr	r3, [r2, #0]
 8009b7a:	1ac0      	subs	r0, r0, r3
 8009b7c:	4909      	ldr	r1, [pc, #36]	; (8009ba4 <sys_clock_isr+0x44>)
 8009b7e:	fba1 1000 	umull	r1, r0, r1, r0
 8009b82:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8009b84:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8009b88:	fb01 3300 	mla	r3, r1, r0, r3
 8009b8c:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8009b8e:	f002 f84b 	bl	800bc28 <sys_clock_announce>
	z_arm_int_exit();
 8009b92:	f7fb fa77 	bl	8005084 <z_arm_exc_exit>
}
 8009b96:	bd08      	pop	{r3, pc}
 8009b98:	20001354 	.word	0x20001354
 8009b9c:	2000134c 	.word	0x2000134c
 8009ba0:	20001348 	.word	0x20001348
 8009ba4:	10624dd3 	.word	0x10624dd3

08009ba8 <sys_clock_set_timeout>:
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8009ba8:	b111      	cbz	r1, 8009bb0 <sys_clock_set_timeout+0x8>
 8009baa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009bae:	d03a      	beq.n	8009c26 <sys_clock_set_timeout+0x7e>
{
 8009bb0:	b570      	push	{r4, r5, r6, lr}
	uint32_t last_load_ = last_load;
 8009bb2:	4b38      	ldr	r3, [pc, #224]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009bb4:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009bb6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009bba:	d03f      	beq.n	8009c3c <sys_clock_set_timeout+0x94>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009bbc:	2801      	cmp	r0, #1
 8009bbe:	dd40      	ble.n	8009c42 <sys_clock_set_timeout+0x9a>
 8009bc0:	f5b0 6f03 	cmp.w	r0, #2096	; 0x830
 8009bc4:	dc3f      	bgt.n	8009c46 <sys_clock_set_timeout+0x9e>
 8009bc6:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 8009bc8:	f04f 0310 	mov.w	r3, #16
 8009bcc:	f3ef 8611 	mrs	r6, BASEPRI
 8009bd0:	f383 8812 	msr	BASEPRI_MAX, r3
 8009bd4:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8009bd8:	f7ff ff8a 	bl	8009af0 <elapsed>
	val1 = SysTick->VAL;
 8009bdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009be0:	6999      	ldr	r1, [r3, #24]
	cycle_count += pending;
 8009be2:	4b2d      	ldr	r3, [pc, #180]	; (8009c98 <sys_clock_set_timeout+0xf0>)
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4410      	add	r0, r2
 8009be8:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8009bea:	4b2c      	ldr	r3, [pc, #176]	; (8009c9c <sys_clock_set_timeout+0xf4>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8009bf0:	4b2b      	ldr	r3, [pc, #172]	; (8009ca0 <sys_clock_set_timeout+0xf8>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8009bf4:	1a83      	subs	r3, r0, r2
 8009bf6:	d429      	bmi.n	8009c4c <sys_clock_set_timeout+0xa4>
		delay = ticks * CYC_PER_TICK;
 8009bf8:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40
		delay += unannounced;
 8009bfc:	fb0c 3304 	mla	r3, ip, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8009c00:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8009c04:	331f      	adds	r3, #31
 8009c06:	4c27      	ldr	r4, [pc, #156]	; (8009ca4 <sys_clock_set_timeout+0xfc>)
 8009c08:	fba4 4303 	umull	r4, r3, r4, r3
 8009c0c:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8009c0e:	1a12      	subs	r2, r2, r0
 8009c10:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8009c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c18:	d91d      	bls.n	8009c56 <sys_clock_set_timeout+0xae>
		if (delay > MAX_CYCLES) {
 8009c1a:	4a23      	ldr	r2, [pc, #140]	; (8009ca8 <sys_clock_set_timeout+0x100>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d91c      	bls.n	8009c5a <sys_clock_set_timeout+0xb2>
			last_load = MAX_CYCLES;
 8009c20:	4b1c      	ldr	r3, [pc, #112]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	e01b      	b.n	8009c5e <sys_clock_set_timeout+0xb6>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8009c26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009c2a:	6913      	ldr	r3, [r2, #16]
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8009c32:	4b18      	ldr	r3, [pc, #96]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009c34:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009c38:	601a      	str	r2, [r3, #0]
		return;
 8009c3a:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8009c3c:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8009c40:	e7be      	b.n	8009bc0 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8009c42:	2400      	movs	r4, #0
 8009c44:	e7c0      	b.n	8009bc8 <sys_clock_set_timeout+0x20>
 8009c46:	f44f 6403 	mov.w	r4, #2096	; 0x830
 8009c4a:	e7bd      	b.n	8009bc8 <sys_clock_set_timeout+0x20>
		last_load = MIN_DELAY;
 8009c4c:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e003      	b.n	8009c5e <sys_clock_set_timeout+0xb6>
		delay = MAX(delay, MIN_DELAY);
 8009c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8009c5a:	4a0e      	ldr	r2, [pc, #56]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009c5c:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 8009c5e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c62:	699c      	ldr	r4, [r3, #24]
	SysTick->LOAD = last_load - 1;
 8009c64:	4a0b      	ldr	r2, [pc, #44]	; (8009c94 <sys_clock_set_timeout+0xec>)
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	3a01      	subs	r2, #1
 8009c6a:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	619a      	str	r2, [r3, #24]
	if (val1 < val2) {
 8009c70:	42a1      	cmp	r1, r4
 8009c72:	d209      	bcs.n	8009c88 <sys_clock_set_timeout+0xe0>
		cycle_count += (val1 + (last_load_ - val2));
 8009c74:	1b2d      	subs	r5, r5, r4
 8009c76:	440d      	add	r5, r1
 8009c78:	4428      	add	r0, r5
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <sys_clock_set_timeout+0xf0>)
 8009c7c:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8009c7e:	f386 8811 	msr	BASEPRI, r6
 8009c82:	f3bf 8f6f 	isb	sy
}
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8009c88:	1b0d      	subs	r5, r1, r4
 8009c8a:	4428      	add	r0, r5
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <sys_clock_set_timeout+0xf0>)
 8009c8e:	6018      	str	r0, [r3, #0]
 8009c90:	e7f5      	b.n	8009c7e <sys_clock_set_timeout+0xd6>
 8009c92:	bf00      	nop
 8009c94:	20001350 	.word	0x20001350
 8009c98:	2000134c 	.word	0x2000134c
 8009c9c:	20001354 	.word	0x20001354
 8009ca0:	20001348 	.word	0x20001348
 8009ca4:	10624dd3 	.word	0x10624dd3
 8009ca8:	00ffdc00 	.word	0x00ffdc00

08009cac <sys_clock_elapsed>:
{
 8009cac:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009cae:	f04f 0310 	mov.w	r3, #16
 8009cb2:	f3ef 8411 	mrs	r4, BASEPRI
 8009cb6:	f383 8812 	msr	BASEPRI_MAX, r3
 8009cba:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8009cbe:	f7ff ff17 	bl	8009af0 <elapsed>
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <sys_clock_elapsed+0x34>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4418      	add	r0, r3
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <sys_clock_elapsed+0x38>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8009cce:	f384 8811 	msr	BASEPRI, r4
 8009cd2:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8009cd6:	4b04      	ldr	r3, [pc, #16]	; (8009ce8 <sys_clock_elapsed+0x3c>)
 8009cd8:	fba3 3000 	umull	r3, r0, r3, r0
}
 8009cdc:	0a40      	lsrs	r0, r0, #9
 8009cde:	bd10      	pop	{r4, pc}
 8009ce0:	2000134c 	.word	0x2000134c
 8009ce4:	20001348 	.word	0x20001348
 8009ce8:	10624dd3 	.word	0x10624dd3

08009cec <sys_clock_cycle_get_32>:
{
 8009cec:	b510      	push	{r4, lr}
	__asm__ volatile(
 8009cee:	f04f 0310 	mov.w	r3, #16
 8009cf2:	f3ef 8411 	mrs	r4, BASEPRI
 8009cf6:	f383 8812 	msr	BASEPRI_MAX, r3
 8009cfa:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 8009cfe:	f7ff fef7 	bl	8009af0 <elapsed>
 8009d02:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <sys_clock_cycle_get_32+0x28>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4418      	add	r0, r3
	__asm__ volatile(
 8009d08:	f384 8811 	msr	BASEPRI, r4
 8009d0c:	f3bf 8f6f 	isb	sy
}
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	bf00      	nop
 8009d14:	2000134c 	.word	0x2000134c

08009d18 <stm32_pin_configure>:

static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;

	if (STM32_PORT(pin) >= gpio_ports_cnt) {
 8009d18:	28af      	cmp	r0, #175	; 0xaf
 8009d1a:	d817      	bhi.n	8009d4c <stm32_pin_configure+0x34>
{
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
 8009d22:	4616      	mov	r6, r2
 8009d24:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8009d26:	4a0b      	ldr	r2, [pc, #44]	; (8009d54 <stm32_pin_configure+0x3c>)
 8009d28:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8009d2c:	b15f      	cbz	r7, 8009d46 <stm32_pin_configure+0x2e>
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f005 fd2f 	bl	800f792 <z_device_is_ready>
 8009d34:	b138      	cbz	r0, 8009d46 <stm32_pin_configure+0x2e>
		return -ENODEV;
	}

	return gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8009d36:	4633      	mov	r3, r6
 8009d38:	462a      	mov	r2, r5
 8009d3a:	f004 010f 	and.w	r1, r4, #15
 8009d3e:	4638      	mov	r0, r7
 8009d40:	f004 fe8c 	bl	800ea5c <gpio_stm32_configure>
}
 8009d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
 8009d46:	f06f 0012 	mvn.w	r0, #18
 8009d4a:	e7fb      	b.n	8009d44 <stm32_pin_configure+0x2c>
		return -EINVAL;
 8009d4c:	f06f 0015 	mvn.w	r0, #21
}
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	08011df8 	.word	0x08011df8

08009d58 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009d58:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009d5a:	6a03      	ldr	r3, [r0, #32]
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009d62:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009d64:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009d66:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009d68:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8009d6c:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8009d70:	680c      	ldr	r4, [r1, #0]
 8009d72:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8009d76:	f023 0302 	bic.w	r3, r3, #2
 8009d7a:	690d      	ldr	r5, [r1, #16]
 8009d7c:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	684d      	ldr	r5, [r1, #4]
 8009d84:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d86:	4d13      	ldr	r5, [pc, #76]	; (8009dd4 <OC1Config+0x7c>)
 8009d88:	42a8      	cmp	r0, r5
 8009d8a:	d007      	beq.n	8009d9c <OC1Config+0x44>
 8009d8c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009d90:	42a8      	cmp	r0, r5
 8009d92:	d003      	beq.n	8009d9c <OC1Config+0x44>
 8009d94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009d98:	42a8      	cmp	r0, r5
 8009d9a:	d112      	bne.n	8009dc2 <OC1Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8009d9c:	f023 0308 	bic.w	r3, r3, #8
 8009da0:	694d      	ldr	r5, [r1, #20]
 8009da2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8009da6:	f023 0304 	bic.w	r3, r3, #4
 8009daa:	688d      	ldr	r5, [r1, #8]
 8009dac:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8009db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009db4:	698d      	ldr	r5, [r1, #24]
 8009db6:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dbc:	69cd      	ldr	r5, [r1, #28]
 8009dbe:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009dc2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009dc4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8009dc6:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009dc8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009dca:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009dcc:	2000      	movs	r0, #0
 8009dce:	bc30      	pop	{r4, r5}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	40012c00 	.word	0x40012c00

08009dd8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009dd8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	f023 0310 	bic.w	r3, r3, #16
 8009de0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009de2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009de4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009de6:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009de8:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 8009dec:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 8009df0:	680c      	ldr	r4, [r1, #0]
 8009df2:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009df6:	f023 0320 	bic.w	r3, r3, #32
 8009dfa:	690d      	ldr	r5, [r1, #16]
 8009dfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	684d      	ldr	r5, [r1, #4]
 8009e06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0a:	4d13      	ldr	r5, [pc, #76]	; (8009e58 <OC2Config+0x80>)
 8009e0c:	42a8      	cmp	r0, r5
 8009e0e:	d007      	beq.n	8009e20 <OC2Config+0x48>
 8009e10:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009e14:	42a8      	cmp	r0, r5
 8009e16:	d003      	beq.n	8009e20 <OC2Config+0x48>
 8009e18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009e1c:	42a8      	cmp	r0, r5
 8009e1e:	d113      	bne.n	8009e48 <OC2Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8009e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e24:	694d      	ldr	r5, [r1, #20]
 8009e26:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8009e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e2e:	688d      	ldr	r5, [r1, #8]
 8009e30:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8009e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e38:	698d      	ldr	r5, [r1, #24]
 8009e3a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8009e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e42:	69cd      	ldr	r5, [r1, #28]
 8009e44:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009e48:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009e4a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8009e4c:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009e4e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009e50:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009e52:	2000      	movs	r0, #0
 8009e54:	bc30      	pop	{r4, r5}
 8009e56:	4770      	bx	lr
 8009e58:	40012c00 	.word	0x40012c00

08009e5c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009e5c:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009e5e:	6a03      	ldr	r3, [r0, #32]
 8009e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009e66:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009e68:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009e6a:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009e6c:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
 8009e70:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
 8009e74:	680c      	ldr	r4, [r1, #0]
 8009e76:	ea4c 0404 	orr.w	r4, ip, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e7e:	690d      	ldr	r5, [r1, #16]
 8009e80:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e88:	684d      	ldr	r5, [r1, #4]
 8009e8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8e:	4d13      	ldr	r5, [pc, #76]	; (8009edc <OC3Config+0x80>)
 8009e90:	42a8      	cmp	r0, r5
 8009e92:	d007      	beq.n	8009ea4 <OC3Config+0x48>
 8009e94:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009e98:	42a8      	cmp	r0, r5
 8009e9a:	d003      	beq.n	8009ea4 <OC3Config+0x48>
 8009e9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ea0:	42a8      	cmp	r0, r5
 8009ea2:	d113      	bne.n	8009ecc <OC3Config+0x70>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea8:	694d      	ldr	r5, [r1, #20]
 8009eaa:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eb2:	688d      	ldr	r5, [r1, #8]
 8009eb4:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ebc:	698d      	ldr	r5, [r1, #24]
 8009ebe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ec6:	69cd      	ldr	r5, [r1, #28]
 8009ec8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009ecc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009ece:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009ed0:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009ed2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009ed4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	bc30      	pop	{r4, r5}
 8009eda:	4770      	bx	lr
 8009edc:	40012c00 	.word	0x40012c00

08009ee0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009ee0:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009ee2:	6a03      	ldr	r3, [r0, #32]
 8009ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ee8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009eea:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009eec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009eee:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009ef0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009ef4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009ef8:	680d      	ldr	r5, [r1, #0]
 8009efa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f02:	690d      	ldr	r5, [r1, #16]
 8009f04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f0c:	684d      	ldr	r5, [r1, #4]
 8009f0e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f12:	4d0c      	ldr	r5, [pc, #48]	; (8009f44 <OC4Config+0x64>)
 8009f14:	42a8      	cmp	r0, r5
 8009f16:	d007      	beq.n	8009f28 <OC4Config+0x48>
 8009f18:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8009f1c:	42a8      	cmp	r0, r5
 8009f1e:	d003      	beq.n	8009f28 <OC4Config+0x48>
 8009f20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009f24:	42a8      	cmp	r0, r5
 8009f26:	d104      	bne.n	8009f32 <OC4Config+0x52>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009f28:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8009f2c:	698d      	ldr	r5, [r1, #24]
 8009f2e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009f32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009f34:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009f36:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009f38:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009f3a:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	bc30      	pop	{r4, r5}
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40012c00 	.word	0x40012c00

08009f48 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009f48:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8009f4a:	6a03      	ldr	r3, [r0, #32]
 8009f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009f52:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009f54:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8009f56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f5e:	680c      	ldr	r4, [r1, #0]
 8009f60:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8009f62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f66:	690c      	ldr	r4, [r1, #16]
 8009f68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8009f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f70:	684c      	ldr	r4, [r1, #4]
 8009f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f76:	4c0d      	ldr	r4, [pc, #52]	; (8009fac <OC5Config+0x64>)
 8009f78:	42a0      	cmp	r0, r4
 8009f7a:	d007      	beq.n	8009f8c <OC5Config+0x44>
 8009f7c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009f80:	42a0      	cmp	r0, r4
 8009f82:	d003      	beq.n	8009f8c <OC5Config+0x44>
 8009f84:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009f88:	42a0      	cmp	r0, r4
 8009f8a:	d107      	bne.n	8009f9c <OC5Config+0x54>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8009f8c:	6844      	ldr	r4, [r0, #4]
 8009f8e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8009f92:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8009f96:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
 8009f9a:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8009f9c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8009f9e:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8009fa0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009fa2:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009fa4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	bc10      	pop	{r4}
 8009faa:	4770      	bx	lr
 8009fac:	40012c00 	.word	0x40012c00

08009fb0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009fb0:	b410      	push	{r4}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8009fb2:	6a03      	ldr	r3, [r0, #32]
 8009fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fb8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009fba:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8009fbc:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8009fbe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009fc2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009fc6:	680c      	ldr	r4, [r1, #0]
 8009fc8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8009fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fd0:	690c      	ldr	r4, [r1, #16]
 8009fd2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8009fd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009fda:	684c      	ldr	r4, [r1, #4]
 8009fdc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe0:	4c0c      	ldr	r4, [pc, #48]	; (800a014 <OC6Config+0x64>)
 8009fe2:	42a0      	cmp	r0, r4
 8009fe4:	d007      	beq.n	8009ff6 <OC6Config+0x46>
 8009fe6:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8009fea:	42a0      	cmp	r0, r4
 8009fec:	d003      	beq.n	8009ff6 <OC6Config+0x46>
 8009fee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009ff2:	42a0      	cmp	r0, r4
 8009ff4:	d107      	bne.n	800a006 <OC6Config+0x56>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8009ff6:	6844      	ldr	r4, [r0, #4]
 8009ff8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8009ffc:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800a000:	ea44 248c 	orr.w	r4, r4, ip, lsl #10
 800a004:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800a006:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800a008:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800a00a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800a00c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800a00e:	2000      	movs	r0, #0
 800a010:	bc10      	pop	{r4}
 800a012:	4770      	bx	lr
 800a014:	40012c00 	.word	0x40012c00

0800a018 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a018:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a01a:	4a1e      	ldr	r2, [pc, #120]	; (800a094 <LL_TIM_Init+0x7c>)
 800a01c:	4290      	cmp	r0, r2
 800a01e:	d006      	beq.n	800a02e <LL_TIM_Init+0x16>
 800a020:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a024:	d003      	beq.n	800a02e <LL_TIM_Init+0x16>
 800a026:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a02a:	4290      	cmp	r0, r2
 800a02c:	d103      	bne.n	800a036 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	684a      	ldr	r2, [r1, #4]
 800a034:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a036:	4a17      	ldr	r2, [pc, #92]	; (800a094 <LL_TIM_Init+0x7c>)
 800a038:	4290      	cmp	r0, r2
 800a03a:	d00e      	beq.n	800a05a <LL_TIM_Init+0x42>
 800a03c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a040:	d00b      	beq.n	800a05a <LL_TIM_Init+0x42>
 800a042:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a046:	4290      	cmp	r0, r2
 800a048:	d007      	beq.n	800a05a <LL_TIM_Init+0x42>
 800a04a:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800a04e:	4290      	cmp	r0, r2
 800a050:	d003      	beq.n	800a05a <LL_TIM_Init+0x42>
 800a052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a056:	4290      	cmp	r0, r2
 800a058:	d103      	bne.n	800a062 <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800a05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a05e:	68ca      	ldr	r2, [r1, #12]
 800a060:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800a062:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800a064:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a066:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800a068:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a06a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <LL_TIM_Init+0x7c>)
 800a06e:	4298      	cmp	r0, r3
 800a070:	d007      	beq.n	800a082 <LL_TIM_Init+0x6a>
 800a072:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800a076:	4298      	cmp	r0, r3
 800a078:	d003      	beq.n	800a082 <LL_TIM_Init+0x6a>
 800a07a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a07e:	4298      	cmp	r0, r3
 800a080:	d101      	bne.n	800a086 <LL_TIM_Init+0x6e>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800a082:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a084:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a086:	6943      	ldr	r3, [r0, #20]
 800a088:	f043 0301 	orr.w	r3, r3, #1
 800a08c:	6143      	str	r3, [r0, #20]
}
 800a08e:	2000      	movs	r0, #0
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40012c00 	.word	0x40012c00

0800a098 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800a098:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <UTILS_PLL_IsBusy+0x20>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a0a0:	d007      	beq.n	800a0b2 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 800a0a2:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <UTILS_PLL_IsBusy+0x20>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800a0ac:	d000      	beq.n	800a0b0 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 800a0ae:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 800a0b0:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e7f6      	b.n	800a0a4 <UTILS_PLL_IsBusy+0xc>
 800a0b6:	bf00      	nop
 800a0b8:	40021000 	.word	0x40021000

0800a0bc <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 800a0bc:	4b01      	ldr	r3, [pc, #4]	; (800a0c4 <LL_SetSystemCoreClock+0x8>)
 800a0be:	6018      	str	r0, [r3, #0]
}
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000100 	.word	0x20000100

0800a0c8 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800a0c8:	1e42      	subs	r2, r0, #1
 800a0ca:	4b29      	ldr	r3, [pc, #164]	; (800a170 <LL_SetFlashLatency+0xa8>)
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d84c      	bhi.n	800a16a <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 800a0d0:	4b28      	ldr	r3, [pc, #160]	; (800a174 <LL_SetFlashLatency+0xac>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800a0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0dc:	d011      	beq.n	800a102 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800a0de:	4b26      	ldr	r3, [pc, #152]	; (800a178 <LL_SetFlashLatency+0xb0>)
 800a0e0:	4298      	cmp	r0, r3
 800a0e2:	d829      	bhi.n	800a138 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 800a0e4:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800a0e8:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800a0ec:	4298      	cmp	r0, r3
 800a0ee:	d832      	bhi.n	800a156 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 800a0f0:	4b22      	ldr	r3, [pc, #136]	; (800a17c <LL_SetFlashLatency+0xb4>)
 800a0f2:	4298      	cmp	r0, r3
 800a0f4:	d832      	bhi.n	800a15c <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800a0f6:	4b22      	ldr	r3, [pc, #136]	; (800a180 <LL_SetFlashLatency+0xb8>)
 800a0f8:	4298      	cmp	r0, r3
 800a0fa:	d832      	bhi.n	800a162 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a0fc:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a0fe:	4608      	mov	r0, r1
 800a100:	e01c      	b.n	800a13c <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <LL_SetFlashLatency+0xbc>)
 800a104:	4298      	cmp	r0, r3
 800a106:	d80b      	bhi.n	800a120 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 800a108:	4b1f      	ldr	r3, [pc, #124]	; (800a188 <LL_SetFlashLatency+0xc0>)
 800a10a:	4298      	cmp	r0, r3
 800a10c:	d80b      	bhi.n	800a126 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <LL_SetFlashLatency+0xc4>)
 800a110:	4298      	cmp	r0, r3
 800a112:	d80b      	bhi.n	800a12c <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 800a114:	4b1e      	ldr	r3, [pc, #120]	; (800a190 <LL_SetFlashLatency+0xc8>)
 800a116:	4298      	cmp	r0, r3
 800a118:	d80b      	bhi.n	800a132 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a11a:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 800a11c:	4608      	mov	r0, r1
 800a11e:	e00d      	b.n	800a13c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 800a120:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 800a122:	2000      	movs	r0, #0
 800a124:	e00a      	b.n	800a13c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 800a126:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a128:	2000      	movs	r0, #0
 800a12a:	e007      	b.n	800a13c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a12c:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a12e:	2000      	movs	r0, #0
 800a130:	e004      	b.n	800a13c <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a132:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a134:	2000      	movs	r0, #0
 800a136:	e001      	b.n	800a13c <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800a138:	2100      	movs	r1, #0
        status = ERROR;
 800a13a:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800a13c:	4a15      	ldr	r2, [pc, #84]	; (800a194 <LL_SetFlashLatency+0xcc>)
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	f023 0307 	bic.w	r3, r3, #7
 800a144:	430b      	orrs	r3, r1
 800a146:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800a148:	6813      	ldr	r3, [r2, #0]
 800a14a:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 800a14e:	4299      	cmp	r1, r3
 800a150:	d00a      	beq.n	800a168 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 800a152:	2001      	movs	r0, #1
}
 800a154:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800a156:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 800a158:	2000      	movs	r0, #0
 800a15a:	e7ef      	b.n	800a13c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 800a15c:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 800a15e:	2000      	movs	r0, #0
 800a160:	e7ec      	b.n	800a13c <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 800a162:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 800a164:	2000      	movs	r0, #0
 800a166:	e7e9      	b.n	800a13c <LL_SetFlashLatency+0x74>
 800a168:	4770      	bx	lr
    status = ERROR;
 800a16a:	2001      	movs	r0, #1
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	04c4b3ff 	.word	0x04c4b3ff
 800a174:	40007000 	.word	0x40007000
 800a178:	018cba80 	.word	0x018cba80
 800a17c:	00b71b00 	.word	0x00b71b00
 800a180:	005b8d80 	.word	0x005b8d80
 800a184:	03d09000 	.word	0x03d09000
 800a188:	02dc6c00 	.word	0x02dc6c00
 800a18c:	01e84800 	.word	0x01e84800
 800a190:	00f42400 	.word	0x00f42400
 800a194:	40022000 	.word	0x40022000

0800a198 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800a19c:	680b      	ldr	r3, [r1, #0]
 800a19e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1a2:	4a26      	ldr	r2, [pc, #152]	; (800a23c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 800a1a4:	5cd3      	ldrb	r3, [r2, r3]
 800a1a6:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 800a1aa:	4b25      	ldr	r3, [pc, #148]	; (800a240 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	42ab      	cmp	r3, r5
 800a1b0:	d333      	bcc.n	800a21a <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 800a1b2:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a1b4:	4b23      	ldr	r3, [pc, #140]	; (800a244 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a1bc:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a1c4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800a1c6:	4b1f      	ldr	r3, [pc, #124]	; (800a244 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a1ce:	d0fa      	beq.n	800a1c6 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 800a1d0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a1d4:	6899      	ldr	r1, [r3, #8]
 800a1d6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a1de:	689a      	ldr	r2, [r3, #8]
 800a1e0:	f042 0203 	orr.w	r2, r2, #3
 800a1e4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a1e6:	4b17      	ldr	r3, [pc, #92]	; (800a244 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800a1ee:	2b0c      	cmp	r3, #12
 800a1f0:	d1f9      	bne.n	800a1e6 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 800a1f2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a1f4:	4b13      	ldr	r3, [pc, #76]	; (800a244 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 800a1f6:	6899      	ldr	r1, [r3, #8]
 800a1f8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 800a200:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a202:	6899      	ldr	r1, [r3, #8]
 800a204:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 800a208:	430a      	orrs	r2, r1
 800a20a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800a20c:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	42ab      	cmp	r3, r5
 800a212:	d809      	bhi.n	800a228 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800a214:	b16e      	cbz	r6, 800a232 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 800a216:	4630      	mov	r0, r6
 800a218:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7ff ff54 	bl	800a0c8 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800a220:	4606      	mov	r6, r0
 800a222:	2800      	cmp	r0, #0
 800a224:	d1f2      	bne.n	800a20c <UTILS_EnablePLLAndSwitchSystem+0x74>
 800a226:	e7c5      	b.n	800a1b4 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 800a228:	4628      	mov	r0, r5
 800a22a:	f7ff ff4d 	bl	800a0c8 <LL_SetFlashLatency>
 800a22e:	4606      	mov	r6, r0
 800a230:	e7f0      	b.n	800a214 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 800a232:	4628      	mov	r0, r5
 800a234:	f7ff ff42 	bl	800a0bc <LL_SetSystemCoreClock>
 800a238:	e7ed      	b.n	800a216 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 800a23a:	bf00      	nop
 800a23c:	08011e24 	.word	0x08011e24
 800a240:	20000100 	.word	0x20000100
 800a244:	40021000 	.word	0x40021000

0800a248 <LL_PLL_ConfigSystemClock_HSI>:
{
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800a24e:	f7ff ff23 	bl	800a098 <UTILS_PLL_IsBusy>
 800a252:	bb20      	cbnz	r0, 800a29e <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800a254:	4621      	mov	r1, r4
 800a256:	4813      	ldr	r0, [pc, #76]	; (800a2a4 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800a258:	f005 fa2e 	bl	800f6b8 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a264:	d109      	bne.n	800a27a <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a266:	4a10      	ldr	r2, [pc, #64]	; (800a2a8 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a268:	6813      	ldr	r3, [r2, #0]
 800a26a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a26e:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a278:	d0fa      	beq.n	800a270 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800a27a:	6822      	ldr	r2, [r4, #0]
 800a27c:	6866      	ldr	r6, [r4, #4]
 800a27e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800a280:	4c09      	ldr	r4, [pc, #36]	; (800a2a8 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 800a282:	68e7      	ldr	r7, [r4, #12]
 800a284:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <LL_PLL_ConfigSystemClock_HSI+0x64>)
 800a286:	403b      	ands	r3, r7
 800a288:	f042 0202 	orr.w	r2, r2, #2
 800a28c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 800a290:	430a      	orrs	r2, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800a296:	4629      	mov	r1, r5
 800a298:	f7ff ff7e 	bl	800a198 <UTILS_EnablePLLAndSwitchSystem>
}
 800a29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 800a29e:	2001      	movs	r0, #1
 800a2a0:	e7fc      	b.n	800a29c <LL_PLL_ConfigSystemClock_HSI+0x54>
 800a2a2:	bf00      	nop
 800a2a4:	00f42400 	.word	0x00f42400
 800a2a8:	40021000 	.word	0x40021000
 800a2ac:	f9ff808c 	.word	0xf9ff808c

0800a2b0 <ws2812_strip_update_channels>:
                                        size_t num_channels) {
 800a2b0:	b500      	push	{lr}
 800a2b2:	b091      	sub	sp, #68	; 0x44
    LOG_ERR("update_channels not implemented");
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <ws2812_strip_update_channels+0x54>)
 800a2bc:	930e      	str	r3, [sp, #56]	; 0x38
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	f88d 1004 	strb.w	r1, [sp, #4]
 800a2c8:	9901      	ldr	r1, [sp, #4]
 800a2ca:	910d      	str	r1, [sp, #52]	; 0x34
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f363 0100 	bfi	r1, r3, #0, #1
 800a2d2:	f363 0141 	bfi	r1, r3, #1, #1
 800a2d6:	f363 0182 	bfi	r1, r3, #2, #1
 800a2da:	f363 01c5 	bfi	r1, r3, #3, #3
 800a2de:	f362 1188 	bfi	r1, r2, #6, #3
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	f362 2152 	bfi	r1, r2, #9, #10
 800a2e8:	f363 41de 	bfi	r1, r3, #19, #12
 800a2ec:	f363 71df 	bfi	r1, r3, #31, #1
 800a2f0:	aa0d      	add	r2, sp, #52	; 0x34
 800a2f2:	4805      	ldr	r0, [pc, #20]	; (800a308 <ws2812_strip_update_channels+0x58>)
 800a2f4:	f004 f88d 	bl	800e412 <z_impl_z_log_msg2_static_create>
}
 800a2f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800a2fc:	b011      	add	sp, #68	; 0x44
 800a2fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a302:	bf00      	nop
 800a304:	08011e34 	.word	0x08011e34
 800a308:	08010b10 	.word	0x08010b10

0800a30c <ws2812_pwm_write>:
static int ws2812_pwm_write(const struct device *dev) {
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	b09b      	sub	sp, #108	; 0x6c
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800a312:	6844      	ldr	r4, [r0, #4]
    struct ws2812_pwm_data *ctx = dev->data;
 800a314:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct pwm_stm32_config *pwm_cfg = cfg->pwm.dev->config;
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
    TIM_TypeDef *tim = pwm_cfg->timer;
 800a31c:	681d      	ldr	r5, [r3, #0]
    uint8_t *buf = cfg->px_buf;
 800a31e:	f8d4 9010 	ldr.w	r9, [r4, #16]
    uint32_t channel = ch2ll[cfg->pwm.channel - 1u];
 800a322:	6863      	ldr	r3, [r4, #4]
 800a324:	3b01      	subs	r3, #1
 800a326:	4a6c      	ldr	r2, [pc, #432]	; (800a4d8 <ws2812_pwm_write+0x1cc>)
 800a328:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
    LL_TIM_OC_StructInit(&oc_init);
 800a32c:	a80c      	add	r0, sp, #48	; 0x30
 800a32e:	f005 f98f 	bl	800f650 <LL_TIM_OC_StructInit>
    oc_init.OCMode = LL_TIM_OCMODE_PWM1;
 800a332:	2360      	movs	r3, #96	; 0x60
 800a334:	930c      	str	r3, [sp, #48]	; 0x30
    oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 800a336:	2301      	movs	r3, #1
 800a338:	930d      	str	r3, [sp, #52]	; 0x34
    oc_init.OCPolarity = get_polarity(cfg->pwm.flags);
 800a33a:	7b20      	ldrb	r0, [r4, #12]
 800a33c:	f005 fa15 	bl	800f76a <get_polarity>
 800a340:	9010      	str	r0, [sp, #64]	; 0x40
    if (LL_TIM_OC_Init(tim, channel, &oc_init) != SUCCESS) {
 800a342:	aa0c      	add	r2, sp, #48	; 0x30
 800a344:	4659      	mov	r1, fp
 800a346:	4628      	mov	r0, r5
 800a348:	f005 f98c 	bl	800f664 <LL_TIM_OC_Init>
 800a34c:	bb38      	cbnz	r0, 800a39e <ws2812_pwm_write+0x92>
 800a34e:	4603      	mov	r3, r0
	__asm__ volatile(
 800a350:	f04f 0210 	mov.w	r2, #16
 800a354:	f3ef 8111 	mrs	r1, BASEPRI
 800a358:	f382 8812 	msr	BASEPRI_MAX, r2
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	9101      	str	r1, [sp, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800a362:	682a      	ldr	r2, [r5, #0]
 800a364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a368:	602a      	str	r2, [r5, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a36a:	f1bb 0f01 	cmp.w	fp, #1
 800a36e:	d03e      	beq.n	800a3ee <ws2812_pwm_write+0xe2>
 800a370:	f1bb 0f04 	cmp.w	fp, #4
 800a374:	d03a      	beq.n	800a3ec <ws2812_pwm_write+0xe0>
 800a376:	f1bb 0f10 	cmp.w	fp, #16
 800a37a:	d05a      	beq.n	800a432 <ws2812_pwm_write+0x126>
 800a37c:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800a380:	d059      	beq.n	800a436 <ws2812_pwm_write+0x12a>
 800a382:	f5bb 7f80 	cmp.w	fp, #256	; 0x100
 800a386:	d058      	beq.n	800a43a <ws2812_pwm_write+0x12e>
 800a388:	f5bb 6f80 	cmp.w	fp, #1024	; 0x400
 800a38c:	d057      	beq.n	800a43e <ws2812_pwm_write+0x132>
 800a38e:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
 800a392:	d056      	beq.n	800a442 <ws2812_pwm_write+0x136>
 800a394:	f5bb 3f80 	cmp.w	fp, #65536	; 0x10000
 800a398:	d026      	beq.n	800a3e8 <ws2812_pwm_write+0xdc>
 800a39a:	2308      	movs	r3, #8
 800a39c:	e027      	b.n	800a3ee <ws2812_pwm_write+0xe2>
        LOG_ERR("Could not initialize timer channel output");
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f8ad 2010 	strh.w	r2, [sp, #16]
 800a3a4:	4b4d      	ldr	r3, [pc, #308]	; (800a4dc <ws2812_pwm_write+0x1d0>)
 800a3a6:	9318      	str	r3, [sp, #96]	; 0x60
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9303      	str	r3, [sp, #12]
 800a3ac:	2102      	movs	r1, #2
 800a3ae:	f88d 100c 	strb.w	r1, [sp, #12]
 800a3b2:	9903      	ldr	r1, [sp, #12]
 800a3b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	f363 0100 	bfi	r1, r3, #0, #1
 800a3bc:	f363 0141 	bfi	r1, r3, #1, #1
 800a3c0:	f363 0182 	bfi	r1, r3, #2, #1
 800a3c4:	f363 01c5 	bfi	r1, r3, #3, #3
 800a3c8:	f362 1188 	bfi	r1, r2, #6, #3
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	f362 2152 	bfi	r1, r2, #9, #10
 800a3d2:	f363 41de 	bfi	r1, r3, #19, #12
 800a3d6:	f363 71df 	bfi	r1, r3, #31, #1
 800a3da:	aa17      	add	r2, sp, #92	; 0x5c
 800a3dc:	4840      	ldr	r0, [pc, #256]	; (800a4e0 <ws2812_pwm_write+0x1d4>)
 800a3de:	f004 f818 	bl	800e412 <z_impl_z_log_msg2_static_create>
        return -EIO;
 800a3e2:	f06f 0004 	mvn.w	r0, #4
 800a3e6:	e073      	b.n	800a4d0 <ws2812_pwm_write+0x1c4>
 800a3e8:	2307      	movs	r3, #7
 800a3ea:	e000      	b.n	800a3ee <ws2812_pwm_write+0xe2>
 800a3ec:	2301      	movs	r3, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800a3ee:	f105 0218 	add.w	r2, r5, #24
 800a3f2:	493c      	ldr	r1, [pc, #240]	; (800a4e4 <ws2812_pwm_write+0x1d8>)
 800a3f4:	5cc8      	ldrb	r0, [r1, r3]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a3f6:	5811      	ldr	r1, [r2, r0]
 800a3f8:	4e3b      	ldr	r6, [pc, #236]	; (800a4e8 <ws2812_pwm_write+0x1dc>)
 800a3fa:	5cf6      	ldrb	r6, [r6, r3]
 800a3fc:	2308      	movs	r3, #8
 800a3fe:	40b3      	lsls	r3, r6
 800a400:	430b      	orrs	r3, r1
 800a402:	5013      	str	r3, [r2, r0]
    LL_TIM_SetAutoReload(tim, ctx->pwm_period_cycles - 1u);
 800a404:	f8d8 3000 	ldr.w	r3, [r8]
 800a408:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800a40a:	62eb      	str	r3, [r5, #44]	; 0x2c
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a40c:	696b      	ldr	r3, [r5, #20]
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	616b      	str	r3, [r5, #20]
    generate_timer_event[cfg->pwm.channel](tim);
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	4b35      	ldr	r3, [pc, #212]	; (800a4ec <ws2812_pwm_write+0x1e0>)
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	4628      	mov	r0, r5
 800a41e:	4798      	blx	r3
    clear_timer_flag[cfg->pwm.channel](tim);
 800a420:	6862      	ldr	r2, [r4, #4]
 800a422:	4b33      	ldr	r3, [pc, #204]	; (800a4f0 <ws2812_pwm_write+0x1e4>)
 800a424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a428:	4628      	mov	r0, r5
 800a42a:	4798      	blx	r3
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800a42c:	f04f 0a00 	mov.w	sl, #0
 800a430:	e02d      	b.n	800a48e <ws2812_pwm_write+0x182>
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800a432:	2302      	movs	r3, #2
 800a434:	e7db      	b.n	800a3ee <ws2812_pwm_write+0xe2>
 800a436:	2303      	movs	r3, #3
 800a438:	e7d9      	b.n	800a3ee <ws2812_pwm_write+0xe2>
 800a43a:	2304      	movs	r3, #4
 800a43c:	e7d7      	b.n	800a3ee <ws2812_pwm_write+0xe2>
 800a43e:	2305      	movs	r3, #5
 800a440:	e7d5      	b.n	800a3ee <ws2812_pwm_write+0xe2>
 800a442:	2306      	movs	r3, #6
 800a444:	e7d3      	b.n	800a3ee <ws2812_pwm_write+0xe2>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800a446:	f8d8 1008 	ldr.w	r1, [r8, #8]
            set_timer_compare[cfg->pwm.channel - 1u](tim, value);
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	4a29      	ldr	r2, [pc, #164]	; (800a4f4 <ws2812_pwm_write+0x1e8>)
 800a450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a454:	4628      	mov	r0, r5
 800a456:	4798      	blx	r3
            while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800a458:	6862      	ldr	r2, [r4, #4]
 800a45a:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <ws2812_pwm_write+0x1ec>)
 800a45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a460:	4628      	mov	r0, r5
 800a462:	4798      	blx	r3
 800a464:	2800      	cmp	r0, #0
 800a466:	d0f7      	beq.n	800a458 <ws2812_pwm_write+0x14c>
            clear_timer_flag[cfg->pwm.channel](tim);
 800a468:	6862      	ldr	r2, [r4, #4]
 800a46a:	4b21      	ldr	r3, [pc, #132]	; (800a4f0 <ws2812_pwm_write+0x1e4>)
 800a46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a470:	4628      	mov	r0, r5
 800a472:	4798      	blx	r3
            tmp <<= 1;
 800a474:	0076      	lsls	r6, r6, #1
 800a476:	b2f6      	uxtb	r6, r6
        for(int j = 0; j < 8; j++) {
 800a478:	3701      	adds	r7, #1
 800a47a:	2f07      	cmp	r7, #7
 800a47c:	dc05      	bgt.n	800a48a <ws2812_pwm_write+0x17e>
                (tmp & 0x80) ? ctx->pwm_t1h_cycles : ctx->pwm_t0h_cycles;
 800a47e:	f016 0f80 	tst.w	r6, #128	; 0x80
 800a482:	d1e0      	bne.n	800a446 <ws2812_pwm_write+0x13a>
 800a484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a488:	e7df      	b.n	800a44a <ws2812_pwm_write+0x13e>
    for (size_t i = 0; i < cfg->px_buf_size; i++) {
 800a48a:	f10a 0a01 	add.w	sl, sl, #1
 800a48e:	6963      	ldr	r3, [r4, #20]
 800a490:	459a      	cmp	sl, r3
 800a492:	d203      	bcs.n	800a49c <ws2812_pwm_write+0x190>
        uint8_t tmp = *buf++;
 800a494:	f819 6b01 	ldrb.w	r6, [r9], #1
        for(int j = 0; j < 8; j++) {
 800a498:	2700      	movs	r7, #0
 800a49a:	e7ee      	b.n	800a47a <ws2812_pwm_write+0x16e>
    set_timer_compare[cfg->pwm.channel - 1u](tim, 0);
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	4a14      	ldr	r2, [pc, #80]	; (800a4f4 <ws2812_pwm_write+0x1e8>)
 800a4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	4798      	blx	r3
    while (!is_active_timer_flag[cfg->pwm.channel](tim));
 800a4ac:	6862      	ldr	r2, [r4, #4]
 800a4ae:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <ws2812_pwm_write+0x1ec>)
 800a4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	4798      	blx	r3
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d0f7      	beq.n	800a4ac <ws2812_pwm_write+0x1a0>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a4bc:	6a2b      	ldr	r3, [r5, #32]
 800a4be:	ea23 030b 	bic.w	r3, r3, fp
 800a4c2:	622b      	str	r3, [r5, #32]
	__asm__ volatile(
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
    return 0;
 800a4ce:	2000      	movs	r0, #0
}
 800a4d0:	b01b      	add	sp, #108	; 0x6c
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	bf00      	nop
 800a4d8:	08011ee8 	.word	0x08011ee8
 800a4dc:	08011714 	.word	0x08011714
 800a4e0:	08010b10 	.word	0x08010b10
 800a4e4:	08011ed0 	.word	0x08011ed0
 800a4e8:	08011edc 	.word	0x08011edc
 800a4ec:	08011f18 	.word	0x08011f18
 800a4f0:	08011f00 	.word	0x08011f00
 800a4f4:	08011f48 	.word	0x08011f48
 800a4f8:	08011f30 	.word	0x08011f30

0800a4fc <ws2812_strip_update_rgb>:
                                   size_t num_pixels) {
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const struct ws2812_pwm_cfg *cfg = dev->config;
 800a4fe:	6844      	ldr	r4, [r0, #4]
    uint8_t *px_buf = cfg->px_buf;
 800a500:	6925      	ldr	r5, [r4, #16]
    overflow = size_mul_overflow(num_pixels, cfg->num_colors, &nbytes);
 800a502:	7e23      	ldrb	r3, [r4, #24]
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
 800a504:	2600      	movs	r6, #0
 800a506:	fba2 3703 	umull	r3, r7, r2, r3
 800a50a:	b92f      	cbnz	r7, 800a518 <ws2812_strip_update_rgb+0x1c>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800a50c:	b936      	cbnz	r6, 800a51c <ws2812_strip_update_rgb+0x20>
 800a50e:	6966      	ldr	r6, [r4, #20]
 800a510:	42b3      	cmp	r3, r6
 800a512:	d90b      	bls.n	800a52c <ws2812_strip_update_rgb+0x30>
 800a514:	2300      	movs	r3, #0
 800a516:	e002      	b.n	800a51e <ws2812_strip_update_rgb+0x22>
 800a518:	2601      	movs	r6, #1
 800a51a:	e7f7      	b.n	800a50c <ws2812_strip_update_rgb+0x10>
 800a51c:	2300      	movs	r3, #0
    if (!num_pixels_ok(cfg, num_pixels)) {
 800a51e:	b13b      	cbz	r3, 800a530 <ws2812_strip_update_rgb+0x34>
    for (i = 0; i < num_pixels; i++) {
 800a520:	f04f 0e00 	mov.w	lr, #0
 800a524:	4596      	cmp	lr, r2
 800a526:	d22e      	bcs.n	800a586 <ws2812_strip_update_rgb+0x8a>
        for (j = 0; j < cfg->num_colors; j++) {
 800a528:	2300      	movs	r3, #0
 800a52a:	e009      	b.n	800a540 <ws2812_strip_update_rgb+0x44>
    return !overflow && (nbytes <= cfg->px_buf_size);
 800a52c:	2301      	movs	r3, #1
 800a52e:	e7f6      	b.n	800a51e <ws2812_strip_update_rgb+0x22>
        return -ENOMEM;
 800a530:	f06f 050b 	mvn.w	r5, #11
 800a534:	e02d      	b.n	800a592 <ws2812_strip_update_rgb+0x96>
                    *px_buf = 0;
 800a536:	2600      	movs	r6, #0
 800a538:	702e      	strb	r6, [r5, #0]
            px_buf++;
 800a53a:	3501      	adds	r5, #1
        for (j = 0; j < cfg->num_colors; j++) {
 800a53c:	3301      	adds	r3, #1
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f894 c018 	ldrb.w	ip, [r4, #24]
 800a544:	459c      	cmp	ip, r3
 800a546:	d91a      	bls.n	800a57e <ws2812_strip_update_rgb+0x82>
            switch (cfg->color_mapping[j]) {
 800a548:	69e6      	ldr	r6, [r4, #28]
 800a54a:	f816 c003 	ldrb.w	ip, [r6, r3]
 800a54e:	f1bc 0f03 	cmp.w	ip, #3
 800a552:	d820      	bhi.n	800a596 <ws2812_strip_update_rgb+0x9a>
 800a554:	a601      	add	r6, pc, #4	; (adr r6, 800a55c <ws2812_strip_update_rgb+0x60>)
 800a556:	f856 f02c 	ldr.w	pc, [r6, ip, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a537 	.word	0x0800a537
 800a560:	0800a56d 	.word	0x0800a56d
 800a564:	0800a573 	.word	0x0800a573
 800a568:	0800a579 	.word	0x0800a579
                    *px_buf = pixels->r;
 800a56c:	784e      	ldrb	r6, [r1, #1]
 800a56e:	702e      	strb	r6, [r5, #0]
                    break;
 800a570:	e7e3      	b.n	800a53a <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->g;
 800a572:	788e      	ldrb	r6, [r1, #2]
 800a574:	702e      	strb	r6, [r5, #0]
                    break;
 800a576:	e7e0      	b.n	800a53a <ws2812_strip_update_rgb+0x3e>
                    *px_buf = pixels->b;
 800a578:	78ce      	ldrb	r6, [r1, #3]
 800a57a:	702e      	strb	r6, [r5, #0]
                    break;
 800a57c:	e7dd      	b.n	800a53a <ws2812_strip_update_rgb+0x3e>
        pixels++;
 800a57e:	3104      	adds	r1, #4
    for (i = 0; i < num_pixels; i++) {
 800a580:	f10e 0e01 	add.w	lr, lr, #1
 800a584:	e7ce      	b.n	800a524 <ws2812_strip_update_rgb+0x28>
    rc = ws2812_pwm_write(dev);
 800a586:	f7ff fec1 	bl	800a30c <ws2812_pwm_write>
 800a58a:	4605      	mov	r5, r0
    ws2812_reset_delay(cfg->reset_delay);
 800a58c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
	return z_impl_k_usleep(us);
 800a58e:	f005 fb54 	bl	800fc3a <z_impl_k_usleep>
}
 800a592:	4628      	mov	r0, r5
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            switch (cfg->color_mapping[j]) {
 800a596:	f06f 0515 	mvn.w	r5, #21
 800a59a:	e7fa      	b.n	800a592 <ws2812_strip_update_rgb+0x96>

0800a59c <led_hsv2rgb>:
#include <led_utils/led_utils.h>

void led_hsv2rgb(const struct led_hsv *hsv, struct led_rgb *rgb)
{
 800a59c:	b430      	push	{r4, r5}
    if (!hsv->v)
 800a59e:	78c4      	ldrb	r4, [r0, #3]
 800a5a0:	b92c      	cbnz	r4, 800a5ae <led_hsv2rgb+0x12>
    {
        rgb->r = rgb->g = rgb->b = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	70cb      	strb	r3, [r1, #3]
 800a5a6:	708b      	strb	r3, [r1, #2]
 800a5a8:	704b      	strb	r3, [r1, #1]

            default:
                break;
        }
    }
}
 800a5aa:	bc30      	pop	{r4, r5}
 800a5ac:	4770      	bx	lr
    else if (!hsv->s)
 800a5ae:	7883      	ldrb	r3, [r0, #2]
 800a5b0:	b91b      	cbnz	r3, 800a5ba <led_hsv2rgb+0x1e>
        rgb->r = rgb->g = rgb->b = hsv->v;
 800a5b2:	70cc      	strb	r4, [r1, #3]
 800a5b4:	708c      	strb	r4, [r1, #2]
 800a5b6:	704c      	strb	r4, [r1, #1]
 800a5b8:	e7f7      	b.n	800a5aa <led_hsv2rgb+0xe>
        int hue = hsv->h % 360;
 800a5ba:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a5be:	4831      	ldr	r0, [pc, #196]	; (800a684 <led_hsv2rgb+0xe8>)
 800a5c0:	fb80 5002 	smull	r5, r0, r0, r2
 800a5c4:	4410      	add	r0, r2
 800a5c6:	17d5      	asrs	r5, r2, #31
 800a5c8:	ebc5 2020 	rsb	r0, r5, r0, asr #8
 800a5cc:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800a5d0:	fb05 2210 	mls	r2, r5, r0, r2
 800a5d4:	b212      	sxth	r2, r2
        hue = hue < 0 ? 360 + hue : hue;
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	db2c      	blt.n	800a634 <led_hsv2rgb+0x98>
        int sector = hue / 60;
 800a5da:	482b      	ldr	r0, [pc, #172]	; (800a688 <led_hsv2rgb+0xec>)
 800a5dc:	fb80 5002 	smull	r5, r0, r0, r2
 800a5e0:	4410      	add	r0, r2
 800a5e2:	17d5      	asrs	r5, r2, #31
 800a5e4:	ebc5 1060 	rsb	r0, r5, r0, asr #5
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800a5e8:	f010 0f01 	tst.w	r0, #1
 800a5ec:	d024      	beq.n	800a638 <led_hsv2rgb+0x9c>
 800a5ee:	ebc0 1c00 	rsb	ip, r0, r0, lsl #4
 800a5f2:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800a5f6:	f1cc 0c3c 	rsb	ip, ip, #60	; 0x3c
        int low = (255 - hsv->s) * high / 255;
 800a5fa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a5fe:	fb04 f303 	mul.w	r3, r4, r3
 800a602:	4a22      	ldr	r2, [pc, #136]	; (800a68c <led_hsv2rgb+0xf0>)
 800a604:	fb82 5203 	smull	r5, r2, r2, r3
 800a608:	441a      	add	r2, r3
 800a60a:	17db      	asrs	r3, r3, #31
 800a60c:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
        int middle = low + (high - low) * angle / 60;
 800a610:	1ae2      	subs	r2, r4, r3
 800a612:	fb0c f202 	mul.w	r2, ip, r2
 800a616:	4d1c      	ldr	r5, [pc, #112]	; (800a688 <led_hsv2rgb+0xec>)
 800a618:	fb85 5c02 	smull	r5, ip, r5, r2
 800a61c:	4494      	add	ip, r2
 800a61e:	17d2      	asrs	r2, r2, #31
 800a620:	ebc2 126c 	rsb	r2, r2, ip, asr #5
 800a624:	441a      	add	r2, r3
        switch (sector)
 800a626:	2805      	cmp	r0, #5
 800a628:	d8bf      	bhi.n	800a5aa <led_hsv2rgb+0xe>
 800a62a:	e8df f000 	tbb	[pc, r0]
 800a62e:	1713      	.short	0x1713
 800a630:	27231f1b 	.word	0x27231f1b
        hue = hue < 0 ? 360 + hue : hue;
 800a634:	442a      	add	r2, r5
 800a636:	e7d0      	b.n	800a5da <led_hsv2rgb+0x3e>
        int angle = sector & 1 ? 60 - hue % 60 : hue % 60;
 800a638:	4d13      	ldr	r5, [pc, #76]	; (800a688 <led_hsv2rgb+0xec>)
 800a63a:	fb85 5c02 	smull	r5, ip, r5, r2
 800a63e:	eb0c 0502 	add.w	r5, ip, r2
 800a642:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800a646:	ebcc 1c65 	rsb	ip, ip, r5, asr #5
 800a64a:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 800a64e:	eba2 0c8c 	sub.w	ip, r2, ip, lsl #2
 800a652:	e7d2      	b.n	800a5fa <led_hsv2rgb+0x5e>
                rgb->r = high;
 800a654:	704c      	strb	r4, [r1, #1]
                rgb->g = middle;
 800a656:	708a      	strb	r2, [r1, #2]
                rgb->b = low;
 800a658:	70cb      	strb	r3, [r1, #3]
                break;
 800a65a:	e7a6      	b.n	800a5aa <led_hsv2rgb+0xe>
                rgb->r = middle;
 800a65c:	704a      	strb	r2, [r1, #1]
                rgb->g = high;
 800a65e:	708c      	strb	r4, [r1, #2]
                rgb->b = low;
 800a660:	70cb      	strb	r3, [r1, #3]
                break;
 800a662:	e7a2      	b.n	800a5aa <led_hsv2rgb+0xe>
                rgb->r = low;
 800a664:	704b      	strb	r3, [r1, #1]
                rgb->g = high;
 800a666:	708c      	strb	r4, [r1, #2]
                rgb->b = middle;
 800a668:	70ca      	strb	r2, [r1, #3]
                break;
 800a66a:	e79e      	b.n	800a5aa <led_hsv2rgb+0xe>
                rgb->r = low;
 800a66c:	704b      	strb	r3, [r1, #1]
                rgb->g = middle;
 800a66e:	708a      	strb	r2, [r1, #2]
                rgb->b = high;
 800a670:	70cc      	strb	r4, [r1, #3]
                break;
 800a672:	e79a      	b.n	800a5aa <led_hsv2rgb+0xe>
                rgb->r = middle;
 800a674:	704a      	strb	r2, [r1, #1]
                rgb->g = low;
 800a676:	708b      	strb	r3, [r1, #2]
                rgb->b = high;
 800a678:	70cc      	strb	r4, [r1, #3]
                break;
 800a67a:	e796      	b.n	800a5aa <led_hsv2rgb+0xe>
                rgb->r = high;
 800a67c:	704c      	strb	r4, [r1, #1]
                rgb->g = low;
 800a67e:	708b      	strb	r3, [r1, #2]
                rgb->b = middle;
 800a680:	70ca      	strb	r2, [r1, #3]
}
 800a682:	e792      	b.n	800a5aa <led_hsv2rgb+0xe>
 800a684:	b60b60b7 	.word	0xb60b60b7
 800a688:	88888889 	.word	0x88888889
 800a68c:	80808081 	.word	0x80808081

0800a690 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 800a690:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 800a692:	e000      	b.n	800a696 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 800a694:	3318      	adds	r3, #24
	while (dev < __device_end) {
 800a696:	4a03      	ldr	r2, [pc, #12]	; (800a6a4 <z_device_state_init+0x14>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d3fb      	bcc.n	800a694 <z_device_state_init+0x4>
	}
}
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	080106b8 	.word	0x080106b8
 800a6a4:	080107f0 	.word	0x080107f0

0800a6a8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800a6ac:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <z_sys_init_run_level+0x4c>)
 800a6ae:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800a6b2:	e009      	b.n	800a6c8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 800a6b4:	4240      	negs	r0, r0
 800a6b6:	e017      	b.n	800a6e8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 800a6b8:	68eb      	ldr	r3, [r5, #12]
 800a6ba:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 800a6bc:	68ea      	ldr	r2, [r5, #12]
 800a6be:	7853      	ldrb	r3, [r2, #1]
 800a6c0:	f043 0301 	orr.w	r3, r3, #1
 800a6c4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 800a6c6:	3408      	adds	r4, #8
 800a6c8:	1c73      	adds	r3, r6, #1
 800a6ca:	4a0a      	ldr	r2, [pc, #40]	; (800a6f4 <z_sys_init_run_level+0x4c>)
 800a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d90d      	bls.n	800a6f0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 800a6d4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	4628      	mov	r0, r5
 800a6da:	4798      	blx	r3
		if (dev != NULL) {
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	d0f2      	beq.n	800a6c6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d0eb      	beq.n	800a6bc <z_sys_init_run_level+0x14>
				if (rc < 0) {
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	dbe5      	blt.n	800a6b4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 800a6e8:	28ff      	cmp	r0, #255	; 0xff
 800a6ea:	dde5      	ble.n	800a6b8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 800a6ec:	20ff      	movs	r0, #255	; 0xff
 800a6ee:	e7e3      	b.n	800a6b8 <z_sys_init_run_level+0x10>
		}
	}
}
 800a6f0:	bd70      	pop	{r4, r5, r6, pc}
 800a6f2:	bf00      	nop
 800a6f4:	08011f94 	.word	0x08011f94

0800a6f8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 800a6f8:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	b328      	cbz	r0, 800a74a <z_impl_device_get_binding+0x52>
 800a6fe:	7803      	ldrb	r3, [r0, #0]
 800a700:	b32b      	cbz	r3, 800a74e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 800a702:	4c14      	ldr	r4, [pc, #80]	; (800a754 <z_impl_device_get_binding+0x5c>)
 800a704:	e000      	b.n	800a708 <z_impl_device_get_binding+0x10>
 800a706:	3418      	adds	r4, #24
 800a708:	4b13      	ldr	r3, [pc, #76]	; (800a758 <z_impl_device_get_binding+0x60>)
 800a70a:	429c      	cmp	r4, r3
 800a70c:	d008      	beq.n	800a720 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
 800a70e:	4620      	mov	r0, r4
 800a710:	f005 f83f 	bl	800f792 <z_device_is_ready>
 800a714:	2800      	cmp	r0, #0
 800a716:	d0f6      	beq.n	800a706 <z_impl_device_get_binding+0xe>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	42ab      	cmp	r3, r5
 800a71c:	d1f3      	bne.n	800a706 <z_impl_device_get_binding+0xe>
 800a71e:	e012      	b.n	800a746 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 800a720:	4c0c      	ldr	r4, [pc, #48]	; (800a754 <z_impl_device_get_binding+0x5c>)
 800a722:	e000      	b.n	800a726 <z_impl_device_get_binding+0x2e>
 800a724:	3418      	adds	r4, #24
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <z_impl_device_get_binding+0x60>)
 800a728:	429c      	cmp	r4, r3
 800a72a:	d00b      	beq.n	800a744 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800a72c:	4620      	mov	r0, r4
 800a72e:	f005 f830 	bl	800f792 <z_device_is_ready>
 800a732:	2800      	cmp	r0, #0
 800a734:	d0f6      	beq.n	800a724 <z_impl_device_get_binding+0x2c>
 800a736:	6821      	ldr	r1, [r4, #0]
 800a738:	4628      	mov	r0, r5
 800a73a:	f7f6 fb82 	bl	8000e42 <strcmp>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1f0      	bne.n	800a724 <z_impl_device_get_binding+0x2c>
 800a742:	e000      	b.n	800a746 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 800a744:	2400      	movs	r4, #0
}
 800a746:	4620      	mov	r0, r4
 800a748:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 800a74a:	4604      	mov	r4, r0
 800a74c:	e7fb      	b.n	800a746 <z_impl_device_get_binding+0x4e>
 800a74e:	2400      	movs	r4, #0
 800a750:	e7f9      	b.n	800a746 <z_impl_device_get_binding+0x4e>
 800a752:	bf00      	nop
 800a754:	080106b8 	.word	0x080106b8
 800a758:	080107f0 	.word	0x080107f0

0800a75c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 800a75c:	2804      	cmp	r0, #4
 800a75e:	d80c      	bhi.n	800a77a <reason_to_str+0x1e>
 800a760:	e8df f000 	tbb	[pc, r0]
 800a764:	07050d03 	.word	0x07050d03
 800a768:	09          	.byte	0x09
 800a769:	00          	.byte	0x00
 800a76a:	4806      	ldr	r0, [pc, #24]	; (800a784 <reason_to_str+0x28>)
 800a76c:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 800a76e:	4806      	ldr	r0, [pc, #24]	; (800a788 <reason_to_str+0x2c>)
 800a770:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 800a772:	4806      	ldr	r0, [pc, #24]	; (800a78c <reason_to_str+0x30>)
 800a774:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 800a776:	4806      	ldr	r0, [pc, #24]	; (800a790 <reason_to_str+0x34>)
 800a778:	4770      	bx	lr
	default:
		return "Unknown error";
 800a77a:	4806      	ldr	r0, [pc, #24]	; (800a794 <reason_to_str+0x38>)
 800a77c:	4770      	bx	lr
		return "Unhandled interrupt";
 800a77e:	4806      	ldr	r0, [pc, #24]	; (800a798 <reason_to_str+0x3c>)
	}
}
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	08011ffc 	.word	0x08011ffc
 800a788:	08011fd0 	.word	0x08011fd0
 800a78c:	08011fe0 	.word	0x08011fe0
 800a790:	08011fec 	.word	0x08011fec
 800a794:	08011fac 	.word	0x08011fac
 800a798:	08011fbc 	.word	0x08011fbc

0800a79c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800a79c:	b130      	cbz	r0, 800a7ac <thread_name_get+0x10>
{
 800a79e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 800a7a0:	f005 f849 	bl	800f836 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 800a7a4:	b120      	cbz	r0, 800a7b0 <thread_name_get+0x14>
 800a7a6:	7803      	ldrb	r3, [r0, #0]
 800a7a8:	b123      	cbz	r3, 800a7b4 <thread_name_get+0x18>
}
 800a7aa:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 800a7ac:	4802      	ldr	r0, [pc, #8]	; (800a7b8 <thread_name_get+0x1c>)
}
 800a7ae:	4770      	bx	lr
		thread_name = "unknown";
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <thread_name_get+0x1c>)
 800a7b2:	e7fa      	b.n	800a7aa <thread_name_get+0xe>
 800a7b4:	4800      	ldr	r0, [pc, #0]	; (800a7b8 <thread_name_get+0x1c>)
	return thread_name;
 800a7b6:	e7f8      	b.n	800a7aa <thread_name_get+0xe>
 800a7b8:	0801200c 	.word	0x0801200c

0800a7bc <k_sys_fatal_error_handler>:
{
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	b090      	sub	sp, #64	; 0x40
 800a7c0:	4604      	mov	r4, r0
	z_impl_log_panic();
 800a7c2:	f7f9 ffa1 	bl	8004708 <z_impl_log_panic>
	LOG_ERR("Halting system");
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f8ad 2008 	strh.w	r2, [sp, #8]
 800a7cc:	4b10      	ldr	r3, [pc, #64]	; (800a810 <k_sys_fatal_error_handler+0x54>)
 800a7ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	f88d 1004 	strb.w	r1, [sp, #4]
 800a7da:	9901      	ldr	r1, [sp, #4]
 800a7dc:	910d      	str	r1, [sp, #52]	; 0x34
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f363 0100 	bfi	r1, r3, #0, #1
 800a7e4:	f363 0141 	bfi	r1, r3, #1, #1
 800a7e8:	f363 0182 	bfi	r1, r3, #2, #1
 800a7ec:	f363 01c5 	bfi	r1, r3, #3, #3
 800a7f0:	f362 1188 	bfi	r1, r2, #6, #3
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	f362 2152 	bfi	r1, r2, #9, #10
 800a7fa:	f363 41de 	bfi	r1, r3, #19, #12
 800a7fe:	f363 71df 	bfi	r1, r3, #31, #1
 800a802:	aa0d      	add	r2, sp, #52	; 0x34
 800a804:	4803      	ldr	r0, [pc, #12]	; (800a814 <k_sys_fatal_error_handler+0x58>)
 800a806:	f003 fe04 	bl	800e412 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
 800a80a:	4620      	mov	r0, r4
 800a80c:	f004 ffdb 	bl	800f7c6 <arch_system_halt>
 800a810:	08012014 	.word	0x08012014
 800a814:	08010ad0 	.word	0x08010ad0

0800a818 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800a818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a81a:	b097      	sub	sp, #92	; 0x5c
 800a81c:	4605      	mov	r5, r0
 800a81e:	460e      	mov	r6, r1
	__asm__ volatile(
 800a820:	f04f 0310 	mov.w	r3, #16
 800a824:	f3ef 8711 	mrs	r7, BASEPRI
 800a828:	f383 8812 	msr	BASEPRI_MAX, r3
 800a82c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 800a830:	f001 f8ba 	bl	800b9a8 <z_impl_z_current_get>
 800a834:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 800a836:	4628      	mov	r0, r5
 800a838:	f7ff ff90 	bl	800a75c <reason_to_str>
 800a83c:	2300      	movs	r3, #0
 800a83e:	9304      	str	r3, [sp, #16]
 800a840:	9003      	str	r0, [sp, #12]
 800a842:	9502      	str	r5, [sp, #8]
 800a844:	4a25      	ldr	r2, [pc, #148]	; (800a8dc <z_fatal_error+0xc4>)
 800a846:	9201      	str	r2, [sp, #4]
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	2201      	movs	r2, #1
 800a84c:	4924      	ldr	r1, [pc, #144]	; (800a8e0 <z_fatal_error+0xc8>)
 800a84e:	4618      	mov	r0, r3
 800a850:	f004 ffac 	bl	800f7ac <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 800a854:	b11e      	cbz	r6, 800a85e <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800a856:	69f3      	ldr	r3, [r6, #28]
 800a858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85c:	b9d3      	cbnz	r3, 800a894 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800a85e:	4620      	mov	r0, r4
 800a860:	f7ff ff9c 	bl	800a79c <thread_name_get>
 800a864:	9003      	str	r0, [sp, #12]
 800a866:	9402      	str	r4, [sp, #8]
 800a868:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <z_fatal_error+0xcc>)
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	2000      	movs	r0, #0
 800a86e:	9000      	str	r0, [sp, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	2201      	movs	r2, #1
 800a874:	491a      	ldr	r1, [pc, #104]	; (800a8e0 <z_fatal_error+0xc8>)
 800a876:	f004 ff99 	bl	800f7ac <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800a87a:	4631      	mov	r1, r6
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7ff ff9d 	bl	800a7bc <k_sys_fatal_error_handler>
	__asm__ volatile(
 800a882:	f387 8811 	msr	BASEPRI, r7
 800a886:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800a88a:	4620      	mov	r0, r4
 800a88c:	f7fb fa0e 	bl	8005cac <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 800a890:	b017      	add	sp, #92	; 0x5c
 800a892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 800a894:	2201      	movs	r2, #1
 800a896:	f8ad 2020 	strh.w	r2, [sp, #32]
 800a89a:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <z_fatal_error+0xd0>)
 800a89c:	9314      	str	r3, [sp, #80]	; 0x50
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	2102      	movs	r1, #2
 800a8a4:	f88d 101c 	strb.w	r1, [sp, #28]
 800a8a8:	9907      	ldr	r1, [sp, #28]
 800a8aa:	9113      	str	r1, [sp, #76]	; 0x4c
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f363 0100 	bfi	r1, r3, #0, #1
 800a8b2:	f363 0141 	bfi	r1, r3, #1, #1
 800a8b6:	f363 0182 	bfi	r1, r3, #2, #1
 800a8ba:	f363 01c5 	bfi	r1, r3, #3, #3
 800a8be:	f362 1188 	bfi	r1, r2, #6, #3
 800a8c2:	2208      	movs	r2, #8
 800a8c4:	f362 2152 	bfi	r1, r2, #9, #10
 800a8c8:	f363 41de 	bfi	r1, r3, #19, #12
 800a8cc:	f363 71df 	bfi	r1, r3, #31, #1
 800a8d0:	aa13      	add	r2, sp, #76	; 0x4c
 800a8d2:	4803      	ldr	r0, [pc, #12]	; (800a8e0 <z_fatal_error+0xc8>)
 800a8d4:	f003 fd9d 	bl	800e412 <z_impl_z_log_msg2_static_create>
 800a8d8:	e7c1      	b.n	800a85e <z_fatal_error+0x46>
 800a8da:	bf00      	nop
 800a8dc:	08012024 	.word	0x08012024
 800a8e0:	08010ad0 	.word	0x08010ad0
 800a8e4:	08012070 	.word	0x08012070
 800a8e8:	0801204c 	.word	0x0801204c

0800a8ec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 800a8f0:	4c10      	ldr	r4, [pc, #64]	; (800a934 <init_idle_thread+0x48>)
 800a8f2:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 800a8f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <init_idle_thread+0x4c>)
 800a8fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 800a900:	2200      	movs	r2, #0
 800a902:	9205      	str	r2, [sp, #20]
 800a904:	2101      	movs	r1, #1
 800a906:	9104      	str	r1, [sp, #16]
 800a908:	210f      	movs	r1, #15
 800a90a:	9103      	str	r1, [sp, #12]
 800a90c:	9202      	str	r2, [sp, #8]
 800a90e:	9201      	str	r2, [sp, #4]
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	4b0a      	ldr	r3, [pc, #40]	; (800a93c <init_idle_thread+0x50>)
 800a914:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a918:	4909      	ldr	r1, [pc, #36]	; (800a940 <init_idle_thread+0x54>)
 800a91a:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 800a91e:	fb0c 1100 	mla	r1, ip, r0, r1
 800a922:	4620      	mov	r0, r4
 800a924:	f000 f8ee 	bl	800ab04 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800a928:	7b63      	ldrb	r3, [r4, #13]
 800a92a:	f023 0304 	bic.w	r3, r3, #4
 800a92e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 800a930:	b006      	add	sp, #24
 800a932:	bd10      	pop	{r4, pc}
 800a934:	20000bb0 	.word	0x20000bb0
 800a938:	20001394 	.word	0x20001394
 800a93c:	0800f89d 	.word	0x0800f89d
 800a940:	200033a0 	.word	0x200033a0

0800a944 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 800a948:	f000 ff7a 	bl	800b840 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 800a94c:	4d1b      	ldr	r5, [pc, #108]	; (800a9bc <prepare_multithreading+0x78>)
 800a94e:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <prepare_multithreading+0x7c>)
 800a950:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800a952:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <prepare_multithreading+0x80>)
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	2301      	movs	r3, #1
 800a958:	9304      	str	r3, [sp, #16]
 800a95a:	2400      	movs	r4, #0
 800a95c:	9403      	str	r4, [sp, #12]
 800a95e:	9402      	str	r4, [sp, #8]
 800a960:	9401      	str	r4, [sp, #4]
 800a962:	9400      	str	r4, [sp, #0]
 800a964:	4b18      	ldr	r3, [pc, #96]	; (800a9c8 <prepare_multithreading+0x84>)
 800a966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a96a:	4918      	ldr	r1, [pc, #96]	; (800a9cc <prepare_multithreading+0x88>)
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 f8c9 	bl	800ab04 <z_setup_new_thread>
 800a972:	4606      	mov	r6, r0
 800a974:	7b6b      	ldrb	r3, [r5, #13]
 800a976:	f023 0304 	bic.w	r3, r3, #4
 800a97a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 800a97c:	4628      	mov	r0, r5
 800a97e:	f005 f866 	bl	800fa4e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800a982:	2c00      	cmp	r4, #0
 800a984:	dd02      	ble.n	800a98c <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 800a986:	4630      	mov	r0, r6
 800a988:	b006      	add	sp, #24
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7ff ffad 	bl	800a8ec <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800a992:	4a0f      	ldr	r2, [pc, #60]	; (800a9d0 <prepare_multithreading+0x8c>)
 800a994:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800a998:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a99c:	4b08      	ldr	r3, [pc, #32]	; (800a9c0 <prepare_multithreading+0x7c>)
 800a99e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a9a2:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800a9a4:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800a9a6:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 800a9aa:	4a0a      	ldr	r2, [pc, #40]	; (800a9d4 <prepare_multithreading+0x90>)
 800a9ac:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800a9b0:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 800a9b4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800a9b6:	3401      	adds	r4, #1
 800a9b8:	e7e3      	b.n	800a982 <prepare_multithreading+0x3e>
 800a9ba:	bf00      	nop
 800a9bc:	20000c30 	.word	0x20000c30
 800a9c0:	20001394 	.word	0x20001394
 800a9c4:	08012088 	.word	0x08012088
 800a9c8:	0800a9d9 	.word	0x0800a9d9
 800a9cc:	20002380 	.word	0x20002380
 800a9d0:	20000bb0 	.word	0x20000bb0
 800a9d4:	20003500 	.word	0x20003500

0800a9d8 <bg_thread_main>:
{
 800a9d8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <bg_thread_main+0x30>)
 800a9dc:	2201      	movs	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800a9e0:	2002      	movs	r0, #2
 800a9e2:	f7ff fe61 	bl	800a6a8 <z_sys_init_run_level>
	boot_banner();
 800a9e6:	f001 fd2b 	bl	800c440 <boot_banner>
	z_cpp_init_static();
 800a9ea:	f003 fd79 	bl	800e4e0 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 800a9ee:	2003      	movs	r0, #3
 800a9f0:	f7ff fe5a 	bl	800a6a8 <z_sys_init_run_level>
	z_init_static_threads();
 800a9f4:	f000 f8b6 	bl	800ab64 <z_init_static_threads>
	main();
 800a9f8:	f005 fab9 	bl	800ff6e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 800a9fc:	4a03      	ldr	r2, [pc, #12]	; (800aa0c <bg_thread_main+0x34>)
 800a9fe:	7b13      	ldrb	r3, [r2, #12]
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 800aa06:	bd08      	pop	{r3, pc}
 800aa08:	200013f4 	.word	0x200013f4
 800aa0c:	20000c30 	.word	0x20000c30

0800aa10 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 800aa10:	b508      	push	{r3, lr}
 800aa12:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800aa14:	4a01      	ldr	r2, [pc, #4]	; (800aa1c <switch_to_main_thread+0xc>)
 800aa16:	4802      	ldr	r0, [pc, #8]	; (800aa20 <switch_to_main_thread+0x10>)
 800aa18:	f7fa fb0a 	bl	8005030 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800aa1c:	0800a9d9 	.word	0x0800a9d9
 800aa20:	20000c30 	.word	0x20000c30

0800aa24 <z_bss_zero>:
{
 800aa24:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800aa26:	4803      	ldr	r0, [pc, #12]	; (800aa34 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 800aa28:	4a03      	ldr	r2, [pc, #12]	; (800aa38 <z_bss_zero+0x14>)
 800aa2a:	1a12      	subs	r2, r2, r0
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	f005 fab6 	bl	800ff9e <memset>
}
 800aa32:	bd08      	pop	{r3, pc}
 800aa34:	20000540 	.word	0x20000540
 800aa38:	200013f8 	.word	0x200013f8

0800aa3c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 800aa3c:	b500      	push	{lr}
 800aa3e:	b0a1      	sub	sp, #132	; 0x84
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800aa40:	4b1d      	ldr	r3, [pc, #116]	; (800aab8 <z_cstart+0x7c>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800aa42:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800aa46:	4c1d      	ldr	r4, [pc, #116]	; (800aabc <z_cstart+0x80>)
 800aa48:	6963      	ldr	r3, [r4, #20]
 800aa4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	23f0      	movs	r3, #240	; 0xf0
 800aa52:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800aa56:	2500      	movs	r5, #0
 800aa58:	77e5      	strb	r5, [r4, #31]
 800aa5a:	7625      	strb	r5, [r4, #24]
 800aa5c:	7665      	strb	r5, [r4, #25]
 800aa5e:	76a5      	strb	r5, [r4, #26]
 800aa60:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800aa64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa66:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800aa6a:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800aa6c:	f7fb f8dc 	bl	8005c28 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800aa70:	f7fa f8f6 	bl	8004c60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800aa74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa78:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 800aa7a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 800aa7c:	f7fb fa20 	bl	8005ec0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800aa80:	f7fb f92a 	bl	8005cd8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 800aa84:	f7f9 fd5c 	bl	8004540 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 800aa88:	2401      	movs	r4, #1
 800aa8a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 800aa8e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800aa92:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800aa94:	951b      	str	r5, [sp, #108]	; 0x6c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 800aa96:	951d      	str	r5, [sp, #116]	; 0x74
#endif

	_current_cpu->current = dummy_thread;
 800aa98:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <z_cstart+0x84>)
 800aa9a:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 800aa9e:	f7ff fdf7 	bl	800a690 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7ff fe00 	bl	800a6a8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff fdfd 	bl	800a6a8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 800aaae:	f7ff ff49 	bl	800a944 <prepare_multithreading>
 800aab2:	f7ff ffad 	bl	800aa10 <switch_to_main_thread>
 800aab6:	bf00      	nop
 800aab8:	20003d20 	.word	0x20003d20
 800aabc:	e000ed00 	.word	0xe000ed00
 800aac0:	20001394 	.word	0x20001394

0800aac4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 800aac4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800aac6:	4c06      	ldr	r4, [pc, #24]	; (800aae0 <init_mem_slab_module+0x1c>)
	int rc = 0;
 800aac8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 800aaca:	e000      	b.n	800aace <init_mem_slab_module+0xa>
 800aacc:	3420      	adds	r4, #32
 800aace:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <init_mem_slab_module+0x20>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d204      	bcs.n	800aade <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 800aad4:	4620      	mov	r0, r4
 800aad6:	f004 fe7f 	bl	800f7d8 <create_free_list>
		if (rc < 0) {
 800aada:	2800      	cmp	r0, #0
 800aadc:	daf6      	bge.n	800aacc <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	200003e8 	.word	0x200003e8
 800aae4:	200003e8 	.word	0x200003e8

0800aae8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 800aae8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800aaea:	ea53 0102 	orrs.w	r1, r3, r2
 800aaee:	d102      	bne.n	800aaf6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800aaf0:	f004 fea3 	bl	800f83a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 800aaf4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800aaf6:	4902      	ldr	r1, [pc, #8]	; (800ab00 <schedule_new_thread+0x18>)
 800aaf8:	3018      	adds	r0, #24
 800aafa:	f001 f809 	bl	800bb10 <z_add_timeout>
 800aafe:	e7f9      	b.n	800aaf4 <schedule_new_thread+0xc>
 800ab00:	0800fa87 	.word	0x0800fa87

0800ab04 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab06:	b085      	sub	sp, #20
 800ab08:	4604      	mov	r4, r0
 800ab0a:	460e      	mov	r6, r1
 800ab0c:	4615      	mov	r5, r2
 800ab0e:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800ab10:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 800ab14:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 800ab16:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 800ab18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab1a:	2204      	movs	r2, #4
 800ab1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab1e:	f004 fe90 	bl	800f842 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800ab22:	462a      	mov	r2, r5
 800ab24:	4631      	mov	r1, r6
 800ab26:	4620      	mov	r0, r4
 800ab28:	f004 fe6d 	bl	800f806 <setup_thread_stack>
 800ab2c:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800ab2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab30:	9302      	str	r3, [sp, #8]
 800ab32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4620      	mov	r0, r4
 800ab42:	f7fa fa2f 	bl	8004fa4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800ab4a:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <z_setup_new_thread+0x5c>)
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	b123      	cbz	r3, 800ab5a <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 800ab50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab52:	6763      	str	r3, [r4, #116]	; 0x74
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 800ab54:	4628      	mov	r0, r5
 800ab56:	b005      	add	sp, #20
 800ab58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 800ab5a:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 800ab5c:	e7fa      	b.n	800ab54 <z_setup_new_thread+0x50>
 800ab5e:	bf00      	nop
 800ab60:	20001394 	.word	0x20001394

0800ab64 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800ab64:	b510      	push	{r4, lr}
 800ab66:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 800ab68:	4c1d      	ldr	r4, [pc, #116]	; (800abe0 <z_init_static_threads+0x7c>)
 800ab6a:	e014      	b.n	800ab96 <z_init_static_threads+0x32>
		z_setup_new_thread(
 800ab6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab6e:	9305      	str	r3, [sp, #20]
 800ab70:	6a23      	ldr	r3, [r4, #32]
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	69e3      	ldr	r3, [r4, #28]
 800ab76:	9303      	str	r3, [sp, #12]
 800ab78:	69a3      	ldr	r3, [r4, #24]
 800ab7a:	9302      	str	r3, [sp, #8]
 800ab7c:	6963      	ldr	r3, [r4, #20]
 800ab7e:	9301      	str	r3, [sp, #4]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	68e3      	ldr	r3, [r4, #12]
 800ab86:	68a2      	ldr	r2, [r4, #8]
 800ab88:	6861      	ldr	r1, [r4, #4]
 800ab8a:	6820      	ldr	r0, [r4, #0]
 800ab8c:	f7ff ffba 	bl	800ab04 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 800ab90:	6823      	ldr	r3, [r4, #0]
 800ab92:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 800ab94:	3430      	adds	r4, #48	; 0x30
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <z_init_static_threads+0x80>)
 800ab98:	429c      	cmp	r4, r3
 800ab9a:	d3e7      	bcc.n	800ab6c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800ab9c:	f000 fbd4 	bl	800b348 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 800aba0:	4c0f      	ldr	r4, [pc, #60]	; (800abe0 <z_init_static_threads+0x7c>)
 800aba2:	e000      	b.n	800aba6 <z_init_static_threads+0x42>
 800aba4:	3430      	adds	r4, #48	; 0x30
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <z_init_static_threads+0x80>)
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d214      	bcs.n	800abd6 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800abac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb2:	d0f7      	beq.n	800aba4 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 800abb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abb8:	17d8      	asrs	r0, r3, #31
 800abba:	0082      	lsls	r2, r0, #2
 800abbc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800abc0:	0099      	lsls	r1, r3, #2
 800abc2:	18c9      	adds	r1, r1, r3
 800abc4:	eb40 0002 	adc.w	r0, r0, r2
 800abc8:	184a      	adds	r2, r1, r1
 800abca:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800abce:	6820      	ldr	r0, [r4, #0]
 800abd0:	f7ff ff8a 	bl	800aae8 <schedule_new_thread>
 800abd4:	e7e6      	b.n	800aba4 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 800abd6:	f000 fdc1 	bl	800b75c <k_sched_unlock>
}
 800abda:	b006      	add	sp, #24
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	bf00      	nop
 800abe0:	2000031c 	.word	0x2000031c
 800abe4:	200003ac 	.word	0x200003ac

0800abe8 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800abf2:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 800abf6:	f04f 0110 	mov.w	r1, #16
 800abfa:	f3ef 8611 	mrs	r6, BASEPRI
 800abfe:	f381 8812 	msr	BASEPRI_MAX, r1
 800ac02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 800ac06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ac08:	6921      	ldr	r1, [r4, #16]
 800ac0a:	4288      	cmp	r0, r1
 800ac0c:	d30b      	bcc.n	800ac26 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ac0e:	ea53 0102 	orrs.w	r1, r3, r2
 800ac12:	d137      	bne.n	800ac84 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 800ac14:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800ac18:	f386 8811 	msr	BASEPRI, r6
 800ac1c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800ac20:	b002      	add	sp, #8
 800ac22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800ac26:	4620      	mov	r0, r4
 800ac28:	f004 ffd8 	bl	800fbdc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	b180      	cbz	r0, 800ac52 <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ac30:	68e2      	ldr	r2, [r4, #12]
 800ac32:	4629      	mov	r1, r5
 800ac34:	6940      	ldr	r0, [r0, #20]
 800ac36:	f005 f9a4 	bl	800ff82 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800ac40:	4640      	mov	r0, r8
 800ac42:	f004 ff04 	bl	800fa4e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800ac46:	4631      	mov	r1, r6
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f000 fb61 	bl	800b310 <z_reschedule>
			return 0;
 800ac4e:	4620      	mov	r0, r4
 800ac50:	e7e6      	b.n	800ac20 <z_impl_k_msgq_put+0x38>
 800ac52:	68e2      	ldr	r2, [r4, #12]
 800ac54:	4629      	mov	r1, r5
 800ac56:	6a20      	ldr	r0, [r4, #32]
 800ac58:	f005 f993 	bl	800ff82 <memcpy>
			msgq->write_ptr += msgq->msg_size;
 800ac5c:	68e2      	ldr	r2, [r4, #12]
 800ac5e:	6a23      	ldr	r3, [r4, #32]
 800ac60:	4413      	add	r3, r2
 800ac62:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800ac64:	69a2      	ldr	r2, [r4, #24]
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d009      	beq.n	800ac7e <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 800ac6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 800ac70:	2110      	movs	r1, #16
 800ac72:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ac76:	f005 f965 	bl	800ff44 <z_handle_obj_poll_events>
		result = 0;
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	e7cc      	b.n	800ac18 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 800ac7e:	6963      	ldr	r3, [r4, #20]
 800ac80:	6223      	str	r3, [r4, #32]
 800ac82:	e7f2      	b.n	800ac6a <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 800ac84:	4905      	ldr	r1, [pc, #20]	; (800ac9c <z_impl_k_msgq_put+0xb4>)
 800ac86:	6889      	ldr	r1, [r1, #8]
 800ac88:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	4622      	mov	r2, r4
 800ac90:	4631      	mov	r1, r6
 800ac92:	4638      	mov	r0, r7
 800ac94:	f000 fcac 	bl	800b5f0 <z_pend_curr>
		return result;
 800ac98:	e7c2      	b.n	800ac20 <z_impl_k_msgq_put+0x38>
 800ac9a:	bf00      	nop
 800ac9c:	20001394 	.word	0x20001394

0800aca0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 800aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca2:	b083      	sub	sp, #12
 800aca4:	4604      	mov	r4, r0
 800aca6:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 800aca8:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 800acac:	f04f 0110 	mov.w	r1, #16
 800acb0:	f3ef 8511 	mrs	r5, BASEPRI
 800acb4:	f381 8812 	msr	BASEPRI_MAX, r1
 800acb8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 800acbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acbe:	2900      	cmp	r1, #0
 800acc0:	d033      	beq.n	800ad2a <z_impl_k_msgq_get+0x8a>
 800acc2:	68e2      	ldr	r2, [r4, #12]
 800acc4:	69e1      	ldr	r1, [r4, #28]
 800acc6:	f005 f95c 	bl	800ff82 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 800acca:	68e2      	ldr	r2, [r4, #12]
 800accc:	69e3      	ldr	r3, [r4, #28]
 800acce:	4413      	add	r3, r2
 800acd0:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800acd2:	69a2      	ldr	r2, [r4, #24]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d022      	beq.n	800ad1e <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 800acd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acda:	3b01      	subs	r3, #1
 800acdc:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800acde:	4620      	mov	r0, r4
 800ace0:	f004 ff7c 	bl	800fbdc <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800ace4:	4607      	mov	r7, r0
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d035      	beq.n	800ad56 <z_impl_k_msgq_get+0xb6>
 800acea:	68e2      	ldr	r2, [r4, #12]
 800acec:	6941      	ldr	r1, [r0, #20]
 800acee:	6a20      	ldr	r0, [r4, #32]
 800acf0:	f005 f947 	bl	800ff82 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 800acf4:	68e2      	ldr	r2, [r4, #12]
 800acf6:	6a23      	ldr	r3, [r4, #32]
 800acf8:	4413      	add	r3, r2
 800acfa:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 800acfc:	69a2      	ldr	r2, [r4, #24]
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d010      	beq.n	800ad24 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800ad02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad04:	3301      	adds	r3, #1
 800ad06:	6263      	str	r3, [r4, #36]	; 0x24
 800ad08:	2400      	movs	r4, #0
 800ad0a:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	f004 fe9e 	bl	800fa4e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800ad12:	4629      	mov	r1, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	f000 fafb 	bl	800b310 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	e00e      	b.n	800ad3c <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 800ad1e:	6963      	ldr	r3, [r4, #20]
 800ad20:	61e3      	str	r3, [r4, #28]
 800ad22:	e7d9      	b.n	800acd8 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 800ad24:	6963      	ldr	r3, [r4, #20]
 800ad26:	6223      	str	r3, [r4, #32]
 800ad28:	e7eb      	b.n	800ad02 <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800ad2a:	ea53 0102 	orrs.w	r1, r3, r2
 800ad2e:	d107      	bne.n	800ad40 <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 800ad30:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 800ad34:	f385 8811 	msr	BASEPRI, r5
 800ad38:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800ad40:	4906      	ldr	r1, [pc, #24]	; (800ad5c <z_impl_k_msgq_get+0xbc>)
 800ad42:	6889      	ldr	r1, [r1, #8]
 800ad44:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 800ad46:	9200      	str	r2, [sp, #0]
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f000 fc4e 	bl	800b5f0 <z_pend_curr>
		return result;
 800ad54:	e7f2      	b.n	800ad3c <z_impl_k_msgq_get+0x9c>
		result = 0;
 800ad56:	2000      	movs	r0, #0
 800ad58:	e7ec      	b.n	800ad34 <z_impl_k_msgq_get+0x94>
 800ad5a:	bf00      	nop
 800ad5c:	20001394 	.word	0x20001394

0800ad60 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800ad60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad64:	b083      	sub	sp, #12
 800ad66:	4604      	mov	r4, r0
 800ad68:	461d      	mov	r5, r3
	__asm__ volatile(
 800ad6a:	f04f 0310 	mov.w	r3, #16
 800ad6e:	f3ef 8711 	mrs	r7, BASEPRI
 800ad72:	f383 8812 	msr	BASEPRI_MAX, r3
 800ad76:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800ad7a:	68c1      	ldr	r1, [r0, #12]
 800ad7c:	b999      	cbnz	r1, 800ada6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d14f      	bne.n	800ae22 <z_impl_k_mutex_lock+0xc2>
 800ad82:	4b3a      	ldr	r3, [pc, #232]	; (800ae6c <z_impl_k_mutex_lock+0x10c>)
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800ad8a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 800ad90:	4b36      	ldr	r3, [pc, #216]	; (800ae6c <z_impl_k_mutex_lock+0x10c>)
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800ad96:	f387 8811 	msr	BASEPRI, r7
 800ad9a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 800ad9e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 800ada0:	b003      	add	sp, #12
 800ada2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 800ada8:	6882      	ldr	r2, [r0, #8]
 800adaa:	4b30      	ldr	r3, [pc, #192]	; (800ae6c <z_impl_k_mutex_lock+0x10c>)
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d0e5      	beq.n	800ad7e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800adb2:	ea55 0106 	orrs.w	r1, r5, r6
 800adb6:	bf0c      	ite	eq
 800adb8:	f04f 0801 	moveq.w	r8, #1
 800adbc:	f04f 0800 	movne.w	r8, #0
 800adc0:	d031      	beq.n	800ae26 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800adc2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800adc6:	4649      	mov	r1, r9
 800adc8:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800adcc:	f004 fd72 	bl	800f8b4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800add0:	4581      	cmp	r9, r0
 800add2:	dc2f      	bgt.n	800ae34 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 800add4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 800add8:	9600      	str	r6, [sp, #0]
 800adda:	9501      	str	r5, [sp, #4]
 800addc:	4622      	mov	r2, r4
 800adde:	4639      	mov	r1, r7
 800ade0:	4823      	ldr	r0, [pc, #140]	; (800ae70 <z_impl_k_mutex_lock+0x110>)
 800ade2:	f000 fc05 	bl	800b5f0 <z_pend_curr>
	if (got_mutex == 0) {
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0da      	beq.n	800ada0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 800adea:	f04f 0310 	mov.w	r3, #16
 800adee:	f3ef 8511 	mrs	r5, BASEPRI
 800adf2:	f383 8812 	msr	BASEPRI_MAX, r3
 800adf6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 800adfa:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d01f      	beq.n	800ae40 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ae00:	b1f3      	cbz	r3, 800ae40 <z_impl_k_mutex_lock+0xe0>
 800ae02:	6921      	ldr	r1, [r4, #16]
 800ae04:	f993 000e 	ldrsb.w	r0, [r3, #14]
 800ae08:	f004 fd54 	bl	800f8b4 <new_prio_for_inheritance>
 800ae0c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f004 fd5b 	bl	800f8ca <adjust_owner_prio>
 800ae14:	b9b0      	cbnz	r0, 800ae44 <z_impl_k_mutex_lock+0xe4>
 800ae16:	f1b9 0f00 	cmp.w	r9, #0
 800ae1a:	d015      	beq.n	800ae48 <z_impl_k_mutex_lock+0xe8>
 800ae1c:	f04f 0801 	mov.w	r8, #1
 800ae20:	e012      	b.n	800ae48 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800ae22:	6923      	ldr	r3, [r4, #16]
 800ae24:	e7b1      	b.n	800ad8a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 800ae26:	f387 8811 	msr	BASEPRI, r7
 800ae2a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800ae2e:	f06f 000f 	mvn.w	r0, #15
 800ae32:	e7b5      	b.n	800ada0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 800ae34:	4601      	mov	r1, r0
 800ae36:	4620      	mov	r0, r4
 800ae38:	f004 fd47 	bl	800f8ca <adjust_owner_prio>
 800ae3c:	4681      	mov	r9, r0
 800ae3e:	e7cb      	b.n	800add8 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800ae40:	6921      	ldr	r1, [r4, #16]
 800ae42:	e7e4      	b.n	800ae0e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800ae44:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 800ae48:	f1b8 0f00 	cmp.w	r8, #0
 800ae4c:	d106      	bne.n	800ae5c <z_impl_k_mutex_lock+0xfc>
 800ae4e:	f385 8811 	msr	BASEPRI, r5
 800ae52:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 800ae56:	f06f 000a 	mvn.w	r0, #10
 800ae5a:	e7a1      	b.n	800ada0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4804      	ldr	r0, [pc, #16]	; (800ae70 <z_impl_k_mutex_lock+0x110>)
 800ae60:	f000 fa56 	bl	800b310 <z_reschedule>
	return -EAGAIN;
 800ae64:	f06f 000a 	mvn.w	r0, #10
 800ae68:	e79a      	b.n	800ada0 <z_impl_k_mutex_lock+0x40>
 800ae6a:	bf00      	nop
 800ae6c:	20001394 	.word	0x20001394
 800ae70:	200013b8 	.word	0x200013b8

0800ae74 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 800ae74:	6882      	ldr	r2, [r0, #8]
 800ae76:	2a00      	cmp	r2, #0
 800ae78:	d034      	beq.n	800aee4 <z_impl_k_mutex_unlock+0x70>
{
 800ae7a:	b538      	push	{r3, r4, r5, lr}
 800ae7c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	; (800aef0 <z_impl_k_mutex_unlock+0x7c>)
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d131      	bne.n	800aeea <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 800ae86:	7bda      	ldrb	r2, [r3, #15]
 800ae88:	3a01      	subs	r2, #1
 800ae8a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 800ae8c:	68c3      	ldr	r3, [r0, #12]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d905      	bls.n	800ae9e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800ae92:	3b01      	subs	r3, #1
 800ae94:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 800ae96:	f000 fc61 	bl	800b75c <k_sched_unlock>

	return 0;
 800ae9a:	2000      	movs	r0, #0
}
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800ae9e:	f04f 0310 	mov.w	r3, #16
 800aea2:	f3ef 8511 	mrs	r5, BASEPRI
 800aea6:	f383 8812 	msr	BASEPRI_MAX, r3
 800aeaa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800aeae:	6901      	ldr	r1, [r0, #16]
 800aeb0:	f004 fd0b 	bl	800f8ca <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f004 fe91 	bl	800fbdc <z_unpend_first_thread>
	mutex->owner = new_owner;
 800aeba:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800aebc:	b158      	cbz	r0, 800aed6 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800aebe:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800aec2:	6123      	str	r3, [r4, #16]
 800aec4:	2300      	movs	r3, #0
 800aec6:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800aec8:	f004 fdc1 	bl	800fa4e <z_ready_thread>
		z_reschedule(&lock, key);
 800aecc:	4629      	mov	r1, r5
 800aece:	4809      	ldr	r0, [pc, #36]	; (800aef4 <z_impl_k_mutex_unlock+0x80>)
 800aed0:	f000 fa1e 	bl	800b310 <z_reschedule>
 800aed4:	e7df      	b.n	800ae96 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 800aed6:	2300      	movs	r3, #0
 800aed8:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 800aeda:	f385 8811 	msr	BASEPRI, r5
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	e7d8      	b.n	800ae96 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 800aee4:	f06f 0015 	mvn.w	r0, #21
}
 800aee8:	4770      	bx	lr
		return -EPERM;
 800aeea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeee:	e7d5      	b.n	800ae9c <z_impl_k_mutex_unlock+0x28>
 800aef0:	20001394 	.word	0x20001394
 800aef4:	200013b8 	.word	0x200013b8

0800aef8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4604      	mov	r4, r0
	__asm__ volatile(
 800aefc:	f04f 0310 	mov.w	r3, #16
 800af00:	f3ef 8511 	mrs	r5, BASEPRI
 800af04:	f383 8812 	msr	BASEPRI_MAX, r3
 800af08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 800af0c:	f004 fe66 	bl	800fbdc <z_unpend_first_thread>

	if (thread != NULL) {
 800af10:	b140      	cbz	r0, 800af24 <z_impl_k_sem_give+0x2c>
 800af12:	2200      	movs	r2, #0
 800af14:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 800af16:	f004 fd9a 	bl	800fa4e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800af1a:	4629      	mov	r1, r5
 800af1c:	4809      	ldr	r0, [pc, #36]	; (800af44 <z_impl_k_sem_give+0x4c>)
 800af1e:	f000 f9f7 	bl	800b310 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800af22:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800af24:	68a3      	ldr	r3, [r4, #8]
 800af26:	68e2      	ldr	r2, [r4, #12]
 800af28:	4293      	cmp	r3, r2
 800af2a:	d008      	beq.n	800af3e <z_impl_k_sem_give+0x46>
 800af2c:	2201      	movs	r2, #1
 800af2e:	4413      	add	r3, r2
 800af30:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800af32:	2102      	movs	r1, #2
 800af34:	f104 0010 	add.w	r0, r4, #16
 800af38:	f005 f804 	bl	800ff44 <z_handle_obj_poll_events>
}
 800af3c:	e7ed      	b.n	800af1a <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800af3e:	2200      	movs	r2, #0
 800af40:	e7f5      	b.n	800af2e <z_impl_k_sem_give+0x36>
 800af42:	bf00      	nop
 800af44:	200013bc 	.word	0x200013bc

0800af48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 800af48:	b510      	push	{r4, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	f04f 0410 	mov.w	r4, #16
 800af50:	f3ef 8111 	mrs	r1, BASEPRI
 800af54:	f384 8812 	msr	BASEPRI_MAX, r4
 800af58:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 800af5c:	6884      	ldr	r4, [r0, #8]
 800af5e:	b144      	cbz	r4, 800af72 <z_impl_k_sem_take+0x2a>
		sem->count--;
 800af60:	3c01      	subs	r4, #1
 800af62:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 800af64:	f381 8811 	msr	BASEPRI, r1
 800af68:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 800af6c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 800af6e:	b002      	add	sp, #8
 800af70:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800af72:	ea53 0402 	orrs.w	r4, r3, r2
 800af76:	d006      	beq.n	800af86 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 800af78:	9200      	str	r2, [sp, #0]
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	4602      	mov	r2, r0
 800af7e:	4805      	ldr	r0, [pc, #20]	; (800af94 <z_impl_k_sem_take+0x4c>)
 800af80:	f000 fb36 	bl	800b5f0 <z_pend_curr>
	return ret;
 800af84:	e7f3      	b.n	800af6e <z_impl_k_sem_take+0x26>
 800af86:	f381 8811 	msr	BASEPRI, r1
 800af8a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 800af8e:	f06f 000f 	mvn.w	r0, #15
 800af92:	e7ec      	b.n	800af6e <z_impl_k_sem_take+0x26>
 800af94:	200013bc 	.word	0x200013bc

0800af98 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 800af9c:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800af9e:	f013 0f02 	tst.w	r3, #2
 800afa2:	d15c      	bne.n	800b05e <submit_to_queue_locked+0xc6>
 800afa4:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 800afa6:	f013 0f04 	tst.w	r3, #4
 800afaa:	d15d      	bne.n	800b068 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 800afac:	680b      	ldr	r3, [r1, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d038      	beq.n	800b024 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800afb2:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 800afb4:	f013 0f01 	tst.w	r3, #1
 800afb8:	d037      	beq.n	800b02a <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	602b      	str	r3, [r5, #0]
			ret = 2;
 800afbe:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800afc0:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800afc2:	2e00      	cmp	r6, #0
 800afc4:	d03f      	beq.n	800b046 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800afc6:	4b29      	ldr	r3, [pc, #164]	; (800b06c <submit_to_queue_locked+0xd4>)
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	42b3      	cmp	r3, r6
 800afcc:	d02f      	beq.n	800b02e <submit_to_queue_locked+0x96>
 800afce:	2300      	movs	r3, #0
 800afd0:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800afd2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800afd6:	f3c3 0180 	ubfx	r1, r3, #2, #1
 800afda:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800afde:	f013 0f01 	tst.w	r3, #1
 800afe2:	d033      	beq.n	800b04c <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 800afe4:	b101      	cbz	r1, 800afe8 <submit_to_queue_locked+0x50>
 800afe6:	b3a2      	cbz	r2, 800b052 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 800afe8:	b100      	cbz	r0, 800afec <submit_to_queue_locked+0x54>
 800afea:	b3a9      	cbz	r1, 800b058 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 800afec:	2300      	movs	r3, #0
 800afee:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800aff0:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 800aff4:	b313      	cbz	r3, 800b03c <submit_to_queue_locked+0xa4>
	parent->next = child;
 800aff6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800aff8:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 800affc:	b12e      	cbz	r6, 800b00a <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800affe:	2200      	movs	r2, #0
 800b000:	4611      	mov	r1, r2
 800b002:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800b006:	f004 fe51 	bl	800fcac <z_sched_wake>
		ret = 1;
 800b00a:	2001      	movs	r0, #1

		if (rc < 0) {
 800b00c:	2800      	cmp	r0, #0
 800b00e:	db06      	blt.n	800b01e <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800b010:	68e3      	ldr	r3, [r4, #12]
 800b012:	f043 0304 	orr.w	r3, r3, #4
 800b016:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	60a3      	str	r3, [r4, #8]
 800b01c:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800b01e:	2800      	cmp	r0, #0
 800b020:	dc21      	bgt.n	800b066 <submit_to_queue_locked+0xce>
 800b022:	e01e      	b.n	800b062 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 800b024:	6883      	ldr	r3, [r0, #8]
 800b026:	600b      	str	r3, [r1, #0]
 800b028:	e7c3      	b.n	800afb2 <submit_to_queue_locked+0x1a>
		ret = 1;
 800b02a:	2701      	movs	r7, #1
 800b02c:	e7c8      	b.n	800afc0 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800b02e:	f004 fbf9 	bl	800f824 <k_is_in_isr>
 800b032:	b908      	cbnz	r0, 800b038 <submit_to_queue_locked+0xa0>
 800b034:	2301      	movs	r3, #1
 800b036:	e7cb      	b.n	800afd0 <submit_to_queue_locked+0x38>
 800b038:	2300      	movs	r3, #0
 800b03a:	e7c9      	b.n	800afd0 <submit_to_queue_locked+0x38>
 800b03c:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800b040:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 800b044:	e7da      	b.n	800affc <submit_to_queue_locked+0x64>
		return -EINVAL;
 800b046:	f06f 0015 	mvn.w	r0, #21
 800b04a:	e7df      	b.n	800b00c <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 800b04c:	f06f 0012 	mvn.w	r0, #18
 800b050:	e7dc      	b.n	800b00c <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b052:	f06f 000f 	mvn.w	r0, #15
 800b056:	e7d9      	b.n	800b00c <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b058:	f06f 000f 	mvn.w	r0, #15
 800b05c:	e7d6      	b.n	800b00c <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 800b05e:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 800b066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 800b068:	2000      	movs	r0, #0
 800b06a:	e7fa      	b.n	800b062 <submit_to_queue_locked+0xca>
 800b06c:	20001394 	.word	0x20001394

0800b070 <finalize_cancel_locked>:
{
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 800b074:	68c3      	ldr	r3, [r0, #12]
 800b076:	f023 0302 	bic.w	r3, r3, #2
 800b07a:	60c3      	str	r3, [r0, #12]
	return list->head;
 800b07c:	4b1a      	ldr	r3, [pc, #104]	; (800b0e8 <finalize_cancel_locked+0x78>)
 800b07e:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b080:	b1fb      	cbz	r3, 800b0c2 <finalize_cancel_locked+0x52>
 800b082:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b084:	b103      	cbz	r3, 800b088 <finalize_cancel_locked+0x18>
	return node->next;
 800b086:	681c      	ldr	r4, [r3, #0]
 800b088:	2600      	movs	r6, #0
 800b08a:	e01f      	b.n	800b0cc <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 800b08c:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 800b08e:	b166      	cbz	r6, 800b0aa <finalize_cancel_locked+0x3a>
	return node->next;
 800b090:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800b092:	6031      	str	r1, [r6, #0]
	return list->tail;
 800b094:	4914      	ldr	r1, [pc, #80]	; (800b0e8 <finalize_cancel_locked+0x78>)
 800b096:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800b098:	428b      	cmp	r3, r1
 800b09a:	d00f      	beq.n	800b0bc <finalize_cancel_locked+0x4c>
	parent->next = child;
 800b09c:	2100      	movs	r1, #0
 800b09e:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 800b0a0:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 800b0a4:	f7ff ff28 	bl	800aef8 <z_impl_k_sem_give>
}
 800b0a8:	e015      	b.n	800b0d6 <finalize_cancel_locked+0x66>
	return node->next;
 800b0aa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 800b0ac:	490e      	ldr	r1, [pc, #56]	; (800b0e8 <finalize_cancel_locked+0x78>)
 800b0ae:	6008      	str	r0, [r1, #0]
	return list->tail;
 800b0b0:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800b0b2:	428b      	cmp	r3, r1
 800b0b4:	d1f2      	bne.n	800b09c <finalize_cancel_locked+0x2c>
	list->tail = node;
 800b0b6:	490c      	ldr	r1, [pc, #48]	; (800b0e8 <finalize_cancel_locked+0x78>)
 800b0b8:	6048      	str	r0, [r1, #4]
}
 800b0ba:	e7ef      	b.n	800b09c <finalize_cancel_locked+0x2c>
	list->tail = node;
 800b0bc:	490a      	ldr	r1, [pc, #40]	; (800b0e8 <finalize_cancel_locked+0x78>)
 800b0be:	604e      	str	r6, [r1, #4]
}
 800b0c0:	e7ec      	b.n	800b09c <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b0c2:	461c      	mov	r4, r3
 800b0c4:	e7e0      	b.n	800b088 <finalize_cancel_locked+0x18>
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4623      	mov	r3, r4
 800b0ca:	4614      	mov	r4, r2
 800b0cc:	b153      	cbz	r3, 800b0e4 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	42aa      	cmp	r2, r5
 800b0d2:	d0db      	beq.n	800b08c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 800b0d4:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800b0d6:	2c00      	cmp	r4, #0
 800b0d8:	d0f5      	beq.n	800b0c6 <finalize_cancel_locked+0x56>
 800b0da:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800b0dc:	2c00      	cmp	r4, #0
 800b0de:	d0f3      	beq.n	800b0c8 <finalize_cancel_locked+0x58>
	return node->next;
 800b0e0:	6822      	ldr	r2, [r4, #0]
 800b0e2:	e7f1      	b.n	800b0c8 <finalize_cancel_locked+0x58>
}
 800b0e4:	bd70      	pop	{r4, r5, r6, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200013c4 	.word	0x200013c4

0800b0ec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 800b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800b0f2:	e016      	b.n	800b122 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 800b0f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 800b0f8:	f023 0204 	bic.w	r2, r3, #4
 800b0fc:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 800b100:	f013 0f04 	tst.w	r3, #4
 800b104:	d159      	bne.n	800b1ba <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 800b106:	2300      	movs	r3, #0
 800b108:	9302      	str	r3, [sp, #8]
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b10e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b112:	e9cd 2300 	strd	r2, r3, [sp]
 800b116:	f105 0288 	add.w	r2, r5, #136	; 0x88
 800b11a:	4631      	mov	r1, r6
 800b11c:	482e      	ldr	r0, [pc, #184]	; (800b1d8 <work_queue_main+0xec>)
 800b11e:	f000 fc81 	bl	800ba24 <z_sched_wait>
	__asm__ volatile(
 800b122:	f04f 0310 	mov.w	r3, #16
 800b126:	f3ef 8611 	mrs	r6, BASEPRI
 800b12a:	f383 8812 	msr	BASEPRI_MAX, r3
 800b12e:	f3bf 8f6f 	isb	sy
	return list->head;
 800b132:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 800b136:	2c00      	cmp	r4, #0
 800b138:	d0dc      	beq.n	800b0f4 <work_queue_main+0x8>
	return node->next;
 800b13a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 800b13c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800b140:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 800b144:	4294      	cmp	r4, r2
 800b146:	d035      	beq.n	800b1b4 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 800b148:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b14c:	f043 0302 	orr.w	r3, r3, #2
 800b150:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800b154:	68e3      	ldr	r3, [r4, #12]
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 800b15c:	f023 0304 	bic.w	r3, r3, #4
 800b160:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 800b162:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 800b164:	2c00      	cmp	r4, #0
 800b166:	d0ce      	beq.n	800b106 <work_queue_main+0x1a>
	__asm__ volatile(
 800b168:	f386 8811 	msr	BASEPRI, r6
 800b16c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 800b170:	4620      	mov	r0, r4
 800b172:	4798      	blx	r3
	__asm__ volatile(
 800b174:	f04f 0310 	mov.w	r3, #16
 800b178:	f3ef 8611 	mrs	r6, BASEPRI
 800b17c:	f383 8812 	msr	BASEPRI_MAX, r3
 800b180:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 800b184:	68e3      	ldr	r3, [r4, #12]
 800b186:	f023 0301 	bic.w	r3, r3, #1
 800b18a:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 800b18c:	f013 0f02 	tst.w	r3, #2
 800b190:	d11e      	bne.n	800b1d0 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 800b192:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b196:	f023 0302 	bic.w	r3, r3, #2
 800b19a:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 800b19e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 800b1a2:	f386 8811 	msr	BASEPRI, r6
 800b1a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1b9      	bne.n	800b122 <work_queue_main+0x36>
	z_impl_k_yield();
 800b1ae:	f000 fb53 	bl	800b858 <z_impl_k_yield>
}
 800b1b2:	e7b6      	b.n	800b122 <work_queue_main+0x36>
	list->tail = node;
 800b1b4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800b1b8:	e7c6      	b.n	800b148 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 800b1ba:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f004 fd72 	bl	800fcac <z_sched_wake>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1f8      	bne.n	800b1be <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	e7c9      	b.n	800b164 <work_queue_main+0x78>
			finalize_cancel_locked(work);
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7ff ff4d 	bl	800b070 <finalize_cancel_locked>
 800b1d6:	e7dc      	b.n	800b192 <work_queue_main+0xa6>
 800b1d8:	200013c0 	.word	0x200013c0

0800b1dc <k_work_submit>:
{
 800b1dc:	b508      	push	{r3, lr}
 800b1de:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 800b1e0:	4801      	ldr	r0, [pc, #4]	; (800b1e8 <k_work_submit+0xc>)
 800b1e2:	f004 fb9e 	bl	800f922 <k_work_submit_to_queue>
}
 800b1e6:	bd08      	pop	{r3, pc}
 800b1e8:	20000cb8 	.word	0x20000cb8

0800b1ec <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b089      	sub	sp, #36	; 0x24
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 800b1fa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800b1fe:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 800b202:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 800b206:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800b20a:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 800b20e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 800b212:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 800b216:	b1fd      	cbz	r5, 800b258 <k_work_queue_start+0x6c>
 800b218:	7928      	ldrb	r0, [r5, #4]
 800b21a:	b9f8      	cbnz	r0, 800b25c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b21c:	2001      	movs	r0, #1
	*flagp = flags;
 800b21e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800b222:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b226:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b22a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b22e:	2000      	movs	r0, #0
 800b230:	9004      	str	r0, [sp, #16]
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	9002      	str	r0, [sp, #8]
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	9400      	str	r4, [sp, #0]
 800b23a:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <k_work_queue_start+0x78>)
 800b23c:	4620      	mov	r0, r4
 800b23e:	f004 fb0b 	bl	800f858 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 800b242:	b125      	cbz	r5, 800b24e <k_work_queue_start+0x62>
 800b244:	6829      	ldr	r1, [r5, #0]
 800b246:	b111      	cbz	r1, 800b24e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 800b248:	4620      	mov	r0, r4
 800b24a:	f004 faf1 	bl	800f830 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800b24e:	4620      	mov	r0, r4
 800b250:	f004 faf3 	bl	800f83a <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 800b254:	b009      	add	sp, #36	; 0x24
 800b256:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 800b258:	2001      	movs	r0, #1
 800b25a:	e7e0      	b.n	800b21e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 800b25c:	f240 1001 	movw	r0, #257	; 0x101
 800b260:	e7dd      	b.n	800b21e <k_work_queue_start+0x32>
 800b262:	bf00      	nop
 800b264:	0800b0ed 	.word	0x0800b0ed

0800b268 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b26c:	bf08      	it	eq
 800b26e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800b272:	d100      	bne.n	800b276 <add_thread_timeout+0xe>
 800b274:	4770      	bx	lr
{
 800b276:	b508      	push	{r3, lr}
 800b278:	4902      	ldr	r1, [pc, #8]	; (800b284 <add_thread_timeout+0x1c>)
 800b27a:	3018      	adds	r0, #24
 800b27c:	f000 fc48 	bl	800bb10 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 800b280:	bd08      	pop	{r3, pc}
 800b282:	bf00      	nop
 800b284:	0800fa87 	.word	0x0800fa87

0800b288 <z_reset_time_slice>:
{
 800b288:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 800b28a:	4b08      	ldr	r3, [pc, #32]	; (800b2ac <z_reset_time_slice+0x24>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	b903      	cbnz	r3, 800b292 <z_reset_time_slice+0xa>
}
 800b290:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 800b292:	f7fe fd0b 	bl	8009cac <sys_clock_elapsed>
 800b296:	4603      	mov	r3, r0
 800b298:	4a04      	ldr	r2, [pc, #16]	; (800b2ac <z_reset_time_slice+0x24>)
 800b29a:	6810      	ldr	r0, [r2, #0]
 800b29c:	4403      	add	r3, r0
 800b29e:	4a04      	ldr	r2, [pc, #16]	; (800b2b0 <z_reset_time_slice+0x28>)
 800b2a0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	f004 fd6e 	bl	800fd84 <z_set_timeout_expiry>
}
 800b2a8:	e7f2      	b.n	800b290 <z_reset_time_slice+0x8>
 800b2aa:	bf00      	nop
 800b2ac:	200013d8 	.word	0x200013d8
 800b2b0:	20001394 	.word	0x20001394

0800b2b4 <k_sched_time_slice_set>:
{
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 800b2ba:	2300      	movs	r3, #0
	__asm__ volatile(
 800b2bc:	f04f 0210 	mov.w	r2, #16
 800b2c0:	f3ef 8611 	mrs	r6, BASEPRI
 800b2c4:	f382 8812 	msr	BASEPRI_MAX, r2
 800b2c8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 800b2cc:	e00c      	b.n	800b2e8 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	bfb8      	it	lt
 800b2d2:	2302      	movlt	r3, #2
 800b2d4:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	; (800b304 <k_sched_time_slice_set+0x50>)
 800b2d8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 800b2da:	f7ff ffd5 	bl	800b288 <z_reset_time_slice>
	__asm__ volatile(
 800b2de:	f386 8811 	msr	BASEPRI, r6
 800b2e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	b953      	cbnz	r3, 800b300 <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 800b2ea:	4b07      	ldr	r3, [pc, #28]	; (800b308 <k_sched_time_slice_set+0x54>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 800b2f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800b2f4:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 800b2f6:	4a05      	ldr	r2, [pc, #20]	; (800b30c <k_sched_time_slice_set+0x58>)
 800b2f8:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 800b2fa:	2c00      	cmp	r4, #0
 800b2fc:	dce7      	bgt.n	800b2ce <k_sched_time_slice_set+0x1a>
 800b2fe:	e7ea      	b.n	800b2d6 <k_sched_time_slice_set+0x22>
}
 800b300:	bd70      	pop	{r4, r5, r6, pc}
 800b302:	bf00      	nop
 800b304:	200013d4 	.word	0x200013d4
 800b308:	20001394 	.word	0x20001394
 800b30c:	200013d8 	.word	0x200013d8

0800b310 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 800b310:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 800b312:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800b314:	b921      	cbnz	r1, 800b320 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b316:	f3ef 8305 	mrs	r3, IPSR
 800b31a:	b913      	cbnz	r3, 800b322 <z_reschedule+0x12>
 800b31c:	2101      	movs	r1, #1
 800b31e:	e000      	b.n	800b322 <z_reschedule+0x12>
 800b320:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 800b322:	f011 0f01 	tst.w	r1, #1
 800b326:	d007      	beq.n	800b338 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 800b328:	4b06      	ldr	r3, [pc, #24]	; (800b344 <z_reschedule+0x34>)
 800b32a:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 800b32c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 800b32e:	429a      	cmp	r2, r3
 800b330:	d002      	beq.n	800b338 <z_reschedule+0x28>
	ret = arch_swap(key);
 800b332:	f7f9 fde3 	bl	8004efc <arch_swap>
		z_swap(lock, key);
 800b336:	e003      	b.n	800b340 <z_reschedule+0x30>
 800b338:	f380 8811 	msr	BASEPRI, r0
 800b33c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 800b340:	bd08      	pop	{r3, pc}
 800b342:	bf00      	nop
 800b344:	20001394 	.word	0x20001394

0800b348 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 800b348:	2300      	movs	r3, #0
	__asm__ volatile(
 800b34a:	f04f 0210 	mov.w	r2, #16
 800b34e:	f3ef 8111 	mrs	r1, BASEPRI
 800b352:	f382 8812 	msr	BASEPRI_MAX, r2
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	e009      	b.n	800b370 <k_sched_lock+0x28>
	--_current->base.sched_locked;
 800b35c:	4b06      	ldr	r3, [pc, #24]	; (800b378 <k_sched_lock+0x30>)
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	7bd3      	ldrb	r3, [r2, #15]
 800b362:	3b01      	subs	r3, #1
 800b364:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 800b366:	f381 8811 	msr	BASEPRI, r1
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	2301      	movs	r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	d0f3      	beq.n	800b35c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20001394 	.word	0x20001394

0800b37c <update_cache>:
{
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 800b380:	480f      	ldr	r0, [pc, #60]	; (800b3c0 <update_cache+0x44>)
 800b382:	f004 fb5d 	bl	800fa40 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800b386:	4605      	mov	r5, r0
 800b388:	b170      	cbz	r0, 800b3a8 <update_cache+0x2c>
	if (preempt_ok != 0) {
 800b38a:	b984      	cbnz	r4, 800b3ae <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <update_cache+0x48>)
 800b38e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 800b390:	7b5a      	ldrb	r2, [r3, #13]
 800b392:	f012 0f1f 	tst.w	r2, #31
 800b396:	d10a      	bne.n	800b3ae <update_cache+0x32>
	return node->next != NULL;
 800b398:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800b39a:	b942      	cbnz	r2, 800b3ae <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b39c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 800b39e:	2a7f      	cmp	r2, #127	; 0x7f
 800b3a0:	d905      	bls.n	800b3ae <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 800b3a2:	4a08      	ldr	r2, [pc, #32]	; (800b3c4 <update_cache+0x48>)
 800b3a4:	6193      	str	r3, [r2, #24]
 800b3a6:	e00a      	b.n	800b3be <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 800b3a8:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <update_cache+0x48>)
 800b3aa:	68dd      	ldr	r5, [r3, #12]
 800b3ac:	e7ed      	b.n	800b38a <update_cache+0xe>
		if (thread != _current) {
 800b3ae:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <update_cache+0x48>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	42ab      	cmp	r3, r5
 800b3b4:	d001      	beq.n	800b3ba <update_cache+0x3e>
			z_reset_time_slice();
 800b3b6:	f7ff ff67 	bl	800b288 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800b3ba:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <update_cache+0x48>)
 800b3bc:	619d      	str	r5, [r3, #24]
}
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	200013b0 	.word	0x200013b0
 800b3c4:	20001394 	.word	0x20001394

0800b3c8 <move_thread_to_end_of_prio_q>:
{
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 800b3cc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800b3ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	db28      	blt.n	800b428 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 800b3d6:	7b6b      	ldrb	r3, [r5, #13]
 800b3d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800b3de:	4b1a      	ldr	r3, [pc, #104]	; (800b448 <move_thread_to_end_of_prio_q+0x80>)
 800b3e0:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b3e4:	429c      	cmp	r4, r3
 800b3e6:	d02d      	beq.n	800b444 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b3e8:	b16c      	cbz	r4, 800b406 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f004 fabc 	bl	800f96a <z_sched_prio_cmp>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	dc20      	bgt.n	800b438 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b3f6:	b134      	cbz	r4, 800b406 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800b3f8:	4b13      	ldr	r3, [pc, #76]	; (800b448 <move_thread_to_end_of_prio_q+0x80>)
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	429c      	cmp	r4, r3
 800b3fe:	d002      	beq.n	800b406 <move_thread_to_end_of_prio_q+0x3e>
 800b400:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b402:	2c00      	cmp	r4, #0
 800b404:	d1f0      	bne.n	800b3e8 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 800b406:	4b10      	ldr	r3, [pc, #64]	; (800b448 <move_thread_to_end_of_prio_q+0x80>)
 800b408:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 800b40a:	f103 011c 	add.w	r1, r3, #28
 800b40e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800b410:	606a      	str	r2, [r5, #4]

	tail->next = node;
 800b412:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800b414:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <move_thread_to_end_of_prio_q+0x80>)
 800b418:	6898      	ldr	r0, [r3, #8]
 800b41a:	42a8      	cmp	r0, r5
 800b41c:	bf14      	ite	ne
 800b41e:	2000      	movne	r0, #0
 800b420:	2001      	moveq	r0, #1
 800b422:	f7ff ffab 	bl	800b37c <update_cache>
}
 800b426:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b428:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b42c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b42e:	4601      	mov	r1, r0
 800b430:	4806      	ldr	r0, [pc, #24]	; (800b44c <move_thread_to_end_of_prio_q+0x84>)
 800b432:	f004 fad9 	bl	800f9e8 <z_priq_dumb_remove>
}
 800b436:	e7ce      	b.n	800b3d6 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 800b438:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 800b43a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800b43c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800b43e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800b440:	6065      	str	r5, [r4, #4]
}
 800b442:	e7e8      	b.n	800b416 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b444:	2400      	movs	r4, #0
 800b446:	e7cf      	b.n	800b3e8 <move_thread_to_end_of_prio_q+0x20>
 800b448:	20001394 	.word	0x20001394
 800b44c:	200013b0 	.word	0x200013b0

0800b450 <z_time_slice>:
{
 800b450:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b452:	f04f 0310 	mov.w	r3, #16
 800b456:	f3ef 8411 	mrs	r4, BASEPRI
 800b45a:	f383 8812 	msr	BASEPRI_MAX, r3
 800b45e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 800b462:	4b21      	ldr	r3, [pc, #132]	; (800b4e8 <z_time_slice+0x98>)
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	4a21      	ldr	r2, [pc, #132]	; (800b4ec <z_time_slice+0x9c>)
 800b468:	6812      	ldr	r2, [r2, #0]
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d017      	beq.n	800b49e <z_time_slice+0x4e>
	pending_current = NULL;
 800b46e:	4a1f      	ldr	r2, [pc, #124]	; (800b4ec <z_time_slice+0x9c>)
 800b470:	2100      	movs	r1, #0
 800b472:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800b474:	4a1e      	ldr	r2, [pc, #120]	; (800b4f0 <z_time_slice+0xa0>)
 800b476:	6812      	ldr	r2, [r2, #0]
 800b478:	b372      	cbz	r2, 800b4d8 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b47a:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 800b47c:	2a7f      	cmp	r2, #127	; 0x7f
 800b47e:	d815      	bhi.n	800b4ac <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 800b480:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 800b482:	f012 0f1f 	tst.w	r2, #31
 800b486:	d11b      	bne.n	800b4c0 <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 800b488:	f993 100e 	ldrsb.w	r1, [r3, #14]
 800b48c:	4a19      	ldr	r2, [pc, #100]	; (800b4f4 <z_time_slice+0xa4>)
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	4291      	cmp	r1, r2
 800b492:	db17      	blt.n	800b4c4 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 800b494:	4a18      	ldr	r2, [pc, #96]	; (800b4f8 <z_time_slice+0xa8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d016      	beq.n	800b4c8 <z_time_slice+0x78>
 800b49a:	2201      	movs	r2, #1
 800b49c:	e007      	b.n	800b4ae <z_time_slice+0x5e>
		z_reset_time_slice();
 800b49e:	f7ff fef3 	bl	800b288 <z_reset_time_slice>
	__asm__ volatile(
 800b4a2:	f384 8811 	msr	BASEPRI, r4
 800b4a6:	f3bf 8f6f 	isb	sy
		return;
 800b4aa:	e01c      	b.n	800b4e6 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 800b4ac:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 800b4ae:	b19a      	cbz	r2, 800b4d8 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 800b4b0:	4a0d      	ldr	r2, [pc, #52]	; (800b4e8 <z_time_slice+0x98>)
 800b4b2:	6912      	ldr	r2, [r2, #16]
 800b4b4:	4282      	cmp	r2, r0
 800b4b6:	dd09      	ble.n	800b4cc <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 800b4b8:	1a10      	subs	r0, r2, r0
 800b4ba:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <z_time_slice+0x98>)
 800b4bc:	6118      	str	r0, [r3, #16]
 800b4be:	e00e      	b.n	800b4de <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	e7f4      	b.n	800b4ae <z_time_slice+0x5e>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	e7f2      	b.n	800b4ae <z_time_slice+0x5e>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	e7f0      	b.n	800b4ae <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7ff ff7b 	bl	800b3c8 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 800b4d2:	f7ff fed9 	bl	800b288 <z_reset_time_slice>
 800b4d6:	e002      	b.n	800b4de <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <z_time_slice+0x98>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	611a      	str	r2, [r3, #16]
 800b4de:	f384 8811 	msr	BASEPRI, r4
 800b4e2:	f3bf 8f6f 	isb	sy
}
 800b4e6:	bd10      	pop	{r4, pc}
 800b4e8:	20001394 	.word	0x20001394
 800b4ec:	200013cc 	.word	0x200013cc
 800b4f0:	200013d8 	.word	0x200013d8
 800b4f4:	200013d4 	.word	0x200013d4
 800b4f8:	20000bb0 	.word	0x20000bb0

0800b4fc <ready_thread>:
{
 800b4fc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 800b4fe:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800b500:	f990 200d 	ldrsb.w	r2, [r0, #13]
 800b504:	2a00      	cmp	r2, #0
 800b506:	db2d      	blt.n	800b564 <ready_thread+0x68>
 800b508:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b50a:	f013 0f1f 	tst.w	r3, #31
 800b50e:	d105      	bne.n	800b51c <ready_thread+0x20>
	return node->next != NULL;
 800b510:	6982      	ldr	r2, [r0, #24]
 800b512:	b10a      	cbz	r2, 800b518 <ready_thread+0x1c>
 800b514:	2200      	movs	r2, #0
 800b516:	e002      	b.n	800b51e <ready_thread+0x22>
 800b518:	2201      	movs	r2, #1
 800b51a:	e000      	b.n	800b51e <ready_thread+0x22>
 800b51c:	2200      	movs	r2, #0
 800b51e:	b30a      	cbz	r2, 800b564 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 800b520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b524:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <ready_thread+0x7c>)
 800b528:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b52c:	429d      	cmp	r5, r3
 800b52e:	d020      	beq.n	800b572 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b530:	b16d      	cbz	r5, 800b54e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b532:	4629      	mov	r1, r5
 800b534:	4620      	mov	r0, r4
 800b536:	f004 fa18 	bl	800f96a <z_sched_prio_cmp>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	dc13      	bgt.n	800b566 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b53e:	b135      	cbz	r5, 800b54e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 800b540:	4b0d      	ldr	r3, [pc, #52]	; (800b578 <ready_thread+0x7c>)
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	429d      	cmp	r5, r3
 800b546:	d002      	beq.n	800b54e <ready_thread+0x52>
 800b548:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	d1f0      	bne.n	800b530 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 800b54e:	4b0a      	ldr	r3, [pc, #40]	; (800b578 <ready_thread+0x7c>)
 800b550:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b552:	f103 011c 	add.w	r1, r3, #28
 800b556:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800b558:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800b55a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800b55c:	621c      	str	r4, [r3, #32]
		update_cache(0);
 800b55e:	2000      	movs	r0, #0
 800b560:	f7ff ff0c 	bl	800b37c <update_cache>
}
 800b564:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 800b566:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800b568:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800b56a:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800b56c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800b56e:	606c      	str	r4, [r5, #4]
}
 800b570:	e7f5      	b.n	800b55e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b572:	2500      	movs	r5, #0
 800b574:	e7dc      	b.n	800b530 <ready_thread+0x34>
 800b576:	bf00      	nop
 800b578:	20001394 	.word	0x20001394

0800b57c <z_sched_start>:
{
 800b57c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800b57e:	f04f 0310 	mov.w	r3, #16
 800b582:	f3ef 8411 	mrs	r4, BASEPRI
 800b586:	f383 8812 	msr	BASEPRI_MAX, r3
 800b58a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 800b58e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 800b590:	f013 0f04 	tst.w	r3, #4
 800b594:	d104      	bne.n	800b5a0 <z_sched_start+0x24>
	__asm__ volatile(
 800b596:	f384 8811 	msr	BASEPRI, r4
 800b59a:	f3bf 8f6f 	isb	sy
}
 800b59e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800b5a0:	f023 0304 	bic.w	r3, r3, #4
 800b5a4:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 800b5a6:	f7ff ffa9 	bl	800b4fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4801      	ldr	r0, [pc, #4]	; (800b5b4 <z_sched_start+0x38>)
 800b5ae:	f7ff feaf 	bl	800b310 <z_reschedule>
 800b5b2:	e7f4      	b.n	800b59e <z_sched_start+0x22>
 800b5b4:	200013d0 	.word	0x200013d0

0800b5b8 <unready_thread>:
{
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 800b5bc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 800b5be:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	db08      	blt.n	800b5d8 <unready_thread+0x20>
	update_cache(thread == _current);
 800b5c6:	4b08      	ldr	r3, [pc, #32]	; (800b5e8 <unready_thread+0x30>)
 800b5c8:	6898      	ldr	r0, [r3, #8]
 800b5ca:	42a0      	cmp	r0, r4
 800b5cc:	bf14      	ite	ne
 800b5ce:	2000      	movne	r0, #0
 800b5d0:	2001      	moveq	r0, #1
 800b5d2:	f7ff fed3 	bl	800b37c <update_cache>
}
 800b5d6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b5d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b5dc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b5de:	4601      	mov	r1, r0
 800b5e0:	4802      	ldr	r0, [pc, #8]	; (800b5ec <unready_thread+0x34>)
 800b5e2:	f004 fa01 	bl	800f9e8 <z_priq_dumb_remove>
}
 800b5e6:	e7ee      	b.n	800b5c6 <unready_thread+0xe>
 800b5e8:	20001394 	.word	0x20001394
 800b5ec:	200013b0 	.word	0x200013b0

0800b5f0 <z_pend_curr>:
{
 800b5f0:	b510      	push	{r4, lr}
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	4611      	mov	r1, r2
	pending_current = _current;
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <z_pend_curr+0x20>)
 800b5f8:	6898      	ldr	r0, [r3, #8]
 800b5fa:	4b06      	ldr	r3, [pc, #24]	; (800b614 <z_pend_curr+0x24>)
 800b5fc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 800b5fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b602:	f004 faa2 	bl	800fb4a <pend>
 800b606:	4620      	mov	r0, r4
 800b608:	f7f9 fc78 	bl	8004efc <arch_swap>
}
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	20001394 	.word	0x20001394
 800b614:	200013cc 	.word	0x200013cc

0800b618 <z_set_prio>:
{
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	4604      	mov	r4, r0
 800b61e:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 800b620:	2300      	movs	r3, #0
	__asm__ volatile(
 800b622:	f04f 0210 	mov.w	r2, #16
 800b626:	f3ef 8811 	mrs	r8, BASEPRI
 800b62a:	f382 8812 	msr	BASEPRI_MAX, r2
 800b62e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 800b632:	461f      	mov	r7, r3
 800b634:	e008      	b.n	800b648 <z_set_prio+0x30>
		if (need_sched) {
 800b636:	f012 0701 	ands.w	r7, r2, #1
 800b63a:	d111      	bne.n	800b660 <z_set_prio+0x48>
			thread->base.prio = prio;
 800b63c:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 800b63e:	f388 8811 	msr	BASEPRI, r8
 800b642:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b646:	2301      	movs	r3, #1
 800b648:	461a      	mov	r2, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d13d      	bne.n	800b6ca <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 800b64e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800b650:	f013 0f1f 	tst.w	r3, #31
 800b654:	d1ef      	bne.n	800b636 <z_set_prio+0x1e>
	return node->next != NULL;
 800b656:	69a1      	ldr	r1, [r4, #24]
 800b658:	2900      	cmp	r1, #0
 800b65a:	d1ec      	bne.n	800b636 <z_set_prio+0x1e>
 800b65c:	2201      	movs	r2, #1
 800b65e:	e7ea      	b.n	800b636 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b664:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b666:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800b6d0 <z_set_prio+0xb8>
 800b66a:	4621      	mov	r1, r4
 800b66c:	4648      	mov	r0, r9
 800b66e:	f004 f9bb 	bl	800f9e8 <z_priq_dumb_remove>
				thread->base.prio = prio;
 800b672:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 800b674:	7b63      	ldrb	r3, [r4, #13]
 800b676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b67a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 800b67c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b680:	454d      	cmp	r5, r9
 800b682:	d020      	beq.n	800b6c6 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b684:	b16d      	cbz	r5, 800b6a2 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b686:	4629      	mov	r1, r5
 800b688:	4620      	mov	r0, r4
 800b68a:	f004 f96e 	bl	800f96a <z_sched_prio_cmp>
 800b68e:	2800      	cmp	r0, #0
 800b690:	dc13      	bgt.n	800b6ba <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b692:	b135      	cbz	r5, 800b6a2 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 800b694:	4b0f      	ldr	r3, [pc, #60]	; (800b6d4 <z_set_prio+0xbc>)
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	429d      	cmp	r5, r3
 800b69a:	d002      	beq.n	800b6a2 <z_set_prio+0x8a>
 800b69c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	d1f0      	bne.n	800b684 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <z_set_prio+0xbc>)
 800b6a4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b6a6:	f103 011c 	add.w	r1, r3, #28
 800b6aa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 800b6ac:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800b6ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800b6b0:	621c      	str	r4, [r3, #32]
			update_cache(1);
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f7ff fe62 	bl	800b37c <update_cache>
 800b6b8:	e7c1      	b.n	800b63e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 800b6ba:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 800b6bc:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800b6be:	6025      	str	r5, [r4, #0]
	prev->next = node;
 800b6c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800b6c2:	606c      	str	r4, [r5, #4]
}
 800b6c4:	e7f5      	b.n	800b6b2 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	e7dc      	b.n	800b684 <z_set_prio+0x6c>
}
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d0:	200013b0 	.word	0x200013b0
 800b6d4:	20001394 	.word	0x20001394

0800b6d8 <z_impl_k_thread_suspend>:
{
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800b6dc:	3018      	adds	r0, #24
 800b6de:	f004 fb33 	bl	800fd48 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 800b6e2:	2300      	movs	r3, #0
	__asm__ volatile(
 800b6e4:	f04f 0210 	mov.w	r2, #16
 800b6e8:	f3ef 8511 	mrs	r5, BASEPRI
 800b6ec:	f382 8812 	msr	BASEPRI_MAX, r2
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	e010      	b.n	800b718 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800b6f6:	7b63      	ldrb	r3, [r4, #13]
 800b6f8:	f043 0310 	orr.w	r3, r3, #16
 800b6fc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800b6fe:	4b15      	ldr	r3, [pc, #84]	; (800b754 <z_impl_k_thread_suspend+0x7c>)
 800b700:	6898      	ldr	r0, [r3, #8]
 800b702:	42a0      	cmp	r0, r4
 800b704:	bf14      	ite	ne
 800b706:	2000      	movne	r0, #0
 800b708:	2001      	moveq	r0, #1
 800b70a:	f7ff fe37 	bl	800b37c <update_cache>
	__asm__ volatile(
 800b70e:	f385 8811 	msr	BASEPRI, r5
 800b712:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b716:	2301      	movs	r3, #1
 800b718:	b963      	cbnz	r3, 800b734 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 800b71a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 800b71c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800b720:	2b00      	cmp	r3, #0
 800b722:	dae8      	bge.n	800b6f6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b724:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b728:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b72a:	4621      	mov	r1, r4
 800b72c:	480a      	ldr	r0, [pc, #40]	; (800b758 <z_impl_k_thread_suspend+0x80>)
 800b72e:	f004 f95b 	bl	800f9e8 <z_priq_dumb_remove>
}
 800b732:	e7e0      	b.n	800b6f6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 800b734:	4b07      	ldr	r3, [pc, #28]	; (800b754 <z_impl_k_thread_suspend+0x7c>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	d000      	beq.n	800b73e <z_impl_k_thread_suspend+0x66>
}
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800b73e:	f04f 0310 	mov.w	r3, #16
 800b742:	f3ef 8011 	mrs	r0, BASEPRI
 800b746:	f383 8812 	msr	BASEPRI_MAX, r3
 800b74a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800b74e:	f004 f936 	bl	800f9be <z_reschedule_irqlock>
 800b752:	e7f3      	b.n	800b73c <z_impl_k_thread_suspend+0x64>
 800b754:	20001394 	.word	0x20001394
 800b758:	200013b0 	.word	0x200013b0

0800b75c <k_sched_unlock>:

void k_sched_unlock(void)
{
 800b75c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 800b75e:	2300      	movs	r3, #0
 800b760:	f04f 0210 	mov.w	r2, #16
 800b764:	f3ef 8411 	mrs	r4, BASEPRI
 800b768:	f382 8812 	msr	BASEPRI_MAX, r2
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	e00c      	b.n	800b78c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 800b772:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <k_sched_unlock+0x4c>)
 800b774:	689a      	ldr	r2, [r3, #8]
 800b776:	7bd3      	ldrb	r3, [r2, #15]
 800b778:	3301      	adds	r3, #1
 800b77a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 800b77c:	2000      	movs	r0, #0
 800b77e:	f7ff fdfd 	bl	800b37c <update_cache>
	__asm__ volatile(
 800b782:	f384 8811 	msr	BASEPRI, r4
 800b786:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800b78a:	2301      	movs	r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f0      	beq.n	800b772 <k_sched_unlock+0x16>
	__asm__ volatile(
 800b790:	f04f 0310 	mov.w	r3, #16
 800b794:	f3ef 8011 	mrs	r0, BASEPRI
 800b798:	f383 8812 	msr	BASEPRI_MAX, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f004 f90d 	bl	800f9be <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20001394 	.word	0x20001394

0800b7ac <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 800b7ac:	7b43      	ldrb	r3, [r0, #13]
 800b7ae:	f013 0f08 	tst.w	r3, #8
 800b7b2:	d142      	bne.n	800b83a <end_thread+0x8e>
{
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 800b7b8:	f043 0308 	orr.w	r3, r3, #8
 800b7bc:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800b7be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7c2:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 800b7c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7c8:	d12b      	bne.n	800b822 <end_thread+0x76>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 800b7ca:	68ab      	ldr	r3, [r5, #8]
 800b7cc:	b15b      	cbz	r3, 800b7e6 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f004 f8c9 	bl	800f966 <pended_on_thread>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f004 f907 	bl	800f9e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800b7da:	7b6b      	ldrb	r3, [r5, #13]
 800b7dc:	f023 0302 	bic.w	r3, r3, #2
 800b7e0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60ab      	str	r3, [r5, #8]
 800b7e6:	f105 0018 	add.w	r0, r5, #24
 800b7ea:	f004 faad 	bl	800fd48 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800b7ee:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800b7f0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b7f2:	42ac      	cmp	r4, r5
 800b7f4:	d01d      	beq.n	800b832 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 800b7f6:	b1e4      	cbz	r4, 800b832 <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f004 f8b4 	bl	800f966 <pended_on_thread>
 800b7fe:	4621      	mov	r1, r4
 800b800:	f004 f8f2 	bl	800f9e8 <z_priq_dumb_remove>
 800b804:	7b63      	ldrb	r3, [r4, #13]
 800b806:	f023 0302 	bic.w	r3, r3, #2
 800b80a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800b80c:	2600      	movs	r6, #0
 800b80e:	60a6      	str	r6, [r4, #8]
 800b810:	f104 0018 	add.w	r0, r4, #24
 800b814:	f004 fa98 	bl	800fd48 <z_abort_timeout>
 800b818:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7ff fe6e 	bl	800b4fc <ready_thread>
 800b820:	e7e6      	b.n	800b7f0 <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b826:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b828:	4601      	mov	r1, r0
 800b82a:	4804      	ldr	r0, [pc, #16]	; (800b83c <end_thread+0x90>)
 800b82c:	f004 f8dc 	bl	800f9e8 <z_priq_dumb_remove>
}
 800b830:	e7cb      	b.n	800b7ca <end_thread+0x1e>
		update_cache(1);
 800b832:	2001      	movs	r0, #1
 800b834:	f7ff fda2 	bl	800b37c <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 800b838:	bd70      	pop	{r4, r5, r6, pc}
 800b83a:	4770      	bx	lr
 800b83c:	200013b0 	.word	0x200013b0

0800b840 <z_sched_init>:
{
 800b840:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 800b842:	4804      	ldr	r0, [pc, #16]	; (800b854 <z_sched_init+0x14>)
 800b844:	f004 f9f5 	bl	800fc32 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800b848:	2100      	movs	r1, #0
 800b84a:	4608      	mov	r0, r1
 800b84c:	f7ff fd32 	bl	800b2b4 <k_sched_time_slice_set>
}
 800b850:	bd08      	pop	{r3, pc}
 800b852:	bf00      	nop
 800b854:	200013ac 	.word	0x200013ac

0800b858 <z_impl_k_yield>:
{
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	f04f 0310 	mov.w	r3, #16
 800b85e:	f3ef 8611 	mrs	r6, BASEPRI
 800b862:	f383 8812 	msr	BASEPRI_MAX, r3
 800b866:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 800b86a:	4c1c      	ldr	r4, [pc, #112]	; (800b8dc <z_impl_k_yield+0x84>)
 800b86c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800b86e:	7b4b      	ldrb	r3, [r1, #13]
 800b870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b874:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 800b876:	f104 071c 	add.w	r7, r4, #28
 800b87a:	4638      	mov	r0, r7
 800b87c:	f004 f8b4 	bl	800f9e8 <z_priq_dumb_remove>
	queue_thread(_current);
 800b880:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 800b882:	7b6b      	ldrb	r3, [r5, #13]
 800b884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b888:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 800b88a:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800b88c:	42bc      	cmp	r4, r7
 800b88e:	d023      	beq.n	800b8d8 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b890:	b16c      	cbz	r4, 800b8ae <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800b892:	4621      	mov	r1, r4
 800b894:	4628      	mov	r0, r5
 800b896:	f004 f868 	bl	800f96a <z_sched_prio_cmp>
 800b89a:	2800      	cmp	r0, #0
 800b89c:	dc16      	bgt.n	800b8cc <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800b89e:	b134      	cbz	r4, 800b8ae <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <z_impl_k_yield+0x84>)
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	d002      	beq.n	800b8ae <z_impl_k_yield+0x56>
 800b8a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	d1f0      	bne.n	800b890 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <z_impl_k_yield+0x84>)
 800b8b0:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 800b8b2:	f103 011c 	add.w	r1, r3, #28
 800b8b6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 800b8b8:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800b8ba:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800b8bc:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800b8be:	2001      	movs	r0, #1
 800b8c0:	f7ff fd5c 	bl	800b37c <update_cache>
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7f9 fb19 	bl	8004efc <arch_swap>
}
 800b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800b8cc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800b8ce:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800b8d0:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800b8d2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800b8d4:	6065      	str	r5, [r4, #4]
}
 800b8d6:	e7f2      	b.n	800b8be <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800b8d8:	2400      	movs	r4, #0
 800b8da:	e7d9      	b.n	800b890 <z_impl_k_yield+0x38>
 800b8dc:	20001394 	.word	0x20001394

0800b8e0 <z_tick_sleep>:
{
 800b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 800b8e4:	ea50 0301 	orrs.w	r3, r0, r1
 800b8e8:	d038      	beq.n	800b95c <z_tick_sleep+0x7c>
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800b8ee:	f06f 0301 	mvn.w	r3, #1
 800b8f2:	1a1b      	subs	r3, r3, r0
 800b8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8f8:	eb62 0201 	sbc.w	r2, r2, r1
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	f172 0300 	sbcs.w	r3, r2, #0
 800b902:	db2f      	blt.n	800b964 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 800b904:	f06f 0501 	mvn.w	r5, #1
 800b908:	1a2d      	subs	r5, r5, r0
 800b90a:	f04f 0310 	mov.w	r3, #16
 800b90e:	f3ef 8811 	mrs	r8, BASEPRI
 800b912:	f383 8812 	msr	BASEPRI_MAX, r3
 800b916:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800b91a:	4f14      	ldr	r7, [pc, #80]	; (800b96c <z_tick_sleep+0x8c>)
 800b91c:	68b8      	ldr	r0, [r7, #8]
 800b91e:	4b14      	ldr	r3, [pc, #80]	; (800b970 <z_tick_sleep+0x90>)
 800b920:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 800b922:	f7ff fe49 	bl	800b5b8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800b926:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 800b928:	4622      	mov	r2, r4
 800b92a:	4633      	mov	r3, r6
 800b92c:	4911      	ldr	r1, [pc, #68]	; (800b974 <z_tick_sleep+0x94>)
 800b92e:	3018      	adds	r0, #24
 800b930:	f000 f8ee 	bl	800bb10 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800b934:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800b936:	7b53      	ldrb	r3, [r2, #13]
 800b938:	f043 0310 	orr.w	r3, r3, #16
 800b93c:	7353      	strb	r3, [r2, #13]
 800b93e:	4640      	mov	r0, r8
 800b940:	f7f9 fadc 	bl	8004efc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 800b944:	f004 fa49 	bl	800fdda <sys_clock_tick_get_32>
 800b948:	1a28      	subs	r0, r5, r0
 800b94a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 800b94e:	2801      	cmp	r0, #1
 800b950:	f173 0300 	sbcs.w	r3, r3, #0
 800b954:	da00      	bge.n	800b958 <z_tick_sleep+0x78>
	return 0;
 800b956:	2000      	movs	r0, #0
}
 800b958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 800b95c:	f7ff ff7c 	bl	800b858 <z_impl_k_yield>
		return 0;
 800b960:	2000      	movs	r0, #0
 800b962:	e7f9      	b.n	800b958 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 800b964:	f004 fa39 	bl	800fdda <sys_clock_tick_get_32>
 800b968:	1905      	adds	r5, r0, r4
 800b96a:	e7ce      	b.n	800b90a <z_tick_sleep+0x2a>
 800b96c:	20001394 	.word	0x20001394
 800b970:	200013cc 	.word	0x200013cc
 800b974:	0800fa87 	.word	0x0800fa87

0800b978 <z_impl_k_sleep>:
{
 800b978:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800b97a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b97e:	bf08      	it	eq
 800b980:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 800b984:	d007      	beq.n	800b996 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 800b986:	f7ff ffab 	bl	800b8e0 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 800b98a:	220a      	movs	r2, #10
 800b98c:	2300      	movs	r3, #0
 800b98e:	17c1      	asrs	r1, r0, #31
 800b990:	f7f5 f824 	bl	80009dc <__aeabi_uldivmod>
}
 800b994:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 800b996:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <z_impl_k_sleep+0x2c>)
 800b998:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 800b99a:	f7ff fe9d 	bl	800b6d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 800b99e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9a2:	e7f7      	b.n	800b994 <z_impl_k_sleep+0x1c>
 800b9a4:	20001394 	.word	0x20001394

0800b9a8 <z_impl_z_current_get>:
}
 800b9a8:	4b01      	ldr	r3, [pc, #4]	; (800b9b0 <z_impl_z_current_get+0x8>)
 800b9aa:	6898      	ldr	r0, [r3, #8]
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	20001394 	.word	0x20001394

0800b9b4 <z_impl_k_is_preempt_thread>:
 800b9b4:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 800b9b8:	b933      	cbnz	r3, 800b9c8 <z_impl_k_is_preempt_thread+0x14>
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <z_impl_k_is_preempt_thread+0x1c>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800b9be:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 800b9c0:	2b7f      	cmp	r3, #127	; 0x7f
 800b9c2:	d803      	bhi.n	800b9cc <z_impl_k_is_preempt_thread+0x18>
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	4770      	bx	lr
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	4770      	bx	lr
 800b9cc:	2000      	movs	r0, #0
}
 800b9ce:	4770      	bx	lr
 800b9d0:	20001394 	.word	0x20001394

0800b9d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	f04f 0310 	mov.w	r3, #16
 800b9da:	f3ef 8511 	mrs	r5, BASEPRI
 800b9de:	f383 8812 	msr	BASEPRI_MAX, r3
 800b9e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 800b9e6:	7b43      	ldrb	r3, [r0, #13]
 800b9e8:	f013 0f08 	tst.w	r3, #8
 800b9ec:	d004      	beq.n	800b9f8 <z_thread_abort+0x24>
	__asm__ volatile(
 800b9ee:	f385 8811 	msr	BASEPRI, r5
 800b9f2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	4604      	mov	r4, r0
	end_thread(thread);
 800b9fa:	f7ff fed7 	bl	800b7ac <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800b9fe:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <z_thread_abort+0x4c>)
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	d004      	beq.n	800ba10 <z_thread_abort+0x3c>
 800ba06:	f385 8811 	msr	BASEPRI, r5
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	e7f2      	b.n	800b9f6 <z_thread_abort+0x22>
 800ba10:	f3ef 8305 	mrs	r3, IPSR
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1f6      	bne.n	800ba06 <z_thread_abort+0x32>
 800ba18:	4628      	mov	r0, r5
 800ba1a:	f7f9 fa6f 	bl	8004efc <arch_swap>
	return ret;
 800ba1e:	e7f2      	b.n	800ba06 <z_thread_abort+0x32>
 800ba20:	20001394 	.word	0x20001394

0800ba24 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 800ba24:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800ba2c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 800ba30:	e9cd bc00 	strd	fp, ip, [sp]
 800ba34:	f7ff fddc 	bl	800b5f0 <z_pend_curr>

	if (data != NULL) {
 800ba38:	b11c      	cbz	r4, 800ba42 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <z_sched_wait+0x24>)
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 800ba48:	20001394 	.word	0x20001394

0800ba4c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 800ba4c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 800ba4e:	4806      	ldr	r0, [pc, #24]	; (800ba68 <z_data_copy+0x1c>)
 800ba50:	4a06      	ldr	r2, [pc, #24]	; (800ba6c <z_data_copy+0x20>)
 800ba52:	1a12      	subs	r2, r2, r0
 800ba54:	4906      	ldr	r1, [pc, #24]	; (800ba70 <z_data_copy+0x24>)
 800ba56:	f004 fa94 	bl	800ff82 <memcpy>
 800ba5a:	4a06      	ldr	r2, [pc, #24]	; (800ba74 <z_data_copy+0x28>)
 800ba5c:	4906      	ldr	r1, [pc, #24]	; (800ba78 <z_data_copy+0x2c>)
 800ba5e:	4807      	ldr	r0, [pc, #28]	; (800ba7c <z_data_copy+0x30>)
 800ba60:	f004 fa8f 	bl	800ff82 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800ba64:	bd08      	pop	{r3, pc}
 800ba66:	bf00      	nop
 800ba68:	20000000 	.word	0x20000000
 800ba6c:	20000540 	.word	0x20000540
 800ba70:	080123d0 	.word	0x080123d0
 800ba74:	00000000 	.word	0x00000000
 800ba78:	080123d0 	.word	0x080123d0
 800ba7c:	20000000 	.word	0x20000000

0800ba80 <first>:
	return list->head == list;
 800ba80:	4b03      	ldr	r3, [pc, #12]	; (800ba90 <first+0x10>)
 800ba82:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800ba84:	4298      	cmp	r0, r3
 800ba86:	d000      	beq.n	800ba8a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 800ba88:	4770      	bx	lr
 800ba8a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 800ba8c:	e7fc      	b.n	800ba88 <first+0x8>
 800ba8e:	bf00      	nop
 800ba90:	20000104 	.word	0x20000104

0800ba94 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800ba94:	b130      	cbz	r0, 800baa4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 800ba96:	4a04      	ldr	r2, [pc, #16]	; (800baa8 <next+0x14>)
 800ba98:	6852      	ldr	r2, [r2, #4]
 800ba9a:	4290      	cmp	r0, r2
 800ba9c:	d001      	beq.n	800baa2 <next+0xe>
 800ba9e:	6800      	ldr	r0, [r0, #0]
 800baa0:	4770      	bx	lr
 800baa2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20000104 	.word	0x20000104

0800baac <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800baac:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800baae:	4b04      	ldr	r3, [pc, #16]	; (800bac0 <elapsed+0x14>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	b10b      	cbz	r3, 800bab8 <elapsed+0xc>
 800bab4:	2000      	movs	r0, #0
}
 800bab6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800bab8:	f7fe f8f8 	bl	8009cac <sys_clock_elapsed>
 800babc:	e7fb      	b.n	800bab6 <elapsed+0xa>
 800babe:	bf00      	nop
 800bac0:	200013dc 	.word	0x200013dc

0800bac4 <next_timeout>:

static int32_t next_timeout(void)
{
 800bac4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 800bac6:	f7ff ffdb 	bl	800ba80 <first>
 800baca:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800bacc:	f7ff ffee 	bl	800baac <elapsed>
	int32_t ret;

	if ((to == NULL) ||
 800bad0:	b17c      	cbz	r4, 800baf2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
 800bad2:	6923      	ldr	r3, [r4, #16]
 800bad4:	6962      	ldr	r2, [r4, #20]
 800bad6:	1a1b      	subs	r3, r3, r0
 800bad8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
 800badc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bae0:	f170 0200 	sbcs.w	r2, r0, #0
 800bae4:	da08      	bge.n	800baf8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
 800bae6:	2800      	cmp	r0, #0
 800bae8:	db01      	blt.n	800baee <next_timeout+0x2a>
 800baea:	4618      	mov	r0, r3
 800baec:	e006      	b.n	800bafc <next_timeout+0x38>
 800baee:	2300      	movs	r3, #0
 800baf0:	e7fb      	b.n	800baea <next_timeout+0x26>
		ret = MAX_WAIT;
 800baf2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800baf6:	e001      	b.n	800bafc <next_timeout+0x38>
 800baf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800bafc:	4b03      	ldr	r3, [pc, #12]	; (800bb0c <next_timeout+0x48>)
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	b113      	cbz	r3, 800bb08 <next_timeout+0x44>
 800bb02:	4283      	cmp	r3, r0
 800bb04:	da00      	bge.n	800bb08 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
 800bb06:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 800bb08:	bd10      	pop	{r4, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20001394 	.word	0x20001394

0800bb10 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb14:	bf08      	it	eq
 800bb16:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800bb1a:	d07d      	beq.n	800bc18 <z_add_timeout+0x108>
{
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	4692      	mov	sl, r2
 800bb24:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800bb26:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 800bb28:	2300      	movs	r3, #0
	__asm__ volatile(
 800bb2a:	f04f 0210 	mov.w	r2, #16
 800bb2e:	f3ef 8711 	mrs	r7, BASEPRI
 800bb32:	f382 8812 	msr	BASEPRI_MAX, r2
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	e021      	b.n	800bb80 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800bb3c:	f11a 0801 	adds.w	r8, sl, #1
 800bb40:	f145 0900 	adc.w	r9, r5, #0
 800bb44:	f7ff ffb2 	bl	800baac <elapsed>
 800bb48:	eb18 0300 	adds.w	r3, r8, r0
 800bb4c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
 800bb50:	6123      	str	r3, [r4, #16]
 800bb52:	6160      	str	r0, [r4, #20]
 800bb54:	e036      	b.n	800bbc4 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 800bb56:	1a51      	subs	r1, r2, r1
 800bb58:	eb66 0303 	sbc.w	r3, r6, r3
 800bb5c:	6101      	str	r1, [r0, #16]
 800bb5e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 800bb60:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 800bb62:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800bb64:	6020      	str	r0, [r4, #0]
	prev->next = node;
 800bb66:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800bb68:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	d03e      	beq.n	800bbec <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 800bb6e:	f7ff ff87 	bl	800ba80 <first>
 800bb72:	4284      	cmp	r4, r0
 800bb74:	d041      	beq.n	800bbfa <z_add_timeout+0xea>
	__asm__ volatile(
 800bb76:	f387 8811 	msr	BASEPRI, r7
 800bb7a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800bb7e:	2301      	movs	r3, #1
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d147      	bne.n	800bc14 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 800bb84:	4653      	mov	r3, sl
 800bb86:	f06f 0101 	mvn.w	r1, #1
 800bb8a:	ebb1 010a 	subs.w	r1, r1, sl
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb92:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	dbd0      	blt.n	800bb3c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 800bb9a:	4a20      	ldr	r2, [pc, #128]	; (800bc1c <z_add_timeout+0x10c>)
 800bb9c:	6811      	ldr	r1, [r2, #0]
 800bb9e:	6852      	ldr	r2, [r2, #4]
 800bba0:	185b      	adds	r3, r3, r1
 800bba2:	eb42 0205 	adc.w	r2, r2, r5
 800bba6:	f06f 0101 	mvn.w	r1, #1
 800bbaa:	1acb      	subs	r3, r1, r3
 800bbac:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	f172 0300 	sbcs.w	r3, r2, #0
 800bbba:	da01      	bge.n	800bbc0 <z_add_timeout+0xb0>
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	6120      	str	r0, [r4, #16]
 800bbc2:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800bbc4:	f7ff ff5c 	bl	800ba80 <first>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d0ce      	beq.n	800bb6a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 800bbcc:	6902      	ldr	r2, [r0, #16]
 800bbce:	6946      	ldr	r6, [r0, #20]
 800bbd0:	6921      	ldr	r1, [r4, #16]
 800bbd2:	6963      	ldr	r3, [r4, #20]
 800bbd4:	4291      	cmp	r1, r2
 800bbd6:	eb73 0c06 	sbcs.w	ip, r3, r6
 800bbda:	dbbc      	blt.n	800bb56 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 800bbdc:	1a89      	subs	r1, r1, r2
 800bbde:	eb63 0306 	sbc.w	r3, r3, r6
 800bbe2:	6121      	str	r1, [r4, #16]
 800bbe4:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800bbe6:	f7ff ff55 	bl	800ba94 <next>
 800bbea:	e7ed      	b.n	800bbc8 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
 800bbec:	4b0c      	ldr	r3, [pc, #48]	; (800bc20 <z_add_timeout+0x110>)
 800bbee:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 800bbf0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 800bbf2:	6062      	str	r2, [r4, #4]
	tail->next = node;
 800bbf4:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800bbf6:	605c      	str	r4, [r3, #4]
}
 800bbf8:	e7b9      	b.n	800bb6e <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800bbfa:	f7ff ff63 	bl	800bac4 <next_timeout>

			if (next_time == 0 ||
 800bbfe:	4603      	mov	r3, r0
 800bc00:	b118      	cbz	r0, 800bc0a <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
 800bc02:	4a08      	ldr	r2, [pc, #32]	; (800bc24 <z_add_timeout+0x114>)
 800bc04:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800bc06:	4282      	cmp	r2, r0
 800bc08:	d0b5      	beq.n	800bb76 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fd ffcb 	bl	8009ba8 <sys_clock_set_timeout>
 800bc12:	e7b0      	b.n	800bb76 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 800bc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	20000cb0 	.word	0x20000cb0
 800bc20:	20000104 	.word	0x20000104
 800bc24:	20001394 	.word	0x20001394

0800bc28 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800bc2c:	f7ff fc10 	bl	800b450 <z_time_slice>
	__asm__ volatile(
 800bc30:	f04f 0310 	mov.w	r3, #16
 800bc34:	f3ef 8511 	mrs	r5, BASEPRI
 800bc38:	f383 8812 	msr	BASEPRI_MAX, r3
 800bc3c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 800bc40:	4b28      	ldr	r3, [pc, #160]	; (800bce4 <sys_clock_announce+0xbc>)
 800bc42:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800bc44:	e020      	b.n	800bc88 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 800bc46:	4828      	ldr	r0, [pc, #160]	; (800bce8 <sys_clock_announce+0xc0>)
 800bc48:	6801      	ldr	r1, [r0, #0]
 800bc4a:	6846      	ldr	r6, [r0, #4]
 800bc4c:	1889      	adds	r1, r1, r2
 800bc4e:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 800bc52:	6001      	str	r1, [r0, #0]
 800bc54:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 800bc56:	1a9b      	subs	r3, r3, r2
 800bc58:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <sys_clock_announce+0xbc>)
 800bc5a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 800bc64:	4620      	mov	r0, r4
 800bc66:	f004 f858 	bl	800fd1a <remove_timeout>
	__asm__ volatile(
 800bc6a:	f385 8811 	msr	BASEPRI, r5
 800bc6e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	4620      	mov	r0, r4
 800bc76:	4798      	blx	r3
	__asm__ volatile(
 800bc78:	f04f 0310 	mov.w	r3, #16
 800bc7c:	f3ef 8511 	mrs	r5, BASEPRI
 800bc80:	f383 8812 	msr	BASEPRI_MAX, r3
 800bc84:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 800bc88:	f7ff fefa 	bl	800ba80 <first>
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	b140      	cbz	r0, 800bca2 <sys_clock_announce+0x7a>
 800bc90:	6902      	ldr	r2, [r0, #16]
 800bc92:	6941      	ldr	r1, [r0, #20]
 800bc94:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <sys_clock_announce+0xbc>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	17d8      	asrs	r0, r3, #31
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	eb70 0101 	sbcs.w	r1, r0, r1
 800bca0:	dad1      	bge.n	800bc46 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 800bca2:	b144      	cbz	r4, 800bcb6 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 800bca4:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <sys_clock_announce+0xbc>)
 800bca6:	6819      	ldr	r1, [r3, #0]
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	6962      	ldr	r2, [r4, #20]
 800bcac:	1a5b      	subs	r3, r3, r1
 800bcae:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800bcb6:	4a0c      	ldr	r2, [pc, #48]	; (800bce8 <sys_clock_announce+0xc0>)
 800bcb8:	4e0a      	ldr	r6, [pc, #40]	; (800bce4 <sys_clock_announce+0xbc>)
 800bcba:	6830      	ldr	r0, [r6, #0]
 800bcbc:	6813      	ldr	r3, [r2, #0]
 800bcbe:	6851      	ldr	r1, [r2, #4]
 800bcc0:	181b      	adds	r3, r3, r0
 800bcc2:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800bcca:	2400      	movs	r4, #0
 800bccc:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 800bcce:	f7ff fef9 	bl	800bac4 <next_timeout>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	f7fd ff68 	bl	8009ba8 <sys_clock_set_timeout>
	__asm__ volatile(
 800bcd8:	f385 8811 	msr	BASEPRI, r5
 800bcdc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	bf00      	nop
 800bce4:	200013dc 	.word	0x200013dc
 800bce8:	20000cb0 	.word	0x20000cb0

0800bcec <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 800bcec:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 800bcee:	2300      	movs	r3, #0
	__asm__ volatile(
 800bcf0:	f04f 0210 	mov.w	r2, #16
 800bcf4:	f3ef 8411 	mrs	r4, BASEPRI
 800bcf8:	f382 8812 	msr	BASEPRI_MAX, r2
 800bcfc:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 800bd00:	4618      	mov	r0, r3
 800bd02:	4619      	mov	r1, r3
 800bd04:	e00c      	b.n	800bd20 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800bd06:	f7fd ffd1 	bl	8009cac <sys_clock_elapsed>
 800bd0a:	4a07      	ldr	r2, [pc, #28]	; (800bd28 <sys_clock_tick_get+0x3c>)
 800bd0c:	6813      	ldr	r3, [r2, #0]
 800bd0e:	6851      	ldr	r1, [r2, #4]
 800bd10:	18c0      	adds	r0, r0, r3
 800bd12:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800bd16:	f384 8811 	msr	BASEPRI, r4
 800bd1a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800bd1e:	2301      	movs	r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0f0      	beq.n	800bd06 <sys_clock_tick_get+0x1a>
	}
	return t;
}
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	bf00      	nop
 800bd28:	20000cb0 	.word	0x20000cb0

0800bd2c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 800bd2c:	b900      	cbnz	r0, 800bd30 <z_impl_k_busy_wait+0x4>
 800bd2e:	4770      	bx	lr
{
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 800bd34:	f7fd ffda 	bl	8009cec <sys_clock_cycle_get_32>
 800bd38:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800bd3a:	4907      	ldr	r1, [pc, #28]	; (800bd58 <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 800bd3c:	4a07      	ldr	r2, [pc, #28]	; (800bd5c <z_impl_k_busy_wait+0x30>)
 800bd3e:	2300      	movs	r3, #0
 800bd40:	fba4 0101 	umull	r0, r1, r4, r1
 800bd44:	f7f4 fe4a 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 800bd48:	4604      	mov	r4, r0
 800bd4a:	f7fd ffcf 	bl	8009cec <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800bd4e:	1b40      	subs	r0, r0, r5
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d3fa      	bcc.n	800bd4a <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 800bd54:	bd38      	pop	{r3, r4, r5, pc}
 800bd56:	bf00      	nop
 800bd58:	04c4b400 	.word	0x04c4b400
 800bd5c:	000f4240 	.word	0x000f4240

0800bd60 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 800bd60:	b570      	push	{r4, r5, r6, lr}
 800bd62:	4604      	mov	r4, r0
	__asm__ volatile(
 800bd64:	f04f 0310 	mov.w	r3, #16
 800bd68:	f3ef 8611 	mrs	r6, BASEPRI
 800bd6c:	f383 8812 	msr	BASEPRI_MAX, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 800bd76:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bd7a:	ea52 0103 	orrs.w	r1, r2, r3
 800bd7e:	d005      	beq.n	800bd8c <z_timer_expiration_handler+0x2c>
 800bd80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd84:	bf08      	it	eq
 800bd86:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800bd8a:	d126      	bne.n	800bdda <z_timer_expiration_handler+0x7a>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 800bd8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bd8e:	3301      	adds	r3, #1
 800bd90:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 800bd92:	6a23      	ldr	r3, [r4, #32]
 800bd94:	b173      	cbz	r3, 800bdb4 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 800bd96:	f386 8811 	msr	BASEPRI, r6
 800bd9a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 800bd9e:	6a23      	ldr	r3, [r4, #32]
 800bda0:	4620      	mov	r0, r4
 800bda2:	4798      	blx	r3
	__asm__ volatile(
 800bda4:	f04f 0310 	mov.w	r3, #16
 800bda8:	f3ef 8511 	mrs	r5, BASEPRI
 800bdac:	f383 8812 	msr	BASEPRI_MAX, r3
 800bdb0:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 800bdb4:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 800bdb8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d013      	beq.n	800bde6 <z_timer_expiration_handler+0x86>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 800bdbe:	b194      	cbz	r4, 800bde6 <z_timer_expiration_handler+0x86>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f003 fddc 	bl	800f97e <z_unpend_thread_no_timeout>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 800bdca:	f385 8811 	msr	BASEPRI, r5
 800bdce:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f003 fe3b 	bl	800fa4e <z_ready_thread>
}
 800bdd8:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800bdda:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800bdde:	4904      	ldr	r1, [pc, #16]	; (800bdf0 <z_timer_expiration_handler+0x90>)
 800bde0:	f7ff fe96 	bl	800bb10 <z_add_timeout>
 800bde4:	e7d2      	b.n	800bd8c <z_timer_expiration_handler+0x2c>
 800bde6:	f385 8811 	msr	BASEPRI, r5
 800bdea:	f3bf 8f6f 	isb	sy
		return;
 800bdee:	e7f3      	b.n	800bdd8 <z_timer_expiration_handler+0x78>
 800bdf0:	0800bd61 	.word	0x0800bd61

0800bdf4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf8:	9f06      	ldr	r7, [sp, #24]
 800bdfa:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be02:	bf08      	it	eq
 800be04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800be08:	d02f      	beq.n	800be6a <z_impl_k_timer_start+0x76>
 800be0a:	4605      	mov	r5, r0
 800be0c:	4614      	mov	r4, r2
 800be0e:	461e      	mov	r6, r3
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800be14:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800be18:	bf08      	it	eq
 800be1a:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
 800be1e:	d00d      	beq.n	800be3c <z_impl_k_timer_start+0x48>
 800be20:	ea57 0c08 	orrs.w	ip, r7, r8
 800be24:	d00a      	beq.n	800be3c <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
 800be26:	f06f 0c01 	mvn.w	ip, #1
 800be2a:	ebbc 0c07 	subs.w	ip, ip, r7
 800be2e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800be32:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800be36:	f1bc 0f00 	cmp.w	ip, #0
 800be3a:	db18      	blt.n	800be6e <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 800be3c:	f06f 0301 	mvn.w	r3, #1
 800be40:	1a5b      	subs	r3, r3, r1
 800be42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be46:	eb63 0300 	sbc.w	r3, r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	db1a      	blt.n	800be84 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 800be4e:	4628      	mov	r0, r5
 800be50:	f003 ff7a 	bl	800fd48 <z_abort_timeout>
	timer->period = period;
 800be54:	62af      	str	r7, [r5, #40]	; 0x28
 800be56:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 800be5e:	4622      	mov	r2, r4
 800be60:	4633      	mov	r3, r6
 800be62:	490e      	ldr	r1, [pc, #56]	; (800be9c <z_impl_k_timer_start+0xa8>)
 800be64:	4628      	mov	r0, r5
 800be66:	f7ff fe53 	bl	800bb10 <z_add_timeout>
		     duration);
}
 800be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 800be6e:	2f02      	cmp	r7, #2
 800be70:	f178 0300 	sbcs.w	r3, r8, #0
 800be74:	da02      	bge.n	800be7c <z_impl_k_timer_start+0x88>
 800be76:	2702      	movs	r7, #2
 800be78:	f04f 0800 	mov.w	r8, #0
 800be7c:	3f01      	subs	r7, #1
 800be7e:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
 800be82:	e7db      	b.n	800be3c <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
 800be84:	460c      	mov	r4, r1
 800be86:	4606      	mov	r6, r0
 800be88:	2901      	cmp	r1, #1
 800be8a:	f170 0300 	sbcs.w	r3, r0, #0
 800be8e:	da01      	bge.n	800be94 <z_impl_k_timer_start+0xa0>
 800be90:	2401      	movs	r4, #1
 800be92:	2600      	movs	r6, #0
 800be94:	3c01      	subs	r4, #1
 800be96:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
 800be9a:	e7d8      	b.n	800be4e <z_impl_k_timer_start+0x5a>
 800be9c:	0800bd61 	.word	0x0800bd61

0800bea0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	b087      	sub	sp, #28
 800bea6:	4682      	mov	sl, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	4693      	mov	fp, r2
 800beac:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 800beae:	2500      	movs	r5, #0
	int events_registered = 0;
 800beb0:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 800beb2:	e02f      	b.n	800bf14 <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 800beb4:	6923      	ldr	r3, [r4, #16]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	b1cb      	cbz	r3, 800beee <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 800beba:	f04f 0902 	mov.w	r9, #2
			return true;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e015      	b.n	800beee <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800bec2:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	b193      	cbz	r3, 800beee <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 800bec8:	f04f 0904 	mov.w	r9, #4
			return true;
 800becc:	2301      	movs	r3, #1
 800bece:	e00e      	b.n	800beee <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	b15b      	cbz	r3, 800beee <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800bed6:	f04f 0901 	mov.w	r9, #1
			return true;
 800beda:	464b      	mov	r3, r9
 800bedc:	e007      	b.n	800beee <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	b123      	cbz	r3, 800beee <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800bee4:	f04f 0910 	mov.w	r9, #16
			return true;
 800bee8:	2301      	movs	r3, #1
 800beea:	e000      	b.n	800beee <register_events+0x4e>
	switch (event->type) {
 800beec:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d03a      	beq.n	800bf68 <register_events+0xc8>
	event->poller = NULL;
 800bef2:	2100      	movs	r1, #0
 800bef4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	f3c3 3245 	ubfx	r2, r3, #13, #6
 800befc:	ea49 0202 	orr.w	r2, r9, r2
 800bf00:	f362 3352 	bfi	r3, r2, #13, #6
 800bf04:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800bf06:	f88b 1000 	strb.w	r1, [fp]
 800bf0a:	f386 8811 	msr	BASEPRI, r6
 800bf0e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800bf12:	3501      	adds	r5, #1
 800bf14:	42bd      	cmp	r5, r7
 800bf16:	f280 81b9 	bge.w	800c28c <register_events+0x3ec>
	__asm__ volatile(
 800bf1a:	f04f 0310 	mov.w	r3, #16
 800bf1e:	f3ef 8611 	mrs	r6, BASEPRI
 800bf22:	f383 8812 	msr	BASEPRI_MAX, r3
 800bf26:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 800bf2a:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800bf2e:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800bf32:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800bf36:	7b63      	ldrb	r3, [r4, #13]
 800bf38:	f003 031f 	and.w	r3, r3, #31
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	2b07      	cmp	r3, #7
 800bf40:	d8d4      	bhi.n	800beec <register_events+0x4c>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <register_events+0xa8>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bed1 	.word	0x0800bed1
 800bf4c:	0800beb5 	.word	0x0800beb5
 800bf50:	0800beed 	.word	0x0800beed
 800bf54:	0800bec3 	.word	0x0800bec3
 800bf58:	0800beed 	.word	0x0800beed
 800bf5c:	0800beed 	.word	0x0800beed
 800bf60:	0800beed 	.word	0x0800beed
 800bf64:	0800bedf 	.word	0x0800bedf
		} else if (!just_check && poller->is_polling) {
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1cd      	bne.n	800bf0a <register_events+0x6a>
 800bf6e:	f89b 3000 	ldrb.w	r3, [fp]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0c9      	beq.n	800bf0a <register_events+0x6a>
	switch (event->type) {
 800bf76:	7b63      	ldrb	r3, [r4, #13]
 800bf78:	f003 031f 	and.w	r3, r3, #31
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	d848      	bhi.n	800c014 <register_events+0x174>
 800bf82:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf86:	00cb      	.short	0x00cb
 800bf88:	00470008 	.word	0x00470008
 800bf8c:	0047006d 	.word	0x0047006d
 800bf90:	00470047 	.word	0x00470047
 800bf94:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 800bf96:	6923      	ldr	r3, [r4, #16]
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	f103 0210 	add.w	r2, r3, #16
 800bf9e:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800bfa0:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d02f      	beq.n	800c006 <register_events+0x166>
 800bfa6:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d02c      	beq.n	800c006 <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800bfac:	6898      	ldr	r0, [r3, #8]
 800bfae:	f003 ff43 	bl	800fe38 <poller_thread>
 800bfb2:	9005      	str	r0, [sp, #20]
 800bfb4:	4658      	mov	r0, fp
 800bfb6:	f003 ff3f 	bl	800fe38 <poller_thread>
 800bfba:	4601      	mov	r1, r0
 800bfbc:	9003      	str	r0, [sp, #12]
 800bfbe:	9805      	ldr	r0, [sp, #20]
 800bfc0:	f003 fcd3 	bl	800f96a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	dc1e      	bgt.n	800c006 <register_events+0x166>
	return list->head == list;
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800bfcc:	9a02      	ldr	r2, [sp, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d030      	beq.n	800c034 <register_events+0x194>
 800bfd2:	9404      	str	r4, [sp, #16]
 800bfd4:	9505      	str	r5, [sp, #20]
 800bfd6:	9d02      	ldr	r5, [sp, #8]
 800bfd8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d030      	beq.n	800c040 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 800bfde:	68a0      	ldr	r0, [r4, #8]
 800bfe0:	f003 ff2a 	bl	800fe38 <poller_thread>
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	9803      	ldr	r0, [sp, #12]
 800bfe8:	f003 fcbf 	bl	800f96a <z_sched_prio_cmp>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	dc17      	bgt.n	800c020 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800bff0:	2c00      	cmp	r4, #0
 800bff2:	d028      	beq.n	800c046 <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800bff4:	686b      	ldr	r3, [r5, #4]
 800bff6:	429c      	cmp	r4, r3
 800bff8:	d02f      	beq.n	800c05a <register_events+0x1ba>
 800bffa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	d1ec      	bne.n	800bfda <register_events+0x13a>
 800c000:	9c04      	ldr	r4, [sp, #16]
 800c002:	9d05      	ldr	r5, [sp, #20]
 800c004:	e021      	b.n	800c04a <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800c006:	9a02      	ldr	r2, [sp, #8]
 800c008:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c00a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c00e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c010:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c012:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800c014:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 800c018:	9b01      	ldr	r3, [sp, #4]
 800c01a:	3301      	adds	r3, #1
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	e774      	b.n	800bf0a <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 800c020:	9d05      	ldr	r5, [sp, #20]
 800c022:	4622      	mov	r2, r4
 800c024:	9c04      	ldr	r4, [sp, #16]
 800c026:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c028:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c02a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c02e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c030:	6054      	str	r4, [r2, #4]
			return;
 800c032:	e7ef      	b.n	800c014 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c034:	2300      	movs	r3, #0
 800c036:	9404      	str	r4, [sp, #16]
 800c038:	9505      	str	r5, [sp, #20]
 800c03a:	9d02      	ldr	r5, [sp, #8]
 800c03c:	461c      	mov	r4, r3
 800c03e:	e7cc      	b.n	800bfda <register_events+0x13a>
 800c040:	9c04      	ldr	r4, [sp, #16]
 800c042:	9d05      	ldr	r5, [sp, #20]
 800c044:	e001      	b.n	800c04a <register_events+0x1aa>
 800c046:	9c04      	ldr	r4, [sp, #16]
 800c048:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c04a:	9a02      	ldr	r2, [sp, #8]
 800c04c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c04e:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c052:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c054:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c056:	6054      	str	r4, [r2, #4]
}
 800c058:	e7dc      	b.n	800c014 <register_events+0x174>
 800c05a:	9c04      	ldr	r4, [sp, #16]
 800c05c:	9d05      	ldr	r5, [sp, #20]
 800c05e:	e7f4      	b.n	800c04a <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	f103 0214 	add.w	r2, r3, #20
 800c068:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c06a:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d02d      	beq.n	800c0cc <register_events+0x22c>
 800c070:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c072:	b35b      	cbz	r3, 800c0cc <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c074:	6898      	ldr	r0, [r3, #8]
 800c076:	f003 fedf 	bl	800fe38 <poller_thread>
 800c07a:	9005      	str	r0, [sp, #20]
 800c07c:	4658      	mov	r0, fp
 800c07e:	f003 fedb 	bl	800fe38 <poller_thread>
 800c082:	4601      	mov	r1, r0
 800c084:	9003      	str	r0, [sp, #12]
 800c086:	9805      	ldr	r0, [sp, #20]
 800c088:	f003 fc6f 	bl	800f96a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c08c:	2800      	cmp	r0, #0
 800c08e:	dc1d      	bgt.n	800c0cc <register_events+0x22c>
	return list->head == list;
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c094:	9a02      	ldr	r2, [sp, #8]
 800c096:	429a      	cmp	r2, r3
 800c098:	d02a      	beq.n	800c0f0 <register_events+0x250>
 800c09a:	9404      	str	r4, [sp, #16]
 800c09c:	9505      	str	r5, [sp, #20]
 800c09e:	9d02      	ldr	r5, [sp, #8]
 800c0a0:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	d02a      	beq.n	800c0fc <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c0a6:	68a0      	ldr	r0, [r4, #8]
 800c0a8:	f003 fec6 	bl	800fe38 <poller_thread>
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	9803      	ldr	r0, [sp, #12]
 800c0b0:	f003 fc5b 	bl	800f96a <z_sched_prio_cmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	dc11      	bgt.n	800c0dc <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c0b8:	b31c      	cbz	r4, 800c102 <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 800c0ba:	686b      	ldr	r3, [r5, #4]
 800c0bc:	429c      	cmp	r4, r3
 800c0be:	d02a      	beq.n	800c116 <register_events+0x276>
 800c0c0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d1ed      	bne.n	800c0a2 <register_events+0x202>
 800c0c6:	9c04      	ldr	r4, [sp, #16]
 800c0c8:	9d05      	ldr	r5, [sp, #20]
 800c0ca:	e01c      	b.n	800c106 <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 800c0cc:	9a02      	ldr	r2, [sp, #8]
 800c0ce:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c0d0:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c0d4:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c0d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c0d8:	6054      	str	r4, [r2, #4]
		return;
 800c0da:	e79b      	b.n	800c014 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c0dc:	9d05      	ldr	r5, [sp, #20]
 800c0de:	4622      	mov	r2, r4
 800c0e0:	9c04      	ldr	r4, [sp, #16]
 800c0e2:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c0e4:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c0e6:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c0ea:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c0ec:	6054      	str	r4, [r2, #4]
			return;
 800c0ee:	e791      	b.n	800c014 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	9404      	str	r4, [sp, #16]
 800c0f4:	9505      	str	r5, [sp, #20]
 800c0f6:	9d02      	ldr	r5, [sp, #8]
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	e7d2      	b.n	800c0a2 <register_events+0x202>
 800c0fc:	9c04      	ldr	r4, [sp, #16]
 800c0fe:	9d05      	ldr	r5, [sp, #20]
 800c100:	e001      	b.n	800c106 <register_events+0x266>
 800c102:	9c04      	ldr	r4, [sp, #16]
 800c104:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c106:	9a02      	ldr	r2, [sp, #8]
 800c108:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c10a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c10e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c110:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c112:	6054      	str	r4, [r2, #4]
}
 800c114:	e77e      	b.n	800c014 <register_events+0x174>
 800c116:	9c04      	ldr	r4, [sp, #16]
 800c118:	9d05      	ldr	r5, [sp, #20]
 800c11a:	e7f4      	b.n	800c106 <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 800c11c:	6922      	ldr	r2, [r4, #16]
 800c11e:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c120:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c122:	429a      	cmp	r2, r3
 800c124:	d02c      	beq.n	800c180 <register_events+0x2e0>
 800c126:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c128:	b353      	cbz	r3, 800c180 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c12a:	6898      	ldr	r0, [r3, #8]
 800c12c:	f003 fe84 	bl	800fe38 <poller_thread>
 800c130:	9004      	str	r0, [sp, #16]
 800c132:	4658      	mov	r0, fp
 800c134:	f003 fe80 	bl	800fe38 <poller_thread>
 800c138:	4601      	mov	r1, r0
 800c13a:	9003      	str	r0, [sp, #12]
 800c13c:	9804      	ldr	r0, [sp, #16]
 800c13e:	f003 fc14 	bl	800f96a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c142:	2800      	cmp	r0, #0
 800c144:	dc1c      	bgt.n	800c180 <register_events+0x2e0>
	return list->head == list;
 800c146:	9b02      	ldr	r3, [sp, #8]
 800c148:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d02a      	beq.n	800c1a4 <register_events+0x304>
 800c14e:	9404      	str	r4, [sp, #16]
 800c150:	9505      	str	r5, [sp, #20]
 800c152:	9d02      	ldr	r5, [sp, #8]
 800c154:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c156:	2c00      	cmp	r4, #0
 800c158:	d02a      	beq.n	800c1b0 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c15a:	68a0      	ldr	r0, [r4, #8]
 800c15c:	f003 fe6c 	bl	800fe38 <poller_thread>
 800c160:	4601      	mov	r1, r0
 800c162:	9803      	ldr	r0, [sp, #12]
 800c164:	f003 fc01 	bl	800f96a <z_sched_prio_cmp>
 800c168:	2800      	cmp	r0, #0
 800c16a:	dc11      	bgt.n	800c190 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c16c:	b31c      	cbz	r4, 800c1b6 <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 800c16e:	686b      	ldr	r3, [r5, #4]
 800c170:	429c      	cmp	r4, r3
 800c172:	d02a      	beq.n	800c1ca <register_events+0x32a>
 800c174:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c176:	2c00      	cmp	r4, #0
 800c178:	d1ed      	bne.n	800c156 <register_events+0x2b6>
 800c17a:	9c04      	ldr	r4, [sp, #16]
 800c17c:	9d05      	ldr	r5, [sp, #20]
 800c17e:	e01c      	b.n	800c1ba <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 800c180:	9a02      	ldr	r2, [sp, #8]
 800c182:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c184:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c188:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c18a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c18c:	6054      	str	r4, [r2, #4]
		return;
 800c18e:	e741      	b.n	800c014 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c190:	9d05      	ldr	r5, [sp, #20]
 800c192:	4622      	mov	r2, r4
 800c194:	9c04      	ldr	r4, [sp, #16]
 800c196:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c198:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c19a:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c19e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c1a0:	6054      	str	r4, [r2, #4]
			return;
 800c1a2:	e737      	b.n	800c014 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	9404      	str	r4, [sp, #16]
 800c1a8:	9505      	str	r5, [sp, #20]
 800c1aa:	9d02      	ldr	r5, [sp, #8]
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	e7d2      	b.n	800c156 <register_events+0x2b6>
 800c1b0:	9c04      	ldr	r4, [sp, #16]
 800c1b2:	9d05      	ldr	r5, [sp, #20]
 800c1b4:	e001      	b.n	800c1ba <register_events+0x31a>
 800c1b6:	9c04      	ldr	r4, [sp, #16]
 800c1b8:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c1ba:	9a02      	ldr	r2, [sp, #8]
 800c1bc:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c1be:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c1c2:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c1c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c1c6:	6054      	str	r4, [r2, #4]
}
 800c1c8:	e724      	b.n	800c014 <register_events+0x174>
 800c1ca:	9c04      	ldr	r4, [sp, #16]
 800c1cc:	9d05      	ldr	r5, [sp, #20]
 800c1ce:	e7f4      	b.n	800c1ba <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 800c1d0:	6923      	ldr	r3, [r4, #16]
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800c1d8:	9202      	str	r2, [sp, #8]
	return list->head == list;
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d02d      	beq.n	800c23c <register_events+0x39c>
 800c1e0:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 800c1e2:	b35b      	cbz	r3, 800c23c <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 800c1e4:	6898      	ldr	r0, [r3, #8]
 800c1e6:	f003 fe27 	bl	800fe38 <poller_thread>
 800c1ea:	9005      	str	r0, [sp, #20]
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f003 fe23 	bl	800fe38 <poller_thread>
 800c1f2:	4601      	mov	r1, r0
 800c1f4:	9003      	str	r0, [sp, #12]
 800c1f6:	9805      	ldr	r0, [sp, #20]
 800c1f8:	f003 fbb7 	bl	800f96a <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	dc1d      	bgt.n	800c23c <register_events+0x39c>
	return list->head == list;
 800c200:	9b04      	ldr	r3, [sp, #16]
 800c202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800c204:	9a02      	ldr	r2, [sp, #8]
 800c206:	429a      	cmp	r2, r3
 800c208:	d02a      	beq.n	800c260 <register_events+0x3c0>
 800c20a:	9404      	str	r4, [sp, #16]
 800c20c:	9505      	str	r5, [sp, #20]
 800c20e:	9d02      	ldr	r5, [sp, #8]
 800c210:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c212:	2c00      	cmp	r4, #0
 800c214:	d02a      	beq.n	800c26c <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 800c216:	68a0      	ldr	r0, [r4, #8]
 800c218:	f003 fe0e 	bl	800fe38 <poller_thread>
 800c21c:	4601      	mov	r1, r0
 800c21e:	9803      	ldr	r0, [sp, #12]
 800c220:	f003 fba3 	bl	800f96a <z_sched_prio_cmp>
 800c224:	2800      	cmp	r0, #0
 800c226:	dc11      	bgt.n	800c24c <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800c228:	b31c      	cbz	r4, 800c272 <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 800c22a:	686b      	ldr	r3, [r5, #4]
 800c22c:	429c      	cmp	r4, r3
 800c22e:	d02a      	beq.n	800c286 <register_events+0x3e6>
 800c230:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c232:	2c00      	cmp	r4, #0
 800c234:	d1ed      	bne.n	800c212 <register_events+0x372>
 800c236:	9c04      	ldr	r4, [sp, #16]
 800c238:	9d05      	ldr	r5, [sp, #20]
 800c23a:	e01c      	b.n	800c276 <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 800c23c:	9a02      	ldr	r2, [sp, #8]
 800c23e:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c240:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c244:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c246:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c248:	6054      	str	r4, [r2, #4]
		return;
 800c24a:	e6e3      	b.n	800c014 <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 800c24c:	9d05      	ldr	r5, [sp, #20]
 800c24e:	4622      	mov	r2, r4
 800c250:	9c04      	ldr	r4, [sp, #16]
 800c252:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800c254:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800c256:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 800c25a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 800c25c:	6054      	str	r4, [r2, #4]
			return;
 800c25e:	e6d9      	b.n	800c014 <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800c260:	2300      	movs	r3, #0
 800c262:	9404      	str	r4, [sp, #16]
 800c264:	9505      	str	r5, [sp, #20]
 800c266:	9d02      	ldr	r5, [sp, #8]
 800c268:	461c      	mov	r4, r3
 800c26a:	e7d2      	b.n	800c212 <register_events+0x372>
 800c26c:	9c04      	ldr	r4, [sp, #16]
 800c26e:	9d05      	ldr	r5, [sp, #20]
 800c270:	e001      	b.n	800c276 <register_events+0x3d6>
 800c272:	9c04      	ldr	r4, [sp, #16]
 800c274:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800c276:	9a02      	ldr	r2, [sp, #8]
 800c278:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 800c27a:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800c27e:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800c280:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800c282:	6054      	str	r4, [r2, #4]
}
 800c284:	e6c6      	b.n	800c014 <register_events+0x174>
 800c286:	9c04      	ldr	r4, [sp, #16]
 800c288:	9d05      	ldr	r5, [sp, #20]
 800c28a:	e7f4      	b.n	800c276 <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 800c28c:	9801      	ldr	r0, [sp, #4]
 800c28e:	b007      	add	sp, #28
 800c290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c294 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 800c294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c298:	b082      	sub	sp, #8
 800c29a:	4605      	mov	r5, r0
 800c29c:	4690      	mov	r8, r2
 800c29e:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 800c2a0:	4b4f      	ldr	r3, [pc, #316]	; (800c3e0 <z_impl_k_poll+0x14c>)
 800c2a2:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 800c2aa:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 800c2ae:	ea57 0302 	orrs.w	r3, r7, r2
 800c2b2:	bf0c      	ite	eq
 800c2b4:	2301      	moveq	r3, #1
 800c2b6:	2300      	movne	r3, #0
 800c2b8:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800c2bc:	f7ff fdf0 	bl	800bea0 <register_events>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	f04f 0310 	mov.w	r3, #16
 800c2c6:	f3ef 8111 	mrs	r1, BASEPRI
 800c2ca:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2ce:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 800c2d2:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 800c2d6:	b1b3      	cbz	r3, 800c306 <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800c2de:	ea57 0308 	orrs.w	r3, r7, r8
 800c2e2:	d043      	beq.n	800c36c <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 800c2e4:	f8cd 8000 	str.w	r8, [sp]
 800c2e8:	9701      	str	r7, [sp, #4]
 800c2ea:	4a3e      	ldr	r2, [pc, #248]	; (800c3e4 <z_impl_k_poll+0x150>)
 800c2ec:	483e      	ldr	r0, [pc, #248]	; (800c3e8 <z_impl_k_poll+0x154>)
 800c2ee:	f7ff f97f 	bl	800b5f0 <z_pend_curr>
 800c2f2:	f04f 0310 	mov.w	r3, #16
 800c2f6:	f3ef 8611 	mrs	r6, BASEPRI
 800c2fa:	f383 8812 	msr	BASEPRI_MAX, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	46b4      	mov	ip, r6
	while (num_events--) {
 800c304:	e04c      	b.n	800c3a0 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 800c306:	460e      	mov	r6, r1
	while (num_events--) {
 800c308:	e00c      	b.n	800c324 <z_impl_k_poll+0x90>
	__asm__ volatile(
 800c30a:	f386 8811 	msr	BASEPRI, r6
 800c30e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c312:	f04f 0310 	mov.w	r3, #16
 800c316:	f3ef 8611 	mrs	r6, BASEPRI
 800c31a:	f383 8812 	msr	BASEPRI_MAX, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	4604      	mov	r4, r0
 800c324:	1e60      	subs	r0, r4, #1
 800c326:	b1dc      	cbz	r4, 800c360 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 800c328:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800c32c:	009f      	lsls	r7, r3, #2
 800c32e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800c332:	2200      	movs	r2, #0
 800c334:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800c336:	7b5a      	ldrb	r2, [r3, #13]
 800c338:	f002 021f 	and.w	r2, r2, #31
 800c33c:	2a08      	cmp	r2, #8
 800c33e:	d8e4      	bhi.n	800c30a <z_impl_k_poll+0x76>
 800c340:	2401      	movs	r4, #1
 800c342:	fa04 f202 	lsl.w	r2, r4, r2
 800c346:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800c34a:	d0de      	beq.n	800c30a <z_impl_k_poll+0x76>
	return node->next != NULL;
 800c34c:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800c34e:	2a00      	cmp	r2, #0
 800c350:	d0db      	beq.n	800c30a <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 800c352:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 800c354:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 800c356:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 800c358:	2200      	movs	r2, #0
 800c35a:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 800c35c:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 800c35e:	e7d4      	b.n	800c30a <z_impl_k_poll+0x76>
	__asm__ volatile(
 800c360:	f381 8811 	msr	BASEPRI, r1
 800c364:	f3bf 8f6f 	isb	sy
		return 0;
 800c368:	4620      	mov	r0, r4
 800c36a:	e036      	b.n	800c3da <z_impl_k_poll+0x146>
 800c36c:	f381 8811 	msr	BASEPRI, r1
 800c370:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 800c374:	f06f 000a 	mvn.w	r0, #10
 800c378:	e02f      	b.n	800c3da <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 800c37a:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 800c37c:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 800c37e:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 800c380:	2200      	movs	r2, #0
 800c382:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 800c384:	605a      	str	r2, [r3, #4]
 800c386:	f38c 8811 	msr	BASEPRI, ip
 800c38a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800c38e:	f04f 0310 	mov.w	r3, #16
 800c392:	f3ef 8c11 	mrs	ip, BASEPRI
 800c396:	f383 8812 	msr	BASEPRI_MAX, r3
 800c39a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 800c39e:	4674      	mov	r4, lr
 800c3a0:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800c3a4:	b1ac      	cbz	r4, 800c3d2 <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 800c3a6:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800c3aa:	009c      	lsls	r4, r3, #2
 800c3ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 800c3b4:	7b5a      	ldrb	r2, [r3, #13]
 800c3b6:	f002 021f 	and.w	r2, r2, #31
 800c3ba:	2a08      	cmp	r2, #8
 800c3bc:	d8e3      	bhi.n	800c386 <z_impl_k_poll+0xf2>
 800c3be:	2101      	movs	r1, #1
 800c3c0:	fa01 f202 	lsl.w	r2, r1, r2
 800c3c4:	f412 7f8b 	tst.w	r2, #278	; 0x116
 800c3c8:	d0dd      	beq.n	800c386 <z_impl_k_poll+0xf2>
	return node->next != NULL;
 800c3ca:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 800c3cc:	2a00      	cmp	r2, #0
 800c3ce:	d1d4      	bne.n	800c37a <z_impl_k_poll+0xe6>
 800c3d0:	e7d9      	b.n	800c386 <z_impl_k_poll+0xf2>
	__asm__ volatile(
 800c3d2:	f386 8811 	msr	BASEPRI, r6
 800c3d6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 800c3da:	b002      	add	sp, #8
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	20001394 	.word	0x20001394
 800c3e4:	2000010c 	.word	0x2000010c
 800c3e8:	200013e0 	.word	0x200013e0

0800c3ec <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4603      	mov	r3, r0
	__asm__ volatile(
 800c3f0:	f04f 0210 	mov.w	r2, #16
 800c3f4:	f3ef 8511 	mrs	r5, BASEPRI
 800c3f8:	f382 8812 	msr	BASEPRI_MAX, r2
 800c3fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 800c400:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 800c402:	2201      	movs	r2, #1
 800c404:	6082      	str	r2, [r0, #8]
	return list->head == list;
 800c406:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 800c408:	4283      	cmp	r3, r0
 800c40a:	d011      	beq.n	800c430 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 800c40c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800c40e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800c410:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800c412:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800c414:	2300      	movs	r3, #0
 800c416:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800c418:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 800c41a:	b148      	cbz	r0, 800c430 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 800c41c:	2101      	movs	r1, #1
 800c41e:	f003 fd57 	bl	800fed0 <signal_poll_event>
 800c422:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 800c424:	4629      	mov	r1, r5
 800c426:	4805      	ldr	r0, [pc, #20]	; (800c43c <z_impl_k_poll_signal_raise+0x50>)
 800c428:	f7fe ff72 	bl	800b310 <z_reschedule>
	return rc;
}
 800c42c:	4620      	mov	r0, r4
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 800c430:	f385 8811 	msr	BASEPRI, r5
 800c434:	f3bf 8f6f 	isb	sy
		return 0;
 800c438:	2400      	movs	r4, #0
 800c43a:	e7f7      	b.n	800c42c <z_impl_k_poll_signal_raise+0x40>
 800c43c:	200013e0 	.word	0x200013e0

0800c440 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 800c440:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 800c442:	4a03      	ldr	r2, [pc, #12]	; (800c450 <boot_banner+0x10>)
 800c444:	4903      	ldr	r1, [pc, #12]	; (800c454 <boot_banner+0x14>)
 800c446:	4804      	ldr	r0, [pc, #16]	; (800c458 <boot_banner+0x18>)
 800c448:	f001 fc20 	bl	800dc8c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 800c44c:	bd08      	pop	{r3, pc}
 800c44e:	bf00      	nop
 800c450:	0801206c 	.word	0x0801206c
 800c454:	08012094 	.word	0x08012094
 800c458:	080120b4 	.word	0x080120b4

0800c45c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 800c45c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c45e:	4c06      	ldr	r4, [pc, #24]	; (800c478 <statics_init+0x1c>)
 800c460:	e005      	b.n	800c46e <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 800c462:	68a2      	ldr	r2, [r4, #8]
 800c464:	6861      	ldr	r1, [r4, #4]
 800c466:	4620      	mov	r0, r4
 800c468:	f003 fd83 	bl	800ff72 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 800c46c:	3418      	adds	r4, #24
 800c46e:	4b03      	ldr	r3, [pc, #12]	; (800c47c <statics_init+0x20>)
 800c470:	429c      	cmp	r4, r3
 800c472:	d3f6      	bcc.n	800c462 <statics_init+0x6>
		}
	}
	return 0;
}
 800c474:	2000      	movs	r0, #0
 800c476:	bd10      	pop	{r4, pc}
 800c478:	200003e8 	.word	0x200003e8
 800c47c:	200003e8 	.word	0x200003e8

0800c480 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 800c480:	b510      	push	{r4, lr}
 800c482:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 800c484:	4b08      	ldr	r3, [pc, #32]	; (800c4a8 <k_sys_work_q_init+0x28>)
 800c486:	9302      	str	r3, [sp, #8]
 800c488:	2400      	movs	r4, #0
 800c48a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 800c48e:	ab02      	add	r3, sp, #8
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	4623      	mov	r3, r4
 800c494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c498:	4904      	ldr	r1, [pc, #16]	; (800c4ac <k_sys_work_q_init+0x2c>)
 800c49a:	4805      	ldr	r0, [pc, #20]	; (800c4b0 <k_sys_work_q_init+0x30>)
 800c49c:	f7fe fea6 	bl	800b1ec <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	b004      	add	sp, #16
 800c4a4:	bd10      	pop	{r4, pc}
 800c4a6:	bf00      	nop
 800c4a8:	080120dc 	.word	0x080120dc
 800c4ac:	20003d20 	.word	0x20003d20
 800c4b0:	20000cb8 	.word	0x20000cb8

0800c4b4 <malloc>:
 800c4b4:	4b02      	ldr	r3, [pc, #8]	; (800c4c0 <malloc+0xc>)
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f000 b84d 	b.w	800c558 <_malloc_r>
 800c4be:	bf00      	nop
 800c4c0:	20000114 	.word	0x20000114

0800c4c4 <_free_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	2900      	cmp	r1, #0
 800c4ca:	d041      	beq.n	800c550 <_free_r+0x8c>
 800c4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d0:	1f0c      	subs	r4, r1, #4
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	bfb8      	it	lt
 800c4d6:	18e4      	addlt	r4, r4, r3
 800c4d8:	f000 fbfc 	bl	800ccd4 <__malloc_lock>
 800c4dc:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <_free_r+0x90>)
 800c4de:	6813      	ldr	r3, [r2, #0]
 800c4e0:	b933      	cbnz	r3, 800c4f0 <_free_r+0x2c>
 800c4e2:	6063      	str	r3, [r4, #4]
 800c4e4:	6014      	str	r4, [r2, #0]
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ec:	f000 bbf8 	b.w	800cce0 <__malloc_unlock>
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	d908      	bls.n	800c506 <_free_r+0x42>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	1821      	adds	r1, r4, r0
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf01      	itttt	eq
 800c4fc:	6819      	ldreq	r1, [r3, #0]
 800c4fe:	685b      	ldreq	r3, [r3, #4]
 800c500:	1809      	addeq	r1, r1, r0
 800c502:	6021      	streq	r1, [r4, #0]
 800c504:	e7ed      	b.n	800c4e2 <_free_r+0x1e>
 800c506:	461a      	mov	r2, r3
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	b10b      	cbz	r3, 800c510 <_free_r+0x4c>
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	d9fa      	bls.n	800c506 <_free_r+0x42>
 800c510:	6811      	ldr	r1, [r2, #0]
 800c512:	1850      	adds	r0, r2, r1
 800c514:	42a0      	cmp	r0, r4
 800c516:	d10b      	bne.n	800c530 <_free_r+0x6c>
 800c518:	6820      	ldr	r0, [r4, #0]
 800c51a:	4401      	add	r1, r0
 800c51c:	1850      	adds	r0, r2, r1
 800c51e:	4283      	cmp	r3, r0
 800c520:	6011      	str	r1, [r2, #0]
 800c522:	d1e0      	bne.n	800c4e6 <_free_r+0x22>
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	6053      	str	r3, [r2, #4]
 800c52a:	4401      	add	r1, r0
 800c52c:	6011      	str	r1, [r2, #0]
 800c52e:	e7da      	b.n	800c4e6 <_free_r+0x22>
 800c530:	d902      	bls.n	800c538 <_free_r+0x74>
 800c532:	230c      	movs	r3, #12
 800c534:	602b      	str	r3, [r5, #0]
 800c536:	e7d6      	b.n	800c4e6 <_free_r+0x22>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	1821      	adds	r1, r4, r0
 800c53c:	428b      	cmp	r3, r1
 800c53e:	bf04      	itt	eq
 800c540:	6819      	ldreq	r1, [r3, #0]
 800c542:	685b      	ldreq	r3, [r3, #4]
 800c544:	6063      	str	r3, [r4, #4]
 800c546:	bf04      	itt	eq
 800c548:	1809      	addeq	r1, r1, r0
 800c54a:	6021      	streq	r1, [r4, #0]
 800c54c:	6054      	str	r4, [r2, #4]
 800c54e:	e7ca      	b.n	800c4e6 <_free_r+0x22>
 800c550:	bd38      	pop	{r3, r4, r5, pc}
 800c552:	bf00      	nop
 800c554:	200013e4 	.word	0x200013e4

0800c558 <_malloc_r>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	1ccd      	adds	r5, r1, #3
 800c55c:	f025 0503 	bic.w	r5, r5, #3
 800c560:	3508      	adds	r5, #8
 800c562:	2d0c      	cmp	r5, #12
 800c564:	bf38      	it	cc
 800c566:	250c      	movcc	r5, #12
 800c568:	2d00      	cmp	r5, #0
 800c56a:	4606      	mov	r6, r0
 800c56c:	db01      	blt.n	800c572 <_malloc_r+0x1a>
 800c56e:	42a9      	cmp	r1, r5
 800c570:	d903      	bls.n	800c57a <_malloc_r+0x22>
 800c572:	230c      	movs	r3, #12
 800c574:	6033      	str	r3, [r6, #0]
 800c576:	2000      	movs	r0, #0
 800c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c57a:	f000 fbab 	bl	800ccd4 <__malloc_lock>
 800c57e:	4921      	ldr	r1, [pc, #132]	; (800c604 <_malloc_r+0xac>)
 800c580:	680a      	ldr	r2, [r1, #0]
 800c582:	4614      	mov	r4, r2
 800c584:	b99c      	cbnz	r4, 800c5ae <_malloc_r+0x56>
 800c586:	4f20      	ldr	r7, [pc, #128]	; (800c608 <_malloc_r+0xb0>)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	b923      	cbnz	r3, 800c596 <_malloc_r+0x3e>
 800c58c:	4621      	mov	r1, r4
 800c58e:	4630      	mov	r0, r6
 800c590:	f000 fb8c 	bl	800ccac <_sbrk_r>
 800c594:	6038      	str	r0, [r7, #0]
 800c596:	4629      	mov	r1, r5
 800c598:	4630      	mov	r0, r6
 800c59a:	f000 fb87 	bl	800ccac <_sbrk_r>
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	d123      	bne.n	800c5ea <_malloc_r+0x92>
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 fb9a 	bl	800cce0 <__malloc_unlock>
 800c5ac:	e7e3      	b.n	800c576 <_malloc_r+0x1e>
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	1b5b      	subs	r3, r3, r5
 800c5b2:	d417      	bmi.n	800c5e4 <_malloc_r+0x8c>
 800c5b4:	2b0b      	cmp	r3, #11
 800c5b6:	d903      	bls.n	800c5c0 <_malloc_r+0x68>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	441c      	add	r4, r3
 800c5bc:	6025      	str	r5, [r4, #0]
 800c5be:	e004      	b.n	800c5ca <_malloc_r+0x72>
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	42a2      	cmp	r2, r4
 800c5c4:	bf0c      	ite	eq
 800c5c6:	600b      	streq	r3, [r1, #0]
 800c5c8:	6053      	strne	r3, [r2, #4]
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f000 fb88 	bl	800cce0 <__malloc_unlock>
 800c5d0:	f104 000b 	add.w	r0, r4, #11
 800c5d4:	1d23      	adds	r3, r4, #4
 800c5d6:	f020 0007 	bic.w	r0, r0, #7
 800c5da:	1ac2      	subs	r2, r0, r3
 800c5dc:	d0cc      	beq.n	800c578 <_malloc_r+0x20>
 800c5de:	1a1b      	subs	r3, r3, r0
 800c5e0:	50a3      	str	r3, [r4, r2]
 800c5e2:	e7c9      	b.n	800c578 <_malloc_r+0x20>
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	6864      	ldr	r4, [r4, #4]
 800c5e8:	e7cc      	b.n	800c584 <_malloc_r+0x2c>
 800c5ea:	1cc4      	adds	r4, r0, #3
 800c5ec:	f024 0403 	bic.w	r4, r4, #3
 800c5f0:	42a0      	cmp	r0, r4
 800c5f2:	d0e3      	beq.n	800c5bc <_malloc_r+0x64>
 800c5f4:	1a21      	subs	r1, r4, r0
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	f000 fb58 	bl	800ccac <_sbrk_r>
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	d1dd      	bne.n	800c5bc <_malloc_r+0x64>
 800c600:	e7cf      	b.n	800c5a2 <_malloc_r+0x4a>
 800c602:	bf00      	nop
 800c604:	200013e4 	.word	0x200013e4
 800c608:	200013e8 	.word	0x200013e8

0800c60c <_printf_float>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	b091      	sub	sp, #68	; 0x44
 800c612:	460c      	mov	r4, r1
 800c614:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c618:	4616      	mov	r6, r2
 800c61a:	461f      	mov	r7, r3
 800c61c:	4605      	mov	r5, r0
 800c61e:	f000 fb55 	bl	800cccc <_localeconv_r>
 800c622:	6803      	ldr	r3, [r0, #0]
 800c624:	9309      	str	r3, [sp, #36]	; 0x24
 800c626:	4618      	mov	r0, r3
 800c628:	f7f4 fc15 	bl	8000e56 <strlen>
 800c62c:	2300      	movs	r3, #0
 800c62e:	930e      	str	r3, [sp, #56]	; 0x38
 800c630:	f8d8 3000 	ldr.w	r3, [r8]
 800c634:	900a      	str	r0, [sp, #40]	; 0x28
 800c636:	3307      	adds	r3, #7
 800c638:	f023 0307 	bic.w	r3, r3, #7
 800c63c:	f103 0208 	add.w	r2, r3, #8
 800c640:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c644:	f8d4 b000 	ldr.w	fp, [r4]
 800c648:	f8c8 2000 	str.w	r2, [r8]
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c654:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c658:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c65c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c65e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c660:	4b9c      	ldr	r3, [pc, #624]	; (800c8d4 <_printf_float+0x2c8>)
 800c662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c666:	4640      	mov	r0, r8
 800c668:	f7f4 fa5a 	bl	8000b20 <__aeabi_dcmpun>
 800c66c:	bb70      	cbnz	r0, 800c6cc <_printf_float+0xc0>
 800c66e:	4b99      	ldr	r3, [pc, #612]	; (800c8d4 <_printf_float+0x2c8>)
 800c670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c676:	4640      	mov	r0, r8
 800c678:	f7f4 fa34 	bl	8000ae4 <__aeabi_dcmple>
 800c67c:	bb30      	cbnz	r0, 800c6cc <_printf_float+0xc0>
 800c67e:	2200      	movs	r2, #0
 800c680:	2300      	movs	r3, #0
 800c682:	4640      	mov	r0, r8
 800c684:	4651      	mov	r1, sl
 800c686:	f7f4 fa23 	bl	8000ad0 <__aeabi_dcmplt>
 800c68a:	b110      	cbz	r0, 800c692 <_printf_float+0x86>
 800c68c:	232d      	movs	r3, #45	; 0x2d
 800c68e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c692:	4b91      	ldr	r3, [pc, #580]	; (800c8d8 <_printf_float+0x2cc>)
 800c694:	4891      	ldr	r0, [pc, #580]	; (800c8dc <_printf_float+0x2d0>)
 800c696:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c69a:	bf94      	ite	ls
 800c69c:	4698      	movls	r8, r3
 800c69e:	4680      	movhi	r8, r0
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	6123      	str	r3, [r4, #16]
 800c6a4:	f02b 0304 	bic.w	r3, fp, #4
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	f04f 0a00 	mov.w	sl, #0
 800c6ae:	9700      	str	r7, [sp, #0]
 800c6b0:	4633      	mov	r3, r6
 800c6b2:	aa0f      	add	r2, sp, #60	; 0x3c
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f003 fd17 	bl	80100ea <_printf_common>
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f040 808f 	bne.w	800c7e0 <_printf_float+0x1d4>
 800c6c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6c6:	b011      	add	sp, #68	; 0x44
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	4653      	mov	r3, sl
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4651      	mov	r1, sl
 800c6d4:	f7f4 fa24 	bl	8000b20 <__aeabi_dcmpun>
 800c6d8:	b140      	cbz	r0, 800c6ec <_printf_float+0xe0>
 800c6da:	f1ba 0f00 	cmp.w	sl, #0
 800c6de:	bfbc      	itt	lt
 800c6e0:	232d      	movlt	r3, #45	; 0x2d
 800c6e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c6e6:	487e      	ldr	r0, [pc, #504]	; (800c8e0 <_printf_float+0x2d4>)
 800c6e8:	4b7e      	ldr	r3, [pc, #504]	; (800c8e4 <_printf_float+0x2d8>)
 800c6ea:	e7d4      	b.n	800c696 <_printf_float+0x8a>
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c6f4:	d142      	bne.n	800c77c <_printf_float+0x170>
 800c6f6:	2306      	movs	r3, #6
 800c6f8:	6063      	str	r3, [r4, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	9206      	str	r2, [sp, #24]
 800c6fe:	aa0e      	add	r2, sp, #56	; 0x38
 800c700:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c704:	aa0d      	add	r2, sp, #52	; 0x34
 800c706:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c70a:	9203      	str	r2, [sp, #12]
 800c70c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c710:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	6863      	ldr	r3, [r4, #4]
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	4642      	mov	r2, r8
 800c71c:	4653      	mov	r3, sl
 800c71e:	4628      	mov	r0, r5
 800c720:	910b      	str	r1, [sp, #44]	; 0x2c
 800c722:	f003 fc44 	bl	800ffae <__cvt>
 800c726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c728:	2947      	cmp	r1, #71	; 0x47
 800c72a:	4680      	mov	r8, r0
 800c72c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c72e:	d108      	bne.n	800c742 <_printf_float+0x136>
 800c730:	1cc8      	adds	r0, r1, #3
 800c732:	db02      	blt.n	800c73a <_printf_float+0x12e>
 800c734:	6863      	ldr	r3, [r4, #4]
 800c736:	4299      	cmp	r1, r3
 800c738:	dd40      	ble.n	800c7bc <_printf_float+0x1b0>
 800c73a:	f1a9 0902 	sub.w	r9, r9, #2
 800c73e:	fa5f f989 	uxtb.w	r9, r9
 800c742:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c746:	d81f      	bhi.n	800c788 <_printf_float+0x17c>
 800c748:	3901      	subs	r1, #1
 800c74a:	464a      	mov	r2, r9
 800c74c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c750:	910d      	str	r1, [sp, #52]	; 0x34
 800c752:	f003 fc8c 	bl	801006e <__exponent>
 800c756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c758:	1813      	adds	r3, r2, r0
 800c75a:	2a01      	cmp	r2, #1
 800c75c:	4682      	mov	sl, r0
 800c75e:	6123      	str	r3, [r4, #16]
 800c760:	dc02      	bgt.n	800c768 <_printf_float+0x15c>
 800c762:	6822      	ldr	r2, [r4, #0]
 800c764:	07d2      	lsls	r2, r2, #31
 800c766:	d501      	bpl.n	800c76c <_printf_float+0x160>
 800c768:	3301      	adds	r3, #1
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c770:	2b00      	cmp	r3, #0
 800c772:	d09c      	beq.n	800c6ae <_printf_float+0xa2>
 800c774:	232d      	movs	r3, #45	; 0x2d
 800c776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c77a:	e798      	b.n	800c6ae <_printf_float+0xa2>
 800c77c:	2947      	cmp	r1, #71	; 0x47
 800c77e:	d1bc      	bne.n	800c6fa <_printf_float+0xee>
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1ba      	bne.n	800c6fa <_printf_float+0xee>
 800c784:	2301      	movs	r3, #1
 800c786:	e7b7      	b.n	800c6f8 <_printf_float+0xec>
 800c788:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c78c:	d118      	bne.n	800c7c0 <_printf_float+0x1b4>
 800c78e:	2900      	cmp	r1, #0
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	dd0b      	ble.n	800c7ac <_printf_float+0x1a0>
 800c794:	6121      	str	r1, [r4, #16]
 800c796:	b913      	cbnz	r3, 800c79e <_printf_float+0x192>
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	07d0      	lsls	r0, r2, #31
 800c79c:	d502      	bpl.n	800c7a4 <_printf_float+0x198>
 800c79e:	3301      	adds	r3, #1
 800c7a0:	440b      	add	r3, r1
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	65a1      	str	r1, [r4, #88]	; 0x58
 800c7a6:	f04f 0a00 	mov.w	sl, #0
 800c7aa:	e7df      	b.n	800c76c <_printf_float+0x160>
 800c7ac:	b913      	cbnz	r3, 800c7b4 <_printf_float+0x1a8>
 800c7ae:	6822      	ldr	r2, [r4, #0]
 800c7b0:	07d2      	lsls	r2, r2, #31
 800c7b2:	d501      	bpl.n	800c7b8 <_printf_float+0x1ac>
 800c7b4:	3302      	adds	r3, #2
 800c7b6:	e7f4      	b.n	800c7a2 <_printf_float+0x196>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e7f2      	b.n	800c7a2 <_printf_float+0x196>
 800c7bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c7c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7c2:	4299      	cmp	r1, r3
 800c7c4:	db05      	blt.n	800c7d2 <_printf_float+0x1c6>
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	6121      	str	r1, [r4, #16]
 800c7ca:	07d8      	lsls	r0, r3, #31
 800c7cc:	d5ea      	bpl.n	800c7a4 <_printf_float+0x198>
 800c7ce:	1c4b      	adds	r3, r1, #1
 800c7d0:	e7e7      	b.n	800c7a2 <_printf_float+0x196>
 800c7d2:	2900      	cmp	r1, #0
 800c7d4:	bfd4      	ite	le
 800c7d6:	f1c1 0202 	rsble	r2, r1, #2
 800c7da:	2201      	movgt	r2, #1
 800c7dc:	4413      	add	r3, r2
 800c7de:	e7e0      	b.n	800c7a2 <_printf_float+0x196>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	055a      	lsls	r2, r3, #21
 800c7e4:	d407      	bmi.n	800c7f6 <_printf_float+0x1ea>
 800c7e6:	6923      	ldr	r3, [r4, #16]
 800c7e8:	4642      	mov	r2, r8
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	47b8      	blx	r7
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	d12b      	bne.n	800c84c <_printf_float+0x240>
 800c7f4:	e765      	b.n	800c6c2 <_printf_float+0xb6>
 800c7f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c7fa:	f240 80dc 	bls.w	800c9b6 <_printf_float+0x3aa>
 800c7fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c802:	2200      	movs	r2, #0
 800c804:	2300      	movs	r3, #0
 800c806:	f7f4 f959 	bl	8000abc <__aeabi_dcmpeq>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d033      	beq.n	800c876 <_printf_float+0x26a>
 800c80e:	4a36      	ldr	r2, [pc, #216]	; (800c8e8 <_printf_float+0x2dc>)
 800c810:	2301      	movs	r3, #1
 800c812:	4631      	mov	r1, r6
 800c814:	4628      	mov	r0, r5
 800c816:	47b8      	blx	r7
 800c818:	3001      	adds	r0, #1
 800c81a:	f43f af52 	beq.w	800c6c2 <_printf_float+0xb6>
 800c81e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c822:	429a      	cmp	r2, r3
 800c824:	db02      	blt.n	800c82c <_printf_float+0x220>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	07d8      	lsls	r0, r3, #31
 800c82a:	d50f      	bpl.n	800c84c <_printf_float+0x240>
 800c82c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c830:	4631      	mov	r1, r6
 800c832:	4628      	mov	r0, r5
 800c834:	47b8      	blx	r7
 800c836:	3001      	adds	r0, #1
 800c838:	f43f af43 	beq.w	800c6c2 <_printf_float+0xb6>
 800c83c:	f04f 0800 	mov.w	r8, #0
 800c840:	f104 091a 	add.w	r9, r4, #26
 800c844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c846:	3b01      	subs	r3, #1
 800c848:	4543      	cmp	r3, r8
 800c84a:	dc09      	bgt.n	800c860 <_printf_float+0x254>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	079b      	lsls	r3, r3, #30
 800c850:	f100 8101 	bmi.w	800ca56 <_printf_float+0x44a>
 800c854:	68e0      	ldr	r0, [r4, #12]
 800c856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c858:	4298      	cmp	r0, r3
 800c85a:	bfb8      	it	lt
 800c85c:	4618      	movlt	r0, r3
 800c85e:	e732      	b.n	800c6c6 <_printf_float+0xba>
 800c860:	2301      	movs	r3, #1
 800c862:	464a      	mov	r2, r9
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	47b8      	blx	r7
 800c86a:	3001      	adds	r0, #1
 800c86c:	f43f af29 	beq.w	800c6c2 <_printf_float+0xb6>
 800c870:	f108 0801 	add.w	r8, r8, #1
 800c874:	e7e6      	b.n	800c844 <_printf_float+0x238>
 800c876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dc37      	bgt.n	800c8ec <_printf_float+0x2e0>
 800c87c:	4a1a      	ldr	r2, [pc, #104]	; (800c8e8 <_printf_float+0x2dc>)
 800c87e:	2301      	movs	r3, #1
 800c880:	4631      	mov	r1, r6
 800c882:	4628      	mov	r0, r5
 800c884:	47b8      	blx	r7
 800c886:	3001      	adds	r0, #1
 800c888:	f43f af1b 	beq.w	800c6c2 <_printf_float+0xb6>
 800c88c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c890:	4313      	orrs	r3, r2
 800c892:	d102      	bne.n	800c89a <_printf_float+0x28e>
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	07d9      	lsls	r1, r3, #31
 800c898:	d5d8      	bpl.n	800c84c <_printf_float+0x240>
 800c89a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f43f af0c 	beq.w	800c6c2 <_printf_float+0xb6>
 800c8aa:	f04f 0900 	mov.w	r9, #0
 800c8ae:	f104 0a1a 	add.w	sl, r4, #26
 800c8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	454b      	cmp	r3, r9
 800c8b8:	dc01      	bgt.n	800c8be <_printf_float+0x2b2>
 800c8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8bc:	e794      	b.n	800c7e8 <_printf_float+0x1dc>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	4652      	mov	r2, sl
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	47b8      	blx	r7
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f43f aefa 	beq.w	800c6c2 <_printf_float+0xb6>
 800c8ce:	f109 0901 	add.w	r9, r9, #1
 800c8d2:	e7ee      	b.n	800c8b2 <_printf_float+0x2a6>
 800c8d4:	7fefffff 	.word	0x7fefffff
 800c8d8:	08012259 	.word	0x08012259
 800c8dc:	0801225d 	.word	0x0801225d
 800c8e0:	08012265 	.word	0x08012265
 800c8e4:	08012261 	.word	0x08012261
 800c8e8:	08012269 	.word	0x08012269
 800c8ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	bfa8      	it	ge
 800c8f4:	461a      	movge	r2, r3
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	4691      	mov	r9, r2
 800c8fa:	dc37      	bgt.n	800c96c <_printf_float+0x360>
 800c8fc:	f04f 0b00 	mov.w	fp, #0
 800c900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c904:	f104 021a 	add.w	r2, r4, #26
 800c908:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c90c:	ebaa 0309 	sub.w	r3, sl, r9
 800c910:	455b      	cmp	r3, fp
 800c912:	dc33      	bgt.n	800c97c <_printf_float+0x370>
 800c914:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c918:	429a      	cmp	r2, r3
 800c91a:	db3b      	blt.n	800c994 <_printf_float+0x388>
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	07da      	lsls	r2, r3, #31
 800c920:	d438      	bmi.n	800c994 <_printf_float+0x388>
 800c922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c924:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c926:	eba3 020a 	sub.w	r2, r3, sl
 800c92a:	eba3 0901 	sub.w	r9, r3, r1
 800c92e:	4591      	cmp	r9, r2
 800c930:	bfa8      	it	ge
 800c932:	4691      	movge	r9, r2
 800c934:	f1b9 0f00 	cmp.w	r9, #0
 800c938:	dc34      	bgt.n	800c9a4 <_printf_float+0x398>
 800c93a:	f04f 0800 	mov.w	r8, #0
 800c93e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c942:	f104 0a1a 	add.w	sl, r4, #26
 800c946:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c94a:	1a9b      	subs	r3, r3, r2
 800c94c:	eba3 0309 	sub.w	r3, r3, r9
 800c950:	4543      	cmp	r3, r8
 800c952:	f77f af7b 	ble.w	800c84c <_printf_float+0x240>
 800c956:	2301      	movs	r3, #1
 800c958:	4652      	mov	r2, sl
 800c95a:	4631      	mov	r1, r6
 800c95c:	4628      	mov	r0, r5
 800c95e:	47b8      	blx	r7
 800c960:	3001      	adds	r0, #1
 800c962:	f43f aeae 	beq.w	800c6c2 <_printf_float+0xb6>
 800c966:	f108 0801 	add.w	r8, r8, #1
 800c96a:	e7ec      	b.n	800c946 <_printf_float+0x33a>
 800c96c:	4613      	mov	r3, r2
 800c96e:	4631      	mov	r1, r6
 800c970:	4642      	mov	r2, r8
 800c972:	4628      	mov	r0, r5
 800c974:	47b8      	blx	r7
 800c976:	3001      	adds	r0, #1
 800c978:	d1c0      	bne.n	800c8fc <_printf_float+0x2f0>
 800c97a:	e6a2      	b.n	800c6c2 <_printf_float+0xb6>
 800c97c:	2301      	movs	r3, #1
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	920b      	str	r2, [sp, #44]	; 0x2c
 800c984:	47b8      	blx	r7
 800c986:	3001      	adds	r0, #1
 800c988:	f43f ae9b 	beq.w	800c6c2 <_printf_float+0xb6>
 800c98c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c98e:	f10b 0b01 	add.w	fp, fp, #1
 800c992:	e7b9      	b.n	800c908 <_printf_float+0x2fc>
 800c994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c998:	4631      	mov	r1, r6
 800c99a:	4628      	mov	r0, r5
 800c99c:	47b8      	blx	r7
 800c99e:	3001      	adds	r0, #1
 800c9a0:	d1bf      	bne.n	800c922 <_printf_float+0x316>
 800c9a2:	e68e      	b.n	800c6c2 <_printf_float+0xb6>
 800c9a4:	464b      	mov	r3, r9
 800c9a6:	eb08 020a 	add.w	r2, r8, sl
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b8      	blx	r7
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d1c2      	bne.n	800c93a <_printf_float+0x32e>
 800c9b4:	e685      	b.n	800c6c2 <_printf_float+0xb6>
 800c9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9b8:	2a01      	cmp	r2, #1
 800c9ba:	dc01      	bgt.n	800c9c0 <_printf_float+0x3b4>
 800c9bc:	07db      	lsls	r3, r3, #31
 800c9be:	d537      	bpl.n	800ca30 <_printf_float+0x424>
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	47b8      	blx	r7
 800c9ca:	3001      	adds	r0, #1
 800c9cc:	f43f ae79 	beq.w	800c6c2 <_printf_float+0xb6>
 800c9d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	47b8      	blx	r7
 800c9da:	3001      	adds	r0, #1
 800c9dc:	f43f ae71 	beq.w	800c6c2 <_printf_float+0xb6>
 800c9e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f7f4 f868 	bl	8000abc <__aeabi_dcmpeq>
 800c9ec:	b9d8      	cbnz	r0, 800ca26 <_printf_float+0x41a>
 800c9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f0:	f108 0201 	add.w	r2, r8, #1
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	47b8      	blx	r7
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d10e      	bne.n	800ca1e <_printf_float+0x412>
 800ca00:	e65f      	b.n	800c6c2 <_printf_float+0xb6>
 800ca02:	2301      	movs	r3, #1
 800ca04:	464a      	mov	r2, r9
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b8      	blx	r7
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f43f ae58 	beq.w	800c6c2 <_printf_float+0xb6>
 800ca12:	f108 0801 	add.w	r8, r8, #1
 800ca16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	4543      	cmp	r3, r8
 800ca1c:	dcf1      	bgt.n	800ca02 <_printf_float+0x3f6>
 800ca1e:	4653      	mov	r3, sl
 800ca20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ca24:	e6e1      	b.n	800c7ea <_printf_float+0x1de>
 800ca26:	f04f 0800 	mov.w	r8, #0
 800ca2a:	f104 091a 	add.w	r9, r4, #26
 800ca2e:	e7f2      	b.n	800ca16 <_printf_float+0x40a>
 800ca30:	2301      	movs	r3, #1
 800ca32:	4642      	mov	r2, r8
 800ca34:	e7df      	b.n	800c9f6 <_printf_float+0x3ea>
 800ca36:	2301      	movs	r3, #1
 800ca38:	464a      	mov	r2, r9
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	f43f ae3e 	beq.w	800c6c2 <_printf_float+0xb6>
 800ca46:	f108 0801 	add.w	r8, r8, #1
 800ca4a:	68e3      	ldr	r3, [r4, #12]
 800ca4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ca4e:	1a5b      	subs	r3, r3, r1
 800ca50:	4543      	cmp	r3, r8
 800ca52:	dcf0      	bgt.n	800ca36 <_printf_float+0x42a>
 800ca54:	e6fe      	b.n	800c854 <_printf_float+0x248>
 800ca56:	f04f 0800 	mov.w	r8, #0
 800ca5a:	f104 0919 	add.w	r9, r4, #25
 800ca5e:	e7f4      	b.n	800ca4a <_printf_float+0x43e>

0800ca60 <_printf_i>:
 800ca60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	7e0f      	ldrb	r7, [r1, #24]
 800ca66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca68:	2f78      	cmp	r7, #120	; 0x78
 800ca6a:	4691      	mov	r9, r2
 800ca6c:	4680      	mov	r8, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	469a      	mov	sl, r3
 800ca72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca76:	d807      	bhi.n	800ca88 <_printf_i+0x28>
 800ca78:	2f62      	cmp	r7, #98	; 0x62
 800ca7a:	d80a      	bhi.n	800ca92 <_printf_i+0x32>
 800ca7c:	2f00      	cmp	r7, #0
 800ca7e:	f000 80d8 	beq.w	800cc32 <_printf_i+0x1d2>
 800ca82:	2f58      	cmp	r7, #88	; 0x58
 800ca84:	f000 80a3 	beq.w	800cbce <_printf_i+0x16e>
 800ca88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca90:	e03a      	b.n	800cb08 <_printf_i+0xa8>
 800ca92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca96:	2b15      	cmp	r3, #21
 800ca98:	d8f6      	bhi.n	800ca88 <_printf_i+0x28>
 800ca9a:	a101      	add	r1, pc, #4	; (adr r1, 800caa0 <_printf_i+0x40>)
 800ca9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800caa0:	0800caf9 	.word	0x0800caf9
 800caa4:	0800cb0d 	.word	0x0800cb0d
 800caa8:	0800ca89 	.word	0x0800ca89
 800caac:	0800ca89 	.word	0x0800ca89
 800cab0:	0800ca89 	.word	0x0800ca89
 800cab4:	0800ca89 	.word	0x0800ca89
 800cab8:	0800cb0d 	.word	0x0800cb0d
 800cabc:	0800ca89 	.word	0x0800ca89
 800cac0:	0800ca89 	.word	0x0800ca89
 800cac4:	0800ca89 	.word	0x0800ca89
 800cac8:	0800ca89 	.word	0x0800ca89
 800cacc:	0800cc19 	.word	0x0800cc19
 800cad0:	0800cb3d 	.word	0x0800cb3d
 800cad4:	0800cbfb 	.word	0x0800cbfb
 800cad8:	0800ca89 	.word	0x0800ca89
 800cadc:	0800ca89 	.word	0x0800ca89
 800cae0:	0800cc3b 	.word	0x0800cc3b
 800cae4:	0800ca89 	.word	0x0800ca89
 800cae8:	0800cb3d 	.word	0x0800cb3d
 800caec:	0800ca89 	.word	0x0800ca89
 800caf0:	0800ca89 	.word	0x0800ca89
 800caf4:	0800cc03 	.word	0x0800cc03
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	1d1a      	adds	r2, r3, #4
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	602a      	str	r2, [r5, #0]
 800cb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb08:	2301      	movs	r3, #1
 800cb0a:	e0a3      	b.n	800cc54 <_printf_i+0x1f4>
 800cb0c:	6820      	ldr	r0, [r4, #0]
 800cb0e:	6829      	ldr	r1, [r5, #0]
 800cb10:	0606      	lsls	r6, r0, #24
 800cb12:	f101 0304 	add.w	r3, r1, #4
 800cb16:	d50a      	bpl.n	800cb2e <_printf_i+0xce>
 800cb18:	680e      	ldr	r6, [r1, #0]
 800cb1a:	602b      	str	r3, [r5, #0]
 800cb1c:	2e00      	cmp	r6, #0
 800cb1e:	da03      	bge.n	800cb28 <_printf_i+0xc8>
 800cb20:	232d      	movs	r3, #45	; 0x2d
 800cb22:	4276      	negs	r6, r6
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb28:	485e      	ldr	r0, [pc, #376]	; (800cca4 <_printf_i+0x244>)
 800cb2a:	230a      	movs	r3, #10
 800cb2c:	e019      	b.n	800cb62 <_printf_i+0x102>
 800cb2e:	680e      	ldr	r6, [r1, #0]
 800cb30:	602b      	str	r3, [r5, #0]
 800cb32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb36:	bf18      	it	ne
 800cb38:	b236      	sxthne	r6, r6
 800cb3a:	e7ef      	b.n	800cb1c <_printf_i+0xbc>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	6820      	ldr	r0, [r4, #0]
 800cb40:	1d19      	adds	r1, r3, #4
 800cb42:	6029      	str	r1, [r5, #0]
 800cb44:	0601      	lsls	r1, r0, #24
 800cb46:	d501      	bpl.n	800cb4c <_printf_i+0xec>
 800cb48:	681e      	ldr	r6, [r3, #0]
 800cb4a:	e002      	b.n	800cb52 <_printf_i+0xf2>
 800cb4c:	0646      	lsls	r6, r0, #25
 800cb4e:	d5fb      	bpl.n	800cb48 <_printf_i+0xe8>
 800cb50:	881e      	ldrh	r6, [r3, #0]
 800cb52:	4854      	ldr	r0, [pc, #336]	; (800cca4 <_printf_i+0x244>)
 800cb54:	2f6f      	cmp	r7, #111	; 0x6f
 800cb56:	bf0c      	ite	eq
 800cb58:	2308      	moveq	r3, #8
 800cb5a:	230a      	movne	r3, #10
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb62:	6865      	ldr	r5, [r4, #4]
 800cb64:	60a5      	str	r5, [r4, #8]
 800cb66:	2d00      	cmp	r5, #0
 800cb68:	bfa2      	ittt	ge
 800cb6a:	6821      	ldrge	r1, [r4, #0]
 800cb6c:	f021 0104 	bicge.w	r1, r1, #4
 800cb70:	6021      	strge	r1, [r4, #0]
 800cb72:	b90e      	cbnz	r6, 800cb78 <_printf_i+0x118>
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	d04d      	beq.n	800cc14 <_printf_i+0x1b4>
 800cb78:	4615      	mov	r5, r2
 800cb7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb7e:	fb03 6711 	mls	r7, r3, r1, r6
 800cb82:	5dc7      	ldrb	r7, [r0, r7]
 800cb84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb88:	4637      	mov	r7, r6
 800cb8a:	42bb      	cmp	r3, r7
 800cb8c:	460e      	mov	r6, r1
 800cb8e:	d9f4      	bls.n	800cb7a <_printf_i+0x11a>
 800cb90:	2b08      	cmp	r3, #8
 800cb92:	d10b      	bne.n	800cbac <_printf_i+0x14c>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	07de      	lsls	r6, r3, #31
 800cb98:	d508      	bpl.n	800cbac <_printf_i+0x14c>
 800cb9a:	6923      	ldr	r3, [r4, #16]
 800cb9c:	6861      	ldr	r1, [r4, #4]
 800cb9e:	4299      	cmp	r1, r3
 800cba0:	bfde      	ittt	le
 800cba2:	2330      	movle	r3, #48	; 0x30
 800cba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cba8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cbac:	1b52      	subs	r2, r2, r5
 800cbae:	6122      	str	r2, [r4, #16]
 800cbb0:	f8cd a000 	str.w	sl, [sp]
 800cbb4:	464b      	mov	r3, r9
 800cbb6:	aa03      	add	r2, sp, #12
 800cbb8:	4621      	mov	r1, r4
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f003 fa95 	bl	80100ea <_printf_common>
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d14c      	bne.n	800cc5e <_printf_i+0x1fe>
 800cbc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc8:	b004      	add	sp, #16
 800cbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbce:	4835      	ldr	r0, [pc, #212]	; (800cca4 <_printf_i+0x244>)
 800cbd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbd4:	6829      	ldr	r1, [r5, #0]
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbdc:	6029      	str	r1, [r5, #0]
 800cbde:	061d      	lsls	r5, r3, #24
 800cbe0:	d514      	bpl.n	800cc0c <_printf_i+0x1ac>
 800cbe2:	07df      	lsls	r7, r3, #31
 800cbe4:	bf44      	itt	mi
 800cbe6:	f043 0320 	orrmi.w	r3, r3, #32
 800cbea:	6023      	strmi	r3, [r4, #0]
 800cbec:	b91e      	cbnz	r6, 800cbf6 <_printf_i+0x196>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	f023 0320 	bic.w	r3, r3, #32
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	2310      	movs	r3, #16
 800cbf8:	e7b0      	b.n	800cb5c <_printf_i+0xfc>
 800cbfa:	6823      	ldr	r3, [r4, #0]
 800cbfc:	f043 0320 	orr.w	r3, r3, #32
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	2378      	movs	r3, #120	; 0x78
 800cc04:	4828      	ldr	r0, [pc, #160]	; (800cca8 <_printf_i+0x248>)
 800cc06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc0a:	e7e3      	b.n	800cbd4 <_printf_i+0x174>
 800cc0c:	0659      	lsls	r1, r3, #25
 800cc0e:	bf48      	it	mi
 800cc10:	b2b6      	uxthmi	r6, r6
 800cc12:	e7e6      	b.n	800cbe2 <_printf_i+0x182>
 800cc14:	4615      	mov	r5, r2
 800cc16:	e7bb      	b.n	800cb90 <_printf_i+0x130>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	6826      	ldr	r6, [r4, #0]
 800cc1c:	6961      	ldr	r1, [r4, #20]
 800cc1e:	1d18      	adds	r0, r3, #4
 800cc20:	6028      	str	r0, [r5, #0]
 800cc22:	0635      	lsls	r5, r6, #24
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	d501      	bpl.n	800cc2c <_printf_i+0x1cc>
 800cc28:	6019      	str	r1, [r3, #0]
 800cc2a:	e002      	b.n	800cc32 <_printf_i+0x1d2>
 800cc2c:	0670      	lsls	r0, r6, #25
 800cc2e:	d5fb      	bpl.n	800cc28 <_printf_i+0x1c8>
 800cc30:	8019      	strh	r1, [r3, #0]
 800cc32:	2300      	movs	r3, #0
 800cc34:	6123      	str	r3, [r4, #16]
 800cc36:	4615      	mov	r5, r2
 800cc38:	e7ba      	b.n	800cbb0 <_printf_i+0x150>
 800cc3a:	682b      	ldr	r3, [r5, #0]
 800cc3c:	1d1a      	adds	r2, r3, #4
 800cc3e:	602a      	str	r2, [r5, #0]
 800cc40:	681d      	ldr	r5, [r3, #0]
 800cc42:	6862      	ldr	r2, [r4, #4]
 800cc44:	2100      	movs	r1, #0
 800cc46:	4628      	mov	r0, r5
 800cc48:	f7f3 faaa 	bl	80001a0 <memchr>
 800cc4c:	b108      	cbz	r0, 800cc52 <_printf_i+0x1f2>
 800cc4e:	1b40      	subs	r0, r0, r5
 800cc50:	6060      	str	r0, [r4, #4]
 800cc52:	6863      	ldr	r3, [r4, #4]
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	2300      	movs	r3, #0
 800cc58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc5c:	e7a8      	b.n	800cbb0 <_printf_i+0x150>
 800cc5e:	6923      	ldr	r3, [r4, #16]
 800cc60:	462a      	mov	r2, r5
 800cc62:	4649      	mov	r1, r9
 800cc64:	4640      	mov	r0, r8
 800cc66:	47d0      	blx	sl
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d0ab      	beq.n	800cbc4 <_printf_i+0x164>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	079b      	lsls	r3, r3, #30
 800cc70:	d413      	bmi.n	800cc9a <_printf_i+0x23a>
 800cc72:	68e0      	ldr	r0, [r4, #12]
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	4298      	cmp	r0, r3
 800cc78:	bfb8      	it	lt
 800cc7a:	4618      	movlt	r0, r3
 800cc7c:	e7a4      	b.n	800cbc8 <_printf_i+0x168>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	4632      	mov	r2, r6
 800cc82:	4649      	mov	r1, r9
 800cc84:	4640      	mov	r0, r8
 800cc86:	47d0      	blx	sl
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d09b      	beq.n	800cbc4 <_printf_i+0x164>
 800cc8c:	3501      	adds	r5, #1
 800cc8e:	68e3      	ldr	r3, [r4, #12]
 800cc90:	9903      	ldr	r1, [sp, #12]
 800cc92:	1a5b      	subs	r3, r3, r1
 800cc94:	42ab      	cmp	r3, r5
 800cc96:	dcf2      	bgt.n	800cc7e <_printf_i+0x21e>
 800cc98:	e7eb      	b.n	800cc72 <_printf_i+0x212>
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	f104 0619 	add.w	r6, r4, #25
 800cca0:	e7f5      	b.n	800cc8e <_printf_i+0x22e>
 800cca2:	bf00      	nop
 800cca4:	0801226b 	.word	0x0801226b
 800cca8:	0801227c 	.word	0x0801227c

0800ccac <_sbrk_r>:
 800ccac:	b538      	push	{r3, r4, r5, lr}
 800ccae:	4d06      	ldr	r5, [pc, #24]	; (800ccc8 <_sbrk_r+0x1c>)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	4608      	mov	r0, r1
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	f7f9 f964 	bl	8005f84 <_sbrk>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_sbrk_r+0x1a>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_sbrk_r+0x1a>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	200013ec 	.word	0x200013ec

0800cccc <_localeconv_r>:
 800cccc:	4800      	ldr	r0, [pc, #0]	; (800ccd0 <_localeconv_r+0x4>)
 800ccce:	4770      	bx	lr
 800ccd0:	20000268 	.word	0x20000268

0800ccd4 <__malloc_lock>:
 800ccd4:	4801      	ldr	r0, [pc, #4]	; (800ccdc <__malloc_lock+0x8>)
 800ccd6:	f001 bcc2 	b.w	800e65e <__retarget_lock_acquire_recursive>
 800ccda:	bf00      	nop
 800ccdc:	200003e8 	.word	0x200003e8

0800cce0 <__malloc_unlock>:
 800cce0:	4801      	ldr	r0, [pc, #4]	; (800cce8 <__malloc_unlock+0x8>)
 800cce2:	f001 bcc4 	b.w	800e66e <__retarget_lock_release_recursive>
 800cce6:	bf00      	nop
 800cce8:	200003e8 	.word	0x200003e8

0800ccec <_Balloc>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	b976      	cbnz	r6, 800cd14 <_Balloc+0x28>
 800ccf6:	2010      	movs	r0, #16
 800ccf8:	f7ff fbdc 	bl	800c4b4 <malloc>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	6260      	str	r0, [r4, #36]	; 0x24
 800cd00:	b920      	cbnz	r0, 800cd0c <_Balloc+0x20>
 800cd02:	4b18      	ldr	r3, [pc, #96]	; (800cd64 <_Balloc+0x78>)
 800cd04:	4818      	ldr	r0, [pc, #96]	; (800cd68 <_Balloc+0x7c>)
 800cd06:	2166      	movs	r1, #102	; 0x66
 800cd08:	f000 fb04 	bl	800d314 <__assert_func>
 800cd0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd10:	6006      	str	r6, [r0, #0]
 800cd12:	60c6      	str	r6, [r0, #12]
 800cd14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd16:	68f3      	ldr	r3, [r6, #12]
 800cd18:	b183      	cbz	r3, 800cd3c <_Balloc+0x50>
 800cd1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd22:	b9b8      	cbnz	r0, 800cd54 <_Balloc+0x68>
 800cd24:	2101      	movs	r1, #1
 800cd26:	fa01 f605 	lsl.w	r6, r1, r5
 800cd2a:	1d72      	adds	r2, r6, #5
 800cd2c:	0092      	lsls	r2, r2, #2
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f003 fb43 	bl	80103ba <_calloc_r>
 800cd34:	b160      	cbz	r0, 800cd50 <_Balloc+0x64>
 800cd36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd3a:	e00e      	b.n	800cd5a <_Balloc+0x6e>
 800cd3c:	2221      	movs	r2, #33	; 0x21
 800cd3e:	2104      	movs	r1, #4
 800cd40:	4620      	mov	r0, r4
 800cd42:	f003 fb3a 	bl	80103ba <_calloc_r>
 800cd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd48:	60f0      	str	r0, [r6, #12]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e4      	bne.n	800cd1a <_Balloc+0x2e>
 800cd50:	2000      	movs	r0, #0
 800cd52:	bd70      	pop	{r4, r5, r6, pc}
 800cd54:	6802      	ldr	r2, [r0, #0]
 800cd56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd60:	e7f7      	b.n	800cd52 <_Balloc+0x66>
 800cd62:	bf00      	nop
 800cd64:	0801229a 	.word	0x0801229a
 800cd68:	0801231c 	.word	0x0801231c

0800cd6c <_Bfree>:
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd70:	4605      	mov	r5, r0
 800cd72:	460c      	mov	r4, r1
 800cd74:	b976      	cbnz	r6, 800cd94 <_Bfree+0x28>
 800cd76:	2010      	movs	r0, #16
 800cd78:	f7ff fb9c 	bl	800c4b4 <malloc>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	6268      	str	r0, [r5, #36]	; 0x24
 800cd80:	b920      	cbnz	r0, 800cd8c <_Bfree+0x20>
 800cd82:	4b09      	ldr	r3, [pc, #36]	; (800cda8 <_Bfree+0x3c>)
 800cd84:	4809      	ldr	r0, [pc, #36]	; (800cdac <_Bfree+0x40>)
 800cd86:	218a      	movs	r1, #138	; 0x8a
 800cd88:	f000 fac4 	bl	800d314 <__assert_func>
 800cd8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd90:	6006      	str	r6, [r0, #0]
 800cd92:	60c6      	str	r6, [r0, #12]
 800cd94:	b13c      	cbz	r4, 800cda6 <_Bfree+0x3a>
 800cd96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd98:	6862      	ldr	r2, [r4, #4]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cda0:	6021      	str	r1, [r4, #0]
 800cda2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	0801229a 	.word	0x0801229a
 800cdac:	0801231c 	.word	0x0801231c

0800cdb0 <__multadd>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	690d      	ldr	r5, [r1, #16]
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	460c      	mov	r4, r1
 800cdba:	461e      	mov	r6, r3
 800cdbc:	f101 0c14 	add.w	ip, r1, #20
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	f8dc 3000 	ldr.w	r3, [ip]
 800cdc6:	b299      	uxth	r1, r3
 800cdc8:	fb02 6101 	mla	r1, r2, r1, r6
 800cdcc:	0c1e      	lsrs	r6, r3, #16
 800cdce:	0c0b      	lsrs	r3, r1, #16
 800cdd0:	fb02 3306 	mla	r3, r2, r6, r3
 800cdd4:	b289      	uxth	r1, r1
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cddc:	4285      	cmp	r5, r0
 800cdde:	f84c 1b04 	str.w	r1, [ip], #4
 800cde2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cde6:	dcec      	bgt.n	800cdc2 <__multadd+0x12>
 800cde8:	b30e      	cbz	r6, 800ce2e <__multadd+0x7e>
 800cdea:	68a3      	ldr	r3, [r4, #8]
 800cdec:	42ab      	cmp	r3, r5
 800cdee:	dc19      	bgt.n	800ce24 <__multadd+0x74>
 800cdf0:	6861      	ldr	r1, [r4, #4]
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	3101      	adds	r1, #1
 800cdf6:	f7ff ff79 	bl	800ccec <_Balloc>
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	b928      	cbnz	r0, 800ce0a <__multadd+0x5a>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	4b0c      	ldr	r3, [pc, #48]	; (800ce34 <__multadd+0x84>)
 800ce02:	480d      	ldr	r0, [pc, #52]	; (800ce38 <__multadd+0x88>)
 800ce04:	21b5      	movs	r1, #181	; 0xb5
 800ce06:	f000 fa85 	bl	800d314 <__assert_func>
 800ce0a:	6922      	ldr	r2, [r4, #16]
 800ce0c:	3202      	adds	r2, #2
 800ce0e:	f104 010c 	add.w	r1, r4, #12
 800ce12:	0092      	lsls	r2, r2, #2
 800ce14:	300c      	adds	r0, #12
 800ce16:	f003 f8b4 	bl	800ff82 <memcpy>
 800ce1a:	4621      	mov	r1, r4
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	f7ff ffa5 	bl	800cd6c <_Bfree>
 800ce22:	4644      	mov	r4, r8
 800ce24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce28:	3501      	adds	r5, #1
 800ce2a:	615e      	str	r6, [r3, #20]
 800ce2c:	6125      	str	r5, [r4, #16]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce34:	0801230b 	.word	0x0801230b
 800ce38:	0801231c 	.word	0x0801231c

0800ce3c <__i2b>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	460c      	mov	r4, r1
 800ce40:	2101      	movs	r1, #1
 800ce42:	f7ff ff53 	bl	800ccec <_Balloc>
 800ce46:	4602      	mov	r2, r0
 800ce48:	b928      	cbnz	r0, 800ce56 <__i2b+0x1a>
 800ce4a:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <__i2b+0x24>)
 800ce4c:	4805      	ldr	r0, [pc, #20]	; (800ce64 <__i2b+0x28>)
 800ce4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce52:	f000 fa5f 	bl	800d314 <__assert_func>
 800ce56:	2301      	movs	r3, #1
 800ce58:	6144      	str	r4, [r0, #20]
 800ce5a:	6103      	str	r3, [r0, #16]
 800ce5c:	bd10      	pop	{r4, pc}
 800ce5e:	bf00      	nop
 800ce60:	0801230b 	.word	0x0801230b
 800ce64:	0801231c 	.word	0x0801231c

0800ce68 <__multiply>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	4691      	mov	r9, r2
 800ce6e:	690a      	ldr	r2, [r1, #16]
 800ce70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	bfb8      	it	lt
 800ce78:	460b      	movlt	r3, r1
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	bfbc      	itt	lt
 800ce7e:	464c      	movlt	r4, r9
 800ce80:	4699      	movlt	r9, r3
 800ce82:	6927      	ldr	r7, [r4, #16]
 800ce84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce88:	68a3      	ldr	r3, [r4, #8]
 800ce8a:	6861      	ldr	r1, [r4, #4]
 800ce8c:	eb07 060a 	add.w	r6, r7, sl
 800ce90:	42b3      	cmp	r3, r6
 800ce92:	b085      	sub	sp, #20
 800ce94:	bfb8      	it	lt
 800ce96:	3101      	addlt	r1, #1
 800ce98:	f7ff ff28 	bl	800ccec <_Balloc>
 800ce9c:	b930      	cbnz	r0, 800ceac <__multiply+0x44>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	4b43      	ldr	r3, [pc, #268]	; (800cfb0 <__multiply+0x148>)
 800cea2:	4844      	ldr	r0, [pc, #272]	; (800cfb4 <__multiply+0x14c>)
 800cea4:	f240 115d 	movw	r1, #349	; 0x15d
 800cea8:	f000 fa34 	bl	800d314 <__assert_func>
 800ceac:	f100 0514 	add.w	r5, r0, #20
 800ceb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ceb4:	462b      	mov	r3, r5
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	4543      	cmp	r3, r8
 800ceba:	d321      	bcc.n	800cf00 <__multiply+0x98>
 800cebc:	f104 0314 	add.w	r3, r4, #20
 800cec0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cec4:	f109 0314 	add.w	r3, r9, #20
 800cec8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cecc:	9202      	str	r2, [sp, #8]
 800cece:	1b3a      	subs	r2, r7, r4
 800ced0:	3a15      	subs	r2, #21
 800ced2:	f022 0203 	bic.w	r2, r2, #3
 800ced6:	3204      	adds	r2, #4
 800ced8:	f104 0115 	add.w	r1, r4, #21
 800cedc:	428f      	cmp	r7, r1
 800cede:	bf38      	it	cc
 800cee0:	2204      	movcc	r2, #4
 800cee2:	9201      	str	r2, [sp, #4]
 800cee4:	9a02      	ldr	r2, [sp, #8]
 800cee6:	9303      	str	r3, [sp, #12]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d80c      	bhi.n	800cf06 <__multiply+0x9e>
 800ceec:	2e00      	cmp	r6, #0
 800ceee:	dd03      	ble.n	800cef8 <__multiply+0x90>
 800cef0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d059      	beq.n	800cfac <__multiply+0x144>
 800cef8:	6106      	str	r6, [r0, #16]
 800cefa:	b005      	add	sp, #20
 800cefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf00:	f843 2b04 	str.w	r2, [r3], #4
 800cf04:	e7d8      	b.n	800ceb8 <__multiply+0x50>
 800cf06:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf0a:	f1ba 0f00 	cmp.w	sl, #0
 800cf0e:	d023      	beq.n	800cf58 <__multiply+0xf0>
 800cf10:	f104 0e14 	add.w	lr, r4, #20
 800cf14:	46a9      	mov	r9, r5
 800cf16:	f04f 0c00 	mov.w	ip, #0
 800cf1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf1e:	f8d9 1000 	ldr.w	r1, [r9]
 800cf22:	fa1f fb82 	uxth.w	fp, r2
 800cf26:	b289      	uxth	r1, r1
 800cf28:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf2c:	4461      	add	r1, ip
 800cf2e:	f8d9 c000 	ldr.w	ip, [r9]
 800cf32:	0c12      	lsrs	r2, r2, #16
 800cf34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cf38:	fb0a c202 	mla	r2, sl, r2, ip
 800cf3c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf40:	b289      	uxth	r1, r1
 800cf42:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf46:	4577      	cmp	r7, lr
 800cf48:	f849 1b04 	str.w	r1, [r9], #4
 800cf4c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf50:	d8e3      	bhi.n	800cf1a <__multiply+0xb2>
 800cf52:	9a01      	ldr	r2, [sp, #4]
 800cf54:	f845 c002 	str.w	ip, [r5, r2]
 800cf58:	9a03      	ldr	r2, [sp, #12]
 800cf5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	f1b9 0f00 	cmp.w	r9, #0
 800cf64:	d020      	beq.n	800cfa8 <__multiply+0x140>
 800cf66:	6829      	ldr	r1, [r5, #0]
 800cf68:	f104 0c14 	add.w	ip, r4, #20
 800cf6c:	46ae      	mov	lr, r5
 800cf6e:	f04f 0a00 	mov.w	sl, #0
 800cf72:	f8bc b000 	ldrh.w	fp, [ip]
 800cf76:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf7a:	fb09 220b 	mla	r2, r9, fp, r2
 800cf7e:	4492      	add	sl, r2
 800cf80:	b289      	uxth	r1, r1
 800cf82:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf86:	f84e 1b04 	str.w	r1, [lr], #4
 800cf8a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf8e:	f8be 1000 	ldrh.w	r1, [lr]
 800cf92:	0c12      	lsrs	r2, r2, #16
 800cf94:	fb09 1102 	mla	r1, r9, r2, r1
 800cf98:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf9c:	4567      	cmp	r7, ip
 800cf9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfa2:	d8e6      	bhi.n	800cf72 <__multiply+0x10a>
 800cfa4:	9a01      	ldr	r2, [sp, #4]
 800cfa6:	50a9      	str	r1, [r5, r2]
 800cfa8:	3504      	adds	r5, #4
 800cfaa:	e79b      	b.n	800cee4 <__multiply+0x7c>
 800cfac:	3e01      	subs	r6, #1
 800cfae:	e79d      	b.n	800ceec <__multiply+0x84>
 800cfb0:	0801230b 	.word	0x0801230b
 800cfb4:	0801231c 	.word	0x0801231c

0800cfb8 <__pow5mult>:
 800cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfbc:	4615      	mov	r5, r2
 800cfbe:	f012 0203 	ands.w	r2, r2, #3
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	460f      	mov	r7, r1
 800cfc6:	d007      	beq.n	800cfd8 <__pow5mult+0x20>
 800cfc8:	4c25      	ldr	r4, [pc, #148]	; (800d060 <__pow5mult+0xa8>)
 800cfca:	3a01      	subs	r2, #1
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfd2:	f7ff feed 	bl	800cdb0 <__multadd>
 800cfd6:	4607      	mov	r7, r0
 800cfd8:	10ad      	asrs	r5, r5, #2
 800cfda:	d03d      	beq.n	800d058 <__pow5mult+0xa0>
 800cfdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cfde:	b97c      	cbnz	r4, 800d000 <__pow5mult+0x48>
 800cfe0:	2010      	movs	r0, #16
 800cfe2:	f7ff fa67 	bl	800c4b4 <malloc>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	6270      	str	r0, [r6, #36]	; 0x24
 800cfea:	b928      	cbnz	r0, 800cff8 <__pow5mult+0x40>
 800cfec:	4b1d      	ldr	r3, [pc, #116]	; (800d064 <__pow5mult+0xac>)
 800cfee:	481e      	ldr	r0, [pc, #120]	; (800d068 <__pow5mult+0xb0>)
 800cff0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cff4:	f000 f98e 	bl	800d314 <__assert_func>
 800cff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cffc:	6004      	str	r4, [r0, #0]
 800cffe:	60c4      	str	r4, [r0, #12]
 800d000:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d008:	b94c      	cbnz	r4, 800d01e <__pow5mult+0x66>
 800d00a:	f240 2171 	movw	r1, #625	; 0x271
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff ff14 	bl	800ce3c <__i2b>
 800d014:	2300      	movs	r3, #0
 800d016:	f8c8 0008 	str.w	r0, [r8, #8]
 800d01a:	4604      	mov	r4, r0
 800d01c:	6003      	str	r3, [r0, #0]
 800d01e:	f04f 0900 	mov.w	r9, #0
 800d022:	07eb      	lsls	r3, r5, #31
 800d024:	d50a      	bpl.n	800d03c <__pow5mult+0x84>
 800d026:	4639      	mov	r1, r7
 800d028:	4622      	mov	r2, r4
 800d02a:	4630      	mov	r0, r6
 800d02c:	f7ff ff1c 	bl	800ce68 <__multiply>
 800d030:	4639      	mov	r1, r7
 800d032:	4680      	mov	r8, r0
 800d034:	4630      	mov	r0, r6
 800d036:	f7ff fe99 	bl	800cd6c <_Bfree>
 800d03a:	4647      	mov	r7, r8
 800d03c:	106d      	asrs	r5, r5, #1
 800d03e:	d00b      	beq.n	800d058 <__pow5mult+0xa0>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	b938      	cbnz	r0, 800d054 <__pow5mult+0x9c>
 800d044:	4622      	mov	r2, r4
 800d046:	4621      	mov	r1, r4
 800d048:	4630      	mov	r0, r6
 800d04a:	f7ff ff0d 	bl	800ce68 <__multiply>
 800d04e:	6020      	str	r0, [r4, #0]
 800d050:	f8c0 9000 	str.w	r9, [r0]
 800d054:	4604      	mov	r4, r0
 800d056:	e7e4      	b.n	800d022 <__pow5mult+0x6a>
 800d058:	4638      	mov	r0, r7
 800d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05e:	bf00      	nop
 800d060:	080120ec 	.word	0x080120ec
 800d064:	0801229a 	.word	0x0801229a
 800d068:	0801231c 	.word	0x0801231c

0800d06c <__lshift>:
 800d06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d070:	460c      	mov	r4, r1
 800d072:	6849      	ldr	r1, [r1, #4]
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d07a:	68a3      	ldr	r3, [r4, #8]
 800d07c:	4607      	mov	r7, r0
 800d07e:	4691      	mov	r9, r2
 800d080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d084:	f108 0601 	add.w	r6, r8, #1
 800d088:	42b3      	cmp	r3, r6
 800d08a:	db0b      	blt.n	800d0a4 <__lshift+0x38>
 800d08c:	4638      	mov	r0, r7
 800d08e:	f7ff fe2d 	bl	800ccec <_Balloc>
 800d092:	4605      	mov	r5, r0
 800d094:	b948      	cbnz	r0, 800d0aa <__lshift+0x3e>
 800d096:	4602      	mov	r2, r0
 800d098:	4b2a      	ldr	r3, [pc, #168]	; (800d144 <__lshift+0xd8>)
 800d09a:	482b      	ldr	r0, [pc, #172]	; (800d148 <__lshift+0xdc>)
 800d09c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0a0:	f000 f938 	bl	800d314 <__assert_func>
 800d0a4:	3101      	adds	r1, #1
 800d0a6:	005b      	lsls	r3, r3, #1
 800d0a8:	e7ee      	b.n	800d088 <__lshift+0x1c>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f100 0114 	add.w	r1, r0, #20
 800d0b0:	f100 0210 	add.w	r2, r0, #16
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	4553      	cmp	r3, sl
 800d0b8:	db37      	blt.n	800d12a <__lshift+0xbe>
 800d0ba:	6920      	ldr	r0, [r4, #16]
 800d0bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0c0:	f104 0314 	add.w	r3, r4, #20
 800d0c4:	f019 091f 	ands.w	r9, r9, #31
 800d0c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0d0:	d02f      	beq.n	800d132 <__lshift+0xc6>
 800d0d2:	f1c9 0e20 	rsb	lr, r9, #32
 800d0d6:	468a      	mov	sl, r1
 800d0d8:	f04f 0c00 	mov.w	ip, #0
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	fa02 f209 	lsl.w	r2, r2, r9
 800d0e2:	ea42 020c 	orr.w	r2, r2, ip
 800d0e6:	f84a 2b04 	str.w	r2, [sl], #4
 800d0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ee:	4298      	cmp	r0, r3
 800d0f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0f4:	d8f2      	bhi.n	800d0dc <__lshift+0x70>
 800d0f6:	1b03      	subs	r3, r0, r4
 800d0f8:	3b15      	subs	r3, #21
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	3304      	adds	r3, #4
 800d100:	f104 0215 	add.w	r2, r4, #21
 800d104:	4290      	cmp	r0, r2
 800d106:	bf38      	it	cc
 800d108:	2304      	movcc	r3, #4
 800d10a:	f841 c003 	str.w	ip, [r1, r3]
 800d10e:	f1bc 0f00 	cmp.w	ip, #0
 800d112:	d001      	beq.n	800d118 <__lshift+0xac>
 800d114:	f108 0602 	add.w	r6, r8, #2
 800d118:	3e01      	subs	r6, #1
 800d11a:	4638      	mov	r0, r7
 800d11c:	612e      	str	r6, [r5, #16]
 800d11e:	4621      	mov	r1, r4
 800d120:	f7ff fe24 	bl	800cd6c <_Bfree>
 800d124:	4628      	mov	r0, r5
 800d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d12e:	3301      	adds	r3, #1
 800d130:	e7c1      	b.n	800d0b6 <__lshift+0x4a>
 800d132:	3904      	subs	r1, #4
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	f841 2f04 	str.w	r2, [r1, #4]!
 800d13c:	4298      	cmp	r0, r3
 800d13e:	d8f9      	bhi.n	800d134 <__lshift+0xc8>
 800d140:	e7ea      	b.n	800d118 <__lshift+0xac>
 800d142:	bf00      	nop
 800d144:	0801230b 	.word	0x0801230b
 800d148:	0801231c 	.word	0x0801231c

0800d14c <__mdiff>:
 800d14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	460d      	mov	r5, r1
 800d152:	4607      	mov	r7, r0
 800d154:	4611      	mov	r1, r2
 800d156:	4628      	mov	r0, r5
 800d158:	4614      	mov	r4, r2
 800d15a:	f003 f913 	bl	8010384 <__mcmp>
 800d15e:	1e06      	subs	r6, r0, #0
 800d160:	d111      	bne.n	800d186 <__mdiff+0x3a>
 800d162:	4631      	mov	r1, r6
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff fdc1 	bl	800ccec <_Balloc>
 800d16a:	4602      	mov	r2, r0
 800d16c:	b928      	cbnz	r0, 800d17a <__mdiff+0x2e>
 800d16e:	4b39      	ldr	r3, [pc, #228]	; (800d254 <__mdiff+0x108>)
 800d170:	f240 2132 	movw	r1, #562	; 0x232
 800d174:	4838      	ldr	r0, [pc, #224]	; (800d258 <__mdiff+0x10c>)
 800d176:	f000 f8cd 	bl	800d314 <__assert_func>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d180:	4610      	mov	r0, r2
 800d182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d186:	bfa4      	itt	ge
 800d188:	4623      	movge	r3, r4
 800d18a:	462c      	movge	r4, r5
 800d18c:	4638      	mov	r0, r7
 800d18e:	6861      	ldr	r1, [r4, #4]
 800d190:	bfa6      	itte	ge
 800d192:	461d      	movge	r5, r3
 800d194:	2600      	movge	r6, #0
 800d196:	2601      	movlt	r6, #1
 800d198:	f7ff fda8 	bl	800ccec <_Balloc>
 800d19c:	4602      	mov	r2, r0
 800d19e:	b918      	cbnz	r0, 800d1a8 <__mdiff+0x5c>
 800d1a0:	4b2c      	ldr	r3, [pc, #176]	; (800d254 <__mdiff+0x108>)
 800d1a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d1a6:	e7e5      	b.n	800d174 <__mdiff+0x28>
 800d1a8:	6927      	ldr	r7, [r4, #16]
 800d1aa:	60c6      	str	r6, [r0, #12]
 800d1ac:	692e      	ldr	r6, [r5, #16]
 800d1ae:	f104 0014 	add.w	r0, r4, #20
 800d1b2:	f105 0914 	add.w	r9, r5, #20
 800d1b6:	f102 0e14 	add.w	lr, r2, #20
 800d1ba:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800d1be:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1c2:	3410      	adds	r4, #16
 800d1c4:	46f2      	mov	sl, lr
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1cc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d1d0:	fa1f f883 	uxth.w	r8, r3
 800d1d4:	fa11 f18b 	uxtah	r1, r1, fp
 800d1d8:	0c1b      	lsrs	r3, r3, #16
 800d1da:	eba1 0808 	sub.w	r8, r1, r8
 800d1de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d1e6:	fa1f f888 	uxth.w	r8, r8
 800d1ea:	1419      	asrs	r1, r3, #16
 800d1ec:	454e      	cmp	r6, r9
 800d1ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d1f2:	f84a 3b04 	str.w	r3, [sl], #4
 800d1f6:	d8e7      	bhi.n	800d1c8 <__mdiff+0x7c>
 800d1f8:	1b73      	subs	r3, r6, r5
 800d1fa:	3b15      	subs	r3, #21
 800d1fc:	f023 0303 	bic.w	r3, r3, #3
 800d200:	3304      	adds	r3, #4
 800d202:	3515      	adds	r5, #21
 800d204:	42ae      	cmp	r6, r5
 800d206:	bf38      	it	cc
 800d208:	2304      	movcc	r3, #4
 800d20a:	4418      	add	r0, r3
 800d20c:	4473      	add	r3, lr
 800d20e:	469e      	mov	lr, r3
 800d210:	4606      	mov	r6, r0
 800d212:	4566      	cmp	r6, ip
 800d214:	d30e      	bcc.n	800d234 <__mdiff+0xe8>
 800d216:	f10c 0103 	add.w	r1, ip, #3
 800d21a:	1a09      	subs	r1, r1, r0
 800d21c:	f021 0103 	bic.w	r1, r1, #3
 800d220:	3803      	subs	r0, #3
 800d222:	4584      	cmp	ip, r0
 800d224:	bf38      	it	cc
 800d226:	2100      	movcc	r1, #0
 800d228:	4419      	add	r1, r3
 800d22a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d22e:	b17b      	cbz	r3, 800d250 <__mdiff+0x104>
 800d230:	6117      	str	r7, [r2, #16]
 800d232:	e7a5      	b.n	800d180 <__mdiff+0x34>
 800d234:	f856 8b04 	ldr.w	r8, [r6], #4
 800d238:	fa11 f488 	uxtah	r4, r1, r8
 800d23c:	1425      	asrs	r5, r4, #16
 800d23e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800d242:	b2a4      	uxth	r4, r4
 800d244:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800d248:	f84e 4b04 	str.w	r4, [lr], #4
 800d24c:	1429      	asrs	r1, r5, #16
 800d24e:	e7e0      	b.n	800d212 <__mdiff+0xc6>
 800d250:	3f01      	subs	r7, #1
 800d252:	e7ea      	b.n	800d22a <__mdiff+0xde>
 800d254:	0801230b 	.word	0x0801230b
 800d258:	0801231c 	.word	0x0801231c

0800d25c <__d2b>:
 800d25c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d260:	2101      	movs	r1, #1
 800d262:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d266:	4690      	mov	r8, r2
 800d268:	461d      	mov	r5, r3
 800d26a:	f7ff fd3f 	bl	800ccec <_Balloc>
 800d26e:	4604      	mov	r4, r0
 800d270:	b930      	cbnz	r0, 800d280 <__d2b+0x24>
 800d272:	4602      	mov	r2, r0
 800d274:	4b25      	ldr	r3, [pc, #148]	; (800d30c <__d2b+0xb0>)
 800d276:	4826      	ldr	r0, [pc, #152]	; (800d310 <__d2b+0xb4>)
 800d278:	f240 310a 	movw	r1, #778	; 0x30a
 800d27c:	f000 f84a 	bl	800d314 <__assert_func>
 800d280:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d284:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d288:	bb2d      	cbnz	r5, 800d2d6 <__d2b+0x7a>
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	f1b8 0300 	subs.w	r3, r8, #0
 800d290:	d026      	beq.n	800d2e0 <__d2b+0x84>
 800d292:	4668      	mov	r0, sp
 800d294:	9300      	str	r3, [sp, #0]
 800d296:	f003 f848 	bl	801032a <__lo0bits>
 800d29a:	9900      	ldr	r1, [sp, #0]
 800d29c:	b1f0      	cbz	r0, 800d2dc <__d2b+0x80>
 800d29e:	9a01      	ldr	r2, [sp, #4]
 800d2a0:	f1c0 0320 	rsb	r3, r0, #32
 800d2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a8:	430b      	orrs	r3, r1
 800d2aa:	40c2      	lsrs	r2, r0
 800d2ac:	6163      	str	r3, [r4, #20]
 800d2ae:	9201      	str	r2, [sp, #4]
 800d2b0:	9b01      	ldr	r3, [sp, #4]
 800d2b2:	61a3      	str	r3, [r4, #24]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bf14      	ite	ne
 800d2b8:	2102      	movne	r1, #2
 800d2ba:	2101      	moveq	r1, #1
 800d2bc:	6121      	str	r1, [r4, #16]
 800d2be:	b1c5      	cbz	r5, 800d2f2 <__d2b+0x96>
 800d2c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2c4:	4405      	add	r5, r0
 800d2c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2ca:	603d      	str	r5, [r7, #0]
 800d2cc:	6030      	str	r0, [r6, #0]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	b002      	add	sp, #8
 800d2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2da:	e7d6      	b.n	800d28a <__d2b+0x2e>
 800d2dc:	6161      	str	r1, [r4, #20]
 800d2de:	e7e7      	b.n	800d2b0 <__d2b+0x54>
 800d2e0:	a801      	add	r0, sp, #4
 800d2e2:	f003 f822 	bl	801032a <__lo0bits>
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	6163      	str	r3, [r4, #20]
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	6121      	str	r1, [r4, #16]
 800d2ee:	3020      	adds	r0, #32
 800d2f0:	e7e5      	b.n	800d2be <__d2b+0x62>
 800d2f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d2f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2fa:	6038      	str	r0, [r7, #0]
 800d2fc:	6918      	ldr	r0, [r3, #16]
 800d2fe:	f002 fff4 	bl	80102ea <__hi0bits>
 800d302:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d306:	6031      	str	r1, [r6, #0]
 800d308:	e7e1      	b.n	800d2ce <__d2b+0x72>
 800d30a:	bf00      	nop
 800d30c:	0801230b 	.word	0x0801230b
 800d310:	0801231c 	.word	0x0801231c

0800d314 <__assert_func>:
 800d314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d316:	4614      	mov	r4, r2
 800d318:	461a      	mov	r2, r3
 800d31a:	4b09      	ldr	r3, [pc, #36]	; (800d340 <__assert_func+0x2c>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4605      	mov	r5, r0
 800d320:	68d8      	ldr	r0, [r3, #12]
 800d322:	b14c      	cbz	r4, 800d338 <__assert_func+0x24>
 800d324:	4b07      	ldr	r3, [pc, #28]	; (800d344 <__assert_func+0x30>)
 800d326:	9100      	str	r1, [sp, #0]
 800d328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d32c:	4906      	ldr	r1, [pc, #24]	; (800d348 <__assert_func+0x34>)
 800d32e:	462b      	mov	r3, r5
 800d330:	f000 f80e 	bl	800d350 <fiprintf>
 800d334:	f003 f895 	bl	8010462 <abort>
 800d338:	4b04      	ldr	r3, [pc, #16]	; (800d34c <__assert_func+0x38>)
 800d33a:	461c      	mov	r4, r3
 800d33c:	e7f3      	b.n	800d326 <__assert_func+0x12>
 800d33e:	bf00      	nop
 800d340:	20000114 	.word	0x20000114
 800d344:	08012377 	.word	0x08012377
 800d348:	08012384 	.word	0x08012384
 800d34c:	080123b2 	.word	0x080123b2

0800d350 <fiprintf>:
 800d350:	b40e      	push	{r1, r2, r3}
 800d352:	b503      	push	{r0, r1, lr}
 800d354:	4601      	mov	r1, r0
 800d356:	ab03      	add	r3, sp, #12
 800d358:	4805      	ldr	r0, [pc, #20]	; (800d370 <fiprintf+0x20>)
 800d35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d35e:	6800      	ldr	r0, [r0, #0]
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	f000 f807 	bl	800d374 <_vfiprintf_r>
 800d366:	b002      	add	sp, #8
 800d368:	f85d eb04 	ldr.w	lr, [sp], #4
 800d36c:	b003      	add	sp, #12
 800d36e:	4770      	bx	lr
 800d370:	20000114 	.word	0x20000114

0800d374 <_vfiprintf_r>:
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	460d      	mov	r5, r1
 800d37a:	b09d      	sub	sp, #116	; 0x74
 800d37c:	4614      	mov	r4, r2
 800d37e:	4698      	mov	r8, r3
 800d380:	4606      	mov	r6, r0
 800d382:	b118      	cbz	r0, 800d38c <_vfiprintf_r+0x18>
 800d384:	6983      	ldr	r3, [r0, #24]
 800d386:	b90b      	cbnz	r3, 800d38c <_vfiprintf_r+0x18>
 800d388:	f000 fae4 	bl	800d954 <__sinit>
 800d38c:	4b89      	ldr	r3, [pc, #548]	; (800d5b4 <_vfiprintf_r+0x240>)
 800d38e:	429d      	cmp	r5, r3
 800d390:	d11b      	bne.n	800d3ca <_vfiprintf_r+0x56>
 800d392:	6875      	ldr	r5, [r6, #4]
 800d394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d396:	07d9      	lsls	r1, r3, #31
 800d398:	d405      	bmi.n	800d3a6 <_vfiprintf_r+0x32>
 800d39a:	89ab      	ldrh	r3, [r5, #12]
 800d39c:	059a      	lsls	r2, r3, #22
 800d39e:	d402      	bmi.n	800d3a6 <_vfiprintf_r+0x32>
 800d3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3a2:	f001 f95c 	bl	800e65e <__retarget_lock_acquire_recursive>
 800d3a6:	89ab      	ldrh	r3, [r5, #12]
 800d3a8:	071b      	lsls	r3, r3, #28
 800d3aa:	d501      	bpl.n	800d3b0 <_vfiprintf_r+0x3c>
 800d3ac:	692b      	ldr	r3, [r5, #16]
 800d3ae:	b9eb      	cbnz	r3, 800d3ec <_vfiprintf_r+0x78>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f000 f960 	bl	800d678 <__swsetup_r>
 800d3b8:	b1c0      	cbz	r0, 800d3ec <_vfiprintf_r+0x78>
 800d3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3bc:	07dc      	lsls	r4, r3, #31
 800d3be:	d50e      	bpl.n	800d3de <_vfiprintf_r+0x6a>
 800d3c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3c4:	b01d      	add	sp, #116	; 0x74
 800d3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ca:	4b7b      	ldr	r3, [pc, #492]	; (800d5b8 <_vfiprintf_r+0x244>)
 800d3cc:	429d      	cmp	r5, r3
 800d3ce:	d101      	bne.n	800d3d4 <_vfiprintf_r+0x60>
 800d3d0:	68b5      	ldr	r5, [r6, #8]
 800d3d2:	e7df      	b.n	800d394 <_vfiprintf_r+0x20>
 800d3d4:	4b79      	ldr	r3, [pc, #484]	; (800d5bc <_vfiprintf_r+0x248>)
 800d3d6:	429d      	cmp	r5, r3
 800d3d8:	bf08      	it	eq
 800d3da:	68f5      	ldreq	r5, [r6, #12]
 800d3dc:	e7da      	b.n	800d394 <_vfiprintf_r+0x20>
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	0598      	lsls	r0, r3, #22
 800d3e2:	d4ed      	bmi.n	800d3c0 <_vfiprintf_r+0x4c>
 800d3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3e6:	f001 f942 	bl	800e66e <__retarget_lock_release_recursive>
 800d3ea:	e7e9      	b.n	800d3c0 <_vfiprintf_r+0x4c>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f0:	2320      	movs	r3, #32
 800d3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3fa:	2330      	movs	r3, #48	; 0x30
 800d3fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d5c0 <_vfiprintf_r+0x24c>
 800d400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d404:	f04f 0901 	mov.w	r9, #1
 800d408:	4623      	mov	r3, r4
 800d40a:	469a      	mov	sl, r3
 800d40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d410:	b10a      	cbz	r2, 800d416 <_vfiprintf_r+0xa2>
 800d412:	2a25      	cmp	r2, #37	; 0x25
 800d414:	d1f9      	bne.n	800d40a <_vfiprintf_r+0x96>
 800d416:	ebba 0b04 	subs.w	fp, sl, r4
 800d41a:	d00b      	beq.n	800d434 <_vfiprintf_r+0xc0>
 800d41c:	465b      	mov	r3, fp
 800d41e:	4622      	mov	r2, r4
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f002 fffe 	bl	8010424 <__sfputs_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	f000 80aa 	beq.w	800d582 <_vfiprintf_r+0x20e>
 800d42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d430:	445a      	add	r2, fp
 800d432:	9209      	str	r2, [sp, #36]	; 0x24
 800d434:	f89a 3000 	ldrb.w	r3, [sl]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 80a2 	beq.w	800d582 <_vfiprintf_r+0x20e>
 800d43e:	2300      	movs	r3, #0
 800d440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d448:	f10a 0a01 	add.w	sl, sl, #1
 800d44c:	9304      	str	r3, [sp, #16]
 800d44e:	9307      	str	r3, [sp, #28]
 800d450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d454:	931a      	str	r3, [sp, #104]	; 0x68
 800d456:	4654      	mov	r4, sl
 800d458:	2205      	movs	r2, #5
 800d45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d45e:	4858      	ldr	r0, [pc, #352]	; (800d5c0 <_vfiprintf_r+0x24c>)
 800d460:	f7f2 fe9e 	bl	80001a0 <memchr>
 800d464:	9a04      	ldr	r2, [sp, #16]
 800d466:	b9d8      	cbnz	r0, 800d4a0 <_vfiprintf_r+0x12c>
 800d468:	06d1      	lsls	r1, r2, #27
 800d46a:	bf44      	itt	mi
 800d46c:	2320      	movmi	r3, #32
 800d46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d472:	0713      	lsls	r3, r2, #28
 800d474:	bf44      	itt	mi
 800d476:	232b      	movmi	r3, #43	; 0x2b
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d47c:	f89a 3000 	ldrb.w	r3, [sl]
 800d480:	2b2a      	cmp	r3, #42	; 0x2a
 800d482:	d015      	beq.n	800d4b0 <_vfiprintf_r+0x13c>
 800d484:	9a07      	ldr	r2, [sp, #28]
 800d486:	4654      	mov	r4, sl
 800d488:	2000      	movs	r0, #0
 800d48a:	f04f 0c0a 	mov.w	ip, #10
 800d48e:	4621      	mov	r1, r4
 800d490:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d494:	3b30      	subs	r3, #48	; 0x30
 800d496:	2b09      	cmp	r3, #9
 800d498:	d94e      	bls.n	800d538 <_vfiprintf_r+0x1c4>
 800d49a:	b1b0      	cbz	r0, 800d4ca <_vfiprintf_r+0x156>
 800d49c:	9207      	str	r2, [sp, #28]
 800d49e:	e014      	b.n	800d4ca <_vfiprintf_r+0x156>
 800d4a0:	eba0 0308 	sub.w	r3, r0, r8
 800d4a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	46a2      	mov	sl, r4
 800d4ae:	e7d2      	b.n	800d456 <_vfiprintf_r+0xe2>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d19      	adds	r1, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9103      	str	r1, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfbb      	ittet	lt
 800d4bc:	425b      	neglt	r3, r3
 800d4be:	f042 0202 	orrlt.w	r2, r2, #2
 800d4c2:	9307      	strge	r3, [sp, #28]
 800d4c4:	9307      	strlt	r3, [sp, #28]
 800d4c6:	bfb8      	it	lt
 800d4c8:	9204      	strlt	r2, [sp, #16]
 800d4ca:	7823      	ldrb	r3, [r4, #0]
 800d4cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d4ce:	d10c      	bne.n	800d4ea <_vfiprintf_r+0x176>
 800d4d0:	7863      	ldrb	r3, [r4, #1]
 800d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d4:	d135      	bne.n	800d542 <_vfiprintf_r+0x1ce>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	1d1a      	adds	r2, r3, #4
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	9203      	str	r2, [sp, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bfb8      	it	lt
 800d4e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4e6:	3402      	adds	r4, #2
 800d4e8:	9305      	str	r3, [sp, #20]
 800d4ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d5c4 <_vfiprintf_r+0x250>
 800d4ee:	7821      	ldrb	r1, [r4, #0]
 800d4f0:	2203      	movs	r2, #3
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	f7f2 fe54 	bl	80001a0 <memchr>
 800d4f8:	b140      	cbz	r0, 800d50c <_vfiprintf_r+0x198>
 800d4fa:	2340      	movs	r3, #64	; 0x40
 800d4fc:	eba0 000a 	sub.w	r0, r0, sl
 800d500:	fa03 f000 	lsl.w	r0, r3, r0
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	4303      	orrs	r3, r0
 800d508:	3401      	adds	r4, #1
 800d50a:	9304      	str	r3, [sp, #16]
 800d50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d510:	482d      	ldr	r0, [pc, #180]	; (800d5c8 <_vfiprintf_r+0x254>)
 800d512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d516:	2206      	movs	r2, #6
 800d518:	f7f2 fe42 	bl	80001a0 <memchr>
 800d51c:	2800      	cmp	r0, #0
 800d51e:	d03f      	beq.n	800d5a0 <_vfiprintf_r+0x22c>
 800d520:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <_vfiprintf_r+0x258>)
 800d522:	bb1b      	cbnz	r3, 800d56c <_vfiprintf_r+0x1f8>
 800d524:	9b03      	ldr	r3, [sp, #12]
 800d526:	3307      	adds	r3, #7
 800d528:	f023 0307 	bic.w	r3, r3, #7
 800d52c:	3308      	adds	r3, #8
 800d52e:	9303      	str	r3, [sp, #12]
 800d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d532:	443b      	add	r3, r7
 800d534:	9309      	str	r3, [sp, #36]	; 0x24
 800d536:	e767      	b.n	800d408 <_vfiprintf_r+0x94>
 800d538:	fb0c 3202 	mla	r2, ip, r2, r3
 800d53c:	460c      	mov	r4, r1
 800d53e:	2001      	movs	r0, #1
 800d540:	e7a5      	b.n	800d48e <_vfiprintf_r+0x11a>
 800d542:	2300      	movs	r3, #0
 800d544:	3401      	adds	r4, #1
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	4619      	mov	r1, r3
 800d54a:	f04f 0c0a 	mov.w	ip, #10
 800d54e:	4620      	mov	r0, r4
 800d550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d554:	3a30      	subs	r2, #48	; 0x30
 800d556:	2a09      	cmp	r2, #9
 800d558:	d903      	bls.n	800d562 <_vfiprintf_r+0x1ee>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d0c5      	beq.n	800d4ea <_vfiprintf_r+0x176>
 800d55e:	9105      	str	r1, [sp, #20]
 800d560:	e7c3      	b.n	800d4ea <_vfiprintf_r+0x176>
 800d562:	fb0c 2101 	mla	r1, ip, r1, r2
 800d566:	4604      	mov	r4, r0
 800d568:	2301      	movs	r3, #1
 800d56a:	e7f0      	b.n	800d54e <_vfiprintf_r+0x1da>
 800d56c:	ab03      	add	r3, sp, #12
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	462a      	mov	r2, r5
 800d572:	4b17      	ldr	r3, [pc, #92]	; (800d5d0 <_vfiprintf_r+0x25c>)
 800d574:	a904      	add	r1, sp, #16
 800d576:	4630      	mov	r0, r6
 800d578:	f7ff f848 	bl	800c60c <_printf_float>
 800d57c:	4607      	mov	r7, r0
 800d57e:	1c78      	adds	r0, r7, #1
 800d580:	d1d6      	bne.n	800d530 <_vfiprintf_r+0x1bc>
 800d582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d584:	07d9      	lsls	r1, r3, #31
 800d586:	d405      	bmi.n	800d594 <_vfiprintf_r+0x220>
 800d588:	89ab      	ldrh	r3, [r5, #12]
 800d58a:	059a      	lsls	r2, r3, #22
 800d58c:	d402      	bmi.n	800d594 <_vfiprintf_r+0x220>
 800d58e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d590:	f001 f86d 	bl	800e66e <__retarget_lock_release_recursive>
 800d594:	89ab      	ldrh	r3, [r5, #12]
 800d596:	065b      	lsls	r3, r3, #25
 800d598:	f53f af12 	bmi.w	800d3c0 <_vfiprintf_r+0x4c>
 800d59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d59e:	e711      	b.n	800d3c4 <_vfiprintf_r+0x50>
 800d5a0:	ab03      	add	r3, sp, #12
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	462a      	mov	r2, r5
 800d5a6:	4b0a      	ldr	r3, [pc, #40]	; (800d5d0 <_vfiprintf_r+0x25c>)
 800d5a8:	a904      	add	r1, sp, #16
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff fa58 	bl	800ca60 <_printf_i>
 800d5b0:	e7e4      	b.n	800d57c <_vfiprintf_r+0x208>
 800d5b2:	bf00      	nop
 800d5b4:	08012118 	.word	0x08012118
 800d5b8:	08012138 	.word	0x08012138
 800d5bc:	080120f8 	.word	0x080120f8
 800d5c0:	080123bd 	.word	0x080123bd
 800d5c4:	080123c3 	.word	0x080123c3
 800d5c8:	080123c7 	.word	0x080123c7
 800d5cc:	0800c60d 	.word	0x0800c60d
 800d5d0:	08010425 	.word	0x08010425

0800d5d4 <__swbuf_r>:
 800d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d6:	460e      	mov	r6, r1
 800d5d8:	4614      	mov	r4, r2
 800d5da:	4605      	mov	r5, r0
 800d5dc:	b118      	cbz	r0, 800d5e6 <__swbuf_r+0x12>
 800d5de:	6983      	ldr	r3, [r0, #24]
 800d5e0:	b90b      	cbnz	r3, 800d5e6 <__swbuf_r+0x12>
 800d5e2:	f000 f9b7 	bl	800d954 <__sinit>
 800d5e6:	4b21      	ldr	r3, [pc, #132]	; (800d66c <__swbuf_r+0x98>)
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	d12b      	bne.n	800d644 <__swbuf_r+0x70>
 800d5ec:	686c      	ldr	r4, [r5, #4]
 800d5ee:	69a3      	ldr	r3, [r4, #24]
 800d5f0:	60a3      	str	r3, [r4, #8]
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	071a      	lsls	r2, r3, #28
 800d5f6:	d52f      	bpl.n	800d658 <__swbuf_r+0x84>
 800d5f8:	6923      	ldr	r3, [r4, #16]
 800d5fa:	b36b      	cbz	r3, 800d658 <__swbuf_r+0x84>
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	1ac0      	subs	r0, r0, r3
 800d602:	6963      	ldr	r3, [r4, #20]
 800d604:	b2f6      	uxtb	r6, r6
 800d606:	4283      	cmp	r3, r0
 800d608:	4637      	mov	r7, r6
 800d60a:	dc04      	bgt.n	800d616 <__swbuf_r+0x42>
 800d60c:	4621      	mov	r1, r4
 800d60e:	4628      	mov	r0, r5
 800d610:	f000 f922 	bl	800d858 <_fflush_r>
 800d614:	bb30      	cbnz	r0, 800d664 <__swbuf_r+0x90>
 800d616:	68a3      	ldr	r3, [r4, #8]
 800d618:	3b01      	subs	r3, #1
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	6022      	str	r2, [r4, #0]
 800d622:	701e      	strb	r6, [r3, #0]
 800d624:	6963      	ldr	r3, [r4, #20]
 800d626:	3001      	adds	r0, #1
 800d628:	4283      	cmp	r3, r0
 800d62a:	d004      	beq.n	800d636 <__swbuf_r+0x62>
 800d62c:	89a3      	ldrh	r3, [r4, #12]
 800d62e:	07db      	lsls	r3, r3, #31
 800d630:	d506      	bpl.n	800d640 <__swbuf_r+0x6c>
 800d632:	2e0a      	cmp	r6, #10
 800d634:	d104      	bne.n	800d640 <__swbuf_r+0x6c>
 800d636:	4621      	mov	r1, r4
 800d638:	4628      	mov	r0, r5
 800d63a:	f000 f90d 	bl	800d858 <_fflush_r>
 800d63e:	b988      	cbnz	r0, 800d664 <__swbuf_r+0x90>
 800d640:	4638      	mov	r0, r7
 800d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d644:	4b0a      	ldr	r3, [pc, #40]	; (800d670 <__swbuf_r+0x9c>)
 800d646:	429c      	cmp	r4, r3
 800d648:	d101      	bne.n	800d64e <__swbuf_r+0x7a>
 800d64a:	68ac      	ldr	r4, [r5, #8]
 800d64c:	e7cf      	b.n	800d5ee <__swbuf_r+0x1a>
 800d64e:	4b09      	ldr	r3, [pc, #36]	; (800d674 <__swbuf_r+0xa0>)
 800d650:	429c      	cmp	r4, r3
 800d652:	bf08      	it	eq
 800d654:	68ec      	ldreq	r4, [r5, #12]
 800d656:	e7ca      	b.n	800d5ee <__swbuf_r+0x1a>
 800d658:	4621      	mov	r1, r4
 800d65a:	4628      	mov	r0, r5
 800d65c:	f000 f80c 	bl	800d678 <__swsetup_r>
 800d660:	2800      	cmp	r0, #0
 800d662:	d0cb      	beq.n	800d5fc <__swbuf_r+0x28>
 800d664:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d668:	e7ea      	b.n	800d640 <__swbuf_r+0x6c>
 800d66a:	bf00      	nop
 800d66c:	08012118 	.word	0x08012118
 800d670:	08012138 	.word	0x08012138
 800d674:	080120f8 	.word	0x080120f8

0800d678 <__swsetup_r>:
 800d678:	4b32      	ldr	r3, [pc, #200]	; (800d744 <__swsetup_r+0xcc>)
 800d67a:	b570      	push	{r4, r5, r6, lr}
 800d67c:	681d      	ldr	r5, [r3, #0]
 800d67e:	4606      	mov	r6, r0
 800d680:	460c      	mov	r4, r1
 800d682:	b125      	cbz	r5, 800d68e <__swsetup_r+0x16>
 800d684:	69ab      	ldr	r3, [r5, #24]
 800d686:	b913      	cbnz	r3, 800d68e <__swsetup_r+0x16>
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f963 	bl	800d954 <__sinit>
 800d68e:	4b2e      	ldr	r3, [pc, #184]	; (800d748 <__swsetup_r+0xd0>)
 800d690:	429c      	cmp	r4, r3
 800d692:	d10f      	bne.n	800d6b4 <__swsetup_r+0x3c>
 800d694:	686c      	ldr	r4, [r5, #4]
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d69c:	0719      	lsls	r1, r3, #28
 800d69e:	d42c      	bmi.n	800d6fa <__swsetup_r+0x82>
 800d6a0:	06dd      	lsls	r5, r3, #27
 800d6a2:	d411      	bmi.n	800d6c8 <__swsetup_r+0x50>
 800d6a4:	2309      	movs	r3, #9
 800d6a6:	6033      	str	r3, [r6, #0]
 800d6a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b2:	e03e      	b.n	800d732 <__swsetup_r+0xba>
 800d6b4:	4b25      	ldr	r3, [pc, #148]	; (800d74c <__swsetup_r+0xd4>)
 800d6b6:	429c      	cmp	r4, r3
 800d6b8:	d101      	bne.n	800d6be <__swsetup_r+0x46>
 800d6ba:	68ac      	ldr	r4, [r5, #8]
 800d6bc:	e7eb      	b.n	800d696 <__swsetup_r+0x1e>
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <__swsetup_r+0xd8>)
 800d6c0:	429c      	cmp	r4, r3
 800d6c2:	bf08      	it	eq
 800d6c4:	68ec      	ldreq	r4, [r5, #12]
 800d6c6:	e7e6      	b.n	800d696 <__swsetup_r+0x1e>
 800d6c8:	0758      	lsls	r0, r3, #29
 800d6ca:	d512      	bpl.n	800d6f2 <__swsetup_r+0x7a>
 800d6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ce:	b141      	cbz	r1, 800d6e2 <__swsetup_r+0x6a>
 800d6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6d4:	4299      	cmp	r1, r3
 800d6d6:	d002      	beq.n	800d6de <__swsetup_r+0x66>
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f7fe fef3 	bl	800c4c4 <_free_r>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6363      	str	r3, [r4, #52]	; 0x34
 800d6e2:	89a3      	ldrh	r3, [r4, #12]
 800d6e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	6063      	str	r3, [r4, #4]
 800d6ee:	6923      	ldr	r3, [r4, #16]
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	f043 0308 	orr.w	r3, r3, #8
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	6923      	ldr	r3, [r4, #16]
 800d6fc:	b94b      	cbnz	r3, 800d712 <__swsetup_r+0x9a>
 800d6fe:	89a3      	ldrh	r3, [r4, #12]
 800d700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d708:	d003      	beq.n	800d712 <__swsetup_r+0x9a>
 800d70a:	4621      	mov	r1, r4
 800d70c:	4630      	mov	r0, r6
 800d70e:	f000 f99f 	bl	800da50 <__smakebuf_r>
 800d712:	89a0      	ldrh	r0, [r4, #12]
 800d714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d718:	f010 0301 	ands.w	r3, r0, #1
 800d71c:	d00a      	beq.n	800d734 <__swsetup_r+0xbc>
 800d71e:	2300      	movs	r3, #0
 800d720:	60a3      	str	r3, [r4, #8]
 800d722:	6963      	ldr	r3, [r4, #20]
 800d724:	425b      	negs	r3, r3
 800d726:	61a3      	str	r3, [r4, #24]
 800d728:	6923      	ldr	r3, [r4, #16]
 800d72a:	b943      	cbnz	r3, 800d73e <__swsetup_r+0xc6>
 800d72c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d730:	d1ba      	bne.n	800d6a8 <__swsetup_r+0x30>
 800d732:	bd70      	pop	{r4, r5, r6, pc}
 800d734:	0781      	lsls	r1, r0, #30
 800d736:	bf58      	it	pl
 800d738:	6963      	ldrpl	r3, [r4, #20]
 800d73a:	60a3      	str	r3, [r4, #8]
 800d73c:	e7f4      	b.n	800d728 <__swsetup_r+0xb0>
 800d73e:	2000      	movs	r0, #0
 800d740:	e7f7      	b.n	800d732 <__swsetup_r+0xba>
 800d742:	bf00      	nop
 800d744:	20000114 	.word	0x20000114
 800d748:	08012118 	.word	0x08012118
 800d74c:	08012138 	.word	0x08012138
 800d750:	080120f8 	.word	0x080120f8

0800d754 <__sflush_r>:
 800d754:	898a      	ldrh	r2, [r1, #12]
 800d756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d758:	4605      	mov	r5, r0
 800d75a:	0710      	lsls	r0, r2, #28
 800d75c:	460c      	mov	r4, r1
 800d75e:	d457      	bmi.n	800d810 <__sflush_r+0xbc>
 800d760:	684b      	ldr	r3, [r1, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	dc04      	bgt.n	800d770 <__sflush_r+0x1c>
 800d766:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d768:	2b00      	cmp	r3, #0
 800d76a:	dc01      	bgt.n	800d770 <__sflush_r+0x1c>
 800d76c:	2000      	movs	r0, #0
 800d76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d772:	2e00      	cmp	r6, #0
 800d774:	d0fa      	beq.n	800d76c <__sflush_r+0x18>
 800d776:	2300      	movs	r3, #0
 800d778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d77c:	682f      	ldr	r7, [r5, #0]
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	d032      	beq.n	800d7e8 <__sflush_r+0x94>
 800d782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	075a      	lsls	r2, r3, #29
 800d788:	d505      	bpl.n	800d796 <__sflush_r+0x42>
 800d78a:	6863      	ldr	r3, [r4, #4]
 800d78c:	1ac0      	subs	r0, r0, r3
 800d78e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d790:	b10b      	cbz	r3, 800d796 <__sflush_r+0x42>
 800d792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d794:	1ac0      	subs	r0, r0, r3
 800d796:	2300      	movs	r3, #0
 800d798:	4602      	mov	r2, r0
 800d79a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d79c:	6a21      	ldr	r1, [r4, #32]
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b0      	blx	r6
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	89a3      	ldrh	r3, [r4, #12]
 800d7a6:	d106      	bne.n	800d7b6 <__sflush_r+0x62>
 800d7a8:	6829      	ldr	r1, [r5, #0]
 800d7aa:	291d      	cmp	r1, #29
 800d7ac:	d82c      	bhi.n	800d808 <__sflush_r+0xb4>
 800d7ae:	4a29      	ldr	r2, [pc, #164]	; (800d854 <__sflush_r+0x100>)
 800d7b0:	40ca      	lsrs	r2, r1
 800d7b2:	07d6      	lsls	r6, r2, #31
 800d7b4:	d528      	bpl.n	800d808 <__sflush_r+0xb4>
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	6062      	str	r2, [r4, #4]
 800d7ba:	04d9      	lsls	r1, r3, #19
 800d7bc:	6922      	ldr	r2, [r4, #16]
 800d7be:	6022      	str	r2, [r4, #0]
 800d7c0:	d504      	bpl.n	800d7cc <__sflush_r+0x78>
 800d7c2:	1c42      	adds	r2, r0, #1
 800d7c4:	d101      	bne.n	800d7ca <__sflush_r+0x76>
 800d7c6:	682b      	ldr	r3, [r5, #0]
 800d7c8:	b903      	cbnz	r3, 800d7cc <__sflush_r+0x78>
 800d7ca:	6560      	str	r0, [r4, #84]	; 0x54
 800d7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ce:	602f      	str	r7, [r5, #0]
 800d7d0:	2900      	cmp	r1, #0
 800d7d2:	d0cb      	beq.n	800d76c <__sflush_r+0x18>
 800d7d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7d8:	4299      	cmp	r1, r3
 800d7da:	d002      	beq.n	800d7e2 <__sflush_r+0x8e>
 800d7dc:	4628      	mov	r0, r5
 800d7de:	f7fe fe71 	bl	800c4c4 <_free_r>
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	6360      	str	r0, [r4, #52]	; 0x34
 800d7e6:	e7c2      	b.n	800d76e <__sflush_r+0x1a>
 800d7e8:	6a21      	ldr	r1, [r4, #32]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	47b0      	blx	r6
 800d7f0:	1c41      	adds	r1, r0, #1
 800d7f2:	d1c7      	bne.n	800d784 <__sflush_r+0x30>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0c4      	beq.n	800d784 <__sflush_r+0x30>
 800d7fa:	2b1d      	cmp	r3, #29
 800d7fc:	d001      	beq.n	800d802 <__sflush_r+0xae>
 800d7fe:	2b16      	cmp	r3, #22
 800d800:	d101      	bne.n	800d806 <__sflush_r+0xb2>
 800d802:	602f      	str	r7, [r5, #0]
 800d804:	e7b2      	b.n	800d76c <__sflush_r+0x18>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d80c:	81a3      	strh	r3, [r4, #12]
 800d80e:	e7ae      	b.n	800d76e <__sflush_r+0x1a>
 800d810:	690f      	ldr	r7, [r1, #16]
 800d812:	2f00      	cmp	r7, #0
 800d814:	d0aa      	beq.n	800d76c <__sflush_r+0x18>
 800d816:	0793      	lsls	r3, r2, #30
 800d818:	680e      	ldr	r6, [r1, #0]
 800d81a:	bf08      	it	eq
 800d81c:	694b      	ldreq	r3, [r1, #20]
 800d81e:	600f      	str	r7, [r1, #0]
 800d820:	bf18      	it	ne
 800d822:	2300      	movne	r3, #0
 800d824:	1bf6      	subs	r6, r6, r7
 800d826:	608b      	str	r3, [r1, #8]
 800d828:	2e00      	cmp	r6, #0
 800d82a:	dd9f      	ble.n	800d76c <__sflush_r+0x18>
 800d82c:	6a21      	ldr	r1, [r4, #32]
 800d82e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d832:	4633      	mov	r3, r6
 800d834:	463a      	mov	r2, r7
 800d836:	4628      	mov	r0, r5
 800d838:	47e0      	blx	ip
 800d83a:	2800      	cmp	r0, #0
 800d83c:	dc06      	bgt.n	800d84c <__sflush_r+0xf8>
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d844:	81a3      	strh	r3, [r4, #12]
 800d846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d84a:	e790      	b.n	800d76e <__sflush_r+0x1a>
 800d84c:	4407      	add	r7, r0
 800d84e:	1a36      	subs	r6, r6, r0
 800d850:	e7ea      	b.n	800d828 <__sflush_r+0xd4>
 800d852:	bf00      	nop
 800d854:	20400001 	.word	0x20400001

0800d858 <_fflush_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	690b      	ldr	r3, [r1, #16]
 800d85c:	4605      	mov	r5, r0
 800d85e:	460c      	mov	r4, r1
 800d860:	b913      	cbnz	r3, 800d868 <_fflush_r+0x10>
 800d862:	2500      	movs	r5, #0
 800d864:	4628      	mov	r0, r5
 800d866:	bd38      	pop	{r3, r4, r5, pc}
 800d868:	b118      	cbz	r0, 800d872 <_fflush_r+0x1a>
 800d86a:	6983      	ldr	r3, [r0, #24]
 800d86c:	b90b      	cbnz	r3, 800d872 <_fflush_r+0x1a>
 800d86e:	f000 f871 	bl	800d954 <__sinit>
 800d872:	4b14      	ldr	r3, [pc, #80]	; (800d8c4 <_fflush_r+0x6c>)
 800d874:	429c      	cmp	r4, r3
 800d876:	d11b      	bne.n	800d8b0 <_fflush_r+0x58>
 800d878:	686c      	ldr	r4, [r5, #4]
 800d87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0ef      	beq.n	800d862 <_fflush_r+0xa>
 800d882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d884:	07d0      	lsls	r0, r2, #31
 800d886:	d404      	bmi.n	800d892 <_fflush_r+0x3a>
 800d888:	0599      	lsls	r1, r3, #22
 800d88a:	d402      	bmi.n	800d892 <_fflush_r+0x3a>
 800d88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d88e:	f000 fee6 	bl	800e65e <__retarget_lock_acquire_recursive>
 800d892:	4628      	mov	r0, r5
 800d894:	4621      	mov	r1, r4
 800d896:	f7ff ff5d 	bl	800d754 <__sflush_r>
 800d89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d89c:	07da      	lsls	r2, r3, #31
 800d89e:	4605      	mov	r5, r0
 800d8a0:	d4e0      	bmi.n	800d864 <_fflush_r+0xc>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d4dd      	bmi.n	800d864 <_fflush_r+0xc>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	f000 fee0 	bl	800e66e <__retarget_lock_release_recursive>
 800d8ae:	e7d9      	b.n	800d864 <_fflush_r+0xc>
 800d8b0:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <_fflush_r+0x70>)
 800d8b2:	429c      	cmp	r4, r3
 800d8b4:	d101      	bne.n	800d8ba <_fflush_r+0x62>
 800d8b6:	68ac      	ldr	r4, [r5, #8]
 800d8b8:	e7df      	b.n	800d87a <_fflush_r+0x22>
 800d8ba:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <_fflush_r+0x74>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	bf08      	it	eq
 800d8c0:	68ec      	ldreq	r4, [r5, #12]
 800d8c2:	e7da      	b.n	800d87a <_fflush_r+0x22>
 800d8c4:	08012118 	.word	0x08012118
 800d8c8:	08012138 	.word	0x08012138
 800d8cc:	080120f8 	.word	0x080120f8

0800d8d0 <std>:
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800d8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8de:	6083      	str	r3, [r0, #8]
 800d8e0:	8181      	strh	r1, [r0, #12]
 800d8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800d8e4:	81c2      	strh	r2, [r0, #14]
 800d8e6:	6183      	str	r3, [r0, #24]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	2208      	movs	r2, #8
 800d8ec:	305c      	adds	r0, #92	; 0x5c
 800d8ee:	f002 fb56 	bl	800ff9e <memset>
 800d8f2:	4b05      	ldr	r3, [pc, #20]	; (800d908 <std+0x38>)
 800d8f4:	6263      	str	r3, [r4, #36]	; 0x24
 800d8f6:	4b05      	ldr	r3, [pc, #20]	; (800d90c <std+0x3c>)
 800d8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8fa:	4b05      	ldr	r3, [pc, #20]	; (800d910 <std+0x40>)
 800d8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8fe:	4b05      	ldr	r3, [pc, #20]	; (800d914 <std+0x44>)
 800d900:	6224      	str	r4, [r4, #32]
 800d902:	6323      	str	r3, [r4, #48]	; 0x30
 800d904:	bd10      	pop	{r4, pc}
 800d906:	bf00      	nop
 800d908:	08010579 	.word	0x08010579
 800d90c:	0801059b 	.word	0x0801059b
 800d910:	080105d3 	.word	0x080105d3
 800d914:	080105f7 	.word	0x080105f7

0800d918 <_cleanup_r>:
 800d918:	4901      	ldr	r1, [pc, #4]	; (800d920 <_cleanup_r+0x8>)
 800d91a:	f002 bdbf 	b.w	801049c <_fwalk_reent>
 800d91e:	bf00      	nop
 800d920:	0800d859 	.word	0x0800d859

0800d924 <__sfp_lock_acquire>:
 800d924:	4801      	ldr	r0, [pc, #4]	; (800d92c <__sfp_lock_acquire+0x8>)
 800d926:	f000 be9a 	b.w	800e65e <__retarget_lock_acquire_recursive>
 800d92a:	bf00      	nop
 800d92c:	200003fc 	.word	0x200003fc

0800d930 <__sfp_lock_release>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__sfp_lock_release+0x8>)
 800d932:	f000 be9c 	b.w	800e66e <__retarget_lock_release_recursive>
 800d936:	bf00      	nop
 800d938:	200003fc 	.word	0x200003fc

0800d93c <__sinit_lock_acquire>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__sinit_lock_acquire+0x8>)
 800d93e:	f000 be8e 	b.w	800e65e <__retarget_lock_acquire_recursive>
 800d942:	bf00      	nop
 800d944:	20000410 	.word	0x20000410

0800d948 <__sinit_lock_release>:
 800d948:	4801      	ldr	r0, [pc, #4]	; (800d950 <__sinit_lock_release+0x8>)
 800d94a:	f000 be90 	b.w	800e66e <__retarget_lock_release_recursive>
 800d94e:	bf00      	nop
 800d950:	20000410 	.word	0x20000410

0800d954 <__sinit>:
 800d954:	b510      	push	{r4, lr}
 800d956:	4604      	mov	r4, r0
 800d958:	f7ff fff0 	bl	800d93c <__sinit_lock_acquire>
 800d95c:	69a3      	ldr	r3, [r4, #24]
 800d95e:	b11b      	cbz	r3, 800d968 <__sinit+0x14>
 800d960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d964:	f7ff bff0 	b.w	800d948 <__sinit_lock_release>
 800d968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d96c:	6523      	str	r3, [r4, #80]	; 0x50
 800d96e:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <__sinit+0x68>)
 800d970:	4a13      	ldr	r2, [pc, #76]	; (800d9c0 <__sinit+0x6c>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	62a2      	str	r2, [r4, #40]	; 0x28
 800d976:	42a3      	cmp	r3, r4
 800d978:	bf04      	itt	eq
 800d97a:	2301      	moveq	r3, #1
 800d97c:	61a3      	streq	r3, [r4, #24]
 800d97e:	4620      	mov	r0, r4
 800d980:	f000 f820 	bl	800d9c4 <__sfp>
 800d984:	6060      	str	r0, [r4, #4]
 800d986:	4620      	mov	r0, r4
 800d988:	f000 f81c 	bl	800d9c4 <__sfp>
 800d98c:	60a0      	str	r0, [r4, #8]
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 f818 	bl	800d9c4 <__sfp>
 800d994:	2200      	movs	r2, #0
 800d996:	60e0      	str	r0, [r4, #12]
 800d998:	2104      	movs	r1, #4
 800d99a:	6860      	ldr	r0, [r4, #4]
 800d99c:	f7ff ff98 	bl	800d8d0 <std>
 800d9a0:	68a0      	ldr	r0, [r4, #8]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	2109      	movs	r1, #9
 800d9a6:	f7ff ff93 	bl	800d8d0 <std>
 800d9aa:	68e0      	ldr	r0, [r4, #12]
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	2112      	movs	r1, #18
 800d9b0:	f7ff ff8e 	bl	800d8d0 <std>
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	61a3      	str	r3, [r4, #24]
 800d9b8:	e7d2      	b.n	800d960 <__sinit+0xc>
 800d9ba:	bf00      	nop
 800d9bc:	080120e8 	.word	0x080120e8
 800d9c0:	0800d919 	.word	0x0800d919

0800d9c4 <__sfp>:
 800d9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c6:	4607      	mov	r7, r0
 800d9c8:	f7ff ffac 	bl	800d924 <__sfp_lock_acquire>
 800d9cc:	4b1e      	ldr	r3, [pc, #120]	; (800da48 <__sfp+0x84>)
 800d9ce:	681e      	ldr	r6, [r3, #0]
 800d9d0:	69b3      	ldr	r3, [r6, #24]
 800d9d2:	b913      	cbnz	r3, 800d9da <__sfp+0x16>
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	f7ff ffbd 	bl	800d954 <__sinit>
 800d9da:	3648      	adds	r6, #72	; 0x48
 800d9dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	d503      	bpl.n	800d9ec <__sfp+0x28>
 800d9e4:	6833      	ldr	r3, [r6, #0]
 800d9e6:	b30b      	cbz	r3, 800da2c <__sfp+0x68>
 800d9e8:	6836      	ldr	r6, [r6, #0]
 800d9ea:	e7f7      	b.n	800d9dc <__sfp+0x18>
 800d9ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9f0:	b9d5      	cbnz	r5, 800da28 <__sfp+0x64>
 800d9f2:	4b16      	ldr	r3, [pc, #88]	; (800da4c <__sfp+0x88>)
 800d9f4:	60e3      	str	r3, [r4, #12]
 800d9f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d9fa:	6665      	str	r5, [r4, #100]	; 0x64
 800d9fc:	f000 fe26 	bl	800e64c <__retarget_lock_init_recursive>
 800da00:	f7ff ff96 	bl	800d930 <__sfp_lock_release>
 800da04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da0c:	6025      	str	r5, [r4, #0]
 800da0e:	61a5      	str	r5, [r4, #24]
 800da10:	2208      	movs	r2, #8
 800da12:	4629      	mov	r1, r5
 800da14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da18:	f002 fac1 	bl	800ff9e <memset>
 800da1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da24:	4620      	mov	r0, r4
 800da26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da28:	3468      	adds	r4, #104	; 0x68
 800da2a:	e7d9      	b.n	800d9e0 <__sfp+0x1c>
 800da2c:	2104      	movs	r1, #4
 800da2e:	4638      	mov	r0, r7
 800da30:	f002 fd1e 	bl	8010470 <__sfmoreglue>
 800da34:	4604      	mov	r4, r0
 800da36:	6030      	str	r0, [r6, #0]
 800da38:	2800      	cmp	r0, #0
 800da3a:	d1d5      	bne.n	800d9e8 <__sfp+0x24>
 800da3c:	f7ff ff78 	bl	800d930 <__sfp_lock_release>
 800da40:	230c      	movs	r3, #12
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	e7ee      	b.n	800da24 <__sfp+0x60>
 800da46:	bf00      	nop
 800da48:	080120e8 	.word	0x080120e8
 800da4c:	ffff0001 	.word	0xffff0001

0800da50 <__smakebuf_r>:
 800da50:	898b      	ldrh	r3, [r1, #12]
 800da52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da54:	079d      	lsls	r5, r3, #30
 800da56:	4606      	mov	r6, r0
 800da58:	460c      	mov	r4, r1
 800da5a:	d507      	bpl.n	800da6c <__smakebuf_r+0x1c>
 800da5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	6123      	str	r3, [r4, #16]
 800da64:	2301      	movs	r3, #1
 800da66:	6163      	str	r3, [r4, #20]
 800da68:	b002      	add	sp, #8
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	ab01      	add	r3, sp, #4
 800da6e:	466a      	mov	r2, sp
 800da70:	f002 fd33 	bl	80104da <__swhatbuf_r>
 800da74:	9900      	ldr	r1, [sp, #0]
 800da76:	4605      	mov	r5, r0
 800da78:	4630      	mov	r0, r6
 800da7a:	f7fe fd6d 	bl	800c558 <_malloc_r>
 800da7e:	b948      	cbnz	r0, 800da94 <__smakebuf_r+0x44>
 800da80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da84:	059a      	lsls	r2, r3, #22
 800da86:	d4ef      	bmi.n	800da68 <__smakebuf_r+0x18>
 800da88:	f023 0303 	bic.w	r3, r3, #3
 800da8c:	f043 0302 	orr.w	r3, r3, #2
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	e7e3      	b.n	800da5c <__smakebuf_r+0xc>
 800da94:	4b0d      	ldr	r3, [pc, #52]	; (800dacc <__smakebuf_r+0x7c>)
 800da96:	62b3      	str	r3, [r6, #40]	; 0x28
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	6020      	str	r0, [r4, #0]
 800da9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	6163      	str	r3, [r4, #20]
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	6120      	str	r0, [r4, #16]
 800daaa:	b15b      	cbz	r3, 800dac4 <__smakebuf_r+0x74>
 800daac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab0:	4630      	mov	r0, r6
 800dab2:	f000 f85b 	bl	800db6c <_isatty_r>
 800dab6:	b128      	cbz	r0, 800dac4 <__smakebuf_r+0x74>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	89a0      	ldrh	r0, [r4, #12]
 800dac6:	4305      	orrs	r5, r0
 800dac8:	81a5      	strh	r5, [r4, #12]
 800daca:	e7cd      	b.n	800da68 <__smakebuf_r+0x18>
 800dacc:	0800d919 	.word	0x0800d919

0800dad0 <raise>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <raise+0xc>)
 800dad2:	4601      	mov	r1, r0
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	f002 bd25 	b.w	8010524 <_raise_r>
 800dada:	bf00      	nop
 800dadc:	20000114 	.word	0x20000114

0800dae0 <_kill_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_kill_r+0x20>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f000 fda4 	bl	800e63a <_kill>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_kill_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_kill_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	200013ec 	.word	0x200013ec

0800db04 <_write_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d07      	ldr	r5, [pc, #28]	; (800db24 <_write_r+0x20>)
 800db08:	4604      	mov	r4, r0
 800db0a:	4608      	mov	r0, r1
 800db0c:	4611      	mov	r1, r2
 800db0e:	2200      	movs	r2, #0
 800db10:	602a      	str	r2, [r5, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	f000 fd81 	bl	800e61a <_write>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_write_r+0x1e>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_write_r+0x1e>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	200013ec 	.word	0x200013ec

0800db28 <_close_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d06      	ldr	r5, [pc, #24]	; (800db44 <_close_r+0x1c>)
 800db2c:	2300      	movs	r3, #0
 800db2e:	4604      	mov	r4, r0
 800db30:	4608      	mov	r0, r1
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	f000 fd77 	bl	800e626 <_close>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	d102      	bne.n	800db42 <_close_r+0x1a>
 800db3c:	682b      	ldr	r3, [r5, #0]
 800db3e:	b103      	cbz	r3, 800db42 <_close_r+0x1a>
 800db40:	6023      	str	r3, [r4, #0]
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	200013ec 	.word	0x200013ec

0800db48 <_fstat_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d07      	ldr	r5, [pc, #28]	; (800db68 <_fstat_r+0x20>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	4611      	mov	r1, r2
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	f000 fd74 	bl	800e642 <_fstat>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d102      	bne.n	800db64 <_fstat_r+0x1c>
 800db5e:	682b      	ldr	r3, [r5, #0]
 800db60:	b103      	cbz	r3, 800db64 <_fstat_r+0x1c>
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	bd38      	pop	{r3, r4, r5, pc}
 800db66:	bf00      	nop
 800db68:	200013ec 	.word	0x200013ec

0800db6c <_isatty_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d06      	ldr	r5, [pc, #24]	; (800db88 <_isatty_r+0x1c>)
 800db70:	2300      	movs	r3, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	f000 fd5a 	bl	800e630 <_isatty>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_isatty_r+0x1a>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_isatty_r+0x1a>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	200013ec 	.word	0x200013ec

0800db8c <_lseek_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	; (800dbac <_lseek_r+0x20>)
 800db90:	4604      	mov	r4, r0
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	2200      	movs	r2, #0
 800db98:	602a      	str	r2, [r5, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f000 fd46 	bl	800e62c <_lseek>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_lseek_r+0x1e>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_lseek_r+0x1e>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	200013ec 	.word	0x200013ec

0800dbb0 <_read_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	; (800dbd0 <_read_r+0x20>)
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f000 fd25 	bl	800e60e <_read>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_read_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_read_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	200013ec 	.word	0x200013ec

0800dbd4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800dbd4:	4770      	bx	lr

0800dbd6 <z_log_msg2_runtime_create>:
{
 800dbd6:	b510      	push	{r4, lr}
 800dbd8:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800dbda:	ac0a      	add	r4, sp, #40	; 0x28
 800dbdc:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 800dbde:	9402      	str	r4, [sp, #8]
 800dbe0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dbe2:	9401      	str	r4, [sp, #4]
 800dbe4:	9c08      	ldr	r4, [sp, #32]
 800dbe6:	9400      	str	r4, [sp, #0]
 800dbe8:	f000 fc36 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800dbec:	b006      	add	sp, #24
 800dbee:	bd10      	pop	{r4, pc}

0800dbf0 <cbprintf_via_va_list>:
{
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 800dbf8:	9b02      	ldr	r3, [sp, #8]
 800dbfa:	47a0      	blx	r4
}
 800dbfc:	bd10      	pop	{r4, pc}

0800dbfe <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 800dbfe:	b343      	cbz	r3, 800dc52 <cbpprintf_external+0x54>
{
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	4607      	mov	r7, r0
 800dc08:	4688      	mov	r8, r1
 800dc0a:	4691      	mov	r9, r2
 800dc0c:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 800dc0e:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 800dc10:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 800dc12:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 800dc14:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dc18:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 800dc1a:	f04f 0a00 	mov.w	sl, #0
 800dc1e:	e00a      	b.n	800dc36 <cbpprintf_external+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 800dc20:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 800dc24:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f7f3 f914 	bl	8000e56 <strlen>
 800dc2e:	3001      	adds	r0, #1
 800dc30:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 800dc32:	f10a 0a01 	add.w	sl, sl, #1
 800dc36:	45b2      	cmp	sl, r6
 800dc38:	d3f2      	bcc.n	800dc20 <cbpprintf_external+0x22>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 800dc3a:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	686b      	ldr	r3, [r5, #4]
 800dc42:	464a      	mov	r2, r9
 800dc44:	4641      	mov	r1, r8
 800dc46:	4638      	mov	r0, r7
 800dc48:	f7ff ffd2 	bl	800dbf0 <cbprintf_via_va_list>
}
 800dc4c:	b002      	add	sp, #8
 800dc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 800dc52:	f06f 0015 	mvn.w	r0, #21
}
 800dc56:	4770      	bx	lr

0800dc58 <arch_printk_char_out>:
}
 800dc58:	2000      	movs	r0, #0
 800dc5a:	4770      	bx	lr

0800dc5c <str_out>:
{
 800dc5c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800dc5e:	680c      	ldr	r4, [r1, #0]
 800dc60:	b154      	cbz	r4, 800dc78 <str_out+0x1c>
 800dc62:	688a      	ldr	r2, [r1, #8]
 800dc64:	684b      	ldr	r3, [r1, #4]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	da06      	bge.n	800dc78 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d008      	beq.n	800dc82 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800dc70:	1c53      	adds	r3, r2, #1
 800dc72:	608b      	str	r3, [r1, #8]
 800dc74:	54a0      	strb	r0, [r4, r2]
 800dc76:	e002      	b.n	800dc7e <str_out+0x22>
		ctx->count++;
 800dc78:	688b      	ldr	r3, [r1, #8]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	608b      	str	r3, [r1, #8]
}
 800dc7e:	bc10      	pop	{r4}
 800dc80:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800dc82:	1c53      	adds	r3, r2, #1
 800dc84:	608b      	str	r3, [r1, #8]
 800dc86:	2300      	movs	r3, #0
 800dc88:	54a3      	strb	r3, [r4, r2]
 800dc8a:	e7f8      	b.n	800dc7e <str_out+0x22>

0800dc8c <printk>:
{
 800dc8c:	b40f      	push	{r0, r1, r2, r3}
 800dc8e:	b500      	push	{lr}
 800dc90:	b083      	sub	sp, #12
 800dc92:	a904      	add	r1, sp, #16
 800dc94:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800dc98:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 800dc9a:	f7f5 fe17 	bl	80038cc <vprintk>
}
 800dc9e:	b003      	add	sp, #12
 800dca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dca4:	b004      	add	sp, #16
 800dca6:	4770      	bx	lr

0800dca8 <snprintk>:
{
 800dca8:	b40c      	push	{r2, r3}
 800dcaa:	b500      	push	{lr}
 800dcac:	b083      	sub	sp, #12
 800dcae:	ab04      	add	r3, sp, #16
 800dcb0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800dcb4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800dcb6:	f7f5 fe19 	bl	80038ec <vsnprintk>
}
 800dcba:	b003      	add	sp, #12
 800dcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcc0:	b002      	add	sp, #8
 800dcc2:	4770      	bx	lr

0800dcc4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800dcc4:	b508      	push	{r3, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4608      	mov	r0, r1
 800dcca:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800dccc:	461a      	mov	r2, r3
 800dcce:	47a0      	blx	r4
	return z_impl_z_current_get();
 800dcd0:	f7fd fe6a 	bl	800b9a8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800dcd4:	f7f7 ffea 	bl	8005cac <z_impl_k_thread_abort>

0800dcd8 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 800dcd8:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800dcda:	1d13      	adds	r3, r2, #4
 800dcdc:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800dce0:	b97c      	cbnz	r4, 800dd02 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
 800dce2:	2301      	movs	r3, #1
 800dce4:	fa03 f402 	lsl.w	r4, r3, r2
 800dce8:	68c3      	ldr	r3, [r0, #12]
 800dcea:	4323      	orrs	r3, r4
 800dcec:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800dcee:	3204      	adds	r2, #4
 800dcf0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800dcf4:	00cb      	lsls	r3, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800dcf6:	1d1a      	adds	r2, r3, #4
 800dcf8:	b289      	uxth	r1, r1
 800dcfa:	5281      	strh	r1, [r0, r2]
 800dcfc:	3306      	adds	r3, #6
 800dcfe:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 800dd00:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
 800dd02:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
 800dd04:	3204      	adds	r2, #4
 800dd06:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
 800dd08:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
 800dd0c:	f10c 0e04 	add.w	lr, ip, #4
 800dd10:	f820 300e 	strh.w	r3, [r0, lr]
 800dd14:	f10c 0c06 	add.w	ip, ip, #6
 800dd18:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
 800dd1c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 800dd1e:	3306      	adds	r3, #6
 800dd20:	b289      	uxth	r1, r1
 800dd22:	52c1      	strh	r1, [r0, r3]
 800dd24:	5281      	strh	r1, [r0, r2]
 800dd26:	e7eb      	b.n	800dd00 <free_list_add_bidx+0x28>

0800dd28 <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800dd28:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 800dd2a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 800dd2e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800dd30:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 800dd32:	fab2 f282 	clz	r2, r2
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800dd36:	f1c2 021f 	rsb	r2, r2, #31
 800dd3a:	f7ff ffcd 	bl	800dcd8 <free_list_add_bidx>
	}
}
 800dd3e:	bd08      	pop	{r3, pc}

0800dd40 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800dd44:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800dd46:	1dc8      	adds	r0, r1, #7
 800dd48:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800dd4c:	440a      	add	r2, r1
 800dd4e:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800dd52:	1a12      	subs	r2, r2, r0
 800dd54:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800dd56:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800dd58:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	60c3      	str	r3, [r0, #12]
 800dd5e:	fab5 f185 	clz	r1, r5
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800dd62:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800dd66:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
 800dd6a:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800dd6c:	1dce      	adds	r6, r1, #7
 800dd6e:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800dd70:	e005      	b.n	800dd7e <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
 800dd72:	f103 0c04 	add.w	ip, r3, #4
 800dd76:	2400      	movs	r4, #0
 800dd78:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	4573      	cmp	r3, lr
 800dd80:	dbf7      	blt.n	800dd72 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800dd82:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
 800dd84:	b2a4      	uxth	r4, r4
 800dd86:	8044      	strh	r4, [r0, #2]
 800dd88:	f04f 0c00 	mov.w	ip, #0
 800dd8c:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800dd90:	f044 0401 	orr.w	r4, r4, #1
 800dd94:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800dd96:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800dd98:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
 800dd9c:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
 800dda0:	1ca5      	adds	r5, r4, #2
 800dda2:	f820 e005 	strh.w	lr, [r0, r5]
 800dda6:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
 800dda8:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
 800ddac:	1c95      	adds	r5, r2, #2
 800ddae:	f820 c005 	strh.w	ip, [r0, r5]
 800ddb2:	4402      	add	r2, r0
 800ddb4:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800ddb6:	8853      	ldrh	r3, [r2, #2]
 800ddb8:	f043 0301 	orr.w	r3, r3, #1
 800ddbc:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800ddbe:	f7ff ffb3 	bl	800dd28 <free_list_add>
}
 800ddc2:	bd70      	pop	{r4, r5, r6, pc}

0800ddc4 <outs>:
{
 800ddc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc8:	4607      	mov	r7, r0
 800ddca:	460e      	mov	r6, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	4698      	mov	r8, r3
	size_t count = 0;
 800ddd0:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800ddd2:	e006      	b.n	800dde2 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800ddd4:	4631      	mov	r1, r6
 800ddd6:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ddda:	47b8      	blx	r7
		if (rc < 0) {
 800dddc:	2800      	cmp	r0, #0
 800ddde:	db09      	blt.n	800ddf4 <outs+0x30>
		++count;
 800dde0:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800dde2:	4544      	cmp	r4, r8
 800dde4:	d3f6      	bcc.n	800ddd4 <outs+0x10>
 800dde6:	f1b8 0f00 	cmp.w	r8, #0
 800ddea:	d102      	bne.n	800ddf2 <outs+0x2e>
 800ddec:	7823      	ldrb	r3, [r4, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1f0      	bne.n	800ddd4 <outs+0x10>
	return (int)count;
 800ddf2:	4628      	mov	r0, r5
}
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddf8 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
 800ddf8:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f36f 0300 	bfc	r3, #0, #1
 800de00:	f043 0302 	orr.w	r3, r3, #2
 800de04:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
 800de08:	6a02      	ldr	r2, [r0, #32]
 800de0a:	6804      	ldr	r4, [r0, #0]
 800de0c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800de10:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
 800de12:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800de14:	6902      	ldr	r2, [r0, #16]
 800de16:	f012 0201 	ands.w	r2, r2, #1
 800de1a:	d104      	bne.n	800de26 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800de1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de1e:	42a3      	cmp	r3, r4
 800de20:	d304      	bcc.n	800de2c <add_skip_item+0x34>
 800de22:	1b1b      	subs	r3, r3, r4
 800de24:	e002      	b.n	800de2c <add_skip_item+0x34>
		return i & (buffer->size - 1);
 800de26:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de28:	3c01      	subs	r4, #1
 800de2a:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
 800de2c:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800de2e:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
 800de30:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800de32:	b922      	cbnz	r2, 800de3e <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
 800de34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de36:	4299      	cmp	r1, r3
 800de38:	d304      	bcc.n	800de44 <add_skip_item+0x4c>
 800de3a:	1ac9      	subs	r1, r1, r3
 800de3c:	e002      	b.n	800de44 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
 800de3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800de40:	3b01      	subs	r3, #1
 800de42:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800de44:	6041      	str	r1, [r0, #4]
}
 800de46:	bc10      	pop	{r4}
 800de48:	4770      	bx	lr

0800de4a <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
 800de4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4e:	b083      	sub	sp, #12
 800de50:	4604      	mov	r4, r0
 800de52:	9101      	str	r1, [sp, #4]
 800de54:	4615      	mov	r5, r2
 800de56:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
 800de58:	2300      	movs	r3, #0
 800de5a:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
 800de5c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800de60:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800de64:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800de68:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800de6c:	f003 0303 	and.w	r3, r3, #3
 800de70:	2b02      	cmp	r3, #2
 800de72:	d012      	beq.n	800de9a <drop_item_locked+0x50>
	return 0;
 800de74:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800de78:	69e3      	ldr	r3, [r4, #28]
 800de7a:	4650      	mov	r0, sl
 800de7c:	4798      	blx	r3
 800de7e:	4607      	mov	r7, r0
	if (skip_wlen) {
 800de80:	f1bb 0f00 	cmp.w	fp, #0
 800de84:	d151      	bne.n	800df2a <drop_item_locked+0xe0>
		allow_drop = true;
	} else if (allow_drop) {
 800de86:	2d00      	cmp	r5, #0
 800de88:	d05c      	beq.n	800df44 <drop_item_locked+0xfa>
		if (item->hdr.busy) {
 800de8a:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
 800de8e:	f013 0f02 	tst.w	r3, #2
 800de92:	d109      	bne.n	800dea8 <drop_item_locked+0x5e>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
 800de94:	2301      	movs	r3, #1
 800de96:	7033      	strb	r3, [r6, #0]
 800de98:	e048      	b.n	800df2c <drop_item_locked+0xe2>
		return item->skip.len;
 800de9a:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
 800de9e:	ea5f 0b93 	movs.w	fp, r3, lsr #2
 800dea2:	d0e9      	beq.n	800de78 <drop_item_locked+0x2e>
		return item->skip.len;
 800dea4:	465f      	mov	r7, fp
 800dea6:	e7eb      	b.n	800de80 <drop_item_locked+0x36>
			add_skip_item(buffer, free_wlen + 1);
 800dea8:	9901      	ldr	r1, [sp, #4]
 800deaa:	3101      	adds	r1, #1
 800deac:	4620      	mov	r0, r4
 800deae:	f7ff ffa3 	bl	800ddf8 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800deb2:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800deb4:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800deb6:	6922      	ldr	r2, [r4, #16]
 800deb8:	f012 0201 	ands.w	r2, r2, #1
 800debc:	d104      	bne.n	800dec8 <drop_item_locked+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
 800debe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dec0:	428b      	cmp	r3, r1
 800dec2:	d304      	bcc.n	800dece <drop_item_locked+0x84>
 800dec4:	1a5b      	subs	r3, r3, r1
 800dec6:	e002      	b.n	800dece <drop_item_locked+0x84>
		return i & (buffer->size - 1);
 800dec8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800deca:	3901      	subs	r1, #1
 800decc:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
 800dece:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800ded0:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
 800ded2:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800ded4:	b922      	cbnz	r2, 800dee0 <drop_item_locked+0x96>
	return (i >= buffer->size) ? i - buffer->size : i;
 800ded6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ded8:	428b      	cmp	r3, r1
 800deda:	d304      	bcc.n	800dee6 <drop_item_locked+0x9c>
 800dedc:	1a5b      	subs	r3, r3, r1
 800dede:	e002      	b.n	800dee6 <drop_item_locked+0x9c>
		return i & (buffer->size - 1);
 800dee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dee2:	3901      	subs	r1, #1
 800dee4:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
 800dee6:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800dee8:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800deea:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800deec:	b922      	cbnz	r2, 800def8 <drop_item_locked+0xae>
	return (i >= buffer->size) ? i - buffer->size : i;
 800deee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800def0:	4293      	cmp	r3, r2
 800def2:	d304      	bcc.n	800defe <drop_item_locked+0xb4>
 800def4:	1a9b      	subs	r3, r3, r2
 800def6:	e002      	b.n	800defe <drop_item_locked+0xb4>
		return i & (buffer->size - 1);
 800def8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800defa:	3a01      	subs	r2, #1
 800defc:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
 800defe:	6a21      	ldr	r1, [r4, #32]
 800df00:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
 800df04:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
 800df08:	f002 0203 	and.w	r2, r2, #3
 800df0c:	2a02      	cmp	r2, #2
 800df0e:	d006      	beq.n	800df1e <drop_item_locked+0xd4>
				rd_wlen += buffer->get_wlen(item);
 800df10:	69e3      	ldr	r3, [r4, #28]
 800df12:	4650      	mov	r0, sl
 800df14:	4798      	blx	r3
 800df16:	4407      	add	r7, r0
				*user_packet = true;
 800df18:	2301      	movs	r3, #1
 800df1a:	7033      	strb	r3, [r6, #0]
 800df1c:	e006      	b.n	800df2c <drop_item_locked+0xe2>
		return item->skip.len;
 800df1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
 800df22:	089b      	lsrs	r3, r3, #2
 800df24:	d0f4      	beq.n	800df10 <drop_item_locked+0xc6>
				rd_wlen += skip_wlen;
 800df26:	441f      	add	r7, r3
 800df28:	e000      	b.n	800df2c <drop_item_locked+0xe2>
		allow_drop = true;
 800df2a:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
 800df2c:	b195      	cbz	r5, 800df54 <drop_item_locked+0x10a>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800df2e:	68e0      	ldr	r0, [r4, #12]
	uint32_t i = idx + val;
 800df30:	4407      	add	r7, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	f013 0f01 	tst.w	r3, #1
 800df38:	d107      	bne.n	800df4a <drop_item_locked+0x100>
	return (i >= buffer->size) ? i - buffer->size : i;
 800df3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df3c:	429f      	cmp	r7, r3
 800df3e:	d307      	bcc.n	800df50 <drop_item_locked+0x106>
 800df40:	1aff      	subs	r7, r7, r3
 800df42:	e005      	b.n	800df50 <drop_item_locked+0x106>
		item = NULL;
 800df44:	f04f 0a00 	mov.w	sl, #0
 800df48:	e7f0      	b.n	800df2c <drop_item_locked+0xe2>
		return i & (buffer->size - 1);
 800df4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df4c:	3b01      	subs	r3, #1
 800df4e:	401f      	ands	r7, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
 800df50:	60e7      	str	r7, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
 800df52:	60a7      	str	r7, [r4, #8]
	}

	return item;
}
 800df54:	4650      	mov	r0, sl
 800df56:	b003      	add	sp, #12
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df5c <mpsc_pbuf_init>:
{
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 800df62:	2220      	movs	r2, #32
 800df64:	2100      	movs	r1, #0
 800df66:	f002 f81a 	bl	800ff9e <memset>
	buffer->get_wlen = cfg->get_wlen;
 800df6a:	68eb      	ldr	r3, [r5, #12]
 800df6c:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
 800df6e:	68ab      	ldr	r3, [r5, #8]
 800df70:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
 800df72:	682b      	ldr	r3, [r5, #0]
 800df74:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
 800df76:	686b      	ldr	r3, [r5, #4]
 800df78:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
 800df7a:	692a      	ldr	r2, [r5, #16]
 800df7c:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
 800df7e:	b123      	cbz	r3, 800df8a <mpsc_pbuf_init+0x2e>
 800df80:	1e59      	subs	r1, r3, #1
 800df82:	420b      	tst	r3, r1
 800df84:	d00d      	beq.n	800dfa2 <mpsc_pbuf_init+0x46>
 800df86:	2300      	movs	r3, #0
 800df88:	e000      	b.n	800df8c <mpsc_pbuf_init+0x30>
 800df8a:	2300      	movs	r3, #0
	if (is_power_of_two(buffer->size)) {
 800df8c:	b113      	cbz	r3, 800df94 <mpsc_pbuf_init+0x38>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
 800df8e:	f042 0201 	orr.w	r2, r2, #1
 800df92:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
 800df94:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
 800df98:	2201      	movs	r2, #1
 800df9a:	2100      	movs	r1, #0
 800df9c:	f001 fca7 	bl	800f8ee <z_impl_k_sem_init>
}
 800dfa0:	bd38      	pop	{r3, r4, r5, pc}
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e7f2      	b.n	800df8c <mpsc_pbuf_init+0x30>

0800dfa6 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
 800dfa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	9200      	str	r2, [sp, #0]
 800dfae:	9301      	str	r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
 800dfb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	428b      	cmp	r3, r1
 800dfb6:	f0c0 8087 	bcc.w	800e0c8 <mpsc_pbuf_alloc+0x122>
 800dfba:	4605      	mov	r5, r0
 800dfbc:	4689      	mov	r9, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
 800dfbe:	f04f 0a00 	mov.w	sl, #0
	union mpsc_pbuf_generic *item = NULL;
 800dfc2:	46d3      	mov	fp, sl
 800dfc4:	e020      	b.n	800e008 <mpsc_pbuf_alloc+0x62>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
 800dfc6:	1b1c      	subs	r4, r3, r4
 800dfc8:	3c01      	subs	r4, #1
		return false;
 800dfca:	2600      	movs	r6, #0
 800dfcc:	e02e      	b.n	800e02c <mpsc_pbuf_alloc+0x86>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
 800dfce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dfd0:	1b1c      	subs	r4, r3, r4
 800dfd2:	3c01      	subs	r4, #1
		return false;
 800dfd4:	2600      	movs	r6, #0
 800dfd6:	e029      	b.n	800e02c <mpsc_pbuf_alloc+0x86>
		return i & (buffer->size - 1);
 800dfd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800dfda:	3a01      	subs	r2, #1
 800dfdc:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
 800dfde:	602b      	str	r3, [r5, #0]
		cont = false;
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	f387 8811 	msr	BASEPRI, r7
 800dfe6:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
 800dfea:	b15e      	cbz	r6, 800e004 <mpsc_pbuf_alloc+0x5e>
 800dfec:	f1ba 0f00 	cmp.w	sl, #0
 800dff0:	d008      	beq.n	800e004 <mpsc_pbuf_alloc+0x5e>
 800dff2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800dff6:	b12b      	cbz	r3, 800e004 <mpsc_pbuf_alloc+0x5e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
 800dff8:	69ab      	ldr	r3, [r5, #24]
 800dffa:	4651      	mov	r1, sl
 800dffc:	4628      	mov	r0, r5
 800dffe:	4798      	blx	r3
			dropped_item = NULL;
 800e000:	f04f 0a00 	mov.w	sl, #0
		}
	} while (cont);
 800e004:	2e00      	cmp	r6, #0
 800e006:	d061      	beq.n	800e0cc <mpsc_pbuf_alloc+0x126>
	__asm__ volatile(
 800e008:	f04f 0310 	mov.w	r3, #16
 800e00c:	f3ef 8811 	mrs	r8, BASEPRI
 800e010:	f383 8812 	msr	BASEPRI_MAX, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	4647      	mov	r7, r8
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
 800e01a:	68eb      	ldr	r3, [r5, #12]
 800e01c:	682c      	ldr	r4, [r5, #0]
 800e01e:	42a3      	cmp	r3, r4
 800e020:	d8d1      	bhi.n	800dfc6 <mpsc_pbuf_alloc+0x20>
	} else if (!buffer->rd_idx) {
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0d3      	beq.n	800dfce <mpsc_pbuf_alloc+0x28>
	*res = buffer->size - buffer->tmp_wr_idx;
 800e026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e028:	1b1c      	subs	r4, r3, r4
	return true;
 800e02a:	2601      	movs	r6, #1
		if (free_wlen >= wlen) {
 800e02c:	45a1      	cmp	r9, r4
 800e02e:	d819      	bhi.n	800e064 <mpsc_pbuf_alloc+0xbe>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
 800e030:	6a2b      	ldr	r3, [r5, #32]
 800e032:	682a      	ldr	r2, [r5, #0]
			item =
 800e034:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
 800e038:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800e03c:	f36f 0100 	bfc	r1, #0, #1
 800e040:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
 800e044:	b2c9      	uxtb	r1, r1
 800e046:	f36f 0141 	bfc	r1, #1, #1
 800e04a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
 800e04e:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
 800e050:	444b      	add	r3, r9
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e052:	692a      	ldr	r2, [r5, #16]
 800e054:	f012 0f01 	tst.w	r2, #1
 800e058:	d1be      	bne.n	800dfd8 <mpsc_pbuf_alloc+0x32>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e05a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d3be      	bcc.n	800dfde <mpsc_pbuf_alloc+0x38>
 800e060:	1a9b      	subs	r3, r3, r2
 800e062:	e7bc      	b.n	800dfde <mpsc_pbuf_alloc+0x38>
		} else if (wrap) {
 800e064:	b9ae      	cbnz	r6, 800e092 <mpsc_pbuf_alloc+0xec>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	9a00      	ldr	r2, [sp, #0]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	d003      	beq.n	800e076 <mpsc_pbuf_alloc+0xd0>
			   !k_is_in_isr()) {
 800e06e:	f001 fbd9 	bl	800f824 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800e072:	4606      	mov	r6, r0
 800e074:	b190      	cbz	r0, 800e09c <mpsc_pbuf_alloc+0xf6>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
 800e076:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
 800e078:	f10d 030f 	add.w	r3, sp, #15
 800e07c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800e080:	4621      	mov	r1, r4
 800e082:	4628      	mov	r0, r5
 800e084:	f7ff fee1 	bl	800de4a <drop_item_locked>
			cont = dropped_item != NULL;
 800e088:	4682      	mov	sl, r0
 800e08a:	1e06      	subs	r6, r0, #0
 800e08c:	bf18      	it	ne
 800e08e:	2601      	movne	r6, #1
 800e090:	e7a7      	b.n	800dfe2 <mpsc_pbuf_alloc+0x3c>
			add_skip_item(buffer, free_wlen);
 800e092:	4621      	mov	r1, r4
 800e094:	4628      	mov	r0, r5
 800e096:	f7ff feaf 	bl	800ddf8 <add_skip_item>
			cont = true;
 800e09a:	e7a2      	b.n	800dfe2 <mpsc_pbuf_alloc+0x3c>
	__asm__ volatile(
 800e09c:	f388 8811 	msr	BASEPRI, r8
 800e0a0:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
 800e0a4:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
 800e0a8:	9a00      	ldr	r2, [sp, #0]
 800e0aa:	9b01      	ldr	r3, [sp, #4]
 800e0ac:	f7fc ff4c 	bl	800af48 <z_impl_k_sem_take>
	__asm__ volatile(
 800e0b0:	f04f 0310 	mov.w	r3, #16
 800e0b4:	f3ef 8711 	mrs	r7, BASEPRI
 800e0b8:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0bc:	f3bf 8f6f 	isb	sy
			if (err == 0) {
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d18e      	bne.n	800dfe2 <mpsc_pbuf_alloc+0x3c>
				cont = true;
 800e0c4:	2601      	movs	r6, #1
 800e0c6:	e78c      	b.n	800dfe2 <mpsc_pbuf_alloc+0x3c>
		return NULL;
 800e0c8:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
 800e0cc:	4658      	mov	r0, fp
 800e0ce:	b005      	add	sp, #20
 800e0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0d4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800e0da:	69c3      	ldr	r3, [r0, #28]
 800e0dc:	4608      	mov	r0, r1
 800e0de:	4798      	blx	r3
 800e0e0:	f04f 0310 	mov.w	r3, #16
 800e0e4:	f3ef 8211 	mrs	r2, BASEPRI
 800e0e8:	f383 8812 	msr	BASEPRI_MAX, r3
 800e0ec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
 800e0f0:	782b      	ldrb	r3, [r5, #0]
 800e0f2:	f043 0301 	orr.w	r3, r3, #1
 800e0f6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e0f8:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
 800e0fa:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	f013 0f01 	tst.w	r3, #1
 800e102:	d104      	bne.n	800e10e <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e106:	4298      	cmp	r0, r3
 800e108:	d304      	bcc.n	800e114 <mpsc_pbuf_commit+0x40>
 800e10a:	1ac0      	subs	r0, r0, r3
 800e10c:	e002      	b.n	800e114 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
 800e10e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e110:	3b01      	subs	r3, #1
 800e112:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
 800e114:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
 800e116:	f382 8811 	msr	BASEPRI, r2
 800e11a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
 800e11e:	bd38      	pop	{r3, r4, r5, pc}

0800e120 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	4604      	mov	r4, r0
 800e124:	e039      	b.n	800e19a <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800e126:	1a9b      	subs	r3, r3, r2
		return false;
 800e128:	e045      	b.n	800e1b6 <mpsc_pbuf_claim+0x96>
		return item->skip.len;
 800e12a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
 800e12e:	0880      	lsrs	r0, r0, #2
 800e130:	d153      	bne.n	800e1da <mpsc_pbuf_claim+0xba>
 800e132:	e04d      	b.n	800e1d0 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
 800e134:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e136:	3901      	subs	r1, #1
 800e138:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
 800e13a:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
 800e13c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800e13e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e140:	b922      	cbnz	r2, 800e14c <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e144:	4298      	cmp	r0, r3
 800e146:	d304      	bcc.n	800e152 <mpsc_pbuf_claim+0x32>
 800e148:	1ac0      	subs	r0, r0, r3
 800e14a:	e002      	b.n	800e152 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
 800e14c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e14e:	3b01      	subs	r3, #1
 800e150:	4018      	ands	r0, r3
				buffer->rd_idx =
 800e152:	60e0      	str	r0, [r4, #12]
				cont = true;
 800e154:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
 800e156:	e01b      	b.n	800e190 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
 800e158:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 800e15c:	f043 0302 	orr.w	r3, r3, #2
 800e160:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
 800e164:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
 800e166:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
 800e168:	4630      	mov	r0, r6
 800e16a:	4798      	blx	r3
	uint32_t i = idx + val;
 800e16c:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	f013 0f01 	tst.w	r3, #1
 800e174:	d104      	bne.n	800e180 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e178:	4298      	cmp	r0, r3
 800e17a:	d304      	bcc.n	800e186 <mpsc_pbuf_claim+0x66>
 800e17c:	1ac0      	subs	r0, r0, r3
 800e17e:	e002      	b.n	800e186 <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
 800e180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e182:	3b01      	subs	r3, #1
 800e184:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
 800e186:	60a0      	str	r0, [r4, #8]
		cont = false;
 800e188:	2300      	movs	r3, #0
 800e18a:	e001      	b.n	800e190 <mpsc_pbuf_claim+0x70>
 800e18c:	2300      	movs	r3, #0
			item = NULL;
 800e18e:	461e      	mov	r6, r3
 800e190:	f385 8811 	msr	BASEPRI, r5
 800e194:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
 800e198:	b38b      	cbz	r3, 800e1fe <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
 800e19a:	f04f 0310 	mov.w	r3, #16
 800e19e:	f3ef 8511 	mrs	r5, BASEPRI
 800e1a2:	f383 8812 	msr	BASEPRI_MAX, r3
 800e1a6:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800e1aa:	68a2      	ldr	r2, [r4, #8]
 800e1ac:	6863      	ldr	r3, [r4, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d9b9      	bls.n	800e126 <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
 800e1b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1b4:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
 800e1b6:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
 800e1b8:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d0e5      	beq.n	800e18c <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
 800e1c0:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
 800e1c4:	f013 0303 	ands.w	r3, r3, #3
 800e1c8:	d016      	beq.n	800e1f8 <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d0ad      	beq.n	800e12a <mpsc_pbuf_claim+0xa>
	return 0;
 800e1ce:	2000      	movs	r0, #0
	return item->hdr.valid;
 800e1d0:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
 800e1d4:	f013 0f01 	tst.w	r3, #1
 800e1d8:	d1be      	bne.n	800e158 <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
 800e1da:	b910      	cbnz	r0, 800e1e2 <mpsc_pbuf_claim+0xc2>
 800e1dc:	69e3      	ldr	r3, [r4, #28]
 800e1de:	4630      	mov	r0, r6
 800e1e0:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
 800e1e2:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
 800e1e4:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e1e6:	6922      	ldr	r2, [r4, #16]
 800e1e8:	f012 0201 	ands.w	r2, r2, #1
 800e1ec:	d1a2      	bne.n	800e134 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e1ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	d3a2      	bcc.n	800e13a <mpsc_pbuf_claim+0x1a>
 800e1f4:	1a5b      	subs	r3, r3, r1
 800e1f6:	e7a0      	b.n	800e13a <mpsc_pbuf_claim+0x1a>
		cont = false;
 800e1f8:	2300      	movs	r3, #0
			item = NULL;
 800e1fa:	461e      	mov	r6, r3
 800e1fc:	e7c8      	b.n	800e190 <mpsc_pbuf_claim+0x70>

	return item;
}
 800e1fe:	4630      	mov	r0, r6
 800e200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e202 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
 800e202:	b538      	push	{r3, r4, r5, lr}
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
 800e208:	69c3      	ldr	r3, [r0, #28]
 800e20a:	4608      	mov	r0, r1
 800e20c:	4798      	blx	r3
 800e20e:	f04f 0310 	mov.w	r3, #16
 800e212:	f3ef 8211 	mrs	r2, BASEPRI
 800e216:	f383 8812 	msr	BASEPRI_MAX, r3
 800e21a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
 800e21e:	782b      	ldrb	r3, [r5, #0]
 800e220:	f36f 0300 	bfc	r3, #0, #1
 800e224:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800e226:	6923      	ldr	r3, [r4, #16]
 800e228:	f013 0f02 	tst.w	r3, #2
 800e22c:	d00a      	beq.n	800e244 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
 800e22e:	6a23      	ldr	r3, [r4, #32]
 800e230:	68e1      	ldr	r1, [r4, #12]
 800e232:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
 800e236:	42ab      	cmp	r3, r5
 800e238:	d004      	beq.n	800e244 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
 800e23a:	682b      	ldr	r3, [r5, #0]
 800e23c:	f360 039f 	bfi	r3, r0, #2, #30
 800e240:	602b      	str	r3, [r5, #0]
 800e242:	e012      	b.n	800e26a <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
 800e244:	782b      	ldrb	r3, [r5, #0]
 800e246:	f36f 0341 	bfc	r3, #1, #1
 800e24a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800e24c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
 800e24e:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
 800e250:	6923      	ldr	r3, [r4, #16]
 800e252:	f013 0f01 	tst.w	r3, #1
 800e256:	d104      	bne.n	800e262 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
 800e258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e25a:	4298      	cmp	r0, r3
 800e25c:	d304      	bcc.n	800e268 <mpsc_pbuf_free+0x66>
 800e25e:	1ac0      	subs	r0, r0, r3
 800e260:	e002      	b.n	800e268 <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
 800e262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e264:	3b01      	subs	r3, #1
 800e266:	4018      	ands	r0, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
 800e268:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800e26a:	f382 8811 	msr	BASEPRI, r2
 800e26e:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
 800e272:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
 800e276:	f7fc fe3f 	bl	800aef8 <z_impl_k_sem_give>
}
 800e27a:	bd38      	pop	{r3, r4, r5, pc}

0800e27c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
 800e27c:	6883      	ldr	r3, [r0, #8]
 800e27e:	6842      	ldr	r2, [r0, #4]
 800e280:	4293      	cmp	r3, r2
 800e282:	d905      	bls.n	800e290 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
 800e284:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e286:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
 800e288:	3800      	subs	r0, #0
 800e28a:	bf18      	it	ne
 800e28c:	2001      	movne	r0, #1
 800e28e:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
 800e290:	1ad0      	subs	r0, r2, r3
		return false;
 800e292:	e7f9      	b.n	800e288 <mpsc_pbuf_is_pending+0xc>

0800e294 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800e294:	4770      	bx	lr

0800e296 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800e296:	2000      	movs	r0, #0
 800e298:	4770      	bx	lr

0800e29a <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
 800e29a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
 800e29c:	f013 0f04 	tst.w	r3, #4
 800e2a0:	d001      	beq.n	800e2a6 <log_msg2_generic_get_wlen+0xc>
	return 0;
 800e2a2:	2000      	movs	r0, #0
}
 800e2a4:	4770      	bx	lr
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800e2a6:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800e2a8:	f3c3 2049 	ubfx	r0, r3, #9, #10
 800e2ac:	f3c3 43cb 	ubfx	r3, r3, #19, #12
 800e2b0:	4418      	add	r0, r3
 800e2b2:	3013      	adds	r0, #19
 800e2b4:	f020 0007 	bic.w	r0, r0, #7
 800e2b8:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
 800e2ba:	4770      	bx	lr

0800e2bc <dummy_timestamp>:
}
 800e2bc:	2000      	movs	r0, #0
 800e2be:	4770      	bx	lr

0800e2c0 <msg_filter_check>:
}
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4770      	bx	lr

0800e2c4 <default_lf_get_timestamp>:
{
 800e2c4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800e2c6:	f001 fd8c 	bl	800fde2 <z_impl_k_uptime_ticks>
 800e2ca:	220a      	movs	r2, #10
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f7f2 fb85 	bl	80009dc <__aeabi_uldivmod>
}
 800e2d2:	bd08      	pop	{r3, pc}

0800e2d4 <notify_drop>:
{
 800e2d4:	b508      	push	{r3, lr}
	z_log_dropped(true);
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	f7f6 f8cc 	bl	8004474 <z_log_dropped>
}
 800e2dc:	bd08      	pop	{r3, pc}

0800e2de <get_msg>:
{
 800e2de:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
 800e2e0:	f7f6 f94c 	bl	800457c <z_log_msg2_claim>
}
 800e2e4:	bd08      	pop	{r3, pc}

0800e2e6 <next_pending>:
{
 800e2e6:	b508      	push	{r3, lr}
		return z_log_msg2_pending();
 800e2e8:	f7f6 f982 	bl	80045f0 <z_log_msg2_pending>
}
 800e2ec:	bd08      	pop	{r3, pc}

0800e2ee <z_log_get_tag>:
}
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	4770      	bx	lr

0800e2f2 <buffer_write>:
{
 800e2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	460d      	mov	r5, r1
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	4621      	mov	r1, r4
 800e300:	4628      	mov	r0, r5
 800e302:	47b8      	blx	r7
		buf += processed;
 800e304:	4405      	add	r5, r0
	} while (len != 0);
 800e306:	1a24      	subs	r4, r4, r0
 800e308:	d1f8      	bne.n	800e2fc <buffer_write+0xa>
}
 800e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e30c <color_prefix>:
{
 800e30c:	b508      	push	{r3, lr}
 800e30e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800e310:	2201      	movs	r2, #1
 800e312:	f7f6 fab5 	bl	8004880 <color_print>
}
 800e316:	bd08      	pop	{r3, pc}

0800e318 <color_postfix>:
{
 800e318:	b508      	push	{r3, lr}
 800e31a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800e31c:	2200      	movs	r2, #0
 800e31e:	f7f6 faaf 	bl	8004880 <color_print>
}
 800e322:	bd08      	pop	{r3, pc}

0800e324 <postfix_print>:
{
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4605      	mov	r5, r0
 800e328:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800e32a:	f001 0101 	and.w	r1, r1, #1
 800e32e:	f7ff fff3 	bl	800e318 <color_postfix>
	newline_print(output, flags);
 800e332:	4621      	mov	r1, r4
 800e334:	4628      	mov	r0, r5
 800e336:	f7f6 fab9 	bl	80048ac <newline_print>
}
 800e33a:	bd38      	pop	{r3, r4, r5, pc}

0800e33c <log_msg2_hexdump>:
{
 800e33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e340:	b083      	sub	sp, #12
 800e342:	4680      	mov	r8, r0
 800e344:	460e      	mov	r6, r1
 800e346:	4615      	mov	r5, r2
 800e348:	461f      	mov	r7, r3
 800e34a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 800e34e:	462c      	mov	r4, r5
 800e350:	2d10      	cmp	r5, #16
 800e352:	bf28      	it	cs
 800e354:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 800e356:	f8cd 9000 	str.w	r9, [sp]
 800e35a:	463b      	mov	r3, r7
 800e35c:	4622      	mov	r2, r4
 800e35e:	4631      	mov	r1, r6
 800e360:	4640      	mov	r0, r8
 800e362:	f7f6 fab7 	bl	80048d4 <hexdump_line_print>
		data += length;
 800e366:	4426      	add	r6, r4
	} while (len);
 800e368:	1b2d      	subs	r5, r5, r4
 800e36a:	d1f0      	bne.n	800e34e <log_msg2_hexdump+0x12>
}
 800e36c:	b003      	add	sp, #12
 800e36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e372 <log_output_flush>:
{
 800e372:	b510      	push	{r4, lr}
 800e374:	4604      	mov	r4, r0
		     output->control_block->offset,
 800e376:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800e378:	6853      	ldr	r3, [r2, #4]
 800e37a:	6812      	ldr	r2, [r2, #0]
 800e37c:	6881      	ldr	r1, [r0, #8]
 800e37e:	6800      	ldr	r0, [r0, #0]
 800e380:	f7ff ffb7 	bl	800e2f2 <buffer_write>
	output->control_block->offset = 0;
 800e384:	6863      	ldr	r3, [r4, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
}
 800e38a:	bd10      	pop	{r4, pc}

0800e38c <out_func>:
{
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4605      	mov	r5, r0
 800e390:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800e392:	684b      	ldr	r3, [r1, #4]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68cb      	ldr	r3, [r1, #12]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d00f      	beq.n	800e3bc <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800e39c:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800e39e:	f3bf 8f5b 	dmb	ish
 800e3a2:	e853 2f00 	ldrex	r2, [r3]
 800e3a6:	1c51      	adds	r1, r2, #1
 800e3a8:	e843 1000 	strex	r0, r1, [r3]
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d1f8      	bne.n	800e3a2 <out_func+0x16>
 800e3b0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800e3b4:	68a3      	ldr	r3, [r4, #8]
 800e3b6:	549d      	strb	r5, [r3, r2]
}
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800e3bc:	4608      	mov	r0, r1
 800e3be:	f7ff ffd8 	bl	800e372 <log_output_flush>
 800e3c2:	e7eb      	b.n	800e39c <out_func+0x10>

0800e3c4 <cr_out_func>:
{
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	460d      	mov	r5, r1
	out_func(c, ctx);
 800e3ca:	f7ff ffdf 	bl	800e38c <out_func>
	if (c == '\n') {
 800e3ce:	2c0a      	cmp	r4, #10
 800e3d0:	d001      	beq.n	800e3d6 <cr_out_func+0x12>
}
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	200d      	movs	r0, #13
 800e3da:	f7ff ffd7 	bl	800e38c <out_func>
 800e3de:	e7f8      	b.n	800e3d2 <cr_out_func+0xe>

0800e3e0 <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 800e3e0:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 800e3e2:	b198      	cbz	r0, 800e40c <z_log_msg2_finalize+0x2c>
 800e3e4:	460e      	mov	r6, r1
 800e3e6:	4614      	mov	r4, r2
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 800e3ec:	b143      	cbz	r3, 800e400 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 800e3ee:	f100 030c 	add.w	r3, r0, #12
 800e3f2:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800e3f6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 800e3fa:	4418      	add	r0, r3
 800e3fc:	f001 fdc1 	bl	800ff82 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 800e400:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 800e402:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 800e404:	4628      	mov	r0, r5
 800e406:	f7f6 f96d 	bl	80046e4 <z_log_msg2_commit>
}
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 800e40c:	f7f6 f832 	bl	8004474 <z_log_dropped>
		return;
 800e410:	e7fb      	b.n	800e40a <z_log_msg2_finalize+0x2a>

0800e412 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
 800e412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e416:	4605      	mov	r5, r0
 800e418:	460c      	mov	r4, r1
 800e41a:	4617      	mov	r7, r2
 800e41c:	461e      	mov	r6, r3
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
 800e41e:	f3c1 2c49 	ubfx	ip, r1, #9, #10
 800e422:	f3c1 40cb 	ubfx	r0, r1, #19, #12
 800e426:	4484      	add	ip, r0
 800e428:	f10c 0c13 	add.w	ip, ip, #19
 800e42c:	f02c 0c07 	bic.w	ip, ip, #7
	uint32_t msg_wlen = log_msg2_get_total_wlen(desc);
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
 800e430:	ea4f 009c 	mov.w	r0, ip, lsr #2
 800e434:	f7f6 f898 	bl	8004568 <z_log_msg2_alloc>

	if (msg) {
 800e438:	4680      	mov	r8, r0
 800e43a:	b128      	cbz	r0, 800e448 <z_impl_z_log_msg2_static_create+0x36>
 800e43c:	f3c4 2249 	ubfx	r2, r4, #9, #10
 800e440:	4639      	mov	r1, r7
 800e442:	300c      	adds	r0, #12
 800e444:	f001 fd9d 	bl	800ff82 <memcpy>
		memcpy(msg->data, package, desc.package_len);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800e448:	4633      	mov	r3, r6
 800e44a:	4622      	mov	r2, r4
 800e44c:	4629      	mov	r1, r5
 800e44e:	4640      	mov	r0, r8
 800e450:	f7ff ffc6 	bl	800e3e0 <z_log_msg2_finalize>
}
 800e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e458 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 800e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	b085      	sub	sp, #20
 800e45e:	4681      	mov	r9, r0
 800e460:	460d      	mov	r5, r1
 800e462:	4690      	mov	r8, r2
 800e464:	461e      	mov	r6, r3
 800e466:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800e46a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int plen;

	if (fmt) {
 800e46c:	b3b7      	cbz	r7, 800e4dc <z_impl_z_log_msg2_runtime_vcreate+0x84>
		va_list ap2;

		va_copy(ap2, ap);
 800e46e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e470:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	463b      	mov	r3, r7
 800e476:	2200      	movs	r2, #0
 800e478:	210c      	movs	r1, #12
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7f4 ffde 	bl	800343c <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 800e480:	4682      	mov	sl, r0
 800e482:	eb00 030b 	add.w	r3, r0, fp
 800e486:	3313      	adds	r3, #19
 800e488:	f023 0307 	bic.w	r3, r3, #7
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 800e48c:	2400      	movs	r4, #0
 800e48e:	f36f 0400 	bfc	r4, #0, #1
 800e492:	f36f 0441 	bfc	r4, #1, #1
 800e496:	f36f 0482 	bfc	r4, #2, #1
 800e49a:	f369 04c5 	bfi	r4, r9, #3, #3
 800e49e:	f368 1488 	bfi	r4, r8, #6, #3
 800e4a2:	f360 2452 	bfi	r4, r0, #9, #10
 800e4a6:	f36b 44de 	bfi	r4, fp, #19, #12
 800e4aa:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
 800e4ae:	0898      	lsrs	r0, r3, #2
 800e4b0:	f7f6 f85a 	bl	8004568 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	b140      	cbz	r0, 800e4ca <z_impl_z_log_msg2_runtime_vcreate+0x72>
 800e4b8:	b13f      	cbz	r7, 800e4ca <z_impl_z_log_msg2_runtime_vcreate+0x72>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 800e4ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	463b      	mov	r3, r7
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4651      	mov	r1, sl
 800e4c4:	300c      	adds	r0, #12
 800e4c6:	f7f4 ffb9 	bl	800343c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 800e4ca:	4633      	mov	r3, r6
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	f7ff ff85 	bl	800e3e0 <z_log_msg2_finalize>
}
 800e4d6:	b005      	add	sp, #20
 800e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 800e4dc:	2000      	movs	r0, #0
 800e4de:	e7cf      	b.n	800e480 <z_impl_z_log_msg2_runtime_vcreate+0x28>

0800e4e0 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800e4e0:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800e4e2:	f7f6 fbad 	bl	8004c40 <__do_global_ctors_aux>
	__do_init_array_aux();
 800e4e6:	f7f6 fb9d 	bl	8004c24 <__do_init_array_aux>
}
 800e4ea:	bd08      	pop	{r3, pc}

0800e4ec <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4604      	mov	r4, r0

	if (esf != NULL) {
 800e4f0:	460d      	mov	r5, r1
 800e4f2:	b111      	cbz	r1, 800e4fa <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	f7f6 fbc7 	bl	8004c88 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7fc f98b 	bl	800a818 <z_fatal_error>
}
 800e502:	bd38      	pop	{r3, r4, r5, pc}

0800e504 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800e504:	b508      	push	{r3, lr}
 800e506:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800e508:	6800      	ldr	r0, [r0, #0]
 800e50a:	f7ff ffef 	bl	800e4ec <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800e50e:	bd08      	pop	{r3, pc}

0800e510 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 800e510:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800e512:	2100      	movs	r1, #0
 800e514:	2001      	movs	r0, #1
 800e516:	f7ff ffe9 	bl	800e4ec <z_arm_fatal_error>
}
 800e51a:	bd08      	pop	{r3, pc}

0800e51c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 800e51c:	b508      	push	{r3, lr}
	handler();
 800e51e:	f7f6 fcc5 	bl	8004eac <z_SysNmiOnReset>
	z_arm_int_exit();
 800e522:	f7f6 fdaf 	bl	8005084 <z_arm_exc_exit>
}
 800e526:	bd08      	pop	{r3, pc}

0800e528 <memory_fault_recoverable>:
}
 800e528:	2000      	movs	r0, #0
 800e52a:	4770      	bx	lr

0800e52c <z_log_msg2_runtime_create>:
{
 800e52c:	b510      	push	{r4, lr}
 800e52e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800e530:	ac0a      	add	r4, sp, #40	; 0x28
 800e532:	9405      	str	r4, [sp, #20]
 800e534:	9402      	str	r4, [sp, #8]
 800e536:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e538:	9401      	str	r4, [sp, #4]
 800e53a:	9c08      	ldr	r4, [sp, #32]
 800e53c:	9400      	str	r4, [sp, #0]
 800e53e:	f7ff ff8b 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800e542:	b006      	add	sp, #24
 800e544:	bd10      	pop	{r4, pc}

0800e546 <fault_handle>:
{
 800e546:	b508      	push	{r3, lr}
	*recoverable = false;
 800e548:	2300      	movs	r3, #0
 800e54a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800e54c:	1ecb      	subs	r3, r1, #3
 800e54e:	2b09      	cmp	r3, #9
 800e550:	d81a      	bhi.n	800e588 <fault_handle+0x42>
 800e552:	e8df f003 	tbb	[pc, r3]
 800e556:	0905      	.short	0x0905
 800e558:	1919110d 	.word	0x1919110d
 800e55c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800e560:	4611      	mov	r1, r2
 800e562:	f7f7 f9eb 	bl	800593c <hard_fault>
}
 800e566:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800e568:	2100      	movs	r1, #0
 800e56a:	f7f7 f885 	bl	8005678 <mem_manage_fault>
		break;
 800e56e:	e7fa      	b.n	800e566 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800e570:	2100      	movs	r1, #0
 800e572:	f7f6 fdb3 	bl	80050dc <bus_fault>
		break;
 800e576:	e7f6      	b.n	800e566 <fault_handle+0x20>
		reason = usage_fault(esf);
 800e578:	f7f6 ff1e 	bl	80053b8 <usage_fault>
		break;
 800e57c:	e7f3      	b.n	800e566 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800e57e:	4611      	mov	r1, r2
 800e580:	f7f7 f84e 	bl	8005620 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800e584:	2000      	movs	r0, #0
		break;
 800e586:	e7ee      	b.n	800e566 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800e588:	f7f6 fd8a 	bl	80050a0 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800e58c:	2000      	movs	r0, #0
	return reason;
 800e58e:	e7ea      	b.n	800e566 <fault_handle+0x20>

0800e590 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800e590:	6843      	ldr	r3, [r0, #4]
 800e592:	1e5a      	subs	r2, r3, #1
		&&
 800e594:	4213      	tst	r3, r2
 800e596:	d106      	bne.n	800e5a6 <mpu_partition_is_valid+0x16>
		&&
 800e598:	2b1f      	cmp	r3, #31
 800e59a:	d906      	bls.n	800e5aa <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800e59c:	6803      	ldr	r3, [r0, #0]
		&&
 800e59e:	421a      	tst	r2, r3
 800e5a0:	d005      	beq.n	800e5ae <mpu_partition_is_valid+0x1e>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	4770      	bx	lr
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	4770      	bx	lr
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	4770      	bx	lr
 800e5ae:	2001      	movs	r0, #1
}
 800e5b0:	4770      	bx	lr

0800e5b2 <mpu_configure_region>:
{
 800e5b2:	b500      	push	{lr}
 800e5b4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800e5b6:	680b      	ldr	r3, [r1, #0]
 800e5b8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800e5ba:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800e5bc:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800e5be:	2b20      	cmp	r3, #32
 800e5c0:	d912      	bls.n	800e5e8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800e5c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5c6:	d811      	bhi.n	800e5ec <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	fab3 f383 	clz	r3, r3
 800e5ce:	f1c3 031f 	rsb	r3, r3, #31
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800e5d8:	4313      	orrs	r3, r2
 800e5da:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800e5dc:	a901      	add	r1, sp, #4
 800e5de:	f7f7 fbaf 	bl	8005d40 <region_allocate_and_init>
}
 800e5e2:	b005      	add	sp, #20
 800e5e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	e7f5      	b.n	800e5d8 <mpu_configure_region+0x26>
		return REGION_4G;
 800e5ec:	233e      	movs	r3, #62	; 0x3e
 800e5ee:	e7f3      	b.n	800e5d8 <mpu_configure_region+0x26>

0800e5f0 <arm_core_mpu_configure_static_mpu_regions>:
{
 800e5f0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800e5f2:	f7f7 fc2b 	bl	8005e4c <mpu_configure_static_mpu_regions>
}
 800e5f6:	bd08      	pop	{r3, pc}

0800e5f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800e5f8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800e5fa:	f7f7 fc31 	bl	8005e60 <mpu_configure_dynamic_mpu_regions>
}
 800e5fe:	bd08      	pop	{r3, pc}

0800e600 <malloc_prepare>:
}
 800e600:	2000      	movs	r0, #0
 800e602:	4770      	bx	lr

0800e604 <_stdout_hook_default>:
}
 800e604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e608:	4770      	bx	lr

0800e60a <_stdin_hook_default>:
}
 800e60a:	2000      	movs	r0, #0
 800e60c:	4770      	bx	lr

0800e60e <_read>:
{
 800e60e:	b508      	push	{r3, lr}
 800e610:	4608      	mov	r0, r1
 800e612:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800e614:	f7f7 fc7c 	bl	8005f10 <z_impl_zephyr_read_stdin>
}
 800e618:	bd08      	pop	{r3, pc}

0800e61a <_write>:
{
 800e61a:	b508      	push	{r3, lr}
 800e61c:	4608      	mov	r0, r1
 800e61e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800e620:	f7f7 fc8c 	bl	8005f3c <z_impl_zephyr_write_stdout>
}
 800e624:	bd08      	pop	{r3, pc}

0800e626 <_close>:
}
 800e626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e62a:	4770      	bx	lr

0800e62c <_lseek>:
}
 800e62c:	2000      	movs	r0, #0
 800e62e:	4770      	bx	lr

0800e630 <_isatty>:
}
 800e630:	2802      	cmp	r0, #2
 800e632:	bfcc      	ite	gt
 800e634:	2000      	movgt	r0, #0
 800e636:	2001      	movle	r0, #1
 800e638:	4770      	bx	lr

0800e63a <_kill>:
}
 800e63a:	2000      	movs	r0, #0
 800e63c:	4770      	bx	lr

0800e63e <_getpid>:
}
 800e63e:	2000      	movs	r0, #0
 800e640:	4770      	bx	lr

0800e642 <_fstat>:
	st->st_mode = S_IFCHR;
 800e642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e646:	604b      	str	r3, [r1, #4]
}
 800e648:	2000      	movs	r0, #0
 800e64a:	4770      	bx	lr

0800e64c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800e64c:	b510      	push	{r4, lr}
 800e64e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800e650:	2014      	movs	r0, #20
 800e652:	f7fd ff2f 	bl	800c4b4 <malloc>
 800e656:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800e658:	f001 f942 	bl	800f8e0 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800e65c:	bd10      	pop	{r4, pc}

0800e65e <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800e65e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800e660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e668:	f7fc fb7a 	bl	800ad60 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800e66c:	bd08      	pop	{r3, pc}

0800e66e <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800e66e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800e670:	f7fc fc00 	bl	800ae74 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800e674:	bd08      	pop	{r3, pc}

0800e676 <__stm32_exti_isr_0>:
{
 800e676:	b508      	push	{r3, lr}
 800e678:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800e67a:	2101      	movs	r1, #1
 800e67c:	2000      	movs	r0, #0
 800e67e:	f7f7 fc97 	bl	8005fb0 <__stm32_exti_isr>
}
 800e682:	bd08      	pop	{r3, pc}

0800e684 <__stm32_exti_isr_1>:
{
 800e684:	b508      	push	{r3, lr}
 800e686:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800e688:	2102      	movs	r1, #2
 800e68a:	2001      	movs	r0, #1
 800e68c:	f7f7 fc90 	bl	8005fb0 <__stm32_exti_isr>
}
 800e690:	bd08      	pop	{r3, pc}

0800e692 <__stm32_exti_isr_2>:
{
 800e692:	b508      	push	{r3, lr}
 800e694:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800e696:	2103      	movs	r1, #3
 800e698:	2002      	movs	r0, #2
 800e69a:	f7f7 fc89 	bl	8005fb0 <__stm32_exti_isr>
}
 800e69e:	bd08      	pop	{r3, pc}

0800e6a0 <__stm32_exti_isr_3>:
{
 800e6a0:	b508      	push	{r3, lr}
 800e6a2:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800e6a4:	2104      	movs	r1, #4
 800e6a6:	2003      	movs	r0, #3
 800e6a8:	f7f7 fc82 	bl	8005fb0 <__stm32_exti_isr>
}
 800e6ac:	bd08      	pop	{r3, pc}

0800e6ae <__stm32_exti_isr_4>:
{
 800e6ae:	b508      	push	{r3, lr}
 800e6b0:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800e6b2:	2105      	movs	r1, #5
 800e6b4:	2004      	movs	r0, #4
 800e6b6:	f7f7 fc7b 	bl	8005fb0 <__stm32_exti_isr>
}
 800e6ba:	bd08      	pop	{r3, pc}

0800e6bc <__stm32_exti_isr_9_5>:
{
 800e6bc:	b508      	push	{r3, lr}
 800e6be:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800e6c0:	210a      	movs	r1, #10
 800e6c2:	2005      	movs	r0, #5
 800e6c4:	f7f7 fc74 	bl	8005fb0 <__stm32_exti_isr>
}
 800e6c8:	bd08      	pop	{r3, pc}

0800e6ca <__stm32_exti_isr_15_10>:
{
 800e6ca:	b508      	push	{r3, lr}
 800e6cc:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800e6ce:	2110      	movs	r1, #16
 800e6d0:	200a      	movs	r0, #10
 800e6d2:	f7f7 fc6d 	bl	8005fb0 <__stm32_exti_isr>
}
 800e6d6:	bd08      	pop	{r3, pc}

0800e6d8 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800e6d8:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800e6da:	2200      	movs	r2, #0
 800e6dc:	4611      	mov	r1, r2
 800e6de:	2006      	movs	r0, #6
 800e6e0:	f7f6 fbce 	bl	8004e80 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	2007      	movs	r0, #7
 800e6ea:	f7f6 fbc9 	bl	8004e80 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	2008      	movs	r0, #8
 800e6f4:	f7f6 fbc4 	bl	8004e80 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	2009      	movs	r0, #9
 800e6fe:	f7f6 fbbf 	bl	8004e80 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800e702:	2200      	movs	r2, #0
 800e704:	4611      	mov	r1, r2
 800e706:	200a      	movs	r0, #10
 800e708:	f7f6 fbba 	bl	8004e80 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800e70c:	2200      	movs	r2, #0
 800e70e:	4611      	mov	r1, r2
 800e710:	2017      	movs	r0, #23
 800e712:	f7f6 fbb5 	bl	8004e80 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800e716:	2200      	movs	r2, #0
 800e718:	4611      	mov	r1, r2
 800e71a:	2028      	movs	r0, #40	; 0x28
 800e71c:	f7f6 fbb0 	bl	8004e80 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800e720:	bd08      	pop	{r3, pc}

0800e722 <stm32_exti_init>:
{
 800e722:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800e724:	f7ff ffd8 	bl	800e6d8 <__stm32_exti_connect_irqs>
}
 800e728:	2000      	movs	r0, #0
 800e72a:	bd08      	pop	{r3, pc}

0800e72c <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800e72c:	2300      	movs	r3, #0
 800e72e:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800e730:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800e732:	6083      	str	r3, [r0, #8]
}
 800e734:	4770      	bx	lr

0800e736 <get_bus_clock>:
}
 800e736:	fbb0 f0f1 	udiv	r0, r0, r1
 800e73a:	4770      	bx	lr

0800e73c <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800e73c:	2300      	movs	r3, #0
 800e73e:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800e740:	2314      	movs	r3, #20
 800e742:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800e744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e748:	6083      	str	r3, [r0, #8]
}
 800e74a:	4770      	bx	lr

0800e74c <gpio_stm32_isr>:
{
 800e74c:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800e74e:	684e      	ldr	r6, [r1, #4]
 800e750:	2501      	movs	r5, #1
 800e752:	4085      	lsls	r5, r0
	return list->head;
 800e754:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800e756:	b119      	cbz	r1, 800e760 <gpio_stm32_isr+0x14>
 800e758:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e75a:	b149      	cbz	r1, 800e770 <gpio_stm32_isr+0x24>
	return node->next;
 800e75c:	680c      	ldr	r4, [r1, #0]
 800e75e:	e007      	b.n	800e770 <gpio_stm32_isr+0x24>
 800e760:	460c      	mov	r4, r1
 800e762:	e005      	b.n	800e770 <gpio_stm32_isr+0x24>
 800e764:	b164      	cbz	r4, 800e780 <gpio_stm32_isr+0x34>
 800e766:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e768:	b104      	cbz	r4, 800e76c <gpio_stm32_isr+0x20>
	return node->next;
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	4621      	mov	r1, r4
 800e76e:	461c      	mov	r4, r3
 800e770:	b141      	cbz	r1, 800e784 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800e772:	688a      	ldr	r2, [r1, #8]
 800e774:	402a      	ands	r2, r5
 800e776:	d0f5      	beq.n	800e764 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800e778:	684b      	ldr	r3, [r1, #4]
 800e77a:	4630      	mov	r0, r6
 800e77c:	4798      	blx	r3
 800e77e:	e7f1      	b.n	800e764 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800e780:	4623      	mov	r3, r4
 800e782:	e7f3      	b.n	800e76c <gpio_stm32_isr+0x20>
}
 800e784:	bd70      	pop	{r4, r5, r6, pc}

0800e786 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800e786:	f410 7f00 	tst.w	r0, #512	; 0x200
 800e78a:	d01b      	beq.n	800e7c4 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800e78c:	2310      	movs	r3, #16
 800e78e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800e790:	f010 0f02 	tst.w	r0, #2
 800e794:	d004      	beq.n	800e7a0 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800e796:	f010 0f04 	tst.w	r0, #4
 800e79a:	d02c      	beq.n	800e7f6 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800e79c:	2350      	movs	r3, #80	; 0x50
 800e79e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800e7a0:	f010 0310 	ands.w	r3, r0, #16
 800e7a4:	d005      	beq.n	800e7b2 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800e7a6:	680b      	ldr	r3, [r1, #0]
 800e7a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7ac:	600b      	str	r3, [r1, #0]
	return 0;
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800e7b2:	f010 0020 	ands.w	r0, r0, #32
 800e7b6:	d020      	beq.n	800e7fa <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800e7b8:	680a      	ldr	r2, [r1, #0]
 800e7ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7be:	600a      	str	r2, [r1, #0]
	return 0;
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800e7c4:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e7c8:	d011      	beq.n	800e7ee <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800e7ce:	f010 0310 	ands.w	r3, r0, #16
 800e7d2:	d004      	beq.n	800e7de <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800e7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7d8:	600b      	str	r3, [r1, #0]
	return 0;
 800e7da:	2000      	movs	r0, #0
 800e7dc:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800e7de:	f010 0020 	ands.w	r0, r0, #32
 800e7e2:	d00a      	beq.n	800e7fa <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800e7e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e7e8:	600a      	str	r2, [r1, #0]
	return 0;
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800e7ee:	2330      	movs	r3, #48	; 0x30
 800e7f0:	600b      	str	r3, [r1, #0]
	return 0;
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	4770      	bx	lr
				return -ENOTSUP;
 800e7f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800e7fa:	4770      	bx	lr

0800e7fc <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e7fc:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e7fe:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800e800:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800e802:	600b      	str	r3, [r1, #0]
}
 800e804:	2000      	movs	r0, #0
 800e806:	4770      	bx	lr

0800e808 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e808:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e80a:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800e80c:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800e80e:	4042      	eors	r2, r0
 800e810:	400a      	ands	r2, r1
 800e812:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800e814:	615a      	str	r2, [r3, #20]
}
 800e816:	2000      	movs	r0, #0
 800e818:	4770      	bx	lr

0800e81a <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e81a:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e81c:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800e81e:	6199      	str	r1, [r3, #24]
}
 800e820:	2000      	movs	r0, #0
 800e822:	4770      	bx	lr

0800e824 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e824:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e826:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800e828:	6299      	str	r1, [r3, #40]	; 0x28
}
 800e82a:	2000      	movs	r0, #0
 800e82c:	4770      	bx	lr

0800e82e <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800e82e:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e830:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800e832:	6953      	ldr	r3, [r2, #20]
 800e834:	404b      	eors	r3, r1
 800e836:	6153      	str	r3, [r2, #20]
}
 800e838:	2000      	movs	r0, #0
 800e83a:	4770      	bx	lr

0800e83c <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800e83c:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800e83e:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800e840:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800e844:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800e846:	b1fb      	cbz	r3, 800e888 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e848:	2000      	movs	r0, #0
 800e84a:	e00d      	b.n	800e868 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800e84c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800e84e:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800e850:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e854:	4281      	cmp	r1, r0
 800e856:	d112      	bne.n	800e87e <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800e858:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800e85c:	e00f      	b.n	800e87e <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800e85e:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800e862:	e00c      	b.n	800e87e <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e864:	4618      	mov	r0, r3
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	b163      	cbz	r3, 800e884 <gpio_stm32_manage_callback+0x48>
 800e86a:	4299      	cmp	r1, r3
 800e86c:	d1fa      	bne.n	800e864 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800e86e:	2800      	cmp	r0, #0
 800e870:	d0ec      	beq.n	800e84c <gpio_stm32_manage_callback+0x10>
	return node->next;
 800e872:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800e874:	6003      	str	r3, [r0, #0]
	return list->tail;
 800e876:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d0ef      	beq.n	800e85e <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800e87e:	2300      	movs	r3, #0
 800e880:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800e882:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800e884:	b903      	cbnz	r3, 800e888 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800e886:	b162      	cbz	r2, 800e8a2 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800e888:	b172      	cbz	r2, 800e8a8 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800e88a:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800e88c:	600b      	str	r3, [r1, #0]
	list->head = node;
 800e88e:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800e890:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800e894:	b10b      	cbz	r3, 800e89a <gpio_stm32_manage_callback+0x5e>
	return 0;
 800e896:	2000      	movs	r0, #0
 800e898:	e007      	b.n	800e8aa <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800e89a:	f8cc 1004 	str.w	r1, [ip, #4]
 800e89e:	2000      	movs	r0, #0
}
 800e8a0:	e003      	b.n	800e8aa <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800e8a2:	f06f 0015 	mvn.w	r0, #21
 800e8a6:	e000      	b.n	800e8aa <gpio_stm32_manage_callback+0x6e>
	return 0;
 800e8a8:	2000      	movs	r0, #0
}
 800e8aa:	bc10      	pop	{r4}
 800e8ac:	4770      	bx	lr

0800e8ae <gpio_stm32_configure_raw>:
{
 800e8ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800e8b0:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800e8b2:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800e8b8:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800e8bc:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e8c0:	6865      	ldr	r5, [r4, #4]
 800e8c2:	ea25 0500 	bic.w	r5, r5, r0
 800e8c6:	408e      	lsls	r6, r1
 800e8c8:	4335      	orrs	r5, r6
 800e8ca:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800e8cc:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800e8d0:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8d2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e8d6:	2d00      	cmp	r5, #0
 800e8d8:	d04a      	beq.n	800e970 <gpio_stm32_configure_raw+0xc2>
  return __builtin_clz(value);
 800e8da:	fab5 f585 	clz	r5, r5
 800e8de:	006d      	lsls	r5, r5, #1
 800e8e0:	2703      	movs	r7, #3
 800e8e2:	fa07 f505 	lsl.w	r5, r7, r5
 800e8e6:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8ea:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	d040      	beq.n	800e974 <gpio_stm32_configure_raw+0xc6>
  return __builtin_clz(value);
 800e8f2:	fab5 f585 	clz	r5, r5
 800e8f6:	006d      	lsls	r5, r5, #1
 800e8f8:	fa0e f505 	lsl.w	r5, lr, r5
 800e8fc:	4335      	orrs	r5, r6
 800e8fe:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800e900:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e904:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e906:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e90a:	b3ad      	cbz	r5, 800e978 <gpio_stm32_configure_raw+0xca>
  return __builtin_clz(value);
 800e90c:	fab5 f585 	clz	r5, r5
 800e910:	006d      	lsls	r5, r5, #1
 800e912:	f04f 0e03 	mov.w	lr, #3
 800e916:	fa0e f505 	lsl.w	r5, lr, r5
 800e91a:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e91e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800e922:	b35d      	cbz	r5, 800e97c <gpio_stm32_configure_raw+0xce>
  return __builtin_clz(value);
 800e924:	fab5 f585 	clz	r5, r5
 800e928:	006d      	lsls	r5, r5, #1
 800e92a:	fa02 f505 	lsl.w	r5, r2, r5
 800e92e:	ea4e 0505 	orr.w	r5, lr, r5
 800e932:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800e934:	f1bc 0f20 	cmp.w	ip, #32
 800e938:	d022      	beq.n	800e980 <gpio_stm32_configure_raw+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800e93a:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e93e:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e940:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800e944:	2b00      	cmp	r3, #0
 800e946:	d052      	beq.n	800e9ee <gpio_stm32_configure_raw+0x140>
  return __builtin_clz(value);
 800e948:	fab3 f383 	clz	r3, r3
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	2103      	movs	r1, #3
 800e950:	fa01 f303 	lsl.w	r3, r1, r3
 800e954:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e958:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d048      	beq.n	800e9f2 <gpio_stm32_configure_raw+0x144>
  return __builtin_clz(value);
 800e960:	fab0 f080 	clz	r0, r0
 800e964:	0040      	lsls	r0, r0, #1
 800e966:	fa0c f000 	lsl.w	r0, ip, r0
 800e96a:	4318      	orrs	r0, r3
 800e96c:	6020      	str	r0, [r4, #0]
}
 800e96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800e970:	2520      	movs	r5, #32
 800e972:	e7b4      	b.n	800e8de <gpio_stm32_configure_raw+0x30>
 800e974:	2520      	movs	r5, #32
 800e976:	e7be      	b.n	800e8f6 <gpio_stm32_configure_raw+0x48>
 800e978:	2520      	movs	r5, #32
 800e97a:	e7c9      	b.n	800e910 <gpio_stm32_configure_raw+0x62>
 800e97c:	2520      	movs	r5, #32
 800e97e:	e7d3      	b.n	800e928 <gpio_stm32_configure_raw+0x7a>
		if (pin < 8) {
 800e980:	2907      	cmp	r1, #7
 800e982:	dc19      	bgt.n	800e9b8 <gpio_stm32_configure_raw+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e984:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e986:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800e98a:	b18a      	cbz	r2, 800e9b0 <gpio_stm32_configure_raw+0x102>
  return __builtin_clz(value);
 800e98c:	fab2 f282 	clz	r2, r2
 800e990:	0092      	lsls	r2, r2, #2
 800e992:	250f      	movs	r5, #15
 800e994:	fa05 f202 	lsl.w	r2, r5, r2
 800e998:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e99c:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800e9a0:	b142      	cbz	r2, 800e9b4 <gpio_stm32_configure_raw+0x106>
  return __builtin_clz(value);
 800e9a2:	fab2 f282 	clz	r2, r2
 800e9a6:	0092      	lsls	r2, r2, #2
 800e9a8:	4093      	lsls	r3, r2
 800e9aa:	430b      	orrs	r3, r1
 800e9ac:	6223      	str	r3, [r4, #32]
}
 800e9ae:	e7c4      	b.n	800e93a <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800e9b0:	2220      	movs	r2, #32
 800e9b2:	e7ed      	b.n	800e990 <gpio_stm32_configure_raw+0xe2>
 800e9b4:	2220      	movs	r2, #32
 800e9b6:	e7f6      	b.n	800e9a6 <gpio_stm32_configure_raw+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e9b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e9ba:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9bc:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800e9c0:	b189      	cbz	r1, 800e9e6 <gpio_stm32_configure_raw+0x138>
  return __builtin_clz(value);
 800e9c2:	fab1 f181 	clz	r1, r1
 800e9c6:	0089      	lsls	r1, r1, #2
 800e9c8:	260f      	movs	r6, #15
 800e9ca:	fa06 f101 	lsl.w	r1, r6, r1
 800e9ce:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e9d2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800e9d6:	b142      	cbz	r2, 800e9ea <gpio_stm32_configure_raw+0x13c>
  return __builtin_clz(value);
 800e9d8:	fab2 f282 	clz	r2, r2
 800e9dc:	0092      	lsls	r2, r2, #2
 800e9de:	4093      	lsls	r3, r2
 800e9e0:	430b      	orrs	r3, r1
 800e9e2:	6263      	str	r3, [r4, #36]	; 0x24
}
 800e9e4:	e7a9      	b.n	800e93a <gpio_stm32_configure_raw+0x8c>
    return 32U;
 800e9e6:	2120      	movs	r1, #32
 800e9e8:	e7ed      	b.n	800e9c6 <gpio_stm32_configure_raw+0x118>
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	e7f6      	b.n	800e9dc <gpio_stm32_configure_raw+0x12e>
 800e9ee:	2320      	movs	r3, #32
 800e9f0:	e7ac      	b.n	800e94c <gpio_stm32_configure_raw+0x9e>
 800e9f2:	2020      	movs	r0, #32
 800e9f4:	e7b6      	b.n	800e964 <gpio_stm32_configure_raw+0xb6>

0800e9f6 <gpio_stm32_config>:
{
 800e9f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	4607      	mov	r7, r0
 800e9fc:	460d      	mov	r5, r1
 800e9fe:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800ea00:	a901      	add	r1, sp, #4
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7ff febf 	bl	800e786 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800ea08:	4606      	mov	r6, r0
 800ea0a:	b970      	cbnz	r0, 800ea2a <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800ea0c:	f414 7f00 	tst.w	r4, #512	; 0x200
 800ea10:	d005      	beq.n	800ea1e <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800ea12:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800ea16:	d10b      	bne.n	800ea30 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800ea18:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800ea1c:	d10e      	bne.n	800ea3c <gpio_stm32_config+0x46>
	gpio_stm32_configure_raw(dev, pin, pincfg, 0);
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9a01      	ldr	r2, [sp, #4]
 800ea22:	4629      	mov	r1, r5
 800ea24:	4638      	mov	r0, r7
 800ea26:	f7ff ff42 	bl	800e8ae <gpio_stm32_configure_raw>
}
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	b003      	add	sp, #12
 800ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800ea30:	2101      	movs	r1, #1
 800ea32:	40a9      	lsls	r1, r5
 800ea34:	4638      	mov	r0, r7
 800ea36:	f7ff fef0 	bl	800e81a <gpio_stm32_port_set_bits_raw>
 800ea3a:	e7f0      	b.n	800ea1e <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800ea3c:	2101      	movs	r1, #1
 800ea3e:	40a9      	lsls	r1, r5
 800ea40:	4638      	mov	r0, r7
 800ea42:	f7ff feef 	bl	800e824 <gpio_stm32_port_clear_bits_raw>
 800ea46:	e7ea      	b.n	800ea1e <gpio_stm32_config+0x28>

0800ea48 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800ea48:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800ea4a:	6902      	ldr	r2, [r0, #16]
	int ret;

	data->dev = dev;
 800ea4c:	6050      	str	r0, [r2, #4]
	/* Cf: L4/L5 RM, Chapter "Independent I/O supply rail" */
	LL_PWR_EnableVddIO2();
	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
#endif
	/* enable port clock (if runtime PM is not enabled) */
	ret = gpio_stm32_clock_request(dev, !IS_ENABLED(CONFIG_PM_DEVICE_RUNTIME));
 800ea4e:	2101      	movs	r1, #1
 800ea50:	f7f7 fcda 	bl	8006408 <gpio_stm32_clock_request>
	if (ret < 0) {
 800ea54:	2800      	cmp	r0, #0
 800ea56:	db00      	blt.n	800ea5a <gpio_stm32_init+0x12>
	}

	pm_device_runtime_init_suspended(dev);
	(void)pm_device_runtime_enable(dev);

	return 0;
 800ea58:	2000      	movs	r0, #0
}
 800ea5a:	bd08      	pop	{r3, pc}

0800ea5c <gpio_stm32_configure>:
{
 800ea5c:	b508      	push	{r3, lr}
	gpio_stm32_configure_raw(dev, pin, conf, altf);
 800ea5e:	f7ff ff26 	bl	800e8ae <gpio_stm32_configure_raw>
}
 800ea62:	2000      	movs	r0, #0
 800ea64:	bd08      	pop	{r3, pc}

0800ea66 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ea66:	6341      	str	r1, [r0, #52]	; 0x34
}
 800ea68:	4770      	bx	lr

0800ea6a <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ea6a:	6381      	str	r1, [r0, #56]	; 0x38
}
 800ea6c:	4770      	bx	lr

0800ea6e <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ea6e:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800ea70:	4770      	bx	lr

0800ea72 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ea72:	6401      	str	r1, [r0, #64]	; 0x40
}
 800ea74:	4770      	bx	lr

0800ea76 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800ea76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ea78:	6581      	str	r1, [r0, #88]	; 0x58
}
 800ea7a:	4770      	bx	lr

0800ea7c <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800ea7c:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800ea7e:	4770      	bx	lr

0800ea80 <get_polarity>:
	if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800ea80:	f010 0f01 	tst.w	r0, #1
 800ea84:	d001      	beq.n	800ea8a <get_polarity+0xa>
	return LL_TIM_OCPOLARITY_LOW;
 800ea86:	2002      	movs	r0, #2
 800ea88:	4770      	bx	lr
		return LL_TIM_OCPOLARITY_HIGH;
 800ea8a:	2000      	movs	r0, #0
}
 800ea8c:	4770      	bx	lr

0800ea8e <pwm_stm32_get_cycles_per_sec>:
	struct pwm_stm32_data *data = dev->data;
 800ea8e:	6903      	ldr	r3, [r0, #16]
	const struct pwm_stm32_config *cfg = dev->config;
 800ea90:	6841      	ldr	r1, [r0, #4]
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6849      	ldr	r1, [r1, #4]
 800ea96:	3101      	adds	r1, #1
 800ea98:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	6013      	str	r3, [r2, #0]
 800eaa0:	6050      	str	r0, [r2, #4]
}
 800eaa2:	4770      	bx	lr

0800eaa4 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800eaa4:	6d83      	ldr	r3, [r0, #88]	; 0x58
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800eaa6:	b91b      	cbnz	r3, 800eab0 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800eaa8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800eaaa:	b91b      	cbnz	r3, 800eab4 <spi_stm32_transfer_ongoing+0x10>
 800eaac:	2000      	movs	r0, #0
 800eaae:	4770      	bx	lr
 800eab0:	2001      	movs	r0, #1
 800eab2:	4770      	bx	lr
 800eab4:	2001      	movs	r0, #1
}
 800eab6:	4770      	bx	lr

0800eab8 <z_log_msg2_runtime_create>:
{
 800eab8:	b510      	push	{r4, lr}
 800eaba:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800eabc:	ac0a      	add	r4, sp, #40	; 0x28
 800eabe:	9405      	str	r4, [sp, #20]
 800eac0:	9402      	str	r4, [sp, #8]
 800eac2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eac4:	9401      	str	r4, [sp, #4]
 800eac6:	9c08      	ldr	r4, [sp, #32]
 800eac8:	9400      	str	r4, [sp, #0]
 800eaca:	f7ff fcc5 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800eace:	b006      	add	sp, #24
 800ead0:	bd10      	pop	{r4, pc}

0800ead2 <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800ead2:	b508      	push	{r3, lr}
 800ead4:	2200      	movs	r2, #0
 800ead6:	2105      	movs	r1, #5
 800ead8:	2023      	movs	r0, #35	; 0x23
 800eada:	f7f6 f9d1 	bl	8004e80 <z_arm_irq_priority_set>
 800eade:	2023      	movs	r0, #35	; 0x23
 800eae0:	f7f6 f9c0 	bl	8004e64 <arch_irq_enable>
 800eae4:	bd08      	pop	{r3, pc}

0800eae6 <spi_stm32_release>:
{
 800eae6:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800eae8:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	b1c3      	cbz	r3, 800eb20 <spi_stm32_release+0x3a>
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	b1b3      	cbz	r3, 800eb20 <spi_stm32_release+0x3a>
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	b1a2      	cbz	r2, 800eb20 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800eaf6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800eaf8:	f7fd f918 	bl	800bd2c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800eafc:	6823      	ldr	r3, [r4, #0]
 800eafe:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800eb00:	6818      	ldr	r0, [r3, #0]
 800eb02:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800eb04:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	408b      	lsls	r3, r1
 800eb0c:	421a      	tst	r2, r3
 800eb0e:	d10b      	bne.n	800eb28 <spi_stm32_release+0x42>
 800eb10:	2300      	movs	r3, #0
	if (value != 0)	{
 800eb12:	b15b      	cbz	r3, 800eb2c <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eb14:	2301      	movs	r3, #1
 800eb16:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800eb1a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	4798      	blx	r3
 800eb20:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
 800eb22:	b153      	cbz	r3, 800eb3a <spi_stm32_release+0x54>
}
 800eb24:	2000      	movs	r0, #0
 800eb26:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e7f2      	b.n	800eb12 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800eb32:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800eb38:	e7f2      	b.n	800eb20 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800eb3a:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800eb3c:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
 800eb40:	f7fc f9da 	bl	800aef8 <z_impl_k_sem_give>
}
 800eb44:	e7ee      	b.n	800eb24 <spi_stm32_release+0x3e>

0800eb46 <spi_stm32_cs_control>:
{
 800eb46:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800eb48:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d034      	beq.n	800ebba <spi_stm32_cs_control+0x74>
 800eb50:	689a      	ldr	r2, [r3, #8]
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	d031      	beq.n	800ebba <spi_stm32_cs_control+0x74>
 800eb56:	6810      	ldr	r0, [r2, #0]
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d02e      	beq.n	800ebba <spi_stm32_cs_control+0x74>
		if (on) {
 800eb5c:	b9c9      	cbnz	r1, 800eb92 <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800eb5e:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800eb60:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800eb64:	d129      	bne.n	800ebba <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800eb66:	6890      	ldr	r0, [r2, #8]
	z_impl_k_busy_wait(usec_to_wait);
 800eb68:	f7fd f8e0 	bl	800bd2c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
 800eb70:	6818      	ldr	r0, [r3, #0]
 800eb72:	7919      	ldrb	r1, [r3, #4]
	const struct gpio_driver_data *const data =
 800eb74:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	2301      	movs	r3, #1
 800eb7a:	408b      	lsls	r3, r1
 800eb7c:	421a      	tst	r2, r3
 800eb7e:	d126      	bne.n	800ebce <spi_stm32_cs_control+0x88>
 800eb80:	2300      	movs	r3, #0
	if (value != 0)	{
 800eb82:	b333      	cbz	r3, 800ebd2 <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eb84:	2301      	movs	r3, #1
 800eb86:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800eb8a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	4798      	blx	r3
 800eb90:	e013      	b.n	800ebba <spi_stm32_cs_control+0x74>
	return gpio_pin_set(spec->port, spec->pin, value);
 800eb92:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_data *const data =
 800eb94:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	2301      	movs	r3, #1
 800eb9a:	408b      	lsls	r3, r1
 800eb9c:	421a      	tst	r2, r3
 800eb9e:	d10d      	bne.n	800ebbc <spi_stm32_cs_control+0x76>
 800eba0:	2301      	movs	r3, #1
	if (value != 0)	{
 800eba2:	b16b      	cbz	r3, 800ebc0 <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800eba4:	2301      	movs	r3, #1
 800eba6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ebaa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	6898      	ldr	r0, [r3, #8]
 800ebb6:	f7fd f8b9 	bl	800bd2c <z_impl_k_busy_wait>
}
 800ebba:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	e7f0      	b.n	800eba2 <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ebc6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800ebc8:	691b      	ldr	r3, [r3, #16]
 800ebca:	4798      	blx	r3
 800ebcc:	e7f0      	b.n	800ebb0 <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e7d7      	b.n	800eb82 <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800ebd8:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	4798      	blx	r3
 800ebde:	e7ec      	b.n	800ebba <spi_stm32_cs_control+0x74>

0800ebe0 <spi_stm32_complete>:
{
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800ebe6:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800ebe8:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800ebea:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800ebec:	6863      	ldr	r3, [r4, #4]
 800ebee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebf2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebfa:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800ebfc:	6863      	ldr	r3, [r4, #4]
 800ebfe:	f023 0320 	bic.w	r3, r3, #32
 800ec02:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800ec04:	2100      	movs	r1, #0
 800ec06:	f7ff ff9e 	bl	800eb46 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ec0a:	68a3      	ldr	r3, [r4, #8]
 800ec0c:	f013 0f01 	tst.w	r3, #1
 800ec10:	d001      	beq.n	800ec16 <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800ec12:	68e3      	ldr	r3, [r4, #12]
 800ec14:	e7f9      	b.n	800ec0a <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800ec1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec20:	d015      	beq.n	800ec4e <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800ec22:	68a3      	ldr	r3, [r4, #8]
 800ec24:	f013 0f20 	tst.w	r3, #32
 800ec28:	d006      	beq.n	800ec38 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800ec2a:	68a3      	ldr	r3, [r4, #8]
 800ec2c:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800ec2e:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec36:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800ec38:	6823      	ldr	r3, [r4, #0]
 800ec3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec3e:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800ec40:	642e      	str	r6, [r5, #64]	; 0x40
	k_sem_give(&ctx->sync);
 800ec42:	f105 0028 	add.w	r0, r5, #40	; 0x28
	z_impl_k_sem_give(sem);
 800ec46:	f7fc f957 	bl	800aef8 <z_impl_k_sem_give>
}
 800ec4a:	b002      	add	sp, #8
 800ec4c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800ec4e:	68a3      	ldr	r3, [r4, #8]
 800ec50:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec54:	d1fb      	bne.n	800ec4e <spi_stm32_complete+0x6e>
 800ec56:	e7e4      	b.n	800ec22 <spi_stm32_complete+0x42>

0800ec58 <spi_stm32_transceive>:
{
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800ec5c:	2400      	movs	r4, #0
 800ec5e:	9401      	str	r4, [sp, #4]
 800ec60:	9400      	str	r4, [sp, #0]
 800ec62:	f7f8 f947 	bl	8006ef4 <transceive>
}
 800ec66:	b002      	add	sp, #8
 800ec68:	bd10      	pop	{r4, pc}

0800ec6a <spi_stm32_shift_m>:
{
 800ec6a:	b430      	push	{r4, r5}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800ec6c:	6883      	ldr	r3, [r0, #8]
 800ec6e:	f013 0f02 	tst.w	r3, #2
 800ec72:	d0fb      	beq.n	800ec6c <spi_stm32_shift_m+0x2>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ec74:	680b      	ldr	r3, [r1, #0]
 800ec76:	889b      	ldrh	r3, [r3, #4]
 800ec78:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ec7c:	2b08      	cmp	r3, #8
 800ec7e:	d009      	beq.n	800ec94 <spi_stm32_shift_m+0x2a>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ec80:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d03d      	beq.n	800ed02 <spi_stm32_shift_m+0x98>
 800ec86:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ec88:	2a00      	cmp	r2, #0
 800ec8a:	d13c      	bne.n	800ed06 <spi_stm32_shift_m+0x9c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	d03c      	beq.n	800ed0a <spi_stm32_shift_m+0xa0>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	e03b      	b.n	800ed0c <spi_stm32_shift_m+0xa2>
 800ec94:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ec96:	b18b      	cbz	r3, 800ecbc <spi_stm32_shift_m+0x52>
 800ec98:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800ec9a:	b98a      	cbnz	r2, 800ecc0 <spi_stm32_shift_m+0x56>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800ec9c:	b192      	cbz	r2, 800ecc4 <spi_stm32_shift_m+0x5a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ec9e:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800eca0:	b2db      	uxtb	r3, r3
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 800eca2:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800eca4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d03a      	beq.n	800ed20 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ecae:	b15b      	cbz	r3, 800ecc8 <spi_stm32_shift_m+0x5e>
	} else if (ctx->tx_buf) {
 800ecb0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d034      	beq.n	800ed20 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	654b      	str	r3, [r1, #84]	; 0x54
 800ecba:	e031      	b.n	800ed20 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	e7ed      	b.n	800ec9c <spi_stm32_shift_m+0x32>
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	e7eb      	b.n	800ec9c <spi_stm32_shift_m+0x32>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	e7eb      	b.n	800eca0 <spi_stm32_shift_m+0x36>
		++ctx->current_tx;
 800ecc8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ecca:	3308      	adds	r3, #8
 800eccc:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ecce:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ecd4:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800ecd8:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ecdc:	e004      	b.n	800ece8 <spi_stm32_shift_m+0x7e>
		++(*current);
 800ecde:	3308      	adds	r3, #8
 800ece0:	6023      	str	r3, [r4, #0]
		--(*count);
 800ece2:	6813      	ldr	r3, [r2, #0]
 800ece4:	3b01      	subs	r3, #1
 800ece6:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ece8:	6813      	ldr	r3, [r2, #0]
 800ecea:	b13b      	cbz	r3, 800ecfc <spi_stm32_shift_m+0x92>
		if (((*current)->len / dfs) != 0) {
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	685d      	ldr	r5, [r3, #4]
 800ecf0:	2d00      	cmp	r5, #0
 800ecf2:	d0f4      	beq.n	800ecde <spi_stm32_shift_m+0x74>
			*buf_len = (*current)->len / dfs;
 800ecf4:	658d      	str	r5, [r1, #88]	; 0x58
			return (*current)->buf;
 800ecf6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	e000      	b.n	800ecfe <spi_stm32_shift_m+0x94>
	*buf_len = 0;
 800ecfc:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ecfe:	654b      	str	r3, [r1, #84]	; 0x54
 800ed00:	e00e      	b.n	800ed20 <spi_stm32_shift_m+0xb6>
	return !!(ctx->tx_buf && ctx->tx_len);
 800ed02:	2200      	movs	r2, #0
 800ed04:	e7c2      	b.n	800ec8c <spi_stm32_shift_m+0x22>
 800ed06:	2201      	movs	r2, #1
 800ed08:	e7c0      	b.n	800ec8c <spi_stm32_shift_m+0x22>
 800ed0a:	2300      	movs	r3, #0
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800ed0c:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ed0e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ed10:	b133      	cbz	r3, 800ed20 <spi_stm32_shift_m+0xb6>
	ctx->tx_len -= len;
 800ed12:	3b01      	subs	r3, #1
 800ed14:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ed16:	b31b      	cbz	r3, 800ed60 <spi_stm32_shift_m+0xf6>
	} else if (ctx->tx_buf) {
 800ed18:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ed1a:	b10b      	cbz	r3, 800ed20 <spi_stm32_shift_m+0xb6>
		ctx->tx_buf += dfs * len;
 800ed1c:	3302      	adds	r3, #2
 800ed1e:	654b      	str	r3, [r1, #84]	; 0x54
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ed20:	6883      	ldr	r3, [r0, #8]
 800ed22:	f013 0f01 	tst.w	r3, #1
 800ed26:	d0fb      	beq.n	800ed20 <spi_stm32_shift_m+0xb6>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ed28:	680b      	ldr	r3, [r1, #0]
 800ed2a:	889b      	ldrh	r3, [r3, #4]
 800ed2c:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ed30:	2b08      	cmp	r3, #8
 800ed32:	d035      	beq.n	800eda0 <spi_stm32_shift_m+0x136>
  return (uint16_t)(READ_REG(SPIx->DR));
 800ed34:	68c3      	ldr	r3, [r0, #12]
 800ed36:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800ed38:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800ed3a:	2a00      	cmp	r2, #0
 800ed3c:	d065      	beq.n	800ee0a <spi_stm32_shift_m+0x1a0>
 800ed3e:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d164      	bne.n	800ee0e <spi_stm32_shift_m+0x1a4>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800ed44:	b100      	cbz	r0, 800ed48 <spi_stm32_shift_m+0xde>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800ed46:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800ed48:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800ed4a:	b13b      	cbz	r3, 800ed5c <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d05e      	beq.n	800ee12 <spi_stm32_shift_m+0x1a8>
	} else if (ctx->rx_buf) {
 800ed54:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ed56:	b10b      	cbz	r3, 800ed5c <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800ed58:	3302      	adds	r3, #2
 800ed5a:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800ed5c:	bc30      	pop	{r4, r5}
 800ed5e:	4770      	bx	lr
		++ctx->current_tx;
 800ed60:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed62:	3308      	adds	r3, #8
 800ed64:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800ed66:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800ed6c:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800ed70:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800ed74:	e005      	b.n	800ed82 <spi_stm32_shift_m+0x118>
		++(*current);
 800ed76:	3308      	adds	r3, #8
 800ed78:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800ed7c:	6813      	ldr	r3, [r2, #0]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ed82:	6813      	ldr	r3, [r2, #0]
 800ed84:	b14b      	cbz	r3, 800ed9a <spi_stm32_shift_m+0x130>
		if (((*current)->len / dfs) != 0) {
 800ed86:	f8dc 3000 	ldr.w	r3, [ip]
 800ed8a:	685c      	ldr	r4, [r3, #4]
 800ed8c:	2c01      	cmp	r4, #1
 800ed8e:	d9f2      	bls.n	800ed76 <spi_stm32_shift_m+0x10c>
			*buf_len = (*current)->len / dfs;
 800ed90:	0864      	lsrs	r4, r4, #1
 800ed92:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ed94:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	e000      	b.n	800ed9c <spi_stm32_shift_m+0x132>
	*buf_len = 0;
 800ed9a:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ed9c:	654b      	str	r3, [r1, #84]	; 0x54
 800ed9e:	e7bf      	b.n	800ed20 <spi_stm32_shift_m+0xb6>
  return (uint8_t)(READ_REG(SPIx->DR));
 800eda0:	68c3      	ldr	r3, [r0, #12]
 800eda2:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800eda4:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 800eda6:	b17a      	cbz	r2, 800edc8 <spi_stm32_shift_m+0x15e>
 800eda8:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800edaa:	b978      	cbnz	r0, 800edcc <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800edac:	b100      	cbz	r0, 800edb0 <spi_stm32_shift_m+0x146>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800edae:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800edb0:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0d2      	beq.n	800ed5c <spi_stm32_shift_m+0xf2>
	ctx->rx_len -= len;
 800edb6:	3b01      	subs	r3, #1
 800edb8:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800edba:	b14b      	cbz	r3, 800edd0 <spi_stm32_shift_m+0x166>
	} else if (ctx->rx_buf) {
 800edbc:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d0cc      	beq.n	800ed5c <spi_stm32_shift_m+0xf2>
		ctx->rx_buf += dfs * len;
 800edc2:	3301      	adds	r3, #1
 800edc4:	65cb      	str	r3, [r1, #92]	; 0x5c
 800edc6:	e7c9      	b.n	800ed5c <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800edc8:	2000      	movs	r0, #0
 800edca:	e7ef      	b.n	800edac <spi_stm32_shift_m+0x142>
 800edcc:	2001      	movs	r0, #1
 800edce:	e7ed      	b.n	800edac <spi_stm32_shift_m+0x142>
		++ctx->current_rx;
 800edd0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800edd2:	3308      	adds	r3, #8
 800edd4:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800edd6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800edd8:	3b01      	subs	r3, #1
 800edda:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800eddc:	f101 004c 	add.w	r0, r1, #76	; 0x4c
 800ede0:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800ede4:	e004      	b.n	800edf0 <spi_stm32_shift_m+0x186>
		++(*current);
 800ede6:	3308      	adds	r3, #8
 800ede8:	6003      	str	r3, [r0, #0]
		--(*count);
 800edea:	6813      	ldr	r3, [r2, #0]
 800edec:	3b01      	subs	r3, #1
 800edee:	6013      	str	r3, [r2, #0]
	while (*count) {
 800edf0:	6813      	ldr	r3, [r2, #0]
 800edf2:	b13b      	cbz	r3, 800ee04 <spi_stm32_shift_m+0x19a>
		if (((*current)->len / dfs) != 0) {
 800edf4:	6803      	ldr	r3, [r0, #0]
 800edf6:	685c      	ldr	r4, [r3, #4]
 800edf8:	2c00      	cmp	r4, #0
 800edfa:	d0f4      	beq.n	800ede6 <spi_stm32_shift_m+0x17c>
			*buf_len = (*current)->len / dfs;
 800edfc:	660c      	str	r4, [r1, #96]	; 0x60
			return (*current)->buf;
 800edfe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	e000      	b.n	800ee06 <spi_stm32_shift_m+0x19c>
	*buf_len = 0;
 800ee04:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800ee06:	65cb      	str	r3, [r1, #92]	; 0x5c
 800ee08:	e7a8      	b.n	800ed5c <spi_stm32_shift_m+0xf2>
	return !!(ctx->rx_buf && ctx->rx_len);
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e79a      	b.n	800ed44 <spi_stm32_shift_m+0xda>
 800ee0e:	2001      	movs	r0, #1
 800ee10:	e798      	b.n	800ed44 <spi_stm32_shift_m+0xda>
		++ctx->current_rx;
 800ee12:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee14:	3308      	adds	r3, #8
 800ee16:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800ee18:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800ee1e:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800ee22:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800ee26:	e004      	b.n	800ee32 <spi_stm32_shift_m+0x1c8>
		++(*current);
 800ee28:	3308      	adds	r3, #8
 800ee2a:	6023      	str	r3, [r4, #0]
		--(*count);
 800ee2c:	6813      	ldr	r3, [r2, #0]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	6013      	str	r3, [r2, #0]
	while (*count) {
 800ee32:	6813      	ldr	r3, [r2, #0]
 800ee34:	b143      	cbz	r3, 800ee48 <spi_stm32_shift_m+0x1de>
		if (((*current)->len / dfs) != 0) {
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	6858      	ldr	r0, [r3, #4]
 800ee3a:	2801      	cmp	r0, #1
 800ee3c:	d9f4      	bls.n	800ee28 <spi_stm32_shift_m+0x1be>
			*buf_len = (*current)->len / dfs;
 800ee3e:	0840      	lsrs	r0, r0, #1
 800ee40:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800ee42:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	e000      	b.n	800ee4a <spi_stm32_shift_m+0x1e0>
	*buf_len = 0;
 800ee48:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800ee4a:	65cb      	str	r3, [r1, #92]	; 0x5c
 800ee4c:	e786      	b.n	800ed5c <spi_stm32_shift_m+0xf2>

0800ee4e <spi_stm32_shift_s>:
{
 800ee4e:	b410      	push	{r4}
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800ee50:	6883      	ldr	r3, [r0, #8]
 800ee52:	f013 0f02 	tst.w	r3, #2
 800ee56:	d065      	beq.n	800ef24 <spi_stm32_shift_s+0xd6>
	return !!(ctx->tx_len);
 800ee58:	6d8b      	ldr	r3, [r1, #88]	; 0x58
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d062      	beq.n	800ef24 <spi_stm32_shift_s+0xd6>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ee5e:	680b      	ldr	r3, [r1, #0]
 800ee60:	889b      	ldrh	r3, [r3, #4]
 800ee62:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800ee66:	2b08      	cmp	r3, #8
 800ee68:	d00f      	beq.n	800ee8a <spi_stm32_shift_s+0x3c>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800ee6a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ee6c:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800ee6e:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ee70:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d05a      	beq.n	800ef2c <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800ee76:	3b01      	subs	r3, #1
 800ee78:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d032      	beq.n	800eee4 <spi_stm32_shift_s+0x96>
	} else if (ctx->tx_buf) {
 800ee7e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d053      	beq.n	800ef2c <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800ee84:	3302      	adds	r3, #2
 800ee86:	654b      	str	r3, [r1, #84]	; 0x54
 800ee88:	e050      	b.n	800ef2c <spi_stm32_shift_s+0xde>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800ee8a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ee8c:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800ee8e:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800ee90:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d04a      	beq.n	800ef2c <spi_stm32_shift_s+0xde>
	ctx->tx_len -= len;
 800ee96:	3b01      	subs	r3, #1
 800ee98:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
 800ee9a:	b12b      	cbz	r3, 800eea8 <spi_stm32_shift_s+0x5a>
	} else if (ctx->tx_buf) {
 800ee9c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d044      	beq.n	800ef2c <spi_stm32_shift_s+0xde>
		ctx->tx_buf += dfs * len;
 800eea2:	3301      	adds	r3, #1
 800eea4:	654b      	str	r3, [r1, #84]	; 0x54
 800eea6:	e041      	b.n	800ef2c <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800eea8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800eeaa:	3308      	adds	r3, #8
 800eeac:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800eeae:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800eeb4:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800eeb8:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800eebc:	6813      	ldr	r3, [r2, #0]
 800eebe:	b173      	cbz	r3, 800eede <spi_stm32_shift_s+0x90>
		if (((*current)->len / dfs) != 0) {
 800eec0:	f8dc 3000 	ldr.w	r3, [ip]
 800eec4:	685c      	ldr	r4, [r3, #4]
 800eec6:	b934      	cbnz	r4, 800eed6 <spi_stm32_shift_s+0x88>
		++(*current);
 800eec8:	3308      	adds	r3, #8
 800eeca:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800eece:	6813      	ldr	r3, [r2, #0]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	6013      	str	r3, [r2, #0]
 800eed4:	e7f2      	b.n	800eebc <spi_stm32_shift_s+0x6e>
			*buf_len = (*current)->len / dfs;
 800eed6:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800eed8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	e000      	b.n	800eee0 <spi_stm32_shift_s+0x92>
	*buf_len = 0;
 800eede:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800eee0:	654b      	str	r3, [r1, #84]	; 0x54
 800eee2:	e023      	b.n	800ef2c <spi_stm32_shift_s+0xde>
		++ctx->current_tx;
 800eee4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800eee6:	3308      	adds	r3, #8
 800eee8:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
 800eeea:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800eeec:	3b01      	subs	r3, #1
 800eeee:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
 800eef0:	f101 0c44 	add.w	ip, r1, #68	; 0x44
 800eef4:	f101 0248 	add.w	r2, r1, #72	; 0x48
	while (*count) {
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	b183      	cbz	r3, 800ef1e <spi_stm32_shift_s+0xd0>
		if (((*current)->len / dfs) != 0) {
 800eefc:	f8dc 3000 	ldr.w	r3, [ip]
 800ef00:	685c      	ldr	r4, [r3, #4]
 800ef02:	2c01      	cmp	r4, #1
 800ef04:	d806      	bhi.n	800ef14 <spi_stm32_shift_s+0xc6>
		++(*current);
 800ef06:	3308      	adds	r3, #8
 800ef08:	f8cc 3000 	str.w	r3, [ip]
		--(*count);
 800ef0c:	6813      	ldr	r3, [r2, #0]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	6013      	str	r3, [r2, #0]
 800ef12:	e7f1      	b.n	800eef8 <spi_stm32_shift_s+0xaa>
			*buf_len = (*current)->len / dfs;
 800ef14:	0864      	lsrs	r4, r4, #1
 800ef16:	658c      	str	r4, [r1, #88]	; 0x58
			return (*current)->buf;
 800ef18:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	e000      	b.n	800ef20 <spi_stm32_shift_s+0xd2>
	*buf_len = 0;
 800ef1e:	658b      	str	r3, [r1, #88]	; 0x58
		ctx->tx_buf = (const uint8_t *)
 800ef20:	654b      	str	r3, [r1, #84]	; 0x54
 800ef22:	e003      	b.n	800ef2c <spi_stm32_shift_s+0xde>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800ef24:	6843      	ldr	r3, [r0, #4]
 800ef26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef2a:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800ef2c:	6883      	ldr	r3, [r0, #8]
 800ef2e:	f013 0f01 	tst.w	r3, #1
 800ef32:	d016      	beq.n	800ef62 <spi_stm32_shift_s+0x114>
	return !!(ctx->rx_buf && ctx->rx_len);
 800ef34:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ef36:	b1b3      	cbz	r3, 800ef66 <spi_stm32_shift_s+0x118>
 800ef38:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800ef3a:	b9b2      	cbnz	r2, 800ef6a <spi_stm32_shift_s+0x11c>
	if (ll_func_rx_is_not_empty(spi) &&
 800ef3c:	b18a      	cbz	r2, 800ef62 <spi_stm32_shift_s+0x114>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800ef3e:	680a      	ldr	r2, [r1, #0]
 800ef40:	8892      	ldrh	r2, [r2, #4]
 800ef42:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800ef46:	2a08      	cmp	r2, #8
 800ef48:	d011      	beq.n	800ef6e <spi_stm32_shift_s+0x120>
  return (uint16_t)(READ_REG(SPIx->DR));
 800ef4a:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800ef4c:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800ef4e:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800ef50:	b13b      	cbz	r3, 800ef62 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800ef52:	3b01      	subs	r3, #1
 800ef54:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d033      	beq.n	800efc2 <spi_stm32_shift_s+0x174>
	} else if (ctx->rx_buf) {
 800ef5a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ef5c:	b10b      	cbz	r3, 800ef62 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800ef5e:	3302      	adds	r3, #2
 800ef60:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800ef62:	bc10      	pop	{r4}
 800ef64:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800ef66:	2200      	movs	r2, #0
 800ef68:	e7e8      	b.n	800ef3c <spi_stm32_shift_s+0xee>
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	e7e6      	b.n	800ef3c <spi_stm32_shift_s+0xee>
  return (uint8_t)(READ_REG(SPIx->DR));
 800ef6e:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800ef70:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800ef72:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d0f4      	beq.n	800ef62 <spi_stm32_shift_s+0x114>
	ctx->rx_len -= len;
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	660b      	str	r3, [r1, #96]	; 0x60
	if (!ctx->rx_len) {
 800ef7c:	b12b      	cbz	r3, 800ef8a <spi_stm32_shift_s+0x13c>
	} else if (ctx->rx_buf) {
 800ef7e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d0ee      	beq.n	800ef62 <spi_stm32_shift_s+0x114>
		ctx->rx_buf += dfs * len;
 800ef84:	3301      	adds	r3, #1
 800ef86:	65cb      	str	r3, [r1, #92]	; 0x5c
 800ef88:	e7eb      	b.n	800ef62 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800ef8a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800ef90:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800ef92:	3b01      	subs	r3, #1
 800ef94:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800ef96:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800ef9a:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800ef9e:	6813      	ldr	r3, [r2, #0]
 800efa0:	b163      	cbz	r3, 800efbc <spi_stm32_shift_s+0x16e>
		if (((*current)->len / dfs) != 0) {
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	6858      	ldr	r0, [r3, #4]
 800efa6:	b928      	cbnz	r0, 800efb4 <spi_stm32_shift_s+0x166>
		++(*current);
 800efa8:	3308      	adds	r3, #8
 800efaa:	6023      	str	r3, [r4, #0]
		--(*count);
 800efac:	6813      	ldr	r3, [r2, #0]
 800efae:	3b01      	subs	r3, #1
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	e7f4      	b.n	800ef9e <spi_stm32_shift_s+0x150>
			*buf_len = (*current)->len / dfs;
 800efb4:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800efb6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	e000      	b.n	800efbe <spi_stm32_shift_s+0x170>
	*buf_len = 0;
 800efbc:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800efbe:	65cb      	str	r3, [r1, #92]	; 0x5c
 800efc0:	e7cf      	b.n	800ef62 <spi_stm32_shift_s+0x114>
		++ctx->current_rx;
 800efc2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800efc4:	3308      	adds	r3, #8
 800efc6:	64cb      	str	r3, [r1, #76]	; 0x4c
		--ctx->rx_count;
 800efc8:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800efca:	3b01      	subs	r3, #1
 800efcc:	650b      	str	r3, [r1, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
 800efce:	f101 044c 	add.w	r4, r1, #76	; 0x4c
 800efd2:	f101 0250 	add.w	r2, r1, #80	; 0x50
	while (*count) {
 800efd6:	6813      	ldr	r3, [r2, #0]
 800efd8:	b173      	cbz	r3, 800eff8 <spi_stm32_shift_s+0x1aa>
		if (((*current)->len / dfs) != 0) {
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	6858      	ldr	r0, [r3, #4]
 800efde:	2801      	cmp	r0, #1
 800efe0:	d805      	bhi.n	800efee <spi_stm32_shift_s+0x1a0>
		++(*current);
 800efe2:	3308      	adds	r3, #8
 800efe4:	6023      	str	r3, [r4, #0]
		--(*count);
 800efe6:	6813      	ldr	r3, [r2, #0]
 800efe8:	3b01      	subs	r3, #1
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e7f3      	b.n	800efd6 <spi_stm32_shift_s+0x188>
			*buf_len = (*current)->len / dfs;
 800efee:	0840      	lsrs	r0, r0, #1
 800eff0:	6608      	str	r0, [r1, #96]	; 0x60
			return (*current)->buf;
 800eff2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	e000      	b.n	800effa <spi_stm32_shift_s+0x1ac>
	*buf_len = 0;
 800eff8:	660b      	str	r3, [r1, #96]	; 0x60
		ctx->rx_buf = (uint8_t *)
 800effa:	65cb      	str	r3, [r1, #92]	; 0x5c
 800effc:	e7b1      	b.n	800ef62 <spi_stm32_shift_s+0x114>

0800effe <spi_stm32_shift_frames>:
{
 800effe:	b510      	push	{r4, lr}
 800f000:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800f002:	680b      	ldr	r3, [r1, #0]
 800f004:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800f006:	f013 0f01 	tst.w	r3, #1
 800f00a:	d105      	bne.n	800f018 <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800f00c:	f7ff fe2d 	bl	800ec6a <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800f010:	4620      	mov	r0, r4
 800f012:	f7f7 fceb 	bl	80069ec <spi_stm32_get_err>
}
 800f016:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800f018:	f7ff ff19 	bl	800ee4e <spi_stm32_shift_s>
 800f01c:	e7f8      	b.n	800f010 <spi_stm32_shift_frames+0x12>

0800f01e <spi_stm32_isr>:
{
 800f01e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f020:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800f022:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800f024:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800f026:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800f028:	4638      	mov	r0, r7
 800f02a:	f7f7 fcdf 	bl	80069ec <spi_stm32_get_err>
	if (err) {
 800f02e:	4605      	mov	r5, r0
 800f030:	b968      	cbnz	r0, 800f04e <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800f032:	4630      	mov	r0, r6
 800f034:	f7ff fd36 	bl	800eaa4 <spi_stm32_transfer_ongoing>
 800f038:	b970      	cbnz	r0, 800f058 <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800f03a:	b91d      	cbnz	r5, 800f044 <spi_stm32_isr+0x26>
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7ff fd31 	bl	800eaa4 <spi_stm32_transfer_ongoing>
 800f042:	b918      	cbnz	r0, 800f04c <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800f044:	4629      	mov	r1, r5
 800f046:	4620      	mov	r0, r4
 800f048:	f7ff fdca 	bl	800ebe0 <spi_stm32_complete>
}
 800f04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800f04e:	4601      	mov	r1, r0
 800f050:	4620      	mov	r0, r4
 800f052:	f7ff fdc5 	bl	800ebe0 <spi_stm32_complete>
		return;
 800f056:	e7f9      	b.n	800f04c <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800f058:	4631      	mov	r1, r6
 800f05a:	4638      	mov	r0, r7
 800f05c:	f7ff ffcf 	bl	800effe <spi_stm32_shift_frames>
 800f060:	4605      	mov	r5, r0
 800f062:	e7ea      	b.n	800f03a <spi_stm32_isr+0x1c>

0800f064 <timer_work_handler>:
{
 800f064:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800f066:	f7f9 f88f 	bl	8008188 <TimerIrqHandler>
}
 800f06a:	bd08      	pop	{r3, pc}

0800f06c <RtcGetTimerValue>:
{
 800f06c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800f06e:	f000 feb8 	bl	800fde2 <z_impl_k_uptime_ticks>
 800f072:	220a      	movs	r2, #10
 800f074:	2300      	movs	r3, #0
 800f076:	f7f1 fcb1 	bl	80009dc <__aeabi_uldivmod>
}
 800f07a:	bd08      	pop	{r3, pc}

0800f07c <RtcGetMinimumTimeout>:
}
 800f07c:	2001      	movs	r0, #1
 800f07e:	4770      	bx	lr

0800f080 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800f080:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800f082:	0f81      	lsrs	r1, r0, #30
 800f084:	0083      	lsls	r3, r0, #2
 800f086:	1818      	adds	r0, r3, r0
 800f088:	f141 0100 	adc.w	r1, r1, #0
 800f08c:	1800      	adds	r0, r0, r0
 800f08e:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800f090:	f7fc fc72 	bl	800b978 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800f094:	bd08      	pop	{r3, pc}

0800f096 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800f096:	4770      	bx	lr

0800f098 <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800f098:	4770      	bx	lr

0800f09a <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800f09a:	f04f 0210 	mov.w	r2, #16
 800f09e:	f3ef 8311 	mrs	r3, BASEPRI
 800f0a2:	f382 8812 	msr	BASEPRI_MAX, r2
 800f0a6:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800f0aa:	6003      	str	r3, [r0, #0]
}
 800f0ac:	4770      	bx	lr

0800f0ae <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800f0ae:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800f0b0:	f383 8811 	msr	BASEPRI, r3
 800f0b4:	f3bf 8f6f 	isb	sy
}
 800f0b8:	4770      	bx	lr

0800f0ba <z_log_msg2_runtime_create>:
{
 800f0ba:	b510      	push	{r4, lr}
 800f0bc:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f0be:	ac0a      	add	r4, sp, #40	; 0x28
 800f0c0:	9405      	str	r4, [sp, #20]
 800f0c2:	9402      	str	r4, [sp, #8]
 800f0c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f0c6:	9401      	str	r4, [sp, #4]
 800f0c8:	9c08      	ldr	r4, [sp, #32]
 800f0ca:	9400      	str	r4, [sp, #0]
 800f0cc:	f7ff f9c4 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f0d0:	b006      	add	sp, #24
 800f0d2:	bd10      	pop	{r4, pc}

0800f0d4 <clamp_int8>:
	if (x < min) {
 800f0d4:	4288      	cmp	r0, r1
 800f0d6:	db03      	blt.n	800f0e0 <clamp_int8+0xc>
	} else if (x > max) {
 800f0d8:	4290      	cmp	r0, r2
 800f0da:	dd02      	ble.n	800f0e2 <clamp_int8+0xe>
		return max;
 800f0dc:	4610      	mov	r0, r2
 800f0de:	4770      	bx	lr
		return min;
 800f0e0:	4608      	mov	r0, r1
}
 800f0e2:	4770      	bx	lr

0800f0e4 <SX1276CheckRfFrequency>:
}
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	4770      	bx	lr

0800f0e8 <sx127x_antenna_configure>:
}
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4770      	bx	lr

0800f0ec <z_log_msg2_runtime_create>:
{
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f0f0:	ac0a      	add	r4, sp, #40	; 0x28
 800f0f2:	9405      	str	r4, [sp, #20]
 800f0f4:	9402      	str	r4, [sp, #8]
 800f0f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f0f8:	9401      	str	r4, [sp, #4]
 800f0fa:	9c08      	ldr	r4, [sp, #32]
 800f0fc:	9400      	str	r4, [sp, #0]
 800f0fe:	f7ff f9ab 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f102:	b006      	add	sp, #24
 800f104:	bd10      	pop	{r4, pc}

0800f106 <SX1276GetBoardTcxoWakeupTime>:
}
 800f106:	2000      	movs	r0, #0
 800f108:	4770      	bx	lr

0800f10a <SX1276SetAntSwLowPower>:
}
 800f10a:	4770      	bx	lr

0800f10c <SX1276SetBoardTcxo>:
}
 800f10c:	4770      	bx	lr

0800f10e <SX1276SetAntSw>:
}
 800f10e:	4770      	bx	lr

0800f110 <sx127x_read>:
{
 800f110:	b508      	push	{r3, lr}
 800f112:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800f114:	460a      	mov	r2, r1
 800f116:	2100      	movs	r1, #0
 800f118:	f7f8 fc24 	bl	8007964 <sx127x_transceive>
}
 800f11c:	bd08      	pop	{r3, pc}

0800f11e <sx127x_write>:
{
 800f11e:	b508      	push	{r3, lr}
 800f120:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800f122:	460a      	mov	r2, r1
 800f124:	2101      	movs	r1, #1
 800f126:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800f12a:	f7f8 fc1b 	bl	8007964 <sx127x_transceive>
}
 800f12e:	bd08      	pop	{r3, pc}

0800f130 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800f130:	e004      	b.n	800f13c <memcpy1+0xc>
    {
        *dst++ = *src++;
 800f132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f136:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800f13a:	461a      	mov	r2, r3
 800f13c:	1e53      	subs	r3, r2, #1
 800f13e:	b29b      	uxth	r3, r3
 800f140:	2a00      	cmp	r2, #0
 800f142:	d1f6      	bne.n	800f132 <memcpy1+0x2>
    }
}
 800f144:	4770      	bx	lr

0800f146 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800f146:	b570      	push	{r4, r5, r6, lr}
 800f148:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800f14a:	f7ff ff97 	bl	800f07c <RtcGetMinimumTimeout>
 800f14e:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800f150:	2301      	movs	r3, #1
 800f152:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800f154:	6826      	ldr	r6, [r4, #0]
 800f156:	f7f7 ffb7 	bl	80070c8 <RtcGetTimerElapsedTime>
 800f15a:	4428      	add	r0, r5
 800f15c:	4286      	cmp	r6, r0
 800f15e:	d303      	bcc.n	800f168 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	f7f7 ffc7 	bl	80070f4 <RtcSetAlarm>
}
 800f166:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800f168:	f7f7 ffae 	bl	80070c8 <RtcGetTimerElapsedTime>
 800f16c:	4405      	add	r5, r0
 800f16e:	6025      	str	r5, [r4, #0]
 800f170:	e7f6      	b.n	800f160 <TimerSetTimeout+0x1a>

0800f172 <TimerInit>:
    obj->Timestamp = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800f176:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800f178:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800f17a:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800f17c:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800f17e:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800f180:	6143      	str	r3, [r0, #20]
}
 800f182:	4770      	bx	lr

0800f184 <TimerSetValue>:
{
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800f188:	4608      	mov	r0, r1
 800f18a:	f7ff ff84 	bl	800f096 <RtcMs2Tick>
 800f18e:	4605      	mov	r5, r0
    TimerStop( obj );
 800f190:	4620      	mov	r0, r4
 800f192:	f7f9 f83d 	bl	8008210 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800f196:	f7ff ff71 	bl	800f07c <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800f19a:	4285      	cmp	r5, r0
 800f19c:	d300      	bcc.n	800f1a0 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800f19e:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800f1a0:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800f1a2:	6060      	str	r0, [r4, #4]
}
 800f1a4:	bd38      	pop	{r3, r4, r5, pc}

0800f1a6 <TimerGetCurrentTime>:
{
 800f1a6:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800f1a8:	f7ff ff60 	bl	800f06c <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800f1ac:	f7ff ff74 	bl	800f098 <RtcTick2Ms>
}
 800f1b0:	bd08      	pop	{r3, pc}

0800f1b2 <TimerGetElapsedTime>:
{
 800f1b2:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	b908      	cbnz	r0, 800f1bc <TimerGetElapsedTime+0xa>
}
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800f1bc:	f7ff ff56 	bl	800f06c <RtcGetTimerValue>
 800f1c0:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7ff ff67 	bl	800f096 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800f1c8:	1a28      	subs	r0, r5, r0
 800f1ca:	f7ff ff65 	bl	800f098 <RtcTick2Ms>
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	e7f2      	b.n	800f1b8 <TimerGetElapsedTime+0x6>

0800f1d2 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800f1d2:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800f1d4:	f7ff ff54 	bl	800f080 <DelayMsMcu>
}
 800f1d8:	bd08      	pop	{r3, pc}

0800f1da <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800f1da:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800f1dc:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800f1e0:	b2c3      	uxtb	r3, r0
 800f1e2:	fb02 f303 	mul.w	r3, r2, r3
 800f1e6:	3380      	adds	r3, #128	; 0x80
 800f1e8:	0a1b      	lsrs	r3, r3, #8
}
 800f1ea:	fb02 3001 	mla	r0, r2, r1, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800f1f0:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f1f2:	b941      	cbnz	r1, 800f206 <SX1276GetGfskTimeOnAirNumerator+0x16>
 800f1f4:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800f1f6:	4408      	add	r0, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f1f8:	3018      	adds	r0, #24
               ( ( crcOn == true ) ? 2 : 0 ) 
 800f1fa:	b133      	cbz	r3, 800f20a <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800f1fc:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800f1fe:	441a      	add	r2, r3
}
 800f200:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 800f204:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800f206:	2100      	movs	r1, #0
 800f208:	e7f5      	b.n	800f1f6 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800f20a:	2300      	movs	r3, #0
 800f20c:	e7f7      	b.n	800f1fe <SX1276GetGfskTimeOnAirNumerator+0xe>

0800f20e <SX1276GetLoRaTimeOnAirNumerator>:
{
 800f20e:	b570      	push	{r4, r5, r6, lr}
 800f210:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800f214:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800f218:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f21a:	f1a1 0c05 	sub.w	ip, r1, #5
 800f21e:	f1bc 0f01 	cmp.w	ip, #1
 800f222:	d932      	bls.n	800f28a <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f224:	b918      	cbnz	r0, 800f22e <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800f226:	f1a1 060b 	sub.w	r6, r1, #11
 800f22a:	2e01      	cmp	r6, #1
 800f22c:	d935      	bls.n	800f29a <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800f22e:	2801      	cmp	r0, #1
 800f230:	d02f      	beq.n	800f292 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800f232:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f234:	f89d e014 	ldrb.w	lr, [sp, #20]
 800f238:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800f23c:	b38d      	cbz	r5, 800f2a2 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800f23e:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f242:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800f244:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800f246:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800f24a:	b36c      	cbz	r4, 800f2a8 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800f24c:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800f250:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800f252:	2906      	cmp	r1, #6
 800f254:	d904      	bls.n	800f260 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800f256:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800f25a:	b10e      	cbz	r6, 800f260 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800f25c:	1e88      	subs	r0, r1, #2
 800f25e:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800f260:	f1bc 0f00 	cmp.w	ip, #0
 800f264:	db23      	blt.n	800f2ae <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f266:	4484      	add	ip, r0
 800f268:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f26c:	fb9c fcf0 	sdiv	ip, ip, r0
 800f270:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800f274:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800f278:	2906      	cmp	r1, #6
 800f27a:	d801      	bhi.n	800f280 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800f27c:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f280:	0080      	lsls	r0, r0, #2
 800f282:	3001      	adds	r0, #1
 800f284:	3902      	subs	r1, #2
}
 800f286:	4088      	lsls	r0, r1
 800f288:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800f28a:	2b0b      	cmp	r3, #11
 800f28c:	d8ca      	bhi.n	800f224 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800f28e:	230c      	movs	r3, #12
 800f290:	e7c8      	b.n	800f224 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f292:	290c      	cmp	r1, #12
 800f294:	d003      	beq.n	800f29e <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800f296:	2600      	movs	r6, #0
 800f298:	e7cc      	b.n	800f234 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800f29a:	2601      	movs	r6, #1
 800f29c:	e7ca      	b.n	800f234 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800f29e:	2601      	movs	r6, #1
 800f2a0:	e7c8      	b.n	800f234 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800f2a2:	f04f 0c00 	mov.w	ip, #0
 800f2a6:	e7cc      	b.n	800f242 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800f2a8:	f04f 0c14 	mov.w	ip, #20
 800f2ac:	e7d0      	b.n	800f250 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800f2ae:	f04f 0c00 	mov.w	ip, #0
 800f2b2:	e7d8      	b.n	800f266 <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800f2b4 <SX1276ReadFifo>:
{
 800f2b4:	b508      	push	{r3, lr}
 800f2b6:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800f2b8:	4601      	mov	r1, r0
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	f7f8 fca2 	bl	8007c04 <SX1276ReadBuffer>
}
 800f2c0:	bd08      	pop	{r3, pc}

0800f2c2 <SX1276WriteFifo>:
{
 800f2c2:	b508      	push	{r3, lr}
 800f2c4:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	f7f8 fdeb 	bl	8007ea4 <SX1276WriteBuffer>
}
 800f2ce:	bd08      	pop	{r3, pc}

0800f2d0 <SX1276GetTimeOnAir>:
{
 800f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	460e      	mov	r6, r1
 800f2d6:	4615      	mov	r5, r2
 800f2d8:	461a      	mov	r2, r3
 800f2da:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800f2de:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800f2e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800f2e6:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800f2ea:	b148      	cbz	r0, 800f300 <SX1276GetTimeOnAir+0x30>
 800f2ec:	2801      	cmp	r0, #1
 800f2ee:	d010      	beq.n	800f312 <SX1276GetTimeOnAir+0x42>
 800f2f0:	2501      	movs	r5, #1
 800f2f2:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800f2f4:	1960      	adds	r0, r4, r5
 800f2f6:	3801      	subs	r0, #1
}
 800f2f8:	fbb0 f0f5 	udiv	r0, r0, r5
 800f2fc:	b005      	add	sp, #20
 800f2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800f300:	463a      	mov	r2, r7
 800f302:	4660      	mov	r0, ip
 800f304:	f7ff ff74 	bl	800f1f0 <SX1276GetGfskTimeOnAirNumerator>
 800f308:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f30c:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800f310:	e7f0      	b.n	800f2f4 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800f312:	9302      	str	r3, [sp, #8]
 800f314:	9701      	str	r7, [sp, #4]
 800f316:	9100      	str	r1, [sp, #0]
 800f318:	4663      	mov	r3, ip
 800f31a:	4629      	mov	r1, r5
 800f31c:	4630      	mov	r0, r6
 800f31e:	f7ff ff76 	bl	800f20e <SX1276GetLoRaTimeOnAirNumerator>
 800f322:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800f326:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800f32a:	4630      	mov	r0, r6
 800f32c:	f7f8 ffec 	bl	8008308 <SX1276GetLoRaBandwidthInHz>
 800f330:	4605      	mov	r5, r0
        break;
 800f332:	e7df      	b.n	800f2f4 <SX1276GetTimeOnAir+0x24>

0800f334 <SX1276Write>:
{
 800f334:	b500      	push	{lr}
 800f336:	b083      	sub	sp, #12
 800f338:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800f33c:	2201      	movs	r2, #1
 800f33e:	f10d 0107 	add.w	r1, sp, #7
 800f342:	f7f8 fdaf 	bl	8007ea4 <SX1276WriteBuffer>
}
 800f346:	b003      	add	sp, #12
 800f348:	f85d fb04 	ldr.w	pc, [sp], #4

0800f34c <SX1276Read>:
{
 800f34c:	b500      	push	{lr}
 800f34e:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800f350:	2201      	movs	r2, #1
 800f352:	f10d 0107 	add.w	r1, sp, #7
 800f356:	f7f8 fc55 	bl	8007c04 <SX1276ReadBuffer>
}
 800f35a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f35e:	b003      	add	sp, #12
 800f360:	f85d fb04 	ldr.w	pc, [sp], #4

0800f364 <SX1276SetOpMode>:
{
 800f364:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800f366:	4604      	mov	r4, r0
 800f368:	b970      	cbnz	r0, 800f388 <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800f36a:	2001      	movs	r0, #1
 800f36c:	f7ff fecd 	bl	800f10a <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f370:	2001      	movs	r0, #1
 800f372:	f7ff ffeb 	bl	800f34c <SX1276Read>
 800f376:	b241      	sxtb	r1, r0
 800f378:	f021 0107 	bic.w	r1, r1, #7
 800f37c:	4321      	orrs	r1, r4
 800f37e:	b2c9      	uxtb	r1, r1
 800f380:	2001      	movs	r0, #1
 800f382:	f7ff ffd7 	bl	800f334 <SX1276Write>
}
 800f386:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800f388:	2001      	movs	r0, #1
 800f38a:	f7ff febf 	bl	800f10c <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800f38e:	2000      	movs	r0, #0
 800f390:	f7ff febb 	bl	800f10a <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800f394:	4620      	mov	r0, r4
 800f396:	f7ff feba 	bl	800f10e <SX1276SetAntSw>
 800f39a:	e7e9      	b.n	800f370 <SX1276SetOpMode+0xc>

0800f39c <SX1276IsChannelFree>:
{
 800f39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39e:	4607      	mov	r7, r0
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	4616      	mov	r6, r2
 800f3a4:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800f3a6:	f7f9 fafd 	bl	80089a4 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	f7f9 fd90 	bl	8008ed0 <SX1276SetModem>
    SX1276SetChannel( freq );
 800f3b0:	4638      	mov	r0, r7
 800f3b2:	f7f8 ffd3 	bl	800835c <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f7f8 ff7e 	bl	80082b8 <GetFskBandwidthRegValue>
 800f3bc:	4604      	mov	r4, r0
 800f3be:	4601      	mov	r1, r0
 800f3c0:	2012      	movs	r0, #18
 800f3c2:	f7ff ffb7 	bl	800f334 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	2013      	movs	r0, #19
 800f3ca:	f7ff ffb3 	bl	800f334 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f3ce:	2005      	movs	r0, #5
 800f3d0:	f7ff ffc8 	bl	800f364 <SX1276SetOpMode>
    DelayMs( 1 );
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	f7ff fefc 	bl	800f1d2 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800f3da:	f7ff fee4 	bl	800f1a6 <TimerGetCurrentTime>
 800f3de:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fee6 	bl	800f1b2 <TimerGetElapsedTime>
 800f3e6:	42a8      	cmp	r0, r5
 800f3e8:	d206      	bcs.n	800f3f8 <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	f7f9 fd48 	bl	8008e80 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800f3f0:	42b0      	cmp	r0, r6
 800f3f2:	ddf5      	ble.n	800f3e0 <SX1276IsChannelFree+0x44>
            status = false;
 800f3f4:	2400      	movs	r4, #0
 800f3f6:	e000      	b.n	800f3fa <SX1276IsChannelFree+0x5e>
    bool status = true;
 800f3f8:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800f3fa:	f7f9 fad3 	bl	80089a4 <SX1276SetSleep>
}
 800f3fe:	4620      	mov	r0, r4
 800f400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f402 <SX1276Random>:
{
 800f402:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800f404:	2001      	movs	r0, #1
 800f406:	f7f9 fd63 	bl	8008ed0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f40a:	21ff      	movs	r1, #255	; 0xff
 800f40c:	2011      	movs	r0, #17
 800f40e:	f7ff ff91 	bl	800f334 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f412:	2005      	movs	r0, #5
 800f414:	f7ff ffa6 	bl	800f364 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800f418:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800f41a:	462c      	mov	r4, r5
 800f41c:	e00b      	b.n	800f436 <SX1276Random+0x34>
        DelayMs( 1 );
 800f41e:	2001      	movs	r0, #1
 800f420:	f7ff fed7 	bl	800f1d2 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800f424:	202c      	movs	r0, #44	; 0x2c
 800f426:	f7ff ff91 	bl	800f34c <SX1276Read>
 800f42a:	f000 0001 	and.w	r0, r0, #1
 800f42e:	40a0      	lsls	r0, r4
 800f430:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800f432:	3401      	adds	r4, #1
 800f434:	b2e4      	uxtb	r4, r4
 800f436:	2c1f      	cmp	r4, #31
 800f438:	d9f1      	bls.n	800f41e <SX1276Random+0x1c>
    SX1276SetSleep( );
 800f43a:	f7f9 fab3 	bl	80089a4 <SX1276SetSleep>
}
 800f43e:	4628      	mov	r0, r5
 800f440:	bd38      	pop	{r3, r4, r5, pc}

0800f442 <SX1276GetWakeupTime>:
{
 800f442:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800f444:	f7ff fe5f 	bl	800f106 <SX1276GetBoardTcxoWakeupTime>
}
 800f448:	3001      	adds	r0, #1
 800f44a:	bd08      	pop	{r3, pc}

0800f44c <uart_stm32_config_get>:
	struct uart_stm32_data *data = dev->data;
 800f44c:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f452:	6843      	ldr	r3, [r0, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800f45c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f460:	d02f      	beq.n	800f4c2 <uart_stm32_config_get+0x76>
 800f462:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f466:	d12e      	bne.n	800f4c6 <uart_stm32_config_get+0x7a>
 800f468:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800f46a:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f46c:	6843      	ldr	r3, [r0, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800f476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f47a:	d028      	beq.n	800f4ce <uart_stm32_config_get+0x82>
 800f47c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f480:	d027      	beq.n	800f4d2 <uart_stm32_config_get+0x86>
 800f482:	b313      	cbz	r3, 800f4ca <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800f484:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800f486:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f488:	6843      	ldr	r3, [r0, #4]
 800f48a:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800f48c:	6813      	ldr	r3, [r2, #0]
 800f48e:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800f492:	6812      	ldr	r2, [r2, #0]
 800f494:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800f498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f49c:	d01d      	beq.n	800f4da <uart_stm32_config_get+0x8e>
 800f49e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4a2:	d11d      	bne.n	800f4e0 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800f4a4:	b1ba      	cbz	r2, 800f4d6 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800f4a6:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800f4a8:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f4aa:	6843      	ldr	r3, [r0, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800f4b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4b8:	d019      	beq.n	800f4ee <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800f4ba:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800f4bc:	71cb      	strb	r3, [r1, #7]
}
 800f4be:	2000      	movs	r0, #0
 800f4c0:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	e7d1      	b.n	800f46a <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e7cf      	b.n	800f46a <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e7db      	b.n	800f486 <uart_stm32_config_get+0x3a>
	switch (sb) {
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	e7d9      	b.n	800f486 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800f4d2:	2302      	movs	r3, #2
 800f4d4:	e7d7      	b.n	800f486 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800f4d6:	2302      	movs	r3, #2
 800f4d8:	e7e6      	b.n	800f4a8 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800f4da:	b922      	cbnz	r2, 800f4e6 <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800f4dc:	2304      	movs	r3, #4
 800f4de:	e7e3      	b.n	800f4a8 <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800f4e0:	b91a      	cbnz	r2, 800f4ea <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	e7e0      	b.n	800f4a8 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800f4e6:	2303      	movs	r3, #3
 800f4e8:	e7de      	b.n	800f4a8 <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800f4ea:	2302      	movs	r3, #2
 800f4ec:	e7dc      	b.n	800f4a8 <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e7e4      	b.n	800f4bc <uart_stm32_config_get+0x70>

0800f4f2 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f4f2:	6843      	ldr	r3, [r0, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800f4f6:	69da      	ldr	r2, [r3, #28]
 800f4f8:	f012 0f08 	tst.w	r2, #8
 800f4fc:	d001      	beq.n	800f502 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800f4fe:	2208      	movs	r2, #8
 800f500:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800f502:	69da      	ldr	r2, [r3, #28]
 800f504:	f012 0f20 	tst.w	r2, #32
 800f508:	d003      	beq.n	800f512 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800f50a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800f50c:	700b      	strb	r3, [r1, #0]
	return 0;
 800f50e:	2000      	movs	r0, #0
 800f510:	4770      	bx	lr
		return -1;
 800f512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800f516:	4770      	bx	lr

0800f518 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f518:	6843      	ldr	r3, [r0, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800f51c:	69da      	ldr	r2, [r3, #28]
 800f51e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f522:	d0fb      	beq.n	800f51c <uart_stm32_poll_out+0x4>
	__asm__ volatile(
 800f524:	f04f 0010 	mov.w	r0, #16
 800f528:	f3ef 8211 	mrs	r2, BASEPRI
 800f52c:	f380 8812 	msr	BASEPRI_MAX, r0
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	69d8      	ldr	r0, [r3, #28]
 800f536:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f53a:	d104      	bne.n	800f546 <uart_stm32_poll_out+0x2e>
	__asm__ volatile(
 800f53c:	f382 8811 	msr	BASEPRI, r2
 800f540:	f3bf 8f6f 	isb	sy
}
 800f544:	e7ea      	b.n	800f51c <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800f546:	b289      	uxth	r1, r1
 800f548:	8519      	strh	r1, [r3, #40]	; 0x28
	__asm__ volatile(
 800f54a:	f382 8811 	msr	BASEPRI, r2
 800f54e:	f3bf 8f6f 	isb	sy
}
 800f552:	4770      	bx	lr

0800f554 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800f554:	6843      	ldr	r3, [r0, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800f558:	69d8      	ldr	r0, [r3, #28]
 800f55a:	f010 0008 	ands.w	r0, r0, #8
 800f55e:	d000      	beq.n	800f562 <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800f560:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800f562:	69da      	ldr	r2, [r3, #28]
 800f564:	f012 0f01 	tst.w	r2, #1
 800f568:	d001      	beq.n	800f56e <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800f56a:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800f56e:	69da      	ldr	r2, [r3, #28]
 800f570:	f012 0f02 	tst.w	r2, #2
 800f574:	d001      	beq.n	800f57a <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800f576:	f040 0004 	orr.w	r0, r0, #4
  return ((READ_BIT(USARTx->ISR, USART_ISR_LBDF) == (USART_ISR_LBDF)) ? 1UL : 0UL);
 800f57a:	69da      	ldr	r2, [r3, #28]
 800f57c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f580:	d001      	beq.n	800f586 <uart_stm32_err_check+0x32>
		err |= UART_BREAK;
 800f582:	f040 0008 	orr.w	r0, r0, #8
	if (err & UART_BREAK) {
 800f586:	f010 0f08 	tst.w	r0, #8
 800f58a:	d002      	beq.n	800f592 <uart_stm32_err_check+0x3e>
  WRITE_REG(USARTx->ICR, USART_ICR_LBDCF);
 800f58c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f590:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_OVERRUN) {
 800f592:	f010 0f01 	tst.w	r0, #1
 800f596:	d001      	beq.n	800f59c <uart_stm32_err_check+0x48>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800f598:	2208      	movs	r2, #8
 800f59a:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800f59c:	f010 0f02 	tst.w	r0, #2
 800f5a0:	d001      	beq.n	800f5a6 <uart_stm32_err_check+0x52>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800f5a6:	f010 0f04 	tst.w	r0, #4
 800f5aa:	d001      	beq.n	800f5b0 <uart_stm32_err_check+0x5c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800f5ac:	2202      	movs	r2, #2
 800f5ae:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800f5b0:	2204      	movs	r2, #4
 800f5b2:	621a      	str	r2, [r3, #32]
}
 800f5b4:	4770      	bx	lr

0800f5b6 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
 800f5b6:	b410      	push	{r4}
	*state = &config->states[0];
 800f5b8:	6803      	ldr	r3, [r0, #0]
 800f5ba:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800f5bc:	e001      	b.n	800f5c2 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
 800f5be:	3408      	adds	r4, #8
 800f5c0:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
 800f5c2:	6814      	ldr	r4, [r2, #0]
 800f5c4:	7903      	ldrb	r3, [r0, #4]
 800f5c6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	f8d0 c000 	ldr.w	ip, [r0]
 800f5d0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800f5d4:	429c      	cmp	r4, r3
 800f5d6:	d804      	bhi.n	800f5e2 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
 800f5d8:	7963      	ldrb	r3, [r4, #5]
 800f5da:	428b      	cmp	r3, r1
 800f5dc:	d1ef      	bne.n	800f5be <pinctrl_lookup_state+0x8>
			return 0;
 800f5de:	2000      	movs	r0, #0
 800f5e0:	e001      	b.n	800f5e6 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
 800f5e2:	f06f 0001 	mvn.w	r0, #1
}
 800f5e6:	bc10      	pop	{r4}
 800f5e8:	4770      	bx	lr

0800f5ea <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
 800f5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ec:	4606      	mov	r6, r0
 800f5ee:	460f      	mov	r7, r1
	if (ret < 0) {
		return ret;
	}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f5f0:	2400      	movs	r4, #0
	uint32_t func = 0;
 800f5f2:	4625      	mov	r5, r4
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f5f4:	e012      	b.n	800f61c <pinctrl_configure_pins+0x32>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800f5f6:	f002 031f 	and.w	r3, r2, #31
 800f5fa:	2b10      	cmp	r3, #16
 800f5fc:	d01b      	beq.n	800f636 <pinctrl_configure_pins+0x4c>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800f5fe:	0a53      	lsrs	r3, r2, #9
 800f600:	011b      	lsls	r3, r3, #4
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f3c2 1043 	ubfx	r0, r2, #5, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800f608:	f002 021f 	and.w	r2, r2, #31
 800f60c:	4629      	mov	r1, r5
 800f60e:	4318      	orrs	r0, r3
 800f610:	f7fa fb82 	bl	8009d18 <stm32_pin_configure>
		if (ret < 0) {
 800f614:	2800      	cmp	r0, #0
 800f616:	db11      	blt.n	800f63c <pinctrl_configure_pins+0x52>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
 800f618:	3401      	adds	r4, #1
 800f61a:	b2e4      	uxtb	r4, r4
 800f61c:	42bc      	cmp	r4, r7
 800f61e:	d20c      	bcs.n	800f63a <pinctrl_configure_pins+0x50>
		mux = pins[i].pinmux;
 800f620:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800f624:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800f628:	f012 0f10 	tst.w	r2, #16
 800f62c:	d1e3      	bne.n	800f5f6 <pinctrl_configure_pins+0xc>
			func = pins[i].pincfg | STM32_MODER_ALT_MODE;
 800f62e:	685d      	ldr	r5, [r3, #4]
 800f630:	f045 0520 	orr.w	r5, r5, #32
 800f634:	e7e3      	b.n	800f5fe <pinctrl_configure_pins+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800f636:	2530      	movs	r5, #48	; 0x30
 800f638:	e7e1      	b.n	800f5fe <pinctrl_configure_pins+0x14>
			return ret;
		}
	}

	return 0;
 800f63a:	2000      	movs	r0, #0
}
 800f63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f63e <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800f63e:	2300      	movs	r3, #0
 800f640:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 800f642:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 800f644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f648:	6082      	str	r2, [r0, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 800f64a:	60c3      	str	r3, [r0, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 800f64c:	6103      	str	r3, [r0, #16]
}
 800f64e:	4770      	bx	lr

0800f650 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800f650:	2300      	movs	r3, #0
 800f652:	6003      	str	r3, [r0, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800f654:	6043      	str	r3, [r0, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 800f656:	6083      	str	r3, [r0, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 800f658:	60c3      	str	r3, [r0, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 800f65a:	6103      	str	r3, [r0, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800f65c:	6143      	str	r3, [r0, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 800f65e:	6183      	str	r3, [r0, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800f660:	61c3      	str	r3, [r0, #28]
}
 800f662:	4770      	bx	lr

0800f664 <LL_TIM_OC_Init>:
{
 800f664:	b508      	push	{r3, lr}
 800f666:	460b      	mov	r3, r1
 800f668:	4611      	mov	r1, r2
  switch (Channel)
 800f66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f66e:	d01d      	beq.n	800f6ac <LL_TIM_OC_Init+0x48>
 800f670:	d80e      	bhi.n	800f690 <LL_TIM_OC_Init+0x2c>
 800f672:	2b10      	cmp	r3, #16
 800f674:	d017      	beq.n	800f6a6 <LL_TIM_OC_Init+0x42>
 800f676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f67a:	d102      	bne.n	800f682 <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800f67c:	f7fa fbee 	bl	8009e5c <OC3Config>
      break;
 800f680:	e005      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f682:	2b01      	cmp	r3, #1
 800f684:	d102      	bne.n	800f68c <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800f686:	f7fa fb67 	bl	8009d58 <OC1Config>
      break;
 800f68a:	e000      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f68c:	2001      	movs	r0, #1
}
 800f68e:	bd08      	pop	{r3, pc}
  switch (Channel)
 800f690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f694:	d00d      	beq.n	800f6b2 <LL_TIM_OC_Init+0x4e>
 800f696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f69a:	d102      	bne.n	800f6a2 <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800f69c:	f7fa fc88 	bl	8009fb0 <OC6Config>
      break;
 800f6a0:	e7f5      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	e7f3      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800f6a6:	f7fa fb97 	bl	8009dd8 <OC2Config>
      break;
 800f6aa:	e7f0      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800f6ac:	f7fa fc18 	bl	8009ee0 <OC4Config>
      break;
 800f6b0:	e7ed      	b.n	800f68e <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800f6b2:	f7fa fc49 	bl	8009f48 <OC5Config>
      break;
 800f6b6:	e7ea      	b.n	800f68e <LL_TIM_OC_Init+0x2a>

0800f6b8 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800f6b8:	680a      	ldr	r2, [r1, #0]
 800f6ba:	0912      	lsrs	r2, r2, #4
 800f6bc:	3201      	adds	r2, #1
 800f6be:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800f6c2:	684b      	ldr	r3, [r1, #4]
 800f6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6c8:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800f6cc:	688b      	ldr	r3, [r1, #8]
 800f6ce:	0e5b      	lsrs	r3, r3, #25
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	005b      	lsls	r3, r3, #1
}
 800f6d4:	fbb0 f0f3 	udiv	r0, r0, r3
 800f6d8:	4770      	bx	lr

0800f6da <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 800f6da:	6341      	str	r1, [r0, #52]	; 0x34
}
 800f6dc:	4770      	bx	lr

0800f6de <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 800f6de:	6381      	str	r1, [r0, #56]	; 0x38
}
 800f6e0:	4770      	bx	lr

0800f6e2 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 800f6e2:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 800f6e4:	4770      	bx	lr

0800f6e6 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 800f6e6:	6401      	str	r1, [r0, #64]	; 0x40
}
 800f6e8:	4770      	bx	lr

0800f6ea <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800f6ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f6ec:	6581      	str	r1, [r0, #88]	; 0x58
}
 800f6ee:	4770      	bx	lr

0800f6f0 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 800f6f0:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 800f6f2:	4770      	bx	lr

0800f6f4 <LL_TIM_ClearFlag_CC1>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800f6f4:	f06f 0302 	mvn.w	r3, #2
 800f6f8:	6103      	str	r3, [r0, #16]
}
 800f6fa:	4770      	bx	lr

0800f6fc <LL_TIM_IsActiveFlag_CC1>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800f6fc:	6900      	ldr	r0, [r0, #16]
 800f6fe:	f010 0002 	ands.w	r0, r0, #2
 800f702:	d000      	beq.n	800f706 <LL_TIM_IsActiveFlag_CC1+0xa>
 800f704:	2001      	movs	r0, #1
}
 800f706:	4770      	bx	lr

0800f708 <LL_TIM_ClearFlag_CC2>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 800f708:	f06f 0304 	mvn.w	r3, #4
 800f70c:	6103      	str	r3, [r0, #16]
}
 800f70e:	4770      	bx	lr

0800f710 <LL_TIM_IsActiveFlag_CC2>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800f710:	6900      	ldr	r0, [r0, #16]
 800f712:	f010 0004 	ands.w	r0, r0, #4
 800f716:	d000      	beq.n	800f71a <LL_TIM_IsActiveFlag_CC2+0xa>
 800f718:	2001      	movs	r0, #1
}
 800f71a:	4770      	bx	lr

0800f71c <LL_TIM_ClearFlag_CC3>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 800f71c:	f06f 0308 	mvn.w	r3, #8
 800f720:	6103      	str	r3, [r0, #16]
}
 800f722:	4770      	bx	lr

0800f724 <LL_TIM_IsActiveFlag_CC3>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 800f724:	6900      	ldr	r0, [r0, #16]
 800f726:	f010 0008 	ands.w	r0, r0, #8
 800f72a:	d000      	beq.n	800f72e <LL_TIM_IsActiveFlag_CC3+0xa>
 800f72c:	2001      	movs	r0, #1
}
 800f72e:	4770      	bx	lr

0800f730 <LL_TIM_ClearFlag_CC4>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 800f730:	f06f 0310 	mvn.w	r3, #16
 800f734:	6103      	str	r3, [r0, #16]
}
 800f736:	4770      	bx	lr

0800f738 <LL_TIM_IsActiveFlag_CC4>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 800f738:	6900      	ldr	r0, [r0, #16]
 800f73a:	f010 0010 	ands.w	r0, r0, #16
 800f73e:	d000      	beq.n	800f742 <LL_TIM_IsActiveFlag_CC4+0xa>
 800f740:	2001      	movs	r0, #1
}
 800f742:	4770      	bx	lr

0800f744 <LL_TIM_ClearFlag_CC5>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC5IF));
 800f744:	f46f 3380 	mvn.w	r3, #65536	; 0x10000
 800f748:	6103      	str	r3, [r0, #16]
}
 800f74a:	4770      	bx	lr

0800f74c <LL_TIM_IsActiveFlag_CC5>:
  return ((READ_BIT(TIMx->SR, TIM_SR_CC5IF) == (TIM_SR_CC5IF)) ? 1UL : 0UL);
 800f74c:	6900      	ldr	r0, [r0, #16]
 800f74e:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800f752:	d000      	beq.n	800f756 <LL_TIM_IsActiveFlag_CC5+0xa>
 800f754:	2001      	movs	r0, #1
}
 800f756:	4770      	bx	lr

0800f758 <LL_TIM_ClearFlag_CC6>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC6IF));
 800f758:	f46f 3300 	mvn.w	r3, #131072	; 0x20000
 800f75c:	6103      	str	r3, [r0, #16]
}
 800f75e:	4770      	bx	lr

0800f760 <LL_TIM_GenerateEvent_CC1>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800f760:	6943      	ldr	r3, [r0, #20]
 800f762:	f043 0302 	orr.w	r3, r3, #2
 800f766:	6143      	str	r3, [r0, #20]
}
 800f768:	4770      	bx	lr

0800f76a <get_polarity>:
    if ((flags & PWM_POLARITY_MASK) == PWM_POLARITY_NORMAL) {
 800f76a:	f010 0f01 	tst.w	r0, #1
 800f76e:	d001      	beq.n	800f774 <get_polarity+0xa>
    return LL_TIM_OCPOLARITY_LOW;
 800f770:	2002      	movs	r0, #2
 800f772:	4770      	bx	lr
        return LL_TIM_OCPOLARITY_HIGH;
 800f774:	2000      	movs	r0, #0
}
 800f776:	4770      	bx	lr

0800f778 <z_log_msg2_runtime_create>:
{
 800f778:	b510      	push	{r4, lr}
 800f77a:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f77c:	ac0a      	add	r4, sp, #40	; 0x28
 800f77e:	9405      	str	r4, [sp, #20]
 800f780:	9402      	str	r4, [sp, #8]
 800f782:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f784:	9401      	str	r4, [sp, #4]
 800f786:	9c08      	ldr	r4, [sp, #32]
 800f788:	9400      	str	r4, [sp, #0]
 800f78a:	f7fe fe65 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f78e:	b006      	add	sp, #24
 800f790:	bd10      	pop	{r4, pc}

0800f792 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800f792:	b148      	cbz	r0, 800f7a8 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800f794:	68c3      	ldr	r3, [r0, #12]
 800f796:	8818      	ldrh	r0, [r3, #0]
 800f798:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800f79c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f7a0:	bf14      	ite	ne
 800f7a2:	2000      	movne	r0, #0
 800f7a4:	2001      	moveq	r0, #1
 800f7a6:	4770      	bx	lr
		return false;
 800f7a8:	2000      	movs	r0, #0
}
 800f7aa:	4770      	bx	lr

0800f7ac <z_log_msg2_runtime_create>:
{
 800f7ac:	b510      	push	{r4, lr}
 800f7ae:	b086      	sub	sp, #24
	va_start(ap, fmt);
 800f7b0:	ac0a      	add	r4, sp, #40	; 0x28
 800f7b2:	9405      	str	r4, [sp, #20]
 800f7b4:	9402      	str	r4, [sp, #8]
 800f7b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f7b8:	9401      	str	r4, [sp, #4]
 800f7ba:	9c08      	ldr	r4, [sp, #32]
 800f7bc:	9400      	str	r4, [sp, #0]
 800f7be:	f7fe fe4b 	bl	800e458 <z_impl_z_log_msg2_runtime_vcreate>
}
 800f7c2:	b006      	add	sp, #24
 800f7c4:	bd10      	pop	{r4, pc}

0800f7c6 <arch_system_halt>:
	__asm__ volatile(
 800f7c6:	f04f 0210 	mov.w	r2, #16
 800f7ca:	f3ef 8311 	mrs	r3, BASEPRI
 800f7ce:	f382 8812 	msr	BASEPRI_MAX, r2
 800f7d2:	f3bf 8f6f 	isb	sy
	for (;;) {
 800f7d6:	e7fe      	b.n	800f7d6 <arch_system_halt+0x10>

0800f7d8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800f7d8:	6902      	ldr	r2, [r0, #16]
 800f7da:	6943      	ldr	r3, [r0, #20]
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	f012 0203 	ands.w	r2, r2, #3
 800f7e2:	d10d      	bne.n	800f800 <create_free_list+0x28>
	slab->free_list = NULL;
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800f7e8:	e005      	b.n	800f7f6 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800f7ea:	6981      	ldr	r1, [r0, #24]
 800f7ec:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800f7ee:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800f7f0:	6901      	ldr	r1, [r0, #16]
 800f7f2:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800f7f4:	3201      	adds	r2, #1
 800f7f6:	68c1      	ldr	r1, [r0, #12]
 800f7f8:	4291      	cmp	r1, r2
 800f7fa:	d8f6      	bhi.n	800f7ea <create_free_list+0x12>
	return 0;
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	4770      	bx	lr
		return -EINVAL;
 800f800:	f06f 0015 	mvn.w	r0, #21
}
 800f804:	4770      	bx	lr

0800f806 <setup_thread_stack>:
{
 800f806:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800f808:	3207      	adds	r2, #7
 800f80a:	f022 0207 	bic.w	r2, r2, #7
 800f80e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800f812:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800f816:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800f818:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800f81a:	2200      	movs	r2, #0
 800f81c:	6702      	str	r2, [r0, #112]	; 0x70
}
 800f81e:	18c8      	adds	r0, r1, r3
 800f820:	bc10      	pop	{r4}
 800f822:	4770      	bx	lr

0800f824 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f824:	f3ef 8005 	mrs	r0, IPSR
}
 800f828:	3800      	subs	r0, #0
 800f82a:	bf18      	it	ne
 800f82c:	2001      	movne	r0, #1
 800f82e:	4770      	bx	lr

0800f830 <z_impl_k_thread_name_set>:
}
 800f830:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800f834:	4770      	bx	lr

0800f836 <k_thread_name_get>:
}
 800f836:	2000      	movs	r0, #0
 800f838:	4770      	bx	lr

0800f83a <z_impl_k_thread_start>:
{
 800f83a:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800f83c:	f7fb fe9e 	bl	800b57c <z_sched_start>
}
 800f840:	bd08      	pop	{r3, pc}

0800f842 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800f842:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800f844:	2400      	movs	r4, #0
 800f846:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800f848:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800f84a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800f84c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800f84e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800f850:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800f852:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800f854:	bc10      	pop	{r4}
 800f856:	4770      	bx	lr

0800f858 <z_impl_k_thread_create>:
{
 800f858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f85a:	b087      	sub	sp, #28
 800f85c:	4604      	mov	r4, r0
 800f85e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f860:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800f862:	2700      	movs	r7, #0
 800f864:	9705      	str	r7, [sp, #20]
 800f866:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f868:	9704      	str	r7, [sp, #16]
 800f86a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f86c:	9703      	str	r7, [sp, #12]
 800f86e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f870:	9702      	str	r7, [sp, #8]
 800f872:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f874:	9701      	str	r7, [sp, #4]
 800f876:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f878:	9700      	str	r7, [sp, #0]
 800f87a:	f7fb f943 	bl	800ab04 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800f87e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800f882:	bf08      	it	eq
 800f884:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800f888:	d102      	bne.n	800f890 <z_impl_k_thread_create+0x38>
}
 800f88a:	4620      	mov	r0, r4
 800f88c:	b007      	add	sp, #28
 800f88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800f890:	4632      	mov	r2, r6
 800f892:	462b      	mov	r3, r5
 800f894:	4620      	mov	r0, r4
 800f896:	f7fb f927 	bl	800aae8 <schedule_new_thread>
 800f89a:	e7f6      	b.n	800f88a <z_impl_k_thread_create+0x32>

0800f89c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800f89c:	b508      	push	{r3, lr}
 800f89e:	f04f 0210 	mov.w	r2, #16
 800f8a2:	f3ef 8311 	mrs	r3, BASEPRI
 800f8a6:	f382 8812 	msr	BASEPRI_MAX, r2
 800f8aa:	f3bf 8f6f 	isb	sy
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800f8ae:	f7f5 f9dd 	bl	8004c6c <arch_cpu_idle>
 800f8b2:	e7f4      	b.n	800f89e <idle+0x2>

0800f8b4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800f8b4:	4288      	cmp	r0, r1
 800f8b6:	da00      	bge.n	800f8ba <new_prio_for_inheritance+0x6>
 800f8b8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800f8ba:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800f8be:	db01      	blt.n	800f8c4 <new_prio_for_inheritance+0x10>
 800f8c0:	4608      	mov	r0, r1
 800f8c2:	4770      	bx	lr
 800f8c4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800f8c8:	4770      	bx	lr

0800f8ca <adjust_owner_prio>:
{
 800f8ca:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800f8cc:	6880      	ldr	r0, [r0, #8]
 800f8ce:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800f8d2:	428b      	cmp	r3, r1
 800f8d4:	d101      	bne.n	800f8da <adjust_owner_prio+0x10>
	return false;
 800f8d6:	2000      	movs	r0, #0
}
 800f8d8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800f8da:	f7fb fe9d 	bl	800b618 <z_set_prio>
 800f8de:	e7fb      	b.n	800f8d8 <adjust_owner_prio+0xe>

0800f8e0 <z_impl_k_mutex_init>:
{
 800f8e0:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800f8e6:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800f8e8:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800f8ea:	605b      	str	r3, [r3, #4]
}
 800f8ec:	4770      	bx	lr

0800f8ee <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800f8ee:	b15a      	cbz	r2, 800f908 <z_impl_k_sem_init+0x1a>
 800f8f0:	428a      	cmp	r2, r1
 800f8f2:	d30c      	bcc.n	800f90e <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800f8f4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800f8f6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800f8f8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800f8fa:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800f8fc:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800f900:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800f902:	6143      	str	r3, [r0, #20]
	return 0;
 800f904:	2000      	movs	r0, #0
 800f906:	4770      	bx	lr
		return -EINVAL;
 800f908:	f06f 0015 	mvn.w	r0, #21
 800f90c:	4770      	bx	lr
 800f90e:	f06f 0015 	mvn.w	r0, #21
}
 800f912:	4770      	bx	lr

0800f914 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800f914:	2300      	movs	r3, #0
 800f916:	6003      	str	r3, [r0, #0]
 800f918:	6043      	str	r3, [r0, #4]
 800f91a:	6083      	str	r3, [r0, #8]
 800f91c:	60c3      	str	r3, [r0, #12]
 800f91e:	6041      	str	r1, [r0, #4]
}
 800f920:	4770      	bx	lr

0800f922 <k_work_submit_to_queue>:
{
 800f922:	b530      	push	{r4, r5, lr}
 800f924:	b083      	sub	sp, #12
 800f926:	9001      	str	r0, [sp, #4]
 800f928:	4608      	mov	r0, r1
 800f92a:	f04f 0310 	mov.w	r3, #16
 800f92e:	f3ef 8511 	mrs	r5, BASEPRI
 800f932:	f383 8812 	msr	BASEPRI_MAX, r3
 800f936:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800f93a:	a901      	add	r1, sp, #4
 800f93c:	f7fb fb2c 	bl	800af98 <submit_to_queue_locked>
 800f940:	4604      	mov	r4, r0
	__asm__ volatile(
 800f942:	f385 8811 	msr	BASEPRI, r5
 800f946:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800f94a:	2800      	cmp	r0, #0
 800f94c:	dc02      	bgt.n	800f954 <k_work_submit_to_queue+0x32>
}
 800f94e:	4620      	mov	r0, r4
 800f950:	b003      	add	sp, #12
 800f952:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800f954:	f7fc f82e 	bl	800b9b4 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800f958:	2800      	cmp	r0, #0
 800f95a:	d0f8      	beq.n	800f94e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800f95c:	f7fb ff7c 	bl	800b858 <z_impl_k_yield>
	return ret;
 800f960:	e7f5      	b.n	800f94e <k_work_submit_to_queue+0x2c>

0800f962 <thread_active_elsewhere>:
}
 800f962:	2000      	movs	r0, #0
 800f964:	4770      	bx	lr

0800f966 <pended_on_thread>:
}
 800f966:	6880      	ldr	r0, [r0, #8]
 800f968:	4770      	bx	lr

0800f96a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800f96a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800f96e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800f972:	4283      	cmp	r3, r0
 800f974:	d001      	beq.n	800f97a <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800f976:	1ac0      	subs	r0, r0, r3
 800f978:	4770      	bx	lr
	return 0;
 800f97a:	2000      	movs	r0, #0
}
 800f97c:	4770      	bx	lr

0800f97e <z_unpend_thread_no_timeout>:
{
 800f97e:	b538      	push	{r3, r4, r5, lr}
 800f980:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800f982:	2300      	movs	r3, #0
	__asm__ volatile(
 800f984:	f04f 0210 	mov.w	r2, #16
 800f988:	f3ef 8511 	mrs	r5, BASEPRI
 800f98c:	f382 8812 	msr	BASEPRI_MAX, r2
 800f990:	f3bf 8f6f 	isb	sy
 800f994:	e010      	b.n	800f9b8 <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800f996:	4620      	mov	r0, r4
 800f998:	f7ff ffe5 	bl	800f966 <pended_on_thread>
 800f99c:	4621      	mov	r1, r4
 800f99e:	f000 f823 	bl	800f9e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800f9a2:	7b63      	ldrb	r3, [r4, #13]
 800f9a4:	f023 0302 	bic.w	r3, r3, #2
 800f9a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800f9ae:	f385 8811 	msr	BASEPRI, r5
 800f9b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d0ec      	beq.n	800f996 <z_unpend_thread_no_timeout+0x18>
}
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}

0800f9be <z_reschedule_irqlock>:
{
 800f9be:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	b920      	cbnz	r0, 800f9ce <z_reschedule_irqlock+0x10>
 800f9c4:	f3ef 8205 	mrs	r2, IPSR
 800f9c8:	b942      	cbnz	r2, 800f9dc <z_reschedule_irqlock+0x1e>
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	e000      	b.n	800f9d0 <z_reschedule_irqlock+0x12>
 800f9ce:	2200      	movs	r2, #0
	if (resched(key)) {
 800f9d0:	b932      	cbnz	r2, 800f9e0 <z_reschedule_irqlock+0x22>
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
}
 800f9da:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800f9dc:	2200      	movs	r2, #0
 800f9de:	e7f7      	b.n	800f9d0 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7f5 fa8b 	bl	8004efc <arch_swap>
	return ret;
 800f9e6:	e7f8      	b.n	800f9da <z_reschedule_irqlock+0x1c>

0800f9e8 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800f9e8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800f9ea:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800f9ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800f9ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800f9f4:	604b      	str	r3, [r1, #4]
}
 800f9f6:	4770      	bx	lr

0800f9f8 <z_unpend_thread>:
{
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800f9fc:	2300      	movs	r3, #0
	__asm__ volatile(
 800f9fe:	f04f 0210 	mov.w	r2, #16
 800fa02:	f3ef 8511 	mrs	r5, BASEPRI
 800fa06:	f382 8812 	msr	BASEPRI_MAX, r2
 800fa0a:	f3bf 8f6f 	isb	sy
 800fa0e:	e010      	b.n	800fa32 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fa10:	4620      	mov	r0, r4
 800fa12:	f7ff ffa8 	bl	800f966 <pended_on_thread>
 800fa16:	4621      	mov	r1, r4
 800fa18:	f7ff ffe6 	bl	800f9e8 <z_priq_dumb_remove>
 800fa1c:	7b63      	ldrb	r3, [r4, #13]
 800fa1e:	f023 0302 	bic.w	r3, r3, #2
 800fa22:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fa24:	2300      	movs	r3, #0
 800fa26:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800fa28:	f385 8811 	msr	BASEPRI, r5
 800fa2c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fa30:	2301      	movs	r3, #1
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d0ec      	beq.n	800fa10 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800fa36:	f104 0018 	add.w	r0, r4, #24
 800fa3a:	f000 f985 	bl	800fd48 <z_abort_timeout>
}
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}

0800fa40 <z_priq_dumb_best>:
{
 800fa40:	4603      	mov	r3, r0
	return list->head == list;
 800fa42:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fa44:	4283      	cmp	r3, r0
 800fa46:	d000      	beq.n	800fa4a <z_priq_dumb_best+0xa>
}
 800fa48:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800fa4a:	2000      	movs	r0, #0
	return thread;
 800fa4c:	e7fc      	b.n	800fa48 <z_priq_dumb_best+0x8>

0800fa4e <z_ready_thread>:
{
 800fa4e:	b538      	push	{r3, r4, r5, lr}
 800fa50:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800fa52:	2300      	movs	r3, #0
	__asm__ volatile(
 800fa54:	f04f 0210 	mov.w	r2, #16
 800fa58:	f3ef 8511 	mrs	r5, BASEPRI
 800fa5c:	f382 8812 	msr	BASEPRI_MAX, r2
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	e004      	b.n	800fa70 <z_ready_thread+0x22>
	__asm__ volatile(
 800fa66:	f385 8811 	msr	BASEPRI, r5
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	2301      	movs	r3, #1
 800fa70:	b943      	cbnz	r3, 800fa84 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800fa72:	4620      	mov	r0, r4
 800fa74:	f7ff ff75 	bl	800f962 <thread_active_elsewhere>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d1f4      	bne.n	800fa66 <z_ready_thread+0x18>
			ready_thread(thread);
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f7fb fd3d 	bl	800b4fc <ready_thread>
 800fa82:	e7f0      	b.n	800fa66 <z_ready_thread+0x18>
}
 800fa84:	bd38      	pop	{r3, r4, r5, pc}

0800fa86 <z_thread_timeout>:
{
 800fa86:	b570      	push	{r4, r5, r6, lr}
 800fa88:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800fa8a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800fa8e:	2300      	movs	r3, #0
	__asm__ volatile(
 800fa90:	f04f 0210 	mov.w	r2, #16
 800fa94:	f3ef 8611 	mrs	r6, BASEPRI
 800fa98:	f382 8812 	msr	BASEPRI_MAX, r2
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	e011      	b.n	800fac6 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800faa2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800faa6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800faaa:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800faae:	f023 0310 	bic.w	r3, r3, #16
 800fab2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800fab6:	4628      	mov	r0, r5
 800fab8:	f7fb fd20 	bl	800b4fc <ready_thread>
	__asm__ volatile(
 800fabc:	f386 8811 	msr	BASEPRI, r6
 800fac0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fac4:	2301      	movs	r3, #1
 800fac6:	b9ab      	cbnz	r3, 800faf4 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800fac8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800facc:	f013 0f28 	tst.w	r3, #40	; 0x28
 800fad0:	d1f4      	bne.n	800fabc <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800fad2:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d0e3      	beq.n	800faa2 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fada:	4628      	mov	r0, r5
 800fadc:	f7ff ff43 	bl	800f966 <pended_on_thread>
 800fae0:	4629      	mov	r1, r5
 800fae2:	f7ff ff81 	bl	800f9e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fae6:	7b6b      	ldrb	r3, [r5, #13]
 800fae8:	f023 0302 	bic.w	r3, r3, #2
 800faec:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	60ab      	str	r3, [r5, #8]
}
 800faf2:	e7d6      	b.n	800faa2 <z_thread_timeout+0x1c>
}
 800faf4:	bd70      	pop	{r4, r5, r6, pc}

0800faf6 <add_to_waitq_locked>:
{
 800faf6:	b570      	push	{r4, r5, r6, lr}
 800faf8:	4605      	mov	r5, r0
 800fafa:	460e      	mov	r6, r1
	unready_thread(thread);
 800fafc:	f7fb fd5c 	bl	800b5b8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800fb00:	7b6b      	ldrb	r3, [r5, #13]
 800fb02:	f043 0302 	orr.w	r3, r3, #2
 800fb06:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800fb08:	b1b6      	cbz	r6, 800fb38 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800fb0a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800fb0c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800fb0e:	42a6      	cmp	r6, r4
 800fb10:	d019      	beq.n	800fb46 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fb12:	b164      	cbz	r4, 800fb2e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800fb14:	4621      	mov	r1, r4
 800fb16:	4628      	mov	r0, r5
 800fb18:	f7ff ff27 	bl	800f96a <z_sched_prio_cmp>
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	dc0c      	bgt.n	800fb3a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800fb20:	b12c      	cbz	r4, 800fb2e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800fb22:	6873      	ldr	r3, [r6, #4]
 800fb24:	429c      	cmp	r4, r3
 800fb26:	d002      	beq.n	800fb2e <add_to_waitq_locked+0x38>
 800fb28:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fb2a:	2c00      	cmp	r4, #0
 800fb2c:	d1f1      	bne.n	800fb12 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800fb2e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800fb30:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800fb32:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800fb34:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800fb36:	6075      	str	r5, [r6, #4]
}
 800fb38:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800fb3a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800fb3c:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800fb3e:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800fb40:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800fb42:	6065      	str	r5, [r4, #4]
}
 800fb44:	e7f8      	b.n	800fb38 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800fb46:	2400      	movs	r4, #0
 800fb48:	e7e3      	b.n	800fb12 <add_to_waitq_locked+0x1c>

0800fb4a <pend>:
{
 800fb4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4e:	4605      	mov	r5, r0
 800fb50:	460e      	mov	r6, r1
 800fb52:	4691      	mov	r9, r2
 800fb54:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800fb56:	2400      	movs	r4, #0
	__asm__ volatile(
 800fb58:	f04f 0310 	mov.w	r3, #16
 800fb5c:	f3ef 8711 	mrs	r7, BASEPRI
 800fb60:	f383 8812 	msr	BASEPRI_MAX, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	e008      	b.n	800fb7c <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7ff ffc2 	bl	800faf6 <add_to_waitq_locked>
	__asm__ volatile(
 800fb72:	f387 8811 	msr	BASEPRI, r7
 800fb76:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fb7a:	2401      	movs	r4, #1
 800fb7c:	2c00      	cmp	r4, #0
 800fb7e:	d0f4      	beq.n	800fb6a <pend+0x20>
	add_thread_timeout(thread, timeout);
 800fb80:	464a      	mov	r2, r9
 800fb82:	4643      	mov	r3, r8
 800fb84:	4628      	mov	r0, r5
 800fb86:	f7fb fb6f 	bl	800b268 <add_thread_timeout>
}
 800fb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fb8e <z_unpend1_no_timeout>:
{
 800fb8e:	b570      	push	{r4, r5, r6, lr}
 800fb90:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800fb92:	2300      	movs	r3, #0
	__asm__ volatile(
 800fb94:	f04f 0210 	mov.w	r2, #16
 800fb98:	f3ef 8611 	mrs	r6, BASEPRI
 800fb9c:	f382 8812 	msr	BASEPRI_MAX, r2
 800fba0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800fba4:	461c      	mov	r4, r3
 800fba6:	e004      	b.n	800fbb2 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800fba8:	f386 8811 	msr	BASEPRI, r6
 800fbac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	b98b      	cbnz	r3, 800fbd8 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f7ff ff43 	bl	800fa40 <z_priq_dumb_best>
		if (thread != NULL) {
 800fbba:	4604      	mov	r4, r0
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	d0f3      	beq.n	800fba8 <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fbc0:	f7ff fed1 	bl	800f966 <pended_on_thread>
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	f7ff ff0f 	bl	800f9e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fbca:	7b63      	ldrb	r3, [r4, #13]
 800fbcc:	f023 0302 	bic.w	r3, r3, #2
 800fbd0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60a3      	str	r3, [r4, #8]
}
 800fbd6:	e7e7      	b.n	800fba8 <z_unpend1_no_timeout+0x1a>
}
 800fbd8:	4620      	mov	r0, r4
 800fbda:	bd70      	pop	{r4, r5, r6, pc}

0800fbdc <z_unpend_first_thread>:
{
 800fbdc:	b570      	push	{r4, r5, r6, lr}
 800fbde:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800fbe0:	2300      	movs	r3, #0
	__asm__ volatile(
 800fbe2:	f04f 0210 	mov.w	r2, #16
 800fbe6:	f3ef 8611 	mrs	r6, BASEPRI
 800fbea:	f382 8812 	msr	BASEPRI_MAX, r2
 800fbee:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800fbf2:	461c      	mov	r4, r3
 800fbf4:	e004      	b.n	800fc00 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800fbf6:	f386 8811 	msr	BASEPRI, r6
 800fbfa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fbfe:	2301      	movs	r3, #1
 800fc00:	b9ab      	cbnz	r3, 800fc2e <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800fc02:	4628      	mov	r0, r5
 800fc04:	f7ff ff1c 	bl	800fa40 <z_priq_dumb_best>
		if (thread != NULL) {
 800fc08:	4604      	mov	r4, r0
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d0f3      	beq.n	800fbf6 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fc0e:	f7ff feaa 	bl	800f966 <pended_on_thread>
 800fc12:	4621      	mov	r1, r4
 800fc14:	f7ff fee8 	bl	800f9e8 <z_priq_dumb_remove>
 800fc18:	7b63      	ldrb	r3, [r4, #13]
 800fc1a:	f023 0302 	bic.w	r3, r3, #2
 800fc1e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	60a3      	str	r3, [r4, #8]
 800fc24:	f104 0018 	add.w	r0, r4, #24
 800fc28:	f000 f88e 	bl	800fd48 <z_abort_timeout>
 800fc2c:	e7e3      	b.n	800fbf6 <z_unpend_first_thread+0x1a>
}
 800fc2e:	4620      	mov	r0, r4
 800fc30:	bd70      	pop	{r4, r5, r6, pc}

0800fc32 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 800fc32:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 800fc34:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 800fc36:	6083      	str	r3, [r0, #8]
}
 800fc38:	4770      	bx	lr

0800fc3a <z_impl_k_usleep>:
{
 800fc3a:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
 800fc3c:	17c1      	asrs	r1, r0, #31
		t += off;
 800fc3e:	3063      	adds	r0, #99	; 0x63
			return t / ((uint64_t)from_hz / to_hz);
 800fc40:	f04f 0264 	mov.w	r2, #100	; 0x64
 800fc44:	f04f 0300 	mov.w	r3, #0
 800fc48:	f141 0100 	adc.w	r1, r1, #0
 800fc4c:	f7f0 fec6 	bl	80009dc <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
 800fc50:	17c1      	asrs	r1, r0, #31
 800fc52:	f7fb fe45 	bl	800b8e0 <z_tick_sleep>
			return t * ((uint64_t)to_hz / from_hz);
 800fc56:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800fc5a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
 800fc5e:	1818      	adds	r0, r3, r0
 800fc60:	bd08      	pop	{r3, pc}

0800fc62 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800fc62:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800fc64:	f013 0f02 	tst.w	r3, #2
 800fc68:	d000      	beq.n	800fc6c <z_impl_k_wakeup+0xa>
 800fc6a:	4770      	bx	lr
{
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	4604      	mov	r4, r0
 800fc70:	3018      	adds	r0, #24
 800fc72:	f000 f869 	bl	800fd48 <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800fc76:	2800      	cmp	r0, #0
 800fc78:	da02      	bge.n	800fc80 <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800fc7a:	7b63      	ldrb	r3, [r4, #13]
 800fc7c:	2b10      	cmp	r3, #16
 800fc7e:	d109      	bne.n	800fc94 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800fc80:	7b63      	ldrb	r3, [r4, #13]
 800fc82:	f023 0310 	bic.w	r3, r3, #16
 800fc86:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f7ff fee0 	bl	800fa4e <z_ready_thread>
 800fc8e:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800fc92:	b103      	cbz	r3, 800fc96 <z_impl_k_wakeup+0x34>
}
 800fc94:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800fc96:	f04f 0310 	mov.w	r3, #16
 800fc9a:	f3ef 8011 	mrs	r0, BASEPRI
 800fc9e:	f383 8812 	msr	BASEPRI_MAX, r3
 800fca2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800fca6:	f7ff fe8a 	bl	800f9be <z_reschedule_irqlock>
}
 800fcaa:	e7f3      	b.n	800fc94 <z_impl_k_wakeup+0x32>

0800fcac <z_sched_wake>:
{
 800fcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	4688      	mov	r8, r1
 800fcb4:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f04f 0210 	mov.w	r2, #16
 800fcbc:	f3ef 8611 	mrs	r6, BASEPRI
 800fcc0:	f382 8812 	msr	BASEPRI_MAX, r2
 800fcc4:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800fcc8:	4699      	mov	r9, r3
 800fcca:	e004      	b.n	800fcd6 <z_sched_wake+0x2a>
	__asm__ volatile(
 800fccc:	f386 8811 	msr	BASEPRI, r6
 800fcd0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	b9eb      	cbnz	r3, 800fd14 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800fcd8:	4628      	mov	r0, r5
 800fcda:	f7ff feb1 	bl	800fa40 <z_priq_dumb_best>
		if (thread != NULL) {
 800fcde:	4604      	mov	r4, r0
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d0f3      	beq.n	800fccc <z_sched_wake+0x20>
 800fce4:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800fce8:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800fcea:	f7ff fe3c 	bl	800f966 <pended_on_thread>
 800fcee:	4621      	mov	r1, r4
 800fcf0:	f7ff fe7a 	bl	800f9e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800fcf4:	7b63      	ldrb	r3, [r4, #13]
 800fcf6:	f023 0302 	bic.w	r3, r3, #2
 800fcfa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	60a3      	str	r3, [r4, #8]
 800fd00:	f104 0018 	add.w	r0, r4, #24
 800fd04:	f000 f820 	bl	800fd48 <z_abort_timeout>
			ready_thread(thread);
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f7fb fbf7 	bl	800b4fc <ready_thread>
			ret = true;
 800fd0e:	f04f 0901 	mov.w	r9, #1
 800fd12:	e7db      	b.n	800fccc <z_sched_wake+0x20>
}
 800fd14:	4648      	mov	r0, r9
 800fd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800fd1a <remove_timeout>:
{
 800fd1a:	b510      	push	{r4, lr}
 800fd1c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800fd1e:	f7fb feb9 	bl	800ba94 <next>
 800fd22:	b148      	cbz	r0, 800fd38 <remove_timeout+0x1e>
 800fd24:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800fd26:	6920      	ldr	r0, [r4, #16]
 800fd28:	6961      	ldr	r1, [r4, #20]
 800fd2a:	6913      	ldr	r3, [r2, #16]
 800fd2c:	181b      	adds	r3, r3, r0
 800fd2e:	6950      	ldr	r0, [r2, #20]
 800fd30:	eb41 0100 	adc.w	r1, r1, r0
 800fd34:	6113      	str	r3, [r2, #16]
 800fd36:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800fd38:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800fd3a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800fd3c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800fd3e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800fd40:	2300      	movs	r3, #0
 800fd42:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800fd44:	6063      	str	r3, [r4, #4]
}
 800fd46:	bd10      	pop	{r4, pc}

0800fd48 <z_abort_timeout>:
{
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800fd4c:	2300      	movs	r3, #0
	__asm__ volatile(
 800fd4e:	f04f 0210 	mov.w	r2, #16
 800fd52:	f3ef 8611 	mrs	r6, BASEPRI
 800fd56:	f382 8812 	msr	BASEPRI_MAX, r2
 800fd5a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800fd5e:	f06f 0015 	mvn.w	r0, #21
 800fd62:	e004      	b.n	800fd6e <z_abort_timeout+0x26>
	__asm__ volatile(
 800fd64:	f386 8811 	msr	BASEPRI, r6
 800fd68:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	461d      	mov	r5, r3
 800fd70:	b93b      	cbnz	r3, 800fd82 <z_abort_timeout+0x3a>
	return node->next != NULL;
 800fd72:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d0f5      	beq.n	800fd64 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7ff ffce 	bl	800fd1a <remove_timeout>
			ret = 0;
 800fd7e:	4628      	mov	r0, r5
 800fd80:	e7f0      	b.n	800fd64 <z_abort_timeout+0x1c>
}
 800fd82:	bd70      	pop	{r4, r5, r6, pc}

0800fd84 <z_set_timeout_expiry>:
{
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	4605      	mov	r5, r0
 800fd88:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800fd8a:	2300      	movs	r3, #0
	__asm__ volatile(
 800fd8c:	f04f 0210 	mov.w	r2, #16
 800fd90:	f3ef 8611 	mrs	r6, BASEPRI
 800fd94:	f382 8812 	msr	BASEPRI_MAX, r2
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	e00a      	b.n	800fdb4 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800fd9e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800fda0:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800fda4:	2801      	cmp	r0, #1
 800fda6:	dd00      	ble.n	800fdaa <z_set_timeout_expiry+0x26>
 800fda8:	b97c      	cbnz	r4, 800fdca <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800fdaa:	f386 8811 	msr	BASEPRI, r6
 800fdae:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	461c      	mov	r4, r3
 800fdb6:	b97b      	cbnz	r3, 800fdd8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800fdb8:	f7fb fe84 	bl	800bac4 <next_timeout>
			      || (ticks <= next_to);
 800fdbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800fdc0:	d0ed      	beq.n	800fd9e <z_set_timeout_expiry+0x1a>
 800fdc2:	42a8      	cmp	r0, r5
 800fdc4:	dbec      	blt.n	800fda0 <z_set_timeout_expiry+0x1c>
 800fdc6:	2401      	movs	r4, #1
 800fdc8:	e7ea      	b.n	800fda0 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800fdca:	4639      	mov	r1, r7
 800fdcc:	42a8      	cmp	r0, r5
 800fdce:	bfa8      	it	ge
 800fdd0:	4628      	movge	r0, r5
 800fdd2:	f7f9 fee9 	bl	8009ba8 <sys_clock_set_timeout>
 800fdd6:	e7e8      	b.n	800fdaa <z_set_timeout_expiry+0x26>
}
 800fdd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fdda <sys_clock_tick_get_32>:
{
 800fdda:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800fddc:	f7fb ff86 	bl	800bcec <sys_clock_tick_get>
}
 800fde0:	bd08      	pop	{r3, pc}

0800fde2 <z_impl_k_uptime_ticks>:
{
 800fde2:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800fde4:	f7fb ff82 	bl	800bcec <sys_clock_tick_get>
}
 800fde8:	bd08      	pop	{r3, pc}

0800fdea <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800fdea:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800fdec:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800fdf2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800fdf6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800fdf8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800fdfa:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800fdfc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800fdfe:	6343      	str	r3, [r0, #52]	; 0x34
}
 800fe00:	4770      	bx	lr

0800fe02 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800fe02:	b510      	push	{r4, lr}
 800fe04:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800fe06:	f7ff ff9f 	bl	800fd48 <z_abort_timeout>

	if (inactive) {
 800fe0a:	b9a0      	cbnz	r0, 800fe36 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800fe0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe0e:	b10b      	cbz	r3, 800fe14 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800fe10:	4620      	mov	r0, r4
 800fe12:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800fe14:	f104 0018 	add.w	r0, r4, #24
 800fe18:	f7ff feb9 	bl	800fb8e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800fe1c:	b158      	cbz	r0, 800fe36 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800fe1e:	f7ff fe16 	bl	800fa4e <z_ready_thread>
	__asm__ volatile(
 800fe22:	f04f 0310 	mov.w	r3, #16
 800fe26:	f3ef 8011 	mrs	r0, BASEPRI
 800fe2a:	f383 8812 	msr	BASEPRI_MAX, r3
 800fe2e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800fe32:	f7ff fdc4 	bl	800f9be <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800fe36:	bd10      	pop	{r4, pc}

0800fe38 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800fe38:	b108      	cbz	r0, 800fe3e <poller_thread+0x6>
 800fe3a:	3860      	subs	r0, #96	; 0x60
 800fe3c:	4770      	bx	lr
}
 800fe3e:	4770      	bx	lr

0800fe40 <signal_poller>:
{
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800fe44:	6880      	ldr	r0, [r0, #8]
 800fe46:	f7ff fff7 	bl	800fe38 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800fe4a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800fe4c:	f013 0f02 	tst.w	r3, #2
 800fe50:	d024      	beq.n	800fe9c <signal_poller+0x5c>
 800fe52:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800fe54:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fe56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800fe58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe5c:	bf08      	it	eq
 800fe5e:	f112 0f02 	cmneq.w	r2, #2
 800fe62:	d01d      	beq.n	800fea0 <signal_poller+0x60>
	z_unpend_thread(thread);
 800fe64:	f7ff fdc8 	bl	800f9f8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800fe68:	2d08      	cmp	r5, #8
 800fe6a:	d009      	beq.n	800fe80 <signal_poller+0x40>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800fe70:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800fe72:	f013 0f1f 	tst.w	r3, #31
 800fe76:	d108      	bne.n	800fe8a <signal_poller+0x4a>
	return node->next != NULL;
 800fe78:	69a3      	ldr	r3, [r4, #24]
 800fe7a:	b123      	cbz	r3, 800fe86 <signal_poller+0x46>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	e005      	b.n	800fe8c <signal_poller+0x4c>
 800fe80:	f06f 0303 	mvn.w	r3, #3
 800fe84:	e7f3      	b.n	800fe6e <signal_poller+0x2e>
 800fe86:	2301      	movs	r3, #1
 800fe88:	e000      	b.n	800fe8c <signal_poller+0x4c>
 800fe8a:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800fe8c:	b90b      	cbnz	r3, 800fe92 <signal_poller+0x52>
		return 0;
 800fe8e:	2000      	movs	r0, #0
 800fe90:	e005      	b.n	800fe9e <signal_poller+0x5e>
	z_ready_thread(thread);
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff fddb 	bl	800fa4e <z_ready_thread>
	return 0;
 800fe98:	2000      	movs	r0, #0
 800fe9a:	e000      	b.n	800fe9e <signal_poller+0x5e>
		return 0;
 800fe9c:	2000      	movs	r0, #0
}
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800fea0:	f06f 000a 	mvn.w	r0, #10
 800fea4:	e7fb      	b.n	800fe9e <signal_poller+0x5e>

0800fea6 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800fea6:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800fea8:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800feaa:	7823      	ldrb	r3, [r4, #0]
 800feac:	b173      	cbz	r3, 800fecc <signal_triggered_work+0x26>
 800feae:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800feb2:	b15d      	cbz	r5, 800fecc <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800feb4:	f1a4 0614 	sub.w	r6, r4, #20
 800feb8:	f104 0014 	add.w	r0, r4, #20
 800febc:	f7ff ff44 	bl	800fd48 <z_abort_timeout>
		twork->poll_result = 0;
 800fec0:	2300      	movs	r3, #0
 800fec2:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800fec4:	4631      	mov	r1, r6
 800fec6:	4628      	mov	r0, r5
 800fec8:	f7ff fd2b 	bl	800f922 <k_work_submit_to_queue>
	}

	return 0;
}
 800fecc:	2000      	movs	r0, #0
 800fece:	bd70      	pop	{r4, r5, r6, pc}

0800fed0 <signal_poll_event>:
{
 800fed0:	b570      	push	{r4, r5, r6, lr}
 800fed2:	4604      	mov	r4, r0
 800fed4:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800fed6:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800fed8:	b1d6      	cbz	r6, 800ff10 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800feda:	7873      	ldrb	r3, [r6, #1]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d00d      	beq.n	800fefc <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800fee0:	2b02      	cmp	r3, #2
 800fee2:	d012      	beq.n	800ff0a <signal_poll_event+0x3a>
		poller->is_polling = false;
 800fee4:	2000      	movs	r0, #0
 800fee6:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800fee8:	2300      	movs	r3, #0
 800feea:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800feec:	68e3      	ldr	r3, [r4, #12]
 800feee:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800fef2:	430d      	orrs	r5, r1
 800fef4:	f365 3352 	bfi	r3, r5, #13, #6
 800fef8:	60e3      	str	r3, [r4, #12]
}
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800fefc:	f7ff ffa0 	bl	800fe40 <signal_poller>
		poller->is_polling = false;
 800ff00:	2300      	movs	r3, #0
 800ff02:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800ff04:	4298      	cmp	r0, r3
 800ff06:	daef      	bge.n	800fee8 <signal_poll_event+0x18>
 800ff08:	e7f7      	b.n	800fefa <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800ff0a:	f7ff ffcc 	bl	800fea6 <signal_triggered_work>
 800ff0e:	e7f7      	b.n	800ff00 <signal_poll_event+0x30>
	int retcode = 0;
 800ff10:	2000      	movs	r0, #0
 800ff12:	e7e9      	b.n	800fee8 <signal_poll_event+0x18>

0800ff14 <k_poll_event_init>:
{
 800ff14:	b410      	push	{r4}
	event->poller = NULL;
 800ff16:	2400      	movs	r4, #0
 800ff18:	6084      	str	r4, [r0, #8]
	event->type = type;
 800ff1a:	f890 c00d 	ldrb.w	ip, [r0, #13]
 800ff1e:	f361 0c04 	bfi	ip, r1, #0, #5
 800ff22:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
 800ff26:	68c1      	ldr	r1, [r0, #12]
 800ff28:	f364 3152 	bfi	r1, r4, #13, #6
 800ff2c:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
 800ff2e:	7b81      	ldrb	r1, [r0, #14]
 800ff30:	f362 01c3 	bfi	r1, r2, #3, #1
 800ff34:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
 800ff36:	89c2      	ldrh	r2, [r0, #14]
 800ff38:	f364 120f 	bfi	r2, r4, #4, #12
 800ff3c:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
 800ff3e:	6103      	str	r3, [r0, #16]
}
 800ff40:	bc10      	pop	{r4}
 800ff42:	4770      	bx	lr

0800ff44 <z_handle_obj_poll_events>:
{
 800ff44:	b508      	push	{r3, lr}
 800ff46:	4603      	mov	r3, r0
	return list->head == list;
 800ff48:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800ff4a:	4283      	cmp	r3, r0
 800ff4c:	d009      	beq.n	800ff62 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800ff4e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800ff50:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800ff52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800ff54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800ff56:	2300      	movs	r3, #0
 800ff58:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800ff5a:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800ff5c:	b108      	cbz	r0, 800ff62 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800ff5e:	f7ff ffb7 	bl	800fed0 <signal_poll_event>
}
 800ff62:	bd08      	pop	{r3, pc}

0800ff64 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
 800ff64:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800ff66:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	6083      	str	r3, [r0, #8]
}
 800ff6c:	4770      	bx	lr

0800ff6e <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800ff6e:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800ff70:	4770      	bx	lr

0800ff72 <k_heap_init>:
{
 800ff72:	b510      	push	{r4, lr}
 800ff74:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800ff78:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800ff7a:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800ff7c:	f7fd fee0 	bl	800dd40 <sys_heap_init>
}
 800ff80:	bd10      	pop	{r4, pc}

0800ff82 <memcpy>:
 800ff82:	440a      	add	r2, r1
 800ff84:	4291      	cmp	r1, r2
 800ff86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff8a:	d100      	bne.n	800ff8e <memcpy+0xc>
 800ff8c:	4770      	bx	lr
 800ff8e:	b510      	push	{r4, lr}
 800ff90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff98:	4291      	cmp	r1, r2
 800ff9a:	d1f9      	bne.n	800ff90 <memcpy+0xe>
 800ff9c:	bd10      	pop	{r4, pc}

0800ff9e <memset>:
 800ff9e:	4402      	add	r2, r0
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d100      	bne.n	800ffa8 <memset+0xa>
 800ffa6:	4770      	bx	lr
 800ffa8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffac:	e7f9      	b.n	800ffa2 <memset+0x4>

0800ffae <__cvt>:
 800ffae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffb2:	b088      	sub	sp, #32
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	461f      	mov	r7, r3
 800ffb8:	4614      	mov	r4, r2
 800ffba:	bfb8      	it	lt
 800ffbc:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ffc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ffc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ffc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ffc8:	bfb6      	itet	lt
 800ffca:	461f      	movlt	r7, r3
 800ffcc:	2300      	movge	r3, #0
 800ffce:	232d      	movlt	r3, #45	; 0x2d
 800ffd0:	7013      	strb	r3, [r2, #0]
 800ffd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffd4:	f023 0820 	bic.w	r8, r3, #32
 800ffd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ffdc:	d005      	beq.n	800ffea <__cvt+0x3c>
 800ffde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ffe2:	d100      	bne.n	800ffe6 <__cvt+0x38>
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	e000      	b.n	800ffec <__cvt+0x3e>
 800ffea:	2303      	movs	r3, #3
 800ffec:	aa07      	add	r2, sp, #28
 800ffee:	9204      	str	r2, [sp, #16]
 800fff0:	aa06      	add	r2, sp, #24
 800fff2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800fff6:	e9cd 3500 	strd	r3, r5, [sp]
 800fffa:	4622      	mov	r2, r4
 800fffc:	463b      	mov	r3, r7
 800fffe:	f7f0 ffa3 	bl	8000f48 <_dtoa_r>
 8010002:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010006:	4606      	mov	r6, r0
 8010008:	d102      	bne.n	8010010 <__cvt+0x62>
 801000a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801000c:	07db      	lsls	r3, r3, #31
 801000e:	d522      	bpl.n	8010056 <__cvt+0xa8>
 8010010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010014:	eb06 0905 	add.w	r9, r6, r5
 8010018:	d110      	bne.n	801003c <__cvt+0x8e>
 801001a:	7833      	ldrb	r3, [r6, #0]
 801001c:	2b30      	cmp	r3, #48	; 0x30
 801001e:	d10a      	bne.n	8010036 <__cvt+0x88>
 8010020:	2200      	movs	r2, #0
 8010022:	2300      	movs	r3, #0
 8010024:	4620      	mov	r0, r4
 8010026:	4639      	mov	r1, r7
 8010028:	f7f0 fd48 	bl	8000abc <__aeabi_dcmpeq>
 801002c:	b918      	cbnz	r0, 8010036 <__cvt+0x88>
 801002e:	f1c5 0501 	rsb	r5, r5, #1
 8010032:	f8ca 5000 	str.w	r5, [sl]
 8010036:	f8da 3000 	ldr.w	r3, [sl]
 801003a:	4499      	add	r9, r3
 801003c:	2200      	movs	r2, #0
 801003e:	2300      	movs	r3, #0
 8010040:	4620      	mov	r0, r4
 8010042:	4639      	mov	r1, r7
 8010044:	f7f0 fd3a 	bl	8000abc <__aeabi_dcmpeq>
 8010048:	b108      	cbz	r0, 801004e <__cvt+0xa0>
 801004a:	f8cd 901c 	str.w	r9, [sp, #28]
 801004e:	2230      	movs	r2, #48	; 0x30
 8010050:	9b07      	ldr	r3, [sp, #28]
 8010052:	454b      	cmp	r3, r9
 8010054:	d307      	bcc.n	8010066 <__cvt+0xb8>
 8010056:	9b07      	ldr	r3, [sp, #28]
 8010058:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801005a:	1b9b      	subs	r3, r3, r6
 801005c:	4630      	mov	r0, r6
 801005e:	6013      	str	r3, [r2, #0]
 8010060:	b008      	add	sp, #32
 8010062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010066:	1c59      	adds	r1, r3, #1
 8010068:	9107      	str	r1, [sp, #28]
 801006a:	701a      	strb	r2, [r3, #0]
 801006c:	e7f0      	b.n	8010050 <__cvt+0xa2>

0801006e <__exponent>:
 801006e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010070:	4603      	mov	r3, r0
 8010072:	2900      	cmp	r1, #0
 8010074:	bfb8      	it	lt
 8010076:	4249      	neglt	r1, r1
 8010078:	f803 2b02 	strb.w	r2, [r3], #2
 801007c:	bfb4      	ite	lt
 801007e:	222d      	movlt	r2, #45	; 0x2d
 8010080:	222b      	movge	r2, #43	; 0x2b
 8010082:	2909      	cmp	r1, #9
 8010084:	7042      	strb	r2, [r0, #1]
 8010086:	dd2a      	ble.n	80100de <__exponent+0x70>
 8010088:	f10d 0407 	add.w	r4, sp, #7
 801008c:	46a4      	mov	ip, r4
 801008e:	270a      	movs	r7, #10
 8010090:	46a6      	mov	lr, r4
 8010092:	460a      	mov	r2, r1
 8010094:	fb91 f6f7 	sdiv	r6, r1, r7
 8010098:	fb07 1516 	mls	r5, r7, r6, r1
 801009c:	3530      	adds	r5, #48	; 0x30
 801009e:	2a63      	cmp	r2, #99	; 0x63
 80100a0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80100a4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80100a8:	4631      	mov	r1, r6
 80100aa:	dcf1      	bgt.n	8010090 <__exponent+0x22>
 80100ac:	3130      	adds	r1, #48	; 0x30
 80100ae:	f1ae 0502 	sub.w	r5, lr, #2
 80100b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80100b6:	1c44      	adds	r4, r0, #1
 80100b8:	4629      	mov	r1, r5
 80100ba:	4561      	cmp	r1, ip
 80100bc:	d30a      	bcc.n	80100d4 <__exponent+0x66>
 80100be:	f10d 0209 	add.w	r2, sp, #9
 80100c2:	eba2 020e 	sub.w	r2, r2, lr
 80100c6:	4565      	cmp	r5, ip
 80100c8:	bf88      	it	hi
 80100ca:	2200      	movhi	r2, #0
 80100cc:	4413      	add	r3, r2
 80100ce:	1a18      	subs	r0, r3, r0
 80100d0:	b003      	add	sp, #12
 80100d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80100dc:	e7ed      	b.n	80100ba <__exponent+0x4c>
 80100de:	2330      	movs	r3, #48	; 0x30
 80100e0:	3130      	adds	r1, #48	; 0x30
 80100e2:	7083      	strb	r3, [r0, #2]
 80100e4:	70c1      	strb	r1, [r0, #3]
 80100e6:	1d03      	adds	r3, r0, #4
 80100e8:	e7f1      	b.n	80100ce <__exponent+0x60>

080100ea <_printf_common>:
 80100ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100ee:	4616      	mov	r6, r2
 80100f0:	4699      	mov	r9, r3
 80100f2:	688a      	ldr	r2, [r1, #8]
 80100f4:	690b      	ldr	r3, [r1, #16]
 80100f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100fa:	4293      	cmp	r3, r2
 80100fc:	bfb8      	it	lt
 80100fe:	4613      	movlt	r3, r2
 8010100:	6033      	str	r3, [r6, #0]
 8010102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010106:	4607      	mov	r7, r0
 8010108:	460c      	mov	r4, r1
 801010a:	b10a      	cbz	r2, 8010110 <_printf_common+0x26>
 801010c:	3301      	adds	r3, #1
 801010e:	6033      	str	r3, [r6, #0]
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	0699      	lsls	r1, r3, #26
 8010114:	bf42      	ittt	mi
 8010116:	6833      	ldrmi	r3, [r6, #0]
 8010118:	3302      	addmi	r3, #2
 801011a:	6033      	strmi	r3, [r6, #0]
 801011c:	6825      	ldr	r5, [r4, #0]
 801011e:	f015 0506 	ands.w	r5, r5, #6
 8010122:	d106      	bne.n	8010132 <_printf_common+0x48>
 8010124:	f104 0a19 	add.w	sl, r4, #25
 8010128:	68e3      	ldr	r3, [r4, #12]
 801012a:	6832      	ldr	r2, [r6, #0]
 801012c:	1a9b      	subs	r3, r3, r2
 801012e:	42ab      	cmp	r3, r5
 8010130:	dc26      	bgt.n	8010180 <_printf_common+0x96>
 8010132:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010136:	1e13      	subs	r3, r2, #0
 8010138:	6822      	ldr	r2, [r4, #0]
 801013a:	bf18      	it	ne
 801013c:	2301      	movne	r3, #1
 801013e:	0692      	lsls	r2, r2, #26
 8010140:	d42b      	bmi.n	801019a <_printf_common+0xb0>
 8010142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010146:	4649      	mov	r1, r9
 8010148:	4638      	mov	r0, r7
 801014a:	47c0      	blx	r8
 801014c:	3001      	adds	r0, #1
 801014e:	d01e      	beq.n	801018e <_printf_common+0xa4>
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	68e5      	ldr	r5, [r4, #12]
 8010154:	6832      	ldr	r2, [r6, #0]
 8010156:	f003 0306 	and.w	r3, r3, #6
 801015a:	2b04      	cmp	r3, #4
 801015c:	bf08      	it	eq
 801015e:	1aad      	subeq	r5, r5, r2
 8010160:	68a3      	ldr	r3, [r4, #8]
 8010162:	6922      	ldr	r2, [r4, #16]
 8010164:	bf0c      	ite	eq
 8010166:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801016a:	2500      	movne	r5, #0
 801016c:	4293      	cmp	r3, r2
 801016e:	bfc4      	itt	gt
 8010170:	1a9b      	subgt	r3, r3, r2
 8010172:	18ed      	addgt	r5, r5, r3
 8010174:	2600      	movs	r6, #0
 8010176:	341a      	adds	r4, #26
 8010178:	42b5      	cmp	r5, r6
 801017a:	d11a      	bne.n	80101b2 <_printf_common+0xc8>
 801017c:	2000      	movs	r0, #0
 801017e:	e008      	b.n	8010192 <_printf_common+0xa8>
 8010180:	2301      	movs	r3, #1
 8010182:	4652      	mov	r2, sl
 8010184:	4649      	mov	r1, r9
 8010186:	4638      	mov	r0, r7
 8010188:	47c0      	blx	r8
 801018a:	3001      	adds	r0, #1
 801018c:	d103      	bne.n	8010196 <_printf_common+0xac>
 801018e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010196:	3501      	adds	r5, #1
 8010198:	e7c6      	b.n	8010128 <_printf_common+0x3e>
 801019a:	18e1      	adds	r1, r4, r3
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	2030      	movs	r0, #48	; 0x30
 80101a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101a4:	4422      	add	r2, r4
 80101a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80101ae:	3302      	adds	r3, #2
 80101b0:	e7c7      	b.n	8010142 <_printf_common+0x58>
 80101b2:	2301      	movs	r3, #1
 80101b4:	4622      	mov	r2, r4
 80101b6:	4649      	mov	r1, r9
 80101b8:	4638      	mov	r0, r7
 80101ba:	47c0      	blx	r8
 80101bc:	3001      	adds	r0, #1
 80101be:	d0e6      	beq.n	801018e <_printf_common+0xa4>
 80101c0:	3601      	adds	r6, #1
 80101c2:	e7d9      	b.n	8010178 <_printf_common+0x8e>

080101c4 <strnlen>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4602      	mov	r2, r0
 80101c8:	4401      	add	r1, r0
 80101ca:	428a      	cmp	r2, r1
 80101cc:	4613      	mov	r3, r2
 80101ce:	d003      	beq.n	80101d8 <strnlen+0x14>
 80101d0:	781c      	ldrb	r4, [r3, #0]
 80101d2:	3201      	adds	r2, #1
 80101d4:	2c00      	cmp	r4, #0
 80101d6:	d1f8      	bne.n	80101ca <strnlen+0x6>
 80101d8:	1a18      	subs	r0, r3, r0
 80101da:	bd10      	pop	{r4, pc}

080101dc <quorem>:
 80101dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e0:	6903      	ldr	r3, [r0, #16]
 80101e2:	690c      	ldr	r4, [r1, #16]
 80101e4:	42a3      	cmp	r3, r4
 80101e6:	4607      	mov	r7, r0
 80101e8:	db7d      	blt.n	80102e6 <quorem+0x10a>
 80101ea:	3c01      	subs	r4, #1
 80101ec:	f101 0814 	add.w	r8, r1, #20
 80101f0:	f100 0514 	add.w	r5, r0, #20
 80101f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101f8:	9301      	str	r3, [sp, #4]
 80101fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80101fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010202:	3301      	adds	r3, #1
 8010204:	429a      	cmp	r2, r3
 8010206:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801020a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801020e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010212:	d32e      	bcc.n	8010272 <quorem+0x96>
 8010214:	f04f 0e00 	mov.w	lr, #0
 8010218:	4640      	mov	r0, r8
 801021a:	46ac      	mov	ip, r5
 801021c:	46f2      	mov	sl, lr
 801021e:	f850 2b04 	ldr.w	r2, [r0], #4
 8010222:	b293      	uxth	r3, r2
 8010224:	fb06 e303 	mla	r3, r6, r3, lr
 8010228:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801022c:	0c12      	lsrs	r2, r2, #16
 801022e:	b29b      	uxth	r3, r3
 8010230:	fb06 e202 	mla	r2, r6, r2, lr
 8010234:	ebaa 0303 	sub.w	r3, sl, r3
 8010238:	f8dc a000 	ldr.w	sl, [ip]
 801023c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010240:	b292      	uxth	r2, r2
 8010242:	fa13 f38a 	uxtah	r3, r3, sl
 8010246:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801024a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801024e:	b29b      	uxth	r3, r3
 8010250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010254:	4581      	cmp	r9, r0
 8010256:	f84c 3b04 	str.w	r3, [ip], #4
 801025a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801025e:	d2de      	bcs.n	801021e <quorem+0x42>
 8010260:	f855 300b 	ldr.w	r3, [r5, fp]
 8010264:	b92b      	cbnz	r3, 8010272 <quorem+0x96>
 8010266:	9b01      	ldr	r3, [sp, #4]
 8010268:	3b04      	subs	r3, #4
 801026a:	429d      	cmp	r5, r3
 801026c:	461a      	mov	r2, r3
 801026e:	d32e      	bcc.n	80102ce <quorem+0xf2>
 8010270:	613c      	str	r4, [r7, #16]
 8010272:	4638      	mov	r0, r7
 8010274:	f000 f886 	bl	8010384 <__mcmp>
 8010278:	2800      	cmp	r0, #0
 801027a:	db24      	blt.n	80102c6 <quorem+0xea>
 801027c:	3601      	adds	r6, #1
 801027e:	4628      	mov	r0, r5
 8010280:	f04f 0c00 	mov.w	ip, #0
 8010284:	f858 2b04 	ldr.w	r2, [r8], #4
 8010288:	f8d0 e000 	ldr.w	lr, [r0]
 801028c:	b293      	uxth	r3, r2
 801028e:	ebac 0303 	sub.w	r3, ip, r3
 8010292:	0c12      	lsrs	r2, r2, #16
 8010294:	fa13 f38e 	uxtah	r3, r3, lr
 8010298:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801029c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102a6:	45c1      	cmp	r9, r8
 80102a8:	f840 3b04 	str.w	r3, [r0], #4
 80102ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80102b0:	d2e8      	bcs.n	8010284 <quorem+0xa8>
 80102b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102ba:	b922      	cbnz	r2, 80102c6 <quorem+0xea>
 80102bc:	3b04      	subs	r3, #4
 80102be:	429d      	cmp	r5, r3
 80102c0:	461a      	mov	r2, r3
 80102c2:	d30a      	bcc.n	80102da <quorem+0xfe>
 80102c4:	613c      	str	r4, [r7, #16]
 80102c6:	4630      	mov	r0, r6
 80102c8:	b003      	add	sp, #12
 80102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ce:	6812      	ldr	r2, [r2, #0]
 80102d0:	3b04      	subs	r3, #4
 80102d2:	2a00      	cmp	r2, #0
 80102d4:	d1cc      	bne.n	8010270 <quorem+0x94>
 80102d6:	3c01      	subs	r4, #1
 80102d8:	e7c7      	b.n	801026a <quorem+0x8e>
 80102da:	6812      	ldr	r2, [r2, #0]
 80102dc:	3b04      	subs	r3, #4
 80102de:	2a00      	cmp	r2, #0
 80102e0:	d1f0      	bne.n	80102c4 <quorem+0xe8>
 80102e2:	3c01      	subs	r4, #1
 80102e4:	e7eb      	b.n	80102be <quorem+0xe2>
 80102e6:	2000      	movs	r0, #0
 80102e8:	e7ee      	b.n	80102c8 <quorem+0xec>

080102ea <__hi0bits>:
 80102ea:	0c02      	lsrs	r2, r0, #16
 80102ec:	0412      	lsls	r2, r2, #16
 80102ee:	4603      	mov	r3, r0
 80102f0:	b9ca      	cbnz	r2, 8010326 <__hi0bits+0x3c>
 80102f2:	0403      	lsls	r3, r0, #16
 80102f4:	2010      	movs	r0, #16
 80102f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80102fa:	bf04      	itt	eq
 80102fc:	021b      	lsleq	r3, r3, #8
 80102fe:	3008      	addeq	r0, #8
 8010300:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010304:	bf04      	itt	eq
 8010306:	011b      	lsleq	r3, r3, #4
 8010308:	3004      	addeq	r0, #4
 801030a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801030e:	bf04      	itt	eq
 8010310:	009b      	lsleq	r3, r3, #2
 8010312:	3002      	addeq	r0, #2
 8010314:	2b00      	cmp	r3, #0
 8010316:	db05      	blt.n	8010324 <__hi0bits+0x3a>
 8010318:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801031c:	f100 0001 	add.w	r0, r0, #1
 8010320:	bf08      	it	eq
 8010322:	2020      	moveq	r0, #32
 8010324:	4770      	bx	lr
 8010326:	2000      	movs	r0, #0
 8010328:	e7e5      	b.n	80102f6 <__hi0bits+0xc>

0801032a <__lo0bits>:
 801032a:	6803      	ldr	r3, [r0, #0]
 801032c:	4602      	mov	r2, r0
 801032e:	f013 0007 	ands.w	r0, r3, #7
 8010332:	d00b      	beq.n	801034c <__lo0bits+0x22>
 8010334:	07d9      	lsls	r1, r3, #31
 8010336:	d421      	bmi.n	801037c <__lo0bits+0x52>
 8010338:	0798      	lsls	r0, r3, #30
 801033a:	bf49      	itett	mi
 801033c:	085b      	lsrmi	r3, r3, #1
 801033e:	089b      	lsrpl	r3, r3, #2
 8010340:	2001      	movmi	r0, #1
 8010342:	6013      	strmi	r3, [r2, #0]
 8010344:	bf5c      	itt	pl
 8010346:	6013      	strpl	r3, [r2, #0]
 8010348:	2002      	movpl	r0, #2
 801034a:	4770      	bx	lr
 801034c:	b299      	uxth	r1, r3
 801034e:	b909      	cbnz	r1, 8010354 <__lo0bits+0x2a>
 8010350:	0c1b      	lsrs	r3, r3, #16
 8010352:	2010      	movs	r0, #16
 8010354:	b2d9      	uxtb	r1, r3
 8010356:	b909      	cbnz	r1, 801035c <__lo0bits+0x32>
 8010358:	3008      	adds	r0, #8
 801035a:	0a1b      	lsrs	r3, r3, #8
 801035c:	0719      	lsls	r1, r3, #28
 801035e:	bf04      	itt	eq
 8010360:	091b      	lsreq	r3, r3, #4
 8010362:	3004      	addeq	r0, #4
 8010364:	0799      	lsls	r1, r3, #30
 8010366:	bf04      	itt	eq
 8010368:	089b      	lsreq	r3, r3, #2
 801036a:	3002      	addeq	r0, #2
 801036c:	07d9      	lsls	r1, r3, #31
 801036e:	d403      	bmi.n	8010378 <__lo0bits+0x4e>
 8010370:	085b      	lsrs	r3, r3, #1
 8010372:	f100 0001 	add.w	r0, r0, #1
 8010376:	d003      	beq.n	8010380 <__lo0bits+0x56>
 8010378:	6013      	str	r3, [r2, #0]
 801037a:	4770      	bx	lr
 801037c:	2000      	movs	r0, #0
 801037e:	4770      	bx	lr
 8010380:	2020      	movs	r0, #32
 8010382:	4770      	bx	lr

08010384 <__mcmp>:
 8010384:	690a      	ldr	r2, [r1, #16]
 8010386:	4603      	mov	r3, r0
 8010388:	6900      	ldr	r0, [r0, #16]
 801038a:	1a80      	subs	r0, r0, r2
 801038c:	b530      	push	{r4, r5, lr}
 801038e:	d10d      	bne.n	80103ac <__mcmp+0x28>
 8010390:	3314      	adds	r3, #20
 8010392:	3114      	adds	r1, #20
 8010394:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010398:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801039c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80103a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80103a4:	4295      	cmp	r5, r2
 80103a6:	d002      	beq.n	80103ae <__mcmp+0x2a>
 80103a8:	d304      	bcc.n	80103b4 <__mcmp+0x30>
 80103aa:	2001      	movs	r0, #1
 80103ac:	bd30      	pop	{r4, r5, pc}
 80103ae:	42a3      	cmp	r3, r4
 80103b0:	d3f4      	bcc.n	801039c <__mcmp+0x18>
 80103b2:	e7fb      	b.n	80103ac <__mcmp+0x28>
 80103b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103b8:	e7f8      	b.n	80103ac <__mcmp+0x28>

080103ba <_calloc_r>:
 80103ba:	b538      	push	{r3, r4, r5, lr}
 80103bc:	fb02 f501 	mul.w	r5, r2, r1
 80103c0:	4629      	mov	r1, r5
 80103c2:	f7fc f8c9 	bl	800c558 <_malloc_r>
 80103c6:	4604      	mov	r4, r0
 80103c8:	b118      	cbz	r0, 80103d2 <_calloc_r+0x18>
 80103ca:	462a      	mov	r2, r5
 80103cc:	2100      	movs	r1, #0
 80103ce:	f7ff fde6 	bl	800ff9e <memset>
 80103d2:	4620      	mov	r0, r4
 80103d4:	bd38      	pop	{r3, r4, r5, pc}

080103d6 <__ascii_mbtowc>:
 80103d6:	b082      	sub	sp, #8
 80103d8:	b901      	cbnz	r1, 80103dc <__ascii_mbtowc+0x6>
 80103da:	a901      	add	r1, sp, #4
 80103dc:	b142      	cbz	r2, 80103f0 <__ascii_mbtowc+0x1a>
 80103de:	b14b      	cbz	r3, 80103f4 <__ascii_mbtowc+0x1e>
 80103e0:	7813      	ldrb	r3, [r2, #0]
 80103e2:	600b      	str	r3, [r1, #0]
 80103e4:	7812      	ldrb	r2, [r2, #0]
 80103e6:	1e10      	subs	r0, r2, #0
 80103e8:	bf18      	it	ne
 80103ea:	2001      	movne	r0, #1
 80103ec:	b002      	add	sp, #8
 80103ee:	4770      	bx	lr
 80103f0:	4610      	mov	r0, r2
 80103f2:	e7fb      	b.n	80103ec <__ascii_mbtowc+0x16>
 80103f4:	f06f 0001 	mvn.w	r0, #1
 80103f8:	e7f8      	b.n	80103ec <__ascii_mbtowc+0x16>

080103fa <__sfputc_r>:
 80103fa:	6893      	ldr	r3, [r2, #8]
 80103fc:	3b01      	subs	r3, #1
 80103fe:	2b00      	cmp	r3, #0
 8010400:	b410      	push	{r4}
 8010402:	6093      	str	r3, [r2, #8]
 8010404:	da07      	bge.n	8010416 <__sfputc_r+0x1c>
 8010406:	6994      	ldr	r4, [r2, #24]
 8010408:	42a3      	cmp	r3, r4
 801040a:	db01      	blt.n	8010410 <__sfputc_r+0x16>
 801040c:	290a      	cmp	r1, #10
 801040e:	d102      	bne.n	8010416 <__sfputc_r+0x1c>
 8010410:	bc10      	pop	{r4}
 8010412:	f7fd b8df 	b.w	800d5d4 <__swbuf_r>
 8010416:	6813      	ldr	r3, [r2, #0]
 8010418:	1c58      	adds	r0, r3, #1
 801041a:	6010      	str	r0, [r2, #0]
 801041c:	7019      	strb	r1, [r3, #0]
 801041e:	4608      	mov	r0, r1
 8010420:	bc10      	pop	{r4}
 8010422:	4770      	bx	lr

08010424 <__sfputs_r>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	4606      	mov	r6, r0
 8010428:	460f      	mov	r7, r1
 801042a:	4614      	mov	r4, r2
 801042c:	18d5      	adds	r5, r2, r3
 801042e:	42ac      	cmp	r4, r5
 8010430:	d101      	bne.n	8010436 <__sfputs_r+0x12>
 8010432:	2000      	movs	r0, #0
 8010434:	e007      	b.n	8010446 <__sfputs_r+0x22>
 8010436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801043a:	463a      	mov	r2, r7
 801043c:	4630      	mov	r0, r6
 801043e:	f7ff ffdc 	bl	80103fa <__sfputc_r>
 8010442:	1c43      	adds	r3, r0, #1
 8010444:	d1f3      	bne.n	801042e <__sfputs_r+0xa>
 8010446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010448 <__ascii_wctomb>:
 8010448:	4603      	mov	r3, r0
 801044a:	4608      	mov	r0, r1
 801044c:	b141      	cbz	r1, 8010460 <__ascii_wctomb+0x18>
 801044e:	2aff      	cmp	r2, #255	; 0xff
 8010450:	d904      	bls.n	801045c <__ascii_wctomb+0x14>
 8010452:	228a      	movs	r2, #138	; 0x8a
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801045a:	4770      	bx	lr
 801045c:	700a      	strb	r2, [r1, #0]
 801045e:	2001      	movs	r0, #1
 8010460:	4770      	bx	lr

08010462 <abort>:
 8010462:	b508      	push	{r3, lr}
 8010464:	2006      	movs	r0, #6
 8010466:	f7fd fb33 	bl	800dad0 <raise>
 801046a:	2001      	movs	r0, #1
 801046c:	f7f5 fd80 	bl	8005f70 <_exit>

08010470 <__sfmoreglue>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	2268      	movs	r2, #104	; 0x68
 8010474:	1e4d      	subs	r5, r1, #1
 8010476:	4355      	muls	r5, r2
 8010478:	460e      	mov	r6, r1
 801047a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801047e:	f7fc f86b 	bl	800c558 <_malloc_r>
 8010482:	4604      	mov	r4, r0
 8010484:	b140      	cbz	r0, 8010498 <__sfmoreglue+0x28>
 8010486:	2100      	movs	r1, #0
 8010488:	e9c0 1600 	strd	r1, r6, [r0]
 801048c:	300c      	adds	r0, #12
 801048e:	60a0      	str	r0, [r4, #8]
 8010490:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010494:	f7ff fd83 	bl	800ff9e <memset>
 8010498:	4620      	mov	r0, r4
 801049a:	bd70      	pop	{r4, r5, r6, pc}

0801049c <_fwalk_reent>:
 801049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a0:	4606      	mov	r6, r0
 80104a2:	4688      	mov	r8, r1
 80104a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80104a8:	2700      	movs	r7, #0
 80104aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104ae:	f1b9 0901 	subs.w	r9, r9, #1
 80104b2:	d505      	bpl.n	80104c0 <_fwalk_reent+0x24>
 80104b4:	6824      	ldr	r4, [r4, #0]
 80104b6:	2c00      	cmp	r4, #0
 80104b8:	d1f7      	bne.n	80104aa <_fwalk_reent+0xe>
 80104ba:	4638      	mov	r0, r7
 80104bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c0:	89ab      	ldrh	r3, [r5, #12]
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d907      	bls.n	80104d6 <_fwalk_reent+0x3a>
 80104c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104ca:	3301      	adds	r3, #1
 80104cc:	d003      	beq.n	80104d6 <_fwalk_reent+0x3a>
 80104ce:	4629      	mov	r1, r5
 80104d0:	4630      	mov	r0, r6
 80104d2:	47c0      	blx	r8
 80104d4:	4307      	orrs	r7, r0
 80104d6:	3568      	adds	r5, #104	; 0x68
 80104d8:	e7e9      	b.n	80104ae <_fwalk_reent+0x12>

080104da <__swhatbuf_r>:
 80104da:	b570      	push	{r4, r5, r6, lr}
 80104dc:	460e      	mov	r6, r1
 80104de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e2:	2900      	cmp	r1, #0
 80104e4:	b096      	sub	sp, #88	; 0x58
 80104e6:	4614      	mov	r4, r2
 80104e8:	461d      	mov	r5, r3
 80104ea:	da08      	bge.n	80104fe <__swhatbuf_r+0x24>
 80104ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80104f0:	2200      	movs	r2, #0
 80104f2:	602a      	str	r2, [r5, #0]
 80104f4:	061a      	lsls	r2, r3, #24
 80104f6:	d410      	bmi.n	801051a <__swhatbuf_r+0x40>
 80104f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104fc:	e00e      	b.n	801051c <__swhatbuf_r+0x42>
 80104fe:	466a      	mov	r2, sp
 8010500:	f7fd fb22 	bl	800db48 <_fstat_r>
 8010504:	2800      	cmp	r0, #0
 8010506:	dbf1      	blt.n	80104ec <__swhatbuf_r+0x12>
 8010508:	9a01      	ldr	r2, [sp, #4]
 801050a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801050e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010512:	425a      	negs	r2, r3
 8010514:	415a      	adcs	r2, r3
 8010516:	602a      	str	r2, [r5, #0]
 8010518:	e7ee      	b.n	80104f8 <__swhatbuf_r+0x1e>
 801051a:	2340      	movs	r3, #64	; 0x40
 801051c:	2000      	movs	r0, #0
 801051e:	6023      	str	r3, [r4, #0]
 8010520:	b016      	add	sp, #88	; 0x58
 8010522:	bd70      	pop	{r4, r5, r6, pc}

08010524 <_raise_r>:
 8010524:	291f      	cmp	r1, #31
 8010526:	b538      	push	{r3, r4, r5, lr}
 8010528:	4604      	mov	r4, r0
 801052a:	460d      	mov	r5, r1
 801052c:	d904      	bls.n	8010538 <_raise_r+0x14>
 801052e:	2316      	movs	r3, #22
 8010530:	6003      	str	r3, [r0, #0]
 8010532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010536:	bd38      	pop	{r3, r4, r5, pc}
 8010538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801053a:	b112      	cbz	r2, 8010542 <_raise_r+0x1e>
 801053c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010540:	b94b      	cbnz	r3, 8010556 <_raise_r+0x32>
 8010542:	4620      	mov	r0, r4
 8010544:	f000 f816 	bl	8010574 <_getpid_r>
 8010548:	462a      	mov	r2, r5
 801054a:	4601      	mov	r1, r0
 801054c:	4620      	mov	r0, r4
 801054e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010552:	f7fd bac5 	b.w	800dae0 <_kill_r>
 8010556:	2b01      	cmp	r3, #1
 8010558:	d00a      	beq.n	8010570 <_raise_r+0x4c>
 801055a:	1c59      	adds	r1, r3, #1
 801055c:	d103      	bne.n	8010566 <_raise_r+0x42>
 801055e:	2316      	movs	r3, #22
 8010560:	6003      	str	r3, [r0, #0]
 8010562:	2001      	movs	r0, #1
 8010564:	e7e7      	b.n	8010536 <_raise_r+0x12>
 8010566:	2400      	movs	r4, #0
 8010568:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801056c:	4628      	mov	r0, r5
 801056e:	4798      	blx	r3
 8010570:	2000      	movs	r0, #0
 8010572:	e7e0      	b.n	8010536 <_raise_r+0x12>

08010574 <_getpid_r>:
 8010574:	f7fe b863 	b.w	800e63e <_getpid>

08010578 <__sread>:
 8010578:	b510      	push	{r4, lr}
 801057a:	460c      	mov	r4, r1
 801057c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010580:	f7fd fb16 	bl	800dbb0 <_read_r>
 8010584:	2800      	cmp	r0, #0
 8010586:	bfab      	itete	ge
 8010588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801058a:	89a3      	ldrhlt	r3, [r4, #12]
 801058c:	181b      	addge	r3, r3, r0
 801058e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010592:	bfac      	ite	ge
 8010594:	6563      	strge	r3, [r4, #84]	; 0x54
 8010596:	81a3      	strhlt	r3, [r4, #12]
 8010598:	bd10      	pop	{r4, pc}

0801059a <__swrite>:
 801059a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059e:	461f      	mov	r7, r3
 80105a0:	898b      	ldrh	r3, [r1, #12]
 80105a2:	05db      	lsls	r3, r3, #23
 80105a4:	4605      	mov	r5, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	4616      	mov	r6, r2
 80105aa:	d505      	bpl.n	80105b8 <__swrite+0x1e>
 80105ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105b0:	2302      	movs	r3, #2
 80105b2:	2200      	movs	r2, #0
 80105b4:	f7fd faea 	bl	800db8c <_lseek_r>
 80105b8:	89a3      	ldrh	r3, [r4, #12]
 80105ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105c2:	81a3      	strh	r3, [r4, #12]
 80105c4:	4632      	mov	r2, r6
 80105c6:	463b      	mov	r3, r7
 80105c8:	4628      	mov	r0, r5
 80105ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105ce:	f7fd ba99 	b.w	800db04 <_write_r>

080105d2 <__sseek>:
 80105d2:	b510      	push	{r4, lr}
 80105d4:	460c      	mov	r4, r1
 80105d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105da:	f7fd fad7 	bl	800db8c <_lseek_r>
 80105de:	1c43      	adds	r3, r0, #1
 80105e0:	89a3      	ldrh	r3, [r4, #12]
 80105e2:	bf15      	itete	ne
 80105e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80105e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105ee:	81a3      	strheq	r3, [r4, #12]
 80105f0:	bf18      	it	ne
 80105f2:	81a3      	strhne	r3, [r4, #12]
 80105f4:	bd10      	pop	{r4, pc}

080105f6 <__sclose>:
 80105f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105fa:	f7fd ba95 	b.w	800db28 <_close_r>


zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_table>:
 8000000:	60 2e 00 20 21 47 00 08 e7 bd 00 08 d9 46 00 08     `.. !G.......F..
 8000010:	d9 46 00 08 d9 46 00 08 d9 46 00 08 00 00 00 00     .F...F...F......
	...
 800002c:	45 3e 00 08 d9 46 00 08 00 00 00 00 f1 3d 00 08     E>...F.......=..
 800003c:	a1 7a 00 08                                         .z..

08000040 <_irq_vector_table>:
 8000040:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000050:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000060:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000070:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000080:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000090:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000a0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000b0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000c0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000d0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000e0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 80000f0:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000100:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000110:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000120:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000130:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000140:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000150:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000160:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000170:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000180:	1d 3f 00 08 1d 3f 00 08 1d 3f 00 08 1d 3f 00 08     .?...?...?...?..
 8000190:	1d 3f 00 08                                         .?..

Disassembly of section text:

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 b80c 	b.w	8000a0c <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f8ce 	bl	8000b9c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_idiv0>:
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000ba8:	4615      	mov	r5, r2
 8000baa:	463c      	mov	r4, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 80c6 	bne.w	8000d40 <__udivmoddi4+0x1a4>
 8000bb4:	4282      	cmp	r2, r0
 8000bb6:	fab2 f782 	clz	r7, r2
 8000bba:	d946      	bls.n	8000c4a <__udivmoddi4+0xae>
 8000bbc:	b14f      	cbz	r7, 8000bd2 <__udivmoddi4+0x36>
 8000bbe:	f1c7 0e20 	rsb	lr, r7, #32
 8000bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	40bd      	lsls	r5, r7
 8000bcc:	ea4e 0c03 	orr.w	ip, lr, r3
 8000bd0:	40bc      	lsls	r4, r7
 8000bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bd6:	fa1f fe85 	uxth.w	lr, r5
 8000bda:	fbbc f9f8 	udiv	r9, ip, r8
 8000bde:	0c22      	lsrs	r2, r4, #16
 8000be0:	fb08 c319 	mls	r3, r8, r9, ip
 8000be4:	fb09 fa0e 	mul.w	sl, r9, lr
 8000be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000bec:	459a      	cmp	sl, r3
 8000bee:	d928      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x66>
 8000bf8:	459a      	cmp	sl, r3
 8000bfa:	d902      	bls.n	8000c02 <__udivmoddi4+0x66>
 8000bfc:	f1a9 0002 	sub.w	r0, r9, #2
 8000c00:	442b      	add	r3, r5
 8000c02:	eba3 030a 	sub.w	r3, r3, sl
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f2f8 	udiv	r2, r3, r8
 8000c0c:	fb08 3312 	mls	r3, r8, r2, r3
 8000c10:	fb02 fe0e 	mul.w	lr, r2, lr
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d914      	bls.n	8000c46 <__udivmoddi4+0xaa>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000c22:	d203      	bcs.n	8000c2c <__udivmoddi4+0x90>
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d901      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c28:	1e93      	subs	r3, r2, #2
 8000c2a:	442c      	add	r4, r5
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40fc      	lsrs	r4, r7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6034      	str	r4, [r6, #0]
 8000c3c:	6073      	str	r3, [r6, #4]
 8000c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c42:	4648      	mov	r0, r9
 8000c44:	e7dd      	b.n	8000c02 <__udivmoddi4+0x66>
 8000c46:	4613      	mov	r3, r2
 8000c48:	e7f0      	b.n	8000c2c <__udivmoddi4+0x90>
 8000c4a:	b902      	cbnz	r2, 8000c4e <__udivmoddi4+0xb2>
 8000c4c:	deff      	udf	#255	; 0xff
 8000c4e:	bb87      	cbnz	r7, 8000cb2 <__udivmoddi4+0x116>
 8000c50:	1a83      	subs	r3, r0, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	b2aa      	uxth	r2, r5
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	fb0c f802 	mul.w	r8, ip, r2
 8000c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c6c:	4598      	cmp	r8, r3
 8000c6e:	d963      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c76:	d204      	bcs.n	8000c82 <__udivmoddi4+0xe6>
 8000c78:	4598      	cmp	r8, r3
 8000c7a:	d902      	bls.n	8000c82 <__udivmoddi4+0xe6>
 8000c7c:	f1ac 0002 	sub.w	r0, ip, #2
 8000c80:	442b      	add	r3, r5
 8000c82:	eba3 0308 	sub.w	r3, r3, r8
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	fb0c f202 	mul.w	r2, ip, r2
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d94f      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8000ca2:	d204      	bcs.n	8000cae <__udivmoddi4+0x112>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	d902      	bls.n	8000cae <__udivmoddi4+0x112>
 8000ca8:	f1ac 0302 	sub.w	r3, ip, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	1aa4      	subs	r4, r4, r2
 8000cb0:	e7be      	b.n	8000c30 <__udivmoddi4+0x94>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	fa20 f80c 	lsr.w	r8, r0, ip
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
 8000cc2:	40bd      	lsls	r5, r7
 8000cc4:	ea4c 0203 	orr.w	r2, ip, r3
 8000cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ccc:	b2ab      	uxth	r3, r5
 8000cce:	fbb8 fcfe 	udiv	ip, r8, lr
 8000cd2:	0c11      	lsrs	r1, r2, #16
 8000cd4:	fb0e 801c 	mls	r0, lr, ip, r8
 8000cd8:	fb0c f903 	mul.w	r9, ip, r3
 8000cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 8000ce0:	4581      	cmp	r9, r0
 8000ce2:	fa04 f407 	lsl.w	r4, r4, r7
 8000ce6:	d923      	bls.n	8000d30 <__udivmoddi4+0x194>
 8000ce8:	1828      	adds	r0, r5, r0
 8000cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000cee:	d204      	bcs.n	8000cfa <__udivmoddi4+0x15e>
 8000cf0:	4581      	cmp	r9, r0
 8000cf2:	d902      	bls.n	8000cfa <__udivmoddi4+0x15e>
 8000cf4:	f1ac 0102 	sub.w	r1, ip, #2
 8000cf8:	4428      	add	r0, r5
 8000cfa:	eba0 0009 	sub.w	r0, r0, r9
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb0 fcfe 	udiv	ip, r0, lr
 8000d04:	fb0e 001c 	mls	r0, lr, ip, r0
 8000d08:	fb0c f803 	mul.w	r8, ip, r3
 8000d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8000d10:	4598      	cmp	r8, r3
 8000d12:	d90f      	bls.n	8000d34 <__udivmoddi4+0x198>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000d1a:	d204      	bcs.n	8000d26 <__udivmoddi4+0x18a>
 8000d1c:	4598      	cmp	r8, r3
 8000d1e:	d902      	bls.n	8000d26 <__udivmoddi4+0x18a>
 8000d20:	f1ac 0202 	sub.w	r2, ip, #2
 8000d24:	442b      	add	r3, r5
 8000d26:	eba3 0308 	sub.w	r3, r3, r8
 8000d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d2e:	e791      	b.n	8000c54 <__udivmoddi4+0xb8>
 8000d30:	4661      	mov	r1, ip
 8000d32:	e7e2      	b.n	8000cfa <__udivmoddi4+0x15e>
 8000d34:	4662      	mov	r2, ip
 8000d36:	e7f6      	b.n	8000d26 <__udivmoddi4+0x18a>
 8000d38:	4660      	mov	r0, ip
 8000d3a:	e7a2      	b.n	8000c82 <__udivmoddi4+0xe6>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	e7b6      	b.n	8000cae <__udivmoddi4+0x112>
 8000d40:	4283      	cmp	r3, r0
 8000d42:	d905      	bls.n	8000d50 <__udivmoddi4+0x1b4>
 8000d44:	b10e      	cbz	r6, 8000d4a <__udivmoddi4+0x1ae>
 8000d46:	e9c6 7000 	strd	r7, r0, [r6]
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e776      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d50:	fab3 f183 	clz	r1, r3
 8000d54:	b981      	cbnz	r1, 8000d78 <__udivmoddi4+0x1dc>
 8000d56:	4283      	cmp	r3, r0
 8000d58:	d301      	bcc.n	8000d5e <__udivmoddi4+0x1c2>
 8000d5a:	42ba      	cmp	r2, r7
 8000d5c:	d80a      	bhi.n	8000d74 <__udivmoddi4+0x1d8>
 8000d5e:	1abc      	subs	r4, r7, r2
 8000d60:	eb60 0303 	sbc.w	r3, r0, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	469c      	mov	ip, r3
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d068      	beq.n	8000e3e <__udivmoddi4+0x2a2>
 8000d6c:	e9c6 4c00 	strd	r4, ip, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e764      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e7f7      	b.n	8000d68 <__udivmoddi4+0x1cc>
 8000d78:	f1c1 0c20 	rsb	ip, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f40c 	lsr.w	r4, r2, ip
 8000d82:	431c      	orrs	r4, r3
 8000d84:	fa02 f501 	lsl.w	r5, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	fa27 f20c 	lsr.w	r2, r7, ip
 8000d90:	fa20 fb0c 	lsr.w	fp, r0, ip
 8000d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	fbbb f8f9 	udiv	r8, fp, r9
 8000d9e:	fa1f fe84 	uxth.w	lr, r4
 8000da2:	fb09 bb18 	mls	fp, r9, r8, fp
 8000da6:	0c1a      	lsrs	r2, r3, #16
 8000da8:	fb08 fa0e 	mul.w	sl, r8, lr
 8000dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8000db0:	4592      	cmp	sl, r2
 8000db2:	fa07 f701 	lsl.w	r7, r7, r1
 8000db6:	d93e      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000db8:	18a2      	adds	r2, r4, r2
 8000dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dbe:	d204      	bcs.n	8000dca <__udivmoddi4+0x22e>
 8000dc0:	4592      	cmp	sl, r2
 8000dc2:	d902      	bls.n	8000dca <__udivmoddi4+0x22e>
 8000dc4:	f1a8 0002 	sub.w	r0, r8, #2
 8000dc8:	4422      	add	r2, r4
 8000dca:	eba2 020a 	sub.w	r2, r2, sl
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	fbb2 f8f9 	udiv	r8, r2, r9
 8000dd4:	fb09 2218 	mls	r2, r9, r8, r2
 8000dd8:	fb08 fe0e 	mul.w	lr, r8, lr
 8000ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000de0:	4596      	cmp	lr, r2
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	18a2      	adds	r2, r4, r2
 8000de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8000dea:	d204      	bcs.n	8000df6 <__udivmoddi4+0x25a>
 8000dec:	4596      	cmp	lr, r2
 8000dee:	d902      	bls.n	8000df6 <__udivmoddi4+0x25a>
 8000df0:	f1a8 0302 	sub.w	r3, r8, #2
 8000df4:	4422      	add	r2, r4
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	fba0 9305 	umull	r9, r3, r0, r5
 8000dfe:	eba2 020e 	sub.w	r2, r2, lr
 8000e02:	429a      	cmp	r2, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	4698      	mov	r8, r3
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0x274>
 8000e0a:	d106      	bne.n	8000e1a <__udivmoddi4+0x27e>
 8000e0c:	454f      	cmp	r7, r9
 8000e0e:	d204      	bcs.n	8000e1a <__udivmoddi4+0x27e>
 8000e10:	ebb9 0e05 	subs.w	lr, r9, r5
 8000e14:	eb63 0804 	sbc.w	r8, r3, r4
 8000e18:	3801      	subs	r0, #1
 8000e1a:	b186      	cbz	r6, 8000e3e <__udivmoddi4+0x2a2>
 8000e1c:	ebb7 030e 	subs.w	r3, r7, lr
 8000e20:	eb62 0708 	sbc.w	r7, r2, r8
 8000e24:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e28:	40cb      	lsrs	r3, r1
 8000e2a:	ea4c 0303 	orr.w	r3, ip, r3
 8000e2e:	40cf      	lsrs	r7, r1
 8000e30:	e9c6 3700 	strd	r3, r7, [r6]
 8000e34:	e79c      	b.n	8000d70 <__udivmoddi4+0x1d4>
 8000e36:	4640      	mov	r0, r8
 8000e38:	e7c7      	b.n	8000dca <__udivmoddi4+0x22e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	e7db      	b.n	8000df6 <__udivmoddi4+0x25a>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xa2>

08000e42 <strcmp>:
 8000e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	2a01      	cmp	r2, #1
 8000e4c:	bf28      	it	cs
 8000e4e:	429a      	cmpcs	r2, r3
 8000e50:	d0f7      	beq.n	8000e42 <strcmp>
 8000e52:	1ad0      	subs	r0, r2, r3
 8000e54:	4770      	bx	lr

08000e56 <strlen>:
 8000e56:	4603      	mov	r3, r0
 8000e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d1fb      	bne.n	8000e58 <strlen+0x2>
 8000e60:	1a18      	subs	r0, r3, r0
 8000e62:	3801      	subs	r0, #1
 8000e64:	4770      	bx	lr
	...

08000e68 <_dtoa_r>:
 8000e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000e6e:	b099      	sub	sp, #100	; 0x64
 8000e70:	4616      	mov	r6, r2
 8000e72:	461f      	mov	r7, r3
 8000e74:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000e78:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8000e7c:	4605      	mov	r5, r0
 8000e7e:	b974      	cbnz	r4, 8000e9e <_dtoa_r+0x36>
 8000e80:	2010      	movs	r0, #16
 8000e82:	f008 ff3b 	bl	8009cfc <malloc>
 8000e86:	4602      	mov	r2, r0
 8000e88:	6268      	str	r0, [r5, #36]	; 0x24
 8000e8a:	b920      	cbnz	r0, 8000e96 <_dtoa_r+0x2e>
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <_dtoa_r+0x2c8>)
 8000e8e:	21ea      	movs	r1, #234	; 0xea
 8000e90:	48a8      	ldr	r0, [pc, #672]	; (8001134 <_dtoa_r+0x2cc>)
 8000e92:	f009 fe63 	bl	800ab5c <__assert_func>
 8000e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8000e9a:	6004      	str	r4, [r0, #0]
 8000e9c:	60c4      	str	r4, [r0, #12]
 8000e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	b151      	cbz	r1, 8000eba <_dtoa_r+0x52>
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	604a      	str	r2, [r1, #4]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	608b      	str	r3, [r1, #8]
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f009 fb80 	bl	800a5b4 <_Bfree>
 8000eb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	1e3b      	subs	r3, r7, #0
 8000ebc:	bfb9      	ittee	lt
 8000ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	9305      	strlt	r3, [sp, #20]
 8000ec4:	2300      	movge	r3, #0
 8000ec6:	f8c8 3000 	strge.w	r3, [r8]
 8000eca:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8000ece:	4b9a      	ldr	r3, [pc, #616]	; (8001138 <_dtoa_r+0x2d0>)
 8000ed0:	bfbc      	itt	lt
 8000ed2:	2201      	movlt	r2, #1
 8000ed4:	f8c8 2000 	strlt.w	r2, [r8]
 8000ed8:	ea33 0309 	bics.w	r3, r3, r9
 8000edc:	d119      	bne.n	8000f12 <_dtoa_r+0xaa>
 8000ede:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8000eea:	4333      	orrs	r3, r6
 8000eec:	f000 8580 	beq.w	80019f0 <_dtoa_r+0xb88>
 8000ef0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000ef2:	b953      	cbnz	r3, 8000f0a <_dtoa_r+0xa2>
 8000ef4:	4b91      	ldr	r3, [pc, #580]	; (800113c <_dtoa_r+0x2d4>)
 8000ef6:	e022      	b.n	8000f3e <_dtoa_r+0xd6>
 8000ef8:	4b91      	ldr	r3, [pc, #580]	; (8001140 <_dtoa_r+0x2d8>)
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	3308      	adds	r3, #8
 8000efe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	9803      	ldr	r0, [sp, #12]
 8000f04:	b019      	add	sp, #100	; 0x64
 8000f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <_dtoa_r+0x2d4>)
 8000f0c:	9303      	str	r3, [sp, #12]
 8000f0e:	3303      	adds	r3, #3
 8000f10:	e7f5      	b.n	8000efe <_dtoa_r+0x96>
 8000f12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8000f16:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8000f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	f7ff fdcb 	bl	8000abc <__aeabi_dcmpeq>
 8000f26:	4680      	mov	r8, r0
 8000f28:	b158      	cbz	r0, 8000f42 <_dtoa_r+0xda>
 8000f2a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8559 	beq.w	80019ea <_dtoa_r+0xb82>
 8000f38:	4882      	ldr	r0, [pc, #520]	; (8001144 <_dtoa_r+0x2dc>)
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e7df      	b.n	8000f02 <_dtoa_r+0x9a>
 8000f42:	ab16      	add	r3, sp, #88	; 0x58
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	ab17      	add	r3, sp, #92	; 0x5c
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000f50:	f009 fda8 	bl	800aaa4 <__d2b>
 8000f54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8000f58:	4683      	mov	fp, r0
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d07e      	beq.n	800105c <_dtoa_r+0x1f4>
 8000f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000f60:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8000f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000f6c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8000f70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8000f74:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8000f78:	4b73      	ldr	r3, [pc, #460]	; (8001148 <_dtoa_r+0x2e0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f7ff f964 	bl	8000248 <__aeabi_dsub>
 8000f80:	a365      	add	r3, pc, #404	; (adr r3, 8001118 <_dtoa_r+0x2b0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb17 	bl	80005b8 <__aeabi_dmul>
 8000f8a:	a365      	add	r3, pc, #404	; (adr r3, 8001120 <_dtoa_r+0x2b8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff f95c 	bl	800024c <__adddf3>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4620      	mov	r0, r4
 8000f98:	460f      	mov	r7, r1
 8000f9a:	f7ff faa3 	bl	80004e4 <__aeabi_i2d>
 8000f9e:	a362      	add	r3, pc, #392	; (adr r3, 8001128 <_dtoa_r+0x2c0>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fb08 	bl	80005b8 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4630      	mov	r0, r6
 8000fae:	4639      	mov	r1, r7
 8000fb0:	f7ff f94c 	bl	800024c <__adddf3>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	460f      	mov	r7, r1
 8000fb8:	f7ff fdc8 	bl	8000b4c <__aeabi_d2iz>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4682      	mov	sl, r0
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	f7ff fd83 	bl	8000ad0 <__aeabi_dcmplt>
 8000fca:	b148      	cbz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fcc:	4650      	mov	r0, sl
 8000fce:	f7ff fa89 	bl	80004e4 <__aeabi_i2d>
 8000fd2:	4632      	mov	r2, r6
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	f7ff fd71 	bl	8000abc <__aeabi_dcmpeq>
 8000fda:	b908      	cbnz	r0, 8000fe0 <_dtoa_r+0x178>
 8000fdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000fe0:	f1ba 0f16 	cmp.w	sl, #22
 8000fe4:	d857      	bhi.n	8001096 <_dtoa_r+0x22e>
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <_dtoa_r+0x2e4>)
 8000fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8000ff4:	f7ff fd6c 	bl	8000ad0 <__aeabi_dcmplt>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d04e      	beq.n	800109a <_dtoa_r+0x232>
 8000ffc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001000:	2300      	movs	r3, #0
 8001002:	930f      	str	r3, [sp, #60]	; 0x3c
 8001004:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001006:	1b1c      	subs	r4, r3, r4
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	9309      	str	r3, [sp, #36]	; 0x24
 800100c:	bf45      	ittet	mi
 800100e:	f1c4 0301 	rsbmi	r3, r4, #1
 8001012:	9306      	strmi	r3, [sp, #24]
 8001014:	2300      	movpl	r3, #0
 8001016:	2300      	movmi	r3, #0
 8001018:	bf4c      	ite	mi
 800101a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800101c:	9306      	strpl	r3, [sp, #24]
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	db3c      	blt.n	800109e <_dtoa_r+0x236>
 8001024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001026:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800102a:	4453      	add	r3, sl
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
 800102e:	2300      	movs	r3, #0
 8001030:	930a      	str	r3, [sp, #40]	; 0x28
 8001032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001034:	2b09      	cmp	r3, #9
 8001036:	f200 808d 	bhi.w	8001154 <_dtoa_r+0x2ec>
 800103a:	2b05      	cmp	r3, #5
 800103c:	bfc4      	itt	gt
 800103e:	3b04      	subgt	r3, #4
 8001040:	9322      	strgt	r3, [sp, #136]	; 0x88
 8001042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001044:	f1a3 0302 	sub.w	r3, r3, #2
 8001048:	bfcc      	ite	gt
 800104a:	2400      	movgt	r4, #0
 800104c:	2401      	movle	r4, #1
 800104e:	2b03      	cmp	r3, #3
 8001050:	f200 808c 	bhi.w	800116c <_dtoa_r+0x304>
 8001054:	e8df f003 	tbb	[pc, r3]
 8001058:	5b4d4f2d 	.word	0x5b4d4f2d
 800105c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8001060:	441c      	add	r4, r3
 8001062:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8001066:	2b20      	cmp	r3, #32
 8001068:	bfc3      	ittte	gt
 800106a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800106e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8001072:	fa09 f303 	lslgt.w	r3, r9, r3
 8001076:	f1c3 0320 	rsble	r3, r3, #32
 800107a:	bfc6      	itte	gt
 800107c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8001080:	4318      	orrgt	r0, r3
 8001082:	fa06 f003 	lslle.w	r0, r6, r3
 8001086:	f7ff fa1d 	bl	80004c4 <__aeabi_ui2d>
 800108a:	2301      	movs	r3, #1
 800108c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001090:	3c01      	subs	r4, #1
 8001092:	9313      	str	r3, [sp, #76]	; 0x4c
 8001094:	e770      	b.n	8000f78 <_dtoa_r+0x110>
 8001096:	2301      	movs	r3, #1
 8001098:	e7b3      	b.n	8001002 <_dtoa_r+0x19a>
 800109a:	900f      	str	r0, [sp, #60]	; 0x3c
 800109c:	e7b2      	b.n	8001004 <_dtoa_r+0x19c>
 800109e:	9b06      	ldr	r3, [sp, #24]
 80010a0:	eba3 030a 	sub.w	r3, r3, sl
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	f1ca 0300 	rsb	r3, sl, #0
 80010aa:	930a      	str	r3, [sp, #40]	; 0x28
 80010ac:	2300      	movs	r3, #0
 80010ae:	930e      	str	r3, [sp, #56]	; 0x38
 80010b0:	e7bf      	b.n	8001032 <_dtoa_r+0x1ca>
 80010b2:	2300      	movs	r3, #0
 80010b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80010b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc5a      	bgt.n	8001172 <_dtoa_r+0x30a>
 80010bc:	f04f 0901 	mov.w	r9, #1
 80010c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80010c4:	464b      	mov	r3, r9
 80010c6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80010ca:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80010cc:	2200      	movs	r2, #0
 80010ce:	6042      	str	r2, [r0, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	f102 0614 	add.w	r6, r2, #20
 80010d6:	429e      	cmp	r6, r3
 80010d8:	6841      	ldr	r1, [r0, #4]
 80010da:	d950      	bls.n	800117e <_dtoa_r+0x316>
 80010dc:	4628      	mov	r0, r5
 80010de:	f009 fa29 	bl	800a534 <_Balloc>
 80010e2:	9003      	str	r0, [sp, #12]
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d14e      	bne.n	8001186 <_dtoa_r+0x31e>
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <_dtoa_r+0x2e8>)
 80010ea:	4602      	mov	r2, r0
 80010ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f0:	e6ce      	b.n	8000e90 <_dtoa_r+0x28>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e7de      	b.n	80010b4 <_dtoa_r+0x24c>
 80010f6:	2300      	movs	r3, #0
 80010f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80010fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80010fc:	eb0a 0903 	add.w	r9, sl, r3
 8001100:	f109 0301 	add.w	r3, r9, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	9308      	str	r3, [sp, #32]
 8001108:	bfb8      	it	lt
 800110a:	2301      	movlt	r3, #1
 800110c:	e7dd      	b.n	80010ca <_dtoa_r+0x262>
 800110e:	2301      	movs	r3, #1
 8001110:	e7f2      	b.n	80010f8 <_dtoa_r+0x290>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	636f4361 	.word	0x636f4361
 800111c:	3fd287a7 	.word	0x3fd287a7
 8001120:	8b60c8b3 	.word	0x8b60c8b3
 8001124:	3fc68a28 	.word	0x3fc68a28
 8001128:	509f79fb 	.word	0x509f79fb
 800112c:	3fd34413 	.word	0x3fd34413
 8001130:	0800f3d6 	.word	0x0800f3d6
 8001134:	0800f3ed 	.word	0x0800f3ed
 8001138:	7ff00000 	.word	0x7ff00000
 800113c:	0800f3d2 	.word	0x0800f3d2
 8001140:	0800f3c9 	.word	0x0800f3c9
 8001144:	0800f3a6 	.word	0x0800f3a6
 8001148:	3ff80000 	.word	0x3ff80000
 800114c:	0800e120 	.word	0x0800e120
 8001150:	0800f447 	.word	0x0800f447
 8001154:	2401      	movs	r4, #1
 8001156:	2300      	movs	r3, #0
 8001158:	9322      	str	r3, [sp, #136]	; 0x88
 800115a:	940b      	str	r4, [sp, #44]	; 0x2c
 800115c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8001160:	2200      	movs	r2, #0
 8001162:	f8cd 9020 	str.w	r9, [sp, #32]
 8001166:	2312      	movs	r3, #18
 8001168:	9223      	str	r2, [sp, #140]	; 0x8c
 800116a:	e7ae      	b.n	80010ca <_dtoa_r+0x262>
 800116c:	2301      	movs	r3, #1
 800116e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001170:	e7f4      	b.n	800115c <_dtoa_r+0x2f4>
 8001172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001176:	f8cd 9020 	str.w	r9, [sp, #32]
 800117a:	464b      	mov	r3, r9
 800117c:	e7a5      	b.n	80010ca <_dtoa_r+0x262>
 800117e:	3101      	adds	r1, #1
 8001180:	6041      	str	r1, [r0, #4]
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	e7a5      	b.n	80010d2 <_dtoa_r+0x26a>
 8001186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	9b08      	ldr	r3, [sp, #32]
 800118e:	2b0e      	cmp	r3, #14
 8001190:	f200 80a8 	bhi.w	80012e4 <_dtoa_r+0x47c>
 8001194:	2c00      	cmp	r4, #0
 8001196:	f000 80a5 	beq.w	80012e4 <_dtoa_r+0x47c>
 800119a:	f1ba 0f00 	cmp.w	sl, #0
 800119e:	dd34      	ble.n	800120a <_dtoa_r+0x3a2>
 80011a0:	4a9a      	ldr	r2, [pc, #616]	; (800140c <_dtoa_r+0x5a4>)
 80011a2:	f00a 030f 	and.w	r3, sl, #15
 80011a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80011aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ae:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80011b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80011b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80011ba:	d016      	beq.n	80011ea <_dtoa_r+0x382>
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <_dtoa_r+0x5a8>)
 80011be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80011c6:	f7ff fb21 	bl	800080c <__aeabi_ddiv>
 80011ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011ce:	f004 040f 	and.w	r4, r4, #15
 80011d2:	2703      	movs	r7, #3
 80011d4:	4e8e      	ldr	r6, [pc, #568]	; (8001410 <_dtoa_r+0x5a8>)
 80011d6:	b954      	cbnz	r4, 80011ee <_dtoa_r+0x386>
 80011d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80011dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80011e0:	f7ff fb14 	bl	800080c <__aeabi_ddiv>
 80011e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011e8:	e029      	b.n	800123e <_dtoa_r+0x3d6>
 80011ea:	2702      	movs	r7, #2
 80011ec:	e7f2      	b.n	80011d4 <_dtoa_r+0x36c>
 80011ee:	07e1      	lsls	r1, r4, #31
 80011f0:	d508      	bpl.n	8001204 <_dtoa_r+0x39c>
 80011f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80011f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80011fa:	f7ff f9dd 	bl	80005b8 <__aeabi_dmul>
 80011fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001202:	3701      	adds	r7, #1
 8001204:	1064      	asrs	r4, r4, #1
 8001206:	3608      	adds	r6, #8
 8001208:	e7e5      	b.n	80011d6 <_dtoa_r+0x36e>
 800120a:	f000 80a5 	beq.w	8001358 <_dtoa_r+0x4f0>
 800120e:	f1ca 0400 	rsb	r4, sl, #0
 8001212:	4b7e      	ldr	r3, [pc, #504]	; (800140c <_dtoa_r+0x5a4>)
 8001214:	4e7e      	ldr	r6, [pc, #504]	; (8001410 <_dtoa_r+0x5a8>)
 8001216:	f004 020f 	and.w	r2, r4, #15
 800121a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001226:	f7ff f9c7 	bl	80005b8 <__aeabi_dmul>
 800122a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800122e:	1124      	asrs	r4, r4, #4
 8001230:	2300      	movs	r3, #0
 8001232:	2702      	movs	r7, #2
 8001234:	2c00      	cmp	r4, #0
 8001236:	f040 8084 	bne.w	8001342 <_dtoa_r+0x4da>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1d2      	bne.n	80011e4 <_dtoa_r+0x37c>
 800123e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 808b 	beq.w	800135c <_dtoa_r+0x4f4>
 8001246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800124a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800124e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <_dtoa_r+0x5ac>)
 8001254:	2200      	movs	r2, #0
 8001256:	f7ff fc3b 	bl	8000ad0 <__aeabi_dcmplt>
 800125a:	2800      	cmp	r0, #0
 800125c:	d07e      	beq.n	800135c <_dtoa_r+0x4f4>
 800125e:	9b08      	ldr	r3, [sp, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d07b      	beq.n	800135c <_dtoa_r+0x4f4>
 8001264:	f1b9 0f00 	cmp.w	r9, #0
 8001268:	dd38      	ble.n	80012dc <_dtoa_r+0x474>
 800126a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800126e:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <_dtoa_r+0x5b0>)
 8001270:	2200      	movs	r2, #0
 8001272:	f7ff f9a1 	bl	80005b8 <__aeabi_dmul>
 8001276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800127a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 800127e:	3701      	adds	r7, #1
 8001280:	464c      	mov	r4, r9
 8001282:	4638      	mov	r0, r7
 8001284:	f7ff f92e 	bl	80004e4 <__aeabi_i2d>
 8001288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800128c:	f7ff f994 	bl	80005b8 <__aeabi_dmul>
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <_dtoa_r+0x5b4>)
 8001292:	2200      	movs	r2, #0
 8001294:	f7fe ffda 	bl	800024c <__adddf3>
 8001298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800129c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80012a0:	9611      	str	r6, [sp, #68]	; 0x44
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d15d      	bne.n	8001362 <_dtoa_r+0x4fa>
 80012a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012aa:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <_dtoa_r+0x5b8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f7fe ffcb 	bl	8000248 <__aeabi_dsub>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012bc:	4633      	mov	r3, r6
 80012be:	f7ff fc25 	bl	8000b0c <__aeabi_dcmpgt>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f040 829c 	bne.w	8001800 <_dtoa_r+0x998>
 80012c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80012cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80012ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80012d2:	f7ff fbfd 	bl	8000ad0 <__aeabi_dcmplt>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	f040 8290 	bne.w	80017fc <_dtoa_r+0x994>
 80012dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80012e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f2c0 8152 	blt.w	8001590 <_dtoa_r+0x728>
 80012ec:	f1ba 0f0e 	cmp.w	sl, #14
 80012f0:	f300 814e 	bgt.w	8001590 <_dtoa_r+0x728>
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <_dtoa_r+0x5a4>)
 80012f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80012fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001304:	2b00      	cmp	r3, #0
 8001306:	f280 80db 	bge.w	80014c0 <_dtoa_r+0x658>
 800130a:	9b08      	ldr	r3, [sp, #32]
 800130c:	2b00      	cmp	r3, #0
 800130e:	f300 80d7 	bgt.w	80014c0 <_dtoa_r+0x658>
 8001312:	f040 8272 	bne.w	80017fa <_dtoa_r+0x992>
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <_dtoa_r+0x5b8>)
 8001318:	2200      	movs	r2, #0
 800131a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800131e:	f7ff f94b 	bl	80005b8 <__aeabi_dmul>
 8001322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001326:	f7ff fbe7 	bl	8000af8 <__aeabi_dcmpge>
 800132a:	9c08      	ldr	r4, [sp, #32]
 800132c:	4626      	mov	r6, r4
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 8248 	bne.w	80017c4 <_dtoa_r+0x95c>
 8001334:	9f03      	ldr	r7, [sp, #12]
 8001336:	2331      	movs	r3, #49	; 0x31
 8001338:	f807 3b01 	strb.w	r3, [r7], #1
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	e244      	b.n	80017cc <_dtoa_r+0x964>
 8001342:	07e2      	lsls	r2, r4, #31
 8001344:	d505      	bpl.n	8001352 <_dtoa_r+0x4ea>
 8001346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800134a:	f7ff f935 	bl	80005b8 <__aeabi_dmul>
 800134e:	3701      	adds	r7, #1
 8001350:	2301      	movs	r3, #1
 8001352:	1064      	asrs	r4, r4, #1
 8001354:	3608      	adds	r6, #8
 8001356:	e76d      	b.n	8001234 <_dtoa_r+0x3cc>
 8001358:	2702      	movs	r7, #2
 800135a:	e770      	b.n	800123e <_dtoa_r+0x3d6>
 800135c:	9c08      	ldr	r4, [sp, #32]
 800135e:	46d0      	mov	r8, sl
 8001360:	e78f      	b.n	8001282 <_dtoa_r+0x41a>
 8001362:	9903      	ldr	r1, [sp, #12]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <_dtoa_r+0x5a4>)
 8001366:	4421      	add	r1, r4
 8001368:	9112      	str	r1, [sp, #72]	; 0x48
 800136a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800136c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8001374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8001378:	2900      	cmp	r1, #0
 800137a:	d055      	beq.n	8001428 <_dtoa_r+0x5c0>
 800137c:	4929      	ldr	r1, [pc, #164]	; (8001424 <_dtoa_r+0x5bc>)
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fa44 	bl	800080c <__aeabi_ddiv>
 8001384:	463b      	mov	r3, r7
 8001386:	4632      	mov	r2, r6
 8001388:	f7fe ff5e 	bl	8000248 <__aeabi_dsub>
 800138c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001390:	9f03      	ldr	r7, [sp, #12]
 8001392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001396:	f7ff fbd9 	bl	8000b4c <__aeabi_d2iz>
 800139a:	4604      	mov	r4, r0
 800139c:	f7ff f8a2 	bl	80004e4 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80013a8:	f7fe ff4e 	bl	8000248 <__aeabi_dsub>
 80013ac:	3430      	adds	r4, #48	; 0x30
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b6:	f807 4b01 	strb.w	r4, [r7], #1
 80013ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013be:	f7ff fb87 	bl	8000ad0 <__aeabi_dcmplt>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d174      	bne.n	80014b0 <_dtoa_r+0x648>
 80013c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013ca:	4912      	ldr	r1, [pc, #72]	; (8001414 <_dtoa_r+0x5ac>)
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7fe ff3b 	bl	8000248 <__aeabi_dsub>
 80013d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80013d6:	f7ff fb7b 	bl	8000ad0 <__aeabi_dcmplt>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 80b7 	bne.w	800154e <_dtoa_r+0x6e6>
 80013e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80013e2:	429f      	cmp	r7, r3
 80013e4:	f43f af7a 	beq.w	80012dc <_dtoa_r+0x474>
 80013e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <_dtoa_r+0x5b0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f7ff f8e2 	bl	80005b8 <__aeabi_dmul>
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_dtoa_r+0x5b0>)
 80013f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80013fa:	2200      	movs	r2, #0
 80013fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001400:	f7ff f8da 	bl	80005b8 <__aeabi_dmul>
 8001404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001408:	e7c3      	b.n	8001392 <_dtoa_r+0x52a>
 800140a:	bf00      	nop
 800140c:	0800e120 	.word	0x0800e120
 8001410:	0800e0f8 	.word	0x0800e0f8
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	40240000 	.word	0x40240000
 800141c:	401c0000 	.word	0x401c0000
 8001420:	40140000 	.word	0x40140000
 8001424:	3fe00000 	.word	0x3fe00000
 8001428:	4630      	mov	r0, r6
 800142a:	4639      	mov	r1, r7
 800142c:	f7ff f8c4 	bl	80005b8 <__aeabi_dmul>
 8001430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001436:	9c03      	ldr	r4, [sp, #12]
 8001438:	9314      	str	r3, [sp, #80]	; 0x50
 800143a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800143e:	f7ff fb85 	bl	8000b4c <__aeabi_d2iz>
 8001442:	9015      	str	r0, [sp, #84]	; 0x54
 8001444:	f7ff f84e 	bl	80004e4 <__aeabi_i2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001450:	f7fe fefa 	bl	8000248 <__aeabi_dsub>
 8001454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001456:	3330      	adds	r3, #48	; 0x30
 8001458:	f804 3b01 	strb.w	r3, [r4], #1
 800145c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800145e:	429c      	cmp	r4, r3
 8001460:	4606      	mov	r6, r0
 8001462:	460f      	mov	r7, r1
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	d124      	bne.n	80014b4 <_dtoa_r+0x64c>
 800146a:	4ba4      	ldr	r3, [pc, #656]	; (80016fc <_dtoa_r+0x894>)
 800146c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001470:	f7fe feec 	bl	800024c <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4630      	mov	r0, r6
 800147a:	4639      	mov	r1, r7
 800147c:	f7ff fb46 	bl	8000b0c <__aeabi_dcmpgt>
 8001480:	2800      	cmp	r0, #0
 8001482:	d163      	bne.n	800154c <_dtoa_r+0x6e4>
 8001484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001488:	499c      	ldr	r1, [pc, #624]	; (80016fc <_dtoa_r+0x894>)
 800148a:	2000      	movs	r0, #0
 800148c:	f7fe fedc 	bl	8000248 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4630      	mov	r0, r6
 8001496:	4639      	mov	r1, r7
 8001498:	f7ff fb1a 	bl	8000ad0 <__aeabi_dcmplt>
 800149c:	2800      	cmp	r0, #0
 800149e:	f43f af1d 	beq.w	80012dc <_dtoa_r+0x474>
 80014a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80014a4:	1e7b      	subs	r3, r7, #1
 80014a6:	9314      	str	r3, [sp, #80]	; 0x50
 80014a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80014ac:	2b30      	cmp	r3, #48	; 0x30
 80014ae:	d0f8      	beq.n	80014a2 <_dtoa_r+0x63a>
 80014b0:	46c2      	mov	sl, r8
 80014b2:	e03b      	b.n	800152c <_dtoa_r+0x6c4>
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <_dtoa_r+0x898>)
 80014b6:	f7ff f87f 	bl	80005b8 <__aeabi_dmul>
 80014ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80014be:	e7bc      	b.n	800143a <_dtoa_r+0x5d2>
 80014c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80014c4:	9f03      	ldr	r7, [sp, #12]
 80014c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014ca:	4640      	mov	r0, r8
 80014cc:	4649      	mov	r1, r9
 80014ce:	f7ff f99d 	bl	800080c <__aeabi_ddiv>
 80014d2:	f7ff fb3b 	bl	8000b4c <__aeabi_d2iz>
 80014d6:	4604      	mov	r4, r0
 80014d8:	f7ff f804 	bl	80004e4 <__aeabi_i2d>
 80014dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80014e0:	f7ff f86a 	bl	80005b8 <__aeabi_dmul>
 80014e4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4640      	mov	r0, r8
 80014ee:	4649      	mov	r1, r9
 80014f0:	f7fe feaa 	bl	8000248 <__aeabi_dsub>
 80014f4:	f807 6b01 	strb.w	r6, [r7], #1
 80014f8:	9e03      	ldr	r6, [sp, #12]
 80014fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80014fe:	1bbe      	subs	r6, r7, r6
 8001500:	45b4      	cmp	ip, r6
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	d136      	bne.n	8001576 <_dtoa_r+0x70e>
 8001508:	f7fe fea0 	bl	800024c <__adddf3>
 800150c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	f7ff fafa 	bl	8000b0c <__aeabi_dcmpgt>
 8001518:	bb58      	cbnz	r0, 8001572 <_dtoa_r+0x70a>
 800151a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff facb 	bl	8000abc <__aeabi_dcmpeq>
 8001526:	b108      	cbz	r0, 800152c <_dtoa_r+0x6c4>
 8001528:	07e1      	lsls	r1, r4, #31
 800152a:	d422      	bmi.n	8001572 <_dtoa_r+0x70a>
 800152c:	4628      	mov	r0, r5
 800152e:	4659      	mov	r1, fp
 8001530:	f009 f840 	bl	800a5b4 <_Bfree>
 8001534:	2300      	movs	r3, #0
 8001536:	703b      	strb	r3, [r7, #0]
 8001538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800153a:	f10a 0001 	add.w	r0, sl, #1
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001542:	2b00      	cmp	r3, #0
 8001544:	f43f acdd 	beq.w	8000f02 <_dtoa_r+0x9a>
 8001548:	601f      	str	r7, [r3, #0]
 800154a:	e4da      	b.n	8000f02 <_dtoa_r+0x9a>
 800154c:	4627      	mov	r7, r4
 800154e:	463b      	mov	r3, r7
 8001550:	461f      	mov	r7, r3
 8001552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8001556:	2a39      	cmp	r2, #57	; 0x39
 8001558:	d107      	bne.n	800156a <_dtoa_r+0x702>
 800155a:	9a03      	ldr	r2, [sp, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1f7      	bne.n	8001550 <_dtoa_r+0x6e8>
 8001560:	9903      	ldr	r1, [sp, #12]
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	f108 0801 	add.w	r8, r8, #1
 8001568:	700a      	strb	r2, [r1, #0]
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	3201      	adds	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e79e      	b.n	80014b0 <_dtoa_r+0x648>
 8001572:	46d0      	mov	r8, sl
 8001574:	e7eb      	b.n	800154e <_dtoa_r+0x6e6>
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <_dtoa_r+0x898>)
 8001578:	2200      	movs	r2, #0
 800157a:	f7ff f81d 	bl	80005b8 <__aeabi_dmul>
 800157e:	2200      	movs	r2, #0
 8001580:	2300      	movs	r3, #0
 8001582:	4680      	mov	r8, r0
 8001584:	4689      	mov	r9, r1
 8001586:	f7ff fa99 	bl	8000abc <__aeabi_dcmpeq>
 800158a:	2800      	cmp	r0, #0
 800158c:	d09b      	beq.n	80014c6 <_dtoa_r+0x65e>
 800158e:	e7cd      	b.n	800152c <_dtoa_r+0x6c4>
 8001590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001592:	2a00      	cmp	r2, #0
 8001594:	f000 80d0 	beq.w	8001738 <_dtoa_r+0x8d0>
 8001598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800159a:	2a01      	cmp	r2, #1
 800159c:	f300 80b2 	bgt.w	8001704 <_dtoa_r+0x89c>
 80015a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <_dtoa_r+0x88c>
 80015a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80015ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80015ae:	9f06      	ldr	r7, [sp, #24]
 80015b0:	9a06      	ldr	r2, [sp, #24]
 80015b2:	441a      	add	r2, r3
 80015b4:	9206      	str	r2, [sp, #24]
 80015b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015b8:	2101      	movs	r1, #1
 80015ba:	441a      	add	r2, r3
 80015bc:	4628      	mov	r0, r5
 80015be:	9209      	str	r2, [sp, #36]	; 0x24
 80015c0:	f009 f860 	bl	800a684 <__i2b>
 80015c4:	4606      	mov	r6, r0
 80015c6:	2f00      	cmp	r7, #0
 80015c8:	dd0c      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd09      	ble.n	80015e4 <_dtoa_r+0x77c>
 80015d0:	42bb      	cmp	r3, r7
 80015d2:	9a06      	ldr	r2, [sp, #24]
 80015d4:	bfa8      	it	ge
 80015d6:	463b      	movge	r3, r7
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	9206      	str	r2, [sp, #24]
 80015dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015de:	1aff      	subs	r7, r7, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	9309      	str	r3, [sp, #36]	; 0x24
 80015e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015e6:	b1f3      	cbz	r3, 8001626 <_dtoa_r+0x7be>
 80015e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a8 	beq.w	8001740 <_dtoa_r+0x8d8>
 80015f0:	2c00      	cmp	r4, #0
 80015f2:	dd10      	ble.n	8001616 <_dtoa_r+0x7ae>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4622      	mov	r2, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f009 f901 	bl	800a800 <__pow5mult>
 80015fe:	465a      	mov	r2, fp
 8001600:	4601      	mov	r1, r0
 8001602:	4606      	mov	r6, r0
 8001604:	4628      	mov	r0, r5
 8001606:	f009 f853 	bl	800a6b0 <__multiply>
 800160a:	4659      	mov	r1, fp
 800160c:	4680      	mov	r8, r0
 800160e:	4628      	mov	r0, r5
 8001610:	f008 ffd0 	bl	800a5b4 <_Bfree>
 8001614:	46c3      	mov	fp, r8
 8001616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001618:	1b1a      	subs	r2, r3, r4
 800161a:	d004      	beq.n	8001626 <_dtoa_r+0x7be>
 800161c:	4659      	mov	r1, fp
 800161e:	4628      	mov	r0, r5
 8001620:	f009 f8ee 	bl	800a800 <__pow5mult>
 8001624:	4683      	mov	fp, r0
 8001626:	2101      	movs	r1, #1
 8001628:	4628      	mov	r0, r5
 800162a:	f009 f82b 	bl	800a684 <__i2b>
 800162e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001630:	2b00      	cmp	r3, #0
 8001632:	4604      	mov	r4, r0
 8001634:	f340 8086 	ble.w	8001744 <_dtoa_r+0x8dc>
 8001638:	461a      	mov	r2, r3
 800163a:	4601      	mov	r1, r0
 800163c:	4628      	mov	r0, r5
 800163e:	f009 f8df 	bl	800a800 <__pow5mult>
 8001642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001644:	2b01      	cmp	r3, #1
 8001646:	4604      	mov	r4, r0
 8001648:	dd7f      	ble.n	800174a <_dtoa_r+0x8e2>
 800164a:	f04f 0800 	mov.w	r8, #0
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001654:	6918      	ldr	r0, [r3, #16]
 8001656:	f00c f910 	bl	800d87a <__hi0bits>
 800165a:	f1c0 0020 	rsb	r0, r0, #32
 800165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001660:	4418      	add	r0, r3
 8001662:	f010 001f 	ands.w	r0, r0, #31
 8001666:	f000 8092 	beq.w	800178e <_dtoa_r+0x926>
 800166a:	f1c0 0320 	rsb	r3, r0, #32
 800166e:	2b04      	cmp	r3, #4
 8001670:	f340 808a 	ble.w	8001788 <_dtoa_r+0x920>
 8001674:	f1c0 001c 	rsb	r0, r0, #28
 8001678:	9b06      	ldr	r3, [sp, #24]
 800167a:	4403      	add	r3, r0
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001680:	4403      	add	r3, r0
 8001682:	4407      	add	r7, r0
 8001684:	9309      	str	r3, [sp, #36]	; 0x24
 8001686:	9b06      	ldr	r3, [sp, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dd05      	ble.n	8001698 <_dtoa_r+0x830>
 800168c:	4659      	mov	r1, fp
 800168e:	461a      	mov	r2, r3
 8001690:	4628      	mov	r0, r5
 8001692:	f009 f90f 	bl	800a8b4 <__lshift>
 8001696:	4683      	mov	fp, r0
 8001698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd05      	ble.n	80016aa <_dtoa_r+0x842>
 800169e:	4621      	mov	r1, r4
 80016a0:	461a      	mov	r2, r3
 80016a2:	4628      	mov	r0, r5
 80016a4:	f009 f906 	bl	800a8b4 <__lshift>
 80016a8:	4604      	mov	r4, r0
 80016aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d070      	beq.n	8001792 <_dtoa_r+0x92a>
 80016b0:	4621      	mov	r1, r4
 80016b2:	4658      	mov	r0, fp
 80016b4:	f00c f92e 	bl	800d914 <__mcmp>
 80016b8:	2800      	cmp	r0, #0
 80016ba:	da6a      	bge.n	8001792 <_dtoa_r+0x92a>
 80016bc:	2300      	movs	r3, #0
 80016be:	4659      	mov	r1, fp
 80016c0:	220a      	movs	r2, #10
 80016c2:	4628      	mov	r0, r5
 80016c4:	f008 ff98 	bl	800a5f8 <__multadd>
 80016c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80016ce:	4683      	mov	fp, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8194 	beq.w	80019fe <_dtoa_r+0xb96>
 80016d6:	4631      	mov	r1, r6
 80016d8:	2300      	movs	r3, #0
 80016da:	220a      	movs	r2, #10
 80016dc:	4628      	mov	r0, r5
 80016de:	f008 ff8b 	bl	800a5f8 <__multadd>
 80016e2:	f1b9 0f00 	cmp.w	r9, #0
 80016e6:	4606      	mov	r6, r0
 80016e8:	f300 8093 	bgt.w	8001812 <_dtoa_r+0x9aa>
 80016ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc57      	bgt.n	80017a2 <_dtoa_r+0x93a>
 80016f2:	e08e      	b.n	8001812 <_dtoa_r+0x9aa>
 80016f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80016f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80016fa:	e757      	b.n	80015ac <_dtoa_r+0x744>
 80016fc:	3fe00000 	.word	0x3fe00000
 8001700:	40240000 	.word	0x40240000
 8001704:	9b08      	ldr	r3, [sp, #32]
 8001706:	1e5c      	subs	r4, r3, #1
 8001708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800170a:	42a3      	cmp	r3, r4
 800170c:	bfbf      	itttt	lt
 800170e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8001710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8001712:	1ae2      	sublt	r2, r4, r3
 8001714:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8001716:	bfb6      	itet	lt
 8001718:	189b      	addlt	r3, r3, r2
 800171a:	1b1c      	subge	r4, r3, r4
 800171c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800171e:	9b08      	ldr	r3, [sp, #32]
 8001720:	bfb8      	it	lt
 8001722:	2400      	movlt	r4, #0
 8001724:	2b00      	cmp	r3, #0
 8001726:	bfb9      	ittee	lt
 8001728:	9b06      	ldrlt	r3, [sp, #24]
 800172a:	9a08      	ldrlt	r2, [sp, #32]
 800172c:	9f06      	ldrge	r7, [sp, #24]
 800172e:	9b08      	ldrge	r3, [sp, #32]
 8001730:	bfbc      	itt	lt
 8001732:	1a9f      	sublt	r7, r3, r2
 8001734:	2300      	movlt	r3, #0
 8001736:	e73b      	b.n	80015b0 <_dtoa_r+0x748>
 8001738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800173a:	9f06      	ldr	r7, [sp, #24]
 800173c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800173e:	e742      	b.n	80015c6 <_dtoa_r+0x75e>
 8001740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001742:	e76b      	b.n	800161c <_dtoa_r+0x7b4>
 8001744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001746:	2b01      	cmp	r3, #1
 8001748:	dc19      	bgt.n	800177e <_dtoa_r+0x916>
 800174a:	9b04      	ldr	r3, [sp, #16]
 800174c:	b9bb      	cbnz	r3, 800177e <_dtoa_r+0x916>
 800174e:	9b05      	ldr	r3, [sp, #20]
 8001750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001754:	b99b      	cbnz	r3, 800177e <_dtoa_r+0x916>
 8001756:	9b05      	ldr	r3, [sp, #20]
 8001758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800175c:	0d1b      	lsrs	r3, r3, #20
 800175e:	051b      	lsls	r3, r3, #20
 8001760:	b183      	cbz	r3, 8001784 <_dtoa_r+0x91c>
 8001762:	9b06      	ldr	r3, [sp, #24]
 8001764:	3301      	adds	r3, #1
 8001766:	9306      	str	r3, [sp, #24]
 8001768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800176a:	3301      	adds	r3, #1
 800176c:	9309      	str	r3, [sp, #36]	; 0x24
 800176e:	f04f 0801 	mov.w	r8, #1
 8001772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af6a 	bne.w	800164e <_dtoa_r+0x7e6>
 800177a:	2001      	movs	r0, #1
 800177c:	e76f      	b.n	800165e <_dtoa_r+0x7f6>
 800177e:	f04f 0800 	mov.w	r8, #0
 8001782:	e7f6      	b.n	8001772 <_dtoa_r+0x90a>
 8001784:	4698      	mov	r8, r3
 8001786:	e7f4      	b.n	8001772 <_dtoa_r+0x90a>
 8001788:	f43f af7d 	beq.w	8001686 <_dtoa_r+0x81e>
 800178c:	4618      	mov	r0, r3
 800178e:	301c      	adds	r0, #28
 8001790:	e772      	b.n	8001678 <_dtoa_r+0x810>
 8001792:	9b08      	ldr	r3, [sp, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dc36      	bgt.n	8001806 <_dtoa_r+0x99e>
 8001798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800179a:	2b02      	cmp	r3, #2
 800179c:	dd33      	ble.n	8001806 <_dtoa_r+0x99e>
 800179e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80017a2:	f1b9 0f00 	cmp.w	r9, #0
 80017a6:	d10d      	bne.n	80017c4 <_dtoa_r+0x95c>
 80017a8:	4621      	mov	r1, r4
 80017aa:	464b      	mov	r3, r9
 80017ac:	2205      	movs	r2, #5
 80017ae:	4628      	mov	r0, r5
 80017b0:	f008 ff22 	bl	800a5f8 <__multadd>
 80017b4:	4601      	mov	r1, r0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4658      	mov	r0, fp
 80017ba:	f00c f8ab 	bl	800d914 <__mcmp>
 80017be:	2800      	cmp	r0, #0
 80017c0:	f73f adb8 	bgt.w	8001334 <_dtoa_r+0x4cc>
 80017c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80017c6:	9f03      	ldr	r7, [sp, #12]
 80017c8:	ea6f 0a03 	mvn.w	sl, r3
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	4621      	mov	r1, r4
 80017d2:	4628      	mov	r0, r5
 80017d4:	f008 feee 	bl	800a5b4 <_Bfree>
 80017d8:	2e00      	cmp	r6, #0
 80017da:	f43f aea7 	beq.w	800152c <_dtoa_r+0x6c4>
 80017de:	f1b8 0f00 	cmp.w	r8, #0
 80017e2:	d005      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e4:	45b0      	cmp	r8, r6
 80017e6:	d003      	beq.n	80017f0 <_dtoa_r+0x988>
 80017e8:	4641      	mov	r1, r8
 80017ea:	4628      	mov	r0, r5
 80017ec:	f008 fee2 	bl	800a5b4 <_Bfree>
 80017f0:	4631      	mov	r1, r6
 80017f2:	4628      	mov	r0, r5
 80017f4:	f008 fede 	bl	800a5b4 <_Bfree>
 80017f8:	e698      	b.n	800152c <_dtoa_r+0x6c4>
 80017fa:	2400      	movs	r4, #0
 80017fc:	4626      	mov	r6, r4
 80017fe:	e7e1      	b.n	80017c4 <_dtoa_r+0x95c>
 8001800:	46c2      	mov	sl, r8
 8001802:	4626      	mov	r6, r4
 8001804:	e596      	b.n	8001334 <_dtoa_r+0x4cc>
 8001806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80fd 	beq.w	8001a0c <_dtoa_r+0xba4>
 8001812:	2f00      	cmp	r7, #0
 8001814:	dd05      	ble.n	8001822 <_dtoa_r+0x9ba>
 8001816:	4631      	mov	r1, r6
 8001818:	463a      	mov	r2, r7
 800181a:	4628      	mov	r0, r5
 800181c:	f009 f84a 	bl	800a8b4 <__lshift>
 8001820:	4606      	mov	r6, r0
 8001822:	f1b8 0f00 	cmp.w	r8, #0
 8001826:	d05c      	beq.n	80018e2 <_dtoa_r+0xa7a>
 8001828:	6871      	ldr	r1, [r6, #4]
 800182a:	4628      	mov	r0, r5
 800182c:	f008 fe82 	bl	800a534 <_Balloc>
 8001830:	4607      	mov	r7, r0
 8001832:	b928      	cbnz	r0, 8001840 <_dtoa_r+0x9d8>
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <_dtoa_r+0xbd0>)
 8001836:	4602      	mov	r2, r0
 8001838:	f240 21ea 	movw	r1, #746	; 0x2ea
 800183c:	f7ff bb28 	b.w	8000e90 <_dtoa_r+0x28>
 8001840:	6932      	ldr	r2, [r6, #16]
 8001842:	3202      	adds	r2, #2
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	f106 010c 	add.w	r1, r6, #12
 800184a:	300c      	adds	r0, #12
 800184c:	f00b fe4e 	bl	800d4ec <memcpy>
 8001850:	2201      	movs	r2, #1
 8001852:	4639      	mov	r1, r7
 8001854:	4628      	mov	r0, r5
 8001856:	f009 f82d 	bl	800a8b4 <__lshift>
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	9308      	str	r3, [sp, #32]
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	444b      	add	r3, r9
 8001864:	930a      	str	r3, [sp, #40]	; 0x28
 8001866:	9b04      	ldr	r3, [sp, #16]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	46b0      	mov	r8, r6
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
 8001870:	4606      	mov	r6, r0
 8001872:	9b08      	ldr	r3, [sp, #32]
 8001874:	4621      	mov	r1, r4
 8001876:	3b01      	subs	r3, #1
 8001878:	4658      	mov	r0, fp
 800187a:	9304      	str	r3, [sp, #16]
 800187c:	f00b ff76 	bl	800d76c <quorem>
 8001880:	4603      	mov	r3, r0
 8001882:	3330      	adds	r3, #48	; 0x30
 8001884:	9006      	str	r0, [sp, #24]
 8001886:	4641      	mov	r1, r8
 8001888:	4658      	mov	r0, fp
 800188a:	930b      	str	r3, [sp, #44]	; 0x2c
 800188c:	f00c f842 	bl	800d914 <__mcmp>
 8001890:	4632      	mov	r2, r6
 8001892:	4681      	mov	r9, r0
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f009 f87c 	bl	800a994 <__mdiff>
 800189c:	68c2      	ldr	r2, [r0, #12]
 800189e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018a0:	4607      	mov	r7, r0
 80018a2:	bb02      	cbnz	r2, 80018e6 <_dtoa_r+0xa7e>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4658      	mov	r0, fp
 80018a8:	f00c f834 	bl	800d914 <__mcmp>
 80018ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018ae:	4602      	mov	r2, r0
 80018b0:	4639      	mov	r1, r7
 80018b2:	4628      	mov	r0, r5
 80018b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80018b8:	f008 fe7c 	bl	800a5b4 <_Bfree>
 80018bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80018c0:	9f08      	ldr	r7, [sp, #32]
 80018c2:	ea43 0102 	orr.w	r1, r3, r2
 80018c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018c8:	430b      	orrs	r3, r1
 80018ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80018cc:	d10d      	bne.n	80018ea <_dtoa_r+0xa82>
 80018ce:	2b39      	cmp	r3, #57	; 0x39
 80018d0:	d029      	beq.n	8001926 <_dtoa_r+0xabe>
 80018d2:	f1b9 0f00 	cmp.w	r9, #0
 80018d6:	dd01      	ble.n	80018dc <_dtoa_r+0xa74>
 80018d8:	9b06      	ldr	r3, [sp, #24]
 80018da:	3331      	adds	r3, #49	; 0x31
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	7013      	strb	r3, [r2, #0]
 80018e0:	e776      	b.n	80017d0 <_dtoa_r+0x968>
 80018e2:	4630      	mov	r0, r6
 80018e4:	e7b9      	b.n	800185a <_dtoa_r+0x9f2>
 80018e6:	2201      	movs	r2, #1
 80018e8:	e7e2      	b.n	80018b0 <_dtoa_r+0xa48>
 80018ea:	f1b9 0f00 	cmp.w	r9, #0
 80018ee:	db06      	blt.n	80018fe <_dtoa_r+0xa96>
 80018f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80018f2:	ea41 0909 	orr.w	r9, r1, r9
 80018f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80018f8:	ea59 0101 	orrs.w	r1, r9, r1
 80018fc:	d120      	bne.n	8001940 <_dtoa_r+0xad8>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	ddec      	ble.n	80018dc <_dtoa_r+0xa74>
 8001902:	4659      	mov	r1, fp
 8001904:	2201      	movs	r2, #1
 8001906:	4628      	mov	r0, r5
 8001908:	9308      	str	r3, [sp, #32]
 800190a:	f008 ffd3 	bl	800a8b4 <__lshift>
 800190e:	4621      	mov	r1, r4
 8001910:	4683      	mov	fp, r0
 8001912:	f00b ffff 	bl	800d914 <__mcmp>
 8001916:	2800      	cmp	r0, #0
 8001918:	9b08      	ldr	r3, [sp, #32]
 800191a:	dc02      	bgt.n	8001922 <_dtoa_r+0xaba>
 800191c:	d1de      	bne.n	80018dc <_dtoa_r+0xa74>
 800191e:	07da      	lsls	r2, r3, #31
 8001920:	d5dc      	bpl.n	80018dc <_dtoa_r+0xa74>
 8001922:	2b39      	cmp	r3, #57	; 0x39
 8001924:	d1d8      	bne.n	80018d8 <_dtoa_r+0xa70>
 8001926:	9a04      	ldr	r2, [sp, #16]
 8001928:	2339      	movs	r3, #57	; 0x39
 800192a:	7013      	strb	r3, [r2, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	461f      	mov	r7, r3
 8001930:	3b01      	subs	r3, #1
 8001932:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8001936:	2a39      	cmp	r2, #57	; 0x39
 8001938:	d050      	beq.n	80019dc <_dtoa_r+0xb74>
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e747      	b.n	80017d0 <_dtoa_r+0x968>
 8001940:	2a00      	cmp	r2, #0
 8001942:	dd03      	ble.n	800194c <_dtoa_r+0xae4>
 8001944:	2b39      	cmp	r3, #57	; 0x39
 8001946:	d0ee      	beq.n	8001926 <_dtoa_r+0xabe>
 8001948:	3301      	adds	r3, #1
 800194a:	e7c7      	b.n	80018dc <_dtoa_r+0xa74>
 800194c:	9a08      	ldr	r2, [sp, #32]
 800194e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001954:	428a      	cmp	r2, r1
 8001956:	d02a      	beq.n	80019ae <_dtoa_r+0xb46>
 8001958:	4659      	mov	r1, fp
 800195a:	2300      	movs	r3, #0
 800195c:	220a      	movs	r2, #10
 800195e:	4628      	mov	r0, r5
 8001960:	f008 fe4a 	bl	800a5f8 <__multadd>
 8001964:	45b0      	cmp	r8, r6
 8001966:	4683      	mov	fp, r0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f04f 020a 	mov.w	r2, #10
 8001970:	4641      	mov	r1, r8
 8001972:	4628      	mov	r0, r5
 8001974:	d107      	bne.n	8001986 <_dtoa_r+0xb1e>
 8001976:	f008 fe3f 	bl	800a5f8 <__multadd>
 800197a:	4680      	mov	r8, r0
 800197c:	4606      	mov	r6, r0
 800197e:	9b08      	ldr	r3, [sp, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	9308      	str	r3, [sp, #32]
 8001984:	e775      	b.n	8001872 <_dtoa_r+0xa0a>
 8001986:	f008 fe37 	bl	800a5f8 <__multadd>
 800198a:	4631      	mov	r1, r6
 800198c:	4680      	mov	r8, r0
 800198e:	2300      	movs	r3, #0
 8001990:	220a      	movs	r2, #10
 8001992:	4628      	mov	r0, r5
 8001994:	f008 fe30 	bl	800a5f8 <__multadd>
 8001998:	4606      	mov	r6, r0
 800199a:	e7f0      	b.n	800197e <_dtoa_r+0xb16>
 800199c:	f1b9 0f00 	cmp.w	r9, #0
 80019a0:	9a03      	ldr	r2, [sp, #12]
 80019a2:	bfcc      	ite	gt
 80019a4:	464f      	movgt	r7, r9
 80019a6:	2701      	movle	r7, #1
 80019a8:	4417      	add	r7, r2
 80019aa:	f04f 0800 	mov.w	r8, #0
 80019ae:	4659      	mov	r1, fp
 80019b0:	2201      	movs	r2, #1
 80019b2:	4628      	mov	r0, r5
 80019b4:	9308      	str	r3, [sp, #32]
 80019b6:	f008 ff7d 	bl	800a8b4 <__lshift>
 80019ba:	4621      	mov	r1, r4
 80019bc:	4683      	mov	fp, r0
 80019be:	f00b ffa9 	bl	800d914 <__mcmp>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	dcb2      	bgt.n	800192c <_dtoa_r+0xac4>
 80019c6:	d102      	bne.n	80019ce <_dtoa_r+0xb66>
 80019c8:	9b08      	ldr	r3, [sp, #32]
 80019ca:	07db      	lsls	r3, r3, #31
 80019cc:	d4ae      	bmi.n	800192c <_dtoa_r+0xac4>
 80019ce:	463b      	mov	r3, r7
 80019d0:	461f      	mov	r7, r3
 80019d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80019d6:	2a30      	cmp	r2, #48	; 0x30
 80019d8:	d0fa      	beq.n	80019d0 <_dtoa_r+0xb68>
 80019da:	e6f9      	b.n	80017d0 <_dtoa_r+0x968>
 80019dc:	9a03      	ldr	r2, [sp, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1a5      	bne.n	800192e <_dtoa_r+0xac6>
 80019e2:	f10a 0a01 	add.w	sl, sl, #1
 80019e6:	2331      	movs	r3, #49	; 0x31
 80019e8:	e779      	b.n	80018de <_dtoa_r+0xa76>
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <_dtoa_r+0xbd4>)
 80019ec:	f7ff baa7 	b.w	8000f3e <_dtoa_r+0xd6>
 80019f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f aa80 	bne.w	8000ef8 <_dtoa_r+0x90>
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <_dtoa_r+0xbd8>)
 80019fa:	f7ff baa0 	b.w	8000f3e <_dtoa_r+0xd6>
 80019fe:	f1b9 0f00 	cmp.w	r9, #0
 8001a02:	dc03      	bgt.n	8001a0c <_dtoa_r+0xba4>
 8001a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	f73f aecb 	bgt.w	80017a2 <_dtoa_r+0x93a>
 8001a0c:	9f03      	ldr	r7, [sp, #12]
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4658      	mov	r0, fp
 8001a12:	f00b feab 	bl	800d76c <quorem>
 8001a16:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001a1a:	f807 3b01 	strb.w	r3, [r7], #1
 8001a1e:	9a03      	ldr	r2, [sp, #12]
 8001a20:	1aba      	subs	r2, r7, r2
 8001a22:	4591      	cmp	r9, r2
 8001a24:	ddba      	ble.n	800199c <_dtoa_r+0xb34>
 8001a26:	4659      	mov	r1, fp
 8001a28:	2300      	movs	r3, #0
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f008 fde3 	bl	800a5f8 <__multadd>
 8001a32:	4683      	mov	fp, r0
 8001a34:	e7eb      	b.n	8001a0e <_dtoa_r+0xba6>
 8001a36:	bf00      	nop
 8001a38:	0800f447 	.word	0x0800f447
 8001a3c:	0800f3a5 	.word	0x0800f3a5
 8001a40:	0800f3c9 	.word	0x0800f3c9

08001a44 <read_write_message>:
        k_sleep(K_USEC(100));
    }
}


static void read_write_message(uint32_t* new_msg, struct message_s* msg_ptr, bool write) {
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	4607      	mov	r7, r0
 8001a4a:	460e      	mov	r6, r1
 8001a4c:	4615      	mov	r5, r2
    uint8_t pos = 0;
 8001a4e:	2400      	movs	r4, #0
 8001a50:	f88d 4007 	strb.w	r4, [sp, #7]
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a54:	e008      	b.n	8001a68 <read_write_message+0x24>
        switch (cur_field) {
            case SENDER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos) :
 8001a56:	b1dd      	cbz	r5, 8001a90 <read_write_message+0x4c>
 8001a58:	f10d 0307 	add.w	r3, sp, #7
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	7831      	ldrb	r1, [r6, #0]
 8001a60:	4638      	mov	r0, r7
 8001a62:	f009 fcdc 	bl	800b41e <fill_msg_bit_field>
    for (int cur_field = 0; cur_field < MESSAGE_FIELD_NUMBER; ++cur_field) {
 8001a66:	3401      	adds	r4, #1
 8001a68:	2c05      	cmp	r4, #5
 8001a6a:	dc6e      	bgt.n	8001b4a <read_write_message+0x106>
        switch (cur_field) {
 8001a6c:	2c05      	cmp	r4, #5
 8001a6e:	d8fa      	bhi.n	8001a66 <read_write_message+0x22>
 8001a70:	a301      	add	r3, pc, #4	; (adr r3, 8001a78 <read_write_message+0x34>)
 8001a72:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a57 	.word	0x08001a57
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001ac3 	.word	0x08001ac3
 8001a84:	08001ae5 	.word	0x08001ae5
 8001a88:	08001b07 	.word	0x08001b07
 8001a8c:	08001b29 	.word	0x08001b29
                    extract_msg_bit_field(new_msg, &msg_ptr->sender_addr, SENDER_ADDR_FIELD_LEN, &pos);
 8001a90:	f10d 0307 	add.w	r3, sp, #7
 8001a94:	2202      	movs	r2, #2
 8001a96:	4631      	mov	r1, r6
 8001a98:	4638      	mov	r0, r7
 8001a9a:	f009 fce1 	bl	800b460 <extract_msg_bit_field>
 8001a9e:	e7e2      	b.n	8001a66 <read_write_message+0x22>
                break;
            case RECEIVER_ADDR:
                write ? fill_msg_bit_field(new_msg, msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos) :
 8001aa0:	b13d      	cbz	r5, 8001ab2 <read_write_message+0x6e>
 8001aa2:	f10d 0307 	add.w	r3, sp, #7
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	7871      	ldrb	r1, [r6, #1]
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f009 fcb7 	bl	800b41e <fill_msg_bit_field>
 8001ab0:	e7d9      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->receiver_addr, RECEIVER_ADDR_FIELD_LEN, &pos);
 8001ab2:	f10d 0307 	add.w	r3, sp, #7
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	1c71      	adds	r1, r6, #1
 8001aba:	4638      	mov	r0, r7
 8001abc:	f009 fcd0 	bl	800b460 <extract_msg_bit_field>
 8001ac0:	e7d1      	b.n	8001a66 <read_write_message+0x22>
                break;
            case MESSAGE_TYPE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos) :
 8001ac2:	b13d      	cbz	r5, 8001ad4 <read_write_message+0x90>
 8001ac4:	f10d 0307 	add.w	r3, sp, #7
 8001ac8:	2204      	movs	r2, #4
 8001aca:	78b1      	ldrb	r1, [r6, #2]
 8001acc:	4638      	mov	r0, r7
 8001ace:	f009 fca6 	bl	800b41e <fill_msg_bit_field>
 8001ad2:	e7c8      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->message_type, MESSAGE_TYPE_FIELD_LEN, &pos);
 8001ad4:	f10d 0307 	add.w	r3, sp, #7
 8001ad8:	2204      	movs	r2, #4
 8001ada:	1cb1      	adds	r1, r6, #2
 8001adc:	4638      	mov	r0, r7
 8001ade:	f009 fcbf 	bl	800b460 <extract_msg_bit_field>
 8001ae2:	e7c0      	b.n	8001a66 <read_write_message+0x22>
                break;
            case DIRECTION:
                write ? fill_msg_bit_field(new_msg, msg_ptr->direction, DIRECTION_FIELD_LEN, &pos) :
 8001ae4:	b13d      	cbz	r5, 8001af6 <read_write_message+0xb2>
 8001ae6:	f10d 0307 	add.w	r3, sp, #7
 8001aea:	2201      	movs	r2, #1
 8001aec:	78f1      	ldrb	r1, [r6, #3]
 8001aee:	4638      	mov	r0, r7
 8001af0:	f009 fc95 	bl	800b41e <fill_msg_bit_field>
 8001af4:	e7b7      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->direction, DIRECTION_FIELD_LEN, &pos);
 8001af6:	f10d 0307 	add.w	r3, sp, #7
 8001afa:	2201      	movs	r2, #1
 8001afc:	1cf1      	adds	r1, r6, #3
 8001afe:	4638      	mov	r0, r7
 8001b00:	f009 fcae 	bl	800b460 <extract_msg_bit_field>
 8001b04:	e7af      	b.n	8001a66 <read_write_message+0x22>
                break;
            case BATTERY:
                write ? fill_msg_bit_field(new_msg, msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos) :
 8001b06:	b13d      	cbz	r5, 8001b18 <read_write_message+0xd4>
 8001b08:	f10d 0307 	add.w	r3, sp, #7
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	7931      	ldrb	r1, [r6, #4]
 8001b10:	4638      	mov	r0, r7
 8001b12:	f009 fc84 	bl	800b41e <fill_msg_bit_field>
 8001b16:	e7a6      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->battery_level, BATTERY_FIELD_LEN, &pos);
 8001b18:	f10d 0307 	add.w	r3, sp, #7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	1d31      	adds	r1, r6, #4
 8001b20:	4638      	mov	r0, r7
 8001b22:	f009 fc9d 	bl	800b460 <extract_msg_bit_field>
 8001b26:	e79e      	b.n	8001a66 <read_write_message+0x22>
                break;
            case PEOPLE_IN_SAFE_ZONE:
                write ? fill_msg_bit_field(new_msg, msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos) :
 8001b28:	b13d      	cbz	r5, 8001b3a <read_write_message+0xf6>
 8001b2a:	f10d 0307 	add.w	r3, sp, #7
 8001b2e:	2208      	movs	r2, #8
 8001b30:	7971      	ldrb	r1, [r6, #5]
 8001b32:	4638      	mov	r0, r7
 8001b34:	f009 fc73 	bl	800b41e <fill_msg_bit_field>
 8001b38:	e795      	b.n	8001a66 <read_write_message+0x22>
                    extract_msg_bit_field(new_msg, &msg_ptr->workers_in_safe_zone, PEOPLE_IN_SAFE_ZONE_FIELD_LEN, &pos);
 8001b3a:	f10d 0307 	add.w	r3, sp, #7
 8001b3e:	2208      	movs	r2, #8
 8001b40:	1d71      	adds	r1, r6, #5
 8001b42:	4638      	mov	r0, r7
 8001b44:	f009 fc8c 	bl	800b460 <extract_msg_bit_field>
 8001b48:	e78d      	b.n	8001a66 <read_write_message+0x22>
                break;
            default:
                break;
        }
    }
}
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4e:	bf00      	nop

08001b50 <send_msg>:
void send_msg(void) {
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	b082      	sub	sp, #8
    volatile int rc = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
    uint32_t new_msg = 0;
 8001b58:	9300      	str	r3, [sp, #0]
 */
__syscall uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
	return msgq->used_msgs;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <send_msg+0xcc>)
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if ( k_msgq_num_used_get(&msgq_tx_msg_prio) ) {
 8001b5e:	b963      	cbnz	r3, 8001b7a <send_msg+0x2a>
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <send_msg+0xd0>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    else if ( k_msgq_num_used_get(&msgq_tx_msg) ) {
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03e      	beq.n	8001be6 <send_msg+0x96>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001b68:	4e2d      	ldr	r6, [pc, #180]	; (8001c20 <send_msg+0xd0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	492d      	ldr	r1, [pc, #180]	; (8001c24 <send_msg+0xd4>)
 8001b70:	4630      	mov	r0, r6
 8001b72:	f006 fcc3 	bl	80084fc <z_impl_k_msgq_get>
        rc = k_msgq_get(&msgq_tx_msg, &tx_msg, K_NO_WAIT);
 8001b76:	9001      	str	r0, [sp, #4]
        cur_queue = &msgq_tx_msg;
 8001b78:	e007      	b.n	8001b8a <send_msg+0x3a>
 8001b7a:	4e28      	ldr	r6, [pc, #160]	; (8001c1c <send_msg+0xcc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2300      	movs	r3, #0
 8001b80:	4928      	ldr	r1, [pc, #160]	; (8001c24 <send_msg+0xd4>)
 8001b82:	4630      	mov	r0, r6
 8001b84:	f006 fcba 	bl	80084fc <z_impl_k_msgq_get>
        rc = k_msgq_get(&msgq_tx_msg_prio, &tx_msg, K_NO_WAIT);
 8001b88:	9001      	str	r0, [sp, #4]
    read_write_message(&new_msg, &tx_msg, true);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4925      	ldr	r1, [pc, #148]	; (8001c24 <send_msg+0xd4>)
 8001b8e:	4668      	mov	r0, sp
 8001b90:	f7ff ff58 	bl	8001a44 <read_write_message>
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001b94:	2400      	movs	r4, #0
 8001b96:	e00d      	b.n	8001bb4 <send_msg+0x64>
        tx_buf[i] = (new_msg & (0x000000FF << i*8) ) >> i*8;
 8001b98:	00e3      	lsls	r3, r4, #3
 8001b9a:	20ff      	movs	r0, #255	; 0xff
 8001b9c:	4098      	lsls	r0, r3
 8001b9e:	9a00      	ldr	r2, [sp, #0]
 8001ba0:	4010      	ands	r0, r2
 8001ba2:	40d8      	lsrs	r0, r3
 8001ba4:	b2c0      	uxtb	r0, r0
 8001ba6:	4d20      	ldr	r5, [pc, #128]	; (8001c28 <send_msg+0xd8>)
 8001ba8:	5528      	strb	r0, [r5, r4]
        tx_buf[i] = reverse(tx_buf[i]);
 8001baa:	f009 fc7d 	bl	800b4a8 <reverse>
 8001bae:	5528      	strb	r0, [r5, r4]
    for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001bb0:	3401      	adds	r4, #1
 8001bb2:	b2e4      	uxtb	r4, r4
 8001bb4:	2c02      	cmp	r4, #2
 8001bb6:	d9ef      	bls.n	8001b98 <send_msg+0x48>
    if (!lora_cfg.tx) {
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <send_msg+0xdc>)
 8001bba:	7adb      	ldrb	r3, [r3, #11]
 8001bbc:	b95b      	cbnz	r3, 8001bd6 <send_msg+0x86>
        lora_cfg.tx = true;
 8001bbe:	491b      	ldr	r1, [pc, #108]	; (8001c2c <send_msg+0xdc>)
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <send_msg+0xe0>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_config(const struct device *dev,
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
 8001bc8:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4798      	blx	r3
 8001bce:	9001      	str	r0, [sp, #4]
        if (rc < 0) {
 8001bd0:	9b01      	ldr	r3, [sp, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db09      	blt.n	8001bea <send_msg+0x9a>
    rc = lora_send(lora_dev_ptr, tx_buf, MESSAGE_LEN_IN_BYTES);
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <send_msg+0xe0>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 * @return 0 on success, negative on error
 */
static inline int lora_send(const struct device *dev,
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
 8001bda:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	4911      	ldr	r1, [pc, #68]	; (8001c28 <send_msg+0xd8>)
 8001be2:	4798      	blx	r3
 8001be4:	9001      	str	r0, [sp, #4]
}
 8001be6:	b002      	add	sp, #8
 8001be8:	bd70      	pop	{r4, r5, r6, pc}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <send_msg+0xe4>)
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <send_msg+0xe8>)
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	08db      	lsrs	r3, r3, #3
            LOG_DBG("Modem not configure!!!");
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	f361 0202 	bfi	r2, r1, #0, #3
 8001bfc:	f36f 02c5 	bfc	r2, #3, #3
 8001c00:	f363 128f 	bfi	r2, r3, #6, #10
 8001c04:	490d      	ldr	r1, [pc, #52]	; (8001c3c <send_msg+0xec>)
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <send_msg+0xf0>)
 8001c08:	f001 fc7c 	bl	8003504 <log_1>
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2300      	movs	r3, #0
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <send_msg+0xd4>)
 8001c12:	4630      	mov	r0, r6
 8001c14:	f006 fc16 	bl	8008444 <z_impl_k_msgq_put>
            return;
 8001c18:	e7e5      	b.n	8001be6 <send_msg+0x96>
 8001c1a:	bf00      	nop
 8001c1c:	2000049c 	.word	0x2000049c
 8001c20:	20000468 	.word	0x20000468
 8001c24:	20000970 	.word	0x20000970
 8001c28:	2000096c 	.word	0x2000096c
 8001c2c:	20000918 	.word	0x20000918
 8001c30:	20000924 	.word	0x20000924
 8001c34:	0800e010 	.word	0x0800e010
 8001c38:	0800e008 	.word	0x0800e008
 8001c3c:	0800e424 	.word	0x0800e424
 8001c40:	0800e1e8 	.word	0x0800e1e8

08001c44 <button_alarm_pressed_cb>:
//    k_wakeup(modem_task_id);
//}


#ifdef PERIPHERAL
void button_alarm_pressed_cb(const struct device* dev, struct gpio_callback* cb, uint32_t pins) {
 8001c44:	b500      	push	{lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <button_alarm_pressed_cb+0x54>)
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <button_alarm_pressed_cb+0x58>)
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	08db      	lsrs	r3, r3, #3
    LOG_DBG("Button alarm pressed");
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	2104      	movs	r1, #4
 8001c56:	f361 0202 	bfi	r2, r1, #0, #3
 8001c5a:	f36f 02c5 	bfc	r2, #3, #3
 8001c5e:	f363 128f 	bfi	r2, r3, #6, #10
 8001c62:	490f      	ldr	r1, [pc, #60]	; (8001ca0 <button_alarm_pressed_cb+0x5c>)
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <button_alarm_pressed_cb+0x60>)
 8001c66:	f001 fc4d 	bl	8003504 <log_1>
    struct message_s alarm_msg = {0};
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    alarm_msg.receiver_addr = RECV_BASE_STATION;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f88d 3001 	strb.w	r3, [sp, #1]
    alarm_msg.sender_addr = cur_dev_addr;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <button_alarm_pressed_cb+0x64>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f88d 3000 	strb.w	r3, [sp]
    alarm_msg.message_type = MESSAGE_TYPE_ALARM;
    alarm_msg.direction = REQUEST;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f88d 3003 	strb.w	r3, [sp, #3]
 8001c86:	2200      	movs	r2, #0
 8001c88:	2300      	movs	r3, #0
 8001c8a:	4669      	mov	r1, sp
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <button_alarm_pressed_cb+0x68>)
 8001c8e:	f006 fbd9 	bl	8008444 <z_impl_k_msgq_put>
//    tx_msg.battery_level
    alarm_msg.workers_in_safe_zone = 0;
    k_msgq_put(&msgq_tx_msg_prio, &alarm_msg, K_NO_WAIT);
}
 8001c92:	b003      	add	sp, #12
 8001c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c98:	0800e010 	.word	0x0800e010
 8001c9c:	0800e008 	.word	0x0800e008
 8001ca0:	0800e400 	.word	0x0800e400
 8001ca4:	0800e204 	.word	0x0800e204
 8001ca8:	20000294 	.word	0x20000294
 8001cac:	2000049c 	.word	0x2000049c

08001cb0 <recv_msg>:
void recv_msg(void) {
 8001cb0:	b530      	push	{r4, r5, lr}
 8001cb2:	b089      	sub	sp, #36	; 0x24
    volatile int rc = -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb8:	9307      	str	r3, [sp, #28]
    volatile uint32_t ticks = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9306      	str	r3, [sp, #24]
    int16_t rssi = 0;
 8001cbe:	f8ad 3016 	strh.w	r3, [sp, #22]
    int8_t snr = 0;
 8001cc2:	f88d 3015 	strb.w	r3, [sp, #21]
    if (lora_cfg.tx) {
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <recv_msg+0x8c>)
 8001cc8:	7adb      	ldrb	r3, [r3, #11]
 8001cca:	b15b      	cbz	r3, 8001ce4 <recv_msg+0x34>
        lora_cfg.tx = false;
 8001ccc:	491b      	ldr	r1, [pc, #108]	; (8001d3c <recv_msg+0x8c>)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	72cb      	strb	r3, [r1, #11]
        rc = lora_config(lora_dev_ptr, &lora_cfg);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <recv_msg+0x90>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001cd6:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4798      	blx	r3
 8001cdc:	9007      	str	r0, [sp, #28]
        if (rc < 0) {
 8001cde:	9b07      	ldr	r3, [sp, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db15      	blt.n	8001d10 <recv_msg+0x60>
    rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES,K_MSEC(RECV_TIME_MSEC), &rssi, &snr);
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <recv_msg+0x90>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 */
static inline int lora_recv(const struct device *dev, uint8_t *data,
			    uint8_t size,
			    k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
	const struct lora_driver_api *api =
 8001ce8:	6883      	ldr	r3, [r0, #8]
		(const struct lora_driver_api *)dev->api;

	return api->recv(dev, data, size, timeout, rssi, snr);
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f10d 0215 	add.w	r2, sp, #21
 8001cf0:	9203      	str	r2, [sp, #12]
 8001cf2:	f10d 0216 	add.w	r2, sp, #22
 8001cf6:	9202      	str	r2, [sp, #8]
 8001cf8:	f242 3428 	movw	r4, #9000	; 0x2328
 8001cfc:	2500      	movs	r5, #0
 8001cfe:	e9cd 4500 	strd	r4, r5, [sp]
 8001d02:	2203      	movs	r2, #3
 8001d04:	490f      	ldr	r1, [pc, #60]	; (8001d44 <recv_msg+0x94>)
 8001d06:	4798      	blx	r3
 8001d08:	9007      	str	r0, [sp, #28]
    if (rc > 0) {
 8001d0a:	9b07      	ldr	r3, [sp, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	dc01      	bgt.n	8001d14 <recv_msg+0x64>
}
 8001d10:	b009      	add	sp, #36	; 0x24
 8001d12:	bd30      	pop	{r4, r5, pc}
        k_msgq_put(&msgq_rx_msg, &rx_buf, K_NO_WAIT);
 8001d14:	2400      	movs	r4, #0
 8001d16:	2500      	movs	r5, #0
 8001d18:	4622      	mov	r2, r4
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	4909      	ldr	r1, [pc, #36]	; (8001d44 <recv_msg+0x94>)
 8001d1e:	480a      	ldr	r0, [pc, #40]	; (8001d48 <recv_msg+0x98>)
 8001d20:	f006 fb90 	bl	8008444 <z_impl_k_msgq_put>
 8001d24:	4622      	mov	r2, r4
 8001d26:	462b      	mov	r3, r5
 8001d28:	f10d 0116 	add.w	r1, sp, #22
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <recv_msg+0x9c>)
 8001d2e:	f006 fb89 	bl	8008444 <z_impl_k_msgq_put>
        k_wakeup(proc_task_id);
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <recv_msg+0xa0>)
 8001d34:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001d36:	f00b fa66 	bl	800d206 <z_impl_k_wakeup>
 8001d3a:	e7e9      	b.n	8001d10 <recv_msg+0x60>
 8001d3c:	20000918 	.word	0x20000918
 8001d40:	20000924 	.word	0x20000924
 8001d44:	20000940 	.word	0x20000940
 8001d48:	20000434 	.word	0x20000434
 8001d4c:	20000400 	.word	0x20000400
 8001d50:	0800e464 	.word	0x0800e464

08001d54 <periodic_timer_handler>:
void periodic_timer_handler(struct k_timer* tim) {
 8001d54:	b510      	push	{r4, lr}
    current_state = (*current_state.next);
 8001d56:	4c08      	ldr	r4, [pc, #32]	; (8001d78 <periodic_timer_handler+0x24>)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d5e:	e884 0003 	stmia.w	r4, {r0, r1}
	return z_impl_k_msgq_put(msgq, data, timeout);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2300      	movs	r3, #0
 8001d66:	1d21      	adds	r1, r4, #4
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <periodic_timer_handler+0x28>)
 8001d6a:	f006 fb6b 	bl	8008444 <z_impl_k_msgq_put>
    k_wakeup(modem_task_id);
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <periodic_timer_handler+0x2c>)
 8001d70:	6818      	ldr	r0, [r3, #0]
	z_impl_k_wakeup(thread);
 8001d72:	f00b fa48 	bl	800d206 <z_impl_k_wakeup>
}
 8001d76:	bd10      	pop	{r4, pc}
 8001d78:	20000910 	.word	0x20000910
 8001d7c:	200003cc 	.word	0x200003cc
 8001d80:	0800e460 	.word	0x0800e460

08001d84 <system_init>:
void system_init() {
 8001d84:	b510      	push	{r4, lr}
    lora_cfg.frequency = 433000000;
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <system_init+0xdc>)
 8001d88:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <system_init+0xe0>)
 8001d8a:	601a      	str	r2, [r3, #0]
    lora_cfg.bandwidth = BW_125_KHZ;
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	711a      	strb	r2, [r3, #4]
    lora_cfg.datarate = SF_12;
 8001d90:	210c      	movs	r1, #12
 8001d92:	7159      	strb	r1, [r3, #5]
    lora_cfg.preamble_len = 8;
 8001d94:	2108      	movs	r1, #8
 8001d96:	8119      	strh	r1, [r3, #8]
    lora_cfg.coding_rate = CR_4_5;
 8001d98:	2101      	movs	r1, #1
 8001d9a:	7199      	strb	r1, [r3, #6]
    lora_cfg.tx_power = 5;
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	7299      	strb	r1, [r3, #10]
    lora_cfg.tx = false;
 8001da0:	72da      	strb	r2, [r3, #11]
    lora_dev_ptr = DEVICE_DT_GET(DEFAULT_RADIO_NODE);
 8001da2:	4831      	ldr	r0, [pc, #196]	; (8001e68 <system_init+0xe4>)
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <system_init+0xe8>)
 8001da6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
 8001da8:	f00a ff8e 	bl	800ccc8 <z_device_ready>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d043      	beq.n	8001e38 <system_init+0xb4>
 8001db0:	2300      	movs	r3, #0
    if (!device_is_ready(lora_dev_ptr)) {
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d143      	bne.n	8001e3e <system_init+0xba>
    if ( lora_config(lora_dev_ptr, &lora_cfg) < 0 ) {
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <system_init+0xe8>)
 8001db8:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001dba:	6883      	ldr	r3, [r0, #8]
	return api->config(dev, config);
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4928      	ldr	r1, [pc, #160]	; (8001e60 <system_init+0xdc>)
 8001dc0:	4798      	blx	r3
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	db42      	blt.n	8001e4c <system_init+0xc8>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8001dc6:	482a      	ldr	r0, [pc, #168]	; (8001e70 <system_init+0xec>)
 8001dc8:	f006 f89e 	bl	8007f08 <z_impl_device_get_binding>
    button_alarm_gpio_dev_ptr = device_get_binding(BUTTON_ALARM_GPIO_PORT);
 8001dcc:	4c29      	ldr	r4, [pc, #164]	; (8001e74 <system_init+0xf0>)
 8001dce:	6020      	str	r0, [r4, #0]

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
 8001dd0:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 8001dd2:	6902      	ldr	r2, [r0, #16]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dda:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	f240 1201 	movw	r2, #257	; 0x101
 8001de2:	210d      	movs	r1, #13
 8001de4:	4798      	blx	r3
    gpio_pin_interrupt_configure(button_alarm_gpio_dev_ptr, BUTTON_ALARM_GPIO_PIN, GPIO_INT_EDGE_TO_ACTIVE);
 8001de6:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_api *api =
 8001de8:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
 8001dea:	6902      	ldr	r2, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8001dec:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8001dee:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001df2:	d132      	bne.n	8001e5a <system_init+0xd6>
 8001df4:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8001df8:	699c      	ldr	r4, [r3, #24]
 8001dfa:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8001dfe:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8001e02:	210d      	movs	r1, #13
 8001e04:	47a0      	blx	r4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <system_init+0xf4>)
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <system_init+0xf8>)
 8001e0a:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
 8001e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e10:	609a      	str	r2, [r3, #8]
    gpio_add_callback(button_alarm_gpio_dev_ptr, &button_alarm_cb);
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <system_init+0xf0>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
 8001e16:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	b113      	cbz	r3, 8001e22 <system_init+0x9e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4916      	ldr	r1, [pc, #88]	; (8001e78 <system_init+0xf4>)
 8001e20:	4798      	blx	r3
	return z_impl_k_sem_init(sem, initial_count, limit);
 8001e22:	2201      	movs	r2, #1
 8001e24:	4611      	mov	r1, r2
 8001e26:	4816      	ldr	r0, [pc, #88]	; (8001e80 <system_init+0xfc>)
 8001e28:	f00b f84b 	bl	800cec2 <z_impl_k_sem_init>
    k_timer_init(&periodic_timer, periodic_timer_handler, NULL);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4915      	ldr	r1, [pc, #84]	; (8001e84 <system_init+0x100>)
 8001e30:	4815      	ldr	r0, [pc, #84]	; (8001e88 <system_init+0x104>)
 8001e32:	f00b faac 	bl	800d38e <k_timer_init>
}
 8001e36:	bd10      	pop	{r4, pc}
 8001e38:	f06f 0312 	mvn.w	r3, #18
 8001e3c:	e7b9      	b.n	8001db2 <system_init+0x2e>
	return z_impl_k_sleep(timeout);
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e46:	f007 f9c7 	bl	80091d8 <z_impl_k_sleep>
 8001e4a:	e7b4      	b.n	8001db6 <system_init+0x32>
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e54:	f007 f9c0 	bl	80091d8 <z_impl_k_sleep>
 8001e58:	e7b5      	b.n	8001dc6 <system_init+0x42>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8001e5a:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8001e5e:	e7cb      	b.n	8001df8 <system_init+0x74>
 8001e60:	20000918 	.word	0x20000918
 8001e64:	19cf0e40 	.word	0x19cf0e40
 8001e68:	0800dd40 	.word	0x0800dd40
 8001e6c:	20000924 	.word	0x20000924
 8001e70:	0800e220 	.word	0x0800e220
 8001e74:	2000090c 	.word	0x2000090c
 8001e78:	20000900 	.word	0x20000900
 8001e7c:	08001c45 	.word	0x08001c45
 8001e80:	20000944 	.word	0x20000944
 8001e84:	08001d55 	.word	0x08001d55
 8001e88:	200004e8 	.word	0x200004e8

08001e8c <start_system>:
void start_system(void) {
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	b087      	sub	sp, #28
    volatile int rc = -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e94:	9305      	str	r3, [sp, #20]
    int16_t rssi = 0;
 8001e96:	2400      	movs	r4, #0
 8001e98:	f8ad 4012 	strh.w	r4, [sp, #18]
    int8_t snr = 0;
 8001e9c:	f88d 4011 	strb.w	r4, [sp, #17]
    system_init();
 8001ea0:	f7ff ff70 	bl	8001d84 <system_init>
    start_state.next = &receive_1_state;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <start_system+0x94>)
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <start_system+0x98>)
 8001ea8:	601a      	str	r2, [r3, #0]
    start_state.trancieve_fun = NULL;
 8001eaa:	605c      	str	r4, [r3, #4]
    receive_1_state.next = &receive_2_state;
 8001eac:	4c1e      	ldr	r4, [pc, #120]	; (8001f28 <start_system+0x9c>)
 8001eae:	6014      	str	r4, [r2, #0]
    receive_1_state.trancieve_fun = recv_msg;
 8001eb0:	481e      	ldr	r0, [pc, #120]	; (8001f2c <start_system+0xa0>)
 8001eb2:	6050      	str	r0, [r2, #4]
    receive_2_state.next = &receive_3_state;
 8001eb4:	491e      	ldr	r1, [pc, #120]	; (8001f30 <start_system+0xa4>)
 8001eb6:	6021      	str	r1, [r4, #0]
    receive_2_state.trancieve_fun = recv_msg;
 8001eb8:	6060      	str	r0, [r4, #4]
    receive_3_state.next = &transmit_state;
 8001eba:	4c1e      	ldr	r4, [pc, #120]	; (8001f34 <start_system+0xa8>)
 8001ebc:	600c      	str	r4, [r1, #0]
    receive_3_state.trancieve_fun = recv_msg;
 8001ebe:	6048      	str	r0, [r1, #4]
    transmit_state.next = &receive_1_state;
 8001ec0:	6022      	str	r2, [r4, #0]
    transmit_state.trancieve_fun = send_msg;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <start_system+0xac>)
 8001ec4:	6062      	str	r2, [r4, #4]
    current_state = start_state;
 8001ec6:	4d1d      	ldr	r5, [pc, #116]	; (8001f3c <start_system+0xb0>)
 8001ec8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ecc:	e885 0003 	stmia.w	r5, {r0, r1}
    rc = lora_recv(lora_dev_ptr, rx_buf, MESSAGE_LEN_IN_BYTES, K_FOREVER, &rssi, &snr);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <start_system+0xb4>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
	const struct lora_driver_api *api =
 8001ed4:	6883      	ldr	r3, [r0, #8]
	return api->recv(dev, data, size, timeout, rssi, snr);
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f10d 0211 	add.w	r2, sp, #17
 8001edc:	9203      	str	r2, [sp, #12]
 8001ede:	f10d 0212 	add.w	r2, sp, #18
 8001ee2:	9202      	str	r2, [sp, #8]
 8001ee4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001ee8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001eec:	e9cd 6700 	strd	r6, r7, [sp]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4914      	ldr	r1, [pc, #80]	; (8001f44 <start_system+0xb8>)
 8001ef4:	4798      	blx	r3
 8001ef6:	9005      	str	r0, [sp, #20]
    current_state = transmit_state;
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001f04:	2100      	movs	r1, #0
 8001f06:	f007 f967 	bl	80091d8 <z_impl_k_sleep>
    k_timer_start(&periodic_timer, K_MSEC(PERIODIC_TIMER_DURATION_MSEC),
 8001f0a:	f242 6248 	movw	r2, #9800	; 0x2648
 8001f0e:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 8001f10:	e9cd 2300 	strd	r2, r3, [sp]
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <start_system+0xbc>)
 8001f16:	f007 fb91 	bl	800963c <z_impl_k_timer_start>
}
 8001f1a:	b007      	add	sp, #28
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000095c 	.word	0x2000095c
 8001f24:	20000928 	.word	0x20000928
 8001f28:	20000930 	.word	0x20000930
 8001f2c:	08001cb1 	.word	0x08001cb1
 8001f30:	20000938 	.word	0x20000938
 8001f34:	20000964 	.word	0x20000964
 8001f38:	08001b51 	.word	0x08001b51
 8001f3c:	20000910 	.word	0x20000910
 8001f40:	20000924 	.word	0x20000924
 8001f44:	20000940 	.word	0x20000940
 8001f48:	200004e8 	.word	0x200004e8

08001f4c <modem_task>:
_Noreturn void modem_task() {
 8001f4c:	b500      	push	{lr}
 8001f4e:	b083      	sub	sp, #12
    void (*f_ptr) (void) = NULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
    volatile int rc = 0;
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	e003      	b.n	8001f60 <modem_task+0x14>
	return z_impl_k_sleep(timeout);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f007 f93c 	bl	80091d8 <z_impl_k_sleep>
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <modem_task+0x38>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (k_msgq_num_used_get(&msgq_fun_pointer)) {
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f7      	beq.n	8001f58 <modem_task+0xc>
	return z_impl_k_msgq_get(msgq, data, timeout);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	a901      	add	r1, sp, #4
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <modem_task+0x38>)
 8001f70:	f006 fac4 	bl	80084fc <z_impl_k_msgq_get>
            rc = k_msgq_get(&msgq_fun_pointer, &f_ptr, K_NO_WAIT);
 8001f74:	9000      	str	r0, [sp, #0]
            if (rc < 0) {
 8001f76:	9b00      	ldr	r3, [sp, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	dbf1      	blt.n	8001f60 <modem_task+0x14>
            f_ptr();
 8001f7c:	9b01      	ldr	r3, [sp, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e7ea      	b.n	8001f58 <modem_task+0xc>
 8001f82:	bf00      	nop
 8001f84:	200003cc 	.word	0x200003cc

08001f88 <proc_task>:
_Noreturn void proc_task() {
 8001f88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001f8c:	b09b      	sub	sp, #108	; 0x6c
    int16_t rssi = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    uint32_t cur_msg = 0;
 8001f94:	9318      	str	r3, [sp, #96]	; 0x60
    struct message_s tx_msg_proc = {0};
 8001f96:	9316      	str	r3, [sp, #88]	; 0x58
 8001f98:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    struct message_s rx_msg_proc = {0};
 8001f9c:	9314      	str	r3, [sp, #80]	; 0x50
 8001f9e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    struct k_msgq* msgq_cur_msg_tx_ptr = &msgq_tx_msg; // Default queue
 8001fa2:	e229      	b.n	80023f8 <proc_task+0x470>
            cur_msg = 0;
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	9418      	str	r4, [sp, #96]	; 0x60
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001fa8:	e00e      	b.n	8001fc8 <proc_task+0x40>
                rx_buf_proc[i] = reverse(rx_buf_proc[i]);
 8001faa:	ab1a      	add	r3, sp, #104	; 0x68
 8001fac:	191d      	adds	r5, r3, r4
 8001fae:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
 8001fb2:	f009 fa79 	bl	800b4a8 <reverse>
 8001fb6:	f805 0c1c 	strb.w	r0, [r5, #-28]
                cur_msg |= (rx_buf_proc[i]) << i*8;
 8001fba:	00e3      	lsls	r3, r4, #3
 8001fbc:	4098      	lsls	r0, r3
 8001fbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001fc0:	4318      	orrs	r0, r3
 8001fc2:	9018      	str	r0, [sp, #96]	; 0x60
            for (uint8_t i = 0; i < MESSAGE_LEN_IN_BYTES; ++i) {
 8001fc4:	3401      	adds	r4, #1
 8001fc6:	b2e4      	uxtb	r4, r4
 8001fc8:	2c02      	cmp	r4, #2
 8001fca:	d9ee      	bls.n	8001faa <proc_task+0x22>
            read_write_message(&cur_msg, &rx_msg_proc, false); // rx_msg struct is fill
 8001fcc:	2200      	movs	r2, #0
 8001fce:	a914      	add	r1, sp, #80	; 0x50
 8001fd0:	a818      	add	r0, sp, #96	; 0x60
 8001fd2:	f7ff fd37 	bl	8001a44 <read_write_message>
            if ( (rx_msg_proc.receiver_addr != RECV_BROADCAST) && (rx_msg_proc.receiver_addr != cur_dev_addr) ) {
 8001fd6:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8001fda:	b11a      	cbz	r2, 8001fe4 <proc_task+0x5c>
 8001fdc:	4bbc      	ldr	r3, [pc, #752]	; (80022d0 <proc_task+0x348>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d134      	bne.n	800204e <proc_task+0xc6>
            switch (rx_msg_proc.direction) {
 8001fe4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8137 	beq.w	800225c <proc_task+0x2d4>
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	f040 81ee 	bne.w	80023d0 <proc_task+0x448>
 8001ff4:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <proc_task+0x34c>)
 8001ff6:	4ab8      	ldr	r2, [pc, #736]	; (80022d8 <proc_task+0x350>)
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	08db      	lsrs	r3, r3, #3
                    LOG_DBG(" REQUEST");
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	f362 0702 	bfi	r7, r2, #0, #3
 8002002:	f36f 07c5 	bfc	r7, #3, #3
 8002006:	f363 178f 	bfi	r7, r3, #6, #10
 800200a:	4cb4      	ldr	r4, [pc, #720]	; (80022dc <proc_task+0x354>)
 800200c:	463a      	mov	r2, r7
 800200e:	4621      	mov	r1, r4
 8002010:	48b3      	ldr	r0, [pc, #716]	; (80022e0 <proc_task+0x358>)
 8002012:	f001 fa77 	bl	8003504 <log_1>
                    tx_msg_proc.sender_addr = cur_dev_addr;
 8002016:	4bae      	ldr	r3, [pc, #696]	; (80022d0 <proc_task+0x348>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tx_msg_proc.message_type = rx_msg_proc.message_type;
 800201e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8002022:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
                    tx_msg_proc.workers_in_safe_zone = 0;
 8002026:	2200      	movs	r2, #0
 8002028:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
                    tx_msg_proc.direction = RESPONSE;
 800202c:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
                    tx_msg_proc.battery_level = BATTERY_LEVEL_GOOD; // change it after
 8002030:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
                    tx_msg_proc.receiver_addr = RECV_BASE_STATION;
 8002034:	2203      	movs	r2, #3
 8002036:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
                    switch (rx_msg_proc.message_type) {
 800203a:	2b04      	cmp	r3, #4
 800203c:	f200 80fa 	bhi.w	8002234 <proc_task+0x2ac>
 8002040:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002044:	005300c8 	.word	0x005300c8
 8002048:	00e400ab 	.word	0x00e400ab
 800204c:	0025      	.short	0x0025
 800204e:	4ca1      	ldr	r4, [pc, #644]	; (80022d4 <proc_task+0x34c>)
 8002050:	49a1      	ldr	r1, [pc, #644]	; (80022d8 <proc_task+0x350>)
 8002052:	1a64      	subs	r4, r4, r1
 8002054:	08e4      	lsrs	r4, r4, #3
                LOG_DBG("addr = 0x%02x, own addr = 0x%02x", rx_msg_proc.receiver_addr, cur_dev_addr);
 8002056:	2504      	movs	r5, #4
 8002058:	f365 0b02 	bfi	fp, r5, #0, #3
 800205c:	f36f 0bc5 	bfc	fp, #3, #3
 8002060:	f364 1b8f 	bfi	fp, r4, #6, #10
 8002064:	f8ad b000 	strh.w	fp, [sp]
 8002068:	499c      	ldr	r1, [pc, #624]	; (80022dc <proc_task+0x354>)
 800206a:	489e      	ldr	r0, [pc, #632]	; (80022e4 <proc_task+0x35c>)
 800206c:	f001 f9e6 	bl	800343c <log_3>
                LOG_DBG("Packet is filtered");
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	f365 0302 	bfi	r3, r5, #0, #3
 8002076:	f36f 03c5 	bfc	r3, #3, #3
 800207a:	f364 138f 	bfi	r3, r4, #6, #10
 800207e:	461a      	mov	r2, r3
 8002080:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002084:	4995      	ldr	r1, [pc, #596]	; (80022dc <proc_task+0x354>)
 8002086:	4898      	ldr	r0, [pc, #608]	; (80022e8 <proc_task+0x360>)
 8002088:	f001 fa3c 	bl	8003504 <log_1>
                continue;
 800208c:	e1b4      	b.n	80023f8 <proc_task+0x470>
 800208e:	4b91      	ldr	r3, [pc, #580]	; (80022d4 <proc_task+0x34c>)
 8002090:	4a91      	ldr	r2, [pc, #580]	; (80022d8 <proc_task+0x350>)
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_SYNC");
 8002096:	2204      	movs	r2, #4
 8002098:	9908      	ldr	r1, [sp, #32]
 800209a:	f362 0102 	bfi	r1, r2, #0, #3
 800209e:	460a      	mov	r2, r1
 80020a0:	f36f 02c5 	bfc	r2, #3, #3
 80020a4:	f363 128f 	bfi	r2, r3, #6, #10
 80020a8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80020ac:	4621      	mov	r1, r4
 80020ae:	488f      	ldr	r0, [pc, #572]	; (80022ec <proc_task+0x364>)
 80020b0:	f001 fa28 	bl	8003504 <log_1>
	z_impl_k_timer_stop(timer);
 80020b4:	4c8e      	ldr	r4, [pc, #568]	; (80022f0 <proc_task+0x368>)
 80020b6:	4620      	mov	r0, r4
 80020b8:	f00b f975 	bl	800d3a6 <z_impl_k_timer_stop>
	return z_impl_k_sleep(timeout);
 80020bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c0:	2100      	movs	r1, #0
 80020c2:	f007 f889 	bl	80091d8 <z_impl_k_sleep>
                            k_timer_start(&periodic_timer, K_MSEC(PERIODIC_TIMER_DURATION_MSEC),
 80020c6:	f242 6248 	movw	r2, #9800	; 0x2648
 80020ca:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
 80020cc:	e9cd 2300 	strd	r2, r3, [sp]
 80020d0:	4620      	mov	r0, r4
 80020d2:	f007 fab3 	bl	800963c <z_impl_k_timer_start>
                            current_state = transmit_state;
 80020d6:	4b87      	ldr	r3, [pc, #540]	; (80022f4 <proc_task+0x36c>)
 80020d8:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <proc_task+0x370>)
 80020da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020de:	e883 0003 	stmia.w	r3, {r0, r1}
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
 80020e2:	4886      	ldr	r0, [pc, #536]	; (80022fc <proc_task+0x374>)
 80020e4:	f00a feae 	bl	800ce44 <z_impl_k_msgq_purge>
            if (msgq_cur_msg_tx_ptr) {
 80020e8:	e182      	b.n	80023f0 <proc_task+0x468>
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <proc_task+0x34c>)
 80020ec:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <proc_task+0x350>)
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 80020f2:	2204      	movs	r2, #4
 80020f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020f6:	f362 0102 	bfi	r1, r2, #0, #3
 80020fa:	460a      	mov	r2, r1
 80020fc:	f36f 02c5 	bfc	r2, #3, #3
 8002100:	f363 128f 	bfi	r2, r3, #6, #10
 8002104:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8002108:	4621      	mov	r1, r4
 800210a:	487d      	ldr	r0, [pc, #500]	; (8002300 <proc_task+0x378>)
 800210c:	f001 f9fa 	bl	8003504 <log_1>
                            switch (rx_msg_proc.sender_addr) {
 8002110:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8002114:	2b03      	cmp	r3, #3
 8002116:	d016      	beq.n	8002146 <proc_task+0x1be>
 8002118:	2b04      	cmp	r3, #4
 800211a:	d029      	beq.n	8002170 <proc_task+0x1e8>
 800211c:	4b6d      	ldr	r3, [pc, #436]	; (80022d4 <proc_task+0x34c>)
 800211e:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <proc_task+0x350>)
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Undefined sender address for this message type");
 8002124:	2204      	movs	r2, #4
 8002126:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002128:	f362 0102 	bfi	r1, r2, #0, #3
 800212c:	460a      	mov	r2, r1
 800212e:	f36f 02c5 	bfc	r2, #3, #3
 8002132:	f363 128f 	bfi	r2, r3, #6, #10
 8002136:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800213a:	4621      	mov	r1, r4
 800213c:	4871      	ldr	r0, [pc, #452]	; (8002304 <proc_task+0x37c>)
 800213e:	f001 f9e1 	bl	8003504 <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 8002142:	4871      	ldr	r0, [pc, #452]	; (8002308 <proc_task+0x380>)
 8002144:	e03d      	b.n	80021c2 <proc_task+0x23a>
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <proc_task+0x34c>)
 8002148:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <proc_task+0x350>)
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Base station disabled alarm");
 800214e:	2204      	movs	r2, #4
 8002150:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002152:	f362 0102 	bfi	r1, r2, #0, #3
 8002156:	460a      	mov	r2, r1
 8002158:	f36f 02c5 	bfc	r2, #3, #3
 800215c:	f363 128f 	bfi	r2, r3, #6, #10
 8002160:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8002164:	4621      	mov	r1, r4
 8002166:	4869      	ldr	r0, [pc, #420]	; (800230c <proc_task+0x384>)
 8002168:	f001 f9cc 	bl	8003504 <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 800216c:	4866      	ldr	r0, [pc, #408]	; (8002308 <proc_task+0x380>)
 800216e:	e028      	b.n	80021c2 <proc_task+0x23a>
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <proc_task+0x34c>)
 8002172:	4a59      	ldr	r2, [pc, #356]	; (80022d8 <proc_task+0x350>)
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	08db      	lsrs	r3, r3, #3
                                    LOG_DBG("Brigade chief disabled alarm");
 8002178:	2204      	movs	r2, #4
 800217a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800217c:	f362 0102 	bfi	r1, r2, #0, #3
 8002180:	460a      	mov	r2, r1
 8002182:	f36f 02c5 	bfc	r2, #3, #3
 8002186:	f363 128f 	bfi	r2, r3, #6, #10
 800218a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 800218e:	4621      	mov	r1, r4
 8002190:	485f      	ldr	r0, [pc, #380]	; (8002310 <proc_task+0x388>)
 8002192:	f001 f9b7 	bl	8003504 <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 8002196:	485c      	ldr	r0, [pc, #368]	; (8002308 <proc_task+0x380>)
 8002198:	e013      	b.n	80021c2 <proc_task+0x23a>
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <proc_task+0x34c>)
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <proc_task+0x350>)
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 80021a2:	2204      	movs	r2, #4
 80021a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80021a6:	f362 0102 	bfi	r1, r2, #0, #3
 80021aa:	460a      	mov	r2, r1
 80021ac:	f36f 02c5 	bfc	r2, #3, #3
 80021b0:	f363 128f 	bfi	r2, r3, #6, #10
 80021b4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80021b8:	4621      	mov	r1, r4
 80021ba:	4856      	ldr	r0, [pc, #344]	; (8002314 <proc_task+0x38c>)
 80021bc:	f001 f9a2 	bl	8003504 <log_1>
                            msgq_cur_msg_tx_ptr = &msgq_tx_msg;
 80021c0:	4851      	ldr	r0, [pc, #324]	; (8002308 <proc_task+0x380>)
            if (msgq_cur_msg_tx_ptr) {
 80021c2:	2800      	cmp	r0, #0
 80021c4:	f000 8114 	beq.w	80023f0 <proc_task+0x468>
	return z_impl_k_msgq_put(msgq, data, timeout);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2300      	movs	r3, #0
 80021cc:	a916      	add	r1, sp, #88	; 0x58
 80021ce:	f006 f939 	bl	8008444 <z_impl_k_msgq_put>
            con_qual_leds_num = check_rssi(&rssi);
 80021d2:	e10d      	b.n	80023f0 <proc_task+0x468>
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <proc_task+0x34c>)
 80021d6:	4a40      	ldr	r2, [pc, #256]	; (80022d8 <proc_task+0x350>)
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 80021dc:	2204      	movs	r2, #4
 80021de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021e0:	f362 0102 	bfi	r1, r2, #0, #3
 80021e4:	460a      	mov	r2, r1
 80021e6:	f36f 02c5 	bfc	r2, #3, #3
 80021ea:	f363 128f 	bfi	r2, r3, #6, #10
 80021ee:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80021f2:	4621      	mov	r1, r4
 80021f4:	4848      	ldr	r0, [pc, #288]	; (8002318 <proc_task+0x390>)
 80021f6:	f001 f985 	bl	8003504 <log_1>
                            if (rx_msg_proc.sender_addr == cur_dev_addr)
 80021fa:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <proc_task+0x348>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	f040 80f4 	bne.w	80023f0 <proc_task+0x468>
                                msgq_cur_msg_tx_ptr = &msgq_tx_msg_prio; // For response message
 8002208:	4844      	ldr	r0, [pc, #272]	; (800231c <proc_task+0x394>)
 800220a:	e7da      	b.n	80021c2 <proc_task+0x23a>
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <proc_task+0x34c>)
 800220e:	4a32      	ldr	r2, [pc, #200]	; (80022d8 <proc_task+0x350>)
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 8002214:	2204      	movs	r2, #4
 8002216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002218:	f362 0102 	bfi	r1, r2, #0, #3
 800221c:	460a      	mov	r2, r1
 800221e:	f36f 02c5 	bfc	r2, #3, #3
 8002222:	f363 128f 	bfi	r2, r3, #6, #10
 8002226:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800222a:	4621      	mov	r1, r4
 800222c:	483c      	ldr	r0, [pc, #240]	; (8002320 <proc_task+0x398>)
 800222e:	f001 f969 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002232:	e0dd      	b.n	80023f0 <proc_task+0x468>
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <proc_task+0x34c>)
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <proc_task+0x350>)
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 800223c:	2204      	movs	r2, #4
 800223e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002240:	f362 0102 	bfi	r1, r2, #0, #3
 8002244:	460a      	mov	r2, r1
 8002246:	f36f 02c5 	bfc	r2, #3, #3
 800224a:	f363 128f 	bfi	r2, r3, #6, #10
 800224e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8002252:	4621      	mov	r1, r4
 8002254:	4833      	ldr	r0, [pc, #204]	; (8002324 <proc_task+0x39c>)
 8002256:	f001 f955 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 800225a:	e0c9      	b.n	80023f0 <proc_task+0x468>
 800225c:	4c1d      	ldr	r4, [pc, #116]	; (80022d4 <proc_task+0x34c>)
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <proc_task+0x350>)
 8002260:	1ae4      	subs	r4, r4, r3
 8002262:	08e4      	lsrs	r4, r4, #3
                    LOG_DBG(" RESPONSE");
 8002264:	2304      	movs	r3, #4
 8002266:	f363 0802 	bfi	r8, r3, #0, #3
 800226a:	f36f 08c5 	bfc	r8, #3, #3
 800226e:	f364 188f 	bfi	r8, r4, #6, #10
 8002272:	4d1a      	ldr	r5, [pc, #104]	; (80022dc <proc_task+0x354>)
 8002274:	4642      	mov	r2, r8
 8002276:	4629      	mov	r1, r5
 8002278:	482b      	ldr	r0, [pc, #172]	; (8002328 <proc_task+0x3a0>)
 800227a:	f001 f943 	bl	8003504 <log_1>
                    LOG_DBG("Message type:");
 800227e:	2304      	movs	r3, #4
 8002280:	f363 0902 	bfi	r9, r3, #0, #3
 8002284:	f36f 09c5 	bfc	r9, #3, #3
 8002288:	f364 198f 	bfi	r9, r4, #6, #10
 800228c:	464a      	mov	r2, r9
 800228e:	4629      	mov	r1, r5
 8002290:	4826      	ldr	r0, [pc, #152]	; (800232c <proc_task+0x3a4>)
 8002292:	f001 f937 	bl	8003504 <log_1>
                    switch (rx_msg_proc.message_type) {
 8002296:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800229a:	2b03      	cmp	r3, #3
 800229c:	f200 8084 	bhi.w	80023a8 <proc_task+0x420>
 80022a0:	e8df f003 	tbb	[pc, r3]
 80022a4:	6e46025a 	.word	0x6e46025a
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <proc_task+0x34c>)
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <proc_task+0x350>)
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_DISABLE_ALARM");
 80022b0:	2204      	movs	r2, #4
 80022b2:	9904      	ldr	r1, [sp, #16]
 80022b4:	f362 0102 	bfi	r1, r2, #0, #3
 80022b8:	460a      	mov	r2, r1
 80022ba:	f36f 02c5 	bfc	r2, #3, #3
 80022be:	f363 128f 	bfi	r2, r3, #6, #10
 80022c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80022c6:	4629      	mov	r1, r5
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <proc_task+0x378>)
 80022ca:	f001 f91b 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80022ce:	e08f      	b.n	80023f0 <proc_task+0x468>
 80022d0:	20000294 	.word	0x20000294
 80022d4:	0800e010 	.word	0x0800e010
 80022d8:	0800e008 	.word	0x0800e008
 80022dc:	0800e418 	.word	0x0800e418
 80022e0:	0800e27c 	.word	0x0800e27c
 80022e4:	0800e23c 	.word	0x0800e23c
 80022e8:	0800e264 	.word	0x0800e264
 80022ec:	0800e28c 	.word	0x0800e28c
 80022f0:	200004e8 	.word	0x200004e8
 80022f4:	20000910 	.word	0x20000910
 80022f8:	20000964 	.word	0x20000964
 80022fc:	200003cc 	.word	0x200003cc
 8002300:	0800e2a4 	.word	0x0800e2a4
 8002304:	0800e308 	.word	0x0800e308
 8002308:	20000468 	.word	0x20000468
 800230c:	0800e2c4 	.word	0x0800e2c4
 8002310:	0800e2e4 	.word	0x0800e2e4
 8002314:	0800e33c 	.word	0x0800e33c
 8002318:	0800e358 	.word	0x0800e358
 800231c:	2000049c 	.word	0x2000049c
 8002320:	0800e370 	.word	0x0800e370
 8002324:	0800e390 	.word	0x0800e390
 8002328:	0800e3b0 	.word	0x0800e3b0
 800232c:	0800e3c0 	.word	0x0800e3c0
 8002330:	4b4a      	ldr	r3, [pc, #296]	; (800245c <proc_task+0x4d4>)
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <proc_task+0x4d8>)
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_HOMEWARD");
 8002338:	2204      	movs	r2, #4
 800233a:	9905      	ldr	r1, [sp, #20]
 800233c:	f362 0102 	bfi	r1, r2, #0, #3
 8002340:	460a      	mov	r2, r1
 8002342:	f36f 02c5 	bfc	r2, #3, #3
 8002346:	f363 128f 	bfi	r2, r3, #6, #10
 800234a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800234e:	4629      	mov	r1, r5
 8002350:	4844      	ldr	r0, [pc, #272]	; (8002464 <proc_task+0x4dc>)
 8002352:	f001 f8d7 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 8002356:	e04b      	b.n	80023f0 <proc_task+0x468>
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <proc_task+0x4d4>)
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <proc_task+0x4d8>)
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_ALARM");
 8002360:	2204      	movs	r2, #4
 8002362:	9906      	ldr	r1, [sp, #24]
 8002364:	f362 0102 	bfi	r1, r2, #0, #3
 8002368:	460a      	mov	r2, r1
 800236a:	f36f 02c5 	bfc	r2, #3, #3
 800236e:	f363 128f 	bfi	r2, r3, #6, #10
 8002372:	f8ad 2018 	strh.w	r2, [sp, #24]
 8002376:	4629      	mov	r1, r5
 8002378:	483b      	ldr	r0, [pc, #236]	; (8002468 <proc_task+0x4e0>)
 800237a:	f001 f8c3 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 800237e:	e037      	b.n	80023f0 <proc_task+0x468>
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <proc_task+0x4d4>)
 8002382:	4a37      	ldr	r2, [pc, #220]	; (8002460 <proc_task+0x4d8>)
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	08db      	lsrs	r3, r3, #3
                            LOG_DBG(" MESSAGE_TYPE_TRAIN_PASSED");
 8002388:	2204      	movs	r2, #4
 800238a:	9907      	ldr	r1, [sp, #28]
 800238c:	f362 0102 	bfi	r1, r2, #0, #3
 8002390:	460a      	mov	r2, r1
 8002392:	f36f 02c5 	bfc	r2, #3, #3
 8002396:	f363 128f 	bfi	r2, r3, #6, #10
 800239a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800239e:	4629      	mov	r1, r5
 80023a0:	4832      	ldr	r0, [pc, #200]	; (800246c <proc_task+0x4e4>)
 80023a2:	f001 f8af 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80023a6:	e023      	b.n	80023f0 <proc_task+0x468>
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <proc_task+0x4d4>)
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <proc_task+0x4d8>)
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	08db      	lsrs	r3, r3, #3
                            LOG_DBG("Not correct message type");
 80023b0:	2204      	movs	r2, #4
 80023b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80023b4:	f362 0102 	bfi	r1, r2, #0, #3
 80023b8:	460a      	mov	r2, r1
 80023ba:	f36f 02c5 	bfc	r2, #3, #3
 80023be:	f363 128f 	bfi	r2, r3, #6, #10
 80023c2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 80023c6:	4629      	mov	r1, r5
 80023c8:	4829      	ldr	r0, [pc, #164]	; (8002470 <proc_task+0x4e8>)
 80023ca:	f001 f89b 	bl	8003504 <log_1>
            if (msgq_cur_msg_tx_ptr) {
 80023ce:	e00f      	b.n	80023f0 <proc_task+0x468>
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <proc_task+0x4d4>)
 80023d2:	4a23      	ldr	r2, [pc, #140]	; (8002460 <proc_task+0x4d8>)
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	08db      	lsrs	r3, r3, #3
                    LOG_DBG("Not correct message direction");
 80023d8:	2204      	movs	r2, #4
 80023da:	f362 0a02 	bfi	sl, r2, #0, #3
 80023de:	f36f 0ac5 	bfc	sl, #3, #3
 80023e2:	f363 1a8f 	bfi	sl, r3, #6, #10
 80023e6:	4652      	mov	r2, sl
 80023e8:	4922      	ldr	r1, [pc, #136]	; (8002474 <proc_task+0x4ec>)
 80023ea:	4823      	ldr	r0, [pc, #140]	; (8002478 <proc_task+0x4f0>)
 80023ec:	f001 f88a 	bl	8003504 <log_1>
	return z_impl_k_sleep(timeout);
 80023f0:	2001      	movs	r0, #1
 80023f2:	2100      	movs	r1, #0
 80023f4:	f006 fef0 	bl	80091d8 <z_impl_k_sleep>
 80023f8:	4b20      	ldr	r3, [pc, #128]	; (800247c <proc_task+0x4f4>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ( k_msgq_num_used_get(&msgq_rx_msg) ) {
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f7      	beq.n	80023f0 <proc_task+0x468>
            k_msgq_get(&msgq_rx_msg, &rx_buf_proc, K_NO_WAIT);
 8002400:	2400      	movs	r4, #0
 8002402:	2500      	movs	r5, #0
	return z_impl_k_msgq_get(msgq, data, timeout);
 8002404:	4622      	mov	r2, r4
 8002406:	462b      	mov	r3, r5
 8002408:	a913      	add	r1, sp, #76	; 0x4c
 800240a:	481c      	ldr	r0, [pc, #112]	; (800247c <proc_task+0x4f4>)
 800240c:	f006 f876 	bl	80084fc <z_impl_k_msgq_get>
 8002410:	4622      	mov	r2, r4
 8002412:	462b      	mov	r3, r5
 8002414:	f10d 0166 	add.w	r1, sp, #102	; 0x66
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <proc_task+0x4f8>)
 800241a:	f006 f86f 	bl	80084fc <z_impl_k_msgq_get>
            if (rx_buf_proc[0] == rx_buf_proc[1] == rx_buf_proc[2] == 0) {
 800241e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8002422:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8002426:	4293      	cmp	r3, r2
 8002428:	bf14      	ite	ne
 800242a:	2300      	movne	r3, #0
 800242c:	2301      	moveq	r3, #1
 800242e:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
 8002432:	4293      	cmp	r3, r2
 8002434:	f43f adb6 	beq.w	8001fa4 <proc_task+0x1c>
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <proc_task+0x4d4>)
 800243a:	4a09      	ldr	r2, [pc, #36]	; (8002460 <proc_task+0x4d8>)
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	08db      	lsrs	r3, r3, #3
                LOG_DBG("Empty message");
 8002440:	2204      	movs	r2, #4
 8002442:	f362 0602 	bfi	r6, r2, #0, #3
 8002446:	f36f 06c5 	bfc	r6, #3, #3
 800244a:	f363 168f 	bfi	r6, r3, #6, #10
 800244e:	4632      	mov	r2, r6
 8002450:	4908      	ldr	r1, [pc, #32]	; (8002474 <proc_task+0x4ec>)
 8002452:	480c      	ldr	r0, [pc, #48]	; (8002484 <proc_task+0x4fc>)
 8002454:	f001 f856 	bl	8003504 <log_1>
                continue;
 8002458:	e7ce      	b.n	80023f8 <proc_task+0x470>
 800245a:	bf00      	nop
 800245c:	0800e010 	.word	0x0800e010
 8002460:	0800e008 	.word	0x0800e008
 8002464:	0800e33c 	.word	0x0800e33c
 8002468:	0800e358 	.word	0x0800e358
 800246c:	0800e370 	.word	0x0800e370
 8002470:	0800e390 	.word	0x0800e390
 8002474:	0800e418 	.word	0x0800e418
 8002478:	0800e3d4 	.word	0x0800e3d4
 800247c:	20000434 	.word	0x20000434
 8002480:	20000400 	.word	0x20000400
 8002484:	0800e228 	.word	0x0800e228

08002488 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
 8002488:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
 800248a:	680b      	ldr	r3, [r1, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8002490:	4b01      	ldr	r3, [pc, #4]	; (8002498 <char_out+0x10>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4798      	blx	r3
}
 8002496:	bd08      	pop	{r3, pc}
 8002498:	20000000 	.word	0x20000000

0800249c <__printk_hook_install>:
	_char_out = fn;
 800249c:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <__printk_hook_install+0x8>)
 800249e:	6018      	str	r0, [r3, #0]
}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80024a8:	b500      	push	{lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80024b0:	2100      	movs	r1, #0
 80024b2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80024b4:	a901      	add	r1, sp, #4
 80024b6:	4803      	ldr	r0, [pc, #12]	; (80024c4 <vprintk+0x1c>)
 80024b8:	f000 fa2c 	bl	8002914 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80024bc:	b003      	add	sp, #12
 80024be:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c2:	bf00      	nop
 80024c4:	08002489 	.word	0x08002489

080024c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80024c8:	b510      	push	{r4, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80024ce:	9001      	str	r0, [sp, #4]
 80024d0:	9102      	str	r1, [sp, #8]
 80024d2:	2100      	movs	r1, #0
 80024d4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 80024d6:	a901      	add	r1, sp, #4
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <vsnprintk+0x28>)
 80024da:	f000 fa1b 	bl	8002914 <cbvprintf>

	if (ctx.count < ctx.max) {
 80024de:	9b03      	ldr	r3, [sp, #12]
 80024e0:	9a02      	ldr	r2, [sp, #8]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	da01      	bge.n	80024ea <vsnprintk+0x22>
		str[ctx.count] = '\0';
 80024e6:	2200      	movs	r2, #0
 80024e8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 80024ea:	9803      	ldr	r0, [sp, #12]
 80024ec:	b004      	add	sp, #16
 80024ee:	bd10      	pop	{r4, pc}
 80024f0:	0800b4cf 	.word	0x0800b4cf

080024f4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 80024f4:	4684      	mov	ip, r0
	const char *sp = *str;
 80024f6:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 80024f8:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 80024fa:	e005      	b.n	8002508 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
 80024fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002500:	3201      	adds	r2, #1
 8002502:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002506:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8002508:	7813      	ldrb	r3, [r2, #0]
 800250a:	4904      	ldr	r1, [pc, #16]	; (800251c <extract_decimal+0x28>)
 800250c:	5c59      	ldrb	r1, [r3, r1]
 800250e:	f011 0f04 	tst.w	r1, #4
 8002512:	d1f3      	bne.n	80024fc <extract_decimal+0x8>
	}
	*str = sp;
 8002514:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	0800f295 	.word	0x0800f295

08002520 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	4604      	mov	r4, r0
	*conv = (struct conversion) {
 8002526:	2300      	movs	r3, #0
 8002528:	6003      	str	r3, [r0, #0]
 800252a:	6043      	str	r3, [r0, #4]
 800252c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 800252e:	784b      	ldrb	r3, [r1, #1]
 8002530:	2b25      	cmp	r3, #37	; 0x25
 8002532:	d002      	beq.n	800253a <extract_conversion+0x1a>
 8002534:	1c4e      	adds	r6, r1, #1
	bool loop = true;
 8002536:	2501      	movs	r5, #1
 8002538:	e01f      	b.n	800257a <extract_conversion+0x5a>
		conv->specifier = *sp++;
 800253a:	1c88      	adds	r0, r1, #2
 800253c:	70e3      	strb	r3, [r4, #3]
		return sp;
 800253e:	e145      	b.n	80027cc <extract_conversion+0x2ac>
			conv->flag_dash = true;
 8002540:	7823      	ldrb	r3, [r4, #0]
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	7023      	strb	r3, [r4, #0]
		if (loop) {
 8002548:	b1b5      	cbz	r5, 8002578 <extract_conversion+0x58>
			++sp;
 800254a:	3601      	adds	r6, #1
 800254c:	e014      	b.n	8002578 <extract_conversion+0x58>
			conv->flag_plus = true;
 800254e:	7823      	ldrb	r3, [r4, #0]
 8002550:	f043 0308 	orr.w	r3, r3, #8
 8002554:	7023      	strb	r3, [r4, #0]
			break;
 8002556:	e7f7      	b.n	8002548 <extract_conversion+0x28>
			conv->flag_space = true;
 8002558:	7823      	ldrb	r3, [r4, #0]
 800255a:	f043 0310 	orr.w	r3, r3, #16
 800255e:	7023      	strb	r3, [r4, #0]
			break;
 8002560:	e7f2      	b.n	8002548 <extract_conversion+0x28>
			conv->flag_hash = true;
 8002562:	7823      	ldrb	r3, [r4, #0]
 8002564:	f043 0320 	orr.w	r3, r3, #32
 8002568:	7023      	strb	r3, [r4, #0]
			break;
 800256a:	e7ed      	b.n	8002548 <extract_conversion+0x28>
			conv->flag_zero = true;
 800256c:	7823      	ldrb	r3, [r4, #0]
 800256e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002572:	7023      	strb	r3, [r4, #0]
			break;
 8002574:	e7e8      	b.n	8002548 <extract_conversion+0x28>
		switch (*sp) {
 8002576:	2500      	movs	r5, #0
	} while (loop);
 8002578:	b345      	cbz	r5, 80025cc <extract_conversion+0xac>
		switch (*sp) {
 800257a:	7833      	ldrb	r3, [r6, #0]
 800257c:	3b20      	subs	r3, #32
 800257e:	2b10      	cmp	r3, #16
 8002580:	d8f9      	bhi.n	8002576 <extract_conversion+0x56>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <extract_conversion+0x68>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	08002559 	.word	0x08002559
 800258c:	08002577 	.word	0x08002577
 8002590:	08002577 	.word	0x08002577
 8002594:	08002563 	.word	0x08002563
 8002598:	08002577 	.word	0x08002577
 800259c:	08002577 	.word	0x08002577
 80025a0:	08002577 	.word	0x08002577
 80025a4:	08002577 	.word	0x08002577
 80025a8:	08002577 	.word	0x08002577
 80025ac:	08002577 	.word	0x08002577
 80025b0:	08002577 	.word	0x08002577
 80025b4:	0800254f 	.word	0x0800254f
 80025b8:	08002577 	.word	0x08002577
 80025bc:	08002541 	.word	0x08002541
 80025c0:	08002577 	.word	0x08002577
 80025c4:	08002577 	.word	0x08002577
 80025c8:	0800256d 	.word	0x0800256d
	if (conv->flag_zero && conv->flag_dash) {
 80025cc:	7823      	ldrb	r3, [r4, #0]
 80025ce:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80025d2:	2b44      	cmp	r3, #68	; 0x44
 80025d4:	d05f      	beq.n	8002696 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
 80025d6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
 80025d8:	7823      	ldrb	r3, [r4, #0]
 80025da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025de:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
 80025e0:	7833      	ldrb	r3, [r6, #0]
 80025e2:	2b2a      	cmp	r3, #42	; 0x2a
 80025e4:	d05c      	beq.n	80026a0 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
 80025e6:	a801      	add	r0, sp, #4
 80025e8:	f7ff ff84 	bl	80024f4 <extract_decimal>
	if (sp != wp) {
 80025ec:	9b01      	ldr	r3, [sp, #4]
 80025ee:	429e      	cmp	r6, r3
 80025f0:	d00f      	beq.n	8002612 <extract_conversion+0xf2>
		conv->width_present = true;
 80025f2:	7823      	ldrb	r3, [r4, #0]
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
 80025fa:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8002602:	2800      	cmp	r0, #0
 8002604:	db54      	blt.n	80026b0 <extract_conversion+0x190>
 8002606:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 8002608:	4313      	orrs	r3, r2
 800260a:	7822      	ldrb	r2, [r4, #0]
 800260c:	f363 0241 	bfi	r2, r3, #1, #1
 8002610:	7022      	strb	r2, [r4, #0]
	return sp;
 8002612:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
 8002614:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b2e      	cmp	r3, #46	; 0x2e
 800261a:	bf14      	ite	ne
 800261c:	2300      	movne	r3, #0
 800261e:	2301      	moveq	r3, #1
 8002620:	7862      	ldrb	r2, [r4, #1]
 8002622:	f363 0241 	bfi	r2, r3, #1, #1
 8002626:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
 8002628:	2b00      	cmp	r3, #0
 800262a:	d043      	beq.n	80026b4 <extract_conversion+0x194>
	++sp;
 800262c:	9b01      	ldr	r3, [sp, #4]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b2a      	cmp	r3, #42	; 0x2a
 8002636:	d03f      	beq.n	80026b8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
 8002638:	a801      	add	r0, sp, #4
 800263a:	f7ff ff5b 	bl	80024f4 <extract_decimal>
	conv->prec_value = prec;
 800263e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
 8002640:	7823      	ldrb	r3, [r4, #0]
 8002642:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 8002646:	2800      	cmp	r0, #0
 8002648:	db3e      	blt.n	80026c8 <extract_conversion+0x1a8>
 800264a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 800264c:	4313      	orrs	r3, r2
 800264e:	7822      	ldrb	r2, [r4, #0]
 8002650:	f363 0241 	bfi	r2, r3, #1, #1
 8002654:	7022      	strb	r2, [r4, #0]
	return sp;
 8002656:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
 8002658:	7803      	ldrb	r3, [r0, #0]
 800265a:	3b4c      	subs	r3, #76	; 0x4c
 800265c:	2b2e      	cmp	r3, #46	; 0x2e
 800265e:	f200 809d 	bhi.w	800279c <extract_conversion+0x27c>
 8002662:	e8df f003 	tbb	[pc, r3]
 8002666:	9b90      	.short	0x9b90
 8002668:	9b9b9b9b 	.word	0x9b9b9b9b
 800266c:	9b9b9b9b 	.word	0x9b9b9b9b
 8002670:	9b9b9b9b 	.word	0x9b9b9b9b
 8002674:	9b9b9b9b 	.word	0x9b9b9b9b
 8002678:	9b9b9b9b 	.word	0x9b9b9b9b
 800267c:	9b9b9b9b 	.word	0x9b9b9b9b
 8002680:	9b339b9b 	.word	0x9b339b9b
 8002684:	9b459b57 	.word	0x9b459b57
 8002688:	9b9b9b9b 	.word	0x9b9b9b9b
 800268c:	9b899b9b 	.word	0x9b899b9b
 8002690:	9b9b9b9b 	.word	0x9b9b9b9b
 8002694:	82          	.byte	0x82
 8002695:	00          	.byte	0x00
		conv->flag_zero = false;
 8002696:	7823      	ldrb	r3, [r4, #0]
 8002698:	f36f 1386 	bfc	r3, #6, #1
 800269c:	7023      	strb	r3, [r4, #0]
 800269e:	e79a      	b.n	80025d6 <extract_conversion+0xb6>
		conv->width_star = true;
 80026a0:	7863      	ldrb	r3, [r4, #1]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80026a8:	4633      	mov	r3, r6
 80026aa:	3301      	adds	r3, #1
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	e7b1      	b.n	8002614 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
 80026b0:	2201      	movs	r2, #1
 80026b2:	e7a9      	b.n	8002608 <extract_conversion+0xe8>
		return sp;
 80026b4:	9801      	ldr	r0, [sp, #4]
 80026b6:	e7cf      	b.n	8002658 <extract_conversion+0x138>
		conv->prec_star = true;
 80026b8:	7863      	ldrb	r3, [r4, #1]
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	7063      	strb	r3, [r4, #1]
		return ++sp;
 80026c0:	4610      	mov	r0, r2
 80026c2:	3001      	adds	r0, #1
 80026c4:	9001      	str	r0, [sp, #4]
 80026c6:	e7c7      	b.n	8002658 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
 80026c8:	2201      	movs	r2, #1
 80026ca:	e7bf      	b.n	800264c <extract_conversion+0x12c>
		if (*++sp == 'h') {
 80026cc:	1c42      	adds	r2, r0, #1
 80026ce:	7843      	ldrb	r3, [r0, #1]
 80026d0:	2b68      	cmp	r3, #104	; 0x68
 80026d2:	d006      	beq.n	80026e2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
 80026d4:	7863      	ldrb	r3, [r4, #1]
 80026d6:	2102      	movs	r1, #2
 80026d8:	f361 03c6 	bfi	r3, r1, #3, #4
 80026dc:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
 80026de:	4610      	mov	r0, r2
 80026e0:	e01e      	b.n	8002720 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
 80026e2:	7863      	ldrb	r3, [r4, #1]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f362 03c6 	bfi	r3, r2, #3, #4
 80026ea:	7063      	strb	r3, [r4, #1]
			++sp;
 80026ec:	3002      	adds	r0, #2
 80026ee:	e017      	b.n	8002720 <extract_conversion+0x200>
		if (*++sp == 'l') {
 80026f0:	1c42      	adds	r2, r0, #1
 80026f2:	7843      	ldrb	r3, [r0, #1]
 80026f4:	2b6c      	cmp	r3, #108	; 0x6c
 80026f6:	d006      	beq.n	8002706 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
 80026f8:	7863      	ldrb	r3, [r4, #1]
 80026fa:	2103      	movs	r1, #3
 80026fc:	f361 03c6 	bfi	r3, r1, #3, #4
 8002700:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
 8002702:	4610      	mov	r0, r2
 8002704:	e00c      	b.n	8002720 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
 8002706:	7863      	ldrb	r3, [r4, #1]
 8002708:	2204      	movs	r2, #4
 800270a:	f362 03c6 	bfi	r3, r2, #3, #4
 800270e:	7063      	strb	r3, [r4, #1]
			++sp;
 8002710:	3002      	adds	r0, #2
 8002712:	e005      	b.n	8002720 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
 8002714:	7863      	ldrb	r3, [r4, #1]
 8002716:	2205      	movs	r2, #5
 8002718:	f362 03c6 	bfi	r3, r2, #3, #4
 800271c:	7063      	strb	r3, [r4, #1]
		++sp;
 800271e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
 8002720:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002724:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
 8002726:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800272a:	2a37      	cmp	r2, #55	; 0x37
 800272c:	d87d      	bhi.n	800282a <extract_conversion+0x30a>
 800272e:	e8df f002 	tbb	[pc, r2]
 8002732:	7c5e      	.short	0x7c5e
 8002734:	5e5e7c7c 	.word	0x5e5e7c7c
 8002738:	7c7c7c5e 	.word	0x7c7c7c5e
 800273c:	7c7c7c7c 	.word	0x7c7c7c7c
 8002740:	7c7c7c7c 	.word	0x7c7c7c7c
 8002744:	7c7c7c7c 	.word	0x7c7c7c7c
 8002748:	7c7c4f7c 	.word	0x7c7c4f7c
 800274c:	7c7c7c7c 	.word	0x7c7c7c7c
 8002750:	7c5e7c7c 	.word	0x7c5e7c7c
 8002754:	5e5e3a4f 	.word	0x5e5e3a4f
 8002758:	7c3a7c5e 	.word	0x7c3a7c5e
 800275c:	657c7c7c 	.word	0x657c7c7c
 8002760:	7c7c714f 	.word	0x7c7c714f
 8002764:	7c4f7c71 	.word	0x7c4f7c71
 8002768:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
 800276a:	7863      	ldrb	r3, [r4, #1]
 800276c:	2206      	movs	r2, #6
 800276e:	f362 03c6 	bfi	r3, r2, #3, #4
 8002772:	7063      	strb	r3, [r4, #1]
		++sp;
 8002774:	3001      	adds	r0, #1
		break;
 8002776:	e7d3      	b.n	8002720 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
 8002778:	7863      	ldrb	r3, [r4, #1]
 800277a:	2207      	movs	r2, #7
 800277c:	f362 03c6 	bfi	r3, r2, #3, #4
 8002780:	7063      	strb	r3, [r4, #1]
		++sp;
 8002782:	3001      	adds	r0, #1
		break;
 8002784:	e7cc      	b.n	8002720 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
 8002786:	7863      	ldrb	r3, [r4, #1]
 8002788:	2208      	movs	r2, #8
 800278a:	f362 03c6 	bfi	r3, r2, #3, #4
 800278e:	7063      	strb	r3, [r4, #1]
		++sp;
 8002790:	3001      	adds	r0, #1
		conv->unsupported = true;
 8002792:	7823      	ldrb	r3, [r4, #0]
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	7023      	strb	r3, [r4, #0]
		break;
 800279a:	e7c1      	b.n	8002720 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
 800279c:	7863      	ldrb	r3, [r4, #1]
 800279e:	f36f 03c6 	bfc	r3, #3, #4
 80027a2:	7063      	strb	r3, [r4, #1]
		break;
 80027a4:	e7bc      	b.n	8002720 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
 80027a6:	78a2      	ldrb	r2, [r4, #2]
 80027a8:	2101      	movs	r1, #1
 80027aa:	f361 0202 	bfi	r2, r1, #0, #3
 80027ae:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80027b0:	7862      	ldrb	r2, [r4, #1]
 80027b2:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80027b6:	2a40      	cmp	r2, #64	; 0x40
 80027b8:	d010      	beq.n	80027dc <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
 80027ba:	2b63      	cmp	r3, #99	; 0x63
 80027bc:	d013      	beq.n	80027e6 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
 80027be:	7823      	ldrb	r3, [r4, #0]
 80027c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80027c4:	4315      	orrs	r5, r2
 80027c6:	f365 0341 	bfi	r3, r5, #1, #1
 80027ca:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 80027cc:	b002      	add	sp, #8
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
 80027d0:	78a2      	ldrb	r2, [r4, #2]
 80027d2:	2102      	movs	r1, #2
 80027d4:	f361 0202 	bfi	r2, r1, #0, #3
 80027d8:	70a2      	strb	r2, [r4, #2]
 80027da:	e7e9      	b.n	80027b0 <extract_conversion+0x290>
			conv->invalid = true;
 80027dc:	7821      	ldrb	r1, [r4, #0]
 80027de:	f041 0101 	orr.w	r1, r1, #1
 80027e2:	7021      	strb	r1, [r4, #0]
 80027e4:	e7e9      	b.n	80027ba <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80027e6:	1e15      	subs	r5, r2, #0
 80027e8:	bf18      	it	ne
 80027ea:	2501      	movne	r5, #1
 80027ec:	e7e7      	b.n	80027be <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
 80027ee:	78a3      	ldrb	r3, [r4, #2]
 80027f0:	2204      	movs	r2, #4
 80027f2:	f362 0302 	bfi	r3, r2, #0, #3
 80027f6:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
 80027f8:	2501      	movs	r5, #1
			break;
 80027fa:	e7e0      	b.n	80027be <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 80027fc:	78a3      	ldrb	r3, [r4, #2]
 80027fe:	2203      	movs	r2, #3
 8002800:	f362 0302 	bfi	r3, r2, #0, #3
 8002804:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8002806:	7863      	ldrb	r3, [r4, #1]
 8002808:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d1d6      	bne.n	80027be <extract_conversion+0x29e>
			unsupported = true;
 8002810:	2501      	movs	r5, #1
 8002812:	e7d4      	b.n	80027be <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
 8002814:	78a3      	ldrb	r3, [r4, #2]
 8002816:	2203      	movs	r2, #3
 8002818:	f362 0302 	bfi	r3, r2, #0, #3
 800281c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
 800281e:	7863      	ldrb	r3, [r4, #1]
 8002820:	f013 0f78 	tst.w	r3, #120	; 0x78
 8002824:	d0cb      	beq.n	80027be <extract_conversion+0x29e>
			unsupported = true;
 8002826:	2501      	movs	r5, #1
 8002828:	e7c9      	b.n	80027be <extract_conversion+0x29e>
		conv->invalid = true;
 800282a:	7823      	ldrb	r3, [r4, #0]
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	7023      	strb	r3, [r4, #0]
		break;
 8002832:	e7c4      	b.n	80027be <extract_conversion+0x29e>

08002834 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8002834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	b083      	sub	sp, #12
 800283a:	4604      	mov	r4, r0
 800283c:	460d      	mov	r5, r1
 800283e:	9201      	str	r2, [sp, #4]
 8002840:	469a      	mov	sl, r3
 8002842:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8002844:	78d3      	ldrb	r3, [r2, #3]
 8002846:	4a32      	ldr	r2, [pc, #200]	; (8002910 <encode_uint+0xdc>)
 8002848:	f813 b002 	ldrb.w	fp, [r3, r2]
 800284c:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8002850:	2b6f      	cmp	r3, #111	; 0x6f
 8002852:	d00f      	beq.n	8002874 <encode_uint+0x40>
 8002854:	d906      	bls.n	8002864 <encode_uint+0x30>
 8002856:	2b70      	cmp	r3, #112	; 0x70
 8002858:	d00f      	beq.n	800287a <encode_uint+0x46>
 800285a:	2b78      	cmp	r3, #120	; 0x78
 800285c:	d110      	bne.n	8002880 <encode_uint+0x4c>
		return 16;
 800285e:	f04f 0910 	mov.w	r9, #16
 8002862:	e023      	b.n	80028ac <encode_uint+0x78>
	switch (specifier) {
 8002864:	2b58      	cmp	r3, #88	; 0x58
 8002866:	d002      	beq.n	800286e <encode_uint+0x3a>
 8002868:	f04f 090a 	mov.w	r9, #10
 800286c:	e01e      	b.n	80028ac <encode_uint+0x78>
		return 16;
 800286e:	f04f 0910 	mov.w	r9, #16
 8002872:	e01b      	b.n	80028ac <encode_uint+0x78>
		return 8;
 8002874:	f04f 0908 	mov.w	r9, #8
 8002878:	e018      	b.n	80028ac <encode_uint+0x78>
		return 16;
 800287a:	f04f 0910 	mov.w	r9, #16
 800287e:	e015      	b.n	80028ac <encode_uint+0x78>
	switch (specifier) {
 8002880:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8002884:	e012      	b.n	80028ac <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	3230      	adds	r2, #48	; 0x30
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8002890:	463a      	mov	r2, r7
 8002892:	4643      	mov	r3, r8
 8002894:	4620      	mov	r0, r4
 8002896:	4629      	mov	r1, r5
 8002898:	f7fe f8a0 	bl	80009dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 800289c:	42bc      	cmp	r4, r7
 800289e:	f175 0300 	sbcs.w	r3, r5, #0
 80028a2:	d319      	bcc.n	80028d8 <encode_uint+0xa4>
 80028a4:	4556      	cmp	r6, sl
 80028a6:	d917      	bls.n	80028d8 <encode_uint+0xa4>
		value /= radix;
 80028a8:	4604      	mov	r4, r0
 80028aa:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 80028ac:	f04f 0800 	mov.w	r8, #0
 80028b0:	464f      	mov	r7, r9
 80028b2:	464a      	mov	r2, r9
 80028b4:	4643      	mov	r3, r8
 80028b6:	4620      	mov	r0, r4
 80028b8:	4629      	mov	r1, r5
 80028ba:	f7fe f88f 	bl	80009dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028be:	2a09      	cmp	r2, #9
 80028c0:	d9e1      	bls.n	8002886 <encode_uint+0x52>
 80028c2:	f1bb 0f01 	cmp.w	fp, #1
 80028c6:	d003      	beq.n	80028d0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80028c8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028ca:	3257      	adds	r2, #87	; 0x57
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	e7dd      	b.n	800288c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80028d0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80028d2:	3237      	adds	r2, #55	; 0x37
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	e7d9      	b.n	800288c <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80028d8:	9b01      	ldr	r3, [sp, #4]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f013 0f20 	tst.w	r3, #32
 80028e0:	d005      	beq.n	80028ee <encode_uint+0xba>
		if (radix == 8) {
 80028e2:	f1b9 0f08 	cmp.w	r9, #8
 80028e6:	d006      	beq.n	80028f6 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 80028e8:	f1b9 0f10 	cmp.w	r9, #16
 80028ec:	d009      	beq.n	8002902 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 80028ee:	4630      	mov	r0, r6
 80028f0:	b003      	add	sp, #12
 80028f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 80028f6:	9a01      	ldr	r2, [sp, #4]
 80028f8:	7893      	ldrb	r3, [r2, #2]
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	7093      	strb	r3, [r2, #2]
 8002900:	e7f5      	b.n	80028ee <encode_uint+0xba>
			conv->altform_0c = true;
 8002902:	9a01      	ldr	r2, [sp, #4]
 8002904:	7893      	ldrb	r3, [r2, #2]
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	7093      	strb	r3, [r2, #2]
 800290c:	e7ef      	b.n	80028ee <encode_uint+0xba>
 800290e:	bf00      	nop
 8002910:	0800f295 	.word	0x0800f295

08002914 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8002914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002918:	b091      	sub	sp, #68	; 0x44
 800291a:	4606      	mov	r6, r0
 800291c:	460d      	mov	r5, r1
 800291e:	4691      	mov	r9, r2
 8002920:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8002922:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8002924:	f899 0000 	ldrb.w	r0, [r9]
 8002928:	2800      	cmp	r0, #0
 800292a:	f000 82d5 	beq.w	8002ed8 <cbvprintf+0x5c4>
		if (*fp != '%') {
 800292e:	2825      	cmp	r0, #37	; 0x25
 8002930:	d008      	beq.n	8002944 <cbvprintf+0x30>
			OUTC(*fp++);
 8002932:	f109 0901 	add.w	r9, r9, #1
 8002936:	4629      	mov	r1, r5
 8002938:	47b0      	blx	r6
 800293a:	2800      	cmp	r0, #0
 800293c:	f2c0 82cd 	blt.w	8002eda <cbvprintf+0x5c6>
 8002940:	3401      	adds	r4, #1
			continue;
 8002942:	e7ef      	b.n	8002924 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
 8002944:	2300      	movs	r3, #0
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	9305      	str	r3, [sp, #20]
 800294a:	9306      	str	r3, [sp, #24]
 800294c:	9307      	str	r3, [sp, #28]
 800294e:	9308      	str	r3, [sp, #32]
 8002950:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
 8002952:	4649      	mov	r1, r9
 8002954:	a806      	add	r0, sp, #24
 8002956:	f7ff fde3 	bl	8002520 <extract_conversion>
 800295a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
 800295c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002960:	f013 0f01 	tst.w	r3, #1
 8002964:	f000 8097 	beq.w	8002a96 <cbvprintf+0x182>
			width = va_arg(ap, int);
 8002968:	9b03      	ldr	r3, [sp, #12]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	9203      	str	r2, [sp, #12]
 800296e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
 8002970:	2f00      	cmp	r7, #0
 8002972:	f2c0 8088 	blt.w	8002a86 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
 8002976:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800297a:	f013 0f04 	tst.w	r3, #4
 800297e:	f000 809c 	beq.w	8002aba <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	9203      	str	r2, [sp, #12]
 8002988:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
 800298c:	f1ba 0f00 	cmp.w	sl, #0
 8002990:	f2c0 808a 	blt.w	8002aa8 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
 8002998:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
 800299a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800299e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
 80029a2:	f89d 1019 	ldrb.w	r1, [sp, #25]
 80029a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f000 808e 	beq.w	8002acc <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	f000 80d3 	beq.w	8002b5c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	f000 8124 	beq.w	8002c04 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
 80029bc:	2b03      	cmp	r3, #3
 80029be:	f000 813b 	beq.w	8002c38 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
 80029c2:	f89d 8018 	ldrb.w	r8, [sp, #24]
 80029c6:	f018 0b03 	ands.w	fp, r8, #3
 80029ca:	f040 813b 	bne.w	8002c44 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
 80029ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80029d2:	3b25      	subs	r3, #37	; 0x25
 80029d4:	2b53      	cmp	r3, #83	; 0x53
 80029d6:	f200 81e6 	bhi.w	8002da6 <cbvprintf+0x492>
 80029da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029de:	0140      	.short	0x0140
 80029e0:	01e401e4 	.word	0x01e401e4
 80029e4:	01e401e4 	.word	0x01e401e4
 80029e8:	01e401e4 	.word	0x01e401e4
 80029ec:	01e401e4 	.word	0x01e401e4
 80029f0:	01e401e4 	.word	0x01e401e4
 80029f4:	01e401e4 	.word	0x01e401e4
 80029f8:	01e401e4 	.word	0x01e401e4
 80029fc:	01e401e4 	.word	0x01e401e4
 8002a00:	01e401e4 	.word	0x01e401e4
 8002a04:	01e401e4 	.word	0x01e401e4
 8002a08:	01e401e4 	.word	0x01e401e4
 8002a0c:	01e401e4 	.word	0x01e401e4
 8002a10:	01e401e4 	.word	0x01e401e4
 8002a14:	01e401e4 	.word	0x01e401e4
 8002a18:	01e401e4 	.word	0x01e401e4
 8002a1c:	01e401e4 	.word	0x01e401e4
 8002a20:	01e401e4 	.word	0x01e401e4
 8002a24:	01e401e4 	.word	0x01e401e4
 8002a28:	01e401e4 	.word	0x01e401e4
 8002a2c:	01e401e4 	.word	0x01e401e4
 8002a30:	01e401e4 	.word	0x01e401e4
 8002a34:	01e401e4 	.word	0x01e401e4
 8002a38:	01e401e4 	.word	0x01e401e4
 8002a3c:	01e401e4 	.word	0x01e401e4
 8002a40:	01e401e4 	.word	0x01e401e4
 8002a44:	01e40181 	.word	0x01e40181
 8002a48:	01e401e4 	.word	0x01e401e4
 8002a4c:	01e401e4 	.word	0x01e401e4
 8002a50:	01e401e4 	.word	0x01e401e4
 8002a54:	01e401e4 	.word	0x01e401e4
 8002a58:	015e01e4 	.word	0x015e01e4
 8002a5c:	01e40167 	.word	0x01e40167
 8002a60:	01e401e4 	.word	0x01e401e4
 8002a64:	016701e4 	.word	0x016701e4
 8002a68:	01e401e4 	.word	0x01e401e4
 8002a6c:	01e401e4 	.word	0x01e401e4
 8002a70:	018101be 	.word	0x018101be
 8002a74:	01e401a2 	.word	0x01e401a2
 8002a78:	014d01e4 	.word	0x014d01e4
 8002a7c:	018101e4 	.word	0x018101e4
 8002a80:	01e401e4 	.word	0x01e401e4
 8002a84:	0181      	.short	0x0181
				conv->flag_dash = true;
 8002a86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
 8002a92:	427f      	negs	r7, r7
 8002a94:	e76f      	b.n	8002976 <cbvprintf+0x62>
		} else if (conv->width_present) {
 8002a96:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db02      	blt.n	8002aa4 <cbvprintf+0x190>
		int width = -1;
 8002a9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002aa2:	e768      	b.n	8002976 <cbvprintf+0x62>
			width = conv->width_value;
 8002aa4:	9f07      	ldr	r7, [sp, #28]
 8002aa6:	e766      	b.n	8002976 <cbvprintf+0x62>
				conv->prec_present = false;
 8002aa8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002aac:	f36f 0341 	bfc	r3, #1, #1
 8002ab0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
 8002ab4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002ab8:	e76c      	b.n	8002994 <cbvprintf+0x80>
		} else if (conv->prec_present) {
 8002aba:	f013 0f02 	tst.w	r3, #2
 8002abe:	d002      	beq.n	8002ac6 <cbvprintf+0x1b2>
			precision = conv->prec_value;
 8002ac0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002ac4:	e766      	b.n	8002994 <cbvprintf+0x80>
		int precision = -1;
 8002ac6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8002aca:	e763      	b.n	8002994 <cbvprintf+0x80>
			switch (length_mod) {
 8002acc:	1ecb      	subs	r3, r1, #3
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d804      	bhi.n	8002adc <cbvprintf+0x1c8>
 8002ad2:	e8df f003 	tbb	[pc, r3]
 8002ad6:	1d0b      	.short	0x1d0b
 8002ad8:	3529      	.short	0x3529
 8002ada:	35          	.byte	0x35
 8002adb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	1d1a      	adds	r2, r3, #4
 8002ae0:	9203      	str	r2, [sp, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	17da      	asrs	r2, r3, #31
 8002ae6:	9304      	str	r3, [sp, #16]
 8002ae8:	9205      	str	r2, [sp, #20]
				break;
 8002aea:	e006      	b.n	8002afa <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	9203      	str	r2, [sp, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	17da      	asrs	r2, r3, #31
 8002af6:	9304      	str	r3, [sp, #16]
 8002af8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
 8002afa:	2901      	cmp	r1, #1
 8002afc:	d028      	beq.n	8002b50 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
 8002afe:	2902      	cmp	r1, #2
 8002b00:	f47f af5f 	bne.w	80029c2 <cbvprintf+0xae>
				value->sint = (short)value->sint;
 8002b04:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8002b08:	17da      	asrs	r2, r3, #31
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	9205      	str	r2, [sp, #20]
 8002b0e:	e758      	b.n	80029c2 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	3307      	adds	r3, #7
 8002b14:	f023 0307 	bic.w	r3, r3, #7
 8002b18:	f103 0208 	add.w	r2, r3, #8
 8002b1c:	9203      	str	r2, [sp, #12]
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002b26:	e7e8      	b.n	8002afa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	3307      	adds	r3, #7
 8002b2c:	f023 0307 	bic.w	r3, r3, #7
 8002b30:	f103 0208 	add.w	r2, r3, #8
 8002b34:	9203      	str	r2, [sp, #12]
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8002b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002b3e:	e7dc      	b.n	8002afa <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	1d1a      	adds	r2, r3, #4
 8002b44:	9203      	str	r2, [sp, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	17da      	asrs	r2, r3, #31
				value->sint =
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	9205      	str	r2, [sp, #20]
				break;
 8002b4e:	e7d4      	b.n	8002afa <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
 8002b50:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002b54:	9304      	str	r3, [sp, #16]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9305      	str	r3, [sp, #20]
 8002b5a:	e732      	b.n	80029c2 <cbvprintf+0xae>
			switch (length_mod) {
 8002b5c:	1ecb      	subs	r3, r1, #3
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d804      	bhi.n	8002b6c <cbvprintf+0x258>
 8002b62:	e8df f003 	tbb	[pc, r3]
 8002b66:	1f0b      	.short	0x1f0b
 8002b68:	4135      	.short	0x4135
 8002b6a:	41          	.byte	0x41
 8002b6b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8002b6c:	9b03      	ldr	r3, [sp, #12]
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	9203      	str	r2, [sp, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	9304      	str	r3, [sp, #16]
 8002b76:	2300      	movs	r3, #0
 8002b78:	9305      	str	r3, [sp, #20]
				break;
 8002b7a:	e01e      	b.n	8002bba <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
 8002b7c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
 8002b80:	2b63      	cmp	r3, #99	; 0x63
 8002b82:	d007      	beq.n	8002b94 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
 8002b84:	9b03      	ldr	r3, [sp, #12]
 8002b86:	1d1a      	adds	r2, r3, #4
 8002b88:	9203      	str	r2, [sp, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9305      	str	r3, [sp, #20]
 8002b92:	e012      	b.n	8002bba <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	9203      	str	r2, [sp, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9305      	str	r3, [sp, #20]
 8002ba2:	e00a      	b.n	8002bba <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
 8002ba4:	9b03      	ldr	r3, [sp, #12]
 8002ba6:	3307      	adds	r3, #7
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	f103 0208 	add.w	r2, r3, #8
 8002bb0:	9203      	str	r2, [sp, #12]
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002bb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
 8002bba:	2901      	cmp	r1, #1
 8002bbc:	d01c      	beq.n	8002bf8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
 8002bbe:	2902      	cmp	r1, #2
 8002bc0:	f47f aeff 	bne.w	80029c2 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
 8002bc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002bc8:	9304      	str	r3, [sp, #16]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	e6f8      	b.n	80029c2 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
 8002bd0:	9b03      	ldr	r3, [sp, #12]
 8002bd2:	3307      	adds	r3, #7
 8002bd4:	f023 0307 	bic.w	r3, r3, #7
 8002bd8:	f103 0208 	add.w	r2, r3, #8
 8002bdc:	9203      	str	r2, [sp, #12]
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8002be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
 8002be6:	e7e8      	b.n	8002bba <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
 8002be8:	9b03      	ldr	r3, [sp, #12]
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	9203      	str	r2, [sp, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8002bf0:	9304      	str	r3, [sp, #16]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9305      	str	r3, [sp, #20]
				break;
 8002bf6:	e7e0      	b.n	8002bba <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
 8002bf8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9305      	str	r3, [sp, #20]
 8002c02:	e6de      	b.n	80029c2 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
 8002c04:	2908      	cmp	r1, #8
 8002c06:	d00b      	beq.n	8002c20 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	3307      	adds	r3, #7
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	f103 0208 	add.w	r2, r3, #8
 8002c14:	9203      	str	r2, [sp, #12]
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c1e:	e6d0      	b.n	80029c2 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
 8002c20:	9b03      	ldr	r3, [sp, #12]
 8002c22:	3307      	adds	r3, #7
 8002c24:	f023 0307 	bic.w	r3, r3, #7
 8002c28:	f103 0208 	add.w	r2, r3, #8
 8002c2c:	9203      	str	r2, [sp, #12]
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c36:	e6c4      	b.n	80029c2 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	9203      	str	r2, [sp, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	e6be      	b.n	80029c2 <cbvprintf+0xae>
			OUTS(sp, fp);
 8002c44:	9f02      	ldr	r7, [sp, #8]
 8002c46:	463b      	mov	r3, r7
 8002c48:	464a      	mov	r2, r9
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f008 fd80 	bl	800b752 <outs>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	f2c0 8141 	blt.w	8002eda <cbvprintf+0x5c6>
 8002c58:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8002c5a:	46b9      	mov	r9, r7
			continue;
 8002c5c:	e662      	b.n	8002924 <cbvprintf+0x10>
		case '%':
			OUTC('%');
 8002c5e:	4629      	mov	r1, r5
 8002c60:	2025      	movs	r0, #37	; 0x25
 8002c62:	47b0      	blx	r6
 8002c64:	2800      	cmp	r0, #0
 8002c66:	f2c0 8138 	blt.w	8002eda <cbvprintf+0x5c6>
 8002c6a:	3401      	adds	r4, #1
		char sign = 0;
 8002c6c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002c6e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002c72:	f04f 0900 	mov.w	r9, #0
			break;
 8002c76:	e09b      	b.n	8002db0 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
 8002c78:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
 8002c7c:	f1ba 0f00 	cmp.w	sl, #0
 8002c80:	db07      	blt.n	8002c92 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
 8002c82:	4651      	mov	r1, sl
 8002c84:	4648      	mov	r0, r9
 8002c86:	f00a fd65 	bl	800d754 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
 8002c8a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
 8002c8e:	46d8      	mov	r8, fp
			precision = -1;

			break;
 8002c90:	e08e      	b.n	8002db0 <cbvprintf+0x49c>
				len = strlen(bps);
 8002c92:	4648      	mov	r0, r9
 8002c94:	f7fe f8df 	bl	8000e56 <strlen>
 8002c98:	e7f7      	b.n	8002c8a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
 8002ca0:	46d8      	mov	r8, fp
			bpe = buf + 1;
 8002ca2:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
 8002ca6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
 8002caa:	e081      	b.n	8002db0 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
 8002cac:	f018 0f08 	tst.w	r8, #8
 8002cb0:	d105      	bne.n	8002cbe <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
 8002cb2:	f018 0810 	ands.w	r8, r8, #16
 8002cb6:	d004      	beq.n	8002cc2 <cbvprintf+0x3ae>
				sign = ' ';
 8002cb8:	f04f 0820 	mov.w	r8, #32
 8002cbc:	e001      	b.n	8002cc2 <cbvprintf+0x3ae>
				sign = '+';
 8002cbe:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
 8002cc2:	9a04      	ldr	r2, [sp, #16]
 8002cc4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db02      	blt.n	8002cd0 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
 8002cca:	9204      	str	r2, [sp, #16]
 8002ccc:	9305      	str	r3, [sp, #20]
 8002cce:	e008      	b.n	8002ce2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002cd6:	9204      	str	r2, [sp, #16]
 8002cd8:	9305      	str	r3, [sp, #20]
				sign = '-';
 8002cda:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002cde:	e000      	b.n	8002ce2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
 8002ce0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
 8002ce2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8002cea:	aa06      	add	r2, sp, #24
 8002cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cf0:	f7ff fda0 	bl	8002834 <encode_uint>
 8002cf4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
 8002cf6:	f1ba 0f00 	cmp.w	sl, #0
 8002cfa:	f2c0 8088 	blt.w	8002e0e <cbvprintf+0x4fa>
				size_t len = bpe - bps;
 8002cfe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002d02:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
 8002d06:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002d0a:	f36f 1286 	bfc	r2, #6, #1
 8002d0e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
 8002d12:	459a      	cmp	sl, r3
 8002d14:	d97e      	bls.n	8002e14 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
 8002d16:	ebaa 0303 	sub.w	r3, sl, r3
 8002d1a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
 8002d1c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002d20:	e046      	b.n	8002db0 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
 8002d22:	9804      	ldr	r0, [sp, #16]
 8002d24:	b928      	cbnz	r0, 8002d32 <cbvprintf+0x41e>
		char sign = 0;
 8002d26:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
 8002d28:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8002ee0 <cbvprintf+0x5cc>
			bps = "(nil)";
 8002d2c:	f1aa 0905 	sub.w	r9, sl, #5
 8002d30:	e03e      	b.n	8002db0 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8002d32:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	ab0a      	add	r3, sp, #40	; 0x28
 8002d3a:	aa06      	add	r2, sp, #24
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f7ff fd79 	bl	8002834 <encode_uint>
 8002d42:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8002d44:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002d48:	f043 0310 	orr.w	r3, r3, #16
 8002d4c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
 8002d50:	2378      	movs	r3, #120	; 0x78
 8002d52:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
 8002d56:	46d8      	mov	r8, fp
				goto prec_int_pad0;
 8002d58:	e7cd      	b.n	8002cf6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
 8002d5a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
 8002d5c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8002d60:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d806      	bhi.n	8002d76 <cbvprintf+0x462>
 8002d68:	e8df f003 	tbb	[pc, r3]
 8002d6c:	0f0d0b04 	.word	0x0f0d0b04
 8002d70:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
 8002d74:	6014      	str	r4, [r2, #0]
		char sign = 0;
 8002d76:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
 8002d78:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
 8002d7c:	f04f 0900 	mov.w	r9, #0
}
 8002d80:	e016      	b.n	8002db0 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
 8002d82:	7014      	strb	r4, [r2, #0]
		break;
 8002d84:	e7f7      	b.n	8002d76 <cbvprintf+0x462>
		*(short *)dp = (short)count;
 8002d86:	8014      	strh	r4, [r2, #0]
		break;
 8002d88:	e7f5      	b.n	8002d76 <cbvprintf+0x462>
		*(long *)dp = (long)count;
 8002d8a:	6014      	str	r4, [r2, #0]
		break;
 8002d8c:	e7f3      	b.n	8002d76 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
 8002d8e:	17e3      	asrs	r3, r4, #31
 8002d90:	6014      	str	r4, [r2, #0]
 8002d92:	6053      	str	r3, [r2, #4]
		break;
 8002d94:	e7ef      	b.n	8002d76 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
 8002d96:	17e3      	asrs	r3, r4, #31
 8002d98:	6014      	str	r4, [r2, #0]
 8002d9a:	6053      	str	r3, [r2, #4]
		break;
 8002d9c:	e7eb      	b.n	8002d76 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
 8002d9e:	6014      	str	r4, [r2, #0]
		break;
 8002da0:	e7e9      	b.n	8002d76 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8002da2:	6014      	str	r4, [r2, #0]
		break;
 8002da4:	e7e7      	b.n	8002d76 <cbvprintf+0x462>
		switch (conv->specifier) {
 8002da6:	46d8      	mov	r8, fp
 8002da8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002dac:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
 8002db0:	f1b9 0f00 	cmp.w	r9, #0
 8002db4:	f000 808d 	beq.w	8002ed2 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
 8002db8:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
 8002dbc:	f1b8 0f00 	cmp.w	r8, #0
 8002dc0:	d000      	beq.n	8002dc4 <cbvprintf+0x4b0>
			nj_len += 1U;
 8002dc2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
 8002dc4:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8002dc8:	f011 0f10 	tst.w	r1, #16
 8002dcc:	d025      	beq.n	8002e1a <cbvprintf+0x506>
			nj_len += 2U;
 8002dce:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
 8002dd0:	9b07      	ldr	r3, [sp, #28]
 8002dd2:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8002dd4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002dd8:	d001      	beq.n	8002dde <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
 8002dda:	9a08      	ldr	r2, [sp, #32]
 8002ddc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
 8002dde:	2f00      	cmp	r7, #0
 8002de0:	dd31      	ble.n	8002e46 <cbvprintf+0x532>
			width -= (int)nj_len;
 8002de2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
 8002de4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002de8:	f013 0f04 	tst.w	r3, #4
 8002dec:	d12b      	bne.n	8002e46 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
 8002dee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002df2:	d017      	beq.n	8002e24 <cbvprintf+0x510>
					if (sign != 0) {
 8002df4:	f1b8 0f00 	cmp.w	r8, #0
 8002df8:	d017      	beq.n	8002e2a <cbvprintf+0x516>
						OUTC(sign);
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	4640      	mov	r0, r8
 8002dfe:	47b0      	blx	r6
 8002e00:	2800      	cmp	r0, #0
 8002e02:	db6a      	blt.n	8002eda <cbvprintf+0x5c6>
 8002e04:	3401      	adds	r4, #1
						sign = 0;
 8002e06:	46d8      	mov	r8, fp
					}
					pad = '0';
 8002e08:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002e0c:	e00f      	b.n	8002e2e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
 8002e0e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002e12:	e7cd      	b.n	8002db0 <cbvprintf+0x49c>
 8002e14:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
 8002e18:	e7ca      	b.n	8002db0 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
 8002e1a:	f011 0f08 	tst.w	r1, #8
 8002e1e:	d0d7      	beq.n	8002dd0 <cbvprintf+0x4bc>
			nj_len += 1U;
 8002e20:	3201      	adds	r2, #1
 8002e22:	e7d5      	b.n	8002dd0 <cbvprintf+0x4bc>
				char pad = ' ';
 8002e24:	f04f 0b20 	mov.w	fp, #32
 8002e28:	e001      	b.n	8002e2e <cbvprintf+0x51a>
					pad = '0';
 8002e2a:	f04f 0b30 	mov.w	fp, #48	; 0x30
 8002e2e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
 8002e30:	1e5f      	subs	r7, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	dd07      	ble.n	8002e46 <cbvprintf+0x532>
					OUTC(pad);
 8002e36:	4629      	mov	r1, r5
 8002e38:	4658      	mov	r0, fp
 8002e3a:	47b0      	blx	r6
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	db4c      	blt.n	8002eda <cbvprintf+0x5c6>
 8002e40:	3401      	adds	r4, #1
				while (width-- > 0) {
 8002e42:	463b      	mov	r3, r7
 8002e44:	e7f4      	b.n	8002e30 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
 8002e46:	f1b8 0f00 	cmp.w	r8, #0
 8002e4a:	d005      	beq.n	8002e58 <cbvprintf+0x544>
			OUTC(sign);
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4640      	mov	r0, r8
 8002e50:	47b0      	blx	r6
 8002e52:	2800      	cmp	r0, #0
 8002e54:	db41      	blt.n	8002eda <cbvprintf+0x5c6>
 8002e56:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
 8002e58:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002e5c:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8002e60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e64:	4313      	orrs	r3, r2
 8002e66:	d005      	beq.n	8002e74 <cbvprintf+0x560>
				OUTC('0');
 8002e68:	4629      	mov	r1, r5
 8002e6a:	2030      	movs	r0, #48	; 0x30
 8002e6c:	47b0      	blx	r6
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	db33      	blt.n	8002eda <cbvprintf+0x5c6>
 8002e72:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
 8002e74:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002e78:	f013 0f10 	tst.w	r3, #16
 8002e7c:	d006      	beq.n	8002e8c <cbvprintf+0x578>
				OUTC(conv->specifier);
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8002e84:	47b0      	blx	r6
 8002e86:	2800      	cmp	r0, #0
 8002e88:	db27      	blt.n	8002eda <cbvprintf+0x5c6>
 8002e8a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
 8002e8c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
 8002e8e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dd07      	ble.n	8002ea6 <cbvprintf+0x592>
				OUTC('0');
 8002e96:	4629      	mov	r1, r5
 8002e98:	2030      	movs	r0, #48	; 0x30
 8002e9a:	47b0      	blx	r6
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	db1c      	blt.n	8002eda <cbvprintf+0x5c6>
 8002ea0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 8002ea2:	4643      	mov	r3, r8
 8002ea4:	e7f3      	b.n	8002e8e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
 8002ea6:	4653      	mov	r3, sl
 8002ea8:	464a      	mov	r2, r9
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4630      	mov	r0, r6
 8002eae:	f008 fc50 	bl	800b752 <outs>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	db11      	blt.n	8002eda <cbvprintf+0x5c6>
 8002eb6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
 8002eb8:	2f00      	cmp	r7, #0
 8002eba:	dd07      	ble.n	8002ecc <cbvprintf+0x5b8>
			OUTC(' ');
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	2020      	movs	r0, #32
 8002ec0:	47b0      	blx	r6
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	db09      	blt.n	8002eda <cbvprintf+0x5c6>
 8002ec6:	3401      	adds	r4, #1
			--width;
 8002ec8:	3f01      	subs	r7, #1
 8002eca:	e7f5      	b.n	8002eb8 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
 8002ecc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002ed0:	e528      	b.n	8002924 <cbvprintf+0x10>
 8002ed2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002ed6:	e525      	b.n	8002924 <cbvprintf+0x10>
		}
	}

	return count;
 8002ed8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
 8002eda:	b011      	add	sp, #68	; 0x44
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	0800e46d 	.word	0x0800e46d

08002ee4 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8002ee4:	f04f 0210 	mov.w	r2, #16
 8002ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8002eec:	f382 8812 	msr	BASEPRI_MAX, r2
 8002ef0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <stm32l4_init+0x24>)
 8002efe:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <stm32l4_init+0x28>)
 8002f00:	601a      	str	r2, [r3, #0]

	return 0;
}
 8002f02:	2000      	movs	r0, #0
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	200000b0 	.word	0x200000b0
 8002f0c:	003d0900 	.word	0x003d0900

08002f10 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <is_rodata+0x18>)
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d304      	bcc.n	8002f20 <is_rodata+0x10>
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <is_rodata+0x1c>)
 8002f18:	4298      	cmp	r0, r3
 8002f1a:	d303      	bcc.n	8002f24 <is_rodata+0x14>
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	4770      	bx	lr
 8002f20:	2000      	movs	r0, #0
 8002f22:	4770      	bx	lr
 8002f24:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
 8002f26:	4770      	bx	lr
 8002f28:	0800db98 	.word	0x0800db98
 8002f2c:	0800f50c 	.word	0x0800f50c

08002f30 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
 8002f30:	b508      	push	{r3, lr}
	proc_tid = process_tid;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <thread_set+0x1c>)
 8002f34:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
 8002f36:	b118      	cbz	r0, 8002f40 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <thread_set+0x20>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	dc00      	bgt.n	8002f42 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
 8002f40:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 8002f42:	4804      	ldr	r0, [pc, #16]	; (8002f54 <thread_set+0x24>)
 8002f44:	f005 fc06 	bl	8008754 <z_impl_k_sem_give>
}
 8002f48:	e7fa      	b.n	8002f40 <thread_set+0x10>
 8002f4a:	bf00      	nop
 8002f4c:	200009ac 	.word	0x200009ac
 8002f50:	20000978 	.word	0x20000978
 8002f54:	200004d0 	.word	0x200004d0

08002f58 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
 8002f58:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
 8002f5a:	4802      	ldr	r0, [pc, #8]	; (8002f64 <log_process_thread_timer_expiry_fn+0xc>)
 8002f5c:	f005 fbfa 	bl	8008754 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop
 8002f64:	200004d0 	.word	0x200004d0

08002f68 <next_pending>:
{
 8002f68:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <next_pending+0x10>)
 8002f6c:	f008 fc1c 	bl	800b7a8 <log_list_head_peek>
}
 8002f70:	3800      	subs	r0, #0
 8002f72:	bf18      	it	ne
 8002f74:	2001      	movne	r0, #1
 8002f76:	bd08      	pop	{r3, pc}
 8002f78:	20000984 	.word	0x20000984

08002f7c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8002f7c:	b530      	push	{r4, r5, lr}
 8002f7e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
 8002f80:	2200      	movs	r2, #0
 8002f82:	490f      	ldr	r1, [pc, #60]	; (8002fc0 <enable_logger+0x44>)
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <enable_logger+0x48>)
 8002f86:	f00a fa02 	bl	800d38e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8002f8a:	4d0f      	ldr	r5, [pc, #60]	; (8002fc8 <enable_logger+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002f94:	2400      	movs	r4, #0
 8002f96:	9404      	str	r4, [sp, #16]
 8002f98:	230e      	movs	r3, #14
 8002f9a:	9303      	str	r3, [sp, #12]
 8002f9c:	9402      	str	r4, [sp, #8]
 8002f9e:	9401      	str	r4, [sp, #4]
 8002fa0:	9400      	str	r4, [sp, #0]
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <enable_logger+0x50>)
 8002fa4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fa8:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <enable_logger+0x54>)
 8002faa:	4628      	mov	r0, r5
 8002fac:	f009 ff1c 	bl	800cde8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8002fb0:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <enable_logger+0x58>)
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f009 ff04 	bl	800cdc0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
 8002fb8:	4620      	mov	r0, r4
 8002fba:	b009      	add	sp, #36	; 0x24
 8002fbc:	bd30      	pop	{r4, r5, pc}
 8002fbe:	bf00      	nop
 8002fc0:	08002f59 	.word	0x08002f59
 8002fc4:	200006a0 	.word	0x200006a0
 8002fc8:	200006d8 	.word	0x200006d8
 8002fcc:	0800362d 	.word	0x0800362d
 8002fd0:	20001b40 	.word	0x20001b40
 8002fd4:	0800e474 	.word	0x0800e474

08002fd8 <z_log_get_s_mask>:
{
 8002fd8:	b530      	push	{r4, r5, lr}
 8002fda:	4603      	mov	r3, r0
	uint32_t mask = 0U;
 8002fdc:	2000      	movs	r0, #0
	uint32_t arg = 0U;
 8002fde:	4684      	mov	ip, r0
	bool arm = false;
 8002fe0:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
 8002fe2:	e001      	b.n	8002fe8 <z_log_get_s_mask+0x10>
			arm = !arm;
 8002fe4:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
 8002fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fec:	b1b2      	cbz	r2, 800301c <z_log_get_s_mask+0x44>
 8002fee:	458c      	cmp	ip, r1
 8002ff0:	d214      	bcs.n	800301c <z_log_get_s_mask+0x44>
		if (curr == '%') {
 8002ff2:	2a25      	cmp	r2, #37	; 0x25
 8002ff4:	d0f6      	beq.n	8002fe4 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
 8002ff6:	2c00      	cmp	r4, #0
 8002ff8:	d0f6      	beq.n	8002fe8 <z_log_get_s_mask+0x10>
 8002ffa:	4d09      	ldr	r5, [pc, #36]	; (8003020 <z_log_get_s_mask+0x48>)
 8002ffc:	f812 e005 	ldrb.w	lr, [r2, r5]
 8003000:	f01e 0f03 	tst.w	lr, #3
 8003004:	d0f0      	beq.n	8002fe8 <z_log_get_s_mask+0x10>
			if (curr == 's') {
 8003006:	2a73      	cmp	r2, #115	; 0x73
 8003008:	d003      	beq.n	8003012 <z_log_get_s_mask+0x3a>
			arg++;
 800300a:	f10c 0c01 	add.w	ip, ip, #1
			arm = false;
 800300e:	2400      	movs	r4, #0
 8003010:	e7ea      	b.n	8002fe8 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
 8003012:	2201      	movs	r2, #1
 8003014:	fa02 f20c 	lsl.w	r2, r2, ip
 8003018:	4310      	orrs	r0, r2
 800301a:	e7f6      	b.n	800300a <z_log_get_s_mask+0x32>
}
 800301c:	bd30      	pop	{r4, r5, pc}
 800301e:	bf00      	nop
 8003020:	0800f295 	.word	0x0800f295

08003024 <log_core_init>:
{
 8003024:	b508      	push	{r3, lr}
	panic_mode = false;
 8003026:	2300      	movs	r3, #0
 8003028:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <log_core_init+0x34>)
 800302a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 800302c:	4a0b      	ldr	r2, [pc, #44]	; (800305c <log_core_init+0x38>)
 800302e:	6013      	str	r3, [r2, #0]
		timestamp_func = default_lf_get_timestamp;
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <log_core_init+0x3c>)
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <log_core_init+0x40>)
 8003034:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
 8003036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800303a:	f000 fd7d 	bl	8003b38 <log_output_timestamp_freq_set>
		log_msg_pool_init();
 800303e:	f000 fb5b 	bl	80036f8 <log_msg_pool_init>
		log_list_init(&list);
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <log_core_init+0x44>)
 8003044:	f008 fba2 	bl	800b78c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
 8003048:	2304      	movs	r3, #4
 800304a:	2228      	movs	r2, #40	; 0x28
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <log_core_init+0x48>)
 800304e:	4808      	ldr	r0, [pc, #32]	; (8003070 <log_core_init+0x4c>)
 8003050:	f009 fe67 	bl	800cd22 <k_mem_slab_init>
}
 8003054:	bd08      	pop	{r3, pc}
 8003056:	bf00      	nop
 8003058:	20000ed1 	.word	0x20000ed1
 800305c:	2000097c 	.word	0x2000097c
 8003060:	20000004 	.word	0x20000004
 8003064:	0800b7c1 	.word	0x0800b7c1
 8003068:	20000984 	.word	0x20000984
 800306c:	20003c48 	.word	0x20003c48
 8003070:	2000098c 	.word	0x2000098c

08003074 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <log_init+0x64>)
 8003076:	f3bf 8f5b 	dmb	ish
 800307a:	e853 2f00 	ldrex	r2, [r3]
 800307e:	1c51      	adds	r1, r2, #1
 8003080:	e843 1000 	strex	r0, r1, [r3]
 8003084:	2800      	cmp	r0, #0
 8003086:	d1f8      	bne.n	800307a <log_init+0x6>
 8003088:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 800308c:	bb1a      	cbnz	r2, 80030d6 <log_init+0x62>
{
 800308e:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8003090:	2400      	movs	r4, #0
 8003092:	e009      	b.n	80030a8 <log_init+0x34>
					   backend->cb->ctx,
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <log_init+0x68>)
 8003096:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800309a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 800309c:	2204      	movs	r2, #4
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	4628      	mov	r0, r5
 80030a2:	f000 fb05 	bl	80036b0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 80030a6:	3401      	adds	r4, #1
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <log_init+0x6c>)
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <log_init+0x68>)
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80030b2:	da0f      	bge.n	80030d4 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 80030b4:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 80030b6:	4d09      	ldr	r5, [pc, #36]	; (80030dc <log_init+0x68>)
 80030b8:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 80030bc:	7b2b      	ldrb	r3, [r5, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f1      	beq.n	80030a6 <log_init+0x32>
			if (backend->api->init != NULL) {
 80030c2:	0123      	lsls	r3, r4, #4
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <log_init+0x68>)
 80030c6:	58d3      	ldr	r3, [r2, r3]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0e2      	beq.n	8003094 <log_init+0x20>
				backend->api->init(backend);
 80030ce:	4628      	mov	r0, r5
 80030d0:	4798      	blx	r3
 80030d2:	e7df      	b.n	8003094 <log_init+0x20>
}
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	4770      	bx	lr
 80030d8:	20000980 	.word	0x20000980
 80030dc:	0800e050 	.word	0x0800e050
 80030e0:	0800e060 	.word	0x0800e060

080030e4 <get_msg>:
{
 80030e4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80030e6:	f04f 0310 	mov.w	r3, #16
 80030ea:	f3ef 8411 	mrs	r4, BASEPRI
 80030ee:	f383 8812 	msr	BASEPRI_MAX, r3
 80030f2:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <get_msg+0x24>)
 80030f8:	f008 fb58 	bl	800b7ac <log_list_head_get>
	__asm__ volatile(
 80030fc:	f384 8811 	msr	BASEPRI, r4
 8003100:	f3bf 8f6f 	isb	sy
}
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	20000984 	.word	0x20000984

0800310c <z_log_notify_backend_enabled>:
{
 800310c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <z_log_notify_backend_enabled+0x18>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b11b      	cbz	r3, 800311c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <z_log_notify_backend_enabled+0x18>)
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
}
 800311a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <z_log_notify_backend_enabled+0x1c>)
 800311e:	f005 fb19 	bl	8008754 <z_impl_k_sem_give>
}
 8003122:	e7f7      	b.n	8003114 <z_log_notify_backend_enabled+0x8>
 8003124:	20000ed0 	.word	0x20000ed0
 8003128:	200004d0 	.word	0x200004d0

0800312c <z_log_dropped>:
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <z_log_dropped+0x1c>)
 800312e:	f3bf 8f5b 	dmb	ish
 8003132:	e853 2f00 	ldrex	r2, [r3]
 8003136:	3201      	adds	r2, #1
 8003138:	e843 2100 	strex	r1, r2, [r3]
 800313c:	2900      	cmp	r1, #0
 800313e:	d1f8      	bne.n	8003132 <z_log_dropped+0x6>
 8003140:	f3bf 8f5b 	dmb	ish
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	2000097c 	.word	0x2000097c

0800314c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <z_log_dropped_read_and_clear+0x1c>)
}
 800314e:	2000      	movs	r0, #0
 8003150:	4602      	mov	r2, r0
 8003152:	f3bf 8f5b 	dmb	ish
 8003156:	e853 0f00 	ldrex	r0, [r3]
 800315a:	e843 2100 	strex	r1, r2, [r3]
 800315e:	2900      	cmp	r1, #0
 8003160:	d1f9      	bne.n	8003156 <z_log_dropped_read_and_clear+0xa>
 8003162:	f3bf 8f5b 	dmb	ish
 8003166:	4770      	bx	lr
 8003168:	2000097c 	.word	0x2000097c

0800316c <dropped_notify>:
{
 800316c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
 800316e:	f7ff ffed 	bl	800314c <z_log_dropped_read_and_clear>
 8003172:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
 8003174:	2400      	movs	r4, #0
 8003176:	e000      	b.n	800317a <dropped_notify+0xe>
 8003178:	3401      	adds	r4, #1
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <dropped_notify+0x3c>)
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <dropped_notify+0x40>)
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003184:	da0f      	bge.n	80031a6 <dropped_notify+0x3a>
 8003186:	4809      	ldr	r0, [pc, #36]	; (80031ac <dropped_notify+0x40>)
 8003188:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 800318c:	6843      	ldr	r3, [r0, #4]
 800318e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f1      	beq.n	8003178 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
 8003194:	0123      	lsls	r3, r4, #4
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <dropped_notify+0x40>)
 8003198:	58d3      	ldr	r3, [r2, r3]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0eb      	beq.n	8003178 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
 80031a0:	4629      	mov	r1, r5
 80031a2:	4798      	blx	r3
 80031a4:	e7e8      	b.n	8003178 <dropped_notify+0xc>
}
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	0800e060 	.word	0x0800e060
 80031ac:	0800e050 	.word	0x0800e050

080031b0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <z_log_dropped_pending+0x10>)
 80031b2:	6818      	ldr	r0, [r3, #0]
}
 80031b4:	2800      	cmp	r0, #0
 80031b6:	bfd4      	ite	le
 80031b8:	2000      	movle	r0, #0
 80031ba:	2001      	movgt	r0, #1
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000097c 	.word	0x2000097c

080031c4 <z_log_strdup>:
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
 80031ca:	f7ff fea1 	bl	8002f10 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
 80031ce:	bb10      	cbnz	r0, 8003216 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2300      	movs	r3, #0
 80031d4:	a901      	add	r1, sp, #4
 80031d6:	4811      	ldr	r0, [pc, #68]	; (800321c <z_log_strdup+0x58>)
 80031d8:	f005 f880 	bl	80082dc <k_mem_slab_alloc>
	if (err != 0) {
 80031dc:	b108      	cbz	r0, 80031e2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
 80031de:	4c10      	ldr	r4, [pc, #64]	; (8003220 <z_log_strdup+0x5c>)
 80031e0:	e019      	b.n	8003216 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
 80031e2:	9b01      	ldr	r3, [sp, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f3bf 8f5b 	dmb	ish
 80031ea:	e853 1f00 	ldrex	r1, [r3]
 80031ee:	e843 2000 	strex	r0, r2, [r3]
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d1f9      	bne.n	80031ea <z_log_strdup+0x26>
 80031f6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
 80031fa:	9d01      	ldr	r5, [sp, #4]
 80031fc:	1d2e      	adds	r6, r5, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80031fe:	221f      	movs	r2, #31
 8003200:	4621      	mov	r1, r4
 8003202:	4630      	mov	r0, r6
 8003204:	f00a fa93 	bl	800d72e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
 8003208:	237e      	movs	r3, #126	; 0x7e
 800320a:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
 800320e:	2300      	movs	r3, #0
 8003210:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	return dup->buf;
 8003214:	4634      	mov	r4, r6
}
 8003216:	4620      	mov	r0, r4
 8003218:	b002      	add	sp, #8
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	2000098c 	.word	0x2000098c
 8003220:	0800e47c 	.word	0x0800e47c

08003224 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
 8003224:	b138      	cbz	r0, 8003236 <log_is_strdup+0x12>
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <log_is_strdup+0x20>)
 8003228:	4290      	cmp	r0, r2
 800322a:	d306      	bcc.n	800323a <log_is_strdup+0x16>
 800322c:	32a0      	adds	r2, #160	; 0xa0
 800322e:	4290      	cmp	r0, r2
 8003230:	d305      	bcc.n	800323e <log_is_strdup+0x1a>
 8003232:	2000      	movs	r0, #0
 8003234:	4770      	bx	lr
 8003236:	2000      	movs	r0, #0
 8003238:	4770      	bx	lr
 800323a:	2000      	movs	r0, #0
 800323c:	4770      	bx	lr
 800323e:	2001      	movs	r0, #1
}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20003c48 	.word	0x20003c48

08003248 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003248:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
 800324a:	f013 0f01 	tst.w	r3, #1
 800324e:	d000      	beq.n	8003252 <detect_missed_strdup+0xa>
 8003250:	4770      	bx	lr
{
 8003252:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003256:	b083      	sub	sp, #12
 8003258:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
 800325a:	f008 fb4e 	bl	800b8fa <log_msg_str_get>
 800325e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
 8003260:	4630      	mov	r0, r6
 8003262:	f008 fb35 	bl	800b8d0 <log_msg_nargs_get>
 8003266:	4601      	mov	r1, r0
 8003268:	4638      	mov	r0, r7
 800326a:	f7ff feb5 	bl	8002fd8 <z_log_get_s_mask>
 800326e:	4605      	mov	r5, r0
	while (mask) {
 8003270:	e004      	b.n	800327c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
 8003272:	2201      	movs	r2, #1
 8003274:	fa02 f404 	lsl.w	r4, r2, r4
 8003278:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
 800327c:	b36d      	cbz	r5, 80032da <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
 800327e:	fab5 f485 	clz	r4, r5
 8003282:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
 8003286:	4621      	mov	r1, r4
 8003288:	4630      	mov	r0, r6
 800328a:	f008 fb24 	bl	800b8d6 <log_msg_arg_get>
 800328e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
 8003290:	f7ff fe3e 	bl	8002f10 <is_rodata>
 8003294:	2800      	cmp	r0, #0
 8003296:	d1ec      	bne.n	8003272 <detect_missed_strdup+0x2a>
 8003298:	4648      	mov	r0, r9
 800329a:	f7ff ffc3 	bl	8003224 <log_is_strdup>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d1e7      	bne.n	8003272 <detect_missed_strdup+0x2a>
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <detect_missed_strdup+0x98>)
 80032a4:	4599      	cmp	r9, r3
 80032a6:	d0e4      	beq.n	8003272 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
 80032a8:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
 80032aa:	f3c1 1189 	ubfx	r1, r1, #6, #10
 80032ae:	f000 f9ef 	bl	8003690 <log_source_name_get>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <detect_missed_strdup+0x9c>)
 80032b6:	490c      	ldr	r1, [pc, #48]	; (80032e8 <detect_missed_strdup+0xa0>)
 80032b8:	1a5b      	subs	r3, r3, r1
 80032ba:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
 80032bc:	2101      	movs	r1, #1
 80032be:	f361 0802 	bfi	r8, r1, #0, #3
 80032c2:	f36f 08c5 	bfc	r8, #3, #3
 80032c6:	f363 188f 	bfi	r8, r3, #6, #10
 80032ca:	f8ad 8000 	strh.w	r8, [sp]
 80032ce:	463b      	mov	r3, r7
 80032d0:	4621      	mov	r1, r4
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <detect_missed_strdup+0xa4>)
 80032d4:	f000 f8b2 	bl	800343c <log_3>
 80032d8:	e7cb      	b.n	8003272 <detect_missed_strdup+0x2a>
}
 80032da:	b003      	add	sp, #12
 80032dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032e0:	0800e47c 	.word	0x0800e47c
 80032e4:	0800e008 	.word	0x0800e008
 80032e8:	0800e008 	.word	0x0800e008
 80032ec:	0800e498 	.word	0x0800e498

080032f0 <msg_process>:
{
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	4606      	mov	r6, r0
	if (!bypass) {
 80032f4:	bb19      	cbnz	r1, 800333e <msg_process+0x4e>
		    !panic_mode) {
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <msg_process+0x58>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
 80032fa:	b10b      	cbz	r3, 8003300 <msg_process+0x10>
{
 80032fc:	2400      	movs	r4, #0
 80032fe:	e003      	b.n	8003308 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
 8003300:	f7ff ffa2 	bl	8003248 <detect_missed_strdup>
 8003304:	e7fa      	b.n	80032fc <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
 8003306:	3401      	adds	r4, #1
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <msg_process+0x5c>)
 800330a:	4a11      	ldr	r2, [pc, #68]	; (8003350 <msg_process+0x60>)
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 8003312:	da14      	bge.n	800333e <msg_process+0x4e>
	return &__log_backends_start[idx];
 8003314:	4d0e      	ldr	r5, [pc, #56]	; (8003350 <msg_process+0x60>)
 8003316:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
 800331a:	686b      	ldr	r3, [r5, #4]
 800331c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f1      	beq.n	8003306 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
 8003322:	4631      	mov	r1, r6
 8003324:	4628      	mov	r0, r5
 8003326:	f008 fa49 	bl	800b7bc <msg_filter_check>
			if (log_backend_is_active(backend) &&
 800332a:	2800      	cmp	r0, #0
 800332c:	d0eb      	beq.n	8003306 <msg_process+0x16>
	backend->api->put(backend, msg);
 800332e:	0127      	lsls	r7, r4, #4
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <msg_process+0x60>)
 8003332:	59db      	ldr	r3, [r3, r7]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	4798      	blx	r3
}
 800333c:	e7e3      	b.n	8003306 <msg_process+0x16>
			log_msg_put(msg.msg);
 800333e:	4630      	mov	r0, r6
 8003340:	f008 fadd 	bl	800b8fe <log_msg_put>
}
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003346:	bf00      	nop
 8003348:	20000ed1 	.word	0x20000ed1
 800334c:	0800e060 	.word	0x0800e060
 8003350:	0800e050 	.word	0x0800e050

08003354 <z_impl_log_process>:
{
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <z_impl_log_process+0x48>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b903      	cbnz	r3, 8003360 <z_impl_log_process+0xc>
 800335e:	b1c8      	cbz	r0, 8003394 <z_impl_log_process+0x40>
	msg = get_msg();
 8003360:	f7ff fec0 	bl	80030e4 <get_msg>
	if (msg.msg) {
 8003364:	4602      	mov	r2, r0
 8003366:	b178      	cbz	r0, 8003388 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <z_impl_log_process+0x4c>)
 800336a:	f3bf 8f5b 	dmb	ish
 800336e:	e853 1f00 	ldrex	r1, [r3]
 8003372:	3901      	subs	r1, #1
 8003374:	e843 1000 	strex	r0, r1, [r3]
 8003378:	2800      	cmp	r0, #0
 800337a:	d1f8      	bne.n	800336e <z_impl_log_process+0x1a>
 800337c:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
 8003380:	4621      	mov	r1, r4
 8003382:	4610      	mov	r0, r2
 8003384:	f7ff ffb4 	bl	80032f0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
 8003388:	b914      	cbnz	r4, 8003390 <z_impl_log_process+0x3c>
 800338a:	f7ff ff11 	bl	80031b0 <z_log_dropped_pending>
 800338e:	b910      	cbnz	r0, 8003396 <z_impl_log_process+0x42>
	return next_pending();
 8003390:	f7ff fdea 	bl	8002f68 <next_pending>
}
 8003394:	bd10      	pop	{r4, pc}
		dropped_notify();
 8003396:	f7ff fee9 	bl	800316c <dropped_notify>
 800339a:	e7f9      	b.n	8003390 <z_impl_log_process+0x3c>
 800339c:	20000ed0 	.word	0x20000ed0
 80033a0:	20000978 	.word	0x20000978

080033a4 <z_log_msg_post_finalize>:
{
 80033a4:	b510      	push	{r4, lr}
 80033a6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <z_log_msg_post_finalize+0x84>)
 80033aa:	f3bf 8f5b 	dmb	ish
 80033ae:	e853 2f00 	ldrex	r2, [r3]
 80033b2:	3201      	adds	r2, #1
 80033b4:	e843 2100 	strex	r1, r2, [r3]
 80033b8:	2900      	cmp	r1, #0
 80033ba:	d1f8      	bne.n	80033ae <z_log_msg_post_finalize+0xa>
 80033bc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <z_log_msg_post_finalize+0x88>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b963      	cbnz	r3, 80033e0 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <z_log_msg_post_finalize+0x8c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b11b      	cbz	r3, 80033d4 <z_log_msg_post_finalize+0x30>
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <z_log_msg_post_finalize+0x84>)
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	2a01      	cmp	r2, #1
 80033d2:	d015      	beq.n	8003400 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <z_log_msg_post_finalize+0x84>)
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	2a0a      	cmp	r2, #10
 80033da:	d01c      	beq.n	8003416 <z_log_msg_post_finalize+0x72>
}
 80033dc:	b002      	add	sp, #8
 80033de:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 80033e0:	f04f 0310 	mov.w	r3, #16
 80033e4:	f3ef 8411 	mrs	r4, BASEPRI
 80033e8:	f383 8812 	msr	BASEPRI_MAX, r3
 80033ec:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7ff ffaf 	bl	8003354 <z_impl_log_process>
	__asm__ volatile(
 80033f6:	f384 8811 	msr	BASEPRI, r4
 80033fa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80033fe:	e7ed      	b.n	80033dc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
 8003400:	2200      	movs	r2, #0
 8003402:	2300      	movs	r3, #0
 8003404:	e9cd 2300 	strd	r2, r3, [sp]
 8003408:	f242 7210 	movw	r2, #10000	; 0x2710
 800340c:	2300      	movs	r3, #0
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <z_log_msg_post_finalize+0x90>)
 8003410:	f006 f914 	bl	800963c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
 8003414:	e7e2      	b.n	80033dc <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0e0      	beq.n	80033dc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
 800341a:	4806      	ldr	r0, [pc, #24]	; (8003434 <z_log_msg_post_finalize+0x90>)
 800341c:	f009 ffc3 	bl	800d3a6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
 8003420:	4805      	ldr	r0, [pc, #20]	; (8003438 <z_log_msg_post_finalize+0x94>)
 8003422:	f005 f997 	bl	8008754 <z_impl_k_sem_give>
}
 8003426:	e7d9      	b.n	80033dc <z_log_msg_post_finalize+0x38>
 8003428:	20000978 	.word	0x20000978
 800342c:	20000ed1 	.word	0x20000ed1
 8003430:	200009ac 	.word	0x200009ac
 8003434:	200006a0 	.word	0x200006a0
 8003438:	200004d0 	.word	0x200004d0

0800343c <log_3>:
{
 800343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003440:	4680      	mov	r8, r0
 8003442:	460f      	mov	r7, r1
 8003444:	4616      	mov	r6, r2
 8003446:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8003448:	f000 f97a 	bl	8003740 <log_msg_chunk_alloc>

	if (msg != NULL) {
 800344c:	4604      	mov	r4, r0
 800344e:	b118      	cbz	r0, 8003458 <log_3+0x1c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
 8003450:	2301      	movs	r3, #1
 8003452:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	8103      	strh	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
 8003458:	b14c      	cbz	r4, 800346e <log_3+0x32>
		msg->str = str;
 800345a:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
 800345e:	7a60      	ldrb	r0, [r4, #9]
 8003460:	2303      	movs	r3, #3
 8003462:	f363 1007 	bfi	r0, r3, #4, #4
 8003466:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8003468:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 800346a:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
 800346c:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
 800346e:	b1c4      	cbz	r4, 80034a2 <log_3+0x66>
	msg->hdr.ids = src_level;
 8003470:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8003474:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <log_3+0x6c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4798      	blx	r3
 800347c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800347e:	f04f 0310 	mov.w	r3, #16
 8003482:	f3ef 8511 	mrs	r5, BASEPRI
 8003486:	f383 8812 	msr	BASEPRI_MAX, r3
 800348a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 800348e:	4621      	mov	r1, r4
 8003490:	4806      	ldr	r0, [pc, #24]	; (80034ac <log_3+0x70>)
 8003492:	f008 f97f 	bl	800b794 <log_list_add_tail>
	__asm__ volatile(
 8003496:	f385 8811 	msr	BASEPRI, r5
 800349a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 800349e:	f7ff ff81 	bl	80033a4 <z_log_msg_post_finalize>
}
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a6:	bf00      	nop
 80034a8:	20000004 	.word	0x20000004
 80034ac:	20000984 	.word	0x20000984

080034b0 <log_0>:
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4605      	mov	r5, r0
 80034b4:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 80034b6:	f000 f943 	bl	8003740 <log_msg_chunk_alloc>
	if (msg != NULL) {
 80034ba:	4604      	mov	r4, r0
 80034bc:	b118      	cbz	r0, 80034c6 <log_0+0x16>
		msg->hdr.ref_cnt = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 80034c6:	b104      	cbz	r4, 80034ca <log_0+0x1a>
		msg->str = str;
 80034c8:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
 80034ca:	b1b4      	cbz	r4, 80034fa <log_0+0x4a>
	msg->hdr.ids = src_level;
 80034cc:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <log_0+0x4c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4798      	blx	r3
 80034d4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80034d6:	f04f 0310 	mov.w	r3, #16
 80034da:	f3ef 8511 	mrs	r5, BASEPRI
 80034de:	f383 8812 	msr	BASEPRI_MAX, r3
 80034e2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80034e6:	4621      	mov	r1, r4
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <log_0+0x50>)
 80034ea:	f008 f953 	bl	800b794 <log_list_add_tail>
	__asm__ volatile(
 80034ee:	f385 8811 	msr	BASEPRI, r5
 80034f2:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 80034f6:	f7ff ff55 	bl	80033a4 <z_log_msg_post_finalize>
}
 80034fa:	bd70      	pop	{r4, r5, r6, pc}
 80034fc:	20000004 	.word	0x20000004
 8003500:	20000984 	.word	0x20000984

08003504 <log_1>:
{
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	4607      	mov	r7, r0
 8003508:	460e      	mov	r6, r1
 800350a:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 800350c:	f000 f918 	bl	8003740 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003510:	4604      	mov	r4, r0
 8003512:	b118      	cbz	r0, 800351c <log_1+0x18>
		msg->hdr.ref_cnt = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 800351c:	b134      	cbz	r4, 800352c <log_1+0x28>
		msg->str = str;
 800351e:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
 8003520:	7a63      	ldrb	r3, [r4, #9]
 8003522:	2201      	movs	r2, #1
 8003524:	f362 1307 	bfi	r3, r2, #4, #4
 8003528:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
 800352a:	6166      	str	r6, [r4, #20]
		if (msg == NULL) {
 800352c:	b1b4      	cbz	r4, 800355c <log_1+0x58>
	msg->hdr.ids = src_level;
 800352e:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <log_1+0x5c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4798      	blx	r3
 8003536:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 8003538:	f04f 0310 	mov.w	r3, #16
 800353c:	f3ef 8511 	mrs	r5, BASEPRI
 8003540:	f383 8812 	msr	BASEPRI_MAX, r3
 8003544:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 8003548:	4621      	mov	r1, r4
 800354a:	4806      	ldr	r0, [pc, #24]	; (8003564 <log_1+0x60>)
 800354c:	f008 f922 	bl	800b794 <log_list_add_tail>
	__asm__ volatile(
 8003550:	f385 8811 	msr	BASEPRI, r5
 8003554:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 8003558:	f7ff ff24 	bl	80033a4 <z_log_msg_post_finalize>
}
 800355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355e:	bf00      	nop
 8003560:	20000004 	.word	0x20000004
 8003564:	20000984 	.word	0x20000984

08003568 <log_2>:
{
 8003568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356c:	4680      	mov	r8, r0
 800356e:	460f      	mov	r7, r1
 8003570:	4616      	mov	r6, r2
 8003572:	461d      	mov	r5, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
 8003574:	f000 f8e4 	bl	8003740 <log_msg_chunk_alloc>
	if (msg != NULL) {
 8003578:	4604      	mov	r4, r0
 800357a:	b118      	cbz	r0, 8003584 <log_2+0x1c>
		msg->hdr.ref_cnt = 1;
 800357c:	2301      	movs	r3, #1
 800357e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	8103      	strh	r3, [r0, #8]
	if (msg != NULL) {
 8003584:	b144      	cbz	r4, 8003598 <log_2+0x30>
		msg->str = str;
 8003586:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
 800358a:	7a60      	ldrb	r0, [r4, #9]
 800358c:	2302      	movs	r3, #2
 800358e:	f363 1007 	bfi	r0, r3, #4, #4
 8003592:	7260      	strb	r0, [r4, #9]
		msg->payload.single.args[0] = arg1;
 8003594:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
 8003596:	61a6      	str	r6, [r4, #24]
		if (msg == NULL) {
 8003598:	b1b4      	cbz	r4, 80035c8 <log_2+0x60>
	msg->hdr.ids = src_level;
 800359a:	8165      	strh	r5, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <log_2+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4798      	blx	r3
 80035a2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 80035a4:	f04f 0310 	mov.w	r3, #16
 80035a8:	f3ef 8511 	mrs	r5, BASEPRI
 80035ac:	f383 8812 	msr	BASEPRI_MAX, r3
 80035b0:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
 80035b4:	4621      	mov	r1, r4
 80035b6:	4806      	ldr	r0, [pc, #24]	; (80035d0 <log_2+0x68>)
 80035b8:	f008 f8ec 	bl	800b794 <log_list_add_tail>
	__asm__ volatile(
 80035bc:	f385 8811 	msr	BASEPRI, r5
 80035c0:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
 80035c4:	f7ff feee 	bl	80033a4 <z_log_msg_post_finalize>
}
 80035c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035cc:	20000004 	.word	0x20000004
 80035d0:	20000984 	.word	0x20000984

080035d4 <z_impl_log_panic>:
	if (panic_mode) {
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <z_impl_log_panic+0x4c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b103      	cbz	r3, 80035dc <z_impl_log_panic+0x8>
 80035da:	4770      	bx	lr
{
 80035dc:	b510      	push	{r4, lr}
	log_init();
 80035de:	f7ff fd49 	bl	8003074 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80035e2:	2400      	movs	r4, #0
 80035e4:	e000      	b.n	80035e8 <z_impl_log_panic+0x14>
 80035e6:	3401      	adds	r4, #1
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <z_impl_log_panic+0x50>)
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <z_impl_log_panic+0x54>)
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80035f2:	da0c      	bge.n	800360e <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
 80035f4:	480c      	ldr	r0, [pc, #48]	; (8003628 <z_impl_log_panic+0x54>)
 80035f6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 80035fa:	6843      	ldr	r3, [r0, #4]
 80035fc:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f1      	beq.n	80035e6 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 8003602:	0123      	lsls	r3, r4, #4
 8003604:	4a08      	ldr	r2, [pc, #32]	; (8003628 <z_impl_log_panic+0x54>)
 8003606:	58d3      	ldr	r3, [r2, r3]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4798      	blx	r3
}
 800360c:	e7eb      	b.n	80035e6 <z_impl_log_panic+0x12>
 800360e:	2000      	movs	r0, #0
 8003610:	f7ff fea0 	bl	8003354 <z_impl_log_process>
		while (log_process(false) == true) {
 8003614:	2800      	cmp	r0, #0
 8003616:	d1fa      	bne.n	800360e <z_impl_log_panic+0x3a>
	panic_mode = true;
 8003618:	4b01      	ldr	r3, [pc, #4]	; (8003620 <z_impl_log_panic+0x4c>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
}
 800361e:	bd10      	pop	{r4, pc}
 8003620:	20000ed1 	.word	0x20000ed1
 8003624:	0800e060 	.word	0x0800e060
 8003628:	0800e050 	.word	0x0800e050

0800362c <log_process_thread_func>:
{
 800362c:	b508      	push	{r3, lr}
	log_init();
 800362e:	f7ff fd21 	bl	8003074 <log_init>
	return z_impl_z_current_get();
 8003632:	f005 fde9 	bl	8009208 <z_impl_z_current_get>
	thread_set(k_current_get());
 8003636:	f7ff fc7b 	bl	8002f30 <thread_set>
 800363a:	2000      	movs	r0, #0
 800363c:	f7ff fe8a 	bl	8003354 <z_impl_log_process>
		if (log_process(false) == false) {
 8003640:	2800      	cmp	r0, #0
 8003642:	d1fa      	bne.n	800363a <log_process_thread_func+0xe>
	return z_impl_k_sem_take(sem, timeout);
 8003644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364c:	4801      	ldr	r0, [pc, #4]	; (8003654 <log_process_thread_func+0x28>)
 800364e:	f005 f8a9 	bl	80087a4 <z_impl_k_sem_take>
 8003652:	e7f2      	b.n	800363a <log_process_thread_func+0xe>
 8003654:	200004d0 	.word	0x200004d0

08003658 <log_free>:
{
 8003658:	b500      	push	{lr}
 800365a:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
 800365c:	3804      	subs	r0, #4
 800365e:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8003660:	f3bf 8f5b 	dmb	ish
 8003664:	e850 3f00 	ldrex	r3, [r0]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	e840 2100 	strex	r1, r2, [r0]
 800366e:	2900      	cmp	r1, #0
 8003670:	d1f8      	bne.n	8003664 <log_free+0xc>
 8003672:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
 8003676:	2b01      	cmp	r3, #1
 8003678:	d002      	beq.n	8003680 <log_free+0x28>
}
 800367a:	b003      	add	sp, #12
 800367c:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
 8003680:	a901      	add	r1, sp, #4
 8003682:	4802      	ldr	r0, [pc, #8]	; (800368c <log_free+0x34>)
 8003684:	f009 fb5c 	bl	800cd40 <k_mem_slab_free>
}
 8003688:	e7f7      	b.n	800367a <log_free+0x22>
 800368a:	bf00      	nop
 800368c:	2000098c 	.word	0x2000098c

08003690 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <log_source_name_get+0x18>)
 8003692:	4a06      	ldr	r2, [pc, #24]	; (80036ac <log_source_name_get+0x1c>)
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 800369a:	d202      	bcs.n	80036a2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 800369c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80036a0:	4770      	bx	lr
 80036a2:	2000      	movs	r0, #0
}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	0800e050 	.word	0x0800e050
 80036ac:	0800e008 	.word	0x0800e008

080036b0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 80036b0:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <log_backend_enable+0x20>)
 80036b4:	1ac3      	subs	r3, r0, r3
 80036b6:	111b      	asrs	r3, r3, #4
 80036b8:	3301      	adds	r3, #1
	backend->cb->id = id;
 80036ba:	6842      	ldr	r2, [r0, #4]
 80036bc:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 80036be:	6843      	ldr	r3, [r0, #4]
 80036c0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80036c2:	6843      	ldr	r3, [r0, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80036c8:	f7ff fd20 	bl	800310c <z_log_notify_backend_enabled>
}
 80036cc:	bd08      	pop	{r3, pc}
 80036ce:	bf00      	nop
 80036d0:	0800e050 	.word	0x0800e050

080036d4 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
 80036d4:	b510      	push	{r4, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
 80036da:	e005      	b.n	80036e8 <cont_free+0x14>
		next = cont->next;
 80036dc:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
 80036de:	a901      	add	r1, sp, #4
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <cont_free+0x20>)
 80036e2:	f009 fb2d 	bl	800cd40 <k_mem_slab_free>
		cont = next;
 80036e6:	9401      	str	r4, [sp, #4]
	while (cont != NULL) {
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f6      	bne.n	80036dc <cont_free+0x8>
	}
}
 80036ee:	b002      	add	sp, #8
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	bf00      	nop
 80036f4:	200009b0 	.word	0x200009b0

080036f8 <log_msg_pool_init>:
{
 80036f8:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
 80036fa:	2320      	movs	r3, #32
 80036fc:	461a      	mov	r2, r3
 80036fe:	4902      	ldr	r1, [pc, #8]	; (8003708 <log_msg_pool_init+0x10>)
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <log_msg_pool_init+0x14>)
 8003702:	f009 fb0e 	bl	800cd22 <k_mem_slab_init>
}
 8003706:	bd08      	pop	{r3, pc}
 8003708:	20003ce8 	.word	0x20003ce8
 800370c:	200009b0 	.word	0x200009b0

08003710 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
 8003710:	b510      	push	{r4, lr}
 8003712:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff fe1b 	bl	8003354 <z_impl_log_process>
 800371e:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
 8003720:	f7ff fd04 	bl	800312c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
 8003724:	2200      	movs	r2, #0
 8003726:	2300      	movs	r3, #0
 8003728:	a901      	add	r1, sp, #4
 800372a:	4804      	ldr	r0, [pc, #16]	; (800373c <log_msg_no_space_handle+0x2c>)
 800372c:	f004 fdd6 	bl	80082dc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
 8003730:	b108      	cbz	r0, 8003736 <log_msg_no_space_handle+0x26>
 8003732:	2c00      	cmp	r4, #0
 8003734:	d1f0      	bne.n	8003718 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
 8003736:	9801      	ldr	r0, [sp, #4]
 8003738:	b002      	add	sp, #8
 800373a:	bd10      	pop	{r4, pc}
 800373c:	200009b0 	.word	0x200009b0

08003740 <log_msg_chunk_alloc>:
{
 8003740:	b500      	push	{lr}
 8003742:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
 8003748:	f008 f842 	bl	800b7d0 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 800374c:	b150      	cbz	r0, 8003764 <log_msg_chunk_alloc+0x24>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	a901      	add	r1, sp, #4
 8003754:	4807      	ldr	r0, [pc, #28]	; (8003774 <log_msg_chunk_alloc+0x34>)
 8003756:	f004 fdc1 	bl	80082dc <k_mem_slab_alloc>
	if (err != 0) {
 800375a:	b930      	cbnz	r0, 800376a <log_msg_chunk_alloc+0x2a>
}
 800375c:	9801      	ldr	r0, [sp, #4]
 800375e:	b003      	add	sp, #12
 8003760:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
 8003764:	2200      	movs	r2, #0
 8003766:	2300      	movs	r3, #0
 8003768:	e7f3      	b.n	8003752 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
 800376a:	f7ff ffd1 	bl	8003710 <log_msg_no_space_handle>
 800376e:	9001      	str	r0, [sp, #4]
 8003770:	e7f4      	b.n	800375c <log_msg_chunk_alloc+0x1c>
 8003772:	bf00      	nop
 8003774:	200009b0 	.word	0x200009b0

08003778 <msg_free>:
{
 8003778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377a:	b083      	sub	sp, #12
 800377c:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
 800377e:	4604      	mov	r4, r0
 8003780:	f008 f8a6 	bl	800b8d0 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 8003784:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
 8003786:	f013 0f01 	tst.w	r3, #1
 800378a:	d101      	bne.n	8003790 <msg_free+0x18>
 800378c:	4606      	mov	r6, r0
 800378e:	bb50      	cbnz	r0, 80037e6 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
 8003790:	9b01      	ldr	r3, [sp, #4]
 8003792:	7a1a      	ldrb	r2, [r3, #8]
 8003794:	f012 0f02 	tst.w	r2, #2
 8003798:	d128      	bne.n	80037ec <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
 800379a:	a901      	add	r1, sp, #4
 800379c:	4815      	ldr	r0, [pc, #84]	; (80037f4 <msg_free+0x7c>)
 800379e:	f009 facf 	bl	800cd40 <k_mem_slab_free>
}
 80037a2:	b003      	add	sp, #12
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
 80037a6:	9801      	ldr	r0, [sp, #4]
 80037a8:	f008 f8a7 	bl	800b8fa <log_msg_str_get>
 80037ac:	4631      	mov	r1, r6
 80037ae:	f7ff fc13 	bl	8002fd8 <z_log_get_s_mask>
					if (smask == 0U) {
 80037b2:	4607      	mov	r7, r0
 80037b4:	b970      	cbnz	r0, 80037d4 <msg_free+0x5c>
 80037b6:	e7eb      	b.n	8003790 <msg_free+0x18>
		for (i = 0U; i < nargs; i++) {
 80037b8:	3401      	adds	r4, #1
 80037ba:	42b4      	cmp	r4, r6
 80037bc:	d2e8      	bcs.n	8003790 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
 80037be:	4621      	mov	r1, r4
 80037c0:	9801      	ldr	r0, [sp, #4]
 80037c2:	f008 f888 	bl	800b8d6 <log_msg_arg_get>
 80037c6:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
 80037c8:	f7ff fd2c 	bl	8003224 <log_is_strdup>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d0f3      	beq.n	80037b8 <msg_free+0x40>
				if (smask == 0U) {
 80037d0:	2f00      	cmp	r7, #0
 80037d2:	d0e8      	beq.n	80037a6 <msg_free+0x2e>
				if (smask & BIT(i)) {
 80037d4:	fa27 f304 	lsr.w	r3, r7, r4
 80037d8:	f013 0f01 	tst.w	r3, #1
 80037dc:	d0ec      	beq.n	80037b8 <msg_free+0x40>
					log_free(buf);
 80037de:	4628      	mov	r0, r5
 80037e0:	f7ff ff3a 	bl	8003658 <log_free>
 80037e4:	e7e8      	b.n	80037b8 <msg_free+0x40>
		uint32_t smask = 0U;
 80037e6:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
 80037e8:	463c      	mov	r4, r7
 80037ea:	e7e6      	b.n	80037ba <msg_free+0x42>
		cont_free(msg->payload.ext.next);
 80037ec:	6958      	ldr	r0, [r3, #20]
 80037ee:	f7ff ff71 	bl	80036d4 <cont_free>
 80037f2:	e7d2      	b.n	800379a <msg_free+0x22>
 80037f4:	200009b0 	.word	0x200009b0

080037f8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80037f8:	b40e      	push	{r1, r2, r3}
 80037fa:	b500      	push	{lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	4601      	mov	r1, r0
 8003800:	ab03      	add	r3, sp, #12
 8003802:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 8003806:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <print_formatted+0x20>)
 800380a:	f7ff f883 	bl	8002914 <cbvprintf>
	va_end(args);

	return length;
}
 800380e:	b002      	add	sp, #8
 8003810:	f85d eb04 	ldr.w	lr, [sp], #4
 8003814:	b003      	add	sp, #12
 8003816:	4770      	bx	lr
 8003818:	0800bc9d 	.word	0x0800bc9d

0800381c <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 800381c:	b530      	push	{r4, r5, lr}
 800381e:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 8003820:	f011 0f44 	tst.w	r1, #68	; 0x44
 8003824:	d005      	beq.n	8003832 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <timestamp_print+0x74>)
 8003828:	681c      	ldr	r4, [r3, #0]
 800382a:	b934      	cbnz	r4, 800383a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 800382c:	2000      	movs	r0, #0
	}

	return length;
}
 800382e:	b005      	add	sp, #20
 8003830:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8003832:	4918      	ldr	r1, [pc, #96]	; (8003894 <timestamp_print+0x78>)
 8003834:	f7ff ffe0 	bl	80037f8 <print_formatted>
 8003838:	e7f9      	b.n	800382e <timestamp_print+0x12>
		timestamp /= timestamp_div;
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <timestamp_print+0x7c>)
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8003842:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
 8003846:	4a15      	ldr	r2, [pc, #84]	; (800389c <timestamp_print+0x80>)
 8003848:	fba2 320c 	umull	r3, r2, r2, ip
 800384c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 800384e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 8003852:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <timestamp_print+0x84>)
 8003858:	fba3 530e 	umull	r5, r3, r3, lr
 800385c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 800385e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
 8003862:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003866:	fb0c f101 	mul.w	r1, ip, r1
 800386a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800386e:	fb05 1114 	mls	r1, r5, r4, r1
 8003872:	fb0c f101 	mul.w	r1, ip, r1
 8003876:	fbb1 f1f4 	udiv	r1, r1, r4
			length = print_formatted(output,
 800387a:	9102      	str	r1, [sp, #8]
 800387c:	9501      	str	r5, [sp, #4]
 800387e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8003882:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
 8003886:	9100      	str	r1, [sp, #0]
 8003888:	4906      	ldr	r1, [pc, #24]	; (80038a4 <timestamp_print+0x88>)
 800388a:	f7ff ffb5 	bl	80037f8 <print_formatted>
 800388e:	e7ce      	b.n	800382e <timestamp_print+0x12>
 8003890:	200009d0 	.word	0x200009d0
 8003894:	0800e4dc 	.word	0x0800e4dc
 8003898:	200009d4 	.word	0x200009d4
 800389c:	91a2b3c5 	.word	0x91a2b3c5
 80038a0:	88888889 	.word	0x88888889
 80038a4:	0800e4e8 	.word	0x0800e4e8

080038a8 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 80038a8:	b161      	cbz	r1, 80038c4 <color_print+0x1c>
{
 80038aa:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80038ac:	b12a      	cbz	r2, 80038ba <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 80038ae:	4a06      	ldr	r2, [pc, #24]	; (80038c8 <color_print+0x20>)
 80038b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038b4:	b912      	cbnz	r2, 80038bc <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <color_print+0x24>)
 80038b8:	e000      	b.n	80038bc <color_print+0x14>
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <color_print+0x28>)
 80038be:	f7ff ff9b 	bl	80037f8 <print_formatted>
	}
}
 80038c2:	bd08      	pop	{r3, pc}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	0800e560 	.word	0x0800e560
 80038cc:	0800e504 	.word	0x0800e504
 80038d0:	0800e50c 	.word	0x0800e50c

080038d4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80038d4:	f011 0f10 	tst.w	r1, #16
 80038d8:	d10b      	bne.n	80038f2 <newline_print+0x1e>
{
 80038da:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80038dc:	f011 0f20 	tst.w	r1, #32
 80038e0:	d003      	beq.n	80038ea <newline_print+0x16>
		print_formatted(ctx, "\n");
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <newline_print+0x20>)
 80038e4:	f7ff ff88 	bl	80037f8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 80038e8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 80038ea:	4903      	ldr	r1, [pc, #12]	; (80038f8 <newline_print+0x24>)
 80038ec:	f7ff ff84 	bl	80037f8 <print_formatted>
 80038f0:	e7fa      	b.n	80038e8 <newline_print+0x14>
 80038f2:	4770      	bx	lr
 80038f4:	0800ea88 	.word	0x0800ea88
 80038f8:	0800e510 	.word	0x0800e510

080038fc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80038fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003900:	4605      	mov	r5, r0
 8003902:	460f      	mov	r7, r1
 8003904:	4616      	mov	r6, r2
 8003906:	4698      	mov	r8, r3
	newline_print(output, flags);
 8003908:	9906      	ldr	r1, [sp, #24]
 800390a:	f7ff ffe3 	bl	80038d4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 800390e:	2400      	movs	r4, #0
 8003910:	4544      	cmp	r4, r8
 8003912:	da05      	bge.n	8003920 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 8003914:	4924      	ldr	r1, [pc, #144]	; (80039a8 <hexdump_line_print+0xac>)
 8003916:	4628      	mov	r0, r5
 8003918:	f7ff ff6e 	bl	80037f8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 800391c:	3401      	adds	r4, #1
 800391e:	e7f7      	b.n	8003910 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003920:	2400      	movs	r4, #0
 8003922:	e009      	b.n	8003938 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003924:	4920      	ldr	r1, [pc, #128]	; (80039a8 <hexdump_line_print+0xac>)
 8003926:	4628      	mov	r0, r5
 8003928:	f7ff ff66 	bl	80037f8 <print_formatted>
 800392c:	e00b      	b.n	8003946 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 800392e:	491f      	ldr	r1, [pc, #124]	; (80039ac <hexdump_line_print+0xb0>)
 8003930:	4628      	mov	r0, r5
 8003932:	f7ff ff61 	bl	80037f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003936:	3401      	adds	r4, #1
 8003938:	2c0f      	cmp	r4, #15
 800393a:	dc0c      	bgt.n	8003956 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 800393c:	2c00      	cmp	r4, #0
 800393e:	dd02      	ble.n	8003946 <hexdump_line_print+0x4a>
 8003940:	f014 0f07 	tst.w	r4, #7
 8003944:	d0ee      	beq.n	8003924 <hexdump_line_print+0x28>
		if (i < length) {
 8003946:	42b4      	cmp	r4, r6
 8003948:	d2f1      	bcs.n	800392e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 800394a:	5d3a      	ldrb	r2, [r7, r4]
 800394c:	4918      	ldr	r1, [pc, #96]	; (80039b0 <hexdump_line_print+0xb4>)
 800394e:	4628      	mov	r0, r5
 8003950:	f7ff ff52 	bl	80037f8 <print_formatted>
 8003954:	e7ef      	b.n	8003936 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8003956:	4917      	ldr	r1, [pc, #92]	; (80039b4 <hexdump_line_print+0xb8>)
 8003958:	4628      	mov	r0, r5
 800395a:	f7ff ff4d 	bl	80037f8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800395e:	2400      	movs	r4, #0
 8003960:	e009      	b.n	8003976 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8003962:	4911      	ldr	r1, [pc, #68]	; (80039a8 <hexdump_line_print+0xac>)
 8003964:	4628      	mov	r0, r5
 8003966:	f7ff ff47 	bl	80037f8 <print_formatted>
 800396a:	e00b      	b.n	8003984 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 800396c:	4912      	ldr	r1, [pc, #72]	; (80039b8 <hexdump_line_print+0xbc>)
 800396e:	4628      	mov	r0, r5
 8003970:	f7ff ff42 	bl	80037f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8003974:	3401      	adds	r4, #1
 8003976:	2c0f      	cmp	r4, #15
 8003978:	dc13      	bgt.n	80039a2 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 800397a:	2c00      	cmp	r4, #0
 800397c:	dd02      	ble.n	8003984 <hexdump_line_print+0x88>
 800397e:	f014 0f07 	tst.w	r4, #7
 8003982:	d0ee      	beq.n	8003962 <hexdump_line_print+0x66>
		if (i < length) {
 8003984:	42b4      	cmp	r4, r6
 8003986:	d207      	bcs.n	8003998 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8003988:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <hexdump_line_print+0xc0>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 800398e:	f013 0f97 	tst.w	r3, #151	; 0x97
 8003992:	d1eb      	bne.n	800396c <hexdump_line_print+0x70>
 8003994:	222e      	movs	r2, #46	; 0x2e
 8003996:	e7e9      	b.n	800396c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <hexdump_line_print+0xac>)
 800399a:	4628      	mov	r0, r5
 800399c:	f7ff ff2c 	bl	80037f8 <print_formatted>
 80039a0:	e7e8      	b.n	8003974 <hexdump_line_print+0x78>
		}
	}
}
 80039a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a6:	bf00      	nop
 80039a8:	0800e538 	.word	0x0800e538
 80039ac:	0800e51c 	.word	0x0800e51c
 80039b0:	0800e514 	.word	0x0800e514
 80039b4:	0800e520 	.word	0x0800e520
 80039b8:	0800e524 	.word	0x0800e524
 80039bc:	0800f295 	.word	0x0800f295

080039c0 <ids_print>:
{
 80039c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	4680      	mov	r8, r0
 80039c6:	4616      	mov	r6, r2
 80039c8:	461d      	mov	r5, r3
 80039ca:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 80039ce:	b959      	cbnz	r1, 80039e8 <ids_print+0x28>
	int total = 0;
 80039d0:	2400      	movs	r4, #0
	if (source_id >= 0) {
 80039d2:	2f00      	cmp	r7, #0
 80039d4:	db1c      	blt.n	8003a10 <ids_print+0x50>
		total += print_formatted(output,
 80039d6:	b186      	cbz	r6, 80039fa <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80039d8:	2301      	movs	r3, #1
 80039da:	9a07      	ldr	r2, [sp, #28]
 80039dc:	4093      	lsls	r3, r2
				(func_on &&
 80039de:	f013 0f10 	tst.w	r3, #16
 80039e2:	d118      	bne.n	8003a16 <ids_print+0x56>
		total += print_formatted(output,
 80039e4:	4e0d      	ldr	r6, [pc, #52]	; (8003a1c <ids_print+0x5c>)
 80039e6:	e009      	b.n	80039fc <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <ids_print+0x60>)
 80039ea:	9a07      	ldr	r2, [sp, #28]
 80039ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <ids_print+0x64>)
 80039f2:	f7ff ff01 	bl	80037f8 <print_formatted>
 80039f6:	4604      	mov	r4, r0
 80039f8:	e7eb      	b.n	80039d2 <ids_print+0x12>
		total += print_formatted(output,
 80039fa:	4e08      	ldr	r6, [pc, #32]	; (8003a1c <ids_print+0x5c>)
 80039fc:	4639      	mov	r1, r7
 80039fe:	4628      	mov	r0, r5
 8003a00:	f7ff fe46 	bl	8003690 <log_source_name_get>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4631      	mov	r1, r6
 8003a08:	4640      	mov	r0, r8
 8003a0a:	f7ff fef5 	bl	80037f8 <print_formatted>
 8003a0e:	4404      	add	r4, r0
}
 8003a10:	4620      	mov	r0, r4
 8003a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 8003a16:	4e04      	ldr	r6, [pc, #16]	; (8003a28 <ids_print+0x68>)
 8003a18:	e7f0      	b.n	80039fc <ids_print+0x3c>
 8003a1a:	bf00      	nop
 8003a1c:	0800e528 	.word	0x0800e528
 8003a20:	0800e59c 	.word	0x0800e59c
 8003a24:	0800e534 	.word	0x0800e534
 8003a28:	0800e530 	.word	0x0800e530

08003a2c <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
 8003a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a30:	b089      	sub	sp, #36	; 0x24
 8003a32:	4607      	mov	r7, r0
 8003a34:	460e      	mov	r6, r1
 8003a36:	4691      	mov	r9, r2
 8003a38:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
 8003a3a:	f007 ff5e 	bl	800b8fa <log_msg_str_get>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	490f      	ldr	r1, [pc, #60]	; (8003a80 <hexdump_print+0x54>)
 8003a42:	4630      	mov	r0, r6
 8003a44:	f7ff fed8 	bl	80037f8 <print_formatted>
	uint32_t offset = 0U;
 8003a48:	2400      	movs	r4, #0
 8003a4a:	e009      	b.n	8003a60 <hexdump_print+0x34>
	do {
		length = sizeof(buf);
		log_msg_hexdump_data_get(msg, buf, &length, offset);

		if (length) {
			hexdump_line_print(output, buf, length,
 8003a4c:	f8cd 8000 	str.w	r8, [sp]
 8003a50:	464b      	mov	r3, r9
 8003a52:	eb0d 0105 	add.w	r1, sp, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f7ff ff50 	bl	80038fc <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
 8003a5c:	9d03      	ldr	r5, [sp, #12]
 8003a5e:	442c      	add	r4, r5
		length = sizeof(buf);
 8003a60:	2510      	movs	r5, #16
 8003a62:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
 8003a64:	4623      	mov	r3, r4
 8003a66:	aa03      	add	r2, sp, #12
 8003a68:	eb0d 0105 	add.w	r1, sp, r5
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	f007 ff59 	bl	800b924 <log_msg_hexdump_data_get>
		if (length) {
 8003a72:	9a03      	ldr	r2, [sp, #12]
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	d1e9      	bne.n	8003a4c <hexdump_print+0x20>
		} else {
			break;
		}
	} while (true);
}
 8003a78:	b009      	add	sp, #36	; 0x24
 8003a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a7e:	bf00      	nop
 8003a80:	0800e50c 	.word	0x0800e50c

08003a84 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
 8003a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a86:	b083      	sub	sp, #12
 8003a88:	4606      	mov	r6, r0
 8003a8a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
 8003a8c:	2700      	movs	r7, #0
	size_t offset = 0;
 8003a8e:	463d      	mov	r5, r7
 8003a90:	e00d      	b.n	8003aae <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
 8003a92:	68a2      	ldr	r2, [r4, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	f813 7c01 	ldrb.w	r7, [r3, #-1]
 8003a9a:	2f0a      	cmp	r7, #10
 8003a9c:	bf14      	ite	ne
 8003a9e:	2700      	movne	r7, #0
 8003aa0:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f008 f8ed 	bl	800bc82 <log_output_flush>
		offset += length;
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	441d      	add	r5, r3
	} while (length > 0);
 8003aac:	b173      	cbz	r3, 8003acc <raw_string_print+0x48>
		length = output->size;
 8003aae:	68e3      	ldr	r3, [r4, #12]
 8003ab0:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	aa01      	add	r2, sp, #4
 8003ab6:	68a1      	ldr	r1, [r4, #8]
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f007 ff33 	bl	800b924 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	9a01      	ldr	r2, [sp, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
 8003ac4:	9b01      	ldr	r3, [sp, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0eb      	beq.n	8003aa2 <raw_string_print+0x1e>
 8003aca:	e7e2      	b.n	8003a92 <raw_string_print+0xe>

	if (eol) {
 8003acc:	b90f      	cbnz	r7, 8003ad2 <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
 8003ace:	b003      	add	sp, #12
 8003ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
 8003ad2:	4902      	ldr	r1, [pc, #8]	; (8003adc <raw_string_print+0x58>)
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fe8f 	bl	80037f8 <print_formatted>
}
 8003ada:	e7f8      	b.n	8003ace <raw_string_print+0x4a>
 8003adc:	0800e53c 	.word	0x0800e53c

08003ae0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
 8003ae6:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
 8003ae8:	f242 730f 	movw	r3, #9999	; 0x270f
 8003aec:	428b      	cmp	r3, r1
 8003aee:	bf28      	it	cs
 8003af0:	460b      	movcs	r3, r1
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <log_output_dropped_process+0x4c>)
 8003af4:	2105      	movs	r1, #5
 8003af6:	4668      	mov	r0, sp
 8003af8:	f007 fd0f 	bl	800b51a <snprintk>
 8003afc:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
 8003afe:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	220b      	movs	r2, #11
 8003b04:	490a      	ldr	r1, [pc, #40]	; (8003b30 <log_output_dropped_process+0x50>)
 8003b06:	4628      	mov	r0, r5
 8003b08:	f007 ff14 	bl	800b934 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4632      	mov	r2, r6
 8003b12:	4669      	mov	r1, sp
 8003b14:	4628      	mov	r0, r5
 8003b16:	f007 ff0d 	bl	800b934 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
 8003b1a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	221b      	movs	r2, #27
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <log_output_dropped_process+0x54>)
 8003b22:	4628      	mov	r0, r5
 8003b24:	f007 ff06 	bl	800b934 <buffer_write>
}
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	0800ec44 	.word	0x0800ec44
 8003b30:	0800e590 	.word	0x0800e590
 8003b34:	0800e574 	.word	0x0800e574

08003b38 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <log_output_timestamp_freq_set+0x20>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8003b3e:	e004      	b.n	8003b4a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
 8003b40:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <log_output_timestamp_freq_set+0x20>)
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <log_output_timestamp_freq_set+0x24>)
 8003b4c:	4298      	cmp	r0, r3
 8003b4e:	d8f7      	bhi.n	8003b40 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <log_output_timestamp_freq_set+0x28>)
 8003b52:	6018      	str	r0, [r3, #0]
}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200009d4 	.word	0x200009d4
 8003b5c:	000f4240 	.word	0x000f4240
 8003b60:	200009d0 	.word	0x200009d0

08003b64 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	4606      	mov	r6, r0
 8003b68:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
 8003b6a:	2400      	movs	r4, #0
 8003b6c:	e006      	b.n	8003b7c <char_out+0x18>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <char_out+0x20>)
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
 8003b74:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8003b7a:	3401      	adds	r4, #1
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	d3f6      	bcc.n	8003b6e <char_out+0xa>
#endif
	}

	return length;
}
 8003b80:	4628      	mov	r0, r5
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	200009ec 	.word	0x200009ec

08003b88 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8003b88:	4b01      	ldr	r3, [pc, #4]	; (8003b90 <log_backend_uart_init+0x8>)
 8003b8a:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <log_backend_uart_init+0xc>)
 8003b8c:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
 8003b8e:	4770      	bx	lr
 8003b90:	200009ec 	.word	0x200009ec
 8003b94:	0800dcf8 	.word	0x0800dcf8

08003b98 <panic>:

static void panic(struct log_backend const *const backend)
{
 8003b98:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 8003b9a:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <panic+0xc>)
 8003b9c:	f008 f871 	bl	800bc82 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
 8003ba0:	bd08      	pop	{r3, pc}
 8003ba2:	bf00      	nop
 8003ba4:	0800e5e0 	.word	0x0800e5e0

08003ba8 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
 8003ba8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
 8003baa:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <dropped+0xc>)
 8003bac:	f7ff ff98 	bl	8003ae0 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
 8003bb0:	bd08      	pop	{r3, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0800e5e0 	.word	0x0800e5e0

08003bb8 <put>:
{
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	460c      	mov	r4, r1
	log_msg_get(msg);
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	f007 fe7a 	bl	800b8b6 <log_msg_get>
	log_output_msg_process(output, msg, flags);
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <put+0x1c>)
 8003bc8:	f008 f884 	bl	800bcd4 <log_output_msg_process>
	log_msg_put(msg);
 8003bcc:	4620      	mov	r0, r4
 8003bce:	f007 fe96 	bl	800b8fe <log_msg_put>
}
 8003bd2:	bd10      	pop	{r4, pc}
 8003bd4:	0800e5e0 	.word	0x0800e5e0

08003bd8 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8003bd8:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 8003bda:	4c04      	ldr	r4, [pc, #16]	; (8003bec <__do_init_array_aux+0x14>)
 8003bdc:	e002      	b.n	8003be4 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
 8003bde:	f854 3b04 	ldr.w	r3, [r4], #4
 8003be2:	4798      	blx	r3
	for (func_ptr *func = __init_array_start;
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <__do_init_array_aux+0x18>)
 8003be6:	429c      	cmp	r4, r3
 8003be8:	d3f9      	bcc.n	8003bde <__do_init_array_aux+0x6>
	}
}
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	0800e008 	.word	0x0800e008
 8003bf0:	0800e008 	.word	0x0800e008

08003bf4 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <__do_global_ctors_aux+0x1c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 8003bf8:	b14b      	cbz	r3, 8003c0e <__do_global_ctors_aux+0x1a>
{
 8003bfa:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8003bfc:	1e5c      	subs	r4, r3, #1
 8003bfe:	4a04      	ldr	r2, [pc, #16]	; (8003c10 <__do_global_ctors_aux+0x1c>)
 8003c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c04:	4798      	blx	r3
 8003c06:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 8003c08:	2c00      	cmp	r4, #0
 8003c0a:	d1f7      	bne.n	8003bfc <__do_global_ctors_aux+0x8>
	}
}
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	4770      	bx	lr
 8003c10:	0800e000 	.word	0x0800e000

08003c14 <stm32_pin_configure>:
static int stm32_pin_configure(uint32_t pin, uint32_t func, uint32_t altf)
{
	const struct device *port_device;
	int ret = 0;

	if (STM32_PORT(pin) >= STM32_PORTS_MAX) {
 8003c14:	28af      	cmp	r0, #175	; 0xaf
 8003c16:	d81d      	bhi.n	8003c54 <stm32_pin_configure+0x40>
{
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	460f      	mov	r7, r1
 8003c1e:	4615      	mov	r5, r2
 8003c20:	0903      	lsrs	r3, r0, #4
		return -EINVAL;
	}

	port_device = gpio_ports[STM32_PORT(pin)];
 8003c22:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <stm32_pin_configure+0x48>)
 8003c24:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

	if ((port_device == NULL) || (!device_is_ready(port_device))) {
 8003c28:	b18e      	cbz	r6, 8003c4e <stm32_pin_configure+0x3a>
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f009 f84c 	bl	800ccc8 <z_device_ready>
 8003c30:	b150      	cbz	r0, 8003c48 <stm32_pin_configure+0x34>
 8003c32:	2300      	movs	r3, #0
 8003c34:	b95b      	cbnz	r3, 8003c4e <stm32_pin_configure+0x3a>
	if (ret != 0) {
		return ret;
	}
#endif

	gpio_stm32_configure(port_device, STM32_PIN(pin), func, altf);
 8003c36:	462b      	mov	r3, r5
 8003c38:	463a      	mov	r2, r7
 8003c3a:	f004 010f 	and.w	r1, r4, #15
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f008 fa8d 	bl	800c15e <gpio_stm32_configure>

#ifdef CONFIG_PM_DEVICE_RUNTIME
	ret = pm_device_put(port_device);
#endif

	return ret;
 8003c44:	2000      	movs	r0, #0
}
 8003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c48:	f06f 0312 	mvn.w	r3, #18
 8003c4c:	e7f2      	b.n	8003c34 <stm32_pin_configure+0x20>
		return -ENODEV;
 8003c4e:	f06f 0012 	mvn.w	r0, #18
 8003c52:	e7f8      	b.n	8003c46 <stm32_pin_configure+0x32>
		return -EINVAL;
 8003c54:	f06f 0015 	mvn.w	r0, #21
}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	0800e5f0 	.word	0x0800e5f0

08003c60 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003c60:	4901      	ldr	r1, [pc, #4]	; (8003c68 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003c62:	2210      	movs	r2, #16
	str	r2, [r1]
 8003c64:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003c66:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003c68:	e000ed10 	.word	0xe000ed10

08003c6c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003c6c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003c6e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003c70:	f380 8811 	msr	BASEPRI, r0
	isb
 8003c74:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003c78:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003c7c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003c7e:	b662      	cpsie	i
	isb
 8003c80:	f3bf 8f6f 	isb	sy

	bx	lr
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop

08003c88 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 8003c8e:	4d1f      	ldr	r5, [pc, #124]	; (8003d0c <esf_dump+0x84>)
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <esf_dump+0x88>)
 8003c92:	1aed      	subs	r5, r5, r3
 8003c94:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8003c96:	2601      	movs	r6, #1
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	f366 0302 	bfi	r3, r6, #0, #3
 8003ca0:	f36f 03c5 	bfc	r3, #3, #3
 8003ca4:	f365 138f 	bfi	r3, r5, #6, #10
 8003ca8:	f8ad 3000 	strh.w	r3, [sp]
 8003cac:	6883      	ldr	r3, [r0, #8]
 8003cae:	6842      	ldr	r2, [r0, #4]
 8003cb0:	6801      	ldr	r1, [r0, #0]
 8003cb2:	4818      	ldr	r0, [pc, #96]	; (8003d14 <esf_dump+0x8c>)
 8003cb4:	f7ff fbc2 	bl	800343c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	f366 0302 	bfi	r3, r6, #0, #3
 8003cc0:	f36f 03c5 	bfc	r3, #3, #3
 8003cc4:	f365 138f 	bfi	r3, r5, #6, #10
 8003cc8:	f8ad 3000 	strh.w	r3, [sp]
 8003ccc:	6963      	ldr	r3, [r4, #20]
 8003cce:	6922      	ldr	r2, [r4, #16]
 8003cd0:	68e1      	ldr	r1, [r4, #12]
 8003cd2:	4811      	ldr	r0, [pc, #68]	; (8003d18 <esf_dump+0x90>)
 8003cd4:	f7ff fbb2 	bl	800343c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f366 0202 	bfi	r2, r6, #0, #3
 8003ce0:	f36f 02c5 	bfc	r2, #3, #3
 8003ce4:	f365 128f 	bfi	r2, r5, #6, #10
 8003ce8:	69e1      	ldr	r1, [r4, #28]
 8003cea:	480c      	ldr	r0, [pc, #48]	; (8003d1c <esf_dump+0x94>)
 8003cec:	f7ff fc0a 	bl	8003504 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f366 0202 	bfi	r2, r6, #0, #3
 8003cf8:	f36f 02c5 	bfc	r2, #3, #3
 8003cfc:	f365 128f 	bfi	r2, r5, #6, #10
 8003d00:	69a1      	ldr	r1, [r4, #24]
 8003d02:	4807      	ldr	r0, [pc, #28]	; (8003d20 <esf_dump+0x98>)
 8003d04:	f7ff fbfe 	bl	8003504 <log_1>
		esf->basic.pc);
}
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	0800e020 	.word	0x0800e020
 8003d10:	0800e008 	.word	0x0800e008
 8003d14:	0800e61c 	.word	0x0800e61c
 8003d18:	0800e64c 	.word	0x0800e64c
 8003d1c:	0800e67c 	.word	0x0800e67c
 8003d20:	0800e68c 	.word	0x0800e68c

08003d24 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003d24:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003d26:	2800      	cmp	r0, #0
 8003d28:	db07      	blt.n	8003d3a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	f000 021f 	and.w	r2, r0, #31
 8003d2e:	0940      	lsrs	r0, r0, #5
 8003d30:	2301      	movs	r3, #1
 8003d32:	4093      	lsls	r3, r2
 8003d34:	4a01      	ldr	r2, [pc, #4]	; (8003d3c <arch_irq_enable+0x18>)
 8003d36:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8003d40:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003d42:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003d44:	2800      	cmp	r0, #0
 8003d46:	db08      	blt.n	8003d5a <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	0109      	lsls	r1, r1, #4
 8003d4a:	b2c9      	uxtb	r1, r1
 8003d4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d54:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8003d58:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5a:	f000 000f 	and.w	r0, r0, #15
 8003d5e:	0109      	lsls	r1, r1, #4
 8003d60:	b2c9      	uxtb	r1, r1
 8003d62:	4b01      	ldr	r3, [pc, #4]	; (8003d68 <z_arm_irq_priority_set+0x28>)
 8003d64:	5419      	strb	r1, [r3, r0]
}
 8003d66:	4770      	bx	lr
 8003d68:	e000ed14 	.word	0xe000ed14

08003d6c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003d6c:	bf30      	wfi
    b z_SysNmiOnReset
 8003d6e:	f7ff bffd 	b.w	8003d6c <z_SysNmiOnReset>
 8003d72:	bf00      	nop

08003d74 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003d74:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <z_arm_prep_c+0x40>)
 8003d78:	4a0f      	ldr	r2, [pc, #60]	; (8003db8 <z_arm_prep_c+0x44>)
 8003d7a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003d7e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d84:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003d88:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d8c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003d94:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003d98:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003d9c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8003da0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003da4:	f004 fa3a 	bl	800821c <z_bss_zero>
	z_data_copy();
 8003da8:	f005 fa80 	bl	80092ac <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003dac:	f000 fc9e 	bl	80046ec <z_arm_interrupt_init>
	z_cstart();
 8003db0:	f004 fa40 	bl	8008234 <z_cstart>
 8003db4:	e000ed00 	.word	0xe000ed00
 8003db8:	08000000 	.word	0x08000000

08003dbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <arch_swap+0x28>)
 8003dbe:	6893      	ldr	r3, [r2, #8]
 8003dc0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
 8003dc2:	4909      	ldr	r1, [pc, #36]	; (8003de8 <arch_swap+0x2c>)
 8003dc4:	6809      	ldr	r1, [r1, #0]
 8003dc6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003dc8:	4908      	ldr	r1, [pc, #32]	; (8003dec <arch_swap+0x30>)
 8003dca:	684b      	ldr	r3, [r1, #4]
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	604b      	str	r3, [r1, #4]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003ddc:	6893      	ldr	r3, [r2, #8]
}
 8003dde:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000e74 	.word	0x20000e74
 8003de8:	0800f0fc 	.word	0x0800f0fc
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003df0:	4912      	ldr	r1, [pc, #72]	; (8003e3c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003df2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003df4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8003df8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003dfa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003dfe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003e02:	2010      	movs	r0, #16
    msr BASEPRI_MAX, r0
 8003e04:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003e08:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003e0c:	4f0c      	ldr	r7, [pc, #48]	; (8003e40 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003e0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003e12:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8003e14:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003e16:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003e18:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003e1a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003e1c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003e1e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003e22:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003e24:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003e26:	f000 fcb5 	bl	8004794 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003e2a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003e2e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 8003e32:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003e36:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003e3a:	4770      	bx	lr
    ldr r1, =_kernel
 8003e3c:	20000e74 	.word	0x20000e74
    ldr v4, =_SCS_ICSR
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 8003e44:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003e48:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003e4a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003e4e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003e52:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003e54:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003e58:	2902      	cmp	r1, #2
    beq _oops
 8003e5a:	d0ff      	beq.n	8003e5c <_oops>

08003e5c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003e5c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003e5e:	f007 ffb6 	bl	800bdce <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003e62:	bd01      	pop	{r0, pc}

08003e64 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 8003e64:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003e66:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8003e6a:	490d      	ldr	r1, [pc, #52]	; (8003ea0 <arch_new_thread+0x3c>)
 8003e6c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8003e70:	f021 0101 	bic.w	r1, r1, #1
 8003e74:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 8003e78:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003e7c:	9b01      	ldr	r3, [sp, #4]
 8003e7e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e92:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 8003e96:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003e9c:	bc10      	pop	{r4}
 8003e9e:	4770      	bx	lr
 8003ea0:	0800b537 	.word	0x0800b537

08003ea4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <z_check_thread_stack_fail+0x48>)
 8003ea6:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
 8003ea8:	b1ea      	cbz	r2, 8003ee6 <z_check_thread_stack_fail+0x42>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003eaa:	f110 0f16 	cmn.w	r0, #22
 8003eae:	d010      	beq.n	8003ed2 <z_check_thread_stack_fail+0x2e>
 8003eb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003eb2:	f1a3 0c20 	sub.w	ip, r3, #32
 8003eb6:	4584      	cmp	ip, r0
 8003eb8:	d805      	bhi.n	8003ec6 <z_check_thread_stack_fail+0x22>
 8003eba:	4283      	cmp	r3, r0
 8003ebc:	d905      	bls.n	8003eca <z_check_thread_stack_fail+0x26>
 8003ebe:	428b      	cmp	r3, r1
 8003ec0:	d805      	bhi.n	8003ece <z_check_thread_stack_fail+0x2a>
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	e00a      	b.n	8003edc <z_check_thread_stack_fail+0x38>
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	e008      	b.n	8003edc <z_check_thread_stack_fail+0x38>
 8003eca:	2100      	movs	r1, #0
 8003ecc:	e006      	b.n	8003edc <z_check_thread_stack_fail+0x38>
 8003ece:	2101      	movs	r1, #1
 8003ed0:	e004      	b.n	8003edc <z_check_thread_stack_fail+0x38>
 8003ed2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003ed4:	428b      	cmp	r3, r1
 8003ed6:	bf94      	ite	ls
 8003ed8:	2100      	movls	r1, #0
 8003eda:	2101      	movhi	r1, #1
 8003edc:	b909      	cbnz	r1, 8003ee2 <z_check_thread_stack_fail+0x3e>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003ede:	2000      	movs	r0, #0
}
 8003ee0:	4770      	bx	lr
		return thread->stack_info.start;
 8003ee2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003ee4:	4770      	bx	lr
		return 0;
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000e74 	.word	0x20000e74

08003ef0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003ef0:	b508      	push	{r3, lr}
 8003ef2:	460d      	mov	r5, r1
 8003ef4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <arch_switch_to_main_thread+0x28>)
 8003ef8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003efa:	f000 fc4b 	bl	8004794 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003efe:	4620      	mov	r0, r4
 8003f00:	f385 8809 	msr	PSP, r5
 8003f04:	2100      	movs	r1, #0
 8003f06:	b663      	cpsie	if
 8003f08:	f381 8811 	msr	BASEPRI, r1
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	2200      	movs	r2, #0
 8003f12:	2300      	movs	r3, #0
 8003f14:	f007 fb0f 	bl	800b536 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003f18:	20000e74 	.word	0x20000e74

08003f1c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003f1c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003f1e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003f22:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003f26:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003f2a:	4904      	ldr	r1, [pc, #16]	; (8003f3c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003f2c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003f2e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003f30:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003f32:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003f36:	4902      	ldr	r1, [pc, #8]	; (8003f40 <_isr_wrapper+0x24>)
	bx r1
 8003f38:	4708      	bx	r1
 8003f3a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003f3c:	0800dd58 	.word	0x0800dd58
	ldr r1, =z_arm_int_exit
 8003f40:	08003f45 	.word	0x08003f45

08003f44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8003f46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8003f48:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 8003f4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8003f4c:	d003      	beq.n	8003f56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8003f4e:	4903      	ldr	r1, [pc, #12]	; (8003f5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8003f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8003f54:	600a      	str	r2, [r1, #0]

08003f56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8003f56:	4770      	bx	lr
	ldr r3, =_kernel
 8003f58:	20000e74 	.word	0x20000e74
	ldr r1, =_SCS_ICSR
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8003f60:	b508      	push	{r3, lr}
 8003f62:	4b4e      	ldr	r3, [pc, #312]	; (800409c <usage_fault+0x13c>)
 8003f64:	4a4e      	ldr	r2, [pc, #312]	; (80040a0 <usage_fault+0x140>)
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f362 0102 	bfi	r1, r2, #0, #3
 8003f74:	f36f 01c5 	bfc	r1, #3, #3
 8003f78:	f363 118f 	bfi	r1, r3, #6, #10
 8003f7c:	4849      	ldr	r0, [pc, #292]	; (80040a4 <usage_fault+0x144>)
 8003f7e:	f7ff fa97 	bl	80034b0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <usage_fault+0x148>)
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f8a:	d121      	bne.n	8003fd0 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <usage_fault+0x148>)
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f94:	d12d      	bne.n	8003ff2 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003f96:	4b44      	ldr	r3, [pc, #272]	; (80040a8 <usage_fault+0x148>)
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003f9e:	d139      	bne.n	8004014 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <usage_fault+0x148>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003fa8:	d145      	bne.n	8004036 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <usage_fault+0x148>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fb2:	d151      	bne.n	8004058 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	; (80040a8 <usage_fault+0x148>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fbc:	d15d      	bne.n	800407a <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <usage_fault+0x148>)
 8003fc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003fc2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003fc6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003fca:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8003fcc:	2000      	movs	r0, #0
 8003fce:	bd08      	pop	{r3, pc}
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <usage_fault+0x13c>)
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <usage_fault+0x140>)
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f362 0102 	bfi	r1, r2, #0, #3
 8003fe2:	f36f 01c5 	bfc	r1, #3, #3
 8003fe6:	f363 118f 	bfi	r1, r3, #6, #10
 8003fea:	4830      	ldr	r0, [pc, #192]	; (80040ac <usage_fault+0x14c>)
 8003fec:	f7ff fa60 	bl	80034b0 <log_0>
 8003ff0:	e7cc      	b.n	8003f8c <usage_fault+0x2c>
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <usage_fault+0x13c>)
 8003ff4:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <usage_fault+0x140>)
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	2201      	movs	r2, #1
 8004000:	f362 0102 	bfi	r1, r2, #0, #3
 8004004:	f36f 01c5 	bfc	r1, #3, #3
 8004008:	f363 118f 	bfi	r1, r3, #6, #10
 800400c:	4828      	ldr	r0, [pc, #160]	; (80040b0 <usage_fault+0x150>)
 800400e:	f7ff fa4f 	bl	80034b0 <log_0>
 8004012:	e7c0      	b.n	8003f96 <usage_fault+0x36>
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <usage_fault+0x13c>)
 8004016:	4a22      	ldr	r2, [pc, #136]	; (80040a0 <usage_fault+0x140>)
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	2201      	movs	r2, #1
 8004022:	f362 0102 	bfi	r1, r2, #0, #3
 8004026:	f36f 01c5 	bfc	r1, #3, #3
 800402a:	f363 118f 	bfi	r1, r3, #6, #10
 800402e:	4821      	ldr	r0, [pc, #132]	; (80040b4 <usage_fault+0x154>)
 8004030:	f7ff fa3e 	bl	80034b0 <log_0>
 8004034:	e7b4      	b.n	8003fa0 <usage_fault+0x40>
 8004036:	4b19      	ldr	r3, [pc, #100]	; (800409c <usage_fault+0x13c>)
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <usage_fault+0x140>)
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	2201      	movs	r2, #1
 8004044:	f362 0102 	bfi	r1, r2, #0, #3
 8004048:	f36f 01c5 	bfc	r1, #3, #3
 800404c:	f363 118f 	bfi	r1, r3, #6, #10
 8004050:	4819      	ldr	r0, [pc, #100]	; (80040b8 <usage_fault+0x158>)
 8004052:	f7ff fa2d 	bl	80034b0 <log_0>
 8004056:	e7a8      	b.n	8003faa <usage_fault+0x4a>
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <usage_fault+0x13c>)
 800405a:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <usage_fault+0x140>)
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	2201      	movs	r2, #1
 8004066:	f362 0102 	bfi	r1, r2, #0, #3
 800406a:	f36f 01c5 	bfc	r1, #3, #3
 800406e:	f363 118f 	bfi	r1, r3, #6, #10
 8004072:	4812      	ldr	r0, [pc, #72]	; (80040bc <usage_fault+0x15c>)
 8004074:	f7ff fa1c 	bl	80034b0 <log_0>
 8004078:	e79c      	b.n	8003fb4 <usage_fault+0x54>
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <usage_fault+0x13c>)
 800407c:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <usage_fault+0x140>)
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	2201      	movs	r2, #1
 8004088:	f362 0102 	bfi	r1, r2, #0, #3
 800408c:	f36f 01c5 	bfc	r1, #3, #3
 8004090:	f363 118f 	bfi	r1, r3, #6, #10
 8004094:	480a      	ldr	r0, [pc, #40]	; (80040c0 <usage_fault+0x160>)
 8004096:	f7ff fa0b 	bl	80034b0 <log_0>
 800409a:	e790      	b.n	8003fbe <usage_fault+0x5e>
 800409c:	0800e020 	.word	0x0800e020
 80040a0:	0800e008 	.word	0x0800e008
 80040a4:	0800e6bc 	.word	0x0800e6bc
 80040a8:	e000ed00 	.word	0xe000ed00
 80040ac:	0800e6d4 	.word	0x0800e6d4
 80040b0:	0800e6e8 	.word	0x0800e6e8
 80040b4:	0800e704 	.word	0x0800e704
 80040b8:	0800e724 	.word	0x0800e724
 80040bc:	0800e74c 	.word	0x0800e74c
 80040c0:	0800e768 	.word	0x0800e768

080040c4 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 80040c4:	b508      	push	{r3, lr}
	*recoverable = false;
 80040c6:	2200      	movs	r2, #0
 80040c8:	700a      	strb	r2, [r1, #0]
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <debug_monitor+0x28>)
 80040cc:	4908      	ldr	r1, [pc, #32]	; (80040f0 <debug_monitor+0x2c>)
 80040ce:	1a5b      	subs	r3, r3, r1
 80040d0:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	2001      	movs	r0, #1
 80040d8:	f360 0102 	bfi	r1, r0, #0, #3
 80040dc:	f362 01c5 	bfi	r1, r2, #3, #3
 80040e0:	f363 118f 	bfi	r1, r3, #6, #10
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <debug_monitor+0x30>)
 80040e6:	f7ff f9e3 	bl	80034b0 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 80040ea:	bd08      	pop	{r3, pc}
 80040ec:	0800e020 	.word	0x0800e020
 80040f0:	0800e008 	.word	0x0800e008
 80040f4:	0800e794 	.word	0x0800e794

080040f8 <bus_fault>:
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4605      	mov	r5, r0
 80040fc:	460e      	mov	r6, r1
 80040fe:	4614      	mov	r4, r2
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <bus_fault+0x184>)
 8004102:	4a5f      	ldr	r2, [pc, #380]	; (8004280 <bus_fault+0x188>)
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	2201      	movs	r2, #1
 800410e:	f362 0102 	bfi	r1, r2, #0, #3
 8004112:	f36f 01c5 	bfc	r1, #3, #3
 8004116:	f363 118f 	bfi	r1, r3, #6, #10
 800411a:	485a      	ldr	r0, [pc, #360]	; (8004284 <bus_fault+0x18c>)
 800411c:	f7ff f9c8 	bl	80034b0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <bus_fault+0x190>)
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004128:	d124      	bne.n	8004174 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800412a:	4b57      	ldr	r3, [pc, #348]	; (8004288 <bus_fault+0x190>)
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004132:	d130      	bne.n	8004196 <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8004134:	4b54      	ldr	r3, [pc, #336]	; (8004288 <bus_fault+0x190>)
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f413 7f00 	tst.w	r3, #512	; 0x200
 800413c:	d13c      	bne.n	80041b8 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800413e:	4b52      	ldr	r3, [pc, #328]	; (8004288 <bus_fault+0x190>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004146:	d165      	bne.n	8004214 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004148:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <bus_fault+0x190>)
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004150:	d171      	bne.n	8004236 <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <bus_fault+0x190>)
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800415a:	d17d      	bne.n	8004258 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800415c:	4a4a      	ldr	r2, [pc, #296]	; (8004288 <bus_fault+0x190>)
 800415e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004160:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8004164:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004166:	2101      	movs	r1, #1
 8004168:	4628      	mov	r0, r5
 800416a:	f007 fe42 	bl	800bdf2 <memory_fault_recoverable>
 800416e:	7020      	strb	r0, [r4, #0]
}
 8004170:	2000      	movs	r0, #0
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	4b41      	ldr	r3, [pc, #260]	; (800427c <bus_fault+0x184>)
 8004176:	4a42      	ldr	r2, [pc, #264]	; (8004280 <bus_fault+0x188>)
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	2201      	movs	r2, #1
 8004182:	f362 0102 	bfi	r1, r2, #0, #3
 8004186:	f36f 01c5 	bfc	r1, #3, #3
 800418a:	f363 118f 	bfi	r1, r3, #6, #10
 800418e:	483f      	ldr	r0, [pc, #252]	; (800428c <bus_fault+0x194>)
 8004190:	f7ff f98e 	bl	80034b0 <log_0>
 8004194:	e7c9      	b.n	800412a <bus_fault+0x32>
 8004196:	4b39      	ldr	r3, [pc, #228]	; (800427c <bus_fault+0x184>)
 8004198:	4a39      	ldr	r2, [pc, #228]	; (8004280 <bus_fault+0x188>)
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	2201      	movs	r2, #1
 80041a4:	f362 0102 	bfi	r1, r2, #0, #3
 80041a8:	f36f 01c5 	bfc	r1, #3, #3
 80041ac:	f363 118f 	bfi	r1, r3, #6, #10
 80041b0:	4837      	ldr	r0, [pc, #220]	; (8004290 <bus_fault+0x198>)
 80041b2:	f7ff f97d 	bl	80034b0 <log_0>
 80041b6:	e7bd      	b.n	8004134 <bus_fault+0x3c>
 80041b8:	4b30      	ldr	r3, [pc, #192]	; (800427c <bus_fault+0x184>)
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <bus_fault+0x188>)
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	2201      	movs	r2, #1
 80041c6:	f362 0102 	bfi	r1, r2, #0, #3
 80041ca:	f36f 01c5 	bfc	r1, #3, #3
 80041ce:	f363 118f 	bfi	r1, r3, #6, #10
 80041d2:	4830      	ldr	r0, [pc, #192]	; (8004294 <bus_fault+0x19c>)
 80041d4:	f7ff f96c 	bl	80034b0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <bus_fault+0x190>)
 80041da:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80041e2:	d0ac      	beq.n	800413e <bus_fault+0x46>
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <bus_fault+0x184>)
 80041e6:	4a26      	ldr	r2, [pc, #152]	; (8004280 <bus_fault+0x188>)
 80041e8:	1a9b      	subs	r3, r3, r2
 80041ea:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	2001      	movs	r0, #1
 80041f2:	f360 0202 	bfi	r2, r0, #0, #3
 80041f6:	f36f 02c5 	bfc	r2, #3, #3
 80041fa:	f363 128f 	bfi	r2, r3, #6, #10
 80041fe:	4826      	ldr	r0, [pc, #152]	; (8004298 <bus_fault+0x1a0>)
 8004200:	f7ff f980 	bl	8003504 <log_1>
			if (from_hard_fault != 0) {
 8004204:	2e00      	cmp	r6, #0
 8004206:	d09a      	beq.n	800413e <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <bus_fault+0x190>)
 800420a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800420c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004210:	6293      	str	r3, [r2, #40]	; 0x28
 8004212:	e794      	b.n	800413e <bus_fault+0x46>
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <bus_fault+0x184>)
 8004216:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <bus_fault+0x188>)
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	2201      	movs	r2, #1
 8004222:	f362 0102 	bfi	r1, r2, #0, #3
 8004226:	f36f 01c5 	bfc	r1, #3, #3
 800422a:	f363 118f 	bfi	r1, r3, #6, #10
 800422e:	481b      	ldr	r0, [pc, #108]	; (800429c <bus_fault+0x1a4>)
 8004230:	f7ff f93e 	bl	80034b0 <log_0>
 8004234:	e788      	b.n	8004148 <bus_fault+0x50>
 8004236:	4b11      	ldr	r3, [pc, #68]	; (800427c <bus_fault+0x184>)
 8004238:	4a11      	ldr	r2, [pc, #68]	; (8004280 <bus_fault+0x188>)
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	2201      	movs	r2, #1
 8004244:	f362 0102 	bfi	r1, r2, #0, #3
 8004248:	f36f 01c5 	bfc	r1, #3, #3
 800424c:	f363 118f 	bfi	r1, r3, #6, #10
 8004250:	4813      	ldr	r0, [pc, #76]	; (80042a0 <bus_fault+0x1a8>)
 8004252:	f7ff f92d 	bl	80034b0 <log_0>
 8004256:	e781      	b.n	800415c <bus_fault+0x64>
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <bus_fault+0x184>)
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <bus_fault+0x188>)
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	2201      	movs	r2, #1
 8004266:	f362 0102 	bfi	r1, r2, #0, #3
 800426a:	f36f 01c5 	bfc	r1, #3, #3
 800426e:	f363 118f 	bfi	r1, r3, #6, #10
 8004272:	480c      	ldr	r0, [pc, #48]	; (80042a4 <bus_fault+0x1ac>)
 8004274:	f7ff f91c 	bl	80034b0 <log_0>
 8004278:	e770      	b.n	800415c <bus_fault+0x64>
 800427a:	bf00      	nop
 800427c:	0800e020 	.word	0x0800e020
 8004280:	0800e008 	.word	0x0800e008
 8004284:	0800e7b8 	.word	0x0800e7b8
 8004288:	e000ed00 	.word	0xe000ed00
 800428c:	0800e7d0 	.word	0x0800e7d0
 8004290:	0800e7e4 	.word	0x0800e7e4
 8004294:	0800e7f8 	.word	0x0800e7f8
 8004298:	0800e814 	.word	0x0800e814
 800429c:	0800e82c 	.word	0x0800e82c
 80042a0:	0800e848 	.word	0x0800e848
 80042a4:	0800e860 	.word	0x0800e860

080042a8 <mem_manage_fault>:
{
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	4605      	mov	r5, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	4616      	mov	r6, r2
 80042b0:	4b64      	ldr	r3, [pc, #400]	; (8004444 <mem_manage_fault+0x19c>)
 80042b2:	4a65      	ldr	r2, [pc, #404]	; (8004448 <mem_manage_fault+0x1a0>)
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	2201      	movs	r2, #1
 80042be:	f362 0102 	bfi	r1, r2, #0, #3
 80042c2:	f36f 01c5 	bfc	r1, #3, #3
 80042c6:	f363 118f 	bfi	r1, r3, #6, #10
 80042ca:	4860      	ldr	r0, [pc, #384]	; (800444c <mem_manage_fault+0x1a4>)
 80042cc:	f7ff f8f0 	bl	80034b0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80042d0:	4b5f      	ldr	r3, [pc, #380]	; (8004450 <mem_manage_fault+0x1a8>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f013 0f10 	tst.w	r3, #16
 80042d8:	d132      	bne.n	8004340 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <mem_manage_fault+0x1a8>)
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f013 0f08 	tst.w	r3, #8
 80042e2:	d13e      	bne.n	8004362 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80042e4:	4b5a      	ldr	r3, [pc, #360]	; (8004450 <mem_manage_fault+0x1a8>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f013 0f02 	tst.w	r3, #2
 80042ec:	d14a      	bne.n	8004384 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
 80042ee:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80042f2:	4b57      	ldr	r3, [pc, #348]	; (8004450 <mem_manage_fault+0x1a8>)
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f013 0f01 	tst.w	r3, #1
 80042fa:	d175      	bne.n	80043e8 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80042fc:	4b54      	ldr	r3, [pc, #336]	; (8004450 <mem_manage_fault+0x1a8>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f013 0f20 	tst.w	r3, #32
 8004304:	f040 8081 	bne.w	800440a <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004308:	4b51      	ldr	r3, [pc, #324]	; (8004450 <mem_manage_fault+0x1a8>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f013 0f10 	tst.w	r3, #16
 8004310:	d104      	bne.n	800431c <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8004312:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <mem_manage_fault+0x1a8>)
 8004314:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8004316:	f014 0402 	ands.w	r4, r4, #2
 800431a:	d005      	beq.n	8004328 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 800431c:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <mem_manage_fault+0x1a8>)
 800431e:	685c      	ldr	r4, [r3, #4]
 8004320:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8004324:	f040 8082 	bne.w	800442c <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8004328:	4a49      	ldr	r2, [pc, #292]	; (8004450 <mem_manage_fault+0x1a8>)
 800432a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800432c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004330:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8004332:	2101      	movs	r1, #1
 8004334:	4628      	mov	r0, r5
 8004336:	f007 fd5c 	bl	800bdf2 <memory_fault_recoverable>
 800433a:	7030      	strb	r0, [r6, #0]
}
 800433c:	4620      	mov	r0, r4
 800433e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004340:	4b40      	ldr	r3, [pc, #256]	; (8004444 <mem_manage_fault+0x19c>)
 8004342:	4a41      	ldr	r2, [pc, #260]	; (8004448 <mem_manage_fault+0x1a0>)
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	2201      	movs	r2, #1
 800434e:	f362 0102 	bfi	r1, r2, #0, #3
 8004352:	f36f 01c5 	bfc	r1, #3, #3
 8004356:	f363 118f 	bfi	r1, r3, #6, #10
 800435a:	483e      	ldr	r0, [pc, #248]	; (8004454 <mem_manage_fault+0x1ac>)
 800435c:	f7ff f8a8 	bl	80034b0 <log_0>
 8004360:	e7bb      	b.n	80042da <mem_manage_fault+0x32>
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <mem_manage_fault+0x19c>)
 8004364:	4a38      	ldr	r2, [pc, #224]	; (8004448 <mem_manage_fault+0x1a0>)
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	2201      	movs	r2, #1
 8004370:	f362 0102 	bfi	r1, r2, #0, #3
 8004374:	f36f 01c5 	bfc	r1, #3, #3
 8004378:	f363 118f 	bfi	r1, r3, #6, #10
 800437c:	4836      	ldr	r0, [pc, #216]	; (8004458 <mem_manage_fault+0x1b0>)
 800437e:	f7ff f897 	bl	80034b0 <log_0>
 8004382:	e7af      	b.n	80042e4 <mem_manage_fault+0x3c>
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <mem_manage_fault+0x19c>)
 8004386:	4a30      	ldr	r2, [pc, #192]	; (8004448 <mem_manage_fault+0x1a0>)
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	2201      	movs	r2, #1
 8004392:	f362 0102 	bfi	r1, r2, #0, #3
 8004396:	f36f 01c5 	bfc	r1, #3, #3
 800439a:	f363 118f 	bfi	r1, r3, #6, #10
 800439e:	482f      	ldr	r0, [pc, #188]	; (800445c <mem_manage_fault+0x1b4>)
 80043a0:	f7ff f886 	bl	80034b0 <log_0>
		uint32_t temp = SCB->MMFAR;
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <mem_manage_fault+0x1a8>)
 80043a6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043ae:	d102      	bne.n	80043b6 <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
 80043b0:	f06f 0715 	mvn.w	r7, #21
 80043b4:	e79d      	b.n	80042f2 <mem_manage_fault+0x4a>
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <mem_manage_fault+0x19c>)
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <mem_manage_fault+0x1a0>)
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	2101      	movs	r1, #1
 80043c4:	f361 0202 	bfi	r2, r1, #0, #3
 80043c8:	f36f 02c5 	bfc	r2, #3, #3
 80043cc:	f363 128f 	bfi	r2, r3, #6, #10
 80043d0:	4639      	mov	r1, r7
 80043d2:	4823      	ldr	r0, [pc, #140]	; (8004460 <mem_manage_fault+0x1b8>)
 80043d4:	f7ff f896 	bl	8003504 <log_1>
			if (from_hard_fault != 0) {
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d08a      	beq.n	80042f2 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <mem_manage_fault+0x1a8>)
 80043de:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80043e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e4:	6293      	str	r3, [r2, #40]	; 0x28
 80043e6:	e784      	b.n	80042f2 <mem_manage_fault+0x4a>
 80043e8:	4b16      	ldr	r3, [pc, #88]	; (8004444 <mem_manage_fault+0x19c>)
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <mem_manage_fault+0x1a0>)
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	2201      	movs	r2, #1
 80043f6:	f362 0102 	bfi	r1, r2, #0, #3
 80043fa:	f36f 01c5 	bfc	r1, #3, #3
 80043fe:	f363 118f 	bfi	r1, r3, #6, #10
 8004402:	4818      	ldr	r0, [pc, #96]	; (8004464 <mem_manage_fault+0x1bc>)
 8004404:	f7ff f854 	bl	80034b0 <log_0>
 8004408:	e778      	b.n	80042fc <mem_manage_fault+0x54>
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <mem_manage_fault+0x19c>)
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <mem_manage_fault+0x1a0>)
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	2201      	movs	r2, #1
 8004418:	f362 0102 	bfi	r1, r2, #0, #3
 800441c:	f36f 01c5 	bfc	r1, #3, #3
 8004420:	f363 118f 	bfi	r1, r3, #6, #10
 8004424:	4810      	ldr	r0, [pc, #64]	; (8004468 <mem_manage_fault+0x1c0>)
 8004426:	f7ff f843 	bl	80034b0 <log_0>
 800442a:	e76d      	b.n	8004308 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800442c:	4629      	mov	r1, r5
 800442e:	4638      	mov	r0, r7
 8004430:	f7ff fd38 	bl	8003ea4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004434:	4604      	mov	r4, r0
 8004436:	2800      	cmp	r0, #0
 8004438:	f43f af76 	beq.w	8004328 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800443c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 8004440:	2402      	movs	r4, #2
 8004442:	e771      	b.n	8004328 <mem_manage_fault+0x80>
 8004444:	0800e020 	.word	0x0800e020
 8004448:	0800e008 	.word	0x0800e008
 800444c:	0800e890 	.word	0x0800e890
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	0800e8a8 	.word	0x0800e8a8
 8004458:	0800e7e4 	.word	0x0800e7e4
 800445c:	0800e8dc 	.word	0x0800e8dc
 8004460:	0800e8f4 	.word	0x0800e8f4
 8004464:	0800e90c 	.word	0x0800e90c
 8004468:	0800e860 	.word	0x0800e860

0800446c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	4605      	mov	r5, r0
 8004470:	460c      	mov	r4, r1
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <hard_fault+0x120>)
 8004474:	4a46      	ldr	r2, [pc, #280]	; (8004590 <hard_fault+0x124>)
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	2201      	movs	r2, #1
 8004480:	f362 0102 	bfi	r1, r2, #0, #3
 8004484:	f36f 01c5 	bfc	r1, #3, #3
 8004488:	f363 118f 	bfi	r1, r3, #6, #10
 800448c:	4841      	ldr	r0, [pc, #260]	; (8004594 <hard_fault+0x128>)
 800448e:	f7ff f80f 	bl	80034b0 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
 8004492:	2300      	movs	r3, #0
 8004494:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8004496:	4b40      	ldr	r3, [pc, #256]	; (8004598 <hard_fault+0x12c>)
 8004498:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800449a:	f016 0602 	ands.w	r6, r6, #2
 800449e:	d109      	bne.n	80044b4 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <hard_fault+0x12c>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db17      	blt.n	80044d8 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <hard_fault+0x12c>)
 80044aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044ac:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80044b0:	d124      	bne.n	80044fc <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <hard_fault+0x120>)
 80044b6:	4a36      	ldr	r2, [pc, #216]	; (8004590 <hard_fault+0x124>)
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	2201      	movs	r2, #1
 80044c2:	f362 0102 	bfi	r1, r2, #0, #3
 80044c6:	f36f 01c5 	bfc	r1, #3, #3
 80044ca:	f363 118f 	bfi	r1, r3, #6, #10
 80044ce:	4833      	ldr	r0, [pc, #204]	; (800459c <hard_fault+0x130>)
 80044d0:	f7fe ffee 	bl	80034b0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80044d4:	2000      	movs	r0, #0
 80044d6:	e7ec      	b.n	80044b2 <hard_fault+0x46>
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <hard_fault+0x120>)
 80044da:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <hard_fault+0x124>)
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	2201      	movs	r2, #1
 80044e6:	f362 0102 	bfi	r1, r2, #0, #3
 80044ea:	f36f 01c5 	bfc	r1, #3, #3
 80044ee:	f363 118f 	bfi	r1, r3, #6, #10
 80044f2:	482b      	ldr	r0, [pc, #172]	; (80045a0 <hard_fault+0x134>)
 80044f4:	f7fe ffdc 	bl	80034b0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80044f8:	4630      	mov	r0, r6
 80044fa:	e7da      	b.n	80044b2 <hard_fault+0x46>
 80044fc:	4b23      	ldr	r3, [pc, #140]	; (800458c <hard_fault+0x120>)
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <hard_fault+0x124>)
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	2201      	movs	r2, #1
 800450a:	f362 0102 	bfi	r1, r2, #0, #3
 800450e:	f36f 01c5 	bfc	r1, #3, #3
 8004512:	f363 118f 	bfi	r1, r3, #6, #10
 8004516:	4823      	ldr	r0, [pc, #140]	; (80045a4 <hard_fault+0x138>)
 8004518:	f7fe ffca 	bl	80034b0 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 800451c:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 800451e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 8004522:	f64d 7302 	movw	r3, #57090	; 0xdf02
 8004526:	429a      	cmp	r2, r3
 8004528:	d00d      	beq.n	8004546 <hard_fault+0xda>
		} else if (SCB_MMFSR != 0) {
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <hard_fault+0x12c>)
 800452c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004530:	b9e3      	cbnz	r3, 800456c <hard_fault+0x100>
		} else if (SCB_BFSR != 0) {
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <hard_fault+0x12c>)
 8004534:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004538:	b9f3      	cbnz	r3, 8004578 <hard_fault+0x10c>
		} else if (SCB_UFSR != 0) {
 800453a:	4b17      	ldr	r3, [pc, #92]	; (8004598 <hard_fault+0x12c>)
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	bb03      	cbnz	r3, 8004584 <hard_fault+0x118>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004542:	4630      	mov	r0, r6
	return reason;
 8004544:	e7b5      	b.n	80044b2 <hard_fault+0x46>
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <hard_fault+0x120>)
 8004548:	4a11      	ldr	r2, [pc, #68]	; (8004590 <hard_fault+0x124>)
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	2101      	movs	r1, #1
 8004554:	f361 0202 	bfi	r2, r1, #0, #3
 8004558:	f36f 02c5 	bfc	r2, #3, #3
 800455c:	f363 128f 	bfi	r2, r3, #6, #10
 8004560:	6829      	ldr	r1, [r5, #0]
 8004562:	4811      	ldr	r0, [pc, #68]	; (80045a8 <hard_fault+0x13c>)
 8004564:	f7fe ffce 	bl	8003504 <log_1>
			reason = esf->basic.r0;
 8004568:	6828      	ldr	r0, [r5, #0]
 800456a:	e7a2      	b.n	80044b2 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
 800456c:	4622      	mov	r2, r4
 800456e:	2101      	movs	r1, #1
 8004570:	4628      	mov	r0, r5
 8004572:	f7ff fe99 	bl	80042a8 <mem_manage_fault>
 8004576:	e79c      	b.n	80044b2 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
 8004578:	4622      	mov	r2, r4
 800457a:	2101      	movs	r1, #1
 800457c:	4628      	mov	r0, r5
 800457e:	f7ff fdbb 	bl	80040f8 <bus_fault>
 8004582:	e796      	b.n	80044b2 <hard_fault+0x46>
			reason = usage_fault(esf);
 8004584:	4628      	mov	r0, r5
 8004586:	f7ff fceb 	bl	8003f60 <usage_fault>
 800458a:	e792      	b.n	80044b2 <hard_fault+0x46>
 800458c:	0800e020 	.word	0x0800e020
 8004590:	0800e008 	.word	0x0800e008
 8004594:	0800e92c 	.word	0x0800e92c
 8004598:	e000ed00 	.word	0xe000ed00
 800459c:	0800e944 	.word	0x0800e944
 80045a0:	0800e968 	.word	0x0800e968
 80045a4:	0800e978 	.word	0x0800e978
 80045a8:	0800e998 	.word	0x0800e998

080045ac <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 80045ac:	b508      	push	{r3, lr}
 80045ae:	460a      	mov	r2, r1
 80045b0:	480b      	ldr	r0, [pc, #44]	; (80045e0 <reserved_exception+0x34>)
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <reserved_exception+0x38>)
 80045b4:	1ac0      	subs	r0, r0, r3
 80045b6:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	2101      	movs	r1, #1
 80045be:	f361 0302 	bfi	r3, r1, #0, #3
 80045c2:	f36f 03c5 	bfc	r3, #3, #3
 80045c6:	f360 138f 	bfi	r3, r0, #6, #10
 80045ca:	2a0f      	cmp	r2, #15
 80045cc:	dc05      	bgt.n	80045da <reserved_exception+0x2e>
 80045ce:	4906      	ldr	r1, [pc, #24]	; (80045e8 <reserved_exception+0x3c>)
 80045d0:	3a10      	subs	r2, #16
 80045d2:	4806      	ldr	r0, [pc, #24]	; (80045ec <reserved_exception+0x40>)
 80045d4:	f7fe ffc8 	bl	8003568 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 80045d8:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
 80045da:	4905      	ldr	r1, [pc, #20]	; (80045f0 <reserved_exception+0x44>)
 80045dc:	e7f8      	b.n	80045d0 <reserved_exception+0x24>
 80045de:	bf00      	nop
 80045e0:	0800e020 	.word	0x0800e020
 80045e4:	0800e008 	.word	0x0800e008
 80045e8:	0800e9b4 	.word	0x0800e9b4
 80045ec:	0800e9e8 	.word	0x0800e9e8
 80045f0:	0800e9cc 	.word	0x0800e9cc

080045f4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80045f8:	4b2f      	ldr	r3, [pc, #188]	; (80046b8 <z_arm_fault+0xc4>)
 80045fa:	685d      	ldr	r5, [r3, #4]
 80045fc:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004600:	2300      	movs	r3, #0
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 800460a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 800460e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8004612:	d12a      	bne.n	800466a <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8004614:	f002 030c 	and.w	r3, r2, #12
 8004618:	2b08      	cmp	r3, #8
 800461a:	d010      	beq.n	800463e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 800461c:	f012 0f08 	tst.w	r2, #8
 8004620:	d020      	beq.n	8004664 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
 8004622:	460c      	mov	r4, r1
	*nested_exc = false;
 8004624:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 8004626:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800462a:	4629      	mov	r1, r5
 800462c:	4620      	mov	r0, r4
 800462e:	f007 fbe2 	bl	800bdf6 <fault_handle>
 8004632:	4605      	mov	r5, r0
	if (recoverable) {
 8004634:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004638:	b1d3      	cbz	r3, 8004670 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 800463a:	b00a      	add	sp, #40	; 0x28
 800463c:	bd70      	pop	{r4, r5, r6, pc}
 800463e:	4b1f      	ldr	r3, [pc, #124]	; (80046bc <z_arm_fault+0xc8>)
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <z_arm_fault+0xcc>)
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	2201      	movs	r2, #1
 800464c:	f362 0102 	bfi	r1, r2, #0, #3
 8004650:	f36f 01c5 	bfc	r1, #3, #3
 8004654:	f363 118f 	bfi	r1, r3, #6, #10
 8004658:	481a      	ldr	r0, [pc, #104]	; (80046c4 <z_arm_fault+0xd0>)
 800465a:	f7fe ff29 	bl	80034b0 <log_0>
	*nested_exc = false;
 800465e:	2600      	movs	r6, #0
		return NULL;
 8004660:	4634      	mov	r4, r6
 8004662:	e7e0      	b.n	8004626 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8004664:	4604      	mov	r4, r0
			*nested_exc = true;
 8004666:	2601      	movs	r6, #1
 8004668:	e7dd      	b.n	8004626 <z_arm_fault+0x32>
	*nested_exc = false;
 800466a:	2600      	movs	r6, #0
		return NULL;
 800466c:	4634      	mov	r4, r6
 800466e:	e7da      	b.n	8004626 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8004670:	f10d 0c04 	add.w	ip, sp, #4
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	6861      	ldr	r1, [r4, #4]
 8004678:	68a2      	ldr	r2, [r4, #8]
 800467a:	68e3      	ldr	r3, [r4, #12]
 800467c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004680:	6920      	ldr	r0, [r4, #16]
 8004682:	6961      	ldr	r1, [r4, #20]
 8004684:	69a2      	ldr	r2, [r4, #24]
 8004686:	69e3      	ldr	r3, [r4, #28]
 8004688:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
 800468c:	b146      	cbz	r6, 80046a0 <z_arm_fault+0xac>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 800468e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004692:	b95a      	cbnz	r2, 80046ac <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8004694:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004698:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 800469c:	9308      	str	r3, [sp, #32]
 800469e:	e005      	b.n	80046ac <z_arm_fault+0xb8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80046a0:	9b08      	ldr	r3, [sp, #32]
 80046a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 80046ac:	a901      	add	r1, sp, #4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f007 fb81 	bl	800bdb6 <z_arm_fatal_error>
 80046b4:	e7c1      	b.n	800463a <z_arm_fault+0x46>
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00
 80046bc:	0800e020 	.word	0x0800e020
 80046c0:	0800e008 	.word	0x0800e008
 80046c4:	0800e9fc 	.word	0x0800e9fc

080046c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80046c8:	4a02      	ldr	r2, [pc, #8]	; (80046d4 <z_arm_fault_init+0xc>)
 80046ca:	6953      	ldr	r3, [r2, #20]
 80046cc:	f043 0310 	orr.w	r3, r3, #16
 80046d0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80046d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80046dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80046e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80046e2:	4672      	mov	r2, lr
	bl z_arm_fault
 80046e4:	f7ff ff86 	bl	80045f4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80046e8:	bd01      	pop	{r0, pc}
 80046ea:	bf00      	nop

080046ec <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80046ec:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80046ee:	e006      	b.n	80046fe <z_arm_interrupt_init+0x12>
 80046f0:	f002 010f 	and.w	r1, r2, #15
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <z_arm_interrupt_init+0x30>)
 80046f6:	440b      	add	r3, r1
 80046f8:	2110      	movs	r1, #16
 80046fa:	7619      	strb	r1, [r3, #24]
 80046fc:	3201      	adds	r2, #1
 80046fe:	2a54      	cmp	r2, #84	; 0x54
 8004700:	dc0a      	bgt.n	8004718 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 8004702:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004704:	2b00      	cmp	r3, #0
 8004706:	dbf3      	blt.n	80046f0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004708:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800470c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004710:	2110      	movs	r1, #16
 8004712:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 8004716:	e7f1      	b.n	80046fc <z_arm_interrupt_init+0x10>
	}
}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000ecfc 	.word	0xe000ecfc

08004720 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8004720:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8004722:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8004726:	4808      	ldr	r0, [pc, #32]	; (8004748 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8004728:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 800472c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 800472e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8004732:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8004736:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8004738:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800473a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 800473e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8004742:	f7ff fb17 	bl	8003d74 <z_arm_prep_c>
 8004746:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8004748:	20002fe0 	.word	0x20002fe0

0800474c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800474c:	b508      	push	{r3, lr}
	if (_current == thread) {
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <z_impl_k_thread_abort+0x24>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	4283      	cmp	r3, r0
 8004754:	d002      	beq.n	800475c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8004756:	f004 fd6d 	bl	8009234 <z_thread_abort>
}
 800475a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800475c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f8      	beq.n	8004756 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <z_impl_k_thread_abort+0x28>)
 8004766:	6853      	ldr	r3, [r2, #4]
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6053      	str	r3, [r2, #4]
 800476e:	e7f2      	b.n	8004756 <z_impl_k_thread_abort+0xa>
 8004770:	20000e74 	.word	0x20000e74
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8004778:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <z_arm_configure_static_mpu_regions+0x10>)
 800477c:	4a03      	ldr	r2, [pc, #12]	; (800478c <z_arm_configure_static_mpu_regions+0x14>)
 800477e:	2101      	movs	r1, #1
 8004780:	4803      	ldr	r0, [pc, #12]	; (8004790 <z_arm_configure_static_mpu_regions+0x18>)
 8004782:	f007 fb8d 	bl	800bea0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8004786:	bd08      	pop	{r3, pc}
 8004788:	20028000 	.word	0x20028000
 800478c:	20000000 	.word	0x20000000
 8004790:	0800ea2c 	.word	0x0800ea2c

08004794 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8004794:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004796:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8004798:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 800479a:	4805      	ldr	r0, [pc, #20]	; (80047b0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800479c:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 800479e:	2320      	movs	r3, #32
 80047a0:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <z_arm_configure_dynamic_mpu_regions+0x20>)
 80047a4:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 80047a6:	2101      	movs	r1, #1
 80047a8:	f007 fb7e 	bl	800bea8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 80047ac:	bd08      	pop	{r3, pc}
 80047ae:	bf00      	nop
 80047b0:	200009f0 	.word	0x200009f0
 80047b4:	150b0000 	.word	0x150b0000

080047b8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <region_init+0x24>)
 80047ba:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80047be:	680b      	ldr	r3, [r1, #0]
 80047c0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80047c4:	4303      	orrs	r3, r0
 80047c6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80047ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80047ce:	688b      	ldr	r3, [r1, #8]
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00

080047e0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 80047e4:	2807      	cmp	r0, #7
 80047e6:	d803      	bhi.n	80047f0 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 80047e8:	f7ff ffe6 	bl	80047b8 <region_init>

	return index;
 80047ec:	4620      	mov	r0, r4
}
 80047ee:	bd10      	pop	{r4, pc}
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <region_allocate_and_init+0x38>)
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <region_allocate_and_init+0x3c>)
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	2101      	movs	r1, #1
 80047fe:	f361 0202 	bfi	r2, r1, #0, #3
 8004802:	f36f 02c5 	bfc	r2, #3, #3
 8004806:	f363 128f 	bfi	r2, r3, #6, #10
 800480a:	4601      	mov	r1, r0
 800480c:	4804      	ldr	r0, [pc, #16]	; (8004820 <region_allocate_and_init+0x40>)
 800480e:	f7fe fe79 	bl	8003504 <log_1>
		return -EINVAL;
 8004812:	f06f 0015 	mvn.w	r0, #21
 8004816:	e7ea      	b.n	80047ee <region_allocate_and_init+0xe>
 8004818:	0800e018 	.word	0x0800e018
 800481c:	0800e008 	.word	0x0800e008
 8004820:	0800ea38 	.word	0x0800ea38

08004824 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	4680      	mov	r8, r0
 800482a:	460f      	mov	r7, r1
 800482c:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
 800482e:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 8004830:	2400      	movs	r4, #0
 8004832:	e009      	b.n	8004848 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004834:	4629      	mov	r1, r5
 8004836:	b2f0      	uxtb	r0, r6
 8004838:	f007 fb13 	bl	800be62 <mpu_configure_region>
 800483c:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 800483e:	f110 0f16 	cmn.w	r0, #22
 8004842:	d025      	beq.n	8004890 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 8004844:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8004846:	3401      	adds	r4, #1
 8004848:	42bc      	cmp	r4, r7
 800484a:	da21      	bge.n	8004890 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
 800484c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004850:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004854:	686a      	ldr	r2, [r5, #4]
 8004856:	2a00      	cmp	r2, #0
 8004858:	d0f5      	beq.n	8004846 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
 800485a:	f1ba 0f00 	cmp.w	sl, #0
 800485e:	d0e9      	beq.n	8004834 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
 8004860:	4628      	mov	r0, r5
 8004862:	f007 faed 	bl	800be40 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8004866:	2800      	cmp	r0, #0
 8004868:	d1e4      	bne.n	8004834 <mpu_configure_regions+0x10>
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <mpu_configure_regions+0x74>)
 800486c:	4a0b      	ldr	r2, [pc, #44]	; (800489c <mpu_configure_regions+0x78>)
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	2101      	movs	r1, #1
 8004878:	f361 0202 	bfi	r2, r1, #0, #3
 800487c:	f36f 02c5 	bfc	r2, #3, #3
 8004880:	f363 128f 	bfi	r2, r3, #6, #10
 8004884:	4621      	mov	r1, r4
 8004886:	4806      	ldr	r0, [pc, #24]	; (80048a0 <mpu_configure_regions+0x7c>)
 8004888:	f7fe fe3c 	bl	8003504 <log_1>
			return -EINVAL;
 800488c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 8004890:	4630      	mov	r0, r6
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004896:	bf00      	nop
 8004898:	0800e018 	.word	0x0800e018
 800489c:	0800e008 	.word	0x0800e008
 80048a0:	0800ea60 	.word	0x0800ea60

080048a4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 80048a4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 80048a6:	4c03      	ldr	r4, [pc, #12]	; (80048b4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80048a8:	2301      	movs	r3, #1
 80048aa:	7822      	ldrb	r2, [r4, #0]
 80048ac:	f7ff ffba 	bl	8004824 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80048b0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	20000ed3 	.word	0x20000ed3

080048b8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80048b8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80048ba:	2300      	movs	r3, #0
 80048bc:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <mpu_configure_dynamic_mpu_regions+0x2c>)
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	f7ff ffb0 	bl	8004824 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80048c4:	f110 0f16 	cmn.w	r0, #22
 80048c8:	d00a      	beq.n	80048e0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80048ca:	4603      	mov	r3, r0
 80048cc:	e006      	b.n	80048dc <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80048ce:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <mpu_configure_dynamic_mpu_regions+0x30>)
 80048d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
 80048d4:	2100      	movs	r1, #0
 80048d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80048da:	3301      	adds	r3, #1
 80048dc:	2b07      	cmp	r3, #7
 80048de:	ddf6      	ble.n	80048ce <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 80048e0:	bd08      	pop	{r3, pc}
 80048e2:	bf00      	nop
 80048e4:	20000ed3 	.word	0x20000ed3
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <arm_core_mpu_enable+0x14>)
 80048ee:	2205      	movs	r2, #5
 80048f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
 80048f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048f8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004904:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <arm_core_mpu_disable+0x10>)
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8004918:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <z_arm_mpu_init+0x3c>)
 800491c:	681d      	ldr	r5, [r3, #0]
 800491e:	2d08      	cmp	r5, #8
 8004920:	d815      	bhi.n	800494e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8004922:	f7ff ffef 	bl	8004904 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004926:	2400      	movs	r4, #0
 8004928:	e009      	b.n	800493e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <z_arm_mpu_init+0x3c>)
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004932:	0093      	lsls	r3, r2, #2
 8004934:	4419      	add	r1, r3
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff ff3e 	bl	80047b8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800493c:	3401      	adds	r4, #1
 800493e:	42a5      	cmp	r5, r4
 8004940:	d8f3      	bhi.n	800492a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <z_arm_mpu_init+0x40>)
 8004944:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8004946:	f7ff ffd1 	bl	80048ec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800494a:	2000      	movs	r0, #0
}
 800494c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800494e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004952:	e7fb      	b.n	800494c <z_arm_mpu_init+0x34>
 8004954:	0800ea9c 	.word	0x0800ea9c
 8004958:	20000ed3 	.word	0x20000ed3

0800495c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800495c:	4b01      	ldr	r3, [pc, #4]	; (8004964 <__stdout_hook_install+0x8>)
 800495e:	6018      	str	r0, [r3, #0]
}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000000c 	.word	0x2000000c

08004968 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4606      	mov	r6, r0
 800496c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
 800496e:	2400      	movs	r4, #0
 8004970:	e000      	b.n	8004974 <z_impl_zephyr_read_stdin+0xc>
 8004972:	3401      	adds	r4, #1
 8004974:	42ac      	cmp	r4, r5
 8004976:	da08      	bge.n	800498a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <z_impl_zephyr_read_stdin+0x28>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4798      	blx	r3
 800497e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 8004980:	280a      	cmp	r0, #10
 8004982:	d001      	beq.n	8004988 <z_impl_zephyr_read_stdin+0x20>
 8004984:	280d      	cmp	r0, #13
 8004986:	d1f4      	bne.n	8004972 <z_impl_zephyr_read_stdin+0xa>
			i++;
 8004988:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
 800498a:	4620      	mov	r0, r4
 800498c:	bd70      	pop	{r4, r5, r6, pc}
 800498e:	bf00      	nop
 8004990:	20000008 	.word	0x20000008

08004994 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	4605      	mov	r5, r0
 8004998:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800499a:	2400      	movs	r4, #0
 800499c:	e004      	b.n	80049a8 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <z_impl_zephyr_write_stdout+0x30>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	7830      	ldrb	r0, [r6, #0]
 80049a4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 80049a6:	3401      	adds	r4, #1
 80049a8:	42bc      	cmp	r4, r7
 80049aa:	da08      	bge.n	80049be <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 80049ac:	192e      	adds	r6, r5, r4
 80049ae:	5d2b      	ldrb	r3, [r5, r4]
 80049b0:	2b0a      	cmp	r3, #10
 80049b2:	d1f4      	bne.n	800499e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <z_impl_zephyr_write_stdout+0x30>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	200d      	movs	r0, #13
 80049ba:	4798      	blx	r3
 80049bc:	e7ef      	b.n	800499e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 80049be:	4638      	mov	r0, r7
 80049c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	2000000c 	.word	0x2000000c

080049c8 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80049c8:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 80049ca:	2205      	movs	r2, #5
 80049cc:	4902      	ldr	r1, [pc, #8]	; (80049d8 <_exit+0x10>)
 80049ce:	2001      	movs	r0, #1
 80049d0:	f007 fa7b 	bl	800beca <_write>
	while (1) {
 80049d4:	e7fe      	b.n	80049d4 <_exit+0xc>
 80049d6:	bf00      	nop
 80049d8:	0800ea84 	.word	0x0800ea84

080049dc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80049dc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <_sbrk+0x24>)
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <_sbrk+0x28>)
 80049e4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80049e6:	440a      	add	r2, r1
 80049e8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80049ec:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d202      	bcs.n	80049fa <_sbrk+0x1e>
		heap_sz += count;
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <_sbrk+0x24>)
 80049f6:	601a      	str	r2, [r3, #0]
		ret = ptr;
 80049f8:	4770      	bx	lr
	} else {
		ret = (void *)-1;
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 80049fe:	4770      	bx	lr
 8004a00:	200009fc 	.word	0x200009fc
 8004a04:	20004192 	.word	0x20004192

08004a08 <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	460d      	mov	r5, r1
	struct stm32_exti_data *data = dev->data;
 8004a0e:	6916      	ldr	r6, [r2, #16]
	int line;

	/* see which bits are set */
	for (line = min; line < max; line++) {
 8004a10:	e002      	b.n	8004a18 <__stm32_exti_isr+0x10>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004a12:	2201      	movs	r2, #1
 8004a14:	e00c      	b.n	8004a30 <__stm32_exti_isr+0x28>
 8004a16:	3401      	adds	r4, #1
 8004a18:	42ac      	cmp	r4, r5
 8004a1a:	da17      	bge.n	8004a4c <__stm32_exti_isr+0x44>
	if (line < 32) {
 8004a1c:	2c1f      	cmp	r4, #31
 8004a1e:	dcfa      	bgt.n	8004a16 <__stm32_exti_isr+0xe>
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004a20:	2301      	movs	r3, #1
 8004a22:	40a3      	lsls	r3, r4
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <__stm32_exti_isr+0x48>)
 8004a26:	6952      	ldr	r2, [r2, #20]
 8004a28:	ea33 0202 	bics.w	r2, r3, r2
 8004a2c:	d0f1      	beq.n	8004a12 <__stm32_exti_isr+0xa>
 8004a2e:	2200      	movs	r2, #0
		/* check if interrupt is pending */
		if (stm32_exti_is_pending(line)) {
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d0f0      	beq.n	8004a16 <__stm32_exti_isr+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004a34:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <__stm32_exti_isr+0x48>)
 8004a36:	6153      	str	r3, [r2, #20]
			/* clear pending interrupt */
			stm32_exti_clear_pending(line);

			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
 8004a38:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ea      	beq.n	8004a16 <__stm32_exti_isr+0xe>
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004a40:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8004a44:	6851      	ldr	r1, [r2, #4]
 8004a46:	4620      	mov	r0, r4
 8004a48:	4798      	blx	r3
 8004a4a:	e7e4      	b.n	8004a16 <__stm32_exti_isr+0xe>
		}
	}
}
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	bf00      	nop
 8004a50:	40010400 	.word	0x40010400

08004a54 <stm32_exti_enable>:
{
 8004a54:	b508      	push	{r3, lr}
	LL_EXTI_EnableIT_0_31(1 << line);
 8004a56:	2301      	movs	r3, #1
 8004a58:	4083      	lsls	r3, r0
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <stm32_exti_enable+0x18>)
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8004a62:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <stm32_exti_enable+0x1c>)
 8004a64:	5618      	ldrsb	r0, [r3, r0]
 8004a66:	f7ff f95d 	bl	8003d24 <arch_irq_enable>
}
 8004a6a:	bd08      	pop	{r3, pc}
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	0800eadc 	.word	0x0800eadc

08004a74 <stm32_exti_disable>:
	if (line < 32) {
 8004a74:	281f      	cmp	r0, #31
 8004a76:	dc06      	bgt.n	8004a86 <stm32_exti_disable+0x12>
		LL_EXTI_DisableIT_0_31(1 << line);
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4083      	lsls	r3, r0
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004a7c:	4a02      	ldr	r2, [pc, #8]	; (8004a88 <stm32_exti_disable+0x14>)
 8004a7e:	6810      	ldr	r0, [r2, #0]
 8004a80:	ea20 0003 	bic.w	r0, r0, r3
 8004a84:	6010      	str	r0, [r2, #0]
}
 8004a86:	4770      	bx	lr
 8004a88:	40010400 	.word	0x40010400

08004a8c <stm32_exti_trigger>:
	switch (trigger) {
 8004a8c:	2903      	cmp	r1, #3
 8004a8e:	d832      	bhi.n	8004af6 <stm32_exti_trigger+0x6a>
 8004a90:	e8df f001 	tbb	[pc, r1]
 8004a94:	271b0f02 	.word	0x271b0f02
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8004a98:	2301      	movs	r3, #1
 8004a9a:	fa03 f000 	lsl.w	r0, r3, r0
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <stm32_exti_trigger+0x6c>)
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	ea22 0200 	bic.w	r2, r2, r0
 8004aa6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	ea22 0000 	bic.w	r0, r2, r0
 8004aae:	60d8      	str	r0, [r3, #12]
}
 8004ab0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <stm32_exti_trigger+0x6c>)
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4302      	orrs	r2, r0
 8004abe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	ea22 0000 	bic.w	r0, r2, r0
 8004ac6:	60d8      	str	r0, [r3, #12]
}
 8004ac8:	4770      	bx	lr
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8004aca:	2301      	movs	r3, #1
 8004acc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <stm32_exti_trigger+0x6c>)
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	4302      	orrs	r2, r0
 8004ad6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	ea22 0000 	bic.w	r0, r2, r0
 8004ade:	6098      	str	r0, [r3, #8]
}
 8004ae0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <stm32_exti_trigger+0x6c>)
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	4302      	orrs	r2, r0
 8004aee:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4310      	orrs	r0, r2
 8004af4:	60d8      	str	r0, [r3, #12]
}
 8004af6:	4770      	bx	lr
 8004af8:	40010400 	.word	0x40010400

08004afc <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <stm32_exti_set_callback+0x20>)
 8004afe:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004b02:	b93b      	cbnz	r3, 8004b14 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <stm32_exti_set_callback+0x20>)
 8004b06:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	data->cb[line].data = arg;
 8004b0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004b0e:	6042      	str	r2, [r0, #4]

	return 0;
 8004b10:	2000      	movs	r0, #0
 8004b12:	4770      	bx	lr
		return -EBUSY;
 8004b14:	f06f 000f 	mvn.w	r0, #15
}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000a00 	.word	0x20000a00

08004b20 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_DT_GET(EXTI_NODE);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <stm32_exti_unset_callback+0x10>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8004b28:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004b2c:	605a      	str	r2, [r3, #4]
}
 8004b2e:	4770      	bx	lr
 8004b30:	20000a00 	.word	0x20000a00

08004b34 <stm32_clock_control_on>:
	return clock / prescaler;
}

static inline int stm32_clock_control_on(const struct device *dev,
					 clock_control_subsys_t sub_system)
{
 8004b34:	b086      	sub	sp, #24
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d848      	bhi.n	8004bce <stm32_clock_control_on+0x9a>
 8004b3c:	e8df f003 	tbb	[pc, r3]
 8004b40:	3c261004 	.word	0x3c261004
 8004b44:	4731      	.short	0x4731
 8004b46:	1b          	.byte	0x1b
 8004b47:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8004b48:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004b4a:	4a22      	ldr	r2, [pc, #136]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004b4c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004b4e:	4319      	orrs	r1, r3
 8004b50:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004b52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b54:	4013      	ands	r3, r2
 8004b56:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004b58:	9b00      	ldr	r3, [sp, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004b5a:	2000      	movs	r0, #0
}
 8004b5c:	b006      	add	sp, #24
 8004b5e:	4770      	bx	lr
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8004b60:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004b62:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004b64:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004b66:	4319      	orrs	r1, r3
 8004b68:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004b6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004b70:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004b72:	2000      	movs	r0, #0
}
 8004b74:	e7f2      	b.n	8004b5c <stm32_clock_control_on+0x28>
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004b76:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004b7a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004b7c:	4319      	orrs	r1, r3
 8004b7e:	6511      	str	r1, [r2, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b82:	4013      	ands	r3, r2
 8004b84:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004b86:	9b02      	ldr	r3, [sp, #8]
	return 0;
 8004b88:	2000      	movs	r0, #0
}
 8004b8a:	e7e7      	b.n	8004b5c <stm32_clock_control_on+0x28>
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004b8c:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004b8e:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004b90:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8004b92:	4319      	orrs	r1, r3
 8004b94:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004b96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b98:	4013      	ands	r3, r2
 8004b9a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004b9c:	9b03      	ldr	r3, [sp, #12]
	return 0;
 8004b9e:	2000      	movs	r0, #0
}
 8004ba0:	e7dc      	b.n	8004b5c <stm32_clock_control_on+0x28>
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8004ba2:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8004ba4:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004ba6:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004ba8:	4319      	orrs	r1, r3
 8004baa:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8004bac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bae:	4013      	ands	r3, r2
 8004bb0:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8004bb2:	9b04      	ldr	r3, [sp, #16]
	return 0;
 8004bb4:	2000      	movs	r0, #0
}
 8004bb6:	e7d1      	b.n	8004b5c <stm32_clock_control_on+0x28>
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004bb8:	684b      	ldr	r3, [r1, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004bba:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <stm32_clock_control_on+0xa0>)
 8004bbc:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004bbe:	4319      	orrs	r1, r3
 8004bc0:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004bc2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8004bc8:	9b05      	ldr	r3, [sp, #20]
	return 0;
 8004bca:	2000      	movs	r0, #0
}
 8004bcc:	e7c6      	b.n	8004b5c <stm32_clock_control_on+0x28>
	switch (pclken->bus) {
 8004bce:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004bd2:	e7c3      	b.n	8004b5c <stm32_clock_control_on+0x28>
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004bd8:	680b      	ldr	r3, [r1, #0]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d83a      	bhi.n	8004c54 <stm32_clock_control_off+0x7c>
 8004bde:	e8df f003 	tbb	[pc, r3]
 8004be2:	0c04      	.short	0x0c04
 8004be4:	39293121 	.word	0x39293121
 8004be8:	14          	.byte	0x14
 8004be9:	00          	.byte	0x00
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_DisableClock(pclken->enr);
 8004bea:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8004bec:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004bee:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004bf0:	ea23 0301 	bic.w	r3, r3, r1
 8004bf4:	6493      	str	r3, [r2, #72]	; 0x48
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004bf6:	2000      	movs	r0, #0
}
 8004bf8:	4770      	bx	lr
		LL_AHB2_GRP1_DisableClock(pclken->enr);
 8004bfa:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004bfc:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004bfe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c00:	ea23 0301 	bic.w	r3, r3, r1
 8004c04:	64d3      	str	r3, [r2, #76]	; 0x4c
	return 0;
 8004c06:	2000      	movs	r0, #0
}
 8004c08:	4770      	bx	lr
{
 8004c0a:	b082      	sub	sp, #8
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8004c0c:	684b      	ldr	r3, [r1, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004c10:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8004c12:	4319      	orrs	r1, r3
 8004c14:	6511      	str	r1, [r2, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004c16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c18:	4013      	ands	r3, r2
 8004c1a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004c1c:	9b01      	ldr	r3, [sp, #4]
	return 0;
 8004c1e:	2000      	movs	r0, #0
}
 8004c20:	b002      	add	sp, #8
 8004c22:	4770      	bx	lr
		LL_APB1_GRP1_DisableClock(pclken->enr);
 8004c24:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8004c26:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004c28:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c2a:	ea23 0301 	bic.w	r3, r3, r1
 8004c2e:	6593      	str	r3, [r2, #88]	; 0x58
	return 0;
 8004c30:	2000      	movs	r0, #0
}
 8004c32:	4770      	bx	lr
		LL_APB1_GRP2_DisableClock(pclken->enr);
 8004c34:	6849      	ldr	r1, [r1, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004c38:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004c3a:	ea23 0301 	bic.w	r3, r3, r1
 8004c3e:	65d3      	str	r3, [r2, #92]	; 0x5c
	return 0;
 8004c40:	2000      	movs	r0, #0
}
 8004c42:	4770      	bx	lr
		LL_APB2_GRP1_DisableClock(pclken->enr);
 8004c44:	6849      	ldr	r1, [r1, #4]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8004c46:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <stm32_clock_control_off+0x84>)
 8004c48:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004c4a:	ea23 0301 	bic.w	r3, r3, r1
 8004c4e:	6613      	str	r3, [r2, #96]	; 0x60
	return 0;
 8004c50:	2000      	movs	r0, #0
}
 8004c52:	4770      	bx	lr
	switch (pclken->bus) {
 8004c54:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000

08004c60 <stm32_clock_control_get_subsys_rate>:


static int stm32_clock_control_get_subsys_rate(const struct device *clock,
						clock_control_subsys_t sub_system,
						uint32_t *rate)
{
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460c      	mov	r4, r1
 8004c64:	4615      	mov	r5, r2
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <stm32_clock_control_get_subsys_rate+0x3c>)
 8004c68:	681e      	ldr	r6, [r3, #0]
	uint32_t apb1_clock = get_bus_clock(ahb_clock, STM32_APB1_PRESCALER);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f007 f9ba 	bl	800bfe6 <get_bus_clock>
					    STM32_AHB3_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d80e      	bhi.n	8004c96 <stm32_clock_control_get_subsys_rate+0x36>
 8004c78:	e8df f003 	tbb	[pc, r3]
 8004c7c:	0a070404 	.word	0x0a070404
 8004c80:	0d07      	.short	0x0d07
 8004c82:	04          	.byte	0x04
 8004c83:	00          	.byte	0x00
#endif
#if defined (CONFIG_SOC_SERIES_STM32L0X) || \
	defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_IOP:
#endif
		*rate = ahb_clock;
 8004c84:	602e      	str	r6, [r5, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 8004c86:	2000      	movs	r0, #0
}
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
		*rate = apb1_clock;
 8004c8a:	6028      	str	r0, [r5, #0]
	return 0;
 8004c8c:	2000      	movs	r0, #0
		break;
 8004c8e:	e7fb      	b.n	8004c88 <stm32_clock_control_get_subsys_rate+0x28>
		*rate = apb2_clock;
 8004c90:	6028      	str	r0, [r5, #0]
	return 0;
 8004c92:	2000      	movs	r0, #0
		break;
 8004c94:	e7f8      	b.n	8004c88 <stm32_clock_control_get_subsys_rate+0x28>
	switch (pclken->bus) {
 8004c96:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004c9a:	e7f5      	b.n	8004c88 <stm32_clock_control_get_subsys_rate+0x28>
 8004c9c:	200000b0 	.word	0x200000b0

08004ca0 <stm32_clock_switch_to_hsi>:
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <stm32_clock_switch_to_hsi+0x44>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004ca8:	d109      	bne.n	8004cbe <stm32_clock_switch_to_hsi+0x1e>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004caa:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <stm32_clock_switch_to_hsi+0x44>)
 8004cac:	6813      	ldr	r3, [r2, #0]
 8004cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb2:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <stm32_clock_switch_to_hsi+0x44>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004cbc:	d0fa      	beq.n	8004cb4 <stm32_clock_switch_to_hsi+0x14>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <stm32_clock_switch_to_hsi+0x44>)
 8004cc0:	6893      	ldr	r3, [r2, #8]
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6093      	str	r3, [r2, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004ccc:	6893      	ldr	r3, [r2, #8]
 8004cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd2:	4318      	orrs	r0, r3
 8004cd4:	6090      	str	r0, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cd6:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <stm32_clock_switch_to_hsi+0x44>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
	}

	/* Set HSI as SYSCLCK source */
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
	LL_RCC_SetAHBPrescaler(new_ahb_prescaler);
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d1f9      	bne.n	8004cd6 <stm32_clock_switch_to_hsi+0x36>
	}
}
 8004ce2:	4770      	bx	lr
 8004ce4:	40021000 	.word	0x40021000

08004ce8 <stm32_clock_control_init>:
 * @param dev clock device struct
 *
 * @return 0
 */
int stm32_clock_control_init(const struct device *dev)
{
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	b086      	sub	sp, #24
#endif

	ARG_UNUSED(dev);

	/* configure clock for AHB/APB buses */
	config_bus_clk_init((LL_UTILS_ClkInitTypeDef *)&s_ClkInitStruct);
 8004cec:	a803      	add	r0, sp, #12
 8004cee:	f007 f975 	bl	800bfdc <config_bus_clk_init>
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
	flash_prescaler = hclk_prescaler;
#endif

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8004cf2:	f000 f823 	bl	8004d3c <config_enable_default_clocks>

#if STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8004cf6:	4668      	mov	r0, sp
 8004cf8:	f007 f978 	bl	800bfec <config_pll_init>
	 *
	 * Don't use s_ClkInitStruct.AHBCLKDivider as the AHB
	 * prescaler here. In this configuration, that's the value to
	 * use when the SYSCLK source is the PLL, not HSI.
	 */
	stm32_clock_switch_to_hsi(LL_RCC_SYSCLK_DIV_1);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7ff ffcf 	bl	8004ca0 <stm32_clock_switch_to_hsi>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d02:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <stm32_clock_control_init+0x50>)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#if STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8004d0c:	68e3      	ldr	r3, [r4, #12]
 8004d0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d16:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8004d18:	a903      	add	r1, sp, #12
 8004d1a:	4668      	mov	r0, sp
 8004d1c:	f003 f88c 	bl	8007e38 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	6023      	str	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8004d30:	2000      	movs	r0, #0
 8004d32:	b006      	add	sp, #24
 8004d34:	bd10      	pop	{r4, pc}
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000

08004d3c <config_enable_default_clocks>:

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8004d3c:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <config_enable_default_clocks+0x1c>)
 8004d40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d46:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004d50:	9b01      	ldr	r3, [sp, #4]
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8004d52:	b002      	add	sp, #8
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000

08004d5c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8004d60:	280a      	cmp	r0, #10
 8004d62:	d007      	beq.n	8004d74 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <console_out+0x28>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
 8004d6a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4798      	blx	r3

	return c;
}
 8004d70:	4620      	mov	r0, r4
 8004d72:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <console_out+0x28>)
 8004d76:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
 8004d78:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	210d      	movs	r1, #13
 8004d7e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
 8004d80:	e7f0      	b.n	8004d64 <console_out+0x8>
 8004d82:	bf00      	nop
 8004d84:	20000a80 	.word	0x20000a80

08004d88 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
 8004d88:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8004d8a:	4c04      	ldr	r4, [pc, #16]	; (8004d9c <uart_console_hook_install+0x14>)
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fde5 	bl	800495c <__stdout_hook_install>
	__printk_hook_install(console_out);
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fd fb82 	bl	800249c <__printk_hook_install>
}
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004d5d 	.word	0x08004d5d

08004da0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8004da0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
 8004da2:	4809      	ldr	r0, [pc, #36]	; (8004dc8 <uart_console_init+0x28>)
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <uart_console_init+0x2c>)
 8004da6:	6018      	str	r0, [r3, #0]
 8004da8:	f007 ff8e 	bl	800ccc8 <z_device_ready>
 8004dac:	b128      	cbz	r0, 8004dba <uart_console_init+0x1a>
 8004dae:	2300      	movs	r3, #0
	if (!device_is_ready(uart_console_dev)) {
 8004db0:	b933      	cbnz	r3, 8004dc0 <uart_console_init+0x20>
		return -ENODEV;
	}

	uart_console_hook_install();
 8004db2:	f7ff ffe9 	bl	8004d88 <uart_console_hook_install>

	return 0;
 8004db6:	2000      	movs	r0, #0
}
 8004db8:	bd08      	pop	{r3, pc}
 8004dba:	f06f 0312 	mvn.w	r3, #18
 8004dbe:	e7f7      	b.n	8004db0 <uart_console_init+0x10>
		return -ENODEV;
 8004dc0:	f06f 0012 	mvn.w	r0, #18
 8004dc4:	e7f8      	b.n	8004db8 <uart_console_init+0x18>
 8004dc6:	bf00      	nop
 8004dc8:	0800dcf8 	.word	0x0800dcf8
 8004dcc:	20000a80 	.word	0x20000a80

08004dd0 <gpio_stm32_set_exti_source>:
#elif defined(CONFIG_SOC_SERIES_STM32G0X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X)
	return ((pin & 0x3) << (16 + 3)) | (pin >> 2);
#else
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004dd0:	424a      	negs	r2, r1
 8004dd2:	f001 0303 	and.w	r3, r1, #3
 8004dd6:	f002 0203 	and.w	r2, r2, #3
 8004dda:	bf58      	it	pl
 8004ddc:	4253      	negpl	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	230f      	movs	r3, #15
 8004de4:	4093      	lsls	r3, r2
 8004de6:	460a      	mov	r2, r1
 8004de8:	2900      	cmp	r1, #0
 8004dea:	db19      	blt.n	8004e20 <gpio_stm32_set_exti_source+0x50>
 8004dec:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8004df0:	fa5f fc83 	uxtb.w	ip, r3
 8004df4:	f10c 0102 	add.w	r1, ip, #2
 8004df8:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <gpio_stm32_set_exti_source+0x58>)
 8004dfa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004dfe:	0c1a      	lsrs	r2, r3, #16
 8004e00:	ea21 4313 	bic.w	r3, r1, r3, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004e08:	b162      	cbz	r2, 8004e24 <gpio_stm32_set_exti_source+0x54>
  return __builtin_clz(value);
 8004e0a:	fab2 f282 	clz	r2, r2
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	431a      	orrs	r2, r3
 8004e14:	f10c 0c02 	add.w	ip, ip, #2
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <gpio_stm32_set_exti_source+0x58>)
 8004e1a:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
	LL_EXTI_SetEXTISource(port, line);
#else
	LL_SYSCFG_SetEXTISource(port, line);
#endif
	z_stm32_hsem_unlock(CFG_HW_EXTI_SEMID);
}
 8004e1e:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004e20:	1cca      	adds	r2, r1, #3
 8004e22:	e7e3      	b.n	8004dec <gpio_stm32_set_exti_source+0x1c>
    return 32U;
 8004e24:	2220      	movs	r2, #32
 8004e26:	e7f2      	b.n	8004e0e <gpio_stm32_set_exti_source+0x3e>
 8004e28:	40010000 	.word	0x40010000

08004e2c <gpio_stm32_get_exti_source>:
 8004e2c:	4242      	negs	r2, r0
 8004e2e:	f000 0303 	and.w	r3, r0, #3
 8004e32:	f002 0203 	and.w	r2, r2, #3
 8004e36:	bf58      	it	pl
 8004e38:	4253      	negpl	r3, r2
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	009a      	lsls	r2, r3, #2
 8004e3e:	230f      	movs	r3, #15
 8004e40:	4093      	lsls	r3, r2
 8004e42:	4602      	mov	r2, r0
 8004e44:	2800      	cmp	r0, #0
 8004e46:	db10      	blt.n	8004e6a <gpio_stm32_get_exti_source+0x3e>
 8004e48:	ea43 00a2 	orr.w	r0, r3, r2, asr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 8004e4c:	b2c3      	uxtb	r3, r0
 8004e4e:	3302      	adds	r3, #2
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <gpio_stm32_get_exti_source+0x48>)
 8004e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e56:	0c03      	lsrs	r3, r0, #16
 8004e58:	ea02 4010 	and.w	r0, r2, r0, lsr #16
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8004e60:	b12b      	cbz	r3, 8004e6e <gpio_stm32_get_exti_source+0x42>
  return __builtin_clz(value);
 8004e62:	fab3 f383 	clz	r3, r3
		port = STM32_PORTH;
	}
#endif

	return port;
}
 8004e66:	40d8      	lsrs	r0, r3
 8004e68:	4770      	bx	lr
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004e6a:	1cc2      	adds	r2, r0, #3
 8004e6c:	e7ec      	b.n	8004e48 <gpio_stm32_get_exti_source+0x1c>
    return 32U;
 8004e6e:	2320      	movs	r3, #32
 8004e70:	e7f9      	b.n	8004e66 <gpio_stm32_get_exti_source+0x3a>
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000

08004e78 <gpio_stm32_enable_int>:

/**
 * @brief Enable EXTI of the specific line
 */
static int gpio_stm32_enable_int(int port, int pin)
{
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460d      	mov	r5, r1
	defined(CONFIG_SOC_SERIES_STM32H7X) || \
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	const struct device *clk = DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE);
	struct stm32_pclken pclken = {
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <gpio_stm32_enable_int+0x40>)
 8004e82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e86:	ab02      	add	r3, sp, #8
 8004e88:	e903 0003 	stmdb	r3, {r0, r1}
 8004e8c:	480b      	ldr	r0, [pc, #44]	; (8004ebc <gpio_stm32_enable_int+0x44>)
 8004e8e:	f007 ff1b 	bl	800ccc8 <z_device_ready>
 8004e92:	b148      	cbz	r0, 8004ea8 <gpio_stm32_enable_int+0x30>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004e94:	4809      	ldr	r0, [pc, #36]	; (8004ebc <gpio_stm32_enable_int+0x44>)
 8004e96:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4669      	mov	r1, sp
 8004e9c:	4798      	blx	r3
 8004e9e:	4604      	mov	r4, r0
	};
	int ret;

	/* Enable SYSCFG clock */
	ret = clock_control_on(clk, (clock_control_subsys_t *) &pclken);
	if (ret != 0) {
 8004ea0:	b12c      	cbz	r4, 8004eae <gpio_stm32_enable_int+0x36>
#endif

	gpio_stm32_set_exti_source(port, pin);

	return 0;
}
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f06f 0412 	mvn.w	r4, #18
 8004eac:	e7f8      	b.n	8004ea0 <gpio_stm32_enable_int+0x28>
	gpio_stm32_set_exti_source(port, pin);
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff ff8d 	bl	8004dd0 <gpio_stm32_set_exti_source>
	return 0;
 8004eb6:	e7f4      	b.n	8004ea2 <gpio_stm32_enable_int+0x2a>
 8004eb8:	0800e0d0 	.word	0x0800e0d0
 8004ebc:	0800dc38 	.word	0x0800dc38

08004ec0 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
 8004ec6:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8004ec8:	6902      	ldr	r2, [r0, #16]
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8004eca:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004ece:	d01f      	beq.n	8004f10 <gpio_stm32_pin_interrupt_configure+0x50>
 8004ed0:	461d      	mov	r5, r3
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8004ed2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004ed6:	d034      	beq.n	8004f42 <gpio_stm32_pin_interrupt_configure+0x82>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8004ed8:	491d      	ldr	r1, [pc, #116]	; (8004f50 <gpio_stm32_pin_interrupt_configure+0x90>)
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff fe0e 	bl	8004afc <stm32_exti_set_callback>
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	bb88      	cbnz	r0, 8004f48 <gpio_stm32_pin_interrupt_configure+0x88>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	68b8      	ldr	r0, [r7, #8]
 8004ee8:	f7ff ffc6 	bl	8004e78 <gpio_stm32_enable_int>

	switch (trig) {
 8004eec:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8004ef0:	d023      	beq.n	8004f3a <gpio_stm32_pin_interrupt_configure+0x7a>
 8004ef2:	f5b5 2fc0 	cmp.w	r5, #393216	; 0x60000
 8004ef6:	d022      	beq.n	8004f3e <gpio_stm32_pin_interrupt_configure+0x7e>
 8004ef8:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
 8004efc:	d01b      	beq.n	8004f36 <gpio_stm32_pin_interrupt_configure+0x76>
 8004efe:	4631      	mov	r1, r6
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8004f00:	4620      	mov	r0, r4
 8004f02:	f7ff fdc3 	bl	8004a8c <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fda4 	bl	8004a54 <stm32_exti_enable>

exit:
	return err;
}
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7ff ff8b 	bl	8004e2c <gpio_stm32_get_exti_source>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	d001      	beq.n	8004f20 <gpio_stm32_pin_interrupt_configure+0x60>
	int err = 0;
 8004f1c:	2600      	movs	r6, #0
		goto exit;
 8004f1e:	e7f5      	b.n	8004f0c <gpio_stm32_pin_interrupt_configure+0x4c>
			stm32_exti_disable(pin);
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff fda7 	bl	8004a74 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004f26:	4620      	mov	r0, r4
 8004f28:	f7ff fdfa 	bl	8004b20 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff fdac 	bl	8004a8c <stm32_exti_trigger>
 8004f34:	e7f2      	b.n	8004f1c <gpio_stm32_pin_interrupt_configure+0x5c>
		edge = STM32_EXTI_TRIG_FALLING;
 8004f36:	2102      	movs	r1, #2
 8004f38:	e7e2      	b.n	8004f00 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_RISING;
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	e7e0      	b.n	8004f00 <gpio_stm32_pin_interrupt_configure+0x40>
		edge = STM32_EXTI_TRIG_BOTH;
 8004f3e:	2103      	movs	r1, #3
 8004f40:	e7de      	b.n	8004f00 <gpio_stm32_pin_interrupt_configure+0x40>
		err = -ENOTSUP;
 8004f42:	f06f 0685 	mvn.w	r6, #133	; 0x85
 8004f46:	e7e1      	b.n	8004f0c <gpio_stm32_pin_interrupt_configure+0x4c>
		err = -EBUSY;
 8004f48:	f06f 060f 	mvn.w	r6, #15
	return err;
 8004f4c:	e7de      	b.n	8004f0c <gpio_stm32_pin_interrupt_configure+0x4c>
 8004f4e:	bf00      	nop
 8004f50:	0800bffd 	.word	0x0800bffd

08004f54 <gpio_stm32_clock_request>:
{
 8004f54:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8004f56:	6844      	ldr	r4, [r0, #4]
	if (on) {
 8004f58:	b169      	cbz	r1, 8004f76 <gpio_stm32_clock_request+0x22>
					(clock_control_subsys_t *)&cfg->pclken);
 8004f5a:	340c      	adds	r4, #12
 8004f5c:	480d      	ldr	r0, [pc, #52]	; (8004f94 <gpio_stm32_clock_request+0x40>)
 8004f5e:	f007 feb3 	bl	800ccc8 <z_device_ready>
 8004f62:	b128      	cbz	r0, 8004f70 <gpio_stm32_clock_request+0x1c>
	const struct clock_control_driver_api *api =
 8004f64:	480b      	ldr	r0, [pc, #44]	; (8004f94 <gpio_stm32_clock_request+0x40>)
 8004f66:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4798      	blx	r3
}
 8004f6e:	bd10      	pop	{r4, pc}
 8004f70:	f06f 0012 	mvn.w	r0, #18
 8004f74:	e7fb      	b.n	8004f6e <gpio_stm32_clock_request+0x1a>
					(clock_control_subsys_t *)&cfg->pclken);
 8004f76:	340c      	adds	r4, #12
 8004f78:	4806      	ldr	r0, [pc, #24]	; (8004f94 <gpio_stm32_clock_request+0x40>)
 8004f7a:	f007 fea5 	bl	800ccc8 <z_device_ready>
 8004f7e:	b128      	cbz	r0, 8004f8c <gpio_stm32_clock_request+0x38>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004f80:	4804      	ldr	r0, [pc, #16]	; (8004f94 <gpio_stm32_clock_request+0x40>)
 8004f82:	6883      	ldr	r3, [r0, #8]
		(const struct clock_control_driver_api *)dev->api;

	return api->off(dev, sys);
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4621      	mov	r1, r4
 8004f88:	4798      	blx	r3
 8004f8a:	e7f0      	b.n	8004f6e <gpio_stm32_clock_request+0x1a>
 8004f8c:	f06f 0012 	mvn.w	r0, #18
	if (ret != 0) {
 8004f90:	e7ed      	b.n	8004f6e <gpio_stm32_clock_request+0x1a>
 8004f92:	bf00      	nop
 8004f94:	0800dc38 	.word	0x0800dc38

08004f98 <spi_stm32_configure>:
}
#endif

static int spi_stm32_configure(const struct device *dev,
			       const struct spi_config *config)
{
 8004f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9c:	b08c      	sub	sp, #48	; 0x30
 8004f9e:	460d      	mov	r5, r1
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8004fa0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8004fa4:	6906      	ldr	r6, [r0, #16]
	const uint32_t scaler[] = {
 8004fa6:	ac04      	add	r4, sp, #16
 8004fa8:	4f95      	ldr	r7, [pc, #596]	; (8005200 <spi_stm32_configure+0x268>)
 8004faa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fae:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		LL_SPI_BAUDRATEPRESCALER_DIV32,
		LL_SPI_BAUDRATEPRESCALER_DIV64,
		LL_SPI_BAUDRATEPRESCALER_DIV128,
		LL_SPI_BAUDRATEPRESCALER_DIV256
	};
	SPI_TypeDef *spi = cfg->spi;
 8004fb6:	f8d8 4008 	ldr.w	r4, [r8, #8]
	._ctx_name.sync = Z_SEM_INITIALIZER(_data._ctx_name.sync, 0, 1)

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
 8004fba:	6833      	ldr	r3, [r6, #0]
	uint32_t clock;
	int br;

	if (spi_context_configured(&data->ctx, config)) {
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	f000 8119 	beq.w	80051f4 <spi_stm32_configure+0x25c>
		/* Nothing to do */
		return 0;
	}

	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8004fc2:	88ab      	ldrh	r3, [r5, #4]
 8004fc4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d002      	beq.n	8004fd2 <spi_stm32_configure+0x3a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	f040 8113 	bne.w	80051f8 <spi_stm32_configure+0x260>
 8004fd2:	488c      	ldr	r0, [pc, #560]	; (8005204 <spi_stm32_configure+0x26c>)
 8004fd4:	f007 fe78 	bl	800ccc8 <z_device_ready>
 8004fd8:	b198      	cbz	r0, 8005002 <spi_stm32_configure+0x6a>

	if (ret != 0) {
		return ret;
	}

	const struct clock_control_driver_api *api =
 8004fda:	4b8a      	ldr	r3, [pc, #552]	; (8005204 <spi_stm32_configure+0x26c>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	b193      	cbz	r3, 8005008 <spi_stm32_configure+0x70>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
 8004fe2:	aa03      	add	r2, sp, #12
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	4887      	ldr	r0, [pc, #540]	; (8005204 <spi_stm32_configure+0x26c>)
 8004fe8:	4798      	blx	r3
		return -ENOTSUP;
	}

	if (clock_control_get_rate(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 8004fea:	2800      	cmp	r0, #0
 8004fec:	db0f      	blt.n	800500e <spi_stm32_configure+0x76>
			(clock_control_subsys_t) &cfg->pclken, &clock) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
		return -EIO;
	}

	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004fee:	2301      	movs	r3, #1
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	dc1f      	bgt.n	8005034 <spi_stm32_configure+0x9c>
		uint32_t clk = clock >> br;
 8004ff4:	9a03      	ldr	r2, [sp, #12]
 8004ff6:	40da      	lsrs	r2, r3

		if (clk <= config->frequency) {
 8004ff8:	6829      	ldr	r1, [r5, #0]
 8004ffa:	4291      	cmp	r1, r2
 8004ffc:	d21a      	bcs.n	8005034 <spi_stm32_configure+0x9c>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8004ffe:	3301      	adds	r3, #1
 8005000:	e7f6      	b.n	8004ff0 <spi_stm32_configure+0x58>
 8005002:	f06f 0012 	mvn.w	r0, #18
 8005006:	e7f0      	b.n	8004fea <spi_stm32_configure+0x52>
		return -ENOSYS;
 8005008:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800500c:	e7ed      	b.n	8004fea <spi_stm32_configure+0x52>
 800500e:	4b7e      	ldr	r3, [pc, #504]	; (8005208 <spi_stm32_configure+0x270>)
 8005010:	4a7e      	ldr	r2, [pc, #504]	; (800520c <spi_stm32_configure+0x274>)
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	2201      	movs	r2, #1
 800501c:	f362 0102 	bfi	r1, r2, #0, #3
 8005020:	f36f 01c5 	bfc	r1, #3, #3
 8005024:	f363 118f 	bfi	r1, r3, #6, #10
 8005028:	4879      	ldr	r0, [pc, #484]	; (8005210 <spi_stm32_configure+0x278>)
 800502a:	f7fe fa41 	bl	80034b0 <log_0>
		return -EIO;
 800502e:	f06f 0004 	mvn.w	r0, #4
 8005032:	e0dc      	b.n	80051ee <spi_stm32_configure+0x256>
			break;
		}
	}

	if (br > ARRAY_SIZE(scaler)) {
 8005034:	2b08      	cmp	r3, #8
 8005036:	dc75      	bgt.n	8005124 <spi_stm32_configure+0x18c>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503e:	6022      	str	r2, [r4, #0]
			    clock >> ARRAY_SIZE(scaler));
		return -EINVAL;
	}

	LL_SPI_Disable(spi);
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8005040:	3b01      	subs	r3, #1
 8005042:	aa0c      	add	r2, sp, #48	; 0x30
 8005044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005048:	f853 3c20 	ldr.w	r3, [r3, #-32]
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800504c:	6822      	ldr	r2, [r4, #0]
 800504e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8005052:	4313      	orrs	r3, r2
 8005054:	6023      	str	r3, [r4, #0]

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8005056:	88ab      	ldrh	r3, [r5, #4]
 8005058:	f013 0f02 	tst.w	r3, #2
 800505c:	d07b      	beq.n	8005156 <spi_stm32_configure+0x1be>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_HIGH);
	} else {
		LL_SPI_SetClockPolarity(spi, LL_SPI_POLARITY_LOW);
	}

	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8005066:	88ab      	ldrh	r3, [r5, #4]
 8005068:	f013 0f04 	tst.w	r3, #4
 800506c:	d078      	beq.n	8005160 <spi_stm32_configure+0x1c8>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	f423 4344 	bic.w	r3, r3, #50176	; 0xc400
 800507c:	6023      	str	r3, [r4, #0]
		LL_SPI_SetClockPhase(spi, LL_SPI_PHASE_1EDGE);
	}

	LL_SPI_SetTransferDirection(spi, LL_SPI_FULL_DUPLEX);

	if (config->operation & SPI_TRANSFER_LSB) {
 800507e:	88ab      	ldrh	r3, [r5, #4]
 8005080:	f013 0f10 	tst.w	r3, #16
 8005084:	d071      	beq.n	800516a <spi_stm32_configure+0x1d2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	6023      	str	r3, [r4, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005094:	6023      	str	r3, [r4, #0]
		LL_SPI_SetTransferBitOrder(spi, LL_SPI_MSB_FIRST);
	}

	LL_SPI_DisableCRC(spi);

	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8005096:	68ab      	ldr	r3, [r5, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d06b      	beq.n	8005174 <spi_stm32_configure+0x1dc>
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	f023 0304 	bic.w	r3, r3, #4
 80050aa:	6063      	str	r3, [r4, #4]
		} else {
			LL_SPI_SetNSSMode(spi, LL_SPI_NSS_HARD_OUTPUT);
		}
	}

	if (config->operation & SPI_OP_MODE_SLAVE) {
 80050ac:	88ab      	ldrh	r3, [r5, #4]
 80050ae:	f013 0f01 	tst.w	r3, #1
 80050b2:	d077      	beq.n	80051a4 <spi_stm32_configure+0x20c>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f423 7382 	bic.w	r3, r3, #260	; 0x104
 80050ba:	6023      	str	r3, [r4, #0]
		LL_SPI_SetMode(spi, LL_SPI_MODE_SLAVE);
	} else {
		LL_SPI_SetMode(spi, LL_SPI_MODE_MASTER);
	}

	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 80050bc:	88ab      	ldrh	r3, [r5, #4]
 80050be:	f3c3 1345 	ubfx	r3, r3, #5, #6
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d073      	beq.n	80051ae <spi_stm32_configure+0x216>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80050cc:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80050ce:	6863      	ldr	r3, [r4, #4]
 80050d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050d4:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	6063      	str	r3, [r4, #4]
	&& (!defined(CONFIG_SOC_SERIES_STM32L1X) || defined(SPI_CR2_FRF))
	LL_SPI_SetStandard(spi, LL_SPI_PROTOCOL_MOTOROLA);
#endif

	/* At this point, it's mandatory to set this on the context! */
	data->ctx.config = config;
 80050de:	6035      	str	r5, [r6, #0]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 80050e0:	68ab      	ldr	r3, [r5, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d072      	beq.n	80051cc <spi_stm32_configure+0x234>
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d06f      	beq.n	80051cc <spi_stm32_configure+0x234>
		/* Validate CS active levels are equivalent */
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80050ec:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 80050ee:	7a5b      	ldrb	r3, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 80050f0:	f443 53b0 	orr.w	r3, r3, #5632	; 0x1600
	const struct gpio_driver_api *api =
 80050f4:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
 80050f6:	6904      	ldr	r4, [r0, #16]
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 80050f8:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 80050fc:	d004      	beq.n	8005108 <spi_stm32_configure+0x170>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 80050fe:	f013 0f01 	tst.w	r3, #1
 8005102:	d001      	beq.n	8005108 <spi_stm32_configure+0x170>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005104:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 800510c:	f013 0f01 	tst.w	r3, #1
 8005110:	d054      	beq.n	80051bc <spi_stm32_configure+0x224>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005112:	2301      	movs	r3, #1
 8005114:	fa03 f601 	lsl.w	r6, r3, r1
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	4333      	orrs	r3, r6
 800511c:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	4798      	blx	r3
 8005122:	e063      	b.n	80051ec <spi_stm32_configure+0x254>
 8005124:	4b38      	ldr	r3, [pc, #224]	; (8005208 <spi_stm32_configure+0x270>)
 8005126:	4a39      	ldr	r2, [pc, #228]	; (800520c <spi_stm32_configure+0x274>)
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	2201      	movs	r2, #1
 8005132:	f362 0102 	bfi	r1, r2, #0, #3
 8005136:	f36f 01c5 	bfc	r1, #3, #3
 800513a:	f363 118f 	bfi	r1, r3, #6, #10
 800513e:	9a03      	ldr	r2, [sp, #12]
 8005140:	f8ad 1000 	strh.w	r1, [sp]
 8005144:	0a13      	lsrs	r3, r2, #8
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	6829      	ldr	r1, [r5, #0]
 800514a:	4832      	ldr	r0, [pc, #200]	; (8005214 <spi_stm32_configure+0x27c>)
 800514c:	f7fe f976 	bl	800343c <log_3>
		return -EINVAL;
 8005150:	f06f 0015 	mvn.w	r0, #21
 8005154:	e04b      	b.n	80051ee <spi_stm32_configure+0x256>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f023 0302 	bic.w	r3, r3, #2
 800515c:	6023      	str	r3, [r4, #0]
}
 800515e:	e782      	b.n	8005066 <spi_stm32_configure+0xce>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	6023      	str	r3, [r4, #0]
}
 8005168:	e785      	b.n	8005076 <spi_stm32_configure+0xde>
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005170:	6023      	str	r3, [r4, #0]
}
 8005172:	e78c      	b.n	800508e <spi_stm32_configure+0xf6>
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8005174:	88ab      	ldrh	r3, [r5, #4]
 8005176:	f013 0f01 	tst.w	r3, #1
 800517a:	d008      	beq.n	800518e <spi_stm32_configure+0x1f6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005182:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	f023 0304 	bic.w	r3, r3, #4
 800518a:	6063      	str	r3, [r4, #4]
}
 800518c:	e78e      	b.n	80050ac <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005198:	6023      	str	r3, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	6063      	str	r3, [r4, #4]
}
 80051a2:	e783      	b.n	80050ac <spi_stm32_configure+0x114>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f443 7382 	orr.w	r3, r3, #260	; 0x104
 80051aa:	6023      	str	r3, [r4, #0]
}
 80051ac:	e786      	b.n	80050bc <spi_stm32_configure+0x124>
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051b4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051b8:	6063      	str	r3, [r4, #4]
}
 80051ba:	e788      	b.n	80050ce <spi_stm32_configure+0x136>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80051bc:	2301      	movs	r3, #1
 80051be:	fa03 f601 	lsl.w	r6, r3, r1
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	ea23 0306 	bic.w	r3, r3, r6
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	e7a8      	b.n	800511e <spi_stm32_configure+0x186>
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <spi_stm32_configure+0x270>)
 80051ce:	4a0f      	ldr	r2, [pc, #60]	; (800520c <spi_stm32_configure+0x274>)
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	08db      	lsrs	r3, r3, #3
				   GPIO_OUTPUT_INACTIVE);
	} else {
		LOG_INF("CS control inhibited (no GPIO device)");
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	2203      	movs	r2, #3
 80051da:	f362 0102 	bfi	r1, r2, #0, #3
 80051de:	f36f 01c5 	bfc	r1, #3, #3
 80051e2:	f363 118f 	bfi	r1, r3, #6, #10
 80051e6:	480c      	ldr	r0, [pc, #48]	; (8005218 <spi_stm32_configure+0x280>)
 80051e8:	f7fe f962 	bl	80034b0 <log_0>
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) ? 1 : 0,
		    (SPI_MODE_GET(config->operation) & SPI_MODE_LOOP) ? 1 : 0,
		    config->slave);

	return 0;
 80051ec:	2000      	movs	r0, #0
}
 80051ee:	b00c      	add	sp, #48	; 0x30
 80051f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7fa      	b.n	80051ee <spi_stm32_configure+0x256>
		return -ENOTSUP;
 80051f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80051fc:	e7f7      	b.n	80051ee <spi_stm32_configure+0x256>
 80051fe:	bf00      	nop
 8005200:	0800e0d8 	.word	0x0800e0d8
 8005204:	0800dc38 	.word	0x0800dc38
 8005208:	0800e030 	.word	0x0800e030
 800520c:	0800e008 	.word	0x0800e008
 8005210:	0800ebc0 	.word	0x0800ebc0
 8005214:	0800ebe4 	.word	0x0800ebe4
 8005218:	0800ec14 	.word	0x0800ec14

0800521c <spi_stm32_get_err>:
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 800521c:	6882      	ldr	r2, [r0, #8]
	if (sr & SPI_STM32_ERR_MSK) {
 800521e:	f412 72b8 	ands.w	r2, r2, #368	; 0x170
 8005222:	d101      	bne.n	8005228 <spi_stm32_get_err+0xc>
	return 0;
 8005224:	2000      	movs	r0, #0
}
 8005226:	4770      	bx	lr
{
 8005228:	b510      	push	{r4, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	4604      	mov	r4, r0
 800522e:	490f      	ldr	r1, [pc, #60]	; (800526c <spi_stm32_get_err+0x50>)
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <spi_stm32_get_err+0x54>)
 8005232:	1ac9      	subs	r1, r1, r3
 8005234:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("%s: err=%d", __func__,
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	2001      	movs	r0, #1
 800523c:	f360 0302 	bfi	r3, r0, #0, #3
 8005240:	f36f 03c5 	bfc	r3, #3, #3
 8005244:	f361 138f 	bfi	r3, r1, #6, #10
 8005248:	490a      	ldr	r1, [pc, #40]	; (8005274 <spi_stm32_get_err+0x58>)
 800524a:	480b      	ldr	r0, [pc, #44]	; (8005278 <spi_stm32_get_err+0x5c>)
 800524c:	f7fe f98c 	bl	8003568 <log_2>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005256:	d005      	beq.n	8005264 <spi_stm32_get_err+0x48>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8005258:	68e3      	ldr	r3, [r4, #12]
 800525a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800525c:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8005262:	9b01      	ldr	r3, [sp, #4]
		return -EIO;
 8005264:	f06f 0004 	mvn.w	r0, #4
}
 8005268:	b002      	add	sp, #8
 800526a:	bd10      	pop	{r4, pc}
 800526c:	0800e030 	.word	0x0800e030
 8005270:	0800e008 	.word	0x0800e008
 8005274:	0800ecc4 	.word	0x0800ecc4
 8005278:	0800ec3c 	.word	0x0800ec3c

0800527c <transceive>:
static int transceive(const struct device *dev,
		      const struct spi_config *config,
		      const struct spi_buf_set *tx_bufs,
		      const struct spi_buf_set *rx_bufs,
		      bool asynchronous, struct k_poll_signal *signal)
{
 800527c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005280:	4605      	mov	r5, r0
 8005282:	460e      	mov	r6, r1
 8005284:	4698      	mov	r8, r3
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8005286:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8005288:	6904      	ldr	r4, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800528a:	689f      	ldr	r7, [r3, #8]
	int ret;

	if (!tx_bufs && !rx_bufs) {
 800528c:	4691      	mov	r9, r2
 800528e:	b1fa      	cbz	r2, 80052d0 <transceive+0x54>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8005290:	88b3      	ldrh	r3, [r6, #4]
 8005292:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005296:	d004      	beq.n	80052a2 <transceive+0x26>
	return sem->count;
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	b913      	cbnz	r3, 80052a2 <transceive+0x26>
		(ctx->owner == spi_cfg)) {
 800529c:	6863      	ldr	r3, [r4, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
 800529e:	429e      	cmp	r6, r3
 80052a0:	d008      	beq.n	80052b4 <transceive+0x38>
	k_sem_take(&ctx->lock, K_FOREVER);
 80052a2:	f104 0008 	add.w	r0, r4, #8
 80052a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ae:	f003 fa79 	bl	80087a4 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
 80052b2:	6066      	str	r6, [r4, #4]
	}
#endif

	spi_context_lock(&data->ctx, asynchronous, signal, config);

	ret = spi_stm32_configure(dev, config);
 80052b4:	4631      	mov	r1, r6
 80052b6:	4628      	mov	r0, r5
 80052b8:	f7ff fe6e 	bl	8004f98 <spi_stm32_configure>
	if (ret) {
 80052bc:	4606      	mov	r6, r0
 80052be:	b160      	cbz	r0, 80052da <transceive+0x5e>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	889b      	ldrh	r3, [r3, #4]
 80052c4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80052c8:	d07b      	beq.n	80053c2 <transceive+0x146>

end:
	spi_context_release(&data->ctx, ret);

	return ret;
}
 80052ca:	4630      	mov	r0, r6
 80052cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!tx_bufs && !rx_bufs) {
 80052d0:	f1b8 0f00 	cmp.w	r8, #0
 80052d4:	d1dc      	bne.n	8005290 <transceive+0x14>
		return 0;
 80052d6:	2600      	movs	r6, #0
 80052d8:	e7f7      	b.n	80052ca <transceive+0x4e>
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 80052da:	f1b9 0f00 	cmp.w	r9, #0
 80052de:	d01e      	beq.n	800531e <transceive+0xa2>
		ctx->current_tx = tx_bufs->buffers;
 80052e0:	f8d9 3000 	ldr.w	r3, [r9]
 80052e4:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
 80052e6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80052ea:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	6523      	str	r3, [r4, #80]	; 0x50
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 80052f4:	f1b8 0f00 	cmp.w	r8, #0
 80052f8:	d017      	beq.n	800532a <transceive+0xae>
		ctx->current_rx = rx_bufs->buffers;
 80052fa:	f8d8 3000 	ldr.w	r3, [r8]
 80052fe:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
 8005300:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005304:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	65a3      	str	r3, [r4, #88]	; 0x58
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	63a3      	str	r3, [r4, #56]	; 0x38
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f013 0f01 	tst.w	r3, #1
 8005318:	d00d      	beq.n	8005336 <transceive+0xba>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	e7f9      	b.n	8005312 <transceive+0x96>
		ctx->current_tx = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = 0;
 8005322:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_buf = NULL;
 8005324:	64e3      	str	r3, [r4, #76]	; 0x4c
		ctx->tx_len = 0;
 8005326:	6523      	str	r3, [r4, #80]	; 0x50
 8005328:	e7e4      	b.n	80052f4 <transceive+0x78>
		ctx->current_rx = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = 0;
 800532e:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_buf = NULL;
 8005330:	6563      	str	r3, [r4, #84]	; 0x54
		ctx->rx_len = 0;
 8005332:	65a3      	str	r3, [r4, #88]	; 0x58
 8005334:	e7eb      	b.n	800530e <transceive+0x92>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533c:	603b      	str	r3, [r7, #0]
	spi_stm32_cs_control(dev, true);
 800533e:	2101      	movs	r1, #1
 8005340:	4628      	mov	r0, r5
 8005342:	f007 f95d 	bl	800c600 <spi_stm32_cs_control>
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	607b      	str	r3, [r7, #4]
	if (rx_bufs) {
 800534e:	f1b8 0f00 	cmp.w	r8, #0
 8005352:	d003      	beq.n	800535c <transceive+0xe0>
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535a:	607b      	str	r3, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	607b      	str	r3, [r7, #4]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 8005364:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005366:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005368:	429a      	cmp	r2, r3
 800536a:	bf38      	it	cc
 800536c:	461a      	movcc	r2, r3
 800536e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005372:	fb03 f202 	mul.w	r2, r3, r2
		     ctx->config->frequency;
 8005376:	4620      	mov	r0, r4
 8005378:	f850 3b20 	ldr.w	r3, [r0], #32
 800537c:	681b      	ldr	r3, [r3, #0]
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
 800537e:	fbb2 f2f3 	udiv	r2, r2, r3
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
 8005382:	32c8      	adds	r2, #200	; 0xc8
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8005384:	0f91      	lsrs	r1, r2, #30
 8005386:	0093      	lsls	r3, r2, #2
 8005388:	189a      	adds	r2, r3, r2
 800538a:	f141 0300 	adc.w	r3, r1, #0
 800538e:	1892      	adds	r2, r2, r2
 8005390:	415b      	adcs	r3, r3
 8005392:	f003 fa07 	bl	80087a4 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
 8005396:	b908      	cbnz	r0, 800539c <transceive+0x120>
	status = ctx->sync_status;
 8005398:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	return status;
 800539a:	e791      	b.n	80052c0 <transceive+0x44>
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <transceive+0x154>)
 800539e:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <transceive+0x158>)
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Timeout waiting for transfer complete");
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	2201      	movs	r2, #1
 80053aa:	f362 0102 	bfi	r1, r2, #0, #3
 80053ae:	f36f 01c5 	bfc	r1, #3, #3
 80053b2:	f363 118f 	bfi	r1, r3, #6, #10
 80053b6:	4808      	ldr	r0, [pc, #32]	; (80053d8 <transceive+0x15c>)
 80053b8:	f7fe f87a 	bl	80034b0 <log_0>
		return -ETIMEDOUT;
 80053bc:	f06f 0673 	mvn.w	r6, #115	; 0x73
 80053c0:	e77e      	b.n	80052c0 <transceive+0x44>
		ctx->owner = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 80053c6:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 80053ca:	f003 f9c3 	bl	8008754 <z_impl_k_sem_give>
}
 80053ce:	e77c      	b.n	80052ca <transceive+0x4e>
 80053d0:	0800e030 	.word	0x0800e030
 80053d4:	0800e008 	.word	0x0800e008
 80053d8:	0800ec48 	.word	0x0800ec48

080053dc <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 80053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	4604      	mov	r4, r0
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 80053e2:	6907      	ldr	r7, [r0, #16]
	const struct spi_stm32_config *cfg = dev->config;
 80053e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80053e8:	4839      	ldr	r0, [pc, #228]	; (80054d0 <spi_stm32_init+0xf4>)
 80053ea:	f007 fc6d 	bl	800ccc8 <z_device_ready>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d035      	beq.n	800545e <spi_stm32_init+0x82>
	const struct clock_control_driver_api *api =
 80053f2:	4837      	ldr	r0, [pc, #220]	; (80054d0 <spi_stm32_init+0xf4>)
 80053f4:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4641      	mov	r1, r8
 80053fa:	4798      	blx	r3
 80053fc:	4605      	mov	r5, r0
	int err;

	if (clock_control_on(DEVICE_DT_GET(STM32_CLOCK_CONTROL_NODE),
 80053fe:	2d00      	cmp	r5, #0
 8005400:	d130      	bne.n	8005464 <spi_stm32_init+0x88>
		LOG_ERR("Could not enable SPI clock");
		return -EIO;
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8005402:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005406:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800540a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800540e:	f006 fca7 	bl	800bd60 <stm32_dt_pinctrl_configure>
					 cfg->pinctrl_list_size,
					 (uint32_t)cfg->spi);
	if (err < 0) {
 8005412:	1e06      	subs	r6, r0, #0
 8005414:	db39      	blt.n	800548a <spi_stm32_init+0xae>
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
		return err;
	}

#ifdef CONFIG_SPI_STM32_INTERRUPT
	cfg->irq_config(dev);
 8005416:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800541a:	4620      	mov	r0, r4
 800541c:	4798      	blx	r3
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	b1c3      	cbz	r3, 8005454 <spi_stm32_init+0x78>
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	b1b3      	cbz	r3, 8005454 <spi_stm32_init+0x78>
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	b1a2      	cbz	r2, 8005454 <spi_stm32_init+0x78>
			k_busy_wait(ctx->config->cs->delay);
 800542a:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800542c:	f004 f8b0 	bl	8009590 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 8005438:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2301      	movs	r3, #1
 800543e:	408b      	lsls	r3, r1
 8005440:	421a      	tst	r2, r3
 8005442:	d135      	bne.n	80054b0 <spi_stm32_init+0xd4>
 8005444:	462b      	mov	r3, r5
	if (value != 0)	{
 8005446:	b3ab      	cbz	r3, 80054b4 <spi_stm32_init+0xd8>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 8005448:	2301      	movs	r3, #1
 800544a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800544e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4798      	blx	r3
 8005454:	693b      	ldr	r3, [r7, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 8005456:	b3a3      	cbz	r3, 80054c2 <spi_stm32_init+0xe6>
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8005458:	4628      	mov	r0, r5
 800545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545e:	f06f 0512 	mvn.w	r5, #18
 8005462:	e7cc      	b.n	80053fe <spi_stm32_init+0x22>
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <spi_stm32_init+0xf8>)
 8005466:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <spi_stm32_init+0xfc>)
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not enable SPI clock");
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	2201      	movs	r2, #1
 8005472:	f362 0102 	bfi	r1, r2, #0, #3
 8005476:	f36f 01c5 	bfc	r1, #3, #3
 800547a:	f363 118f 	bfi	r1, r3, #6, #10
 800547e:	4817      	ldr	r0, [pc, #92]	; (80054dc <spi_stm32_init+0x100>)
 8005480:	f7fe f816 	bl	80034b0 <log_0>
		return -EIO;
 8005484:	f06f 0504 	mvn.w	r5, #4
 8005488:	e7e6      	b.n	8005458 <spi_stm32_init+0x7c>
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <spi_stm32_init+0xf8>)
 800548c:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <spi_stm32_init+0xfc>)
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	08db      	lsrs	r3, r3, #3
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	2101      	movs	r1, #1
 8005498:	f361 0202 	bfi	r2, r1, #0, #3
 800549c:	f36f 02c5 	bfc	r2, #3, #3
 80054a0:	f363 128f 	bfi	r2, r3, #6, #10
 80054a4:	4631      	mov	r1, r6
 80054a6:	480e      	ldr	r0, [pc, #56]	; (80054e0 <spi_stm32_init+0x104>)
 80054a8:	f7fe f82c 	bl	8003504 <log_1>
		return err;
 80054ac:	4635      	mov	r5, r6
 80054ae:	e7d3      	b.n	8005458 <spi_stm32_init+0x7c>
		value = (value != 0) ? 0 : 1;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e7c8      	b.n	8005446 <spi_stm32_init+0x6a>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 80054b4:	2301      	movs	r3, #1
 80054b6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 80054ba:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 80054c0:	e7c8      	b.n	8005454 <spi_stm32_init+0x78>
		ctx->owner = NULL;
 80054c2:	607b      	str	r3, [r7, #4]
		k_sem_give(&ctx->lock);
 80054c4:	f107 0008 	add.w	r0, r7, #8
	z_impl_k_sem_give(sem);
 80054c8:	f003 f944 	bl	8008754 <z_impl_k_sem_give>
}
 80054cc:	e7c4      	b.n	8005458 <spi_stm32_init+0x7c>
 80054ce:	bf00      	nop
 80054d0:	0800dc38 	.word	0x0800dc38
 80054d4:	0800e030 	.word	0x0800e030
 80054d8:	0800e008 	.word	0x0800e008
 80054dc:	0800ec70 	.word	0x0800ec70
 80054e0:	0800ec8c 	.word	0x0800ec8c

080054e4 <timer_callback>:
{
	TimerIrqHandler();
}

static void timer_callback(struct k_timer *_timer)
{
 80054e4:	b508      	push	{r3, lr}
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
 80054e6:	4802      	ldr	r0, [pc, #8]	; (80054f0 <timer_callback+0xc>)
 80054e8:	f003 faa6 	bl	8008a38 <k_work_submit>
}
 80054ec:	bd08      	pop	{r3, pc}
 80054ee:	bf00      	nop
 80054f0:	20000080 	.word	0x20000080

080054f4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
 80054f4:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 80054f6:	f007 ff46 	bl	800d386 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 80054fa:	220a      	movs	r2, #10
 80054fc:	2300      	movs	r3, #0
 80054fe:	f7fb fa6d 	bl	80009dc <__aeabi_uldivmod>
	return (k_uptime_get_32() - saved_time);
 8005502:	4b02      	ldr	r3, [pc, #8]	; (800550c <RtcGetTimerElapsedTime+0x18>)
 8005504:	681b      	ldr	r3, [r3, #0]
}
 8005506:	1ac0      	subs	r0, r0, r3
 8005508:	bd08      	pop	{r3, pc}
 800550a:	bf00      	nop
 800550c:	20000ae4 	.word	0x20000ae4

08005510 <RtcStopAlarm>:
{
	return 1;
}

void RtcStopAlarm(void)
{
 8005510:	b508      	push	{r3, lr}
	z_impl_k_timer_stop(timer);
 8005512:	4802      	ldr	r0, [pc, #8]	; (800551c <RtcStopAlarm+0xc>)
 8005514:	f007 ff47 	bl	800d3a6 <z_impl_k_timer_stop>
	k_timer_stop(&lora_timer);
}
 8005518:	bd08      	pop	{r3, pc}
 800551a:	bf00      	nop
 800551c:	20000358 	.word	0x20000358

08005520 <RtcSetAlarm>:

void RtcSetAlarm(uint32_t timeout)
{
 8005520:	b500      	push	{lr}
 8005522:	b083      	sub	sp, #12
			return t * ((uint64_t)to_hz / from_hz);
 8005524:	0f83      	lsrs	r3, r0, #30
 8005526:	0082      	lsls	r2, r0, #2
 8005528:	1812      	adds	r2, r2, r0
 800552a:	f143 0300 	adc.w	r3, r3, #0
 800552e:	1892      	adds	r2, r2, r2
 8005530:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8005532:	2000      	movs	r0, #0
 8005534:	2100      	movs	r1, #0
 8005536:	e9cd 0100 	strd	r0, r1, [sp]
 800553a:	4803      	ldr	r0, [pc, #12]	; (8005548 <RtcSetAlarm+0x28>)
 800553c:	f004 f87e 	bl	800963c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
 8005540:	b003      	add	sp, #12
 8005542:	f85d fb04 	ldr.w	pc, [sp], #4
 8005546:	bf00      	nop
 8005548:	20000358 	.word	0x20000358

0800554c <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
 800554c:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800554e:	f007 ff1a 	bl	800d386 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8005552:	220a      	movs	r2, #10
 8005554:	2300      	movs	r3, #0
 8005556:	f7fb fa41 	bl	80009dc <__aeabi_uldivmod>
	saved_time = k_uptime_get_32();
 800555a:	4b01      	ldr	r3, [pc, #4]	; (8005560 <RtcSetTimerContext+0x14>)
 800555c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
 800555e:	bd08      	pop	{r3, pc}
 8005560:	20000ae4 	.word	0x20000ae4

08005564 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
 8005564:	4b01      	ldr	r3, [pc, #4]	; (800556c <RtcGetTimerContext+0x8>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000ae4 	.word	0x20000ae4

08005570 <modem_release>:
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
{
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4604      	mov	r4, r0
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 8005574:	f100 0534 	add.w	r5, r0, #52	; 0x34
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005578:	2302      	movs	r3, #2
 800557a:	f3bf 8f5b 	dmb	ish
 800557e:	e855 2f00 	ldrex	r2, [r5]
 8005582:	2a01      	cmp	r2, #1
 8005584:	d103      	bne.n	800558e <modem_release+0x1e>
 8005586:	e845 3100 	strex	r1, r3, [r5]
 800558a:	2900      	cmp	r1, #0
 800558c:	d1f7      	bne.n	800557e <modem_release+0xe>
 800558e:	f3bf 8f5b 	dmb	ish
 8005592:	bf0c      	ite	eq
 8005594:	2601      	moveq	r6, #1
 8005596:	2600      	movne	r6, #0
 8005598:	d10e      	bne.n	80055b8 <modem_release+0x48>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <modem_release+0x4c>)
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	6023      	str	r3, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 80055a4:	f3bf 8f5b 	dmb	ish
 80055a8:	e855 2f00 	ldrex	r2, [r5]
 80055ac:	e845 3100 	strex	r1, r3, [r5]
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d1f9      	bne.n	80055a8 <modem_release+0x38>
 80055b4:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
}
 80055b8:	4630      	mov	r0, r6
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	0800eec0 	.word	0x0800eec0

080055c0 <sx12xx_ev_rx_done>:

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	4617      	mov	r7, r2
 80055c4:	461d      	mov	r5, r3
	struct k_poll_signal *sig = dev_data.operation_done;
 80055c6:	4c1d      	ldr	r4, [pc, #116]	; (800563c <sx12xx_ev_rx_done+0x7c>)
 80055c8:	f854 6b34 	ldr.w	r6, [r4], #52
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 80055cc:	2302      	movs	r3, #2
 80055ce:	f3bf 8f5b 	dmb	ish
 80055d2:	e854 2f00 	ldrex	r2, [r4]
 80055d6:	2a01      	cmp	r2, #1
 80055d8:	d104      	bne.n	80055e4 <sx12xx_ev_rx_done+0x24>
 80055da:	e844 3c00 	strex	ip, r3, [r4]
 80055de:	f1bc 0f00 	cmp.w	ip, #0
 80055e2:	d1f6      	bne.n	80055d2 <sx12xx_ev_rx_done+0x12>
 80055e4:	f3bf 8f5b 	dmb	ish

	/* Manually release the modem instead of just calling modem_release
	 * as we need to perform cleanup operations while still ensuring
	 * others can't use the modem.
	 */
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
 80055e8:	d127      	bne.n	800563a <sx12xx_ev_rx_done+0x7a>
	 * This lets us guarantee that the operation_done signal and pointers
	 * in rx_params are always valid in this function.
	 */

	/* Store actual size */
	if (size < *dev_data.rx_params.size) {
 80055ea:	4b14      	ldr	r3, [pc, #80]	; (800563c <sx12xx_ev_rx_done+0x7c>)
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	428a      	cmp	r2, r1
 80055f2:	d900      	bls.n	80055f6 <sx12xx_ev_rx_done+0x36>
		*dev_data.rx_params.size = size;
 80055f4:	7019      	strb	r1, [r3, #0]
	}
	/* Copy received data to output buffer */
	memcpy(dev_data.rx_params.buf, payload,
 80055f6:	4c11      	ldr	r4, [pc, #68]	; (800563c <sx12xx_ev_rx_done+0x7c>)
 80055f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	4601      	mov	r1, r0
 80055fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005600:	f007 ff74 	bl	800d4ec <memcpy>
	       *dev_data.rx_params.size);
	/* Output RSSI and SNR */
	if (dev_data.rx_params.rssi) {
 8005604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005606:	b103      	cbz	r3, 800560a <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
 8005608:	801f      	strh	r7, [r3, #0]
	}
	if (dev_data.rx_params.snr) {
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <sx12xx_ev_rx_done+0x7c>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	b103      	cbz	r3, 8005612 <sx12xx_ev_rx_done+0x52>
		*dev_data.rx_params.snr = snr;
 8005610:	701d      	strb	r5, [r3, #0]
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <sx12xx_ev_rx_done+0x80>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	4798      	blx	r3
	/* Completely release modem */
	dev_data.operation_done = NULL;
 8005618:	2100      	movs	r1, #0
 800561a:	4b08      	ldr	r3, [pc, #32]	; (800563c <sx12xx_ev_rx_done+0x7c>)
 800561c:	f843 1b34 	str.w	r1, [r3], #52
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005620:	f3bf 8f5b 	dmb	ish
 8005624:	e853 2f00 	ldrex	r2, [r3]
 8005628:	e843 1000 	strex	r0, r1, [r3]
 800562c:	2800      	cmp	r0, #0
 800562e:	d1f9      	bne.n	8005624 <sx12xx_ev_rx_done+0x64>
 8005630:	f3bf 8f5b 	dmb	ish
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
 8005634:	4630      	mov	r0, r6
 8005636:	f004 fafd 	bl	8009c34 <z_impl_k_poll_signal_raise>
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
 800563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563c:	20000ae8 	.word	0x20000ae8
 8005640:	0800eec0 	.word	0x0800eec0

08005644 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
 8005644:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
 8005646:	4805      	ldr	r0, [pc, #20]	; (800565c <sx12xx_ev_tx_done+0x18>)
 8005648:	6804      	ldr	r4, [r0, #0]

	if (modem_release(&dev_data)) {
 800564a:	f7ff ff91 	bl	8005570 <modem_release>
 800564e:	b120      	cbz	r0, 800565a <sx12xx_ev_tx_done+0x16>
		/* Raise signal if provided */
		if (sig) {
 8005650:	b11c      	cbz	r4, 800565a <sx12xx_ev_tx_done+0x16>
 8005652:	2100      	movs	r1, #0
 8005654:	4620      	mov	r0, r4
 8005656:	f004 faed 	bl	8009c34 <z_impl_k_poll_signal_raise>
			k_poll_signal_raise(sig, 0);
		}
	}
}
 800565a:	bd10      	pop	{r4, pc}
 800565c:	20000ae8 	.word	0x20000ae8

08005660 <__sx12xx_configure_pin>:
{
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b083      	sub	sp, #12
 8005664:	4604      	mov	r4, r0
 8005666:	460f      	mov	r7, r1
 8005668:	4616      	mov	r6, r2
 800566a:	461d      	mov	r5, r3
 800566c:	4608      	mov	r0, r1
 800566e:	f002 fc4b 	bl	8007f08 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
 8005672:	6020      	str	r0, [r4, #0]
	if (!(*dev)) {
 8005674:	b1f8      	cbz	r0, 80056b6 <__sx12xx_configure_pin+0x56>
	const struct gpio_driver_api *api =
 8005676:	6883      	ldr	r3, [r0, #8]
	struct gpio_driver_data *data =
 8005678:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 800567a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800567e:	d007      	beq.n	8005690 <__sx12xx_configure_pin+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005680:	f415 6f40 	tst.w	r5, #3072	; 0xc00
 8005684:	d004      	beq.n	8005690 <__sx12xx_configure_pin+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005686:	f015 0f01 	tst.w	r5, #1
 800568a:	d001      	beq.n	8005690 <__sx12xx_configure_pin+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 800568c:	f485 6540 	eor.w	r5, r5, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005690:	f425 5280 	bic.w	r2, r5, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005694:	f015 0f01 	tst.w	r5, #1
 8005698:	d021      	beq.n	80056de <__sx12xx_configure_pin+0x7e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 800569a:	2101      	movs	r1, #1
 800569c:	fa01 f506 	lsl.w	r5, r1, r6
 80056a0:	6821      	ldr	r1, [r4, #0]
 80056a2:	4329      	orrs	r1, r5
 80056a4:	6021      	str	r1, [r4, #0]
	return api->pin_configure(port, pin, flags);
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4631      	mov	r1, r6
 80056aa:	4798      	blx	r3
	if (err) {
 80056ac:	4604      	mov	r4, r0
 80056ae:	b9f0      	cbnz	r0, 80056ee <__sx12xx_configure_pin+0x8e>
}
 80056b0:	4620      	mov	r0, r4
 80056b2:	b003      	add	sp, #12
 80056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <__sx12xx_configure_pin+0xbc>)
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <__sx12xx_configure_pin+0xc0>)
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device", controller);
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	2101      	movs	r1, #1
 80056c4:	f361 0202 	bfi	r2, r1, #0, #3
 80056c8:	f36f 02c5 	bfc	r2, #3, #3
 80056cc:	f363 128f 	bfi	r2, r3, #6, #10
 80056d0:	4639      	mov	r1, r7
 80056d2:	4814      	ldr	r0, [pc, #80]	; (8005724 <__sx12xx_configure_pin+0xc4>)
 80056d4:	f7fd ff16 	bl	8003504 <log_1>
		return -EIO;
 80056d8:	f06f 0404 	mvn.w	r4, #4
 80056dc:	e7e8      	b.n	80056b0 <__sx12xx_configure_pin+0x50>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f506 	lsl.w	r5, r1, r6
 80056e4:	6821      	ldr	r1, [r4, #0]
 80056e6:	ea21 0105 	bic.w	r1, r1, r5
 80056ea:	6021      	str	r1, [r4, #0]
 80056ec:	e7db      	b.n	80056a6 <__sx12xx_configure_pin+0x46>
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <__sx12xx_configure_pin+0xbc>)
 80056f0:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <__sx12xx_configure_pin+0xc0>)
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	2101      	movs	r1, #1
 80056fc:	f361 0202 	bfi	r2, r1, #0, #3
 8005700:	f36f 02c5 	bfc	r2, #3, #3
 8005704:	f363 128f 	bfi	r2, r3, #6, #10
 8005708:	f8ad 2000 	strh.w	r2, [sp]
 800570c:	4603      	mov	r3, r0
 800570e:	4632      	mov	r2, r6
 8005710:	4639      	mov	r1, r7
 8005712:	4805      	ldr	r0, [pc, #20]	; (8005728 <__sx12xx_configure_pin+0xc8>)
 8005714:	f7fd fe92 	bl	800343c <log_3>
		return err;
 8005718:	e7ca      	b.n	80056b0 <__sx12xx_configure_pin+0x50>
 800571a:	bf00      	nop
 800571c:	0800e040 	.word	0x0800e040
 8005720:	0800e008 	.word	0x0800e008
 8005724:	0800ed10 	.word	0x0800ed10
 8005728:	0800ed30 	.word	0x0800ed30

0800572c <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8005730:	490f      	ldr	r1, [pc, #60]	; (8005770 <sx12xx_lora_send_async+0x44>)
 8005732:	2001      	movs	r0, #1
 8005734:	f3bf 8f5b 	dmb	ish
 8005738:	e851 4f00 	ldrex	r4, [r1]
 800573c:	2c00      	cmp	r4, #0
 800573e:	d103      	bne.n	8005748 <sx12xx_lora_send_async+0x1c>
 8005740:	e841 0600 	strex	r6, r0, [r1]
 8005744:	2e00      	cmp	r6, #0
 8005746:	d1f7      	bne.n	8005738 <sx12xx_lora_send_async+0xc>
 8005748:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 800574c:	d10c      	bne.n	8005768 <sx12xx_lora_send_async+0x3c>
		return -EBUSY;
	}

	/* Store signal */
	dev_data.operation_done = async;
 800574e:	3934      	subs	r1, #52	; 0x34
 8005750:	600b      	str	r3, [r1, #0]

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
 8005752:	4e08      	ldr	r6, [pc, #32]	; (8005774 <sx12xx_lora_send_async+0x48>)
 8005754:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005756:	b2d4      	uxtb	r4, r2
 8005758:	4621      	mov	r1, r4
 800575a:	4798      	blx	r3

	Radio.Send(data, data_len);
 800575c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	4798      	blx	r3

	return 0;
 8005764:	2000      	movs	r0, #0
}
 8005766:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
 8005768:	f06f 000f 	mvn.w	r0, #15
 800576c:	e7fb      	b.n	8005766 <sx12xx_lora_send_async+0x3a>
 800576e:	bf00      	nop
 8005770:	20000b1c 	.word	0x20000b1c
 8005774:	0800eec0 	.word	0x0800eec0

08005778 <sx12xx_lora_send>:
{
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	b08e      	sub	sp, #56	; 0x38
 800577c:	4614      	mov	r4, r2
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 800577e:	aa0a      	add	r2, sp, #40	; 0x28
 8005780:	920a      	str	r2, [sp, #40]	; 0x28
 8005782:	920b      	str	r2, [sp, #44]	; 0x2c
 8005784:	2300      	movs	r3, #0
 8005786:	930c      	str	r3, [sp, #48]	; 0x30
 8005788:	930d      	str	r3, [sp, #52]	; 0x34
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	9307      	str	r3, [sp, #28]
 8005790:	9308      	str	r3, [sp, #32]
 8005792:	9309      	str	r3, [sp, #36]	; 0x24
 8005794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8005798:	2501      	movs	r5, #1
 800579a:	f365 0304 	bfi	r3, r5, #0, #5
 800579e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80057a2:	9209      	str	r2, [sp, #36]	; 0x24
	if (!dev_data.tx_cfg.frequency) {
 80057a4:	4b28      	ldr	r3, [pc, #160]	; (8005848 <sx12xx_lora_send+0xd0>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d049      	beq.n	8005840 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
 80057ac:	4613      	mov	r3, r2
 80057ae:	4622      	mov	r2, r4
 80057b0:	f7ff ffbc 	bl	800572c <sx12xx_lora_send_async>
	if (ret < 0) {
 80057b4:	2800      	cmp	r0, #0
 80057b6:	db22      	blt.n	80057fe <sx12xx_lora_send+0x86>
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <sx12xx_lora_send+0xd4>)
 80057ba:	6a5e      	ldr	r6, [r3, #36]	; 0x24
				   dev_data.tx_cfg.bandwidth,
 80057bc:	4922      	ldr	r1, [pc, #136]	; (8005848 <sx12xx_lora_send+0xd0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
 80057be:	9503      	str	r5, [sp, #12]
 80057c0:	b2e4      	uxtb	r4, r4
 80057c2:	9402      	str	r4, [sp, #8]
 80057c4:	2300      	movs	r3, #0
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 80057d0:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 80057d4:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80057d8:	4628      	mov	r0, r5
 80057da:	47b0      	blx	r6
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
 80057dc:	fa00 f105 	lsl.w	r1, r0, r5
			return t * ((uint64_t)to_hz / from_hz);
 80057e0:	f3c0 7341 	ubfx	r3, r0, #29, #2
 80057e4:	00c2      	lsls	r2, r0, #3
 80057e6:	1852      	adds	r2, r2, r1
 80057e8:	f143 0300 	adc.w	r3, r3, #0
 80057ec:	1892      	adds	r2, r2, r2
 80057ee:	415b      	adcs	r3, r3
	return z_impl_k_poll(events, num_events, timeout);
 80057f0:	4629      	mov	r1, r5
 80057f2:	a805      	add	r0, sp, #20
 80057f4:	f004 f972 	bl	8009adc <z_impl_k_poll>
	if (ret < 0) {
 80057f8:	2800      	cmp	r0, #0
 80057fa:	db02      	blt.n	8005802 <sx12xx_lora_send+0x8a>
	return 0;
 80057fc:	2000      	movs	r0, #0
}
 80057fe:	b00e      	add	sp, #56	; 0x38
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <sx12xx_lora_send+0xd8>)
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <sx12xx_lora_send+0xdc>)
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Packet transmission failed!");
 800580a:	f04f 0100 	mov.w	r1, #0
 800580e:	f365 0102 	bfi	r1, r5, #0, #3
 8005812:	f36f 01c5 	bfc	r1, #3, #3
 8005816:	f363 118f 	bfi	r1, r3, #6, #10
 800581a:	480f      	ldr	r0, [pc, #60]	; (8005858 <sx12xx_lora_send+0xe0>)
 800581c:	f7fd fe48 	bl	80034b0 <log_0>
		if (!modem_release(&dev_data)) {
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <sx12xx_lora_send+0xd0>)
 8005822:	f7ff fea5 	bl	8005570 <modem_release>
 8005826:	b108      	cbz	r0, 800582c <sx12xx_lora_send+0xb4>
	return 0;
 8005828:	2000      	movs	r0, #0
 800582a:	e7e8      	b.n	80057fe <sx12xx_lora_send+0x86>
 800582c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005834:	4629      	mov	r1, r5
 8005836:	a805      	add	r0, sp, #20
 8005838:	f004 f950 	bl	8009adc <z_impl_k_poll>
 800583c:	2000      	movs	r0, #0
 800583e:	e7de      	b.n	80057fe <sx12xx_lora_send+0x86>
		return -EINVAL;
 8005840:	f06f 0015 	mvn.w	r0, #21
 8005844:	e7db      	b.n	80057fe <sx12xx_lora_send+0x86>
 8005846:	bf00      	nop
 8005848:	20000ae8 	.word	0x20000ae8
 800584c:	0800eec0 	.word	0x0800eec0
 8005850:	0800e040 	.word	0x0800e040
 8005854:	0800e008 	.word	0x0800e008
 8005858:	0800ed50 	.word	0x0800ed50

0800585c <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
 800585c:	b510      	push	{r4, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
 8005864:	aa08      	add	r2, sp, #32
 8005866:	9208      	str	r2, [sp, #32]
 8005868:	9209      	str	r2, [sp, #36]	; 0x24
 800586a:	2300      	movs	r3, #0
 800586c:	930a      	str	r3, [sp, #40]	; 0x28
 800586e:	930b      	str	r3, [sp, #44]	; 0x2c
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
 8005870:	9303      	str	r3, [sp, #12]
 8005872:	9304      	str	r3, [sp, #16]
 8005874:	9305      	str	r3, [sp, #20]
 8005876:	9306      	str	r3, [sp, #24]
 8005878:	9307      	str	r3, [sp, #28]
 800587a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800587e:	2001      	movs	r0, #1
 8005880:	f360 0304 	bfi	r3, r0, #0, #5
 8005884:	f88d 3019 	strb.w	r3, [sp, #25]
 8005888:	9207      	str	r2, [sp, #28]
 800588a:	4b28      	ldr	r3, [pc, #160]	; (800592c <sx12xx_lora_recv+0xd0>)
 800588c:	f3bf 8f5b 	dmb	ish
 8005890:	e853 2f00 	ldrex	r2, [r3]
 8005894:	2a00      	cmp	r2, #0
 8005896:	d103      	bne.n	80058a0 <sx12xx_lora_recv+0x44>
 8005898:	e843 0400 	strex	r4, r0, [r3]
 800589c:	2c00      	cmp	r4, #0
 800589e:	d1f7      	bne.n	8005890 <sx12xx_lora_recv+0x34>
 80058a0:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
 80058a4:	d13e      	bne.n	8005924 <sx12xx_lora_recv+0xc8>
		return -EBUSY;
	}

	/* Store operation signal */
	dev_data.operation_done = &done;
 80058a6:	3b34      	subs	r3, #52	; 0x34
 80058a8:	aa08      	add	r2, sp, #32
 80058aa:	601a      	str	r2, [r3, #0]
	/* Set data output location */
	dev_data.rx_params.buf = data;
 80058ac:	6399      	str	r1, [r3, #56]	; 0x38
	dev_data.rx_params.size = &size;
 80058ae:	f10d 0207 	add.w	r2, sp, #7
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
 80058b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
 80058b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
 80058bc:	4c1c      	ldr	r4, [pc, #112]	; (8005930 <sx12xx_lora_recv+0xd4>)
 80058be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058c0:	21ff      	movs	r1, #255	; 0xff
 80058c2:	4798      	blx	r3
	Radio.Rx(0);
 80058c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058c6:	2000      	movs	r0, #0
 80058c8:	4798      	blx	r3
 80058ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80058ce:	2101      	movs	r1, #1
 80058d0:	a803      	add	r0, sp, #12
 80058d2:	f004 f903 	bl	8009adc <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
 80058d6:	1e04      	subs	r4, r0, #0
 80058d8:	db04      	blt.n	80058e4 <sx12xx_lora_recv+0x88>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
 80058da:	f89d 4007 	ldrb.w	r4, [sp, #7]
}
 80058de:	4620      	mov	r0, r4
 80058e0:	b00c      	add	sp, #48	; 0x30
 80058e2:	bd10      	pop	{r4, pc}
		if (!modem_release(&dev_data)) {
 80058e4:	4813      	ldr	r0, [pc, #76]	; (8005934 <sx12xx_lora_recv+0xd8>)
 80058e6:	f7ff fe43 	bl	8005570 <modem_release>
 80058ea:	b950      	cbnz	r0, 8005902 <sx12xx_lora_recv+0xa6>
 80058ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f4:	2101      	movs	r1, #1
 80058f6:	a803      	add	r0, sp, #12
 80058f8:	f004 f8f0 	bl	8009adc <z_impl_k_poll>
			return size;
 80058fc:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8005900:	e7ed      	b.n	80058de <sx12xx_lora_recv+0x82>
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <sx12xx_lora_recv+0xdc>)
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <sx12xx_lora_recv+0xe0>)
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	08db      	lsrs	r3, r3, #3
		LOG_INF("Receive timeout");
 800590a:	f04f 0100 	mov.w	r1, #0
 800590e:	2203      	movs	r2, #3
 8005910:	f362 0102 	bfi	r1, r2, #0, #3
 8005914:	f36f 01c5 	bfc	r1, #3, #3
 8005918:	f363 118f 	bfi	r1, r3, #6, #10
 800591c:	4808      	ldr	r0, [pc, #32]	; (8005940 <sx12xx_lora_recv+0xe4>)
 800591e:	f7fd fdc7 	bl	80034b0 <log_0>
		return ret;
 8005922:	e7dc      	b.n	80058de <sx12xx_lora_recv+0x82>
		return -EBUSY;
 8005924:	f06f 040f 	mvn.w	r4, #15
 8005928:	e7d9      	b.n	80058de <sx12xx_lora_recv+0x82>
 800592a:	bf00      	nop
 800592c:	20000b1c 	.word	0x20000b1c
 8005930:	0800eec0 	.word	0x0800eec0
 8005934:	20000ae8 	.word	0x20000ae8
 8005938:	0800e040 	.word	0x0800e040
 800593c:	0800e008 	.word	0x0800e008
 8005940:	0800ed6c 	.word	0x0800ed6c

08005944 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	460c      	mov	r4, r1
 800594a:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <sx12xx_lora_config+0xa4>)
 800594c:	2201      	movs	r2, #1
 800594e:	f3bf 8f5b 	dmb	ish
 8005952:	e853 1f00 	ldrex	r1, [r3]
 8005956:	2900      	cmp	r1, #0
 8005958:	d103      	bne.n	8005962 <sx12xx_lora_config+0x1e>
 800595a:	e843 2000 	strex	r0, r2, [r3]
 800595e:	2800      	cmp	r0, #0
 8005960:	d1f7      	bne.n	8005952 <sx12xx_lora_config+0xe>
 8005962:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
 8005966:	d13b      	bne.n	80059e0 <sx12xx_lora_config+0x9c>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <sx12xx_lora_config+0xa8>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	4798      	blx	r3

	if (config->tx) {
 8005970:	7ae3      	ldrb	r3, [r4, #11]
 8005972:	b9cb      	cbnz	r3, 80059a8 <sx12xx_lora_config+0x64>
				  config->bandwidth, config->datarate,
				  config->coding_rate, config->preamble_len,
				  false, true, 0, 0, false, 4000);
	} else {
		/* TODO: Get symbol timeout value from config parameters */
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <sx12xx_lora_config+0xa8>)
 8005976:	699d      	ldr	r5, [r3, #24]
 8005978:	2001      	movs	r0, #1
 800597a:	9009      	str	r0, [sp, #36]	; 0x24
 800597c:	2300      	movs	r3, #0
 800597e:	9308      	str	r3, [sp, #32]
 8005980:	9307      	str	r3, [sp, #28]
 8005982:	9306      	str	r3, [sp, #24]
 8005984:	9305      	str	r3, [sp, #20]
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	9303      	str	r3, [sp, #12]
 800598a:	220a      	movs	r2, #10
 800598c:	9202      	str	r2, [sp, #8]
 800598e:	8922      	ldrh	r2, [r4, #8]
 8005990:	9201      	str	r2, [sp, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	79a3      	ldrb	r3, [r4, #6]
 8005996:	7962      	ldrb	r2, [r4, #5]
 8005998:	7921      	ldrb	r1, [r4, #4]
 800599a:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
 800599c:	4814      	ldr	r0, [pc, #80]	; (80059f0 <sx12xx_lora_config+0xac>)
 800599e:	f7ff fde7 	bl	8005570 <modem_release>
	return 0;
 80059a2:	2000      	movs	r0, #0
}
 80059a4:	b00a      	add	sp, #40	; 0x28
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
 80059a8:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <sx12xx_lora_config+0xb0>)
 80059aa:	6820      	ldr	r0, [r4, #0]
 80059ac:	6861      	ldr	r1, [r4, #4]
 80059ae:	68a2      	ldr	r2, [r4, #8]
 80059b0:	c307      	stmia	r3!, {r0, r1, r2}
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80059b2:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <sx12xx_lora_config+0xa8>)
 80059b4:	69dd      	ldr	r5, [r3, #28]
				  config->bandwidth, config->datarate,
 80059b6:	7963      	ldrb	r3, [r4, #5]
				  config->coding_rate, config->preamble_len,
 80059b8:	79a1      	ldrb	r1, [r4, #6]
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
 80059ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80059be:	9208      	str	r2, [sp, #32]
 80059c0:	2200      	movs	r2, #0
 80059c2:	9207      	str	r2, [sp, #28]
 80059c4:	9206      	str	r2, [sp, #24]
 80059c6:	9205      	str	r2, [sp, #20]
 80059c8:	2001      	movs	r0, #1
 80059ca:	9004      	str	r0, [sp, #16]
 80059cc:	9203      	str	r2, [sp, #12]
 80059ce:	8926      	ldrh	r6, [r4, #8]
 80059d0:	9602      	str	r6, [sp, #8]
 80059d2:	9101      	str	r1, [sp, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	7923      	ldrb	r3, [r4, #4]
 80059d8:	f994 100a 	ldrsb.w	r1, [r4, #10]
 80059dc:	47a8      	blx	r5
 80059de:	e7dd      	b.n	800599c <sx12xx_lora_config+0x58>
		return -EBUSY;
 80059e0:	f06f 000f 	mvn.w	r0, #15
 80059e4:	e7de      	b.n	80059a4 <sx12xx_lora_config+0x60>
 80059e6:	bf00      	nop
 80059e8:	20000b1c 	.word	0x20000b1c
 80059ec:	0800eec0 	.word	0x0800eec0
 80059f0:	20000ae8 	.word	0x20000ae8
 80059f4:	20000b10 	.word	0x20000b10

080059f8 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	461a      	mov	r2, r3
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <sx12xx_lora_test_cw+0x3c>)
 8005a02:	f04f 0c01 	mov.w	ip, #1
 8005a06:	f3bf 8f5b 	dmb	ish
 8005a0a:	e853 ef00 	ldrex	lr, [r3]
 8005a0e:	f1be 0f00 	cmp.w	lr, #0
 8005a12:	d103      	bne.n	8005a1c <sx12xx_lora_test_cw+0x24>
 8005a14:	e843 c400 	strex	r4, ip, [r3]
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d1f6      	bne.n	8005a0a <sx12xx_lora_test_cw+0x12>
 8005a1c:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
 8005a20:	d104      	bne.n	8005a2c <sx12xx_lora_test_cw+0x34>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <sx12xx_lora_test_cw+0x40>)
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	4798      	blx	r3
	return 0;
 8005a28:	2000      	movs	r0, #0
}
 8005a2a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8005a2c:	f06f 000f 	mvn.w	r0, #15
 8005a30:	e7fb      	b.n	8005a2a <sx12xx_lora_test_cw+0x32>
 8005a32:	bf00      	nop
 8005a34:	20000b1c 	.word	0x20000b1c
 8005a38:	0800eec0 	.word	0x0800eec0

08005a3c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
 8005a3c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
 8005a3e:	480d      	ldr	r0, [pc, #52]	; (8005a74 <sx12xx_init+0x38>)
 8005a40:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8005a44:	2400      	movs	r4, #0
 8005a46:	f3bf 8f5b 	dmb	ish
 8005a4a:	e853 2f00 	ldrex	r2, [r3]
 8005a4e:	e843 4100 	strex	r1, r4, [r3]
 8005a52:	2900      	cmp	r1, #0
 8005a54:	d1f9      	bne.n	8005a4a <sx12xx_init+0xe>
 8005a56:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <sx12xx_init+0x3c>)
 8005a5c:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <sx12xx_init+0x40>)
 8005a60:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
 8005a62:	4d07      	ldr	r5, [pc, #28]	; (8005a80 <sx12xx_init+0x44>)
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	3004      	adds	r0, #4
 8005a68:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
 8005a6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005a6c:	4798      	blx	r3

	return 0;
}
 8005a6e:	4620      	mov	r0, r4
 8005a70:	bd38      	pop	{r3, r4, r5, pc}
 8005a72:	bf00      	nop
 8005a74:	20000ae8 	.word	0x20000ae8
 8005a78:	08005645 	.word	0x08005645
 8005a7c:	080055c1 	.word	0x080055c1
 8005a80:	0800eec0 	.word	0x0800eec0

08005a84 <sx127x_dio_work_handle>:

	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
 8005a84:	b508      	push	{r3, lr}
	int dio = work - dev_data.dio_work;
 8005a86:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <sx127x_dio_work_handle+0x14>)
 8005a88:	1ac0      	subs	r0, r0, r3
 8005a8a:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <sx127x_dio_work_handle+0x18>)
 8005a8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005a92:	2000      	movs	r0, #0
 8005a94:	4798      	blx	r3
}
 8005a96:	bd08      	pop	{r3, pc}
 8005a98:	20000b84 	.word	0x20000b84
 8005a9c:	20000090 	.word	0x20000090

08005aa0 <sx127x_transceive>:
	}

}

static int sx127x_transceive(uint8_t reg, bool write, void *data, size_t length)
{
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	f88d 0007 	strb.w	r0, [sp, #7]
	const struct spi_buf buf[2] = {
 8005aa8:	f10d 0007 	add.w	r0, sp, #7
 8005aac:	9006      	str	r0, [sp, #24]
 8005aae:	2001      	movs	r0, #1
 8005ab0:	9007      	str	r0, [sp, #28]
 8005ab2:	9208      	str	r2, [sp, #32]
 8005ab4:	9309      	str	r3, [sp, #36]	; 0x24
			.buf = data,
			.len = length
		}
	};

	struct spi_buf_set tx = {
 8005ab6:	ab06      	add	r3, sp, #24
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	2302      	movs	r3, #2
 8005abc:	9305      	str	r3, [sp, #20]
		.buffers = buf,
		.count = ARRAY_SIZE(buf),
	};

	if (!write) {
 8005abe:	b149      	cbz	r1, 8005ad4 <sx127x_transceive+0x34>
		};

		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
	}

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
 8005ac0:	490b      	ldr	r1, [pc, #44]	; (8005af0 <sx127x_transceive+0x50>)
 8005ac2:	6848      	ldr	r0, [r1, #4]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
 8005ac4:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8005ac6:	681c      	ldr	r4, [r3, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	aa04      	add	r2, sp, #16
 8005acc:	3108      	adds	r1, #8
 8005ace:	47a0      	blx	r4
}
 8005ad0:	b00a      	add	sp, #40	; 0x28
 8005ad2:	bd10      	pop	{r4, pc}
		const struct spi_buf_set rx = {
 8005ad4:	ab06      	add	r3, sp, #24
 8005ad6:	9302      	str	r3, [sp, #8]
 8005ad8:	2302      	movs	r3, #2
 8005ada:	9303      	str	r3, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
 8005adc:	4904      	ldr	r1, [pc, #16]	; (8005af0 <sx127x_transceive+0x50>)
 8005ade:	6848      	ldr	r0, [r1, #4]
	const struct spi_driver_api *api =
 8005ae0:	6883      	ldr	r3, [r0, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8005ae2:	681c      	ldr	r4, [r3, #0]
 8005ae4:	ab02      	add	r3, sp, #8
 8005ae6:	aa04      	add	r2, sp, #16
 8005ae8:	3108      	adds	r1, #8
 8005aea:	47a0      	blx	r4
 8005aec:	e7f0      	b.n	8005ad0 <sx127x_transceive+0x30>
 8005aee:	bf00      	nop
 8005af0:	20000b60 	.word	0x20000b60

08005af4 <sx127x_irq_callback>:
{
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4605      	mov	r5, r0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
 8005af8:	fa92 f6a2 	rbit	r6, r2
 8005afc:	fab6 f686 	clz	r6, r6
 8005b00:	b90a      	cbnz	r2, 8005b06 <sx127x_irq_callback+0x12>
 8005b02:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005b06:	2400      	movs	r4, #0
 8005b08:	e000      	b.n	8005b0c <sx127x_irq_callback+0x18>
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	2c03      	cmp	r4, #3
 8005b0e:	d813      	bhi.n	8005b38 <sx127x_irq_callback+0x44>
		if (dev == dev_data.dio_dev[i] &&
 8005b10:	1d23      	adds	r3, r4, #4
 8005b12:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <sx127x_irq_callback+0x48>)
 8005b14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	42ab      	cmp	r3, r5
 8005b1c:	d1f5      	bne.n	8005b0a <sx127x_irq_callback+0x16>
		    pin == sx127x_dios[i].pin) {
 8005b1e:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <sx127x_irq_callback+0x4c>)
 8005b20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b24:	791b      	ldrb	r3, [r3, #4]
		if (dev == dev_data.dio_dev[i] &&
 8005b26:	42b3      	cmp	r3, r6
 8005b28:	d1ef      	bne.n	8005b0a <sx127x_irq_callback+0x16>
			k_work_submit(&dev_data.dio_work[i]);
 8005b2a:	1ca0      	adds	r0, r4, #2
 8005b2c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8005b30:	3004      	adds	r0, #4
 8005b32:	f002 ff81 	bl	8008a38 <k_work_submit>
 8005b36:	e7e8      	b.n	8005b0a <sx127x_irq_callback+0x16>
}
 8005b38:	bd70      	pop	{r4, r5, r6, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000b60 	.word	0x20000b60
 8005b40:	0800ef2c 	.word	0x0800ef2c

08005b44 <SX1276Reset>:
{
 8005b44:	b508      	push	{r3, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
 8005b46:	4b18      	ldr	r3, [pc, #96]	; (8005ba8 <SX1276Reset+0x64>)
 8005b48:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005b4a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f013 0f01 	tst.w	r3, #1
 8005b52:	d11b      	bne.n	8005b8c <SX1276Reset+0x48>
 8005b54:	2301      	movs	r3, #1
	if (value != 0)	{
 8005b56:	b1db      	cbz	r3, 8005b90 <SX1276Reset+0x4c>
	const struct gpio_driver_api *api =
 8005b58:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
 8005b60:	200a      	movs	r0, #10
 8005b62:	2100      	movs	r1, #0
 8005b64:	f003 fb38 	bl	80091d8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <SX1276Reset+0x64>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005b6c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f013 0f01 	tst.w	r3, #1
 8005b74:	d111      	bne.n	8005b9a <SX1276Reset+0x56>
 8005b76:	2300      	movs	r3, #0
	if (value != 0)	{
 8005b78:	b18b      	cbz	r3, 8005b9e <SX1276Reset+0x5a>
	const struct gpio_driver_api *api =
 8005b7a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2101      	movs	r1, #1
 8005b80:	4798      	blx	r3
 8005b82:	203c      	movs	r0, #60	; 0x3c
 8005b84:	2100      	movs	r1, #0
 8005b86:	f003 fb27 	bl	80091d8 <z_impl_k_sleep>
}
 8005b8a:	bd08      	pop	{r3, pc}
		value = (value != 0) ? 0 : 1;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e7e2      	b.n	8005b56 <SX1276Reset+0x12>
	const struct gpio_driver_api *api =
 8005b90:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2101      	movs	r1, #1
 8005b96:	4798      	blx	r3
 8005b98:	e7e2      	b.n	8005b60 <SX1276Reset+0x1c>
		value = (value != 0) ? 0 : 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e7ec      	b.n	8005b78 <SX1276Reset+0x34>
	const struct gpio_driver_api *api =
 8005b9e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4798      	blx	r3
 8005ba6:	e7ec      	b.n	8005b82 <SX1276Reset+0x3e>
 8005ba8:	20000b60 	.word	0x20000b60

08005bac <SX1276IoIrqInit>:
{
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	4605      	mov	r5, r0
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005bb0:	2400      	movs	r4, #0
 8005bb2:	e052      	b.n	8005c5a <SX1276IoIrqInit+0xae>
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <SX1276IoIrqInit+0x158>)
 8005bb6:	4a54      	ldr	r2, [pc, #336]	; (8005d08 <SX1276IoIrqInit+0x15c>)
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot get pointer to %s device",
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	f361 0202 	bfi	r2, r1, #0, #3
 8005bc6:	f36f 02c5 	bfc	r2, #3, #3
 8005bca:	f363 128f 	bfi	r2, r3, #6, #10
 8005bce:	4b4f      	ldr	r3, [pc, #316]	; (8005d0c <SX1276IoIrqInit+0x160>)
 8005bd0:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
 8005bd4:	484e      	ldr	r0, [pc, #312]	; (8005d10 <SX1276IoIrqInit+0x164>)
 8005bd6:	f7fd fc95 	bl	8003504 <log_1>
}
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
 8005bdc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8005be0:	f013 0f01 	tst.w	r3, #1
 8005be4:	d06f      	beq.n	8005cc6 <SX1276IoIrqInit+0x11a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8005be6:	2301      	movs	r3, #1
 8005be8:	fa03 fc01 	lsl.w	ip, r3, r1
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	ea43 030c 	orr.w	r3, r3, ip
 8005bf2:	6033      	str	r3, [r6, #0]
	return api->pin_configure(port, pin, flags);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4798      	blx	r3
		gpio_init_callback(&callbacks[i],
 8005bf8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005bfc:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <SX1276IoIrqInit+0x168>)
 8005bfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				   BIT(sx127x_dios[i].pin));
 8005c02:	4b42      	ldr	r3, [pc, #264]	; (8005d0c <SX1276IoIrqInit+0x160>)
 8005c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c08:	791e      	ldrb	r6, [r3, #4]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	40b3      	lsls	r3, r6
	callback->handler = handler;
 8005c0e:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <SX1276IoIrqInit+0x16c>)
 8005c10:	604a      	str	r2, [r1, #4]
	callback->pin_mask = pin_mask;
 8005c12:	608b      	str	r3, [r1, #8]
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
 8005c14:	1d23      	adds	r3, r4, #4
 8005c16:	4a41      	ldr	r2, [pc, #260]	; (8005d1c <SX1276IoIrqInit+0x170>)
 8005c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c1c:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8005c1e:	6883      	ldr	r3, [r0, #8]
	if (api->manage_callback == NULL) {
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d057      	beq.n	8005cd6 <SX1276IoIrqInit+0x12a>
	return api->manage_callback(port, callback, true);
 8005c26:	2201      	movs	r2, #1
 8005c28:	4798      	blx	r3
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	db56      	blt.n	8005cdc <SX1276IoIrqInit+0x130>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
 8005c2e:	1d23      	adds	r3, r4, #4
 8005c30:	4a3a      	ldr	r2, [pc, #232]	; (8005d1c <SX1276IoIrqInit+0x170>)
 8005c32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c36:	6858      	ldr	r0, [r3, #4]
	const struct gpio_driver_api *api =
 8005c38:	6881      	ldr	r1, [r0, #8]
	const struct gpio_driver_data *const data =
 8005c3a:	6903      	ldr	r3, [r0, #16]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2301      	movs	r3, #1
 8005c40:	40b3      	lsls	r3, r6
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
 8005c42:	421a      	tst	r2, r3
 8005c44:	d15b      	bne.n	8005cfe <SX1276IoIrqInit+0x152>
 8005c46:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
	return api->pin_interrupt_configure(port, pin, mode, trig);
 8005c4a:	698f      	ldr	r7, [r1, #24]
 8005c4c:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
 8005c50:	f402 32a0 	and.w	r2, r2, #81920	; 0x14000
 8005c54:	4631      	mov	r1, r6
 8005c56:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
 8005c58:	3401      	adds	r4, #1
 8005c5a:	2c03      	cmp	r4, #3
 8005c5c:	d8bd      	bhi.n	8005bda <SX1276IoIrqInit+0x2e>
		if (!irqHandlers[i]) {
 8005c5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f8      	beq.n	8005c58 <SX1276IoIrqInit+0xac>
		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
 8005c66:	4b29      	ldr	r3, [pc, #164]	; (8005d0c <SX1276IoIrqInit+0x160>)
 8005c68:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8005c6c:	f002 f94c 	bl	8007f08 <z_impl_device_get_binding>
 8005c70:	1d23      	adds	r3, r4, #4
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <SX1276IoIrqInit+0x170>)
 8005c74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c78:	6058      	str	r0, [r3, #4]
		if (dev_data.dio_dev[i] == NULL) {
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d09a      	beq.n	8005bb4 <SX1276IoIrqInit+0x8>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
 8005c7e:	4e27      	ldr	r6, [pc, #156]	; (8005d1c <SX1276IoIrqInit+0x170>)
 8005c80:	1ca0      	adds	r0, r4, #2
 8005c82:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8005c86:	4926      	ldr	r1, [pc, #152]	; (8005d20 <SX1276IoIrqInit+0x174>)
 8005c88:	3004      	adds	r0, #4
 8005c8a:	f007 f92d 	bl	800cee8 <k_work_init>
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8005c8e:	1d23      	adds	r3, r4, #4
 8005c90:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8005c94:	6870      	ldr	r0, [r6, #4]
 8005c96:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <SX1276IoIrqInit+0x160>)
 8005c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c9c:	7919      	ldrb	r1, [r3, #4]
				   | sx127x_dios[i].flags);
 8005c9e:	795b      	ldrb	r3, [r3, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
 8005ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	const struct gpio_driver_api *api =
 8005ca8:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
 8005caa:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
 8005cac:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	d093      	beq.n	8005bdc <SX1276IoIrqInit+0x30>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
 8005cb4:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8005cb8:	d090      	beq.n	8005bdc <SX1276IoIrqInit+0x30>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8005cba:	f013 0f01 	tst.w	r3, #1
 8005cbe:	d08d      	beq.n	8005bdc <SX1276IoIrqInit+0x30>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
 8005cc0:	f483 6340 	eor.w	r3, r3, #3072	; 0xc00
 8005cc4:	e78a      	b.n	8005bdc <SX1276IoIrqInit+0x30>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	fa03 fc01 	lsl.w	ip, r3, r1
 8005ccc:	6833      	ldr	r3, [r6, #0]
 8005cce:	ea23 030c 	bic.w	r3, r3, ip
 8005cd2:	6033      	str	r3, [r6, #0]
 8005cd4:	e78e      	b.n	8005bf4 <SX1276IoIrqInit+0x48>
		return -ENOTSUP;
 8005cd6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005cda:	e7a6      	b.n	8005c2a <SX1276IoIrqInit+0x7e>
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <SX1276IoIrqInit+0x158>)
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <SX1276IoIrqInit+0x15c>)
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set gpio callback.");
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f362 0102 	bfi	r1, r2, #0, #3
 8005cee:	f36f 01c5 	bfc	r1, #3, #3
 8005cf2:	f363 118f 	bfi	r1, r3, #6, #10
 8005cf6:	480b      	ldr	r0, [pc, #44]	; (8005d24 <SX1276IoIrqInit+0x178>)
 8005cf8:	f7fd fbda 	bl	80034b0 <log_0>
			return;
 8005cfc:	e76d      	b.n	8005bda <SX1276IoIrqInit+0x2e>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
 8005cfe:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8005d02:	e7a2      	b.n	8005c4a <SX1276IoIrqInit+0x9e>
 8005d04:	0800e038 	.word	0x0800e038
 8005d08:	0800e008 	.word	0x0800e008
 8005d0c:	0800ef2c 	.word	0x0800ef2c
 8005d10:	0800ed10 	.word	0x0800ed10
 8005d14:	20000b30 	.word	0x20000b30
 8005d18:	08005af5 	.word	0x08005af5
 8005d1c:	20000b60 	.word	0x20000b60
 8005d20:	08005a85 	.word	0x08005a85
 8005d24:	0800ed8c 	.word	0x0800ed8c

08005d28 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
 8005d2c:	b2c0      	uxtb	r0, r0
 8005d2e:	f006 fd88 	bl	800c842 <sx127x_read>
	if (ret < 0) {
 8005d32:	2800      	cmp	r0, #0
 8005d34:	db00      	blt.n	8005d38 <SX1276ReadBuffer+0x10>
		LOG_ERR("Unable to read address: 0x%x", addr);
	}
}
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <SX1276ReadBuffer+0x34>)
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <SX1276ReadBuffer+0x38>)
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read address: 0x%x", addr);
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	2101      	movs	r1, #1
 8005d46:	f361 0202 	bfi	r2, r1, #0, #3
 8005d4a:	f36f 02c5 	bfc	r2, #3, #3
 8005d4e:	f363 128f 	bfi	r2, r3, #6, #10
 8005d52:	4621      	mov	r1, r4
 8005d54:	4803      	ldr	r0, [pc, #12]	; (8005d64 <SX1276ReadBuffer+0x3c>)
 8005d56:	f7fd fbd5 	bl	8003504 <log_1>
}
 8005d5a:	e7ec      	b.n	8005d36 <SX1276ReadBuffer+0xe>
 8005d5c:	0800e038 	.word	0x0800e038
 8005d60:	0800e008 	.word	0x0800e008
 8005d64:	0800edac 	.word	0x0800edac

08005d68 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
 8005d68:	b530      	push	{r4, r5, lr}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	4864      	ldr	r0, [pc, #400]	; (8005f00 <sx127x_lora_init+0x198>)
 8005d70:	f002 f8ca 	bl	8007f08 <z_impl_device_get_binding>
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
 8005d74:	4b63      	ldr	r3, [pc, #396]	; (8005f04 <sx127x_lora_init+0x19c>)
 8005d76:	6058      	str	r0, [r3, #4]
	if (!dev_data.spi) {
 8005d78:	b300      	cbz	r0, 8005dbc <sx127x_lora_init+0x54>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
	}

	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
 8005d7a:	4b62      	ldr	r3, [pc, #392]	; (8005f04 <sx127x_lora_init+0x19c>)
 8005d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d80:	819a      	strh	r2, [r3, #12]
	dev_data.spi_cfg.frequency = DT_INST_PROP(0, spi_max_frequency);
 8005d82:	4a61      	ldr	r2, [pc, #388]	; (8005f08 <sx127x_lora_init+0x1a0>)
 8005d84:	609a      	str	r2, [r3, #8]
	dev_data.spi_cfg.slave = DT_INST_REG_ADDR(0);
 8005d86:	2200      	movs	r2, #0
 8005d88:	81da      	strh	r2, [r3, #14]
 8005d8a:	4860      	ldr	r0, [pc, #384]	; (8005f0c <sx127x_lora_init+0x1a4>)
 8005d8c:	f002 f8bc 	bl	8007f08 <z_impl_device_get_binding>

#if DT_INST_SPI_DEV_HAS_CS_GPIOS(0)
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
 8005d90:	4b5f      	ldr	r3, [pc, #380]	; (8005f10 <sx127x_lora_init+0x1a8>)
 8005d92:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
 8005d94:	b330      	cbz	r0, 8005de4 <sx127x_lora_init+0x7c>
		LOG_ERR("Cannot get pointer to %s device",
			DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
		return -EIO;
	}

	spi_cs.gpio_pin = GPIO_CS_PIN;
 8005d96:	4b5e      	ldr	r3, [pc, #376]	; (8005f10 <sx127x_lora_init+0x1a8>)
 8005d98:	2206      	movs	r2, #6
 8005d9a:	721a      	strb	r2, [r3, #8]
	spi_cs.gpio_dt_flags = GPIO_CS_FLAGS;
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	725a      	strb	r2, [r3, #9]
	spi_cs.delay = 0U;
 8005da0:	2200      	movs	r2, #0
 8005da2:	605a      	str	r2, [r3, #4]

	dev_data.spi_cfg.cs = &spi_cs;
 8005da4:	4857      	ldr	r0, [pc, #348]	; (8005f04 <sx127x_lora_init+0x19c>)
 8005da6:	6103      	str	r3, [r0, #16]
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
 8005da8:	f641 2307 	movw	r3, #6663	; 0x1a07
 8005dac:	4957      	ldr	r1, [pc, #348]	; (8005f0c <sx127x_lora_init+0x1a4>)
 8005dae:	f7ff fc57 	bl	8005660 <__sx12xx_configure_pin>
	if (ret) {
 8005db2:	4605      	mov	r5, r0
 8005db4:	b350      	cbz	r0, 8005e0c <sx127x_lora_init+0xa4>
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
 8005db6:	4628      	mov	r0, r5
 8005db8:	b003      	add	sp, #12
 8005dba:	bd30      	pop	{r4, r5, pc}
 8005dbc:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005dbe:	4a56      	ldr	r2, [pc, #344]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	2101      	movs	r1, #1
 8005dca:	f361 0202 	bfi	r2, r1, #0, #3
 8005dce:	f36f 02c5 	bfc	r2, #3, #3
 8005dd2:	f363 128f 	bfi	r2, r3, #6, #10
 8005dd6:	494a      	ldr	r1, [pc, #296]	; (8005f00 <sx127x_lora_init+0x198>)
 8005dd8:	4850      	ldr	r0, [pc, #320]	; (8005f1c <sx127x_lora_init+0x1b4>)
 8005dda:	f7fd fb93 	bl	8003504 <log_1>
		return -EINVAL;
 8005dde:	f06f 0515 	mvn.w	r5, #21
 8005de2:	e7e8      	b.n	8005db6 <sx127x_lora_init+0x4e>
 8005de4:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005de6:	4a4c      	ldr	r2, [pc, #304]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot get pointer to %s device",
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	2101      	movs	r1, #1
 8005df2:	f361 0202 	bfi	r2, r1, #0, #3
 8005df6:	f36f 02c5 	bfc	r2, #3, #3
 8005dfa:	f363 128f 	bfi	r2, r3, #6, #10
 8005dfe:	4943      	ldr	r1, [pc, #268]	; (8005f0c <sx127x_lora_init+0x1a4>)
 8005e00:	4846      	ldr	r0, [pc, #280]	; (8005f1c <sx127x_lora_init+0x1b4>)
 8005e02:	f7fd fb7f 	bl	8003504 <log_1>
		return -EIO;
 8005e06:	f06f 0504 	mvn.w	r5, #4
 8005e0a:	e7d4      	b.n	8005db6 <sx127x_lora_init+0x4e>
 8005e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e10:	2100      	movs	r1, #0
 8005e12:	f003 f9e1 	bl	80091d8 <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
 8005e16:	4b3b      	ldr	r3, [pc, #236]	; (8005f04 <sx127x_lora_init+0x19c>)
 8005e18:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
 8005e1a:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f013 0f01 	tst.w	r3, #1
 8005e22:	d140      	bne.n	8005ea6 <sx127x_lora_init+0x13e>
 8005e24:	462b      	mov	r3, r5
	if (value != 0)	{
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03f      	beq.n	8005eaa <sx127x_lora_init+0x142>
	const struct gpio_driver_api *api =
 8005e2a:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4798      	blx	r3
 8005e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e36:	2100      	movs	r1, #0
 8005e38:	f003 f9ce 	bl	80091d8 <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f10d 0107 	add.w	r1, sp, #7
 8005e42:	2042      	movs	r0, #66	; 0x42
 8005e44:	f006 fcfd 	bl	800c842 <sx127x_read>
	if (ret < 0) {
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	db33      	blt.n	8005eb4 <sx127x_lora_init+0x14c>
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005e4e:	4a32      	ldr	r2, [pc, #200]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	08db      	lsrs	r3, r3, #3
	LOG_INF("SX127x version 0x%02x found", regval);
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	2103      	movs	r1, #3
 8005e5a:	f361 0202 	bfi	r2, r1, #0, #3
 8005e5e:	f36f 02c5 	bfc	r2, #3, #3
 8005e62:	f363 128f 	bfi	r2, r3, #6, #10
 8005e66:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005e6a:	482d      	ldr	r0, [pc, #180]	; (8005f20 <sx127x_lora_init+0x1b8>)
 8005e6c:	f7fd fb4a 	bl	8003504 <log_1>
	ret = sx127x_antenna_configure();
 8005e70:	f006 fce0 	bl	800c834 <sx127x_antenna_configure>
	if (ret < 0) {
 8005e74:	2800      	cmp	r0, #0
 8005e76:	db30      	blt.n	8005eda <sx127x_lora_init+0x172>
	ret = sx12xx_init(dev);
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7ff fddf 	bl	8005a3c <sx12xx_init>
	if (ret < 0) {
 8005e7e:	1e04      	subs	r4, r0, #0
 8005e80:	da99      	bge.n	8005db6 <sx127x_lora_init+0x4e>
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005e84:	4a24      	ldr	r2, [pc, #144]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize SX12xx common");
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f362 0102 	bfi	r1, r2, #0, #3
 8005e94:	f36f 01c5 	bfc	r1, #3, #3
 8005e98:	f363 118f 	bfi	r1, r3, #6, #10
 8005e9c:	4821      	ldr	r0, [pc, #132]	; (8005f24 <sx127x_lora_init+0x1bc>)
 8005e9e:	f7fd fb07 	bl	80034b0 <log_0>
		return ret;
 8005ea2:	4625      	mov	r5, r4
 8005ea4:	e787      	b.n	8005db6 <sx127x_lora_init+0x4e>
		value = (value != 0) ? 0 : 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e7bd      	b.n	8005e26 <sx127x_lora_init+0xbe>
	const struct gpio_driver_api *api =
 8005eaa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4798      	blx	r3
 8005eb2:	e7be      	b.n	8005e32 <sx127x_lora_init+0xca>
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read version info");
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f362 0102 	bfi	r1, r2, #0, #3
 8005ec6:	f36f 01c5 	bfc	r1, #3, #3
 8005eca:	f363 118f 	bfi	r1, r3, #6, #10
 8005ece:	4816      	ldr	r0, [pc, #88]	; (8005f28 <sx127x_lora_init+0x1c0>)
 8005ed0:	f7fd faee 	bl	80034b0 <log_0>
		return -EIO;
 8005ed4:	f06f 0504 	mvn.w	r5, #4
 8005ed8:	e76d      	b.n	8005db6 <sx127x_lora_init+0x4e>
 8005eda:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <sx127x_lora_init+0x1ac>)
 8005edc:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <sx127x_lora_init+0x1b0>)
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to configure antenna");
 8005ee2:	f04f 0100 	mov.w	r1, #0
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f362 0102 	bfi	r1, r2, #0, #3
 8005eec:	f36f 01c5 	bfc	r1, #3, #3
 8005ef0:	f363 118f 	bfi	r1, r3, #6, #10
 8005ef4:	480d      	ldr	r0, [pc, #52]	; (8005f2c <sx127x_lora_init+0x1c4>)
 8005ef6:	f7fd fadb 	bl	80034b0 <log_0>
		return -EIO;
 8005efa:	f06f 0504 	mvn.w	r5, #4
 8005efe:	e75a      	b.n	8005db6 <sx127x_lora_init+0x4e>
 8005f00:	0800ecac 	.word	0x0800ecac
 8005f04:	20000b60 	.word	0x20000b60
 8005f08:	0007a120 	.word	0x0007a120
 8005f0c:	0800eb14 	.word	0x0800eb14
 8005f10:	20000bc4 	.word	0x20000bc4
 8005f14:	0800e038 	.word	0x0800e038
 8005f18:	0800e008 	.word	0x0800e008
 8005f1c:	0800ed10 	.word	0x0800ed10
 8005f20:	0800ede8 	.word	0x0800ede8
 8005f24:	0800ee20 	.word	0x0800ee20
 8005f28:	0800edcc 	.word	0x0800edcc
 8005f2c:	0800ee04 	.word	0x0800ee04

08005f30 <SX1276WriteBuffer>:
{
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
 8005f34:	b2c0      	uxtb	r0, r0
 8005f36:	f006 fc8b 	bl	800c850 <sx127x_write>
	if (ret < 0) {
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	db00      	blt.n	8005f40 <SX1276WriteBuffer+0x10>
}
 8005f3e:	bd10      	pop	{r4, pc}
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <SX1276WriteBuffer+0x34>)
 8005f42:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <SX1276WriteBuffer+0x38>)
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write address: 0x%x", addr);
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	f361 0202 	bfi	r2, r1, #0, #3
 8005f52:	f36f 02c5 	bfc	r2, #3, #3
 8005f56:	f363 128f 	bfi	r2, r3, #6, #10
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4803      	ldr	r0, [pc, #12]	; (8005f6c <SX1276WriteBuffer+0x3c>)
 8005f5e:	f7fd fad1 	bl	8003504 <log_1>
}
 8005f62:	e7ec      	b.n	8005f3e <SX1276WriteBuffer+0xe>
 8005f64:	0800e038 	.word	0x0800e038
 8005f68:	0800e008 	.word	0x0800e008
 8005f6c:	0800ee44 	.word	0x0800ee44

08005f70 <SX1276SetRfTxPower>:
{
 8005f70:	b530      	push	{r4, r5, lr}
 8005f72:	b083      	sub	sp, #12
 8005f74:	4605      	mov	r5, r0
	uint8_t pa_config = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t pa_dac = 0;
 8005f7c:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
 8005f80:	2201      	movs	r2, #1
 8005f82:	f10d 0106 	add.w	r1, sp, #6
 8005f86:	204d      	movs	r0, #77	; 0x4d
 8005f88:	f006 fc5b 	bl	800c842 <sx127x_read>
	if (ret < 0) {
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	db2e      	blt.n	8005fee <SX1276SetRfTxPower+0x7e>
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
 8005f90:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8005f94:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8005f98:	f88d 4006 	strb.w	r4, [sp, #6]
		power = clamp_int8(power, 2, 20);
 8005f9c:	2214      	movs	r2, #20
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	f006 fc3d 	bl	800c820 <clamp_int8>
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
 8005fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fae:	f88d 3007 	strb.w	r3, [sp, #7]
		if (power > 17) {
 8005fb2:	2811      	cmp	r0, #17
 8005fb4:	dd2c      	ble.n	8006010 <SX1276SetRfTxPower+0xa0>
			pa_dac |= SX127X_PADAC_20DBM_ON;
 8005fb6:	f044 0407 	orr.w	r4, r4, #7
 8005fba:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8005fbe:	3805      	subs	r0, #5
 8005fc0:	f000 000f 	and.w	r0, r0, #15
 8005fc4:	4318      	orrs	r0, r3
 8005fc6:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f10d 0107 	add.w	r1, sp, #7
 8005fd0:	2009      	movs	r0, #9
 8005fd2:	f006 fc3d 	bl	800c850 <sx127x_write>
	if (ret < 0) {
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	db25      	blt.n	8006026 <SX1276SetRfTxPower+0xb6>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f10d 0106 	add.w	r1, sp, #6
 8005fe0:	204d      	movs	r0, #77	; 0x4d
 8005fe2:	f006 fc35 	bl	800c850 <sx127x_write>
	if (ret < 0) {
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	db2e      	blt.n	8006048 <SX1276SetRfTxPower+0xd8>
}
 8005fea:	b003      	add	sp, #12
 8005fec:	bd30      	pop	{r4, r5, pc}
 8005fee:	4b1f      	ldr	r3, [pc, #124]	; (800606c <SX1276SetRfTxPower+0xfc>)
 8005ff0:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <SX1276SetRfTxPower+0x100>)
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to read PA dac");
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f362 0102 	bfi	r1, r2, #0, #3
 8006000:	f36f 01c5 	bfc	r1, #3, #3
 8006004:	f363 118f 	bfi	r1, r3, #6, #10
 8006008:	481a      	ldr	r0, [pc, #104]	; (8006074 <SX1276SetRfTxPower+0x104>)
 800600a:	f7fd fa51 	bl	80034b0 <log_0>
		return;
 800600e:	e7ec      	b.n	8005fea <SX1276SetRfTxPower+0x7a>
			pa_dac |= SX127X_PADAC_20DBM_OFF;
 8006010:	f044 0404 	orr.w	r4, r4, #4
 8006014:	f88d 4006 	strb.w	r4, [sp, #6]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
 8006018:	3802      	subs	r0, #2
 800601a:	f000 000f 	and.w	r0, r0, #15
 800601e:	4318      	orrs	r0, r3
 8006020:	f88d 0007 	strb.w	r0, [sp, #7]
 8006024:	e7d1      	b.n	8005fca <SX1276SetRfTxPower+0x5a>
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <SX1276SetRfTxPower+0xfc>)
 8006028:	4a11      	ldr	r2, [pc, #68]	; (8006070 <SX1276SetRfTxPower+0x100>)
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA config");
 800602e:	f04f 0100 	mov.w	r1, #0
 8006032:	2201      	movs	r2, #1
 8006034:	f362 0102 	bfi	r1, r2, #0, #3
 8006038:	f36f 01c5 	bfc	r1, #3, #3
 800603c:	f363 118f 	bfi	r1, r3, #6, #10
 8006040:	480d      	ldr	r0, [pc, #52]	; (8006078 <SX1276SetRfTxPower+0x108>)
 8006042:	f7fd fa35 	bl	80034b0 <log_0>
		return;
 8006046:	e7d0      	b.n	8005fea <SX1276SetRfTxPower+0x7a>
 8006048:	4b08      	ldr	r3, [pc, #32]	; (800606c <SX1276SetRfTxPower+0xfc>)
 800604a:	4a09      	ldr	r2, [pc, #36]	; (8006070 <SX1276SetRfTxPower+0x100>)
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to write PA dac");
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	2201      	movs	r2, #1
 8006056:	f362 0102 	bfi	r1, r2, #0, #3
 800605a:	f36f 01c5 	bfc	r1, #3, #3
 800605e:	f363 118f 	bfi	r1, r3, #6, #10
 8006062:	4806      	ldr	r0, [pc, #24]	; (800607c <SX1276SetRfTxPower+0x10c>)
 8006064:	f7fd fa24 	bl	80034b0 <log_0>
		return;
 8006068:	e7bf      	b.n	8005fea <SX1276SetRfTxPower+0x7a>
 800606a:	bf00      	nop
 800606c:	0800e038 	.word	0x0800e038
 8006070:	0800e008 	.word	0x0800e008
 8006074:	0800ee64 	.word	0x0800ee64
 8006078:	0800ee7c 	.word	0x0800ee7c
 800607c:	0800ee98 	.word	0x0800ee98

08006080 <SX1276GetDio1PinState>:
{
 8006080:	b510      	push	{r4, lr}
 8006082:	b082      	sub	sp, #8
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <SX1276GetDio1PinState+0x34>)
 8006086:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
 8006088:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
 800608a:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	a901      	add	r1, sp, #4
 8006090:	4798      	blx	r3
	if (ret == 0) {
 8006092:	4603      	mov	r3, r0
 8006094:	b918      	cbnz	r0, 800609e <SX1276GetDio1PinState+0x1e>
		*value ^= data->invert;
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	404a      	eors	r2, r1
 800609c:	9201      	str	r2, [sp, #4]
	if (ret == 0) {
 800609e:	b913      	cbnz	r3, 80060a6 <SX1276GetDio1PinState+0x26>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
 80060a0:	9b01      	ldr	r3, [sp, #4]
 80060a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dc02      	bgt.n	80060b0 <SX1276GetDio1PinState+0x30>
	return 0U;
 80060aa:	2000      	movs	r0, #0
}
 80060ac:	b002      	add	sp, #8
 80060ae:	bd10      	pop	{r4, pc}
		return 1U;
 80060b0:	2001      	movs	r0, #1
 80060b2:	e7fb      	b.n	80060ac <SX1276GetDio1PinState+0x2c>
 80060b4:	20000b60 	.word	0x20000b60

080060b8 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <TimerInsertTimer+0x28>)
 80060ba:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 80060bc:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 80060be:	e001      	b.n	80060c4 <TimerInsertTimer+0xc>
    {
        if( obj->Timestamp > next->Timestamp )
        {
            cur = next;
 80060c0:	461a      	mov	r2, r3
            next = next->Next;
 80060c2:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 80060c4:	6951      	ldr	r1, [r2, #20]
 80060c6:	b139      	cbz	r1, 80060d8 <TimerInsertTimer+0x20>
        if( obj->Timestamp > next->Timestamp )
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	f8d0 c000 	ldr.w	ip, [r0]
 80060ce:	458c      	cmp	ip, r1
 80060d0:	d8f6      	bhi.n	80060c0 <TimerInsertTimer+0x8>
        }
        else
        {
            cur->Next = obj;
 80060d2:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 80060d4:	6143      	str	r3, [r0, #20]
            return;
 80060d6:	4770      	bx	lr
        }
    }
    cur->Next = obj;
 80060d8:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	6143      	str	r3, [r0, #20]
}
 80060de:	4770      	bx	lr
 80060e0:	20000bd0 	.word	0x20000bd0

080060e4 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <TimerExists+0x18>)
 80060e6:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 80060e8:	e000      	b.n	80060ec <TimerExists+0x8>
    {
        if( cur == obj )
        {
            return true;
        }
        cur = cur->Next;
 80060ea:	695b      	ldr	r3, [r3, #20]
    while( cur != NULL )
 80060ec:	b11b      	cbz	r3, 80060f6 <TimerExists+0x12>
        if( cur == obj )
 80060ee:	4283      	cmp	r3, r0
 80060f0:	d1fb      	bne.n	80060ea <TimerExists+0x6>
            return true;
 80060f2:	2001      	movs	r0, #1
    }
    return false;
}
 80060f4:	4770      	bx	lr
    return false;
 80060f6:	2000      	movs	r0, #0
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000bd0 	.word	0x20000bd0

08006100 <TimerInsertNewHeadTimer>:
{
 8006100:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <TimerInsertNewHeadTimer+0x18>)
 8006104:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 8006106:	b10b      	cbz	r3, 800610c <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8006108:	2200      	movs	r2, #0
 800610a:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 800610c:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 800610e:	4b02      	ldr	r3, [pc, #8]	; (8006118 <TimerInsertNewHeadTimer+0x18>)
 8006110:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 8006112:	f006 fbb1 	bl	800c878 <TimerSetTimeout>
}
 8006116:	bd08      	pop	{r3, pc}
 8006118:	20000bd0 	.word	0x20000bd0

0800611c <TimerStart>:
{
 800611c:	b510      	push	{r4, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8006122:	a801      	add	r0, sp, #4
 8006124:	f006 fb6c 	bl	800c800 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006128:	b1f4      	cbz	r4, 8006168 <TimerStart+0x4c>
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff ffda 	bl	80060e4 <TimerExists>
 8006130:	b9d0      	cbnz	r0, 8006168 <TimerStart+0x4c>
    obj->Timestamp = obj->ReloadValue;
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 8006136:	2301      	movs	r3, #1
 8006138:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 800613a:	2300      	movs	r3, #0
 800613c:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <TimerStart+0x68>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	b1ab      	cbz	r3, 8006170 <TimerStart+0x54>
        elapsedTime = RtcGetTimerElapsedTime( );
 8006144:	f7ff f9d6 	bl	80054f4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	4418      	add	r0, r3
 800614c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <TimerStart+0x68>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4298      	cmp	r0, r3
 8006156:	d211      	bcs.n	800617c <TimerStart+0x60>
            TimerInsertNewHeadTimer( obj );
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ffd1 	bl	8006100 <TimerInsertNewHeadTimer>
    CRITICAL_SECTION_END( );
 800615e:	a801      	add	r0, sp, #4
 8006160:	f006 fb58 	bl	800c814 <BoardCriticalSectionEnd>
}
 8006164:	b002      	add	sp, #8
 8006166:	bd10      	pop	{r4, pc}
        CRITICAL_SECTION_END( );
 8006168:	a801      	add	r0, sp, #4
 800616a:	f006 fb53 	bl	800c814 <BoardCriticalSectionEnd>
        return;
 800616e:	e7f9      	b.n	8006164 <TimerStart+0x48>
        RtcSetTimerContext( );
 8006170:	f7ff f9ec 	bl	800554c <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ffc3 	bl	8006100 <TimerInsertNewHeadTimer>
 800617a:	e7f0      	b.n	800615e <TimerStart+0x42>
            TimerInsertTimer( obj );
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ff9b 	bl	80060b8 <TimerInsertTimer>
 8006182:	e7ec      	b.n	800615e <TimerStart+0x42>
 8006184:	20000bd0 	.word	0x20000bd0

08006188 <TimerIrqHandler>:
{
 8006188:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
 800618a:	f7ff f9eb 	bl	8005564 <RtcGetTimerContext>
 800618e:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
 8006190:	f7ff f9dc 	bl	800554c <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 8006194:	eba0 0c05 	sub.w	ip, r0, r5
    if( TimerListHead != NULL )
 8006198:	4b1c      	ldr	r3, [pc, #112]	; (800620c <TimerIrqHandler+0x84>)
 800619a:	681e      	ldr	r6, [r3, #0]
 800619c:	b16e      	cbz	r6, 80061ba <TimerIrqHandler+0x32>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800619e:	4632      	mov	r2, r6
 80061a0:	e002      	b.n	80061a8 <TimerIrqHandler+0x20>
                next->Timestamp = 0;
 80061a2:	2100      	movs	r1, #0
 80061a4:	6019      	str	r1, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80061a6:	6952      	ldr	r2, [r2, #20]
 80061a8:	6953      	ldr	r3, [r2, #20]
 80061aa:	b133      	cbz	r3, 80061ba <TimerIrqHandler+0x32>
            if( next->Timestamp > deltaContext )
 80061ac:	6819      	ldr	r1, [r3, #0]
 80061ae:	4561      	cmp	r1, ip
 80061b0:	d9f7      	bls.n	80061a2 <TimerIrqHandler+0x1a>
                next->Timestamp -= deltaContext;
 80061b2:	1a2c      	subs	r4, r5, r0
 80061b4:	4421      	add	r1, r4
 80061b6:	6019      	str	r1, [r3, #0]
 80061b8:	e7f5      	b.n	80061a6 <TimerIrqHandler+0x1e>
    if ( TimerListHead != NULL )
 80061ba:	b146      	cbz	r6, 80061ce <TimerIrqHandler+0x46>
        TimerListHead = TimerListHead->Next;
 80061bc:	6972      	ldr	r2, [r6, #20]
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <TimerIrqHandler+0x84>)
 80061c0:	601a      	str	r2, [r3, #0]
        cur->IsStarted = false;
 80061c2:	2300      	movs	r3, #0
 80061c4:	7233      	strb	r3, [r6, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80061c6:	68f3      	ldr	r3, [r6, #12]
 80061c8:	b1a3      	cbz	r3, 80061f4 <TimerIrqHandler+0x6c>
 80061ca:	6930      	ldr	r0, [r6, #16]
 80061cc:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <TimerIrqHandler+0x84>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	b18b      	cbz	r3, 80061f8 <TimerIrqHandler+0x70>
 80061d4:	681c      	ldr	r4, [r3, #0]
 80061d6:	f7ff f98d 	bl	80054f4 <RtcGetTimerElapsedTime>
 80061da:	4284      	cmp	r4, r0
 80061dc:	d20c      	bcs.n	80061f8 <TimerIrqHandler+0x70>
        cur = TimerListHead;
 80061de:	4a0b      	ldr	r2, [pc, #44]	; (800620c <TimerIrqHandler+0x84>)
 80061e0:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 80061e2:	6959      	ldr	r1, [r3, #20]
 80061e4:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 80061e6:	2200      	movs	r2, #0
 80061e8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	b11a      	cbz	r2, 80061f6 <TimerIrqHandler+0x6e>
 80061ee:	6918      	ldr	r0, [r3, #16]
 80061f0:	4790      	blx	r2
 80061f2:	e7ec      	b.n	80061ce <TimerIrqHandler+0x46>
        ExecuteCallBack( cur->Callback, cur->Context );
 80061f4:	e7fe      	b.n	80061f4 <TimerIrqHandler+0x6c>
        ExecuteCallBack( cur->Callback, cur->Context );
 80061f6:	e7fe      	b.n	80061f6 <TimerIrqHandler+0x6e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <TimerIrqHandler+0x84>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	b108      	cbz	r0, 8006202 <TimerIrqHandler+0x7a>
 80061fe:	7a43      	ldrb	r3, [r0, #9]
 8006200:	b103      	cbz	r3, 8006204 <TimerIrqHandler+0x7c>
}
 8006202:	bd70      	pop	{r4, r5, r6, pc}
        TimerSetTimeout( TimerListHead );
 8006204:	f006 fb38 	bl	800c878 <TimerSetTimeout>
}
 8006208:	e7fb      	b.n	8006202 <TimerIrqHandler+0x7a>
 800620a:	bf00      	nop
 800620c:	20000bd0 	.word	0x20000bd0

08006210 <TimerStop>:
{
 8006210:	b510      	push	{r4, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
 8006216:	a801      	add	r0, sp, #4
 8006218:	f006 faf2 	bl	800c800 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
 800621c:	4b1b      	ldr	r3, [pc, #108]	; (800628c <TimerStop+0x7c>)
 800621e:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006220:	b15a      	cbz	r2, 800623a <TimerStop+0x2a>
 8006222:	b154      	cbz	r4, 800623a <TimerStop+0x2a>
    obj->IsStarted = false;
 8006224:	2300      	movs	r3, #0
 8006226:	7223      	strb	r3, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
 8006228:	42a2      	cmp	r2, r4
 800622a:	d00a      	beq.n	8006242 <TimerStop+0x32>
    TimerEvent_t* cur = TimerListHead;
 800622c:	4613      	mov	r3, r2
        while( cur != NULL )
 800622e:	b32b      	cbz	r3, 800627c <TimerStop+0x6c>
            if( cur == obj )
 8006230:	42a3      	cmp	r3, r4
 8006232:	d020      	beq.n	8006276 <TimerStop+0x66>
                prev = cur;
 8006234:	461a      	mov	r2, r3
                cur = cur->Next;
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	e7f9      	b.n	800622e <TimerStop+0x1e>
        CRITICAL_SECTION_END( );
 800623a:	a801      	add	r0, sp, #4
 800623c:	f006 faea 	bl	800c814 <BoardCriticalSectionEnd>
        return;
 8006240:	e01f      	b.n	8006282 <TimerStop+0x72>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006242:	7a53      	ldrb	r3, [r2, #9]
 8006244:	b173      	cbz	r3, 8006264 <TimerStop+0x54>
            TimerListHead->IsNext2Expire = false;
 8006246:	2300      	movs	r3, #0
 8006248:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 800624a:	6950      	ldr	r0, [r2, #20]
 800624c:	b120      	cbz	r0, 8006258 <TimerStop+0x48>
                TimerListHead = TimerListHead->Next;
 800624e:	4b0f      	ldr	r3, [pc, #60]	; (800628c <TimerStop+0x7c>)
 8006250:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 8006252:	f006 fb11 	bl	800c878 <TimerSetTimeout>
 8006256:	e011      	b.n	800627c <TimerStop+0x6c>
                RtcStopAlarm( );
 8006258:	f7ff f95a 	bl	8005510 <RtcStopAlarm>
                TimerListHead = NULL;
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <TimerStop+0x7c>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e00b      	b.n	800627c <TimerStop+0x6c>
            if( TimerListHead->Next != NULL )
 8006264:	6953      	ldr	r3, [r2, #20]
 8006266:	b113      	cbz	r3, 800626e <TimerStop+0x5e>
                TimerListHead = TimerListHead->Next;
 8006268:	4a08      	ldr	r2, [pc, #32]	; (800628c <TimerStop+0x7c>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e006      	b.n	800627c <TimerStop+0x6c>
                TimerListHead = NULL;
 800626e:	4b07      	ldr	r3, [pc, #28]	; (800628c <TimerStop+0x7c>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e002      	b.n	800627c <TimerStop+0x6c>
                if( cur->Next != NULL )
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	b12b      	cbz	r3, 8006286 <TimerStop+0x76>
                    prev->Next = cur;
 800627a:	6153      	str	r3, [r2, #20]
    CRITICAL_SECTION_END( );
 800627c:	a801      	add	r0, sp, #4
 800627e:	f006 fac9 	bl	800c814 <BoardCriticalSectionEnd>
}
 8006282:	b002      	add	sp, #8
 8006284:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 8006286:	2300      	movs	r3, #0
 8006288:	6153      	str	r3, [r2, #20]
 800628a:	e7f7      	b.n	800627c <TimerStop+0x6c>
 800628c:	20000bd0 	.word	0x20000bd0

08006290 <SX1276ConvertFreqInHzToPllStep>:
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8006290:	4908      	ldr	r1, [pc, #32]	; (80062b4 <SX1276ConvertFreqInHzToPllStep+0x24>)
 8006292:	fba1 3200 	umull	r3, r2, r1, r0
 8006296:	0b12      	lsrs	r2, r2, #12
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8006298:	f643 5309 	movw	r3, #15625	; 0x3d09
 800629c:	fb03 0012 	mls	r0, r3, r2, r0
 80062a0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80062a4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80062a8:	fba1 1303 	umull	r1, r3, r1, r3
 80062ac:	0b1b      	lsrs	r3, r3, #12
             SX1276_PLL_STEP_SCALED );
}
 80062ae:	eb03 2002 	add.w	r0, r3, r2, lsl #8
 80062b2:	4770      	bx	lr
 80062b4:	431bde83 	.word	0x431bde83

080062b8 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80062b8:	2300      	movs	r3, #0
 80062ba:	e008      	b.n	80062ce <GetFskBandwidthRegValue+0x16>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 80062bc:	e7fe      	b.n	80062bc <GetFskBandwidthRegValue+0x4>
            return FskBandwidths[i].RegValue;
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <GetFskBandwidthRegValue+0x4c>)
 80062c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80062c4:	7908      	ldrb	r0, [r1, #4]
}
 80062c6:	bc10      	pop	{r4}
 80062c8:	4770      	bx	lr
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80062ca:	3301      	adds	r3, #1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b14      	cmp	r3, #20
 80062d0:	d817      	bhi.n	8006302 <GetFskBandwidthRegValue+0x4a>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80062d2:	4619      	mov	r1, r3
 80062d4:	4a0b      	ldr	r2, [pc, #44]	; (8006304 <GetFskBandwidthRegValue+0x4c>)
 80062d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80062da:	4282      	cmp	r2, r0
 80062dc:	d8f5      	bhi.n	80062ca <GetFskBandwidthRegValue+0x12>
{
 80062de:	b410      	push	{r4}
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	4c08      	ldr	r4, [pc, #32]	; (8006304 <GetFskBandwidthRegValue+0x4c>)
 80062e4:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80062e8:	4282      	cmp	r2, r0
 80062ea:	d8e8      	bhi.n	80062be <GetFskBandwidthRegValue+0x6>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80062ec:	3301      	adds	r3, #1
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b14      	cmp	r3, #20
 80062f2:	d8e3      	bhi.n	80062bc <GetFskBandwidthRegValue+0x4>
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 80062f4:	4619      	mov	r1, r3
 80062f6:	4a03      	ldr	r2, [pc, #12]	; (8006304 <GetFskBandwidthRegValue+0x4c>)
 80062f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80062fc:	4282      	cmp	r2, r0
 80062fe:	d8f5      	bhi.n	80062ec <GetFskBandwidthRegValue+0x34>
 8006300:	e7ee      	b.n	80062e0 <GetFskBandwidthRegValue+0x28>
    while( 1 );
 8006302:	e7fe      	b.n	8006302 <GetFskBandwidthRegValue+0x4a>
 8006304:	0800ef60 	.word	0x0800ef60

08006308 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8006308:	2801      	cmp	r0, #1
 800630a:	d006      	beq.n	800631a <SX1276GetLoRaBandwidthInHz+0x12>
 800630c:	2802      	cmp	r0, #2
 800630e:	d006      	beq.n	800631e <SX1276GetLoRaBandwidthInHz+0x16>
 8006310:	b108      	cbz	r0, 8006316 <SX1276GetLoRaBandwidthInHz+0xe>
 8006312:	2000      	movs	r0, #0
        bandwidthInHz = 500000UL;
        break;
    }

    return bandwidthInHz;
}
 8006314:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 8006316:	4803      	ldr	r0, [pc, #12]	; (8006324 <SX1276GetLoRaBandwidthInHz+0x1c>)
 8006318:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 800631a:	4803      	ldr	r0, [pc, #12]	; (8006328 <SX1276GetLoRaBandwidthInHz+0x20>)
 800631c:	4770      	bx	lr
        bandwidthInHz = 500000UL;
 800631e:	4803      	ldr	r0, [pc, #12]	; (800632c <SX1276GetLoRaBandwidthInHz+0x24>)
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	0001e848 	.word	0x0001e848
 8006328:	0003d090 	.word	0x0003d090
 800632c:	0007a120 	.word	0x0007a120

08006330 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <SX1276OnDio4Irq+0x1c>)
 8006332:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006336:	b93b      	cbnz	r3, 8006348 <SX1276OnDio4Irq+0x18>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <SX1276OnDio4Irq+0x1c>)
 800633a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800633e:	b91b      	cbnz	r3, 8006348 <SX1276OnDio4Irq+0x18>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <SX1276OnDio4Irq+0x1c>)
 8006342:	2201      	movs	r2, #1
 8006344:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000d08 	.word	0x20000d08

08006350 <SX1276GetStatus>:
}
 8006350:	4b01      	ldr	r3, [pc, #4]	; (8006358 <SX1276GetStatus+0x8>)
 8006352:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
 8006356:	4770      	bx	lr
 8006358:	20000d08 	.word	0x20000d08

0800635c <SX1276SetChannel>:
{
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4605      	mov	r5, r0
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8006360:	f7ff ff96 	bl	8006290 <SX1276ConvertFreqInHzToPllStep>
 8006364:	4604      	mov	r4, r0
    SX1276.Settings.Channel = freq;
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <SX1276SetChannel+0x30>)
 8006368:	f8c3 50e4 	str.w	r5, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800636c:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8006370:	2006      	movs	r0, #6
 8006372:	f006 fb78 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8006376:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800637a:	2007      	movs	r0, #7
 800637c:	f006 fb73 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8006380:	b2e1      	uxtb	r1, r4
 8006382:	2008      	movs	r0, #8
 8006384:	f006 fb6f 	bl	800ca66 <SX1276Write>
}
 8006388:	bd38      	pop	{r3, r4, r5, pc}
 800638a:	bf00      	nop
 800638c:	20000d08 	.word	0x20000d08

08006390 <SX1276OnDio3Irq>:
{
 8006390:	b508      	push	{r3, lr}
    switch( SX1276.Settings.Modem )
 8006392:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <SX1276OnDio3Irq+0x54>)
 8006394:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d000      	beq.n	800639e <SX1276OnDio3Irq+0xe>
}
 800639c:	bd08      	pop	{r3, pc}
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800639e:	2012      	movs	r0, #18
 80063a0:	f006 fb6d 	bl	800ca7e <SX1276Read>
 80063a4:	f010 0f01 	tst.w	r0, #1
 80063a8:	d00d      	beq.n	80063c6 <SX1276OnDio3Irq+0x36>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80063aa:	2105      	movs	r1, #5
 80063ac:	2012      	movs	r0, #18
 80063ae:	f006 fb5a 	bl	800ca66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <SX1276OnDio3Irq+0x58>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <SX1276OnDio3Irq+0xc>
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ed      	beq.n	800639c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( true );
 80063c0:	2001      	movs	r0, #1
 80063c2:	4798      	blx	r3
 80063c4:	e7ea      	b.n	800639c <SX1276OnDio3Irq+0xc>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80063c6:	2104      	movs	r1, #4
 80063c8:	2012      	movs	r0, #18
 80063ca:	f006 fb4c 	bl	800ca66 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <SX1276OnDio3Irq+0x58>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0e2      	beq.n	800639c <SX1276OnDio3Irq+0xc>
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0df      	beq.n	800639c <SX1276OnDio3Irq+0xc>
                RadioEvents->CadDone( false );
 80063dc:	2000      	movs	r0, #0
 80063de:	4798      	blx	r3
}
 80063e0:	e7dc      	b.n	800639c <SX1276OnDio3Irq+0xc>
 80063e2:	bf00      	nop
 80063e4:	20000d08 	.word	0x20000d08
 80063e8:	20000bd4 	.word	0x20000bd4

080063ec <SX1276OnDio2Irq>:
{
 80063ec:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 80063f0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d002      	beq.n	80063fe <SX1276OnDio2Irq+0x12>
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d051      	beq.n	80064a0 <SX1276OnDio2Irq+0xb4>
}
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
            switch( SX1276.Settings.Modem )
 80063fe:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 8006400:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006404:	b1c3      	cbz	r3, 8006438 <SX1276OnDio2Irq+0x4c>
 8006406:	2b01      	cmp	r3, #1
 8006408:	d1f8      	bne.n	80063fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800640a:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 800640c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f3      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8006414:	2102      	movs	r1, #2
 8006416:	2012      	movs	r0, #18
 8006418:	f006 fb25 	bl	800ca66 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800641c:	4b2f      	ldr	r3, [pc, #188]	; (80064dc <SX1276OnDio2Irq+0xf0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0eb      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
 8006424:	695c      	ldr	r4, [r3, #20]
 8006426:	2c00      	cmp	r4, #0
 8006428:	d0e8      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800642a:	201c      	movs	r0, #28
 800642c:	f006 fb27 	bl	800ca7e <SX1276Read>
 8006430:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006434:	47a0      	blx	r4
 8006436:	e7e1      	b.n	80063fc <SX1276OnDio2Irq+0x10>
                if( SX1276.DIO4.port == NULL )
 8006438:	4b27      	ldr	r3, [pc, #156]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 800643a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643c:	b35b      	cbz	r3, 8006496 <SX1276OnDio2Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800643e:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 8006440:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0d9      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
 8006448:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 800644a:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d4      	bne.n	80063fc <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
 8006452:	4823      	ldr	r0, [pc, #140]	; (80064e0 <SX1276OnDio2Irq+0xf4>)
 8006454:	f7ff fedc 	bl	8006210 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8006458:	4c1f      	ldr	r4, [pc, #124]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 800645a:	2301      	movs	r3, #1
 800645c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006460:	2011      	movs	r0, #17
 8006462:	f006 fb0c 	bl	800ca7e <SX1276Read>
 8006466:	0843      	lsrs	r3, r0, #1
 8006468:	425b      	negs	r3, r3
 800646a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800646e:	201b      	movs	r0, #27
 8006470:	f006 fb05 	bl	800ca7e <SX1276Read>
 8006474:	0205      	lsls	r5, r0, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8006476:	201c      	movs	r0, #28
 8006478:	f006 fb01 	bl	800ca7e <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800647c:	4328      	orrs	r0, r5
 800647e:	f006 fa45 	bl	800c90c <SX1276ConvertPllStepToFreqInHz>
 8006482:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8006486:	200c      	movs	r0, #12
 8006488:	f006 faf9 	bl	800ca7e <SX1276Read>
 800648c:	f3c0 1047 	ubfx	r0, r0, #5, #8
 8006490:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
 8006494:	e7b2      	b.n	80063fc <SX1276OnDio2Irq+0x10>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8006496:	4b10      	ldr	r3, [pc, #64]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 8006498:	2201      	movs	r2, #1
 800649a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 800649e:	e7ce      	b.n	800643e <SX1276OnDio2Irq+0x52>
            switch( SX1276.Settings.Modem )
 80064a0:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 80064a2:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d1a8      	bne.n	80063fc <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <SX1276OnDio2Irq+0xec>)
 80064ac:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0a3      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80064b4:	2102      	movs	r1, #2
 80064b6:	2012      	movs	r0, #18
 80064b8:	f006 fad5 	bl	800ca66 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <SX1276OnDio2Irq+0xf0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d09b      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
 80064c4:	695c      	ldr	r4, [r3, #20]
 80064c6:	2c00      	cmp	r4, #0
 80064c8:	d098      	beq.n	80063fc <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80064ca:	201c      	movs	r0, #28
 80064cc:	f006 fad7 	bl	800ca7e <SX1276Read>
 80064d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80064d4:	47a0      	blx	r4
}
 80064d6:	e791      	b.n	80063fc <SX1276OnDio2Irq+0x10>
 80064d8:	20000d08 	.word	0x20000d08
 80064dc:	20000bd4 	.word	0x20000bd4
 80064e0:	20000bd8 	.word	0x20000bd8

080064e4 <SX1276OnDio1Irq>:
{
 80064e4:	b508      	push	{r3, lr}
    switch( SX1276.Settings.State )
 80064e6:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80064e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <SX1276OnDio1Irq+0x12>
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d063      	beq.n	80065bc <SX1276OnDio1Irq+0xd8>
}
 80064f4:	bd08      	pop	{r3, pc}
            switch( SX1276.Settings.Modem )
 80064f6:	4b48      	ldr	r3, [pc, #288]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80064f8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80064fc:	b1cb      	cbz	r3, 8006532 <SX1276OnDio1Irq+0x4e>
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d1f8      	bne.n	80064f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8006502:	f7ff fdbd 	bl	8006080 <SX1276GetDio1PinState>
 8006506:	2800      	cmp	r0, #0
 8006508:	d0f4      	beq.n	80064f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
 800650a:	4844      	ldr	r0, [pc, #272]	; (800661c <SX1276OnDio1Irq+0x138>)
 800650c:	f7ff fe80 	bl	8006210 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8006510:	2180      	movs	r1, #128	; 0x80
 8006512:	2012      	movs	r0, #18
 8006514:	f006 faa7 	bl	800ca66 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8006518:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <SX1276OnDio1Irq+0x134>)
 800651a:	2200      	movs	r2, #0
 800651c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006520:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <SX1276OnDio1Irq+0x13c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0e5      	beq.n	80064f4 <SX1276OnDio1Irq+0x10>
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0e2      	beq.n	80064f4 <SX1276OnDio1Irq+0x10>
                    RadioEvents->RxTimeout( );
 800652e:	4798      	blx	r3
 8006530:	e7e0      	b.n	80064f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
 8006532:	f7ff fda5 	bl	8006080 <SX1276GetDio1PinState>
 8006536:	2800      	cmp	r0, #0
 8006538:	d0dc      	beq.n	80064f4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
 800653a:	483a      	ldr	r0, [pc, #232]	; (8006624 <SX1276OnDio1Irq+0x140>)
 800653c:	f7ff fe68 	bl	8006210 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8006540:	4b35      	ldr	r3, [pc, #212]	; (8006618 <SX1276OnDio1Irq+0x134>)
 8006542:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
 8006546:	b95b      	cbnz	r3, 8006560 <SX1276OnDio1Irq+0x7c>
 8006548:	4b33      	ldr	r3, [pc, #204]	; (8006618 <SX1276OnDio1Irq+0x134>)
 800654a:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800654e:	b93b      	cbnz	r3, 8006560 <SX1276OnDio1Irq+0x7c>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8006550:	4b31      	ldr	r3, [pc, #196]	; (8006618 <SX1276OnDio1Irq+0x134>)
 8006552:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006556:	b9f3      	cbnz	r3, 8006596 <SX1276OnDio1Irq+0xb2>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8006558:	2101      	movs	r1, #1
 800655a:	4833      	ldr	r0, [pc, #204]	; (8006628 <SX1276OnDio1Irq+0x144>)
 800655c:	f006 fa43 	bl	800c9e6 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8006560:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <SX1276OnDio1Irq+0x134>)
 8006562:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 8006566:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 800656a:	1a88      	subs	r0, r1, r2
 800656c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8006570:	4298      	cmp	r0, r3
 8006572:	db17      	blt.n	80065a4 <SX1276OnDio1Irq+0xc0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8006574:	b25b      	sxtb	r3, r3
 8006576:	1e59      	subs	r1, r3, #1
 8006578:	b2c9      	uxtb	r1, r1
 800657a:	482c      	ldr	r0, [pc, #176]	; (800662c <SX1276OnDio1Irq+0x148>)
 800657c:	4410      	add	r0, r2
 800657e:	f006 fa32 	bl	800c9e6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8006582:	4a25      	ldr	r2, [pc, #148]	; (8006618 <SX1276OnDio1Irq+0x134>)
 8006584:	f892 311a 	ldrb.w	r3, [r2, #282]	; 0x11a
 8006588:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
 800658c:	440b      	add	r3, r1
 800658e:	3b01      	subs	r3, #1
 8006590:	f8a2 3118 	strh.w	r3, [r2, #280]	; 0x118
 8006594:	e7ae      	b.n	80064f4 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8006596:	2032      	movs	r0, #50	; 0x32
 8006598:	f006 fa71 	bl	800ca7e <SX1276Read>
 800659c:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <SX1276OnDio1Irq+0x134>)
 800659e:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 80065a2:	e7dd      	b.n	8006560 <SX1276OnDio1Irq+0x7c>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80065a4:	1a89      	subs	r1, r1, r2
 80065a6:	b2c9      	uxtb	r1, r1
 80065a8:	4820      	ldr	r0, [pc, #128]	; (800662c <SX1276OnDio1Irq+0x148>)
 80065aa:	4410      	add	r0, r2
 80065ac:	f006 fa1b 	bl	800c9e6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80065b0:	4b19      	ldr	r3, [pc, #100]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80065b2:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 80065b6:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80065ba:	e79b      	b.n	80064f4 <SX1276OnDio1Irq+0x10>
            switch( SX1276.Settings.Modem )
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80065be:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d196      	bne.n	80064f4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
 80065c6:	f7ff fd5b 	bl	8006080 <SX1276GetDio1PinState>
 80065ca:	2801      	cmp	r0, #1
 80065cc:	d092      	beq.n	80064f4 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80065d0:	f8b3 0116 	ldrh.w	r0, [r3, #278]	; 0x116
 80065d4:	f8b3 2118 	ldrh.w	r2, [r3, #280]	; 0x118
 80065d8:	eba0 0c02 	sub.w	ip, r0, r2
 80065dc:	f893 111b 	ldrb.w	r1, [r3, #283]	; 0x11b
 80065e0:	458c      	cmp	ip, r1
 80065e2:	dd0c      	ble.n	80065fe <SX1276OnDio1Irq+0x11a>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80065e4:	4811      	ldr	r0, [pc, #68]	; (800662c <SX1276OnDio1Irq+0x148>)
 80065e6:	4410      	add	r0, r2
 80065e8:	f006 fa04 	bl	800c9f4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <SX1276OnDio1Irq+0x134>)
 80065ee:	f893 211b 	ldrb.w	r2, [r3, #283]	; 0x11b
 80065f2:	f8b3 1118 	ldrh.w	r1, [r3, #280]	; 0x118
 80065f6:	440a      	add	r2, r1
 80065f8:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 80065fc:	e77a      	b.n	80064f4 <SX1276OnDio1Irq+0x10>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80065fe:	1a81      	subs	r1, r0, r2
 8006600:	b2c9      	uxtb	r1, r1
 8006602:	480a      	ldr	r0, [pc, #40]	; (800662c <SX1276OnDio1Irq+0x148>)
 8006604:	4410      	add	r0, r2
 8006606:	f006 f9f5 	bl	800c9f4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800660a:	4b03      	ldr	r3, [pc, #12]	; (8006618 <SX1276OnDio1Irq+0x134>)
 800660c:	f8b3 2116 	ldrh.w	r2, [r3, #278]	; 0x116
 8006610:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
}
 8006614:	e76e      	b.n	80064f4 <SX1276OnDio1Irq+0x10>
 8006616:	bf00      	nop
 8006618:	20000d08 	.word	0x20000d08
 800661c:	20000bf0 	.word	0x20000bf0
 8006620:	20000bd4 	.word	0x20000bd4
 8006624:	20000bd8 	.word	0x20000bd8
 8006628:	20000e1e 	.word	0x20000e1e
 800662c:	20000c08 	.word	0x20000c08

08006630 <SX1276OnDio0Irq>:
{
 8006630:	b510      	push	{r4, lr}
 8006632:	b082      	sub	sp, #8
    volatile uint8_t irqFlags = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
 800663a:	4bb0      	ldr	r3, [pc, #704]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 800663c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8006640:	2b01      	cmp	r3, #1
 8006642:	d004      	beq.n	800664e <SX1276OnDio0Irq+0x1e>
 8006644:	2b02      	cmp	r3, #2
 8006646:	f000 813c 	beq.w	80068c2 <SX1276OnDio0Irq+0x292>
}
 800664a:	b002      	add	sp, #8
 800664c:	bd10      	pop	{r4, pc}
            switch( SX1276.Settings.Modem )
 800664e:	4bab      	ldr	r3, [pc, #684]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006650:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006654:	b343      	cbz	r3, 80066a8 <SX1276OnDio0Irq+0x78>
 8006656:	2b01      	cmp	r3, #1
 8006658:	d1f7      	bne.n	800664a <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	2012      	movs	r0, #18
 800665e:	f006 fa02 	bl	800ca66 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8006662:	2012      	movs	r0, #18
 8006664:	f006 fa0b 	bl	800ca7e <SX1276Read>
 8006668:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800666c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006670:	f013 0f20 	tst.w	r3, #32
 8006674:	f000 80bd 	beq.w	80067f2 <SX1276OnDio0Irq+0x1c2>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8006678:	2120      	movs	r1, #32
 800667a:	2012      	movs	r0, #18
 800667c:	f006 f9f3 	bl	800ca66 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8006680:	4b9e      	ldr	r3, [pc, #632]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006682:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8006686:	b91b      	cbnz	r3, 8006690 <SX1276OnDio0Irq+0x60>
                            SX1276.Settings.State = RF_IDLE;
 8006688:	4b9c      	ldr	r3, [pc, #624]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 800668a:	2200      	movs	r2, #0
 800668c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
 8006690:	489b      	ldr	r0, [pc, #620]	; (8006900 <SX1276OnDio0Irq+0x2d0>)
 8006692:	f7ff fdbd 	bl	8006210 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006696:	4b9b      	ldr	r3, [pc, #620]	; (8006904 <SX1276OnDio0Irq+0x2d4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0d5      	beq.n	800664a <SX1276OnDio0Irq+0x1a>
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0d2      	beq.n	800664a <SX1276OnDio0Irq+0x1a>
                            RadioEvents->RxError( );
 80066a4:	4798      	blx	r3
 80066a6:	e7d0      	b.n	800664a <SX1276OnDio0Irq+0x1a>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80066a8:	4b94      	ldr	r3, [pc, #592]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80066aa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80066ae:	bb0b      	cbnz	r3, 80066f4 <SX1276OnDio0Irq+0xc4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80066b0:	4b92      	ldr	r3, [pc, #584]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80066b2:	f8b3 1116 	ldrh.w	r1, [r3, #278]	; 0x116
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d15e      	bne.n	8006778 <SX1276OnDio0Irq+0x148>
 80066ba:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d15a      	bne.n	8006778 <SX1276OnDio0Irq+0x148>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80066c2:	4b8e      	ldr	r3, [pc, #568]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80066c4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d14e      	bne.n	800676a <SX1276OnDio0Irq+0x13a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80066cc:	2101      	movs	r1, #1
 80066ce:	488e      	ldr	r0, [pc, #568]	; (8006908 <SX1276OnDio0Irq+0x2d8>)
 80066d0:	f006 f989 	bl	800c9e6 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80066d4:	4c89      	ldr	r4, [pc, #548]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80066d6:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80066da:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80066de:	1ac9      	subs	r1, r1, r3
 80066e0:	b2c9      	uxtb	r1, r1
 80066e2:	488a      	ldr	r0, [pc, #552]	; (800690c <SX1276OnDio0Irq+0x2dc>)
 80066e4:	4418      	add	r0, r3
 80066e6:	f006 f97e 	bl	800c9e6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80066ea:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 80066ee:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
 80066f2:	e04e      	b.n	8006792 <SX1276OnDio0Irq+0x162>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80066f4:	203f      	movs	r0, #63	; 0x3f
 80066f6:	f006 f9c2 	bl	800ca7e <SX1276Read>
 80066fa:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80066fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006702:	f013 0f02 	tst.w	r3, #2
 8006706:	d1d3      	bne.n	80066b0 <SX1276OnDio0Irq+0x80>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8006708:	210b      	movs	r1, #11
 800670a:	203e      	movs	r0, #62	; 0x3e
 800670c:	f006 f9ab 	bl	800ca66 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8006710:	2110      	movs	r1, #16
 8006712:	203f      	movs	r0, #63	; 0x3f
 8006714:	f006 f9a7 	bl	800ca66 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8006718:	4879      	ldr	r0, [pc, #484]	; (8006900 <SX1276OnDio0Irq+0x2d0>)
 800671a:	f7ff fd79 	bl	8006210 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800671e:	4b77      	ldr	r3, [pc, #476]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006720:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006724:	b9bb      	cbnz	r3, 8006756 <SX1276OnDio0Irq+0x126>
                            TimerStop( &RxTimeoutSyncWord );
 8006726:	487a      	ldr	r0, [pc, #488]	; (8006910 <SX1276OnDio0Irq+0x2e0>)
 8006728:	f7ff fd72 	bl	8006210 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800672c:	4b73      	ldr	r3, [pc, #460]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 800672e:	2200      	movs	r2, #0
 8006730:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8006734:	4b73      	ldr	r3, [pc, #460]	; (8006904 <SX1276OnDio0Irq+0x2d4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	b113      	cbz	r3, 8006740 <SX1276OnDio0Irq+0x110>
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	b103      	cbz	r3, 8006740 <SX1276OnDio0Irq+0x110>
                            RadioEvents->RxError( );
 800673e:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006740:	4b6e      	ldr	r3, [pc, #440]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006742:	2200      	movs	r2, #0
 8006744:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006748:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800674c:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8006750:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                        break;
 8006754:	e779      	b.n	800664a <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8006756:	200d      	movs	r0, #13
 8006758:	f006 f991 	bl	800ca7e <SX1276Read>
 800675c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006760:	b2c9      	uxtb	r1, r1
 8006762:	200d      	movs	r0, #13
 8006764:	f006 f97f 	bl	800ca66 <SX1276Write>
 8006768:	e7e4      	b.n	8006734 <SX1276OnDio0Irq+0x104>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800676a:	2032      	movs	r0, #50	; 0x32
 800676c:	f006 f987 	bl	800ca7e <SX1276Read>
 8006770:	4b62      	ldr	r3, [pc, #392]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006772:	f8a3 0116 	strh.w	r0, [r3, #278]	; 0x116
 8006776:	e7ad      	b.n	80066d4 <SX1276OnDio0Irq+0xa4>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8006778:	4c60      	ldr	r4, [pc, #384]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 800677a:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800677e:	1ac9      	subs	r1, r1, r3
 8006780:	b2c9      	uxtb	r1, r1
 8006782:	4862      	ldr	r0, [pc, #392]	; (800690c <SX1276OnDio0Irq+0x2dc>)
 8006784:	4418      	add	r0, r3
 8006786:	f006 f92e 	bl	800c9e6 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800678a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
 800678e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
 8006792:	485b      	ldr	r0, [pc, #364]	; (8006900 <SX1276OnDio0Irq+0x2d0>)
 8006794:	f7ff fd3c 	bl	8006210 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8006798:	4b58      	ldr	r3, [pc, #352]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 800679a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800679e:	b9f3      	cbnz	r3, 80067de <SX1276OnDio0Irq+0x1ae>
                    SX1276.Settings.State = RF_IDLE;
 80067a0:	4b56      	ldr	r3, [pc, #344]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
 80067a8:	4859      	ldr	r0, [pc, #356]	; (8006910 <SX1276OnDio0Irq+0x2e0>)
 80067aa:	f7ff fd31 	bl	8006210 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80067ae:	4b55      	ldr	r3, [pc, #340]	; (8006904 <SX1276OnDio0Irq+0x2d4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b14b      	cbz	r3, 80067c8 <SX1276OnDio0Irq+0x198>
 80067b4:	689c      	ldr	r4, [r3, #8]
 80067b6:	b13c      	cbz	r4, 80067c8 <SX1276OnDio0Irq+0x198>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80067b8:	4950      	ldr	r1, [pc, #320]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80067ba:	2300      	movs	r3, #0
 80067bc:	f991 210e 	ldrsb.w	r2, [r1, #270]	; 0x10e
 80067c0:	f8b1 1116 	ldrh.w	r1, [r1, #278]	; 0x116
 80067c4:	4851      	ldr	r0, [pc, #324]	; (800690c <SX1276OnDio0Irq+0x2dc>)
 80067c6:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80067c8:	4b4c      	ldr	r3, [pc, #304]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80067d0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80067d4:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
                SX1276.Settings.FskPacketHandler.Size = 0;
 80067d8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
                break;
 80067dc:	e735      	b.n	800664a <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80067de:	200d      	movs	r0, #13
 80067e0:	f006 f94d 	bl	800ca7e <SX1276Read>
 80067e4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80067e8:	b2c9      	uxtb	r1, r1
 80067ea:	200d      	movs	r0, #13
 80067ec:	f006 f93b 	bl	800ca66 <SX1276Write>
 80067f0:	e7dd      	b.n	80067ae <SX1276OnDio0Irq+0x17e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80067f2:	2019      	movs	r0, #25
 80067f4:	f006 f943 	bl	800ca7e <SX1276Read>
 80067f8:	b243      	sxtb	r3, r0
 80067fa:	3302      	adds	r3, #2
 80067fc:	109b      	asrs	r3, r3, #2
 80067fe:	4c3f      	ldr	r4, [pc, #252]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006800:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8006804:	201a      	movs	r0, #26
 8006806:	f006 f93a 	bl	800ca7e <SX1276Read>
 800680a:	b200      	sxth	r0, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800680c:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
 8006810:	2b00      	cmp	r3, #0
 8006812:	db39      	blt.n	8006888 <SX1276OnDio0Irq+0x258>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006814:	4b39      	ldr	r3, [pc, #228]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006816:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800681a:	4b3e      	ldr	r3, [pc, #248]	; (8006914 <SX1276OnDio0Irq+0x2e4>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d949      	bls.n	80068b4 <SX1276OnDio0Irq+0x284>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8006820:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006824:	389d      	subs	r0, #157	; 0x9d
 8006826:	4b35      	ldr	r3, [pc, #212]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006828:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800682c:	2013      	movs	r0, #19
 800682e:	f006 f926 	bl	800ca7e <SX1276Read>
 8006832:	4c32      	ldr	r4, [pc, #200]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006834:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8006838:	2010      	movs	r0, #16
 800683a:	f006 f920 	bl	800ca7e <SX1276Read>
 800683e:	4601      	mov	r1, r0
 8006840:	200d      	movs	r0, #13
 8006842:	f006 f910 	bl	800ca66 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8006846:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800684a:	4830      	ldr	r0, [pc, #192]	; (800690c <SX1276OnDio0Irq+0x2dc>)
 800684c:	f006 f8cb 	bl	800c9e6 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8006850:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
 8006854:	b913      	cbnz	r3, 800685c <SX1276OnDio0Irq+0x22c>
                        SX1276.Settings.State = RF_IDLE;
 8006856:	2200      	movs	r2, #0
 8006858:	f884 20e0 	strb.w	r2, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
 800685c:	4828      	ldr	r0, [pc, #160]	; (8006900 <SX1276OnDio0Irq+0x2d0>)
 800685e:	f7ff fcd7 	bl	8006210 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006862:	4b28      	ldr	r3, [pc, #160]	; (8006904 <SX1276OnDio0Irq+0x2d4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f43f aeef 	beq.w	800664a <SX1276OnDio0Irq+0x1a>
 800686c:	689c      	ldr	r4, [r3, #8]
 800686e:	2c00      	cmp	r4, #0
 8006870:	f43f aeeb 	beq.w	800664a <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8006874:	4921      	ldr	r1, [pc, #132]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 8006876:	f991 313c 	ldrsb.w	r3, [r1, #316]	; 0x13c
 800687a:	f9b1 213e 	ldrsh.w	r2, [r1, #318]	; 0x13e
 800687e:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8006882:	4822      	ldr	r0, [pc, #136]	; (800690c <SX1276OnDio0Irq+0x2dc>)
 8006884:	47a0      	blx	r4
 8006886:	e6e0      	b.n	800664a <SX1276OnDio0Irq+0x1a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006888:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 800688c:	4a21      	ldr	r2, [pc, #132]	; (8006914 <SX1276OnDio0Irq+0x2e4>)
 800688e:	4291      	cmp	r1, r2
 8006890:	d907      	bls.n	80068a2 <SX1276OnDio0Irq+0x272>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8006892:	eb00 1020 	add.w	r0, r0, r0, asr #4
 8006896:	fa03 f380 	sxtah	r3, r3, r0
 800689a:	3b9d      	subs	r3, #157	; 0x9d
 800689c:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
 80068a0:	e7c4      	b.n	800682c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80068a2:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80068a6:	fa03 f380 	sxtah	r3, r3, r0
 80068aa:	3ba4      	subs	r3, #164	; 0xa4
 80068ac:	4a13      	ldr	r2, [pc, #76]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80068ae:	f8a2 313e 	strh.w	r3, [r2, #318]	; 0x13e
 80068b2:	e7bb      	b.n	800682c <SX1276OnDio0Irq+0x1fc>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80068b4:	eb00 1020 	add.w	r0, r0, r0, asr #4
 80068b8:	38a4      	subs	r0, #164	; 0xa4
 80068ba:	4b10      	ldr	r3, [pc, #64]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80068bc:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 80068c0:	e7b4      	b.n	800682c <SX1276OnDio0Irq+0x1fc>
            TimerStop( &TxTimeoutTimer );
 80068c2:	4815      	ldr	r0, [pc, #84]	; (8006918 <SX1276OnDio0Irq+0x2e8>)
 80068c4:	f7ff fca4 	bl	8006210 <TimerStop>
            switch( SX1276.Settings.Modem )
 80068c8:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80068ca:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00e      	beq.n	80068f0 <SX1276OnDio0Irq+0x2c0>
                SX1276.Settings.State = RF_IDLE;
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <SX1276OnDio0Irq+0x2cc>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <SX1276OnDio0Irq+0x2d4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f43f aeb3 	beq.w	800664a <SX1276OnDio0Irq+0x1a>
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f43f aeaf 	beq.w	800664a <SX1276OnDio0Irq+0x1a>
                    RadioEvents->TxDone( );
 80068ec:	4798      	blx	r3
}
 80068ee:	e6ac      	b.n	800664a <SX1276OnDio0Irq+0x1a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80068f0:	2108      	movs	r1, #8
 80068f2:	2012      	movs	r0, #18
 80068f4:	f006 f8b7 	bl	800ca66 <SX1276Write>
 80068f8:	e7eb      	b.n	80068d2 <SX1276OnDio0Irq+0x2a2>
 80068fa:	bf00      	nop
 80068fc:	20000d08 	.word	0x20000d08
 8006900:	20000bf0 	.word	0x20000bf0
 8006904:	20000bd4 	.word	0x20000bd4
 8006908:	20000e1e 	.word	0x20000e1e
 800690c:	20000c08 	.word	0x20000c08
 8006910:	20000bd8 	.word	0x20000bd8
 8006914:	1f4add40 	.word	0x1f4add40
 8006918:	20000e4c 	.word	0x20000e4c

0800691c <RxChainCalibration>:
{
 800691c:	b538      	push	{r3, r4, r5, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800691e:	2009      	movs	r0, #9
 8006920:	f006 f8ad 	bl	800ca7e <SX1276Read>
 8006924:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006926:	2006      	movs	r0, #6
 8006928:	f006 f8a9 	bl	800ca7e <SX1276Read>
 800692c:	0404      	lsls	r4, r0, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800692e:	2007      	movs	r0, #7
 8006930:	f006 f8a5 	bl	800ca7e <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006934:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8006938:	2008      	movs	r0, #8
 800693a:	f006 f8a0 	bl	800ca7e <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800693e:	4320      	orrs	r0, r4
 8006940:	f005 ffe4 	bl	800c90c <SX1276ConvertPllStepToFreqInHz>
 8006944:	4604      	mov	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8006946:	2100      	movs	r1, #0
 8006948:	2009      	movs	r0, #9
 800694a:	f006 f88c 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800694e:	203b      	movs	r0, #59	; 0x3b
 8006950:	f006 f895 	bl	800ca7e <SX1276Read>
 8006954:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8006958:	b2c9      	uxtb	r1, r1
 800695a:	203b      	movs	r0, #59	; 0x3b
 800695c:	f006 f883 	bl	800ca66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006960:	203b      	movs	r0, #59	; 0x3b
 8006962:	f006 f88c 	bl	800ca7e <SX1276Read>
 8006966:	f010 0f20 	tst.w	r0, #32
 800696a:	d1f9      	bne.n	8006960 <RxChainCalibration+0x44>
    SX1276SetChannel( 868000000 );
 800696c:	480c      	ldr	r0, [pc, #48]	; (80069a0 <RxChainCalibration+0x84>)
 800696e:	f7ff fcf5 	bl	800635c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006972:	203b      	movs	r0, #59	; 0x3b
 8006974:	f006 f883 	bl	800ca7e <SX1276Read>
 8006978:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800697c:	b2c9      	uxtb	r1, r1
 800697e:	203b      	movs	r0, #59	; 0x3b
 8006980:	f006 f871 	bl	800ca66 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8006984:	203b      	movs	r0, #59	; 0x3b
 8006986:	f006 f87a 	bl	800ca7e <SX1276Read>
 800698a:	f010 0f20 	tst.w	r0, #32
 800698e:	d1f9      	bne.n	8006984 <RxChainCalibration+0x68>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8006990:	4629      	mov	r1, r5
 8006992:	2009      	movs	r0, #9
 8006994:	f006 f867 	bl	800ca66 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff fcdf 	bl	800635c <SX1276SetChannel>
}
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	33bca100 	.word	0x33bca100

080069a4 <SX1276SetSleep>:
{
 80069a4:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80069a6:	480a      	ldr	r0, [pc, #40]	; (80069d0 <SX1276SetSleep+0x2c>)
 80069a8:	f7ff fc32 	bl	8006210 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80069ac:	4809      	ldr	r0, [pc, #36]	; (80069d4 <SX1276SetSleep+0x30>)
 80069ae:	f7ff fc2f 	bl	8006210 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80069b2:	4809      	ldr	r0, [pc, #36]	; (80069d8 <SX1276SetSleep+0x34>)
 80069b4:	f7ff fc2c 	bl	8006210 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80069b8:	2000      	movs	r0, #0
 80069ba:	f006 f86c 	bl	800ca96 <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
 80069be:	2000      	movs	r0, #0
 80069c0:	f005 ff3d 	bl	800c83e <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <SX1276SetSleep+0x38>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80069cc:	bd08      	pop	{r3, pc}
 80069ce:	bf00      	nop
 80069d0:	20000bf0 	.word	0x20000bf0
 80069d4:	20000e4c 	.word	0x20000e4c
 80069d8:	20000bd8 	.word	0x20000bd8
 80069dc:	20000d08 	.word	0x20000d08

080069e0 <SX1276SetStby>:
{
 80069e0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
 80069e2:	4808      	ldr	r0, [pc, #32]	; (8006a04 <SX1276SetStby+0x24>)
 80069e4:	f7ff fc14 	bl	8006210 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80069e8:	4807      	ldr	r0, [pc, #28]	; (8006a08 <SX1276SetStby+0x28>)
 80069ea:	f7ff fc11 	bl	8006210 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80069ee:	4807      	ldr	r0, [pc, #28]	; (8006a0c <SX1276SetStby+0x2c>)
 80069f0:	f7ff fc0e 	bl	8006210 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80069f4:	2001      	movs	r0, #1
 80069f6:	f006 f84e 	bl	800ca96 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <SX1276SetStby+0x30>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006a02:	bd08      	pop	{r3, pc}
 8006a04:	20000bf0 	.word	0x20000bf0
 8006a08:	20000e4c 	.word	0x20000e4c
 8006a0c:	20000bd8 	.word	0x20000bd8
 8006a10:	20000d08 	.word	0x20000d08

08006a14 <SX1276SetTx>:
{
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
    TimerStop( &RxTimeoutTimer );
 8006a18:	4829      	ldr	r0, [pc, #164]	; (8006ac0 <SX1276SetTx+0xac>)
 8006a1a:	f7ff fbf9 	bl	8006210 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4828      	ldr	r0, [pc, #160]	; (8006ac4 <SX1276SetTx+0xb0>)
 8006a22:	f005 ff48 	bl	800c8b6 <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8006a26:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <SX1276SetTx+0xb4>)
 8006a28:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006a2c:	b163      	cbz	r3, 8006a48 <SX1276SetTx+0x34>
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d023      	beq.n	8006a7a <SX1276SetTx+0x66>
    SX1276.Settings.State = RF_TX_RUNNING;
 8006a32:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <SX1276SetTx+0xb4>)
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8006a3a:	4822      	ldr	r0, [pc, #136]	; (8006ac4 <SX1276SetTx+0xb0>)
 8006a3c:	f7ff fb6e 	bl	800611c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006a40:	2003      	movs	r0, #3
 8006a42:	f006 f828 	bl	800ca96 <SX1276SetOpMode>
}
 8006a46:	bd10      	pop	{r4, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006a48:	2040      	movs	r0, #64	; 0x40
 8006a4a:	f006 f818 	bl	800ca7e <SX1276Read>
 8006a4e:	f000 0103 	and.w	r1, r0, #3
 8006a52:	2040      	movs	r0, #64	; 0x40
 8006a54:	f006 f807 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006a58:	2041      	movs	r0, #65	; 0x41
 8006a5a:	f006 f810 	bl	800ca7e <SX1276Read>
 8006a5e:	f000 013e 	and.w	r1, r0, #62	; 0x3e
 8006a62:	2041      	movs	r0, #65	; 0x41
 8006a64:	f005 ffff 	bl	800ca66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006a68:	2035      	movs	r0, #53	; 0x35
 8006a6a:	f006 f808 	bl	800ca7e <SX1276Read>
 8006a6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <SX1276SetTx+0xb4>)
 8006a74:	f883 011a 	strb.w	r0, [r3, #282]	; 0x11a
        break;
 8006a78:	e7db      	b.n	8006a32 <SX1276SetTx+0x1e>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <SX1276SetTx+0xb4>)
 8006a7c:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006a80:	b173      	cbz	r3, 8006aa0 <SX1276SetTx+0x8c>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006a82:	21f5      	movs	r1, #245	; 0xf5
 8006a84:	2011      	movs	r0, #17
 8006a86:	f005 ffee 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006a8a:	2040      	movs	r0, #64	; 0x40
 8006a8c:	f005 fff7 	bl	800ca7e <SX1276Read>
 8006a90:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8006a94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006a98:	2040      	movs	r0, #64	; 0x40
 8006a9a:	f005 ffe4 	bl	800ca66 <SX1276Write>
 8006a9e:	e7c8      	b.n	8006a32 <SX1276SetTx+0x1e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006aa0:	21f7      	movs	r1, #247	; 0xf7
 8006aa2:	2011      	movs	r0, #17
 8006aa4:	f005 ffdf 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006aa8:	2040      	movs	r0, #64	; 0x40
 8006aaa:	f005 ffe8 	bl	800ca7e <SX1276Read>
 8006aae:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8006ab2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006ab6:	2040      	movs	r0, #64	; 0x40
 8006ab8:	f005 ffd5 	bl	800ca66 <SX1276Write>
 8006abc:	e7b9      	b.n	8006a32 <SX1276SetTx+0x1e>
 8006abe:	bf00      	nop
 8006ac0:	20000bf0 	.word	0x20000bf0
 8006ac4:	20000e4c 	.word	0x20000e4c
 8006ac8:	20000d08 	.word	0x20000d08

08006acc <SX1276Send>:
{
 8006acc:	b530      	push	{r4, r5, lr}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
 8006ad6:	4b44      	ldr	r3, [pc, #272]	; (8006be8 <SX1276Send+0x11c>)
 8006ad8:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006adc:	b133      	cbz	r3, 8006aec <SX1276Send+0x20>
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d03a      	beq.n	8006b58 <SX1276Send+0x8c>
 8006ae2:	2000      	movs	r0, #0
    SX1276SetTx( txTimeout );
 8006ae4:	f7ff ff96 	bl	8006a14 <SX1276SetTx>
}
 8006ae8:	b003      	add	sp, #12
 8006aea:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006aec:	4b3e      	ldr	r3, [pc, #248]	; (8006be8 <SX1276Send+0x11c>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
 8006af4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006af8:	f8a3 1116 	strh.w	r1, [r3, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
 8006afc:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8006b00:	b9eb      	cbnz	r3, 8006b3e <SX1276Send+0x72>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8006b02:	2101      	movs	r1, #1
 8006b04:	f10d 0007 	add.w	r0, sp, #7
 8006b08:	f005 ff74 	bl	800c9f4 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8006b0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006b10:	1e53      	subs	r3, r2, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b3f      	cmp	r3, #63	; 0x3f
 8006b16:	d816      	bhi.n	8006b46 <SX1276Send+0x7a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006b18:	4b33      	ldr	r3, [pc, #204]	; (8006be8 <SX1276Send+0x11c>)
 8006b1a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006b1e:	4d32      	ldr	r5, [pc, #200]	; (8006be8 <SX1276Send+0x11c>)
 8006b20:	f895 111b 	ldrb.w	r1, [r5, #283]	; 0x11b
 8006b24:	4620      	mov	r0, r4
 8006b26:	f005 ff65 	bl	800c9f4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006b2a:	f895 311b 	ldrb.w	r3, [r5, #283]	; 0x11b
 8006b2e:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
 8006b32:	4413      	add	r3, r2
 8006b34:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006b38:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
        break;
 8006b3c:	e7d2      	b.n	8006ae4 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006b3e:	2032      	movs	r0, #50	; 0x32
 8006b40:	f005 ff91 	bl	800ca66 <SX1276Write>
 8006b44:	e7e2      	b.n	8006b0c <SX1276Send+0x40>
                memcpy1( RxTxBuffer, buffer, size );
 8006b46:	4621      	mov	r1, r4
 8006b48:	4828      	ldr	r0, [pc, #160]	; (8006bec <SX1276Send+0x120>)
 8006b4a:	f005 fe8a 	bl	800c862 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8006b4e:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <SX1276Send+0x11c>)
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8006b56:	e7e2      	b.n	8006b1e <SX1276Send+0x52>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006b58:	4b23      	ldr	r3, [pc, #140]	; (8006be8 <SX1276Send+0x11c>)
 8006b5a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006b5e:	b353      	cbz	r3, 8006bb6 <SX1276Send+0xea>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8006b60:	2033      	movs	r0, #51	; 0x33
 8006b62:	f005 ff8c 	bl	800ca7e <SX1276Read>
 8006b66:	f000 01be 	and.w	r1, r0, #190	; 0xbe
 8006b6a:	2033      	movs	r0, #51	; 0x33
 8006b6c:	f005 ff7b 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006b70:	2119      	movs	r1, #25
 8006b72:	203b      	movs	r0, #59	; 0x3b
 8006b74:	f005 ff77 	bl	800ca66 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8006b78:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <SX1276Send+0x11c>)
 8006b7e:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006b82:	2022      	movs	r0, #34	; 0x22
 8006b84:	f005 ff6f 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8006b88:	2100      	movs	r1, #0
 8006b8a:	200e      	movs	r0, #14
 8006b8c:	f005 ff6b 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006b90:	2100      	movs	r1, #0
 8006b92:	200d      	movs	r0, #13
 8006b94:	f005 ff67 	bl	800ca66 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f005 ff70 	bl	800ca7e <SX1276Read>
 8006b9e:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
 8006ba2:	d01a      	beq.n	8006bda <SX1276Send+0x10e>
            SX1276WriteFifo( buffer, size );
 8006ba4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f005 ff23 	bl	800c9f4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006bae:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <SX1276Send+0x11c>)
 8006bb0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
        break;
 8006bb4:	e796      	b.n	8006ae4 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006bb6:	2033      	movs	r0, #51	; 0x33
 8006bb8:	f005 ff61 	bl	800ca7e <SX1276Read>
 8006bbc:	b241      	sxtb	r1, r0
 8006bbe:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8006bc2:	f041 0101 	orr.w	r1, r1, #1
 8006bc6:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8006bca:	2033      	movs	r0, #51	; 0x33
 8006bcc:	f005 ff4b 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006bd0:	211d      	movs	r1, #29
 8006bd2:	203b      	movs	r0, #59	; 0x3b
 8006bd4:	f005 ff47 	bl	800ca66 <SX1276Write>
 8006bd8:	e7ce      	b.n	8006b78 <SX1276Send+0xac>
                SX1276SetStby( );
 8006bda:	f7ff ff01 	bl	80069e0 <SX1276SetStby>
                DelayMs( 1 );
 8006bde:	2001      	movs	r0, #1
 8006be0:	f005 fe90 	bl	800c904 <DelayMs>
 8006be4:	e7de      	b.n	8006ba4 <SX1276Send+0xd8>
 8006be6:	bf00      	nop
 8006be8:	20000d08 	.word	0x20000d08
 8006bec:	20000c08 	.word	0x20000c08

08006bf0 <SX1276SetRx>:
{
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4604      	mov	r4, r0
    TimerStop( &TxTimeoutTimer );
 8006bf4:	489d      	ldr	r0, [pc, #628]	; (8006e6c <SX1276SetRx+0x27c>)
 8006bf6:	f7ff fb0b 	bl	8006210 <TimerStop>
    switch( SX1276.Settings.Modem )
 8006bfa:	4b9d      	ldr	r3, [pc, #628]	; (8006e70 <SX1276SetRx+0x280>)
 8006bfc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006c00:	b1e3      	cbz	r3, 8006c3c <SX1276SetRx+0x4c>
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d045      	beq.n	8006c92 <SX1276SetRx+0xa2>
 8006c06:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8006c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4899      	ldr	r0, [pc, #612]	; (8006e74 <SX1276SetRx+0x284>)
 8006c10:	f006 fc7a 	bl	800d508 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8006c14:	4b96      	ldr	r3, [pc, #600]	; (8006e70 <SX1276SetRx+0x280>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    if( timeout != 0 )
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	f040 8107 	bne.w	8006e30 <SX1276SetRx+0x240>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8006c22:	4b93      	ldr	r3, [pc, #588]	; (8006e70 <SX1276SetRx+0x280>)
 8006c24:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 810a 	beq.w	8006e42 <SX1276SetRx+0x252>
        if( rxContinuous == true )
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	f000 8118 	beq.w	8006e64 <SX1276SetRx+0x274>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8006c34:	2005      	movs	r0, #5
 8006c36:	f005 ff2e 	bl	800ca96 <SX1276SetOpMode>
}
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8006c3c:	4d8c      	ldr	r5, [pc, #560]	; (8006e70 <SX1276SetRx+0x280>)
 8006c3e:	f895 6102 	ldrb.w	r6, [r5, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006c42:	2040      	movs	r0, #64	; 0x40
 8006c44:	f005 ff1b 	bl	800ca7e <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006c48:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006c4c:	f041 010c 	orr.w	r1, r1, #12
 8006c50:	2040      	movs	r0, #64	; 0x40
 8006c52:	f005 ff08 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006c56:	2041      	movs	r0, #65	; 0x41
 8006c58:	f005 ff11 	bl	800ca7e <SX1276Read>
 8006c5c:	f060 013e 	orn	r1, r0, #62	; 0x3e
 8006c60:	b2c9      	uxtb	r1, r1
 8006c62:	2041      	movs	r0, #65	; 0x41
 8006c64:	f005 feff 	bl	800ca66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006c68:	2035      	movs	r0, #53	; 0x35
 8006c6a:	f005 ff08 	bl	800ca7e <SX1276Read>
 8006c6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006c72:	f885 011a 	strb.w	r0, [r5, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8006c76:	211e      	movs	r1, #30
 8006c78:	200d      	movs	r0, #13
 8006c7a:	f005 fef4 	bl	800ca66 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006c84:	f885 310d 	strb.w	r3, [r5, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006c88:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006c8c:	f8a5 3116 	strh.w	r3, [r5, #278]	; 0x116
        break;
 8006c90:	e7ba      	b.n	8006c08 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8006c92:	4b77      	ldr	r3, [pc, #476]	; (8006e70 <SX1276SetRx+0x280>)
 8006c94:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006c98:	b353      	cbz	r3, 8006cf0 <SX1276SetRx+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8006c9a:	2033      	movs	r0, #51	; 0x33
 8006c9c:	f005 feef 	bl	800ca7e <SX1276Read>
 8006ca0:	f040 0141 	orr.w	r1, r0, #65	; 0x41
 8006ca4:	b2c9      	uxtb	r1, r1
 8006ca6:	2033      	movs	r0, #51	; 0x33
 8006ca8:	f005 fedd 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8006cac:	2119      	movs	r1, #25
 8006cae:	203b      	movs	r0, #59	; 0x3b
 8006cb0:	f005 fed9 	bl	800ca66 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8006cb4:	4b6e      	ldr	r3, [pc, #440]	; (8006e70 <SX1276SetRx+0x280>)
 8006cb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	f200 8087 	bhi.w	8006dce <SX1276SetRx+0x1de>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8006cc0:	2031      	movs	r0, #49	; 0x31
 8006cc2:	f005 fedc 	bl	800ca7e <SX1276Read>
 8006cc6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006cca:	2031      	movs	r0, #49	; 0x31
 8006ccc:	f005 fecb 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	2030      	movs	r0, #48	; 0x30
 8006cd4:	f005 fec7 	bl	800ca66 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8006cd8:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <SX1276SetRx+0x280>)
 8006cda:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d87e      	bhi.n	8006de0 <SX1276SetRx+0x1f0>
 8006ce2:	e8df f003 	tbb	[pc, r3]
 8006ce6:	2417      	.short	0x2417
 8006ce8:	584b3e31 	.word	0x584b3e31
 8006cec:	6a65      	.short	0x6a65
 8006cee:	6f          	.byte	0x6f
 8006cef:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8006cf0:	2033      	movs	r0, #51	; 0x33
 8006cf2:	f005 fec4 	bl	800ca7e <SX1276Read>
 8006cf6:	b241      	sxtb	r1, r0
 8006cf8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8006cfc:	f041 0101 	orr.w	r1, r1, #1
 8006d00:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
 8006d04:	2033      	movs	r0, #51	; 0x33
 8006d06:	f005 feae 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8006d0a:	211d      	movs	r1, #29
 8006d0c:	203b      	movs	r0, #59	; 0x3b
 8006d0e:	f005 feaa 	bl	800ca66 <SX1276Write>
 8006d12:	e7cf      	b.n	8006cb4 <SX1276SetRx+0xc4>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8006d14:	2148      	movs	r1, #72	; 0x48
 8006d16:	202f      	movs	r0, #47	; 0x2f
 8006d18:	f005 fea5 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006d1c:	4b54      	ldr	r3, [pc, #336]	; (8006e70 <SX1276SetRx+0x280>)
 8006d1e:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006d22:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
 8006d26:	3002      	adds	r0, #2
 8006d28:	f7ff fb18 	bl	800635c <SX1276SetChannel>
                    break;
 8006d2c:	e058      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d2e:	2144      	movs	r1, #68	; 0x44
 8006d30:	202f      	movs	r0, #47	; 0x2f
 8006d32:	f005 fe98 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8006d36:	4b4e      	ldr	r3, [pc, #312]	; (8006e70 <SX1276SetRx+0x280>)
 8006d38:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006d3c:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8006d40:	3034      	adds	r0, #52	; 0x34
 8006d42:	f7ff fb0b 	bl	800635c <SX1276SetChannel>
                    break;
 8006d46:	e04b      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d48:	2144      	movs	r1, #68	; 0x44
 8006d4a:	202f      	movs	r0, #47	; 0x2f
 8006d4c:	f005 fe8b 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006d50:	4b47      	ldr	r3, [pc, #284]	; (8006e70 <SX1276SetRx+0x280>)
 8006d52:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006d56:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
 8006d5a:	3004      	adds	r0, #4
 8006d5c:	f7ff fafe 	bl	800635c <SX1276SetChannel>
                    break;
 8006d60:	e03e      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d62:	2144      	movs	r1, #68	; 0x44
 8006d64:	202f      	movs	r0, #47	; 0x2f
 8006d66:	f005 fe7e 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <SX1276SetRx+0x280>)
 8006d6c:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006d70:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
 8006d74:	305e      	adds	r0, #94	; 0x5e
 8006d76:	f7ff faf1 	bl	800635c <SX1276SetChannel>
                    break;
 8006d7a:	e031      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d7c:	2144      	movs	r1, #68	; 0x44
 8006d7e:	202f      	movs	r0, #47	; 0x2f
 8006d80:	f005 fe71 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8006d84:	4b3a      	ldr	r3, [pc, #232]	; (8006e70 <SX1276SetRx+0x280>)
 8006d86:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006d8a:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
 8006d8e:	3012      	adds	r0, #18
 8006d90:	f7ff fae4 	bl	800635c <SX1276SetChannel>
                    break;
 8006d94:	e024      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006d96:	2144      	movs	r1, #68	; 0x44
 8006d98:	202f      	movs	r0, #47	; 0x2f
 8006d9a:	f005 fe64 	bl	800ca66 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8006d9e:	4b34      	ldr	r3, [pc, #208]	; (8006e70 <SX1276SetRx+0x280>)
 8006da0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
 8006da4:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
 8006da8:	30c6      	adds	r0, #198	; 0xc6
 8006daa:	f7ff fad7 	bl	800635c <SX1276SetChannel>
                    break;
 8006dae:	e017      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006db0:	2140      	movs	r1, #64	; 0x40
 8006db2:	202f      	movs	r0, #47	; 0x2f
 8006db4:	f005 fe57 	bl	800ca66 <SX1276Write>
                    break;
 8006db8:	e012      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006dba:	2140      	movs	r1, #64	; 0x40
 8006dbc:	202f      	movs	r0, #47	; 0x2f
 8006dbe:	f005 fe52 	bl	800ca66 <SX1276Write>
                    break;
 8006dc2:	e00d      	b.n	8006de0 <SX1276SetRx+0x1f0>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8006dc4:	2140      	movs	r1, #64	; 0x40
 8006dc6:	202f      	movs	r0, #47	; 0x2f
 8006dc8:	f005 fe4d 	bl	800ca66 <SX1276Write>
                    break;
 8006dcc:	e008      	b.n	8006de0 <SX1276SetRx+0x1f0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8006dce:	2031      	movs	r0, #49	; 0x31
 8006dd0:	f005 fe55 	bl	800ca7e <SX1276Read>
 8006dd4:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006dd8:	b2c9      	uxtb	r1, r1
 8006dda:	2031      	movs	r0, #49	; 0x31
 8006ddc:	f005 fe43 	bl	800ca66 <SX1276Write>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006de0:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <SX1276SetRx+0x280>)
 8006de2:	f893 6132 	ldrb.w	r6, [r3, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006de6:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 8006dea:	b1a3      	cbz	r3, 8006e16 <SX1276SetRx+0x226>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006dec:	211d      	movs	r1, #29
 8006dee:	2011      	movs	r0, #17
 8006df0:	f005 fe39 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006df4:	2040      	movs	r0, #64	; 0x40
 8006df6:	f005 fe42 	bl	800ca7e <SX1276Read>
 8006dfa:	f000 0133 	and.w	r1, r0, #51	; 0x33
 8006dfe:	2040      	movs	r0, #64	; 0x40
 8006e00:	f005 fe31 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8006e04:	2100      	movs	r1, #0
 8006e06:	200f      	movs	r0, #15
 8006e08:	f005 fe2d 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	200d      	movs	r0, #13
 8006e10:	f005 fe29 	bl	800ca66 <SX1276Write>
        break;
 8006e14:	e6f8      	b.n	8006c08 <SX1276SetRx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006e16:	211f      	movs	r1, #31
 8006e18:	2011      	movs	r0, #17
 8006e1a:	f005 fe24 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006e1e:	2040      	movs	r0, #64	; 0x40
 8006e20:	f005 fe2d 	bl	800ca7e <SX1276Read>
 8006e24:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8006e28:	2040      	movs	r0, #64	; 0x40
 8006e2a:	f005 fe1c 	bl	800ca66 <SX1276Write>
 8006e2e:	e7e9      	b.n	8006e04 <SX1276SetRx+0x214>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006e30:	4d11      	ldr	r5, [pc, #68]	; (8006e78 <SX1276SetRx+0x288>)
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f005 fd3e 	bl	800c8b6 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f7ff f96e 	bl	800611c <TimerStart>
 8006e40:	e6ef      	b.n	8006c22 <SX1276SetRx+0x32>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006e42:	2005      	movs	r0, #5
 8006e44:	f005 fe27 	bl	800ca96 <SX1276SetOpMode>
        if( rxContinuous == false )
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	f47f aef6 	bne.w	8006c3a <SX1276SetRx+0x4a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006e4e:	4c0b      	ldr	r4, [pc, #44]	; (8006e7c <SX1276SetRx+0x28c>)
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <SX1276SetRx+0x280>)
 8006e52:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8006e56:	4620      	mov	r0, r4
 8006e58:	f005 fd2d 	bl	800c8b6 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f7ff f95d 	bl	800611c <TimerStart>
 8006e62:	e6ea      	b.n	8006c3a <SX1276SetRx+0x4a>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006e64:	2006      	movs	r0, #6
 8006e66:	f005 fe16 	bl	800ca96 <SX1276SetOpMode>
}
 8006e6a:	e6e6      	b.n	8006c3a <SX1276SetRx+0x4a>
 8006e6c:	20000e4c 	.word	0x20000e4c
 8006e70:	20000d08 	.word	0x20000d08
 8006e74:	20000c08 	.word	0x20000c08
 8006e78:	20000bf0 	.word	0x20000bf0
 8006e7c:	20000bd8 	.word	0x20000bd8

08006e80 <SX1276ReadRssi>:
{
 8006e80:	b508      	push	{r3, lr}
    switch( modem )
 8006e82:	b120      	cbz	r0, 8006e8e <SX1276ReadRssi+0xe>
 8006e84:	2801      	cmp	r0, #1
 8006e86:	d00a      	beq.n	8006e9e <SX1276ReadRssi+0x1e>
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006e8c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006e8e:	2011      	movs	r0, #17
 8006e90:	f005 fdf5 	bl	800ca7e <SX1276Read>
 8006e94:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8006e98:	4240      	negs	r0, r0
 8006e9a:	b200      	sxth	r0, r0
        break;
 8006e9c:	e7f6      	b.n	8006e8c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006e9e:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <SX1276ReadRssi+0x48>)
 8006ea0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8006ea4:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <SX1276ReadRssi+0x4c>)
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d906      	bls.n	8006eb8 <SX1276ReadRssi+0x38>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006eaa:	201b      	movs	r0, #27
 8006eac:	f005 fde7 	bl	800ca7e <SX1276Read>
 8006eb0:	b200      	sxth	r0, r0
 8006eb2:	389d      	subs	r0, #157	; 0x9d
 8006eb4:	b200      	sxth	r0, r0
 8006eb6:	e7e9      	b.n	8006e8c <SX1276ReadRssi+0xc>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006eb8:	201b      	movs	r0, #27
 8006eba:	f005 fde0 	bl	800ca7e <SX1276Read>
 8006ebe:	b200      	sxth	r0, r0
 8006ec0:	38a4      	subs	r0, #164	; 0xa4
 8006ec2:	b200      	sxth	r0, r0
 8006ec4:	e7e2      	b.n	8006e8c <SX1276ReadRssi+0xc>
 8006ec6:	bf00      	nop
 8006ec8:	20000d08 	.word	0x20000d08
 8006ecc:	1f4add40 	.word	0x1f4add40

08006ed0 <SX1276SetModem>:
{
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	f005 fdd2 	bl	800ca7e <SX1276Read>
 8006eda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ede:	d121      	bne.n	8006f24 <SX1276SetModem+0x54>
        SX1276.Settings.Modem = MODEM_FSK;
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <SX1276SetModem+0x88>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
    if( SX1276.Settings.Modem == modem )
 8006ee8:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <SX1276SetModem+0x88>)
 8006eea:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	d017      	beq.n	8006f22 <SX1276SetModem+0x52>
    SX1276.Settings.Modem = modem;
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <SX1276SetModem+0x88>)
 8006ef4:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
 8006ef8:	2c01      	cmp	r4, #1
 8006efa:	d018      	beq.n	8006f2e <SX1276SetModem+0x5e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006efc:	2000      	movs	r0, #0
 8006efe:	f005 fdca 	bl	800ca96 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006f02:	2001      	movs	r0, #1
 8006f04:	f005 fdbb 	bl	800ca7e <SX1276Read>
 8006f08:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f005 fdaa 	bl	800ca66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006f12:	2100      	movs	r1, #0
 8006f14:	2040      	movs	r0, #64	; 0x40
 8006f16:	f005 fda6 	bl	800ca66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006f1a:	2130      	movs	r1, #48	; 0x30
 8006f1c:	2041      	movs	r0, #65	; 0x41
 8006f1e:	f005 fda2 	bl	800ca66 <SX1276Write>
}
 8006f22:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_LORA;
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <SX1276SetModem+0x88>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8006f2c:	e7dc      	b.n	8006ee8 <SX1276SetModem+0x18>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f005 fdb1 	bl	800ca96 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006f34:	2001      	movs	r0, #1
 8006f36:	f005 fda2 	bl	800ca7e <SX1276Read>
 8006f3a:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8006f3e:	b2c9      	uxtb	r1, r1
 8006f40:	2001      	movs	r0, #1
 8006f42:	f005 fd90 	bl	800ca66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006f46:	2100      	movs	r1, #0
 8006f48:	2040      	movs	r0, #64	; 0x40
 8006f4a:	f005 fd8c 	bl	800ca66 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006f4e:	2100      	movs	r1, #0
 8006f50:	2041      	movs	r0, #65	; 0x41
 8006f52:	f005 fd88 	bl	800ca66 <SX1276Write>
        break;
 8006f56:	e7e4      	b.n	8006f22 <SX1276SetModem+0x52>
 8006f58:	20000d08 	.word	0x20000d08

08006f5c <SX1276Init>:
{
 8006f5c:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
 8006f5e:	4b19      	ldr	r3, [pc, #100]	; (8006fc4 <SX1276Init+0x68>)
 8006f60:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f62:	4c19      	ldr	r4, [pc, #100]	; (8006fc8 <SX1276Init+0x6c>)
 8006f64:	4621      	mov	r1, r4
 8006f66:	4819      	ldr	r0, [pc, #100]	; (8006fcc <SX1276Init+0x70>)
 8006f68:	f005 fc9c 	bl	800c8a4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4818      	ldr	r0, [pc, #96]	; (8006fd0 <SX1276Init+0x74>)
 8006f70:	f005 fc98 	bl	800c8a4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006f74:	4621      	mov	r1, r4
 8006f76:	4817      	ldr	r0, [pc, #92]	; (8006fd4 <SX1276Init+0x78>)
 8006f78:	f005 fc94 	bl	800c8a4 <TimerInit>
    SX1276Reset( );
 8006f7c:	f7fe fde2 	bl	8005b44 <SX1276Reset>
    RxChainCalibration( );
 8006f80:	f7ff fccc 	bl	800691c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f84:	2000      	movs	r0, #0
 8006f86:	f005 fd86 	bl	800ca96 <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
 8006f8a:	4813      	ldr	r0, [pc, #76]	; (8006fd8 <SX1276Init+0x7c>)
 8006f8c:	f7fe fe0e 	bl	8005bac <SX1276IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006f90:	2400      	movs	r4, #0
 8006f92:	e00c      	b.n	8006fae <SX1276Init+0x52>
        SX1276SetModem( RadioRegsInit[i].Modem );
 8006f94:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <SX1276Init+0x80>)
 8006f96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006f9a:	18d5      	adds	r5, r2, r3
 8006f9c:	5cd0      	ldrb	r0, [r2, r3]
 8006f9e:	f7ff ff97 	bl	8006ed0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006fa2:	78a9      	ldrb	r1, [r5, #2]
 8006fa4:	7868      	ldrb	r0, [r5, #1]
 8006fa6:	f005 fd5e 	bl	800ca66 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8006faa:	3401      	adds	r4, #1
 8006fac:	b2e4      	uxtb	r4, r4
 8006fae:	2c0f      	cmp	r4, #15
 8006fb0:	d9f0      	bls.n	8006f94 <SX1276Init+0x38>
    SX1276SetModem( MODEM_FSK );
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7ff ff8c 	bl	8006ed0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <SX1276Init+0x84>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000bd4 	.word	0x20000bd4
 8006fc8:	080075dd 	.word	0x080075dd
 8006fcc:	20000e4c 	.word	0x20000e4c
 8006fd0:	20000bf0 	.word	0x20000bf0
 8006fd4:	20000bd8 	.word	0x20000bd8
 8006fd8:	20000090 	.word	0x20000090
 8006fdc:	0800f010 	.word	0x0800f010
 8006fe0:	20000d08 	.word	0x20000d08

08006fe4 <SX1276SetRxConfig>:
{
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	4604      	mov	r4, r0
 8006fec:	9101      	str	r1, [sp, #4]
 8006fee:	4615      	mov	r5, r2
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
 8006ff6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8006ffa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8006ffe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8007002:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8007006:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 800700a:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 800700e:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
 8007010:	f7ff ff5e 	bl	8006ed0 <SX1276SetModem>
    switch( modem )
 8007014:	b124      	cbz	r4, 8007020 <SX1276SetRxConfig+0x3c>
 8007016:	2c01      	cmp	r4, #1
 8007018:	d069      	beq.n	80070ee <SX1276SetRxConfig+0x10a>
}
 800701a:	b005      	add	sp, #20
 800701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007020:	4ba0      	ldr	r3, [pc, #640]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 8007022:	9c01      	ldr	r4, [sp, #4]
 8007024:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 8007028:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800702c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007032:	f883 70fe 	strb.w	r7, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8007036:	f883 90ff 	strb.w	r9, [r3, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800703a:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800703e:	f883 b101 	strb.w	fp, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8007042:	9a02      	ldr	r2, [sp, #8]
 8007044:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007048:	f8a3 80fc 	strh.w	r8, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800704c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007050:	fb02 fa0a 	mul.w	sl, r2, sl
 8007054:	fbba f2f5 	udiv	r2, sl, r5
 8007058:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800705c:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <SX1276SetRxConfig+0x2c4>)
 800705e:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8007062:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8007066:	2002      	movs	r0, #2
 8007068:	f005 fcfd 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800706c:	b2e9      	uxtb	r1, r5
 800706e:	2003      	movs	r0, #3
 8007070:	f005 fcf9 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8007074:	4620      	mov	r0, r4
 8007076:	f7ff f91f 	bl	80062b8 <GetFskBandwidthRegValue>
 800707a:	4601      	mov	r1, r0
 800707c:	2012      	movs	r0, #18
 800707e:	f005 fcf2 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8007082:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007084:	f7ff f918 	bl	80062b8 <GetFskBandwidthRegValue>
 8007088:	4601      	mov	r1, r0
 800708a:	2013      	movs	r0, #19
 800708c:	f005 fceb 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8007090:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8007094:	2025      	movs	r0, #37	; 0x25
 8007096:	f005 fce6 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800709a:	fa5f f188 	uxtb.w	r1, r8
 800709e:	2026      	movs	r0, #38	; 0x26
 80070a0:	f005 fce1 	bl	800ca66 <SX1276Write>
            if( fixLen == 1 )
 80070a4:	b1df      	cbz	r7, 80070de <SX1276SetRxConfig+0xfa>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 80070a6:	4649      	mov	r1, r9
 80070a8:	2032      	movs	r0, #50	; 0x32
 80070aa:	f005 fcdc 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80070ae:	2030      	movs	r0, #48	; 0x30
 80070b0:	f005 fce5 	bl	800ca7e <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80070b4:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80070b8:	b1b7      	cbz	r7, 80070e8 <SX1276SetRxConfig+0x104>
 80070ba:	2300      	movs	r3, #0
 80070bc:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80070be:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 80070c2:	b2c9      	uxtb	r1, r1
 80070c4:	2030      	movs	r0, #48	; 0x30
 80070c6:	f005 fcce 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80070ca:	2031      	movs	r0, #49	; 0x31
 80070cc:	f005 fcd7 	bl	800ca7e <SX1276Read>
 80070d0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 80070d4:	b2c9      	uxtb	r1, r1
 80070d6:	2031      	movs	r0, #49	; 0x31
 80070d8:	f005 fcc5 	bl	800ca66 <SX1276Write>
        break;
 80070dc:	e79d      	b.n	800701a <SX1276SetRxConfig+0x36>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 80070de:	21ff      	movs	r1, #255	; 0xff
 80070e0:	2032      	movs	r0, #50	; 0x32
 80070e2:	f005 fcc0 	bl	800ca66 <SX1276Write>
 80070e6:	e7e2      	b.n	80070ae <SX1276SetRxConfig+0xca>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80070e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80070ec:	e7e6      	b.n	80070bc <SX1276SetRxConfig+0xd8>
            if( bandwidth > 2 )
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d900      	bls.n	80070f6 <SX1276SetRxConfig+0x112>
                while( 1 );
 80070f4:	e7fe      	b.n	80070f4 <SX1276SetRxConfig+0x110>
            bandwidth += 7;
 80070f6:	9c01      	ldr	r4, [sp, #4]
 80070f8:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80070fa:	4b6a      	ldr	r3, [pc, #424]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 80070fc:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 8007100:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 8007104:	9a03      	ldr	r2, [sp, #12]
 8007106:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800710a:	f8a3 812a 	strh.w	r8, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 800710e:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8007112:	f883 912d 	strb.w	r9, [r3, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8007116:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800711a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800711e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8007122:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8007126:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800712a:	f883 b131 	strb.w	fp, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800712e:	9a02      	ldr	r2, [sp, #8]
 8007130:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
            if( datarate > 12 )
 8007134:	2d0c      	cmp	r5, #12
 8007136:	d803      	bhi.n	8007140 <SX1276SetRxConfig+0x15c>
            else if( datarate < 6 )
 8007138:	2d05      	cmp	r5, #5
 800713a:	d802      	bhi.n	8007142 <SX1276SetRxConfig+0x15e>
                datarate = 6;
 800713c:	2506      	movs	r5, #6
 800713e:	e000      	b.n	8007142 <SX1276SetRxConfig+0x15e>
                datarate = 12;
 8007140:	250c      	movs	r5, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007142:	2c07      	cmp	r4, #7
 8007144:	d063      	beq.n	800720e <SX1276SetRxConfig+0x22a>
 8007146:	2c08      	cmp	r4, #8
 8007148:	d06a      	beq.n	8007220 <SX1276SetRxConfig+0x23c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800714a:	4b56      	ldr	r3, [pc, #344]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007152:	201d      	movs	r0, #29
 8007154:	f005 fc93 	bl	800ca7e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8007158:	0123      	lsls	r3, r4, #4
 800715a:	b2da      	uxtb	r2, r3
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007164:	ea43 0107 	orr.w	r1, r3, r7
 8007168:	201d      	movs	r0, #29
 800716a:	f005 fc7c 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800716e:	201e      	movs	r0, #30
 8007170:	f005 fc85 	bl	800ca7e <SX1276Read>
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8007174:	f000 0308 	and.w	r3, r0, #8
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8007178:	012a      	lsls	r2, r5, #4
 800717a:	b2d2      	uxtb	r2, r2
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800717c:	431a      	orrs	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800717e:	00b3      	lsls	r3, r6, #2
 8007180:	b2db      	uxtb	r3, r3
 8007182:	4313      	orrs	r3, r2
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8007184:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007188:	4319      	orrs	r1, r3
 800718a:	201e      	movs	r0, #30
 800718c:	f005 fc6b 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007190:	2026      	movs	r0, #38	; 0x26
 8007192:	f005 fc74 	bl	800ca7e <SX1276Read>
 8007196:	b241      	sxtb	r1, r0
 8007198:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800719c:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 800719e:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80071a2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80071a6:	b2c9      	uxtb	r1, r1
 80071a8:	2026      	movs	r0, #38	; 0x26
 80071aa:	f005 fc5c 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80071ae:	fa5f f18a 	uxtb.w	r1, sl
 80071b2:	201f      	movs	r0, #31
 80071b4:	f005 fc57 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80071b8:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80071bc:	2020      	movs	r0, #32
 80071be:	f005 fc52 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80071c2:	fa5f f188 	uxtb.w	r1, r8
 80071c6:	2021      	movs	r0, #33	; 0x21
 80071c8:	f005 fc4d 	bl	800ca66 <SX1276Write>
            if( fixLen == 1 )
 80071cc:	bb5f      	cbnz	r7, 8007226 <SX1276SetRxConfig+0x242>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80071ce:	4b35      	ldr	r3, [pc, #212]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 80071d0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
 80071d4:	bb63      	cbnz	r3, 8007230 <SX1276SetRxConfig+0x24c>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80071d6:	2c09      	cmp	r4, #9
 80071d8:	d03a      	beq.n	8007250 <SX1276SetRxConfig+0x26c>
            else if( bandwidth == 9 )
 80071da:	2c09      	cmp	r4, #9
 80071dc:	d047      	beq.n	800726e <SX1276SetRxConfig+0x28a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80071de:	2103      	movs	r1, #3
 80071e0:	2036      	movs	r0, #54	; 0x36
 80071e2:	f005 fc40 	bl	800ca66 <SX1276Write>
            if( datarate == 6 )
 80071e6:	2d06      	cmp	r5, #6
 80071e8:	d04a      	beq.n	8007280 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80071ea:	2031      	movs	r0, #49	; 0x31
 80071ec:	f005 fc47 	bl	800ca7e <SX1276Read>
 80071f0:	b241      	sxtb	r1, r0
 80071f2:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80071f6:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80071fa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 80071fe:	2031      	movs	r0, #49	; 0x31
 8007200:	f005 fc31 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007204:	210a      	movs	r1, #10
 8007206:	2037      	movs	r0, #55	; 0x37
 8007208:	f005 fc2d 	bl	800ca66 <SX1276Write>
}
 800720c:	e705      	b.n	800701a <SX1276SetRxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800720e:	f1a5 030b 	sub.w	r3, r5, #11
 8007212:	2b01      	cmp	r3, #1
 8007214:	d897      	bhi.n	8007146 <SX1276SetRxConfig+0x162>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007216:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800721e:	e798      	b.n	8007152 <SX1276SetRxConfig+0x16e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007220:	2d0c      	cmp	r5, #12
 8007222:	d192      	bne.n	800714a <SX1276SetRxConfig+0x166>
 8007224:	e7f7      	b.n	8007216 <SX1276SetRxConfig+0x232>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8007226:	4649      	mov	r1, r9
 8007228:	2022      	movs	r0, #34	; 0x22
 800722a:	f005 fc1c 	bl	800ca66 <SX1276Write>
 800722e:	e7ce      	b.n	80071ce <SX1276SetRxConfig+0x1ea>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007230:	2044      	movs	r0, #68	; 0x44
 8007232:	f005 fc24 	bl	800ca7e <SX1276Read>
 8007236:	f060 017f 	orn	r1, r0, #127	; 0x7f
 800723a:	b2c9      	uxtb	r1, r1
 800723c:	2044      	movs	r0, #68	; 0x44
 800723e:	f005 fc12 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007242:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 8007244:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 8007248:	2024      	movs	r0, #36	; 0x24
 800724a:	f005 fc0c 	bl	800ca66 <SX1276Write>
 800724e:	e7c2      	b.n	80071d6 <SX1276SetRxConfig+0x1f2>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8007250:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <SX1276SetRxConfig+0x2c0>)
 8007252:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <SX1276SetRxConfig+0x2c8>)
 8007258:	429a      	cmp	r2, r3
 800725a:	d9be      	bls.n	80071da <SX1276SetRxConfig+0x1f6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800725c:	2102      	movs	r1, #2
 800725e:	2036      	movs	r0, #54	; 0x36
 8007260:	f005 fc01 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8007264:	2164      	movs	r1, #100	; 0x64
 8007266:	203a      	movs	r0, #58	; 0x3a
 8007268:	f005 fbfd 	bl	800ca66 <SX1276Write>
 800726c:	e7bb      	b.n	80071e6 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800726e:	2102      	movs	r1, #2
 8007270:	2036      	movs	r0, #54	; 0x36
 8007272:	f005 fbf8 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8007276:	217f      	movs	r1, #127	; 0x7f
 8007278:	203a      	movs	r0, #58	; 0x3a
 800727a:	f005 fbf4 	bl	800ca66 <SX1276Write>
 800727e:	e7b2      	b.n	80071e6 <SX1276SetRxConfig+0x202>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007280:	2031      	movs	r0, #49	; 0x31
 8007282:	f005 fbfc 	bl	800ca7e <SX1276Read>
 8007286:	b241      	sxtb	r1, r0
 8007288:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800728c:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007290:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 8007294:	2031      	movs	r0, #49	; 0x31
 8007296:	f005 fbe6 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800729a:	210c      	movs	r1, #12
 800729c:	2037      	movs	r0, #55	; 0x37
 800729e:	f005 fbe2 	bl	800ca66 <SX1276Write>
 80072a2:	e6ba      	b.n	800701a <SX1276SetRxConfig+0x36>
 80072a4:	20000d08 	.word	0x20000d08
 80072a8:	01e84800 	.word	0x01e84800
 80072ac:	1f4add40 	.word	0x1f4add40

080072b0 <SX1276SetTxConfig>:
{
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	b083      	sub	sp, #12
 80072b6:	4604      	mov	r4, r0
 80072b8:	460d      	mov	r5, r1
 80072ba:	9201      	str	r2, [sp, #4]
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80072c2:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 80072c6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 80072ca:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80072ce:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 80072d2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    SX1276SetModem( modem );
 80072d6:	f7ff fdfb 	bl	8006ed0 <SX1276SetModem>
    SX1276SetRfTxPower( power );
 80072da:	4628      	mov	r0, r5
 80072dc:	f7fe fe48 	bl	8005f70 <SX1276SetRfTxPower>
    switch( modem )
 80072e0:	b124      	cbz	r4, 80072ec <SX1276SetTxConfig+0x3c>
 80072e2:	2c01      	cmp	r4, #1
 80072e4:	d057      	beq.n	8007396 <SX1276SetTxConfig+0xe6>
}
 80072e6:	b003      	add	sp, #12
 80072e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
 80072ec:	4b81      	ldr	r3, [pc, #516]	; (80074f4 <SX1276SetTxConfig+0x244>)
 80072ee:	f883 50e8 	strb.w	r5, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Fdev = fdev;
 80072f2:	9801      	ldr	r0, [sp, #4]
 80072f4:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80072f8:	9a00      	ldr	r2, [sp, #0]
 80072fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            SX1276.Settings.Fsk.Datarate = datarate;
 80072fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007300:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8007304:	f8a3 70fc 	strh.w	r7, [r3, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
 8007308:	f883 80fe 	strb.w	r8, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800730c:	f883 6100 	strb.w	r6, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8007310:	f883 a101 	strb.w	sl, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8007314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007316:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800731a:	f7fe ffb9 	bl	8006290 <SX1276ConvertFreqInHzToPllStep>
 800731e:	4604      	mov	r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8007320:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8007324:	2004      	movs	r0, #4
 8007326:	f005 fb9e 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800732a:	b2e1      	uxtb	r1, r4
 800732c:	2005      	movs	r0, #5
 800732e:	f005 fb9a 	bl	800ca66 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8007332:	4c71      	ldr	r4, [pc, #452]	; (80074f8 <SX1276SetTxConfig+0x248>)
 8007334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007336:	fbb4 f4f3 	udiv	r4, r4, r3
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800733a:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800733e:	2002      	movs	r0, #2
 8007340:	f005 fb91 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8007344:	b2e1      	uxtb	r1, r4
 8007346:	2003      	movs	r0, #3
 8007348:	f005 fb8d 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800734c:	0a39      	lsrs	r1, r7, #8
 800734e:	2025      	movs	r0, #37	; 0x25
 8007350:	f005 fb89 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8007354:	b2f9      	uxtb	r1, r7
 8007356:	2026      	movs	r0, #38	; 0x26
 8007358:	f005 fb85 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800735c:	2030      	movs	r0, #48	; 0x30
 800735e:	f005 fb8e 	bl	800ca7e <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8007362:	f000 016f 	and.w	r1, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007366:	f1b8 0f00 	cmp.w	r8, #0
 800736a:	d011      	beq.n	8007390 <SX1276SetTxConfig+0xe0>
 800736c:	2300      	movs	r3, #0
 800736e:	4319      	orrs	r1, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007370:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
 8007374:	b2c9      	uxtb	r1, r1
 8007376:	2030      	movs	r0, #48	; 0x30
 8007378:	f005 fb75 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800737c:	2031      	movs	r0, #49	; 0x31
 800737e:	f005 fb7e 	bl	800ca7e <SX1276Read>
 8007382:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 8007386:	b2c9      	uxtb	r1, r1
 8007388:	2031      	movs	r0, #49	; 0x31
 800738a:	f005 fb6c 	bl	800ca66 <SX1276Write>
        break;
 800738e:	e7aa      	b.n	80072e6 <SX1276SetTxConfig+0x36>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007390:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007394:	e7eb      	b.n	800736e <SX1276SetTxConfig+0xbe>
            SX1276.Settings.LoRa.Power = power;
 8007396:	4b57      	ldr	r3, [pc, #348]	; (80074f4 <SX1276SetTxConfig+0x244>)
 8007398:	f883 511c 	strb.w	r5, [r3, #284]	; 0x11c
            if( bandwidth > 2 )
 800739c:	9b00      	ldr	r3, [sp, #0]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d900      	bls.n	80073a4 <SX1276SetTxConfig+0xf4>
                while( 1 );
 80073a2:	e7fe      	b.n	80073a2 <SX1276SetTxConfig+0xf2>
            bandwidth += 7;
 80073a4:	9c00      	ldr	r4, [sp, #0]
 80073a6:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80073a8:	4b52      	ldr	r3, [pc, #328]	; (80074f4 <SX1276SetTxConfig+0x244>)
 80073aa:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
            SX1276.Settings.LoRa.Datarate = datarate;
 80073ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
            SX1276.Settings.LoRa.Coderate = coderate;
 80073b4:	f883 9129 	strb.w	r9, [r3, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80073b8:	f8a3 712a 	strh.w	r7, [r3, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
 80073bc:	f883 812c 	strb.w	r8, [r3, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80073c0:	f883 b12f 	strb.w	fp, [r3, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80073c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80073c8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80073cc:	f883 612e 	strb.w	r6, [r3, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80073d0:	f883 a131 	strb.w	sl, [r3, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80073d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
            if( datarate > 12 )
 80073da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	d804      	bhi.n	80073ea <SX1276SetTxConfig+0x13a>
            else if( datarate < 6 )
 80073e0:	2b05      	cmp	r3, #5
 80073e2:	d804      	bhi.n	80073ee <SX1276SetTxConfig+0x13e>
                datarate = 6;
 80073e4:	2306      	movs	r3, #6
 80073e6:	930c      	str	r3, [sp, #48]	; 0x30
 80073e8:	e001      	b.n	80073ee <SX1276SetTxConfig+0x13e>
                datarate = 12;
 80073ea:	230c      	movs	r3, #12
 80073ec:	930c      	str	r3, [sp, #48]	; 0x30
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80073ee:	2c07      	cmp	r4, #7
 80073f0:	d051      	beq.n	8007496 <SX1276SetTxConfig+0x1e6>
 80073f2:	2c08      	cmp	r4, #8
 80073f4:	d058      	beq.n	80074a8 <SX1276SetTxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80073f6:	4b3f      	ldr	r3, [pc, #252]	; (80074f4 <SX1276SetTxConfig+0x244>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80073fe:	f1bb 0f00 	cmp.w	fp, #0
 8007402:	d155      	bne.n	80074b0 <SX1276SetTxConfig+0x200>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007404:	201d      	movs	r0, #29
 8007406:	f005 fb3a 	bl	800ca7e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800740a:	0123      	lsls	r3, r4, #4
 800740c:	b2da      	uxtb	r2, r3
 800740e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4313      	orrs	r3, r2
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007416:	ea43 0108 	orr.w	r1, r3, r8
 800741a:	201d      	movs	r0, #29
 800741c:	f005 fb23 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8007420:	201e      	movs	r0, #30
 8007422:	f005 fb2c 	bl	800ca7e <SX1276Read>
                           RFLR_MODEMCONFIG2_SF_MASK &
 8007426:	f000 010b 	and.w	r1, r0, #11
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800742a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8007430:	4319      	orrs	r1, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8007432:	00b3      	lsls	r3, r6, #2
 8007434:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007436:	4319      	orrs	r1, r3
 8007438:	201e      	movs	r0, #30
 800743a:	f005 fb14 	bl	800ca66 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800743e:	2026      	movs	r0, #38	; 0x26
 8007440:	f005 fb1d 	bl	800ca7e <SX1276Read>
 8007444:	b241      	sxtb	r1, r0
 8007446:	f021 0108 	bic.w	r1, r1, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800744a:	4b2a      	ldr	r3, [pc, #168]	; (80074f4 <SX1276SetTxConfig+0x244>)
 800744c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8007450:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007454:	b2c9      	uxtb	r1, r1
 8007456:	2026      	movs	r0, #38	; 0x26
 8007458:	f005 fb05 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800745c:	0a39      	lsrs	r1, r7, #8
 800745e:	2020      	movs	r0, #32
 8007460:	f005 fb01 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8007464:	b2f9      	uxtb	r1, r7
 8007466:	2021      	movs	r0, #33	; 0x21
 8007468:	f005 fafd 	bl	800ca66 <SX1276Write>
            if( datarate == 6 )
 800746c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800746e:	2b06      	cmp	r3, #6
 8007470:	d02e      	beq.n	80074d0 <SX1276SetTxConfig+0x220>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007472:	2031      	movs	r0, #49	; 0x31
 8007474:	f005 fb03 	bl	800ca7e <SX1276Read>
 8007478:	b241      	sxtb	r1, r0
 800747a:	f021 0107 	bic.w	r1, r1, #7
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800747e:	f041 0103 	orr.w	r1, r1, #3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007482:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8007486:	2031      	movs	r0, #49	; 0x31
 8007488:	f005 faed 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800748c:	210a      	movs	r1, #10
 800748e:	2037      	movs	r0, #55	; 0x37
 8007490:	f005 fae9 	bl	800ca66 <SX1276Write>
}
 8007494:	e727      	b.n	80072e6 <SX1276SetTxConfig+0x36>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007498:	3b0b      	subs	r3, #11
 800749a:	2b01      	cmp	r3, #1
 800749c:	d8a9      	bhi.n	80073f2 <SX1276SetTxConfig+0x142>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <SX1276SetTxConfig+0x244>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80074a6:	e7aa      	b.n	80073fe <SX1276SetTxConfig+0x14e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80074a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d1a3      	bne.n	80073f6 <SX1276SetTxConfig+0x146>
 80074ae:	e7f6      	b.n	800749e <SX1276SetTxConfig+0x1ee>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80074b0:	2044      	movs	r0, #68	; 0x44
 80074b2:	f005 fae4 	bl	800ca7e <SX1276Read>
 80074b6:	f060 017f 	orn	r1, r0, #127	; 0x7f
 80074ba:	b2c9      	uxtb	r1, r1
 80074bc:	2044      	movs	r0, #68	; 0x44
 80074be:	f005 fad2 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <SX1276SetTxConfig+0x244>)
 80074c4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
 80074c8:	2024      	movs	r0, #36	; 0x24
 80074ca:	f005 facc 	bl	800ca66 <SX1276Write>
 80074ce:	e799      	b.n	8007404 <SX1276SetTxConfig+0x154>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80074d0:	2031      	movs	r0, #49	; 0x31
 80074d2:	f005 fad4 	bl	800ca7e <SX1276Read>
 80074d6:	b241      	sxtb	r1, r0
 80074d8:	f021 0107 	bic.w	r1, r1, #7
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80074dc:	f041 0105 	orr.w	r1, r1, #5
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80074e0:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
 80074e4:	2031      	movs	r0, #49	; 0x31
 80074e6:	f005 fabe 	bl	800ca66 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80074ea:	210c      	movs	r1, #12
 80074ec:	2037      	movs	r0, #55	; 0x37
 80074ee:	f005 faba 	bl	800ca66 <SX1276Write>
 80074f2:	e6f8      	b.n	80072e6 <SX1276SetTxConfig+0x36>
 80074f4:	20000d08 	.word	0x20000d08
 80074f8:	01e84800 	.word	0x01e84800

080074fc <SX1276SetTxContinuousWave>:
{
 80074fc:	b530      	push	{r4, r5, lr}
 80074fe:	b08b      	sub	sp, #44	; 0x2c
 8007500:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8007502:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007506:	fb02 f404 	mul.w	r4, r2, r4
    SX1276SetChannel( freq );
 800750a:	f7fe ff27 	bl	800635c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800750e:	9408      	str	r4, [sp, #32]
 8007510:	2000      	movs	r0, #0
 8007512:	9007      	str	r0, [sp, #28]
 8007514:	9006      	str	r0, [sp, #24]
 8007516:	9005      	str	r0, [sp, #20]
 8007518:	9004      	str	r0, [sp, #16]
 800751a:	9003      	str	r0, [sp, #12]
 800751c:	2305      	movs	r3, #5
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	9001      	str	r0, [sp, #4]
 8007522:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	4603      	mov	r3, r0
 800752a:	4602      	mov	r2, r0
 800752c:	4629      	mov	r1, r5
 800752e:	f7ff febf 	bl	80072b0 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8007532:	2031      	movs	r0, #49	; 0x31
 8007534:	f005 faa3 	bl	800ca7e <SX1276Read>
 8007538:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
 800753c:	2031      	movs	r0, #49	; 0x31
 800753e:	f005 fa92 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8007542:	21f0      	movs	r1, #240	; 0xf0
 8007544:	2040      	movs	r0, #64	; 0x40
 8007546:	f005 fa8e 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800754a:	21a0      	movs	r1, #160	; 0xa0
 800754c:	2041      	movs	r0, #65	; 0x41
 800754e:	f005 fa8a 	bl	800ca66 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8007552:	4d08      	ldr	r5, [pc, #32]	; (8007574 <SX1276SetTxContinuousWave+0x78>)
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f005 f9ad 	bl	800c8b6 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <SX1276SetTxContinuousWave+0x7c>)
 800755e:	2202      	movs	r2, #2
 8007560:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
 8007564:	4628      	mov	r0, r5
 8007566:	f7fe fdd9 	bl	800611c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800756a:	2003      	movs	r0, #3
 800756c:	f005 fa93 	bl	800ca96 <SX1276SetOpMode>
}
 8007570:	b00b      	add	sp, #44	; 0x2c
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	20000e4c 	.word	0x20000e4c
 8007578:	20000d08 	.word	0x20000d08

0800757c <SX1276SetMaxPayloadLength>:
{
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	460d      	mov	r5, r1
    SX1276SetModem( modem );
 8007582:	f7ff fca5 	bl	8006ed0 <SX1276SetModem>
    switch( modem )
 8007586:	b114      	cbz	r4, 800758e <SX1276SetMaxPayloadLength+0x12>
 8007588:	2c01      	cmp	r4, #1
 800758a:	d00a      	beq.n	80075a2 <SX1276SetMaxPayloadLength+0x26>
}
 800758c:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <SX1276SetMaxPayloadLength+0x30>)
 8007590:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f9      	bne.n	800758c <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8007598:	4629      	mov	r1, r5
 800759a:	2032      	movs	r0, #50	; 0x32
 800759c:	f005 fa63 	bl	800ca66 <SX1276Write>
 80075a0:	e7f4      	b.n	800758c <SX1276SetMaxPayloadLength+0x10>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 80075a2:	4629      	mov	r1, r5
 80075a4:	2023      	movs	r0, #35	; 0x23
 80075a6:	f005 fa5e 	bl	800ca66 <SX1276Write>
}
 80075aa:	e7ef      	b.n	800758c <SX1276SetMaxPayloadLength+0x10>
 80075ac:	20000d08 	.word	0x20000d08

080075b0 <SX1276SetPublicNetwork>:
{
 80075b0:	b510      	push	{r4, lr}
 80075b2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
 80075b4:	2001      	movs	r0, #1
 80075b6:	f7ff fc8b 	bl	8006ed0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <SX1276SetPublicNetwork+0x28>)
 80075bc:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
 80075c0:	b124      	cbz	r4, 80075cc <SX1276SetPublicNetwork+0x1c>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80075c2:	2134      	movs	r1, #52	; 0x34
 80075c4:	2039      	movs	r0, #57	; 0x39
 80075c6:	f005 fa4e 	bl	800ca66 <SX1276Write>
}
 80075ca:	bd10      	pop	{r4, pc}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80075cc:	2112      	movs	r1, #18
 80075ce:	2039      	movs	r0, #57	; 0x39
 80075d0:	f005 fa49 	bl	800ca66 <SX1276Write>
}
 80075d4:	e7f9      	b.n	80075ca <SX1276SetPublicNetwork+0x1a>
 80075d6:	bf00      	nop
 80075d8:	20000d08 	.word	0x20000d08

080075dc <SX1276OnTimeoutIrq>:
{
 80075dc:	b538      	push	{r3, r4, r5, lr}
    switch( SX1276.Settings.State )
 80075de:	4b33      	ldr	r3, [pc, #204]	; (80076ac <SX1276OnTimeoutIrq+0xd0>)
 80075e0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d002      	beq.n	80075ee <SX1276OnTimeoutIrq+0x12>
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d033      	beq.n	8007654 <SX1276OnTimeoutIrq+0x78>
}
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 80075ee:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <SX1276OnTimeoutIrq+0xd0>)
 80075f0:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80075f4:	b143      	cbz	r3, 8007608 <SX1276OnTimeoutIrq+0x2c>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80075f6:	4b2e      	ldr	r3, [pc, #184]	; (80076b0 <SX1276OnTimeoutIrq+0xd4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f6      	beq.n	80075ec <SX1276OnTimeoutIrq+0x10>
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f3      	beq.n	80075ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->RxTimeout( );
 8007604:	4798      	blx	r3
 8007606:	e7f1      	b.n	80075ec <SX1276OnTimeoutIrq+0x10>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007608:	4c28      	ldr	r4, [pc, #160]	; (80076ac <SX1276OnTimeoutIrq+0xd0>)
 800760a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800760e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007612:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007616:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800761a:	210b      	movs	r1, #11
 800761c:	203e      	movs	r0, #62	; 0x3e
 800761e:	f005 fa22 	bl	800ca66 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8007622:	2110      	movs	r1, #16
 8007624:	203f      	movs	r0, #63	; 0x3f
 8007626:	f005 fa1e 	bl	800ca66 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800762a:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800762e:	b14b      	cbz	r3, 8007644 <SX1276OnTimeoutIrq+0x68>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007630:	200d      	movs	r0, #13
 8007632:	f005 fa24 	bl	800ca7e <SX1276Read>
 8007636:	f040 0140 	orr.w	r1, r0, #64	; 0x40
 800763a:	b2c9      	uxtb	r1, r1
 800763c:	200d      	movs	r0, #13
 800763e:	f005 fa12 	bl	800ca66 <SX1276Write>
 8007642:	e7d8      	b.n	80075f6 <SX1276OnTimeoutIrq+0x1a>
                SX1276.Settings.State = RF_IDLE;
 8007644:	4b19      	ldr	r3, [pc, #100]	; (80076ac <SX1276OnTimeoutIrq+0xd0>)
 8007646:	2200      	movs	r2, #0
 8007648:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
 800764c:	4819      	ldr	r0, [pc, #100]	; (80076b4 <SX1276OnTimeoutIrq+0xd8>)
 800764e:	f7fe fddf 	bl	8006210 <TimerStop>
 8007652:	e7d0      	b.n	80075f6 <SX1276OnTimeoutIrq+0x1a>
        SX1276Reset( );
 8007654:	f7fe fa76 	bl	8005b44 <SX1276Reset>
        RxChainCalibration( );
 8007658:	f7ff f960 	bl	800691c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800765c:	2000      	movs	r0, #0
 800765e:	f005 fa1a 	bl	800ca96 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8007662:	2400      	movs	r4, #0
 8007664:	e00c      	b.n	8007680 <SX1276OnTimeoutIrq+0xa4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <SX1276OnTimeoutIrq+0xdc>)
 8007668:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800766c:	18d5      	adds	r5, r2, r3
 800766e:	5cd0      	ldrb	r0, [r2, r3]
 8007670:	f7ff fc2e 	bl	8006ed0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8007674:	78a9      	ldrb	r1, [r5, #2]
 8007676:	7868      	ldrb	r0, [r5, #1]
 8007678:	f005 f9f5 	bl	800ca66 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800767c:	3401      	adds	r4, #1
 800767e:	b2e4      	uxtb	r4, r4
 8007680:	2c0f      	cmp	r4, #15
 8007682:	d9f0      	bls.n	8007666 <SX1276OnTimeoutIrq+0x8a>
        SX1276SetModem( MODEM_FSK );
 8007684:	2000      	movs	r0, #0
 8007686:	f7ff fc23 	bl	8006ed0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800768a:	4c08      	ldr	r4, [pc, #32]	; (80076ac <SX1276OnTimeoutIrq+0xd0>)
 800768c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
 8007690:	f7ff ff8e 	bl	80075b0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8007694:	2300      	movs	r3, #0
 8007696:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <SX1276OnTimeoutIrq+0xd4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0a4      	beq.n	80075ec <SX1276OnTimeoutIrq+0x10>
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0a1      	beq.n	80075ec <SX1276OnTimeoutIrq+0x10>
            RadioEvents->TxTimeout( );
 80076a8:	4798      	blx	r3
}
 80076aa:	e79f      	b.n	80075ec <SX1276OnTimeoutIrq+0x10>
 80076ac:	20000d08 	.word	0x20000d08
 80076b0:	20000bd4 	.word	0x20000bd4
 80076b4:	20000bd8 	.word	0x20000bd8
 80076b8:	0800f010 	.word	0x0800f010

080076bc <uart_stm32_configure>:
}

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_stm32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	460c      	mov	r4, r1
	struct uart_stm32_data *data = DEV_DATA(dev);
 80076c4:	6906      	ldr	r6, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80076c6:	6843      	ldr	r3, [r0, #4]
 80076c8:	681d      	ldr	r5, [r3, #0]
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80076ca:	790a      	ldrb	r2, [r1, #4]
	switch (parity) {
 80076cc:	2a01      	cmp	r2, #1
 80076ce:	d015      	beq.n	80076fc <uart_stm32_configure+0x40>
 80076d0:	2a02      	cmp	r2, #2
 80076d2:	d116      	bne.n	8007702 <uart_stm32_configure+0x46>
		return LL_USART_PARITY_EVEN;
 80076d4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80076d8:	7963      	ldrb	r3, [r4, #5]
	switch (sb) {
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d017      	beq.n	800770e <uart_stm32_configure+0x52>
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d018      	beq.n	8007714 <uart_stm32_configure+0x58>
 80076e2:	b18b      	cbz	r3, 8007708 <uart_stm32_configure+0x4c>
		return LL_USART_STOPBITS_2;
 80076e4:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits,
 80076e8:	79a1      	ldrb	r1, [r4, #6]
	switch (db) {
 80076ea:	2902      	cmp	r1, #2
 80076ec:	d015      	beq.n	800771a <uart_stm32_configure+0x5e>
 80076ee:	2904      	cmp	r1, #4
 80076f0:	d019      	beq.n	8007726 <uart_stm32_configure+0x6a>
		if (p == UART_CFG_PARITY_NONE) {
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	f040 8097 	bne.w	8007826 <uart_stm32_configure+0x16a>
			return LL_USART_DATAWIDTH_8B;
 80076f8:	2700      	movs	r7, #0
 80076fa:	e016      	b.n	800772a <uart_stm32_configure+0x6e>
	switch (parity) {
 80076fc:	f44f 6ec0 	mov.w	lr, #1536	; 0x600
 8007700:	e7ea      	b.n	80076d8 <uart_stm32_configure+0x1c>
		return LL_USART_PARITY_NONE;
 8007702:	f04f 0e00 	mov.w	lr, #0
 8007706:	e7e7      	b.n	80076d8 <uart_stm32_configure+0x1c>
	switch (sb) {
 8007708:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
 800770c:	e7ec      	b.n	80076e8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1;
 800770e:	f04f 0c00 	mov.w	ip, #0
 8007712:	e7e9      	b.n	80076e8 <uart_stm32_configure+0x2c>
		return LL_USART_STOPBITS_1_5;
 8007714:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 8007718:	e7e6      	b.n	80076e8 <uart_stm32_configure+0x2c>
		if (p == UART_CFG_PARITY_NONE) {
 800771a:	b10a      	cbz	r2, 8007720 <uart_stm32_configure+0x64>
			return LL_USART_DATAWIDTH_8B;
 800771c:	2700      	movs	r7, #0
 800771e:	e004      	b.n	800772a <uart_stm32_configure+0x6e>
			return LL_USART_DATAWIDTH_7B;
 8007720:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8007724:	e001      	b.n	800772a <uart_stm32_configure+0x6e>
	switch (db) {
 8007726:	f44f 5780 	mov.w	r7, #4096	; 0x1000
							     cfg->parity);
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800772a:	f894 a007 	ldrb.w	sl, [r4, #7]
	if (fc == UART_CFG_FLOW_CTRL_RTS_CTS) {
 800772e:	f1ba 0f01 	cmp.w	sl, #1
 8007732:	d07b      	beq.n	800782c <uart_stm32_configure+0x170>
	return LL_USART_HWCONTROL_NONE;
 8007734:	f04f 0800 	mov.w	r8, #0

	/* Hardware doesn't support mark or space parity */
	if ((cfg->parity == UART_CFG_PARITY_MARK) ||
 8007738:	f1a2 0903 	sub.w	r9, r2, #3
 800773c:	fa5f f989 	uxtb.w	r9, r9
 8007740:	f1b9 0f01 	cmp.w	r9, #1
 8007744:	f240 80af 	bls.w	80078a6 <uart_stm32_configure+0x1ea>
	    (cfg->parity == UART_CFG_PARITY_SPACE)) {
		return -ENOTSUP;
	}

	/* Driver does not supports parity + 9 databits */
	if ((cfg->parity != UART_CFG_PARITY_NONE) &&
 8007748:	b112      	cbz	r2, 8007750 <uart_stm32_configure+0x94>
 800774a:	2904      	cmp	r1, #4
 800774c:	f000 80ae 	beq.w	80078ac <uart_stm32_configure+0x1f0>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_0_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_0_5) {
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80ae 	beq.w	80078b2 <uart_stm32_configure+0x1f6>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    (cfg->stop_bits == UART_CFG_STOP_BITS_1_5)) {
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits == UART_CFG_STOP_BITS_1_5) {
 8007756:	2b02      	cmp	r3, #2
 8007758:	f000 80ae 	beq.w	80078b8 <uart_stm32_configure+0x1fc>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((cfg->data_bits == UART_CFG_DATA_BITS_5) ||
 800775c:	2901      	cmp	r1, #1
 800775e:	f240 80ae 	bls.w	80078be <uart_stm32_configure+0x202>
	    (cfg->data_bits == UART_CFG_DATA_BITS_6)
#ifndef LL_USART_DATAWIDTH_7B
	    || (cfg->data_bits == UART_CFG_DATA_BITS_7)
#endif /* LL_USART_DATAWIDTH_7B */
	    || (cfg->data_bits == UART_CFG_DATA_BITS_9)) {
 8007762:	2904      	cmp	r1, #4
 8007764:	f000 80ae 	beq.w	80078c4 <uart_stm32_configure+0x208>
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (cfg->flow_ctrl != UART_CFG_FLOW_CTRL_NONE) {
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	d017      	beq.n	800779e <uart_stm32_configure+0xe2>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800776e:	4b5a      	ldr	r3, [pc, #360]	; (80078d8 <uart_stm32_configure+0x21c>)
 8007770:	429d      	cmp	r5, r3
 8007772:	d010      	beq.n	8007796 <uart_stm32_configure+0xda>
 8007774:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8007778:	429d      	cmp	r5, r3
 800777a:	d00c      	beq.n	8007796 <uart_stm32_configure+0xda>
 800777c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007780:	429d      	cmp	r5, r3
 8007782:	d008      	beq.n	8007796 <uart_stm32_configure+0xda>
 8007784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007788:	429d      	cmp	r5, r3
 800778a:	d004      	beq.n	8007796 <uart_stm32_configure+0xda>
 800778c:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8007790:	429d      	cmp	r5, r3
 8007792:	f040 809a 	bne.w	80078ca <uart_stm32_configure+0x20e>
 8007796:	f1ba 0f01 	cmp.w	sl, #1
 800779a:	f040 8099 	bne.w	80078d0 <uart_stm32_configure+0x214>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800779e:	682b      	ldr	r3, [r5, #0]
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	602b      	str	r3, [r5, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80077a6:	6843      	ldr	r3, [r0, #4]
 80077a8:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 80077b0:	459e      	cmp	lr, r3
 80077b2:	d005      	beq.n	80077c0 <uart_stm32_configure+0x104>
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80077b4:	6813      	ldr	r3, [r2, #0]
 80077b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077ba:	ea4e 0303 	orr.w	r3, lr, r3
 80077be:	6013      	str	r3, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80077c0:	6843      	ldr	r3, [r0, #4]
 80077c2:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80077c4:	6853      	ldr	r3, [r2, #4]
 80077c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80077ca:	459c      	cmp	ip, r3
 80077cc:	d005      	beq.n	80077da <uart_stm32_configure+0x11e>
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80077ce:	6853      	ldr	r3, [r2, #4]
 80077d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077d4:	ea4c 0303 	orr.w	r3, ip, r3
 80077d8:	6053      	str	r3, [r2, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80077da:	6843      	ldr	r3, [r0, #4]
 80077dc:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
		uart_stm32_set_stopbits(dev, stopbits);
	}

	if (databits != uart_stm32_get_databits(dev)) {
 80077e4:	429f      	cmp	r7, r3
 80077e6:	d004      	beq.n	80077f2 <uart_stm32_configure+0x136>
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 80077e8:	6813      	ldr	r3, [r2, #0]
 80077ea:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 80077ee:	431f      	orrs	r7, r3
 80077f0:	6017      	str	r7, [r2, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80077f2:	6843      	ldr	r3, [r0, #4]
 80077f4:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80077f6:	6893      	ldr	r3, [r2, #8]
 80077f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		uart_stm32_set_databits(dev, databits);
	}

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 80077fc:	4598      	cmp	r8, r3
 80077fe:	d005      	beq.n	800780c <uart_stm32_configure+0x150>
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007806:	ea48 0303 	orr.w	r3, r8, r3
 800780a:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 800780c:	f8d4 8000 	ldr.w	r8, [r4]
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	4598      	cmp	r8, r3
 8007814:	d10d      	bne.n	8007832 <uart_stm32_configure+0x176>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	602b      	str	r3, [r5, #0]
		uart_stm32_set_baudrate(dev, cfg->baudrate);
		data->baud_rate = cfg->baudrate;
	}

	LL_USART_Enable(UartInstance);
	return 0;
 800781e:	2000      	movs	r0, #0
};
 8007820:	b002      	add	sp, #8
 8007822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return LL_USART_DATAWIDTH_9B;
 8007826:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800782a:	e77e      	b.n	800772a <uart_stm32_configure+0x6e>
		return LL_USART_HWCONTROL_RTS_CTS;
 800782c:	f44f 7840 	mov.w	r8, #768	; 0x300
 8007830:	e782      	b.n	8007738 <uart_stm32_configure+0x7c>
	struct uart_stm32_data *data = DEV_DATA(dev);
 8007832:	6903      	ldr	r3, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007834:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007838:	f859 7b08 	ldr.w	r7, [r9], #8
	if (clock_control_get_rate(data->clock,
 800783c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007840:	4650      	mov	r0, sl
 8007842:	f005 fa41 	bl	800ccc8 <z_device_ready>
 8007846:	b1b8      	cbz	r0, 8007878 <uart_stm32_configure+0x1bc>
	const struct clock_control_driver_api *api =
 8007848:	f8da 3008 	ldr.w	r3, [sl, #8]
	if (api->get_rate == NULL) {
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	b1b3      	cbz	r3, 800787e <uart_stm32_configure+0x1c2>
	return api->get_rate(dev, sys, rate);
 8007850:	aa01      	add	r2, sp, #4
 8007852:	4649      	mov	r1, r9
 8007854:	4650      	mov	r0, sl
 8007856:	4798      	blx	r3
 8007858:	2800      	cmp	r0, #0
 800785a:	db13      	blt.n	8007884 <uart_stm32_configure+0x1c8>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007862:	603b      	str	r3, [r7, #0]
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 800786a:	fbb3 f3f8 	udiv	r3, r3, r8
 800786e:	b29b      	uxth	r3, r3
 8007870:	60fb      	str	r3, [r7, #12]
		data->baud_rate = cfg->baudrate;
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	6033      	str	r3, [r6, #0]
 8007876:	e7ce      	b.n	8007816 <uart_stm32_configure+0x15a>
 8007878:	f06f 0012 	mvn.w	r0, #18
 800787c:	e7ec      	b.n	8007858 <uart_stm32_configure+0x19c>
		return -ENOSYS;
 800787e:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007882:	e7e9      	b.n	8007858 <uart_stm32_configure+0x19c>
 8007884:	4b15      	ldr	r3, [pc, #84]	; (80078dc <uart_stm32_configure+0x220>)
 8007886:	4a16      	ldr	r2, [pc, #88]	; (80078e0 <uart_stm32_configure+0x224>)
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	2201      	movs	r2, #1
 8007892:	f362 0102 	bfi	r1, r2, #0, #3
 8007896:	f36f 01c5 	bfc	r1, #3, #3
 800789a:	f363 118f 	bfi	r1, r3, #6, #10
 800789e:	4811      	ldr	r0, [pc, #68]	; (80078e4 <uart_stm32_configure+0x228>)
 80078a0:	f7fb fe06 	bl	80034b0 <log_0>
		return;
 80078a4:	e7e5      	b.n	8007872 <uart_stm32_configure+0x1b6>
		return -ENOTSUP;
 80078a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078aa:	e7b9      	b.n	8007820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80078ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078b0:	e7b6      	b.n	8007820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80078b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078b6:	e7b3      	b.n	8007820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80078b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078bc:	e7b0      	b.n	8007820 <uart_stm32_configure+0x164>
		return -ENOTSUP;
 80078be:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078c2:	e7ad      	b.n	8007820 <uart_stm32_configure+0x164>
 80078c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078c8:	e7aa      	b.n	8007820 <uart_stm32_configure+0x164>
			return -ENOTSUP;
 80078ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078ce:	e7a7      	b.n	8007820 <uart_stm32_configure+0x164>
 80078d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80078d4:	e7a4      	b.n	8007820 <uart_stm32_configure+0x164>
 80078d6:	bf00      	nop
 80078d8:	40013800 	.word	0x40013800
 80078dc:	0800e048 	.word	0x0800e048
 80078e0:	0800e008 	.word	0x0800e008
 80078e4:	0800ebc0 	.word	0x0800ebc0

080078e8 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 80078e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ec:	b083      	sub	sp, #12
 80078ee:	4605      	mov	r5, r0
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80078f0:	6846      	ldr	r6, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80078f2:	f8d0 8010 	ldr.w	r8, [r0, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80078f6:	4637      	mov	r7, r6
 80078f8:	f857 4b08 	ldr.w	r4, [r7], #8
	data->clock = clk;
 80078fc:	4854      	ldr	r0, [pc, #336]	; (8007a50 <uart_stm32_init+0x168>)
 80078fe:	f8c8 0004 	str.w	r0, [r8, #4]
 8007902:	f005 f9e1 	bl	800ccc8 <z_device_ready>
 8007906:	b310      	cbz	r0, 800794e <uart_stm32_init+0x66>
	const struct clock_control_driver_api *api =
 8007908:	4851      	ldr	r0, [pc, #324]	; (8007a50 <uart_stm32_init+0x168>)
 800790a:	6883      	ldr	r3, [r0, #8]
	return api->on(dev, sys);
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4639      	mov	r1, r7
 8007910:	4798      	blx	r3
 8007912:	4607      	mov	r7, r0
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8007914:	2f00      	cmp	r7, #0
 8007916:	f040 8095 	bne.w	8007a44 <uart_stm32_init+0x15c>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 800791a:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	69f1      	ldr	r1, [r6, #28]
 8007920:	69b0      	ldr	r0, [r6, #24]
 8007922:	f004 fa1d 	bl	800bd60 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8007926:	2800      	cmp	r0, #0
 8007928:	f2c0 808f 	blt.w	8007a4a <uart_stm32_init+0x162>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	f043 030c 	orr.w	r3, r3, #12
 800793a:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 800793c:	6971      	ldr	r1, [r6, #20]
 800793e:	2902      	cmp	r1, #2
 8007940:	d01b      	beq.n	800797a <uart_stm32_init+0x92>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8007942:	2901      	cmp	r1, #1
 8007944:	d062      	beq.n	8007a0c <uart_stm32_init+0x124>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8007946:	b929      	cbnz	r1, 8007954 <uart_stm32_init+0x6c>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007948:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 800794a:	4619      	mov	r1, r3
 800794c:	e019      	b.n	8007982 <uart_stm32_init+0x9a>
 800794e:	f06f 0712 	mvn.w	r7, #18
 8007952:	e7df      	b.n	8007914 <uart_stm32_init+0x2c>
 8007954:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <uart_stm32_init+0x16c>)
 8007956:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <uart_stm32_init+0x170>)
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Invalid parity setting '%d'."
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	2002      	movs	r0, #2
 8007962:	f360 0202 	bfi	r2, r0, #0, #3
 8007966:	f36f 02c5 	bfc	r2, #3, #3
 800796a:	f363 128f 	bfi	r2, r3, #6, #10
 800796e:	483b      	ldr	r0, [pc, #236]	; (8007a5c <uart_stm32_init+0x174>)
 8007970:	f7fb fdc8 	bl	8003504 <log_1>
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8007974:	2300      	movs	r3, #0
		ll_parity = LL_USART_PARITY_NONE;
 8007976:	4619      	mov	r1, r3
 8007978:	e003      	b.n	8007982 <uart_stm32_init+0x9a>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 800797a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 800797e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007988:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800798c:	430b      	orrs	r3, r1
 800798e:	4313      	orrs	r3, r2
 8007990:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007998:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800799a:	7c33      	ldrb	r3, [r6, #16]
 800799c:	b12b      	cbz	r3, 80079aa <uart_stm32_init+0xc2>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800799e:	686b      	ldr	r3, [r5, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80079a2:	6893      	ldr	r3, [r2, #8]
 80079a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80079a8:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80079aa:	f8d8 8000 	ldr.w	r8, [r8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80079ae:	692b      	ldr	r3, [r5, #16]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80079b0:	686d      	ldr	r5, [r5, #4]
 80079b2:	f855 6b08 	ldr.w	r6, [r5], #8
	if (clock_control_get_rate(data->clock,
 80079b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80079ba:	4648      	mov	r0, r9
 80079bc:	f005 f984 	bl	800ccc8 <z_device_ready>
 80079c0:	b348      	cbz	r0, 8007a16 <uart_stm32_init+0x12e>
	const struct clock_control_driver_api *api =
 80079c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (api->get_rate == NULL) {
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	b343      	cbz	r3, 8007a1c <uart_stm32_init+0x134>
	return api->get_rate(dev, sys, rate);
 80079ca:	aa01      	add	r2, sp, #4
 80079cc:	4629      	mov	r1, r5
 80079ce:	4648      	mov	r0, r9
 80079d0:	4798      	blx	r3
 80079d2:	2800      	cmp	r0, #0
 80079d4:	db25      	blt.n	8007a22 <uart_stm32_init+0x13a>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 80079d6:	6833      	ldr	r3, [r6, #0]
 80079d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079dc:	6033      	str	r3, [r6, #0]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	eb03 0358 	add.w	r3, r3, r8, lsr #1
 80079e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	60f3      	str	r3, [r6, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80079f4:	69e3      	ldr	r3, [r4, #28]
 80079f6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80079fa:	d0fb      	beq.n	80079f4 <uart_stm32_init+0x10c>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80079fc:	69e3      	ldr	r3, [r4, #28]
 80079fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007a02:	d0fb      	beq.n	80079fc <uart_stm32_init+0x114>
#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
#endif
}
 8007a04:	4638      	mov	r0, r7
 8007a06:	b003      	add	sp, #12
 8007a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8007a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8007a10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a14:	e7b5      	b.n	8007982 <uart_stm32_init+0x9a>
 8007a16:	f06f 0012 	mvn.w	r0, #18
 8007a1a:	e7da      	b.n	80079d2 <uart_stm32_init+0xea>
		return -ENOSYS;
 8007a1c:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8007a20:	e7d7      	b.n	80079d2 <uart_stm32_init+0xea>
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <uart_stm32_init+0x16c>)
 8007a24:	4a0c      	ldr	r2, [pc, #48]	; (8007a58 <uart_stm32_init+0x170>)
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed call clock_control_get_rate");
 8007a2a:	f04f 0100 	mov.w	r1, #0
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f362 0102 	bfi	r1, r2, #0, #3
 8007a34:	f36f 01c5 	bfc	r1, #3, #3
 8007a38:	f363 118f 	bfi	r1, r3, #6, #10
 8007a3c:	4808      	ldr	r0, [pc, #32]	; (8007a60 <uart_stm32_init+0x178>)
 8007a3e:	f7fb fd37 	bl	80034b0 <log_0>
		return;
 8007a42:	e7d3      	b.n	80079ec <uart_stm32_init+0x104>
		return -EIO;
 8007a44:	f06f 0704 	mvn.w	r7, #4
 8007a48:	e7dc      	b.n	8007a04 <uart_stm32_init+0x11c>
		return err;
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	e7da      	b.n	8007a04 <uart_stm32_init+0x11c>
 8007a4e:	bf00      	nop
 8007a50:	0800dc38 	.word	0x0800dc38
 8007a54:	0800e048 	.word	0x0800e048
 8007a58:	0800e008 	.word	0x0800e008
 8007a5c:	0800f040 	.word	0x0800f040
 8007a60:	0800ebc0 	.word	0x0800ebc0

08007a64 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8007a64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a68:	6999      	ldr	r1, [r3, #24]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8007a6a:	691a      	ldr	r2, [r3, #16]
	uint32_t val2 = SysTick->VAL;	/* C */
 8007a6c:	6998      	ldr	r0, [r3, #24]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8007a6e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007a72:	d101      	bne.n	8007a78 <elapsed+0x14>
	    || (val1 < val2)) {
 8007a74:	4281      	cmp	r1, r0
 8007a76:	d208      	bcs.n	8007a8a <elapsed+0x26>
		overflow_cyc += last_load;
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <elapsed+0x34>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4907      	ldr	r1, [pc, #28]	; (8007a9c <elapsed+0x38>)
 8007a7e:	6809      	ldr	r1, [r1, #0]
 8007a80:	440a      	add	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8007a84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a88:	691b      	ldr	r3, [r3, #16]
	}

	return (last_load - val2) + overflow_cyc;
 8007a8a:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <elapsed+0x38>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	1a1b      	subs	r3, r3, r0
 8007a90:	4a01      	ldr	r2, [pc, #4]	; (8007a98 <elapsed+0x34>)
 8007a92:	6810      	ldr	r0, [r2, #0]
}
 8007a94:	4418      	add	r0, r3
 8007a96:	4770      	bx	lr
 8007a98:	20000e70 	.word	0x20000e70
 8007a9c:	20000e6c 	.word	0x20000e6c

08007aa0 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
 8007aa0:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8007aa2:	f7ff ffdf 	bl	8007a64 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8007aa6:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <sys_clock_isr+0x38>)
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <sys_clock_isr+0x3c>)
 8007aac:	6811      	ldr	r1, [r2, #0]
 8007aae:	4408      	add	r0, r1
 8007ab0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8007ab6:	4a0a      	ldr	r2, [pc, #40]	; (8007ae0 <sys_clock_isr+0x40>)
 8007ab8:	6813      	ldr	r3, [r2, #0]
 8007aba:	1ac0      	subs	r0, r0, r3
 8007abc:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <sys_clock_isr+0x44>)
 8007abe:	fba1 1000 	umull	r1, r0, r1, r0
 8007ac2:	0a40      	lsrs	r0, r0, #9
		announced_cycles += dticks * CYC_PER_TICK;
 8007ac4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8007ac8:	fb01 3300 	mla	r3, r1, r0, r3
 8007acc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 8007ace:	f001 fcdd 	bl	800948c <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
 8007ad2:	f7fc fa37 	bl	8003f44 <z_arm_exc_exit>
}
 8007ad6:	bd08      	pop	{r3, pc}
 8007ad8:	20000e70 	.word	0x20000e70
 8007adc:	20000e68 	.word	0x20000e68
 8007ae0:	20000e64 	.word	0x20000e64
 8007ae4:	10624dd3 	.word	0x10624dd3

08007ae8 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <sys_clock_driver_init+0x28>)
 8007aea:	2210      	movs	r2, #16
 8007aec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8007af0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8007af4:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <sys_clock_driver_init+0x2c>)
 8007af6:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8007af8:	2000      	movs	r0, #0
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <sys_clock_driver_init+0x30>)
 8007afc:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8007afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b02:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8007b04:	6198      	str	r0, [r3, #24]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	f042 0207 	orr.w	r2, r2, #7
 8007b0c:	611a      	str	r2, [r3, #16]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8007b0e:	4770      	bx	lr
 8007b10:	e000ed00 	.word	0xe000ed00
 8007b14:	20000e6c 	.word	0x20000e6c
 8007b18:	20000e70 	.word	0x20000e70

08007b1c <sys_clock_set_timeout>:
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 8007b1c:	b111      	cbz	r1, 8007b24 <sys_clock_set_timeout+0x8>
 8007b1e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b22:	d00e      	beq.n	8007b42 <sys_clock_set_timeout+0x26>
{
 8007b24:	b570      	push	{r4, r5, r6, lr}
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
 8007b26:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007b28:	681c      	ldr	r4, [r3, #0]

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007b2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007b2e:	d013      	beq.n	8007b58 <sys_clock_set_timeout+0x3c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007b30:	1e46      	subs	r6, r0, #1
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	dd13      	ble.n	8007b5e <sys_clock_set_timeout+0x42>
 8007b36:	f5b6 6f03 	cmp.w	r6, #2096	; 0x830
 8007b3a:	db11      	blt.n	8007b60 <sys_clock_set_timeout+0x44>
 8007b3c:	f44f 6603 	mov.w	r6, #2096	; 0x830
 8007b40:	e00e      	b.n	8007b60 <sys_clock_set_timeout+0x44>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8007b42:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007b46:	6913      	ldr	r3, [r2, #16]
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	6113      	str	r3, [r2, #16]
		last_load = TIMER_STOPPED;
 8007b4e:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007b50:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8007b54:	601a      	str	r2, [r3, #0]
		return;
 8007b56:	4770      	bx	lr
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8007b58:	f44f 6003 	mov.w	r0, #2096	; 0x830
 8007b5c:	e7e8      	b.n	8007b30 <sys_clock_set_timeout+0x14>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8007b5e:	2600      	movs	r6, #0
	__asm__ volatile(
 8007b60:	f04f 0310 	mov.w	r3, #16
 8007b64:	f3ef 8511 	mrs	r5, BASEPRI
 8007b68:	f383 8812 	msr	BASEPRI_MAX, r3
 8007b6c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
 8007b70:	f7ff ff78 	bl	8007a64 <elapsed>

	val1 = SysTick->VAL;
 8007b74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b78:	6999      	ldr	r1, [r3, #24]

	cycle_count += pending;
 8007b7a:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <sys_clock_set_timeout+0xec>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4410      	add	r0, r2
 8007b80:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <sys_clock_set_timeout+0xf0>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
 8007b88:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <sys_clock_set_timeout+0xf4>)
 8007b8a:	681a      	ldr	r2, [r3, #0]

	if ((int32_t)unannounced < 0) {
 8007b8c:	1a83      	subs	r3, r0, r2
 8007b8e:	d416      	bmi.n	8007bbe <sys_clock_set_timeout+0xa2>
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
 8007b90:	f44f 5cfa 	mov.w	ip, #8000	; 0x1f40

		/* Round delay up to next tick boundary */
		delay += unannounced;
 8007b94:	fb0c 3306 	mla	r3, ip, r6, r3
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8007b98:	f503 53f9 	add.w	r3, r3, #7968	; 0x1f20
 8007b9c:	331f      	adds	r3, #31
 8007b9e:	4e1d      	ldr	r6, [pc, #116]	; (8007c14 <sys_clock_set_timeout+0xf8>)
 8007ba0:	fba6 6303 	umull	r6, r3, r6, r3
 8007ba4:	0a5b      	lsrs	r3, r3, #9
		delay -= unannounced;
 8007ba6:	1a12      	subs	r2, r2, r0
 8007ba8:	fb0c 2303 	mla	r3, ip, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8007bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb0:	d90a      	bls.n	8007bc8 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 8007bb2:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <sys_clock_set_timeout+0xfc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d909      	bls.n	8007bcc <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8007bb8:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e008      	b.n	8007bd0 <sys_clock_set_timeout+0xb4>
		last_load = MIN_DELAY;
 8007bbe:	4b11      	ldr	r3, [pc, #68]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	e003      	b.n	8007bd0 <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8007bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
		} else {
			last_load = delay;
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007bce:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
 8007bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bd4:	699e      	ldr	r6, [r3, #24]

	SysTick->LOAD = last_load - 1;
 8007bd6:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <sys_clock_set_timeout+0xe8>)
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	3a01      	subs	r2, #1
 8007bdc:	615a      	str	r2, [r3, #20]
	SysTick->VAL = 0; /* resets timer to last_load */
 8007bde:	2200      	movs	r2, #0
 8007be0:	619a      	str	r2, [r3, #24]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
 8007be2:	42b1      	cmp	r1, r6
 8007be4:	d209      	bcs.n	8007bfa <sys_clock_set_timeout+0xde>
		cycle_count += (val1 + (last_load_ - val2));
 8007be6:	1ba4      	subs	r4, r4, r6
 8007be8:	440c      	add	r4, r1
 8007bea:	4420      	add	r0, r4
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <sys_clock_set_timeout+0xec>)
 8007bee:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 8007bf0:	f385 8811 	msr	BASEPRI, r5
 8007bf4:	f3bf 8f6f 	isb	sy
	} else {
		cycle_count += (val1 - val2);
	}
	k_spin_unlock(&lock, key);
#endif
}
 8007bf8:	bd70      	pop	{r4, r5, r6, pc}
		cycle_count += (val1 - val2);
 8007bfa:	1b8c      	subs	r4, r1, r6
 8007bfc:	4420      	add	r0, r4
 8007bfe:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <sys_clock_set_timeout+0xec>)
 8007c00:	6018      	str	r0, [r3, #0]
 8007c02:	e7f5      	b.n	8007bf0 <sys_clock_set_timeout+0xd4>
 8007c04:	20000e6c 	.word	0x20000e6c
 8007c08:	20000e68 	.word	0x20000e68
 8007c0c:	20000e70 	.word	0x20000e70
 8007c10:	20000e64 	.word	0x20000e64
 8007c14:	10624dd3 	.word	0x10624dd3
 8007c18:	00ffdc00 	.word	0x00ffdc00

08007c1c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
 8007c1c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007c1e:	f04f 0310 	mov.w	r3, #16
 8007c22:	f3ef 8411 	mrs	r4, BASEPRI
 8007c26:	f383 8812 	msr	BASEPRI_MAX, r3
 8007c2a:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8007c2e:	f7ff ff19 	bl	8007a64 <elapsed>
 8007c32:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <sys_clock_elapsed+0x34>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4418      	add	r0, r3
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <sys_clock_elapsed+0x38>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 8007c3e:	f384 8811 	msr	BASEPRI, r4
 8007c42:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
 8007c46:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <sys_clock_elapsed+0x3c>)
 8007c48:	fba3 3000 	umull	r3, r0, r3, r0
}
 8007c4c:	0a40      	lsrs	r0, r0, #9
 8007c4e:	bd10      	pop	{r4, pc}
 8007c50:	20000e68 	.word	0x20000e68
 8007c54:	20000e64 	.word	0x20000e64
 8007c58:	10624dd3 	.word	0x10624dd3

08007c5c <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
 8007c5c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007c5e:	f04f 0310 	mov.w	r3, #16
 8007c62:	f3ef 8411 	mrs	r4, BASEPRI
 8007c66:	f383 8812 	msr	BASEPRI_MAX, r3
 8007c6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8007c6e:	f7ff fef9 	bl	8007a64 <elapsed>
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <sys_clock_cycle_get_32+0x28>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4418      	add	r0, r3
	__asm__ volatile(
 8007c78:	f384 8811 	msr	BASEPRI, r4
 8007c7c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	20000e68 	.word	0x20000e68

08007c88 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <UTILS_PLL_IsBusy+0x20>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007c90:	d007      	beq.n	8007ca2 <UTILS_PLL_IsBusy+0x1a>

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8007c92:	2001      	movs	r0, #1
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <UTILS_PLL_IsBusy+0x20>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007c9c:	d000      	beq.n	8007ca0 <UTILS_PLL_IsBusy+0x18>
#if defined(RCC_PLLSAI1_SUPPORT)
  /* Check if PLLSAI1 is busy*/
  if(LL_RCC_PLLSAI1_IsReady() != 0U)
  {
    /* PLLSAI1 configuration cannot be modified */
    status = ERROR;
 8007c9e:	2001      	movs	r0, #1
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8007ca0:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e7f6      	b.n	8007c94 <UTILS_PLL_IsBusy+0xc>
 8007ca6:	bf00      	nop
 8007ca8:	40021000 	.word	0x40021000

08007cac <LL_SetSystemCoreClock>:
  SystemCoreClock = HCLKFrequency;
 8007cac:	4b01      	ldr	r3, [pc, #4]	; (8007cb4 <LL_SetSystemCoreClock+0x8>)
 8007cae:	6018      	str	r0, [r3, #0]
}
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	200000b0 	.word	0x200000b0

08007cb8 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8007cb8:	1e42      	subs	r2, r0, #1
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <LL_SetFlashLatency+0xa8>)
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d84c      	bhi.n	8007d5a <LL_SetFlashLatency+0xa2>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8007cc0:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <LL_SetFlashLatency+0xac>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8007cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ccc:	d011      	beq.n	8007cf2 <LL_SetFlashLatency+0x3a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8007cce:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <LL_SetFlashLatency+0xb0>)
 8007cd0:	4298      	cmp	r0, r3
 8007cd2:	d829      	bhi.n	8007d28 <LL_SetFlashLatency+0x70>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8007cd4:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8007cd8:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8007cdc:	4298      	cmp	r0, r3
 8007cde:	d832      	bhi.n	8007d46 <LL_SetFlashLatency+0x8e>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8007ce0:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <LL_SetFlashLatency+0xb4>)
 8007ce2:	4298      	cmp	r0, r3
 8007ce4:	d832      	bhi.n	8007d4c <LL_SetFlashLatency+0x94>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8007ce6:	4b22      	ldr	r3, [pc, #136]	; (8007d70 <LL_SetFlashLatency+0xb8>)
 8007ce8:	4298      	cmp	r0, r3
 8007cea:	d832      	bhi.n	8007d52 <LL_SetFlashLatency+0x9a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007cec:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8007cee:	4608      	mov	r0, r1
 8007cf0:	e01c      	b.n	8007d2c <LL_SetFlashLatency+0x74>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8007cf2:	4b20      	ldr	r3, [pc, #128]	; (8007d74 <LL_SetFlashLatency+0xbc>)
 8007cf4:	4298      	cmp	r0, r3
 8007cf6:	d80b      	bhi.n	8007d10 <LL_SetFlashLatency+0x58>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	; (8007d78 <LL_SetFlashLatency+0xc0>)
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	d80b      	bhi.n	8007d16 <LL_SetFlashLatency+0x5e>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 8007cfe:	4b1f      	ldr	r3, [pc, #124]	; (8007d7c <LL_SetFlashLatency+0xc4>)
 8007d00:	4298      	cmp	r0, r3
 8007d02:	d80b      	bhi.n	8007d1c <LL_SetFlashLatency+0x64>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8007d04:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <LL_SetFlashLatency+0xc8>)
 8007d06:	4298      	cmp	r0, r3
 8007d08:	d80b      	bhi.n	8007d22 <LL_SetFlashLatency+0x6a>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007d0a:	2100      	movs	r1, #0
  ErrorStatus status = SUCCESS;
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	e00d      	b.n	8007d2c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_4;
 8007d10:	2104      	movs	r1, #4
  ErrorStatus status = SUCCESS;
 8007d12:	2000      	movs	r0, #0
 8007d14:	e00a      	b.n	8007d2c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_3;
 8007d16:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e007      	b.n	8007d2c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8007d1c:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8007d1e:	2000      	movs	r0, #0
 8007d20:	e004      	b.n	8007d2c <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8007d22:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8007d24:	2000      	movs	r0, #0
 8007d26:	e001      	b.n	8007d2c <LL_SetFlashLatency+0x74>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8007d28:	2100      	movs	r1, #0
        status = ERROR;
 8007d2a:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <LL_SetFlashLatency+0xcc>)
 8007d2e:	6813      	ldr	r3, [r2, #0]
 8007d30:	f023 0307 	bic.w	r3, r3, #7
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6013      	str	r3, [r2, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8007d38:	6813      	ldr	r3, [r2, #0]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
    if(LL_FLASH_GetLatency() != latency)
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d00a      	beq.n	8007d58 <LL_SetFlashLatency+0xa0>
      status = ERROR;
 8007d42:	2001      	movs	r0, #1
}
 8007d44:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8007d46:	2103      	movs	r1, #3
  ErrorStatus status = SUCCESS;
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e7ef      	b.n	8007d2c <LL_SetFlashLatency+0x74>
        latency = LL_FLASH_LATENCY_2;
 8007d4c:	2102      	movs	r1, #2
  ErrorStatus status = SUCCESS;
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e7ec      	b.n	8007d2c <LL_SetFlashLatency+0x74>
          latency = LL_FLASH_LATENCY_1;
 8007d52:	2101      	movs	r1, #1
  ErrorStatus status = SUCCESS;
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7e9      	b.n	8007d2c <LL_SetFlashLatency+0x74>
 8007d58:	4770      	bx	lr
    status = ERROR;
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	04c4b3ff 	.word	0x04c4b3ff
 8007d64:	40007000 	.word	0x40007000
 8007d68:	018cba80 	.word	0x018cba80
 8007d6c:	00b71b00 	.word	0x00b71b00
 8007d70:	005b8d80 	.word	0x005b8d80
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	02dc6c00 	.word	0x02dc6c00
 8007d7c:	01e84800 	.word	0x01e84800
 8007d80:	00f42400 	.word	0x00f42400
 8007d84:	40022000 	.word	0x40022000

08007d88 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	460c      	mov	r4, r1
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8007d8c:	680b      	ldr	r3, [r1, #0]
 8007d8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d92:	4a26      	ldr	r2, [pc, #152]	; (8007e2c <UTILS_EnablePLLAndSwitchSystem+0xa4>)
 8007d94:	5cd3      	ldrb	r3, [r2, r3]
 8007d96:	fa20 f503 	lsr.w	r5, r0, r3

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8007d9a:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	42ab      	cmp	r3, r5
 8007da0:	d333      	bcc.n	8007e0a <UTILS_EnablePLLAndSwitchSystem+0x82>
  ErrorStatus status = SUCCESS;
 8007da2:	2600      	movs	r6, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007da4:	4b23      	ldr	r3, [pc, #140]	; (8007e34 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007dac:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007db4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8007db6:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007dbe:	d0fa      	beq.n	8007db6 <UTILS_EnablePLLAndSwitchSystem+0x2e>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8007dc0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8007dc4:	6899      	ldr	r1, [r3, #8]
 8007dc6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	f042 0203 	orr.w	r2, r2, #3
 8007dd4:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007dd6:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007dde:	2b0c      	cmp	r3, #12
 8007de0:	d1f9      	bne.n	8007dd6 <UTILS_EnablePLLAndSwitchSystem+0x4e>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8007de2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007de4:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <UTILS_EnablePLLAndSwitchSystem+0xac>)
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007dec:	430a      	orrs	r2, r1
 8007dee:	609a      	str	r2, [r3, #8]
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
 8007df0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007df2:	6899      	ldr	r1, [r3, #8]
 8007df4:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <UTILS_EnablePLLAndSwitchSystem+0xa8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	d809      	bhi.n	8007e18 <UTILS_EnablePLLAndSwitchSystem+0x90>
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8007e04:	b16e      	cbz	r6, 8007e22 <UTILS_EnablePLLAndSwitchSystem+0x9a>
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8007e06:	4630      	mov	r0, r6
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
    status = LL_SetFlashLatency(hclk_frequency);
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f7ff ff54 	bl	8007cb8 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8007e10:	4606      	mov	r6, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1f2      	bne.n	8007dfc <UTILS_EnablePLLAndSwitchSystem+0x74>
 8007e16:	e7c5      	b.n	8007da4 <UTILS_EnablePLLAndSwitchSystem+0x1c>
    status = LL_SetFlashLatency(hclk_frequency);
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f7ff ff4d 	bl	8007cb8 <LL_SetFlashLatency>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	e7f0      	b.n	8007e04 <UTILS_EnablePLLAndSwitchSystem+0x7c>
    LL_SetSystemCoreClock(hclk_frequency);
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff ff42 	bl	8007cac <LL_SetSystemCoreClock>
 8007e28:	e7ed      	b.n	8007e06 <UTILS_EnablePLLAndSwitchSystem+0x7e>
 8007e2a:	bf00      	nop
 8007e2c:	0800f0d8 	.word	0x0800f0d8
 8007e30:	200000b0 	.word	0x200000b0
 8007e34:	40021000 	.word	0x40021000

08007e38 <LL_PLL_ConfigSystemClock_HSI>:
{
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	460d      	mov	r5, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8007e3e:	f7ff ff23 	bl	8007c88 <UTILS_PLL_IsBusy>
 8007e42:	bb20      	cbnz	r0, 8007e8e <LL_PLL_ConfigSystemClock_HSI+0x56>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8007e44:	4621      	mov	r1, r4
 8007e46:	4813      	ldr	r0, [pc, #76]	; (8007e94 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 8007e48:	f004 ff2d 	bl	800cca6 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e54:	d109      	bne.n	8007e6a <LL_PLL_ConfigSystemClock_HSI+0x32>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007e56:	4a10      	ldr	r2, [pc, #64]	; (8007e98 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8007e58:	6813      	ldr	r3, [r2, #0]
 8007e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e5e:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e68:	d0fa      	beq.n	8007e60 <LL_PLL_ConfigSystemClock_HSI+0x28>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	6866      	ldr	r6, [r4, #4]
 8007e6e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8007e70:	4c09      	ldr	r4, [pc, #36]	; (8007e98 <LL_PLL_ConfigSystemClock_HSI+0x60>)
 8007e72:	68e7      	ldr	r7, [r4, #12]
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <LL_PLL_ConfigSystemClock_HSI+0x64>)
 8007e76:	403b      	ands	r3, r7
 8007e78:	f042 0202 	orr.w	r2, r2, #2
 8007e7c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8007e80:	430a      	orrs	r2, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60e3      	str	r3, [r4, #12]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8007e86:	4629      	mov	r1, r5
 8007e88:	f7ff ff7e 	bl	8007d88 <UTILS_EnablePLLAndSwitchSystem>
}
 8007e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ERROR;
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e7fc      	b.n	8007e8c <LL_PLL_ConfigSystemClock_HSI+0x54>
 8007e92:	bf00      	nop
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	40021000 	.word	0x40021000
 8007e9c:	f9ff808c 	.word	0xf9ff808c

08007ea0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	; (8007eb0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8007ea2:	e000      	b.n	8007ea6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
 8007ea4:	3318      	adds	r3, #24
	while (dev < __device_end) {
 8007ea6:	4a03      	ldr	r2, [pc, #12]	; (8007eb4 <z_device_state_init+0x14>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d3fb      	bcc.n	8007ea4 <z_device_state_init+0x4>
	}
}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	0800dc38 	.word	0x0800dc38
 8007eb4:	0800dd58 	.word	0x0800dd58

08007eb8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <z_sys_init_run_level+0x4c>)
 8007ebe:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007ec2:	e009      	b.n	8007ed8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8007ec4:	4240      	negs	r0, r0
 8007ec6:	e017      	b.n	8007ef8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8007ec8:	68eb      	ldr	r3, [r5, #12]
 8007eca:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8007ecc:	68ea      	ldr	r2, [r5, #12]
 8007ece:	7853      	ldrb	r3, [r2, #1]
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8007ed6:	3408      	adds	r4, #8
 8007ed8:	1c73      	adds	r3, r6, #1
 8007eda:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <z_sys_init_run_level+0x4c>)
 8007edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d90d      	bls.n	8007f00 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8007ee4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	4628      	mov	r0, r5
 8007eea:	4798      	blx	r3
		if (dev != NULL) {
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d0f2      	beq.n	8007ed6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0eb      	beq.n	8007ecc <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	dbe5      	blt.n	8007ec4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8007ef8:	28ff      	cmp	r0, #255	; 0xff
 8007efa:	dde5      	ble.n	8007ec8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8007efc:	20ff      	movs	r0, #255	; 0xff
 8007efe:	e7e3      	b.n	8007ec8 <z_sys_init_run_level+0x10>
		}
	}
}
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	bf00      	nop
 8007f04:	0800f0e8 	.word	0x0800f0e8

08007f08 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
 8007f08:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	b328      	cbz	r0, 8007f5a <z_impl_device_get_binding+0x52>
 8007f0e:	7803      	ldrb	r3, [r0, #0]
 8007f10:	b32b      	cbz	r3, 8007f5e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8007f12:	4c14      	ldr	r4, [pc, #80]	; (8007f64 <z_impl_device_get_binding+0x5c>)
 8007f14:	e000      	b.n	8007f18 <z_impl_device_get_binding+0x10>
 8007f16:	3418      	adds	r4, #24
 8007f18:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <z_impl_device_get_binding+0x60>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d008      	beq.n	8007f30 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f004 fed2 	bl	800ccc8 <z_device_ready>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d0f6      	beq.n	8007f16 <z_impl_device_get_binding+0xe>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	42ab      	cmp	r3, r5
 8007f2c:	d1f3      	bne.n	8007f16 <z_impl_device_get_binding+0xe>
 8007f2e:	e012      	b.n	8007f56 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8007f30:	4c0c      	ldr	r4, [pc, #48]	; (8007f64 <z_impl_device_get_binding+0x5c>)
 8007f32:	e000      	b.n	8007f36 <z_impl_device_get_binding+0x2e>
 8007f34:	3418      	adds	r4, #24
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <z_impl_device_get_binding+0x60>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	d00b      	beq.n	8007f54 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f004 fec3 	bl	800ccc8 <z_device_ready>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0f6      	beq.n	8007f34 <z_impl_device_get_binding+0x2c>
 8007f46:	6821      	ldr	r1, [r4, #0]
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7f8 ff7a 	bl	8000e42 <strcmp>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1f0      	bne.n	8007f34 <z_impl_device_get_binding+0x2c>
 8007f52:	e000      	b.n	8007f56 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
 8007f54:	2400      	movs	r4, #0
}
 8007f56:	4620      	mov	r0, r4
 8007f58:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	e7fb      	b.n	8007f56 <z_impl_device_get_binding+0x4e>
 8007f5e:	2400      	movs	r4, #0
 8007f60:	e7f9      	b.n	8007f56 <z_impl_device_get_binding+0x4e>
 8007f62:	bf00      	nop
 8007f64:	0800dc38 	.word	0x0800dc38
 8007f68:	0800dd58 	.word	0x0800dd58

08007f6c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8007f6c:	2804      	cmp	r0, #4
 8007f6e:	d80c      	bhi.n	8007f8a <reason_to_str+0x1e>
 8007f70:	e8df f000 	tbb	[pc, r0]
 8007f74:	07050d03 	.word	0x07050d03
 8007f78:	09          	.byte	0x09
 8007f79:	00          	.byte	0x00
 8007f7a:	4806      	ldr	r0, [pc, #24]	; (8007f94 <reason_to_str+0x28>)
 8007f7c:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
 8007f7e:	4806      	ldr	r0, [pc, #24]	; (8007f98 <reason_to_str+0x2c>)
 8007f80:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
 8007f82:	4806      	ldr	r0, [pc, #24]	; (8007f9c <reason_to_str+0x30>)
 8007f84:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 8007f86:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <reason_to_str+0x34>)
 8007f88:	4770      	bx	lr
	default:
		return "Unknown error";
 8007f8a:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <reason_to_str+0x38>)
 8007f8c:	4770      	bx	lr
		return "Unhandled interrupt";
 8007f8e:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <reason_to_str+0x3c>)
	}
}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	0800f150 	.word	0x0800f150
 8007f98:	0800f124 	.word	0x0800f124
 8007f9c:	0800f134 	.word	0x0800f134
 8007fa0:	0800f140 	.word	0x0800f140
 8007fa4:	0800f100 	.word	0x0800f100
 8007fa8:	0800f110 	.word	0x0800f110

08007fac <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007fac:	b130      	cbz	r0, 8007fbc <thread_name_get+0x10>
{
 8007fae:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 8007fb0:	f004 ff09 	bl	800cdc6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 8007fb4:	b120      	cbz	r0, 8007fc0 <thread_name_get+0x14>
 8007fb6:	7803      	ldrb	r3, [r0, #0]
 8007fb8:	b123      	cbz	r3, 8007fc4 <thread_name_get+0x18>
}
 8007fba:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 8007fbc:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <thread_name_get+0x1c>)
}
 8007fbe:	4770      	bx	lr
		thread_name = "unknown";
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <thread_name_get+0x1c>)
 8007fc2:	e7fa      	b.n	8007fba <thread_name_get+0xe>
 8007fc4:	4800      	ldr	r0, [pc, #0]	; (8007fc8 <thread_name_get+0x1c>)
	return thread_name;
 8007fc6:	e7f8      	b.n	8007fba <thread_name_get+0xe>
 8007fc8:	0800f160 	.word	0x0800f160

08007fcc <k_sys_fatal_error_handler>:
{
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4604      	mov	r4, r0
	z_impl_log_panic();
 8007fd0:	f7fb fb00 	bl	80035d4 <z_impl_log_panic>
 8007fd4:	4b09      	ldr	r3, [pc, #36]	; (8007ffc <k_sys_fatal_error_handler+0x30>)
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <k_sys_fatal_error_handler+0x34>)
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
 8007fdc:	f04f 0100 	mov.w	r1, #0
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f362 0102 	bfi	r1, r2, #0, #3
 8007fe6:	f36f 01c5 	bfc	r1, #3, #3
 8007fea:	f363 118f 	bfi	r1, r3, #6, #10
 8007fee:	4805      	ldr	r0, [pc, #20]	; (8008004 <k_sys_fatal_error_handler+0x38>)
 8007ff0:	f7fb fa5e 	bl	80034b0 <log_0>
	arch_system_halt(reason);
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f004 fe74 	bl	800cce2 <arch_system_halt>
 8007ffa:	bf00      	nop
 8007ffc:	0800e020 	.word	0x0800e020
 8008000:	0800e008 	.word	0x0800e008
 8008004:	0800f168 	.word	0x0800f168

08008008 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	4605      	mov	r5, r0
 8008010:	460e      	mov	r6, r1
	__asm__ volatile(
 8008012:	f04f 0310 	mov.w	r3, #16
 8008016:	f3ef 8711 	mrs	r7, BASEPRI
 800801a:	f383 8812 	msr	BASEPRI_MAX, r3
 800801e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 8008022:	f001 f8f1 	bl	8009208 <z_impl_z_current_get>
 8008026:	4604      	mov	r4, r0
 8008028:	4b29      	ldr	r3, [pc, #164]	; (80080d0 <z_fatal_error+0xc8>)
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <z_fatal_error+0xcc>)
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8008030:	f04f 0800 	mov.w	r8, #0
 8008034:	2201      	movs	r2, #1
 8008036:	f362 0802 	bfi	r8, r2, #0, #3
 800803a:	f36f 08c5 	bfc	r8, #3, #3
 800803e:	f363 188f 	bfi	r8, r3, #6, #10
 8008042:	4628      	mov	r0, r5
 8008044:	f7ff ff92 	bl	8007f6c <reason_to_str>
 8008048:	4602      	mov	r2, r0
 800804a:	f8ad 8000 	strh.w	r8, [sp]
 800804e:	2300      	movs	r3, #0
 8008050:	4629      	mov	r1, r5
 8008052:	4821      	ldr	r0, [pc, #132]	; (80080d8 <z_fatal_error+0xd0>)
 8008054:	f7fb f9f2 	bl	800343c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8008058:	b11e      	cbz	r6, 8008062 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 800805a:	69f3      	ldr	r3, [r6, #28]
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	bb2b      	cbnz	r3, 80080ae <z_fatal_error+0xa6>
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <z_fatal_error+0xc8>)
 8008064:	4a1b      	ldr	r2, [pc, #108]	; (80080d4 <z_fatal_error+0xcc>)
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	2201      	movs	r2, #1
 8008070:	f362 0802 	bfi	r8, r2, #0, #3
 8008074:	f36f 08c5 	bfc	r8, #3, #3
 8008078:	f363 188f 	bfi	r8, r3, #6, #10
 800807c:	4620      	mov	r0, r4
 800807e:	f7ff ff95 	bl	8007fac <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
 8008082:	f7fb f89f 	bl	80031c4 <z_log_strdup>
 8008086:	4602      	mov	r2, r0
 8008088:	4643      	mov	r3, r8
 800808a:	4621      	mov	r1, r4
 800808c:	4813      	ldr	r0, [pc, #76]	; (80080dc <z_fatal_error+0xd4>)
 800808e:	f7fb fa6b 	bl	8003568 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	f7ff ff99 	bl	8007fcc <k_sys_fatal_error_handler>
	__asm__ volatile(
 800809a:	f387 8811 	msr	BASEPRI, r7
 800809e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80080a2:	4620      	mov	r0, r4
 80080a4:	f7fc fb52 	bl	800474c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80080a8:	b002      	add	sp, #8
 80080aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080ae:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <z_fatal_error+0xc8>)
 80080b0:	4a08      	ldr	r2, [pc, #32]	; (80080d4 <z_fatal_error+0xcc>)
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
 80080b6:	f04f 0100 	mov.w	r1, #0
 80080ba:	2201      	movs	r2, #1
 80080bc:	f362 0102 	bfi	r1, r2, #0, #3
 80080c0:	f36f 01c5 	bfc	r1, #3, #3
 80080c4:	f363 118f 	bfi	r1, r3, #6, #10
 80080c8:	4805      	ldr	r0, [pc, #20]	; (80080e0 <z_fatal_error+0xd8>)
 80080ca:	f7fb f9f1 	bl	80034b0 <log_0>
 80080ce:	e7c8      	b.n	8008062 <z_fatal_error+0x5a>
 80080d0:	0800e020 	.word	0x0800e020
 80080d4:	0800e008 	.word	0x0800e008
 80080d8:	0800f178 	.word	0x0800f178
 80080dc:	0800f1c4 	.word	0x0800f1c4
 80080e0:	0800f1a0 	.word	0x0800f1a0

080080e4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 80080e4:	b510      	push	{r4, lr}
 80080e6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
 80080e8:	4c10      	ldr	r4, [pc, #64]	; (800812c <init_idle_thread+0x48>)
 80080ea:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 80080ee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80080f2:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <init_idle_thread+0x4c>)
 80080f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
 80080f8:	2200      	movs	r2, #0
 80080fa:	9205      	str	r2, [sp, #20]
 80080fc:	2101      	movs	r1, #1
 80080fe:	9104      	str	r1, [sp, #16]
 8008100:	210f      	movs	r1, #15
 8008102:	9103      	str	r1, [sp, #12]
 8008104:	9202      	str	r2, [sp, #8]
 8008106:	9201      	str	r2, [sp, #4]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <init_idle_thread+0x50>)
 800810c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008110:	4909      	ldr	r1, [pc, #36]	; (8008138 <init_idle_thread+0x54>)
 8008112:	f44f 7cb0 	mov.w	ip, #352	; 0x160
 8008116:	fb0c 1100 	mla	r1, ip, r0, r1
 800811a:	4620      	mov	r0, r4
 800811c:	f000 f920 	bl	8008360 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008120:	7b63      	ldrb	r3, [r4, #13]
 8008122:	f023 0304 	bic.w	r3, r3, #4
 8008126:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8008128:	b006      	add	sp, #24
 800812a:	bd10      	pop	{r4, pc}
 800812c:	20000758 	.word	0x20000758
 8008130:	20000e74 	.word	0x20000e74
 8008134:	0800ce2d 	.word	0x0800ce2d
 8008138:	20002e80 	.word	0x20002e80

0800813c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8008140:	f000 ffac 	bl	800909c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8008144:	4d1b      	ldr	r5, [pc, #108]	; (80081b4 <prepare_multithreading+0x78>)
 8008146:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <prepare_multithreading+0x7c>)
 8008148:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800814a:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <prepare_multithreading+0x80>)
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	2301      	movs	r3, #1
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	2400      	movs	r4, #0
 8008154:	9403      	str	r4, [sp, #12]
 8008156:	9402      	str	r4, [sp, #8]
 8008158:	9401      	str	r4, [sp, #4]
 800815a:	9400      	str	r4, [sp, #0]
 800815c:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <prepare_multithreading+0x84>)
 800815e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008162:	4918      	ldr	r1, [pc, #96]	; (80081c4 <prepare_multithreading+0x88>)
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f8fb 	bl	8008360 <z_setup_new_thread>
 800816a:	4606      	mov	r6, r0
 800816c:	7b6b      	ldrb	r3, [r5, #13]
 800816e:	f023 0304 	bic.w	r3, r3, #4
 8008172:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 8008174:	4628      	mov	r0, r5
 8008176:	f004 ff54 	bl	800d022 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 800817a:	2c00      	cmp	r4, #0
 800817c:	dd02      	ble.n	8008184 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
 800817e:	4630      	mov	r0, r6
 8008180:	b006      	add	sp, #24
 8008182:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 8008184:	4620      	mov	r0, r4
 8008186:	f7ff ffad 	bl	80080e4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 800818a:	4a0f      	ldr	r2, [pc, #60]	; (80081c8 <prepare_multithreading+0x8c>)
 800818c:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8008190:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <prepare_multithreading+0x7c>)
 8008196:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800819a:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 800819c:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 800819e:	eb04 1184 	add.w	r1, r4, r4, lsl #6
 80081a2:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <prepare_multithreading+0x90>)
 80081a4:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80081a8:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
 80081ac:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 80081ae:	3401      	adds	r4, #1
 80081b0:	e7e3      	b.n	800817a <prepare_multithreading+0x3e>
 80081b2:	bf00      	nop
 80081b4:	200007d8 	.word	0x200007d8
 80081b8:	20000e74 	.word	0x20000e74
 80081bc:	0800e3f8 	.word	0x0800e3f8
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	20001e60 	.word	0x20001e60
 80081c8:	20000758 	.word	0x20000758
 80081cc:	20002fe0 	.word	0x20002fe0

080081d0 <bg_thread_main>:
{
 80081d0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <bg_thread_main+0x30>)
 80081d4:	2201      	movs	r2, #1
 80081d6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80081d8:	2002      	movs	r0, #2
 80081da:	f7ff fe6d 	bl	8007eb8 <z_sys_init_run_level>
	boot_banner();
 80081de:	f001 fd53 	bl	8009c88 <boot_banner>
	z_cpp_init_static();
 80081e2:	f003 fdb7 	bl	800bd54 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80081e6:	2003      	movs	r0, #3
 80081e8:	f7ff fe66 	bl	8007eb8 <z_sys_init_run_level>
	z_init_static_threads();
 80081ec:	f000 f8e8 	bl	80083c0 <z_init_static_threads>
	main();
 80081f0:	f005 f972 	bl	800d4d8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80081f4:	4a03      	ldr	r2, [pc, #12]	; (8008204 <bg_thread_main+0x34>)
 80081f6:	7b13      	ldrb	r3, [r2, #12]
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80081fe:	bd08      	pop	{r3, pc}
 8008200:	20000ed4 	.word	0x20000ed4
 8008204:	200007d8 	.word	0x200007d8

08008208 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 8008208:	b508      	push	{r3, lr}
 800820a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 800820c:	4a01      	ldr	r2, [pc, #4]	; (8008214 <switch_to_main_thread+0xc>)
 800820e:	4802      	ldr	r0, [pc, #8]	; (8008218 <switch_to_main_thread+0x10>)
 8008210:	f7fb fe6e 	bl	8003ef0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8008214:	080081d1 	.word	0x080081d1
 8008218:	200007d8 	.word	0x200007d8

0800821c <z_bss_zero>:
{
 800821c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800821e:	4803      	ldr	r0, [pc, #12]	; (800822c <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8008220:	4a03      	ldr	r2, [pc, #12]	; (8008230 <z_bss_zero+0x14>)
 8008222:	1a12      	subs	r2, r2, r0
 8008224:	2100      	movs	r1, #0
 8008226:	f005 f96f 	bl	800d508 <memset>
}
 800822a:	bd08      	pop	{r3, pc}
 800822c:	200004e8 	.word	0x200004e8
 8008230:	20000ed8 	.word	0x20000ed8

08008234 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8008234:	b500      	push	{lr}
 8008236:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 8008238:	f7fa fef4 	bl	8003024 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 800823c:	4b1b      	ldr	r3, [pc, #108]	; (80082ac <z_cstart+0x78>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800823e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8008242:	4c1b      	ldr	r4, [pc, #108]	; (80082b0 <z_cstart+0x7c>)
 8008244:	6963      	ldr	r3, [r4, #20]
 8008246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800824a:	6163      	str	r3, [r4, #20]
 800824c:	23f0      	movs	r3, #240	; 0xf0
 800824e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8008252:	2500      	movs	r5, #0
 8008254:	77e5      	strb	r5, [r4, #31]
 8008256:	7625      	strb	r5, [r4, #24]
 8008258:	7665      	strb	r5, [r4, #25]
 800825a:	76a5      	strb	r5, [r4, #26]
 800825c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8008260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008262:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008266:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8008268:	f7fc fa2e 	bl	80046c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800826c:	f7fb fcf8 	bl	8003c60 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8008270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008274:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8008276:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 8008278:	f7fc fb4e 	bl	8004918 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 800827c:	f7fc fa7c 	bl	8004778 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 8008280:	2401      	movs	r4, #1
 8008282:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 8008286:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 800828a:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
 800828c:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <z_cstart+0x80>)
 8008290:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 8008294:	f7ff fe04 	bl	8007ea0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff fe0d 	bl	8007eb8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800829e:	4620      	mov	r0, r4
 80082a0:	f7ff fe0a 	bl	8007eb8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 80082a4:	f7ff ff4a 	bl	800813c <prepare_multithreading>
 80082a8:	f7ff ffae 	bl	8008208 <switch_to_main_thread>
 80082ac:	20003800 	.word	0x20003800
 80082b0:	e000ed00 	.word	0xe000ed00
 80082b4:	20000e74 	.word	0x20000e74

080082b8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 80082b8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80082ba:	4c06      	ldr	r4, [pc, #24]	; (80082d4 <init_mem_slab_module+0x1c>)
	int rc = 0;
 80082bc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 80082be:	e000      	b.n	80082c2 <init_mem_slab_module+0xa>
 80082c0:	3420      	adds	r4, #32
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <init_mem_slab_module+0x20>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d204      	bcs.n	80082d2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 80082c8:	4620      	mov	r0, r4
 80082ca:	f004 fd13 	bl	800ccf4 <create_free_list>
		if (rc < 0) {
 80082ce:	2800      	cmp	r0, #0
 80082d0:	daf6      	bge.n	80082c0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
 80082d2:	bd10      	pop	{r4, pc}
 80082d4:	20000390 	.word	0x20000390
 80082d8:	20000390 	.word	0x20000390

080082dc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 80082dc:	b530      	push	{r4, r5, lr}
 80082de:	b083      	sub	sp, #12
 80082e0:	460d      	mov	r5, r1
	__asm__ volatile(
 80082e2:	f04f 0410 	mov.w	r4, #16
 80082e6:	f3ef 8111 	mrs	r1, BASEPRI
 80082ea:	f384 8812 	msr	BASEPRI_MAX, r4
 80082ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 80082f2:	6984      	ldr	r4, [r0, #24]
 80082f4:	b16c      	cbz	r4, 8008312 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
 80082f6:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
 80082f8:	6983      	ldr	r3, [r0, #24]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 80082fe:	69c3      	ldr	r3, [r0, #28]
 8008300:	3301      	adds	r3, #1
 8008302:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8008304:	2000      	movs	r0, #0
	__asm__ volatile(
 8008306:	f381 8811 	msr	BASEPRI, r1
 800830a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 800830e:	b003      	add	sp, #12
 8008310:	bd30      	pop	{r4, r5, pc}
 8008312:	f100 0c08 	add.w	ip, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8008316:	ea53 0402 	orrs.w	r4, r3, r2
 800831a:	d104      	bne.n	8008326 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
 8008320:	f06f 000b 	mvn.w	r0, #11
 8008324:	e7ef      	b.n	8008306 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 8008326:	9200      	str	r2, [sp, #0]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	4602      	mov	r2, r0
 800832c:	4660      	mov	r0, ip
 800832e:	f000 fd8d 	bl	8008e4c <z_pend_curr>
		if (result == 0) {
 8008332:	2800      	cmp	r0, #0
 8008334:	d1eb      	bne.n	800830e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
 8008336:	4b02      	ldr	r3, [pc, #8]	; (8008340 <k_mem_slab_alloc+0x64>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	602b      	str	r3, [r5, #0]
		return result;
 800833e:	e7e6      	b.n	800830e <k_mem_slab_alloc+0x32>
 8008340:	20000e74 	.word	0x20000e74

08008344 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 8008344:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8008346:	ea53 0102 	orrs.w	r1, r3, r2
 800834a:	d102      	bne.n	8008352 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
 800834c:	f004 fd3d 	bl	800cdca <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 8008350:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8008352:	4902      	ldr	r1, [pc, #8]	; (800835c <schedule_new_thread+0x18>)
 8008354:	3018      	adds	r0, #24
 8008356:	f001 f80b 	bl	8009370 <z_add_timeout>
 800835a:	e7f9      	b.n	8008350 <schedule_new_thread+0xc>
 800835c:	0800d05b 	.word	0x0800d05b

08008360 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	b085      	sub	sp, #20
 8008364:	4604      	mov	r4, r0
 8008366:	460e      	mov	r6, r1
 8008368:	4615      	mov	r5, r2
 800836a:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 800836c:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8008370:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8008372:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8008374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008376:	2204      	movs	r2, #4
 8008378:	990d      	ldr	r1, [sp, #52]	; 0x34
 800837a:	f004 fd2a 	bl	800cdd2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 800837e:	462a      	mov	r2, r5
 8008380:	4631      	mov	r1, r6
 8008382:	4620      	mov	r0, r4
 8008384:	f004 fd07 	bl	800cd96 <setup_thread_stack>
 8008388:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800838a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	463b      	mov	r3, r7
 8008398:	4602      	mov	r2, r0
 800839a:	4631      	mov	r1, r6
 800839c:	4620      	mov	r0, r4
 800839e:	f7fb fd61 	bl	8003e64 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <z_setup_new_thread+0x5c>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	b123      	cbz	r3, 80083b6 <z_setup_new_thread+0x56>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 80083ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ae:	6763      	str	r3, [r4, #116]	; 0x74
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
 80083b0:	4628      	mov	r0, r5
 80083b2:	b005      	add	sp, #20
 80083b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->resource_pool = NULL;
 80083b6:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
 80083b8:	e7fa      	b.n	80083b0 <z_setup_new_thread+0x50>
 80083ba:	bf00      	nop
 80083bc:	20000e74 	.word	0x20000e74

080083c0 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 80083c0:	b510      	push	{r4, lr}
 80083c2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 80083c4:	4c1d      	ldr	r4, [pc, #116]	; (800843c <z_init_static_threads+0x7c>)
 80083c6:	e014      	b.n	80083f2 <z_init_static_threads+0x32>
		z_setup_new_thread(
 80083c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	6a23      	ldr	r3, [r4, #32]
 80083ce:	9304      	str	r3, [sp, #16]
 80083d0:	69e3      	ldr	r3, [r4, #28]
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	69a3      	ldr	r3, [r4, #24]
 80083d6:	9302      	str	r3, [sp, #8]
 80083d8:	6963      	ldr	r3, [r4, #20]
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	68e3      	ldr	r3, [r4, #12]
 80083e2:	68a2      	ldr	r2, [r4, #8]
 80083e4:	6861      	ldr	r1, [r4, #4]
 80083e6:	6820      	ldr	r0, [r4, #0]
 80083e8:	f7ff ffba 	bl	8008360 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80083f0:	3430      	adds	r4, #48	; 0x30
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <z_init_static_threads+0x80>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	d3e7      	bcc.n	80083c8 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80083f8:	f000 fbd4 	bl	8008ba4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80083fc:	4c0f      	ldr	r4, [pc, #60]	; (800843c <z_init_static_threads+0x7c>)
 80083fe:	e000      	b.n	8008402 <z_init_static_threads+0x42>
 8008400:	3430      	adds	r4, #48	; 0x30
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <z_init_static_threads+0x80>)
 8008404:	429c      	cmp	r4, r3
 8008406:	d214      	bcs.n	8008432 <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8008408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840e:	d0f7      	beq.n	8008400 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 8008410:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008414:	17d8      	asrs	r0, r3, #31
 8008416:	0082      	lsls	r2, r0, #2
 8008418:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800841c:	0099      	lsls	r1, r3, #2
 800841e:	18c9      	adds	r1, r1, r3
 8008420:	eb40 0002 	adc.w	r0, r0, r2
 8008424:	184a      	adds	r2, r1, r1
 8008426:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 800842a:	6820      	ldr	r0, [r4, #0]
 800842c:	f7ff ff8a 	bl	8008344 <schedule_new_thread>
 8008430:	e7e6      	b.n	8008400 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 8008432:	f000 fdc1 	bl	8008fb8 <k_sched_unlock>
}
 8008436:	b006      	add	sp, #24
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	200002c8 	.word	0x200002c8
 8008440:	20000358 	.word	0x20000358

08008444 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	4604      	mov	r4, r0
 800844c:	460d      	mov	r5, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
 800844e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
 8008452:	f04f 0110 	mov.w	r1, #16
 8008456:	f3ef 8611 	mrs	r6, BASEPRI
 800845a:	f381 8812 	msr	BASEPRI_MAX, r1
 800845e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
 8008462:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008464:	6921      	ldr	r1, [r4, #16]
 8008466:	4288      	cmp	r0, r1
 8008468:	d30b      	bcc.n	8008482 <z_impl_k_msgq_put+0x3e>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 800846a:	ea53 0102 	orrs.w	r1, r3, r2
 800846e:	d137      	bne.n	80084e0 <z_impl_k_msgq_put+0x9c>
		/* don't wait for message space to become available */
		result = -ENOMSG;
 8008470:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8008474:	f386 8811 	msr	BASEPRI, r6
 8008478:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 800847c:	b002      	add	sp, #8
 800847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 8008482:	4620      	mov	r0, r4
 8008484:	f004 fe94 	bl	800d1b0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8008488:	4680      	mov	r8, r0
 800848a:	b180      	cbz	r0, 80084ae <z_impl_k_msgq_put+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800848c:	68e2      	ldr	r2, [r4, #12]
 800848e:	4629      	mov	r1, r5
 8008490:	6940      	ldr	r0, [r0, #20]
 8008492:	f005 f82b 	bl	800d4ec <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8008496:	2400      	movs	r4, #0
 8008498:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
			z_ready_thread(pending_thread);
 800849c:	4640      	mov	r0, r8
 800849e:	f004 fdc0 	bl	800d022 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 80084a2:	4631      	mov	r1, r6
 80084a4:	4638      	mov	r0, r7
 80084a6:	f000 fb61 	bl	8008b6c <z_reschedule>
			return 0;
 80084aa:	4620      	mov	r0, r4
 80084ac:	e7e6      	b.n	800847c <z_impl_k_msgq_put+0x38>
 80084ae:	68e2      	ldr	r2, [r4, #12]
 80084b0:	4629      	mov	r1, r5
 80084b2:	6a20      	ldr	r0, [r4, #32]
 80084b4:	f005 f81a 	bl	800d4ec <memcpy>
			msgq->write_ptr += msgq->msg_size;
 80084b8:	68e2      	ldr	r2, [r4, #12]
 80084ba:	6a23      	ldr	r3, [r4, #32]
 80084bc:	4413      	add	r3, r2
 80084be:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 80084c0:	69a2      	ldr	r2, [r4, #24]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d009      	beq.n	80084da <z_impl_k_msgq_put+0x96>
			msgq->used_msgs++;
 80084c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c8:	3301      	adds	r3, #1
 80084ca:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
 80084cc:	2110      	movs	r1, #16
 80084ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80084d2:	f004 fff1 	bl	800d4b8 <z_handle_obj_poll_events>
		result = 0;
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7cc      	b.n	8008474 <z_impl_k_msgq_put+0x30>
				msgq->write_ptr = msgq->buffer_start;
 80084da:	6963      	ldr	r3, [r4, #20]
 80084dc:	6223      	str	r3, [r4, #32]
 80084de:	e7f2      	b.n	80084c6 <z_impl_k_msgq_put+0x82>
		_current->base.swap_data = (void *) data;
 80084e0:	4905      	ldr	r1, [pc, #20]	; (80084f8 <z_impl_k_msgq_put+0xb4>)
 80084e2:	6889      	ldr	r1, [r1, #8]
 80084e4:	614d      	str	r5, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80084e6:	9200      	str	r2, [sp, #0]
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	4622      	mov	r2, r4
 80084ec:	4631      	mov	r1, r6
 80084ee:	4638      	mov	r0, r7
 80084f0:	f000 fcac 	bl	8008e4c <z_pend_curr>
		return result;
 80084f4:	e7c2      	b.n	800847c <z_impl_k_msgq_put+0x38>
 80084f6:	bf00      	nop
 80084f8:	20000e74 	.word	0x20000e74

080084fc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
 80084fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084fe:	b083      	sub	sp, #12
 8008500:	4604      	mov	r4, r0
 8008502:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
 8008504:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
 8008508:	f04f 0110 	mov.w	r1, #16
 800850c:	f3ef 8511 	mrs	r5, BASEPRI
 8008510:	f381 8812 	msr	BASEPRI_MAX, r1
 8008514:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
 8008518:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800851a:	2900      	cmp	r1, #0
 800851c:	d033      	beq.n	8008586 <z_impl_k_msgq_get+0x8a>
 800851e:	68e2      	ldr	r2, [r4, #12]
 8008520:	69e1      	ldr	r1, [r4, #28]
 8008522:	f004 ffe3 	bl	800d4ec <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
 8008526:	68e2      	ldr	r2, [r4, #12]
 8008528:	69e3      	ldr	r3, [r4, #28]
 800852a:	4413      	add	r3, r2
 800852c:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
 800852e:	69a2      	ldr	r2, [r4, #24]
 8008530:	4293      	cmp	r3, r2
 8008532:	d022      	beq.n	800857a <z_impl_k_msgq_get+0x7e>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
 8008534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008536:	3b01      	subs	r3, #1
 8008538:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
 800853a:	4620      	mov	r0, r4
 800853c:	f004 fe38 	bl	800d1b0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 8008540:	4607      	mov	r7, r0
 8008542:	2800      	cmp	r0, #0
 8008544:	d035      	beq.n	80085b2 <z_impl_k_msgq_get+0xb6>
 8008546:	68e2      	ldr	r2, [r4, #12]
 8008548:	6941      	ldr	r1, [r0, #20]
 800854a:	6a20      	ldr	r0, [r4, #32]
 800854c:	f004 ffce 	bl	800d4ec <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
 8008550:	68e2      	ldr	r2, [r4, #12]
 8008552:	6a23      	ldr	r3, [r4, #32]
 8008554:	4413      	add	r3, r2
 8008556:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
 8008558:	69a2      	ldr	r2, [r4, #24]
 800855a:	4293      	cmp	r3, r2
 800855c:	d010      	beq.n	8008580 <z_impl_k_msgq_get+0x84>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
 800855e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008560:	3301      	adds	r3, #1
 8008562:	6263      	str	r3, [r4, #36]	; 0x24
 8008564:	2400      	movs	r4, #0
 8008566:	67fc      	str	r4, [r7, #124]	; 0x7c

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
 8008568:	4638      	mov	r0, r7
 800856a:	f004 fd5a 	bl	800d022 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
 800856e:	4629      	mov	r1, r5
 8008570:	4630      	mov	r0, r6
 8008572:	f000 fafb 	bl	8008b6c <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
 8008576:	4620      	mov	r0, r4
 8008578:	e00e      	b.n	8008598 <z_impl_k_msgq_get+0x9c>
			msgq->read_ptr = msgq->buffer_start;
 800857a:	6963      	ldr	r3, [r4, #20]
 800857c:	61e3      	str	r3, [r4, #28]
 800857e:	e7d9      	b.n	8008534 <z_impl_k_msgq_get+0x38>
				msgq->write_ptr = msgq->buffer_start;
 8008580:	6963      	ldr	r3, [r4, #20]
 8008582:	6223      	str	r3, [r4, #32]
 8008584:	e7eb      	b.n	800855e <z_impl_k_msgq_get+0x62>
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8008586:	ea53 0102 	orrs.w	r1, r3, r2
 800858a:	d107      	bne.n	800859c <z_impl_k_msgq_get+0xa0>
		/* don't wait for a message to become available */
		result = -ENOMSG;
 800858c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
 8008590:	f385 8811 	msr	BASEPRI, r5
 8008594:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
 8008598:	b003      	add	sp, #12
 800859a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_current->base.swap_data = data;
 800859c:	4906      	ldr	r1, [pc, #24]	; (80085b8 <z_impl_k_msgq_get+0xbc>)
 800859e:	6889      	ldr	r1, [r1, #8]
 80085a0:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
 80085a2:	9200      	str	r2, [sp, #0]
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	4622      	mov	r2, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	4630      	mov	r0, r6
 80085ac:	f000 fc4e 	bl	8008e4c <z_pend_curr>
		return result;
 80085b0:	e7f2      	b.n	8008598 <z_impl_k_msgq_get+0x9c>
		result = 0;
 80085b2:	2000      	movs	r0, #0
 80085b4:	e7ec      	b.n	8008590 <z_impl_k_msgq_get+0x94>
 80085b6:	bf00      	nop
 80085b8:	20000e74 	.word	0x20000e74

080085bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 80085bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c0:	b083      	sub	sp, #12
 80085c2:	4604      	mov	r4, r0
 80085c4:	461d      	mov	r5, r3
	__asm__ volatile(
 80085c6:	f04f 0310 	mov.w	r3, #16
 80085ca:	f3ef 8711 	mrs	r7, BASEPRI
 80085ce:	f383 8812 	msr	BASEPRI_MAX, r3
 80085d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 80085d6:	68c1      	ldr	r1, [r0, #12]
 80085d8:	b999      	cbnz	r1, 8008602 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 80085da:	2900      	cmp	r1, #0
 80085dc:	d14f      	bne.n	800867e <z_impl_k_mutex_lock+0xc2>
 80085de:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <z_impl_k_mutex_lock+0x10c>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 80085e6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 80085e8:	3101      	adds	r1, #1
 80085ea:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 80085ec:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <z_impl_k_mutex_lock+0x10c>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 80085f2:	f387 8811 	msr	BASEPRI, r7
 80085f6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 80085fa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008602:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8008604:	6882      	ldr	r2, [r0, #8]
 8008606:	4b30      	ldr	r3, [pc, #192]	; (80086c8 <z_impl_k_mutex_lock+0x10c>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d0e5      	beq.n	80085da <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 800860e:	ea55 0106 	orrs.w	r1, r5, r6
 8008612:	bf0c      	ite	eq
 8008614:	f04f 0801 	moveq.w	r8, #1
 8008618:	f04f 0800 	movne.w	r8, #0
 800861c:	d031      	beq.n	8008682 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 800861e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8008622:	4649      	mov	r1, r9
 8008624:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8008628:	f004 fc2e 	bl	800ce88 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800862c:	4581      	cmp	r9, r0
 800862e:	dc2f      	bgt.n	8008690 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8008630:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8008634:	9600      	str	r6, [sp, #0]
 8008636:	9501      	str	r5, [sp, #4]
 8008638:	4622      	mov	r2, r4
 800863a:	4639      	mov	r1, r7
 800863c:	4823      	ldr	r0, [pc, #140]	; (80086cc <z_impl_k_mutex_lock+0x110>)
 800863e:	f000 fc05 	bl	8008e4c <z_pend_curr>
	if (got_mutex == 0) {
 8008642:	2800      	cmp	r0, #0
 8008644:	d0da      	beq.n	80085fc <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 8008646:	f04f 0310 	mov.w	r3, #16
 800864a:	f3ef 8511 	mrs	r5, BASEPRI
 800864e:	f383 8812 	msr	BASEPRI_MAX, r3
 8008652:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 8008656:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008658:	42a3      	cmp	r3, r4
 800865a:	d01f      	beq.n	800869c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800865c:	b1f3      	cbz	r3, 800869c <z_impl_k_mutex_lock+0xe0>
 800865e:	6921      	ldr	r1, [r4, #16]
 8008660:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8008664:	f004 fc10 	bl	800ce88 <new_prio_for_inheritance>
 8008668:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 800866a:	4620      	mov	r0, r4
 800866c:	f004 fc17 	bl	800ce9e <adjust_owner_prio>
 8008670:	b9b0      	cbnz	r0, 80086a0 <z_impl_k_mutex_lock+0xe4>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	d015      	beq.n	80086a4 <z_impl_k_mutex_lock+0xe8>
 8008678:	f04f 0801 	mov.w	r8, #1
 800867c:	e012      	b.n	80086a4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	e7b1      	b.n	80085e6 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 8008682:	f387 8811 	msr	BASEPRI, r7
 8008686:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 800868a:	f06f 000f 	mvn.w	r0, #15
 800868e:	e7b5      	b.n	80085fc <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 8008690:	4601      	mov	r1, r0
 8008692:	4620      	mov	r0, r4
 8008694:	f004 fc03 	bl	800ce9e <adjust_owner_prio>
 8008698:	4681      	mov	r9, r0
 800869a:	e7cb      	b.n	8008634 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 800869c:	6921      	ldr	r1, [r4, #16]
 800869e:	e7e4      	b.n	800866a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80086a0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 80086a4:	f1b8 0f00 	cmp.w	r8, #0
 80086a8:	d106      	bne.n	80086b8 <z_impl_k_mutex_lock+0xfc>
 80086aa:	f385 8811 	msr	BASEPRI, r5
 80086ae:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 80086b2:	f06f 000a 	mvn.w	r0, #10
 80086b6:	e7a1      	b.n	80085fc <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 80086b8:	4629      	mov	r1, r5
 80086ba:	4804      	ldr	r0, [pc, #16]	; (80086cc <z_impl_k_mutex_lock+0x110>)
 80086bc:	f000 fa56 	bl	8008b6c <z_reschedule>
	return -EAGAIN;
 80086c0:	f06f 000a 	mvn.w	r0, #10
 80086c4:	e79a      	b.n	80085fc <z_impl_k_mutex_lock+0x40>
 80086c6:	bf00      	nop
 80086c8:	20000e74 	.word	0x20000e74
 80086cc:	20000e98 	.word	0x20000e98

080086d0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 80086d0:	6882      	ldr	r2, [r0, #8]
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	d034      	beq.n	8008740 <z_impl_k_mutex_unlock+0x70>
{
 80086d6:	b538      	push	{r3, r4, r5, lr}
 80086d8:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 80086da:	4b1c      	ldr	r3, [pc, #112]	; (800874c <z_impl_k_mutex_unlock+0x7c>)
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d131      	bne.n	8008746 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 80086e2:	7bda      	ldrb	r2, [r3, #15]
 80086e4:	3a01      	subs	r2, #1
 80086e6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 80086e8:	68c3      	ldr	r3, [r0, #12]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d905      	bls.n	80086fa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 80086ee:	3b01      	subs	r3, #1
 80086f0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 80086f2:	f000 fc61 	bl	8008fb8 <k_sched_unlock>

	return 0;
 80086f6:	2000      	movs	r0, #0
}
 80086f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80086fa:	f04f 0310 	mov.w	r3, #16
 80086fe:	f3ef 8511 	mrs	r5, BASEPRI
 8008702:	f383 8812 	msr	BASEPRI_MAX, r3
 8008706:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 800870a:	6901      	ldr	r1, [r0, #16]
 800870c:	f004 fbc7 	bl	800ce9e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8008710:	4620      	mov	r0, r4
 8008712:	f004 fd4d 	bl	800d1b0 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8008716:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8008718:	b158      	cbz	r0, 8008732 <z_impl_k_mutex_unlock+0x62>
		mutex->owner_orig_prio = new_owner->base.prio;
 800871a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2300      	movs	r3, #0
 8008722:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 8008724:	f004 fc7d 	bl	800d022 <z_ready_thread>
		z_reschedule(&lock, key);
 8008728:	4629      	mov	r1, r5
 800872a:	4809      	ldr	r0, [pc, #36]	; (8008750 <z_impl_k_mutex_unlock+0x80>)
 800872c:	f000 fa1e 	bl	8008b6c <z_reschedule>
 8008730:	e7df      	b.n	80086f2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8008736:	f385 8811 	msr	BASEPRI, r5
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	e7d8      	b.n	80086f2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8008740:	f06f 0015 	mvn.w	r0, #21
}
 8008744:	4770      	bx	lr
		return -EPERM;
 8008746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800874a:	e7d5      	b.n	80086f8 <z_impl_k_mutex_unlock+0x28>
 800874c:	20000e74 	.word	0x20000e74
 8008750:	20000e98 	.word	0x20000e98

08008754 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4604      	mov	r4, r0
	__asm__ volatile(
 8008758:	f04f 0310 	mov.w	r3, #16
 800875c:	f3ef 8511 	mrs	r5, BASEPRI
 8008760:	f383 8812 	msr	BASEPRI_MAX, r3
 8008764:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8008768:	f004 fd22 	bl	800d1b0 <z_unpend_first_thread>

	if (thread != NULL) {
 800876c:	b140      	cbz	r0, 8008780 <z_impl_k_sem_give+0x2c>
 800876e:	2200      	movs	r2, #0
 8008770:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8008772:	f004 fc56 	bl	800d022 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8008776:	4629      	mov	r1, r5
 8008778:	4809      	ldr	r0, [pc, #36]	; (80087a0 <z_impl_k_sem_give+0x4c>)
 800877a:	f000 f9f7 	bl	8008b6c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 800877e:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	68e2      	ldr	r2, [r4, #12]
 8008784:	4293      	cmp	r3, r2
 8008786:	d008      	beq.n	800879a <z_impl_k_sem_give+0x46>
 8008788:	2201      	movs	r2, #1
 800878a:	4413      	add	r3, r2
 800878c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 800878e:	2102      	movs	r1, #2
 8008790:	f104 0010 	add.w	r0, r4, #16
 8008794:	f004 fe90 	bl	800d4b8 <z_handle_obj_poll_events>
}
 8008798:	e7ed      	b.n	8008776 <z_impl_k_sem_give+0x22>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800879a:	2200      	movs	r2, #0
 800879c:	e7f5      	b.n	800878a <z_impl_k_sem_give+0x36>
 800879e:	bf00      	nop
 80087a0:	20000e9c 	.word	0x20000e9c

080087a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80087a4:	b510      	push	{r4, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	f04f 0410 	mov.w	r4, #16
 80087ac:	f3ef 8111 	mrs	r1, BASEPRI
 80087b0:	f384 8812 	msr	BASEPRI_MAX, r4
 80087b4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 80087b8:	6884      	ldr	r4, [r0, #8]
 80087ba:	b144      	cbz	r4, 80087ce <z_impl_k_sem_take+0x2a>
		sem->count--;
 80087bc:	3c01      	subs	r4, #1
 80087be:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
 80087c0:	f381 8811 	msr	BASEPRI, r1
 80087c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80087c8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 80087ca:	b002      	add	sp, #8
 80087cc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80087ce:	ea53 0402 	orrs.w	r4, r3, r2
 80087d2:	d006      	beq.n	80087e2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80087d4:	9200      	str	r2, [sp, #0]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	4602      	mov	r2, r0
 80087da:	4805      	ldr	r0, [pc, #20]	; (80087f0 <z_impl_k_sem_take+0x4c>)
 80087dc:	f000 fb36 	bl	8008e4c <z_pend_curr>
	return ret;
 80087e0:	e7f3      	b.n	80087ca <z_impl_k_sem_take+0x26>
 80087e2:	f381 8811 	msr	BASEPRI, r1
 80087e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80087ea:	f06f 000f 	mvn.w	r0, #15
 80087ee:	e7ec      	b.n	80087ca <z_impl_k_sem_take+0x26>
 80087f0:	20000e9c 	.word	0x20000e9c

080087f4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 80087f8:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80087fa:	f013 0f02 	tst.w	r3, #2
 80087fe:	d15c      	bne.n	80088ba <submit_to_queue_locked+0xc6>
 8008800:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8008802:	f013 0f04 	tst.w	r3, #4
 8008806:	d15d      	bne.n	80088c4 <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8008808:	680b      	ldr	r3, [r1, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d038      	beq.n	8008880 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
 800880e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8008810:	f013 0f01 	tst.w	r3, #1
 8008814:	d037      	beq.n	8008886 <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	602b      	str	r3, [r5, #0]
			ret = 2;
 800881a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 800881c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 800881e:	2e00      	cmp	r6, #0
 8008820:	d03f      	beq.n	80088a2 <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8008822:	4b29      	ldr	r3, [pc, #164]	; (80088c8 <submit_to_queue_locked+0xd4>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	42b3      	cmp	r3, r6
 8008828:	d02f      	beq.n	800888a <submit_to_queue_locked+0x96>
 800882a:	2300      	movs	r3, #0
 800882c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 800882e:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8008832:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8008836:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 800883a:	f013 0f01 	tst.w	r3, #1
 800883e:	d033      	beq.n	80088a8 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
 8008840:	b101      	cbz	r1, 8008844 <submit_to_queue_locked+0x50>
 8008842:	b3a2      	cbz	r2, 80088ae <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
 8008844:	b100      	cbz	r0, 8008848 <submit_to_queue_locked+0x54>
 8008846:	b3a9      	cbz	r1, 80088b4 <submit_to_queue_locked+0xc0>
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
 8008848:	2300      	movs	r3, #0
 800884a:	6023      	str	r3, [r4, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 800884c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
 8008850:	b313      	cbz	r3, 8008898 <submit_to_queue_locked+0xa4>
	parent->next = child;
 8008852:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8008854:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	if (queue != NULL) {
 8008858:	b12e      	cbz	r6, 8008866 <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 800885a:	2200      	movs	r2, #0
 800885c:	4611      	mov	r1, r2
 800885e:	f106 0088 	add.w	r0, r6, #136	; 0x88
 8008862:	f004 fcf5 	bl	800d250 <z_sched_wake>
		ret = 1;
 8008866:	2001      	movs	r0, #1

		if (rc < 0) {
 8008868:	2800      	cmp	r0, #0
 800886a:	db06      	blt.n	800887a <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
 800886c:	68e3      	ldr	r3, [r4, #12]
 800886e:	f043 0304 	orr.w	r3, r3, #4
 8008872:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	60a3      	str	r3, [r4, #8]
 8008878:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 800887a:	2800      	cmp	r0, #0
 800887c:	dc21      	bgt.n	80088c2 <submit_to_queue_locked+0xce>
 800887e:	e01e      	b.n	80088be <submit_to_queue_locked+0xca>
			*queuep = work->queue;
 8008880:	6883      	ldr	r3, [r0, #8]
 8008882:	600b      	str	r3, [r1, #0]
 8008884:	e7c3      	b.n	800880e <submit_to_queue_locked+0x1a>
		ret = 1;
 8008886:	2701      	movs	r7, #1
 8008888:	e7c8      	b.n	800881c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 800888a:	f004 fa93 	bl	800cdb4 <k_is_in_isr>
 800888e:	b908      	cbnz	r0, 8008894 <submit_to_queue_locked+0xa0>
 8008890:	2301      	movs	r3, #1
 8008892:	e7cb      	b.n	800882c <submit_to_queue_locked+0x38>
 8008894:	2300      	movs	r3, #0
 8008896:	e7c9      	b.n	800882c <submit_to_queue_locked+0x38>
 8008898:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
 800889c:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
 80088a0:	e7da      	b.n	8008858 <submit_to_queue_locked+0x64>
		return -EINVAL;
 80088a2:	f06f 0015 	mvn.w	r0, #21
 80088a6:	e7df      	b.n	8008868 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
 80088a8:	f06f 0012 	mvn.w	r0, #18
 80088ac:	e7dc      	b.n	8008868 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80088ae:	f06f 000f 	mvn.w	r0, #15
 80088b2:	e7d9      	b.n	8008868 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80088b4:	f06f 000f 	mvn.w	r0, #15
 80088b8:	e7d6      	b.n	8008868 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
 80088ba:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 80088c4:	2000      	movs	r0, #0
 80088c6:	e7fa      	b.n	80088be <submit_to_queue_locked+0xca>
 80088c8:	20000e74 	.word	0x20000e74

080088cc <finalize_cancel_locked>:
{
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 80088d0:	68c3      	ldr	r3, [r0, #12]
 80088d2:	f023 0302 	bic.w	r3, r3, #2
 80088d6:	60c3      	str	r3, [r0, #12]
	return list->head;
 80088d8:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <finalize_cancel_locked+0x78>)
 80088da:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 80088dc:	b1fb      	cbz	r3, 800891e <finalize_cancel_locked+0x52>
 80088de:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 80088e0:	b103      	cbz	r3, 80088e4 <finalize_cancel_locked+0x18>
	return node->next;
 80088e2:	681c      	ldr	r4, [r3, #0]
 80088e4:	2600      	movs	r6, #0
 80088e6:	e01f      	b.n	8008928 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
 80088e8:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 80088ea:	b166      	cbz	r6, 8008906 <finalize_cancel_locked+0x3a>
	return node->next;
 80088ec:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 80088ee:	6031      	str	r1, [r6, #0]
	return list->tail;
 80088f0:	4914      	ldr	r1, [pc, #80]	; (8008944 <finalize_cancel_locked+0x78>)
 80088f2:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 80088f4:	428b      	cmp	r3, r1
 80088f6:	d00f      	beq.n	8008918 <finalize_cancel_locked+0x4c>
	parent->next = child;
 80088f8:	2100      	movs	r1, #0
 80088fa:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
 80088fc:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
 8008900:	f7ff ff28 	bl	8008754 <z_impl_k_sem_give>
}
 8008904:	e015      	b.n	8008932 <finalize_cancel_locked+0x66>
	return node->next;
 8008906:	6818      	ldr	r0, [r3, #0]
	list->head = node;
 8008908:	490e      	ldr	r1, [pc, #56]	; (8008944 <finalize_cancel_locked+0x78>)
 800890a:	6008      	str	r0, [r1, #0]
	return list->tail;
 800890c:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800890e:	428b      	cmp	r3, r1
 8008910:	d1f2      	bne.n	80088f8 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8008912:	490c      	ldr	r1, [pc, #48]	; (8008944 <finalize_cancel_locked+0x78>)
 8008914:	6048      	str	r0, [r1, #4]
}
 8008916:	e7ef      	b.n	80088f8 <finalize_cancel_locked+0x2c>
	list->tail = node;
 8008918:	490a      	ldr	r1, [pc, #40]	; (8008944 <finalize_cancel_locked+0x78>)
 800891a:	604e      	str	r6, [r1, #4]
}
 800891c:	e7ec      	b.n	80088f8 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 800891e:	461c      	mov	r4, r3
 8008920:	e7e0      	b.n	80088e4 <finalize_cancel_locked+0x18>
 8008922:	4622      	mov	r2, r4
 8008924:	4623      	mov	r3, r4
 8008926:	4614      	mov	r4, r2
 8008928:	b153      	cbz	r3, 8008940 <finalize_cancel_locked+0x74>
		if (wc->work == work) {
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	42aa      	cmp	r2, r5
 800892e:	d0db      	beq.n	80088e8 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8008930:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8008932:	2c00      	cmp	r4, #0
 8008934:	d0f5      	beq.n	8008922 <finalize_cancel_locked+0x56>
 8008936:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008938:	2c00      	cmp	r4, #0
 800893a:	d0f3      	beq.n	8008924 <finalize_cancel_locked+0x58>
	return node->next;
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	e7f1      	b.n	8008924 <finalize_cancel_locked+0x58>
}
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	bf00      	nop
 8008944:	20000ea4 	.word	0x20000ea4

08008948 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8008948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800894a:	b085      	sub	sp, #20
 800894c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 800894e:	e016      	b.n	800897e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8008950:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
 8008954:	f023 0204 	bic.w	r2, r3, #4
 8008958:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 800895c:	f013 0f04 	tst.w	r3, #4
 8008960:	d159      	bne.n	8008a16 <work_queue_main+0xce>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8008962:	2300      	movs	r3, #0
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800896a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800896e:	e9cd 2300 	strd	r2, r3, [sp]
 8008972:	f105 0288 	add.w	r2, r5, #136	; 0x88
 8008976:	4631      	mov	r1, r6
 8008978:	482e      	ldr	r0, [pc, #184]	; (8008a34 <work_queue_main+0xec>)
 800897a:	f000 fc83 	bl	8009284 <z_sched_wait>
	__asm__ volatile(
 800897e:	f04f 0310 	mov.w	r3, #16
 8008982:	f3ef 8611 	mrs	r6, BASEPRI
 8008986:	f383 8812 	msr	BASEPRI_MAX, r3
 800898a:	f3bf 8f6f 	isb	sy
	return list->head;
 800898e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
 8008992:	2c00      	cmp	r4, #0
 8008994:	d0dc      	beq.n	8008950 <work_queue_main+0x8>
	return node->next;
 8008996:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8008998:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
 800899c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 80089a0:	4294      	cmp	r4, r2
 80089a2:	d035      	beq.n	8008a10 <work_queue_main+0xc8>
	*flagp |= BIT(bit);
 80089a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80089a8:	f043 0302 	orr.w	r3, r3, #2
 80089ac:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80089b0:	68e3      	ldr	r3, [r4, #12]
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
 80089b8:	f023 0304 	bic.w	r3, r3, #4
 80089bc:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 80089be:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 80089c0:	2c00      	cmp	r4, #0
 80089c2:	d0ce      	beq.n	8008962 <work_queue_main+0x1a>
	__asm__ volatile(
 80089c4:	f386 8811 	msr	BASEPRI, r6
 80089c8:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
 80089cc:	4620      	mov	r0, r4
 80089ce:	4798      	blx	r3
	__asm__ volatile(
 80089d0:	f04f 0310 	mov.w	r3, #16
 80089d4:	f3ef 8611 	mrs	r6, BASEPRI
 80089d8:	f383 8812 	msr	BASEPRI_MAX, r3
 80089dc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 80089e0:	68e3      	ldr	r3, [r4, #12]
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 80089e8:	f013 0f02 	tst.w	r3, #2
 80089ec:	d11e      	bne.n	8008a2c <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
 80089ee:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80089f2:	f023 0302 	bic.w	r3, r3, #2
 80089f6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
 80089fa:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 80089fe:	f386 8811 	msr	BASEPRI, r6
 8008a02:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1b9      	bne.n	800897e <work_queue_main+0x36>
	z_impl_k_yield();
 8008a0a:	f000 fb55 	bl	80090b8 <z_impl_k_yield>
}
 8008a0e:	e7b6      	b.n	800897e <work_queue_main+0x36>
	list->tail = node;
 8008a10:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8008a14:	e7c6      	b.n	80089a4 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8008a16:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f004 fc16 	bl	800d250 <z_sched_wake>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d1f8      	bne.n	8008a1a <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e7c9      	b.n	80089c0 <work_queue_main+0x78>
				finalize_cancel_locked(work);
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7ff ff4d 	bl	80088cc <finalize_cancel_locked>
 8008a32:	e7dc      	b.n	80089ee <work_queue_main+0xa6>
 8008a34:	20000ea0 	.word	0x20000ea0

08008a38 <k_work_submit>:
{
 8008a38:	b508      	push	{r3, lr}
 8008a3a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <k_work_submit+0xc>)
 8008a3e:	f004 fa5a 	bl	800cef6 <k_work_submit_to_queue>
}
 8008a42:	bd08      	pop	{r3, pc}
 8008a44:	20000860 	.word	0x20000860

08008a48 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
 8008a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4a:	b089      	sub	sp, #36	; 0x24
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8008a50:	2000      	movs	r0, #0
 8008a52:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	list->tail = NULL;
 8008a56:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8008a5a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
 8008a5e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
 8008a62:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 8008a66:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
 8008a6a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
 8008a6e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
 8008a72:	b1fd      	cbz	r5, 8008ab4 <k_work_queue_start+0x6c>
 8008a74:	7928      	ldrb	r0, [r5, #4]
 8008a76:	b9f8      	cbnz	r0, 8008ab8 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8008a78:	2001      	movs	r0, #1
	*flagp = flags;
 8008a7a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8008a7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008a82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008a86:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	9004      	str	r0, [sp, #16]
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	9002      	str	r0, [sp, #8]
 8008a92:	9001      	str	r0, [sp, #4]
 8008a94:	9400      	str	r4, [sp, #0]
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <k_work_queue_start+0x78>)
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f004 f9a5 	bl	800cde8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
 8008a9e:	b125      	cbz	r5, 8008aaa <k_work_queue_start+0x62>
 8008aa0:	6829      	ldr	r1, [r5, #0]
 8008aa2:	b111      	cbz	r1, 8008aaa <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f004 f98b 	bl	800cdc0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f004 f98d 	bl	800cdca <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
 8008ab0:	b009      	add	sp, #36	; 0x24
 8008ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8008ab4:	2001      	movs	r0, #1
 8008ab6:	e7e0      	b.n	8008a7a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 8008ab8:	f240 1001 	movw	r0, #257	; 0x101
 8008abc:	e7dd      	b.n	8008a7a <k_work_queue_start+0x32>
 8008abe:	bf00      	nop
 8008ac0:	08008949 	.word	0x08008949

08008ac4 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac8:	bf08      	it	eq
 8008aca:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8008ace:	d100      	bne.n	8008ad2 <add_thread_timeout+0xe>
 8008ad0:	4770      	bx	lr
{
 8008ad2:	b508      	push	{r3, lr}
 8008ad4:	4902      	ldr	r1, [pc, #8]	; (8008ae0 <add_thread_timeout+0x1c>)
 8008ad6:	3018      	adds	r0, #24
 8008ad8:	f000 fc4a 	bl	8009370 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
 8008adc:	bd08      	pop	{r3, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800d05b 	.word	0x0800d05b

08008ae4 <z_reset_time_slice>:
{
 8008ae4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <z_reset_time_slice+0x24>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	b903      	cbnz	r3, 8008aee <z_reset_time_slice+0xa>
}
 8008aec:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8008aee:	f7ff f895 	bl	8007c1c <sys_clock_elapsed>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <z_reset_time_slice+0x24>)
 8008af6:	6810      	ldr	r0, [r2, #0]
 8008af8:	4403      	add	r3, r0
 8008afa:	4a04      	ldr	r2, [pc, #16]	; (8008b0c <z_reset_time_slice+0x28>)
 8008afc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8008afe:	2100      	movs	r1, #0
 8008b00:	f004 fc12 	bl	800d328 <z_set_timeout_expiry>
}
 8008b04:	e7f2      	b.n	8008aec <z_reset_time_slice+0x8>
 8008b06:	bf00      	nop
 8008b08:	20000eb8 	.word	0x20000eb8
 8008b0c:	20000e74 	.word	0x20000e74

08008b10 <k_sched_time_slice_set>:
{
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
 8008b16:	2300      	movs	r3, #0
	__asm__ volatile(
 8008b18:	f04f 0210 	mov.w	r2, #16
 8008b1c:	f3ef 8611 	mrs	r6, BASEPRI
 8008b20:	f382 8812 	msr	BASEPRI_MAX, r2
 8008b24:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8008b28:	e00c      	b.n	8008b44 <k_sched_time_slice_set+0x34>
			slice_time = MAX(2, slice_time);
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	bfb8      	it	lt
 8008b2e:	2302      	movlt	r3, #2
 8008b30:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <k_sched_time_slice_set+0x50>)
 8008b34:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
 8008b36:	f7ff ffd5 	bl	8008ae4 <z_reset_time_slice>
	__asm__ volatile(
 8008b3a:	f386 8811 	msr	BASEPRI, r6
 8008b3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008b42:	2301      	movs	r3, #1
 8008b44:	b953      	cbnz	r3, 8008b5c <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 8008b46:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <k_sched_time_slice_set+0x54>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8008b4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008b50:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8008b52:	4a05      	ldr	r2, [pc, #20]	; (8008b68 <k_sched_time_slice_set+0x58>)
 8008b54:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8008b56:	2c00      	cmp	r4, #0
 8008b58:	dce7      	bgt.n	8008b2a <k_sched_time_slice_set+0x1a>
 8008b5a:	e7ea      	b.n	8008b32 <k_sched_time_slice_set+0x22>
}
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000eb4 	.word	0x20000eb4
 8008b64:	20000e74 	.word	0x20000e74
 8008b68:	20000eb8 	.word	0x20000eb8

08008b6c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8008b6c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8008b6e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008b70:	b921      	cbnz	r1, 8008b7c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b72:	f3ef 8305 	mrs	r3, IPSR
 8008b76:	b913      	cbnz	r3, 8008b7e <z_reschedule+0x12>
 8008b78:	2101      	movs	r1, #1
 8008b7a:	e000      	b.n	8008b7e <z_reschedule+0x12>
 8008b7c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8008b7e:	f011 0f01 	tst.w	r1, #1
 8008b82:	d007      	beq.n	8008b94 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <z_reschedule+0x34>)
 8008b86:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8008b88:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d002      	beq.n	8008b94 <z_reschedule+0x28>
	ret = arch_swap(key);
 8008b8e:	f7fb f915 	bl	8003dbc <arch_swap>
		z_swap(lock, key);
 8008b92:	e003      	b.n	8008b9c <z_reschedule+0x30>
 8008b94:	f380 8811 	msr	BASEPRI, r0
 8008b98:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8008b9c:	bd08      	pop	{r3, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000e74 	.word	0x20000e74

08008ba4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8008ba4:	2300      	movs	r3, #0
	__asm__ volatile(
 8008ba6:	f04f 0210 	mov.w	r2, #16
 8008baa:	f3ef 8111 	mrs	r1, BASEPRI
 8008bae:	f382 8812 	msr	BASEPRI_MAX, r2
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	e009      	b.n	8008bcc <k_sched_lock+0x28>
	--_current->base.sched_locked;
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <k_sched_lock+0x30>)
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	7bd3      	ldrb	r3, [r2, #15]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8008bc2:	f381 8811 	msr	BASEPRI, r1
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	2301      	movs	r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0f3      	beq.n	8008bb8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20000e74 	.word	0x20000e74

08008bd8 <update_cache>:
{
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8008bdc:	480f      	ldr	r0, [pc, #60]	; (8008c1c <update_cache+0x44>)
 8008bde:	f004 fa19 	bl	800d014 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8008be2:	4605      	mov	r5, r0
 8008be4:	b170      	cbz	r0, 8008c04 <update_cache+0x2c>
	if (preempt_ok != 0) {
 8008be6:	b984      	cbnz	r4, 8008c0a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <update_cache+0x48>)
 8008bea:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 8008bec:	7b5a      	ldrb	r2, [r3, #13]
 8008bee:	f012 0f1f 	tst.w	r2, #31
 8008bf2:	d10a      	bne.n	8008c0a <update_cache+0x32>
	return node->next != NULL;
 8008bf4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8008bf6:	b942      	cbnz	r2, 8008c0a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8008bf8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8008bfa:	2a7f      	cmp	r2, #127	; 0x7f
 8008bfc:	d905      	bls.n	8008c0a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 8008bfe:	4a08      	ldr	r2, [pc, #32]	; (8008c20 <update_cache+0x48>)
 8008c00:	6193      	str	r3, [r2, #24]
 8008c02:	e00a      	b.n	8008c1a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <update_cache+0x48>)
 8008c06:	68dd      	ldr	r5, [r3, #12]
 8008c08:	e7ed      	b.n	8008be6 <update_cache+0xe>
		if (thread != _current) {
 8008c0a:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <update_cache+0x48>)
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	42ab      	cmp	r3, r5
 8008c10:	d001      	beq.n	8008c16 <update_cache+0x3e>
			z_reset_time_slice();
 8008c12:	f7ff ff67 	bl	8008ae4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8008c16:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <update_cache+0x48>)
 8008c18:	619d      	str	r5, [r3, #24]
}
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000e90 	.word	0x20000e90
 8008c20:	20000e74 	.word	0x20000e74

08008c24 <move_thread_to_end_of_prio_q>:
{
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8008c28:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8008c2a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	db28      	blt.n	8008c84 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008c32:	7b6b      	ldrb	r3, [r5, #13]
 8008c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c38:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ca4 <move_thread_to_end_of_prio_q+0x80>)
 8008c3c:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008c40:	429c      	cmp	r4, r3
 8008c42:	d02d      	beq.n	8008ca0 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008c44:	b16c      	cbz	r4, 8008c62 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008c46:	4621      	mov	r1, r4
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f004 f978 	bl	800cf3e <z_sched_prio_cmp>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	dc20      	bgt.n	8008c94 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008c52:	b134      	cbz	r4, 8008c62 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8008c54:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <move_thread_to_end_of_prio_q+0x80>)
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	d002      	beq.n	8008c62 <move_thread_to_end_of_prio_q+0x3e>
 8008c5c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	d1f0      	bne.n	8008c44 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <move_thread_to_end_of_prio_q+0x80>)
 8008c64:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 8008c66:	f103 011c 	add.w	r1, r3, #28
 8008c6a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8008c6c:	606a      	str	r2, [r5, #4]

	tail->next = node;
 8008c6e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8008c70:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 8008c72:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <move_thread_to_end_of_prio_q+0x80>)
 8008c74:	6898      	ldr	r0, [r3, #8]
 8008c76:	42a8      	cmp	r0, r5
 8008c78:	bf14      	ite	ne
 8008c7a:	2000      	movne	r0, #0
 8008c7c:	2001      	moveq	r0, #1
 8008c7e:	f7ff ffab 	bl	8008bd8 <update_cache>
}
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008c84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c88:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8008c8a:	4601      	mov	r1, r0
 8008c8c:	4806      	ldr	r0, [pc, #24]	; (8008ca8 <move_thread_to_end_of_prio_q+0x84>)
 8008c8e:	f004 f995 	bl	800cfbc <z_priq_dumb_remove>
}
 8008c92:	e7ce      	b.n	8008c32 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 8008c94:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 8008c96:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8008c98:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8008c9a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8008c9c:	6065      	str	r5, [r4, #4]
}
 8008c9e:	e7e8      	b.n	8008c72 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ca0:	2400      	movs	r4, #0
 8008ca2:	e7cf      	b.n	8008c44 <move_thread_to_end_of_prio_q+0x20>
 8008ca4:	20000e74 	.word	0x20000e74
 8008ca8:	20000e90 	.word	0x20000e90

08008cac <z_time_slice>:
{
 8008cac:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008cae:	f04f 0310 	mov.w	r3, #16
 8008cb2:	f3ef 8411 	mrs	r4, BASEPRI
 8008cb6:	f383 8812 	msr	BASEPRI_MAX, r3
 8008cba:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8008cbe:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <z_time_slice+0x98>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	4a21      	ldr	r2, [pc, #132]	; (8008d48 <z_time_slice+0x9c>)
 8008cc4:	6812      	ldr	r2, [r2, #0]
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d017      	beq.n	8008cfa <z_time_slice+0x4e>
	pending_current = NULL;
 8008cca:	4a1f      	ldr	r2, [pc, #124]	; (8008d48 <z_time_slice+0x9c>)
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8008cd0:	4a1e      	ldr	r2, [pc, #120]	; (8008d4c <z_time_slice+0xa0>)
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	b372      	cbz	r2, 8008d34 <z_time_slice+0x88>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8008cd6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8008cd8:	2a7f      	cmp	r2, #127	; 0x7f
 8008cda:	d815      	bhi.n	8008d08 <z_time_slice+0x5c>
	uint8_t state = thread->base.thread_state;
 8008cdc:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 8008cde:	f012 0f1f 	tst.w	r2, #31
 8008ce2:	d11b      	bne.n	8008d1c <z_time_slice+0x70>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8008ce4:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <z_time_slice+0xa4>)
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	4291      	cmp	r1, r2
 8008cee:	db17      	blt.n	8008d20 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 8008cf0:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <z_time_slice+0xa8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d016      	beq.n	8008d24 <z_time_slice+0x78>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	e007      	b.n	8008d0a <z_time_slice+0x5e>
		z_reset_time_slice();
 8008cfa:	f7ff fef3 	bl	8008ae4 <z_reset_time_slice>
	__asm__ volatile(
 8008cfe:	f384 8811 	msr	BASEPRI, r4
 8008d02:	f3bf 8f6f 	isb	sy
		return;
 8008d06:	e01c      	b.n	8008d42 <z_time_slice+0x96>
		&& !z_is_idle_thread_object(thread);
 8008d08:	2200      	movs	r2, #0
	if (slice_time && sliceable(_current)) {
 8008d0a:	b19a      	cbz	r2, 8008d34 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <z_time_slice+0x98>)
 8008d0e:	6912      	ldr	r2, [r2, #16]
 8008d10:	4282      	cmp	r2, r0
 8008d12:	dd09      	ble.n	8008d28 <z_time_slice+0x7c>
			_current_cpu->slice_ticks -= ticks;
 8008d14:	1a10      	subs	r0, r2, r0
 8008d16:	4b0b      	ldr	r3, [pc, #44]	; (8008d44 <z_time_slice+0x98>)
 8008d18:	6118      	str	r0, [r3, #16]
 8008d1a:	e00e      	b.n	8008d3a <z_time_slice+0x8e>
		&& !z_is_idle_thread_object(thread);
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	e7f4      	b.n	8008d0a <z_time_slice+0x5e>
 8008d20:	2200      	movs	r2, #0
 8008d22:	e7f2      	b.n	8008d0a <z_time_slice+0x5e>
 8008d24:	2200      	movs	r2, #0
 8008d26:	e7f0      	b.n	8008d0a <z_time_slice+0x5e>
			move_thread_to_end_of_prio_q(_current);
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff ff7b 	bl	8008c24 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8008d2e:	f7ff fed9 	bl	8008ae4 <z_reset_time_slice>
 8008d32:	e002      	b.n	8008d3a <z_time_slice+0x8e>
		_current_cpu->slice_ticks = 0;
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <z_time_slice+0x98>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	611a      	str	r2, [r3, #16]
 8008d3a:	f384 8811 	msr	BASEPRI, r4
 8008d3e:	f3bf 8f6f 	isb	sy
}
 8008d42:	bd10      	pop	{r4, pc}
 8008d44:	20000e74 	.word	0x20000e74
 8008d48:	20000eac 	.word	0x20000eac
 8008d4c:	20000eb8 	.word	0x20000eb8
 8008d50:	20000eb4 	.word	0x20000eb4
 8008d54:	20000758 	.word	0x20000758

08008d58 <ready_thread>:
{
 8008d58:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 8008d5a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8008d5c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	db2d      	blt.n	8008dc0 <ready_thread+0x68>
 8008d64:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008d66:	f013 0f1f 	tst.w	r3, #31
 8008d6a:	d105      	bne.n	8008d78 <ready_thread+0x20>
	return node->next != NULL;
 8008d6c:	6982      	ldr	r2, [r0, #24]
 8008d6e:	b10a      	cbz	r2, 8008d74 <ready_thread+0x1c>
 8008d70:	2200      	movs	r2, #0
 8008d72:	e002      	b.n	8008d7a <ready_thread+0x22>
 8008d74:	2201      	movs	r2, #1
 8008d76:	e000      	b.n	8008d7a <ready_thread+0x22>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	b30a      	cbz	r2, 8008dc0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 8008d7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d80:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <ready_thread+0x7c>)
 8008d84:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	d020      	beq.n	8008dce <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008d8c:	b16d      	cbz	r5, 8008daa <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4620      	mov	r0, r4
 8008d92:	f004 f8d4 	bl	800cf3e <z_sched_prio_cmp>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	dc13      	bgt.n	8008dc2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008d9a:	b135      	cbz	r5, 8008daa <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <ready_thread+0x7c>)
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	429d      	cmp	r5, r3
 8008da2:	d002      	beq.n	8008daa <ready_thread+0x52>
 8008da4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	d1f0      	bne.n	8008d8c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 8008daa:	4b0a      	ldr	r3, [pc, #40]	; (8008dd4 <ready_thread+0x7c>)
 8008dac:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008dae:	f103 011c 	add.w	r1, r3, #28
 8008db2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8008db4:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8008db6:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008db8:	621c      	str	r4, [r3, #32]
		update_cache(0);
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f7ff ff0c 	bl	8008bd8 <update_cache>
}
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 8008dc2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8008dc4:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8008dc6:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8008dc8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008dca:	606c      	str	r4, [r5, #4]
}
 8008dcc:	e7f5      	b.n	8008dba <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008dce:	2500      	movs	r5, #0
 8008dd0:	e7dc      	b.n	8008d8c <ready_thread+0x34>
 8008dd2:	bf00      	nop
 8008dd4:	20000e74 	.word	0x20000e74

08008dd8 <z_sched_start>:
{
 8008dd8:	b510      	push	{r4, lr}
	__asm__ volatile(
 8008dda:	f04f 0310 	mov.w	r3, #16
 8008dde:	f3ef 8411 	mrs	r4, BASEPRI
 8008de2:	f383 8812 	msr	BASEPRI_MAX, r3
 8008de6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8008dea:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8008dec:	f013 0f04 	tst.w	r3, #4
 8008df0:	d104      	bne.n	8008dfc <z_sched_start+0x24>
	__asm__ volatile(
 8008df2:	f384 8811 	msr	BASEPRI, r4
 8008df6:	f3bf 8f6f 	isb	sy
}
 8008dfa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8008dfc:	f023 0304 	bic.w	r3, r3, #4
 8008e00:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 8008e02:	f7ff ffa9 	bl	8008d58 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8008e06:	4621      	mov	r1, r4
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <z_sched_start+0x38>)
 8008e0a:	f7ff feaf 	bl	8008b6c <z_reschedule>
 8008e0e:	e7f4      	b.n	8008dfa <z_sched_start+0x22>
 8008e10:	20000eb0 	.word	0x20000eb0

08008e14 <unready_thread>:
{
 8008e14:	b510      	push	{r4, lr}
 8008e16:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8008e18:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8008e1a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	db08      	blt.n	8008e34 <unready_thread+0x20>
	update_cache(thread == _current);
 8008e22:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <unready_thread+0x30>)
 8008e24:	6898      	ldr	r0, [r3, #8]
 8008e26:	42a0      	cmp	r0, r4
 8008e28:	bf14      	ite	ne
 8008e2a:	2000      	movne	r0, #0
 8008e2c:	2001      	moveq	r0, #1
 8008e2e:	f7ff fed3 	bl	8008bd8 <update_cache>
}
 8008e32:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e38:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	4802      	ldr	r0, [pc, #8]	; (8008e48 <unready_thread+0x34>)
 8008e3e:	f004 f8bd 	bl	800cfbc <z_priq_dumb_remove>
}
 8008e42:	e7ee      	b.n	8008e22 <unready_thread+0xe>
 8008e44:	20000e74 	.word	0x20000e74
 8008e48:	20000e90 	.word	0x20000e90

08008e4c <z_pend_curr>:
{
 8008e4c:	b510      	push	{r4, lr}
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4611      	mov	r1, r2
	pending_current = _current;
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <z_pend_curr+0x20>)
 8008e54:	6898      	ldr	r0, [r3, #8]
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <z_pend_curr+0x24>)
 8008e58:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 8008e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e5e:	f004 f95e 	bl	800d11e <pend>
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7fa ffaa 	bl	8003dbc <arch_swap>
}
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000e74 	.word	0x20000e74
 8008e70:	20000eac 	.word	0x20000eac

08008e74 <z_set_prio>:
{
 8008e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e78:	4604      	mov	r4, r0
 8008e7a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8008e7c:	2300      	movs	r3, #0
	__asm__ volatile(
 8008e7e:	f04f 0210 	mov.w	r2, #16
 8008e82:	f3ef 8811 	mrs	r8, BASEPRI
 8008e86:	f382 8812 	msr	BASEPRI_MAX, r2
 8008e8a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 8008e8e:	461f      	mov	r7, r3
 8008e90:	e008      	b.n	8008ea4 <z_set_prio+0x30>
		if (need_sched) {
 8008e92:	f012 0701 	ands.w	r7, r2, #1
 8008e96:	d111      	bne.n	8008ebc <z_set_prio+0x48>
			thread->base.prio = prio;
 8008e98:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
 8008e9a:	f388 8811 	msr	BASEPRI, r8
 8008e9e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d13d      	bne.n	8008f26 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 8008eaa:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8008eac:	f013 0f1f 	tst.w	r3, #31
 8008eb0:	d1ef      	bne.n	8008e92 <z_set_prio+0x1e>
	return node->next != NULL;
 8008eb2:	69a1      	ldr	r1, [r4, #24]
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d1ec      	bne.n	8008e92 <z_set_prio+0x1e>
 8008eb8:	2201      	movs	r2, #1
 8008eba:	e7ea      	b.n	8008e92 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
 8008ec2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008f2c <z_set_prio+0xb8>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4648      	mov	r0, r9
 8008eca:	f004 f877 	bl	800cfbc <z_priq_dumb_remove>
				thread->base.prio = prio;
 8008ece:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8008ed0:	7b63      	ldrb	r3, [r4, #13]
 8008ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ed6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8008ed8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8008edc:	454d      	cmp	r5, r9
 8008ede:	d020      	beq.n	8008f22 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008ee0:	b16d      	cbz	r5, 8008efe <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f004 f82a 	bl	800cf3e <z_sched_prio_cmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	dc13      	bgt.n	8008f16 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8008eee:	b135      	cbz	r5, 8008efe <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <z_set_prio+0xbc>)
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	429d      	cmp	r5, r3
 8008ef6:	d002      	beq.n	8008efe <z_set_prio+0x8a>
 8008ef8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008efa:	2d00      	cmp	r5, #0
 8008efc:	d1f0      	bne.n	8008ee0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <z_set_prio+0xbc>)
 8008f00:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8008f02:	f103 011c 	add.w	r1, r3, #28
 8008f06:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8008f08:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8008f0a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8008f0c:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f7ff fe62 	bl	8008bd8 <update_cache>
 8008f14:	e7c1      	b.n	8008e9a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 8008f16:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8008f18:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8008f1a:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8008f1c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8008f1e:	606c      	str	r4, [r5, #4]
}
 8008f20:	e7f5      	b.n	8008f0e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008f22:	2500      	movs	r5, #0
 8008f24:	e7dc      	b.n	8008ee0 <z_set_prio+0x6c>
}
 8008f26:	4638      	mov	r0, r7
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	20000e90 	.word	0x20000e90
 8008f30:	20000e74 	.word	0x20000e74

08008f34 <z_impl_k_thread_suspend>:
{
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8008f38:	3018      	adds	r0, #24
 8008f3a:	f004 f9d7 	bl	800d2ec <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8008f3e:	2300      	movs	r3, #0
	__asm__ volatile(
 8008f40:	f04f 0210 	mov.w	r2, #16
 8008f44:	f3ef 8511 	mrs	r5, BASEPRI
 8008f48:	f382 8812 	msr	BASEPRI_MAX, r2
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	e010      	b.n	8008f74 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8008f52:	7b63      	ldrb	r3, [r4, #13]
 8008f54:	f043 0310 	orr.w	r3, r3, #16
 8008f58:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <z_impl_k_thread_suspend+0x7c>)
 8008f5c:	6898      	ldr	r0, [r3, #8]
 8008f5e:	42a0      	cmp	r0, r4
 8008f60:	bf14      	ite	ne
 8008f62:	2000      	movne	r0, #0
 8008f64:	2001      	moveq	r0, #1
 8008f66:	f7ff fe37 	bl	8008bd8 <update_cache>
	__asm__ volatile(
 8008f6a:	f385 8811 	msr	BASEPRI, r5
 8008f6e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008f72:	2301      	movs	r3, #1
 8008f74:	b963      	cbnz	r3, 8008f90 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 8008f76:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 8008f78:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dae8      	bge.n	8008f52 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8008f80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f84:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
 8008f86:	4621      	mov	r1, r4
 8008f88:	480a      	ldr	r0, [pc, #40]	; (8008fb4 <z_impl_k_thread_suspend+0x80>)
 8008f8a:	f004 f817 	bl	800cfbc <z_priq_dumb_remove>
}
 8008f8e:	e7e0      	b.n	8008f52 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 8008f90:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <z_impl_k_thread_suspend+0x7c>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d000      	beq.n	8008f9a <z_impl_k_thread_suspend+0x66>
}
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8008f9a:	f04f 0310 	mov.w	r3, #16
 8008f9e:	f3ef 8011 	mrs	r0, BASEPRI
 8008fa2:	f383 8812 	msr	BASEPRI_MAX, r3
 8008fa6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8008faa:	f003 fff2 	bl	800cf92 <z_reschedule_irqlock>
 8008fae:	e7f3      	b.n	8008f98 <z_impl_k_thread_suspend+0x64>
 8008fb0:	20000e74 	.word	0x20000e74
 8008fb4:	20000e90 	.word	0x20000e90

08008fb8 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8008fb8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f04f 0210 	mov.w	r2, #16
 8008fc0:	f3ef 8411 	mrs	r4, BASEPRI
 8008fc4:	f382 8812 	msr	BASEPRI_MAX, r2
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	e00c      	b.n	8008fe8 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <k_sched_unlock+0x4c>)
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	7bd3      	ldrb	r3, [r2, #15]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8008fd8:	2000      	movs	r0, #0
 8008fda:	f7ff fdfd 	bl	8008bd8 <update_cache>
	__asm__ volatile(
 8008fde:	f384 8811 	msr	BASEPRI, r4
 8008fe2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0f0      	beq.n	8008fce <k_sched_unlock+0x16>
	__asm__ volatile(
 8008fec:	f04f 0310 	mov.w	r3, #16
 8008ff0:	f3ef 8011 	mrs	r0, BASEPRI
 8008ff4:	f383 8812 	msr	BASEPRI_MAX, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f003 ffc9 	bl	800cf92 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8009000:	bd10      	pop	{r4, pc}
 8009002:	bf00      	nop
 8009004:	20000e74 	.word	0x20000e74

08009008 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 8009008:	7b43      	ldrb	r3, [r0, #13]
 800900a:	f013 0f08 	tst.w	r3, #8
 800900e:	d142      	bne.n	8009096 <end_thread+0x8e>
{
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8009014:	f043 0308 	orr.w	r3, r3, #8
 8009018:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
 800901a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800901e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8009020:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009024:	d12b      	bne.n	800907e <end_thread+0x76>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
 8009026:	68ab      	ldr	r3, [r5, #8]
 8009028:	b15b      	cbz	r3, 8009042 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800902a:	4628      	mov	r0, r5
 800902c:	f003 ff85 	bl	800cf3a <pended_on_thread>
 8009030:	4629      	mov	r1, r5
 8009032:	f003 ffc3 	bl	800cfbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8009036:	7b6b      	ldrb	r3, [r5, #13]
 8009038:	f023 0302 	bic.w	r3, r3, #2
 800903c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	60ab      	str	r3, [r5, #8]
 8009042:	f105 0018 	add.w	r0, r5, #24
 8009046:	f004 f951 	bl	800d2ec <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 800904a:	3558      	adds	r5, #88	; 0x58
	return list->head == list;
 800904c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800904e:	42ac      	cmp	r4, r5
 8009050:	d01d      	beq.n	800908e <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 8009052:	b1e4      	cbz	r4, 800908e <end_thread+0x86>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 8009054:	4620      	mov	r0, r4
 8009056:	f003 ff70 	bl	800cf3a <pended_on_thread>
 800905a:	4621      	mov	r1, r4
 800905c:	f003 ffae 	bl	800cfbc <z_priq_dumb_remove>
 8009060:	7b63      	ldrb	r3, [r4, #13]
 8009062:	f023 0302 	bic.w	r3, r3, #2
 8009066:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 8009068:	2600      	movs	r6, #0
 800906a:	60a6      	str	r6, [r4, #8]
 800906c:	f104 0018 	add.w	r0, r4, #24
 8009070:	f004 f93c 	bl	800d2ec <z_abort_timeout>
 8009074:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
 8009076:	4620      	mov	r0, r4
 8009078:	f7ff fe6e 	bl	8008d58 <ready_thread>
 800907c:	e7e6      	b.n	800904c <end_thread+0x44>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 800907e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009082:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
 8009084:	4601      	mov	r1, r0
 8009086:	4804      	ldr	r0, [pc, #16]	; (8009098 <end_thread+0x90>)
 8009088:	f003 ff98 	bl	800cfbc <z_priq_dumb_remove>
}
 800908c:	e7cb      	b.n	8009026 <end_thread+0x1e>
		update_cache(1);
 800908e:	2001      	movs	r0, #1
 8009090:	f7ff fda2 	bl	8008bd8 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 8009094:	bd70      	pop	{r4, r5, r6, pc}
 8009096:	4770      	bx	lr
 8009098:	20000e90 	.word	0x20000e90

0800909c <z_sched_init>:
{
 800909c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <z_sched_init+0x18>)
 80090a0:	f103 021c 	add.w	r2, r3, #28
 80090a4:	61da      	str	r2, [r3, #28]
	list->tail = (sys_dnode_t *)list;
 80090a6:	621a      	str	r2, [r3, #32]
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80090a8:	2100      	movs	r1, #0
 80090aa:	4608      	mov	r0, r1
 80090ac:	f7ff fd30 	bl	8008b10 <k_sched_time_slice_set>
}
 80090b0:	bd08      	pop	{r3, pc}
 80090b2:	bf00      	nop
 80090b4:	20000e74 	.word	0x20000e74

080090b8 <z_impl_k_yield>:
{
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	f04f 0310 	mov.w	r3, #16
 80090be:	f3ef 8611 	mrs	r6, BASEPRI
 80090c2:	f383 8812 	msr	BASEPRI_MAX, r3
 80090c6:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
 80090ca:	4c1c      	ldr	r4, [pc, #112]	; (800913c <z_impl_k_yield+0x84>)
 80090cc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80090ce:	7b4b      	ldrb	r3, [r1, #13]
 80090d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d4:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
 80090d6:	f104 071c 	add.w	r7, r4, #28
 80090da:	4638      	mov	r0, r7
 80090dc:	f003 ff6e 	bl	800cfbc <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
 80090e0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 80090e2:	7b6b      	ldrb	r3, [r5, #13]
 80090e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090e8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 80090ea:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80090ec:	42bc      	cmp	r4, r7
 80090ee:	d023      	beq.n	8009138 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80090f0:	b16c      	cbz	r4, 800910e <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f003 ff22 	bl	800cf3e <z_sched_prio_cmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	dc16      	bgt.n	800912c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80090fe:	b134      	cbz	r4, 800910e <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <z_impl_k_yield+0x84>)
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	429c      	cmp	r4, r3
 8009106:	d002      	beq.n	800910e <z_impl_k_yield+0x56>
 8009108:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800910a:	2c00      	cmp	r4, #0
 800910c:	d1f0      	bne.n	80090f0 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <z_impl_k_yield+0x84>)
 8009110:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8009112:	f103 011c 	add.w	r1, r3, #28
 8009116:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 8009118:	606a      	str	r2, [r5, #4]
	tail->next = node;
 800911a:	6015      	str	r5, [r2, #0]
	list->tail = node;
 800911c:	621d      	str	r5, [r3, #32]
	update_cache(1);
 800911e:	2001      	movs	r0, #1
 8009120:	f7ff fd5a 	bl	8008bd8 <update_cache>
 8009124:	4630      	mov	r0, r6
 8009126:	f7fa fe49 	bl	8003dbc <arch_swap>
}
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 800912c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800912e:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8009130:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8009132:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8009134:	6065      	str	r5, [r4, #4]
}
 8009136:	e7f2      	b.n	800911e <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8009138:	2400      	movs	r4, #0
 800913a:	e7d9      	b.n	80090f0 <z_impl_k_yield+0x38>
 800913c:	20000e74 	.word	0x20000e74

08009140 <z_tick_sleep>:
{
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
 8009144:	ea50 0301 	orrs.w	r3, r0, r1
 8009148:	d038      	beq.n	80091bc <z_tick_sleep+0x7c>
 800914a:	4604      	mov	r4, r0
 800914c:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
 800914e:	f06f 0301 	mvn.w	r3, #1
 8009152:	1a1b      	subs	r3, r3, r0
 8009154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009158:	eb62 0201 	sbc.w	r2, r2, r1
 800915c:	2b01      	cmp	r3, #1
 800915e:	f172 0300 	sbcs.w	r3, r2, #0
 8009162:	db2f      	blt.n	80091c4 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 8009164:	f06f 0501 	mvn.w	r5, #1
 8009168:	1a2d      	subs	r5, r5, r0
 800916a:	f04f 0310 	mov.w	r3, #16
 800916e:	f3ef 8811 	mrs	r8, BASEPRI
 8009172:	f383 8812 	msr	BASEPRI_MAX, r3
 8009176:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 800917a:	4f14      	ldr	r7, [pc, #80]	; (80091cc <z_tick_sleep+0x8c>)
 800917c:	68b8      	ldr	r0, [r7, #8]
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <z_tick_sleep+0x90>)
 8009180:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 8009182:	f7ff fe47 	bl	8008e14 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8009186:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 8009188:	4622      	mov	r2, r4
 800918a:	4633      	mov	r3, r6
 800918c:	4911      	ldr	r1, [pc, #68]	; (80091d4 <z_tick_sleep+0x94>)
 800918e:	3018      	adds	r0, #24
 8009190:	f000 f8ee 	bl	8009370 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8009194:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8009196:	7b53      	ldrb	r3, [r2, #13]
 8009198:	f043 0310 	orr.w	r3, r3, #16
 800919c:	7353      	strb	r3, [r2, #13]
 800919e:	4640      	mov	r0, r8
 80091a0:	f7fa fe0c 	bl	8003dbc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80091a4:	f004 f8eb 	bl	800d37e <sys_clock_tick_get_32>
 80091a8:	1a28      	subs	r0, r5, r0
 80091aa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
 80091ae:	2801      	cmp	r0, #1
 80091b0:	f173 0300 	sbcs.w	r3, r3, #0
 80091b4:	da00      	bge.n	80091b8 <z_tick_sleep+0x78>
	return 0;
 80091b6:	2000      	movs	r0, #0
}
 80091b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 80091bc:	f7ff ff7c 	bl	80090b8 <z_impl_k_yield>
		return 0;
 80091c0:	2000      	movs	r0, #0
 80091c2:	e7f9      	b.n	80091b8 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 80091c4:	f004 f8db 	bl	800d37e <sys_clock_tick_get_32>
 80091c8:	1905      	adds	r5, r0, r4
 80091ca:	e7ce      	b.n	800916a <z_tick_sleep+0x2a>
 80091cc:	20000e74 	.word	0x20000e74
 80091d0:	20000eac 	.word	0x20000eac
 80091d4:	0800d05b 	.word	0x0800d05b

080091d8 <z_impl_k_sleep>:
{
 80091d8:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80091da:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80091de:	bf08      	it	eq
 80091e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 80091e4:	d007      	beq.n	80091f6 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 80091e6:	f7ff ffab 	bl	8009140 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 80091ea:	220a      	movs	r2, #10
 80091ec:	2300      	movs	r3, #0
 80091ee:	17c1      	asrs	r1, r0, #31
 80091f0:	f7f7 fbf4 	bl	80009dc <__aeabi_uldivmod>
}
 80091f4:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 80091f6:	4b03      	ldr	r3, [pc, #12]	; (8009204 <z_impl_k_sleep+0x2c>)
 80091f8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 80091fa:	f7ff fe9b 	bl	8008f34 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009202:	e7f7      	b.n	80091f4 <z_impl_k_sleep+0x1c>
 8009204:	20000e74 	.word	0x20000e74

08009208 <z_impl_z_current_get>:
}
 8009208:	4b01      	ldr	r3, [pc, #4]	; (8009210 <z_impl_z_current_get+0x8>)
 800920a:	6898      	ldr	r0, [r3, #8]
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20000e74 	.word	0x20000e74

08009214 <z_impl_k_is_preempt_thread>:
 8009214:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8009218:	b933      	cbnz	r3, 8009228 <z_impl_k_is_preempt_thread+0x14>
 800921a:	4b05      	ldr	r3, [pc, #20]	; (8009230 <z_impl_k_is_preempt_thread+0x1c>)
 800921c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 800921e:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 8009220:	2b7f      	cmp	r3, #127	; 0x7f
 8009222:	d803      	bhi.n	800922c <z_impl_k_is_preempt_thread+0x18>
 8009224:	2001      	movs	r0, #1
 8009226:	4770      	bx	lr
 8009228:	2000      	movs	r0, #0
 800922a:	4770      	bx	lr
 800922c:	2000      	movs	r0, #0
}
 800922e:	4770      	bx	lr
 8009230:	20000e74 	.word	0x20000e74

08009234 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	f04f 0310 	mov.w	r3, #16
 800923a:	f3ef 8511 	mrs	r5, BASEPRI
 800923e:	f383 8812 	msr	BASEPRI_MAX, r3
 8009242:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8009246:	7b43      	ldrb	r3, [r0, #13]
 8009248:	f013 0f08 	tst.w	r3, #8
 800924c:	d004      	beq.n	8009258 <z_thread_abort+0x24>
	__asm__ volatile(
 800924e:	f385 8811 	msr	BASEPRI, r5
 8009252:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	4604      	mov	r4, r0
	end_thread(thread);
 800925a:	f7ff fed5 	bl	8009008 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 800925e:	4b08      	ldr	r3, [pc, #32]	; (8009280 <z_thread_abort+0x4c>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	42a3      	cmp	r3, r4
 8009264:	d004      	beq.n	8009270 <z_thread_abort+0x3c>
 8009266:	f385 8811 	msr	BASEPRI, r5
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	e7f2      	b.n	8009256 <z_thread_abort+0x22>
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1f6      	bne.n	8009266 <z_thread_abort+0x32>
 8009278:	4628      	mov	r0, r5
 800927a:	f7fa fd9f 	bl	8003dbc <arch_swap>
	return ret;
 800927e:	e7f2      	b.n	8009266 <z_thread_abort+0x32>
 8009280:	20000e74 	.word	0x20000e74

08009284 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 8009284:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8009288:	b083      	sub	sp, #12
 800928a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 800928c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8009290:	e9cd bc00 	strd	fp, ip, [sp]
 8009294:	f7ff fdda 	bl	8008e4c <z_pend_curr>

	if (data != NULL) {
 8009298:	b11c      	cbz	r4, 80092a2 <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <z_sched_wait+0x24>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80092a2:	b003      	add	sp, #12
 80092a4:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
 80092a8:	20000e74 	.word	0x20000e74

080092ac <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 80092ac:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80092ae:	4806      	ldr	r0, [pc, #24]	; (80092c8 <z_data_copy+0x1c>)
 80092b0:	4a06      	ldr	r2, [pc, #24]	; (80092cc <z_data_copy+0x20>)
 80092b2:	1a12      	subs	r2, r2, r0
 80092b4:	4906      	ldr	r1, [pc, #24]	; (80092d0 <z_data_copy+0x24>)
 80092b6:	f004 f919 	bl	800d4ec <memcpy>
 80092ba:	4a06      	ldr	r2, [pc, #24]	; (80092d4 <z_data_copy+0x28>)
 80092bc:	4906      	ldr	r1, [pc, #24]	; (80092d8 <z_data_copy+0x2c>)
 80092be:	4807      	ldr	r0, [pc, #28]	; (80092dc <z_data_copy+0x30>)
 80092c0:	f004 f914 	bl	800d4ec <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80092c4:	bd08      	pop	{r3, pc}
 80092c6:	bf00      	nop
 80092c8:	20000000 	.word	0x20000000
 80092cc:	200004e8 	.word	0x200004e8
 80092d0:	0800f50c 	.word	0x0800f50c
 80092d4:	00000000 	.word	0x00000000
 80092d8:	0800f50c 	.word	0x0800f50c
 80092dc:	20000000 	.word	0x20000000

080092e0 <first>:
	return list->head == list;
 80092e0:	4b03      	ldr	r3, [pc, #12]	; (80092f0 <first+0x10>)
 80092e2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80092e4:	4298      	cmp	r0, r3
 80092e6:	d000      	beq.n	80092ea <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 80092e8:	4770      	bx	lr
 80092ea:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 80092ec:	e7fc      	b.n	80092e8 <first+0x8>
 80092ee:	bf00      	nop
 80092f0:	200000b4 	.word	0x200000b4

080092f4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80092f4:	b130      	cbz	r0, 8009304 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 80092f6:	4a04      	ldr	r2, [pc, #16]	; (8009308 <next+0x14>)
 80092f8:	6852      	ldr	r2, [r2, #4]
 80092fa:	4290      	cmp	r0, r2
 80092fc:	d001      	beq.n	8009302 <next+0xe>
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	4770      	bx	lr
 8009302:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	200000b4 	.word	0x200000b4

0800930c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 800930c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 800930e:	4b04      	ldr	r3, [pc, #16]	; (8009320 <elapsed+0x14>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	b10b      	cbz	r3, 8009318 <elapsed+0xc>
 8009314:	2000      	movs	r0, #0
}
 8009316:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8009318:	f7fe fc80 	bl	8007c1c <sys_clock_elapsed>
 800931c:	e7fb      	b.n	8009316 <elapsed+0xa>
 800931e:	bf00      	nop
 8009320:	20000ebc 	.word	0x20000ebc

08009324 <next_timeout>:

static int32_t next_timeout(void)
{
 8009324:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 8009326:	f7ff ffdb 	bl	80092e0 <first>
 800932a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 800932c:	f7ff ffee 	bl	800930c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8009330:	b18c      	cbz	r4, 8009356 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	6962      	ldr	r2, [r4, #20]
 8009336:	1a1b      	subs	r3, r3, r0
 8009338:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 800933c:	2b01      	cmp	r3, #1
 800933e:	f172 0100 	sbcs.w	r1, r2, #0
 8009342:	db11      	blt.n	8009368 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8009344:	4618      	mov	r0, r3
 8009346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800934a:	f172 0300 	sbcs.w	r3, r2, #0
 800934e:	db04      	blt.n	800935a <next_timeout+0x36>
 8009350:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8009354:	e001      	b.n	800935a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 8009356:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800935a:	4b04      	ldr	r3, [pc, #16]	; (800936c <next_timeout+0x48>)
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	b113      	cbz	r3, 8009366 <next_timeout+0x42>
 8009360:	4283      	cmp	r3, r0
 8009362:	da00      	bge.n	8009366 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 8009364:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 8009366:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8009368:	2000      	movs	r0, #0
 800936a:	e7f6      	b.n	800935a <next_timeout+0x36>
 800936c:	20000e74 	.word	0x20000e74

08009370 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009374:	bf08      	it	eq
 8009376:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800937a:	d07f      	beq.n	800947c <z_add_timeout+0x10c>
{
 800937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	4691      	mov	r9, r2
 8009384:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8009386:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 8009388:	2300      	movs	r3, #0
	__asm__ volatile(
 800938a:	f04f 0210 	mov.w	r2, #16
 800938e:	f3ef 8711 	mrs	r7, BASEPRI
 8009392:	f382 8812 	msr	BASEPRI_MAX, r2
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	e021      	b.n	80093e0 <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 800939c:	f7ff ffb6 	bl	800930c <elapsed>
 80093a0:	eb19 0800 	adds.w	r8, r9, r0
 80093a4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
 80093a8:	f118 0301 	adds.w	r3, r8, #1
 80093ac:	f140 0000 	adc.w	r0, r0, #0
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	6160      	str	r0, [r4, #20]
 80093b4:	e038      	b.n	8009428 <z_add_timeout+0xb8>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 80093b6:	1a51      	subs	r1, r2, r1
 80093b8:	eb66 0303 	sbc.w	r3, r6, r3
 80093bc:	6101      	str	r1, [r0, #16]
 80093be:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
 80093c0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
 80093c2:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80093c4:	6020      	str	r0, [r4, #0]
	prev->next = node;
 80093c6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80093c8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d040      	beq.n	8009450 <z_add_timeout+0xe0>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80093ce:	f7ff ff87 	bl	80092e0 <first>
 80093d2:	4284      	cmp	r4, r0
 80093d4:	d043      	beq.n	800945e <z_add_timeout+0xee>
	__asm__ volatile(
 80093d6:	f387 8811 	msr	BASEPRI, r7
 80093da:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 80093de:	2301      	movs	r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d149      	bne.n	8009478 <z_add_timeout+0x108>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 80093e4:	f06f 0201 	mvn.w	r2, #1
 80093e8:	ebb2 0209 	subs.w	r2, r2, r9
 80093ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80093f0:	eb61 0305 	sbc.w	r3, r1, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dbd1      	blt.n	800939c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 80093f8:	4b21      	ldr	r3, [pc, #132]	; (8009480 <z_add_timeout+0x110>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	eb19 0202 	adds.w	r2, r9, r2
 8009402:	eb43 0305 	adc.w	r3, r3, r5
 8009406:	f06f 0801 	mvn.w	r8, #1
 800940a:	ebb8 0802 	subs.w	r8, r8, r2
 800940e:	eb61 0303 	sbc.w	r3, r1, r3
			to->dticks = MAX(1, ticks);
 8009412:	4641      	mov	r1, r8
 8009414:	461a      	mov	r2, r3
 8009416:	f1b8 0f01 	cmp.w	r8, #1
 800941a:	f173 0300 	sbcs.w	r3, r3, #0
 800941e:	da01      	bge.n	8009424 <z_add_timeout+0xb4>
 8009420:	2101      	movs	r1, #1
 8009422:	2200      	movs	r2, #0
 8009424:	6121      	str	r1, [r4, #16]
 8009426:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 8009428:	f7ff ff5a 	bl	80092e0 <first>
 800942c:	2800      	cmp	r0, #0
 800942e:	d0cc      	beq.n	80093ca <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
 8009430:	6902      	ldr	r2, [r0, #16]
 8009432:	6946      	ldr	r6, [r0, #20]
 8009434:	6921      	ldr	r1, [r4, #16]
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	4291      	cmp	r1, r2
 800943a:	eb73 0c06 	sbcs.w	ip, r3, r6
 800943e:	dbba      	blt.n	80093b6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
 8009440:	1a89      	subs	r1, r1, r2
 8009442:	eb63 0306 	sbc.w	r3, r3, r6
 8009446:	6121      	str	r1, [r4, #16]
 8009448:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
 800944a:	f7ff ff53 	bl	80092f4 <next>
 800944e:	e7ed      	b.n	800942c <z_add_timeout+0xbc>
	sys_dnode_t *const tail = list->tail;
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <z_add_timeout+0x114>)
 8009452:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8009454:	6023      	str	r3, [r4, #0]
	node->prev = tail;
 8009456:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8009458:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800945a:	605c      	str	r4, [r3, #4]
}
 800945c:	e7b7      	b.n	80093ce <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 800945e:	f7ff ff61 	bl	8009324 <next_timeout>

			if (next_time == 0 ||
 8009462:	4603      	mov	r3, r0
 8009464:	b118      	cbz	r0, 800946e <z_add_timeout+0xfe>
			    _current_cpu->slice_ticks != next_time) {
 8009466:	4a08      	ldr	r2, [pc, #32]	; (8009488 <z_add_timeout+0x118>)
 8009468:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 800946a:	4282      	cmp	r2, r0
 800946c:	d0b3      	beq.n	80093d6 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fb53 	bl	8007b1c <sys_clock_set_timeout>
 8009476:	e7ae      	b.n	80093d6 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8009478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	20000858 	.word	0x20000858
 8009484:	200000b4 	.word	0x200000b4
 8009488:	20000e74 	.word	0x20000e74

0800948c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8009490:	f7ff fc0c 	bl	8008cac <z_time_slice>
	__asm__ volatile(
 8009494:	f04f 0310 	mov.w	r3, #16
 8009498:	f3ef 8511 	mrs	r5, BASEPRI
 800949c:	f383 8812 	msr	BASEPRI_MAX, r3
 80094a0:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80094a4:	4b28      	ldr	r3, [pc, #160]	; (8009548 <sys_clock_announce+0xbc>)
 80094a6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80094a8:	e020      	b.n	80094ec <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 80094aa:	4828      	ldr	r0, [pc, #160]	; (800954c <sys_clock_announce+0xc0>)
 80094ac:	6801      	ldr	r1, [r0, #0]
 80094ae:	6846      	ldr	r6, [r0, #4]
 80094b0:	1889      	adds	r1, r1, r2
 80094b2:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
 80094b6:	6001      	str	r1, [r0, #0]
 80094b8:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	4a22      	ldr	r2, [pc, #136]	; (8009548 <sys_clock_announce+0xbc>)
 80094be:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 80094c8:	4620      	mov	r0, r4
 80094ca:	f003 fef8 	bl	800d2be <remove_timeout>
	__asm__ volatile(
 80094ce:	f385 8811 	msr	BASEPRI, r5
 80094d2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 80094d6:	68a3      	ldr	r3, [r4, #8]
 80094d8:	4620      	mov	r0, r4
 80094da:	4798      	blx	r3
	__asm__ volatile(
 80094dc:	f04f 0310 	mov.w	r3, #16
 80094e0:	f3ef 8511 	mrs	r5, BASEPRI
 80094e4:	f383 8812 	msr	BASEPRI_MAX, r3
 80094e8:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
 80094ec:	f7ff fef8 	bl	80092e0 <first>
 80094f0:	4604      	mov	r4, r0
 80094f2:	b140      	cbz	r0, 8009506 <sys_clock_announce+0x7a>
 80094f4:	6902      	ldr	r2, [r0, #16]
 80094f6:	6941      	ldr	r1, [r0, #20]
 80094f8:	4b13      	ldr	r3, [pc, #76]	; (8009548 <sys_clock_announce+0xbc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	17d8      	asrs	r0, r3, #31
 80094fe:	4293      	cmp	r3, r2
 8009500:	eb70 0101 	sbcs.w	r1, r0, r1
 8009504:	dad1      	bge.n	80094aa <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 8009506:	b144      	cbz	r4, 800951a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <sys_clock_announce+0xbc>)
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	6923      	ldr	r3, [r4, #16]
 800950e:	6962      	ldr	r2, [r4, #20]
 8009510:	1a5b      	subs	r3, r3, r1
 8009512:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8009516:	6123      	str	r3, [r4, #16]
 8009518:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
 800951a:	4a0c      	ldr	r2, [pc, #48]	; (800954c <sys_clock_announce+0xc0>)
 800951c:	4e0a      	ldr	r6, [pc, #40]	; (8009548 <sys_clock_announce+0xbc>)
 800951e:	6830      	ldr	r0, [r6, #0]
 8009520:	6813      	ldr	r3, [r2, #0]
 8009522:	6851      	ldr	r1, [r2, #4]
 8009524:	181b      	adds	r3, r3, r0
 8009526:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
 800952e:	2400      	movs	r4, #0
 8009530:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
 8009532:	f7ff fef7 	bl	8009324 <next_timeout>
 8009536:	4621      	mov	r1, r4
 8009538:	f7fe faf0 	bl	8007b1c <sys_clock_set_timeout>
	__asm__ volatile(
 800953c:	f385 8811 	msr	BASEPRI, r5
 8009540:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8009544:	bd70      	pop	{r4, r5, r6, pc}
 8009546:	bf00      	nop
 8009548:	20000ebc 	.word	0x20000ebc
 800954c:	20000858 	.word	0x20000858

08009550 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 8009550:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 8009552:	2300      	movs	r3, #0
	__asm__ volatile(
 8009554:	f04f 0210 	mov.w	r2, #16
 8009558:	f3ef 8411 	mrs	r4, BASEPRI
 800955c:	f382 8812 	msr	BASEPRI_MAX, r2
 8009560:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 8009564:	4618      	mov	r0, r3
 8009566:	4619      	mov	r1, r3
 8009568:	e00c      	b.n	8009584 <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
 800956a:	f7fe fb57 	bl	8007c1c <sys_clock_elapsed>
 800956e:	4a07      	ldr	r2, [pc, #28]	; (800958c <sys_clock_tick_get+0x3c>)
 8009570:	6813      	ldr	r3, [r2, #0]
 8009572:	6851      	ldr	r1, [r2, #4]
 8009574:	18c0      	adds	r0, r0, r3
 8009576:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
 800957a:	f384 8811 	msr	BASEPRI, r4
 800957e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8009582:	2301      	movs	r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0f0      	beq.n	800956a <sys_clock_tick_get+0x1a>
	}
	return t;
}
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	20000858 	.word	0x20000858

08009590 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8009590:	b900      	cbnz	r0, 8009594 <z_impl_k_busy_wait+0x4>
 8009592:	4770      	bx	lr
{
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 8009598:	f7fe fb60 	bl	8007c5c <sys_clock_cycle_get_32>
 800959c:	4605      	mov	r5, r0
#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
 800959e:	4907      	ldr	r1, [pc, #28]	; (80095bc <z_impl_k_busy_wait+0x2c>)
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 80095a0:	4a07      	ldr	r2, [pc, #28]	; (80095c0 <z_impl_k_busy_wait+0x30>)
 80095a2:	2300      	movs	r3, #0
 80095a4:	fba4 0101 	umull	r0, r1, r4, r1
 80095a8:	f7f7 fa18 	bl	80009dc <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 80095ac:	4604      	mov	r4, r0
 80095ae:	f7fe fb55 	bl	8007c5c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 80095b2:	1b40      	subs	r0, r0, r5
 80095b4:	42a0      	cmp	r0, r4
 80095b6:	d3fa      	bcc.n	80095ae <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	04c4b400 	.word	0x04c4b400
 80095c0:	000f4240 	.word	0x000f4240

080095c4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	4604      	mov	r4, r0
	__asm__ volatile(
 80095c8:	f04f 0310 	mov.w	r3, #16
 80095cc:	f3ef 8511 	mrs	r5, BASEPRI
 80095d0:	f383 8812 	msr	BASEPRI_MAX, r3
 80095d4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 80095d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80095da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80095dc:	ea52 0103 	orrs.w	r1, r2, r3
 80095e0:	d005      	beq.n	80095ee <z_timer_expiration_handler+0x2a>
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e6:	bf08      	it	eq
 80095e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80095ec:	d119      	bne.n	8009622 <z_timer_expiration_handler+0x5e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 80095ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80095f0:	3301      	adds	r3, #1
 80095f2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 80095f4:	6a23      	ldr	r3, [r4, #32]
 80095f6:	b10b      	cbz	r3, 80095fc <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
 80095f8:	4620      	mov	r0, r4
 80095fa:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80095fc:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8009600:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009602:	42a3      	cmp	r3, r4
 8009604:	d013      	beq.n	800962e <z_timer_expiration_handler+0x6a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8009606:	b194      	cbz	r4, 800962e <z_timer_expiration_handler+0x6a>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 8009608:	4620      	mov	r0, r4
 800960a:	f003 fca2 	bl	800cf52 <z_unpend_thread_no_timeout>
 800960e:	2300      	movs	r3, #0
 8009610:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
 8009612:	f385 8811 	msr	BASEPRI, r5
 8009616:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 800961a:	4620      	mov	r0, r4
 800961c:	f003 fd01 	bl	800d022 <z_ready_thread>
}
 8009620:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8009622:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8009626:	4904      	ldr	r1, [pc, #16]	; (8009638 <z_timer_expiration_handler+0x74>)
 8009628:	f7ff fea2 	bl	8009370 <z_add_timeout>
 800962c:	e7df      	b.n	80095ee <z_timer_expiration_handler+0x2a>
 800962e:	f385 8811 	msr	BASEPRI, r5
 8009632:	f3bf 8f6f 	isb	sy
		return;
 8009636:	e7f3      	b.n	8009620 <z_timer_expiration_handler+0x5c>
 8009638:	080095c5 	.word	0x080095c5

0800963c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	461d      	mov	r5, r3
 8009642:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009646:	9f07      	ldr	r7, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964c:	bf08      	it	eq
 800964e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8009652:	d02f      	beq.n	80096b4 <z_impl_k_timer_start+0x78>
 8009654:	4604      	mov	r4, r0
 8009656:	4616      	mov	r6, r2
 8009658:	4613      	mov	r3, r2
 800965a:	4629      	mov	r1, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 800965c:	4642      	mov	r2, r8
 800965e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8009662:	bf08      	it	eq
 8009664:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8009668:	d00d      	beq.n	8009686 <z_impl_k_timer_start+0x4a>
 800966a:	ea58 0c07 	orrs.w	ip, r8, r7
 800966e:	d00a      	beq.n	8009686 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
 8009670:	f06f 0c01 	mvn.w	ip, #1
 8009674:	ebbc 0c08 	subs.w	ip, ip, r8
 8009678:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800967c:	eb6c 0c07 	sbc.w	ip, ip, r7
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8009680:	f1bc 0f00 	cmp.w	ip, #0
 8009684:	db18      	blt.n	80096b8 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8009686:	f06f 0201 	mvn.w	r2, #1
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009690:	eb62 0201 	sbc.w	r2, r2, r1
 8009694:	2a00      	cmp	r2, #0
 8009696:	db1c      	blt.n	80096d2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8009698:	4620      	mov	r0, r4
 800969a:	f003 fe27 	bl	800d2ec <z_abort_timeout>
	timer->period = period;
 800969e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80096a2:	62e7      	str	r7, [r4, #44]	; 0x2c
	timer->status = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	6323      	str	r3, [r4, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 80096a8:	4632      	mov	r2, r6
 80096aa:	462b      	mov	r3, r5
 80096ac:	490d      	ldr	r1, [pc, #52]	; (80096e4 <z_impl_k_timer_start+0xa8>)
 80096ae:	4620      	mov	r0, r4
 80096b0:	f7ff fe5e 	bl	8009370 <z_add_timeout>
		     duration);
}
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 80096b8:	3a01      	subs	r2, #1
 80096ba:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
 80096be:	4690      	mov	r8, r2
 80096c0:	4607      	mov	r7, r0
 80096c2:	2a01      	cmp	r2, #1
 80096c4:	f170 0200 	sbcs.w	r2, r0, #0
 80096c8:	dadd      	bge.n	8009686 <z_impl_k_timer_start+0x4a>
 80096ca:	f04f 0801 	mov.w	r8, #1
 80096ce:	2700      	movs	r7, #0
 80096d0:	e7d9      	b.n	8009686 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
 80096d2:	1e5e      	subs	r6, r3, #1
 80096d4:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80096d8:	460d      	mov	r5, r1
 80096da:	2900      	cmp	r1, #0
 80096dc:	dadc      	bge.n	8009698 <z_impl_k_timer_start+0x5c>
 80096de:	2600      	movs	r6, #0
 80096e0:	4635      	mov	r5, r6
 80096e2:	e7d9      	b.n	8009698 <z_impl_k_timer_start+0x5c>
 80096e4:	080095c5 	.word	0x080095c5

080096e8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	b087      	sub	sp, #28
 80096ee:	4682      	mov	sl, r0
 80096f0:	460f      	mov	r7, r1
 80096f2:	4693      	mov	fp, r2
 80096f4:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
 80096f6:	2500      	movs	r5, #0
	int events_registered = 0;
 80096f8:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
 80096fa:	e02f      	b.n	800975c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	b1cb      	cbz	r3, 8009736 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
 8009702:	f04f 0902 	mov.w	r9, #2
			return true;
 8009706:	2301      	movs	r3, #1
 8009708:	e015      	b.n	8009736 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
 800970a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	b193      	cbz	r3, 8009736 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
 8009710:	f04f 0904 	mov.w	r9, #4
			return true;
 8009714:	2301      	movs	r3, #1
 8009716:	e00e      	b.n	8009736 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
 8009718:	6923      	ldr	r3, [r4, #16]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	b15b      	cbz	r3, 8009736 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
 800971e:	f04f 0901 	mov.w	r9, #1
			return true;
 8009722:	464b      	mov	r3, r9
 8009724:	e007      	b.n	8009736 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	b123      	cbz	r3, 8009736 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
 800972c:	f04f 0910 	mov.w	r9, #16
			return true;
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <register_events+0x4e>
	switch (event->type) {
 8009734:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
 8009736:	2b00      	cmp	r3, #0
 8009738:	d03a      	beq.n	80097b0 <register_events+0xc8>
	event->poller = NULL;
 800973a:	2100      	movs	r1, #0
 800973c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
 800973e:	68e3      	ldr	r3, [r4, #12]
 8009740:	f3c3 3245 	ubfx	r2, r3, #13, #6
 8009744:	ea49 0202 	orr.w	r2, r9, r2
 8009748:	f362 3352 	bfi	r3, r2, #13, #6
 800974c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
 800974e:	f88b 1000 	strb.w	r1, [fp]
 8009752:	f386 8811 	msr	BASEPRI, r6
 8009756:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
 800975a:	3501      	adds	r5, #1
 800975c:	42bd      	cmp	r5, r7
 800975e:	f280 81b9 	bge.w	8009ad4 <register_events+0x3ec>
	__asm__ volatile(
 8009762:	f04f 0310 	mov.w	r3, #16
 8009766:	f3ef 8611 	mrs	r6, BASEPRI
 800976a:	f383 8812 	msr	BASEPRI_MAX, r3
 800976e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
 8009772:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8009776:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800977a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
 800977e:	7b63      	ldrb	r3, [r4, #13]
 8009780:	f003 031f 	and.w	r3, r3, #31
 8009784:	3b01      	subs	r3, #1
 8009786:	2b07      	cmp	r3, #7
 8009788:	d8d4      	bhi.n	8009734 <register_events+0x4c>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <register_events+0xa8>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	08009719 	.word	0x08009719
 8009794:	080096fd 	.word	0x080096fd
 8009798:	08009735 	.word	0x08009735
 800979c:	0800970b 	.word	0x0800970b
 80097a0:	08009735 	.word	0x08009735
 80097a4:	08009735 	.word	0x08009735
 80097a8:	08009735 	.word	0x08009735
 80097ac:	08009727 	.word	0x08009727
		} else if (!just_check && poller->is_polling) {
 80097b0:	9b00      	ldr	r3, [sp, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1cd      	bne.n	8009752 <register_events+0x6a>
 80097b6:	f89b 3000 	ldrb.w	r3, [fp]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c9      	beq.n	8009752 <register_events+0x6a>
	switch (event->type) {
 80097be:	7b63      	ldrb	r3, [r4, #13]
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	3b01      	subs	r3, #1
 80097c6:	2b07      	cmp	r3, #7
 80097c8:	d848      	bhi.n	800985c <register_events+0x174>
 80097ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80097ce:	00cb      	.short	0x00cb
 80097d0:	00470008 	.word	0x00470008
 80097d4:	0047006d 	.word	0x0047006d
 80097d8:	00470047 	.word	0x00470047
 80097dc:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	f103 0210 	add.w	r2, r3, #16
 80097e6:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80097e8:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d02f      	beq.n	800984e <register_events+0x166>
 80097ee:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02c      	beq.n	800984e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80097f4:	6898      	ldr	r0, [r3, #8]
 80097f6:	f003 fdf1 	bl	800d3dc <poller_thread>
 80097fa:	9005      	str	r0, [sp, #20]
 80097fc:	4658      	mov	r0, fp
 80097fe:	f003 fded 	bl	800d3dc <poller_thread>
 8009802:	4601      	mov	r1, r0
 8009804:	9003      	str	r0, [sp, #12]
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	f003 fb99 	bl	800cf3e <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800980c:	2800      	cmp	r0, #0
 800980e:	dc1e      	bgt.n	800984e <register_events+0x166>
	return list->head == list;
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009814:	9a02      	ldr	r2, [sp, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d030      	beq.n	800987c <register_events+0x194>
 800981a:	9404      	str	r4, [sp, #16]
 800981c:	9505      	str	r5, [sp, #20]
 800981e:	9d02      	ldr	r5, [sp, #8]
 8009820:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009822:	2c00      	cmp	r4, #0
 8009824:	d030      	beq.n	8009888 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009826:	68a0      	ldr	r0, [r4, #8]
 8009828:	f003 fdd8 	bl	800d3dc <poller_thread>
 800982c:	4601      	mov	r1, r0
 800982e:	9803      	ldr	r0, [sp, #12]
 8009830:	f003 fb85 	bl	800cf3e <z_sched_prio_cmp>
 8009834:	2800      	cmp	r0, #0
 8009836:	dc17      	bgt.n	8009868 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009838:	2c00      	cmp	r4, #0
 800983a:	d028      	beq.n	800988e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
 800983c:	686b      	ldr	r3, [r5, #4]
 800983e:	429c      	cmp	r4, r3
 8009840:	d02f      	beq.n	80098a2 <register_events+0x1ba>
 8009842:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009844:	2c00      	cmp	r4, #0
 8009846:	d1ec      	bne.n	8009822 <register_events+0x13a>
 8009848:	9c04      	ldr	r4, [sp, #16]
 800984a:	9d05      	ldr	r5, [sp, #20]
 800984c:	e021      	b.n	8009892 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
 800984e:	9a02      	ldr	r2, [sp, #8]
 8009850:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009852:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009856:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009858:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800985a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
 800985c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	3301      	adds	r3, #1
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	e774      	b.n	8009752 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
 8009868:	9d05      	ldr	r5, [sp, #20]
 800986a:	4622      	mov	r2, r4
 800986c:	9c04      	ldr	r4, [sp, #16]
 800986e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009870:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009872:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8009876:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009878:	6054      	str	r4, [r2, #4]
			return;
 800987a:	e7ef      	b.n	800985c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800987c:	2300      	movs	r3, #0
 800987e:	9404      	str	r4, [sp, #16]
 8009880:	9505      	str	r5, [sp, #20]
 8009882:	9d02      	ldr	r5, [sp, #8]
 8009884:	461c      	mov	r4, r3
 8009886:	e7cc      	b.n	8009822 <register_events+0x13a>
 8009888:	9c04      	ldr	r4, [sp, #16]
 800988a:	9d05      	ldr	r5, [sp, #20]
 800988c:	e001      	b.n	8009892 <register_events+0x1aa>
 800988e:	9c04      	ldr	r4, [sp, #16]
 8009890:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8009892:	9a02      	ldr	r2, [sp, #8]
 8009894:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009896:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800989a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800989c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800989e:	6054      	str	r4, [r2, #4]
}
 80098a0:	e7dc      	b.n	800985c <register_events+0x174>
 80098a2:	9c04      	ldr	r4, [sp, #16]
 80098a4:	9d05      	ldr	r5, [sp, #20]
 80098a6:	e7f4      	b.n	8009892 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	f103 0214 	add.w	r2, r3, #20
 80098b0:	9202      	str	r2, [sp, #8]
	return list->head == list;
 80098b2:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d02d      	beq.n	8009914 <register_events+0x22c>
 80098b8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 80098ba:	b35b      	cbz	r3, 8009914 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 80098bc:	6898      	ldr	r0, [r3, #8]
 80098be:	f003 fd8d 	bl	800d3dc <poller_thread>
 80098c2:	9005      	str	r0, [sp, #20]
 80098c4:	4658      	mov	r0, fp
 80098c6:	f003 fd89 	bl	800d3dc <poller_thread>
 80098ca:	4601      	mov	r1, r0
 80098cc:	9003      	str	r0, [sp, #12]
 80098ce:	9805      	ldr	r0, [sp, #20]
 80098d0:	f003 fb35 	bl	800cf3e <z_sched_prio_cmp>
	if ((pending == NULL) ||
 80098d4:	2800      	cmp	r0, #0
 80098d6:	dc1d      	bgt.n	8009914 <register_events+0x22c>
	return list->head == list;
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	695b      	ldr	r3, [r3, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80098dc:	9a02      	ldr	r2, [sp, #8]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d02a      	beq.n	8009938 <register_events+0x250>
 80098e2:	9404      	str	r4, [sp, #16]
 80098e4:	9505      	str	r5, [sp, #20]
 80098e6:	9d02      	ldr	r5, [sp, #8]
 80098e8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d02a      	beq.n	8009944 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
 80098ee:	68a0      	ldr	r0, [r4, #8]
 80098f0:	f003 fd74 	bl	800d3dc <poller_thread>
 80098f4:	4601      	mov	r1, r0
 80098f6:	9803      	ldr	r0, [sp, #12]
 80098f8:	f003 fb21 	bl	800cf3e <z_sched_prio_cmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	dc11      	bgt.n	8009924 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009900:	b31c      	cbz	r4, 800994a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
 8009902:	686b      	ldr	r3, [r5, #4]
 8009904:	429c      	cmp	r4, r3
 8009906:	d02a      	beq.n	800995e <register_events+0x276>
 8009908:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800990a:	2c00      	cmp	r4, #0
 800990c:	d1ed      	bne.n	80098ea <register_events+0x202>
 800990e:	9c04      	ldr	r4, [sp, #16]
 8009910:	9d05      	ldr	r5, [sp, #20]
 8009912:	e01c      	b.n	800994e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
 8009914:	9a02      	ldr	r2, [sp, #8]
 8009916:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009918:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 800991c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 800991e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009920:	6054      	str	r4, [r2, #4]
		return;
 8009922:	e79b      	b.n	800985c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8009924:	9d05      	ldr	r5, [sp, #20]
 8009926:	4622      	mov	r2, r4
 8009928:	9c04      	ldr	r4, [sp, #16]
 800992a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 800992c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 800992e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8009932:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009934:	6054      	str	r4, [r2, #4]
			return;
 8009936:	e791      	b.n	800985c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009938:	2300      	movs	r3, #0
 800993a:	9404      	str	r4, [sp, #16]
 800993c:	9505      	str	r5, [sp, #20]
 800993e:	9d02      	ldr	r5, [sp, #8]
 8009940:	461c      	mov	r4, r3
 8009942:	e7d2      	b.n	80098ea <register_events+0x202>
 8009944:	9c04      	ldr	r4, [sp, #16]
 8009946:	9d05      	ldr	r5, [sp, #20]
 8009948:	e001      	b.n	800994e <register_events+0x266>
 800994a:	9c04      	ldr	r4, [sp, #16]
 800994c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 800994e:	9a02      	ldr	r2, [sp, #8]
 8009950:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009952:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009956:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009958:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800995a:	6054      	str	r4, [r2, #4]
}
 800995c:	e77e      	b.n	800985c <register_events+0x174>
 800995e:	9c04      	ldr	r4, [sp, #16]
 8009960:	9d05      	ldr	r5, [sp, #20]
 8009962:	e7f4      	b.n	800994e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8009968:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 800996a:	429a      	cmp	r2, r3
 800996c:	d02c      	beq.n	80099c8 <register_events+0x2e0>
 800996e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009970:	b353      	cbz	r3, 80099c8 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009972:	6898      	ldr	r0, [r3, #8]
 8009974:	f003 fd32 	bl	800d3dc <poller_thread>
 8009978:	9004      	str	r0, [sp, #16]
 800997a:	4658      	mov	r0, fp
 800997c:	f003 fd2e 	bl	800d3dc <poller_thread>
 8009980:	4601      	mov	r1, r0
 8009982:	9003      	str	r0, [sp, #12]
 8009984:	9804      	ldr	r0, [sp, #16]
 8009986:	f003 fada 	bl	800cf3e <z_sched_prio_cmp>
	if ((pending == NULL) ||
 800998a:	2800      	cmp	r0, #0
 800998c:	dc1c      	bgt.n	80099c8 <register_events+0x2e0>
	return list->head == list;
 800998e:	9b02      	ldr	r3, [sp, #8]
 8009990:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009992:	4293      	cmp	r3, r2
 8009994:	d02a      	beq.n	80099ec <register_events+0x304>
 8009996:	9404      	str	r4, [sp, #16]
 8009998:	9505      	str	r5, [sp, #20]
 800999a:	9d02      	ldr	r5, [sp, #8]
 800999c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 800999e:	2c00      	cmp	r4, #0
 80099a0:	d02a      	beq.n	80099f8 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
 80099a2:	68a0      	ldr	r0, [r4, #8]
 80099a4:	f003 fd1a 	bl	800d3dc <poller_thread>
 80099a8:	4601      	mov	r1, r0
 80099aa:	9803      	ldr	r0, [sp, #12]
 80099ac:	f003 fac7 	bl	800cf3e <z_sched_prio_cmp>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	dc11      	bgt.n	80099d8 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80099b4:	b31c      	cbz	r4, 80099fe <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
 80099b6:	686b      	ldr	r3, [r5, #4]
 80099b8:	429c      	cmp	r4, r3
 80099ba:	d02a      	beq.n	8009a12 <register_events+0x32a>
 80099bc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80099be:	2c00      	cmp	r4, #0
 80099c0:	d1ed      	bne.n	800999e <register_events+0x2b6>
 80099c2:	9c04      	ldr	r4, [sp, #16]
 80099c4:	9d05      	ldr	r5, [sp, #20]
 80099c6:	e01c      	b.n	8009a02 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
 80099c8:	9a02      	ldr	r2, [sp, #8]
 80099ca:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 80099cc:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 80099d0:	6063      	str	r3, [r4, #4]
	tail->next = node;
 80099d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80099d4:	6054      	str	r4, [r2, #4]
		return;
 80099d6:	e741      	b.n	800985c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 80099d8:	9d05      	ldr	r5, [sp, #20]
 80099da:	4622      	mov	r2, r4
 80099dc:	9c04      	ldr	r4, [sp, #16]
 80099de:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 80099e0:	6063      	str	r3, [r4, #4]
	node->next = successor;
 80099e2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 80099e6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 80099e8:	6054      	str	r4, [r2, #4]
			return;
 80099ea:	e737      	b.n	800985c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 80099ec:	2300      	movs	r3, #0
 80099ee:	9404      	str	r4, [sp, #16]
 80099f0:	9505      	str	r5, [sp, #20]
 80099f2:	9d02      	ldr	r5, [sp, #8]
 80099f4:	461c      	mov	r4, r3
 80099f6:	e7d2      	b.n	800999e <register_events+0x2b6>
 80099f8:	9c04      	ldr	r4, [sp, #16]
 80099fa:	9d05      	ldr	r5, [sp, #20]
 80099fc:	e001      	b.n	8009a02 <register_events+0x31a>
 80099fe:	9c04      	ldr	r4, [sp, #16]
 8009a00:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8009a02:	9a02      	ldr	r2, [sp, #8]
 8009a04:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009a06:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009a0a:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009a0c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009a0e:	6054      	str	r4, [r2, #4]
}
 8009a10:	e724      	b.n	800985c <register_events+0x174>
 8009a12:	9c04      	ldr	r4, [sp, #16]
 8009a14:	9d05      	ldr	r5, [sp, #20]
 8009a16:	e7f4      	b.n	8009a02 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009a20:	9202      	str	r2, [sp, #8]
	return list->head == list;
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d02d      	beq.n	8009a84 <register_events+0x39c>
 8009a28:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
 8009a2a:	b35b      	cbz	r3, 8009a84 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
 8009a2c:	6898      	ldr	r0, [r3, #8]
 8009a2e:	f003 fcd5 	bl	800d3dc <poller_thread>
 8009a32:	9005      	str	r0, [sp, #20]
 8009a34:	4658      	mov	r0, fp
 8009a36:	f003 fcd1 	bl	800d3dc <poller_thread>
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	9003      	str	r0, [sp, #12]
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	f003 fa7d 	bl	800cf3e <z_sched_prio_cmp>
	if ((pending == NULL) ||
 8009a44:	2800      	cmp	r0, #0
 8009a46:	dc1d      	bgt.n	8009a84 <register_events+0x39c>
	return list->head == list;
 8009a48:	9b04      	ldr	r3, [sp, #16]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8009a4c:	9a02      	ldr	r2, [sp, #8]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d02a      	beq.n	8009aa8 <register_events+0x3c0>
 8009a52:	9404      	str	r4, [sp, #16]
 8009a54:	9505      	str	r5, [sp, #20]
 8009a56:	9d02      	ldr	r5, [sp, #8]
 8009a58:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009a5a:	2c00      	cmp	r4, #0
 8009a5c:	d02a      	beq.n	8009ab4 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
 8009a5e:	68a0      	ldr	r0, [r4, #8]
 8009a60:	f003 fcbc 	bl	800d3dc <poller_thread>
 8009a64:	4601      	mov	r1, r0
 8009a66:	9803      	ldr	r0, [sp, #12]
 8009a68:	f003 fa69 	bl	800cf3e <z_sched_prio_cmp>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	dc11      	bgt.n	8009a94 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8009a70:	b31c      	cbz	r4, 8009aba <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
 8009a72:	686b      	ldr	r3, [r5, #4]
 8009a74:	429c      	cmp	r4, r3
 8009a76:	d02a      	beq.n	8009ace <register_events+0x3e6>
 8009a78:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009a7a:	2c00      	cmp	r4, #0
 8009a7c:	d1ed      	bne.n	8009a5a <register_events+0x372>
 8009a7e:	9c04      	ldr	r4, [sp, #16]
 8009a80:	9d05      	ldr	r5, [sp, #20]
 8009a82:	e01c      	b.n	8009abe <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
 8009a84:	9a02      	ldr	r2, [sp, #8]
 8009a86:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009a88:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009a8c:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009a8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009a90:	6054      	str	r4, [r2, #4]
		return;
 8009a92:	e6e3      	b.n	800985c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
 8009a94:	9d05      	ldr	r5, [sp, #20]
 8009a96:	4622      	mov	r2, r4
 8009a98:	9c04      	ldr	r4, [sp, #16]
 8009a9a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
 8009a9c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8009a9e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
 8009aa2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8009aa4:	6054      	str	r4, [r2, #4]
			return;
 8009aa6:	e6d9      	b.n	800985c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9404      	str	r4, [sp, #16]
 8009aac:	9505      	str	r5, [sp, #20]
 8009aae:	9d02      	ldr	r5, [sp, #8]
 8009ab0:	461c      	mov	r4, r3
 8009ab2:	e7d2      	b.n	8009a5a <register_events+0x372>
 8009ab4:	9c04      	ldr	r4, [sp, #16]
 8009ab6:	9d05      	ldr	r5, [sp, #20]
 8009ab8:	e001      	b.n	8009abe <register_events+0x3d6>
 8009aba:	9c04      	ldr	r4, [sp, #16]
 8009abc:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
 8009abe:	9a02      	ldr	r2, [sp, #8]
 8009ac0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
 8009ac2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
 8009ac6:	6063      	str	r3, [r4, #4]
	tail->next = node;
 8009ac8:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8009aca:	6054      	str	r4, [r2, #4]
}
 8009acc:	e6c6      	b.n	800985c <register_events+0x174>
 8009ace:	9c04      	ldr	r4, [sp, #16]
 8009ad0:	9d05      	ldr	r5, [sp, #20]
 8009ad2:	e7f4      	b.n	8009abe <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
 8009ad4:	9801      	ldr	r0, [sp, #4]
 8009ad6:	b007      	add	sp, #28
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009adc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
 8009adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	4690      	mov	r8, r2
 8009ae6:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
 8009ae8:	4b4f      	ldr	r3, [pc, #316]	; (8009c28 <z_impl_k_poll+0x14c>)
 8009aea:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
 8009af2:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
 8009af6:	ea57 0302 	orrs.w	r3, r7, r2
 8009afa:	bf0c      	ite	eq
 8009afc:	2301      	moveq	r3, #1
 8009afe:	2300      	movne	r3, #0
 8009b00:	f106 0260 	add.w	r2, r6, #96	; 0x60
 8009b04:	f7ff fdf0 	bl	80096e8 <register_events>
 8009b08:	4604      	mov	r4, r0
 8009b0a:	f04f 0310 	mov.w	r3, #16
 8009b0e:	f3ef 8111 	mrs	r1, BASEPRI
 8009b12:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b16:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
 8009b1a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
 8009b1e:	b1b3      	cbz	r3, 8009b4e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
 8009b20:	2300      	movs	r3, #0
 8009b22:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8009b26:	ea57 0308 	orrs.w	r3, r7, r8
 8009b2a:	d043      	beq.n	8009bb4 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
 8009b2c:	f8cd 8000 	str.w	r8, [sp]
 8009b30:	9701      	str	r7, [sp, #4]
 8009b32:	4a3e      	ldr	r2, [pc, #248]	; (8009c2c <z_impl_k_poll+0x150>)
 8009b34:	483e      	ldr	r0, [pc, #248]	; (8009c30 <z_impl_k_poll+0x154>)
 8009b36:	f7ff f989 	bl	8008e4c <z_pend_curr>
 8009b3a:	f04f 0310 	mov.w	r3, #16
 8009b3e:	f3ef 8611 	mrs	r6, BASEPRI
 8009b42:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	46b4      	mov	ip, r6
	while (num_events--) {
 8009b4c:	e04c      	b.n	8009be8 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
 8009b4e:	460e      	mov	r6, r1
	while (num_events--) {
 8009b50:	e00c      	b.n	8009b6c <z_impl_k_poll+0x90>
	__asm__ volatile(
 8009b52:	f386 8811 	msr	BASEPRI, r6
 8009b56:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8009b5a:	f04f 0310 	mov.w	r3, #16
 8009b5e:	f3ef 8611 	mrs	r6, BASEPRI
 8009b62:	f383 8812 	msr	BASEPRI_MAX, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	1e60      	subs	r0, r4, #1
 8009b6e:	b1dc      	cbz	r4, 8009ba8 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
 8009b70:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8009b74:	009f      	lsls	r7, r3, #2
 8009b76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8009b7e:	7b5a      	ldrb	r2, [r3, #13]
 8009b80:	f002 021f 	and.w	r2, r2, #31
 8009b84:	2a08      	cmp	r2, #8
 8009b86:	d8e4      	bhi.n	8009b52 <z_impl_k_poll+0x76>
 8009b88:	2401      	movs	r4, #1
 8009b8a:	fa04 f202 	lsl.w	r2, r4, r2
 8009b8e:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8009b92:	d0de      	beq.n	8009b52 <z_impl_k_poll+0x76>
	return node->next != NULL;
 8009b94:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	d0db      	beq.n	8009b52 <z_impl_k_poll+0x76>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 8009b9a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
 8009b9c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
 8009b9e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
 8009ba4:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
 8009ba6:	e7d4      	b.n	8009b52 <z_impl_k_poll+0x76>
	__asm__ volatile(
 8009ba8:	f381 8811 	msr	BASEPRI, r1
 8009bac:	f3bf 8f6f 	isb	sy
		return 0;
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	e036      	b.n	8009c22 <z_impl_k_poll+0x146>
 8009bb4:	f381 8811 	msr	BASEPRI, r1
 8009bb8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
 8009bbc:	f06f 000a 	mvn.w	r0, #10
 8009bc0:	e02f      	b.n	8009c22 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
 8009bc2:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
 8009bc4:	600a      	str	r2, [r1, #0]
	next->prev = prev;
 8009bc6:	6051      	str	r1, [r2, #4]
	node->next = NULL;
 8009bc8:	2200      	movs	r2, #0
 8009bca:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	f38c 8811 	msr	BASEPRI, ip
 8009bd2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8009bd6:	f04f 0310 	mov.w	r3, #16
 8009bda:	f3ef 8c11 	mrs	ip, BASEPRI
 8009bde:	f383 8812 	msr	BASEPRI_MAX, r3
 8009be2:	f3bf 8f6f 	isb	sy
	while (num_events--) {
 8009be6:	4674      	mov	r4, lr
 8009be8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8009bec:	b1ac      	cbz	r4, 8009c1a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
 8009bee:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8009bf2:	009c      	lsls	r4, r3, #2
 8009bf4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	609a      	str	r2, [r3, #8]
	switch (event->type) {
 8009bfc:	7b5a      	ldrb	r2, [r3, #13]
 8009bfe:	f002 021f 	and.w	r2, r2, #31
 8009c02:	2a08      	cmp	r2, #8
 8009c04:	d8e3      	bhi.n	8009bce <z_impl_k_poll+0xf2>
 8009c06:	2101      	movs	r1, #1
 8009c08:	fa01 f202 	lsl.w	r2, r1, r2
 8009c0c:	f412 7f8b 	tst.w	r2, #278	; 0x116
 8009c10:	d0dd      	beq.n	8009bce <z_impl_k_poll+0xf2>
	return node->next != NULL;
 8009c12:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
 8009c14:	2a00      	cmp	r2, #0
 8009c16:	d1d4      	bne.n	8009bc2 <z_impl_k_poll+0xe6>
 8009c18:	e7d9      	b.n	8009bce <z_impl_k_poll+0xf2>
	__asm__ volatile(
 8009c1a:	f386 8811 	msr	BASEPRI, r6
 8009c1e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
 8009c22:	b002      	add	sp, #8
 8009c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c28:	20000e74 	.word	0x20000e74
 8009c2c:	200000bc 	.word	0x200000bc
 8009c30:	20000ec0 	.word	0x20000ec0

08009c34 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4603      	mov	r3, r0
	__asm__ volatile(
 8009c38:	f04f 0210 	mov.w	r2, #16
 8009c3c:	f3ef 8511 	mrs	r5, BASEPRI
 8009c40:	f382 8812 	msr	BASEPRI_MAX, r2
 8009c44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
 8009c48:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	6082      	str	r2, [r0, #8]
	return list->head == list;
 8009c4e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 8009c50:	4283      	cmp	r3, r0
 8009c52:	d011      	beq.n	8009c78 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
 8009c54:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 8009c56:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 8009c58:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 8009c5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 8009c60:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
 8009c62:	b148      	cbz	r0, 8009c78 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
 8009c64:	2101      	movs	r1, #1
 8009c66:	f003 fc05 	bl	800d474 <signal_poll_event>
 8009c6a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4805      	ldr	r0, [pc, #20]	; (8009c84 <z_impl_k_poll_signal_raise+0x50>)
 8009c70:	f7fe ff7c 	bl	8008b6c <z_reschedule>
	return rc;
}
 8009c74:	4620      	mov	r0, r4
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8009c78:	f385 8811 	msr	BASEPRI, r5
 8009c7c:	f3bf 8f6f 	isb	sy
		return 0;
 8009c80:	2400      	movs	r4, #0
 8009c82:	e7f7      	b.n	8009c74 <z_impl_k_poll_signal_raise+0x40>
 8009c84:	20000ec0 	.word	0x20000ec0

08009c88 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8009c88:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8009c8a:	4a03      	ldr	r2, [pc, #12]	; (8009c98 <boot_banner+0x10>)
 8009c8c:	4903      	ldr	r1, [pc, #12]	; (8009c9c <boot_banner+0x14>)
 8009c8e:	4804      	ldr	r0, [pc, #16]	; (8009ca0 <boot_banner+0x18>)
 8009c90:	f001 fc35 	bl	800b4fe <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8009c94:	bd08      	pop	{r3, pc}
 8009c96:	bf00      	nop
 8009c98:	0800f1c0 	.word	0x0800f1c0
 8009c9c:	0800f1e0 	.word	0x0800f1e0
 8009ca0:	0800f1f0 	.word	0x0800f1f0

08009ca4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8009ca4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8009ca6:	4c06      	ldr	r4, [pc, #24]	; (8009cc0 <statics_init+0x1c>)
 8009ca8:	e005      	b.n	8009cb6 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8009caa:	68a2      	ldr	r2, [r4, #8]
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f003 fc14 	bl	800d4dc <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8009cb4:	3418      	adds	r4, #24
 8009cb6:	4b03      	ldr	r3, [pc, #12]	; (8009cc4 <statics_init+0x20>)
 8009cb8:	429c      	cmp	r4, r3
 8009cba:	d3f6      	bcc.n	8009caa <statics_init+0x6>
		}
	}
	return 0;
}
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	bd10      	pop	{r4, pc}
 8009cc0:	20000390 	.word	0x20000390
 8009cc4:	20000390 	.word	0x20000390

08009cc8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8009ccc:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <k_sys_work_q_init+0x28>)
 8009cce:	9302      	str	r3, [sp, #8]
 8009cd0:	2400      	movs	r4, #0
 8009cd2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8009cd6:	ab02      	add	r3, sp, #8
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ce2:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <k_sys_work_q_init+0x2c>)
 8009ce4:	4804      	ldr	r0, [pc, #16]	; (8009cf8 <k_sys_work_q_init+0x30>)
 8009ce6:	f7fe feaf 	bl	8008a48 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8009cea:	4620      	mov	r0, r4
 8009cec:	b004      	add	sp, #16
 8009cee:	bd10      	pop	{r4, pc}
 8009cf0:	0800f218 	.word	0x0800f218
 8009cf4:	20003800 	.word	0x20003800
 8009cf8:	20000860 	.word	0x20000860

08009cfc <malloc>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <malloc+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f000 b84d 	b.w	8009da0 <_malloc_r>
 8009d06:	bf00      	nop
 8009d08:	200000c4 	.word	0x200000c4

08009d0c <_free_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4605      	mov	r5, r0
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d041      	beq.n	8009d98 <_free_r+0x8c>
 8009d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d18:	1f0c      	subs	r4, r1, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bfb8      	it	lt
 8009d1e:	18e4      	addlt	r4, r4, r3
 8009d20:	f000 fbfc 	bl	800a51c <__malloc_lock>
 8009d24:	4a1d      	ldr	r2, [pc, #116]	; (8009d9c <_free_r+0x90>)
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	b933      	cbnz	r3, 8009d38 <_free_r+0x2c>
 8009d2a:	6063      	str	r3, [r4, #4]
 8009d2c:	6014      	str	r4, [r2, #0]
 8009d2e:	4628      	mov	r0, r5
 8009d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d34:	f000 bbf8 	b.w	800a528 <__malloc_unlock>
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	d908      	bls.n	8009d4e <_free_r+0x42>
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	1821      	adds	r1, r4, r0
 8009d40:	428b      	cmp	r3, r1
 8009d42:	bf01      	itttt	eq
 8009d44:	6819      	ldreq	r1, [r3, #0]
 8009d46:	685b      	ldreq	r3, [r3, #4]
 8009d48:	1809      	addeq	r1, r1, r0
 8009d4a:	6021      	streq	r1, [r4, #0]
 8009d4c:	e7ed      	b.n	8009d2a <_free_r+0x1e>
 8009d4e:	461a      	mov	r2, r3
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	b10b      	cbz	r3, 8009d58 <_free_r+0x4c>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d9fa      	bls.n	8009d4e <_free_r+0x42>
 8009d58:	6811      	ldr	r1, [r2, #0]
 8009d5a:	1850      	adds	r0, r2, r1
 8009d5c:	42a0      	cmp	r0, r4
 8009d5e:	d10b      	bne.n	8009d78 <_free_r+0x6c>
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	4401      	add	r1, r0
 8009d64:	1850      	adds	r0, r2, r1
 8009d66:	4283      	cmp	r3, r0
 8009d68:	6011      	str	r1, [r2, #0]
 8009d6a:	d1e0      	bne.n	8009d2e <_free_r+0x22>
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	6053      	str	r3, [r2, #4]
 8009d72:	4401      	add	r1, r0
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	e7da      	b.n	8009d2e <_free_r+0x22>
 8009d78:	d902      	bls.n	8009d80 <_free_r+0x74>
 8009d7a:	230c      	movs	r3, #12
 8009d7c:	602b      	str	r3, [r5, #0]
 8009d7e:	e7d6      	b.n	8009d2e <_free_r+0x22>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	1821      	adds	r1, r4, r0
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf04      	itt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	6063      	str	r3, [r4, #4]
 8009d8e:	bf04      	itt	eq
 8009d90:	1809      	addeq	r1, r1, r0
 8009d92:	6021      	streq	r1, [r4, #0]
 8009d94:	6054      	str	r4, [r2, #4]
 8009d96:	e7ca      	b.n	8009d2e <_free_r+0x22>
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000ec4 	.word	0x20000ec4

08009da0 <_malloc_r>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	1ccd      	adds	r5, r1, #3
 8009da4:	f025 0503 	bic.w	r5, r5, #3
 8009da8:	3508      	adds	r5, #8
 8009daa:	2d0c      	cmp	r5, #12
 8009dac:	bf38      	it	cc
 8009dae:	250c      	movcc	r5, #12
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	4606      	mov	r6, r0
 8009db4:	db01      	blt.n	8009dba <_malloc_r+0x1a>
 8009db6:	42a9      	cmp	r1, r5
 8009db8:	d903      	bls.n	8009dc2 <_malloc_r+0x22>
 8009dba:	230c      	movs	r3, #12
 8009dbc:	6033      	str	r3, [r6, #0]
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc2:	f000 fbab 	bl	800a51c <__malloc_lock>
 8009dc6:	4921      	ldr	r1, [pc, #132]	; (8009e4c <_malloc_r+0xac>)
 8009dc8:	680a      	ldr	r2, [r1, #0]
 8009dca:	4614      	mov	r4, r2
 8009dcc:	b99c      	cbnz	r4, 8009df6 <_malloc_r+0x56>
 8009dce:	4f20      	ldr	r7, [pc, #128]	; (8009e50 <_malloc_r+0xb0>)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	b923      	cbnz	r3, 8009dde <_malloc_r+0x3e>
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f000 fb8c 	bl	800a4f4 <_sbrk_r>
 8009ddc:	6038      	str	r0, [r7, #0]
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	f000 fb87 	bl	800a4f4 <_sbrk_r>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d123      	bne.n	8009e32 <_malloc_r+0x92>
 8009dea:	230c      	movs	r3, #12
 8009dec:	6033      	str	r3, [r6, #0]
 8009dee:	4630      	mov	r0, r6
 8009df0:	f000 fb9a 	bl	800a528 <__malloc_unlock>
 8009df4:	e7e3      	b.n	8009dbe <_malloc_r+0x1e>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	1b5b      	subs	r3, r3, r5
 8009dfa:	d417      	bmi.n	8009e2c <_malloc_r+0x8c>
 8009dfc:	2b0b      	cmp	r3, #11
 8009dfe:	d903      	bls.n	8009e08 <_malloc_r+0x68>
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	441c      	add	r4, r3
 8009e04:	6025      	str	r5, [r4, #0]
 8009e06:	e004      	b.n	8009e12 <_malloc_r+0x72>
 8009e08:	6863      	ldr	r3, [r4, #4]
 8009e0a:	42a2      	cmp	r2, r4
 8009e0c:	bf0c      	ite	eq
 8009e0e:	600b      	streq	r3, [r1, #0]
 8009e10:	6053      	strne	r3, [r2, #4]
 8009e12:	4630      	mov	r0, r6
 8009e14:	f000 fb88 	bl	800a528 <__malloc_unlock>
 8009e18:	f104 000b 	add.w	r0, r4, #11
 8009e1c:	1d23      	adds	r3, r4, #4
 8009e1e:	f020 0007 	bic.w	r0, r0, #7
 8009e22:	1ac2      	subs	r2, r0, r3
 8009e24:	d0cc      	beq.n	8009dc0 <_malloc_r+0x20>
 8009e26:	1a1b      	subs	r3, r3, r0
 8009e28:	50a3      	str	r3, [r4, r2]
 8009e2a:	e7c9      	b.n	8009dc0 <_malloc_r+0x20>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	6864      	ldr	r4, [r4, #4]
 8009e30:	e7cc      	b.n	8009dcc <_malloc_r+0x2c>
 8009e32:	1cc4      	adds	r4, r0, #3
 8009e34:	f024 0403 	bic.w	r4, r4, #3
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d0e3      	beq.n	8009e04 <_malloc_r+0x64>
 8009e3c:	1a21      	subs	r1, r4, r0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f000 fb58 	bl	800a4f4 <_sbrk_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	d1dd      	bne.n	8009e04 <_malloc_r+0x64>
 8009e48:	e7cf      	b.n	8009dea <_malloc_r+0x4a>
 8009e4a:	bf00      	nop
 8009e4c:	20000ec4 	.word	0x20000ec4
 8009e50:	20000ec8 	.word	0x20000ec8

08009e54 <_printf_float>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	b091      	sub	sp, #68	; 0x44
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009e60:	4616      	mov	r6, r2
 8009e62:	461f      	mov	r7, r3
 8009e64:	4605      	mov	r5, r0
 8009e66:	f000 fb55 	bl	800a514 <_localeconv_r>
 8009e6a:	6803      	ldr	r3, [r0, #0]
 8009e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7f6 fff1 	bl	8000e56 <strlen>
 8009e74:	2300      	movs	r3, #0
 8009e76:	930e      	str	r3, [sp, #56]	; 0x38
 8009e78:	f8d8 3000 	ldr.w	r3, [r8]
 8009e7c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e7e:	3307      	adds	r3, #7
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	f103 0208 	add.w	r2, r3, #8
 8009e88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e8c:	f8d4 b000 	ldr.w	fp, [r4]
 8009e90:	f8c8 2000 	str.w	r2, [r8]
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e9c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009ea0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ea8:	4b9c      	ldr	r3, [pc, #624]	; (800a11c <_printf_float+0x2c8>)
 8009eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7f6 fe36 	bl	8000b20 <__aeabi_dcmpun>
 8009eb4:	bb70      	cbnz	r0, 8009f14 <_printf_float+0xc0>
 8009eb6:	4b99      	ldr	r3, [pc, #612]	; (800a11c <_printf_float+0x2c8>)
 8009eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	f7f6 fe10 	bl	8000ae4 <__aeabi_dcmple>
 8009ec4:	bb30      	cbnz	r0, 8009f14 <_printf_float+0xc0>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4651      	mov	r1, sl
 8009ece:	f7f6 fdff 	bl	8000ad0 <__aeabi_dcmplt>
 8009ed2:	b110      	cbz	r0, 8009eda <_printf_float+0x86>
 8009ed4:	232d      	movs	r3, #45	; 0x2d
 8009ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eda:	4b91      	ldr	r3, [pc, #580]	; (800a120 <_printf_float+0x2cc>)
 8009edc:	4891      	ldr	r0, [pc, #580]	; (800a124 <_printf_float+0x2d0>)
 8009ede:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009ee2:	bf94      	ite	ls
 8009ee4:	4698      	movls	r8, r3
 8009ee6:	4680      	movhi	r8, r0
 8009ee8:	2303      	movs	r3, #3
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	f02b 0304 	bic.w	r3, fp, #4
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	f04f 0a00 	mov.w	sl, #0
 8009ef6:	9700      	str	r7, [sp, #0]
 8009ef8:	4633      	mov	r3, r6
 8009efa:	aa0f      	add	r2, sp, #60	; 0x3c
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f003 fba8 	bl	800d654 <_printf_common>
 8009f04:	3001      	adds	r0, #1
 8009f06:	f040 808f 	bne.w	800a028 <_printf_float+0x1d4>
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f0e:	b011      	add	sp, #68	; 0x44
 8009f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f14:	4642      	mov	r2, r8
 8009f16:	4653      	mov	r3, sl
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4651      	mov	r1, sl
 8009f1c:	f7f6 fe00 	bl	8000b20 <__aeabi_dcmpun>
 8009f20:	b140      	cbz	r0, 8009f34 <_printf_float+0xe0>
 8009f22:	f1ba 0f00 	cmp.w	sl, #0
 8009f26:	bfbc      	itt	lt
 8009f28:	232d      	movlt	r3, #45	; 0x2d
 8009f2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f2e:	487e      	ldr	r0, [pc, #504]	; (800a128 <_printf_float+0x2d4>)
 8009f30:	4b7e      	ldr	r3, [pc, #504]	; (800a12c <_printf_float+0x2d8>)
 8009f32:	e7d4      	b.n	8009ede <_printf_float+0x8a>
 8009f34:	6863      	ldr	r3, [r4, #4]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f3c:	d142      	bne.n	8009fc4 <_printf_float+0x170>
 8009f3e:	2306      	movs	r3, #6
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	9206      	str	r2, [sp, #24]
 8009f46:	aa0e      	add	r2, sp, #56	; 0x38
 8009f48:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009f4c:	aa0d      	add	r2, sp, #52	; 0x34
 8009f4e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009f52:	9203      	str	r2, [sp, #12]
 8009f54:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009f58:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	6863      	ldr	r3, [r4, #4]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4642      	mov	r2, r8
 8009f64:	4653      	mov	r3, sl
 8009f66:	4628      	mov	r0, r5
 8009f68:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f6a:	f003 fad5 	bl	800d518 <__cvt>
 8009f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f70:	2947      	cmp	r1, #71	; 0x47
 8009f72:	4680      	mov	r8, r0
 8009f74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f76:	d108      	bne.n	8009f8a <_printf_float+0x136>
 8009f78:	1cc8      	adds	r0, r1, #3
 8009f7a:	db02      	blt.n	8009f82 <_printf_float+0x12e>
 8009f7c:	6863      	ldr	r3, [r4, #4]
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	dd40      	ble.n	800a004 <_printf_float+0x1b0>
 8009f82:	f1a9 0902 	sub.w	r9, r9, #2
 8009f86:	fa5f f989 	uxtb.w	r9, r9
 8009f8a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f8e:	d81f      	bhi.n	8009fd0 <_printf_float+0x17c>
 8009f90:	3901      	subs	r1, #1
 8009f92:	464a      	mov	r2, r9
 8009f94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f98:	910d      	str	r1, [sp, #52]	; 0x34
 8009f9a:	f003 fb1d 	bl	800d5d8 <__exponent>
 8009f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fa0:	1813      	adds	r3, r2, r0
 8009fa2:	2a01      	cmp	r2, #1
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	dc02      	bgt.n	8009fb0 <_printf_float+0x15c>
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	07d2      	lsls	r2, r2, #31
 8009fae:	d501      	bpl.n	8009fb4 <_printf_float+0x160>
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	6123      	str	r3, [r4, #16]
 8009fb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d09c      	beq.n	8009ef6 <_printf_float+0xa2>
 8009fbc:	232d      	movs	r3, #45	; 0x2d
 8009fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc2:	e798      	b.n	8009ef6 <_printf_float+0xa2>
 8009fc4:	2947      	cmp	r1, #71	; 0x47
 8009fc6:	d1bc      	bne.n	8009f42 <_printf_float+0xee>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1ba      	bne.n	8009f42 <_printf_float+0xee>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e7b7      	b.n	8009f40 <_printf_float+0xec>
 8009fd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009fd4:	d118      	bne.n	800a008 <_printf_float+0x1b4>
 8009fd6:	2900      	cmp	r1, #0
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	dd0b      	ble.n	8009ff4 <_printf_float+0x1a0>
 8009fdc:	6121      	str	r1, [r4, #16]
 8009fde:	b913      	cbnz	r3, 8009fe6 <_printf_float+0x192>
 8009fe0:	6822      	ldr	r2, [r4, #0]
 8009fe2:	07d0      	lsls	r0, r2, #31
 8009fe4:	d502      	bpl.n	8009fec <_printf_float+0x198>
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	440b      	add	r3, r1
 8009fea:	6123      	str	r3, [r4, #16]
 8009fec:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fee:	f04f 0a00 	mov.w	sl, #0
 8009ff2:	e7df      	b.n	8009fb4 <_printf_float+0x160>
 8009ff4:	b913      	cbnz	r3, 8009ffc <_printf_float+0x1a8>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	07d2      	lsls	r2, r2, #31
 8009ffa:	d501      	bpl.n	800a000 <_printf_float+0x1ac>
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	e7f4      	b.n	8009fea <_printf_float+0x196>
 800a000:	2301      	movs	r3, #1
 800a002:	e7f2      	b.n	8009fea <_printf_float+0x196>
 800a004:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00a:	4299      	cmp	r1, r3
 800a00c:	db05      	blt.n	800a01a <_printf_float+0x1c6>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	6121      	str	r1, [r4, #16]
 800a012:	07d8      	lsls	r0, r3, #31
 800a014:	d5ea      	bpl.n	8009fec <_printf_float+0x198>
 800a016:	1c4b      	adds	r3, r1, #1
 800a018:	e7e7      	b.n	8009fea <_printf_float+0x196>
 800a01a:	2900      	cmp	r1, #0
 800a01c:	bfd4      	ite	le
 800a01e:	f1c1 0202 	rsble	r2, r1, #2
 800a022:	2201      	movgt	r2, #1
 800a024:	4413      	add	r3, r2
 800a026:	e7e0      	b.n	8009fea <_printf_float+0x196>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	055a      	lsls	r2, r3, #21
 800a02c:	d407      	bmi.n	800a03e <_printf_float+0x1ea>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	4642      	mov	r2, r8
 800a032:	4631      	mov	r1, r6
 800a034:	4628      	mov	r0, r5
 800a036:	47b8      	blx	r7
 800a038:	3001      	adds	r0, #1
 800a03a:	d12b      	bne.n	800a094 <_printf_float+0x240>
 800a03c:	e765      	b.n	8009f0a <_printf_float+0xb6>
 800a03e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a042:	f240 80dc 	bls.w	800a1fe <_printf_float+0x3aa>
 800a046:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	f7f6 fd35 	bl	8000abc <__aeabi_dcmpeq>
 800a052:	2800      	cmp	r0, #0
 800a054:	d033      	beq.n	800a0be <_printf_float+0x26a>
 800a056:	4a36      	ldr	r2, [pc, #216]	; (800a130 <_printf_float+0x2dc>)
 800a058:	2301      	movs	r3, #1
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	f43f af52 	beq.w	8009f0a <_printf_float+0xb6>
 800a066:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a06a:	429a      	cmp	r2, r3
 800a06c:	db02      	blt.n	800a074 <_printf_float+0x220>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	07d8      	lsls	r0, r3, #31
 800a072:	d50f      	bpl.n	800a094 <_printf_float+0x240>
 800a074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a078:	4631      	mov	r1, r6
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f af43 	beq.w	8009f0a <_printf_float+0xb6>
 800a084:	f04f 0800 	mov.w	r8, #0
 800a088:	f104 091a 	add.w	r9, r4, #26
 800a08c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08e:	3b01      	subs	r3, #1
 800a090:	4543      	cmp	r3, r8
 800a092:	dc09      	bgt.n	800a0a8 <_printf_float+0x254>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	079b      	lsls	r3, r3, #30
 800a098:	f100 8101 	bmi.w	800a29e <_printf_float+0x44a>
 800a09c:	68e0      	ldr	r0, [r4, #12]
 800a09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0a0:	4298      	cmp	r0, r3
 800a0a2:	bfb8      	it	lt
 800a0a4:	4618      	movlt	r0, r3
 800a0a6:	e732      	b.n	8009f0e <_printf_float+0xba>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	464a      	mov	r2, r9
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af29 	beq.w	8009f0a <_printf_float+0xb6>
 800a0b8:	f108 0801 	add.w	r8, r8, #1
 800a0bc:	e7e6      	b.n	800a08c <_printf_float+0x238>
 800a0be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dc37      	bgt.n	800a134 <_printf_float+0x2e0>
 800a0c4:	4a1a      	ldr	r2, [pc, #104]	; (800a130 <_printf_float+0x2dc>)
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	47b8      	blx	r7
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f43f af1b 	beq.w	8009f0a <_printf_float+0xb6>
 800a0d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	d102      	bne.n	800a0e2 <_printf_float+0x28e>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d5d8      	bpl.n	800a094 <_printf_float+0x240>
 800a0e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	f43f af0c 	beq.w	8009f0a <_printf_float+0xb6>
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	f104 0a1a 	add.w	sl, r4, #26
 800a0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fc:	425b      	negs	r3, r3
 800a0fe:	454b      	cmp	r3, r9
 800a100:	dc01      	bgt.n	800a106 <_printf_float+0x2b2>
 800a102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a104:	e794      	b.n	800a030 <_printf_float+0x1dc>
 800a106:	2301      	movs	r3, #1
 800a108:	4652      	mov	r2, sl
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	f43f aefa 	beq.w	8009f0a <_printf_float+0xb6>
 800a116:	f109 0901 	add.w	r9, r9, #1
 800a11a:	e7ee      	b.n	800a0fa <_printf_float+0x2a6>
 800a11c:	7fefffff 	.word	0x7fefffff
 800a120:	0800f395 	.word	0x0800f395
 800a124:	0800f399 	.word	0x0800f399
 800a128:	0800f3a1 	.word	0x0800f3a1
 800a12c:	0800f39d 	.word	0x0800f39d
 800a130:	0800f3a5 	.word	0x0800f3a5
 800a134:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a138:	429a      	cmp	r2, r3
 800a13a:	bfa8      	it	ge
 800a13c:	461a      	movge	r2, r3
 800a13e:	2a00      	cmp	r2, #0
 800a140:	4691      	mov	r9, r2
 800a142:	dc37      	bgt.n	800a1b4 <_printf_float+0x360>
 800a144:	f04f 0b00 	mov.w	fp, #0
 800a148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a14c:	f104 021a 	add.w	r2, r4, #26
 800a150:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a154:	ebaa 0309 	sub.w	r3, sl, r9
 800a158:	455b      	cmp	r3, fp
 800a15a:	dc33      	bgt.n	800a1c4 <_printf_float+0x370>
 800a15c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a160:	429a      	cmp	r2, r3
 800a162:	db3b      	blt.n	800a1dc <_printf_float+0x388>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	07da      	lsls	r2, r3, #31
 800a168:	d438      	bmi.n	800a1dc <_printf_float+0x388>
 800a16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a16c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a16e:	eba3 020a 	sub.w	r2, r3, sl
 800a172:	eba3 0901 	sub.w	r9, r3, r1
 800a176:	4591      	cmp	r9, r2
 800a178:	bfa8      	it	ge
 800a17a:	4691      	movge	r9, r2
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	dc34      	bgt.n	800a1ec <_printf_float+0x398>
 800a182:	f04f 0800 	mov.w	r8, #0
 800a186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a18a:	f104 0a1a 	add.w	sl, r4, #26
 800a18e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a192:	1a9b      	subs	r3, r3, r2
 800a194:	eba3 0309 	sub.w	r3, r3, r9
 800a198:	4543      	cmp	r3, r8
 800a19a:	f77f af7b 	ble.w	800a094 <_printf_float+0x240>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4652      	mov	r2, sl
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	47b8      	blx	r7
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f43f aeae 	beq.w	8009f0a <_printf_float+0xb6>
 800a1ae:	f108 0801 	add.w	r8, r8, #1
 800a1b2:	e7ec      	b.n	800a18e <_printf_float+0x33a>
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d1c0      	bne.n	800a144 <_printf_float+0x2f0>
 800a1c2:	e6a2      	b.n	8009f0a <_printf_float+0xb6>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f ae9b 	beq.w	8009f0a <_printf_float+0xb6>
 800a1d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1d6:	f10b 0b01 	add.w	fp, fp, #1
 800a1da:	e7b9      	b.n	800a150 <_printf_float+0x2fc>
 800a1dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d1bf      	bne.n	800a16a <_printf_float+0x316>
 800a1ea:	e68e      	b.n	8009f0a <_printf_float+0xb6>
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	eb08 020a 	add.w	r2, r8, sl
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d1c2      	bne.n	800a182 <_printf_float+0x32e>
 800a1fc:	e685      	b.n	8009f0a <_printf_float+0xb6>
 800a1fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a200:	2a01      	cmp	r2, #1
 800a202:	dc01      	bgt.n	800a208 <_printf_float+0x3b4>
 800a204:	07db      	lsls	r3, r3, #31
 800a206:	d537      	bpl.n	800a278 <_printf_float+0x424>
 800a208:	2301      	movs	r3, #1
 800a20a:	4642      	mov	r2, r8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f ae79 	beq.w	8009f0a <_printf_float+0xb6>
 800a218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f ae71 	beq.w	8009f0a <_printf_float+0xb6>
 800a228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a22c:	2200      	movs	r2, #0
 800a22e:	2300      	movs	r3, #0
 800a230:	f7f6 fc44 	bl	8000abc <__aeabi_dcmpeq>
 800a234:	b9d8      	cbnz	r0, 800a26e <_printf_float+0x41a>
 800a236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a238:	f108 0201 	add.w	r2, r8, #1
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4631      	mov	r1, r6
 800a240:	4628      	mov	r0, r5
 800a242:	47b8      	blx	r7
 800a244:	3001      	adds	r0, #1
 800a246:	d10e      	bne.n	800a266 <_printf_float+0x412>
 800a248:	e65f      	b.n	8009f0a <_printf_float+0xb6>
 800a24a:	2301      	movs	r3, #1
 800a24c:	464a      	mov	r2, r9
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	f43f ae58 	beq.w	8009f0a <_printf_float+0xb6>
 800a25a:	f108 0801 	add.w	r8, r8, #1
 800a25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a260:	3b01      	subs	r3, #1
 800a262:	4543      	cmp	r3, r8
 800a264:	dcf1      	bgt.n	800a24a <_printf_float+0x3f6>
 800a266:	4653      	mov	r3, sl
 800a268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a26c:	e6e1      	b.n	800a032 <_printf_float+0x1de>
 800a26e:	f04f 0800 	mov.w	r8, #0
 800a272:	f104 091a 	add.w	r9, r4, #26
 800a276:	e7f2      	b.n	800a25e <_printf_float+0x40a>
 800a278:	2301      	movs	r3, #1
 800a27a:	4642      	mov	r2, r8
 800a27c:	e7df      	b.n	800a23e <_printf_float+0x3ea>
 800a27e:	2301      	movs	r3, #1
 800a280:	464a      	mov	r2, r9
 800a282:	4631      	mov	r1, r6
 800a284:	4628      	mov	r0, r5
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f ae3e 	beq.w	8009f0a <_printf_float+0xb6>
 800a28e:	f108 0801 	add.w	r8, r8, #1
 800a292:	68e3      	ldr	r3, [r4, #12]
 800a294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a296:	1a5b      	subs	r3, r3, r1
 800a298:	4543      	cmp	r3, r8
 800a29a:	dcf0      	bgt.n	800a27e <_printf_float+0x42a>
 800a29c:	e6fe      	b.n	800a09c <_printf_float+0x248>
 800a29e:	f04f 0800 	mov.w	r8, #0
 800a2a2:	f104 0919 	add.w	r9, r4, #25
 800a2a6:	e7f4      	b.n	800a292 <_printf_float+0x43e>

0800a2a8 <_printf_i>:
 800a2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ac:	7e0f      	ldrb	r7, [r1, #24]
 800a2ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2b0:	2f78      	cmp	r7, #120	; 0x78
 800a2b2:	4691      	mov	r9, r2
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	469a      	mov	sl, r3
 800a2ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2be:	d807      	bhi.n	800a2d0 <_printf_i+0x28>
 800a2c0:	2f62      	cmp	r7, #98	; 0x62
 800a2c2:	d80a      	bhi.n	800a2da <_printf_i+0x32>
 800a2c4:	2f00      	cmp	r7, #0
 800a2c6:	f000 80d8 	beq.w	800a47a <_printf_i+0x1d2>
 800a2ca:	2f58      	cmp	r7, #88	; 0x58
 800a2cc:	f000 80a3 	beq.w	800a416 <_printf_i+0x16e>
 800a2d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2d8:	e03a      	b.n	800a350 <_printf_i+0xa8>
 800a2da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2de:	2b15      	cmp	r3, #21
 800a2e0:	d8f6      	bhi.n	800a2d0 <_printf_i+0x28>
 800a2e2:	a101      	add	r1, pc, #4	; (adr r1, 800a2e8 <_printf_i+0x40>)
 800a2e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2e8:	0800a341 	.word	0x0800a341
 800a2ec:	0800a355 	.word	0x0800a355
 800a2f0:	0800a2d1 	.word	0x0800a2d1
 800a2f4:	0800a2d1 	.word	0x0800a2d1
 800a2f8:	0800a2d1 	.word	0x0800a2d1
 800a2fc:	0800a2d1 	.word	0x0800a2d1
 800a300:	0800a355 	.word	0x0800a355
 800a304:	0800a2d1 	.word	0x0800a2d1
 800a308:	0800a2d1 	.word	0x0800a2d1
 800a30c:	0800a2d1 	.word	0x0800a2d1
 800a310:	0800a2d1 	.word	0x0800a2d1
 800a314:	0800a461 	.word	0x0800a461
 800a318:	0800a385 	.word	0x0800a385
 800a31c:	0800a443 	.word	0x0800a443
 800a320:	0800a2d1 	.word	0x0800a2d1
 800a324:	0800a2d1 	.word	0x0800a2d1
 800a328:	0800a483 	.word	0x0800a483
 800a32c:	0800a2d1 	.word	0x0800a2d1
 800a330:	0800a385 	.word	0x0800a385
 800a334:	0800a2d1 	.word	0x0800a2d1
 800a338:	0800a2d1 	.word	0x0800a2d1
 800a33c:	0800a44b 	.word	0x0800a44b
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	1d1a      	adds	r2, r3, #4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	602a      	str	r2, [r5, #0]
 800a348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a34c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a350:	2301      	movs	r3, #1
 800a352:	e0a3      	b.n	800a49c <_printf_i+0x1f4>
 800a354:	6820      	ldr	r0, [r4, #0]
 800a356:	6829      	ldr	r1, [r5, #0]
 800a358:	0606      	lsls	r6, r0, #24
 800a35a:	f101 0304 	add.w	r3, r1, #4
 800a35e:	d50a      	bpl.n	800a376 <_printf_i+0xce>
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	2e00      	cmp	r6, #0
 800a366:	da03      	bge.n	800a370 <_printf_i+0xc8>
 800a368:	232d      	movs	r3, #45	; 0x2d
 800a36a:	4276      	negs	r6, r6
 800a36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a370:	485e      	ldr	r0, [pc, #376]	; (800a4ec <_printf_i+0x244>)
 800a372:	230a      	movs	r3, #10
 800a374:	e019      	b.n	800a3aa <_printf_i+0x102>
 800a376:	680e      	ldr	r6, [r1, #0]
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a37e:	bf18      	it	ne
 800a380:	b236      	sxthne	r6, r6
 800a382:	e7ef      	b.n	800a364 <_printf_i+0xbc>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	1d19      	adds	r1, r3, #4
 800a38a:	6029      	str	r1, [r5, #0]
 800a38c:	0601      	lsls	r1, r0, #24
 800a38e:	d501      	bpl.n	800a394 <_printf_i+0xec>
 800a390:	681e      	ldr	r6, [r3, #0]
 800a392:	e002      	b.n	800a39a <_printf_i+0xf2>
 800a394:	0646      	lsls	r6, r0, #25
 800a396:	d5fb      	bpl.n	800a390 <_printf_i+0xe8>
 800a398:	881e      	ldrh	r6, [r3, #0]
 800a39a:	4854      	ldr	r0, [pc, #336]	; (800a4ec <_printf_i+0x244>)
 800a39c:	2f6f      	cmp	r7, #111	; 0x6f
 800a39e:	bf0c      	ite	eq
 800a3a0:	2308      	moveq	r3, #8
 800a3a2:	230a      	movne	r3, #10
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3aa:	6865      	ldr	r5, [r4, #4]
 800a3ac:	60a5      	str	r5, [r4, #8]
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	bfa2      	ittt	ge
 800a3b2:	6821      	ldrge	r1, [r4, #0]
 800a3b4:	f021 0104 	bicge.w	r1, r1, #4
 800a3b8:	6021      	strge	r1, [r4, #0]
 800a3ba:	b90e      	cbnz	r6, 800a3c0 <_printf_i+0x118>
 800a3bc:	2d00      	cmp	r5, #0
 800a3be:	d04d      	beq.n	800a45c <_printf_i+0x1b4>
 800a3c0:	4615      	mov	r5, r2
 800a3c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a3ca:	5dc7      	ldrb	r7, [r0, r7]
 800a3cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3d0:	4637      	mov	r7, r6
 800a3d2:	42bb      	cmp	r3, r7
 800a3d4:	460e      	mov	r6, r1
 800a3d6:	d9f4      	bls.n	800a3c2 <_printf_i+0x11a>
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d10b      	bne.n	800a3f4 <_printf_i+0x14c>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	07de      	lsls	r6, r3, #31
 800a3e0:	d508      	bpl.n	800a3f4 <_printf_i+0x14c>
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	6861      	ldr	r1, [r4, #4]
 800a3e6:	4299      	cmp	r1, r3
 800a3e8:	bfde      	ittt	le
 800a3ea:	2330      	movle	r3, #48	; 0x30
 800a3ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a3f4:	1b52      	subs	r2, r2, r5
 800a3f6:	6122      	str	r2, [r4, #16]
 800a3f8:	f8cd a000 	str.w	sl, [sp]
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	aa03      	add	r2, sp, #12
 800a400:	4621      	mov	r1, r4
 800a402:	4640      	mov	r0, r8
 800a404:	f003 f926 	bl	800d654 <_printf_common>
 800a408:	3001      	adds	r0, #1
 800a40a:	d14c      	bne.n	800a4a6 <_printf_i+0x1fe>
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a410:	b004      	add	sp, #16
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a416:	4835      	ldr	r0, [pc, #212]	; (800a4ec <_printf_i+0x244>)
 800a418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a41c:	6829      	ldr	r1, [r5, #0]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	f851 6b04 	ldr.w	r6, [r1], #4
 800a424:	6029      	str	r1, [r5, #0]
 800a426:	061d      	lsls	r5, r3, #24
 800a428:	d514      	bpl.n	800a454 <_printf_i+0x1ac>
 800a42a:	07df      	lsls	r7, r3, #31
 800a42c:	bf44      	itt	mi
 800a42e:	f043 0320 	orrmi.w	r3, r3, #32
 800a432:	6023      	strmi	r3, [r4, #0]
 800a434:	b91e      	cbnz	r6, 800a43e <_printf_i+0x196>
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	f023 0320 	bic.w	r3, r3, #32
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	2310      	movs	r3, #16
 800a440:	e7b0      	b.n	800a3a4 <_printf_i+0xfc>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	f043 0320 	orr.w	r3, r3, #32
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	2378      	movs	r3, #120	; 0x78
 800a44c:	4828      	ldr	r0, [pc, #160]	; (800a4f0 <_printf_i+0x248>)
 800a44e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a452:	e7e3      	b.n	800a41c <_printf_i+0x174>
 800a454:	0659      	lsls	r1, r3, #25
 800a456:	bf48      	it	mi
 800a458:	b2b6      	uxthmi	r6, r6
 800a45a:	e7e6      	b.n	800a42a <_printf_i+0x182>
 800a45c:	4615      	mov	r5, r2
 800a45e:	e7bb      	b.n	800a3d8 <_printf_i+0x130>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	6826      	ldr	r6, [r4, #0]
 800a464:	6961      	ldr	r1, [r4, #20]
 800a466:	1d18      	adds	r0, r3, #4
 800a468:	6028      	str	r0, [r5, #0]
 800a46a:	0635      	lsls	r5, r6, #24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	d501      	bpl.n	800a474 <_printf_i+0x1cc>
 800a470:	6019      	str	r1, [r3, #0]
 800a472:	e002      	b.n	800a47a <_printf_i+0x1d2>
 800a474:	0670      	lsls	r0, r6, #25
 800a476:	d5fb      	bpl.n	800a470 <_printf_i+0x1c8>
 800a478:	8019      	strh	r1, [r3, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	4615      	mov	r5, r2
 800a480:	e7ba      	b.n	800a3f8 <_printf_i+0x150>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	602a      	str	r2, [r5, #0]
 800a488:	681d      	ldr	r5, [r3, #0]
 800a48a:	6862      	ldr	r2, [r4, #4]
 800a48c:	2100      	movs	r1, #0
 800a48e:	4628      	mov	r0, r5
 800a490:	f7f5 fe86 	bl	80001a0 <memchr>
 800a494:	b108      	cbz	r0, 800a49a <_printf_i+0x1f2>
 800a496:	1b40      	subs	r0, r0, r5
 800a498:	6060      	str	r0, [r4, #4]
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a4:	e7a8      	b.n	800a3f8 <_printf_i+0x150>
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	47d0      	blx	sl
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d0ab      	beq.n	800a40c <_printf_i+0x164>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	079b      	lsls	r3, r3, #30
 800a4b8:	d413      	bmi.n	800a4e2 <_printf_i+0x23a>
 800a4ba:	68e0      	ldr	r0, [r4, #12]
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	4298      	cmp	r0, r3
 800a4c0:	bfb8      	it	lt
 800a4c2:	4618      	movlt	r0, r3
 800a4c4:	e7a4      	b.n	800a410 <_printf_i+0x168>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	47d0      	blx	sl
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d09b      	beq.n	800a40c <_printf_i+0x164>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	9903      	ldr	r1, [sp, #12]
 800a4da:	1a5b      	subs	r3, r3, r1
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dcf2      	bgt.n	800a4c6 <_printf_i+0x21e>
 800a4e0:	e7eb      	b.n	800a4ba <_printf_i+0x212>
 800a4e2:	2500      	movs	r5, #0
 800a4e4:	f104 0619 	add.w	r6, r4, #25
 800a4e8:	e7f5      	b.n	800a4d6 <_printf_i+0x22e>
 800a4ea:	bf00      	nop
 800a4ec:	0800f3a7 	.word	0x0800f3a7
 800a4f0:	0800f3b8 	.word	0x0800f3b8

0800a4f4 <_sbrk_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d06      	ldr	r5, [pc, #24]	; (800a510 <_sbrk_r+0x1c>)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	602b      	str	r3, [r5, #0]
 800a500:	f7fa fa6c 	bl	80049dc <_sbrk>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d102      	bne.n	800a50e <_sbrk_r+0x1a>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b103      	cbz	r3, 800a50e <_sbrk_r+0x1a>
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
 800a510:	20000ecc 	.word	0x20000ecc

0800a514 <_localeconv_r>:
 800a514:	4800      	ldr	r0, [pc, #0]	; (800a518 <_localeconv_r+0x4>)
 800a516:	4770      	bx	lr
 800a518:	20000218 	.word	0x20000218

0800a51c <__malloc_lock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__malloc_lock+0x8>)
 800a51e:	f001 bcf6 	b.w	800bf0e <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	20000390 	.word	0x20000390

0800a528 <__malloc_unlock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_unlock+0x8>)
 800a52a:	f001 bcf8 	b.w	800bf1e <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	20000390 	.word	0x20000390

0800a534 <_Balloc>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a538:	4604      	mov	r4, r0
 800a53a:	460d      	mov	r5, r1
 800a53c:	b976      	cbnz	r6, 800a55c <_Balloc+0x28>
 800a53e:	2010      	movs	r0, #16
 800a540:	f7ff fbdc 	bl	8009cfc <malloc>
 800a544:	4602      	mov	r2, r0
 800a546:	6260      	str	r0, [r4, #36]	; 0x24
 800a548:	b920      	cbnz	r0, 800a554 <_Balloc+0x20>
 800a54a:	4b18      	ldr	r3, [pc, #96]	; (800a5ac <_Balloc+0x78>)
 800a54c:	4818      	ldr	r0, [pc, #96]	; (800a5b0 <_Balloc+0x7c>)
 800a54e:	2166      	movs	r1, #102	; 0x66
 800a550:	f000 fb04 	bl	800ab5c <__assert_func>
 800a554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a558:	6006      	str	r6, [r0, #0]
 800a55a:	60c6      	str	r6, [r0, #12]
 800a55c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a55e:	68f3      	ldr	r3, [r6, #12]
 800a560:	b183      	cbz	r3, 800a584 <_Balloc+0x50>
 800a562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a56a:	b9b8      	cbnz	r0, 800a59c <_Balloc+0x68>
 800a56c:	2101      	movs	r1, #1
 800a56e:	fa01 f605 	lsl.w	r6, r1, r5
 800a572:	1d72      	adds	r2, r6, #5
 800a574:	0092      	lsls	r2, r2, #2
 800a576:	4620      	mov	r0, r4
 800a578:	f003 f9e7 	bl	800d94a <_calloc_r>
 800a57c:	b160      	cbz	r0, 800a598 <_Balloc+0x64>
 800a57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a582:	e00e      	b.n	800a5a2 <_Balloc+0x6e>
 800a584:	2221      	movs	r2, #33	; 0x21
 800a586:	2104      	movs	r1, #4
 800a588:	4620      	mov	r0, r4
 800a58a:	f003 f9de 	bl	800d94a <_calloc_r>
 800a58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a590:	60f0      	str	r0, [r6, #12]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e4      	bne.n	800a562 <_Balloc+0x2e>
 800a598:	2000      	movs	r0, #0
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	6802      	ldr	r2, [r0, #0]
 800a59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5a8:	e7f7      	b.n	800a59a <_Balloc+0x66>
 800a5aa:	bf00      	nop
 800a5ac:	0800f3d6 	.word	0x0800f3d6
 800a5b0:	0800f458 	.word	0x0800f458

0800a5b4 <_Bfree>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	b976      	cbnz	r6, 800a5dc <_Bfree+0x28>
 800a5be:	2010      	movs	r0, #16
 800a5c0:	f7ff fb9c 	bl	8009cfc <malloc>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a5c8:	b920      	cbnz	r0, 800a5d4 <_Bfree+0x20>
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <_Bfree+0x3c>)
 800a5cc:	4809      	ldr	r0, [pc, #36]	; (800a5f4 <_Bfree+0x40>)
 800a5ce:	218a      	movs	r1, #138	; 0x8a
 800a5d0:	f000 fac4 	bl	800ab5c <__assert_func>
 800a5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5d8:	6006      	str	r6, [r0, #0]
 800a5da:	60c6      	str	r6, [r0, #12]
 800a5dc:	b13c      	cbz	r4, 800a5ee <_Bfree+0x3a>
 800a5de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5e0:	6862      	ldr	r2, [r4, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5e8:	6021      	str	r1, [r4, #0]
 800a5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	0800f3d6 	.word	0x0800f3d6
 800a5f4:	0800f458 	.word	0x0800f458

0800a5f8 <__multadd>:
 800a5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fc:	690d      	ldr	r5, [r1, #16]
 800a5fe:	4607      	mov	r7, r0
 800a600:	460c      	mov	r4, r1
 800a602:	461e      	mov	r6, r3
 800a604:	f101 0c14 	add.w	ip, r1, #20
 800a608:	2000      	movs	r0, #0
 800a60a:	f8dc 3000 	ldr.w	r3, [ip]
 800a60e:	b299      	uxth	r1, r3
 800a610:	fb02 6101 	mla	r1, r2, r1, r6
 800a614:	0c1e      	lsrs	r6, r3, #16
 800a616:	0c0b      	lsrs	r3, r1, #16
 800a618:	fb02 3306 	mla	r3, r2, r6, r3
 800a61c:	b289      	uxth	r1, r1
 800a61e:	3001      	adds	r0, #1
 800a620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a624:	4285      	cmp	r5, r0
 800a626:	f84c 1b04 	str.w	r1, [ip], #4
 800a62a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a62e:	dcec      	bgt.n	800a60a <__multadd+0x12>
 800a630:	b30e      	cbz	r6, 800a676 <__multadd+0x7e>
 800a632:	68a3      	ldr	r3, [r4, #8]
 800a634:	42ab      	cmp	r3, r5
 800a636:	dc19      	bgt.n	800a66c <__multadd+0x74>
 800a638:	6861      	ldr	r1, [r4, #4]
 800a63a:	4638      	mov	r0, r7
 800a63c:	3101      	adds	r1, #1
 800a63e:	f7ff ff79 	bl	800a534 <_Balloc>
 800a642:	4680      	mov	r8, r0
 800a644:	b928      	cbnz	r0, 800a652 <__multadd+0x5a>
 800a646:	4602      	mov	r2, r0
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <__multadd+0x84>)
 800a64a:	480d      	ldr	r0, [pc, #52]	; (800a680 <__multadd+0x88>)
 800a64c:	21b5      	movs	r1, #181	; 0xb5
 800a64e:	f000 fa85 	bl	800ab5c <__assert_func>
 800a652:	6922      	ldr	r2, [r4, #16]
 800a654:	3202      	adds	r2, #2
 800a656:	f104 010c 	add.w	r1, r4, #12
 800a65a:	0092      	lsls	r2, r2, #2
 800a65c:	300c      	adds	r0, #12
 800a65e:	f002 ff45 	bl	800d4ec <memcpy>
 800a662:	4621      	mov	r1, r4
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff ffa5 	bl	800a5b4 <_Bfree>
 800a66a:	4644      	mov	r4, r8
 800a66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a670:	3501      	adds	r5, #1
 800a672:	615e      	str	r6, [r3, #20]
 800a674:	6125      	str	r5, [r4, #16]
 800a676:	4620      	mov	r0, r4
 800a678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a67c:	0800f447 	.word	0x0800f447
 800a680:	0800f458 	.word	0x0800f458

0800a684 <__i2b>:
 800a684:	b510      	push	{r4, lr}
 800a686:	460c      	mov	r4, r1
 800a688:	2101      	movs	r1, #1
 800a68a:	f7ff ff53 	bl	800a534 <_Balloc>
 800a68e:	4602      	mov	r2, r0
 800a690:	b928      	cbnz	r0, 800a69e <__i2b+0x1a>
 800a692:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <__i2b+0x24>)
 800a694:	4805      	ldr	r0, [pc, #20]	; (800a6ac <__i2b+0x28>)
 800a696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a69a:	f000 fa5f 	bl	800ab5c <__assert_func>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	6144      	str	r4, [r0, #20]
 800a6a2:	6103      	str	r3, [r0, #16]
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	bf00      	nop
 800a6a8:	0800f447 	.word	0x0800f447
 800a6ac:	0800f458 	.word	0x0800f458

0800a6b0 <__multiply>:
 800a6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b4:	4691      	mov	r9, r2
 800a6b6:	690a      	ldr	r2, [r1, #16]
 800a6b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	bfb8      	it	lt
 800a6c0:	460b      	movlt	r3, r1
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	bfbc      	itt	lt
 800a6c6:	464c      	movlt	r4, r9
 800a6c8:	4699      	movlt	r9, r3
 800a6ca:	6927      	ldr	r7, [r4, #16]
 800a6cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6d0:	68a3      	ldr	r3, [r4, #8]
 800a6d2:	6861      	ldr	r1, [r4, #4]
 800a6d4:	eb07 060a 	add.w	r6, r7, sl
 800a6d8:	42b3      	cmp	r3, r6
 800a6da:	b085      	sub	sp, #20
 800a6dc:	bfb8      	it	lt
 800a6de:	3101      	addlt	r1, #1
 800a6e0:	f7ff ff28 	bl	800a534 <_Balloc>
 800a6e4:	b930      	cbnz	r0, 800a6f4 <__multiply+0x44>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	4b43      	ldr	r3, [pc, #268]	; (800a7f8 <__multiply+0x148>)
 800a6ea:	4844      	ldr	r0, [pc, #272]	; (800a7fc <__multiply+0x14c>)
 800a6ec:	f240 115d 	movw	r1, #349	; 0x15d
 800a6f0:	f000 fa34 	bl	800ab5c <__assert_func>
 800a6f4:	f100 0514 	add.w	r5, r0, #20
 800a6f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6fc:	462b      	mov	r3, r5
 800a6fe:	2200      	movs	r2, #0
 800a700:	4543      	cmp	r3, r8
 800a702:	d321      	bcc.n	800a748 <__multiply+0x98>
 800a704:	f104 0314 	add.w	r3, r4, #20
 800a708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a70c:	f109 0314 	add.w	r3, r9, #20
 800a710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a714:	9202      	str	r2, [sp, #8]
 800a716:	1b3a      	subs	r2, r7, r4
 800a718:	3a15      	subs	r2, #21
 800a71a:	f022 0203 	bic.w	r2, r2, #3
 800a71e:	3204      	adds	r2, #4
 800a720:	f104 0115 	add.w	r1, r4, #21
 800a724:	428f      	cmp	r7, r1
 800a726:	bf38      	it	cc
 800a728:	2204      	movcc	r2, #4
 800a72a:	9201      	str	r2, [sp, #4]
 800a72c:	9a02      	ldr	r2, [sp, #8]
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	429a      	cmp	r2, r3
 800a732:	d80c      	bhi.n	800a74e <__multiply+0x9e>
 800a734:	2e00      	cmp	r6, #0
 800a736:	dd03      	ble.n	800a740 <__multiply+0x90>
 800a738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d059      	beq.n	800a7f4 <__multiply+0x144>
 800a740:	6106      	str	r6, [r0, #16]
 800a742:	b005      	add	sp, #20
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	f843 2b04 	str.w	r2, [r3], #4
 800a74c:	e7d8      	b.n	800a700 <__multiply+0x50>
 800a74e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a752:	f1ba 0f00 	cmp.w	sl, #0
 800a756:	d023      	beq.n	800a7a0 <__multiply+0xf0>
 800a758:	f104 0e14 	add.w	lr, r4, #20
 800a75c:	46a9      	mov	r9, r5
 800a75e:	f04f 0c00 	mov.w	ip, #0
 800a762:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a766:	f8d9 1000 	ldr.w	r1, [r9]
 800a76a:	fa1f fb82 	uxth.w	fp, r2
 800a76e:	b289      	uxth	r1, r1
 800a770:	fb0a 110b 	mla	r1, sl, fp, r1
 800a774:	4461      	add	r1, ip
 800a776:	f8d9 c000 	ldr.w	ip, [r9]
 800a77a:	0c12      	lsrs	r2, r2, #16
 800a77c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a780:	fb0a c202 	mla	r2, sl, r2, ip
 800a784:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a788:	b289      	uxth	r1, r1
 800a78a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a78e:	4577      	cmp	r7, lr
 800a790:	f849 1b04 	str.w	r1, [r9], #4
 800a794:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a798:	d8e3      	bhi.n	800a762 <__multiply+0xb2>
 800a79a:	9a01      	ldr	r2, [sp, #4]
 800a79c:	f845 c002 	str.w	ip, [r5, r2]
 800a7a0:	9a03      	ldr	r2, [sp, #12]
 800a7a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	f1b9 0f00 	cmp.w	r9, #0
 800a7ac:	d020      	beq.n	800a7f0 <__multiply+0x140>
 800a7ae:	6829      	ldr	r1, [r5, #0]
 800a7b0:	f104 0c14 	add.w	ip, r4, #20
 800a7b4:	46ae      	mov	lr, r5
 800a7b6:	f04f 0a00 	mov.w	sl, #0
 800a7ba:	f8bc b000 	ldrh.w	fp, [ip]
 800a7be:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7c2:	fb09 220b 	mla	r2, r9, fp, r2
 800a7c6:	4492      	add	sl, r2
 800a7c8:	b289      	uxth	r1, r1
 800a7ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7ce:	f84e 1b04 	str.w	r1, [lr], #4
 800a7d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7d6:	f8be 1000 	ldrh.w	r1, [lr]
 800a7da:	0c12      	lsrs	r2, r2, #16
 800a7dc:	fb09 1102 	mla	r1, r9, r2, r1
 800a7e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7e4:	4567      	cmp	r7, ip
 800a7e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7ea:	d8e6      	bhi.n	800a7ba <__multiply+0x10a>
 800a7ec:	9a01      	ldr	r2, [sp, #4]
 800a7ee:	50a9      	str	r1, [r5, r2]
 800a7f0:	3504      	adds	r5, #4
 800a7f2:	e79b      	b.n	800a72c <__multiply+0x7c>
 800a7f4:	3e01      	subs	r6, #1
 800a7f6:	e79d      	b.n	800a734 <__multiply+0x84>
 800a7f8:	0800f447 	.word	0x0800f447
 800a7fc:	0800f458 	.word	0x0800f458

0800a800 <__pow5mult>:
 800a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a804:	4615      	mov	r5, r2
 800a806:	f012 0203 	ands.w	r2, r2, #3
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	d007      	beq.n	800a820 <__pow5mult+0x20>
 800a810:	4c25      	ldr	r4, [pc, #148]	; (800a8a8 <__pow5mult+0xa8>)
 800a812:	3a01      	subs	r2, #1
 800a814:	2300      	movs	r3, #0
 800a816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a81a:	f7ff feed 	bl	800a5f8 <__multadd>
 800a81e:	4607      	mov	r7, r0
 800a820:	10ad      	asrs	r5, r5, #2
 800a822:	d03d      	beq.n	800a8a0 <__pow5mult+0xa0>
 800a824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a826:	b97c      	cbnz	r4, 800a848 <__pow5mult+0x48>
 800a828:	2010      	movs	r0, #16
 800a82a:	f7ff fa67 	bl	8009cfc <malloc>
 800a82e:	4602      	mov	r2, r0
 800a830:	6270      	str	r0, [r6, #36]	; 0x24
 800a832:	b928      	cbnz	r0, 800a840 <__pow5mult+0x40>
 800a834:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <__pow5mult+0xac>)
 800a836:	481e      	ldr	r0, [pc, #120]	; (800a8b0 <__pow5mult+0xb0>)
 800a838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a83c:	f000 f98e 	bl	800ab5c <__assert_func>
 800a840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a844:	6004      	str	r4, [r0, #0]
 800a846:	60c4      	str	r4, [r0, #12]
 800a848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a850:	b94c      	cbnz	r4, 800a866 <__pow5mult+0x66>
 800a852:	f240 2171 	movw	r1, #625	; 0x271
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff ff14 	bl	800a684 <__i2b>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a862:	4604      	mov	r4, r0
 800a864:	6003      	str	r3, [r0, #0]
 800a866:	f04f 0900 	mov.w	r9, #0
 800a86a:	07eb      	lsls	r3, r5, #31
 800a86c:	d50a      	bpl.n	800a884 <__pow5mult+0x84>
 800a86e:	4639      	mov	r1, r7
 800a870:	4622      	mov	r2, r4
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff1c 	bl	800a6b0 <__multiply>
 800a878:	4639      	mov	r1, r7
 800a87a:	4680      	mov	r8, r0
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7ff fe99 	bl	800a5b4 <_Bfree>
 800a882:	4647      	mov	r7, r8
 800a884:	106d      	asrs	r5, r5, #1
 800a886:	d00b      	beq.n	800a8a0 <__pow5mult+0xa0>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	b938      	cbnz	r0, 800a89c <__pow5mult+0x9c>
 800a88c:	4622      	mov	r2, r4
 800a88e:	4621      	mov	r1, r4
 800a890:	4630      	mov	r0, r6
 800a892:	f7ff ff0d 	bl	800a6b0 <__multiply>
 800a896:	6020      	str	r0, [r4, #0]
 800a898:	f8c0 9000 	str.w	r9, [r0]
 800a89c:	4604      	mov	r4, r0
 800a89e:	e7e4      	b.n	800a86a <__pow5mult+0x6a>
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800f228 	.word	0x0800f228
 800a8ac:	0800f3d6 	.word	0x0800f3d6
 800a8b0:	0800f458 	.word	0x0800f458

0800a8b4 <__lshift>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	6849      	ldr	r1, [r1, #4]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	4691      	mov	r9, r2
 800a8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8cc:	f108 0601 	add.w	r6, r8, #1
 800a8d0:	42b3      	cmp	r3, r6
 800a8d2:	db0b      	blt.n	800a8ec <__lshift+0x38>
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7ff fe2d 	bl	800a534 <_Balloc>
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b948      	cbnz	r0, 800a8f2 <__lshift+0x3e>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	4b2a      	ldr	r3, [pc, #168]	; (800a98c <__lshift+0xd8>)
 800a8e2:	482b      	ldr	r0, [pc, #172]	; (800a990 <__lshift+0xdc>)
 800a8e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8e8:	f000 f938 	bl	800ab5c <__assert_func>
 800a8ec:	3101      	adds	r1, #1
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	e7ee      	b.n	800a8d0 <__lshift+0x1c>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f100 0114 	add.w	r1, r0, #20
 800a8f8:	f100 0210 	add.w	r2, r0, #16
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	4553      	cmp	r3, sl
 800a900:	db37      	blt.n	800a972 <__lshift+0xbe>
 800a902:	6920      	ldr	r0, [r4, #16]
 800a904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a908:	f104 0314 	add.w	r3, r4, #20
 800a90c:	f019 091f 	ands.w	r9, r9, #31
 800a910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a914:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a918:	d02f      	beq.n	800a97a <__lshift+0xc6>
 800a91a:	f1c9 0e20 	rsb	lr, r9, #32
 800a91e:	468a      	mov	sl, r1
 800a920:	f04f 0c00 	mov.w	ip, #0
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	fa02 f209 	lsl.w	r2, r2, r9
 800a92a:	ea42 020c 	orr.w	r2, r2, ip
 800a92e:	f84a 2b04 	str.w	r2, [sl], #4
 800a932:	f853 2b04 	ldr.w	r2, [r3], #4
 800a936:	4298      	cmp	r0, r3
 800a938:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a93c:	d8f2      	bhi.n	800a924 <__lshift+0x70>
 800a93e:	1b03      	subs	r3, r0, r4
 800a940:	3b15      	subs	r3, #21
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	3304      	adds	r3, #4
 800a948:	f104 0215 	add.w	r2, r4, #21
 800a94c:	4290      	cmp	r0, r2
 800a94e:	bf38      	it	cc
 800a950:	2304      	movcc	r3, #4
 800a952:	f841 c003 	str.w	ip, [r1, r3]
 800a956:	f1bc 0f00 	cmp.w	ip, #0
 800a95a:	d001      	beq.n	800a960 <__lshift+0xac>
 800a95c:	f108 0602 	add.w	r6, r8, #2
 800a960:	3e01      	subs	r6, #1
 800a962:	4638      	mov	r0, r7
 800a964:	612e      	str	r6, [r5, #16]
 800a966:	4621      	mov	r1, r4
 800a968:	f7ff fe24 	bl	800a5b4 <_Bfree>
 800a96c:	4628      	mov	r0, r5
 800a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a972:	f842 0f04 	str.w	r0, [r2, #4]!
 800a976:	3301      	adds	r3, #1
 800a978:	e7c1      	b.n	800a8fe <__lshift+0x4a>
 800a97a:	3904      	subs	r1, #4
 800a97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a980:	f841 2f04 	str.w	r2, [r1, #4]!
 800a984:	4298      	cmp	r0, r3
 800a986:	d8f9      	bhi.n	800a97c <__lshift+0xc8>
 800a988:	e7ea      	b.n	800a960 <__lshift+0xac>
 800a98a:	bf00      	nop
 800a98c:	0800f447 	.word	0x0800f447
 800a990:	0800f458 	.word	0x0800f458

0800a994 <__mdiff>:
 800a994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	460d      	mov	r5, r1
 800a99a:	4607      	mov	r7, r0
 800a99c:	4611      	mov	r1, r2
 800a99e:	4628      	mov	r0, r5
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	f002 ffb7 	bl	800d914 <__mcmp>
 800a9a6:	1e06      	subs	r6, r0, #0
 800a9a8:	d111      	bne.n	800a9ce <__mdiff+0x3a>
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	f7ff fdc1 	bl	800a534 <_Balloc>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <__mdiff+0x2e>
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <__mdiff+0x108>)
 800a9b8:	f240 2132 	movw	r1, #562	; 0x232
 800a9bc:	4838      	ldr	r0, [pc, #224]	; (800aaa0 <__mdiff+0x10c>)
 800a9be:	f000 f8cd 	bl	800ab5c <__assert_func>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ce:	bfa4      	itt	ge
 800a9d0:	4623      	movge	r3, r4
 800a9d2:	462c      	movge	r4, r5
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	6861      	ldr	r1, [r4, #4]
 800a9d8:	bfa6      	itte	ge
 800a9da:	461d      	movge	r5, r3
 800a9dc:	2600      	movge	r6, #0
 800a9de:	2601      	movlt	r6, #1
 800a9e0:	f7ff fda8 	bl	800a534 <_Balloc>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	b918      	cbnz	r0, 800a9f0 <__mdiff+0x5c>
 800a9e8:	4b2c      	ldr	r3, [pc, #176]	; (800aa9c <__mdiff+0x108>)
 800a9ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9ee:	e7e5      	b.n	800a9bc <__mdiff+0x28>
 800a9f0:	6927      	ldr	r7, [r4, #16]
 800a9f2:	60c6      	str	r6, [r0, #12]
 800a9f4:	692e      	ldr	r6, [r5, #16]
 800a9f6:	f104 0014 	add.w	r0, r4, #20
 800a9fa:	f105 0914 	add.w	r9, r5, #20
 800a9fe:	f102 0e14 	add.w	lr, r2, #20
 800aa02:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800aa06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa0a:	3410      	adds	r4, #16
 800aa0c:	46f2      	mov	sl, lr
 800aa0e:	2100      	movs	r1, #0
 800aa10:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa14:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aa18:	fa1f f883 	uxth.w	r8, r3
 800aa1c:	fa11 f18b 	uxtah	r1, r1, fp
 800aa20:	0c1b      	lsrs	r3, r3, #16
 800aa22:	eba1 0808 	sub.w	r8, r1, r8
 800aa26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa2e:	fa1f f888 	uxth.w	r8, r8
 800aa32:	1419      	asrs	r1, r3, #16
 800aa34:	454e      	cmp	r6, r9
 800aa36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa3a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa3e:	d8e7      	bhi.n	800aa10 <__mdiff+0x7c>
 800aa40:	1b73      	subs	r3, r6, r5
 800aa42:	3b15      	subs	r3, #21
 800aa44:	f023 0303 	bic.w	r3, r3, #3
 800aa48:	3304      	adds	r3, #4
 800aa4a:	3515      	adds	r5, #21
 800aa4c:	42ae      	cmp	r6, r5
 800aa4e:	bf38      	it	cc
 800aa50:	2304      	movcc	r3, #4
 800aa52:	4418      	add	r0, r3
 800aa54:	4473      	add	r3, lr
 800aa56:	469e      	mov	lr, r3
 800aa58:	4606      	mov	r6, r0
 800aa5a:	4566      	cmp	r6, ip
 800aa5c:	d30e      	bcc.n	800aa7c <__mdiff+0xe8>
 800aa5e:	f10c 0103 	add.w	r1, ip, #3
 800aa62:	1a09      	subs	r1, r1, r0
 800aa64:	f021 0103 	bic.w	r1, r1, #3
 800aa68:	3803      	subs	r0, #3
 800aa6a:	4584      	cmp	ip, r0
 800aa6c:	bf38      	it	cc
 800aa6e:	2100      	movcc	r1, #0
 800aa70:	4419      	add	r1, r3
 800aa72:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aa76:	b17b      	cbz	r3, 800aa98 <__mdiff+0x104>
 800aa78:	6117      	str	r7, [r2, #16]
 800aa7a:	e7a5      	b.n	800a9c8 <__mdiff+0x34>
 800aa7c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa80:	fa11 f488 	uxtah	r4, r1, r8
 800aa84:	1425      	asrs	r5, r4, #16
 800aa86:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800aa8a:	b2a4      	uxth	r4, r4
 800aa8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800aa90:	f84e 4b04 	str.w	r4, [lr], #4
 800aa94:	1429      	asrs	r1, r5, #16
 800aa96:	e7e0      	b.n	800aa5a <__mdiff+0xc6>
 800aa98:	3f01      	subs	r7, #1
 800aa9a:	e7ea      	b.n	800aa72 <__mdiff+0xde>
 800aa9c:	0800f447 	.word	0x0800f447
 800aaa0:	0800f458 	.word	0x0800f458

0800aaa4 <__d2b>:
 800aaa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aaae:	4690      	mov	r8, r2
 800aab0:	461d      	mov	r5, r3
 800aab2:	f7ff fd3f 	bl	800a534 <_Balloc>
 800aab6:	4604      	mov	r4, r0
 800aab8:	b930      	cbnz	r0, 800aac8 <__d2b+0x24>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b25      	ldr	r3, [pc, #148]	; (800ab54 <__d2b+0xb0>)
 800aabe:	4826      	ldr	r0, [pc, #152]	; (800ab58 <__d2b+0xb4>)
 800aac0:	f240 310a 	movw	r1, #778	; 0x30a
 800aac4:	f000 f84a 	bl	800ab5c <__assert_func>
 800aac8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aacc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aad0:	bb2d      	cbnz	r5, 800ab1e <__d2b+0x7a>
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	f1b8 0300 	subs.w	r3, r8, #0
 800aad8:	d026      	beq.n	800ab28 <__d2b+0x84>
 800aada:	4668      	mov	r0, sp
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	f002 feec 	bl	800d8ba <__lo0bits>
 800aae2:	9900      	ldr	r1, [sp, #0]
 800aae4:	b1f0      	cbz	r0, 800ab24 <__d2b+0x80>
 800aae6:	9a01      	ldr	r2, [sp, #4]
 800aae8:	f1c0 0320 	rsb	r3, r0, #32
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	430b      	orrs	r3, r1
 800aaf2:	40c2      	lsrs	r2, r0
 800aaf4:	6163      	str	r3, [r4, #20]
 800aaf6:	9201      	str	r2, [sp, #4]
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	61a3      	str	r3, [r4, #24]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bf14      	ite	ne
 800ab00:	2102      	movne	r1, #2
 800ab02:	2101      	moveq	r1, #1
 800ab04:	6121      	str	r1, [r4, #16]
 800ab06:	b1c5      	cbz	r5, 800ab3a <__d2b+0x96>
 800ab08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab0c:	4405      	add	r5, r0
 800ab0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab12:	603d      	str	r5, [r7, #0]
 800ab14:	6030      	str	r0, [r6, #0]
 800ab16:	4620      	mov	r0, r4
 800ab18:	b002      	add	sp, #8
 800ab1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab22:	e7d6      	b.n	800aad2 <__d2b+0x2e>
 800ab24:	6161      	str	r1, [r4, #20]
 800ab26:	e7e7      	b.n	800aaf8 <__d2b+0x54>
 800ab28:	a801      	add	r0, sp, #4
 800ab2a:	f002 fec6 	bl	800d8ba <__lo0bits>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	6163      	str	r3, [r4, #20]
 800ab32:	2101      	movs	r1, #1
 800ab34:	6121      	str	r1, [r4, #16]
 800ab36:	3020      	adds	r0, #32
 800ab38:	e7e5      	b.n	800ab06 <__d2b+0x62>
 800ab3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ab3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab42:	6038      	str	r0, [r7, #0]
 800ab44:	6918      	ldr	r0, [r3, #16]
 800ab46:	f002 fe98 	bl	800d87a <__hi0bits>
 800ab4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ab4e:	6031      	str	r1, [r6, #0]
 800ab50:	e7e1      	b.n	800ab16 <__d2b+0x72>
 800ab52:	bf00      	nop
 800ab54:	0800f447 	.word	0x0800f447
 800ab58:	0800f458 	.word	0x0800f458

0800ab5c <__assert_func>:
 800ab5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab5e:	4614      	mov	r4, r2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <__assert_func+0x2c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4605      	mov	r5, r0
 800ab68:	68d8      	ldr	r0, [r3, #12]
 800ab6a:	b14c      	cbz	r4, 800ab80 <__assert_func+0x24>
 800ab6c:	4b07      	ldr	r3, [pc, #28]	; (800ab8c <__assert_func+0x30>)
 800ab6e:	9100      	str	r1, [sp, #0]
 800ab70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab74:	4906      	ldr	r1, [pc, #24]	; (800ab90 <__assert_func+0x34>)
 800ab76:	462b      	mov	r3, r5
 800ab78:	f000 f80e 	bl	800ab98 <fiprintf>
 800ab7c:	f002 ff39 	bl	800d9f2 <abort>
 800ab80:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <__assert_func+0x38>)
 800ab82:	461c      	mov	r4, r3
 800ab84:	e7f3      	b.n	800ab6e <__assert_func+0x12>
 800ab86:	bf00      	nop
 800ab88:	200000c4 	.word	0x200000c4
 800ab8c:	0800f4b3 	.word	0x0800f4b3
 800ab90:	0800f4c0 	.word	0x0800f4c0
 800ab94:	0800f4ee 	.word	0x0800f4ee

0800ab98 <fiprintf>:
 800ab98:	b40e      	push	{r1, r2, r3}
 800ab9a:	b503      	push	{r0, r1, lr}
 800ab9c:	4601      	mov	r1, r0
 800ab9e:	ab03      	add	r3, sp, #12
 800aba0:	4805      	ldr	r0, [pc, #20]	; (800abb8 <fiprintf+0x20>)
 800aba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba6:	6800      	ldr	r0, [r0, #0]
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	f000 f807 	bl	800abbc <_vfiprintf_r>
 800abae:	b002      	add	sp, #8
 800abb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb4:	b003      	add	sp, #12
 800abb6:	4770      	bx	lr
 800abb8:	200000c4 	.word	0x200000c4

0800abbc <_vfiprintf_r>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	460d      	mov	r5, r1
 800abc2:	b09d      	sub	sp, #116	; 0x74
 800abc4:	4614      	mov	r4, r2
 800abc6:	4698      	mov	r8, r3
 800abc8:	4606      	mov	r6, r0
 800abca:	b118      	cbz	r0, 800abd4 <_vfiprintf_r+0x18>
 800abcc:	6983      	ldr	r3, [r0, #24]
 800abce:	b90b      	cbnz	r3, 800abd4 <_vfiprintf_r+0x18>
 800abd0:	f000 fae4 	bl	800b19c <__sinit>
 800abd4:	4b89      	ldr	r3, [pc, #548]	; (800adfc <_vfiprintf_r+0x240>)
 800abd6:	429d      	cmp	r5, r3
 800abd8:	d11b      	bne.n	800ac12 <_vfiprintf_r+0x56>
 800abda:	6875      	ldr	r5, [r6, #4]
 800abdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	d405      	bmi.n	800abee <_vfiprintf_r+0x32>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	059a      	lsls	r2, r3, #22
 800abe6:	d402      	bmi.n	800abee <_vfiprintf_r+0x32>
 800abe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abea:	f001 f990 	bl	800bf0e <__retarget_lock_acquire_recursive>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	071b      	lsls	r3, r3, #28
 800abf2:	d501      	bpl.n	800abf8 <_vfiprintf_r+0x3c>
 800abf4:	692b      	ldr	r3, [r5, #16]
 800abf6:	b9eb      	cbnz	r3, 800ac34 <_vfiprintf_r+0x78>
 800abf8:	4629      	mov	r1, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	f000 f960 	bl	800aec0 <__swsetup_r>
 800ac00:	b1c0      	cbz	r0, 800ac34 <_vfiprintf_r+0x78>
 800ac02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac04:	07dc      	lsls	r4, r3, #31
 800ac06:	d50e      	bpl.n	800ac26 <_vfiprintf_r+0x6a>
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0c:	b01d      	add	sp, #116	; 0x74
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	4b7b      	ldr	r3, [pc, #492]	; (800ae00 <_vfiprintf_r+0x244>)
 800ac14:	429d      	cmp	r5, r3
 800ac16:	d101      	bne.n	800ac1c <_vfiprintf_r+0x60>
 800ac18:	68b5      	ldr	r5, [r6, #8]
 800ac1a:	e7df      	b.n	800abdc <_vfiprintf_r+0x20>
 800ac1c:	4b79      	ldr	r3, [pc, #484]	; (800ae04 <_vfiprintf_r+0x248>)
 800ac1e:	429d      	cmp	r5, r3
 800ac20:	bf08      	it	eq
 800ac22:	68f5      	ldreq	r5, [r6, #12]
 800ac24:	e7da      	b.n	800abdc <_vfiprintf_r+0x20>
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d4ed      	bmi.n	800ac08 <_vfiprintf_r+0x4c>
 800ac2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac2e:	f001 f976 	bl	800bf1e <__retarget_lock_release_recursive>
 800ac32:	e7e9      	b.n	800ac08 <_vfiprintf_r+0x4c>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac42:	2330      	movs	r3, #48	; 0x30
 800ac44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae08 <_vfiprintf_r+0x24c>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	4623      	mov	r3, r4
 800ac52:	469a      	mov	sl, r3
 800ac54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac58:	b10a      	cbz	r2, 800ac5e <_vfiprintf_r+0xa2>
 800ac5a:	2a25      	cmp	r2, #37	; 0x25
 800ac5c:	d1f9      	bne.n	800ac52 <_vfiprintf_r+0x96>
 800ac5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac62:	d00b      	beq.n	800ac7c <_vfiprintf_r+0xc0>
 800ac64:	465b      	mov	r3, fp
 800ac66:	4622      	mov	r2, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f002 fea2 	bl	800d9b4 <__sfputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	f000 80aa 	beq.w	800adca <_vfiprintf_r+0x20e>
 800ac76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac78:	445a      	add	r2, fp
 800ac7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 80a2 	beq.w	800adca <_vfiprintf_r+0x20e>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac9e:	4654      	mov	r4, sl
 800aca0:	2205      	movs	r2, #5
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4858      	ldr	r0, [pc, #352]	; (800ae08 <_vfiprintf_r+0x24c>)
 800aca8:	f7f5 fa7a 	bl	80001a0 <memchr>
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	b9d8      	cbnz	r0, 800ace8 <_vfiprintf_r+0x12c>
 800acb0:	06d1      	lsls	r1, r2, #27
 800acb2:	bf44      	itt	mi
 800acb4:	2320      	movmi	r3, #32
 800acb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acba:	0713      	lsls	r3, r2, #28
 800acbc:	bf44      	itt	mi
 800acbe:	232b      	movmi	r3, #43	; 0x2b
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b2a      	cmp	r3, #42	; 0x2a
 800acca:	d015      	beq.n	800acf8 <_vfiprintf_r+0x13c>
 800accc:	9a07      	ldr	r2, [sp, #28]
 800acce:	4654      	mov	r4, sl
 800acd0:	2000      	movs	r0, #0
 800acd2:	f04f 0c0a 	mov.w	ip, #10
 800acd6:	4621      	mov	r1, r4
 800acd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acdc:	3b30      	subs	r3, #48	; 0x30
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d94e      	bls.n	800ad80 <_vfiprintf_r+0x1c4>
 800ace2:	b1b0      	cbz	r0, 800ad12 <_vfiprintf_r+0x156>
 800ace4:	9207      	str	r2, [sp, #28]
 800ace6:	e014      	b.n	800ad12 <_vfiprintf_r+0x156>
 800ace8:	eba0 0308 	sub.w	r3, r0, r8
 800acec:	fa09 f303 	lsl.w	r3, r9, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	46a2      	mov	sl, r4
 800acf6:	e7d2      	b.n	800ac9e <_vfiprintf_r+0xe2>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	1d19      	adds	r1, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9103      	str	r1, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbb      	ittet	lt
 800ad04:	425b      	neglt	r3, r3
 800ad06:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0a:	9307      	strge	r3, [sp, #28]
 800ad0c:	9307      	strlt	r3, [sp, #28]
 800ad0e:	bfb8      	it	lt
 800ad10:	9204      	strlt	r2, [sp, #16]
 800ad12:	7823      	ldrb	r3, [r4, #0]
 800ad14:	2b2e      	cmp	r3, #46	; 0x2e
 800ad16:	d10c      	bne.n	800ad32 <_vfiprintf_r+0x176>
 800ad18:	7863      	ldrb	r3, [r4, #1]
 800ad1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1c:	d135      	bne.n	800ad8a <_vfiprintf_r+0x1ce>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9203      	str	r2, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfb8      	it	lt
 800ad2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad2e:	3402      	adds	r4, #2
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ae0c <_vfiprintf_r+0x250>
 800ad36:	7821      	ldrb	r1, [r4, #0]
 800ad38:	2203      	movs	r2, #3
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	f7f5 fa30 	bl	80001a0 <memchr>
 800ad40:	b140      	cbz	r0, 800ad54 <_vfiprintf_r+0x198>
 800ad42:	2340      	movs	r3, #64	; 0x40
 800ad44:	eba0 000a 	sub.w	r0, r0, sl
 800ad48:	fa03 f000 	lsl.w	r0, r3, r0
 800ad4c:	9b04      	ldr	r3, [sp, #16]
 800ad4e:	4303      	orrs	r3, r0
 800ad50:	3401      	adds	r4, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	482d      	ldr	r0, [pc, #180]	; (800ae10 <_vfiprintf_r+0x254>)
 800ad5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f7f5 fa1e 	bl	80001a0 <memchr>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d03f      	beq.n	800ade8 <_vfiprintf_r+0x22c>
 800ad68:	4b2a      	ldr	r3, [pc, #168]	; (800ae14 <_vfiprintf_r+0x258>)
 800ad6a:	bb1b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x1f8>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	3307      	adds	r3, #7
 800ad70:	f023 0307 	bic.w	r3, r3, #7
 800ad74:	3308      	adds	r3, #8
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	443b      	add	r3, r7
 800ad7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7e:	e767      	b.n	800ac50 <_vfiprintf_r+0x94>
 800ad80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad84:	460c      	mov	r4, r1
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7a5      	b.n	800acd6 <_vfiprintf_r+0x11a>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f04f 0c0a 	mov.w	ip, #10
 800ad96:	4620      	mov	r0, r4
 800ad98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9c:	3a30      	subs	r2, #48	; 0x30
 800ad9e:	2a09      	cmp	r2, #9
 800ada0:	d903      	bls.n	800adaa <_vfiprintf_r+0x1ee>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c5      	beq.n	800ad32 <_vfiprintf_r+0x176>
 800ada6:	9105      	str	r1, [sp, #20]
 800ada8:	e7c3      	b.n	800ad32 <_vfiprintf_r+0x176>
 800adaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800adae:	4604      	mov	r4, r0
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f0      	b.n	800ad96 <_vfiprintf_r+0x1da>
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	462a      	mov	r2, r5
 800adba:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <_vfiprintf_r+0x25c>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7ff f848 	bl	8009e54 <_printf_float>
 800adc4:	4607      	mov	r7, r0
 800adc6:	1c78      	adds	r0, r7, #1
 800adc8:	d1d6      	bne.n	800ad78 <_vfiprintf_r+0x1bc>
 800adca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adcc:	07d9      	lsls	r1, r3, #31
 800adce:	d405      	bmi.n	800addc <_vfiprintf_r+0x220>
 800add0:	89ab      	ldrh	r3, [r5, #12]
 800add2:	059a      	lsls	r2, r3, #22
 800add4:	d402      	bmi.n	800addc <_vfiprintf_r+0x220>
 800add6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add8:	f001 f8a1 	bl	800bf1e <__retarget_lock_release_recursive>
 800addc:	89ab      	ldrh	r3, [r5, #12]
 800adde:	065b      	lsls	r3, r3, #25
 800ade0:	f53f af12 	bmi.w	800ac08 <_vfiprintf_r+0x4c>
 800ade4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ade6:	e711      	b.n	800ac0c <_vfiprintf_r+0x50>
 800ade8:	ab03      	add	r3, sp, #12
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	462a      	mov	r2, r5
 800adee:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <_vfiprintf_r+0x25c>)
 800adf0:	a904      	add	r1, sp, #16
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff fa58 	bl	800a2a8 <_printf_i>
 800adf8:	e7e4      	b.n	800adc4 <_vfiprintf_r+0x208>
 800adfa:	bf00      	nop
 800adfc:	0800f254 	.word	0x0800f254
 800ae00:	0800f274 	.word	0x0800f274
 800ae04:	0800f234 	.word	0x0800f234
 800ae08:	0800f4f9 	.word	0x0800f4f9
 800ae0c:	0800f4ff 	.word	0x0800f4ff
 800ae10:	0800f503 	.word	0x0800f503
 800ae14:	08009e55 	.word	0x08009e55
 800ae18:	0800d9b5 	.word	0x0800d9b5

0800ae1c <__swbuf_r>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	460e      	mov	r6, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	4605      	mov	r5, r0
 800ae24:	b118      	cbz	r0, 800ae2e <__swbuf_r+0x12>
 800ae26:	6983      	ldr	r3, [r0, #24]
 800ae28:	b90b      	cbnz	r3, 800ae2e <__swbuf_r+0x12>
 800ae2a:	f000 f9b7 	bl	800b19c <__sinit>
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <__swbuf_r+0x98>)
 800ae30:	429c      	cmp	r4, r3
 800ae32:	d12b      	bne.n	800ae8c <__swbuf_r+0x70>
 800ae34:	686c      	ldr	r4, [r5, #4]
 800ae36:	69a3      	ldr	r3, [r4, #24]
 800ae38:	60a3      	str	r3, [r4, #8]
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	071a      	lsls	r2, r3, #28
 800ae3e:	d52f      	bpl.n	800aea0 <__swbuf_r+0x84>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	b36b      	cbz	r3, 800aea0 <__swbuf_r+0x84>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	6820      	ldr	r0, [r4, #0]
 800ae48:	1ac0      	subs	r0, r0, r3
 800ae4a:	6963      	ldr	r3, [r4, #20]
 800ae4c:	b2f6      	uxtb	r6, r6
 800ae4e:	4283      	cmp	r3, r0
 800ae50:	4637      	mov	r7, r6
 800ae52:	dc04      	bgt.n	800ae5e <__swbuf_r+0x42>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f922 	bl	800b0a0 <_fflush_r>
 800ae5c:	bb30      	cbnz	r0, 800aeac <__swbuf_r+0x90>
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	60a3      	str	r3, [r4, #8]
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	6022      	str	r2, [r4, #0]
 800ae6a:	701e      	strb	r6, [r3, #0]
 800ae6c:	6963      	ldr	r3, [r4, #20]
 800ae6e:	3001      	adds	r0, #1
 800ae70:	4283      	cmp	r3, r0
 800ae72:	d004      	beq.n	800ae7e <__swbuf_r+0x62>
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	07db      	lsls	r3, r3, #31
 800ae78:	d506      	bpl.n	800ae88 <__swbuf_r+0x6c>
 800ae7a:	2e0a      	cmp	r6, #10
 800ae7c:	d104      	bne.n	800ae88 <__swbuf_r+0x6c>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4628      	mov	r0, r5
 800ae82:	f000 f90d 	bl	800b0a0 <_fflush_r>
 800ae86:	b988      	cbnz	r0, 800aeac <__swbuf_r+0x90>
 800ae88:	4638      	mov	r0, r7
 800ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8c:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <__swbuf_r+0x9c>)
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d101      	bne.n	800ae96 <__swbuf_r+0x7a>
 800ae92:	68ac      	ldr	r4, [r5, #8]
 800ae94:	e7cf      	b.n	800ae36 <__swbuf_r+0x1a>
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <__swbuf_r+0xa0>)
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	bf08      	it	eq
 800ae9c:	68ec      	ldreq	r4, [r5, #12]
 800ae9e:	e7ca      	b.n	800ae36 <__swbuf_r+0x1a>
 800aea0:	4621      	mov	r1, r4
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 f80c 	bl	800aec0 <__swsetup_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d0cb      	beq.n	800ae44 <__swbuf_r+0x28>
 800aeac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aeb0:	e7ea      	b.n	800ae88 <__swbuf_r+0x6c>
 800aeb2:	bf00      	nop
 800aeb4:	0800f254 	.word	0x0800f254
 800aeb8:	0800f274 	.word	0x0800f274
 800aebc:	0800f234 	.word	0x0800f234

0800aec0 <__swsetup_r>:
 800aec0:	4b32      	ldr	r3, [pc, #200]	; (800af8c <__swsetup_r+0xcc>)
 800aec2:	b570      	push	{r4, r5, r6, lr}
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	4606      	mov	r6, r0
 800aec8:	460c      	mov	r4, r1
 800aeca:	b125      	cbz	r5, 800aed6 <__swsetup_r+0x16>
 800aecc:	69ab      	ldr	r3, [r5, #24]
 800aece:	b913      	cbnz	r3, 800aed6 <__swsetup_r+0x16>
 800aed0:	4628      	mov	r0, r5
 800aed2:	f000 f963 	bl	800b19c <__sinit>
 800aed6:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <__swsetup_r+0xd0>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d10f      	bne.n	800aefc <__swsetup_r+0x3c>
 800aedc:	686c      	ldr	r4, [r5, #4]
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee4:	0719      	lsls	r1, r3, #28
 800aee6:	d42c      	bmi.n	800af42 <__swsetup_r+0x82>
 800aee8:	06dd      	lsls	r5, r3, #27
 800aeea:	d411      	bmi.n	800af10 <__swsetup_r+0x50>
 800aeec:	2309      	movs	r3, #9
 800aeee:	6033      	str	r3, [r6, #0]
 800aef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aefa:	e03e      	b.n	800af7a <__swsetup_r+0xba>
 800aefc:	4b25      	ldr	r3, [pc, #148]	; (800af94 <__swsetup_r+0xd4>)
 800aefe:	429c      	cmp	r4, r3
 800af00:	d101      	bne.n	800af06 <__swsetup_r+0x46>
 800af02:	68ac      	ldr	r4, [r5, #8]
 800af04:	e7eb      	b.n	800aede <__swsetup_r+0x1e>
 800af06:	4b24      	ldr	r3, [pc, #144]	; (800af98 <__swsetup_r+0xd8>)
 800af08:	429c      	cmp	r4, r3
 800af0a:	bf08      	it	eq
 800af0c:	68ec      	ldreq	r4, [r5, #12]
 800af0e:	e7e6      	b.n	800aede <__swsetup_r+0x1e>
 800af10:	0758      	lsls	r0, r3, #29
 800af12:	d512      	bpl.n	800af3a <__swsetup_r+0x7a>
 800af14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af16:	b141      	cbz	r1, 800af2a <__swsetup_r+0x6a>
 800af18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af1c:	4299      	cmp	r1, r3
 800af1e:	d002      	beq.n	800af26 <__swsetup_r+0x66>
 800af20:	4630      	mov	r0, r6
 800af22:	f7fe fef3 	bl	8009d0c <_free_r>
 800af26:	2300      	movs	r3, #0
 800af28:	6363      	str	r3, [r4, #52]	; 0x34
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	2300      	movs	r3, #0
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f043 0308 	orr.w	r3, r3, #8
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	b94b      	cbnz	r3, 800af5a <__swsetup_r+0x9a>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af50:	d003      	beq.n	800af5a <__swsetup_r+0x9a>
 800af52:	4621      	mov	r1, r4
 800af54:	4630      	mov	r0, r6
 800af56:	f000 f99f 	bl	800b298 <__smakebuf_r>
 800af5a:	89a0      	ldrh	r0, [r4, #12]
 800af5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af60:	f010 0301 	ands.w	r3, r0, #1
 800af64:	d00a      	beq.n	800af7c <__swsetup_r+0xbc>
 800af66:	2300      	movs	r3, #0
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	6963      	ldr	r3, [r4, #20]
 800af6c:	425b      	negs	r3, r3
 800af6e:	61a3      	str	r3, [r4, #24]
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b943      	cbnz	r3, 800af86 <__swsetup_r+0xc6>
 800af74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af78:	d1ba      	bne.n	800aef0 <__swsetup_r+0x30>
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	0781      	lsls	r1, r0, #30
 800af7e:	bf58      	it	pl
 800af80:	6963      	ldrpl	r3, [r4, #20]
 800af82:	60a3      	str	r3, [r4, #8]
 800af84:	e7f4      	b.n	800af70 <__swsetup_r+0xb0>
 800af86:	2000      	movs	r0, #0
 800af88:	e7f7      	b.n	800af7a <__swsetup_r+0xba>
 800af8a:	bf00      	nop
 800af8c:	200000c4 	.word	0x200000c4
 800af90:	0800f254 	.word	0x0800f254
 800af94:	0800f274 	.word	0x0800f274
 800af98:	0800f234 	.word	0x0800f234

0800af9c <__sflush_r>:
 800af9c:	898a      	ldrh	r2, [r1, #12]
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4605      	mov	r5, r0
 800afa2:	0710      	lsls	r0, r2, #28
 800afa4:	460c      	mov	r4, r1
 800afa6:	d457      	bmi.n	800b058 <__sflush_r+0xbc>
 800afa8:	684b      	ldr	r3, [r1, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dc04      	bgt.n	800afb8 <__sflush_r+0x1c>
 800afae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dc01      	bgt.n	800afb8 <__sflush_r+0x1c>
 800afb4:	2000      	movs	r0, #0
 800afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afba:	2e00      	cmp	r6, #0
 800afbc:	d0fa      	beq.n	800afb4 <__sflush_r+0x18>
 800afbe:	2300      	movs	r3, #0
 800afc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afc4:	682f      	ldr	r7, [r5, #0]
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	d032      	beq.n	800b030 <__sflush_r+0x94>
 800afca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	075a      	lsls	r2, r3, #29
 800afd0:	d505      	bpl.n	800afde <__sflush_r+0x42>
 800afd2:	6863      	ldr	r3, [r4, #4]
 800afd4:	1ac0      	subs	r0, r0, r3
 800afd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afd8:	b10b      	cbz	r3, 800afde <__sflush_r+0x42>
 800afda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afdc:	1ac0      	subs	r0, r0, r3
 800afde:	2300      	movs	r3, #0
 800afe0:	4602      	mov	r2, r0
 800afe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afe4:	6a21      	ldr	r1, [r4, #32]
 800afe6:	4628      	mov	r0, r5
 800afe8:	47b0      	blx	r6
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	d106      	bne.n	800affe <__sflush_r+0x62>
 800aff0:	6829      	ldr	r1, [r5, #0]
 800aff2:	291d      	cmp	r1, #29
 800aff4:	d82c      	bhi.n	800b050 <__sflush_r+0xb4>
 800aff6:	4a29      	ldr	r2, [pc, #164]	; (800b09c <__sflush_r+0x100>)
 800aff8:	40ca      	lsrs	r2, r1
 800affa:	07d6      	lsls	r6, r2, #31
 800affc:	d528      	bpl.n	800b050 <__sflush_r+0xb4>
 800affe:	2200      	movs	r2, #0
 800b000:	6062      	str	r2, [r4, #4]
 800b002:	04d9      	lsls	r1, r3, #19
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	6022      	str	r2, [r4, #0]
 800b008:	d504      	bpl.n	800b014 <__sflush_r+0x78>
 800b00a:	1c42      	adds	r2, r0, #1
 800b00c:	d101      	bne.n	800b012 <__sflush_r+0x76>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b903      	cbnz	r3, 800b014 <__sflush_r+0x78>
 800b012:	6560      	str	r0, [r4, #84]	; 0x54
 800b014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b016:	602f      	str	r7, [r5, #0]
 800b018:	2900      	cmp	r1, #0
 800b01a:	d0cb      	beq.n	800afb4 <__sflush_r+0x18>
 800b01c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b020:	4299      	cmp	r1, r3
 800b022:	d002      	beq.n	800b02a <__sflush_r+0x8e>
 800b024:	4628      	mov	r0, r5
 800b026:	f7fe fe71 	bl	8009d0c <_free_r>
 800b02a:	2000      	movs	r0, #0
 800b02c:	6360      	str	r0, [r4, #52]	; 0x34
 800b02e:	e7c2      	b.n	800afb6 <__sflush_r+0x1a>
 800b030:	6a21      	ldr	r1, [r4, #32]
 800b032:	2301      	movs	r3, #1
 800b034:	4628      	mov	r0, r5
 800b036:	47b0      	blx	r6
 800b038:	1c41      	adds	r1, r0, #1
 800b03a:	d1c7      	bne.n	800afcc <__sflush_r+0x30>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c4      	beq.n	800afcc <__sflush_r+0x30>
 800b042:	2b1d      	cmp	r3, #29
 800b044:	d001      	beq.n	800b04a <__sflush_r+0xae>
 800b046:	2b16      	cmp	r3, #22
 800b048:	d101      	bne.n	800b04e <__sflush_r+0xb2>
 800b04a:	602f      	str	r7, [r5, #0]
 800b04c:	e7b2      	b.n	800afb4 <__sflush_r+0x18>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	e7ae      	b.n	800afb6 <__sflush_r+0x1a>
 800b058:	690f      	ldr	r7, [r1, #16]
 800b05a:	2f00      	cmp	r7, #0
 800b05c:	d0aa      	beq.n	800afb4 <__sflush_r+0x18>
 800b05e:	0793      	lsls	r3, r2, #30
 800b060:	680e      	ldr	r6, [r1, #0]
 800b062:	bf08      	it	eq
 800b064:	694b      	ldreq	r3, [r1, #20]
 800b066:	600f      	str	r7, [r1, #0]
 800b068:	bf18      	it	ne
 800b06a:	2300      	movne	r3, #0
 800b06c:	1bf6      	subs	r6, r6, r7
 800b06e:	608b      	str	r3, [r1, #8]
 800b070:	2e00      	cmp	r6, #0
 800b072:	dd9f      	ble.n	800afb4 <__sflush_r+0x18>
 800b074:	6a21      	ldr	r1, [r4, #32]
 800b076:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b07a:	4633      	mov	r3, r6
 800b07c:	463a      	mov	r2, r7
 800b07e:	4628      	mov	r0, r5
 800b080:	47e0      	blx	ip
 800b082:	2800      	cmp	r0, #0
 800b084:	dc06      	bgt.n	800b094 <__sflush_r+0xf8>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08c:	81a3      	strh	r3, [r4, #12]
 800b08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b092:	e790      	b.n	800afb6 <__sflush_r+0x1a>
 800b094:	4407      	add	r7, r0
 800b096:	1a36      	subs	r6, r6, r0
 800b098:	e7ea      	b.n	800b070 <__sflush_r+0xd4>
 800b09a:	bf00      	nop
 800b09c:	20400001 	.word	0x20400001

0800b0a0 <_fflush_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	b913      	cbnz	r3, 800b0b0 <_fflush_r+0x10>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	b118      	cbz	r0, 800b0ba <_fflush_r+0x1a>
 800b0b2:	6983      	ldr	r3, [r0, #24]
 800b0b4:	b90b      	cbnz	r3, 800b0ba <_fflush_r+0x1a>
 800b0b6:	f000 f871 	bl	800b19c <__sinit>
 800b0ba:	4b14      	ldr	r3, [pc, #80]	; (800b10c <_fflush_r+0x6c>)
 800b0bc:	429c      	cmp	r4, r3
 800b0be:	d11b      	bne.n	800b0f8 <_fflush_r+0x58>
 800b0c0:	686c      	ldr	r4, [r5, #4]
 800b0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0ef      	beq.n	800b0aa <_fflush_r+0xa>
 800b0ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0cc:	07d0      	lsls	r0, r2, #31
 800b0ce:	d404      	bmi.n	800b0da <_fflush_r+0x3a>
 800b0d0:	0599      	lsls	r1, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <_fflush_r+0x3a>
 800b0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0d6:	f000 ff1a 	bl	800bf0e <__retarget_lock_acquire_recursive>
 800b0da:	4628      	mov	r0, r5
 800b0dc:	4621      	mov	r1, r4
 800b0de:	f7ff ff5d 	bl	800af9c <__sflush_r>
 800b0e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0e4:	07da      	lsls	r2, r3, #31
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	d4e0      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	059b      	lsls	r3, r3, #22
 800b0ee:	d4dd      	bmi.n	800b0ac <_fflush_r+0xc>
 800b0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f2:	f000 ff14 	bl	800bf1e <__retarget_lock_release_recursive>
 800b0f6:	e7d9      	b.n	800b0ac <_fflush_r+0xc>
 800b0f8:	4b05      	ldr	r3, [pc, #20]	; (800b110 <_fflush_r+0x70>)
 800b0fa:	429c      	cmp	r4, r3
 800b0fc:	d101      	bne.n	800b102 <_fflush_r+0x62>
 800b0fe:	68ac      	ldr	r4, [r5, #8]
 800b100:	e7df      	b.n	800b0c2 <_fflush_r+0x22>
 800b102:	4b04      	ldr	r3, [pc, #16]	; (800b114 <_fflush_r+0x74>)
 800b104:	429c      	cmp	r4, r3
 800b106:	bf08      	it	eq
 800b108:	68ec      	ldreq	r4, [r5, #12]
 800b10a:	e7da      	b.n	800b0c2 <_fflush_r+0x22>
 800b10c:	0800f254 	.word	0x0800f254
 800b110:	0800f274 	.word	0x0800f274
 800b114:	0800f234 	.word	0x0800f234

0800b118 <std>:
 800b118:	2300      	movs	r3, #0
 800b11a:	b510      	push	{r4, lr}
 800b11c:	4604      	mov	r4, r0
 800b11e:	e9c0 3300 	strd	r3, r3, [r0]
 800b122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b126:	6083      	str	r3, [r0, #8]
 800b128:	8181      	strh	r1, [r0, #12]
 800b12a:	6643      	str	r3, [r0, #100]	; 0x64
 800b12c:	81c2      	strh	r2, [r0, #14]
 800b12e:	6183      	str	r3, [r0, #24]
 800b130:	4619      	mov	r1, r3
 800b132:	2208      	movs	r2, #8
 800b134:	305c      	adds	r0, #92	; 0x5c
 800b136:	f002 f9e7 	bl	800d508 <memset>
 800b13a:	4b05      	ldr	r3, [pc, #20]	; (800b150 <std+0x38>)
 800b13c:	6263      	str	r3, [r4, #36]	; 0x24
 800b13e:	4b05      	ldr	r3, [pc, #20]	; (800b154 <std+0x3c>)
 800b140:	62a3      	str	r3, [r4, #40]	; 0x28
 800b142:	4b05      	ldr	r3, [pc, #20]	; (800b158 <std+0x40>)
 800b144:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b146:	4b05      	ldr	r3, [pc, #20]	; (800b15c <std+0x44>)
 800b148:	6224      	str	r4, [r4, #32]
 800b14a:	6323      	str	r3, [r4, #48]	; 0x30
 800b14c:	bd10      	pop	{r4, pc}
 800b14e:	bf00      	nop
 800b150:	0800db09 	.word	0x0800db09
 800b154:	0800db2b 	.word	0x0800db2b
 800b158:	0800db63 	.word	0x0800db63
 800b15c:	0800db87 	.word	0x0800db87

0800b160 <_cleanup_r>:
 800b160:	4901      	ldr	r1, [pc, #4]	; (800b168 <_cleanup_r+0x8>)
 800b162:	f002 bc63 	b.w	800da2c <_fwalk_reent>
 800b166:	bf00      	nop
 800b168:	0800b0a1 	.word	0x0800b0a1

0800b16c <__sfp_lock_acquire>:
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <__sfp_lock_acquire+0x8>)
 800b16e:	f000 bece 	b.w	800bf0e <__retarget_lock_acquire_recursive>
 800b172:	bf00      	nop
 800b174:	200003a4 	.word	0x200003a4

0800b178 <__sfp_lock_release>:
 800b178:	4801      	ldr	r0, [pc, #4]	; (800b180 <__sfp_lock_release+0x8>)
 800b17a:	f000 bed0 	b.w	800bf1e <__retarget_lock_release_recursive>
 800b17e:	bf00      	nop
 800b180:	200003a4 	.word	0x200003a4

0800b184 <__sinit_lock_acquire>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sinit_lock_acquire+0x8>)
 800b186:	f000 bec2 	b.w	800bf0e <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	200003b8 	.word	0x200003b8

0800b190 <__sinit_lock_release>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__sinit_lock_release+0x8>)
 800b192:	f000 bec4 	b.w	800bf1e <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	200003b8 	.word	0x200003b8

0800b19c <__sinit>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	f7ff fff0 	bl	800b184 <__sinit_lock_acquire>
 800b1a4:	69a3      	ldr	r3, [r4, #24]
 800b1a6:	b11b      	cbz	r3, 800b1b0 <__sinit+0x14>
 800b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ac:	f7ff bff0 	b.w	800b190 <__sinit_lock_release>
 800b1b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1b6:	4b13      	ldr	r3, [pc, #76]	; (800b204 <__sinit+0x68>)
 800b1b8:	4a13      	ldr	r2, [pc, #76]	; (800b208 <__sinit+0x6c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1be:	42a3      	cmp	r3, r4
 800b1c0:	bf04      	itt	eq
 800b1c2:	2301      	moveq	r3, #1
 800b1c4:	61a3      	streq	r3, [r4, #24]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f820 	bl	800b20c <__sfp>
 800b1cc:	6060      	str	r0, [r4, #4]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f000 f81c 	bl	800b20c <__sfp>
 800b1d4:	60a0      	str	r0, [r4, #8]
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 f818 	bl	800b20c <__sfp>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	60e0      	str	r0, [r4, #12]
 800b1e0:	2104      	movs	r1, #4
 800b1e2:	6860      	ldr	r0, [r4, #4]
 800b1e4:	f7ff ff98 	bl	800b118 <std>
 800b1e8:	68a0      	ldr	r0, [r4, #8]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	2109      	movs	r1, #9
 800b1ee:	f7ff ff93 	bl	800b118 <std>
 800b1f2:	68e0      	ldr	r0, [r4, #12]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	2112      	movs	r1, #18
 800b1f8:	f7ff ff8e 	bl	800b118 <std>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	61a3      	str	r3, [r4, #24]
 800b200:	e7d2      	b.n	800b1a8 <__sinit+0xc>
 800b202:	bf00      	nop
 800b204:	0800f224 	.word	0x0800f224
 800b208:	0800b161 	.word	0x0800b161

0800b20c <__sfp>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	4607      	mov	r7, r0
 800b210:	f7ff ffac 	bl	800b16c <__sfp_lock_acquire>
 800b214:	4b1e      	ldr	r3, [pc, #120]	; (800b290 <__sfp+0x84>)
 800b216:	681e      	ldr	r6, [r3, #0]
 800b218:	69b3      	ldr	r3, [r6, #24]
 800b21a:	b913      	cbnz	r3, 800b222 <__sfp+0x16>
 800b21c:	4630      	mov	r0, r6
 800b21e:	f7ff ffbd 	bl	800b19c <__sinit>
 800b222:	3648      	adds	r6, #72	; 0x48
 800b224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b228:	3b01      	subs	r3, #1
 800b22a:	d503      	bpl.n	800b234 <__sfp+0x28>
 800b22c:	6833      	ldr	r3, [r6, #0]
 800b22e:	b30b      	cbz	r3, 800b274 <__sfp+0x68>
 800b230:	6836      	ldr	r6, [r6, #0]
 800b232:	e7f7      	b.n	800b224 <__sfp+0x18>
 800b234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b238:	b9d5      	cbnz	r5, 800b270 <__sfp+0x64>
 800b23a:	4b16      	ldr	r3, [pc, #88]	; (800b294 <__sfp+0x88>)
 800b23c:	60e3      	str	r3, [r4, #12]
 800b23e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b242:	6665      	str	r5, [r4, #100]	; 0x64
 800b244:	f000 fe5a 	bl	800befc <__retarget_lock_init_recursive>
 800b248:	f7ff ff96 	bl	800b178 <__sfp_lock_release>
 800b24c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b254:	6025      	str	r5, [r4, #0]
 800b256:	61a5      	str	r5, [r4, #24]
 800b258:	2208      	movs	r2, #8
 800b25a:	4629      	mov	r1, r5
 800b25c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b260:	f002 f952 	bl	800d508 <memset>
 800b264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b26c:	4620      	mov	r0, r4
 800b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b270:	3468      	adds	r4, #104	; 0x68
 800b272:	e7d9      	b.n	800b228 <__sfp+0x1c>
 800b274:	2104      	movs	r1, #4
 800b276:	4638      	mov	r0, r7
 800b278:	f002 fbc2 	bl	800da00 <__sfmoreglue>
 800b27c:	4604      	mov	r4, r0
 800b27e:	6030      	str	r0, [r6, #0]
 800b280:	2800      	cmp	r0, #0
 800b282:	d1d5      	bne.n	800b230 <__sfp+0x24>
 800b284:	f7ff ff78 	bl	800b178 <__sfp_lock_release>
 800b288:	230c      	movs	r3, #12
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	e7ee      	b.n	800b26c <__sfp+0x60>
 800b28e:	bf00      	nop
 800b290:	0800f224 	.word	0x0800f224
 800b294:	ffff0001 	.word	0xffff0001

0800b298 <__smakebuf_r>:
 800b298:	898b      	ldrh	r3, [r1, #12]
 800b29a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b29c:	079d      	lsls	r5, r3, #30
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	d507      	bpl.n	800b2b4 <__smakebuf_r+0x1c>
 800b2a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	6123      	str	r3, [r4, #16]
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	6163      	str	r3, [r4, #20]
 800b2b0:	b002      	add	sp, #8
 800b2b2:	bd70      	pop	{r4, r5, r6, pc}
 800b2b4:	ab01      	add	r3, sp, #4
 800b2b6:	466a      	mov	r2, sp
 800b2b8:	f002 fbd7 	bl	800da6a <__swhatbuf_r>
 800b2bc:	9900      	ldr	r1, [sp, #0]
 800b2be:	4605      	mov	r5, r0
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7fe fd6d 	bl	8009da0 <_malloc_r>
 800b2c6:	b948      	cbnz	r0, 800b2dc <__smakebuf_r+0x44>
 800b2c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2cc:	059a      	lsls	r2, r3, #22
 800b2ce:	d4ef      	bmi.n	800b2b0 <__smakebuf_r+0x18>
 800b2d0:	f023 0303 	bic.w	r3, r3, #3
 800b2d4:	f043 0302 	orr.w	r3, r3, #2
 800b2d8:	81a3      	strh	r3, [r4, #12]
 800b2da:	e7e3      	b.n	800b2a4 <__smakebuf_r+0xc>
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <__smakebuf_r+0x7c>)
 800b2de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	6020      	str	r0, [r4, #0]
 800b2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e8:	81a3      	strh	r3, [r4, #12]
 800b2ea:	9b00      	ldr	r3, [sp, #0]
 800b2ec:	6163      	str	r3, [r4, #20]
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	6120      	str	r0, [r4, #16]
 800b2f2:	b15b      	cbz	r3, 800b30c <__smakebuf_r+0x74>
 800b2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f000 f85b 	bl	800b3b4 <_isatty_r>
 800b2fe:	b128      	cbz	r0, 800b30c <__smakebuf_r+0x74>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	81a3      	strh	r3, [r4, #12]
 800b30c:	89a0      	ldrh	r0, [r4, #12]
 800b30e:	4305      	orrs	r5, r0
 800b310:	81a5      	strh	r5, [r4, #12]
 800b312:	e7cd      	b.n	800b2b0 <__smakebuf_r+0x18>
 800b314:	0800b161 	.word	0x0800b161

0800b318 <raise>:
 800b318:	4b02      	ldr	r3, [pc, #8]	; (800b324 <raise+0xc>)
 800b31a:	4601      	mov	r1, r0
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	f002 bbc9 	b.w	800dab4 <_raise_r>
 800b322:	bf00      	nop
 800b324:	200000c4 	.word	0x200000c4

0800b328 <_kill_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d07      	ldr	r5, [pc, #28]	; (800b348 <_kill_r+0x20>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f000 fdd8 	bl	800beea <_kill>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d102      	bne.n	800b344 <_kill_r+0x1c>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	b103      	cbz	r3, 800b344 <_kill_r+0x1c>
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	20000ecc 	.word	0x20000ecc

0800b34c <_write_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d07      	ldr	r5, [pc, #28]	; (800b36c <_write_r+0x20>)
 800b350:	4604      	mov	r4, r0
 800b352:	4608      	mov	r0, r1
 800b354:	4611      	mov	r1, r2
 800b356:	2200      	movs	r2, #0
 800b358:	602a      	str	r2, [r5, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	f000 fdb5 	bl	800beca <_write>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_write_r+0x1e>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_write_r+0x1e>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20000ecc 	.word	0x20000ecc

0800b370 <_close_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4d06      	ldr	r5, [pc, #24]	; (800b38c <_close_r+0x1c>)
 800b374:	2300      	movs	r3, #0
 800b376:	4604      	mov	r4, r0
 800b378:	4608      	mov	r0, r1
 800b37a:	602b      	str	r3, [r5, #0]
 800b37c:	f000 fdab 	bl	800bed6 <_close>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_close_r+0x1a>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_close_r+0x1a>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20000ecc 	.word	0x20000ecc

0800b390 <_fstat_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_fstat_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f000 fda8 	bl	800bef2 <_fstat>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_fstat_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_fstat_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	20000ecc 	.word	0x20000ecc

0800b3b4 <_isatty_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_isatty_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f000 fd8e 	bl	800bee0 <_isatty>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_isatty_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_isatty_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20000ecc 	.word	0x20000ecc

0800b3d4 <_lseek_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d07      	ldr	r5, [pc, #28]	; (800b3f4 <_lseek_r+0x20>)
 800b3d8:	4604      	mov	r4, r0
 800b3da:	4608      	mov	r0, r1
 800b3dc:	4611      	mov	r1, r2
 800b3de:	2200      	movs	r2, #0
 800b3e0:	602a      	str	r2, [r5, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f000 fd7a 	bl	800bedc <_lseek>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_lseek_r+0x1e>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_lseek_r+0x1e>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20000ecc 	.word	0x20000ecc

0800b3f8 <_read_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_read_r+0x20>)
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	4611      	mov	r1, r2
 800b402:	2200      	movs	r2, #0
 800b404:	602a      	str	r2, [r5, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f000 fd59 	bl	800bebe <_read>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_read_r+0x1e>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	b103      	cbz	r3, 800b416 <_read_r+0x1e>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	20000ecc 	.word	0x20000ecc

0800b41c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 800b41c:	4770      	bx	lr

0800b41e <fill_msg_bit_field>:
static void fill_msg_bit_field(uint32_t* msg_ptr, uint8_t field_val, uint8_t field_len, uint8_t* pos) {
 800b41e:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800b420:	781d      	ldrb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b422:	e017      	b.n	800b454 <fill_msg_bit_field+0x36>
        *msg_ptr &= ( ~BIT(*pos) ); // clear bit
 800b424:	f04f 0c01 	mov.w	ip, #1
 800b428:	fa0c fe04 	lsl.w	lr, ip, r4
 800b42c:	6804      	ldr	r4, [r0, #0]
 800b42e:	ea24 040e 	bic.w	r4, r4, lr
 800b432:	6004      	str	r4, [r0, #0]
        *msg_ptr |= ( field_val & BIT((*pos) - start_pos) ) << start_pos;
 800b434:	f893 e000 	ldrb.w	lr, [r3]
 800b438:	ebae 0e05 	sub.w	lr, lr, r5
 800b43c:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b440:	ea01 0c0c 	and.w	ip, r1, ip
 800b444:	fa0c fc05 	lsl.w	ip, ip, r5
 800b448:	ea44 040c 	orr.w	r4, r4, ip
 800b44c:	6004      	str	r4, [r0, #0]
        (*pos)++;
 800b44e:	781c      	ldrb	r4, [r3, #0]
 800b450:	3401      	adds	r4, #1
 800b452:	701c      	strb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b454:	781c      	ldrb	r4, [r3, #0]
 800b456:	eb02 0c05 	add.w	ip, r2, r5
 800b45a:	4564      	cmp	r4, ip
 800b45c:	dbe2      	blt.n	800b424 <fill_msg_bit_field+0x6>
}
 800b45e:	bd30      	pop	{r4, r5, pc}

0800b460 <extract_msg_bit_field>:
static void extract_msg_bit_field(const uint32_t* msg_ptr, uint8_t* field_val, uint8_t field_len, uint8_t* pos) {
 800b460:	b530      	push	{r4, r5, lr}
    uint8_t start_pos = *pos;
 800b462:	781c      	ldrb	r4, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b464:	e01a      	b.n	800b49c <extract_msg_bit_field+0x3c>
        *field_val &= ( ~BIT((*pos) - start_pos) ); // clear bit
 800b466:	ebac 0c04 	sub.w	ip, ip, r4
 800b46a:	2501      	movs	r5, #1
 800b46c:	fa05 fc0c 	lsl.w	ip, r5, ip
 800b470:	f891 e000 	ldrb.w	lr, [r1]
 800b474:	ea2e 0c0c 	bic.w	ip, lr, ip
 800b478:	f881 c000 	strb.w	ip, [r1]
        (*field_val) |= ( (*msg_ptr) & BIT((*pos) ) ) >> start_pos;
 800b47c:	f893 e000 	ldrb.w	lr, [r3]
 800b480:	fa05 fe0e 	lsl.w	lr, r5, lr
 800b484:	6805      	ldr	r5, [r0, #0]
 800b486:	ea05 0e0e 	and.w	lr, r5, lr
 800b48a:	fa2e fe04 	lsr.w	lr, lr, r4
 800b48e:	ea4c 0c0e 	orr.w	ip, ip, lr
 800b492:	f881 c000 	strb.w	ip, [r1]
        (*pos)++;
 800b496:	781d      	ldrb	r5, [r3, #0]
 800b498:	3501      	adds	r5, #1
 800b49a:	701d      	strb	r5, [r3, #0]
    while ( *pos < start_pos + field_len ) {
 800b49c:	f893 c000 	ldrb.w	ip, [r3]
 800b4a0:	1915      	adds	r5, r2, r4
 800b4a2:	45ac      	cmp	ip, r5
 800b4a4:	dbdf      	blt.n	800b466 <extract_msg_bit_field+0x6>
}
 800b4a6:	bd30      	pop	{r4, r5, pc}

0800b4a8 <reverse>:
static uint8_t reverse(uint8_t input) {
 800b4a8:	2300      	movs	r3, #0
    uint8_t pos = 0;
 800b4aa:	461a      	mov	r2, r3
    while( pos < 7 ) {
 800b4ac:	e007      	b.n	800b4be <reverse+0x16>
        bit = input & BIT(0);
 800b4ae:	f000 0101 	and.w	r1, r0, #1
        output |= bit;
 800b4b2:	430b      	orrs	r3, r1
        output = output << 1;
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	b2db      	uxtb	r3, r3
        input = input >> 1;
 800b4b8:	0840      	lsrs	r0, r0, #1
        pos++;
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	b2d2      	uxtb	r2, r2
    while( pos < 7 ) {
 800b4be:	2a06      	cmp	r2, #6
 800b4c0:	d9f5      	bls.n	800b4ae <reverse+0x6>
    bit = input & BIT(0);
 800b4c2:	f000 0001 	and.w	r0, r0, #1
}
 800b4c6:	4318      	orrs	r0, r3
 800b4c8:	4770      	bx	lr

0800b4ca <arch_printk_char_out>:
}
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	4770      	bx	lr

0800b4ce <str_out>:
{
 800b4ce:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 800b4d0:	680c      	ldr	r4, [r1, #0]
 800b4d2:	b154      	cbz	r4, 800b4ea <str_out+0x1c>
 800b4d4:	688a      	ldr	r2, [r1, #8]
 800b4d6:	684b      	ldr	r3, [r1, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	da06      	bge.n	800b4ea <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d008      	beq.n	800b4f4 <str_out+0x26>
		ctx->str[ctx->count++] = c;
 800b4e2:	1c53      	adds	r3, r2, #1
 800b4e4:	608b      	str	r3, [r1, #8]
 800b4e6:	54a0      	strb	r0, [r4, r2]
 800b4e8:	e002      	b.n	800b4f0 <str_out+0x22>
		ctx->count++;
 800b4ea:	688b      	ldr	r3, [r1, #8]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	608b      	str	r3, [r1, #8]
}
 800b4f0:	bc10      	pop	{r4}
 800b4f2:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 800b4f4:	1c53      	adds	r3, r2, #1
 800b4f6:	608b      	str	r3, [r1, #8]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	54a3      	strb	r3, [r4, r2]
 800b4fc:	e7f8      	b.n	800b4f0 <str_out+0x22>

0800b4fe <printk>:
{
 800b4fe:	b40f      	push	{r0, r1, r2, r3}
 800b500:	b500      	push	{lr}
 800b502:	b083      	sub	sp, #12
 800b504:	a904      	add	r1, sp, #16
 800b506:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800b50a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800b50c:	f7f6 ffcc 	bl	80024a8 <vprintk>
}
 800b510:	b003      	add	sp, #12
 800b512:	f85d eb04 	ldr.w	lr, [sp], #4
 800b516:	b004      	add	sp, #16
 800b518:	4770      	bx	lr

0800b51a <snprintk>:
{
 800b51a:	b40c      	push	{r2, r3}
 800b51c:	b500      	push	{lr}
 800b51e:	b083      	sub	sp, #12
 800b520:	ab04      	add	r3, sp, #16
 800b522:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 800b526:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 800b528:	f7f6 ffce 	bl	80024c8 <vsnprintk>
}
 800b52c:	b003      	add	sp, #12
 800b52e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b532:	b002      	add	sp, #8
 800b534:	4770      	bx	lr

0800b536 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800b536:	b508      	push	{r3, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	4608      	mov	r0, r1
 800b53c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 800b53e:	461a      	mov	r2, r3
 800b540:	47a0      	blx	r4
	return z_impl_z_current_get();
 800b542:	f7fd fe61 	bl	8009208 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 800b546:	f7f9 f901 	bl	800474c <z_impl_k_thread_abort>

0800b54a <free_list_add_bidx>:

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 800b54a:	1d13      	adds	r3, r2, #4
 800b54c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b550:	b9d3      	cbnz	r3, 800b588 <free_list_add_bidx+0x3e>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
 800b552:	2301      	movs	r3, #1
 800b554:	fa03 fc02 	lsl.w	ip, r3, r2
 800b558:	68c3      	ldr	r3, [r0, #12]
 800b55a:	ea43 030c 	orr.w	r3, r3, ip
 800b55e:	60c3      	str	r3, [r0, #12]
		b->next = c;
 800b560:	3204      	adds	r2, #4
 800b562:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 800b566:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b56a:	6882      	ldr	r2, [r0, #8]

	if (big_heap(h)) {
 800b56c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b570:	d306      	bcc.n	800b580 <free_list_add_bidx+0x36>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 800b572:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
 800b574:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800b576:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b57a:	d303      	bcc.n	800b584 <free_list_add_bidx+0x3a>
		((uint32_t *)cmem)[f] = val;
 800b57c:	60d9      	str	r1, [r3, #12]
 800b57e:	4770      	bx	lr
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 800b580:	8099      	strh	r1, [r3, #4]
 800b582:	e7f7      	b.n	800b574 <free_list_add_bidx+0x2a>
 800b584:	80d9      	strh	r1, [r3, #6]
 800b586:	4770      	bx	lr
{
 800b588:	b510      	push	{r4, lr}
	void *cmem = &buf[c];
 800b58a:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b58e:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b590:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b594:	d31c      	bcc.n	800b5d0 <free_list_add_bidx+0x86>
		return ((uint32_t *)cmem)[f];
 800b596:	f8dc 2008 	ldr.w	r2, [ip, #8]
	void *cmem = &buf[c];
 800b59a:	eb00 0ec1 	add.w	lr, r0, r1, lsl #3
	if (big_heap(h)) {
 800b59e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b5a2:	d318      	bcc.n	800b5d6 <free_list_add_bidx+0x8c>
		((uint32_t *)cmem)[f] = val;
 800b5a4:	f8ce 2008 	str.w	r2, [lr, #8]
	return big_heap_chunks(h->end_chunk);
 800b5a8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b5aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b5ae:	d315      	bcc.n	800b5dc <free_list_add_bidx+0x92>
		((uint32_t *)cmem)[f] = val;
 800b5b0:	f8ce 300c 	str.w	r3, [lr, #12]
	void *cmem = &buf[c];
 800b5b4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b5b8:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800b5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5be:	d310      	bcc.n	800b5e2 <free_list_add_bidx+0x98>
		((uint32_t *)cmem)[f] = val;
 800b5c0:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
 800b5c2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
 800b5c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c8:	d30d      	bcc.n	800b5e6 <free_list_add_bidx+0x9c>
		((uint32_t *)cmem)[f] = val;
 800b5ca:	f8cc 1008 	str.w	r1, [ip, #8]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
 800b5ce:	bd10      	pop	{r4, pc}
		return ((uint16_t *)cmem)[f];
 800b5d0:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800b5d4:	e7e1      	b.n	800b59a <free_list_add_bidx+0x50>
		((uint16_t *)cmem)[f] = val;
 800b5d6:	f8ae 2004 	strh.w	r2, [lr, #4]
 800b5da:	e7e5      	b.n	800b5a8 <free_list_add_bidx+0x5e>
 800b5dc:	f8ae 3006 	strh.w	r3, [lr, #6]
 800b5e0:	e7e8      	b.n	800b5b4 <free_list_add_bidx+0x6a>
 800b5e2:	80d1      	strh	r1, [r2, #6]
 800b5e4:	e7ed      	b.n	800b5c2 <free_list_add_bidx+0x78>
 800b5e6:	f8ac 1004 	strh.w	r1, [ip, #4]
 800b5ea:	e7f0      	b.n	800b5ce <free_list_add_bidx+0x84>

0800b5ec <free_list_add>:

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800b5ec:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
 800b5ee:	6883      	ldr	r3, [r0, #8]
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
 800b5f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f4:	d307      	bcc.n	800b606 <free_list_add+0x1a>
	void *cmem = &buf[c];
 800b5f6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
 800b5fa:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800b5fc:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
 800b5fe:	2a01      	cmp	r2, #1
 800b600:	d002      	beq.n	800b608 <free_list_add+0x1c>
 800b602:	2200      	movs	r2, #0
 800b604:	e000      	b.n	800b608 <free_list_add+0x1c>
 800b606:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
 800b608:	b9a2      	cbnz	r2, 800b634 <free_list_add+0x48>
	void *cmem = &buf[c];
 800b60a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
 800b60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b612:	d310      	bcc.n	800b636 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
 800b614:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 800b616:	0852      	lsrs	r2, r2, #1
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 800b618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b61c:	d30d      	bcc.n	800b63a <free_list_add+0x4e>
 800b61e:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b620:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800b622:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
 800b626:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
 800b628:	fab2 f282 	clz	r2, r2
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
 800b62c:	f1c2 021f 	rsb	r2, r2, #31
 800b630:	f7ff ff8b 	bl	800b54a <free_list_add_bidx>
	}
}
 800b634:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
 800b636:	8852      	ldrh	r2, [r2, #2]
 800b638:	e7ed      	b.n	800b616 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
 800b63a:	2304      	movs	r3, #4
 800b63c:	e7f0      	b.n	800b620 <free_list_add+0x34>

0800b63e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800b63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b640:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
 800b642:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800b646:	d324      	bcc.n	800b692 <sys_heap_init+0x54>
 800b648:	f04f 0c08 	mov.w	ip, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 800b64c:	eba2 0c0c 	sub.w	ip, r2, ip

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 800b650:	1dc8      	adds	r0, r1, #7
 800b652:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800b656:	448c      	add	ip, r1
 800b658:	f02c 0c07 	bic.w	ip, ip, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 800b65c:	ebac 0c00 	sub.w	ip, ip, r0
 800b660:	ea4f 05dc 	mov.w	r5, ip, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
 800b664:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 800b666:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
 800b66c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b670:	d312      	bcc.n	800b698 <sys_heap_init+0x5a>
 800b672:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b674:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
 800b676:	eba5 03d3 	sub.w	r3, r5, r3, lsr #3
 800b67a:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
 800b67c:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 800b680:	f1c3 0e20 	rsb	lr, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800b684:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800b688:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800b68a:	1dde      	adds	r6, r3, #7
 800b68c:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 800b68e:	2300      	movs	r3, #0
 800b690:	e009      	b.n	800b6a6 <sys_heap_init+0x68>
	return big_heap_bytes(size) ? 8 : 4;
 800b692:	f04f 0c04 	mov.w	ip, #4
 800b696:	e7d9      	b.n	800b64c <sys_heap_init+0xe>
	return big_heap(h) ? 8 : 4;
 800b698:	2304      	movs	r3, #4
 800b69a:	e7eb      	b.n	800b674 <sys_heap_init+0x36>
		h->buckets[i].next = 0;
 800b69c:	1d1a      	adds	r2, r3, #4
 800b69e:	2400      	movs	r4, #0
 800b6a0:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	4573      	cmp	r3, lr
 800b6a8:	dbf8      	blt.n	800b69c <sys_heap_init+0x5e>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b6aa:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
 800b6ac:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b6b0:	d336      	bcc.n	800b720 <sys_heap_init+0xe2>
		((uint32_t *)cmem)[f] = val;
 800b6b2:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
 800b6b4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b6b8:	d334      	bcc.n	800b724 <sys_heap_init+0xe6>
		((uint32_t *)cmem)[f] = val;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
 800b6be:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b6c2:	d332      	bcc.n	800b72a <sys_heap_init+0xec>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b6c4:	6843      	ldr	r3, [r0, #4]
 800b6c6:	f043 0301 	orr.w	r3, r3, #1
 800b6ca:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 800b6cc:	1a6a      	subs	r2, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800b6ce:	0057      	lsls	r7, r2, #1
	void *cmem = &buf[c];
 800b6d0:	f026 0307 	bic.w	r3, r6, #7
 800b6d4:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
 800b6d6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800b6da:	d32b      	bcc.n	800b734 <sys_heap_init+0xf6>
		((uint32_t *)cmem)[f] = val;
 800b6dc:	6067      	str	r7, [r4, #4]
	return big_heap_chunks(h->end_chunk);
 800b6de:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b6e0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b6e4:	d328      	bcc.n	800b738 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
 800b6e6:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
 800b6e8:	f02c 0307 	bic.w	r3, ip, #7
 800b6ec:	4484      	add	ip, r0
	return big_heap_chunks(h->end_chunk);
 800b6ee:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b6f0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b6f4:	d322      	bcc.n	800b73c <sys_heap_init+0xfe>
		((uint32_t *)cmem)[f] = val;
 800b6f6:	2400      	movs	r4, #0
 800b6f8:	f8cc 4004 	str.w	r4, [ip, #4]
	return big_heap_chunks(h->end_chunk);
 800b6fc:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
 800b6fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800b702:	d31f      	bcc.n	800b744 <sys_heap_init+0x106>
		((uint32_t *)cmem)[f] = val;
 800b704:	50c2      	str	r2, [r0, r3]
	void *cmem = &buf[c];
 800b706:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
	return big_heap_chunks(h->end_chunk);
 800b70a:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
 800b70c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b710:	d31a      	bcc.n	800b748 <sys_heap_init+0x10a>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	f042 0201 	orr.w	r2, r2, #1
 800b718:	605a      	str	r2, [r3, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 800b71a:	f7ff ff67 	bl	800b5ec <free_list_add>
}
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
 800b720:	8043      	strh	r3, [r0, #2]
 800b722:	e7c7      	b.n	800b6b4 <sys_heap_init+0x76>
 800b724:	2300      	movs	r3, #0
 800b726:	8003      	strh	r3, [r0, #0]
 800b728:	e7c9      	b.n	800b6be <sys_heap_init+0x80>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b72a:	8843      	ldrh	r3, [r0, #2]
 800b72c:	f043 0301 	orr.w	r3, r3, #1
 800b730:	8043      	strh	r3, [r0, #2]
 800b732:	e7cb      	b.n	800b6cc <sys_heap_init+0x8e>
		((uint16_t *)cmem)[f] = val;
 800b734:	8067      	strh	r7, [r4, #2]
 800b736:	e7d2      	b.n	800b6de <sys_heap_init+0xa0>
 800b738:	52c1      	strh	r1, [r0, r3]
 800b73a:	e7d5      	b.n	800b6e8 <sys_heap_init+0xaa>
 800b73c:	2400      	movs	r4, #0
 800b73e:	f8ac 4002 	strh.w	r4, [ip, #2]
 800b742:	e7db      	b.n	800b6fc <sys_heap_init+0xbe>
 800b744:	52c2      	strh	r2, [r0, r3]
 800b746:	e7de      	b.n	800b706 <sys_heap_init+0xc8>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800b748:	885a      	ldrh	r2, [r3, #2]
 800b74a:	f042 0201 	orr.w	r2, r2, #1
 800b74e:	805a      	strh	r2, [r3, #2]
 800b750:	e7e3      	b.n	800b71a <sys_heap_init+0xdc>

0800b752 <outs>:
{
 800b752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b756:	4607      	mov	r7, r0
 800b758:	460e      	mov	r6, r1
 800b75a:	4614      	mov	r4, r2
 800b75c:	4698      	mov	r8, r3
	size_t count = 0;
 800b75e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b760:	e006      	b.n	800b770 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 800b762:	4631      	mov	r1, r6
 800b764:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b768:	47b8      	blx	r7
		if (rc < 0) {
 800b76a:	2800      	cmp	r0, #0
 800b76c:	db09      	blt.n	800b782 <outs+0x30>
		++count;
 800b76e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800b770:	4544      	cmp	r4, r8
 800b772:	d3f6      	bcc.n	800b762 <outs+0x10>
 800b774:	f1b8 0f00 	cmp.w	r8, #0
 800b778:	d102      	bne.n	800b780 <outs+0x2e>
 800b77a:	7823      	ldrb	r3, [r4, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1f0      	bne.n	800b762 <outs+0x10>
	return (int)count;
 800b780:	4628      	mov	r0, r5
}
 800b782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b786 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800b786:	4770      	bx	lr

0800b788 <st_stm32_common_config>:
#endif /* CONFIG_SOC_SERIES_STM32H7X || CONFIG_SOC_SERIES_STM32MP1X */

#endif /* CONFIG_USE_SEGGER_RTT */

	return 0;
}
 800b788:	2000      	movs	r0, #0
 800b78a:	4770      	bx	lr

0800b78c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
 800b78c:	2300      	movs	r3, #0
 800b78e:	6043      	str	r3, [r0, #4]
	list->head = NULL;
 800b790:	6003      	str	r3, [r0, #0]
}
 800b792:	4770      	bx	lr

0800b794 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
 800b794:	6803      	ldr	r3, [r0, #0]
 800b796:	b12b      	cbz	r3, 800b7a4 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
 800b798:	6843      	ldr	r3, [r0, #4]
 800b79a:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
 800b79c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	600b      	str	r3, [r1, #0]
}
 800b7a2:	4770      	bx	lr
		list->head = msg;
 800b7a4:	6001      	str	r1, [r0, #0]
 800b7a6:	e7f9      	b.n	800b79c <log_list_add_tail+0x8>

0800b7a8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
 800b7a8:	6800      	ldr	r0, [r0, #0]
 800b7aa:	4770      	bx	lr

0800b7ac <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
 800b7ac:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
 800b7ae:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
 800b7b0:	b108      	cbz	r0, 800b7b6 <log_list_head_get+0xa>
		list->head = list->head->next;
 800b7b2:	6802      	ldr	r2, [r0, #0]
 800b7b4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
 800b7b6:	4770      	bx	lr

0800b7b8 <dummy_timestamp>:
}
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	4770      	bx	lr

0800b7bc <msg_filter_check>:
}
 800b7bc:	2001      	movs	r0, #1
 800b7be:	4770      	bx	lr

0800b7c0 <default_lf_get_timestamp>:
{
 800b7c0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800b7c2:	f001 fde0 	bl	800d386 <z_impl_k_uptime_ticks>
 800b7c6:	220a      	movs	r2, #10
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f7f5 f907 	bl	80009dc <__aeabi_uldivmod>
}
 800b7ce:	bd08      	pop	{r3, pc}

0800b7d0 <block_on_alloc>:
}
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	4770      	bx	lr

0800b7d4 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
 800b7d4:	2901      	cmp	r1, #1
 800b7d6:	d902      	bls.n	800b7de <cont_arg_get+0xa>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
 800b7d8:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
 800b7da:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
 800b7dc:	e006      	b.n	800b7ec <cont_arg_get+0x18>
		return msg->payload.ext.data.args[arg_idx];
 800b7de:	3104      	adds	r1, #4
 800b7e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7e4:	6888      	ldr	r0, [r1, #8]
 800b7e6:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
 800b7e8:	3907      	subs	r1, #7
		cont = cont->next;
 800b7ea:	681b      	ldr	r3, [r3, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
 800b7ec:	2906      	cmp	r1, #6
 800b7ee:	d8fb      	bhi.n	800b7e8 <cont_arg_get+0x14>
	}

	return cont->payload.args[arg_idx];
 800b7f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b7f4:	6848      	ldr	r0, [r1, #4]
}
 800b7f6:	4770      	bx	lr

0800b7f8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
 800b7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7fc:	461c      	mov	r4, r3
 800b7fe:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
 800b802:	8903      	ldrh	r3, [r0, #8]
 800b804:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d91f      	bls.n	800b84c <log_msg_hexdump_data_op+0x54>
 800b80c:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
 800b80e:	6811      	ldr	r1, [r2, #0]
 800b810:	4421      	add	r1, r4
 800b812:	4299      	cmp	r1, r3
 800b814:	d901      	bls.n	800b81a <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
 800b816:	1b19      	subs	r1, r3, r4
 800b818:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
 800b81a:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
 800b81c:	2b0c      	cmp	r3, #12
 800b81e:	d919      	bls.n	800b854 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
 800b820:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
 800b824:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
 800b826:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
 800b828:	42a3      	cmp	r3, r4
 800b82a:	d91e      	bls.n	800b86a <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b82c:	42bb      	cmp	r3, r7
 800b82e:	bf28      	it	cs
 800b830:	463b      	movcs	r3, r7
 800b832:	461d      	mov	r5, r3

		if (put_op) {
 800b834:	f1b9 0f00 	cmp.w	r9, #0
 800b838:	d010      	beq.n	800b85c <log_msg_hexdump_data_op+0x64>
 800b83a:	461a      	mov	r2, r3
 800b83c:	4641      	mov	r1, r8
 800b83e:	eb0c 0004 	add.w	r0, ip, r4
 800b842:	f001 fe53 	bl	800d4ec <memcpy>
			(void)memcpy(&head_data[offset], data, cpy_len);
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
 800b846:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b848:	44a8      	add	r8, r5
 800b84a:	e021      	b.n	800b890 <log_msg_hexdump_data_op+0x98>
		*length = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
 800b850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
 800b854:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
 800b858:	2600      	movs	r6, #0
 800b85a:	e7e5      	b.n	800b828 <log_msg_hexdump_data_op+0x30>
 800b85c:	461a      	mov	r2, r3
 800b85e:	eb0c 0104 	add.w	r1, ip, r4
 800b862:	4640      	mov	r0, r8
 800b864:	f001 fe42 	bl	800d4ec <memcpy>
 800b868:	e7ed      	b.n	800b846 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
 800b86a:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
 800b86c:	b91e      	cbnz	r6, 800b876 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
 800b86e:	6946      	ldr	r6, [r0, #20]
 800b870:	e001      	b.n	800b876 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
 800b872:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
 800b874:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
 800b876:	2c1b      	cmp	r4, #27
 800b878:	d8fb      	bhi.n	800b872 <log_msg_hexdump_data_op+0x7a>
 800b87a:	e009      	b.n	800b890 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
 800b87c:	1931      	adds	r1, r6, r4
 800b87e:	462a      	mov	r2, r5
 800b880:	3104      	adds	r1, #4
 800b882:	4640      	mov	r0, r8
 800b884:	f001 fe32 	bl	800d4ec <memcpy>
		cont = cont->next;
 800b888:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
 800b88a:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
 800b88c:	44a8      	add	r8, r5
		offset = 0;
 800b88e:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
 800b890:	2f00      	cmp	r7, #0
 800b892:	d0dd      	beq.n	800b850 <log_msg_hexdump_data_op+0x58>
 800b894:	2e00      	cmp	r6, #0
 800b896:	d0db      	beq.n	800b850 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
 800b898:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
 800b89c:	42bd      	cmp	r5, r7
 800b89e:	bf28      	it	cs
 800b8a0:	463d      	movcs	r5, r7
		if (put_op) {
 800b8a2:	f1b9 0f00 	cmp.w	r9, #0
 800b8a6:	d0e9      	beq.n	800b87c <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
 800b8a8:	1930      	adds	r0, r6, r4
 800b8aa:	462a      	mov	r2, r5
 800b8ac:	4641      	mov	r1, r8
 800b8ae:	3004      	adds	r0, #4
 800b8b0:	f001 fe1c 	bl	800d4ec <memcpy>
 800b8b4:	e7e8      	b.n	800b888 <log_msg_hexdump_data_op+0x90>

0800b8b6 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
 800b8b6:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800b8b8:	f3bf 8f5b 	dmb	ish
 800b8bc:	e850 3f00 	ldrex	r3, [r0]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	e840 3200 	strex	r2, r3, [r0]
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	d1f8      	bne.n	800b8bc <log_msg_get+0x6>
 800b8ca:	f3bf 8f5b 	dmb	ish
}
 800b8ce:	4770      	bx	lr

0800b8d0 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
 800b8d0:	7a40      	ldrb	r0, [r0, #9]
}
 800b8d2:	0900      	lsrs	r0, r0, #4
 800b8d4:	4770      	bx	lr

0800b8d6 <log_msg_arg_get>:
{
 800b8d6:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
 800b8d8:	7a43      	ldrb	r3, [r0, #9]
 800b8da:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
 800b8de:	d20a      	bcs.n	800b8f6 <log_msg_arg_get+0x20>
 800b8e0:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
 800b8e2:	2a03      	cmp	r2, #3
 800b8e4:	d804      	bhi.n	800b8f0 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
 800b8e6:	3104      	adds	r1, #4
 800b8e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b8ec:	6840      	ldr	r0, [r0, #4]
 800b8ee:	e003      	b.n	800b8f8 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
 800b8f0:	f7ff ff70 	bl	800b7d4 <cont_arg_get>
 800b8f4:	e000      	b.n	800b8f8 <log_msg_arg_get+0x22>
		return 0;
 800b8f6:	2000      	movs	r0, #0
}
 800b8f8:	bd08      	pop	{r3, pc}

0800b8fa <log_msg_str_get>:
}
 800b8fa:	6900      	ldr	r0, [r0, #16]
 800b8fc:	4770      	bx	lr

0800b8fe <log_msg_put>:
{
 800b8fe:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
 800b900:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 800b902:	f3bf 8f5b 	dmb	ish
 800b906:	e853 2f00 	ldrex	r2, [r3]
 800b90a:	3a01      	subs	r2, #1
 800b90c:	e843 2100 	strex	r1, r2, [r3]
 800b910:	2900      	cmp	r1, #0
 800b912:	d1f8      	bne.n	800b906 <log_msg_put+0x8>
 800b914:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
 800b918:	6843      	ldr	r3, [r0, #4]
 800b91a:	b103      	cbz	r3, 800b91e <log_msg_put+0x20>
}
 800b91c:	bd08      	pop	{r3, pc}
		msg_free(msg);
 800b91e:	f7f7 ff2b 	bl	8003778 <msg_free>
}
 800b922:	e7fb      	b.n	800b91c <log_msg_put+0x1e>

0800b924 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
 800b924:	b510      	push	{r4, lr}
 800b926:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
 800b928:	2400      	movs	r4, #0
 800b92a:	9400      	str	r4, [sp, #0]
 800b92c:	f7ff ff64 	bl	800b7f8 <log_msg_hexdump_data_op>
}
 800b930:	b002      	add	sp, #8
 800b932:	bd10      	pop	{r4, pc}

0800b934 <buffer_write>:
{
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	4607      	mov	r7, r0
 800b938:	460d      	mov	r5, r1
 800b93a:	4614      	mov	r4, r2
 800b93c:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 800b93e:	4632      	mov	r2, r6
 800b940:	4621      	mov	r1, r4
 800b942:	4628      	mov	r0, r5
 800b944:	47b8      	blx	r7
		buf += processed;
 800b946:	4405      	add	r5, r0
	} while (len != 0);
 800b948:	1a24      	subs	r4, r4, r0
 800b94a:	d1f8      	bne.n	800b93e <buffer_write+0xa>
}
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b94e <color_prefix>:
{
 800b94e:	b508      	push	{r3, lr}
 800b950:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 800b952:	2201      	movs	r2, #1
 800b954:	f7f7 ffa8 	bl	80038a8 <color_print>
}
 800b958:	bd08      	pop	{r3, pc}

0800b95a <color_postfix>:
{
 800b95a:	b508      	push	{r3, lr}
 800b95c:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 800b95e:	2200      	movs	r2, #0
 800b960:	f7f7 ffa2 	bl	80038a8 <color_print>
}
 800b964:	bd08      	pop	{r3, pc}

0800b966 <postfix_print>:
{
 800b966:	b538      	push	{r3, r4, r5, lr}
 800b968:	4605      	mov	r5, r0
 800b96a:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 800b96c:	f001 0101 	and.w	r1, r1, #1
 800b970:	f7ff fff3 	bl	800b95a <color_postfix>
	newline_print(output, flags);
 800b974:	4621      	mov	r1, r4
 800b976:	4628      	mov	r0, r5
 800b978:	f7f7 ffac 	bl	80038d4 <newline_print>
}
 800b97c:	bd38      	pop	{r3, r4, r5, pc}

0800b97e <prefix_print>:
{
 800b97e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b982:	b083      	sub	sp, #12
 800b984:	4604      	mov	r4, r0
 800b986:	4615      	mov	r5, r2
 800b988:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 800b98c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 800b990:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
 800b994:	f011 0702 	ands.w	r7, r1, #2
 800b998:	d113      	bne.n	800b9c2 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
 800b99a:	4632      	mov	r2, r6
 800b99c:	4649      	mov	r1, r9
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7ff ffd5 	bl	800b94e <color_prefix>
	length += ids_print(output, level_on, func_on,
 800b9a4:	9601      	str	r6, [sp, #4]
 800b9a6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4641      	mov	r1, r8
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7f8 f803 	bl	80039c0 <ids_print>
}
 800b9ba:	4438      	add	r0, r7
 800b9bc:	b003      	add	sp, #12
 800b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f7f7 ff2a 	bl	800381c <timestamp_print>
 800b9c8:	4607      	mov	r7, r0
 800b9ca:	e7e6      	b.n	800b99a <prefix_print+0x1c>

0800b9cc <std_print>:
{
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	b08e      	sub	sp, #56	; 0x38
 800b9d2:	af0e      	add	r7, sp, #56	; 0x38
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
 800b9d8:	f7ff ff8f 	bl	800b8fa <log_msg_str_get>
 800b9dc:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff ff76 	bl	800b8d0 <log_msg_nargs_get>
 800b9e4:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
 800b9e6:	0083      	lsls	r3, r0, #2
 800b9e8:	3307      	adds	r3, #7
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	ebad 0d03 	sub.w	sp, sp, r3
 800b9f2:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
 800b9f4:	2400      	movs	r4, #0
 800b9f6:	e006      	b.n	800ba06 <std_print+0x3a>
		args[i] = log_msg_arg_get(msg, i);
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ff6b 	bl	800b8d6 <log_msg_arg_get>
 800ba00:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
 800ba04:	3401      	adds	r4, #1
 800ba06:	4544      	cmp	r4, r8
 800ba08:	d3f6      	bcc.n	800b9f8 <std_print+0x2c>
	switch (log_msg_nargs_get(msg)) {
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ff60 	bl	800b8d0 <log_msg_nargs_get>
 800ba10:	280f      	cmp	r0, #15
 800ba12:	d815      	bhi.n	800ba40 <std_print+0x74>
 800ba14:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ba18:	00170010 	.word	0x00170010
 800ba1c:	0024001d 	.word	0x0024001d
 800ba20:	0038002d 	.word	0x0038002d
 800ba24:	00540045 	.word	0x00540045
 800ba28:	00780065 	.word	0x00780065
 800ba2c:	00a4008d 	.word	0x00a4008d
 800ba30:	00d800bd 	.word	0x00d800bd
 800ba34:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
 800ba38:	4651      	mov	r1, sl
 800ba3a:	4648      	mov	r0, r9
 800ba3c:	f7f7 fedc 	bl	80037f8 <print_formatted>
}
 800ba40:	46bd      	mov	sp, r7
 800ba42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
 800ba46:	682a      	ldr	r2, [r5, #0]
 800ba48:	4651      	mov	r1, sl
 800ba4a:	4648      	mov	r0, r9
 800ba4c:	f7f7 fed4 	bl	80037f8 <print_formatted>
		break;
 800ba50:	e7f6      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
 800ba52:	686b      	ldr	r3, [r5, #4]
 800ba54:	682a      	ldr	r2, [r5, #0]
 800ba56:	4651      	mov	r1, sl
 800ba58:	4648      	mov	r0, r9
 800ba5a:	f7f7 fecd 	bl	80037f8 <print_formatted>
		break;
 800ba5e:	e7ef      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
 800ba60:	686b      	ldr	r3, [r5, #4]
 800ba62:	682a      	ldr	r2, [r5, #0]
 800ba64:	68a9      	ldr	r1, [r5, #8]
 800ba66:	9100      	str	r1, [sp, #0]
 800ba68:	4651      	mov	r1, sl
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f7f7 fec4 	bl	80037f8 <print_formatted>
		break;
 800ba70:	e7e6      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800ba72:	686b      	ldr	r3, [r5, #4]
 800ba74:	682a      	ldr	r2, [r5, #0]
 800ba76:	68e9      	ldr	r1, [r5, #12]
 800ba78:	9101      	str	r1, [sp, #4]
 800ba7a:	68a9      	ldr	r1, [r5, #8]
 800ba7c:	9100      	str	r1, [sp, #0]
 800ba7e:	4651      	mov	r1, sl
 800ba80:	4648      	mov	r0, r9
 800ba82:	f7f7 feb9 	bl	80037f8 <print_formatted>
		break;
 800ba86:	e7db      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800ba88:	686b      	ldr	r3, [r5, #4]
 800ba8a:	682a      	ldr	r2, [r5, #0]
 800ba8c:	6929      	ldr	r1, [r5, #16]
 800ba8e:	9102      	str	r1, [sp, #8]
 800ba90:	68e9      	ldr	r1, [r5, #12]
 800ba92:	9101      	str	r1, [sp, #4]
 800ba94:	68a9      	ldr	r1, [r5, #8]
 800ba96:	9100      	str	r1, [sp, #0]
 800ba98:	4651      	mov	r1, sl
 800ba9a:	4648      	mov	r0, r9
 800ba9c:	f7f7 feac 	bl	80037f8 <print_formatted>
		break;
 800baa0:	e7ce      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800baa2:	686b      	ldr	r3, [r5, #4]
 800baa4:	682a      	ldr	r2, [r5, #0]
 800baa6:	6969      	ldr	r1, [r5, #20]
 800baa8:	9103      	str	r1, [sp, #12]
 800baaa:	6929      	ldr	r1, [r5, #16]
 800baac:	9102      	str	r1, [sp, #8]
 800baae:	68e9      	ldr	r1, [r5, #12]
 800bab0:	9101      	str	r1, [sp, #4]
 800bab2:	68a9      	ldr	r1, [r5, #8]
 800bab4:	9100      	str	r1, [sp, #0]
 800bab6:	4651      	mov	r1, sl
 800bab8:	4648      	mov	r0, r9
 800baba:	f7f7 fe9d 	bl	80037f8 <print_formatted>
		break;
 800babe:	e7bf      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bac0:	686b      	ldr	r3, [r5, #4]
 800bac2:	682a      	ldr	r2, [r5, #0]
 800bac4:	69a9      	ldr	r1, [r5, #24]
 800bac6:	9104      	str	r1, [sp, #16]
 800bac8:	6969      	ldr	r1, [r5, #20]
 800baca:	9103      	str	r1, [sp, #12]
 800bacc:	6929      	ldr	r1, [r5, #16]
 800bace:	9102      	str	r1, [sp, #8]
 800bad0:	68e9      	ldr	r1, [r5, #12]
 800bad2:	9101      	str	r1, [sp, #4]
 800bad4:	68a9      	ldr	r1, [r5, #8]
 800bad6:	9100      	str	r1, [sp, #0]
 800bad8:	4651      	mov	r1, sl
 800bada:	4648      	mov	r0, r9
 800badc:	f7f7 fe8c 	bl	80037f8 <print_formatted>
		break;
 800bae0:	e7ae      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bae2:	686b      	ldr	r3, [r5, #4]
 800bae4:	682a      	ldr	r2, [r5, #0]
 800bae6:	69e9      	ldr	r1, [r5, #28]
 800bae8:	9105      	str	r1, [sp, #20]
 800baea:	69a9      	ldr	r1, [r5, #24]
 800baec:	9104      	str	r1, [sp, #16]
 800baee:	6969      	ldr	r1, [r5, #20]
 800baf0:	9103      	str	r1, [sp, #12]
 800baf2:	6929      	ldr	r1, [r5, #16]
 800baf4:	9102      	str	r1, [sp, #8]
 800baf6:	68e9      	ldr	r1, [r5, #12]
 800baf8:	9101      	str	r1, [sp, #4]
 800bafa:	68a9      	ldr	r1, [r5, #8]
 800bafc:	9100      	str	r1, [sp, #0]
 800bafe:	4651      	mov	r1, sl
 800bb00:	4648      	mov	r0, r9
 800bb02:	f7f7 fe79 	bl	80037f8 <print_formatted>
		break;
 800bb06:	e79b      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bb08:	686b      	ldr	r3, [r5, #4]
 800bb0a:	682a      	ldr	r2, [r5, #0]
 800bb0c:	6a29      	ldr	r1, [r5, #32]
 800bb0e:	9106      	str	r1, [sp, #24]
 800bb10:	69e9      	ldr	r1, [r5, #28]
 800bb12:	9105      	str	r1, [sp, #20]
 800bb14:	69a9      	ldr	r1, [r5, #24]
 800bb16:	9104      	str	r1, [sp, #16]
 800bb18:	6969      	ldr	r1, [r5, #20]
 800bb1a:	9103      	str	r1, [sp, #12]
 800bb1c:	6929      	ldr	r1, [r5, #16]
 800bb1e:	9102      	str	r1, [sp, #8]
 800bb20:	68e9      	ldr	r1, [r5, #12]
 800bb22:	9101      	str	r1, [sp, #4]
 800bb24:	68a9      	ldr	r1, [r5, #8]
 800bb26:	9100      	str	r1, [sp, #0]
 800bb28:	4651      	mov	r1, sl
 800bb2a:	4648      	mov	r0, r9
 800bb2c:	f7f7 fe64 	bl	80037f8 <print_formatted>
		break;
 800bb30:	e786      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bb32:	686b      	ldr	r3, [r5, #4]
 800bb34:	682a      	ldr	r2, [r5, #0]
 800bb36:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bb38:	9107      	str	r1, [sp, #28]
 800bb3a:	6a29      	ldr	r1, [r5, #32]
 800bb3c:	9106      	str	r1, [sp, #24]
 800bb3e:	69e9      	ldr	r1, [r5, #28]
 800bb40:	9105      	str	r1, [sp, #20]
 800bb42:	69a9      	ldr	r1, [r5, #24]
 800bb44:	9104      	str	r1, [sp, #16]
 800bb46:	6969      	ldr	r1, [r5, #20]
 800bb48:	9103      	str	r1, [sp, #12]
 800bb4a:	6929      	ldr	r1, [r5, #16]
 800bb4c:	9102      	str	r1, [sp, #8]
 800bb4e:	68e9      	ldr	r1, [r5, #12]
 800bb50:	9101      	str	r1, [sp, #4]
 800bb52:	68a9      	ldr	r1, [r5, #8]
 800bb54:	9100      	str	r1, [sp, #0]
 800bb56:	4651      	mov	r1, sl
 800bb58:	4648      	mov	r0, r9
 800bb5a:	f7f7 fe4d 	bl	80037f8 <print_formatted>
		break;
 800bb5e:	e76f      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bb60:	686b      	ldr	r3, [r5, #4]
 800bb62:	682a      	ldr	r2, [r5, #0]
 800bb64:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bb66:	9108      	str	r1, [sp, #32]
 800bb68:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bb6a:	9107      	str	r1, [sp, #28]
 800bb6c:	6a29      	ldr	r1, [r5, #32]
 800bb6e:	9106      	str	r1, [sp, #24]
 800bb70:	69e9      	ldr	r1, [r5, #28]
 800bb72:	9105      	str	r1, [sp, #20]
 800bb74:	69a9      	ldr	r1, [r5, #24]
 800bb76:	9104      	str	r1, [sp, #16]
 800bb78:	6969      	ldr	r1, [r5, #20]
 800bb7a:	9103      	str	r1, [sp, #12]
 800bb7c:	6929      	ldr	r1, [r5, #16]
 800bb7e:	9102      	str	r1, [sp, #8]
 800bb80:	68e9      	ldr	r1, [r5, #12]
 800bb82:	9101      	str	r1, [sp, #4]
 800bb84:	68a9      	ldr	r1, [r5, #8]
 800bb86:	9100      	str	r1, [sp, #0]
 800bb88:	4651      	mov	r1, sl
 800bb8a:	4648      	mov	r0, r9
 800bb8c:	f7f7 fe34 	bl	80037f8 <print_formatted>
		break;
 800bb90:	e756      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bb92:	686b      	ldr	r3, [r5, #4]
 800bb94:	682a      	ldr	r2, [r5, #0]
 800bb96:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800bb98:	9109      	str	r1, [sp, #36]	; 0x24
 800bb9a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bb9c:	9108      	str	r1, [sp, #32]
 800bb9e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bba0:	9107      	str	r1, [sp, #28]
 800bba2:	6a29      	ldr	r1, [r5, #32]
 800bba4:	9106      	str	r1, [sp, #24]
 800bba6:	69e9      	ldr	r1, [r5, #28]
 800bba8:	9105      	str	r1, [sp, #20]
 800bbaa:	69a9      	ldr	r1, [r5, #24]
 800bbac:	9104      	str	r1, [sp, #16]
 800bbae:	6969      	ldr	r1, [r5, #20]
 800bbb0:	9103      	str	r1, [sp, #12]
 800bbb2:	6929      	ldr	r1, [r5, #16]
 800bbb4:	9102      	str	r1, [sp, #8]
 800bbb6:	68e9      	ldr	r1, [r5, #12]
 800bbb8:	9101      	str	r1, [sp, #4]
 800bbba:	68a9      	ldr	r1, [r5, #8]
 800bbbc:	9100      	str	r1, [sp, #0]
 800bbbe:	4651      	mov	r1, sl
 800bbc0:	4648      	mov	r0, r9
 800bbc2:	f7f7 fe19 	bl	80037f8 <print_formatted>
		break;
 800bbc6:	e73b      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bbc8:	686b      	ldr	r3, [r5, #4]
 800bbca:	682a      	ldr	r2, [r5, #0]
 800bbcc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800bbce:	910a      	str	r1, [sp, #40]	; 0x28
 800bbd0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800bbd2:	9109      	str	r1, [sp, #36]	; 0x24
 800bbd4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bbd6:	9108      	str	r1, [sp, #32]
 800bbd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bbda:	9107      	str	r1, [sp, #28]
 800bbdc:	6a29      	ldr	r1, [r5, #32]
 800bbde:	9106      	str	r1, [sp, #24]
 800bbe0:	69e9      	ldr	r1, [r5, #28]
 800bbe2:	9105      	str	r1, [sp, #20]
 800bbe4:	69a9      	ldr	r1, [r5, #24]
 800bbe6:	9104      	str	r1, [sp, #16]
 800bbe8:	6969      	ldr	r1, [r5, #20]
 800bbea:	9103      	str	r1, [sp, #12]
 800bbec:	6929      	ldr	r1, [r5, #16]
 800bbee:	9102      	str	r1, [sp, #8]
 800bbf0:	68e9      	ldr	r1, [r5, #12]
 800bbf2:	9101      	str	r1, [sp, #4]
 800bbf4:	68a9      	ldr	r1, [r5, #8]
 800bbf6:	9100      	str	r1, [sp, #0]
 800bbf8:	4651      	mov	r1, sl
 800bbfa:	4648      	mov	r0, r9
 800bbfc:	f7f7 fdfc 	bl	80037f8 <print_formatted>
		break;
 800bc00:	e71e      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bc02:	686b      	ldr	r3, [r5, #4]
 800bc04:	682a      	ldr	r2, [r5, #0]
 800bc06:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800bc08:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800bc0c:	910a      	str	r1, [sp, #40]	; 0x28
 800bc0e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800bc10:	9109      	str	r1, [sp, #36]	; 0x24
 800bc12:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bc14:	9108      	str	r1, [sp, #32]
 800bc16:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bc18:	9107      	str	r1, [sp, #28]
 800bc1a:	6a29      	ldr	r1, [r5, #32]
 800bc1c:	9106      	str	r1, [sp, #24]
 800bc1e:	69e9      	ldr	r1, [r5, #28]
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	69a9      	ldr	r1, [r5, #24]
 800bc24:	9104      	str	r1, [sp, #16]
 800bc26:	6969      	ldr	r1, [r5, #20]
 800bc28:	9103      	str	r1, [sp, #12]
 800bc2a:	6929      	ldr	r1, [r5, #16]
 800bc2c:	9102      	str	r1, [sp, #8]
 800bc2e:	68e9      	ldr	r1, [r5, #12]
 800bc30:	9101      	str	r1, [sp, #4]
 800bc32:	68a9      	ldr	r1, [r5, #8]
 800bc34:	9100      	str	r1, [sp, #0]
 800bc36:	4651      	mov	r1, sl
 800bc38:	4648      	mov	r0, r9
 800bc3a:	f7f7 fddd 	bl	80037f8 <print_formatted>
		break;
 800bc3e:	e6ff      	b.n	800ba40 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
 800bc40:	686b      	ldr	r3, [r5, #4]
 800bc42:	682a      	ldr	r2, [r5, #0]
 800bc44:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800bc46:	910c      	str	r1, [sp, #48]	; 0x30
 800bc48:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800bc4a:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc4c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800bc4e:	910a      	str	r1, [sp, #40]	; 0x28
 800bc50:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800bc52:	9109      	str	r1, [sp, #36]	; 0x24
 800bc54:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800bc56:	9108      	str	r1, [sp, #32]
 800bc58:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800bc5a:	9107      	str	r1, [sp, #28]
 800bc5c:	6a29      	ldr	r1, [r5, #32]
 800bc5e:	9106      	str	r1, [sp, #24]
 800bc60:	69e9      	ldr	r1, [r5, #28]
 800bc62:	9105      	str	r1, [sp, #20]
 800bc64:	69a9      	ldr	r1, [r5, #24]
 800bc66:	9104      	str	r1, [sp, #16]
 800bc68:	6969      	ldr	r1, [r5, #20]
 800bc6a:	9103      	str	r1, [sp, #12]
 800bc6c:	6929      	ldr	r1, [r5, #16]
 800bc6e:	9102      	str	r1, [sp, #8]
 800bc70:	68e9      	ldr	r1, [r5, #12]
 800bc72:	9101      	str	r1, [sp, #4]
 800bc74:	68a9      	ldr	r1, [r5, #8]
 800bc76:	9100      	str	r1, [sp, #0]
 800bc78:	4651      	mov	r1, sl
 800bc7a:	4648      	mov	r0, r9
 800bc7c:	f7f7 fdbc 	bl	80037f8 <print_formatted>
}
 800bc80:	e6de      	b.n	800ba40 <std_print+0x74>

0800bc82 <log_output_flush>:
{
 800bc82:	b510      	push	{r4, lr}
 800bc84:	4604      	mov	r4, r0
		     output->control_block->offset,
 800bc86:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 800bc88:	6853      	ldr	r3, [r2, #4]
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	6881      	ldr	r1, [r0, #8]
 800bc8e:	6800      	ldr	r0, [r0, #0]
 800bc90:	f7ff fe50 	bl	800b934 <buffer_write>
	output->control_block->offset = 0;
 800bc94:	6863      	ldr	r3, [r4, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	601a      	str	r2, [r3, #0]
}
 800bc9a:	bd10      	pop	{r4, pc}

0800bc9c <out_func>:
{
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4605      	mov	r5, r0
 800bca0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
 800bca2:	684b      	ldr	r3, [r1, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68cb      	ldr	r3, [r1, #12]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d00f      	beq.n	800bccc <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
 800bcac:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800bcae:	f3bf 8f5b 	dmb	ish
 800bcb2:	e853 2f00 	ldrex	r2, [r3]
 800bcb6:	1c51      	adds	r1, r2, #1
 800bcb8:	e843 1000 	strex	r0, r1, [r3]
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d1f8      	bne.n	800bcb2 <out_func+0x16>
 800bcc0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
 800bcc4:	68a3      	ldr	r3, [r4, #8]
 800bcc6:	549d      	strb	r5, [r3, r2]
}
 800bcc8:	2000      	movs	r0, #0
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
 800bccc:	4608      	mov	r0, r1
 800bcce:	f7ff ffd8 	bl	800bc82 <log_output_flush>
 800bcd2:	e7eb      	b.n	800bcac <out_func+0x10>

0800bcd4 <log_output_msg_process>:
{
 800bcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	4617      	mov	r7, r2
 800bcde:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bce2:	f08c 0c01 	eor.w	ip, ip, #1
 800bce6:	f00c 0201 	and.w	r2, ip, #1
	return msg->hdr.timestamp;
 800bcea:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
 800bcec:	f891 c00a 	ldrb.w	ip, [r1, #10]
	return msg->hdr.ids.domain_id;
 800bcf0:	f3cc 00c2 	ubfx	r0, ip, #3, #3
	return msg->hdr.ids.source_id;
 800bcf4:	8949      	ldrh	r1, [r1, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
 800bcf6:	f3c1 1189 	ubfx	r1, r1, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
 800bcfa:	f01c 0507 	ands.w	r5, ip, #7
 800bcfe:	d10f      	bne.n	800bd20 <log_output_msg_process+0x4c>
 800bd00:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
 800bd02:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
 800bd04:	f013 0f01 	tst.w	r3, #1
 800bd08:	d013      	beq.n	800bd32 <log_output_msg_process+0x5e>
	} else if (raw_string) {
 800bd0a:	b9bd      	cbnz	r5, 800bd3c <log_output_msg_process+0x68>
		raw_string_print(msg, output);
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7f7 feb8 	bl	8003a84 <raw_string_print>
	if (!raw_string) {
 800bd14:	b9c5      	cbnz	r5, 800bd48 <log_output_msg_process+0x74>
	log_output_flush(output);
 800bd16:	4630      	mov	r0, r6
 800bd18:	f7ff ffb3 	bl	800bc82 <log_output_flush>
}
 800bd1c:	b005      	add	sp, #20
 800bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
 800bd20:	9102      	str	r1, [sp, #8]
 800bd22:	9001      	str	r0, [sp, #4]
 800bd24:	9500      	str	r5, [sp, #0]
 800bd26:	4639      	mov	r1, r7
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7ff fe28 	bl	800b97e <prefix_print>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	e7e7      	b.n	800bd02 <log_output_msg_process+0x2e>
		std_print(msg, output);
 800bd32:	4631      	mov	r1, r6
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7ff fe49 	bl	800b9cc <std_print>
 800bd3a:	e7eb      	b.n	800bd14 <log_output_msg_process+0x40>
		hexdump_print(msg, output, prefix_offset, flags);
 800bd3c:	463b      	mov	r3, r7
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7f7 fe73 	bl	8003a2c <hexdump_print>
 800bd46:	e7e5      	b.n	800bd14 <log_output_msg_process+0x40>
		postfix_print(output, flags, level);
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f7ff fe0a 	bl	800b966 <postfix_print>
 800bd52:	e7e0      	b.n	800bd16 <log_output_msg_process+0x42>

0800bd54 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 800bd54:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 800bd56:	f7f7 ff4d 	bl	8003bf4 <__do_global_ctors_aux>
	__do_init_array_aux();
 800bd5a:	f7f7 ff3d 	bl	8003bd8 <__do_init_array_aux>
}
 800bd5e:	bd08      	pop	{r3, pc}

0800bd60 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t pin, mux;
	uint32_t func = 0;
	int ret = 0;

	if (!list_size) {
 800bd62:	b329      	cbz	r1, 800bdb0 <stm32_dt_pinctrl_configure+0x50>
 800bd64:	4606      	mov	r6, r0
 800bd66:	460f      	mov	r7, r1
	}
#else
	ARG_UNUSED(base);
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	for (int i = 0; i < list_size; i++) {
 800bd68:	2400      	movs	r4, #0
	uint32_t func = 0;
 800bd6a:	4625      	mov	r5, r4
 800bd6c:	e00f      	b.n	800bd8e <stm32_dt_pinctrl_configure+0x2e>
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
		} else if (STM32_DT_PINMUX_FUNC(mux) == STM32_ANALOG) {
 800bd6e:	b2d3      	uxtb	r3, r2
 800bd70:	2b10      	cmp	r3, #16
 800bd72:	d019      	beq.n	800bda8 <stm32_dt_pinctrl_configure+0x48>
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 800bd74:	0b13      	lsrs	r3, r2, #12
 800bd76:	011b      	lsls	r3, r3, #4
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	f3c2 2003 	ubfx	r0, r2, #8, #4
			       STM32_DT_PINMUX_LINE(mux));

		ret = stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	4629      	mov	r1, r5
 800bd82:	4318      	orrs	r0, r3
 800bd84:	f7f7 ff46 	bl	8003c14 <stm32_pin_configure>
		if (ret != 0) {
 800bd88:	4603      	mov	r3, r0
 800bd8a:	b990      	cbnz	r0, 800bdb2 <stm32_dt_pinctrl_configure+0x52>
	for (int i = 0; i < list_size; i++) {
 800bd8c:	3401      	adds	r4, #1
 800bd8e:	42bc      	cmp	r4, r7
 800bd90:	d20c      	bcs.n	800bdac <stm32_dt_pinctrl_configure+0x4c>
		mux = pinctrl[i].pinmux;
 800bd92:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800bd96:	f856 2034 	ldr.w	r2, [r6, r4, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < STM32_ANALOG) {
 800bd9a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800bd9e:	d1e6      	bne.n	800bd6e <stm32_dt_pinctrl_configure+0xe>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800bda0:	685d      	ldr	r5, [r3, #4]
 800bda2:	f045 0520 	orr.w	r5, r5, #32
 800bda6:	e7e5      	b.n	800bd74 <stm32_dt_pinctrl_configure+0x14>
			func = STM32_MODER_ANALOG_MODE;
 800bda8:	2530      	movs	r5, #48	; 0x30
 800bdaa:	e7e3      	b.n	800bd74 <stm32_dt_pinctrl_configure+0x14>
			return ret;
		}
	}

	return 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e000      	b.n	800bdb2 <stm32_dt_pinctrl_configure+0x52>
		return 0;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdb6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 800bdb6:	b538      	push	{r3, r4, r5, lr}
 800bdb8:	4604      	mov	r4, r0

	if (esf != NULL) {
 800bdba:	460d      	mov	r5, r1
 800bdbc:	b111      	cbz	r1, 800bdc4 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	f7f7 ff62 	bl	8003c88 <esf_dump>
	}
	z_fatal_error(reason, esf);
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7fc f91e 	bl	8008008 <z_fatal_error>
}
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}

0800bdce <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800bdce:	b508      	push	{r3, lr}
 800bdd0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 800bdd2:	6800      	ldr	r0, [r0, #0]
 800bdd4:	f7ff ffef 	bl	800bdb6 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 800bdd8:	bd08      	pop	{r3, pc}

0800bdda <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
 800bdda:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 800bddc:	2100      	movs	r1, #0
 800bdde:	2001      	movs	r0, #1
 800bde0:	f7ff ffe9 	bl	800bdb6 <z_arm_fatal_error>
}
 800bde4:	bd08      	pop	{r3, pc}

0800bde6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 800bde6:	b508      	push	{r3, lr}
	handler();
 800bde8:	f7f7 ffc0 	bl	8003d6c <z_SysNmiOnReset>
	z_arm_int_exit();
 800bdec:	f7f8 f8aa 	bl	8003f44 <z_arm_exc_exit>
}
 800bdf0:	bd08      	pop	{r3, pc}

0800bdf2 <memory_fault_recoverable>:
}
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	4770      	bx	lr

0800bdf6 <fault_handle>:
{
 800bdf6:	b508      	push	{r3, lr}
	*recoverable = false;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 800bdfc:	1ecb      	subs	r3, r1, #3
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d81a      	bhi.n	800be38 <fault_handle+0x42>
 800be02:	e8df f003 	tbb	[pc, r3]
 800be06:	0905      	.short	0x0905
 800be08:	1919110d 	.word	0x1919110d
 800be0c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 800be10:	4611      	mov	r1, r2
 800be12:	f7f8 fb2b 	bl	800446c <hard_fault>
}
 800be16:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 800be18:	2100      	movs	r1, #0
 800be1a:	f7f8 fa45 	bl	80042a8 <mem_manage_fault>
		break;
 800be1e:	e7fa      	b.n	800be16 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 800be20:	2100      	movs	r1, #0
 800be22:	f7f8 f969 	bl	80040f8 <bus_fault>
		break;
 800be26:	e7f6      	b.n	800be16 <fault_handle+0x20>
		reason = usage_fault(esf);
 800be28:	f7f8 f89a 	bl	8003f60 <usage_fault>
		break;
 800be2c:	e7f3      	b.n	800be16 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 800be2e:	4611      	mov	r1, r2
 800be30:	f7f8 f948 	bl	80040c4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800be34:	2000      	movs	r0, #0
		break;
 800be36:	e7ee      	b.n	800be16 <fault_handle+0x20>
		reserved_exception(esf, fault);
 800be38:	f7f8 fbb8 	bl	80045ac <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800be3c:	2000      	movs	r0, #0
	return reason;
 800be3e:	e7ea      	b.n	800be16 <fault_handle+0x20>

0800be40 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 800be40:	6843      	ldr	r3, [r0, #4]
 800be42:	1e5a      	subs	r2, r3, #1
		&&
 800be44:	4213      	tst	r3, r2
 800be46:	d106      	bne.n	800be56 <mpu_partition_is_valid+0x16>
		&&
 800be48:	2b1f      	cmp	r3, #31
 800be4a:	d906      	bls.n	800be5a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 800be4c:	6803      	ldr	r3, [r0, #0]
		&&
 800be4e:	421a      	tst	r2, r3
 800be50:	d005      	beq.n	800be5e <mpu_partition_is_valid+0x1e>
 800be52:	2000      	movs	r0, #0
 800be54:	4770      	bx	lr
 800be56:	2000      	movs	r0, #0
 800be58:	4770      	bx	lr
 800be5a:	2000      	movs	r0, #0
 800be5c:	4770      	bx	lr
 800be5e:	2001      	movs	r0, #1
}
 800be60:	4770      	bx	lr

0800be62 <mpu_configure_region>:
{
 800be62:	b500      	push	{lr}
 800be64:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 800be66:	680b      	ldr	r3, [r1, #0]
 800be68:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 800be6a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800be6c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 800be6e:	2b20      	cmp	r3, #32
 800be70:	d912      	bls.n	800be98 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 800be72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be76:	d811      	bhi.n	800be9c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 800be78:	3b01      	subs	r3, #1
 800be7a:	fab3 f383 	clz	r3, r3
 800be7e:	f1c3 031f 	rsb	r3, r3, #31
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800be88:	4313      	orrs	r3, r2
 800be8a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 800be8c:	a901      	add	r1, sp, #4
 800be8e:	f7f8 fca7 	bl	80047e0 <region_allocate_and_init>
}
 800be92:	b005      	add	sp, #20
 800be94:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 800be98:	2308      	movs	r3, #8
 800be9a:	e7f5      	b.n	800be88 <mpu_configure_region+0x26>
		return REGION_4G;
 800be9c:	233e      	movs	r3, #62	; 0x3e
 800be9e:	e7f3      	b.n	800be88 <mpu_configure_region+0x26>

0800bea0 <arm_core_mpu_configure_static_mpu_regions>:
{
 800bea0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 800bea2:	f7f8 fcff 	bl	80048a4 <mpu_configure_static_mpu_regions>
}
 800bea6:	bd08      	pop	{r3, pc}

0800bea8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 800bea8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 800beaa:	f7f8 fd05 	bl	80048b8 <mpu_configure_dynamic_mpu_regions>
}
 800beae:	bd08      	pop	{r3, pc}

0800beb0 <malloc_prepare>:
}
 800beb0:	2000      	movs	r0, #0
 800beb2:	4770      	bx	lr

0800beb4 <_stdout_hook_default>:
}
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beb8:	4770      	bx	lr

0800beba <_stdin_hook_default>:
}
 800beba:	2000      	movs	r0, #0
 800bebc:	4770      	bx	lr

0800bebe <_read>:
{
 800bebe:	b508      	push	{r3, lr}
 800bec0:	4608      	mov	r0, r1
 800bec2:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
 800bec4:	f7f8 fd50 	bl	8004968 <z_impl_zephyr_read_stdin>
}
 800bec8:	bd08      	pop	{r3, pc}

0800beca <_write>:
{
 800beca:	b508      	push	{r3, lr}
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 800bed0:	f7f8 fd60 	bl	8004994 <z_impl_zephyr_write_stdout>
}
 800bed4:	bd08      	pop	{r3, pc}

0800bed6 <_close>:
}
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beda:	4770      	bx	lr

0800bedc <_lseek>:
}
 800bedc:	2000      	movs	r0, #0
 800bede:	4770      	bx	lr

0800bee0 <_isatty>:
}
 800bee0:	2802      	cmp	r0, #2
 800bee2:	bfcc      	ite	gt
 800bee4:	2000      	movgt	r0, #0
 800bee6:	2001      	movle	r0, #1
 800bee8:	4770      	bx	lr

0800beea <_kill>:
}
 800beea:	2000      	movs	r0, #0
 800beec:	4770      	bx	lr

0800beee <_getpid>:
}
 800beee:	2000      	movs	r0, #0
 800bef0:	4770      	bx	lr

0800bef2 <_fstat>:
	st->st_mode = S_IFCHR;
 800bef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bef6:	604b      	str	r3, [r1, #4]
}
 800bef8:	2000      	movs	r0, #0
 800befa:	4770      	bx	lr

0800befc <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800befc:	b510      	push	{r4, lr}
 800befe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
 800bf00:	2014      	movs	r0, #20
 800bf02:	f7fd fefb 	bl	8009cfc <malloc>
 800bf06:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
 800bf08:	f000 ffd4 	bl	800ceb4 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
 800bf0c:	bd10      	pop	{r4, pc}

0800bf0e <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800bf0e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 800bf10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf18:	f7fc fb50 	bl	80085bc <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
 800bf1c:	bd08      	pop	{r3, pc}

0800bf1e <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800bf1e:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 800bf20:	f7fc fbd6 	bl	80086d0 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
 800bf24:	bd08      	pop	{r3, pc}

0800bf26 <__stm32_exti_isr_0>:
{
 800bf26:	b508      	push	{r3, lr}
 800bf28:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	f7f8 fd6b 	bl	8004a08 <__stm32_exti_isr>
}
 800bf32:	bd08      	pop	{r3, pc}

0800bf34 <__stm32_exti_isr_1>:
{
 800bf34:	b508      	push	{r3, lr}
 800bf36:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 800bf38:	2102      	movs	r1, #2
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	f7f8 fd64 	bl	8004a08 <__stm32_exti_isr>
}
 800bf40:	bd08      	pop	{r3, pc}

0800bf42 <__stm32_exti_isr_2>:
{
 800bf42:	b508      	push	{r3, lr}
 800bf44:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 800bf46:	2103      	movs	r1, #3
 800bf48:	2002      	movs	r0, #2
 800bf4a:	f7f8 fd5d 	bl	8004a08 <__stm32_exti_isr>
}
 800bf4e:	bd08      	pop	{r3, pc}

0800bf50 <__stm32_exti_isr_3>:
{
 800bf50:	b508      	push	{r3, lr}
 800bf52:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 800bf54:	2104      	movs	r1, #4
 800bf56:	2003      	movs	r0, #3
 800bf58:	f7f8 fd56 	bl	8004a08 <__stm32_exti_isr>
}
 800bf5c:	bd08      	pop	{r3, pc}

0800bf5e <__stm32_exti_isr_4>:
{
 800bf5e:	b508      	push	{r3, lr}
 800bf60:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 800bf62:	2105      	movs	r1, #5
 800bf64:	2004      	movs	r0, #4
 800bf66:	f7f8 fd4f 	bl	8004a08 <__stm32_exti_isr>
}
 800bf6a:	bd08      	pop	{r3, pc}

0800bf6c <__stm32_exti_isr_9_5>:
{
 800bf6c:	b508      	push	{r3, lr}
 800bf6e:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 800bf70:	210a      	movs	r1, #10
 800bf72:	2005      	movs	r0, #5
 800bf74:	f7f8 fd48 	bl	8004a08 <__stm32_exti_isr>
}
 800bf78:	bd08      	pop	{r3, pc}

0800bf7a <__stm32_exti_isr_15_10>:
{
 800bf7a:	b508      	push	{r3, lr}
 800bf7c:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 800bf7e:	2110      	movs	r1, #16
 800bf80:	200a      	movs	r0, #10
 800bf82:	f7f8 fd41 	bl	8004a08 <__stm32_exti_isr>
}
 800bf86:	bd08      	pop	{r3, pc}

0800bf88 <__stm32_exti_connect_irqs>:

/**
 * @brief connect all interrupts
 */
static void __stm32_exti_connect_irqs(const struct device *dev)
{
 800bf88:	b508      	push	{r3, lr}
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32U5X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X) || \
	defined(CONFIG_SOC_SERIES_STM32WLX)
	IRQ_CONNECT(EXTI0_IRQn,
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	2006      	movs	r0, #6
 800bf90:	f7f7 fed6 	bl	8003d40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 800bf94:	2200      	movs	r2, #0
 800bf96:	4611      	mov	r1, r2
 800bf98:	2007      	movs	r0, #7
 800bf9a:	f7f7 fed1 	bl	8003d40 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	2008      	movs	r0, #8
 800bfa4:	f7f7 fecc 	bl	8003d40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	4611      	mov	r1, r2
 800bfac:	2009      	movs	r0, #9
 800bfae:	f7f7 fec7 	bl	8003d40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	200a      	movs	r0, #10
 800bfb8:	f7f7 fec2 	bl	8003d40 <z_arm_irq_priority_set>
		__stm32_exti_isr_4, DEVICE_DT_GET(EXTI_NODE),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X) && \
	!defined(CONFIG_SOC_SERIES_STM32U5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	2017      	movs	r0, #23
 800bfc2:	f7f7 febd 	bl	8003d40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_DT_GET(EXTI_NODE),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	4611      	mov	r1, r2
 800bfca:	2028      	movs	r0, #40	; 0x28
 800bfcc:	f7f7 feb8 	bl	8003d40 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_LPTIM1_IRQ_PRI,
		__stm32_exti_isr_23, DEVICE_DT_GET(EXTI_NODE),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F7X */
#endif
}
 800bfd0:	bd08      	pop	{r3, pc}

0800bfd2 <stm32_exti_init>:
{
 800bfd2:	b508      	push	{r3, lr}
	__stm32_exti_connect_irqs(dev);
 800bfd4:	f7ff ffd8 	bl	800bf88 <__stm32_exti_connect_irqs>
}
 800bfd8:	2000      	movs	r0, #0
 800bfda:	bd08      	pop	{r3, pc}

0800bfdc <config_bus_clk_init>:
	clk_init->AHBCLKDivider = ahb_prescaler(STM32_AHB_PRESCALER);
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6003      	str	r3, [r0, #0]
	clk_init->APB1CLKDivider = apb1_prescaler(STM32_APB1_PRESCALER);
 800bfe0:	6043      	str	r3, [r0, #4]
	clk_init->APB2CLKDivider = apb2_prescaler(STM32_APB2_PRESCALER);
 800bfe2:	6083      	str	r3, [r0, #8]
}
 800bfe4:	4770      	bx	lr

0800bfe6 <get_bus_clock>:
}
 800bfe6:	fbb0 f0f1 	udiv	r0, r0, r1
 800bfea:	4770      	bx	lr

0800bfec <config_pll_init>:
	pllinit->PLLM = pllm(STM32_PLL_M_DIVISOR);
 800bfec:	2300      	movs	r3, #0
 800bfee:	6003      	str	r3, [r0, #0]
	pllinit->PLLN = STM32_PLL_N_MULTIPLIER;
 800bff0:	2308      	movs	r3, #8
 800bff2:	6043      	str	r3, [r0, #4]
	pllinit->PLLR = pllr(STM32_PLL_R_DIVISOR);
 800bff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bff8:	6083      	str	r3, [r0, #8]
}
 800bffa:	4770      	bx	lr

0800bffc <gpio_stm32_isr>:
{
 800bffc:	b570      	push	{r4, r5, r6, lr}
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 800bffe:	684e      	ldr	r6, [r1, #4]
 800c000:	2501      	movs	r5, #1
 800c002:	4085      	lsls	r5, r0
	return list->head;
 800c004:	6889      	ldr	r1, [r1, #8]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c006:	b119      	cbz	r1, 800c010 <gpio_stm32_isr+0x14>
 800c008:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c00a:	b149      	cbz	r1, 800c020 <gpio_stm32_isr+0x24>
	return node->next;
 800c00c:	680c      	ldr	r4, [r1, #0]
 800c00e:	e007      	b.n	800c020 <gpio_stm32_isr+0x24>
 800c010:	460c      	mov	r4, r1
 800c012:	e005      	b.n	800c020 <gpio_stm32_isr+0x24>
 800c014:	b164      	cbz	r4, 800c030 <gpio_stm32_isr+0x34>
 800c016:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c018:	b104      	cbz	r4, 800c01c <gpio_stm32_isr+0x20>
	return node->next;
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	4621      	mov	r1, r4
 800c01e:	461c      	mov	r4, r3
 800c020:	b141      	cbz	r1, 800c034 <gpio_stm32_isr+0x38>
		if (cb->pin_mask & pins) {
 800c022:	688a      	ldr	r2, [r1, #8]
 800c024:	402a      	ands	r2, r5
 800c026:	d0f5      	beq.n	800c014 <gpio_stm32_isr+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800c028:	684b      	ldr	r3, [r1, #4]
 800c02a:	4630      	mov	r0, r6
 800c02c:	4798      	blx	r3
 800c02e:	e7f1      	b.n	800c014 <gpio_stm32_isr+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800c030:	4623      	mov	r3, r4
 800c032:	e7f3      	b.n	800c01c <gpio_stm32_isr+0x20>
}
 800c034:	bd70      	pop	{r4, r5, r6, pc}

0800c036 <gpio_stm32_flags_to_conf>:
	if ((flags & GPIO_OUTPUT) != 0) {
 800c036:	f410 7f00 	tst.w	r0, #512	; 0x200
 800c03a:	d01b      	beq.n	800c074 <gpio_stm32_flags_to_conf+0x3e>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800c03c:	2310      	movs	r3, #16
 800c03e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 800c040:	f010 0f02 	tst.w	r0, #2
 800c044:	d004      	beq.n	800c050 <gpio_stm32_flags_to_conf+0x1a>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800c046:	f010 0f04 	tst.w	r0, #4
 800c04a:	d02c      	beq.n	800c0a6 <gpio_stm32_flags_to_conf+0x70>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800c04c:	2350      	movs	r3, #80	; 0x50
 800c04e:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800c050:	f010 0310 	ands.w	r3, r0, #16
 800c054:	d005      	beq.n	800c062 <gpio_stm32_flags_to_conf+0x2c>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c056:	680b      	ldr	r3, [r1, #0]
 800c058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c05c:	600b      	str	r3, [r1, #0]
	return 0;
 800c05e:	2000      	movs	r0, #0
 800c060:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800c062:	f010 0020 	ands.w	r0, r0, #32
 800c066:	d020      	beq.n	800c0aa <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800c068:	680a      	ldr	r2, [r1, #0]
 800c06a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c06e:	600a      	str	r2, [r1, #0]
	return 0;
 800c070:	4618      	mov	r0, r3
 800c072:	4770      	bx	lr
	} else if  ((flags & GPIO_INPUT) != 0) {
 800c074:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c078:	d011      	beq.n	800c09e <gpio_stm32_flags_to_conf+0x68>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 800c07a:	2300      	movs	r3, #0
 800c07c:	600b      	str	r3, [r1, #0]
		if ((flags & GPIO_PULL_UP) != 0) {
 800c07e:	f010 0310 	ands.w	r3, r0, #16
 800c082:	d004      	beq.n	800c08e <gpio_stm32_flags_to_conf+0x58>
			*pincfg |= STM32_PINCFG_PULL_UP;
 800c084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c088:	600b      	str	r3, [r1, #0]
	return 0;
 800c08a:	2000      	movs	r0, #0
 800c08c:	4770      	bx	lr
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 800c08e:	f010 0020 	ands.w	r0, r0, #32
 800c092:	d00a      	beq.n	800c0aa <gpio_stm32_flags_to_conf+0x74>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 800c094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c098:	600a      	str	r2, [r1, #0]
	return 0;
 800c09a:	4618      	mov	r0, r3
 800c09c:	4770      	bx	lr
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 800c09e:	2330      	movs	r3, #48	; 0x30
 800c0a0:	600b      	str	r3, [r1, #0]
	return 0;
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	4770      	bx	lr
				return -ENOTSUP;
 800c0a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800c0aa:	4770      	bx	lr

0800c0ac <gpio_stm32_port_get_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800c0ac:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c0ae:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 800c0b0:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 800c0b2:	600b      	str	r3, [r1, #0]
}
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4770      	bx	lr

0800c0b8 <gpio_stm32_port_set_masked_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800c0b8:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c0ba:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 800c0bc:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 800c0be:	4042      	eors	r2, r0
 800c0c0:	400a      	ands	r2, r1
 800c0c2:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800c0c4:	615a      	str	r2, [r3, #20]
}
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	4770      	bx	lr

0800c0ca <gpio_stm32_port_set_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800c0ca:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c0cc:	685b      	ldr	r3, [r3, #4]
	WRITE_REG(gpio->BSRR, pins);
 800c0ce:	6199      	str	r1, [r3, #24]
}
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	4770      	bx	lr

0800c0d4 <gpio_stm32_port_clear_bits_raw>:
	const struct gpio_stm32_config *cfg = dev->config;
 800c0d4:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c0d6:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800c0d8:	6299      	str	r1, [r3, #40]	; 0x28
}
 800c0da:	2000      	movs	r0, #0
 800c0dc:	4770      	bx	lr

0800c0de <gpio_stm32_port_toggle_bits>:
	const struct gpio_stm32_config *cfg = dev->config;
 800c0de:	6843      	ldr	r3, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c0e0:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 800c0e2:	6953      	ldr	r3, [r2, #20]
 800c0e4:	404b      	eors	r3, r1
 800c0e6:	6153      	str	r3, [r2, #20]
}
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	4770      	bx	lr

0800c0ec <gpio_stm32_manage_callback>:

static int gpio_stm32_manage_callback(const struct device *dev,
				      struct gpio_callback *callback,
				      bool set)
{
 800c0ec:	b410      	push	{r4}
	struct gpio_stm32_data *data = dev->data;
 800c0ee:	6904      	ldr	r4, [r0, #16]

	return gpio_manage_callback(&data->cb, callback, set);
 800c0f0:	f104 0c08 	add.w	ip, r4, #8
	return list->head;
 800c0f4:	68a3      	ldr	r3, [r4, #8]
	if (!sys_slist_is_empty(callbacks)) {
 800c0f6:	b1fb      	cbz	r3, 800c138 <gpio_stm32_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e00d      	b.n	800c118 <gpio_stm32_manage_callback+0x2c>
	return node->next;
 800c0fc:	680b      	ldr	r3, [r1, #0]
	list->head = node;
 800c0fe:	60a3      	str	r3, [r4, #8]
	return list->tail;
 800c100:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c104:	4281      	cmp	r1, r0
 800c106:	d112      	bne.n	800c12e <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800c108:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800c10c:	e00f      	b.n	800c12e <gpio_stm32_manage_callback+0x42>
	list->tail = node;
 800c10e:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800c112:	e00c      	b.n	800c12e <gpio_stm32_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c114:	4618      	mov	r0, r3
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	b163      	cbz	r3, 800c134 <gpio_stm32_manage_callback+0x48>
 800c11a:	4299      	cmp	r1, r3
 800c11c:	d1fa      	bne.n	800c114 <gpio_stm32_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
 800c11e:	2800      	cmp	r0, #0
 800c120:	d0ec      	beq.n	800c0fc <gpio_stm32_manage_callback+0x10>
	return node->next;
 800c122:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
 800c124:	6003      	str	r3, [r0, #0]
	return list->tail;
 800c126:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c12a:	4299      	cmp	r1, r3
 800c12c:	d0ef      	beq.n	800c10e <gpio_stm32_manage_callback+0x22>
	parent->next = child;
 800c12e:	2300      	movs	r3, #0
 800c130:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c132:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 800c134:	b903      	cbnz	r3, 800c138 <gpio_stm32_manage_callback+0x4c>
			if (!set) {
 800c136:	b162      	cbz	r2, 800c152 <gpio_stm32_manage_callback+0x66>
	if (set) {
 800c138:	b172      	cbz	r2, 800c158 <gpio_stm32_manage_callback+0x6c>
	return list->head;
 800c13a:	68a3      	ldr	r3, [r4, #8]
	parent->next = child;
 800c13c:	600b      	str	r3, [r1, #0]
	list->head = node;
 800c13e:	60a1      	str	r1, [r4, #8]
	return list->tail;
 800c140:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
 800c144:	b10b      	cbz	r3, 800c14a <gpio_stm32_manage_callback+0x5e>
	return 0;
 800c146:	2000      	movs	r0, #0
 800c148:	e007      	b.n	800c15a <gpio_stm32_manage_callback+0x6e>
	list->tail = node;
 800c14a:	f8cc 1004 	str.w	r1, [ip, #4]
 800c14e:	2000      	movs	r0, #0
}
 800c150:	e003      	b.n	800c15a <gpio_stm32_manage_callback+0x6e>
				return -EINVAL;
 800c152:	f06f 0015 	mvn.w	r0, #21
 800c156:	e000      	b.n	800c15a <gpio_stm32_manage_callback+0x6e>
	return 0;
 800c158:	2000      	movs	r0, #0
}
 800c15a:	bc10      	pop	{r4}
 800c15c:	4770      	bx	lr

0800c15e <gpio_stm32_configure>:
{
 800c15e:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 800c160:	6840      	ldr	r0, [r0, #4]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800c162:	6844      	ldr	r4, [r0, #4]
	pinval = 1 << pin;
 800c164:	2001      	movs	r0, #1
 800c166:	4088      	lsls	r0, r1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800c168:	f002 0c30 	and.w	ip, r2, #48	; 0x30
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800c16c:	f3c2 1680 	ubfx	r6, r2, #6, #1
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c170:	6865      	ldr	r5, [r4, #4]
 800c172:	ea25 0500 	bic.w	r5, r5, r0
 800c176:	408e      	lsls	r6, r1
 800c178:	4335      	orrs	r5, r6
 800c17a:	6065      	str	r5, [r4, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800c17c:	f3c2 1ec1 	ubfx	lr, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c180:	68a6      	ldr	r6, [r4, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c182:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800c186:	2d00      	cmp	r5, #0
 800c188:	d04a      	beq.n	800c220 <gpio_stm32_configure+0xc2>
  return __builtin_clz(value);
 800c18a:	fab5 f585 	clz	r5, r5
 800c18e:	006d      	lsls	r5, r5, #1
 800c190:	2703      	movs	r7, #3
 800c192:	fa07 f505 	lsl.w	r5, r7, r5
 800c196:	ea26 0605 	bic.w	r6, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c19a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	d040      	beq.n	800c224 <gpio_stm32_configure+0xc6>
  return __builtin_clz(value);
 800c1a2:	fab5 f585 	clz	r5, r5
 800c1a6:	006d      	lsls	r5, r5, #1
 800c1a8:	fa0e f505 	lsl.w	r5, lr, r5
 800c1ac:	4335      	orrs	r5, r6
 800c1ae:	60a5      	str	r5, [r4, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800c1b0:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c1b4:	68e6      	ldr	r6, [r4, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1b6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800c1ba:	b3ad      	cbz	r5, 800c228 <gpio_stm32_configure+0xca>
  return __builtin_clz(value);
 800c1bc:	fab5 f585 	clz	r5, r5
 800c1c0:	006d      	lsls	r5, r5, #1
 800c1c2:	f04f 0e03 	mov.w	lr, #3
 800c1c6:	fa0e f505 	lsl.w	r5, lr, r5
 800c1ca:	ea26 0e05 	bic.w	lr, r6, r5
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1ce:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800c1d2:	b35d      	cbz	r5, 800c22c <gpio_stm32_configure+0xce>
  return __builtin_clz(value);
 800c1d4:	fab5 f585 	clz	r5, r5
 800c1d8:	006d      	lsls	r5, r5, #1
 800c1da:	fa02 f505 	lsl.w	r5, r2, r5
 800c1de:	ea4e 0505 	orr.w	r5, lr, r5
 800c1e2:	60e5      	str	r5, [r4, #12]
	if (mode == STM32_MODER_ALT_MODE) {
 800c1e4:	f1bc 0f20 	cmp.w	ip, #32
 800c1e8:	d022      	beq.n	800c230 <gpio_stm32_configure+0xd2>
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 800c1ea:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c1ee:	6822      	ldr	r2, [r4, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1f0:	fa90 f3a0 	rbit	r3, r0
  if (value == 0U)
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d052      	beq.n	800c29e <gpio_stm32_configure+0x140>
  return __builtin_clz(value);
 800c1f8:	fab3 f383 	clz	r3, r3
 800c1fc:	005b      	lsls	r3, r3, #1
 800c1fe:	2103      	movs	r1, #3
 800c200:	fa01 f303 	lsl.w	r3, r1, r3
 800c204:	ea22 0303 	bic.w	r3, r2, r3
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c208:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d048      	beq.n	800c2a2 <gpio_stm32_configure+0x144>
  return __builtin_clz(value);
 800c210:	fab0 f080 	clz	r0, r0
 800c214:	0040      	lsls	r0, r0, #1
 800c216:	fa0c f000 	lsl.w	r0, ip, r0
 800c21a:	4318      	orrs	r0, r3
 800c21c:	6020      	str	r0, [r4, #0]
}
 800c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 800c220:	2520      	movs	r5, #32
 800c222:	e7b4      	b.n	800c18e <gpio_stm32_configure+0x30>
 800c224:	2520      	movs	r5, #32
 800c226:	e7be      	b.n	800c1a6 <gpio_stm32_configure+0x48>
 800c228:	2520      	movs	r5, #32
 800c22a:	e7c9      	b.n	800c1c0 <gpio_stm32_configure+0x62>
 800c22c:	2520      	movs	r5, #32
 800c22e:	e7d3      	b.n	800c1d8 <gpio_stm32_configure+0x7a>
		if (pin < 8) {
 800c230:	2907      	cmp	r1, #7
 800c232:	dc19      	bgt.n	800c268 <gpio_stm32_configure+0x10a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c234:	6a21      	ldr	r1, [r4, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c236:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800c23a:	b18a      	cbz	r2, 800c260 <gpio_stm32_configure+0x102>
  return __builtin_clz(value);
 800c23c:	fab2 f282 	clz	r2, r2
 800c240:	0092      	lsls	r2, r2, #2
 800c242:	250f      	movs	r5, #15
 800c244:	fa05 f202 	lsl.w	r2, r5, r2
 800c248:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c24c:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800c250:	b142      	cbz	r2, 800c264 <gpio_stm32_configure+0x106>
  return __builtin_clz(value);
 800c252:	fab2 f282 	clz	r2, r2
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	4093      	lsls	r3, r2
 800c25a:	430b      	orrs	r3, r1
 800c25c:	6223      	str	r3, [r4, #32]
}
 800c25e:	e7c4      	b.n	800c1ea <gpio_stm32_configure+0x8c>
    return 32U;
 800c260:	2220      	movs	r2, #32
 800c262:	e7ed      	b.n	800c240 <gpio_stm32_configure+0xe2>
 800c264:	2220      	movs	r2, #32
 800c266:	e7f6      	b.n	800c256 <gpio_stm32_configure+0xf8>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c268:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c26a:	0a02      	lsrs	r2, r0, #8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c26c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 800c270:	b189      	cbz	r1, 800c296 <gpio_stm32_configure+0x138>
  return __builtin_clz(value);
 800c272:	fab1 f181 	clz	r1, r1
 800c276:	0089      	lsls	r1, r1, #2
 800c278:	260f      	movs	r6, #15
 800c27a:	fa06 f101 	lsl.w	r1, r6, r1
 800c27e:	ea25 0101 	bic.w	r1, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c282:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800c286:	b142      	cbz	r2, 800c29a <gpio_stm32_configure+0x13c>
  return __builtin_clz(value);
 800c288:	fab2 f282 	clz	r2, r2
 800c28c:	0092      	lsls	r2, r2, #2
 800c28e:	4093      	lsls	r3, r2
 800c290:	430b      	orrs	r3, r1
 800c292:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c294:	e7a9      	b.n	800c1ea <gpio_stm32_configure+0x8c>
    return 32U;
 800c296:	2120      	movs	r1, #32
 800c298:	e7ed      	b.n	800c276 <gpio_stm32_configure+0x118>
 800c29a:	2220      	movs	r2, #32
 800c29c:	e7f6      	b.n	800c28c <gpio_stm32_configure+0x12e>
 800c29e:	2320      	movs	r3, #32
 800c2a0:	e7ac      	b.n	800c1fc <gpio_stm32_configure+0x9e>
 800c2a2:	2020      	movs	r0, #32
 800c2a4:	e7b6      	b.n	800c214 <gpio_stm32_configure+0xb6>

0800c2a6 <gpio_stm32_config>:
{
 800c2a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2a8:	b083      	sub	sp, #12
 800c2aa:	4607      	mov	r7, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	4614      	mov	r4, r2
	err = gpio_stm32_flags_to_conf(flags, &pincfg);
 800c2b0:	a901      	add	r1, sp, #4
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f7ff febf 	bl	800c036 <gpio_stm32_flags_to_conf>
	if (err != 0) {
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	b970      	cbnz	r0, 800c2da <gpio_stm32_config+0x34>
	if ((flags & GPIO_OUTPUT) != 0) {
 800c2bc:	f414 7f00 	tst.w	r4, #512	; 0x200
 800c2c0:	d005      	beq.n	800c2ce <gpio_stm32_config+0x28>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 800c2c2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800c2c6:	d10b      	bne.n	800c2e0 <gpio_stm32_config+0x3a>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 800c2c8:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800c2cc:	d10e      	bne.n	800c2ec <gpio_stm32_config+0x46>
	gpio_stm32_configure(dev, pin, pincfg, 0);
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	9a01      	ldr	r2, [sp, #4]
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f7ff ff42 	bl	800c15e <gpio_stm32_configure>
}
 800c2da:	4630      	mov	r0, r6
 800c2dc:	b003      	add	sp, #12
 800c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 800c2e0:	2101      	movs	r1, #1
 800c2e2:	40a9      	lsls	r1, r5
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff fef0 	bl	800c0ca <gpio_stm32_port_set_bits_raw>
 800c2ea:	e7f0      	b.n	800c2ce <gpio_stm32_config+0x28>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	40a9      	lsls	r1, r5
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	f7ff feef 	bl	800c0d4 <gpio_stm32_port_clear_bits_raw>
 800c2f6:	e7ea      	b.n	800c2ce <gpio_stm32_config+0x28>

0800c2f8 <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(const struct device *dev)
{
 800c2f8:	b508      	push	{r3, lr}
	struct gpio_stm32_data *data = dev->data;
 800c2fa:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
 800c2fc:	6050      	str	r0, [r2, #4]
#ifdef CONFIG_PM_DEVICE_RUNTIME
	pm_device_enable(dev);

	return 0;
#else
	return gpio_stm32_clock_request(dev, true);
 800c2fe:	2101      	movs	r1, #1
 800c300:	f7f8 fe28 	bl	8004f54 <gpio_stm32_clock_request>
#endif
}
 800c304:	bd08      	pop	{r3, pc}

0800c306 <spi_stm32_transfer_ongoing>:
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 800c306:	6d03      	ldr	r3, [r0, #80]	; 0x50
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 800c308:	b91b      	cbnz	r3, 800c312 <spi_stm32_transfer_ongoing+0xc>
}

static ALWAYS_INLINE
bool spi_context_rx_on(struct spi_context *ctx)
{
	return !!(ctx->rx_len);
 800c30a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800c30c:	b91b      	cbnz	r3, 800c316 <spi_stm32_transfer_ongoing+0x10>
 800c30e:	2000      	movs	r0, #0
 800c310:	4770      	bx	lr
 800c312:	2001      	movs	r0, #1
 800c314:	4770      	bx	lr
 800c316:	2001      	movs	r0, #1
}
 800c318:	4770      	bx	lr

0800c31a <spi_stm32_shift_m>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c31a:	6883      	ldr	r3, [r0, #8]
 800c31c:	f013 0f02 	tst.w	r3, #2
 800c320:	d0fb      	beq.n	800c31a <spi_stm32_shift_m>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c322:	680b      	ldr	r3, [r1, #0]
 800c324:	889b      	ldrh	r3, [r3, #4]
 800c326:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d01f      	beq.n	800c36e <spi_stm32_shift_m+0x54>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c32e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c330:	2b00      	cmp	r3, #0
 800c332:	d044      	beq.n	800c3be <spi_stm32_shift_m+0xa4>
 800c334:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c336:	2a00      	cmp	r2, #0
 800c338:	d143      	bne.n	800c3c2 <spi_stm32_shift_m+0xa8>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	d043      	beq.n	800c3c6 <spi_stm32_shift_m+0xac>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800c33e:	881b      	ldrh	r3, [r3, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800c340:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c342:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c344:	2b00      	cmp	r3, #0
 800c346:	d047      	beq.n	800c3d8 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800c348:	3b01      	subs	r3, #1
 800c34a:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d13f      	bne.n	800c3d0 <spi_stm32_shift_m+0xb6>
		ctx->tx_count--;
 800c350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c352:	3b01      	subs	r3, #1
 800c354:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c356:	2b00      	cmp	r3, #0
 800c358:	d037      	beq.n	800c3ca <spi_stm32_shift_m+0xb0>
			ctx->current_tx++;
 800c35a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c35c:	f103 0208 	add.w	r2, r3, #8
 800c360:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	085b      	lsrs	r3, r3, #1
 800c36a:	650b      	str	r3, [r1, #80]	; 0x50
 800c36c:	e034      	b.n	800c3d8 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c36e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c370:	b1bb      	cbz	r3, 800c3a2 <spi_stm32_shift_m+0x88>
 800c372:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c374:	b9ba      	cbnz	r2, 800c3a6 <spi_stm32_shift_m+0x8c>
		if (spi_context_tx_buf_on(&data->ctx)) {
 800c376:	b1c2      	cbz	r2, 800c3aa <spi_stm32_shift_m+0x90>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800c378:	781b      	ldrb	r3, [r3, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 800c37a:	b2db      	uxtb	r3, r3
  *spidr = TxData;
 800c37c:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c37e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c380:	b353      	cbz	r3, 800c3d8 <spi_stm32_shift_m+0xbe>
	ctx->tx_len -= len;
 800c382:	3b01      	subs	r3, #1
 800c384:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c386:	b9ab      	cbnz	r3, 800c3b4 <spi_stm32_shift_m+0x9a>
		ctx->tx_count--;
 800c388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c38a:	3b01      	subs	r3, #1
 800c38c:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c38e:	b173      	cbz	r3, 800c3ae <spi_stm32_shift_m+0x94>
			ctx->current_tx++;
 800c390:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c392:	f103 0208 	add.w	r2, r3, #8
 800c396:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	650b      	str	r3, [r1, #80]	; 0x50
 800c3a0:	e01a      	b.n	800c3d8 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	e7e7      	b.n	800c376 <spi_stm32_shift_m+0x5c>
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	e7e5      	b.n	800c376 <spi_stm32_shift_m+0x5c>
	uint16_t tx_frame = SPI_STM32_TX_NOP;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e7e5      	b.n	800c37a <spi_stm32_shift_m+0x60>
			ctx->tx_buf = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c3b2:	e011      	b.n	800c3d8 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800c3b4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c3b6:	b17b      	cbz	r3, 800c3d8 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c3bc:	e00c      	b.n	800c3d8 <spi_stm32_shift_m+0xbe>
	return !!(ctx->tx_buf && ctx->tx_len);
 800c3be:	2200      	movs	r2, #0
 800c3c0:	e7bb      	b.n	800c33a <spi_stm32_shift_m+0x20>
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	e7b9      	b.n	800c33a <spi_stm32_shift_m+0x20>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e7ba      	b.n	800c340 <spi_stm32_shift_m+0x26>
			ctx->tx_buf = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c3ce:	e003      	b.n	800c3d8 <spi_stm32_shift_m+0xbe>
	} else if (ctx->tx_buf) {
 800c3d0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c3d2:	b10b      	cbz	r3, 800c3d8 <spi_stm32_shift_m+0xbe>
		ctx->tx_buf += dfs * len;
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c3d8:	6883      	ldr	r3, [r0, #8]
 800c3da:	f013 0f01 	tst.w	r3, #1
 800c3de:	d0fb      	beq.n	800c3d8 <spi_stm32_shift_m+0xbe>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c3e0:	680b      	ldr	r3, [r1, #0]
 800c3e2:	889b      	ldrh	r3, [r3, #4]
 800c3e4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c3e8:	2b08      	cmp	r3, #8
 800c3ea:	d01f      	beq.n	800c42c <spi_stm32_shift_m+0x112>
  return (uint16_t)(READ_REG(SPIx->DR));
 800c3ec:	68c3      	ldr	r3, [r0, #12]
 800c3ee:	b29b      	uxth	r3, r3
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 800c3f0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	d040      	beq.n	800c478 <spi_stm32_shift_m+0x15e>
 800c3f6:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d13f      	bne.n	800c47c <spi_stm32_shift_m+0x162>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800c3fc:	b100      	cbz	r0, 800c400 <spi_stm32_shift_m+0xe6>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800c3fe:	8013      	strh	r3, [r2, #0]
	if (!ctx->rx_len) {
 800c400:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c402:	2b00      	cmp	r3, #0
 800c404:	d043      	beq.n	800c48e <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800c406:	3b01      	subs	r3, #1
 800c408:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d13b      	bne.n	800c486 <spi_stm32_shift_m+0x16c>
		ctx->rx_count--;
 800c40e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c410:	3b01      	subs	r3, #1
 800c412:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c414:	2b00      	cmp	r3, #0
 800c416:	d033      	beq.n	800c480 <spi_stm32_shift_m+0x166>
			ctx->current_rx++;
 800c418:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c41a:	f103 0208 	add.w	r2, r3, #8
 800c41e:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c420:	689a      	ldr	r2, [r3, #8]
 800c422:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	085b      	lsrs	r3, r3, #1
 800c428:	658b      	str	r3, [r1, #88]	; 0x58
 800c42a:	4770      	bx	lr
  return (uint8_t)(READ_REG(SPIx->DR));
 800c42c:	68c3      	ldr	r3, [r0, #12]
 800c42e:	b2db      	uxtb	r3, r3
	return !!(ctx->rx_buf && ctx->rx_len);
 800c430:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800c432:	b1aa      	cbz	r2, 800c460 <spi_stm32_shift_m+0x146>
 800c434:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c436:	b9a8      	cbnz	r0, 800c464 <spi_stm32_shift_m+0x14a>
		if (spi_context_rx_buf_on(&data->ctx)) {
 800c438:	b100      	cbz	r0, 800c43c <spi_stm32_shift_m+0x122>
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800c43a:	7013      	strb	r3, [r2, #0]
	if (!ctx->rx_len) {
 800c43c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c43e:	b333      	cbz	r3, 800c48e <spi_stm32_shift_m+0x174>
	ctx->rx_len -= len;
 800c440:	3b01      	subs	r3, #1
 800c442:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c444:	b99b      	cbnz	r3, 800c46e <spi_stm32_shift_m+0x154>
		ctx->rx_count--;
 800c446:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c448:	3b01      	subs	r3, #1
 800c44a:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c44c:	b163      	cbz	r3, 800c468 <spi_stm32_shift_m+0x14e>
			ctx->current_rx++;
 800c44e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c450:	f103 0208 	add.w	r2, r3, #8
 800c454:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	658b      	str	r3, [r1, #88]	; 0x58
 800c45e:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c460:	2000      	movs	r0, #0
 800c462:	e7e9      	b.n	800c438 <spi_stm32_shift_m+0x11e>
 800c464:	2001      	movs	r0, #1
 800c466:	e7e7      	b.n	800c438 <spi_stm32_shift_m+0x11e>
			ctx->rx_buf = NULL;
 800c468:	2300      	movs	r3, #0
 800c46a:	654b      	str	r3, [r1, #84]	; 0x54
 800c46c:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c46e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c470:	b16b      	cbz	r3, 800c48e <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800c472:	3301      	adds	r3, #1
 800c474:	654b      	str	r3, [r1, #84]	; 0x54
 800c476:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c478:	2000      	movs	r0, #0
 800c47a:	e7bf      	b.n	800c3fc <spi_stm32_shift_m+0xe2>
 800c47c:	2001      	movs	r0, #1
 800c47e:	e7bd      	b.n	800c3fc <spi_stm32_shift_m+0xe2>
			ctx->rx_buf = NULL;
 800c480:	2300      	movs	r3, #0
 800c482:	654b      	str	r3, [r1, #84]	; 0x54
 800c484:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c486:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c488:	b10b      	cbz	r3, 800c48e <spi_stm32_shift_m+0x174>
		ctx->rx_buf += dfs * len;
 800c48a:	3302      	adds	r3, #2
 800c48c:	654b      	str	r3, [r1, #84]	; 0x54
}
 800c48e:	4770      	bx	lr

0800c490 <spi_stm32_shift_s>:
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800c490:	6883      	ldr	r3, [r0, #8]
 800c492:	f013 0f02 	tst.w	r3, #2
 800c496:	d045      	beq.n	800c524 <spi_stm32_shift_s+0x94>
	return !!(ctx->tx_len);
 800c498:	6d0b      	ldr	r3, [r1, #80]	; 0x50
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d042      	beq.n	800c524 <spi_stm32_shift_s+0x94>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c49e:	680b      	ldr	r3, [r1, #0]
 800c4a0:	889b      	ldrh	r3, [r3, #4]
 800c4a2:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800c4a6:	2b08      	cmp	r3, #8
 800c4a8:	d017      	beq.n	800c4da <spi_stm32_shift_s+0x4a>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800c4aa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c4ac:	881b      	ldrh	r3, [r3, #0]
  *spidr = TxData;
 800c4ae:	8183      	strh	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c4b0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d03a      	beq.n	800c52c <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d12d      	bne.n	800c51a <spi_stm32_shift_s+0x8a>
		ctx->tx_count--;
 800c4be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c4c4:	b333      	cbz	r3, 800c514 <spi_stm32_shift_s+0x84>
			ctx->current_tx++;
 800c4c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c4c8:	f103 0208 	add.w	r2, r3, #8
 800c4cc:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c4ce:	689a      	ldr	r2, [r3, #8]
 800c4d0:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	085b      	lsrs	r3, r3, #1
 800c4d6:	650b      	str	r3, [r1, #80]	; 0x50
 800c4d8:	e028      	b.n	800c52c <spi_stm32_shift_s+0x9c>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800c4da:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c4dc:	781b      	ldrb	r3, [r3, #0]
  *spidr = TxData;
 800c4de:	7303      	strb	r3, [r0, #12]
	if (!ctx->tx_len) {
 800c4e0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800c4e2:	b31b      	cbz	r3, 800c52c <spi_stm32_shift_s+0x9c>
	ctx->tx_len -= len;
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
 800c4e8:	b97b      	cbnz	r3, 800c50a <spi_stm32_shift_s+0x7a>
		ctx->tx_count--;
 800c4ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
 800c4f0:	b143      	cbz	r3, 800c504 <spi_stm32_shift_s+0x74>
			ctx->current_tx++;
 800c4f2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c4f4:	f103 0208 	add.w	r2, r3, #8
 800c4f8:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	650b      	str	r3, [r1, #80]	; 0x50
 800c502:	e013      	b.n	800c52c <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800c504:	2300      	movs	r3, #0
 800c506:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c508:	e010      	b.n	800c52c <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800c50a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c50c:	b173      	cbz	r3, 800c52c <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800c50e:	3301      	adds	r3, #1
 800c510:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c512:	e00b      	b.n	800c52c <spi_stm32_shift_s+0x9c>
			ctx->tx_buf = NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c518:	e008      	b.n	800c52c <spi_stm32_shift_s+0x9c>
	} else if (ctx->tx_buf) {
 800c51a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c51c:	b133      	cbz	r3, 800c52c <spi_stm32_shift_s+0x9c>
		ctx->tx_buf += dfs * len;
 800c51e:	3302      	adds	r3, #2
 800c520:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c522:	e003      	b.n	800c52c <spi_stm32_shift_s+0x9c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800c524:	6843      	ldr	r3, [r0, #4]
 800c526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c52a:	6043      	str	r3, [r0, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c52c:	6883      	ldr	r3, [r0, #8]
 800c52e:	f013 0f01 	tst.w	r3, #1
 800c532:	d04a      	beq.n	800c5ca <spi_stm32_shift_s+0x13a>
	return !!(ctx->rx_buf && ctx->rx_len);
 800c534:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c536:	b30b      	cbz	r3, 800c57c <spi_stm32_shift_s+0xec>
 800c538:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800c53a:	bb0a      	cbnz	r2, 800c580 <spi_stm32_shift_s+0xf0>
	if (ll_func_rx_is_not_empty(spi) &&
 800c53c:	2a00      	cmp	r2, #0
 800c53e:	d044      	beq.n	800c5ca <spi_stm32_shift_s+0x13a>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 800c540:	680a      	ldr	r2, [r1, #0]
 800c542:	8892      	ldrh	r2, [r2, #4]
 800c544:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800c548:	2a08      	cmp	r2, #8
 800c54a:	d01b      	beq.n	800c584 <spi_stm32_shift_s+0xf4>
  return (uint16_t)(READ_REG(SPIx->DR));
 800c54c:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 800c54e:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 800c550:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c552:	2b00      	cmp	r3, #0
 800c554:	d039      	beq.n	800c5ca <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800c556:	3b01      	subs	r3, #1
 800c558:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d131      	bne.n	800c5c2 <spi_stm32_shift_s+0x132>
		ctx->rx_count--;
 800c55e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c560:	3b01      	subs	r3, #1
 800c562:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c564:	2b00      	cmp	r3, #0
 800c566:	d029      	beq.n	800c5bc <spi_stm32_shift_s+0x12c>
			ctx->current_rx++;
 800c568:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c56a:	f103 0208 	add.w	r2, r3, #8
 800c56e:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c570:	689a      	ldr	r2, [r3, #8]
 800c572:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	085b      	lsrs	r3, r3, #1
 800c578:	658b      	str	r3, [r1, #88]	; 0x58
 800c57a:	4770      	bx	lr
	return !!(ctx->rx_buf && ctx->rx_len);
 800c57c:	2200      	movs	r2, #0
 800c57e:	e7dd      	b.n	800c53c <spi_stm32_shift_s+0xac>
 800c580:	2201      	movs	r2, #1
 800c582:	e7db      	b.n	800c53c <spi_stm32_shift_s+0xac>
  return (uint8_t)(READ_REG(SPIx->DR));
 800c584:	68c2      	ldr	r2, [r0, #12]
			UNALIGNED_PUT(rx_frame, (uint8_t *)data->ctx.rx_buf);
 800c586:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 800c588:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800c58a:	b1f3      	cbz	r3, 800c5ca <spi_stm32_shift_s+0x13a>
	ctx->rx_len -= len;
 800c58c:	3b01      	subs	r3, #1
 800c58e:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->rx_len) {
 800c590:	b97b      	cbnz	r3, 800c5b2 <spi_stm32_shift_s+0x122>
		ctx->rx_count--;
 800c592:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800c594:	3b01      	subs	r3, #1
 800c596:	648b      	str	r3, [r1, #72]	; 0x48
		if (ctx->rx_count) {
 800c598:	b143      	cbz	r3, 800c5ac <spi_stm32_shift_s+0x11c>
			ctx->current_rx++;
 800c59a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800c59c:	f103 0208 	add.w	r2, r3, #8
 800c5a0:	644a      	str	r2, [r1, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	654a      	str	r2, [r1, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	658b      	str	r3, [r1, #88]	; 0x58
 800c5aa:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	654b      	str	r3, [r1, #84]	; 0x54
 800c5b0:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c5b2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c5b4:	b14b      	cbz	r3, 800c5ca <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	654b      	str	r3, [r1, #84]	; 0x54
 800c5ba:	4770      	bx	lr
			ctx->rx_buf = NULL;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	654b      	str	r3, [r1, #84]	; 0x54
 800c5c0:	4770      	bx	lr
	} else if (ctx->rx_buf) {
 800c5c2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800c5c4:	b10b      	cbz	r3, 800c5ca <spi_stm32_shift_s+0x13a>
		ctx->rx_buf += dfs * len;
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	654b      	str	r3, [r1, #84]	; 0x54
}
 800c5ca:	4770      	bx	lr

0800c5cc <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800c5cc:	b508      	push	{r3, lr}
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2105      	movs	r1, #5
 800c5d2:	2023      	movs	r0, #35	; 0x23
 800c5d4:	f7f7 fbb4 	bl	8003d40 <z_arm_irq_priority_set>
 800c5d8:	2023      	movs	r0, #35	; 0x23
 800c5da:	f7f7 fba3 	bl	8003d24 <arch_irq_enable>
 800c5de:	bd08      	pop	{r3, pc}

0800c5e0 <spi_stm32_shift_frames>:
{
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	4604      	mov	r4, r0
	uint16_t operation = data->ctx.config->operation;
 800c5e4:	680b      	ldr	r3, [r1, #0]
 800c5e6:	889b      	ldrh	r3, [r3, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 800c5e8:	f013 0f01 	tst.w	r3, #1
 800c5ec:	d105      	bne.n	800c5fa <spi_stm32_shift_frames+0x1a>
		spi_stm32_shift_m(spi, data);
 800c5ee:	f7ff fe94 	bl	800c31a <spi_stm32_shift_m>
	return spi_stm32_get_err(spi);
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7f8 fe12 	bl	800521c <spi_stm32_get_err>
}
 800c5f8:	bd10      	pop	{r4, pc}
		spi_stm32_shift_s(spi, data);
 800c5fa:	f7ff ff49 	bl	800c490 <spi_stm32_shift_s>
 800c5fe:	e7f8      	b.n	800c5f2 <spi_stm32_shift_frames+0x12>

0800c600 <spi_stm32_cs_control>:
{
 800c600:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = dev->data;
 800c602:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d034      	beq.n	800c674 <spi_stm32_cs_control+0x74>
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d031      	beq.n	800c674 <spi_stm32_cs_control+0x74>
 800c610:	6810      	ldr	r0, [r2, #0]
 800c612:	2800      	cmp	r0, #0
 800c614:	d02e      	beq.n	800c674 <spi_stm32_cs_control+0x74>
		if (on) {
 800c616:	b9c9      	cbnz	r1, 800c64c <spi_stm32_cs_control+0x4c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
 800c618:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
 800c61a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c61e:	d129      	bne.n	800c674 <spi_stm32_cs_control+0x74>
			k_busy_wait(ctx->config->cs->delay);
 800c620:	6850      	ldr	r0, [r2, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800c622:	f7fc ffb5 	bl	8009590 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	6818      	ldr	r0, [r3, #0]
 800c62c:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800c62e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	2301      	movs	r3, #1
 800c634:	408b      	lsls	r3, r1
 800c636:	421a      	tst	r2, r3
 800c638:	d126      	bne.n	800c688 <spi_stm32_cs_control+0x88>
 800c63a:	2300      	movs	r3, #0
	if (value != 0)	{
 800c63c:	b333      	cbz	r3, 800c68c <spi_stm32_cs_control+0x8c>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c63e:	2301      	movs	r3, #1
 800c640:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c644:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4798      	blx	r3
 800c64a:	e013      	b.n	800c674 <spi_stm32_cs_control+0x74>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c64c:	7a11      	ldrb	r1, [r2, #8]
	const struct gpio_driver_data *const data =
 800c64e:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	2301      	movs	r3, #1
 800c654:	408b      	lsls	r3, r1
 800c656:	421a      	tst	r2, r3
 800c658:	d10d      	bne.n	800c676 <spi_stm32_cs_control+0x76>
 800c65a:	2301      	movs	r3, #1
	if (value != 0)	{
 800c65c:	b16b      	cbz	r3, 800c67a <spi_stm32_cs_control+0x7a>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c65e:	2301      	movs	r3, #1
 800c660:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c664:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	4798      	blx	r3
			k_busy_wait(ctx->config->cs->delay);
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	6858      	ldr	r0, [r3, #4]
 800c670:	f7fc ff8e 	bl	8009590 <z_impl_k_busy_wait>
}
 800c674:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800c676:	2300      	movs	r3, #0
 800c678:	e7f0      	b.n	800c65c <spi_stm32_cs_control+0x5c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c67a:	2301      	movs	r3, #1
 800c67c:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c680:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	4798      	blx	r3
 800c686:	e7f0      	b.n	800c66a <spi_stm32_cs_control+0x6a>
		value = (value != 0) ? 0 : 1;
 800c688:	2301      	movs	r3, #1
 800c68a:	e7d7      	b.n	800c63c <spi_stm32_cs_control+0x3c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c68c:	2301      	movs	r3, #1
 800c68e:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c692:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	4798      	blx	r3
 800c698:	e7ec      	b.n	800c674 <spi_stm32_cs_control+0x74>

0800c69a <spi_stm32_complete>:
{
 800c69a:	b570      	push	{r4, r5, r6, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	460e      	mov	r6, r1
	const struct spi_stm32_config *cfg = dev->config;
 800c6a0:	6842      	ldr	r2, [r0, #4]
	SPI_TypeDef *spi = cfg->spi;
 800c6a2:	6894      	ldr	r4, [r2, #8]
	struct spi_stm32_data *data = dev->data;
 800c6a4:	6905      	ldr	r5, [r0, #16]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800c6a6:	6863      	ldr	r3, [r4, #4]
 800c6a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ac:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800c6ae:	6863      	ldr	r3, [r4, #4]
 800c6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6b4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 800c6b6:	6863      	ldr	r3, [r4, #4]
 800c6b8:	f023 0320 	bic.w	r3, r3, #32
 800c6bc:	6063      	str	r3, [r4, #4]
	spi_stm32_cs_control(dev, false);
 800c6be:	2100      	movs	r1, #0
 800c6c0:	f7ff ff9e 	bl	800c600 <spi_stm32_cs_control>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800c6c4:	68a3      	ldr	r3, [r4, #8]
 800c6c6:	f013 0f01 	tst.w	r3, #1
 800c6ca:	d001      	beq.n	800c6d0 <spi_stm32_complete+0x36>
  return (uint8_t)(READ_REG(SPIx->DR));
 800c6cc:	68e3      	ldr	r3, [r4, #12]
 800c6ce:	e7f9      	b.n	800c6c4 <spi_stm32_complete+0x2a>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 800c6d0:	6823      	ldr	r3, [r4, #0]
 800c6d2:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 800c6d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6da:	d015      	beq.n	800c708 <spi_stm32_complete+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 800c6dc:	68a3      	ldr	r3, [r4, #8]
 800c6de:	f013 0f20 	tst.w	r3, #32
 800c6e2:	d006      	beq.n	800c6f2 <spi_stm32_complete+0x58>
  tmpreg_sr = SPIx->SR;
 800c6e4:	68a3      	ldr	r3, [r4, #8]
 800c6e6:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 800c6e8:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f0:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f8:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 800c6fa:	63ae      	str	r6, [r5, #56]	; 0x38
	k_sem_give(&ctx->sync);
 800c6fc:	f105 0020 	add.w	r0, r5, #32
	z_impl_k_sem_give(sem);
 800c700:	f7fc f828 	bl	8008754 <z_impl_k_sem_give>
}
 800c704:	b002      	add	sp, #8
 800c706:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800c708:	68a3      	ldr	r3, [r4, #8]
 800c70a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c70e:	d1fb      	bne.n	800c708 <spi_stm32_complete+0x6e>
 800c710:	e7e4      	b.n	800c6dc <spi_stm32_complete+0x42>

0800c712 <spi_stm32_isr>:
{
 800c712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c714:	4604      	mov	r4, r0
	const struct spi_stm32_config *cfg = dev->config;
 800c716:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800c718:	6906      	ldr	r6, [r0, #16]
	SPI_TypeDef *spi = cfg->spi;
 800c71a:	689f      	ldr	r7, [r3, #8]
	err = spi_stm32_get_err(spi);
 800c71c:	4638      	mov	r0, r7
 800c71e:	f7f8 fd7d 	bl	800521c <spi_stm32_get_err>
	if (err) {
 800c722:	4605      	mov	r5, r0
 800c724:	b968      	cbnz	r0, 800c742 <spi_stm32_isr+0x30>
	if (spi_stm32_transfer_ongoing(data)) {
 800c726:	4630      	mov	r0, r6
 800c728:	f7ff fded 	bl	800c306 <spi_stm32_transfer_ongoing>
 800c72c:	b970      	cbnz	r0, 800c74c <spi_stm32_isr+0x3a>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 800c72e:	b91d      	cbnz	r5, 800c738 <spi_stm32_isr+0x26>
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff fde8 	bl	800c306 <spi_stm32_transfer_ongoing>
 800c736:	b918      	cbnz	r0, 800c740 <spi_stm32_isr+0x2e>
		spi_stm32_complete(dev, err);
 800c738:	4629      	mov	r1, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	f7ff ffad 	bl	800c69a <spi_stm32_complete>
}
 800c740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		spi_stm32_complete(dev, err);
 800c742:	4601      	mov	r1, r0
 800c744:	4620      	mov	r0, r4
 800c746:	f7ff ffa8 	bl	800c69a <spi_stm32_complete>
		return;
 800c74a:	e7f9      	b.n	800c740 <spi_stm32_isr+0x2e>
		err = spi_stm32_shift_frames(spi, data);
 800c74c:	4631      	mov	r1, r6
 800c74e:	4638      	mov	r0, r7
 800c750:	f7ff ff46 	bl	800c5e0 <spi_stm32_shift_frames>
 800c754:	4605      	mov	r5, r0
 800c756:	e7ea      	b.n	800c72e <spi_stm32_isr+0x1c>

0800c758 <spi_stm32_transceive>:
{
 800c758:	b510      	push	{r4, lr}
 800c75a:	b082      	sub	sp, #8
	return transceive(dev, config, tx_bufs, rx_bufs, false, NULL);
 800c75c:	2400      	movs	r4, #0
 800c75e:	9401      	str	r4, [sp, #4]
 800c760:	9400      	str	r4, [sp, #0]
 800c762:	f7f8 fd8b 	bl	800527c <transceive>
}
 800c766:	b002      	add	sp, #8
 800c768:	bd10      	pop	{r4, pc}

0800c76a <spi_stm32_release>:
{
 800c76a:	b510      	push	{r4, lr}
	struct spi_stm32_data *data = DEV_DATA(dev);
 800c76c:	6904      	ldr	r4, [r0, #16]
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	b1c3      	cbz	r3, 800c7a4 <spi_stm32_release+0x3a>
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	b1b3      	cbz	r3, 800c7a4 <spi_stm32_release+0x3a>
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	b1a2      	cbz	r2, 800c7a4 <spi_stm32_release+0x3a>
			k_busy_wait(ctx->config->cs->delay);
 800c77a:	6858      	ldr	r0, [r3, #4]
	z_impl_k_busy_wait(usec_to_wait);
 800c77c:	f7fc ff08 	bl	8009590 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	7a19      	ldrb	r1, [r3, #8]
	const struct gpio_driver_data *const data =
 800c788:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	2301      	movs	r3, #1
 800c78e:	408b      	lsls	r3, r1
 800c790:	421a      	tst	r2, r3
 800c792:	d10b      	bne.n	800c7ac <spi_stm32_release+0x42>
 800c794:	2300      	movs	r3, #0
	if (value != 0)	{
 800c796:	b15b      	cbz	r3, 800c7b0 <spi_stm32_release+0x46>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c798:	2301      	movs	r3, #1
 800c79a:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c79e:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	4798      	blx	r3
 800c7a4:	6923      	ldr	r3, [r4, #16]
	if (!k_sem_count_get(&ctx->lock)) {
 800c7a6:	b153      	cbz	r3, 800c7be <spi_stm32_release+0x54>
}
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	bd10      	pop	{r4, pc}
		value = (value != 0) ? 0 : 1;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e7f2      	b.n	800c796 <spi_stm32_release+0x2c>
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
 800c7b6:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
 800c7b8:	691b      	ldr	r3, [r3, #16]
 800c7ba:	4798      	blx	r3
	return gpio_pin_set_raw(port, pin, value);
 800c7bc:	e7f2      	b.n	800c7a4 <spi_stm32_release+0x3a>
		ctx->owner = NULL;
 800c7be:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
 800c7c0:	f104 0008 	add.w	r0, r4, #8
	z_impl_k_sem_give(sem);
 800c7c4:	f7fb ffc6 	bl	8008754 <z_impl_k_sem_give>
}
 800c7c8:	e7ee      	b.n	800c7a8 <spi_stm32_release+0x3e>

0800c7ca <timer_work_handler>:
{
 800c7ca:	b508      	push	{r3, lr}
	TimerIrqHandler();
 800c7cc:	f7f9 fcdc 	bl	8006188 <TimerIrqHandler>
}
 800c7d0:	bd08      	pop	{r3, pc}

0800c7d2 <RtcGetTimerValue>:
{
 800c7d2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 800c7d4:	f000 fdd7 	bl	800d386 <z_impl_k_uptime_ticks>
 800c7d8:	220a      	movs	r2, #10
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f7f4 f8fe 	bl	80009dc <__aeabi_uldivmod>
}
 800c7e0:	bd08      	pop	{r3, pc}

0800c7e2 <RtcGetMinimumTimeout>:
}
 800c7e2:	2001      	movs	r0, #1
 800c7e4:	4770      	bx	lr

0800c7e6 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
 800c7e6:	b508      	push	{r3, lr}
			return t * ((uint64_t)to_hz / from_hz);
 800c7e8:	0f81      	lsrs	r1, r0, #30
 800c7ea:	0083      	lsls	r3, r0, #2
 800c7ec:	1818      	adds	r0, r3, r0
 800c7ee:	f141 0100 	adc.w	r1, r1, #0
 800c7f2:	1800      	adds	r0, r0, r0
 800c7f4:	4149      	adcs	r1, r1
	return z_impl_k_sleep(timeout);
 800c7f6:	f7fc fcef 	bl	80091d8 <z_impl_k_sleep>
	k_sleep(K_MSEC(ms));
}
 800c7fa:	bd08      	pop	{r3, pc}

0800c7fc <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
 800c7fc:	4770      	bx	lr

0800c7fe <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
{
	return tick;
}
 800c7fe:	4770      	bx	lr

0800c800 <BoardCriticalSectionBegin>:
	__asm__ volatile(
 800c800:	f04f 0210 	mov.w	r2, #16
 800c804:	f3ef 8311 	mrs	r3, BASEPRI
 800c808:	f382 8812 	msr	BASEPRI_MAX, r2
 800c80c:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
 800c810:	6003      	str	r3, [r0, #0]
}
 800c812:	4770      	bx	lr

0800c814 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
 800c814:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
}
 800c81e:	4770      	bx	lr

0800c820 <clamp_int8>:
	if (x < min) {
 800c820:	4288      	cmp	r0, r1
 800c822:	db03      	blt.n	800c82c <clamp_int8+0xc>
	} else if (x > max) {
 800c824:	4290      	cmp	r0, r2
 800c826:	dd02      	ble.n	800c82e <clamp_int8+0xe>
		return max;
 800c828:	4610      	mov	r0, r2
 800c82a:	4770      	bx	lr
		return min;
 800c82c:	4608      	mov	r0, r1
}
 800c82e:	4770      	bx	lr

0800c830 <SX1276CheckRfFrequency>:
}
 800c830:	2001      	movs	r0, #1
 800c832:	4770      	bx	lr

0800c834 <sx127x_antenna_configure>:
}
 800c834:	2000      	movs	r0, #0
 800c836:	4770      	bx	lr

0800c838 <SX1276GetBoardTcxoWakeupTime>:
}
 800c838:	2000      	movs	r0, #0
 800c83a:	4770      	bx	lr

0800c83c <SX1276SetAntSwLowPower>:
}
 800c83c:	4770      	bx	lr

0800c83e <SX1276SetBoardTcxo>:
}
 800c83e:	4770      	bx	lr

0800c840 <SX1276SetAntSw>:
}
 800c840:	4770      	bx	lr

0800c842 <sx127x_read>:
{
 800c842:	b508      	push	{r3, lr}
 800c844:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr, false, data, len);
 800c846:	460a      	mov	r2, r1
 800c848:	2100      	movs	r1, #0
 800c84a:	f7f9 f929 	bl	8005aa0 <sx127x_transceive>
}
 800c84e:	bd08      	pop	{r3, pc}

0800c850 <sx127x_write>:
{
 800c850:	b508      	push	{r3, lr}
 800c852:	4613      	mov	r3, r2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
 800c854:	460a      	mov	r2, r1
 800c856:	2101      	movs	r1, #1
 800c858:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800c85c:	f7f9 f920 	bl	8005aa0 <sx127x_transceive>
}
 800c860:	bd08      	pop	{r3, pc}

0800c862 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c862:	e004      	b.n	800c86e <memcpy1+0xc>
    {
        *dst++ = *src++;
 800c864:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c868:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800c86c:	461a      	mov	r2, r3
 800c86e:	1e53      	subs	r3, r2, #1
 800c870:	b29b      	uxth	r3, r3
 800c872:	2a00      	cmp	r2, #0
 800c874:	d1f6      	bne.n	800c864 <memcpy1+0x2>
    }
}
 800c876:	4770      	bx	lr

0800c878 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 800c87c:	f7ff ffb1 	bl	800c7e2 <RtcGetMinimumTimeout>
 800c880:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 800c882:	2301      	movs	r3, #1
 800c884:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800c886:	6826      	ldr	r6, [r4, #0]
 800c888:	f7f8 fe34 	bl	80054f4 <RtcGetTimerElapsedTime>
 800c88c:	4428      	add	r0, r5
 800c88e:	4286      	cmp	r6, r0
 800c890:	d303      	bcc.n	800c89a <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 800c892:	6820      	ldr	r0, [r4, #0]
 800c894:	f7f8 fe44 	bl	8005520 <RtcSetAlarm>
}
 800c898:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800c89a:	f7f8 fe2b 	bl	80054f4 <RtcGetTimerElapsedTime>
 800c89e:	4405      	add	r5, r0
 800c8a0:	6025      	str	r5, [r4, #0]
 800c8a2:	e7f6      	b.n	800c892 <TimerSetTimeout+0x1a>

0800c8a4 <TimerInit>:
    obj->Timestamp = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 800c8a8:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 800c8aa:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 800c8ac:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 800c8ae:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 800c8b0:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 800c8b2:	6143      	str	r3, [r0, #20]
}
 800c8b4:	4770      	bx	lr

0800c8b6 <TimerSetValue>:
{
 800c8b6:	b538      	push	{r3, r4, r5, lr}
 800c8b8:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	f7ff ff9e 	bl	800c7fc <RtcMs2Tick>
 800c8c0:	4605      	mov	r5, r0
    TimerStop( obj );
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f7f9 fca4 	bl	8006210 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 800c8c8:	f7ff ff8b 	bl	800c7e2 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 800c8cc:	4285      	cmp	r5, r0
 800c8ce:	d300      	bcc.n	800c8d2 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 800c8d0:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 800c8d2:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 800c8d4:	6060      	str	r0, [r4, #4]
}
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}

0800c8d8 <TimerGetCurrentTime>:
{
 800c8d8:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 800c8da:	f7ff ff7a 	bl	800c7d2 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 800c8de:	f7ff ff8e 	bl	800c7fe <RtcTick2Ms>
}
 800c8e2:	bd08      	pop	{r3, pc}

0800c8e4 <TimerGetElapsedTime>:
{
 800c8e4:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	b908      	cbnz	r0, 800c8ee <TimerGetElapsedTime+0xa>
}
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 800c8ee:	f7ff ff70 	bl	800c7d2 <RtcGetTimerValue>
 800c8f2:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff ff81 	bl	800c7fc <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 800c8fa:	1a28      	subs	r0, r5, r0
 800c8fc:	f7ff ff7f 	bl	800c7fe <RtcTick2Ms>
 800c900:	4604      	mov	r4, r0
 800c902:	e7f2      	b.n	800c8ea <TimerGetElapsedTime+0x6>

0800c904 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800c904:	b508      	push	{r3, lr}
    DelayMsMcu( ms );
 800c906:	f7ff ff6e 	bl	800c7e6 <DelayMsMcu>
}
 800c90a:	bd08      	pop	{r3, pc}

0800c90c <SX1276ConvertPllStepToFreqInHz>:
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c90c:	0a01      	lsrs	r1, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c90e:	f643 5209 	movw	r2, #15625	; 0x3d09
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c912:	b2c3      	uxtb	r3, r0
 800c914:	fb02 f303 	mul.w	r3, r2, r3
 800c918:	3380      	adds	r3, #128	; 0x80
 800c91a:	0a1b      	lsrs	r3, r3, #8
}
 800c91c:	fb02 3001 	mla	r0, r2, r1, r3
 800c920:	4770      	bx	lr

0800c922 <SX1276GetGfskTimeOnAirNumerator>:
    return ( preambleLen << 3 ) +
 800c922:	00c0      	lsls	r0, r0, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c924:	b941      	cbnz	r1, 800c938 <SX1276GetGfskTimeOnAirNumerator+0x16>
 800c926:	2108      	movs	r1, #8
    return ( preambleLen << 3 ) +
 800c928:	4408      	add	r0, r1
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c92a:	b13b      	cbz	r3, 800c93c <SX1276GetGfskTimeOnAirNumerator+0x1a>
 800c92c:	2302      	movs	r3, #2
               ( 0 ) + // Address filter size
 800c92e:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 800c930:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
}
 800c934:	3018      	adds	r0, #24
 800c936:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c938:	2100      	movs	r1, #0
 800c93a:	e7f5      	b.n	800c928 <SX1276GetGfskTimeOnAirNumerator+0x6>
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c93c:	2300      	movs	r3, #0
 800c93e:	e7f6      	b.n	800c92e <SX1276GetGfskTimeOnAirNumerator+0xc>

0800c940 <SX1276GetLoRaTimeOnAirNumerator>:
{
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800c946:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800c94a:	3204      	adds	r2, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c94c:	f1a1 0c05 	sub.w	ip, r1, #5
 800c950:	f1bc 0f01 	cmp.w	ip, #1
 800c954:	d932      	bls.n	800c9bc <SX1276GetLoRaTimeOnAirNumerator+0x7c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c956:	b918      	cbnz	r0, 800c960 <SX1276GetLoRaTimeOnAirNumerator+0x20>
 800c958:	f1a1 060b 	sub.w	r6, r1, #11
 800c95c:	2e01      	cmp	r6, #1
 800c95e:	d935      	bls.n	800c9cc <SX1276GetLoRaTimeOnAirNumerator+0x8c>
 800c960:	2801      	cmp	r0, #1
 800c962:	d02f      	beq.n	800c9c4 <SX1276GetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800c964:	2600      	movs	r6, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c966:	f89d e014 	ldrb.w	lr, [sp, #20]
 800c96a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800c96e:	b38d      	cbz	r5, 800c9d4 <SX1276GetLoRaTimeOnAirNumerator+0x94>
 800c970:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c974:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800c976:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800c978:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800c97c:	b36c      	cbz	r4, 800c9da <SX1276GetLoRaTimeOnAirNumerator+0x9a>
 800c97e:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800c982:	44f4      	add	ip, lr
    if( datarate <= 6 )
 800c984:	2906      	cmp	r1, #6
 800c986:	d904      	bls.n	800c992 <SX1276GetLoRaTimeOnAirNumerator+0x52>
        ceilNumerator += 8;
 800c988:	f10c 0c08 	add.w	ip, ip, #8
        if( lowDatareOptimize == true )
 800c98c:	b10e      	cbz	r6, 800c992 <SX1276GetLoRaTimeOnAirNumerator+0x52>
            ceilDenominator = 4 * ( datarate - 2 );
 800c98e:	1e88      	subs	r0, r1, #2
 800c990:	0080      	lsls	r0, r0, #2
    if( ceilNumerator < 0 )
 800c992:	f1bc 0f00 	cmp.w	ip, #0
 800c996:	db23      	blt.n	800c9e0 <SX1276GetLoRaTimeOnAirNumerator+0xa0>
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c998:	4484      	add	ip, r0
 800c99a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c99e:	fb9c fcf0 	sdiv	ip, ip, r0
 800c9a2:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800c9a6:	f103 000c 	add.w	r0, r3, #12
    if( datarate <= 6 )
 800c9aa:	2906      	cmp	r1, #6
 800c9ac:	d801      	bhi.n	800c9b2 <SX1276GetLoRaTimeOnAirNumerator+0x72>
        intermediate += 2;
 800c9ae:	f103 000e 	add.w	r0, r3, #14
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c9b2:	0080      	lsls	r0, r0, #2
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	3902      	subs	r1, #2
}
 800c9b8:	4088      	lsls	r0, r1
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800c9bc:	2b0b      	cmp	r3, #11
 800c9be:	d8ca      	bhi.n	800c956 <SX1276GetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800c9c0:	230c      	movs	r3, #12
 800c9c2:	e7c8      	b.n	800c956 <SX1276GetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c9c4:	290c      	cmp	r1, #12
 800c9c6:	d003      	beq.n	800c9d0 <SX1276GetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800c9c8:	2600      	movs	r6, #0
 800c9ca:	e7cc      	b.n	800c966 <SX1276GetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800c9cc:	2601      	movs	r6, #1
 800c9ce:	e7ca      	b.n	800c966 <SX1276GetLoRaTimeOnAirNumerator+0x26>
 800c9d0:	2601      	movs	r6, #1
 800c9d2:	e7c8      	b.n	800c966 <SX1276GetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800c9d4:	f04f 0c00 	mov.w	ip, #0
 800c9d8:	e7cc      	b.n	800c974 <SX1276GetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800c9da:	f04f 0c14 	mov.w	ip, #20
 800c9de:	e7d0      	b.n	800c982 <SX1276GetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800c9e0:	f04f 0c00 	mov.w	ip, #0
 800c9e4:	e7d8      	b.n	800c998 <SX1276GetLoRaTimeOnAirNumerator+0x58>

0800c9e6 <SX1276ReadFifo>:
{
 800c9e6:	b508      	push	{r3, lr}
 800c9e8:	460a      	mov	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	f7f9 f99b 	bl	8005d28 <SX1276ReadBuffer>
}
 800c9f2:	bd08      	pop	{r3, pc}

0800c9f4 <SX1276WriteFifo>:
{
 800c9f4:	b508      	push	{r3, lr}
 800c9f6:	460a      	mov	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f7f9 fa98 	bl	8005f30 <SX1276WriteBuffer>
}
 800ca00:	bd08      	pop	{r3, pc}

0800ca02 <SX1276GetTimeOnAir>:
{
 800ca02:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca04:	b085      	sub	sp, #20
 800ca06:	460e      	mov	r6, r1
 800ca08:	4615      	mov	r5, r2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 800ca10:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 800ca14:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800ca18:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    switch( modem )
 800ca1c:	b148      	cbz	r0, 800ca32 <SX1276GetTimeOnAir+0x30>
 800ca1e:	2801      	cmp	r0, #1
 800ca20:	d010      	beq.n	800ca44 <SX1276GetTimeOnAir+0x42>
 800ca22:	2501      	movs	r5, #1
 800ca24:	2400      	movs	r4, #0
    return ( numerator + denominator - 1 ) / denominator;
 800ca26:	1960      	adds	r0, r4, r5
 800ca28:	3801      	subs	r0, #1
}
 800ca2a:	fbb0 f0f5 	udiv	r0, r0, r5
 800ca2e:	b005      	add	sp, #20
 800ca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800ca32:	463a      	mov	r2, r7
 800ca34:	4660      	mov	r0, ip
 800ca36:	f7ff ff74 	bl	800c922 <SX1276GetGfskTimeOnAirNumerator>
 800ca3a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ca3e:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800ca42:	e7f0      	b.n	800ca26 <SX1276GetTimeOnAir+0x24>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	9701      	str	r7, [sp, #4]
 800ca48:	9100      	str	r1, [sp, #0]
 800ca4a:	4663      	mov	r3, ip
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff ff76 	bl	800c940 <SX1276GetLoRaTimeOnAirNumerator>
 800ca54:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800ca58:	fb00 f404 	mul.w	r4, r0, r4
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7f9 fc53 	bl	8006308 <SX1276GetLoRaBandwidthInHz>
 800ca62:	4605      	mov	r5, r0
        break;
 800ca64:	e7df      	b.n	800ca26 <SX1276GetTimeOnAir+0x24>

0800ca66 <SX1276Write>:
{
 800ca66:	b500      	push	{lr}
 800ca68:	b083      	sub	sp, #12
 800ca6a:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f10d 0107 	add.w	r1, sp, #7
 800ca74:	f7f9 fa5c 	bl	8005f30 <SX1276WriteBuffer>
}
 800ca78:	b003      	add	sp, #12
 800ca7a:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca7e <SX1276Read>:
{
 800ca7e:	b500      	push	{lr}
 800ca80:	b083      	sub	sp, #12
    SX1276ReadBuffer( addr, &data, 1 );
 800ca82:	2201      	movs	r2, #1
 800ca84:	f10d 0107 	add.w	r1, sp, #7
 800ca88:	f7f9 f94e 	bl	8005d28 <SX1276ReadBuffer>
}
 800ca8c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ca90:	b003      	add	sp, #12
 800ca92:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca96 <SX1276SetOpMode>:
{
 800ca96:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
 800ca98:	4604      	mov	r4, r0
 800ca9a:	b970      	cbnz	r0, 800caba <SX1276SetOpMode+0x24>
        SX1276SetAntSwLowPower( true );
 800ca9c:	2001      	movs	r0, #1
 800ca9e:	f7ff fecd 	bl	800c83c <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800caa2:	2001      	movs	r0, #1
 800caa4:	f7ff ffeb 	bl	800ca7e <SX1276Read>
 800caa8:	b241      	sxtb	r1, r0
 800caaa:	f021 0107 	bic.w	r1, r1, #7
 800caae:	4321      	orrs	r1, r4
 800cab0:	b2c9      	uxtb	r1, r1
 800cab2:	2001      	movs	r0, #1
 800cab4:	f7ff ffd7 	bl	800ca66 <SX1276Write>
}
 800cab8:	bd10      	pop	{r4, pc}
        SX1276SetBoardTcxo( true );
 800caba:	2001      	movs	r0, #1
 800cabc:	f7ff febf 	bl	800c83e <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 800cac0:	2000      	movs	r0, #0
 800cac2:	f7ff febb 	bl	800c83c <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800cac6:	4620      	mov	r0, r4
 800cac8:	f7ff feba 	bl	800c840 <SX1276SetAntSw>
 800cacc:	e7e9      	b.n	800caa2 <SX1276SetOpMode+0xc>

0800cace <SX1276IsChannelFree>:
{
 800cace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad0:	4607      	mov	r7, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	4616      	mov	r6, r2
 800cad6:	461d      	mov	r5, r3
    SX1276SetSleep( );
 800cad8:	f7f9 ff64 	bl	80069a4 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800cadc:	2000      	movs	r0, #0
 800cade:	f7fa f9f7 	bl	8006ed0 <SX1276SetModem>
    SX1276SetChannel( freq );
 800cae2:	4638      	mov	r0, r7
 800cae4:	f7f9 fc3a 	bl	800635c <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cae8:	4620      	mov	r0, r4
 800caea:	f7f9 fbe5 	bl	80062b8 <GetFskBandwidthRegValue>
 800caee:	4604      	mov	r4, r0
 800caf0:	4601      	mov	r1, r0
 800caf2:	2012      	movs	r0, #18
 800caf4:	f7ff ffb7 	bl	800ca66 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800caf8:	4621      	mov	r1, r4
 800cafa:	2013      	movs	r0, #19
 800cafc:	f7ff ffb3 	bl	800ca66 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800cb00:	2005      	movs	r0, #5
 800cb02:	f7ff ffc8 	bl	800ca96 <SX1276SetOpMode>
    DelayMs( 1 );
 800cb06:	2001      	movs	r0, #1
 800cb08:	f7ff fefc 	bl	800c904 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 800cb0c:	f7ff fee4 	bl	800c8d8 <TimerGetCurrentTime>
 800cb10:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7ff fee6 	bl	800c8e4 <TimerGetElapsedTime>
 800cb18:	42a8      	cmp	r0, r5
 800cb1a:	d206      	bcs.n	800cb2a <SX1276IsChannelFree+0x5c>
        rssi = SX1276ReadRssi( MODEM_FSK );
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7fa f9af 	bl	8006e80 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800cb22:	42b0      	cmp	r0, r6
 800cb24:	ddf5      	ble.n	800cb12 <SX1276IsChannelFree+0x44>
            status = false;
 800cb26:	2400      	movs	r4, #0
 800cb28:	e000      	b.n	800cb2c <SX1276IsChannelFree+0x5e>
    bool status = true;
 800cb2a:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800cb2c:	f7f9 ff3a 	bl	80069a4 <SX1276SetSleep>
}
 800cb30:	4620      	mov	r0, r4
 800cb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb34 <SX1276Random>:
{
 800cb34:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
 800cb36:	2001      	movs	r0, #1
 800cb38:	f7fa f9ca 	bl	8006ed0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cb3c:	21ff      	movs	r1, #255	; 0xff
 800cb3e:	2011      	movs	r0, #17
 800cb40:	f7ff ff91 	bl	800ca66 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800cb44:	2005      	movs	r0, #5
 800cb46:	f7ff ffa6 	bl	800ca96 <SX1276SetOpMode>
    uint32_t rnd = 0;
 800cb4a:	2500      	movs	r5, #0
    for( i = 0; i < 32; i++ )
 800cb4c:	462c      	mov	r4, r5
 800cb4e:	e00b      	b.n	800cb68 <SX1276Random+0x34>
        DelayMs( 1 );
 800cb50:	2001      	movs	r0, #1
 800cb52:	f7ff fed7 	bl	800c904 <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cb56:	202c      	movs	r0, #44	; 0x2c
 800cb58:	f7ff ff91 	bl	800ca7e <SX1276Read>
 800cb5c:	f000 0001 	and.w	r0, r0, #1
 800cb60:	40a0      	lsls	r0, r4
 800cb62:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800cb64:	3401      	adds	r4, #1
 800cb66:	b2e4      	uxtb	r4, r4
 800cb68:	2c1f      	cmp	r4, #31
 800cb6a:	d9f1      	bls.n	800cb50 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800cb6c:	f7f9 ff1a 	bl	80069a4 <SX1276SetSleep>
}
 800cb70:	4628      	mov	r0, r5
 800cb72:	bd38      	pop	{r3, r4, r5, pc}

0800cb74 <SX1276GetWakeupTime>:
{
 800cb74:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 800cb76:	f7ff fe5f 	bl	800c838 <SX1276GetBoardTcxoWakeupTime>
}
 800cb7a:	3001      	adds	r0, #1
 800cb7c:	bd08      	pop	{r3, pc}

0800cb7e <uart_stm32_config_get>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 800cb7e:	6903      	ldr	r3, [r0, #16]
	cfg->baudrate = data->baud_rate;
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb84:	6843      	ldr	r3, [r0, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800cb8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb92:	d02f      	beq.n	800cbf4 <uart_stm32_config_get+0x76>
 800cb94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cb98:	d12e      	bne.n	800cbf8 <uart_stm32_config_get+0x7a>
 800cb9a:	2301      	movs	r3, #1
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800cb9c:	710b      	strb	r3, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cb9e:	6843      	ldr	r3, [r0, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 800cba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbac:	d028      	beq.n	800cc00 <uart_stm32_config_get+0x82>
 800cbae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbb2:	d027      	beq.n	800cc04 <uart_stm32_config_get+0x86>
 800cbb4:	b313      	cbz	r3, 800cbfc <uart_stm32_config_get+0x7e>
		return UART_CFG_STOP_BITS_2;
 800cbb6:	2303      	movs	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 800cbb8:	714b      	strb	r3, [r1, #5]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbba:	6843      	ldr	r3, [r0, #4]
 800cbbc:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800cbbe:	6813      	ldr	r3, [r2, #0]
 800cbc0:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 800cbc4:	6812      	ldr	r2, [r2, #0]
 800cbc6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	switch (db) {
 800cbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbce:	d01d      	beq.n	800cc0c <uart_stm32_config_get+0x8e>
 800cbd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbd4:	d11d      	bne.n	800cc12 <uart_stm32_config_get+0x94>
		if (p == LL_USART_PARITY_NONE) {
 800cbd6:	b1ba      	cbz	r2, 800cc08 <uart_stm32_config_get+0x8a>
			return UART_CFG_DATA_BITS_6;
 800cbd8:	2301      	movs	r3, #1
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800cbda:	718b      	strb	r3, [r1, #6]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cbdc:	6843      	ldr	r3, [r0, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800cbe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbea:	d019      	beq.n	800cc20 <uart_stm32_config_get+0xa2>
	return UART_CFG_FLOW_CTRL_NONE;
 800cbec:	2300      	movs	r3, #0
	cfg->flow_ctrl = uart_stm32_ll2cfg_hwctrl(
 800cbee:	71cb      	strb	r3, [r1, #7]
}
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	e7d1      	b.n	800cb9c <uart_stm32_config_get+0x1e>
		return UART_CFG_PARITY_NONE;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e7cf      	b.n	800cb9c <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_1;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e7db      	b.n	800cbb8 <uart_stm32_config_get+0x3a>
	switch (sb) {
 800cc00:	2300      	movs	r3, #0
 800cc02:	e7d9      	b.n	800cbb8 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800cc04:	2302      	movs	r3, #2
 800cc06:	e7d7      	b.n	800cbb8 <uart_stm32_config_get+0x3a>
			return UART_CFG_DATA_BITS_7;
 800cc08:	2302      	movs	r3, #2
 800cc0a:	e7e6      	b.n	800cbda <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800cc0c:	b922      	cbnz	r2, 800cc18 <uart_stm32_config_get+0x9a>
			return UART_CFG_DATA_BITS_9;
 800cc0e:	2304      	movs	r3, #4
 800cc10:	e7e3      	b.n	800cbda <uart_stm32_config_get+0x5c>
		if (p == LL_USART_PARITY_NONE) {
 800cc12:	b91a      	cbnz	r2, 800cc1c <uart_stm32_config_get+0x9e>
			return UART_CFG_DATA_BITS_8;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e7e0      	b.n	800cbda <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_8;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e7de      	b.n	800cbda <uart_stm32_config_get+0x5c>
			return UART_CFG_DATA_BITS_7;
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	e7dc      	b.n	800cbda <uart_stm32_config_get+0x5c>
		return UART_CFG_FLOW_CTRL_RTS_CTS;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e7e4      	b.n	800cbee <uart_stm32_config_get+0x70>

0800cc24 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cc24:	6843      	ldr	r3, [r0, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800cc28:	69da      	ldr	r2, [r3, #28]
 800cc2a:	f012 0f08 	tst.w	r2, #8
 800cc2e:	d001      	beq.n	800cc34 <uart_stm32_poll_in+0x10>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800cc30:	2208      	movs	r2, #8
 800cc32:	621a      	str	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800cc34:	69da      	ldr	r2, [r3, #28]
 800cc36:	f012 0f20 	tst.w	r2, #32
 800cc3a:	d003      	beq.n	800cc44 <uart_stm32_poll_in+0x20>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800cc3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	*c = (unsigned char)LL_USART_ReceiveData8(UartInstance);
 800cc3e:	700b      	strb	r3, [r1, #0]
	return 0;
 800cc40:	2000      	movs	r0, #0
 800cc42:	4770      	bx	lr
		return -1;
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800cc48:	4770      	bx	lr

0800cc4a <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cc4a:	6843      	ldr	r3, [r0, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800cc4e:	69da      	ldr	r2, [r3, #28]
 800cc50:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cc54:	d0fb      	beq.n	800cc4e <uart_stm32_poll_out+0x4>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800cc56:	b289      	uxth	r1, r1
 800cc58:	8519      	strh	r1, [r3, #40]	; 0x28
}
 800cc5a:	4770      	bx	lr

0800cc5c <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800cc5c:	6843      	ldr	r3, [r0, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800cc60:	69d8      	ldr	r0, [r3, #28]
 800cc62:	f010 0008 	ands.w	r0, r0, #8
 800cc66:	d000      	beq.n	800cc6a <uart_stm32_err_check+0xe>
		err |= UART_ERROR_OVERRUN;
 800cc68:	2001      	movs	r0, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800cc6a:	69da      	ldr	r2, [r3, #28]
 800cc6c:	f012 0f01 	tst.w	r2, #1
 800cc70:	d001      	beq.n	800cc76 <uart_stm32_err_check+0x1a>
		err |= UART_ERROR_PARITY;
 800cc72:	f040 0002 	orr.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800cc76:	69da      	ldr	r2, [r3, #28]
 800cc78:	f012 0f02 	tst.w	r2, #2
 800cc7c:	d001      	beq.n	800cc82 <uart_stm32_err_check+0x26>
		err |= UART_ERROR_FRAMING;
 800cc7e:	f040 0004 	orr.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 800cc82:	f010 0f01 	tst.w	r0, #1
 800cc86:	d001      	beq.n	800cc8c <uart_stm32_err_check+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800cc88:	2208      	movs	r2, #8
 800cc8a:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800cc8c:	f010 0f02 	tst.w	r0, #2
 800cc90:	d001      	beq.n	800cc96 <uart_stm32_err_check+0x3a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800cc92:	2201      	movs	r2, #1
 800cc94:	621a      	str	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 800cc96:	f010 0f04 	tst.w	r0, #4
 800cc9a:	d001      	beq.n	800cca0 <uart_stm32_err_check+0x44>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800cca0:	2204      	movs	r2, #4
 800cca2:	621a      	str	r2, [r3, #32]
}
 800cca4:	4770      	bx	lr

0800cca6 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800cca6:	680a      	ldr	r2, [r1, #0]
 800cca8:	0912      	lsrs	r2, r2, #4
 800ccaa:	3201      	adds	r2, #1
 800ccac:	fbb0 f0f2 	udiv	r0, r0, r2
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800ccb0:	684b      	ldr	r3, [r1, #4]
 800ccb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb6:	fb03 f000 	mul.w	r0, r3, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800ccba:	688b      	ldr	r3, [r1, #8]
 800ccbc:	0e5b      	lsrs	r3, r3, #25
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	005b      	lsls	r3, r3, #1
}
 800ccc2:	fbb0 f0f3 	udiv	r0, r0, r3
 800ccc6:	4770      	bx	lr

0800ccc8 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
 800ccc8:	b148      	cbz	r0, 800ccde <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
 800ccca:	68c3      	ldr	r3, [r0, #12]
 800cccc:	8818      	ldrh	r0, [r3, #0]
 800ccce:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800ccd2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ccd6:	bf14      	ite	ne
 800ccd8:	2000      	movne	r0, #0
 800ccda:	2001      	moveq	r0, #1
 800ccdc:	4770      	bx	lr
		return false;
 800ccde:	2000      	movs	r0, #0
}
 800cce0:	4770      	bx	lr

0800cce2 <arch_system_halt>:
	__asm__ volatile(
 800cce2:	f04f 0210 	mov.w	r2, #16
 800cce6:	f3ef 8311 	mrs	r3, BASEPRI
 800ccea:	f382 8812 	msr	BASEPRI_MAX, r2
 800ccee:	f3bf 8f6f 	isb	sy
	for (;;) {
 800ccf2:	e7fe      	b.n	800ccf2 <arch_system_halt+0x10>

0800ccf4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800ccf4:	6902      	ldr	r2, [r0, #16]
 800ccf6:	6943      	ldr	r3, [r0, #20]
 800ccf8:	431a      	orrs	r2, r3
 800ccfa:	f012 0203 	ands.w	r2, r2, #3
 800ccfe:	d10d      	bne.n	800cd1c <create_free_list+0x28>
	slab->free_list = NULL;
 800cd00:	2100      	movs	r1, #0
 800cd02:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 800cd04:	e005      	b.n	800cd12 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 800cd06:	6981      	ldr	r1, [r0, #24]
 800cd08:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 800cd0a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 800cd0c:	6901      	ldr	r1, [r0, #16]
 800cd0e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 800cd10:	3201      	adds	r2, #1
 800cd12:	68c1      	ldr	r1, [r0, #12]
 800cd14:	4291      	cmp	r1, r2
 800cd16:	d8f6      	bhi.n	800cd06 <create_free_list+0x12>
	return 0;
 800cd18:	2000      	movs	r0, #0
 800cd1a:	4770      	bx	lr
		return -EINVAL;
 800cd1c:	f06f 0015 	mvn.w	r0, #21
}
 800cd20:	4770      	bx	lr

0800cd22 <k_mem_slab_init>:
{
 800cd22:	b510      	push	{r4, lr}
 800cd24:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
 800cd26:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
 800cd28:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
 800cd2a:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
 800cd30:	7203      	strb	r3, [r0, #8]
	rc = create_free_list(slab);
 800cd32:	f7ff ffdf 	bl	800ccf4 <create_free_list>
	if (rc < 0) {
 800cd36:	2800      	cmp	r0, #0
 800cd38:	db01      	blt.n	800cd3e <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
 800cd3a:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
 800cd3c:	6064      	str	r4, [r4, #4]
}
 800cd3e:	bd10      	pop	{r4, pc}

0800cd40 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	4604      	mov	r4, r0
 800cd44:	460d      	mov	r5, r1
 800cd46:	f04f 0310 	mov.w	r3, #16
 800cd4a:	f3ef 8611 	mrs	r6, BASEPRI
 800cd4e:	f383 8812 	msr	BASEPRI_MAX, r3
 800cd52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 800cd56:	6983      	ldr	r3, [r0, #24]
 800cd58:	b163      	cbz	r3, 800cd74 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	69a2      	ldr	r2, [r4, #24]
 800cd5e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 800cd64:	69e3      	ldr	r3, [r4, #28]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 800cd6a:	f386 8811 	msr	BASEPRI, r6
 800cd6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 800cd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd74:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 800cd78:	f000 fa1a 	bl	800d1b0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d0ec      	beq.n	800cd5a <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 800cd80:	682a      	ldr	r2, [r5, #0]
 800cd82:	2100      	movs	r1, #0
 800cd84:	67c1      	str	r1, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 800cd86:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 800cd88:	f000 f94b 	bl	800d022 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7fb feec 	bl	8008b6c <z_reschedule>
			return;
 800cd94:	e7ed      	b.n	800cd72 <k_mem_slab_free+0x32>

0800cd96 <setup_thread_stack>:
{
 800cd96:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800cd98:	3207      	adds	r2, #7
 800cd9a:	f022 0207 	bic.w	r2, r2, #7
 800cd9e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 800cda2:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 800cda6:	6684      	str	r4, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
 800cda8:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
 800cdaa:	2200      	movs	r2, #0
 800cdac:	6702      	str	r2, [r0, #112]	; 0x70
}
 800cdae:	18c8      	adds	r0, r1, r3
 800cdb0:	bc10      	pop	{r4}
 800cdb2:	4770      	bx	lr

0800cdb4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb4:	f3ef 8005 	mrs	r0, IPSR
}
 800cdb8:	3800      	subs	r0, #0
 800cdba:	bf18      	it	ne
 800cdbc:	2001      	movne	r0, #1
 800cdbe:	4770      	bx	lr

0800cdc0 <z_impl_k_thread_name_set>:
}
 800cdc0:	f06f 0057 	mvn.w	r0, #87	; 0x57
 800cdc4:	4770      	bx	lr

0800cdc6 <k_thread_name_get>:
}
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	4770      	bx	lr

0800cdca <z_impl_k_thread_start>:
{
 800cdca:	b508      	push	{r3, lr}
	z_sched_start(thread);
 800cdcc:	f7fc f804 	bl	8008dd8 <z_sched_start>
}
 800cdd0:	bd08      	pop	{r3, pc}

0800cdd2 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 800cdd2:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 800cdd4:	2400      	movs	r4, #0
 800cdd6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 800cdd8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800cdda:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 800cddc:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 800cdde:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 800cde0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 800cde2:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 800cde4:	bc10      	pop	{r4}
 800cde6:	4770      	bx	lr

0800cde8 <z_impl_k_thread_create>:
{
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	b087      	sub	sp, #28
 800cdec:	4604      	mov	r4, r0
 800cdee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cdf0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 800cdf2:	2700      	movs	r7, #0
 800cdf4:	9705      	str	r7, [sp, #20]
 800cdf6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800cdf8:	9704      	str	r7, [sp, #16]
 800cdfa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cdfc:	9703      	str	r7, [sp, #12]
 800cdfe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ce00:	9702      	str	r7, [sp, #8]
 800ce02:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ce04:	9701      	str	r7, [sp, #4]
 800ce06:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800ce08:	9700      	str	r7, [sp, #0]
 800ce0a:	f7fb faa9 	bl	8008360 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 800ce0e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ce12:	bf08      	it	eq
 800ce14:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 800ce18:	d102      	bne.n	800ce20 <z_impl_k_thread_create+0x38>
}
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	b007      	add	sp, #28
 800ce1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 800ce20:	4632      	mov	r2, r6
 800ce22:	462b      	mov	r3, r5
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7fb fa8d 	bl	8008344 <schedule_new_thread>
 800ce2a:	e7f6      	b.n	800ce1a <z_impl_k_thread_create+0x32>

0800ce2c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 800ce2c:	b508      	push	{r3, lr}
	__asm__ volatile(
 800ce2e:	f04f 0210 	mov.w	r2, #16
 800ce32:	f3ef 8311 	mrs	r3, BASEPRI
 800ce36:	f382 8812 	msr	BASEPRI_MAX, r2
 800ce3a:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800ce3e:	f7f6 ff15 	bl	8003c6c <arch_cpu_idle>
 800ce42:	e7f4      	b.n	800ce2e <idle+0x2>

0800ce44 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
 800ce48:	f100 0508 	add.w	r5, r0, #8
 800ce4c:	f04f 0310 	mov.w	r3, #16
 800ce50:	f3ef 8611 	mrs	r6, BASEPRI
 800ce54:	f383 8812 	msr	BASEPRI_MAX, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	e005      	b.n	800ce6a <z_impl_k_msgq_purge+0x26>
 800ce5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ce62:	67da      	str	r2, [r3, #124]	; 0x7c
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 f8dc 	bl	800d022 <z_ready_thread>
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 f9a0 	bl	800d1b0 <z_unpend_first_thread>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d1f3      	bne.n	800ce5e <z_impl_k_msgq_purge+0x1a>
	}

	msgq->used_msgs = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	6263      	str	r3, [r4, #36]	; 0x24
	msgq->read_ptr = msgq->write_ptr;
 800ce7a:	6a23      	ldr	r3, [r4, #32]
 800ce7c:	61e3      	str	r3, [r4, #28]

	z_reschedule(&msgq->lock, key);
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	f7fb fe73 	bl	8008b6c <z_reschedule>
}
 800ce86:	bd70      	pop	{r4, r5, r6, pc}

0800ce88 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 800ce88:	4288      	cmp	r0, r1
 800ce8a:	da00      	bge.n	800ce8e <new_prio_for_inheritance+0x6>
 800ce8c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 800ce8e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 800ce92:	db01      	blt.n	800ce98 <new_prio_for_inheritance+0x10>
 800ce94:	4608      	mov	r0, r1
 800ce96:	4770      	bx	lr
 800ce98:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 800ce9c:	4770      	bx	lr

0800ce9e <adjust_owner_prio>:
{
 800ce9e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 800cea0:	6880      	ldr	r0, [r0, #8]
 800cea2:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800cea6:	428b      	cmp	r3, r1
 800cea8:	d101      	bne.n	800ceae <adjust_owner_prio+0x10>
	return false;
 800ceaa:	2000      	movs	r0, #0
}
 800ceac:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 800ceae:	f7fb ffe1 	bl	8008e74 <z_set_prio>
 800ceb2:	e7fb      	b.n	800ceac <adjust_owner_prio+0xe>

0800ceb4 <z_impl_k_mutex_init>:
{
 800ceb4:	4603      	mov	r3, r0
	mutex->owner = NULL;
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 800ceba:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 800cebc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 800cebe:	605b      	str	r3, [r3, #4]
}
 800cec0:	4770      	bx	lr

0800cec2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 800cec2:	b15a      	cbz	r2, 800cedc <z_impl_k_sem_init+0x1a>
 800cec4:	428a      	cmp	r2, r1
 800cec6:	d30c      	bcc.n	800cee2 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 800cec8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 800ceca:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 800cecc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 800cece:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 800ced0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 800ced4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 800ced6:	6143      	str	r3, [r0, #20]
	return 0;
 800ced8:	2000      	movs	r0, #0
 800ceda:	4770      	bx	lr
		return -EINVAL;
 800cedc:	f06f 0015 	mvn.w	r0, #21
 800cee0:	4770      	bx	lr
 800cee2:	f06f 0015 	mvn.w	r0, #21
}
 800cee6:	4770      	bx	lr

0800cee8 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 800cee8:	2300      	movs	r3, #0
 800ceea:	6003      	str	r3, [r0, #0]
 800ceec:	6043      	str	r3, [r0, #4]
 800ceee:	6083      	str	r3, [r0, #8]
 800cef0:	60c3      	str	r3, [r0, #12]
 800cef2:	6041      	str	r1, [r0, #4]
}
 800cef4:	4770      	bx	lr

0800cef6 <k_work_submit_to_queue>:
{
 800cef6:	b530      	push	{r4, r5, lr}
 800cef8:	b083      	sub	sp, #12
 800cefa:	9001      	str	r0, [sp, #4]
 800cefc:	4608      	mov	r0, r1
 800cefe:	f04f 0310 	mov.w	r3, #16
 800cf02:	f3ef 8511 	mrs	r5, BASEPRI
 800cf06:	f383 8812 	msr	BASEPRI_MAX, r3
 800cf0a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 800cf0e:	a901      	add	r1, sp, #4
 800cf10:	f7fb fc70 	bl	80087f4 <submit_to_queue_locked>
 800cf14:	4604      	mov	r4, r0
	__asm__ volatile(
 800cf16:	f385 8811 	msr	BASEPRI, r5
 800cf1a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	dc02      	bgt.n	800cf28 <k_work_submit_to_queue+0x32>
}
 800cf22:	4620      	mov	r0, r4
 800cf24:	b003      	add	sp, #12
 800cf26:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 800cf28:	f7fc f974 	bl	8009214 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d0f8      	beq.n	800cf22 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 800cf30:	f7fc f8c2 	bl	80090b8 <z_impl_k_yield>
	return ret;
 800cf34:	e7f5      	b.n	800cf22 <k_work_submit_to_queue+0x2c>

0800cf36 <thread_active_elsewhere>:
}
 800cf36:	2000      	movs	r0, #0
 800cf38:	4770      	bx	lr

0800cf3a <pended_on_thread>:
}
 800cf3a:	6880      	ldr	r0, [r0, #8]
 800cf3c:	4770      	bx	lr

0800cf3e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 800cf3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 800cf42:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 800cf46:	4283      	cmp	r3, r0
 800cf48:	d001      	beq.n	800cf4e <z_sched_prio_cmp+0x10>
		return b2 - b1;
 800cf4a:	1ac0      	subs	r0, r0, r3
 800cf4c:	4770      	bx	lr
	return 0;
 800cf4e:	2000      	movs	r0, #0
}
 800cf50:	4770      	bx	lr

0800cf52 <z_unpend_thread_no_timeout>:
{
 800cf52:	b538      	push	{r3, r4, r5, lr}
 800cf54:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800cf56:	2300      	movs	r3, #0
	__asm__ volatile(
 800cf58:	f04f 0210 	mov.w	r2, #16
 800cf5c:	f3ef 8511 	mrs	r5, BASEPRI
 800cf60:	f382 8812 	msr	BASEPRI_MAX, r2
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	e010      	b.n	800cf8c <z_unpend_thread_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f7ff ffe5 	bl	800cf3a <pended_on_thread>
 800cf70:	4621      	mov	r1, r4
 800cf72:	f000 f823 	bl	800cfbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800cf76:	7b63      	ldrb	r3, [r4, #13]
 800cf78:	f023 0302 	bic.w	r3, r3, #2
 800cf7c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800cf82:	f385 8811 	msr	BASEPRI, r5
 800cf86:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d0ec      	beq.n	800cf6a <z_unpend_thread_no_timeout+0x18>
}
 800cf90:	bd38      	pop	{r3, r4, r5, pc}

0800cf92 <z_reschedule_irqlock>:
{
 800cf92:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cf94:	4603      	mov	r3, r0
 800cf96:	b920      	cbnz	r0, 800cfa2 <z_reschedule_irqlock+0x10>
 800cf98:	f3ef 8205 	mrs	r2, IPSR
 800cf9c:	b942      	cbnz	r2, 800cfb0 <z_reschedule_irqlock+0x1e>
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	e000      	b.n	800cfa4 <z_reschedule_irqlock+0x12>
 800cfa2:	2200      	movs	r2, #0
	if (resched(key)) {
 800cfa4:	b932      	cbnz	r2, 800cfb4 <z_reschedule_irqlock+0x22>
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
}
 800cfae:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	e7f7      	b.n	800cfa4 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7f6 ff01 	bl	8003dbc <arch_swap>
	return ret;
 800cfba:	e7f8      	b.n	800cfae <z_reschedule_irqlock+0x1c>

0800cfbc <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
 800cfbc:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 800cfbe:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
 800cfc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800cfc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 800cfc8:	604b      	str	r3, [r1, #4]
}
 800cfca:	4770      	bx	lr

0800cfcc <z_unpend_thread>:
{
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800cfd0:	2300      	movs	r3, #0
	__asm__ volatile(
 800cfd2:	f04f 0210 	mov.w	r2, #16
 800cfd6:	f3ef 8511 	mrs	r5, BASEPRI
 800cfda:	f382 8812 	msr	BASEPRI_MAX, r2
 800cfde:	f3bf 8f6f 	isb	sy
 800cfe2:	e010      	b.n	800d006 <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f7ff ffa8 	bl	800cf3a <pended_on_thread>
 800cfea:	4621      	mov	r1, r4
 800cfec:	f7ff ffe6 	bl	800cfbc <z_priq_dumb_remove>
 800cff0:	7b63      	ldrb	r3, [r4, #13]
 800cff2:	f023 0302 	bic.w	r3, r3, #2
 800cff6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 800cffc:	f385 8811 	msr	BASEPRI, r5
 800d000:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d004:	2301      	movs	r3, #1
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0ec      	beq.n	800cfe4 <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
 800d00a:	f104 0018 	add.w	r0, r4, #24
 800d00e:	f000 f96d 	bl	800d2ec <z_abort_timeout>
}
 800d012:	bd38      	pop	{r3, r4, r5, pc}

0800d014 <z_priq_dumb_best>:
{
 800d014:	4603      	mov	r3, r0
	return list->head == list;
 800d016:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d018:	4283      	cmp	r3, r0
 800d01a:	d000      	beq.n	800d01e <z_priq_dumb_best+0xa>
}
 800d01c:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800d01e:	2000      	movs	r0, #0
	return thread;
 800d020:	e7fc      	b.n	800d01c <z_priq_dumb_best+0x8>

0800d022 <z_ready_thread>:
{
 800d022:	b538      	push	{r3, r4, r5, lr}
 800d024:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 800d026:	2300      	movs	r3, #0
	__asm__ volatile(
 800d028:	f04f 0210 	mov.w	r2, #16
 800d02c:	f3ef 8511 	mrs	r5, BASEPRI
 800d030:	f382 8812 	msr	BASEPRI_MAX, r2
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	e004      	b.n	800d044 <z_ready_thread+0x22>
	__asm__ volatile(
 800d03a:	f385 8811 	msr	BASEPRI, r5
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	2301      	movs	r3, #1
 800d044:	b943      	cbnz	r3, 800d058 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 800d046:	4620      	mov	r0, r4
 800d048:	f7ff ff75 	bl	800cf36 <thread_active_elsewhere>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	d1f4      	bne.n	800d03a <z_ready_thread+0x18>
			ready_thread(thread);
 800d050:	4620      	mov	r0, r4
 800d052:	f7fb fe81 	bl	8008d58 <ready_thread>
 800d056:	e7f0      	b.n	800d03a <z_ready_thread+0x18>
}
 800d058:	bd38      	pop	{r3, r4, r5, pc}

0800d05a <z_thread_timeout>:
{
 800d05a:	b570      	push	{r4, r5, r6, lr}
 800d05c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800d05e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 800d062:	2300      	movs	r3, #0
	__asm__ volatile(
 800d064:	f04f 0210 	mov.w	r2, #16
 800d068:	f3ef 8611 	mrs	r6, BASEPRI
 800d06c:	f382 8812 	msr	BASEPRI_MAX, r2
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	e011      	b.n	800d09a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800d076:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800d07a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800d07e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800d082:	f023 0310 	bic.w	r3, r3, #16
 800d086:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 800d08a:	4628      	mov	r0, r5
 800d08c:	f7fb fe64 	bl	8008d58 <ready_thread>
	__asm__ volatile(
 800d090:	f386 8811 	msr	BASEPRI, r6
 800d094:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d098:	2301      	movs	r3, #1
 800d09a:	b9ab      	cbnz	r3, 800d0c8 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 800d09c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 800d0a0:	f013 0f28 	tst.w	r3, #40	; 0x28
 800d0a4:	d1f4      	bne.n	800d090 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
 800d0a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0e3      	beq.n	800d076 <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f7ff ff43 	bl	800cf3a <pended_on_thread>
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7ff ff81 	bl	800cfbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800d0ba:	7b6b      	ldrb	r3, [r5, #13]
 800d0bc:	f023 0302 	bic.w	r3, r3, #2
 800d0c0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60ab      	str	r3, [r5, #8]
}
 800d0c6:	e7d6      	b.n	800d076 <z_thread_timeout+0x1c>
}
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}

0800d0ca <add_to_waitq_locked>:
{
 800d0ca:	b570      	push	{r4, r5, r6, lr}
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	460e      	mov	r6, r1
	unready_thread(thread);
 800d0d0:	f7fb fea0 	bl	8008e14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 800d0d4:	7b6b      	ldrb	r3, [r5, #13]
 800d0d6:	f043 0302 	orr.w	r3, r3, #2
 800d0da:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 800d0dc:	b1b6      	cbz	r6, 800d10c <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 800d0de:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 800d0e0:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800d0e2:	42a6      	cmp	r6, r4
 800d0e4:	d019      	beq.n	800d11a <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800d0e6:	b164      	cbz	r4, 800d102 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	f7ff ff27 	bl	800cf3e <z_sched_prio_cmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dc0c      	bgt.n	800d10e <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800d0f4:	b12c      	cbz	r4, 800d102 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 800d0f6:	6873      	ldr	r3, [r6, #4]
 800d0f8:	429c      	cmp	r4, r3
 800d0fa:	d002      	beq.n	800d102 <add_to_waitq_locked+0x38>
 800d0fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800d0fe:	2c00      	cmp	r4, #0
 800d100:	d1f1      	bne.n	800d0e6 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 800d102:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 800d104:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 800d106:	606b      	str	r3, [r5, #4]
	tail->next = node;
 800d108:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800d10a:	6075      	str	r5, [r6, #4]
}
 800d10c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 800d10e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 800d110:	606b      	str	r3, [r5, #4]
	node->next = successor;
 800d112:	602c      	str	r4, [r5, #0]
	prev->next = node;
 800d114:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 800d116:	6065      	str	r5, [r4, #4]
}
 800d118:	e7f8      	b.n	800d10c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800d11a:	2400      	movs	r4, #0
 800d11c:	e7e3      	b.n	800d0e6 <add_to_waitq_locked+0x1c>

0800d11e <pend>:
{
 800d11e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d122:	4605      	mov	r5, r0
 800d124:	460e      	mov	r6, r1
 800d126:	4691      	mov	r9, r2
 800d128:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 800d12a:	2400      	movs	r4, #0
	__asm__ volatile(
 800d12c:	f04f 0310 	mov.w	r3, #16
 800d130:	f3ef 8711 	mrs	r7, BASEPRI
 800d134:	f383 8812 	msr	BASEPRI_MAX, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	e008      	b.n	800d150 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
 800d13e:	4631      	mov	r1, r6
 800d140:	4628      	mov	r0, r5
 800d142:	f7ff ffc2 	bl	800d0ca <add_to_waitq_locked>
	__asm__ volatile(
 800d146:	f387 8811 	msr	BASEPRI, r7
 800d14a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d14e:	2401      	movs	r4, #1
 800d150:	2c00      	cmp	r4, #0
 800d152:	d0f4      	beq.n	800d13e <pend+0x20>
	add_thread_timeout(thread, timeout);
 800d154:	464a      	mov	r2, r9
 800d156:	4643      	mov	r3, r8
 800d158:	4628      	mov	r0, r5
 800d15a:	f7fb fcb3 	bl	8008ac4 <add_thread_timeout>
}
 800d15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d162 <z_unpend1_no_timeout>:
{
 800d162:	b570      	push	{r4, r5, r6, lr}
 800d164:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800d166:	2300      	movs	r3, #0
	__asm__ volatile(
 800d168:	f04f 0210 	mov.w	r2, #16
 800d16c:	f3ef 8611 	mrs	r6, BASEPRI
 800d170:	f382 8812 	msr	BASEPRI_MAX, r2
 800d174:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800d178:	461c      	mov	r4, r3
 800d17a:	e004      	b.n	800d186 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
 800d17c:	f386 8811 	msr	BASEPRI, r6
 800d180:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d184:	2301      	movs	r3, #1
 800d186:	b98b      	cbnz	r3, 800d1ac <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 800d188:	4628      	mov	r0, r5
 800d18a:	f7ff ff43 	bl	800d014 <z_priq_dumb_best>
		if (thread != NULL) {
 800d18e:	4604      	mov	r4, r0
 800d190:	2800      	cmp	r0, #0
 800d192:	d0f3      	beq.n	800d17c <z_unpend1_no_timeout+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800d194:	f7ff fed1 	bl	800cf3a <pended_on_thread>
 800d198:	4621      	mov	r1, r4
 800d19a:	f7ff ff0f 	bl	800cfbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800d19e:	7b63      	ldrb	r3, [r4, #13]
 800d1a0:	f023 0302 	bic.w	r3, r3, #2
 800d1a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60a3      	str	r3, [r4, #8]
}
 800d1aa:	e7e7      	b.n	800d17c <z_unpend1_no_timeout+0x1a>
}
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	bd70      	pop	{r4, r5, r6, pc}

0800d1b0 <z_unpend_first_thread>:
{
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
 800d1b4:	2300      	movs	r3, #0
	__asm__ volatile(
 800d1b6:	f04f 0210 	mov.w	r2, #16
 800d1ba:	f3ef 8611 	mrs	r6, BASEPRI
 800d1be:	f382 8812 	msr	BASEPRI_MAX, r2
 800d1c2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 800d1c6:	461c      	mov	r4, r3
 800d1c8:	e004      	b.n	800d1d4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
 800d1ca:	f386 8811 	msr	BASEPRI, r6
 800d1ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	b9ab      	cbnz	r3, 800d202 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f7ff ff1c 	bl	800d014 <z_priq_dumb_best>
		if (thread != NULL) {
 800d1dc:	4604      	mov	r4, r0
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d0f3      	beq.n	800d1ca <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800d1e2:	f7ff feaa 	bl	800cf3a <pended_on_thread>
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	f7ff fee8 	bl	800cfbc <z_priq_dumb_remove>
 800d1ec:	7b63      	ldrb	r3, [r4, #13]
 800d1ee:	f023 0302 	bic.w	r3, r3, #2
 800d1f2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60a3      	str	r3, [r4, #8]
 800d1f8:	f104 0018 	add.w	r0, r4, #24
 800d1fc:	f000 f876 	bl	800d2ec <z_abort_timeout>
 800d200:	e7e3      	b.n	800d1ca <z_unpend_first_thread+0x1a>
}
 800d202:	4620      	mov	r0, r4
 800d204:	bd70      	pop	{r4, r5, r6, pc}

0800d206 <z_impl_k_wakeup>:
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800d206:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_pending(thread)) {
 800d208:	f013 0f02 	tst.w	r3, #2
 800d20c:	d000      	beq.n	800d210 <z_impl_k_wakeup+0xa>
 800d20e:	4770      	bx	lr
{
 800d210:	b510      	push	{r4, lr}
 800d212:	4604      	mov	r4, r0
 800d214:	3018      	adds	r0, #24
 800d216:	f000 f869 	bl	800d2ec <z_abort_timeout>
	if (z_abort_thread_timeout(thread) < 0) {
 800d21a:	2800      	cmp	r0, #0
 800d21c:	da02      	bge.n	800d224 <z_impl_k_wakeup+0x1e>
		if (thread->base.thread_state != _THREAD_SUSPENDED) {
 800d21e:	7b63      	ldrb	r3, [r4, #13]
 800d220:	2b10      	cmp	r3, #16
 800d222:	d109      	bne.n	800d238 <z_impl_k_wakeup+0x32>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800d224:	7b63      	ldrb	r3, [r4, #13]
 800d226:	f023 0310 	bic.w	r3, r3, #16
 800d22a:	7363      	strb	r3, [r4, #13]
	z_ready_thread(thread);
 800d22c:	4620      	mov	r0, r4
 800d22e:	f7ff fef8 	bl	800d022 <z_ready_thread>
 800d232:	f3ef 8305 	mrs	r3, IPSR
	if (!arch_is_in_isr()) {
 800d236:	b103      	cbz	r3, 800d23a <z_impl_k_wakeup+0x34>
}
 800d238:	bd10      	pop	{r4, pc}
	__asm__ volatile(
 800d23a:	f04f 0310 	mov.w	r3, #16
 800d23e:	f3ef 8011 	mrs	r0, BASEPRI
 800d242:	f383 8812 	msr	BASEPRI_MAX, r3
 800d246:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800d24a:	f7ff fea2 	bl	800cf92 <z_reschedule_irqlock>
}
 800d24e:	e7f3      	b.n	800d238 <z_impl_k_wakeup+0x32>

0800d250 <z_sched_wake>:
{
 800d250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d254:	4605      	mov	r5, r0
 800d256:	4688      	mov	r8, r1
 800d258:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 800d25a:	2300      	movs	r3, #0
 800d25c:	f04f 0210 	mov.w	r2, #16
 800d260:	f3ef 8611 	mrs	r6, BASEPRI
 800d264:	f382 8812 	msr	BASEPRI_MAX, r2
 800d268:	f3bf 8f6f 	isb	sy
	bool ret = false;
 800d26c:	4699      	mov	r9, r3
 800d26e:	e004      	b.n	800d27a <z_sched_wake+0x2a>
	__asm__ volatile(
 800d270:	f386 8811 	msr	BASEPRI, r6
 800d274:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 800d278:	2301      	movs	r3, #1
 800d27a:	b9eb      	cbnz	r3, 800d2b8 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 800d27c:	4628      	mov	r0, r5
 800d27e:	f7ff fec9 	bl	800d014 <z_priq_dumb_best>
		if (thread != NULL) {
 800d282:	4604      	mov	r4, r0
 800d284:	2800      	cmp	r0, #0
 800d286:	d0f3      	beq.n	800d270 <z_sched_wake+0x20>
 800d288:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
 800d28c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 800d28e:	f7ff fe54 	bl	800cf3a <pended_on_thread>
 800d292:	4621      	mov	r1, r4
 800d294:	f7ff fe92 	bl	800cfbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800d298:	7b63      	ldrb	r3, [r4, #13]
 800d29a:	f023 0302 	bic.w	r3, r3, #2
 800d29e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	60a3      	str	r3, [r4, #8]
 800d2a4:	f104 0018 	add.w	r0, r4, #24
 800d2a8:	f000 f820 	bl	800d2ec <z_abort_timeout>
			ready_thread(thread);
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f7fb fd53 	bl	8008d58 <ready_thread>
			ret = true;
 800d2b2:	f04f 0901 	mov.w	r9, #1
 800d2b6:	e7db      	b.n	800d270 <z_sched_wake+0x20>
}
 800d2b8:	4648      	mov	r0, r9
 800d2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d2be <remove_timeout>:
{
 800d2be:	b510      	push	{r4, lr}
 800d2c0:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 800d2c2:	f7fc f817 	bl	80092f4 <next>
 800d2c6:	b148      	cbz	r0, 800d2dc <remove_timeout+0x1e>
 800d2c8:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 800d2ca:	6920      	ldr	r0, [r4, #16]
 800d2cc:	6961      	ldr	r1, [r4, #20]
 800d2ce:	6913      	ldr	r3, [r2, #16]
 800d2d0:	181b      	adds	r3, r3, r0
 800d2d2:	6950      	ldr	r0, [r2, #20]
 800d2d4:	eb41 0100 	adc.w	r1, r1, r0
 800d2d8:	6113      	str	r3, [r2, #16]
 800d2da:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 800d2dc:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 800d2de:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 800d2e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d2e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 800d2e8:	6063      	str	r3, [r4, #4]
}
 800d2ea:	bd10      	pop	{r4, pc}

0800d2ec <z_abort_timeout>:
{
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 800d2f0:	2300      	movs	r3, #0
	__asm__ volatile(
 800d2f2:	f04f 0210 	mov.w	r2, #16
 800d2f6:	f3ef 8611 	mrs	r6, BASEPRI
 800d2fa:	f382 8812 	msr	BASEPRI_MAX, r2
 800d2fe:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 800d302:	f06f 0015 	mvn.w	r0, #21
 800d306:	e004      	b.n	800d312 <z_abort_timeout+0x26>
	__asm__ volatile(
 800d308:	f386 8811 	msr	BASEPRI, r6
 800d30c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d310:	2301      	movs	r3, #1
 800d312:	461d      	mov	r5, r3
 800d314:	b93b      	cbnz	r3, 800d326 <z_abort_timeout+0x3a>
	return node->next != NULL;
 800d316:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0f5      	beq.n	800d308 <z_abort_timeout+0x1c>
			remove_timeout(to);
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7ff ffce 	bl	800d2be <remove_timeout>
			ret = 0;
 800d322:	4628      	mov	r0, r5
 800d324:	e7f0      	b.n	800d308 <z_abort_timeout+0x1c>
}
 800d326:	bd70      	pop	{r4, r5, r6, pc}

0800d328 <z_set_timeout_expiry>:
{
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	4605      	mov	r5, r0
 800d32c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 800d32e:	2300      	movs	r3, #0
	__asm__ volatile(
 800d330:	f04f 0210 	mov.w	r2, #16
 800d334:	f3ef 8611 	mrs	r6, BASEPRI
 800d338:	f382 8812 	msr	BASEPRI_MAX, r2
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	e00a      	b.n	800d358 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 800d342:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 800d344:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800d348:	2801      	cmp	r0, #1
 800d34a:	dd00      	ble.n	800d34e <z_set_timeout_expiry+0x26>
 800d34c:	b97c      	cbnz	r4, 800d36e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 800d34e:	f386 8811 	msr	BASEPRI, r6
 800d352:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 800d356:	2301      	movs	r3, #1
 800d358:	461c      	mov	r4, r3
 800d35a:	b97b      	cbnz	r3, 800d37c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 800d35c:	f7fb ffe2 	bl	8009324 <next_timeout>
			      || (ticks <= next_to);
 800d360:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d364:	d0ed      	beq.n	800d342 <z_set_timeout_expiry+0x1a>
 800d366:	42a8      	cmp	r0, r5
 800d368:	dbec      	blt.n	800d344 <z_set_timeout_expiry+0x1c>
 800d36a:	2401      	movs	r4, #1
 800d36c:	e7ea      	b.n	800d344 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 800d36e:	4639      	mov	r1, r7
 800d370:	42a8      	cmp	r0, r5
 800d372:	bfa8      	it	ge
 800d374:	4628      	movge	r0, r5
 800d376:	f7fa fbd1 	bl	8007b1c <sys_clock_set_timeout>
 800d37a:	e7e8      	b.n	800d34e <z_set_timeout_expiry+0x26>
}
 800d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d37e <sys_clock_tick_get_32>:
{
 800d37e:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 800d380:	f7fc f8e6 	bl	8009550 <sys_clock_tick_get>
}
 800d384:	bd08      	pop	{r3, pc}

0800d386 <z_impl_k_uptime_ticks>:
{
 800d386:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 800d388:	f7fc f8e2 	bl	8009550 <sys_clock_tick_get>
}
 800d38c:	bd08      	pop	{r3, pc}

0800d38e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 800d38e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 800d390:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 800d392:	2300      	movs	r3, #0
 800d394:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
 800d396:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 800d39a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 800d39c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 800d39e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d3a0:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 800d3a2:	6343      	str	r3, [r0, #52]	; 0x34
}
 800d3a4:	4770      	bx	lr

0800d3a6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 800d3a6:	b510      	push	{r4, lr}
 800d3a8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 800d3aa:	f7ff ff9f 	bl	800d2ec <z_abort_timeout>

	if (inactive) {
 800d3ae:	b9a0      	cbnz	r0, 800d3da <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 800d3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3b2:	b10b      	cbz	r3, 800d3b8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 800d3b8:	f104 0018 	add.w	r0, r4, #24
 800d3bc:	f7ff fed1 	bl	800d162 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 800d3c0:	b158      	cbz	r0, 800d3da <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 800d3c2:	f7ff fe2e 	bl	800d022 <z_ready_thread>
	__asm__ volatile(
 800d3c6:	f04f 0310 	mov.w	r3, #16
 800d3ca:	f3ef 8011 	mrs	r0, BASEPRI
 800d3ce:	f383 8812 	msr	BASEPRI_MAX, r3
 800d3d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800d3d6:	f7ff fddc 	bl	800cf92 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 800d3da:	bd10      	pop	{r4, pc}

0800d3dc <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 800d3dc:	b108      	cbz	r0, 800d3e2 <poller_thread+0x6>
 800d3de:	3860      	subs	r0, #96	; 0x60
 800d3e0:	4770      	bx	lr
}
 800d3e2:	4770      	bx	lr

0800d3e4 <signal_poller>:
{
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 800d3e8:	6880      	ldr	r0, [r0, #8]
 800d3ea:	f7ff fff7 	bl	800d3dc <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 800d3ee:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
 800d3f0:	f013 0f02 	tst.w	r3, #2
 800d3f4:	d024      	beq.n	800d440 <signal_poller+0x5c>
 800d3f6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 800d3f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d3fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d400:	bf08      	it	eq
 800d402:	f112 0f02 	cmneq.w	r2, #2
 800d406:	d01d      	beq.n	800d444 <signal_poller+0x60>
	z_unpend_thread(thread);
 800d408:	f7ff fde0 	bl	800cfcc <z_unpend_thread>
	arch_thread_return_value_set(thread,
 800d40c:	2d08      	cmp	r5, #8
 800d40e:	d009      	beq.n	800d424 <signal_poller+0x40>
 800d410:	2300      	movs	r3, #0
 800d412:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
 800d414:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 800d416:	f013 0f1f 	tst.w	r3, #31
 800d41a:	d108      	bne.n	800d42e <signal_poller+0x4a>
	return node->next != NULL;
 800d41c:	69a3      	ldr	r3, [r4, #24]
 800d41e:	b123      	cbz	r3, 800d42a <signal_poller+0x46>
 800d420:	2300      	movs	r3, #0
 800d422:	e005      	b.n	800d430 <signal_poller+0x4c>
 800d424:	f06f 0303 	mvn.w	r3, #3
 800d428:	e7f3      	b.n	800d412 <signal_poller+0x2e>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <signal_poller+0x4c>
 800d42e:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
 800d430:	b90b      	cbnz	r3, 800d436 <signal_poller+0x52>
		return 0;
 800d432:	2000      	movs	r0, #0
 800d434:	e005      	b.n	800d442 <signal_poller+0x5e>
	z_ready_thread(thread);
 800d436:	4620      	mov	r0, r4
 800d438:	f7ff fdf3 	bl	800d022 <z_ready_thread>
	return 0;
 800d43c:	2000      	movs	r0, #0
 800d43e:	e000      	b.n	800d442 <signal_poller+0x5e>
		return 0;
 800d440:	2000      	movs	r0, #0
}
 800d442:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 800d444:	f06f 000a 	mvn.w	r0, #10
 800d448:	e7fb      	b.n	800d442 <signal_poller+0x5e>

0800d44a <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 800d44a:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 800d44c:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 800d44e:	7823      	ldrb	r3, [r4, #0]
 800d450:	b173      	cbz	r3, 800d470 <signal_triggered_work+0x26>
 800d452:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d456:	b15d      	cbz	r5, 800d470 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 800d458:	f1a4 0614 	sub.w	r6, r4, #20
 800d45c:	f104 0014 	add.w	r0, r4, #20
 800d460:	f7ff ff44 	bl	800d2ec <z_abort_timeout>
		twork->poll_result = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 800d468:	4631      	mov	r1, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	f7ff fd43 	bl	800cef6 <k_work_submit_to_queue>
	}

	return 0;
}
 800d470:	2000      	movs	r0, #0
 800d472:	bd70      	pop	{r4, r5, r6, pc}

0800d474 <signal_poll_event>:
{
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	4604      	mov	r4, r0
 800d478:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 800d47a:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 800d47c:	b1d6      	cbz	r6, 800d4b4 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 800d47e:	7873      	ldrb	r3, [r6, #1]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d00d      	beq.n	800d4a0 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 800d484:	2b02      	cmp	r3, #2
 800d486:	d012      	beq.n	800d4ae <signal_poll_event+0x3a>
		poller->is_polling = false;
 800d488:	2000      	movs	r0, #0
 800d48a:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 800d48c:	2300      	movs	r3, #0
 800d48e:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 800d490:	68e3      	ldr	r3, [r4, #12]
 800d492:	f3c3 3145 	ubfx	r1, r3, #13, #6
 800d496:	430d      	orrs	r5, r1
 800d498:	f365 3352 	bfi	r3, r5, #13, #6
 800d49c:	60e3      	str	r3, [r4, #12]
}
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 800d4a0:	f7ff ffa0 	bl	800d3e4 <signal_poller>
		poller->is_polling = false;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	daef      	bge.n	800d48c <signal_poll_event+0x18>
 800d4ac:	e7f7      	b.n	800d49e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 800d4ae:	f7ff ffcc 	bl	800d44a <signal_triggered_work>
 800d4b2:	e7f7      	b.n	800d4a4 <signal_poll_event+0x30>
	int retcode = 0;
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7e9      	b.n	800d48c <signal_poll_event+0x18>

0800d4b8 <z_handle_obj_poll_events>:
{
 800d4b8:	b508      	push	{r3, lr}
 800d4ba:	4603      	mov	r3, r0
	return list->head == list;
 800d4bc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
 800d4be:	4283      	cmp	r3, r0
 800d4c0:	d009      	beq.n	800d4d6 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 800d4c2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 800d4c4:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 800d4c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 800d4c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 800d4ce:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 800d4d0:	b108      	cbz	r0, 800d4d6 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 800d4d2:	f7ff ffcf 	bl	800d474 <signal_poll_event>
}
 800d4d6:	bd08      	pop	{r3, pc}

0800d4d8 <main>:
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
 800d4d8:	bf00      	nop

void __weak main(void)
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();
}
 800d4da:	4770      	bx	lr

0800d4dc <k_heap_init>:
{
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 800d4e2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 800d4e4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 800d4e6:	f7fe f8aa 	bl	800b63e <sys_heap_init>
}
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <memcpy>:
 800d4ec:	440a      	add	r2, r1
 800d4ee:	4291      	cmp	r1, r2
 800d4f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d4f4:	d100      	bne.n	800d4f8 <memcpy+0xc>
 800d4f6:	4770      	bx	lr
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d502:	4291      	cmp	r1, r2
 800d504:	d1f9      	bne.n	800d4fa <memcpy+0xe>
 800d506:	bd10      	pop	{r4, pc}

0800d508 <memset>:
 800d508:	4402      	add	r2, r0
 800d50a:	4603      	mov	r3, r0
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d100      	bne.n	800d512 <memset+0xa>
 800d510:	4770      	bx	lr
 800d512:	f803 1b01 	strb.w	r1, [r3], #1
 800d516:	e7f9      	b.n	800d50c <memset+0x4>

0800d518 <__cvt>:
 800d518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d51c:	b088      	sub	sp, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	461f      	mov	r7, r3
 800d522:	4614      	mov	r4, r2
 800d524:	bfb8      	it	lt
 800d526:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d52a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d52c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d52e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d532:	bfb6      	itet	lt
 800d534:	461f      	movlt	r7, r3
 800d536:	2300      	movge	r3, #0
 800d538:	232d      	movlt	r3, #45	; 0x2d
 800d53a:	7013      	strb	r3, [r2, #0]
 800d53c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d53e:	f023 0820 	bic.w	r8, r3, #32
 800d542:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d546:	d005      	beq.n	800d554 <__cvt+0x3c>
 800d548:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d54c:	d100      	bne.n	800d550 <__cvt+0x38>
 800d54e:	3501      	adds	r5, #1
 800d550:	2302      	movs	r3, #2
 800d552:	e000      	b.n	800d556 <__cvt+0x3e>
 800d554:	2303      	movs	r3, #3
 800d556:	aa07      	add	r2, sp, #28
 800d558:	9204      	str	r2, [sp, #16]
 800d55a:	aa06      	add	r2, sp, #24
 800d55c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d560:	e9cd 3500 	strd	r3, r5, [sp]
 800d564:	4622      	mov	r2, r4
 800d566:	463b      	mov	r3, r7
 800d568:	f7f3 fc7e 	bl	8000e68 <_dtoa_r>
 800d56c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d570:	4606      	mov	r6, r0
 800d572:	d102      	bne.n	800d57a <__cvt+0x62>
 800d574:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d576:	07db      	lsls	r3, r3, #31
 800d578:	d522      	bpl.n	800d5c0 <__cvt+0xa8>
 800d57a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d57e:	eb06 0905 	add.w	r9, r6, r5
 800d582:	d110      	bne.n	800d5a6 <__cvt+0x8e>
 800d584:	7833      	ldrb	r3, [r6, #0]
 800d586:	2b30      	cmp	r3, #48	; 0x30
 800d588:	d10a      	bne.n	800d5a0 <__cvt+0x88>
 800d58a:	2200      	movs	r2, #0
 800d58c:	2300      	movs	r3, #0
 800d58e:	4620      	mov	r0, r4
 800d590:	4639      	mov	r1, r7
 800d592:	f7f3 fa93 	bl	8000abc <__aeabi_dcmpeq>
 800d596:	b918      	cbnz	r0, 800d5a0 <__cvt+0x88>
 800d598:	f1c5 0501 	rsb	r5, r5, #1
 800d59c:	f8ca 5000 	str.w	r5, [sl]
 800d5a0:	f8da 3000 	ldr.w	r3, [sl]
 800d5a4:	4499      	add	r9, r3
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	4639      	mov	r1, r7
 800d5ae:	f7f3 fa85 	bl	8000abc <__aeabi_dcmpeq>
 800d5b2:	b108      	cbz	r0, 800d5b8 <__cvt+0xa0>
 800d5b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d5b8:	2230      	movs	r2, #48	; 0x30
 800d5ba:	9b07      	ldr	r3, [sp, #28]
 800d5bc:	454b      	cmp	r3, r9
 800d5be:	d307      	bcc.n	800d5d0 <__cvt+0xb8>
 800d5c0:	9b07      	ldr	r3, [sp, #28]
 800d5c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d5c4:	1b9b      	subs	r3, r3, r6
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	6013      	str	r3, [r2, #0]
 800d5ca:	b008      	add	sp, #32
 800d5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d0:	1c59      	adds	r1, r3, #1
 800d5d2:	9107      	str	r1, [sp, #28]
 800d5d4:	701a      	strb	r2, [r3, #0]
 800d5d6:	e7f0      	b.n	800d5ba <__cvt+0xa2>

0800d5d8 <__exponent>:
 800d5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2900      	cmp	r1, #0
 800d5de:	bfb8      	it	lt
 800d5e0:	4249      	neglt	r1, r1
 800d5e2:	f803 2b02 	strb.w	r2, [r3], #2
 800d5e6:	bfb4      	ite	lt
 800d5e8:	222d      	movlt	r2, #45	; 0x2d
 800d5ea:	222b      	movge	r2, #43	; 0x2b
 800d5ec:	2909      	cmp	r1, #9
 800d5ee:	7042      	strb	r2, [r0, #1]
 800d5f0:	dd2a      	ble.n	800d648 <__exponent+0x70>
 800d5f2:	f10d 0407 	add.w	r4, sp, #7
 800d5f6:	46a4      	mov	ip, r4
 800d5f8:	270a      	movs	r7, #10
 800d5fa:	46a6      	mov	lr, r4
 800d5fc:	460a      	mov	r2, r1
 800d5fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800d602:	fb07 1516 	mls	r5, r7, r6, r1
 800d606:	3530      	adds	r5, #48	; 0x30
 800d608:	2a63      	cmp	r2, #99	; 0x63
 800d60a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d60e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d612:	4631      	mov	r1, r6
 800d614:	dcf1      	bgt.n	800d5fa <__exponent+0x22>
 800d616:	3130      	adds	r1, #48	; 0x30
 800d618:	f1ae 0502 	sub.w	r5, lr, #2
 800d61c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d620:	1c44      	adds	r4, r0, #1
 800d622:	4629      	mov	r1, r5
 800d624:	4561      	cmp	r1, ip
 800d626:	d30a      	bcc.n	800d63e <__exponent+0x66>
 800d628:	f10d 0209 	add.w	r2, sp, #9
 800d62c:	eba2 020e 	sub.w	r2, r2, lr
 800d630:	4565      	cmp	r5, ip
 800d632:	bf88      	it	hi
 800d634:	2200      	movhi	r2, #0
 800d636:	4413      	add	r3, r2
 800d638:	1a18      	subs	r0, r3, r0
 800d63a:	b003      	add	sp, #12
 800d63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d642:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d646:	e7ed      	b.n	800d624 <__exponent+0x4c>
 800d648:	2330      	movs	r3, #48	; 0x30
 800d64a:	3130      	adds	r1, #48	; 0x30
 800d64c:	7083      	strb	r3, [r0, #2]
 800d64e:	70c1      	strb	r1, [r0, #3]
 800d650:	1d03      	adds	r3, r0, #4
 800d652:	e7f1      	b.n	800d638 <__exponent+0x60>

0800d654 <_printf_common>:
 800d654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d658:	4616      	mov	r6, r2
 800d65a:	4699      	mov	r9, r3
 800d65c:	688a      	ldr	r2, [r1, #8]
 800d65e:	690b      	ldr	r3, [r1, #16]
 800d660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d664:	4293      	cmp	r3, r2
 800d666:	bfb8      	it	lt
 800d668:	4613      	movlt	r3, r2
 800d66a:	6033      	str	r3, [r6, #0]
 800d66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d670:	4607      	mov	r7, r0
 800d672:	460c      	mov	r4, r1
 800d674:	b10a      	cbz	r2, 800d67a <_printf_common+0x26>
 800d676:	3301      	adds	r3, #1
 800d678:	6033      	str	r3, [r6, #0]
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	0699      	lsls	r1, r3, #26
 800d67e:	bf42      	ittt	mi
 800d680:	6833      	ldrmi	r3, [r6, #0]
 800d682:	3302      	addmi	r3, #2
 800d684:	6033      	strmi	r3, [r6, #0]
 800d686:	6825      	ldr	r5, [r4, #0]
 800d688:	f015 0506 	ands.w	r5, r5, #6
 800d68c:	d106      	bne.n	800d69c <_printf_common+0x48>
 800d68e:	f104 0a19 	add.w	sl, r4, #25
 800d692:	68e3      	ldr	r3, [r4, #12]
 800d694:	6832      	ldr	r2, [r6, #0]
 800d696:	1a9b      	subs	r3, r3, r2
 800d698:	42ab      	cmp	r3, r5
 800d69a:	dc26      	bgt.n	800d6ea <_printf_common+0x96>
 800d69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6a0:	1e13      	subs	r3, r2, #0
 800d6a2:	6822      	ldr	r2, [r4, #0]
 800d6a4:	bf18      	it	ne
 800d6a6:	2301      	movne	r3, #1
 800d6a8:	0692      	lsls	r2, r2, #26
 800d6aa:	d42b      	bmi.n	800d704 <_printf_common+0xb0>
 800d6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6b0:	4649      	mov	r1, r9
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	47c0      	blx	r8
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	d01e      	beq.n	800d6f8 <_printf_common+0xa4>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	68e5      	ldr	r5, [r4, #12]
 800d6be:	6832      	ldr	r2, [r6, #0]
 800d6c0:	f003 0306 	and.w	r3, r3, #6
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	bf08      	it	eq
 800d6c8:	1aad      	subeq	r5, r5, r2
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	6922      	ldr	r2, [r4, #16]
 800d6ce:	bf0c      	ite	eq
 800d6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6d4:	2500      	movne	r5, #0
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	bfc4      	itt	gt
 800d6da:	1a9b      	subgt	r3, r3, r2
 800d6dc:	18ed      	addgt	r5, r5, r3
 800d6de:	2600      	movs	r6, #0
 800d6e0:	341a      	adds	r4, #26
 800d6e2:	42b5      	cmp	r5, r6
 800d6e4:	d11a      	bne.n	800d71c <_printf_common+0xc8>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	e008      	b.n	800d6fc <_printf_common+0xa8>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	4652      	mov	r2, sl
 800d6ee:	4649      	mov	r1, r9
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	47c0      	blx	r8
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d103      	bne.n	800d700 <_printf_common+0xac>
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d700:	3501      	adds	r5, #1
 800d702:	e7c6      	b.n	800d692 <_printf_common+0x3e>
 800d704:	18e1      	adds	r1, r4, r3
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	2030      	movs	r0, #48	; 0x30
 800d70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d70e:	4422      	add	r2, r4
 800d710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d718:	3302      	adds	r3, #2
 800d71a:	e7c7      	b.n	800d6ac <_printf_common+0x58>
 800d71c:	2301      	movs	r3, #1
 800d71e:	4622      	mov	r2, r4
 800d720:	4649      	mov	r1, r9
 800d722:	4638      	mov	r0, r7
 800d724:	47c0      	blx	r8
 800d726:	3001      	adds	r0, #1
 800d728:	d0e6      	beq.n	800d6f8 <_printf_common+0xa4>
 800d72a:	3601      	adds	r6, #1
 800d72c:	e7d9      	b.n	800d6e2 <_printf_common+0x8e>

0800d72e <strncpy>:
 800d72e:	b510      	push	{r4, lr}
 800d730:	3901      	subs	r1, #1
 800d732:	4603      	mov	r3, r0
 800d734:	b132      	cbz	r2, 800d744 <strncpy+0x16>
 800d736:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d73a:	f803 4b01 	strb.w	r4, [r3], #1
 800d73e:	3a01      	subs	r2, #1
 800d740:	2c00      	cmp	r4, #0
 800d742:	d1f7      	bne.n	800d734 <strncpy+0x6>
 800d744:	441a      	add	r2, r3
 800d746:	2100      	movs	r1, #0
 800d748:	4293      	cmp	r3, r2
 800d74a:	d100      	bne.n	800d74e <strncpy+0x20>
 800d74c:	bd10      	pop	{r4, pc}
 800d74e:	f803 1b01 	strb.w	r1, [r3], #1
 800d752:	e7f9      	b.n	800d748 <strncpy+0x1a>

0800d754 <strnlen>:
 800d754:	b510      	push	{r4, lr}
 800d756:	4602      	mov	r2, r0
 800d758:	4401      	add	r1, r0
 800d75a:	428a      	cmp	r2, r1
 800d75c:	4613      	mov	r3, r2
 800d75e:	d003      	beq.n	800d768 <strnlen+0x14>
 800d760:	781c      	ldrb	r4, [r3, #0]
 800d762:	3201      	adds	r2, #1
 800d764:	2c00      	cmp	r4, #0
 800d766:	d1f8      	bne.n	800d75a <strnlen+0x6>
 800d768:	1a18      	subs	r0, r3, r0
 800d76a:	bd10      	pop	{r4, pc}

0800d76c <quorem>:
 800d76c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	6903      	ldr	r3, [r0, #16]
 800d772:	690c      	ldr	r4, [r1, #16]
 800d774:	42a3      	cmp	r3, r4
 800d776:	4607      	mov	r7, r0
 800d778:	db7d      	blt.n	800d876 <quorem+0x10a>
 800d77a:	3c01      	subs	r4, #1
 800d77c:	f101 0814 	add.w	r8, r1, #20
 800d780:	f100 0514 	add.w	r5, r0, #20
 800d784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d78e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d792:	3301      	adds	r3, #1
 800d794:	429a      	cmp	r2, r3
 800d796:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d79a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d79e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7a2:	d32e      	bcc.n	800d802 <quorem+0x96>
 800d7a4:	f04f 0e00 	mov.w	lr, #0
 800d7a8:	4640      	mov	r0, r8
 800d7aa:	46ac      	mov	ip, r5
 800d7ac:	46f2      	mov	sl, lr
 800d7ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7b2:	b293      	uxth	r3, r2
 800d7b4:	fb06 e303 	mla	r3, r6, r3, lr
 800d7b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d7bc:	0c12      	lsrs	r2, r2, #16
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	fb06 e202 	mla	r2, r6, r2, lr
 800d7c4:	ebaa 0303 	sub.w	r3, sl, r3
 800d7c8:	f8dc a000 	ldr.w	sl, [ip]
 800d7cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d7d0:	b292      	uxth	r2, r2
 800d7d2:	fa13 f38a 	uxtah	r3, r3, sl
 800d7d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d7da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7e4:	4581      	cmp	r9, r0
 800d7e6:	f84c 3b04 	str.w	r3, [ip], #4
 800d7ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7ee:	d2de      	bcs.n	800d7ae <quorem+0x42>
 800d7f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7f4:	b92b      	cbnz	r3, 800d802 <quorem+0x96>
 800d7f6:	9b01      	ldr	r3, [sp, #4]
 800d7f8:	3b04      	subs	r3, #4
 800d7fa:	429d      	cmp	r5, r3
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	d32e      	bcc.n	800d85e <quorem+0xf2>
 800d800:	613c      	str	r4, [r7, #16]
 800d802:	4638      	mov	r0, r7
 800d804:	f000 f886 	bl	800d914 <__mcmp>
 800d808:	2800      	cmp	r0, #0
 800d80a:	db24      	blt.n	800d856 <quorem+0xea>
 800d80c:	3601      	adds	r6, #1
 800d80e:	4628      	mov	r0, r5
 800d810:	f04f 0c00 	mov.w	ip, #0
 800d814:	f858 2b04 	ldr.w	r2, [r8], #4
 800d818:	f8d0 e000 	ldr.w	lr, [r0]
 800d81c:	b293      	uxth	r3, r2
 800d81e:	ebac 0303 	sub.w	r3, ip, r3
 800d822:	0c12      	lsrs	r2, r2, #16
 800d824:	fa13 f38e 	uxtah	r3, r3, lr
 800d828:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d82c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d830:	b29b      	uxth	r3, r3
 800d832:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d836:	45c1      	cmp	r9, r8
 800d838:	f840 3b04 	str.w	r3, [r0], #4
 800d83c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d840:	d2e8      	bcs.n	800d814 <quorem+0xa8>
 800d842:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d84a:	b922      	cbnz	r2, 800d856 <quorem+0xea>
 800d84c:	3b04      	subs	r3, #4
 800d84e:	429d      	cmp	r5, r3
 800d850:	461a      	mov	r2, r3
 800d852:	d30a      	bcc.n	800d86a <quorem+0xfe>
 800d854:	613c      	str	r4, [r7, #16]
 800d856:	4630      	mov	r0, r6
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	3b04      	subs	r3, #4
 800d862:	2a00      	cmp	r2, #0
 800d864:	d1cc      	bne.n	800d800 <quorem+0x94>
 800d866:	3c01      	subs	r4, #1
 800d868:	e7c7      	b.n	800d7fa <quorem+0x8e>
 800d86a:	6812      	ldr	r2, [r2, #0]
 800d86c:	3b04      	subs	r3, #4
 800d86e:	2a00      	cmp	r2, #0
 800d870:	d1f0      	bne.n	800d854 <quorem+0xe8>
 800d872:	3c01      	subs	r4, #1
 800d874:	e7eb      	b.n	800d84e <quorem+0xe2>
 800d876:	2000      	movs	r0, #0
 800d878:	e7ee      	b.n	800d858 <quorem+0xec>

0800d87a <__hi0bits>:
 800d87a:	0c02      	lsrs	r2, r0, #16
 800d87c:	0412      	lsls	r2, r2, #16
 800d87e:	4603      	mov	r3, r0
 800d880:	b9ca      	cbnz	r2, 800d8b6 <__hi0bits+0x3c>
 800d882:	0403      	lsls	r3, r0, #16
 800d884:	2010      	movs	r0, #16
 800d886:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d88a:	bf04      	itt	eq
 800d88c:	021b      	lsleq	r3, r3, #8
 800d88e:	3008      	addeq	r0, #8
 800d890:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d894:	bf04      	itt	eq
 800d896:	011b      	lsleq	r3, r3, #4
 800d898:	3004      	addeq	r0, #4
 800d89a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d89e:	bf04      	itt	eq
 800d8a0:	009b      	lsleq	r3, r3, #2
 800d8a2:	3002      	addeq	r0, #2
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	db05      	blt.n	800d8b4 <__hi0bits+0x3a>
 800d8a8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d8ac:	f100 0001 	add.w	r0, r0, #1
 800d8b0:	bf08      	it	eq
 800d8b2:	2020      	moveq	r0, #32
 800d8b4:	4770      	bx	lr
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	e7e5      	b.n	800d886 <__hi0bits+0xc>

0800d8ba <__lo0bits>:
 800d8ba:	6803      	ldr	r3, [r0, #0]
 800d8bc:	4602      	mov	r2, r0
 800d8be:	f013 0007 	ands.w	r0, r3, #7
 800d8c2:	d00b      	beq.n	800d8dc <__lo0bits+0x22>
 800d8c4:	07d9      	lsls	r1, r3, #31
 800d8c6:	d421      	bmi.n	800d90c <__lo0bits+0x52>
 800d8c8:	0798      	lsls	r0, r3, #30
 800d8ca:	bf49      	itett	mi
 800d8cc:	085b      	lsrmi	r3, r3, #1
 800d8ce:	089b      	lsrpl	r3, r3, #2
 800d8d0:	2001      	movmi	r0, #1
 800d8d2:	6013      	strmi	r3, [r2, #0]
 800d8d4:	bf5c      	itt	pl
 800d8d6:	6013      	strpl	r3, [r2, #0]
 800d8d8:	2002      	movpl	r0, #2
 800d8da:	4770      	bx	lr
 800d8dc:	b299      	uxth	r1, r3
 800d8de:	b909      	cbnz	r1, 800d8e4 <__lo0bits+0x2a>
 800d8e0:	0c1b      	lsrs	r3, r3, #16
 800d8e2:	2010      	movs	r0, #16
 800d8e4:	b2d9      	uxtb	r1, r3
 800d8e6:	b909      	cbnz	r1, 800d8ec <__lo0bits+0x32>
 800d8e8:	3008      	adds	r0, #8
 800d8ea:	0a1b      	lsrs	r3, r3, #8
 800d8ec:	0719      	lsls	r1, r3, #28
 800d8ee:	bf04      	itt	eq
 800d8f0:	091b      	lsreq	r3, r3, #4
 800d8f2:	3004      	addeq	r0, #4
 800d8f4:	0799      	lsls	r1, r3, #30
 800d8f6:	bf04      	itt	eq
 800d8f8:	089b      	lsreq	r3, r3, #2
 800d8fa:	3002      	addeq	r0, #2
 800d8fc:	07d9      	lsls	r1, r3, #31
 800d8fe:	d403      	bmi.n	800d908 <__lo0bits+0x4e>
 800d900:	085b      	lsrs	r3, r3, #1
 800d902:	f100 0001 	add.w	r0, r0, #1
 800d906:	d003      	beq.n	800d910 <__lo0bits+0x56>
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	4770      	bx	lr
 800d90c:	2000      	movs	r0, #0
 800d90e:	4770      	bx	lr
 800d910:	2020      	movs	r0, #32
 800d912:	4770      	bx	lr

0800d914 <__mcmp>:
 800d914:	690a      	ldr	r2, [r1, #16]
 800d916:	4603      	mov	r3, r0
 800d918:	6900      	ldr	r0, [r0, #16]
 800d91a:	1a80      	subs	r0, r0, r2
 800d91c:	b530      	push	{r4, r5, lr}
 800d91e:	d10d      	bne.n	800d93c <__mcmp+0x28>
 800d920:	3314      	adds	r3, #20
 800d922:	3114      	adds	r1, #20
 800d924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d92c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d934:	4295      	cmp	r5, r2
 800d936:	d002      	beq.n	800d93e <__mcmp+0x2a>
 800d938:	d304      	bcc.n	800d944 <__mcmp+0x30>
 800d93a:	2001      	movs	r0, #1
 800d93c:	bd30      	pop	{r4, r5, pc}
 800d93e:	42a3      	cmp	r3, r4
 800d940:	d3f4      	bcc.n	800d92c <__mcmp+0x18>
 800d942:	e7fb      	b.n	800d93c <__mcmp+0x28>
 800d944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d948:	e7f8      	b.n	800d93c <__mcmp+0x28>

0800d94a <_calloc_r>:
 800d94a:	b538      	push	{r3, r4, r5, lr}
 800d94c:	fb02 f501 	mul.w	r5, r2, r1
 800d950:	4629      	mov	r1, r5
 800d952:	f7fc fa25 	bl	8009da0 <_malloc_r>
 800d956:	4604      	mov	r4, r0
 800d958:	b118      	cbz	r0, 800d962 <_calloc_r+0x18>
 800d95a:	462a      	mov	r2, r5
 800d95c:	2100      	movs	r1, #0
 800d95e:	f7ff fdd3 	bl	800d508 <memset>
 800d962:	4620      	mov	r0, r4
 800d964:	bd38      	pop	{r3, r4, r5, pc}

0800d966 <__ascii_mbtowc>:
 800d966:	b082      	sub	sp, #8
 800d968:	b901      	cbnz	r1, 800d96c <__ascii_mbtowc+0x6>
 800d96a:	a901      	add	r1, sp, #4
 800d96c:	b142      	cbz	r2, 800d980 <__ascii_mbtowc+0x1a>
 800d96e:	b14b      	cbz	r3, 800d984 <__ascii_mbtowc+0x1e>
 800d970:	7813      	ldrb	r3, [r2, #0]
 800d972:	600b      	str	r3, [r1, #0]
 800d974:	7812      	ldrb	r2, [r2, #0]
 800d976:	1e10      	subs	r0, r2, #0
 800d978:	bf18      	it	ne
 800d97a:	2001      	movne	r0, #1
 800d97c:	b002      	add	sp, #8
 800d97e:	4770      	bx	lr
 800d980:	4610      	mov	r0, r2
 800d982:	e7fb      	b.n	800d97c <__ascii_mbtowc+0x16>
 800d984:	f06f 0001 	mvn.w	r0, #1
 800d988:	e7f8      	b.n	800d97c <__ascii_mbtowc+0x16>

0800d98a <__sfputc_r>:
 800d98a:	6893      	ldr	r3, [r2, #8]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	2b00      	cmp	r3, #0
 800d990:	b410      	push	{r4}
 800d992:	6093      	str	r3, [r2, #8]
 800d994:	da07      	bge.n	800d9a6 <__sfputc_r+0x1c>
 800d996:	6994      	ldr	r4, [r2, #24]
 800d998:	42a3      	cmp	r3, r4
 800d99a:	db01      	blt.n	800d9a0 <__sfputc_r+0x16>
 800d99c:	290a      	cmp	r1, #10
 800d99e:	d102      	bne.n	800d9a6 <__sfputc_r+0x1c>
 800d9a0:	bc10      	pop	{r4}
 800d9a2:	f7fd ba3b 	b.w	800ae1c <__swbuf_r>
 800d9a6:	6813      	ldr	r3, [r2, #0]
 800d9a8:	1c58      	adds	r0, r3, #1
 800d9aa:	6010      	str	r0, [r2, #0]
 800d9ac:	7019      	strb	r1, [r3, #0]
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	bc10      	pop	{r4}
 800d9b2:	4770      	bx	lr

0800d9b4 <__sfputs_r>:
 800d9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460f      	mov	r7, r1
 800d9ba:	4614      	mov	r4, r2
 800d9bc:	18d5      	adds	r5, r2, r3
 800d9be:	42ac      	cmp	r4, r5
 800d9c0:	d101      	bne.n	800d9c6 <__sfputs_r+0x12>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	e007      	b.n	800d9d6 <__sfputs_r+0x22>
 800d9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ca:	463a      	mov	r2, r7
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7ff ffdc 	bl	800d98a <__sfputc_r>
 800d9d2:	1c43      	adds	r3, r0, #1
 800d9d4:	d1f3      	bne.n	800d9be <__sfputs_r+0xa>
 800d9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9d8 <__ascii_wctomb>:
 800d9d8:	4603      	mov	r3, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	b141      	cbz	r1, 800d9f0 <__ascii_wctomb+0x18>
 800d9de:	2aff      	cmp	r2, #255	; 0xff
 800d9e0:	d904      	bls.n	800d9ec <__ascii_wctomb+0x14>
 800d9e2:	228a      	movs	r2, #138	; 0x8a
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9ea:	4770      	bx	lr
 800d9ec:	700a      	strb	r2, [r1, #0]
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	4770      	bx	lr

0800d9f2 <abort>:
 800d9f2:	b508      	push	{r3, lr}
 800d9f4:	2006      	movs	r0, #6
 800d9f6:	f7fd fc8f 	bl	800b318 <raise>
 800d9fa:	2001      	movs	r0, #1
 800d9fc:	f7f6 ffe4 	bl	80049c8 <_exit>

0800da00 <__sfmoreglue>:
 800da00:	b570      	push	{r4, r5, r6, lr}
 800da02:	2268      	movs	r2, #104	; 0x68
 800da04:	1e4d      	subs	r5, r1, #1
 800da06:	4355      	muls	r5, r2
 800da08:	460e      	mov	r6, r1
 800da0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da0e:	f7fc f9c7 	bl	8009da0 <_malloc_r>
 800da12:	4604      	mov	r4, r0
 800da14:	b140      	cbz	r0, 800da28 <__sfmoreglue+0x28>
 800da16:	2100      	movs	r1, #0
 800da18:	e9c0 1600 	strd	r1, r6, [r0]
 800da1c:	300c      	adds	r0, #12
 800da1e:	60a0      	str	r0, [r4, #8]
 800da20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da24:	f7ff fd70 	bl	800d508 <memset>
 800da28:	4620      	mov	r0, r4
 800da2a:	bd70      	pop	{r4, r5, r6, pc}

0800da2c <_fwalk_reent>:
 800da2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da30:	4606      	mov	r6, r0
 800da32:	4688      	mov	r8, r1
 800da34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da38:	2700      	movs	r7, #0
 800da3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da3e:	f1b9 0901 	subs.w	r9, r9, #1
 800da42:	d505      	bpl.n	800da50 <_fwalk_reent+0x24>
 800da44:	6824      	ldr	r4, [r4, #0]
 800da46:	2c00      	cmp	r4, #0
 800da48:	d1f7      	bne.n	800da3a <_fwalk_reent+0xe>
 800da4a:	4638      	mov	r0, r7
 800da4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da50:	89ab      	ldrh	r3, [r5, #12]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d907      	bls.n	800da66 <_fwalk_reent+0x3a>
 800da56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da5a:	3301      	adds	r3, #1
 800da5c:	d003      	beq.n	800da66 <_fwalk_reent+0x3a>
 800da5e:	4629      	mov	r1, r5
 800da60:	4630      	mov	r0, r6
 800da62:	47c0      	blx	r8
 800da64:	4307      	orrs	r7, r0
 800da66:	3568      	adds	r5, #104	; 0x68
 800da68:	e7e9      	b.n	800da3e <_fwalk_reent+0x12>

0800da6a <__swhatbuf_r>:
 800da6a:	b570      	push	{r4, r5, r6, lr}
 800da6c:	460e      	mov	r6, r1
 800da6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da72:	2900      	cmp	r1, #0
 800da74:	b096      	sub	sp, #88	; 0x58
 800da76:	4614      	mov	r4, r2
 800da78:	461d      	mov	r5, r3
 800da7a:	da08      	bge.n	800da8e <__swhatbuf_r+0x24>
 800da7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	602a      	str	r2, [r5, #0]
 800da84:	061a      	lsls	r2, r3, #24
 800da86:	d410      	bmi.n	800daaa <__swhatbuf_r+0x40>
 800da88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da8c:	e00e      	b.n	800daac <__swhatbuf_r+0x42>
 800da8e:	466a      	mov	r2, sp
 800da90:	f7fd fc7e 	bl	800b390 <_fstat_r>
 800da94:	2800      	cmp	r0, #0
 800da96:	dbf1      	blt.n	800da7c <__swhatbuf_r+0x12>
 800da98:	9a01      	ldr	r2, [sp, #4]
 800da9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800daa2:	425a      	negs	r2, r3
 800daa4:	415a      	adcs	r2, r3
 800daa6:	602a      	str	r2, [r5, #0]
 800daa8:	e7ee      	b.n	800da88 <__swhatbuf_r+0x1e>
 800daaa:	2340      	movs	r3, #64	; 0x40
 800daac:	2000      	movs	r0, #0
 800daae:	6023      	str	r3, [r4, #0]
 800dab0:	b016      	add	sp, #88	; 0x58
 800dab2:	bd70      	pop	{r4, r5, r6, pc}

0800dab4 <_raise_r>:
 800dab4:	291f      	cmp	r1, #31
 800dab6:	b538      	push	{r3, r4, r5, lr}
 800dab8:	4604      	mov	r4, r0
 800daba:	460d      	mov	r5, r1
 800dabc:	d904      	bls.n	800dac8 <_raise_r+0x14>
 800dabe:	2316      	movs	r3, #22
 800dac0:	6003      	str	r3, [r0, #0]
 800dac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800daca:	b112      	cbz	r2, 800dad2 <_raise_r+0x1e>
 800dacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dad0:	b94b      	cbnz	r3, 800dae6 <_raise_r+0x32>
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 f816 	bl	800db04 <_getpid_r>
 800dad8:	462a      	mov	r2, r5
 800dada:	4601      	mov	r1, r0
 800dadc:	4620      	mov	r0, r4
 800dade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae2:	f7fd bc21 	b.w	800b328 <_kill_r>
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d00a      	beq.n	800db00 <_raise_r+0x4c>
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	d103      	bne.n	800daf6 <_raise_r+0x42>
 800daee:	2316      	movs	r3, #22
 800daf0:	6003      	str	r3, [r0, #0]
 800daf2:	2001      	movs	r0, #1
 800daf4:	e7e7      	b.n	800dac6 <_raise_r+0x12>
 800daf6:	2400      	movs	r4, #0
 800daf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dafc:	4628      	mov	r0, r5
 800dafe:	4798      	blx	r3
 800db00:	2000      	movs	r0, #0
 800db02:	e7e0      	b.n	800dac6 <_raise_r+0x12>

0800db04 <_getpid_r>:
 800db04:	f7fe b9f3 	b.w	800beee <_getpid>

0800db08 <__sread>:
 800db08:	b510      	push	{r4, lr}
 800db0a:	460c      	mov	r4, r1
 800db0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db10:	f7fd fc72 	bl	800b3f8 <_read_r>
 800db14:	2800      	cmp	r0, #0
 800db16:	bfab      	itete	ge
 800db18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db1a:	89a3      	ldrhlt	r3, [r4, #12]
 800db1c:	181b      	addge	r3, r3, r0
 800db1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db22:	bfac      	ite	ge
 800db24:	6563      	strge	r3, [r4, #84]	; 0x54
 800db26:	81a3      	strhlt	r3, [r4, #12]
 800db28:	bd10      	pop	{r4, pc}

0800db2a <__swrite>:
 800db2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2e:	461f      	mov	r7, r3
 800db30:	898b      	ldrh	r3, [r1, #12]
 800db32:	05db      	lsls	r3, r3, #23
 800db34:	4605      	mov	r5, r0
 800db36:	460c      	mov	r4, r1
 800db38:	4616      	mov	r6, r2
 800db3a:	d505      	bpl.n	800db48 <__swrite+0x1e>
 800db3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db40:	2302      	movs	r3, #2
 800db42:	2200      	movs	r2, #0
 800db44:	f7fd fc46 	bl	800b3d4 <_lseek_r>
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db52:	81a3      	strh	r3, [r4, #12]
 800db54:	4632      	mov	r2, r6
 800db56:	463b      	mov	r3, r7
 800db58:	4628      	mov	r0, r5
 800db5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db5e:	f7fd bbf5 	b.w	800b34c <_write_r>

0800db62 <__sseek>:
 800db62:	b510      	push	{r4, lr}
 800db64:	460c      	mov	r4, r1
 800db66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db6a:	f7fd fc33 	bl	800b3d4 <_lseek_r>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	bf15      	itete	ne
 800db74:	6560      	strne	r0, [r4, #84]	; 0x54
 800db76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db7e:	81a3      	strheq	r3, [r4, #12]
 800db80:	bf18      	it	ne
 800db82:	81a3      	strhne	r3, [r4, #12]
 800db84:	bd10      	pop	{r4, pc}

0800db86 <__sclose>:
 800db86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8a:	f7fd bbf1 	b.w	800b370 <_close_r>
